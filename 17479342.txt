    Disable in-source CMake build
    
    Better to use GNU make file instead.
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Futher tweaks to WITH_CPU_SSE option
    
    Explicitly disable SSE kernels in Cycles when this option is used.
    Cycles: enable double promotion warning /w gcc
    Cycles: Add support for debug passes
    
    Currently only summed number of traversal steps and intersections used by the
    camera ray intersection pass is implemented, but in the future we will support
    more debug passes which would help checking what things makes the scene slow.
    Example of such extra passes could be number of bounces, time spent on the
    shader tree evaluation and so.
    
    Implementation from the Cycles side is pretty much straightforward, could only
    mention here that it's a build-time option disabled by default.
    
    From the blender side it's implemented as a PASS_DEBUG with several subtypes
    possible. This way we don't need to create an extra DNA pass type for each of
    the debug passes, saving us a bits.
    
    Reviewers: campbellbarton
    
    Reviewed By: campbellbarton
    
    Differential Revision: https://developer.blender.org/D813
    Cycles: Add support of Glog logging
    
    This commit makes it possible to use Glog library for the debug logging.
    For now only possible when using CMake and in order to use the logging
    the WITH_CYCLES_LOGGING configuration variable is to be enabled.
    
    When this option is not enabled or when using Scons there's no difference
    in Cycles behavior at all, when using logging and no output to the console
    impact is gonna to be minimal.
    
    This is done in order to make it possible to have debug logging persistent
    in code (without need to add it when troubleshooting some bug and removing
    it afterwards).
    
    For now actual logging is not placed yet, only all the functions needed for
    the logging are written and so.
    Cycles: use SYSTEM for external includes
    Cycles: only use -fno-rtti with OSL (conflicts with -fsanitize=vptr)
    Cycles: Fix compilation error of AVX2 kernel with GCC/Clang
    Cycles: Add an AVX2 CPU kernel.
    
    This kernel is compiled with AVX2, FMA3, and BMI compiler flags. At the moment only Intel Haswell benefits from this, but future AMD CPUs will have these instructions as well.
    
    Makes rendering on Haswell CPUs a few percent faster, only benchmarked with clang on OS X though.
    
    Part of my GSoC 2014.
    Fix '-Werror=float-conversion' error with gcc < 4.9, for CMake
    
    Scons is still TODO.
    Code cleanup: Add -Werror=float-conversion to Cycles
    Cycles: fix 3-5% performance regression in msvc builds caused by a typo in stackchecking flags.
    CMake: disable SSE flags if gcc/clang don't support
    Code cleanup: cmake
    Cycles: enable /arch:AVX in msvc 11 and later versions for avx kernel
    
    This enables VEX-encoding in AVX kernel for windows msvc builds and gives 5-10% speedup for different scenes.
    
    Reviewers: juicyfruit, dingto, brecht
    
    Reviewed By: brecht
    
    CC: brecht
    
    Differential Revision: https://developer.blender.org/D284
    Scons: refactor cycles kernel code to avoid building the AVX kernel with
    compilers that don't support it.
    
    CMake still needs to updated to work the same for consistency, but this should
    fix the OS X buildbot at least.
    Revert recent OpenEXR cmake/linux fix and earlier OS X fix to use GCC for AVX.
    
    Both need a better solution and break working builds.
    Attempt to fix T38373: cmake linux build failure with OpenEXR.
    Cycles Standalone: GUI flag was not passed correctly to the code, own mistake when I added the GUI build option.
    Cycles: Add a cmake config to easily compile Cycles Standalone.
    
    On Linux/Mac OS X, simply type "make cycles" inside the Blender source directory, to get a standalone build of the engine.
    
    Reviewed by: Brecht
    Differential Revision: https://developer.blender.org/D228
    Fix compilation of Cycles AVX kernel with cmake.
    Cycles: Add an AVX kernel for CPU rendering.
    
    * AVX is available on Intel Sandy Bridge and newer and AMD Bulldozer and newer.
    * We don't use dedicated AVX intrinsics yet, but gcc auto vectorization gives a 3% performance improvement for Caminandes. Tested on an i5-3570, Linux x64.
    * No change for Windows yet, MSVC 2008 does not support AVX.
    
    Reviewed by: brecht
    Differential Revision: https://developer.blender.org/D216
    Cycles: Skip the compilation of the dedicated SSE2 kernel on x86-64, we can assume SSE2 here, so just re-use the regular one. Saves 500kb in the blender binary.
    
    Reviewed by: brecht
    Differential Revision: https://developer.blender.org/D199
    Cycles: experimental OpenSubdiv code.
    
    This code can't actually be enabled for building and is incomplete, but it's
    here because we know we want to support this at some point and there's not much
    reason to have it in a separate branch if a simple #ifdef can disable it.
    Cycles: experimental OSL ptex reading code.
    
    This code can't actually be enabled for building and is incomplete, but it's
    here because we know we want to support this at some point and there's not much
    reason to have it in a separate branch if a simple #ifdef can disable it.
    Cycles: test code for sse 4.1 kernel and alignment for some vector types.
    
    This is mostly work towards enabling the __KERNEL_SSE__ option to start using
    SIMD operations for vector math operations. This 4.1 kernel performes about 8%
    faster with that option but overall is still slower than without the option.
    
    WITH_CYCLES_OPTIMIZED_KERNEL_SSE41 is the cmake flag for testing this kernel.
    
    Alignment of int3, int4, float3, float4 to 16 bytes seems to give a slight 1-2%
    speedup on tested systems with the current kernel already, so is enabled now.
    Cleanup:
    * Silence /arch:SSE2 warning on msvc x64.
    Cycles / Standalone:
    * Rename test to standalone.
    
    Note: New CMAKE flag is WITH_CYCLES_STANDALONE.
    Fix wrong cycles cmake + msvc build flags with relwithdebinfo and minsizerel.
    Patch by Karsten Schwenk.
    Arrempt to fix Cycles compilation with Clang
    
    Issue is caused by missing sse flags for Clang compilers,
    this flags only was set for GNU C compilers.
    
    Added if branch for Clang now, which contains the same
    flags apart from -mfpmath=sse, This is because Clang was
    claiming it's unused argument.
    
    Probably OSX would need some further checks since it's
    also using Clang. I've got no idea why it could have
    worked for OSX before..
    Cycles: optimized SSE BVH traversal now also works with SSE2 CPUs, so all the
    way back to Pentium 4, using a slightly less efficient instruction.
    
    Also ensure /Ox is used for Visual Studio for RelWithDebInfo builds.
    Fix for Debug build on MSVC2008 and MSVC2012 after Cycles Kernel optimization:
    
    Compiler optimization was accidentally set to /Ox for debug build too.
    Changed this to be /Od in Debug and /Ox in Release mode.
    Cycles: attempt to fix internal compile error with some visual studio builds
    Cycles / BVH:
    * GCC needs -mssse3 compile flag too (4.7.2) to compile.
    Fix cycles intersection issue with overlapping faces on windows 32 bit and CPU
    without SSE3 support, due to 80 bit precision float register being used for one
    bounding box but not the one next to it.
    Fix cycles windows link errors when building with OSL master branch.
    Remove usage WITH_CYCLES_CUDA_BINARIES in code, use check for
    precompiled cubins instead,
    
    Logic here is following now:
    - If there're precompiled cubins, assume CUDA compute is available,
      otherwise
    - If cuda toolkit found, assume CUDA compute is available
    - In all other cases CUDA compute is not available
    
    For windows there're still check for only precompiled binaries,
    no runtime compilation is allowed.
    
    Ended up with such decision after discussion with Brecht. The thing
    is, if we'll support runtime compilation on windows we'll end up
    having lots of reports about different aspects of something doesn't
    work (you need particular toolkit version, msvc installed, environment
    variables set properly and so) and giving feedback on such reports
    will waste time.
    Cycles: merge some changes from a local branch to bring network rendering a bit
    more up to date, still nowhere near working though, but might as well commit this
    in case someone else is interested in working on it.
    Fix compile error with clang.
    
    Patch by sambler via irc
    -fno-rtti is a gcc option which gives a warning when using MSVC
    Cycles / CMake:
    * Removed PARTIO building code, partio code was removed already.
    * Include "app" dir only when building with CYCLES_TEST enabled.
    Cycles OSL: some build system tweaks to avoid global includes and definitions,
    which ensures there is no conflict with other libraries, and avoids full rebuild
    when toggling OSL on/off.
    Use ${OPENEXR_INCLUDE_DIR} instead of ${OPENEXR}/include
    
    There's no CMake symbol names ${OPENEXR} which lead to using /include
    as an include directory, which isn't correct.
    OSL/cmake: the non-intrusive parts, so other os-maintainers can take code over
    code cleanup: cycles now uses system includes for boost/oiio.. etc, so we dont get warnings from system headers.
    RTTI needs to be disabled in cycles for OSL.
    Cycles / Cmake:
    * Removed last instance of "BLENDER_PLUGIN" define, removed in r39465 in the cycles branch.
    code cleanup: warnings
    add UNLIKELY / LIKELY util defines to help optimize iterators that are called a lot, only defined for gcc at the moment.
    
    also some cmake formatting edits.
    Cycles:
    * Fix broken compile of test app.
    * Fix some warnings compiling with gcc for 32 bit.
    * More tweaks to avoid extended precision issue from #29301.
    Cycles
    * Compile all of cycles with -ffast-math again
    * Add scons compilation of cuda binaries, tested on mac/linux.
    * Add UI option for supported/experimental features, to make it
      more clear what is supported, opencl/subdivision is experimental.
    * Remove cycles xml exporter, was just for testing.
    Cycles: build flags tweaks to avoid errors with msvc debug build.
    UI: small tweak to tooltips for enum menus, it wasn't very clear which
    description was for the property and which for the item.
    Cycles: try to avoid NaN pixels with oren nayar. Also small cmake code cleanup.
    Fix #29259: cycles issues on certain processors. Now two versions of the kernel
    are compiled, one SSE optimized and the other not, and it will choose between
    them at runtime.
    Cycles:
    * Fix excessive fireflies in Velvet BSDF (patch by David).
    * Disable some unused SSE code
    * Remove RTTI disabling flags for now, this is giving some compile issues and
      was only needed of OSL which we're not using yet.
    Cycles: attempted fix for error building with sse/mtune optimization flags.
    Cycles:
    * Add back option to bundle CUDA kernel binaries with builds.
    * Disable runtime CUDA kernel compilation on Windows, couldn't get this working,
      since it seems to depend on visual studio being installed, even though for
      this particular case it shouldn't be needed. CMake only at the moment.
    * Runtime compilation on linux/mac should now work if nvcc is not installed in
      the default location, but available in PATH.
    Cycles: cmake tweaks for linux build, instructions on the wiki no longer worked.
    edits to cycles cmake files so cmake_consistency_check.py can parse them.
    don't overwrite existing CMAKE_CXX_FLAGS for cycles (they may be important)
    Cycles Merge
    
    Documentation:
    http://wiki.blender.org/index.php/Dev:2.6/Source/Render/Cycles
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles
    
    Cycles is available is an extra render engine from the top header. It's not
    feature complete, consider this as a first preview release. Known bugs:
    http://wiki.blender.org/index.php/Dev:2.6/Source/Render/Cycles/KnownIssues
    
    Building currently only works with CMake, SCons support is being worked on
    and should be available soon.
    
    Also missing still is precompiled OpenImageIO and Boost for Linux, these will
    be added later in lib/linux*, if you do not have these installed on your
    system, Cycles will simply not be available.
    Cycles:
    * Disable precompiled cuda binaries, always do at run time
    * Change preview samples default to 10
    * Hide volume panels since they don't do anything yet
    added FindOpenImageIO cmake module.
    Cycles: attempted fixes for OS X preview render problem, and disable
    kernel cache there now as well since it seems to give issues there.
    Cycles:
    * Fix missing update when editing objects with emission materials.
    * Fix preview pass rendering set to 1 not showing full resolution.
    * Fix CUDA runtime compiling failing due to missing cache directory.
    * Use settings from first render layer for visibility and material override.
    
    And a bunch of incomplete and still disabled code mostly related to closure
    sampling.
    Cycles:
    * OpenCL now only uses GPU/Accelerator devices, it's only confusing if CPU
      device is used, easy to enable in the code for debugging.
    * OpenCL kernel binaries are now cached for faster startup after the first
      time compiling.
    * CUDA kernels can now be compiled and cached at runtime if the CUDA toolkit
      is installed. This means that even if the build does not have CUDA enabled,
      it's still possible to use it as long as you install the toolkit.
    Compile fixes for MinGW, checked with basic initial setup, no CUDA, gcc 4.5.2.
    OpenImageIO still gives link-time errors, will try to make a lib for MinGW, see if it is fixed.
    Cycles:
    * Fix crash in light path node
    * Fix struct alignment issue for cuda
    * Fix issue with instances taking up too much memory
    * Fix issue with ray visibility working incorrect on some objects
    * Enable OpenCL always and remove option, it has no dependencies so may as well
    * Refuse to load kernel if OpenCL version < 1.1, recent drivers are needed
    * Better error handling for OpenCL device
    * 3D views with rendered draw mode will now revert to wireframe on file load
    Cycles: OpenCL library is now dynamically loaded so that blender doesn't crash
    if it's not installed on the system.
    
    Code copied from clew.h/clew.c in CLCC:
    http://clcc.sourceforge.net/
    Cycles:
    * add some (disabled) test code for using OpenImageIO in imbuf
    * link cycles, openimageio and boost into blender instead of a shared library
    * some cmakefile changes to simplify the code and follow conventions better
    * this may solve running cycles problems on windows XP, or give a different
      and hopefully more useful error message
    Cycles: remove docs from svn, moved to wiki.
    Cycles: OS X build system changes to use lib/ openimageio and boost.
    Cycles: OSL build & image manager fixes.
    Cycles: build without GLUT test app by default.
    Cycles: hook up the CMake build system.
    
    New build instructions for Ubuntu Linux in the wiki:
    http://wiki.blender.org/index.php/Dev:2.5/Source/Cycles
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Fully support WITH_CYCLES_LOGGING option
    
    Quite straightforward, used find*() modules from Ceres, so the
    variable naming is a bit different. Example of declaring which
    Glog/Gflags to use:
    
      cmake \
        -D GLOG_INCLUDE_DIR_HINTS=/opt/lib/glog/include \
        -D GLOG_LIBRARY_DIR_HINTS=/opt/lib/glog/lib \
        -D GFLAGS_INCLUDE_DIR_HINTS=/opt/lib/gflags/include \
        -D GFLAGS_LIBRARY_DIR_HINTS=/opt/lib/gflags/lib \
        /path/to/cycles
    
    This would break logging support when re-bundled back to Blender
    because of the changes in CMake files. But those changes i would
    like to do in Blender as well with some tweaks to how Glog/Gflags
    libraries are being detected.
    Fix compilation error when OIIO is compiled with external PugiXML parser
    
    Basic idea is to check whether OIIO is compiled with embedded PugiXML parser
    and if so use PugiXML from OIIO, otherwise find a standalone PugiXML library.
    
    Note: This is actually a required dependency, so either ensure OIIO has this
    library embedded or install it separately.
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Futher tweaks to WITH_CPU_SSE option
    
    Explicitly disable SSE kernels in Cycles when this option is used.
    Cycles: enable double promotion warning /w gcc
    Cycles: Add support for debug passes
    
    Currently only summed number of traversal steps and intersections used by the
    camera ray intersection pass is implemented, but in the future we will support
    more debug passes which would help checking what things makes the scene slow.
    Example of such extra passes could be number of bounces, time spent on the
    shader tree evaluation and so.
    
    Implementation from the Cycles side is pretty much straightforward, could only
    mention here that it's a build-time option disabled by default.
    
    From the blender side it's implemented as a PASS_DEBUG with several subtypes
    possible. This way we don't need to create an extra DNA pass type for each of
    the debug passes, saving us a bits.
    
    Reviewers: campbellbarton
    
    Reviewed By: campbellbarton
    
    Differential Revision: https://developer.blender.org/D813
    Cycles: Add support of Glog logging
    
    This commit makes it possible to use Glog library for the debug logging.
    For now only possible when using CMake and in order to use the logging
    the WITH_CYCLES_LOGGING configuration variable is to be enabled.
    
    When this option is not enabled or when using Scons there's no difference
    in Cycles behavior at all, when using logging and no output to the console
    impact is gonna to be minimal.
    
    This is done in order to make it possible to have debug logging persistent
    in code (without need to add it when troubleshooting some bug and removing
    it afterwards).
    
    For now actual logging is not placed yet, only all the functions needed for
    the logging are written and so.
    Cycles: use SYSTEM for external includes
    Cycles: only use -fno-rtti with OSL (conflicts with -fsanitize=vptr)
    Cycles: Fix compilation error of AVX2 kernel with GCC/Clang
    Cycles: Add an AVX2 CPU kernel.
    
    This kernel is compiled with AVX2, FMA3, and BMI compiler flags. At the moment only Intel Haswell benefits from this, but future AMD CPUs will have these instructions as well.
    
    Makes rendering on Haswell CPUs a few percent faster, only benchmarked with clang on OS X though.
    
    Part of my GSoC 2014.
    Fix '-Werror=float-conversion' error with gcc < 4.9, for CMake
    
    Scons is still TODO.
    Code cleanup: Add -Werror=float-conversion to Cycles
    Cycles: fix 3-5% performance regression in msvc builds caused by a typo in stackchecking flags.
    CMake: disable SSE flags if gcc/clang don't support
    Code cleanup: cmake
    Cycles: enable /arch:AVX in msvc 11 and later versions for avx kernel
    
    This enables VEX-encoding in AVX kernel for windows msvc builds and gives 5-10% speedup for different scenes.
    
    Reviewers: juicyfruit, dingto, brecht
    
    Reviewed By: brecht
    
    CC: brecht
    
    Differential Revision: https://developer.blender.org/D284
    Scons: refactor cycles kernel code to avoid building the AVX kernel with
    compilers that don't support it.
    
    CMake still needs to updated to work the same for consistency, but this should
    fix the OS X buildbot at least.
    Revert recent OpenEXR cmake/linux fix and earlier OS X fix to use GCC for AVX.
    
    Both need a better solution and break working builds.
    Attempt to fix T38373: cmake linux build failure with OpenEXR.
    Cycles Standalone: GUI flag was not passed correctly to the code, own mistake when I added the GUI build option.
    Cycles: Add a cmake config to easily compile Cycles Standalone.
    
    On Linux/Mac OS X, simply type "make cycles" inside the Blender source directory, to get a standalone build of the engine.
    
    Reviewed by: Brecht
    Differential Revision: https://developer.blender.org/D228
    Fix compilation of Cycles AVX kernel with cmake.
    Cycles: Add an AVX kernel for CPU rendering.
    
    * AVX is available on Intel Sandy Bridge and newer and AMD Bulldozer and newer.
    * We don't use dedicated AVX intrinsics yet, but gcc auto vectorization gives a 3% performance improvement for Caminandes. Tested on an i5-3570, Linux x64.
    * No change for Windows yet, MSVC 2008 does not support AVX.
    
    Reviewed by: brecht
    Differential Revision: https://developer.blender.org/D216
    Cycles: Skip the compilation of the dedicated SSE2 kernel on x86-64, we can assume SSE2 here, so just re-use the regular one. Saves 500kb in the blender binary.
    
    Reviewed by: brecht
    Differential Revision: https://developer.blender.org/D199
    Cycles: experimental OpenSubdiv code.
    
    This code can't actually be enabled for building and is incomplete, but it's
    here because we know we want to support this at some point and there's not much
    reason to have it in a separate branch if a simple #ifdef can disable it.
    Cycles: experimental OSL ptex reading code.
    
    This code can't actually be enabled for building and is incomplete, but it's
    here because we know we want to support this at some point and there's not much
    reason to have it in a separate branch if a simple #ifdef can disable it.
    Cycles: test code for sse 4.1 kernel and alignment for some vector types.
    
    This is mostly work towards enabling the __KERNEL_SSE__ option to start using
    SIMD operations for vector math operations. This 4.1 kernel performes about 8%
    faster with that option but overall is still slower than without the option.
    
    WITH_CYCLES_OPTIMIZED_KERNEL_SSE41 is the cmake flag for testing this kernel.
    
    Alignment of int3, int4, float3, float4 to 16 bytes seems to give a slight 1-2%
    speedup on tested systems with the current kernel already, so is enabled now.
    Cleanup:
    * Silence /arch:SSE2 warning on msvc x64.
    Cycles / Standalone:
    * Rename test to standalone.
    
    Note: New CMAKE flag is WITH_CYCLES_STANDALONE.
    Fix wrong cycles cmake + msvc build flags with relwithdebinfo and minsizerel.
    Patch by Karsten Schwenk.
    Arrempt to fix Cycles compilation with Clang
    
    Issue is caused by missing sse flags for Clang compilers,
    this flags only was set for GNU C compilers.
    
    Added if branch for Clang now, which contains the same
    flags apart from -mfpmath=sse, This is because Clang was
    claiming it's unused argument.
    
    Probably OSX would need some further checks since it's
    also using Clang. I've got no idea why it could have
    worked for OSX before..
    Cycles: optimized SSE BVH traversal now also works with SSE2 CPUs, so all the
    way back to Pentium 4, using a slightly less efficient instruction.
    
    Also ensure /Ox is used for Visual Studio for RelWithDebInfo builds.
    Fix for Debug build on MSVC2008 and MSVC2012 after Cycles Kernel optimization:
    
    Compiler optimization was accidentally set to /Ox for debug build too.
    Changed this to be /Od in Debug and /Ox in Release mode.
    Cycles: attempt to fix internal compile error with some visual studio builds
    Cycles / BVH:
    * GCC needs -mssse3 compile flag too (4.7.2) to compile.
    Fix cycles intersection issue with overlapping faces on windows 32 bit and CPU
    without SSE3 support, due to 80 bit precision float register being used for one
    bounding box but not the one next to it.
    Fix cycles windows link errors when building with OSL master branch.
    Remove usage WITH_CYCLES_CUDA_BINARIES in code, use check for
    precompiled cubins instead,
    
    Logic here is following now:
    - If there're precompiled cubins, assume CUDA compute is available,
      otherwise
    - If cuda toolkit found, assume CUDA compute is available
    - In all other cases CUDA compute is not available
    
    For windows there're still check for only precompiled binaries,
    no runtime compilation is allowed.
    
    Ended up with such decision after discussion with Brecht. The thing
    is, if we'll support runtime compilation on windows we'll end up
    having lots of reports about different aspects of something doesn't
    work (you need particular toolkit version, msvc installed, environment
    variables set properly and so) and giving feedback on such reports
    will waste time.
    Cycles: merge some changes from a local branch to bring network rendering a bit
    more up to date, still nowhere near working though, but might as well commit this
    in case someone else is interested in working on it.
    Fix compile error with clang.
    
    Patch by sambler via irc
    -fno-rtti is a gcc option which gives a warning when using MSVC
    Cycles / CMake:
    * Removed PARTIO building code, partio code was removed already.
    * Include "app" dir only when building with CYCLES_TEST enabled.
    Cycles OSL: some build system tweaks to avoid global includes and definitions,
    which ensures there is no conflict with other libraries, and avoids full rebuild
    when toggling OSL on/off.
    Use ${OPENEXR_INCLUDE_DIR} instead of ${OPENEXR}/include
    
    There's no CMake symbol names ${OPENEXR} which lead to using /include
    as an include directory, which isn't correct.
    OSL/cmake: the non-intrusive parts, so other os-maintainers can take code over
    code cleanup: cycles now uses system includes for boost/oiio.. etc, so we dont get warnings from system headers.
    RTTI needs to be disabled in cycles for OSL.
    Cycles / Cmake:
    * Removed last instance of "BLENDER_PLUGIN" define, removed in r39465 in the cycles branch.
    code cleanup: warnings
    add UNLIKELY / LIKELY util defines to help optimize iterators that are called a lot, only defined for gcc at the moment.
    
    also some cmake formatting edits.
    Cycles:
    * Fix broken compile of test app.
    * Fix some warnings compiling with gcc for 32 bit.
    * More tweaks to avoid extended precision issue from #29301.
    Cycles
    * Compile all of cycles with -ffast-math again
    * Add scons compilation of cuda binaries, tested on mac/linux.
    * Add UI option for supported/experimental features, to make it
      more clear what is supported, opencl/subdivision is experimental.
    * Remove cycles xml exporter, was just for testing.
    Cycles: build flags tweaks to avoid errors with msvc debug build.
    UI: small tweak to tooltips for enum menus, it wasn't very clear which
    description was for the property and which for the item.
    Cycles: try to avoid NaN pixels with oren nayar. Also small cmake code cleanup.
    Fix #29259: cycles issues on certain processors. Now two versions of the kernel
    are compiled, one SSE optimized and the other not, and it will choose between
    them at runtime.
    Cycles:
    * Fix excessive fireflies in Velvet BSDF (patch by David).
    * Disable some unused SSE code
    * Remove RTTI disabling flags for now, this is giving some compile issues and
      was only needed of OSL which we're not using yet.
    Cycles: attempted fix for error building with sse/mtune optimization flags.
    Cycles:
    * Add back option to bundle CUDA kernel binaries with builds.
    * Disable runtime CUDA kernel compilation on Windows, couldn't get this working,
      since it seems to depend on visual studio being installed, even though for
      this particular case it shouldn't be needed. CMake only at the moment.
    * Runtime compilation on linux/mac should now work if nvcc is not installed in
      the default location, but available in PATH.
    Cycles: cmake tweaks for linux build, instructions on the wiki no longer worked.
    edits to cycles cmake files so cmake_consistency_check.py can parse them.
    don't overwrite existing CMAKE_CXX_FLAGS for cycles (they may be important)
    Cycles Merge
    
    Documentation:
    http://wiki.blender.org/index.php/Dev:2.6/Source/Render/Cycles
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles
    
    Cycles is available is an extra render engine from the top header. It's not
    feature complete, consider this as a first preview release. Known bugs:
    http://wiki.blender.org/index.php/Dev:2.6/Source/Render/Cycles/KnownIssues
    
    Building currently only works with CMake, SCons support is being worked on
    and should be available soon.
    
    Also missing still is precompiled OpenImageIO and Boost for Linux, these will
    be added later in lib/linux*, if you do not have these installed on your
    system, Cycles will simply not be available.
    Cycles:
    * Disable precompiled cuda binaries, always do at run time
    * Change preview samples default to 10
    * Hide volume panels since they don't do anything yet
    added FindOpenImageIO cmake module.
    Cycles: attempted fixes for OS X preview render problem, and disable
    kernel cache there now as well since it seems to give issues there.
    Cycles:
    * Fix missing update when editing objects with emission materials.
    * Fix preview pass rendering set to 1 not showing full resolution.
    * Fix CUDA runtime compiling failing due to missing cache directory.
    * Use settings from first render layer for visibility and material override.
    
    And a bunch of incomplete and still disabled code mostly related to closure
    sampling.
    Cycles:
    * OpenCL now only uses GPU/Accelerator devices, it's only confusing if CPU
      device is used, easy to enable in the code for debugging.
    * OpenCL kernel binaries are now cached for faster startup after the first
      time compiling.
    * CUDA kernels can now be compiled and cached at runtime if the CUDA toolkit
      is installed. This means that even if the build does not have CUDA enabled,
      it's still possible to use it as long as you install the toolkit.
    Compile fixes for MinGW, checked with basic initial setup, no CUDA, gcc 4.5.2.
    OpenImageIO still gives link-time errors, will try to make a lib for MinGW, see if it is fixed.
    Cycles:
    * Fix crash in light path node
    * Fix struct alignment issue for cuda
    * Fix issue with instances taking up too much memory
    * Fix issue with ray visibility working incorrect on some objects
    * Enable OpenCL always and remove option, it has no dependencies so may as well
    * Refuse to load kernel if OpenCL version < 1.1, recent drivers are needed
    * Better error handling for OpenCL device
    * 3D views with rendered draw mode will now revert to wireframe on file load
    Cycles: OpenCL library is now dynamically loaded so that blender doesn't crash
    if it's not installed on the system.
    
    Code copied from clew.h/clew.c in CLCC:
    http://clcc.sourceforge.net/
    Cycles:
    * add some (disabled) test code for using OpenImageIO in imbuf
    * link cycles, openimageio and boost into blender instead of a shared library
    * some cmakefile changes to simplify the code and follow conventions better
    * this may solve running cycles problems on windows XP, or give a different
      and hopefully more useful error message
    Cycles: remove docs from svn, moved to wiki.
    Cycles: OS X build system changes to use lib/ openimageio and boost.
    Cycles: OSL build & image manager fixes.
    Cycles: build without GLUT test app by default.
    Cycles: hook up the CMake build system.
    
    New build instructions for Ubuntu Linux in the wiki:
    http://wiki.blender.org/index.php/Dev:2.5/Source/Cycles
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles: Optimize math node without links to a single value node
    
    Pretty straightforward implementation. Just needed to move some functions
    around to make them available at shader compile time.
    Cycles: __KERNEL_DEBUG__ wasn't set for compile-time kernels
    Cycles: Add support for debug passes
    
    Currently only summed number of traversal steps and intersections used by the
    camera ray intersection pass is implemented, but in the future we will support
    more debug passes which would help checking what things makes the scene slow.
    Example of such extra passes could be number of bounces, time spent on the
    shader tree evaluation and so.
    
    Implementation from the Cycles side is pretty much straightforward, could only
    mention here that it's a build-time option disabled by default.
    
    From the blender side it's implemented as a PASS_DEBUG with several subtypes
    possible. This way we don't need to create an extra DNA pass type for each of
    the debug passes, saving us a bits.
    
    Reviewers: campbellbarton
    
    Reviewed By: campbellbarton
    
    Differential Revision: https://developer.blender.org/D813
    Cycles: Missing volume traversal header in cmake for GPU compilation.
    Cycles: Remove Westin closure.
    
    Was hooked up last year for testing purposes, as we already had some code for it, but the closure itself is not really good nor really useful, so let's remove it.
    Cycles: Add an experimental CUDA kernel.
    
    Now we build 2 .cubins per architecture (e.g. kernel_sm_21.cubin, kernel_experimental_sm_21.cubin).
    The experimental kernel can be used by switching to the Experimental Feature Set: http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Experimental_Features
    
    This enables Subsurface Scattering and Correlated Multi Jitter Sampling on GPU, while keeping the stability and performance of the regular kernel.
    
    Differential Revision: https://developer.blender.org/D762
    Patch by Sergey and myself.
    
    Developer / Builder Note:
    CUDA Toolkit 6.5 is highly recommended for this, also note that building the experimental kernel requires a lot of system memory (~7-8GB).
    Cycles: Drop support for CUDA 5.0 Toolkit, only 6.0 and 6.5 (recommended) are supported now.
    Cmake: Remove warning for pre CUDA 5.0 Toolkit, not supported anymore
    CMake: update source files
    Cycles: glossy and anisotropic BSDF changes
    
    * Anisotropic BSDF now supports GGX and Beckmann distributions, Ward has been
      removed because other distributions are superior.
    * GGX is now the default distribution for all glossy and anisotropic nodes,
      since it looks good, has low noise and is fast to evaluate.
    * Ashikhmin-Shirley is now available in the Glossy BSDF.
    Cycles: Ashikhmin-Shirley anisotropic BSDF
    
    * Ashikhmin-Shirley anisotropic BSDF was added as closure
    * Anisotropic BSDF node now has two distributions
    
    Reviewers: brecht, dingto
    
    Differential Revision: https://developer.blender.org/D549
    Cycles code refactor: move some surface and volume path code to separate files.
    Code cleanup: Avoid duplicate functions for vector combination/separation in SVM.
    
    Differential Revision: https://developer.blender.org/D597
    Cycles: Add an AVX2 CPU kernel.
    
    This kernel is compiled with AVX2, FMA3, and BMI compiler flags. At the moment only Intel Haswell benefits from this, but future AMD CPUs will have these instructions as well.
    
    Makes rendering on Haswell CPUs a few percent faster, only benchmarked with clang on OS X though.
    
    Part of my GSoC 2014.
    Cycles: Add dedicated nodes to split/combine vectors.
    
    This was already possible via the RGB nodes, but that seems weird.
    Code refactor: rename kernel_displace.h to kernel_bake.h.
    Cycles CUDA: make CUDA toolkit 6.0 the official supported version.
    
    This also updates the configurations to build kernels for compute capability
    5.0 cards, when using and older CUDA toolkit version this will be skipped.
    
    Also includes tweaks to improve performance with this version:
    * Increase max registers on sm_30, sm_35 and sm_50
    * No longer use texture storage on sm_30
    Cycles code refactor: use __launch_bounds__ instead of -maxrregcount for CUDA.
    
    This makes it easier to have per kernel number of registers. Also, all the
    tunable parameters for this are now in kernel.cu, rather than spread over cmake,
    scons and device_cuda.cpp.
    Cycles / CUDA: Increase sm_2x registers to 40.
    
    This fixes the ptaxs "ACCESS_VIOLATION" error and should allow our Linux and Windows build bots to compile again.
    Unfortunately this comes with a performance penalty on sm_2x cards, so this is only a workaround for now. Branched Path is still globally disabled on GPU.
    Cycles code internals: add support for mesh voxel grid attributes.
    
    These are internally stored as a 3D image textures, but accessible like e.g.
    UV coordinates though the attribute node and getattribute().
    
    This is convenient for rendering e.g. smoke objects where data like density is
    really a property of the mesh, and it avoids having to specify the smoke object
    in a texture node, instead the material will work with any smoke domain.
    Cycles code refactor: move more code to geom folder, add some comments.
    Cycles: add support for curve deformation motion blur.
    Cycles: add support for mesh deformation motion blur.
    Cycles code refactor: move geometry related kernel files into own directory.
    Cycles: fix for building with cmake when gcc refuses sse args
    Code cleanup: cmake
    Fix compilation of Cycles AVX kernel with cmake.
    Cycles: Add an AVX kernel for CPU rendering.
    
    * AVX is available on Intel Sandy Bridge and newer and AMD Bulldozer and newer.
    * We don't use dedicated AVX intrinsics yet, but gcc auto vectorization gives a 3% performance improvement for Caminandes. Tested on an i5-3570, Linux x64.
    * No change for Windows yet, MSVC 2008 does not support AVX.
    
    Reviewed by: brecht
    Differential Revision: https://developer.blender.org/D216
    Code cleanup: move half float functions to separate header file.
    DingTo forgot to make sure kernel_sse41 is compiled in even when empty
    Cycles: Skip the compilation of the dedicated SSE2 kernel on x86-64, we can assume SSE2 here, so just re-use the regular one. Saves 500kb in the blender binary.
    
    Reviewed by: brecht
    Differential Revision: https://developer.blender.org/D199
    Take back last header copy, due it is for native only, must be a runtime solution, todo: do by definitions
    Cmake: fix kernelcompile after introduction of util_simd.h
    CMake: cleanup and add include
    Cycles Volume Render: support for rendering of homogeneous volume with absorption.
    
    This is the simplest possible volume rendering case, constant density inside
    the volume and no scattering or emission. My plan is to tweak, verify and commit
    more volume rendering effects one by one, doing it all at once makes it
    difficult to verify correctness and track down bugs.
    
    Documentation is here:
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Materials/Volume
    
    Currently this hooks into path tracing in 3 ways, which should get us pretty
    far until we add more advanced light sampling. These 3 hooks are repeated in
    the path tracing, branched path tracing and transparent shadow code:
    
    * Determine active volume shader at start of the path
    * Change active volume shader on transmission through a surface
    * Light attenuation over line segments between camera, surfaces and background
    
    This is work by "storm", Stuart Broadfoot, Thomas Dinges and myself.
    Code cleanup: move shadow_blocked function into separate file.
    Cycles: test code for sse 4.1 kernel and alignment for some vector types.
    
    This is mostly work towards enabling the __KERNEL_SSE__ option to start using
    SIMD operations for vector math operations. This 4.1 kernel performes about 8%
    faster with that option but overall is still slower than without the option.
    
    WITH_CYCLES_OPTIMIZED_KERNEL_SSE41 is the cmake flag for testing this kernel.
    
    Alignment of int3, int4, float3, float4 to 16 bytes seems to give a slight 1-2%
    speedup on tested systems with the current kernel already, so is enabled now.
    Cycles / CUDA:
    * Remove support for  CUDA Toolkit 4.x, only Toolkit 5.0 and above are supported now.
    * Remove support for sm_1x cards (< Fermi) for good. We didn't officially support those cards for a few releases already, now remove some special code that was still there.
    Cycles Hair: Two basic bair shaders added
    
    A new hair bsdf node, with two closure options, is added. These closures allow the generation of the reflective and transmission components of hair. The node allows control of the highlight colour, roughness and angular shift.
    
    Llimitations include:
    -No glint or fresnel adjustments.
    -The 'offset' is un-used when triangle primitives are used.
    Cycles:
    * Refactor PathState struct and functions into its own file.
    add GPL header to treehash.c and add missing includes to cmake.
    Cycles / Vector Transform node:
    * Add a note to convert a Vector, Point or Normal between World <=> Camera <=> Object coordinate space.
    
    Documentation: http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/More#Vector_Transform
    
    Part of my GSoC 2013 project, SVN merge of r57599, r57670, r57918, r57919, r58245 and r58775.
    Cycles / Blackbody to RGB node:
    * Added a node to convert a temperature in Kelvin to an RGB color. This can be used e.g. for lights, to easily find the right color temperature.
    = Some common temperatures =
    Candle light: 1500 Kelvin
    Sunset/Sunrise: 1850 Kelvin
    Studio lamps: 3200 Kelvin
    Horizon daylight: 5000 Kelvin
    
    Documentation: http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/More#Blackbody
    
    Thanks to Philipp Oeser (lichtwerk), who essentially contributed to this with a patch! :)
    
    This is part of my GSoC 2013 project. SVN merge of r57424, r57487, r57507, r57525, r58253 and r58774
    Cycles:
    * Added 2 new nodes to combine and separate HSV colors.
    
    Screenshot:
    http://www.pasteall.org/pic/show.php?id=54828
    Cycles / Vector Transform Node:
    * Implementation of Vector Transform Node into Cycles.
    * OSL backend is done, SVM needs the matrices still.
    Cycles: update build configurations to include CUDA sm_35 architecture. When using
    a compiler older than CUDA 5.0 it will give a warning and skip this architecture.
    Cycles: prepare to make CUDA 5.0 the official version we use
    
    * Add CUDA compiler version detection to cmake/scons/runtime
    * Remove noinline in kernel_shader.h and reenable --use_fast_math if CUDA 5.x
      is used, these were workarounds for CUDA 4.2 bugs
    * Change max number of registers to 32 for sm 2.x (based on performance tests
      from Martijn Berger and confirmed here), and also for NVidia OpenCL.
    
    Overall it seems that with these changes and the latest CUDA 5.0 download, that
    performance is as good as or better than the 2.67b release with the scenes and
    graphics cards I tested.
    Cycles / Blackbody node:
    * First (brute force) implementation for SVM. This works and delivers the same result as OSL, but it's slow.
    * Code inside svm_blackbody.h inspired by a patch by Philipp Oeser (#35698), thanks.
    
    Ideas:
    * Use a lookup table to perform the calculations on render/ level.
    * Implement it as a RNA property only, and do the calculation like Sun/Sky precompute.
    Fix #35665: more CUDA issues with recent kernel changes, tested on sm_20, sm_21
    and sm_30 cards, so hopefully it should all work now.
    
    Also includes some warnings fixes related to nvcc compiler arguments, should make
    no difference otherwise.
    Cycles / Wavelength to RGB node:
    * Added a node to convert wavelength (in nanometer, from 380nm to 780nm) to RGB values. This can be useful to match real world colors easier.
    
    Example render:
    http://www.pasteall.org/pic/show.php?id=53202
    
    ToDo:
    * Move some functions into an util file, maybe a common util_color.h or so.
    * Test GPU, unfortunately sm_21 doesn't work for me yet.
    Cycles: experimental correlated multi-jittered sampling pattern that can be used
    instead of sobol. So far one doesn't seem to be consistently better or worse than
    the other for the same number of samples but more testing is needed.
    
    The random number generator itself is slower than sobol for most number of samples,
    except 16, 64, 256, .. because they can be computed faster. This can probably be
    optimized, but we can do that when/if this actually turns out to be useful.
    
    Paper this implementation is based on:
    http://graphics.pixar.com/library/MultiJitteredSampling/
    
    Also includes some refactoring of RNG code, fixing a Sobol correlation issue with
    the first BSDF and < 16 samples, skipping some unneeded RNG calls and using a
    simpler unit square to unit disk function.
    Cycles / Wireframe node:
    * Added a wireframe node (Input category) to get access to Mesh wireframe data.
    The thickness can be controlled via a "Size" parameter, and is available in world units (default) and screen pixel size.
    * Only the triangulated mesh is available now, quads is for later.
    
    Documentation:
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/More#Wireframe
    
    Render and Example file:
    http://www.pasteall.org/pic/show.php?id=51731
    http://www.pasteall.org/blend/21510
    Cycles: code refactoring to deduplicate the various BVH traversal variations.
    Now there is a single BVH traversal code with #ifdefs for various features.
    At runtime it will then select the appropriate variation to use depending if
    instancing, hair or motion blur is in use.
    
    This makes scenes without hair render a bit faster, especially after the
    minimum width feature was added. It's not the most beautiful code, but we can't
    use c++ templates and there were already 4 copies, adding 4 more to handle the
    hair case separately would be too much.
    Cycles: initial subsurface multiple scattering support. It's not working as
    well as I would like, but it works, just add a subsurface scattering node and
    you can use it like any other BSDF.
    
    It is using fully raytraced sampling compatible with progressive rendering
    and other more advanced rendering algorithms we might used in the future, and
    it uses no extra memory so it's suitable for complex scenes.
    
    Disadvantage is that it can be quite noisy and slow. Two limitations that will
    be solved are that it does not work with bump mapping yet, and that the falloff
    function used is a simple cubic function, it's not using the real BSSRDF
    falloff function yet.
    
    The node has a color input, along with a scattering radius for each RGB color
    channel along with an overall scale factor for the radii.
    
    There is also no GPU support yet, will test if I can get that working later.
    
    Node Documentation:
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/Shaders#BSSRDF
    
    Implementation notes:
    http://wiki.blender.org/index.php/Dev:2.6/Source/Render/Cycles/Subsurface_Scattering
    Fix cycles intersection issue with overlapping faces on windows 32 bit and CPU
    without SSE3 support, due to 80 bit precision float register being used for one
    bounding box but not the one next to it.
    Cycles Hair: refactoring to support generic attributes for hair curves. There
    should be no functional changes yet. UV, tangent and intercept are now stored
    as attributes, with the intention to add more like multiple uv's, vertex
    colors, generated coordinates and motion vectors later.
    
    Things got a bit messy due to having both triangle and curve data in the same
    mesh data structure, which also gives us two sets of attributes. This will get
    cleaned up when we split the mesh class.
    Cycles OSL: diffuse_toon and specular_toon closures. These are toon shaders with
    a size parameter between 0.0 and 1.0 that gives a angle of reflection between
    0° and 90°, and a smooth parameter that gives and angle over which a smooth
    transition from full to no reflection happens.
    
    These work with global illumination and do importance sampling of the area within
    the angle. Note that unlike most other BSDF's these are not energy conserving in
    general, in particular if their weight is 1.0 and size > 2/3 (or 60°) they will
    add more energy in each bounce.
    
    Diffuse: http://www.pasteall.org/pic/show.php?id=42119
    Specular: http://www.pasteall.org/pic/show.php?id=42120
    Cycles OSL minor optimizations: recycle shading context, don't do memory
    allocations for trace data, avoid some virtual function calls. Only helps
    a few percentages.
    Cycles OSL: add diffuse_ramp closure in addition to phong_ramp.
    Cycles OSL: phong_ramp(N, exponent, colors[8]) closure added, which works like
    a specular ramp shader. Note this is OSL only still, for experimenting.
    
    Patch by Thomas.
    Cycles OSL: refactoring and fixes
    
    * Moved kernel/osl/nodes to kernel/shaders
    * Renamed standard attributes to use geom:, particle:, object: prefixes
    * Update stdosl.h to properly reflect the closures we support
    * Fix the wrong stdosl.h being used for building shaders
    * Add geom:numpolyvertices, geom:trianglevertices, geom:polyvertices attributes
    Cycles:
    * Build system fixes for closure refactor.
    Cycles OSL: most closure code is now shared between OSL and SVM. Also fix
    transmission pass and filter glossy option.
    
    The BSDF closure class is now more similar to the SVM closures, and includes
    some flags and labels that are needed to properly categorize the BSDF's for
    render passes. Phong closure is gone for the moment, needs to be adapated to
    the new structure still.
    code cleanup:
    - move object_iterators.c --> view3d_iterators. (ED_object.h had to include ED_view3d.h which isn't so nice)
    - move projection functions from view3d_view.c --> view3d_project.c (view3d_view was becoming a mishmash of utility functions and operators).
    - some some cmake includes as system-includes.
    Cycles: fix some update issues with camera motion blur, and do some more work
    for getting object motion blur ready.
    code cleanup: cycles now uses system includes for boost/oiio.. etc, so we dont get warnings from system headers.
    Fix for Cycles (CUDA) compilation (again ...). Moved the AttributeStandard enum typedef and the attribute_standard_name mapping function to util_attribute/util_types headers, so they can properly be used by kernel and render files alike. This should avoid any std C includes which are not available in CUDA. Thanks to Sergey for help!
    Cycles: merge of changes from tomato branch.
    
    Regular rendering now works tiled, and supports save buffers to save memory
    during render and cache render results.
    
    Brick texture node by Thomas.
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/Textures#Brick_Texture
    
    Image texture Blended Box Mapping.
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/Textures#Image_Texture
    http://mango.blender.org/production/blended_box/
    
    Various bug fixes by Sergey and Campbell.
    * Fix for reading freed memory in some node setups.
    * Fix incorrect memory read when synchronizing mesh motion.
    * Fix crash appearing when direct light usage is different on different layers.
    * Fix for vector pass gives wrong result in some circumstances.
    * Fix for wrong resolution used for rendering Render Layer node.
    * Option to cancel rendering when doing initial synchronization.
    * No more texture limit when using CPU render.
    * Many fixes for new tiled rendering.
    Cycles: fixes to make CUDA 4.2 work, compiling gave errors in shadows and
    other places, was mainly due to instancing not working, but also found
    issues in procedural textures.
    
    The problem was with --use_fast_math, this seems to now have way lower
    precision for some operations. Disabled this flag and selectively use
    fast math functions. Did not find performance regression on GTX 460 after
    doing this.
    adding kernel_projection.h in CMakelists
    Cycles: add ColorRamp node.
    Cycles: fix cuda kernel not getting rebuilt correctly after changes, due to
    refactoring that changed variable names, also fixed OpenCL compile issue with
    advanced shading.
    Cycles: Render Passes
    
    Currently supported passes:
    * Combined, Z, Normal, Object Index, Material Index, Emission, Environment,
      Diffuse/Glossy/Transmission x Direct/Indirect/Color
    
    Not supported yet:
    * UV, Vector, Mist
    
    Only enabled for CPU devices at the moment, will do GPU tweaks tommorrow,
    also for environment importance sampling.
    
    Documentation:
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Passes
    Brightness/Contrast Node for Cycles
    
    Contrast helps to adjust IBL (HDR images used for background lighting).
    Note: In the UI we are caling it Bright instead of Brightness. This copy what Blender composite is doing.
    Note2: the algorithm we are using produces pure black when contrast is 100. I'm not a fan of that, but it's a division by zero. I would like to look at other algorithms (what gimp does for example). But that would be only after 2.62.
    Cycles: checker texture node, patch by Thomas.
    Cycles: some tweaks for apple opencl with ATI cards, to get it working up to
    the level of ambient occlusion render, shaders still fail. Fixes found with
    much help from Jens and Dalai.
    Cycles Gamma Node
    Node specially useful for Texture correction.
    
    This is also a nice example of a simple node made from scratch in case someone wants to create their custom nodes.
    Review by Brecht.
    Normal Node - Cycles
    reviewed by Brecht, with help from Lukas.
    
    Note: dot is reversed compared to Blender.
    In Blender Normals point outside, while in Cycles they point inside.
    If you use your own custom vector with the Normal Node you will see a difference.
    If you feed it with object normals it should work just as good.
    correct missing argument error if CYCLES_OPTIMIZED_KERNEL_FLAGS isnt set
    Invert Color Cycles Node
    as with the HSV node the OSL code is relying on the (yet to be implemented) autorename.
    
    Also the svm code could use mix (svm_lerp) instead:
     32 . float3 color_inv = make_float3(1.0f, 1.0f, 1.0f) - color;
     35 . . stack_store_float3(stack, out_color, svm_lerp(color_inv, color, factor));
    
    I have a feeling that each node 'program' should have the least program as possible. I'll see with Brecht later.
    But overall I don't know if that's any fast. And apart from that I think we will need this kind of function to move to a library if multiple functions linked in are not a problem.
    CameraData Input Cycles Node
    ----------------------------
    reviewed and approved by Brecht
    
    Important note:
    the camera Z is reverted compared to Blender render.
    Now it goes from zero (camera) to positive (in front of the camera)
    HSV Color Node for Cycles
    .........................
    note, the OSL code has a problem.
    In the original node the input and output nodes have the same name (Color).
    So this will be fixed here once Brecht come up with a nice autorenaming (or we do a doversion patch) for that.
    SeparateRGB and CombineRGB nodes for Cycles materials
    reviewed and approved by Brecht
    
    my first OpenCL code \o/
    Fix #29259: cycles issues on certain processors. Now two versions of the kernel
    are compiled, one SSE optimized and the other not, and it will choose between
    them at runtime.
    Cycles: Oren-Nayar BSDF support. This is not a separate shader node, rather it
    is available through the Roughness input on the Diffuse BSDF.
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/Shaders#Diffuse
    
    Patch by Yasuhiro Fujii, thanks!
    Cycles:
    * Add back option to bundle CUDA kernel binaries with builds.
    * Disable runtime CUDA kernel compilation on Windows, couldn't get this working,
      since it seems to depend on visual studio being installed, even though for
      this particular case it shouldn't be needed. CMake only at the moment.
    * Runtime compilation on linux/mac should now work if nvcc is not installed in
      the default location, but available in PATH.
    edits to cycles cmake files so cmake_consistency_check.py can parse them.
    Cycles:
    * Disable precompiled cuda binaries, always do at run time
    * Change preview samples default to 10
    * Hide volume panels since they don't do anything yet
    Cycles: procedural texture nodes reorganization. This will break existing files
    using them, but rather do it now that I have the chance still. Highlights:
    
    * Wood and Marble merged into a single Wave texture
    * Clouds + Distorted Noise merged into new Noise node
    * Blend renamed to Gradient
    * Stucci removed, was mostly useful for old bump
    * Noise removed, will come back later, didn't actually work yet
    * Depth setting is now Detail socket, which accepts float values
    * Scale socket instead of Size socket
    
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/Textures
    use CMake's CUDA_NVCC_EXECUTABLE rather then own hard coded CYCLES_CUDA variable.
    Cycles:
    * OpenCL now only uses GPU/Accelerator devices, it's only confusing if CPU
      device is used, easy to enable in the code for debugging.
    * OpenCL kernel binaries are now cached for faster startup after the first
      time compiling.
    * CUDA kernels can now be compiled and cached at runtime if the CUDA toolkit
      is installed. This means that even if the build does not have CUDA enabled,
      it's still possible to use it as long as you install the toolkit.
    Cycles:
    * Fix crash in light path node
    * Fix struct alignment issue for cuda
    * Fix issue with instances taking up too much memory
    * Fix issue with ray visibility working incorrect on some objects
    * Enable OpenCL always and remove option, it has no dependencies so may as well
    * Refuse to load kernel if OpenCL version < 1.1, recent drivers are needed
    * Better error handling for OpenCL device
    * 3D views with rendered draw mode will now revert to wireframe on file load
    Cycles:
    * add some (disabled) test code for using OpenImageIO in imbuf
    * link cycles, openimageio and boost into blender instead of a shared library
    * some cmakefile changes to simplify the code and follow conventions better
    * this may solve running cycles problems on windows XP, or give a different
      and hopefully more useful error message
    Cycles: more opencl tweaks, status is:
    
    * kernel has shading nodes / textures disabled, amd/nvidia opencl
      compilers choke on these, need to figure out how to avoid this
    * works in cycles_test, not available as option in blender yet
    * kernel compiles and runs with opencl 1.1 from intel/amd/nvidia
    Cycles: some steps to getting OpenCL backend to compile.
    Cycles: some more windows build fixes, based on patch by Francisco De La Cruz.
    Cycles: fix build issue with Blender includes.
    Cycles: hook up the CMake build system.
    
    New build instructions for Ubuntu Linux in the wiki:
    http://wiki.blender.org/index.php/Dev:2.5/Source/Cycles
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles / Toon BSDF:
    * Added a toon bsdf node to Cycles. This was already available as OSL only closure, but is now available inside the SVM backed as well, for CPU and GPU rendering.
    * There are 2 variations available, diffuse and glossy toon, selectable via a menu inside the node.
    
    Documentation:
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/Shaders#Toon
    
    Example render & blend file:
    http://www.pasteall.org/pic/show.php?id=51970
    http://www.pasteall.org/blend/21579
    Code cleanup / Cycles:
    * Re-use already defined Westin closure class.
    Cycles / OSL:
    * Added Westin Sheen and Westin Backscatter closures for testing, useful for Cloth like effects.
    
    Only available via OSL, added an example OSL shader to the Templates (Text Editor).
    Cycles: initial subsurface multiple scattering support. It's not working as
    well as I would like, but it works, just add a subsurface scattering node and
    you can use it like any other BSDF.
    
    It is using fully raytraced sampling compatible with progressive rendering
    and other more advanced rendering algorithms we might used in the future, and
    it uses no extra memory so it's suitable for complex scenes.
    
    Disadvantage is that it can be quite noisy and slow. Two limitations that will
    be solved are that it does not work with bump mapping yet, and that the falloff
    function used is a simple cubic function, it's not using the real BSSRDF
    falloff function yet.
    
    The node has a color input, along with a scattering radius for each RGB color
    channel along with an overall scale factor for the radii.
    
    There is also no GPU support yet, will test if I can get that working later.
    
    Node Documentation:
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/Shaders#BSSRDF
    
    Implementation notes:
    http://wiki.blender.org/index.php/Dev:2.6/Source/Render/Cycles/Subsurface_Scattering
    Cycles OSL: diffuse_toon and specular_toon closures. These are toon shaders with
    a size parameter between 0.0 and 1.0 that gives a angle of reflection between
    0° and 90°, and a smooth parameter that gives and angle over which a smooth
    transition from full to no reflection happens.
    
    These work with global illumination and do importance sampling of the area within
    the angle. Note that unlike most other BSDF's these are not energy conserving in
    general, in particular if their weight is 1.0 and size > 2/3 (or 60°) they will
    add more energy in each bounce.
    
    Diffuse: http://www.pasteall.org/pic/show.php?id=42119
    Specular: http://www.pasteall.org/pic/show.php?id=42120
    Cycles OSL: add diffuse_ramp closure in addition to phong_ramp.
    Cycles OSL: phong_ramp(N, exponent, colors[8]) closure added, which works like
    a specular ramp shader. Note this is OSL only still, for experimenting.
    
    Patch by Thomas.
    Cycles OSL: refactoring and fixes
    
    * Moved kernel/osl/nodes to kernel/shaders
    * Renamed standard attributes to use geom:, particle:, object: prefixes
    * Update stdosl.h to properly reflect the closures we support
    * Fix the wrong stdosl.h being used for building shaders
    * Add geom:numpolyvertices, geom:trianglevertices, geom:polyvertices attributes
    Cycles OSL: most closure code is now shared between OSL and SVM. Also fix
    transmission pass and filter glossy option.
    
    The BSDF closure class is now more similar to the SVM closures, and includes
    some flags and labels that are needed to properly categorize the BSDF's for
    render passes. Phong closure is gone for the moment, needs to be adapated to
    the new structure still.
    code cleanup:
    - move object_iterators.c --> view3d_iterators. (ED_object.h had to include ED_view3d.h which isn't so nice)
    - move projection functions from view3d_view.c --> view3d_project.c (view3d_view was becoming a mishmash of utility functions and operators).
    - some some cmake includes as system-includes.
    code cleanup: cycles now uses system includes for boost/oiio.. etc, so we dont get warnings from system headers.
    Cleanup for OSL linking in cmake: Move cmake OSL library search and path definition from the cycles macro file to the top-level CMakeLists.txt. This makes the OSL_LIBRARIES and other variables accessible throughout Blender cmake scripts and especially in the creator module for linking libraries.
    OSL Backend:
    * Added the Phong BRDF from the inbuilt OSL shader library.
    
    This can be used in OSL shaders only for now:
    * phong(normal N, float exponent)
    * phong_ramp(normal N, float exponent, color colors[8]
    Added library linking for cycles_kernel_osl to OSL libraries and added cycles_kernel_osl to the list of blender libs in creator.
    Cycles: Oren-Nayar BSDF support. This is not a separate shader node, rather it
    is available through the Roughness input on the Diffuse BSDF.
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/Shaders#Diffuse
    
    Patch by Yasuhiro Fujii, thanks!
    add some missing headers to cmake, also add some files as comments since it seems they should be added but evidently work fine without.
    edits to cycles cmake files so cmake_consistency_check.py can parse them.
    Cycles:
    * add some (disabled) test code for using OpenImageIO in imbuf
    * link cycles, openimageio and boost into blender instead of a shared library
    * some cmakefile changes to simplify the code and follow conventions better
    * this may solve running cycles problems on windows XP, or give a different
      and hopefully more useful error message
    Cycles: OSL build fixes, based on patch from erwin94.
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles: Ashikhmin-Shirley anisotropic BSDF
    
    * Ashikhmin-Shirley anisotropic BSDF was added as closure
    * Anisotropic BSDF node now has two distributions
    
    Reviewers: brecht, dingto
    
    Differential Revision: https://developer.blender.org/D549
    Cycles: Add dedicated nodes to split/combine vectors.
    
    This was already possible via the RGB nodes, but that seems weird.
    Cycles: add dedicated UV Map node, easier to find and has convenient auto complete.
    
    Fixes T37954.
    
    Reviewed By: brecht, dingto
    
    Differential Revision: https://developer.blender.org/D230
    Cycles Volume Render: work on nodes and closures.
    
    * Henyey-Greenstein scattering closure implementation.
    * Rename transparent to absorption node and isotropic to scatter node.
    * Volume density is folded into the closure weights.
    * OSL support for volume closures and nodes.
    * This commit has no user visible changes, there is no volume render code yet.
    
    This is work by "storm", Stuart Broadfoot, Thomas Dinges and myself.
    Cycles Hair: Two basic bair shaders added
    
    A new hair bsdf node, with two closure options, is added. These closures allow the generation of the reflective and transmission components of hair. The node allows control of the highlight colour, roughness and angular shift.
    
    Llimitations include:
    -No glint or fresnel adjustments.
    -The 'offset' is un-used when triangle primitives are used.
    Cycles / Vector Transform node:
    * Add a note to convert a Vector, Point or Normal between World <=> Camera <=> Object coordinate space.
    
    Documentation: http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/More#Vector_Transform
    
    Part of my GSoC 2013 project, SVN merge of r57599, r57670, r57918, r57919, r58245 and r58775.
    Cycles / Blackbody to RGB node:
    * Added a node to convert a temperature in Kelvin to an RGB color. This can be used e.g. for lights, to easily find the right color temperature.
    = Some common temperatures =
    Candle light: 1500 Kelvin
    Sunset/Sunrise: 1850 Kelvin
    Studio lamps: 3200 Kelvin
    Horizon daylight: 5000 Kelvin
    
    Documentation: http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/More#Blackbody
    
    Thanks to Philipp Oeser (lichtwerk), who essentially contributed to this with a patch! :)
    
    This is part of my GSoC 2013 project. SVN merge of r57424, r57487, r57507, r57525, r58253 and r58774
    Cycles:
    * Added 2 new nodes to combine and separate HSV colors.
    
    Screenshot:
    http://www.pasteall.org/pic/show.php?id=54828
    Code cleanup: cycles
    * Reshuffle SSE #ifdefs to try to avoid compilation errors enabling SSE on 32 bit.
    * Remove CUDA kernel launch size exception on Mac, is not needed.
    * Make OSL file compilation quiet like c/cpp files.
    Cycles / Vector Transform Node:
    * Implementation of Vector Transform Node into Cycles.
    * OSL backend is done, SVM needs the matrices still.
    Cycles / Blackbody node:
    * First step towards a Blackbody to RGB converter. You can specify a color in Kelvin inside the node.
    * Only implemented for OSL atm, SVM will follow.
    Cycles / Wavelength to RGB node:
    * Added a node to convert wavelength (in nanometer, from 380nm to 780nm) to RGB values. This can be useful to match real world colors easier.
    
    Example render:
    http://www.pasteall.org/pic/show.php?id=53202
    
    ToDo:
    * Move some functions into an util file, maybe a common util_color.h or so.
    * Test GPU, unfortunately sm_21 doesn't work for me yet.
    Cycles / Toon BSDF:
    * Added a toon bsdf node to Cycles. This was already available as OSL only closure, but is now available inside the SVM backed as well, for CPU and GPU rendering.
    * There are 2 variations available, diffuse and glossy toon, selectable via a menu inside the node.
    
    Documentation:
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/Shaders#Toon
    
    Example render & blend file:
    http://www.pasteall.org/pic/show.php?id=51970
    http://www.pasteall.org/blend/21579
    Cycles / Wireframe node:
    * Added a wireframe node (Input category) to get access to Mesh wireframe data.
    The thickness can be controlled via a "Size" parameter, and is available in world units (default) and screen pixel size.
    * Only the triangulated mesh is available now, quads is for later.
    
    Documentation:
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/More#Wireframe
    
    Render and Example file:
    http://www.pasteall.org/pic/show.php?id=51731
    http://www.pasteall.org/blend/21510
    Cycles: initial subsurface multiple scattering support. It's not working as
    well as I would like, but it works, just add a subsurface scattering node and
    you can use it like any other BSDF.
    
    It is using fully raytraced sampling compatible with progressive rendering
    and other more advanced rendering algorithms we might used in the future, and
    it uses no extra memory so it's suitable for complex scenes.
    
    Disadvantage is that it can be quite noisy and slow. Two limitations that will
    be solved are that it does not work with bump mapping yet, and that the falloff
    function used is a simple cubic function, it's not using the real BSSRDF
    falloff function yet.
    
    The node has a color input, along with a scattering radius for each RGB color
    channel along with an overall scale factor for the radii.
    
    There is also no GPU support yet, will test if I can get that working later.
    
    Node Documentation:
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/Shaders#BSSRDF
    
    Implementation notes:
    http://wiki.blender.org/index.php/Dev:2.6/Source/Render/Cycles/Subsurface_Scattering
    Cycles Hair:
    * Implemented the Hair Info Node for OSL.
    Cycles: RGB and Vector Curves nodes now supported, with the limitation that the
    range must be left to the default (0..1 and -1..1).
    Cycles OSL: windows build system changes to support static OSL/OIIO.
    Cycles: 4 new nodes.
    
    * Tangent: generate a tangent direction for anisotropic shading. Can be either
      radial around X/Y/Z axis, or from a UV map. The default tangent for the
      anisotropic BSDF and geometry node is now always radial Z, for UV tangent use
      this node now.
    
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/More#Tangent
    
    * Normal Map: generate a perturbed normal from an RGB normal map image. This
      is usually chained with an Image Texture node in the color input, to specify
      the normal map image. For tangent space normal maps, the UV coordinates for
      the image must match, and the image texture should be set to Non-Color mode
      to give correct results.
    
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/More#Normal_Map
    
    * Refraction BSDF: for best results this node should be considered as a building
      block and not be used on its own, but rather mixed with a glossy node using a
      fresnel type factor. Otherwise it will give quite dark results at the edges for
      glossy refraction.
    
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/Shaders#Refraction
    
    * Ambient Occlusion: controls the amount of AO a surface receives, rather than
      having just a global factor in the world. Note that this outputs a shader and
      not a color, that's for another time.
    
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/Shaders#Ambient_Occlusion
    Cycles OSL: refactoring and fixes
    
    * Moved kernel/osl/nodes to kernel/shaders
    * Renamed standard attributes to use geom:, particle:, object: prefixes
    * Update stdosl.h to properly reflect the closures we support
    * Fix the wrong stdosl.h being used for building shaders
    * Add geom:numpolyvertices, geom:trianglevertices, geom:polyvertices attributes
    Cycles OSL: light path, texture coordinate, bump and blended box mapping now up
    to date and working.
    Integer socket support in Cycles. Int values are already supported natively in OSL, but were not used as actual ints on the SVM stack. This patch implements all the necessary functionality to support reading input values from RNA properties and convert between SHADER_SOCKET_INT and other types.
    Cycles OSL: some build system tweaks to avoid global includes and definitions,
    which ensures there is no conflict with other libraries, and avoids full rebuild
    when toggling OSL on/off.
    Cycles / OSL:
    * Layer Weight is now available in OSL.
    Cycles / OSL:
    * Add Light Falloff Node.
    OSL implementation of RGB ramp node.
    
    The sampled color ramp data is passed to OSL as a color array. This has to be done as actual float[3] array though, since the Cycles float3 type actually contains 4 floats, leading to shifting color components in the array.
    
    Additional parameter set functions for arrays have been added to the Cycles OSL interface for this purpose.
    Implemented the Particle Info for OSL. Uses the following attributes:
    
    * std::particle_index
    * std::particle_age
    * std::particle_lifetime
    * std::particle_location
    * std::particle_size
    * std::particle_velocity
    * std::particle_angular_velocity
    
    Just as with SVM the rotation state attribute is currently disabled due to lack of a proper quaternion or matrix type in Cycles nodes.
    Added Object Info node implementation for OSL. This uses an additional attribute check in the osl_services callback for special attribute names related to objects:
    
    * std::object_location
    * std::object_index
    * std::material_index
    * std::object_random
    
    Other object-based attributes can be added for particle info in the same way.
    * Forgot to commit CMake change for the Brick texture.
    OSL / Cmake:
    * Holdout shader was missing in cmake.
    Fix for OSL shader install paths.
    Fixed remaining syntax errors in OSL files. node_sepcomb_rgb.osl is split into 2 parts, since OSL only allows one shader per file.
    Cycles / OSL:
    * Add oslutil.h, from osl 1.2.
    Cycles / OSL:
    * Remove declaration of node_blend_weight_texture from cmake, does not exist, and match node_blend_weight name in nodes.cpp with the actual file.
    Cycles / OSL Textures:
    * Ported my checker texture to OSL. :)
    Cycles / OSL:
    * More fixes for r41599, removed clouds and distorted noise textures and ported the Noise texture to OSL.
    ToDo: Color output is still commented, needs a closer look.
    
    * Some more fixes (comments, uninitialized variables)
    Cycles / OSL:
    * More OSL fixes for r41599, removed marble and wood texture and ported Wave Texture to OSL.
    Cycles / OSL Fixes:
    * OSL textures were never updated after the refactor in november 2011.
    
    * Remove stucci texture and renamed blend to gradient.
    Brightness/Contrast Node for Cycles
    
    Contrast helps to adjust IBL (HDR images used for background lighting).
    Note: In the UI we are caling it Bright instead of Brightness. This copy what Blender composite is doing.
    Note2: the algorithm we are using produces pure black when contrast is 100. I'm not a fan of that, but it's a division by zero. I would like to look at other algorithms (what gimp does for example). But that would be only after 2.62.
    Cycles Gamma Node
    Node specially useful for Texture correction.
    
    This is also a nice example of a simple node made from scratch in case someone wants to create their custom nodes.
    Review by Brecht.
    Normal Node - Cycles
    reviewed by Brecht, with help from Lukas.
    
    Note: dot is reversed compared to Blender.
    In Blender Normals point outside, while in Cycles they point inside.
    If you use your own custom vector with the Normal Node you will see a difference.
    If you feed it with object normals it should work just as good.
    Invert Color Cycles Node
    as with the HSV node the OSL code is relying on the (yet to be implemented) autorename.
    
    Also the svm code could use mix (svm_lerp) instead:
     32 . float3 color_inv = make_float3(1.0f, 1.0f, 1.0f) - color;
     35 . . stack_store_float3(stack, out_color, svm_lerp(color_inv, color, factor));
    
    I have a feeling that each node 'program' should have the least program as possible. I'll see with Brecht later.
    But overall I don't know if that's any fast. And apart from that I think we will need this kind of function to move to a library if multiple functions linked in are not a problem.
    CameraData Input Cycles Node
    ----------------------------
    reviewed and approved by Brecht
    
    Important note:
    the camera Z is reverted compared to Blender render.
    Now it goes from zero (camera) to positive (in front of the camera)
    HSV Color Node for Cycles
    .........................
    note, the OSL code has a problem.
    In the original node the input and output nodes have the same name (Color).
    So this will be fixed here once Brecht come up with a nice autorenaming (or we do a doversion patch) for that.
    SeparateRGB and CombineRGB nodes for Cycles materials
    reviewed and approved by Brecht
    
    my first OpenCL code \o/
    add some missing headers to cmake, also add some files as comments since it seems they should be added but evidently work fine without.
    edits to cycles cmake files so cmake_consistency_check.py can parse them.
    Cycles: revert commit that joined surface/volume socket into a single shader socket,
    on second thought this makes it a bit too difficult to understand what's going on.
    Cycles: replace surface/volume sockets in output nodes with a single shader socket,
    decided it's better to render objects as either surface or volume.
    
    This may break the volume rendering patch, but shaders with volume closures still
    get tagged as having volume closures, so it should be fixable without too many
    changes.
    Cycles: tweaks to properties and nodes
    
    * Passes renamed to samples
    * Camera lens radius renamed to aperature size/blades/rotation
    * Glass and fresnel nodes input is now index of refraction
    * Glossy and velvet fresnel socket removed
    * Mix/add closure node renamed to mix/add shader node
    * Blend weight node added for shader mixing weights
    
    There is some version patching code for reading existing files, but it's not
    perfect, so shaders may work a bit different.
    Cycles:
    * add some (disabled) test code for using OpenImageIO in imbuf
    * link cycles, openimageio and boost into blender instead of a shared library
    * some cmakefile changes to simplify the code and follow conventions better
    * this may solve running cycles problems on windows XP, or give a different
      and hopefully more useful error message
    Cycles: hook up the CMake build system.
    
    New build instructions for Ubuntu Linux in the wiki:
    http://wiki.blender.org/index.php/Dev:2.5/Source/Cycles
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    code cleanup:
    - move object_iterators.c --> view3d_iterators. (ED_object.h had to include ED_view3d.h which isn't so nice)
    - move projection functions from view3d_view.c --> view3d_project.c (view3d_view was becoming a mishmash of utility functions and operators).
    - some some cmake includes as system-includes.
    code cleanup: cycles now uses system includes for boost/oiio.. etc, so we dont get warnings from system headers.
    Cycles: merging features from tomato branch.
    
    === BVH build time optimizations ===
    
    * BVH building was multithreaded. Not all building is multithreaded, packing
      and the initial bounding/splitting is still single threaded, but recursive
      splitting is, which was the main bottleneck.
    
    * Object splitting now uses binning rather than sorting of all elements, using
      code from the Embree raytracer from Intel.
      http://software.intel.com/en-us/articles/embree-photo-realistic-ray-tracing-kernels/
    
    * Other small changes to avoid allocations, pack memory more tightly, avoid
      some unnecessary operations, ...
    
    These optimizations do not work yet when Spatial Splits are enabled, for that
    more work is needed. There's also other optimizations still needed, in
    particular for the case of many low poly objects, the packing step and node
    memory allocation.
    
    BVH raytracing time should remain about the same, but BVH build time should be
    significantly reduced, test here show speedup of about 5x to 10x on a dual core
    and 5x to 25x on an 8-core machine, depending on the scene.
    
    === Threads ===
    
    Centralized task scheduler for multithreading, which is basically the
    CPU device threading code wrapped into something reusable.
    
    Basic idea is that there is a single TaskScheduler that keeps a pool of threads,
    one for each core. Other places in the code can then create a TaskPool that they
    can drop Tasks in to be executed by the scheduler, and wait for them to complete
    or cancel them early.
    
    === Normal ====
    
    Added a Normal output to the texture coordinate node. This currently
    gives the object space normal, which is the same under object animation.
    
    In the future this might become a "generated" normal so it's also stable for
    deforming objects, but for now it's already useful for non-deforming objects.
    
    === Render Layers ===
    
    Per render layer Samples control, leaving it to 0 will use the common scene
    setting.
    
    Environment pass will now render environment even if film is set to transparent.
    
    Exclude Layers" added. Scene layers (all object that influence the render,
    directly or indirectly) are shared between all render layers. However sometimes
    it's useful to leave out some object influence for a particular render layer.
    That's what this option allows you to do.
    
    === Filter Glossy ===
    
    When using a value higher than 0.0, this will blur glossy reflections after
    blurry bounces, to reduce noise at the cost of accuracy. 1.0 is a good
    starting value to tweak.
    
    Some light paths have a low probability of being found while contributing much
    light to the pixel. As a result these light paths will be found in some pixels
    and not in others, causing fireflies. An example of such a difficult path might
    be a small light that is causing a small specular highlight on a sharp glossy
    material, which we are seeing through a rough glossy material. With path tracing
    it is difficult to find the specular highlight, but if we increase the roughness
    on the material the highlight gets bigger and softer, and so easier to find.
    
    Often this blurring will be hardly noticeable, because we are seeing it through
    a blurry material anyway, but there are also cases where this will lead to a
    loss of detail in lighting.
    edits to cycles cmake files so cmake_consistency_check.py can parse them.
    Cycles:
    * add some (disabled) test code for using OpenImageIO in imbuf
    * link cycles, openimageio and boost into blender instead of a shared library
    * some cmakefile changes to simplify the code and follow conventions better
    * this may solve running cycles problems on windows XP, or give a different
      and hopefully more useful error message
    Cycles: hook up the CMake build system.
    
    New build instructions for Ubuntu Linux in the wiki:
    http://wiki.blender.org/index.php/Dev:2.5/Source/Cycles
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    CMake: Add initial support for compilation on Windows
    
    There's still lack of proper install target, so currently pthreads
    library is to be copied next to cycles.exe manually.
    Fully support WITH_CYCLES_LOGGING option
    
    Quite straightforward, used find*() modules from Ceres, so the
    variable naming is a bit different. Example of declaring which
    Glog/Gflags to use:
    
      cmake \
        -D GLOG_INCLUDE_DIR_HINTS=/opt/lib/glog/include \
        -D GLOG_LIBRARY_DIR_HINTS=/opt/lib/glog/lib \
        -D GFLAGS_INCLUDE_DIR_HINTS=/opt/lib/gflags/include \
        -D GFLAGS_LIBRARY_DIR_HINTS=/opt/lib/gflags/lib \
        /path/to/cycles
    
    This would break logging support when re-bundled back to Blender
    because of the changes in CMake files. But those changes i would
    like to do in Blender as well with some tweaks to how Glog/Gflags
    libraries are being detected.
    CMake: Minor cleanup
    Fix compilation error when OIIO is compiled with external PugiXML parser
    
    Basic idea is to check whether OIIO is compiled with embedded PugiXML parser
    and if so use PugiXML from OIIO, otherwise find a standalone PugiXML library.
    
    Note: This is actually a required dependency, so either ensure OIIO has this
    library embedded or install it separately.
    CMake: use pthreads on all os's
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Ghost Context Refactor
    https://developer.blender.org/D643
    Separates graphics context creation from window code in Ghost so that they can vary separately.
    Deduplicate CUDA and OpenCL wranglers
    
    For now it was mainly about OpenCL wrangler being duplicated
    between Cycles and Compositor, but with OpenSubdiv work those
    wranglers were gonna to be duplicated just once again.
    
    This commit makes it so Cycles and Compositor uses wranglers
    from this repositories:
    
      - https://github.com/CudaWrangler/cuew
      - https://github.com/OpenCLWrangler/clew
    
    This repositories are based on the wranglers we used before
    and they'll be likely continued maintaining by us plus some
    more players in the market.
    
    Pretty much straightforward change with some tricks in the
    CMake/SCons to make this libs being passed to the linker
    after all other libraries in order to make OpenSubdiv linked
    against those wranglers in the future.
    
    For those who're worrying about Cycles being less standalone,
    it's not truth, it's rather more flexible now and in the future
    different wranglers might be used in Cycles. For now it'll
    just mean those libs would need to be put into Cycles repository
    together with some other libs from Blender such as mikkspace.
    
    This is mainly platform maintenance commit, should not be any
    changes to the user space.
    
    Reviewers: juicyfruit, dingto, campbellbarton
    
    Reviewed By: juicyfruit, dingto, campbellbarton
    
    Differential Revision: https://developer.blender.org/D707
    Cycles_server also needs to link to libdl on linux
    fix building cycles standalone on windows / cmake
    Fix cycles standalone compile on some systems, CMAKE_DL_LIBS should be enough.
    
    Reviewed By: brecht
    
    Differential Revision: https://developer.blender.org/D205
    Cycles: network render code updated for latest changes and improved
    
    This actually works somewhat now, although viewport rendering is broken and any
    kind of network error or connection failure will kill Blender.
    
    * Experimental WITH_CYCLES_NETWORK cmake option
    * Networked Device is shown as an option next to CPU and GPU Compute
    * Various updates to work with the latest Cycles code
    * Locks and thread safety for RPC calls and tiles
    * Refactored pointer mapping code
    * Fix error in CPU brand string retrieval code
    
    This includes work by Doug Gale, Martijn Berger and Brecht Van Lommel.
    
    Reviewers: brecht
    
    Differential Revision: http://developer.blender.org/D36
    Cycles: remove approximate subdivision surface with gregory patches code.
    
    It was never fully implemented and will be replaced by OpenSubdiv. Only linear
    subdivision remains now. Also includes some refactoring in the split/dice code,
    adding a SubdParams struct to pass around parameters more easily.
    Cycles:
    * More build fixes, 2 link errors remain. http://www.pasteall.org/45279
    
    Note: Probably those paths should only be added for Windows and Linux, as "OPENIMAGEIO_LIBPATH" already inherit them for Mac OS. Also "OPENIMAGEIO_LIBRARIES" inherits the libs for Linux already. Is that intended or a lack of consistency?
    Cycles / Standalone:
    * Fix some link errors on Windows, still missing png, zlib, jpeg and tiff.
    
    I couldn't yet figure out the correct flags to pass on here, and the 2300 lines huge main CMakeLists file doesn't help with it...
    use CMAKE_DL_LIBS rather then linking libdl directly.
    added to cycles standalone too.
    Cycles / Standalone:
    * Standalone can now be compiled without the GUI, making the glut dependency optional.
    
    Added WITH_CYCLES_STANDALONE_GUI cmake flag.
    Cycles / Standalone:
    * Rename test to standalone.
    
    Note: New CMAKE flag is WITH_CYCLES_STANDALONE.
    Cycles / CMake:
    * Removed PARTIO building code, partio code was removed already.
    * Include "app" dir only when building with CYCLES_TEST enabled.
    code cleanup: cycles now uses system includes for boost/oiio.. etc, so we dont get warnings from system headers.
    edits to cycles cmake files so cmake_consistency_check.py can parse them.
    added FindOpenImageIO cmake module.
    Cycles: OpenCL library is now dynamically loaded so that blender doesn't crash
    if it's not installed on the system.
    
    Code copied from clew.h/clew.c in CLCC:
    http://clcc.sourceforge.net/
    Cycles:
    * add some (disabled) test code for using OpenImageIO in imbuf
    * link cycles, openimageio and boost into blender instead of a shared library
    * some cmakefile changes to simplify the code and follow conventions better
    * this may solve running cycles problems on windows XP, or give a different
      and hopefully more useful error message
    Cycles: fix GLEW library build issue.
    Cycles: build without GLUT test app by default.
    Cycles: hook up the CMake build system.
    
    New build instructions for Ubuntu Linux in the wiki:
    http://wiki.blender.org/index.php/Dev:2.5/Source/Cycles
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Ghost Context Refactor
    https://developer.blender.org/D643
    Separates graphics context creation from window code in Ghost so that they can vary separately.
    Cycles: Add support of Glog logging
    
    This commit makes it possible to use Glog library for the debug logging.
    For now only possible when using CMake and in order to use the logging
    the WITH_CYCLES_LOGGING configuration variable is to be enabled.
    
    When this option is not enabled or when using Scons there's no difference
    in Cycles behavior at all, when using logging and no output to the console
    impact is gonna to be minimal.
    
    This is done in order to make it possible to have debug logging persistent
    in code (without need to add it when troubleshooting some bug and removing
    it afterwards).
    
    For now actual logging is not placed yet, only all the functions needed for
    the logging are written and so.
    Followup for the previous commit: apparently for CMake py files are hardcoded
    Cleanup: Restrict the debug -gline-tables-only to cxx_debug in cycles and spelling
    Extend workaround to all OS  :avoid link failure with clang 3.4 debug
    Code cleanup: cmake
    Cmake: fix compile problem after own commit
    Fix for compilation error since previous fix for XCode
    OSX/cmake: set DEBUG_INFORMATION_LEVEL to "line-tables-only" for cycles, clang 3.4 (xcode 5.1) would not link with RNA in debug else
    Add GLEW_STATIC definition for CMake as well.
    Move GCC attributes into a centraized defines
    
    Instead of having ifdef __GNUC__ all over the headers
    to use special compiler's hints use a special file where
    all things like this are concentrated.
    
    Makes code easier to follow and allows to manage special
    attributes in more efficient way.
    
    Thanks Campbell for review!
    move BLO_sys_types.h -> BLI_sys_types.h (it had nothing todo with loading)
    remove MEM_sys_types.h which was a duplicate.
    New feature
    
    Patch [#33445] - Experimental Cycles Hair Rendering (CPU only)
    
    This patch allows hair data to be exported to cycles and introduces a new line segment primitive to render with.
    
    The UI appears under the particle tab and there is a new hair info node available.
    
    It is only available under the experimental feature set and for cpu rendering.
    Cycles: shuffle addon import statements a bit to try to fix a strange import
    error in some builds.
    Cycles: use mikktspace now for computing tangents from UV maps. This avoids ugly
    averaged tangents at UV seams but instead now the seams will show as discontinuities
    in the tangent.
    Cycles OSL: shader script node
    
    Documentation here:
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/OSL
    http://wiki.blender.org/index.php/Dev:Ref/Release_Notes/2.65/Cycles
    
    These changes require an OSL build from this repository:
    https://github.com/DingTo/OpenShadingLanguage
    
    The lib/ OSL has not been updated yet, so you might want to keep OSL disabled
    until that is done.
    
    Still todo:
    * Auto update for external .osl files not working currently, press update manually
    * Node could indicate better when a refresh is needed
    * Attributes like UV or generated coordinates may be missing when requested from
      an OSL shader, need a way to request them to be loaded by cycles
    * Expose string, enum and other non-socket parameters
    * Scons build support
    
    Thanks to Thomas, Lukas and Dalai for the implementation.
    Particle Info node for Cycles. This can be used to access particle information in material shaders for dupli objects. For now only the particle Age and individual Lifetime (in frames) are supported, more attributes can be added when needed.
    
    The particle data is stored in a separate texture if any of the dupli objects uses particle info nodes in shaders. To map dupli objects onto particles the store an additional particle_index value, which is different from the simple dupli object index (only visible particles, also works for particle dupli groups mode).
    
    Some simple use cases on the code.blender.org blog:
    http://code.blender.org/index.php/2012/05/particle-info-node/
    Cycles: multi GPU rendering support.
    
    The rendering device is now set in User Preferences > System, where you can
    choose between OpenCL/CUDA and devices. Per scene you can then still choose
    to use CPU or GPU rendering.
    
    Load balancing still needs to be improved, now it just splits the entire
    render in two, that will be done in a separate commit.
    Cycles
    * Compile all of cycles with -ffast-math again
    * Add scons compilation of cuda binaries, tested on mac/linux.
    * Add UI option for supported/experimental features, to make it
      more clear what is supported, opencl/subdivision is experimental.
    * Remove cycles xml exporter, was just for testing.
    pep8 edits and avoid naming conflicts with python builtins
    Cycles: another build system tweak that might solve build problem, not sure
    why this code is giving issues.
    Cycles: cmake build system tweak, might solve compile issue.
    edits to cycles cmake files so cmake_consistency_check.py can parse them.
    Cycles: integrator presets, patch by Thomas.
    Cycles: fix linux build issue, link order was wrong.
    Cycles:
    * add some (disabled) test code for using OpenImageIO in imbuf
    * link cycles, openimageio and boost into blender instead of a shared library
    * some cmakefile changes to simplify the code and follow conventions better
    * this may solve running cycles problems on windows XP, or give a different
      and hopefully more useful error message
    Cycles: fix crash with image texture nodes (on windows).
    Cycles: OS X build system changes to use lib/ openimageio and boost.
    Cycles: fix for dynamic library copying on linux.
    Cycles: for mac and unix, copy oiio/boost dynamic libraries into cycles lib
    directory to avoid library path issues.
    Cycles: attempt at fixing windows compile problem after merge.
    Cycles: fix GLEW library build issue.
    Cycles: first batch of windows build fixes, not quite there yet.
    Cycles: fix build issue with Blender includes.
    Cycles: hook up the CMake build system.
    
    New build instructions for Ubuntu Linux in the wiki:
    http://wiki.blender.org/index.php/Dev:2.5/Source/Cycles
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Ghost Context Refactor
    https://developer.blender.org/D643
    Separates graphics context creation from window code in Ghost so that they can vary separately.
    Cycles Bake
    
    Expand Cycles to use the new baking API in Blender.
    
    It works on the selected object, and the panel can be accessed in the Render panel (similar to where it is for the Blender Internal).
    
    It bakes for the active texture of each material of the object. The active texture is currently defined as the active Image Texture node present in the material nodetree. If you don't want the baking to override an existent material, make sure the active Image Texture node is not connected to the nodetree. The active texture is also the texture shown in the viewport in the rendered mode.
    
    Remember to save your images after the baking is complete.
    
    Note: Bake currently only works in the CPU
    Note: This is not supported by Cycles standalone because a lot of the work is done in Blender as part of the operator only, not the engine (Cycles).
    
    Documentation:
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Bake
    
    Supported Passes:
    -----------------
    Data Passes
     * Normal
     * UV
     * Diffuse/Glossy/Transmission/Subsurface/Emit Color
    
    Light Passes
     * AO
     * Combined
     * Shadow
     * Diffuse/Glossy/Transmission/Subsurface/Emit Direct/Indirect
     * Environment
    
    Review: D421
    Reviewed by: Campbell Barton, Brecht van Lommel, Sergey Sharybin, Thomas Dinge
    
    Original design by Brecht van Lommel.
    
    The entire commit history can be found on the branch: bake-cycles
    Code cleanup: remove some unused cycles SSS code.
    Cycles / Sky Model:
    * Replaced the Preetham model with the newer Hosek / Wilkie model:
    "An Analytic Model for Full Spectral Sky-Dome Radiance" http://cgg.mff.cuni.cz/projects/SkylightModelling/
    
    * We use the sample code data, which comes with the paper, but removed some unnecessary parts, we only need the xyz version.
    * New "Albedo" UI paraemeter, to control the ground albedo (between 0 and 1).
    * Works with SVM only atm (CPU and CUDA).
    
    Example render:
    http://www.pasteall.org/pic/show.php?id=57635
    
    ToDo / Open Questions:
    * OSL still uses the old model, will be done later. In the meantime it's useful to compare the two models this way.
    * The new model needs a much weaker Strength value (0.01), otherwise it's white. Can this be fixed?
    * Code cleanup.
    Cycles / Blackbody to RGB node:
    * Added a node to convert a temperature in Kelvin to an RGB color. This can be used e.g. for lights, to easily find the right color temperature.
    = Some common temperatures =
    Candle light: 1500 Kelvin
    Sunset/Sunrise: 1850 Kelvin
    Studio lamps: 3200 Kelvin
    Horizon daylight: 5000 Kelvin
    
    Documentation: http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/More#Blackbody
    
    Thanks to Philipp Oeser (lichtwerk), who essentially contributed to this with a patch! :)
    
    This is part of my GSoC 2013 project. SVN merge of r57424, r57487, r57507, r57525, r58253 and r58774
    Cycles / Blackbody node:
    * Replaced the Brute Force version with a nice lookup table, this speeds it up a lot.
    Patch by Philipp Oeser (lichtwerk) with some cleanup and changes by myself. Thanks!
    
    ToDo:
    * Temperature values between 800 and 804 Kelvin are wrong in SVM, check on this.
    Cycles:
    * Remove unused film_response table code.
    Cycles: initial subsurface multiple scattering support. It's not working as
    well as I would like, but it works, just add a subsurface scattering node and
    you can use it like any other BSDF.
    
    It is using fully raytraced sampling compatible with progressive rendering
    and other more advanced rendering algorithms we might used in the future, and
    it uses no extra memory so it's suitable for complex scenes.
    
    Disadvantage is that it can be quite noisy and slow. Two limitations that will
    be solved are that it does not work with bump mapping yet, and that the falloff
    function used is a simple cubic function, it's not using the real BSSRDF
    falloff function yet.
    
    The node has a color input, along with a scattering radius for each RGB color
    channel along with an overall scale factor for the radii.
    
    There is also no GPU support yet, will test if I can get that working later.
    
    Node Documentation:
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/Shaders#BSSRDF
    
    Implementation notes:
    http://wiki.blender.org/index.php/Dev:2.6/Source/Render/Cycles/Subsurface_Scattering
    Cycles: code refactoring to add generic lookup table memory.
    New feature
    
    Patch [#33445] - Experimental Cycles Hair Rendering (CPU only)
    
    This patch allows hair data to be exported to cycles and introduces a new line segment primitive to render with.
    
    The UI appears under the particle tab and there is a new hair info node available.
    
    It is only available under the experimental feature set and for cpu rendering.
    code cleanup:
    - move object_iterators.c --> view3d_iterators. (ED_object.h had to include ED_view3d.h which isn't so nice)
    - move projection functions from view3d_view.c --> view3d_project.c (view3d_view was becoming a mishmash of utility functions and operators).
    - some some cmake includes as system-includes.
    correct some include dirs not being included as SYSTEM paths in cmake.
    code cleanup: cycles now uses system includes for boost/oiio.. etc, so we dont get warnings from system headers.
    Fix for #32184 and redesign of particle storage in Cycles.
    
    The particle data used by the Particle Info node was stored in cycles as a list in each object. This is a problem when the particle emitter mesh is hidden: Objects in cycles are only intended as instances of renderable meshes, so when hiding the emitter mesh the particle data doesn't get stored either. Also the particle data can potentially be copied to multiple instances of the same object, which is a waste of texture space.
    
    The solution in this patch is to make a completely separate list of particle systems in the Cycles scene data. This way the particle data can be generated even when the emitter object itself is not visible.
    Cycles: support for motion vector and UV passes.
    
    Most of the changes are related to adding support for motion data throughout
    the code. There's some code for actual camera/object motion blur raytracing
    but it's unfinished (it badly slows down the raytracing kernel even when the
    option is turned off), so that code it disabled still.
    
    Motion vector export from Blender tries to avoid computing derived meshes
    when the mesh does not have a deforming modifier, and it also won't store
    motion vectors for every vertex if only the object or camera is moving.
    spelling cleanup
    add some missing headers to cmake, also add some files as comments since it seems they should be added but evidently work fine without.
    edits to cycles cmake files so cmake_consistency_check.py can parse them.
    Cycles:
    * Add alpha pass output, to use set Transparent option in Film panel.
    * Add Holdout closure (OSL terminology), this is like the Sky option in the
      internal renderer, objects with this closure show the background / zero
      alpha.
    * Add option to use Gaussian instead of Box pixel filter in the UI.
    * Remove camera response curves for now, they don't really belong here in
      the pipeline, should be moved to compositor.
    
    * Output full float values for rendering now, previously was only byte precision.
    * Add a patch from Thomas to get a preview passes option, but still disabled
      because it isn't quite working right yet.
    * CUDA: don't compile shader graph evaluation inline.
    * Convert tabs to spaces in python files.
    Cycles:
    * add some (disabled) test code for using OpenImageIO in imbuf
    * link cycles, openimageio and boost into blender instead of a shared library
    * some cmakefile changes to simplify the code and follow conventions better
    * this may solve running cycles problems on windows XP, or give a different
      and hopefully more useful error message
    Cycles: first batch of windows build fixes, not quite there yet.
    Cycles: hook up the CMake build system.
    
    New build instructions for Ubuntu Linux in the wiki:
    http://wiki.blender.org/index.php/Dev:2.5/Source/Cycles
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Ghost Context Refactor
    https://developer.blender.org/D643
    Separates graphics context creation from window code in Ghost so that they can vary separately.
    Deduplicate CUDA and OpenCL wranglers
    
    For now it was mainly about OpenCL wrangler being duplicated
    between Cycles and Compositor, but with OpenSubdiv work those
    wranglers were gonna to be duplicated just once again.
    
    This commit makes it so Cycles and Compositor uses wranglers
    from this repositories:
    
      - https://github.com/CudaWrangler/cuew
      - https://github.com/OpenCLWrangler/clew
    
    This repositories are based on the wranglers we used before
    and they'll be likely continued maintaining by us plus some
    more players in the market.
    
    Pretty much straightforward change with some tricks in the
    CMake/SCons to make this libs being passed to the linker
    after all other libraries in order to make OpenSubdiv linked
    against those wranglers in the future.
    
    For those who're worrying about Cycles being less standalone,
    it's not truth, it's rather more flexible now and in the future
    different wranglers might be used in Cycles. For now it'll
    just mean those libs would need to be put into Cycles repository
    together with some other libs from Blender such as mikkspace.
    
    This is mainly platform maintenance commit, should not be any
    changes to the user space.
    
    Reviewers: juicyfruit, dingto, campbellbarton
    
    Reviewed By: juicyfruit, dingto, campbellbarton
    
    Differential Revision: https://developer.blender.org/D707
    Cycles: Build SSE41 kernel per default, remove build option. This hopefully also fixes some compile errors on various systems.
    Cycles: network render code updated for latest changes and improved
    
    This actually works somewhat now, although viewport rendering is broken and any
    kind of network error or connection failure will kill Blender.
    
    * Experimental WITH_CYCLES_NETWORK cmake option
    * Networked Device is shown as an option next to CPU and GPU Compute
    * Various updates to work with the latest Cycles code
    * Locks and thread safety for RPC calls and tiles
    * Refactored pointer mapping code
    * Fix error in CPU brand string retrieval code
    
    This includes work by Doug Gale, Martijn Berger and Brecht Van Lommel.
    
    Reviewers: brecht
    
    Differential Revision: http://developer.blender.org/D36
    Cycles: test code for sse 4.1 kernel and alignment for some vector types.
    
    This is mostly work towards enabling the __KERNEL_SSE__ option to start using
    SIMD operations for vector math operations. This 4.1 kernel performes about 8%
    faster with that option but overall is still slower than without the option.
    
    WITH_CYCLES_OPTIMIZED_KERNEL_SSE41 is the cmake flag for testing this kernel.
    
    Alignment of int3, int4, float3, float4 to 16 bytes seems to give a slight 1-2%
    speedup on tested systems with the current kernel already, so is enabled now.
    add missing bullet header to cmake, quiet reports from 'make test_cmake'
    device_network.cpp is completely elided when WITH_NETWORK is not defined, so do not include it in the build in that case
    code cleanup:
    - move object_iterators.c --> view3d_iterators. (ED_object.h had to include ED_view3d.h which isn't so nice)
    - move projection functions from view3d_view.c --> view3d_project.c (view3d_view was becoming a mishmash of utility functions and operators).
    - some some cmake includes as system-includes.
    code cleanup: cycles now uses system includes for boost/oiio.. etc, so we dont get warnings from system headers.
    Cycles: merge of changes from tomato branch.
    
    Regular rendering now works tiled, and supports save buffers to save memory
    during render and cache render results.
    
    Brick texture node by Thomas.
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/Textures#Brick_Texture
    
    Image texture Blended Box Mapping.
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/Textures#Image_Texture
    http://mango.blender.org/production/blended_box/
    
    Various bug fixes by Sergey and Campbell.
    * Fix for reading freed memory in some node setups.
    * Fix incorrect memory read when synchronizing mesh motion.
    * Fix crash appearing when direct light usage is different on different layers.
    * Fix for vector pass gives wrong result in some circumstances.
    * Fix for wrong resolution used for rendering Render Layer node.
    * Option to cancel rendering when doing initial synchronization.
    * No more texture limit when using CPU render.
    * Many fixes for new tiled rendering.
    add some missing headers to cmake, also add some files as comments since it seems they should be added but evidently work fine without.
    edits to cycles cmake files so cmake_consistency_check.py can parse them.
    Fix GLEW linking error on MinGW.
    The __imp__ prefix on glew lib linking errors should have been a good indication: the code was looking for the glew dll.
    Bypassed by adding GLEW_STATIC to the definitions.
    Cycles:
    * add some (disabled) test code for using OpenImageIO in imbuf
    * link cycles, openimageio and boost into blender instead of a shared library
    * some cmakefile changes to simplify the code and follow conventions better
    * this may solve running cycles problems on windows XP, or give a different
      and hopefully more useful error message
    Cycles: first batch of windows build fixes, not quite there yet.
    Cycles: hook up the CMake build system.
    
    New build instructions for Ubuntu Linux in the wiki:
    http://wiki.blender.org/index.php/Dev:2.5/Source/Cycles
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles: remove approximate subdivision surface with gregory patches code.
    
    It was never fully implemented and will be replaced by OpenSubdiv. Only linear
    subdivision remains now. Also includes some refactoring in the split/dice code,
    adding a SubdParams struct to pass around parameters more easily.
    code cleanup:
    - move object_iterators.c --> view3d_iterators. (ED_object.h had to include ED_view3d.h which isn't so nice)
    - move projection functions from view3d_view.c --> view3d_project.c (view3d_view was becoming a mishmash of utility functions and operators).
    - some some cmake includes as system-includes.
    code cleanup: cycles now uses system includes for boost/oiio.. etc, so we dont get warnings from system headers.
    edits to cycles cmake files so cmake_consistency_check.py can parse them.
    Cycles:
    * add some (disabled) test code for using OpenImageIO in imbuf
    * link cycles, openimageio and boost into blender instead of a shared library
    * some cmakefile changes to simplify the code and follow conventions better
    * this may solve running cycles problems on windows XP, or give a different
      and hopefully more useful error message
    Cycles: hook up the CMake build system.
    
    New build instructions for Ubuntu Linux in the wiki:
    http://wiki.blender.org/index.php/Dev:2.5/Source/Cycles
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    edits to cycles cmake files so cmake_consistency_check.py can parse them.
    Cycles:
    * add some (disabled) test code for using OpenImageIO in imbuf
    * link cycles, openimageio and boost into blender instead of a shared library
    * some cmakefile changes to simplify the code and follow conventions better
    * this may solve running cycles problems on windows XP, or give a different
      and hopefully more useful error message
    Cycles: remove docs from svn, moved to wiki.
    Cycles: remove developer docs, all moved to wiki now.
    Cycles: hook up the CMake build system.
    
    New build instructions for Ubuntu Linux in the wiki:
    http://wiki.blender.org/index.php/Dev:2.5/Source/Cycles
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    Cycles: OpenCL library is now dynamically loaded so that blender doesn't crash
    if it's not installed on the system.
    
    Code copied from clew.h/clew.c in CLCC:
    http://clcc.sourceforge.net/
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    edits to cycles cmake files so cmake_consistency_check.py can parse them.
    Cycles:
    * add some (disabled) test code for using OpenImageIO in imbuf
    * link cycles, openimageio and boost into blender instead of a shared library
    * some cmakefile changes to simplify the code and follow conventions better
    * this may solve running cycles problems on windows XP, or give a different
      and hopefully more useful error message
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles: OpenCL library is now dynamically loaded so that blender doesn't crash
    if it's not installed on the system.
    
    Code copied from clew.h/clew.c in CLCC:
    http://clcc.sourceforge.net/
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles: Add an AVX2 CPU kernel.
    
    This kernel is compiled with AVX2, FMA3, and BMI compiler flags. At the moment only Intel Haswell benefits from this, but future AMD CPUs will have these instructions as well.
    
    Makes rendering on Haswell CPUs a few percent faster, only benchmarked with clang on OS X though.
    
    Part of my GSoC 2014.
    Style cleanup: indentation, braces
    Fix missing brackets in cpuid bitfield check.
    concern raised by lukas_t (rBef73d547cc7c663ad180721094c81b3c81482ac3)
    Fix T38815
    
    For AVX support we need to check both OS support and CPU support.
    Cycles: Add an AVX kernel for CPU rendering.
    
    * AVX is available on Intel Sandy Bridge and newer and AMD Bulldozer and newer.
    * We don't use dedicated AVX intrinsics yet, but gcc auto vectorization gives a 3% performance improvement for Caminandes. Tested on an i5-3570, Linux x64.
    * No change for Windows yet, MSVC 2008 does not support AVX.
    
    Reviewed by: brecht
    Differential Revision: https://developer.blender.org/D216
    Cycles: network render code updated for latest changes and improved
    
    This actually works somewhat now, although viewport rendering is broken and any
    kind of network error or connection failure will kill Blender.
    
    * Experimental WITH_CYCLES_NETWORK cmake option
    * Networked Device is shown as an option next to CPU and GPU Compute
    * Various updates to work with the latest Cycles code
    * Locks and thread safety for RPC calls and tiles
    * Refactored pointer mapping code
    * Fix error in CPU brand string retrieval code
    
    This includes work by Doug Gale, Martijn Berger and Brecht Van Lommel.
    
    Reviewers: brecht
    
    Differential Revision: http://developer.blender.org/D36
    Cycles: test code for sse 4.1 kernel and alignment for some vector types.
    
    This is mostly work towards enabling the __KERNEL_SSE__ option to start using
    SIMD operations for vector math operations. This 4.1 kernel performes about 8%
    faster with that option but overall is still slower than without the option.
    
    WITH_CYCLES_OPTIMIZED_KERNEL_SSE41 is the cmake flag for testing this kernel.
    
    Alignment of int3, int4, float3, float4 to 16 bytes seems to give a slight 1-2%
    speedup on tested systems with the current kernel already, so is enabled now.
    Better fix for #36935 and 36316:
    
    * 32 bit GCC builds now have the SSE BVH optimizations turned off, but still
      compile with SSE flags for better performance.
    
    * White color when rendering on Windows seems to have been unrelated to SSE,
      rather it was a graphics driver not supporting half float textures, added a
      check for that now.
    Attempt to fix #36935: disable SSE optimizations on 32 bit windows too. Something
    strange is going on here, but I don't think it can be fixed before the release,
    if it is worth at all spending time on this.
    Fix #36316: dots in cycles render on certain CPUs with 32 bit linux builds.
    There is some sort of problem with the SSE2 code path, but I couldn't find
    the cause, maybe a compiler bug due to the large amount of inlining? For
    now I've disabled SSE2 optimizatons in 32 bit GCC builds.
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    Fix cycles crash on some processors. We actually need S-SSE3 support for this
    new BVH traversal code, not just SSE3.
    Fix build error on non-x86 architectures as pointed out by Jochen Schmitt.
    Fix cycles intersection issue with overlapping faces on windows 32 bit and CPU
    without SSE3 support, due to 80 bit precision float register being used for one
    bounding box but not the one next to it.
    style cleanup: block comments
    style cleanup
    Cycles:
    * Fix broken compile of test app.
    * Fix some warnings compiling with gcc for 32 bit.
    * More tweaks to avoid extended precision issue from #29301.
    Fix #29259: cycles issues on certain processors. Now two versions of the kernel
    are compiled, one SSE optimized and the other not, and it will choose between
    them at runtime.
    Cycles: some warning fixes, cpu device task tweaks, avoid unnecessary
    tonemap in non-viewport render, and some utility functions.
    Compile fixes for MinGW, checked with basic initial setup, no CUDA, gcc 4.5.2.
    OpenImageIO still gives link-time errors, will try to make a lib for MinGW, see if it is fixed.
    Cycles: two 32 bit fixes with help from IRC user Agiofws.
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Cycles: Revert changes to inline flags enabled for release only
    
    It appears it's not really needed for convenient debugging when
    using proper flags passed to the compiler. Basically, it is -g3
    and set breakpoint to a function as if it's not in the namespace.
    
    Not as if a code was any wrong, just it's possible to have more
    clear solution for the issue i've tried to solve in the past.
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles: Keep ccl_always_inline always inlining the stuff
    
    It works around strange shading bug when building with MSVC.
    If such weirdeness continues, we perhaps would need to use
    proper inline flags all the time.
    
    Anyway, lets see how things will behave now.
    Cycles: Accidentally inverted the logic of NDEBUG macro
    Cycles: Don't inline functions for debug CPU kernel
    
    Nobody will use debug mode for benchmarks anyway and this way it's much easier
    to set breakpoints on inlined functions to catch all their usages.
    Make CHECK_TYPE_NONCONST macro portable
    
    also replace __typeof -> typeof
    Cycles Refactor: Add SSE Utility code from Embree for cleaner SSE code.
    
    This makes the code a bit easier to understand, and might come in handy
    if we want to reuse more Embree code.
    
    Differential Revision: https://developer.blender.org/D482
    
    Code by Brecht, with fixes by Lockal, Sergey and myself.
    Move ShadingSystem enum to shader.h
    Add SHADINGSYSTEM_ to enum member names, so it is clear where they
    are from.
    
    Revert BVHType enum changes, as there's no need for code dedup here.
    Move BVHType and shadingsystem enums to top-level of Cycles namespace.
    
    Easier access of BVHType and deduplication for ShadingSystem.
    
    Reviewers: dingto, brecht
    
    Differential Revision: https://developer.blender.org/D534
    Code cleanup: comment typos
    Add check for LIKELY/UNLIKELY is CPU only
    Cycles: use LIKELY/UNLIKELY macros
    
    Gives overall ~3% speedup in own tests for BMW scene.
    Style cleanup: indentation, braces
    Add support for multiple interpolation modes on cycles image textures
    
    All textures are sampled bi-linear currently with the exception of OSL there texture sampling is fixed and set to smart bi-cubic.
    
    This patch adds user control to this setting.
    
    Added:
    - bits to DNA / RNA in the form of an enum for supporting multiple interpolations types
    - changes to the image texture node drawing code ( add enum)
    - to ImageManager (this needs to know to allocate second texture when interpolation type is different)
    - to node compiler (pass on interpolation type)
    - to device tex_alloc this also needs to get the concept of multiple interpolation types
    - implementation for doing non interpolated lookup for cuda and cpu
    - implementation where we pass this along to osl ( this makes OSL also do linear untill I add smartcubic to the interface / DNA/ RNA)
    
    Reviewers: brecht, dingto
    
    Reviewed By: brecht
    
    CC: dingto, venomgfx
    
    Differential Revision: https://developer.blender.org/D317
    Cycles: remove ccl_align macro for GPU as unused and unsupported in OpenCL
    Cycles: fix crash in SSE hair and half-floats on x86+vc2008
    
    MSVC 2008 ignores alignement attribute when assigning from unaligned
    float4 vector, returned from other function. Now Cycles uses unaligned
    loads instead of casts for win32 in x86 mode.
    Cycles: bvh_cardinal_curve_intersect intro SSE optimization
    
    Gives 5% speedup for koro_final.blend, 10-15% for hair.blend
    
    Reviewed By: brecht
    
    Differential Revision: https://developer.blender.org/D225
    Fix cycles crash with float image textures on CPU without AVX support.
    
    The AVX kernel functions for reading image textures could be get used from non-AVX
    kernels. These are C++ class methods and need to be marked for inlining, all other
    functions are static so they don't leak into other kernels.
    Code cleanup: move half float functions to separate header file.
    Code cleanup: some reshuffling of SIMD defines moving more code to util_optimization.h.
    Fix T38129: cycles viewport render display with very bright colors turning black.
    
    This happened when exceeding the maximum value representable by half floats.
    Cycles: Move SIMD utility functions into its own file.
    
    Recently added SSE macros for noise texture can be moved here as well, but I leave this for later.
    Fix cycles build error with visual studio, apparently the windows ABI does not
    like 16 bit alignment on 32 bit.
    Cycles: test code for sse 4.1 kernel and alignment for some vector types.
    
    This is mostly work towards enabling the __KERNEL_SSE__ option to start using
    SIMD operations for vector math operations. This 4.1 kernel performes about 8%
    faster with that option but overall is still slower than without the option.
    
    WITH_CYCLES_OPTIMIZED_KERNEL_SSE41 is the cmake flag for testing this kernel.
    
    Alignment of int3, int4, float3, float4 to 16 bytes seems to give a slight 1-2%
    speedup on tested systems with the current kernel already, so is enabled now.
    Cycles: change __device and similar qualifiers to ccl_device in kernel code.
    
    This to avoids build conflicts with libc++ on FreeBSD, these __ prefixed values
    are reserved for compilers. I apologize to anyone who has patches or branches
    and has to go through the pain of merging this change, it may be easiest to do
    these same replacements in your code and then apply/merge the patch.
    
    Ref T37477.
    Fix cycles OpenCL compile error on AMD, and fix assert in debug builds.
    Cycles: viewport render now takes scene color management settings into account,
    except for curves, that's still missing from the OpenColorIO GLSL shader.
    
    The pixels are stored in a half float texture, converterd from full float with
    native GPU instructions and SIMD on the CPU, so it should be pretty quick.
    Using a GLSL shader is useful for GPU render because it avoids a copy through
    CPU memory.
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    Code cleanup: cycles
    * Reshuffle SSE #ifdefs to try to avoid compilation errors enabling SSE on 32 bit.
    * Remove CUDA kernel launch size exception on Mac, is not needed.
    * Make OSL file compilation quiet like c/cpp files.
    Cycles / SSE2:
    * kernel_sse2 was built without actual SSE2 intrinsics on x86 systems.
    Cycles: ensure any SSE data is allocated 16 byte aligned, happens automatically
    on many platforms but is not assured everywhere.
    Cycles: update build configurations to include CUDA sm_35 architecture. When using
    a compiler older than CUDA 5.0 it will give a warning and skip this architecture.
    Cycles: optimized SSE BVH traversal now also works with SSE2 CPUs, so all the
    way back to Pentium 4, using a slightly less efficient instruction.
    
    Also ensure /Ox is used for Visual Studio for RelWithDebInfo builds.
    Fix cycles crash on some processors. We actually need S-SSE3 support for this
    new BVH traversal code, not just SSE3.
    Cycles: attempt to fix internal compile error with some visual studio builds
    Cycles BVH Build fix for MSVC 2012.
    needs to include intrin.h for _BitScanForward and _BitScanReverse.
    Cycles: optimization for BVH traveral on CPU's with SSE3, using code from Embree.
    
    On the BMW scene, this gives roughly a 10% speedup overall with clang/gcc, and 30%
    speedup with visual studio (2008). It turns out visual studio was optimizing the
    existing code quite poorly compared to pretty good autovectorization by clang/gcc,
    but hand written SSE code also gives a smaller speed boost there.
    
    This code isn't enabled when using the hair minimum width feature yet, need to
    make that work with the SSE code still.
    Fix compilation of cycles for MinGW-w64 after recent commits. MinGW-w64 has conflicting redefinitions of the SSE functions in windows.h, so we will be using this header instead, since we can't always avoid including it instead of the sse headers.
    Cycles: experimental correlated multi-jittered sampling pattern that can be used
    instead of sobol. So far one doesn't seem to be consistently better or worse than
    the other for the same number of samples but more testing is needed.
    
    The random number generator itself is slower than sobol for most number of samples,
    except 16, 64, 256, .. because they can be computed faster. This can probably be
    optimized, but we can do that when/if this actually turns out to be useful.
    
    Paper this implementation is based on:
    http://graphics.pixar.com/library/MultiJitteredSampling/
    
    Also includes some refactoring of RNG code, fixing a Sobol correlation issue with
    the first BSDF and < 16 samples, skipping some unneeded RNG calls and using a
    simpler unit square to unit disk function.
    Code cleanup: avoid some warnings due to implicit uint/int/float/double conversion.
    Cycles Hair: refactoring to support generic attributes for hair curves. There
    should be no functional changes yet. UV, tangent and intercept are now stored
    as attributes, with the intention to add more like multiple uv's, vertex
    colors, generated coordinates and motion vectors later.
    
    Things got a bit messy due to having both triangle and curve data in the same
    mesh data structure, which also gives us two sets of attributes. This will get
    cleaned up when we split the mesh class.
    Fix cycles aliasing warnings caused by motion blur transforms.
    get rid of annoying redefinition warning on cycles compilation for mingw64
    Cycles: 4 new nodes.
    
    * Tangent: generate a tangent direction for anisotropic shading. Can be either
      radial around X/Y/Z axis, or from a UV map. The default tangent for the
      anisotropic BSDF and geometry node is now always radial Z, for UV tangent use
      this node now.
    
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/More#Tangent
    
    * Normal Map: generate a perturbed normal from an RGB normal map image. This
      is usually chained with an Image Texture node in the color input, to specify
      the normal map image. For tangent space normal maps, the UV coordinates for
      the image must match, and the image texture should be set to Non-Color mode
      to give correct results.
    
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/More#Normal_Map
    
    * Refraction BSDF: for best results this node should be considered as a building
      block and not be used on its own, but rather mixed with a glossy node using a
      fresnel type factor. Otherwise it will give quite dark results at the edges for
      glossy refraction.
    
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/Shaders#Refraction
    
    * Ambient Occlusion: controls the amount of AO a surface receives, rather than
      having just a global factor in the world. Note that this outputs a shader and
      not a color, that's for another time.
    
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/Shaders#Ambient_Occlusion
    Cycles: Anisotropic BSDF enabled, with tangents now computed from the active UV map.
    It's using the Ward BSDF currently, which has some energy loss so might be a bit
    dark. More/better BSDF options can be implemented later.
    
    Patch by Mike Farnsworth, some modifications by me. Currently it's not possible yet
    to set a custom tangent, that will follow as part of per-bsdf normals patch.
    Fix for Cycles (CUDA) compilation (again ...). Moved the AttributeStandard enum typedef and the attribute_standard_name mapping function to util_attribute/util_types headers, so they can properly be used by kernel and render files alike. This should avoid any std C includes which are not available in CUDA. Thanks to Sergey for help!
    mingw32 compiles again
    
    "__force_inline" keyword used in Cycles header is not defined
    Cycles: merging features from tomato branch.
    
    === BVH build time optimizations ===
    
    * BVH building was multithreaded. Not all building is multithreaded, packing
      and the initial bounding/splitting is still single threaded, but recursive
      splitting is, which was the main bottleneck.
    
    * Object splitting now uses binning rather than sorting of all elements, using
      code from the Embree raytracer from Intel.
      http://software.intel.com/en-us/articles/embree-photo-realistic-ray-tracing-kernels/
    
    * Other small changes to avoid allocations, pack memory more tightly, avoid
      some unnecessary operations, ...
    
    These optimizations do not work yet when Spatial Splits are enabled, for that
    more work is needed. There's also other optimizations still needed, in
    particular for the case of many low poly objects, the packing step and node
    memory allocation.
    
    BVH raytracing time should remain about the same, but BVH build time should be
    significantly reduced, test here show speedup of about 5x to 10x on a dual core
    and 5x to 25x on an 8-core machine, depending on the scene.
    
    === Threads ===
    
    Centralized task scheduler for multithreading, which is basically the
    CPU device threading code wrapped into something reusable.
    
    Basic idea is that there is a single TaskScheduler that keeps a pool of threads,
    one for each core. Other places in the code can then create a TaskPool that they
    can drop Tasks in to be executed by the scheduler, and wait for them to complete
    or cancel them early.
    
    === Normal ====
    
    Added a Normal output to the texture coordinate node. This currently
    gives the object space normal, which is the same under object animation.
    
    In the future this might become a "generated" normal so it's also stable for
    deforming objects, but for now it's already useful for non-deforming objects.
    
    === Render Layers ===
    
    Per render layer Samples control, leaving it to 0 will use the common scene
    setting.
    
    Environment pass will now render environment even if film is set to transparent.
    
    Exclude Layers" added. Scene layers (all object that influence the render,
    directly or indirectly) are shared between all render layers. However sometimes
    it's useful to leave out some object influence for a particular render layer.
    That's what this option allows you to do.
    
    === Filter Glossy ===
    
    When using a value higher than 0.0, this will blur glossy reflections after
    blurry bounces, to reduce noise at the cost of accuracy. 1.0 is a good
    starting value to tweak.
    
    Some light paths have a low probability of being found while contributing much
    light to the pixel. As a result these light paths will be found in some pixels
    and not in others, causing fireflies. An example of such a difficult path might
    be a small light that is causing a small specular highlight on a sharp glossy
    material, which we are seeing through a rough glossy material. With path tracing
    it is difficult to find the specular highlight, but if we increase the roughness
    on the material the highlight gets bigger and softer, and so easier to find.
    
    Often this blurring will be hardly noticeable, because we are seeing it through
    a blurry material anyway, but there are also cases where this will lead to a
    loss of detail in lighting.
    Cycles: another fix for CUDA render passes, needed to align float4 passes.
    Cycles:
    * Fix excessive fireflies in Velvet BSDF (patch by David).
    * Disable some unused SSE code
    * Remove RTTI disabling flags for now, this is giving some compile issues and
      was only needed of OSL which we're not using yet.
    Cycles:
    * Add alpha pass output, to use set Transparent option in Film panel.
    * Add Holdout closure (OSL terminology), this is like the Sky option in the
      internal renderer, objects with this closure show the background / zero
      alpha.
    * Add option to use Gaussian instead of Box pixel filter in the UI.
    * Remove camera response curves for now, they don't really belong here in
      the pipeline, should be moved to compositor.
    
    * Output full float values for rendering now, previously was only byte precision.
    * Add a patch from Thomas to get a preview passes option, but still disabled
      because it isn't quite working right yet.
    * CUDA: don't compile shader graph evaluation inline.
    * Convert tabs to spaces in python files.
    Cycles: opencl 1.1 compatibility tweaks.
    Cycles: OSL build & image manager fixes.
    Cycles: first batch of windows build fixes, not quite there yet.
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles: Add support for cameras inside volume
    
    Basically the title says it all, volume stack initialization now is aware that
    camera might be inside of the volume. This gives quite noticeable render time
    regressions in cases camera is in the volume (didn't measure them yet) because
    this requires quite a few of ray-casting per camera ray in order to check which
    objects we're inside. Not quite sure if this might be optimized.
    
    But the good thing is that we can do quite a good job on detecting whether
    camera is outside of any of the volumes and in this case there should be no
    time penalty at all (apart from some extra checks during the sync state).
    
    For now we're only doing rather simple AABB checks between the viewplane and
    volume objects. This could give some false-positives, but this should be good
    starting point.
    
    Need to mention panoramic cameras here, for them it's only check for whether
    there are volumes in the scene, which would lead to speed regressions even if
    the camera is outside of the volumes. Would need to figure out proper check
    for such cameras.
    
    There are still quite a few of TODOs in the code, but the patch is good enough
    to start playing around with it checking whether there are some obvious mistakes
    somewhere.
    
    Currently the feature is only available in the Experimental feature sey, need
    to solve some of the TODOs and look into making things faster before considering
    the feature is ready for the official feature set. This would still likely
    happen in current release cycle.
    
    Reviewers: brecht, juicyfruit, dingto
    
    Differential Revision: https://developer.blender.org/D794
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    Cycles:
    * Fix compile error, when building with __KERNEL_SSE__
    Fix 34764: cycles issue rendering instanced mesh with NaN coordinates.
    Fix cycles hair curves with NaN values not rendering with dynamic BVH. These NaN
    values were breaking the bounding box computation, now they should have no influence.
    New feature
    
    Patch [#33445] - Experimental Cycles Hair Rendering (CPU only)
    
    This patch allows hair data to be exported to cycles and introduces a new line segment primitive to render with.
    
    The UI appears under the particle tab and there is a new hair info node available.
    
    It is only available under the experimental feature set and for cpu rendering.
    final fix for Sensor Fit (AUTO, HOR, VERT) in panorama lens - patch by Brecht Van Lommel and me
    Cycles bugfix: AUTO wasn't working for Equisolid Fisheye lens
    Now one no longer needs to match the sensor dimensions with the render dimensions manually.
    
    IMPORTANT NOTE: if you were using AUTO before with mismathing sensor aspect ratio (comparing to the render dimensions)
    this will change your render! We can doversion this, but apart from Tube project I don't know if anyone else
    is using this yet (part due to this bug and the only recently fixed 3dview preview aspect ratio).
    
    That should help more artists to take advantage of this fantastic Blender feature.
    It still helps to know the parameters of kwnown cameras/lens though.
    For example:
    
    Nikon DX2S with a 10.5mm fisheye can be set with:
    Render resolution: 4288 x 2848
    Sensor 23.7 x 15.70 (15.70 can be ommitted if AUTO is used as fit method)
    
    Note: some cameras render different sizes according to the recording mode.
    For example, a Red Scarlet in 5k (@12 fps) can render a full circular fisheye with a sigma 4.5 lens.
    The same camera in the 30fps recording mode renders 4k in a cropped circular image.
    So it's not only the resolution that changes, but the actual sensor been used.
    
    So just keep in mind that the more information you have from the camera/lens you want to emulate the better.
    Bug found at/patch written as a follow up of the BlenderPRO2012, patch reviewed by Brecht Van Lommel
    Cycles: panorama camera in viewport camera view now shows the render mapped
    to the camera border rather than the entire viewport.
    Fix visual studio debug build issue with BVH boundbox, pointed out by Agustin Benavidez.
    Cycles: merging features from tomato branch.
    
    === BVH build time optimizations ===
    
    * BVH building was multithreaded. Not all building is multithreaded, packing
      and the initial bounding/splitting is still single threaded, but recursive
      splitting is, which was the main bottleneck.
    
    * Object splitting now uses binning rather than sorting of all elements, using
      code from the Embree raytracer from Intel.
      http://software.intel.com/en-us/articles/embree-photo-realistic-ray-tracing-kernels/
    
    * Other small changes to avoid allocations, pack memory more tightly, avoid
      some unnecessary operations, ...
    
    These optimizations do not work yet when Spatial Splits are enabled, for that
    more work is needed. There's also other optimizations still needed, in
    particular for the case of many low poly objects, the packing step and node
    memory allocation.
    
    BVH raytracing time should remain about the same, but BVH build time should be
    significantly reduced, test here show speedup of about 5x to 10x on a dual core
    and 5x to 25x on an 8-core machine, depending on the scene.
    
    === Threads ===
    
    Centralized task scheduler for multithreading, which is basically the
    CPU device threading code wrapped into something reusable.
    
    Basic idea is that there is a single TaskScheduler that keeps a pool of threads,
    one for each core. Other places in the code can then create a TaskPool that they
    can drop Tasks in to be executed by the scheduler, and wait for them to complete
    or cancel them early.
    
    === Normal ====
    
    Added a Normal output to the texture coordinate node. This currently
    gives the object space normal, which is the same under object animation.
    
    In the future this might become a "generated" normal so it's also stable for
    deforming objects, but for now it's already useful for non-deforming objects.
    
    === Render Layers ===
    
    Per render layer Samples control, leaving it to 0 will use the common scene
    setting.
    
    Environment pass will now render environment even if film is set to transparent.
    
    Exclude Layers" added. Scene layers (all object that influence the render,
    directly or indirectly) are shared between all render layers. However sometimes
    it's useful to leave out some object influence for a particular render layer.
    That's what this option allows you to do.
    
    === Filter Glossy ===
    
    When using a value higher than 0.0, this will blur glossy reflections after
    blurry bounces, to reduce noise at the cost of accuracy. 1.0 is a good
    starting value to tweak.
    
    Some light paths have a low probability of being found while contributing much
    light to the pixel. As a result these light paths will be found in some pixels
    and not in others, causing fireflies. An example of such a difficult path might
    be a small light that is causing a small specular highlight on a sharp glossy
    material, which we are seeing through a rough glossy material. With path tracing
    it is difficult to find the specular highlight, but if we increase the roughness
    on the material the highlight gets bigger and softer, and so easier to find.
    
    Often this blurring will be hardly noticeable, because we are seeing it through
    a blurry material anyway, but there are also cases where this will lead to a
    loss of detail in lighting.
    Fix #30966: cycles nan mesh vertices got set to (0, 0, 0), now remove them instead.
    Fix compile issue on windows, broke this trying to fix for mac.
    Fix cycles compile issue after last commit.
    Fix #29444: cycles problem building BVH with NaN vertices.
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Fix T38311: cycles BVH cache crash on Windows.
    Fix T37817: cycles CUDA detection problem on Windows with non-ascii paths.
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    Additional fix #32074, by Sven-Hendrik Haase (svenstaro). Boost version header must be included in cycles in order to expand the version check macro.
    Make Cycles compatible with older boost versions.
    
    Patch by IRIE Shinsuke, thanks!
    Patch #32074: Fix compilation with boost 1.50
    
    This patch switches from boost's filesystem v2 to v3.
    
    This should be completely smooth due to filesystem v3 is pretty
    old already.
    
    Patch by Sven-Hendrik Haase (aka svenstaro), thanks!
    Cycles: add option to cache BVH's between subsequent renders, storing the BVH on
    disk to be reused by the next render.
    
    This is useful for rendering animations where only the camera or materials change.
    Note that saving the BVH to disk only to be removed for the next frame is slower
    if this is not the case and the meshes do actually change.
    
    For a render, it will save bvh files to the cache user directory, and remove all
    cache files from other renders. The files are named using a MD5 hash based on the
    mesh, to verify if the meshes are still the same.
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles: use LIKELY/UNLIKELY macros
    
    Gives overall ~3% speedup in own tests for BMW scene.
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    Fix #34880: cycles motion blur render issue with some compilers. Actually is a bigger
    problem where accessing float4 members with [] stops working due to optimizer, will
    check that later.
    Fix #32900: object motion blur not working on the GPU. To make this work I disabled motion
    blurring of scale animation, probably not a big loss in practice since it's not so common
    to animate this, can be added back later.
    Fix #32974: cycles curved motion blur is not working well combined with rotation,
    problem is that the curved interpolation is not constant speed which leads to
    mismatches. Turns out this is really hard to solve and implement efficiently, so
    curved motion blur is disabled for now, until I can find a solution.
    Cycles: motion blur is now curved and passes exactly through the midpoint.
    
    Previously it would only interpolate between the previous and next frame,
    which meant it might not hit the current frame position.
    code cleanup: quiet all warnings about double promotion (either by changing the type or explicitly casting).
    style cleanup: block comments
    Cycles: support for motion vector and UV passes.
    
    Most of the changes are related to adding support for motion data throughout
    the code. There's some code for actual camera/object motion blur raytracing
    but it's unfinished (it badly slows down the raytracing kernel even when the
    option is turned off), so that code it disabled still.
    
    Motion vector export from Blender tries to avoid computing derived meshes
    when the mesh does not have a deforming modifier, and it also won't store
    motion vectors for every vertex if only the object or camera is moving.
    Cycles: merging features from tomato branch.
    
    === BVH build time optimizations ===
    
    * BVH building was multithreaded. Not all building is multithreaded, packing
      and the initial bounding/splitting is still single threaded, but recursive
      splitting is, which was the main bottleneck.
    
    * Object splitting now uses binning rather than sorting of all elements, using
      code from the Embree raytracer from Intel.
      http://software.intel.com/en-us/articles/embree-photo-realistic-ray-tracing-kernels/
    
    * Other small changes to avoid allocations, pack memory more tightly, avoid
      some unnecessary operations, ...
    
    These optimizations do not work yet when Spatial Splits are enabled, for that
    more work is needed. There's also other optimizations still needed, in
    particular for the case of many low poly objects, the packing step and node
    memory allocation.
    
    BVH raytracing time should remain about the same, but BVH build time should be
    significantly reduced, test here show speedup of about 5x to 10x on a dual core
    and 5x to 25x on an 8-core machine, depending on the scene.
    
    === Threads ===
    
    Centralized task scheduler for multithreading, which is basically the
    CPU device threading code wrapped into something reusable.
    
    Basic idea is that there is a single TaskScheduler that keeps a pool of threads,
    one for each core. Other places in the code can then create a TaskPool that they
    can drop Tasks in to be executed by the scheduler, and wait for them to complete
    or cancel them early.
    
    === Normal ====
    
    Added a Normal output to the texture coordinate node. This currently
    gives the object space normal, which is the same under object animation.
    
    In the future this might become a "generated" normal so it's also stable for
    deforming objects, but for now it's already useful for non-deforming objects.
    
    === Render Layers ===
    
    Per render layer Samples control, leaving it to 0 will use the common scene
    setting.
    
    Environment pass will now render environment even if film is set to transparent.
    
    Exclude Layers" added. Scene layers (all object that influence the render,
    directly or indirectly) are shared between all render layers. However sometimes
    it's useful to leave out some object influence for a particular render layer.
    That's what this option allows you to do.
    
    === Filter Glossy ===
    
    When using a value higher than 0.0, this will blur glossy reflections after
    blurry bounces, to reduce noise at the cost of accuracy. 1.0 is a good
    starting value to tweak.
    
    Some light paths have a low probability of being found while contributing much
    light to the pixel. As a result these light paths will be found in some pixels
    and not in others, causing fireflies. An example of such a difficult path might
    be a small light that is causing a small specular highlight on a sharp glossy
    material, which we are seeing through a rough glossy material. With path tracing
    it is difficult to find the specular highlight, but if we increase the roughness
    on the material the highlight gets bigger and softer, and so easier to find.
    
    Often this blurring will be hardly noticeable, because we are seeing it through
    a blurry material anyway, but there are also cases where this will lead to a
    loss of detail in lighting.
    Fix #30929: cycles rendering of object with scale 0 on some axis did not work
    correct with instancing.
    
    Actually such object will not work in many places, e.g. transforming vertices
    in edit mode doesn't work and textures will be misapplied in Blender Internal,
    so these should be avoided.
    Cycles: hook up the CMake build system.
    
    New build instructions for Ubuntu Linux in the wiki:
    http://wiki.blender.org/index.php/Dev:2.5/Source/Cycles
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles: Add an AVX2 CPU kernel.
    
    This kernel is compiled with AVX2, FMA3, and BMI compiler flags. At the moment only Intel Haswell benefits from this, but future AMD CPUs will have these instructions as well.
    
    Makes rendering on Haswell CPUs a few percent faster, only benchmarked with clang on OS X though.
    
    Part of my GSoC 2014.
    Cycles: Add an AVX kernel for CPU rendering.
    
    * AVX is available on Intel Sandy Bridge and newer and AMD Bulldozer and newer.
    * We don't use dedicated AVX intrinsics yet, but gcc auto vectorization gives a 3% performance improvement for Caminandes. Tested on an i5-3570, Linux x64.
    * No change for Windows yet, MSVC 2008 does not support AVX.
    
    Reviewed by: brecht
    Differential Revision: https://developer.blender.org/D216
    Cycles: test code for sse 4.1 kernel and alignment for some vector types.
    
    This is mostly work towards enabling the __KERNEL_SSE__ option to start using
    SIMD operations for vector math operations. This 4.1 kernel performes about 8%
    faster with that option but overall is still slower than without the option.
    
    WITH_CYCLES_OPTIMIZED_KERNEL_SSE41 is the cmake flag for testing this kernel.
    
    Alignment of int3, int4, float3, float4 to 16 bytes seems to give a slight 1-2%
    speedup on tested systems with the current kernel already, so is enabled now.
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    Fix cycles intersection issue with overlapping faces on windows 32 bit and CPU
    without SSE3 support, due to 80 bit precision float register being used for one
    bounding box but not the one next to it.
    Fix #29259: cycles issues on certain processors. Now two versions of the kernel
    are compiled, one SSE optimized and the other not, and it will choose between
    them at runtime.
    Cycles: some warning fixes, cpu device task tweaks, avoid unnecessary
    tonemap in non-viewport render, and some utility functions.
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles: Rebuild BVH from scratch if loading cache failed
    
    Before this Cycles used to try using the cache even so it knew for the
    fact that reading it from the disk failed. This change doesn't make it
    more stable if someone will try to trick Cycles and give malformed data
    but it solves general cases when Blender crashed during the cache write
    and will preserve rendering from crashing when trying to use that partial
    cache.
    Cleanup
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    Fix cycles issue with BVH cache created with 64 bits and used for 32 bits binary,
    and vice versa.
    Cycles: add option to cache BVH's between subsequent renders, storing the BVH on
    disk to be reused by the next render.
    
    This is useful for rendering animations where only the camera or materials change.
    Note that saving the BVH to disk only to be removed for the next frame is slower
    if this is not the case and the meshes do actually change.
    
    For a render, it will save bvh files to the cache user directory, and remove all
    cache files from other renders. The files are named using a MD5 hash based on the
    mesh, to verify if the meshes are still the same.
    Cycles:
    * Fix broken compile of test app.
    * Fix some warnings compiling with gcc for 32 bit.
    * More tweaks to avoid extended precision issue from #29301.
    Cycles: some tweaks to silence msvc assertions in debug mode.
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    Fix #33375: OSL geom:trianglevertices gave wrong coordinates for static BVH.
    
    Also some simple OSL optimization, passing thread data pointer directly instead
    of via thread local storage, and creating ustrings for attribute lookup.
    Cycles OSL: windows build fixes.
    Cycles: no need in spin lock in memory statistics
    
    This functions are called from device code which is guaranteed
    not to be called simultaneously from different threads.
    Cycles: memory usage report
    
    This commit adds memory usage information while rendering.
    
    It reports memory used by device, meaning:
    
    - For CPU it'll report real memory consumption
    - For GPU rendering it'll report GPU memory consumption, but it'll
      also mean the same memory is used from host side.
    
    This information displays information about memory requested by Cycles,
    not memory really allocated on a device. Real memory usage might be
    higher because of memory fragmentation or optimistic memory allocator.
    
    There's really nothing we can do against this.
    
    Also in contrast with blender internal's render cycles memory usage
    does not include memory used by scene, only memory needed by cycles
    itself will be displayed. So don't freak out if memory usage reported
    by cycles would be much lower than blender internal's.
    
    This commit also adds RenderEngine.update_memory_stats callback which
    is used to tell memory consumption from external engine to blender.
    This information is used to generate information line after rendering
    is finished.
    Fix cycles task manager calling pthread_join() twice. I haven't seen any bugs
    from this but best to fix anyway as it causes undefined behavior. Pointed out
    on irc by dslammu, thanks!
    style cleanup: block comments
    style cleanup
    Cycles: merging features from tomato branch.
    
    === BVH build time optimizations ===
    
    * BVH building was multithreaded. Not all building is multithreaded, packing
      and the initial bounding/splitting is still single threaded, but recursive
      splitting is, which was the main bottleneck.
    
    * Object splitting now uses binning rather than sorting of all elements, using
      code from the Embree raytracer from Intel.
      http://software.intel.com/en-us/articles/embree-photo-realistic-ray-tracing-kernels/
    
    * Other small changes to avoid allocations, pack memory more tightly, avoid
      some unnecessary operations, ...
    
    These optimizations do not work yet when Spatial Splits are enabled, for that
    more work is needed. There's also other optimizations still needed, in
    particular for the case of many low poly objects, the packing step and node
    memory allocation.
    
    BVH raytracing time should remain about the same, but BVH build time should be
    significantly reduced, test here show speedup of about 5x to 10x on a dual core
    and 5x to 25x on an 8-core machine, depending on the scene.
    
    === Threads ===
    
    Centralized task scheduler for multithreading, which is basically the
    CPU device threading code wrapped into something reusable.
    
    Basic idea is that there is a single TaskScheduler that keeps a pool of threads,
    one for each core. Other places in the code can then create a TaskPool that they
    can drop Tasks in to be executed by the scheduler, and wait for them to complete
    or cancel them early.
    
    === Normal ====
    
    Added a Normal output to the texture coordinate node. This currently
    gives the object space normal, which is the same under object animation.
    
    In the future this might become a "generated" normal so it's also stable for
    deforming objects, but for now it's already useful for non-deforming objects.
    
    === Render Layers ===
    
    Per render layer Samples control, leaving it to 0 will use the common scene
    setting.
    
    Environment pass will now render environment even if film is set to transparent.
    
    Exclude Layers" added. Scene layers (all object that influence the render,
    directly or indirectly) are shared between all render layers. However sometimes
    it's useful to leave out some object influence for a particular render layer.
    That's what this option allows you to do.
    
    === Filter Glossy ===
    
    When using a value higher than 0.0, this will blur glossy reflections after
    blurry bounces, to reduce noise at the cost of accuracy. 1.0 is a good
    starting value to tweak.
    
    Some light paths have a low probability of being found while contributing much
    light to the pixel. As a result these light paths will be found in some pixels
    and not in others, causing fireflies. An example of such a difficult path might
    be a small light that is causing a small specular highlight on a sharp glossy
    material, which we are seeing through a rough glossy material. With path tracing
    it is difficult to find the specular highlight, but if we increase the roughness
    on the material the highlight gets bigger and softer, and so easier to find.
    
    Often this blurring will be hardly noticeable, because we are seeing it through
    a blurry material anyway, but there are also cases where this will lead to a
    loss of detail in lighting.
    Fix for Luxrender boost::thread conflict, workaround now is to just not use it
    in cycles and use pthreads instead.
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Ghost Context Refactor
    https://developer.blender.org/D643
    Separates graphics context creation from window code in Ghost so that they can vary separately.
    Quiet float conversion warnings when building cycles standalone
    Fix cycles standalone crash on Mac OS X.
    Cycles Standalone: Add more controls and options
    
    * P key, pauses the render
    * W/A/S/D for camera movement
    Cycles Standalone: Add interactive mode (I-key), to avoid accidental changes/movement.
    
    Also some code and whitespace cleanup.
    Cycles Standalone: The camera can now be moved and rotated with LMB/RMB mouse key.
    
    ToDo: Add controls for forward/backward movement.
    Cycles Standalone: Various changes
    
    * Change Info in header, put more important info to the left
    * API: Move Camera width/height to camera, add some film properties
    * Add ESC key to help menu
    Cycles Standalone: Add a help message, which appears when pressing the "h" key.
    
    This is very basic for now, but can be extended with more info (available devices for example) later.
    
    Thanks to Bastien and Sergey for some help with the glRect coordinates stuff.
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    code cleanup: compiler warnings
    style cleanup: assignment & indentation.
    Cycles: fix compile error for cycles_test.
    Cycles: build without GLUT test app by default.
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    Cycles: first batch of windows build fixes, not quite there yet.
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Fix T42021: OSL doesn't work when there are non-ascii chars in the path
    
    Quite annoying, the same thing we do from the blender side, But as a positive
    side we can get rid of some utf8/utf16 conversions.
    
    Hopefully it all work fine now, at leats works on mu russki windoze laptop.
    Cycles Standalone: Support for relative paths and string OSL parameters.
    
    Patch by John Haddon.
    Differential Revision: https://developer.blender.org/D418
    Fix T38311: cycles BVH cache crash on Windows.
    Further fix for T37817: non-ascii paths fix in Cycles broke OSL rendering.
    
    Not quite sure yet what is going on here, but this works for me.
    Fix T37817: cycles CUDA detection problem on Windows with non-ascii paths.
    creation of path from std::string on Windows (VC10/11/12) crashes (access error)
    
    Summary:
    Seems to be a known problem in boost: https://svn.boost.org/trac/boost/ticket/6320
    
    Applied the solution but do not know if this is the right place.
    
    Reviewers: dingto, brecht
    
    Reviewed By: dingto
    
    Differential Revision: https://developer.blender.org/D140
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    Cycles OpenCL: patch #35514 by Doug Gale
    
    * Support using devices from all OpenCL platforms, so that you can use e.g. both
      Intel and NVidia OpenCL implementations if you have them installed.
    * Fix compile error due to missing fmodf after recent math node change.
    * Enable advanced shading for Intel OpenCL.
    * CYCLES_OPENCL_DEBUG environment variable for generating debug symbols so you
      can debug with gdb. This crashes the compiler with Intel OpenCL on Linux though.
      To make this work the preprocessed kernel source code is written out, as gdb
      needs this.
    * Show OpenCL compiler warnings even if the build succeeded.
    * Some small fixes to initialize cdDevice to NULL, add missing NULL check when
      creating buffer and add missing space at end of build options for Apple OpenCL.
    * Fix crash with multi device + opencl, now e.g. CPU + GPU render should work.
    
    I did a few tweaks to the code and also:
    
    * Fix viewport render failing sometimes with Apple CPU OpenCL, was not taking
      workgroup size limits into account properly.
    * Add compile error when advanced shading in the Blender binary and OpenCL kernel
      are not in sync.
    Cycles OSL: shader script node
    
    Documentation here:
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/OSL
    http://wiki.blender.org/index.php/Dev:Ref/Release_Notes/2.65/Cycles
    
    These changes require an OSL build from this repository:
    https://github.com/DingTo/OpenShadingLanguage
    
    The lib/ OSL has not been updated yet, so you might want to keep OSL disabled
    until that is done.
    
    Still todo:
    * Auto update for external .osl files not working currently, press update manually
    * Node could indicate better when a refresh is needed
    * Attributes like UV or generated coordinates may be missing when requested from
      an OSL shader, need a way to request them to be loaded by cycles
    * Expose string, enum and other non-socket parameters
    * Scons build support
    
    Thanks to Thomas, Lukas and Dalai for the implementation.
    Additional fix #32074, by Sven-Hendrik Haase (svenstaro). Boost version header must be included in cycles in order to expand the version check macro.
    Make Cycles compatible with older boost versions.
    
    Patch by IRIE Shinsuke, thanks!
    Patch #32074: Fix compilation with boost 1.50
    
    This patch switches from boost's filesystem v2 to v3.
    
    This should be completely smooth due to filesystem v3 is pretty
    old already.
    
    Patch by Sven-Hendrik Haase (aka svenstaro), thanks!
    style cleanup: block comments
    Fix #29274: problem compiling cycles opencl kernel from directory with spaces.
    
    Some drivers don't support passing include paths with spaces in them, nor does
    the opencl spec specify anything about how to quote/escape such paths, so for
    now we just resolved #includes ourselves. Alternative would have been to use c
    preprocessor, but this also resolves all #ifdefs, which we do not want.
    Cycles: fix error in md5 hash computation for files in directories below
    the first level.
    Cycles:
    * Fix missing update when editing objects with emission materials.
    * Fix preview pass rendering set to 1 not showing full resolution.
    * Fix CUDA runtime compiling failing due to missing cache directory.
    * Use settings from first render layer for visibility and material override.
    
    And a bunch of incomplete and still disabled code mostly related to closure
    sampling.
    Cycles:
    * OpenCL now only uses GPU/Accelerator devices, it's only confusing if CPU
      device is used, easy to enable in the code for debugging.
    * OpenCL kernel binaries are now cached for faster startup after the first
      time compiling.
    * CUDA kernels can now be compiled and cached at runtime if the CUDA toolkit
      is installed. This means that even if the build does not have CUDA enabled,
      it's still possible to use it as long as you install the toolkit.
    Cycles: some warning fixes, cpu device task tweaks, avoid unnecessary
    tonemap in non-viewport render, and some utility functions.
    Cycles:
    * Compute MD5 hash to deal with nvidia opencl compiler cache not recognizing
      changes in #included files, makes it possible to do kernel compile only
      once and remember it for the next time blender is started.
    * Kernel tweak to compile with ATI/linux. Enabling any more functionality than
      simple clay render still chokes the compiler though, without a specific error
      message ..
    Cycles: fix for incompatible boost filesystem version, provided by "ornitorrincos" on IRC.
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles: Remove redundant alloc/free
    
    Seems like a copy paste error.
    Fix T40514: Cycles world MIS segfault
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    Code cleanup: cycles
    * Reshuffle SSE #ifdefs to try to avoid compilation errors enabling SSE on 32 bit.
    * Remove CUDA kernel launch size exception on Mac, is not needed.
    * Make OSL file compilation quiet like c/cpp files.
    Cycles: ensure any SSE data is allocated 16 byte aligned, happens automatically
    on many platforms but is not assured everywhere.
    Cycles: clang build fixes.
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles: Slight modification to the previous commit
    
    This way util_simd.cpp would not require modifications
    if/when SSE2 is suddenly supported on 32bit platforms.
    
    This also allowed to unleash some issues with util_simd.h
    related on the fact that there size_t and int are actually
    the same types.
    Cycles: Fix compilation error on 32bit platforms
    Cycles: Fix compilation error on platforms without SSE2
    Cycles Refactor: Add SSE Utility code from Embree for cleaner SSE code.
    
    This makes the code a bit easier to understand, and might come in handy
    if we want to reuse more Embree code.
    
    Differential Revision: https://developer.blender.org/D482
    
    Code by Brecht, with fixes by Lockal, Sergey and myself.
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cleanup: style, spelling
    Quiet warning in Cycles
    Cycles: Add support for uchar4 attributes.
    
    * Added support for uchar4 attributes to Cycles' attribute system.
    * This is used for Vertex Colors now, which saves some memory (4 unsigned characters, instead of 4 floats).
    * GPU Texture Limit on sm_20 and sm_21 decreased from 95 to 94, because we need a new texture for the uchar4 attributes. This is no problem for sm_30 or newer.
    
    Part of my GSoC 2014.
    Cycles Refactor: Add SSE Utility code from Embree for cleaner SSE code.
    
    This makes the code a bit easier to understand, and might come in handy
    if we want to reuse more Embree code.
    
    Differential Revision: https://developer.blender.org/D482
    
    Code by Brecht, with fixes by Lockal, Sergey and myself.
    Cycles: use LIKELY/UNLIKELY macros
    
    Gives overall ~3% speedup in own tests for BMW scene.
    Style cleanup: indentation, braces
    Cycles: Don't include SIMD util file for OpenCL/CUDA, this fixes OpenCL compilation.
    Cycles: SSE optimization for sRGB conversion (gives 7% speedup on CPU for pavillon_barcelone scene)
    
    Thanks brecht/dingto/juicyfruit et al. for testing and reviewing this patch in T38034.
    Cycles: change __device and similar qualifiers to ccl_device in kernel code.
    
    This to avoids build conflicts with libc++ on FreeBSD, these __ prefixed values
    are reserved for compilers. I apologize to anyone who has patches or branches
    and has to go through the pain of merging this change, it may be easiest to do
    these same replacements in your code and then apply/merge the patch.
    
    Ref T37477.
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    code cleanup: quiet all warnings about double promotion (either by changing the type or explicitly casting).
    Cycles:
    * Add alpha pass output, to use set Transparent option in Film panel.
    * Add Holdout closure (OSL terminology), this is like the Sky option in the
      internal renderer, objects with this closure show the background / zero
      alpha.
    * Add option to use Gaussian instead of Box pixel filter in the UI.
    * Remove camera response curves for now, they don't really belong here in
      the pipeline, should be moved to compositor.
    
    * Output full float values for rendering now, previously was only byte precision.
    * Add a patch from Thomas to get a preview passes option, but still disabled
      because it isn't quite working right yet.
    * CUDA: don't compile shader graph evaluation inline.
    * Convert tabs to spaces in python files.
    Cycles: some steps to getting OpenCL backend to compile.
    Cycles: fix color difference between render / 3d view with color management disabled.
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles Standalone: Support for relative paths and string OSL parameters.
    
    Patch by John Haddon.
    Differential Revision: https://developer.blender.org/D418
    Fix T38311: cycles BVH cache crash on Windows.
    Fix T37817: cycles CUDA detection problem on Windows with non-ascii paths.
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    Cycles OpenCL: patch #35514 by Doug Gale
    
    * Support using devices from all OpenCL platforms, so that you can use e.g. both
      Intel and NVidia OpenCL implementations if you have them installed.
    * Fix compile error due to missing fmodf after recent math node change.
    * Enable advanced shading for Intel OpenCL.
    * CYCLES_OPENCL_DEBUG environment variable for generating debug symbols so you
      can debug with gdb. This crashes the compiler with Intel OpenCL on Linux though.
      To make this work the preprocessed kernel source code is written out, as gdb
      needs this.
    * Show OpenCL compiler warnings even if the build succeeded.
    * Some small fixes to initialize cdDevice to NULL, add missing NULL check when
      creating buffer and add missing space at end of build options for Apple OpenCL.
    * Fix crash with multi device + opencl, now e.g. CPU + GPU render should work.
    
    I did a few tweaks to the code and also:
    
    * Fix viewport render failing sometimes with Apple CPU OpenCL, was not taking
      workgroup size limits into account properly.
    * Add compile error when advanced shading in the Blender binary and OpenCL kernel
      are not in sync.
    Cycles OSL: shader script node
    
    Documentation here:
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/OSL
    http://wiki.blender.org/index.php/Dev:Ref/Release_Notes/2.65/Cycles
    
    These changes require an OSL build from this repository:
    https://github.com/DingTo/OpenShadingLanguage
    
    The lib/ OSL has not been updated yet, so you might want to keep OSL disabled
    until that is done.
    
    Still todo:
    * Auto update for external .osl files not working currently, press update manually
    * Node could indicate better when a refresh is needed
    * Attributes like UV or generated coordinates may be missing when requested from
      an OSL shader, need a way to request them to be loaded by cycles
    * Expose string, enum and other non-socket parameters
    * Scons build support
    
    Thanks to Thomas, Lukas and Dalai for the implementation.
    Fix #29274: problem compiling cycles opencl kernel from directory with spaces.
    
    Some drivers don't support passing include paths with spaces in them, nor does
    the opencl spec specify anything about how to quote/escape such paths, so for
    now we just resolved #includes ourselves. Alternative would have been to use c
    preprocessor, but this also resolves all #ifdefs, which we do not want.
    Cycles:
    * Fix missing update when editing objects with emission materials.
    * Fix preview pass rendering set to 1 not showing full resolution.
    * Fix CUDA runtime compiling failing due to missing cache directory.
    * Use settings from first render layer for visibility and material override.
    
    And a bunch of incomplete and still disabled code mostly related to closure
    sampling.
    Cycles: fix windows build, some minor tweaks.
    Cycles:
    * OpenCL now only uses GPU/Accelerator devices, it's only confusing if CPU
      device is used, easy to enable in the code for debugging.
    * OpenCL kernel binaries are now cached for faster startup after the first
      time compiling.
    * CUDA kernels can now be compiled and cached at runtime if the CUDA toolkit
      is installed. This means that even if the build does not have CUDA enabled,
      it's still possible to use it as long as you install the toolkit.
    Cycles: some warning fixes, cpu device task tweaks, avoid unnecessary
    tonemap in non-viewport render, and some utility functions.
    Cycles:
    * Compute MD5 hash to deal with nvidia opencl compiler cache not recognizing
      changes in #included files, makes it possible to do kernel compile only
      once and remember it for the next time blender is started.
    * Kernel tweak to compile with ATI/linux. Enabling any more functionality than
      simple clay render still chokes the compiler though, without a specific error
      message ..
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Fully support WITH_CYCLES_LOGGING option
    
    Quite straightforward, used find*() modules from Ceres, so the
    variable naming is a bit different. Example of declaring which
    Glog/Gflags to use:
    
      cmake \
        -D GLOG_INCLUDE_DIR_HINTS=/opt/lib/glog/include \
        -D GLOG_LIBRARY_DIR_HINTS=/opt/lib/glog/lib \
        -D GFLAGS_INCLUDE_DIR_HINTS=/opt/lib/gflags/include \
        -D GFLAGS_LIBRARY_DIR_HINTS=/opt/lib/gflags/lib \
        /path/to/cycles
    
    This would break logging support when re-bundled back to Blender
    because of the changes in CMake files. But those changes i would
    like to do in Blender as well with some tweaks to how Glog/Gflags
    libraries are being detected.
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles: Code cleanup, proper class vs. struct declaration
    Cycles: Fix for the MSVC which doesn't have default osteram constructor
    Cycles: Add support of Glog logging
    
    This commit makes it possible to use Glog library for the debug logging.
    For now only possible when using CMake and in order to use the logging
    the WITH_CYCLES_LOGGING configuration variable is to be enabled.
    
    When this option is not enabled or when using Scons there's no difference
    in Cycles behavior at all, when using logging and no output to the console
    impact is gonna to be minimal.
    
    This is done in order to make it possible to have debug logging persistent
    in code (without need to add it when troubleshooting some bug and removing
    it afterwards).
    
    For now actual logging is not placed yet, only all the functions needed for
    the logging are written and so.
    Fix compilation error when OIIO is compiled with external PugiXML parser
    
    Basic idea is to check whether OIIO is compiled with embedded PugiXML parser
    and if so use PugiXML from OIIO, otherwise find a standalone PugiXML library.
    
    Note: This is actually a required dependency, so either ensure OIIO has this
    library embedded or install it separately.
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    spelling: use American spelling for canceled
    Fix a few issues reported by coverity scan.
    Fix #36137: cycles render not using all GPU's when the number of GPU's is larger
    than the number of CPU threads
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    Code cleanup / Cycles:
    * Remove useless else branch, after recent changes.
    Cycles / CPU Rendering:
    * "Auto Detect" now again uses the umber of cores, instead number of cores + 1.
    
    This was added before we had Tile rendering and benchmarks on several systems showed that there is no gain with this now. There might be some slight difference (0.5% or so) slower/faster depending on the scene, but this is negligible.
    Cycles OpenCL: keep the opencl context and program around for quicker rendering
    the second time, as for example Intel CPU startup time is 9 seconds.
    
    * Adds an cache for contexts and programs for each platform and device pair,
      which also ensure now no two threads try to compile and write the binary cache
      file at the same time.
    * Change clFinish to clFlush so we don't block until the result is done, instead
      it will block at the moment we copy back memory.
    * Fix error in Cycles time_sleep implementation, does not affect any active code
      though.
    * Adds some (disabled) debugging code in the task scheduler.
    
    Patch #35559 by Doug Gale.
    Fix cycles crash that happened with mesh emission and diffuse/glossy ray
    visibility disabled on some objects.
    Fix #33107: cycles fixed threads 1 was still having two cores do work,
    because main thread works as well.
    Revert r50528: "Performance fix for Cycles: Don't wait in the main UI thread when resetting devices."
    
    This commit leads to random freezes in Cycles rendering:
    https://projects.blender.org/tracker/index.php?func=detail&aid=32545&group_id=9&atid=498
    
    The goal of this commit was to remove UI lag for OSL, but since that is not officially supported yet, better revert it until a proper fix can be implemented in 2.65.
    Performance fix for Cycles: Don't wait in the main UI thread when resetting devices.
    
    When the scene is updated Cycles resets the renderer device, cancelling
    all existing tasks. The main thread would wait for all running tasks to
    finish before continuing. This is ok when tasks can actually cancel in a
    timely fashion. For OSL however, this does not work, since the OSL
    shader group optimization takes quite a bit of time and can not be
    easily be cancelled once running (on my crappy machine in full debug
    mode: ~0.12 seconds for simple node trees). This would lead to very
    laggy UI behavior and make it difficult to accurately control elements
    such as sliders.
    
    This patch removes the wait condition from the device->task_cancel
    method. Instead it just sets the do_cancel flag and returns. To avoid
    backlog in the task pool of the device it will return early from the
    BlenderSession::sync function while the reset is going on (tested in
    Session::resetting). Once all existing tasks have finished the do_cancel
    flag is finally cleared again (checked in TaskPool::num_decrease).
    
    Care has to be taken to avoid race conditions on the do_cancel flag,
    since it can now be modified outside the TaskPool::cancel function
    itself. For this purpose the scope of the TaskPool::num_mutex locks has
    been extended, in most cases the mutex is now locked by the TaskPool
    itself before calling TaskScheduler methods, instead of only locking
    inside the num_increase/num_decrease functions themselves. The only
    occurrence of a lock outside of the TaskPool methods is in
    TaskScheduler::thread_run.
    
    This patch is most useful in combination with the OSL renderer mode, so
    it can probably wait until after the 2.64 release. SVM tasks tend to be
    cancelled quickly, so the effect is less noticeable.
    style cleanup: block comments
    Cycles: reviewed the task scheduler code and fixed (hopefully all) windows threading problems.
    Cycles: threading optimizations
    
    * Multithreaded image loading, each thread can load a separate image.
    * Better multithreading for multiple instanced meshes, different threads can now
      build BVH's for different meshes, rather than all cooperating on the same mesh.
      Especially noticeable for dynamic BVH building for the viewport, gave about
      2x faster build on 8 core in fairly complex scene with many objects.
    * The main thread waiting for worker threads can now also work itself, so
      (num_cores + 1) threads will be working, this supposedly gives better
      performance on some operating systems, but did not measure performance for
      this very detailed yet.
    Cycles: merging features from tomato branch.
    
    === BVH build time optimizations ===
    
    * BVH building was multithreaded. Not all building is multithreaded, packing
      and the initial bounding/splitting is still single threaded, but recursive
      splitting is, which was the main bottleneck.
    
    * Object splitting now uses binning rather than sorting of all elements, using
      code from the Embree raytracer from Intel.
      http://software.intel.com/en-us/articles/embree-photo-realistic-ray-tracing-kernels/
    
    * Other small changes to avoid allocations, pack memory more tightly, avoid
      some unnecessary operations, ...
    
    These optimizations do not work yet when Spatial Splits are enabled, for that
    more work is needed. There's also other optimizations still needed, in
    particular for the case of many low poly objects, the packing step and node
    memory allocation.
    
    BVH raytracing time should remain about the same, but BVH build time should be
    significantly reduced, test here show speedup of about 5x to 10x on a dual core
    and 5x to 25x on an 8-core machine, depending on the scene.
    
    === Threads ===
    
    Centralized task scheduler for multithreading, which is basically the
    CPU device threading code wrapped into something reusable.
    
    Basic idea is that there is a single TaskScheduler that keeps a pool of threads,
    one for each core. Other places in the code can then create a TaskPool that they
    can drop Tasks in to be executed by the scheduler, and wait for them to complete
    or cancel them early.
    
    === Normal ====
    
    Added a Normal output to the texture coordinate node. This currently
    gives the object space normal, which is the same under object animation.
    
    In the future this might become a "generated" normal so it's also stable for
    deforming objects, but for now it's already useful for non-deforming objects.
    
    === Render Layers ===
    
    Per render layer Samples control, leaving it to 0 will use the common scene
    setting.
    
    Environment pass will now render environment even if film is set to transparent.
    
    Exclude Layers" added. Scene layers (all object that influence the render,
    directly or indirectly) are shared between all render layers. However sometimes
    it's useful to leave out some object influence for a particular render layer.
    That's what this option allows you to do.
    
    === Filter Glossy ===
    
    When using a value higher than 0.0, this will blur glossy reflections after
    blurry bounces, to reduce noise at the cost of accuracy. 1.0 is a good
    starting value to tweak.
    
    Some light paths have a low probability of being found while contributing much
    light to the pixel. As a result these light paths will be found in some pixels
    and not in others, causing fireflies. An example of such a difficult path might
    be a small light that is causing a small specular highlight on a sharp glossy
    material, which we are seeing through a rough glossy material. With path tracing
    it is difficult to find the specular highlight, but if we increase the roughness
    on the material the highlight gets bigger and softer, and so easier to find.
    
    Often this blurring will be hardly noticeable, because we are seeing it through
    a blurry material anyway, but there are also cases where this will lead to a
    loss of detail in lighting.
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles OSL: refactoring and fixes
    
    * Moved kernel/osl/nodes to kernel/shaders
    * Renamed standard attributes to use geom:, particle:, object: prefixes
    * Update stdosl.h to properly reflect the closures we support
    * Fix the wrong stdosl.h being used for building shaders
    * Add geom:numpolyvertices, geom:trianglevertices, geom:polyvertices attributes
    style cleanup: assignment & indentation.
    Cycles:
    * Compute MD5 hash to deal with nvidia opencl compiler cache not recognizing
      changes in #included files, makes it possible to do kernel compile only
      once and remember it for the next time blender is started.
    * Kernel tweak to compile with ATI/linux. Enabling any more functionality than
      simple clay render still chokes the compiler though, without a specific error
      message ..
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Remove dynamic library helper files
    
    They were only needed for CUDA wrangler. Since we've switched to CUEW
    this utility functions are no longer needed.
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Ghost Context Refactor
    https://developer.blender.org/D643
    Separates graphics context creation from window code in Ghost so that they can vary separately.
    Cycles: Add support of Glog logging
    
    This commit makes it possible to use Glog library for the debug logging.
    For now only possible when using CMake and in order to use the logging
    the WITH_CYCLES_LOGGING configuration variable is to be enabled.
    
    When this option is not enabled or when using Scons there's no difference
    in Cycles behavior at all, when using logging and no output to the console
    impact is gonna to be minimal.
    
    This is done in order to make it possible to have debug logging persistent
    in code (without need to add it when troubleshooting some bug and removing
    it afterwards).
    
    For now actual logging is not placed yet, only all the functions needed for
    the logging are written and so.
    Deduplicate CUDA and OpenCL wranglers
    
    For now it was mainly about OpenCL wrangler being duplicated
    between Cycles and Compositor, but with OpenSubdiv work those
    wranglers were gonna to be duplicated just once again.
    
    This commit makes it so Cycles and Compositor uses wranglers
    from this repositories:
    
      - https://github.com/CudaWrangler/cuew
      - https://github.com/OpenCLWrangler/clew
    
    This repositories are based on the wranglers we used before
    and they'll be likely continued maintaining by us plus some
    more players in the market.
    
    Pretty much straightforward change with some tricks in the
    CMake/SCons to make this libs being passed to the linker
    after all other libraries in order to make OpenSubdiv linked
    against those wranglers in the future.
    
    For those who're worrying about Cycles being less standalone,
    it's not truth, it's rather more flexible now and in the future
    different wranglers might be used in Cycles. For now it'll
    just mean those libs would need to be put into Cycles repository
    together with some other libs from Blender such as mikkspace.
    
    This is mainly platform maintenance commit, should not be any
    changes to the user space.
    
    Reviewers: juicyfruit, dingto, campbellbarton
    
    Reviewed By: juicyfruit, dingto, campbellbarton
    
    Differential Revision: https://developer.blender.org/D707
    Cycles Refactor: Add SSE Utility code from Embree for cleaner SSE code.
    
    This makes the code a bit easier to understand, and might come in handy
    if we want to reuse more Embree code.
    
    Differential Revision: https://developer.blender.org/D482
    
    Code by Brecht, with fixes by Lockal, Sergey and myself.
    Code cleanup: move half float functions to separate header file.
    Cycles: Skip the compilation of the dedicated SSE2 kernel on x86-64, we can assume SSE2 here, so just re-use the regular one. Saves 500kb in the blender binary.
    
    Reviewed by: brecht
    Differential Revision: https://developer.blender.org/D199
    Cycles: Move SIMD utility functions into its own file.
    
    Recently added SSE macros for noise texture can be moved here as well, but I leave this for later.
    Cycles / Standalone:
    * Standalone can now be compiled without the GUI, making the glut dependency optional.
    
    Added WITH_CYCLES_STANDALONE_GUI cmake flag.
    Cycles / Standalone:
    * Rename test to standalone.
    
    Note: New CMAKE flag is WITH_CYCLES_STANDALONE.
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    Cycles Hair: refactoring to support generic attributes for hair curves. There
    should be no functional changes yet. UV, tangent and intercept are now stored
    as attributes, with the intention to add more like multiple uv's, vertex
    colors, generated coordinates and motion vectors later.
    
    Things got a bit messy due to having both triangle and curve data in the same
    mesh data structure, which also gives us two sets of attributes. This will get
    cleaned up when we split the mesh class.
    cmake was missing some header files.
    code cleanup:
    - move object_iterators.c --> view3d_iterators. (ED_object.h had to include ED_view3d.h which isn't so nice)
    - move projection functions from view3d_view.c --> view3d_project.c (view3d_view was becoming a mishmash of utility functions and operators).
    - some some cmake includes as system-includes.
    code cleanup: cycles now uses system includes for boost/oiio.. etc, so we dont get warnings from system headers.
    Fix for Cycles (CUDA) compilation (again ...). Moved the AttributeStandard enum typedef and the attribute_standard_name mapping function to util_attribute/util_types headers, so they can properly be used by kernel and render files alike. This should avoid any std C includes which are not available in CUDA. Thanks to Sergey for help!
    Cycles: merging features from tomato branch.
    
    === BVH build time optimizations ===
    
    * BVH building was multithreaded. Not all building is multithreaded, packing
      and the initial bounding/splitting is still single threaded, but recursive
      splitting is, which was the main bottleneck.
    
    * Object splitting now uses binning rather than sorting of all elements, using
      code from the Embree raytracer from Intel.
      http://software.intel.com/en-us/articles/embree-photo-realistic-ray-tracing-kernels/
    
    * Other small changes to avoid allocations, pack memory more tightly, avoid
      some unnecessary operations, ...
    
    These optimizations do not work yet when Spatial Splits are enabled, for that
    more work is needed. There's also other optimizations still needed, in
    particular for the case of many low poly objects, the packing step and node
    memory allocation.
    
    BVH raytracing time should remain about the same, but BVH build time should be
    significantly reduced, test here show speedup of about 5x to 10x on a dual core
    and 5x to 25x on an 8-core machine, depending on the scene.
    
    === Threads ===
    
    Centralized task scheduler for multithreading, which is basically the
    CPU device threading code wrapped into something reusable.
    
    Basic idea is that there is a single TaskScheduler that keeps a pool of threads,
    one for each core. Other places in the code can then create a TaskPool that they
    can drop Tasks in to be executed by the scheduler, and wait for them to complete
    or cancel them early.
    
    === Normal ====
    
    Added a Normal output to the texture coordinate node. This currently
    gives the object space normal, which is the same under object animation.
    
    In the future this might become a "generated" normal so it's also stable for
    deforming objects, but for now it's already useful for non-deforming objects.
    
    === Render Layers ===
    
    Per render layer Samples control, leaving it to 0 will use the common scene
    setting.
    
    Environment pass will now render environment even if film is set to transparent.
    
    Exclude Layers" added. Scene layers (all object that influence the render,
    directly or indirectly) are shared between all render layers. However sometimes
    it's useful to leave out some object influence for a particular render layer.
    That's what this option allows you to do.
    
    === Filter Glossy ===
    
    When using a value higher than 0.0, this will blur glossy reflections after
    blurry bounces, to reduce noise at the cost of accuracy. 1.0 is a good
    starting value to tweak.
    
    Some light paths have a low probability of being found while contributing much
    light to the pixel. As a result these light paths will be found in some pixels
    and not in others, causing fireflies. An example of such a difficult path might
    be a small light that is causing a small specular highlight on a sharp glossy
    material, which we are seeing through a rough glossy material. With path tracing
    it is difficult to find the specular highlight, but if we increase the roughness
    on the material the highlight gets bigger and softer, and so easier to find.
    
    Often this blurring will be hardly noticeable, because we are seeing it through
    a blurry material anyway, but there are also cases where this will lead to a
    loss of detail in lighting.
    Cycles: move clew into cycles namespace to avoid conflicts, and fix mesh
    displacement panel showing with blender internal.
    add some missing headers to cmake, also add some files as comments since it seems they should be added but evidently work fine without.
    edits to cycles cmake files so cmake_consistency_check.py can parse them.
    Cycles: remove deprecated strict aliasing flag for opencl, fix missing update
    modifying object layer in properties editor, and add memarena utility.
    Cycles: OpenCL library is now dynamically loaded so that blender doesn't crash
    if it's not installed on the system.
    
    Code copied from clew.h/clew.c in CLCC:
    http://clcc.sourceforge.net/
    Cycles:
    * add some (disabled) test code for using OpenImageIO in imbuf
    * link cycles, openimageio and boost into blender instead of a shared library
    * some cmakefile changes to simplify the code and follow conventions better
    * this may solve running cycles problems on windows XP, or give a different
      and hopefully more useful error message
    Cycles: build without GLUT test app by default.
    Cycles: hook up the CMake build system.
    
    New build instructions for Ubuntu Linux in the wiki:
    http://wiki.blender.org/index.php/Dev:2.5/Source/Cycles
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Add safe_normalize to cycles, avoid checking length first
    
    This won't give any big speedup,
    just avoids redundant sqrtf and may be useful in future.
    
    Differential Revision: https://developer.blender.org/D880
    Cleanup: sync map_to_sphere, UNLIKELY xy zero case
    Fix T41839, OpenCL error.
    
    Also some style fixes, we don't do the "put as much as possible in 1 line" contest.
    Cleanup: Use function call and delete obsolete comment.
    Cleanup: Remove special code for Visual Studio 2008.
    
    Goodbye VC2008, it has been a pleasure (more or less) :D SCons / CMake cleaenup will follow.
    Differential Revision: https://developer.blender.org/D715
    Fix T41174: Tangent space required UV map in Cycles
    
    Now Cycles behaves in the same way as BI in terms of using
    sphere projection of orco coordinates if there's no UV map
    when calculating tangent space.
    Code cleanup.
    Code cleanup: spelling/indentation
    Nodes: add absolute value operation to all math nodes
    
    Reviewed By: dingto, brecht
    
    Differential Revision: https://developer.blender.org/D507
    Cycles: use LIKELY/UNLIKELY macros
    
    Gives overall ~3% speedup in own tests for BMW scene.
    Cycles: SSE optimization for Voronoi cells texture
    
    Gives 5-6% speedup for Caterpillar_PatazStudio.blend.
    
    Reviewed By: brecht, dingto
    
    Differential Revision: https://developer.blender.org/D419
    Cycles code internals: add initial implementation of decoupled ray marching.
    
    This basically records all volumes steps, which can then later be used multiple
    time to take scattering samples, without having to step through the volume
    again. From the paper:
    
    "Importance Sampling Techniques for Path Tracing in Participating Media"
    
    This works only on the CPU, due to usage of malloc/free.
    Cycles: add support for mesh deformation motion blur.
    Cycles code refactor: change curve key to float4 for easier storage as attribute.
    Cycles, Code cleanup: simplify code for color linear interpolation and float math
    
    Reviewed By: brecht
    
    Differential Revision: https://developer.blender.org/D215
    Code Cleanup: WIN32 defines, check for _MSC_VER instead of !FREE_WINDOWS
    Fix T37987: MSVC 2013 has C99 headers and warns for out define hypot _hypot for good reason it seems
    Cycles: test code for sse 4.1 kernel and alignment for some vector types.
    
    This is mostly work towards enabling the __KERNEL_SSE__ option to start using
    SIMD operations for vector math operations. This 4.1 kernel performes about 8%
    faster with that option but overall is still slower than without the option.
    
    WITH_CYCLES_OPTIMIZED_KERNEL_SSE41 is the cmake flag for testing this kernel.
    
    Alignment of int3, int4, float3, float4 to 16 bytes seems to give a slight 1-2%
    speedup on tested systems with the current kernel already, so is enabled now.
    Cycles: change __device and similar qualifiers to ccl_device in kernel code.
    
    This to avoids build conflicts with libc++ on FreeBSD, these __ prefixed values
    are reserved for compilers. I apologize to anyone who has patches or branches
    and has to go through the pain of merging this change, it may be easiest to do
    these same replacements in your code and then apply/merge the patch.
    
    Ref T37477.
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    Cycles: Subsurface Scattering
    
    New features:
    
    * Bump mapping now works with SSS
    * Texture Blur factor for SSS, see the documentation for details:
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/Shaders#Subsurface_Scattering
    
    Work in progress for feedback:
    
    Initial implementation of the "BSSRDF Importance Sampling" paper, which uses
    a different importance sampling method. It gives better quality results in
    many ways, with the availability of both Cubic and Gaussian falloff functions,
    but also tends to be more noisy when using the progressive integrator and does
    not give great results with some geometry. It works quite well for the
    non-progressive integrator and is often less noisy there.
    
    This code may still change a lot, so unless you're testing it may be best to
    stick to the Compatible falloff function.
    
    Skin test render and file that takes advantage of the gaussian falloff:
    http://www.pasteall.org/pic/show.php?id=57661
    http://www.pasteall.org/pic/show.php?id=57662
    http://www.pasteall.org/blend/23501
    Fix #36064: cycles direct/indirect light passes with materials that have zero
    RGB color components gave non-grey results when you might no expect it.
    
    What happens is that some of the color channels are zero in the direct light
    pass because their channel is zero in the color pass. The direct light pass is
    defined as lighting divided by the color pass, and we can't divide by zero. We
    do a division after all samples are added together to ensure that multiplication
    in the compositor gives the exact combined pass even with antialiasing, DoF, ..
    
    Found a simple tweak here, instead of setting such channels to zero it will set
    it to the average of other non-zero color channels, which makes the results look
    like the expected grey.
    Code cleanup / Cycles:
    * Some cleanup for castings.
    Cycles: attempt to fix internal compile error with some visual studio builds
    Code cleanup: avoid some warnings due to implicit uint/int/float/double conversion.
    Cycles:
    * Revert r57203 (len() renaming)
    There seems to be a problem with nVidia OpenCL after this and I haven't figured out the real cause yet.
    Better to selectively enable native length() later, after figuring out what's wrong.
    
    This fixes [#35612].
    Cycles / Math functions:
    * Rename some math functions:
    len -> length
    len_squared -> length_squared
    normalize_len -> normalize_length
    
    * This way OpenCL uses its inbuilt length() function, rather than our own. The other two functions have been renamed for consistency.
    * Tested CPU, CUDA and OpenCL compile, should be no functional changes.
    Math Node:
    * Added a Modulo operation to the math node, available in Compositor, Shader and Texture Nodes.
    code cleanup: double promotion warnings.
    Cycles / Math:
    * Add M_2PI_F and M_4PI_F constants and use them inside the codebase.
    Cycles: initial subsurface multiple scattering support. It's not working as
    well as I would like, but it works, just add a subsurface scattering node and
    you can use it like any other BSDF.
    
    It is using fully raytraced sampling compatible with progressive rendering
    and other more advanced rendering algorithms we might used in the future, and
    it uses no extra memory so it's suitable for complex scenes.
    
    Disadvantage is that it can be quite noisy and slow. Two limitations that will
    be solved are that it does not work with bump mapping yet, and that the falloff
    function used is a simple cubic function, it's not using the real BSSRDF
    falloff function yet.
    
    The node has a color input, along with a scattering radius for each RGB color
    channel along with an overall scale factor for the radii.
    
    There is also no GPU support yet, will test if I can get that working later.
    
    Node Documentation:
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/Shaders#BSSRDF
    
    Implementation notes:
    http://wiki.blender.org/index.php/Dev:2.6/Source/Render/Cycles/Subsurface_Scattering
    Cycles: multiple importance sampling for lamps, which helps reduce noise for
    big lamps and sharp glossy reflections. This was already supported for mesh
    lights and the background, so lamps should do it too.
    
    This is not for free and it's a bit slower than I hoped even though there is
    no extra BVH ray intersection. I'll try to optimize it more later.
    
    * Area lights look a bit different now, they had the wrong shape before.
    * Also fixes a sampling issue in the non-progressive integrator.
    * Only enabled for the CPU, will test on the GPU later.
    * An option to disable this will be added for situations where it does not help.
    
    Same time comparison before/after:
    http://www.pasteall.org/pic/show.php?id=43313
    http://www.pasteall.org/pic/show.php?id=43314
    Cycles OSL: diffuse_toon and specular_toon closures. These are toon shaders with
    a size parameter between 0.0 and 1.0 that gives a angle of reflection between
    0° and 90°, and a smooth parameter that gives and angle over which a smooth
    transition from full to no reflection happens.
    
    These work with global illumination and do importance sampling of the area within
    the angle. Note that unlike most other BSDF's these are not energy conserving in
    general, in particular if their weight is 1.0 and size > 2/3 (or 60°) they will
    add more energy in each bounce.
    
    Diffuse: http://www.pasteall.org/pic/show.php?id=42119
    Specular: http://www.pasteall.org/pic/show.php?id=42120
    Cycles: improve Anisotropic BSDF node, changing the Roughness U/V inputs to
    Roughness, Anisotropy and Rotation. Also a fix for automatic tangents and
    OSL attribute handling.
    
    Meaning of new sockets explained in the documentation:
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/Shaders#Anisotropic
    code cleanup: remove unused macros, commet some which may be useful later - or good to keep for completeness. quieted some warnings and add flags -Wmissing-include-dirs and -Wno-div-by-zero to cmake/gcc
    Cycles: merge of changes from tomato branch.
    
    Regular rendering now works tiled, and supports save buffers to save memory
    during render and cache render results.
    
    Brick texture node by Thomas.
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/Textures#Brick_Texture
    
    Image texture Blended Box Mapping.
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/Textures#Image_Texture
    http://mango.blender.org/production/blended_box/
    
    Various bug fixes by Sergey and Campbell.
    * Fix for reading freed memory in some node setups.
    * Fix incorrect memory read when synchronizing mesh motion.
    * Fix crash appearing when direct light usage is different on different layers.
    * Fix for vector pass gives wrong result in some circumstances.
    * Fix for wrong resolution used for rendering Render Layer node.
    * Option to cancel rendering when doing initial synchronization.
    * No more texture limit when using CPU render.
    * Many fixes for new tiled rendering.
    code cleanup: quiet all warnings about double promotion (either by changing the type or explicitly casting).
    Cycles: spot lamp support.
    Cycles: OpenCL image texture support, fix an attribute node issue and refactor
    feature enabling #defines a bit.
    Fix most of #31307: cycles panorama camera not working correct with speed
    vectors and window texture coordinates. Only for Fisheye Equisolid it's
    still not working correct yet. Patch from Dalai with modifications.
    Fix #31168: cycles mask layer should only affect objects for camera rays.
    Fix: texture coordinate normal output was not correct, still changed under
    object transform.
    Cycles: support for motion vector and UV passes.
    
    Most of the changes are related to adding support for motion data throughout
    the code. There's some code for actual camera/object motion blur raytracing
    but it's unfinished (it badly slows down the raytracing kernel even when the
    option is turned off), so that code it disabled still.
    
    Motion vector export from Blender tries to avoid computing derived meshes
    when the mesh does not have a deforming modifier, and it also won't store
    motion vectors for every vertex if only the object or camera is moving.
    Fix Cycles to compile again on AMD OpenCL devices.
    Cycles: fix for CUDA build.
    Cycles: merging features from tomato branch.
    
    === BVH build time optimizations ===
    
    * BVH building was multithreaded. Not all building is multithreaded, packing
      and the initial bounding/splitting is still single threaded, but recursive
      splitting is, which was the main bottleneck.
    
    * Object splitting now uses binning rather than sorting of all elements, using
      code from the Embree raytracer from Intel.
      http://software.intel.com/en-us/articles/embree-photo-realistic-ray-tracing-kernels/
    
    * Other small changes to avoid allocations, pack memory more tightly, avoid
      some unnecessary operations, ...
    
    These optimizations do not work yet when Spatial Splits are enabled, for that
    more work is needed. There's also other optimizations still needed, in
    particular for the case of many low poly objects, the packing step and node
    memory allocation.
    
    BVH raytracing time should remain about the same, but BVH build time should be
    significantly reduced, test here show speedup of about 5x to 10x on a dual core
    and 5x to 25x on an 8-core machine, depending on the scene.
    
    === Threads ===
    
    Centralized task scheduler for multithreading, which is basically the
    CPU device threading code wrapped into something reusable.
    
    Basic idea is that there is a single TaskScheduler that keeps a pool of threads,
    one for each core. Other places in the code can then create a TaskPool that they
    can drop Tasks in to be executed by the scheduler, and wait for them to complete
    or cancel them early.
    
    === Normal ====
    
    Added a Normal output to the texture coordinate node. This currently
    gives the object space normal, which is the same under object animation.
    
    In the future this might become a "generated" normal so it's also stable for
    deforming objects, but for now it's already useful for non-deforming objects.
    
    === Render Layers ===
    
    Per render layer Samples control, leaving it to 0 will use the common scene
    setting.
    
    Environment pass will now render environment even if film is set to transparent.
    
    Exclude Layers" added. Scene layers (all object that influence the render,
    directly or indirectly) are shared between all render layers. However sometimes
    it's useful to leave out some object influence for a particular render layer.
    That's what this option allows you to do.
    
    === Filter Glossy ===
    
    When using a value higher than 0.0, this will blur glossy reflections after
    blurry bounces, to reduce noise at the cost of accuracy. 1.0 is a good
    starting value to tweak.
    
    Some light paths have a low probability of being found while contributing much
    light to the pixel. As a result these light paths will be found in some pixels
    and not in others, causing fireflies. An example of such a difficult path might
    be a small light that is causing a small specular highlight on a sharp glossy
    material, which we are seeing through a rough glossy material. With path tracing
    it is difficult to find the specular highlight, but if we increase the roughness
    on the material the highlight gets bigger and softer, and so easier to find.
    
    Often this blurring will be hardly noticeable, because we are seeing it through
    a blurry material anyway, but there are also cases where this will lead to a
    loss of detail in lighting.
    Fix cycles opencl compile issue, fminf/fmaxf() was defined both as macro and function.
    Fix windows compile error in previous commit.
    Fix #30551: cycles passes combining did not always give identical result combined
    with antialiasing/defocus, now divide out color at the very end instead of for each
    sample.
    Cycles: avoid using float3 in kernel constant memory, just so we're sure alignment
    is working compatible between cpu and gpu.
    Fix compile issue on windows, broke this trying to fix for mac.
    Fix cycles compile issue after last commit.
    Fix #29444: cycles problem building BVH with NaN vertices.
    Cycles:
    * Fix #29354: crash on branch file. Note that for best compatibility, you need
      to save your files with one of the latest branch builds, since not all version
      patching code was moved to trunk.
    * Rename "Cycles" to "Cycles Render" in info header menu.
    * Code tweaks to try to fix #29301. It's not a real solution though, I'm thinking
      cause is extended precision for floats on some cpu's, used in one case but not
      in the other, leading to bounding box intersection issue...
    Cycles: attempt to fix build issue with mingw.
    Cycles: internal changes that should have no effect on user level yet, added
    shader flags for various purposes, and some code for light types other than
    points.
    Cycles: use workgroup size from opencl, attempt to fix issue with apple opencl.
    Compile fixes for MinGW, checked with basic initial setup, no CUDA, gcc 4.5.2.
    OpenImageIO still gives link-time errors, will try to make a lib for MinGW, see if it is fixed.
    Cycles: compile opencl kernels in non-blocking thread, and don't crash on
    build failure but show error message in status text.
    Cycles: opencl 1.1 compatibility tweaks.
    Cycles: more opencl fixes.
    Cycles: some steps to getting OpenCL backend to compile.
    Cycles: some more windows build fixes, based on patch by Francisco De La Cruz.
    Cycles: first batch of windows build fixes, not quite there yet.
    Cycles: another build fix.
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Ghost Context Refactor
    https://developer.blender.org/D643
    Separates graphics context creation from window code in Ghost so that they can vary separately.
    Better fix for #36935 and 36316:
    
    * 32 bit GCC builds now have the SSE BVH optimizations turned off, but still
      compile with SSE flags for better performance.
    
    * White color when rendering on Windows seems to have been unrelated to SSE,
      rather it was a graphics driver not supporting half float textures, added a
      check for that now.
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    Cycles: build without GLUT test app by default.
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Fix wrong track of the memory when doing device vector resize before freeing it
    
    This is rather legit case which happens i.e. when having persistent images enabled
    and session is updating the lookup tables.
    
    Now device_memory keeps track of amount of memory being allocated on the device,
    which makes freeing using the proper allocated size, not the CPU side buffer
    size.
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    Cycles: no need in spin lock in memory statistics
    
    This functions are called from device code which is guaranteed
    not to be called simultaneously from different threads.
    Cycles: memory usage report
    
    This commit adds memory usage information while rendering.
    
    It reports memory used by device, meaning:
    
    - For CPU it'll report real memory consumption
    - For GPU rendering it'll report GPU memory consumption, but it'll
      also mean the same memory is used from host side.
    
    This information displays information about memory requested by Cycles,
    not memory really allocated on a device. Real memory usage might be
    higher because of memory fragmentation or optimistic memory allocator.
    
    There's really nothing we can do against this.
    
    Also in contrast with blender internal's render cycles memory usage
    does not include memory used by scene, only memory needed by cycles
    itself will be displayed. So don't freak out if memory usage reported
    by cycles would be much lower than blender internal's.
    
    This commit also adds RenderEngine.update_memory_stats callback which
    is used to tell memory consumption from external engine to blender.
    This information is used to generate information line after rendering
    is finished.
    Cycles: remove deprecated strict aliasing flag for opencl, fix missing update
    modifying object layer in properties editor, and add memarena utility.
    Cycles: fix windows build, some minor tweaks.
    Cycles:
    * Add alpha pass output, to use set Transparent option in Film panel.
    * Add Holdout closure (OSL terminology), this is like the Sky option in the
      internal renderer, objects with this closure show the background / zero
      alpha.
    * Add option to use Gaussian instead of Box pixel filter in the UI.
    * Remove camera response curves for now, they don't really belong here in
      the pipeline, should be moved to compositor.
    
    * Output full float values for rendering now, previously was only byte precision.
    * Add a patch from Thomas to get a preview passes option, but still disabled
      because it isn't quite working right yet.
    * CUDA: don't compile shader graph evaluation inline.
    * Convert tabs to spaces in python files.
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cleanup: cycles whitespace
    Quiet warning
    Fix T37817: cycles CUDA detection problem on Windows with non-ascii paths.
    style cleanup: assignment & indentation.
    style cleanup: block comments
    Cycles:
    Fix #29475: remove node from properties editor crash on windows. This was a bug
    in the UI code, which code access removed data.
    Fix OpenCL still being used in a case where Experimental was disabled.
    Fix msvc debug warning in md5 code.
    Cycles: fix error in md5 hash computation for files in directories below
    the first level.
    Cycles:
    * Compute MD5 hash to deal with nvidia opencl compiler cache not recognizing
      changes in #included files, makes it possible to do kernel compile only
      once and remember it for the next time blender is started.
    * Kernel tweak to compile with ATI/linux. Enabling any more functionality than
      simple clay render still chokes the compiler though, without a specific error
      message ..
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Style cleanup: indentation, braces
    Code cleanup: white space and cmake was broken on all platforms
    Cycles: change __device and similar qualifiers to ccl_device in kernel code.
    
    This to avoids build conflicts with libc++ on FreeBSD, these __ prefixed values
    are reserved for compilers. I apologize to anyone who has patches or branches
    and has to go through the pain of merging this change, it may be easiest to do
    these same replacements in your code and then apply/merge the patch.
    
    Ref T37477.
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    Cycles:
    * Revert r57203 (len() renaming)
    There seems to be a problem with nVidia OpenCL after this and I haven't figured out the real cause yet.
    Better to selectively enable native length() later, after figuring out what's wrong.
    
    This fixes [#35612].
    Cycles / Math functions:
    * Rename some math functions:
    len -> length
    len_squared -> length_squared
    normalize_len -> normalize_length
    
    * This way OpenCL uses its inbuilt length() function, rather than our own. The other two functions have been renamed for consistency.
    * Tested CPU, CUDA and OpenCL compile, should be no functional changes.
    Code cleanup / Cycles:
    * Simplify shaperadius() function a bit to avoid castings.
    * Style cleanup 1.f -> 1.0f, to follow rest of Cycles code.
    Cycles OpenCL: a few fixes to get things compiling after kernel changes,
    for Apple OpenCL on OS X 10.8 and simple AO render.
    
    Also environment variable CYCLES_OPENCL_TEST can now be set to CPU, GPU,
    ACCELERATOR, DEFAULT or ALL values to test particuler devices.
    Cycles / Hair rendering:
    * Enable hair rendering on the GPU.
    
    Patch by Stuart Broadfoot, with small tweaks by me, to only enable it on sm_20 and above.
    Fix #34880: cycles motion blur render issue with some compilers. Actually is a bigger
    problem where accessing float4 members with [] stops working due to optimizer, will
    check that later.
    Fix cycles aliasing warnings caused by motion blur transforms.
    Fix #33344: cycles motion blur was still crashing on CUDA sm 2.0. Solution now
    is also an optimization, use quaternion nlerp instead of slerp, there's no good
    reason to use slerp, and nlerp is faster too.
    Fix #32900: object motion blur not working on the GPU. To make this work I disabled motion
    blurring of scale animation, probably not a big loss in practice since it's not so common
    to animate this, can be added back later.
    Fix #32974: cycles curved motion blur is not working well combined with rotation,
    problem is that the curved interpolation is not constant speed which leads to
    mismatches. Turns out this is really hard to solve and implement efficiently, so
    curved motion blur is disabled for now, until I can find a solution.
    Cycles: motion blur is now curved and passes exactly through the midpoint.
    
    Previously it would only interpolate between the previous and next frame,
    which meant it might not hit the current frame position.
    Fix #32844: cycles camera motion blur producing completely blurred frames sometimes.
    style cleanup: block comments
    Cycles: fixes to make CUDA 4.2 work, compiling gave errors in shadows and
    other places, was mainly due to instancing not working, but also found
    issues in procedural textures.
    
    The problem was with --use_fast_math, this seems to now have way lower
    precision for some operations. Disabled this flag and selectively use
    fast math functions. Did not find performance regression on GTX 460 after
    doing this.
    Fix most of #31307: cycles panorama camera not working correct with speed
    vectors and window texture coordinates. Only for Fisheye Equisolid it's
    still not working correct yet. Patch from Dalai with modifications.
    Fix #31168: cycles mask layer should only affect objects for camera rays.
    Fix: texture coordinate normal output was not correct, still changed under
    object transform.
    Cycles: support for motion vector and UV passes.
    
    Most of the changes are related to adding support for motion data throughout
    the code. There's some code for actual camera/object motion blur raytracing
    but it's unfinished (it badly slows down the raytracing kernel even when the
    option is turned off), so that code it disabled still.
    
    Motion vector export from Blender tries to avoid computing derived meshes
    when the mesh does not have a deforming modifier, and it also won't store
    motion vectors for every vertex if only the object or camera is moving.
    Fix #30966: cycles nan mesh vertices got set to (0, 0, 0), now remove them instead.
    Fix #29653: fix wrong cycles depth of field distance when rendering with a
    scaled camera.
    Fix #29594: cycles NaN values with window coordinates mapping.
    Cycles:
    * Fix object scaling update issue with interactive rendering + static BVH.
    * Fix negative scaling issue with static BVH.
    * Fix #29217: excessive fireflies in first sample.
    Cycles: remove deprecated strict aliasing flag for opencl, fix missing update
    modifying object layer in properties editor, and add memarena utility.
    Cycles: optimizations for instances in scene updates before render starts,
    should load a non-trivial mesh instanced many times quite a bit faster now.
    Cycles: more opencl fixes.
    Cycles: fix mapping node rotation not working correct for Y/Z axes, patch by Sanne.
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles Standalone: The camera can now be moved and rotated with LMB/RMB mouse key.
    
    ToDo: Add controls for forward/backward movement.
    Cycles Standalone: Add a help message, which appears when pressing the "h" key.
    
    This is very basic for now, but can be extended with more info (available devices for example) later.
    
    Thanks to Bastien and Sergey for some help with the glRect coordinates stuff.
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Fix T41066: MSVC + AVX2 kernel causes artifacts in hair render.
    
    The issue lies in the FMA functions, so disable them on Windows for now.
    Cycles Refactor: Add SSE Utility code from Embree for cleaner SSE code.
    
    This makes the code a bit easier to understand, and might come in handy
    if we want to reuse more Embree code.
    
    Differential Revision: https://developer.blender.org/D482
    
    Code by Brecht, with fixes by Lockal, Sergey and myself.
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Fully support WITH_CYCLES_LOGGING option
    
    Quite straightforward, used find*() modules from Ceres, so the
    variable naming is a bit different. Example of declaring which
    Glog/Gflags to use:
    
      cmake \
        -D GLOG_INCLUDE_DIR_HINTS=/opt/lib/glog/include \
        -D GLOG_LIBRARY_DIR_HINTS=/opt/lib/glog/lib \
        -D GFLAGS_INCLUDE_DIR_HINTS=/opt/lib/gflags/include \
        -D GFLAGS_LIBRARY_DIR_HINTS=/opt/lib/gflags/lib \
        /path/to/cycles
    
    This would break logging support when re-bundled back to Blender
    because of the changes in CMake files. But those changes i would
    like to do in Blender as well with some tweaks to how Glog/Gflags
    libraries are being detected.
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles: Add support of Glog logging
    
    This commit makes it possible to use Glog library for the debug logging.
    For now only possible when using CMake and in order to use the logging
    the WITH_CYCLES_LOGGING configuration variable is to be enabled.
    
    When this option is not enabled or when using Scons there's no difference
    in Cycles behavior at all, when using logging and no output to the console
    impact is gonna to be minimal.
    
    This is done in order to make it possible to have debug logging persistent
    in code (without need to add it when troubleshooting some bug and removing
    it afterwards).
    
    For now actual logging is not placed yet, only all the functions needed for
    the logging are written and so.
    Cycles: Add dedicated nodes to split/combine vectors.
    
    This was already possible via the RGB nodes, but that seems weird.
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    OSL Shader Files:
    * Simplify default color values, where each component was the same.
    * Initialize closures as Null Closure, rather than assigning an existing closure, gets overwritten anyways.
    Cycles OSL: refactoring and fixes
    
    * Moved kernel/osl/nodes to kernel/shaders
    * Renamed standard attributes to use geom:, particle:, object: prefixes
    * Update stdosl.h to properly reflect the closures we support
    * Fix the wrong stdosl.h being used for building shaders
    * Add geom:numpolyvertices, geom:trianglevertices, geom:polyvertices attributes
    Cycles: revert commit that joined surface/volume socket into a single shader socket,
    on second thought this makes it a bit too difficult to understand what's going on.
    Cycles: replace surface/volume sockets in output nodes with a single shader socket,
    decided it's better to render objects as either surface or volume.
    
    This may break the volume rendering patch, but shaders with volume closures still
    get tagged as having volume closures, so it should be fixable without too many
    changes.
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cleanup: Remove special code for Visual Studio 2008.
    
    Goodbye VC2008, it has been a pleasure (more or less) :D SCons / CMake cleaenup will follow.
    Differential Revision: https://developer.blender.org/D715
    Cycles: Add an AVX2 CPU kernel.
    
    This kernel is compiled with AVX2, FMA3, and BMI compiler flags. At the moment only Intel Haswell benefits from this, but future AMD CPUs will have these instructions as well.
    
    Makes rendering on Haswell CPUs a few percent faster, only benchmarked with clang on OS X though.
    
    Part of my GSoC 2014.
    Cycles Refactor: Add SSE Utility code from Embree for cleaner SSE code.
    
    This makes the code a bit easier to understand, and might come in handy
    if we want to reuse more Embree code.
    
    Differential Revision: https://developer.blender.org/D482
    
    Code by Brecht, with fixes by Lockal, Sergey and myself.
    Warnings: quiet unused define message
    Scons: refactor cycles kernel code to avoid building the AVX kernel with
    compilers that don't support it.
    
    CMake still needs to updated to work the same for consistency, but this should
    fix the OS X buildbot at least.
    Cycles: Add an AVX kernel for CPU rendering.
    
    * AVX is available on Intel Sandy Bridge and newer and AMD Bulldozer and newer.
    * We don't use dedicated AVX intrinsics yet, but gcc auto vectorization gives a 3% performance improvement for Caminandes. Tested on an i5-3570, Linux x64.
    * No change for Windows yet, MSVC 2008 does not support AVX.
    
    Reviewed by: brecht
    Differential Revision: https://developer.blender.org/D216
    Code cleanup: some reshuffling of SIMD defines moving more code to util_optimization.h.
    Cycles: Disable SSE41 kernel on 32bit, we don't use intrinsics here anyway. Also disable it for Visual Studio < 2012, broken blendv instruction.
    Cycles: Skip the compilation of the dedicated SSE2 kernel on x86-64, we can assume SSE2 here, so just re-use the regular one. Saves 500kb in the blender binary.
    
    Reviewed by: brecht
    Differential Revision: https://developer.blender.org/D199
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    spelling: use American spelling for canceled
    Fix #36137: cycles render not using all GPU's when the number of GPU's is larger
    than the number of CPU threads
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    Cycles / CPU Rendering:
    * "Auto Detect" now again uses the umber of cores, instead number of cores + 1.
    
    This was added before we had Tile rendering and benchmarks on several systems showed that there is no gain with this now. There might be some slight difference (0.5% or so) slower/faster depending on the scene, but this is negligible.
    Fix cycles crash that happened with mesh emission and diffuse/glossy ray
    visibility disabled on some objects.
    Fix #33107: cycles fixed threads 1 was still having two cores do work,
    because main thread works as well.
    Fix related to #32929: update list of available devices for cycles rendering
    while Blender is running, not only on load. It might help a case when Blender
    is started before the CUDA driver is fully initialized.
    Cycles: reviewed the task scheduler code and fixed (hopefully all) windows threading problems.
    Cycles: threading optimizations
    
    * Multithreaded image loading, each thread can load a separate image.
    * Better multithreading for multiple instanced meshes, different threads can now
      build BVH's for different meshes, rather than all cooperating on the same mesh.
      Especially noticeable for dynamic BVH building for the viewport, gave about
      2x faster build on 8 core in fairly complex scene with many objects.
    * The main thread waiting for worker threads can now also work itself, so
      (num_cores + 1) threads will be working, this supposedly gives better
      performance on some operating systems, but did not measure performance for
      this very detailed yet.
    Cycles: merging features from tomato branch.
    
    === BVH build time optimizations ===
    
    * BVH building was multithreaded. Not all building is multithreaded, packing
      and the initial bounding/splitting is still single threaded, but recursive
      splitting is, which was the main bottleneck.
    
    * Object splitting now uses binning rather than sorting of all elements, using
      code from the Embree raytracer from Intel.
      http://software.intel.com/en-us/articles/embree-photo-realistic-ray-tracing-kernels/
    
    * Other small changes to avoid allocations, pack memory more tightly, avoid
      some unnecessary operations, ...
    
    These optimizations do not work yet when Spatial Splits are enabled, for that
    more work is needed. There's also other optimizations still needed, in
    particular for the case of many low poly objects, the packing step and node
    memory allocation.
    
    BVH raytracing time should remain about the same, but BVH build time should be
    significantly reduced, test here show speedup of about 5x to 10x on a dual core
    and 5x to 25x on an 8-core machine, depending on the scene.
    
    === Threads ===
    
    Centralized task scheduler for multithreading, which is basically the
    CPU device threading code wrapped into something reusable.
    
    Basic idea is that there is a single TaskScheduler that keeps a pool of threads,
    one for each core. Other places in the code can then create a TaskPool that they
    can drop Tasks in to be executed by the scheduler, and wait for them to complete
    or cancel them early.
    
    === Normal ====
    
    Added a Normal output to the texture coordinate node. This currently
    gives the object space normal, which is the same under object animation.
    
    In the future this might become a "generated" normal so it's also stable for
    deforming objects, but for now it's already useful for non-deforming objects.
    
    === Render Layers ===
    
    Per render layer Samples control, leaving it to 0 will use the common scene
    setting.
    
    Environment pass will now render environment even if film is set to transparent.
    
    Exclude Layers" added. Scene layers (all object that influence the render,
    directly or indirectly) are shared between all render layers. However sometimes
    it's useful to leave out some object influence for a particular render layer.
    That's what this option allows you to do.
    
    === Filter Glossy ===
    
    When using a value higher than 0.0, this will blur glossy reflections after
    blurry bounces, to reduce noise at the cost of accuracy. 1.0 is a good
    starting value to tweak.
    
    Some light paths have a low probability of being found while contributing much
    light to the pixel. As a result these light paths will be found in some pixels
    and not in others, causing fireflies. An example of such a difficult path might
    be a small light that is causing a small specular highlight on a sharp glossy
    material, which we are seeing through a rough glossy material. With path tracing
    it is difficult to find the specular highlight, but if we increase the roughness
    on the material the highlight gets bigger and softer, and so easier to find.
    
    Often this blurring will be hardly noticeable, because we are seeing it through
    a blurry material anyway, but there are also cases where this will lead to a
    loss of detail in lighting.
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Style cleanup: indentation, braces
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    style cleanup: assignment & indentation.
    Cycles: add Object Info node, with outputs object location, object/material
    pass index, and a random number unique to the instance of the object.
    
    This can be useful to give some variation to a single material assigned to
    multiple instances, either manually controlled through the object index, based
    on the object location, or randomized for each instance.
    
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/More#Object_Info
    Cycles: procedural texture nodes reorganization. This will break existing files
    using them, but rather do it now that I have the chance still. Highlights:
    
    * Wood and Marble merged into a single Wave texture
    * Clouds + Distorted Noise merged into new Noise node
    * Blend renamed to Gradient
    * Stucci removed, was mostly useful for old bump
    * Noise removed, will come back later, didn't actually work yet
    * Depth setting is now Detail socket, which accepts float values
    * Scale socket instead of Size socket
    
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/Textures
    Cycles: seed value to get different noise values from renders, there was a patch
    for this but I've implemented it differently.
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles Refactor: Add SSE Utility code from Embree for cleaner SSE code.
    
    This makes the code a bit easier to understand, and might come in handy
    if we want to reuse more Embree code.
    
    Differential Revision: https://developer.blender.org/D482
    
    Code by Brecht, with fixes by Lockal, Sergey and myself.
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    Cycles: first batch of windows build fixes, not quite there yet.
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles Bake: show progress bar during bake
    
    Baking progress preview is not possible, in parts due to the way the API
    was designed. But at least you get to see the progress bar while baking.
    
    Reviewers: sergey
    
    Differential Revision: https://developer.blender.org/D656
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    Cycles: persistent images option
    
    This option enables keeping loaded images in the memory in-between
    of rendering.
    
    Implemented by keeping render engine alive for until Render structure
    is being freed.
    
    Cycles will free all data when render finishes, optionally keeping
    image manager untouched. All shaders, meshes, objects will be
    re-allocated next time rendering happens.
    
    Cycles cession and scene will be re-created from scratch if render/
    scene parameters were changed.
    
    This will also allow to keep compiled OSL shaders in memory without
    need to re-compile them again.
    
    P.S. Performance panel could be cleaned up a bit, not so much happy
         with it's vertical alignment currently but not sure how to make
         it look better.
    
     P.P.S. Currently the only way to free images from the device is to
           disable Persistent Images option and start rendering.
    Fix cycles "synchronizing object" status being shown when it was already finished.
    Cycles: merge of changes from tomato branch.
    
    Regular rendering now works tiled, and supports save buffers to save memory
    during render and cache render results.
    
    Brick texture node by Thomas.
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/Textures#Brick_Texture
    
    Image texture Blended Box Mapping.
    http://wiki.blender.org/index.php/Doc:2.6/Manual/Render/Cycles/Nodes/Textures#Image_Texture
    http://mango.blender.org/production/blended_box/
    
    Various bug fixes by Sergey and Campbell.
    * Fix for reading freed memory in some node setups.
    * Fix incorrect memory read when synchronizing mesh motion.
    * Fix crash appearing when direct light usage is different on different layers.
    * Fix for vector pass gives wrong result in some circumstances.
    * Fix for wrong resolution used for rendering Render Layer node.
    * Option to cancel rendering when doing initial synchronization.
    * No more texture limit when using CPU render.
    * Many fixes for new tiled rendering.
    Fix 31370: light falloff node linear output not working code.
    Fix part of thread safety issue, there's still something else wrong.
    Fix #29966: cycles elapsed time not resetting in viewport after changes.
    Cycles: show elapsed time for F12/background render.
    Cycles: tweaks to properties and nodes
    
    * Passes renamed to samples
    * Camera lens radius renamed to aperature size/blades/rotation
    * Glass and fresnel nodes input is now index of refraction
    * Glossy and velvet fresnel socket removed
    * Mix/add closure node renamed to mix/add shader node
    * Blend weight node added for shader mixing weights
    
    There is some version patching code for reading existing files, but it's not
    perfect, so shaders may work a bit different.
    Cycles: compile error fix for ICC.
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    Cycles OpenCL: keep the opencl context and program around for quicker rendering
    the second time, as for example Intel CPU startup time is 9 seconds.
    
    * Adds an cache for contexts and programs for each platform and device pair,
      which also ensure now no two threads try to compile and write the binary cache
      file at the same time.
    * Change clFinish to clFlush so we don't block until the result is done, instead
      it will block at the moment we copy back memory.
    * Fix error in Cycles time_sleep implementation, does not affect any active code
      though.
    * Adds some (disabled) debugging code in the task scheduler.
    
    Patch #35559 by Doug Gale.
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Code cleanup: white space and cmake was broken on all platforms
    Cycles: network render code updated for latest changes and improved
    
    This actually works somewhat now, although viewport rendering is broken and any
    kind of network error or connection failure will kill Blender.
    
    * Experimental WITH_CYCLES_NETWORK cmake option
    * Networked Device is shown as an option next to CPU and GPU Compute
    * Various updates to work with the latest Cycles code
    * Locks and thread safety for RPC calls and tiles
    * Refactored pointer mapping code
    * Fix error in CPU brand string retrieval code
    
    This includes work by Doug Gale, Martijn Berger and Brecht Van Lommel.
    
    Reviewers: brecht
    
    Differential Revision: http://developer.blender.org/D36
    Cycles: experimental OSL ptex reading code.
    
    This code can't actually be enabled for building and is incomplete, but it's
    here because we know we want to support this at some point and there's not much
    reason to have it in a separate branch if a simple #ifdef can disable it.
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    Cycles: compile opencl kernels in non-blocking thread, and don't crash on
    build failure but show error message in status text.
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles Refactor: Add SSE Utility code from Embree for cleaner SSE code.
    
    This makes the code a bit easier to understand, and might come in handy
    if we want to reuse more Embree code.
    
    Differential Revision: https://developer.blender.org/D482
    
    Code by Brecht, with fixes by Lockal, Sergey and myself.
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles Refactor: Add SSE Utility code from Embree for cleaner SSE code.
    
    This makes the code a bit easier to understand, and might come in handy
    if we want to reuse more Embree code.
    
    Differential Revision: https://developer.blender.org/D482
    
    Code by Brecht, with fixes by Lockal, Sergey and myself.
    Cycles: compile fix after rB7808360c5f (own mistake)
    Cycles: fix crash in SSE hair and half-floats on x86+vc2008
    
    MSVC 2008 ignores alignement attribute when assigning from unaligned
    float4 vector, returned from other function. Now Cycles uses unaligned
    loads instead of casts for win32 in x86 mode.
    Code cleanup: move half float functions to separate header file.
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles: attempt to solve compilation error on 32bit OSX
    Cycles: Slight modification to the previous commit
    
    This way util_simd.cpp would not require modifications
    if/when SSE2 is suddenly supported on 32bit platforms.
    
    This also allowed to unleash some issues with util_simd.h
    related on the fact that there size_t and int are actually
    the same types.
    Fix compilation in cycles
    Cycles Refactor: Add SSE Utility code from Embree for cleaner SSE code.
    
    This makes the code a bit easier to understand, and might come in handy
    if we want to reuse more Embree code.
    
    Differential Revision: https://developer.blender.org/D482
    
    Code by Brecht, with fixes by Lockal, Sergey and myself.
    Style cleanup: indentation, braces
    Cycles: SSE optimization for Voronoi cells texture
    
    Gives 5-6% speedup for Caterpillar_PatazStudio.blend.
    
    Reviewed By: brecht, dingto
    
    Differential Revision: https://developer.blender.org/D419
    Cycles: SSE optimization for line segments/ribbons hair
    
    Gives ~11% speedup for hair.blend, ~10% for koro_final.blend
    
    Also extract few common subexpressions in hair calculation.
    
    Reviewed By: brecht
    
    Differential Revision: https://developer.blender.org/D318
    Cycles: fix crash in SSE hair and half-floats on x86+vc2008
    
    MSVC 2008 ignores alignement attribute when assigning from unaligned
    float4 vector, returned from other function. Now Cycles uses unaligned
    loads instead of casts for win32 in x86 mode.
    Cycles: bvh_cardinal_curve_intersect intro SSE optimization
    
    Gives 5% speedup for koro_final.blend, 10-15% for hair.blend
    
    Reviewed By: brecht
    
    Differential Revision: https://developer.blender.org/D225
    Cycles: small optimization for SSE 4.1 bvh intersector
    
    Gives 0.7% - 1.3% speedup for BMW1M-MikePan scene.
    
    Reviewers: juicyfruit
    
    Differential Revision: https://developer.blender.org/D280
    Cycles: less instructions for CPU perlin code
    
    Also move shuffle() in bvh traversal back (was accidentally lost in SSE hair revert)
    Cycles: SSE for Voronoi textures (targeted for Haswell CPUs)
    
    Gives up to 15% speedup scenes with voronoi-based textures (up to 25% with volumes) on Haswell. The performance change for other CPUs is much smaller: 1-2%.
    
    Reviewed By: brecht
    
    Differential Revision: https://developer.blender.org/D203
    Code Cleanup: in Cycles SSE replace macros with templates, skip unused code with preprocessor, simplify casts
    Cycles: SSE optimization for sRGB conversion (gives 7% speedup on CPU for pavillon_barcelone scene)
    
    Thanks brecht/dingto/juicyfruit et al. for testing and reviewing this patch in T38034.
    Cycles: Move SIMD utility functions into its own file.
    
    Recently added SSE macros for noise texture can be moved here as well, but I leave this for later.
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles: network render code updated for latest changes and improved
    
    This actually works somewhat now, although viewport rendering is broken and any
    kind of network error or connection failure will kill Blender.
    
    * Experimental WITH_CYCLES_NETWORK cmake option
    * Networked Device is shown as an option next to CPU and GPU Compute
    * Various updates to work with the latest Cycles code
    * Locks and thread safety for RPC calls and tiles
    * Refactored pointer mapping code
    * Fix error in CPU brand string retrieval code
    
    This includes work by Doug Gale, Martijn Berger and Brecht Van Lommel.
    
    Reviewers: brecht
    
    Differential Revision: http://developer.blender.org/D36
    Cycles: experimental OSL ptex reading code.
    
    This code can't actually be enabled for building and is incomplete, but it's
    here because we know we want to support this at some point and there's not much
    reason to have it in a separate branch if a simple #ifdef can disable it.
    Cycles: relicense GNU GPL source code to Apache version 2.0.
    
    More information in this post:
    http://code.blender.org/
    
    Thanks to all contributes for giving their permission!
    Cycles: compile opencl kernels in non-blocking thread, and don't crash on
    build failure but show error message in status text.
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Add area lamp to world volume example and use branched path.
    Fix World Volume example and add missing volume properties for world to XML.
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Cycles render engine, initial commit. This is the engine itself, blender modifications and build instructions will follow later.
    
    Cycles uses code from some great open source projects, many thanks them:
    
    * BVH building and traversal code from NVidia's "Understanding the Efficiency of Ray Traversal on GPUs":
    http://code.google.com/p/understanding-the-efficiency-of-ray-traversal-on-gpus/
    * Open Shading Language for a large part of the shading system:
    http://code.google.com/p/openshadinglanguage/
    * Blender for procedural textures and a few other nodes.
    * Approximate Catmull Clark subdivision from NVidia Mesh tools:
    http://code.google.com/p/nvidia-mesh-tools/
    * Sobol direction vectors from:
    http://web.maths.unsw.edu.au/~fkuo/sobol/
    * Film response functions from:
    http://www.cs.columbia.edu/CAVE/software/softlib/dorf.php
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
    Initial integration of build system for standalone repository
    
    Compilation works on Linux and OSX, but it's so called "works for me",
    so more tweaks are likely required.
    
    There's number of known TODOs still:
    
    - Windows build is not supported at this moment.
    - Logging option is exposed as an option but wouldn't work now.
    - Installation target is not tested and would need more work.
    - Compiled .oso files are not put to the final location, so manual copy is
      required for now.
    
      Ideally for OSL we need to have shade/cycles/shader, to match FSH.
    
    Consult the README file for instructions.
