    Improve mail function (#384)
    
    All API mails are sent from the same address, thus the `mail` util
    does not require a sender mail anymore, and instead always uses
    the API mail from the config.
    
    Additionally, the mail function now adds an configurable subject
    line, defaulting to "[AMIV] {subject}", to increase
    consistency and allow users to spot API mails quickly.
    Add a setup to run tests bundled with mongodb in a Docker container. (#369)
    Update online documentation, remove outdated docs (#323)
    
    - Removed outdated developer and admin documentation.
    - Moved documents such as the Cheatsheet or the OAuth user guide into the
      online docs, which are now the 'single source of truth' for users.
    - Extended the Cheatsheet to cover sending data with multipart/form-data
    - Added general introductions to REST and API auth.
    - In the online docs, added support for:
      - Query parameters.
      - Authorization header.
      - Additional lookup path for GET.
      - Error Responses.
    - Hooks are not displayed anymore, as they are only relevant for API developers
      and not for users.
    - Updates ReDoc to version 2.
    
    Regarding the documentation updates, I briefly considered putting them into
    a pull request to Eve-Swagger. However, development on Eve-Swagger seems stale,
    with two open pull requests without response. Furthermore, most additions
    include AMIV API specific detail (e.g. a link to the cheatsheet), so I opted
    for a API specific solution instead.
    Add newsletter subscriber export endpoint
    
    Resolves #242
    Add support for monitoring with Sentry
    
    Resolves #264
    Add periodic execution of scheduled tasks
    
    Along with this, `cli.py` is a overhauled a bit: It can now also run the production server, no additional script is required.
    
    The Docker Image is adjusted so it's easy to use it for periodic tasks, too.
    
    And the README is updated to explain how to do this as well.
    
    Resolves #275
    Add Oauth2 login, remove python2
    
    This commit mainly implements shiny new OAuth2 functionality to the API,
    in form of a central login page which can be used for *Implicit Grants*.
    
    Documentation for this new feature included.
    
    Along this we decided to drop python 2 support to simplify the new
    feature. This lead to cleaning up other parts of the code as well.
    
    Finally, Travis and tox were adjusted to drop python2 as well.
    LDAP v3 (#250)
    
    Until now, only the `ou` field form ldap was used to determine a students' department.
    
    As it turns out, departments are never deleted from this list, i.e. if a student switches from ITET to INFK, both departments will be in the list, not only the current department.
    
    We now use the `deparmentNumber` field to determine the department. It is a little bit more effort to parse, but at least we reliably know a students department now.
    Update README.md
    Update README.md
    Switch from uwsgi to bjoern (#249)
    
    In the production setup, `uwsgi` was causing troubles by dropping connections
    if to many requests occured.
    I suspected bad configuration but was not able to fix it.
    
    Searching for a solution, I came across [bjoern](https://github.com/jonashaag/bjoern),
    a lightweight wsgi-server based on libev.
    
    bjoern solves our problems:
    - no dropped connections anymore
    - bonus: smaller image
    - bonus: runs with less memory
    - bonus: no configuration required
    
    Additionally, a `.dockerignore` is added to clean up the image a little. Essentially it just copies the `.gitignore`
    Improve Docker README, reset settings. (#247)
    Dockerfile: uwsgi w/o preforking, Readme: Docker instructions (#246)
    
    The pymongo driver does not like preforking, which is used by uwsgi.
    The uwsgi command is now adjusted to avoid preforking.
    
    Additionally, the README now explains how to use the docker container.
    (Also the default settings are updated to make deployment easier)
    Create mailing list files remotely via ssh. (#243)
    
    Until now, mailing list files are created locally.
    For the mailing lists to actually work, they need to be copied to a remote
    server.
    
    This copying is now included in AMIVAPI, which has two main benefits:
    
    - No local files are required anymore, useful for future deployment with docker
    - No external copying tool is required to make mailing lists work with amivapi
    
    Unfortunately, the mailing list server supports *only* ssh connections,
    therefore we have no other option to transfer the files.
    
    While I do not think this is a very *good* solution, I believe its the *best*
    approach we have available.
    
    Closes #239.
    Add a cheatsheet (#241)
    
    * Add cheatsheet
    
    * Add link to cheatsheet
    README: Use the master branch in the installation instructions
    Update test and travis configuration for zero-config api
    
    The tests now specify not only the test database, but also the test user.
    
    This way, travis does not need to create a configuration at all to run the
    tests.
    
    Furthermore, update the README to include a command to create the test user
    with mongodb.
    Allow zero-config api usage
    
    By now, all configuration for API has useful default values or can handle
    if values are unset (e.g. LDAP is deactivated if unconfigured)
    
    Therefore it is not necessary to create a config before running the API.
    `bootstrap.py` is changed a little to allow creating an app without config,
    which is especially useful for tests and quick development servers.
    Additionally, the configuration can now specified by environment vars, which
    will be useful when working with Docker, which is planned for the near future.
    
    All missing default values which were used by the CLI are moved into
    `settings.py`.
    
    The `create_config` command of the CLI is removed. In most cases, it is easier
    to copy and modify an existing config.
    
    The README is updated and now includes instructions on how to create a config
    file (including config template for copypasting)
    Information about testing in the README
    README formatting improvements
    Made setup.py provide the amivapi command
    
    Also updated README and requirements to explain the new procedure
    Added coverage badge to README
    Travis-CI badge in README try 2
    Added Travis-CI badge to README
    Write some useful information to the README
    Initial commit
    Speed up testing in docker (#379)
    Add a setup to run tests bundled with mongodb in a Docker container. (#369)
    Improved performance test, works without certificate for HTTPS now
    Added performance test script
    Mohammed Khouni
    Added AGPL license, content encoding, updated setup.py
    Bump pillow from 6.0.0 to 6.2.0 (#403)
    
    Bumps [pillow](https://github.com/python-pillow/Pillow) from 6.0.0 to 6.2.0.
    - [Release notes](https://github.com/python-pillow/Pillow/releases)
    - [Changelog](https://github.com/python-pillow/Pillow/blob/master/CHANGES.rst)
    - [Commits](https://github.com/python-pillow/Pillow/compare/6.0.0...6.2.0)
    
    Signed-off-by: dependabot[bot] <support@github.com>
    Update requirements and test setup. (#396)
    
    For some reason, the generic alpine image would not correctly update
    the repositories and would not find mongodb.
    
    With a fixed version, this issue does not occur anymore.
    
    Additionally, important changes due to version update:
    
    - Pytz: Dependency removed, as datetime
      can handle utc on its own.
    
    - Cerberus: `valueschema` renamed to `valuesrules`.
    
    - MongoDB: `insert` is replaced by `insert_one` and `insert_many`.
      As a consequence, ObjectIDs are retrieved
      a bit differently.
    
    - PassLib: `encrypt` renamed to `hash`.
      `vary_round` is deprecated, has it
      "provided little security and was not worth
      the additional complexity" [1].
    
    [1]: https://passlib.readthedocs.io/en/stable/history/1.7.html?highlight=vary_rounds#crypt-context-api-deprecations
    
    Closes #394 (new eve version fixes this bug)
    Push Eve to 0.8.2 (dev branch for now). (#387)
    Update settings, in particular version number, and serve logo from static files
    
    Furthermore, I now ensured that the setup always uses the correct version
    number.
    
    This required me to remove the 'hack' to always install the current folder
    from `requirements.txt`. This was quite unusual anyways.
    
    As a result tox etc. needed to be adjusted.
    
    Additionally, the logo used for OAuth and (soon) docs is now served consistently from a static endpoint.
    Add validation for event description and image aspect ratio
    
    Resolves #96
    Resolves #127
    Add support for monitoring with Sentry
    
    Resolves #264
    Update Eve to version 0.8
    
    * Update to Eve 0.8
    
    Eve 0.8 brings Cerberus 1.0, which requires lots of changes:
    - Several properties have been renamed
    - type checking is now handled differently
    - validation rules require a schema in the docstring to validate the schema
      itself
    
    Additional Changes in Eve itself:
    - A PATCH on a document which misses a field having a default value will now
      result in setting this value, even if the field was not provided in the
      PATCH’s payload. (From Eve changelog)
    - Some error messages changed.
    Update requirements.txt
    
    As there are currently issues with Flask-PyMongo 2.0.0, add a explicit dependency for Flask-PyMongo 0.5.2.
    See pyeve/eve#1172.
    Specify version of eve-swagger (#276)
    
    To make sure that changes to the eve-swagger we use do not crash production systems, changes in eve-swagger should always require an update of the requirements and therefore at least a CI test.
    Add Dockerfile (#245)
    
    Create Dockerfile
    
    (Also remove a requirement that is not used anymore)
    Updated eve to version 0.7.4 (#194)
    
    * Updated eve to 0.7.4
    
    * Get eve from pypi instead of github
    Ldap improvements (#175)
    
    First of all, the structure of ldap.py is now simplified. The class is dropped
    and replaced by a few module level functions which are easier to understand.
    
    Next the functions themselves have been rearranged to be easier to test.
    Some premature optimization has been removed: The updating of all users
    now uses the same function as the one for one user only, since there were not
    really noticable performance differences. Again, this simplifies testing.
    
    Additionally repaired escape sequences. Either '\..' or r'\..' works, but r'\..' was to much ;)
    
    Speaking of testing: Using mock, all ldap functions are now tested.
    There still are some integration tests to verify everything actually works with the
    eth ldap.
    
    Finally a few changes in bootstrap, cli and sessions to use the new functions.
    
    After all I am quite happy with this version now. A few points are still up for improvement and I have added them to ldap.py, but over all the code is much simpler and better tested now, which is nice.
    Back to mainline eve, boolean serializer has been merged upstream
    New Eve version (my fork currently, for boolean serialization. Needed to fix some part of fixtures since post_internal returns 5 values ins Eves newest version. (#154)
    Back to main eve repository. Our patches have been merged upstream.
    
    As soon as eve 0.7 releases we should switch back to the stable release
    Updated requirements
    hide auth hooks in swagger
    remove eve-docs also from requirements
    Updated nethz library and ldap to work with new version.
    Added cron module
    Switched to eve fork
    
    The fork has support for POST to a list of files
    Made setup.py provide the amivapi command
    
    Also updated README and requirements to explain the new procedure
    Added new command line interface using Click
    
    It is much less code than before.
    All function to run the code currently updated to work with mongo will
    work with the new config.
    But some functions from the old config creation are not yet ported (e.g.
    API keys), so the files are not deleted yet.
    Updated requirements. Still can't use Flask 0.11 because of conflicts with Eve.
    Seperated fixture system from main test class
    
    The file got pretty long, now it is a mixin. Also custom
    validators can be handles easier by poroviding functions
    to generate the affected fields manually for a fixture
    Updated requirements and fixed small things
    
    Note: We are now on flask 0.10, not the latest 0.11
    
    There seems to be an error with the TestClient, which crashes
    on abort because of a change in 0.11.
    
    Needs more investigation, though
    Added jsonschema to requirements and flake8 fixes
    
    There should be no flake8 errors in group_permissions anymore
    Back to upstream eve_sqlalchemy
    
    The authorization functions are changed to work with the new version
    Dependencies: use passlib for password hashing
    
    From the website:
    
        Passlib is a password hashing library for Python 2 & 3,
        which provides cross-platform implementations of over 30
        password hashing algorithms, as well as a framework for
        managing existing password hashes.
    Dependencies: replace mysql-connector-python with mysqlclient
    
    mysqlclient is a drop-in replacement for MySQL-Python with Python 3 compatability.
    Changed sync process because of ldap limitations
    
    Perfomance with eth ldap was very bad, so the entire structure of ldap
    requests has changed. Now all users are synched at once with ldap since it
    doesnt make sence (performance wise) to split it into small chunks.
    
    See docs and ldap.py for explanations
    filter improvements, manage.py tools for ldap
    
    Also more docs!
    LDAP updates and testing and docs
    
    In bootstrap modified ldap setup,
    extended manage.py to create necessary fields
    authentication is now complete and imports and updates user.
    
    Because everyone gets imported, there must be a setting "other" in
    department. Updated model accordingly
    
    Also added nethz library fork to requirements
    Changed requirements.txt to use https instead of ssh for git
    
    This allows access without github login, which is needed for public
    travis-ci
    Updated eve and eve-sqlalchemy to newest versions
    Readded missing requirement, updated Doc for installation
    Improved tox config, travis-ci config, cleaned requirements
    
    - Test requirements are now in tox.ini
    - requirements only contains what we actually depend on
    - substituted python-mysql with mysql-connector-python to get python3
      support
    
    To run test now use:
    
        pip install tox
        tox
    Tox test script and Travis CI automatic test script
    Added mysql-python to requirements
    new eve-docs version
    requirements with new eve-docs version
    Update version of eve-sqlalchemy fork
    we now use the custom eve_docs-fork, changed requirements
    please update your site-packages
    Update to Eve 0.5.1 + Eve SQLAlchemy fork
    
    Eve 0.5 moved SQLAlchemy support to a different package. We follow the
    official eve repository now and use a fork of the extension. Changes are
    only imports except for authentification.
    
    The big change introduced by this is that the lookup query parameter now
    only understands python syntax, but has support for embedding with it.
    
    The fork introduces that values returned by Eve are now dict and
    the SQLAResult class is removed of Eve-Sqlalchemy for now to resolve
    problems with hooks, json and possibly other unexspected behaviour.
    
    See issue #11 in eve-sqlalchemy
    https://github.com/RedTurtle/eve-sqlalchemy/issues/11
    New simpler token generation
    
    Tokens are now random bytes instead of signed information.
    It is very unlikely anybody would have ever used the signed information.
    Furthermore the information can not reflect changes(logout) at the
    server, so any client would have had to connect to the server and check
    the token with the API anyway. Changing to random tokens decreases code
    complexity.
    requirements: Fix for commit c2975b319c7aff149f583cc546cecdc96ffb42a5
    Requirements: Use Conrad's fork of eve
    
    That fork has a patch to support mongo query documents in sqlalchemy lookup
    parameters
    Authentification initial implementation
    
    manage.py create private+public key used to sign login tokens
    Refactor bootstrapping and configuration for reusability
    
    The app instance is now created with a function, which allows to create multiple apps for different environments (e.g., testing).
    
    Configuration is now done in two steps (previously: amivapi.config module): First, amivapi.settings is consulted for default settings which are applied in all environments, which is then extended by environment-specific config files from the ROOT/config directory. Creating of the latter can be done by executing `python manage.py create_config` and following the instructions.
    requirements: extract test-requirements into own file
    
    This allows production servers to only install dependencies which
    are relevant to run the production code.
    Added unittest for flake8
    Added requirement flake8
    
    Added field password to User
    Added field token to Session
    Added additional requirements for the test cases(requests)
    Update requirements file
    
    Fixes the link to Eve's sqlalchemy branch and adds the Eve-docs
    extension.
    First working example built with Eve's sqlalchemy branch
    
    Relations between the models are not yet correctly set up, the Eve
    schema is not yet optimal (should contain some more restrictions),
    and responses currently don't include fields which are "null".
    Added MANIFEST to make tox find LICENSE
    Update settings, in particular version number, and serve logo from static files
    
    Furthermore, I now ensured that the setup always uses the correct version
    number.
    
    This required me to remove the 'hack' to always install the current folder
    from `requirements.txt`. This was quite unusual anyways.
    
    As a result tox etc. needed to be adjusted.
    
    Additionally, the logo used for OAuth and (soon) docs is now served consistently from a static endpoint.
    Add Oauth2 login, remove python2
    
    This commit mainly implements shiny new OAuth2 functionality to the API,
    in form of a central login page which can be used for *Implicit Grants*.
    
    Documentation for this new feature included.
    
    Along this we decided to drop python 2 support to simplify the new
    feature. This lead to cleaning up other parts of the code as well.
    
    Finally, Travis and tox were adjusted to drop python2 as well.
    LDAP v3 (#250)
    
    Until now, only the `ou` field form ldap was used to determine a students' department.
    
    As it turns out, departments are never deleted from this list, i.e. if a student switches from ITET to INFK, both departments will be in the list, not only the current department.
    
    We now use the `deparmentNumber` field to determine the department. It is a little bit more effort to parse, but at least we reliably know a students department now.
    Update python version to 3.6
    Fix posargs in tox ini
    Flake8 fix (#185)
    
    * Flake8 fix
    
    * Remove pypy testing
    
    * Remove pypy also for travis
    Updated tox testing environments to use Python 3.5 instead of Python 3.4
    Temp save to local changes; JobOffers tests on the way
    Updated tox to use pytest, since nose is officially discontinued
    Tests: remove dependency on pillow
    
    Pillow was only used to create a (static) image for testing purposes.
    Installing pillow requires the libjpeg & zlib development headers,
    which is a pain in the a** :)
    Dependencies: replace mysql-connector-python with mysqlclient
    
    mysqlclient is a drop-in replacement for MySQL-Python with Python 3 compatability.
    Fix tox.ini, no "invocation error" in py27 anymore
    
    When coverage is installed, it can be used directly from
    nosetests with additional parameters --coverage, etc.
    
    See: http://nose.readthedocs.org/en/latest/plugins/cover.html
    
    This solved the invocation errors in py27.
    
    For some reason it persists on py34 for me - any ideas?
    §
    Added coverage report
    Tox config fix to run single tests
    Improved tox config, travis-ci config, cleaned requirements
    
    - Test requirements are now in tox.ini
    - requirements only contains what we actually depend on
    - substituted python-mysql with mysql-connector-python to get python3
      support
    
    To run test now use:
    
        pip install tox
        tox
    Tox test script and Travis CI automatic test script
    Speed up testing in docker (#379)
    Add a setup to run tests bundled with mongodb in a Docker container. (#369)
    Fix newsletter subscription when upgrading users to members via LDAP.
    
    When users are upgraded to members via LDAP, subscribe them to the newsletter.
    Newsletter settings of already imported members are not touched.
    
    Closes #400
    LDAP: prefer description over departmentNumber. (#399)
    
    In #398, we introduced parsing a (new) LDAP field description, which substitutes the old
    `departmentNumber` field for new students.
    
    We have however noticed that the `departmentNumber` field exists for (only a few) of the
    new students, however with uninformative input such as "Student".
    
    To ensure smooth operation, we should thus check the description field first, as it is the
    new official field with the information we need, and only fall back to the departmentnumber field
    if it is missing.
    Fix ldap membership detection (students >2019). (#398)
    Update documentation for user resource (#319)
    Bugfix: Missing `departmentNumber` in ldap should not crash the API (#262)
    
    I was just importing missing users from LDAP and had to discover that the
    ISG apparently is not that much into data validation, at least not when it
    comes to LDAP.
    
    A few (2, to be precise) users are missing the `departmentNumber` field
    we need to determine the department.
    
    In this case, the API should not crash but rather assume that the user
    has no department.
    LDAP v3 (#250)
    
    Until now, only the `ou` field form ldap was used to determine a students' department.
    
    As it turns out, departments are never deleted from this list, i.e. if a student switches from ITET to INFK, both departments will be in the list, not only the current department.
    
    We now use the `deparmentNumber` field to determine the department. It is a little bit more effort to parse, but at least we reliably know a students department now.
    Ldap improvements (#175)
    
    First of all, the structure of ldap.py is now simplified. The class is dropped
    and replaced by a few module level functions which are easier to understand.
    
    Next the functions themselves have been rearranged to be easier to test.
    Some premature optimization has been removed: The updating of all users
    now uses the same function as the one for one user only, since there were not
    really noticable performance differences. Again, this simplifies testing.
    
    Additionally repaired escape sequences. Either '\..' or r'\..' works, but r'\..' was to much ;)
    
    Speaking of testing: Using mock, all ldap functions are now tested.
    There still are some integration tests to verify everything actually works with the
    eth ldap.
    
    Finally a few changes in bootstrap, cli and sessions to use the new functions.
    
    After all I am quite happy with this version now. A few points are still up for improvement and I have added them to ldap.py, but over all the code is much simpler and better tested now, which is nice.
    Fixed import order to conform to the google style guide
    
    - Three groups: standard lib, external packages, internal imports
    - No relative imports
    - Sorted alphabetically and case insensitive in the groups
    Fixed rebase conflicts with a merge.
    ┻━┻︵ \(°□°)/ ︵ ┻━┻ FLAKE CORRECTIONS
    Updated nethz library and ldap to work with new version.
    Ldap tests and Connector completed.
    Small docstring fix for flake8
    LDAP overhaul.
    
    Changed a lot of the current implementation to make it look more like a flask extension and make it easiert to use.
    
    It is working together with the app now much better.
    This required changes in cron -> made everything on cron work together with the app instead of initializing its own db connection.
    
    Also ldap now handles importing users itself, adjusted authentication to use this. Its much clearer now, I hope.
    
    Adjusted bootstrap for the new changes and ldap tests.
    Made users a module
    
    models.py is now gone.
    
    Removed/Updated all references to it.
    Removed username, added email login
    
    Closes #80
    
    Instead of using the username for a session, it now uses the nethz.
    (which is will be it almost all cases anyways)
    
    Alternatively you can now login with email, but you have to explicitly
    state so by using a "email" field instead of "nethz" field in your post to
    sessions.
    
    Updated tests and docs.
    
    Also moved sessions test into auth test because they were doing the same.
    Added docstring to sync function
    Changed sync process because of ldap limitations
    
    Perfomance with eth ldap was very bad, so the entire structure of ldap
    requests has changed. Now all users are synched at once with ldap since it
    doesnt make sence (performance wise) to split it into small chunks.
    
    See docs and ldap.py for explanations
    filter improvements, manage.py tools for ldap
    
    Also more docs!
    So much ldap
    
    Everything. Collected everything related to ldap in ldap.py
    
    Also updated developer docs. Check there to see how everything works
    Fix ldap membership detection (students >2019). (#398)
    Allow proper caching with `If-Modified-Since`. (#395)
    
    There is a subtle difference between `no-store` and `no-cache`.
    
    `no-store`: Never return from cache, always request new. (Especially problematic for images, which are always re-loaded.) **This is what we currently have**.
    
    `no-cache`: Don't return from cache by default, but first re-validate with the server, in our case using the `If-Modified-Since` header, which browsers use automatically, as eve includes `Last-Modified` headers in all responses. **This is what we actually want.**
    
    Thus, with this small change, the api should cache in the way we want. Stale results from cache will never be returned without a request, and data is only transmitted if anything has changed.
    
    More info: https://www.keycdn.com/blog/http-cache-headers
    
    Note: Having both `no-cache` and `must-revalidate` doesn't actually do anything, as each on it's own would be enough for what we want, but for compatibility its probably best to keep both.
    
    Closes #389
    Update requirements and test setup. (#396)
    
    For some reason, the generic alpine image would not correctly update
    the repositories and would not find mongodb.
    
    With a fixed version, this issue does not occur anymore.
    
    Additionally, important changes due to version update:
    
    - Pytz: Dependency removed, as datetime
      can handle utc on its own.
    
    - Cerberus: `valueschema` renamed to `valuesrules`.
    
    - MongoDB: `insert` is replaced by `insert_one` and `insert_many`.
      As a consequence, ObjectIDs are retrieved
      a bit differently.
    
    - PassLib: `encrypt` renamed to `hash`.
      `vary_round` is deprecated, has it
      "provided little security and was not worth
      the additional complexity" [1].
    
    [1]: https://passlib.readthedocs.io/en/stable/history/1.7.html?highlight=vary_rounds#crypt-context-api-deprecations
    
    Closes #394 (new eve version fixes this bug)
    Adds email send functionality to blacklist (#378)
    
    Adds some functions that send out an email to a user everytime a new
    entry on the blacklist is created for him or one of his entries changed
    (patched). The emails include the reason for the blacklist entry and the
    price if it exists.
    Push Eve to 0.8.2 (dev branch for now). (#387)
    Increment version number after coding weekend. (#385)
    
    During the coding weekend, I forgot to enforce incrementing the version
    number in each pull request. However, for useful error reports in Sentry,
    the version number is important.
    
    This commit sets the API to a 'post-codingweekend' version.
    Improve mail function (#384)
    
    All API mails are sent from the same address, thus the `mail` util
    does not require a sender mail anymore, and instead always uses
    the API mail from the config.
    
    Additionally, the mail function now adds an configurable subject
    line, defaulting to "[AMIV] {subject}", to increase
    consistency and allow users to spot API mails quickly.
    Adds info on the registration end to acceptance email (#375)
    
    Closes #359
    change cents to rappen (#356)
    
    The description text with 'cents' is more confusing than helpful to users.
    Use correct ratio (portrait) for event posters, update docs. (#346)
    Media fix (#345)
    
    * Update file tests to always assert content, fix ratio validation
    Media validation exception (#344)
    
    * Add test to highlight the issue
    
    * Fix validator crashes
    
    I have noticed that Cerberus swallows exceptions.
    I modified the test framework to detect this.
    
    This showed two errors in our validators. One was a missing
    return statement, the other was more fundamental:
    
    Whenever a file validator would register an error, Cerberus
    would crash, as it internally saved the validated value
    and for some reason deepcopies it during the processing.
    File buffers couldn't be deepcopied, causing a crash.
    
    I have solved this by removed the reference to the validated
    value, as it is *never* used anyways.
    (I have no clue why it is in there in the first place)
    
    Closes #337
    Fix typo in settings.py (#339)
    Fix typo in events documentation (#336)
    
    * Fix typo in events documentation
    
    * Bump version number
    Increment version for new eventsignups validation (#334)
    
    I forgot to increment the version when implementing #333.
    
    As it is quite important for useful sentry reports etc. to have an accurate version number,
    I want to do this now :)
    Fix incorrect query parameter documentation (#332)
    
    * Fix incorrect query parameter documentation
    
    * Bump version number
    Relative URL for /api-docs (#329)
    
    * Make doc url relative to work with HTTPS
    
    * Style fixes
    
    * Bump version
    Fix domain initialization (#328)
    
    * Fix domain initialization
    
    * Fix media test setup and style
    
    * Thats why we have reviews
    Fix API installation in Dockerfile (#327)
    
    * Fix dockerfile API install
    
    * bump version
    
    * Improve dockerfile comments
    Update settings, in particular version number, and serve logo from static files
    
    Furthermore, I now ensured that the setup always uses the correct version
    number.
    
    This required me to remove the 'hack' to always install the current folder
    from `requirements.txt`. This was quite unusual anyways.
    
    As a result tox etc. needed to be adjusted.
    
    Additionally, the logo used for OAuth and (soon) docs is now served consistently from a static endpoint.
    Fix schema validation (#311)
    
    * Fix schema validation
    
    Cerberus is too dumb for the current `2 * tuple()` format, so I fixed it^^
    
    * Update validation.py
    
    * Update settings.py
    
    * Actually fix error, improve handling of integer ratios
    
    * Pick simpler tolerance
    
    * Increment version
    
    * Make test clearer
    Only send mail when mail server is configured (#309)
    
    * Only send mail when mail server is configured
    
    * Increment version
    Improve hooks, ensure private user fields are always hidden
    
    User fields like the password hash were visible after PATCH.
    
    The solution to this issue was to use a more general hook that can run after all requests in addition the the database hook.
    
    For this hook, a bit of parsing utilities were added, which turned out to be useful in other locations, too.
    
    Fixes #216
    Add validation for event description and image aspect ratio
    
    Resolves #96
    Resolves #127
    Add newsletter subscriber export endpoint
    
    Resolves #242
    Add support for monitoring with Sentry
    
    Resolves #264
    Configure Eve to not merge nested documents (#295)
    
    In it's default configuration, Eve merges nested documents on PATCH,
    and therefore using PATCH, it is impossible to delete keys from nested
    documents, e.g. it is not possible to remove single permissions from groups.
    
    We patched Eve to allow turning this feature off.
    
    With the switch to Eve 0.8, this feature is included in Eve and
    so this patch can turn off merging of nested documents.
    
    To make sure it's working, a test is added.
    
    Resolves #267.
    Add periodic execution of scheduled tasks
    
    Along with this, `cli.py` is a overhauled a bit: It can now also run the production server, no additional script is required.
    
    The Docker Image is adjusted so it's easy to use it for periodic tasks, too.
    
    And the README is updated to explain how to do this as well.
    
    Resolves #275
    Update Eve to version 0.8
    
    * Update to Eve 0.8
    
    Eve 0.8 brings Cerberus 1.0, which requires lots of changes:
    - Several properties have been renamed
    - type checking is now handled differently
    - validation rules require a schema in the docstring to validate the schema
      itself
    
    Additional Changes in Eve itself:
    - A PATCH on a document which misses a field having a default value will now
      result in setting this value, even if the field was not provided in the
      PATCH’s payload. (From Eve changelog)
    - Some error messages changed.
    Fix: Regex for localhost oauth (#263)
    Add Oauth2 login, remove python2
    
    This commit mainly implements shiny new OAuth2 functionality to the API,
    in form of a central login page which can be used for *Implicit Grants*.
    
    Documentation for this new feature included.
    
    Along this we decided to drop python 2 support to simplify the new
    feature. This lead to cleaning up other parts of the code as well.
    
    Finally, Travis and tox were adjusted to drop python2 as well.
    LDAP v3 (#250)
    
    Until now, only the `ou` field form ldap was used to determine a students' department.
    
    As it turns out, departments are never deleted from this list, i.e. if a student switches from ITET to INFK, both departments will be in the list, not only the current department.
    
    We now use the `deparmentNumber` field to determine the department. It is a little bit more effort to parse, but at least we reliably know a students department now.
    Remove PUT for good
    
    #109 is already marked as solved, but this `PUT` remained in the settings.
    
    In short: We decided not to support PUT. Now its really gone.
    Improve Docker README, reset settings. (#247)
    Dockerfile: uwsgi w/o preforking, Readme: Docker instructions (#246)
    
    The pymongo driver does not like preforking, which is used by uwsgi.
    The uwsgi command is now adjusted to avoid preforking.
    
    Additionally, the README now explains how to use the docker container.
    (Also the default settings are updated to make deployment easier)
    Create mailing list files remotely via ssh. (#243)
    
    Until now, mailing list files are created locally.
    For the mailing lists to actually work, they need to be copied to a remote
    server.
    
    This copying is now included in AMIVAPI, which has two main benefits:
    
    - No local files are required anymore, useful for future deployment with docker
    - No external copying tool is required to make mailing lists work with amivapi
    
    Unfortunately, the mailing list server supports *only* ssh connections,
    therefore we have no other option to transfer the files.
    
    While I do not think this is a very *good* solution, I believe its the *best*
    approach we have available.
    
    Closes #239.
    Allow zero-config api usage
    
    By now, all configuration for API has useful default values or can handle
    if values are unset (e.g. LDAP is deactivated if unconfigured)
    
    Therefore it is not necessary to create a config before running the API.
    `bootstrap.py` is changed a little to allow creating an app without config,
    which is especially useful for tests and quick development servers.
    Additionally, the configuration can now specified by environment vars, which
    will be useful when working with Docker, which is planned for the near future.
    
    All missing default values which were used by the CLI are moved into
    `settings.py`.
    
    The `create_config` command of the CLI is removed. In most cases, it is easier
    to copy and modify an existing config.
    
    The README is updated and now includes instructions on how to create a config
    file (including config template for copypasting)
    Improve mailing list config handling and cli. (#231)
    Allow all Eve-supported headers in cross domain requests
    
    resolves #214
    Use SSL to send mails (#207)
    
    * Use SSL to send mails
    
    * Added SMTP port & login
    
    * SMTP: send ehlo if login not required and use 587 as default port
    Media: Remove custom filestorage class to store files in db for simplicity. (#202)
    Add a timeout for connections to an SMTP server (#201)
    Enable regex queries
    Reduce security (#188)
    
    * Remove trailing = in tokens.
    
    They are unsafe in URLs and add no randomness
    
    * Reduce password hashing iterations to 1000
    Removed apikeys from CLI and cleaned up settings.
    Added accepted field to signups with FCFS and manual selection strategies
    
    Also send emails, when people get promoted from the waiting list
    Fixed missing comma in dictionary
    Removed redundant settings
    Cosmetic improvements to swagger
    Added VERSION constant
    hide auth hooks in swagger
    add swagger as endpoint documentation
    Updated studydoc metadata. Closes #136
    Added forward directory creation
    Added apikeys to auth
    Switched to eve fork
    
    The fork has support for POST to a list of files
    Completed FileSystemStorage in media and tested it.
    Updated media.py, not completed yet
    Added new command line interface using Click
    
    It is much less code than before.
    All function to run the code currently updated to work with mongo will
    work with the new config.
    But some functions from the old config creation are not yet ported (e.g.
    API keys), so the files are not deleted yet.
    Added option not to redirect in confirm mails.
    Changed configuration handling slightly
    
    - As recommended by the flask docs about factory functions, `create_app`
    now takes the config file as an argument.
    - Since only bootstrap takes care of the config import, `get_config` was
    removed from utils
    - Cleaned up settings.py and removed some no longer needed stuff
    Rewrote event resource
    Moved email regex to settings.py
    Removed the root user from the database.
    
    Like the anonymous user (already gone) it was needed mostly for database
    relations in sql.
    We don't really need this anymore.
    
    Therefore I removed the root user from the database. To act as root you
    don't need a session anymore, you can just send the root password as
    token. The root user is not kind of a glorified api key.
    
    This has the following advantages:
    - We don't need to initialise the db anymore
    - The users collection only contains actual people now
    
    This means the tests don't need to create the root user and generally
    the initdb function in mongo_manage is gone.
    Moved default root password to settings.py
    First version of new authentication, testing not yet complete
    
    Quite thorough tests of all authentication features
    
    Added other functionality: add to each link a 'methods' field containing
    the allowed methods.
    This is not tested completely yet.
    
    Auth integration and sessions not tested yet.
    Made root ID a setting
    
    To not repeat it everywhere
    Flake8 fixes and minor changes to utils and settings
    
    In settings uncommented the ID_FIELD option since it was causing trouble
    in utils used itertools counter
    Added Content-Type to allowed CORS headers
    
    Content-Type is used by files
    Some additional model descriptions
    Flake8 fixes in various files
    
    Closes #101
    Finished group permissions, added tests
    
    Removed all old permission tests and cron utilities.
    models/User: add password validation / transparent password hashing
    Added CORS headers to allow API usage from everywhere
    So much ldap
    
    Everything. Collected everything related to ldap in ldap.py
    
    Also updated developer docs. Check there to see how everything works
    New group/forward system
    
    Forwards are now managed in the following way:
    
    - Users can be added to groups
    - Groups can have any number of mail addresses forwarded to
    - Anonymous addresses can be added to groups
    - Anonymous addresses can be added to public groups using email
      confirmation
    - Group owners can add users or addresses to their groups
    Shortened license header to important info
    Added AGPL license, content encoding, updated setup.py
    bug fix in permissions
    Fixes for previous commits
    
    - Forgot to remove environment in tests.util.teardown
    - Wrong string concatenation
    - More code style improvement
    merge settings
    Authorization fixes
    
    - Fix for disabled authentification
    - Custom endpoints use common_authorization
    - Create no tables for classes belonging to custom endpoints
    Extended documentation, style fixes
    
    - many docstrings include params and return value now
    - """ only for docstrings
    - no \ line continuation
    intriducing a new confirmation system
    still not working 100%
    Cron sends emails about expiring permissions
    Added cron feature to clean db
    
    +Test
    +Doc
    Refactoring
    
    - load_schema() -> get_schema() for same naming scheme as get_config
    - event_hooks.py which is no meaningful name split to
      authentification.py, authorization.py, validation.py, confirms.py
    - move file_endpoint.py into media.py
    - moved permission_matrix into settings.py, because thats what it is
    Localization added
    
    Added the possibily to translate title and description in /events and
    /joboffers
    
    For this reason added classes to models, modified schema where the model
    was insufficient and added a default language to settings
    (And a few hooks in localization which are added to bootstrap)
    
    Also added tests for all new functions in test_localization
    Modified test_permission_matrix because to work with the new layout of
    joboffers (it provided a title which now has to be posted to translations,
    so now it just sends a company name to post a offer)
    
    Also added both user and developer documentation, find more info ther
    Also added both user and developer documentation, find more info theree
    Moved file directory to create_config
    
    Removed the line which specified the file storage folder in settings.py
    Added a promt to manage.py create_config which asks for a directory and
    creates it
    
    (It does not check if the given name is valid)
    Revert "Change DATE_FORMAT to be equivalent to datetime.isoformat()"
    
    This reverts commit 2085cf0c103df44c500bae9bccdc2ce16cd8710f.
    
    See discussion of the original commit https://github.com/amiv-eth/amivapi/commit/2085cf0c103df44c500bae9bccdc2ce16cd8710f
    Email fields are now validated by regex
    
    This is only against accidential errors. Therefore we dont need a complex regex.
    We could even do less for validation. If you want a bigger regex read:
    http://davidcel.is/blog/2012/09/06/stop-validating-email-addresses-with-regex/
    Change DATE_FORMAT to be equivalent to datetime.isoformat()
    Create config now creates the file folder
    Additional settings for the app config and
    modified bootstrap to utilize everything new
    Create config now creates the file folder
    Additional settings for the app config and
    modified bootstrap to utilize everything new
    Deactivated global authentification. This is necessary to make it possible to use GET on /. All resources have this overwritten automatically anyway.
    Added _author field
    Login tokens are hashed now, Only sessions resource public
    Refactor bootstrapping and configuration for reusability
    
    The app instance is now created with a function, which allows to create multiple apps for different environments (e.g., testing).
    
    Configuration is now done in two steps (previously: amivapi.config module): First, amivapi.settings is consulted for default settings which are applied in all environments, which is then extended by environment-specific config files from the ROOT/config directory. Creating of the latter can be done by executing `python manage.py create_config` and following the instructions.
    Fix domain initialization (#328)
    
    * Fix domain initialization
    
    * Fix media test setup and style
    
    * Thats why we have reviews
    Replace ModuleNotFoundError with ImportError for compatibility (#302)
    Add periodic execution of scheduled tasks
    
    Along with this, `cli.py` is a overhauled a bit: It can now also run the production server, no additional script is required.
    
    The Docker Image is adjusted so it's easy to use it for periodic tasks, too.
    
    And the README is updated to explain how to do this as well.
    
    Resolves #275
    LDAP v3 (#250)
    
    Until now, only the `ou` field form ldap was used to determine a students' department.
    
    As it turns out, departments are never deleted from this list, i.e. if a student switches from ITET to INFK, both departments will be in the list, not only the current department.
    
    We now use the `deparmentNumber` field to determine the department. It is a little bit more effort to parse, but at least we reliably know a students department now.
    Fix CLI typo (#248)
    Create mailing list files remotely via ssh. (#243)
    
    Until now, mailing list files are created locally.
    For the mailing lists to actually work, they need to be copied to a remote
    server.
    
    This copying is now included in AMIVAPI, which has two main benefits:
    
    - No local files are required anymore, useful for future deployment with docker
    - No external copying tool is required to make mailing lists work with amivapi
    
    Unfortunately, the mailing list server supports *only* ssh connections,
    therefore we have no other option to transfer the files.
    
    While I do not think this is a very *good* solution, I believe its the *best*
    approach we have available.
    
    Closes #239.
    Allow zero-config api usage
    
    By now, all configuration for API has useful default values or can handle
    if values are unset (e.g. LDAP is deactivated if unconfigured)
    
    Therefore it is not necessary to create a config before running the API.
    `bootstrap.py` is changed a little to allow creating an app without config,
    which is especially useful for tests and quick development servers.
    Additionally, the configuration can now specified by environment vars, which
    will be useful when working with Docker, which is planned for the near future.
    
    All missing default values which were used by the CLI are moved into
    `settings.py`.
    
    The `create_config` command of the CLI is removed. In most cases, it is easier
    to copy and modify an existing config.
    
    The README is updated and now includes instructions on how to create a config
    file (including config template for copypasting)
    Improve mailing list config handling and cli. (#231)
    Move secret key from config to database. (#224)
    
    Move secret key from config to database.
    Use SSL to send mails (#207)
    
    * Use SSL to send mails
    
    * Added SMTP port & login
    
    * SMTP: send ehlo if login not required and use 587 as default port
    Media: Remove custom filestorage class to store files in db for simplicity. (#202)
    Ldap improvements (#175)
    
    First of all, the structure of ldap.py is now simplified. The class is dropped
    and replaced by a few module level functions which are easier to understand.
    
    Next the functions themselves have been rearranged to be easier to test.
    Some premature optimization has been removed: The updating of all users
    now uses the same function as the one for one user only, since there were not
    really noticable performance differences. Again, this simplifies testing.
    
    Additionally repaired escape sequences. Either '\..' or r'\..' works, but r'\..' was to much ;)
    
    Speaking of testing: Using mock, all ldap functions are now tested.
    There still are some integration tests to verify everything actually works with the
    eth ldap.
    
    Finally a few changes in bootstrap, cli and sessions to use the new functions.
    
    After all I am quite happy with this version now. A few points are still up for improvement and I have added them to ldap.py, but over all the code is much simpler and better tested now, which is nice.
    Changed names of variables which overwrote python builtins
    Fixed import order to conform to the google style guide
    
    - Three groups: standard lib, external packages, internal imports
    - No relative imports
    - Sorted alphabetically and case insensitive in the groups
    Removed apikeys from CLI and cleaned up settings.
    ┻━┻︵ \(°□°)/ ︵ ┻━┻ FLAKE CORRECTIONS
    Added option to create_config to just use default values without promption (For easier travis setup)
    Added root password to create config options
    Added ldao cli
    Updated apikey cli to use click more
    
    - Put all apikey commands in a group for better separation and to share
    some setup code.
    
    - Used options instead of prompts to get better help messages and make
      command usage shorter and get nicer feedback on wrong input
    
    - Use app object to load apikeys so we don't need that code explicitly
    
    - auto-safe apikeys at command end
    
    - Safe apikey by name with token as value (instead of key=token and name
      in values) to make key file more easily readable and tokens easier
      exchangeable
    Added forward directory creation
    Added cron module
    Added options to manipulate apikeys to cli.py
    Multithreaded development server
    Updated media.py, not completed yet
    Removed SERVER_NAME, as it will be set automatically when using wsgi
    Removed useless reference to python interpreter in cli.py
    Added extra help and better prompts to cli.
    Added new command line interface using Click
    
    It is much less code than before.
    All function to run the code currently updated to work with mongo will
    work with the new config.
    But some functions from the old config creation are not yet ported (e.g.
    API keys), so the files are not deleted yet.
    Add periodic execution of scheduled tasks
    
    Along with this, `cli.py` is a overhauled a bit: It can now also run the production server, no additional script is required.
    
    The Docker Image is adjusted so it's easy to use it for periodic tasks, too.
    
    And the README is updated to explain how to do this as well.
    
    Resolves #275
    Update Eve to version 0.8
    
    * Update to Eve 0.8
    
    Eve 0.8 brings Cerberus 1.0, which requires lots of changes:
    - Several properties have been renamed
    - type checking is now handled differently
    - validation rules require a schema in the docstring to validate the schema
      itself
    
    Additional Changes in Eve itself:
    - A PATCH on a document which misses a field having a default value will now
      result in setting this value, even if the field was not provided in the
      PATCH’s payload. (From Eve changelog)
    - Some error messages changed.
    Add Function to update the scheduling of a task (#204)
    
    Added method to update scheduling of a task. Time of execution and args can be changed.
    Fixed flake8 errors
    ┻━┻︵ \(°□°)/ ︵ ┻━┻ FLAKE CORRECTIONS
    Removed unneeded print from cron.py
    Fixed race condition in cron scheduler
    Added cron module
    LDAP overhaul.
    
    Changed a lot of the current implementation to make it look more like a flask extension and make it easiert to use.
    
    It is working together with the app now much better.
    This required changes in cron -> made everything on cron work together with the app instead of initializing its own db connection.
    
    Also ldap now handles importing users itself, adjusted authentication to use this. Its much clearer now, I hope.
    
    Adjusted bootstrap for the new changes and ldap tests.
    Moved Session model and schema to auth module
    
    adjusted all files that needed Session model
    Flake8 fixes in various files
    
    Closes #101
    Finished group permissions, added tests
    
    Removed all old permission tests and cron utilities.
    Use UTC datetime's everywhere
    
    datetime.now() returns (server-)local time, but we store UTC in the database.
    Changed sync process because of ldap limitations
    
    Perfomance with eth ldap was very bad, so the entire structure of ldap
    requests has changed. Now all users are synched at once with ldap since it
    doesnt make sence (performance wise) to split it into small chunks.
    
    See docs and ldap.py for explanations
    So much ldap
    
    Everything. Collected everything related to ldap in ldap.py
    
    Also updated developer docs. Check there to see how everything works
    More LDAP: Sync, tests
    
    Added a _synchronized field to users that specifies last ldap sync.
    
    Also made a cronjob that updates bassed on those fields.
    
    Included tests.
    Shortened license header to important info
    Added AGPL license, content encoding, updated setup.py
    Send mail via function in utils.py
    Fixes for previous commits
    
    - Forgot to remove environment in tests.util.teardown
    - Wrong string concatenation
    - More code style improvement
    Made cron.py executable, removed run_cron from manage.py
    Coding style fixes
    
    See #62
    Extended documentation, style fixes
    
    - many docstrings include params and return value now
    - """ only for docstrings
    - no \ line continuation
    Cron sends emails about expiring permissions
    Added cron feature to clean db
    
    +Test
    +Doc
    Fixed import order to conform to the google style guide
    
    - Three groups: standard lib, external packages, internal imports
    - No relative imports
    - Sorted alphabetically and case insensitive in the groups
    Updated groups to new funcitonality, small validation functions still missing
    Cascading deletes are now performed as admins.
    Added init_app to cascade so that you can see in the file how the hooks are added.
    Fixed typo: Setting for cascade delete was called 'cacade_delete'
    Added option to delete an object, when a related object is deleted
    
    This can be used to automatically remove all sessions if a user is
    deleted or signups if an event is deleted.
    Added new command line interface using Click
    
    It is much less code than before.
    All function to run the code currently updated to work with mongo will
    work with the new config.
    But some functions from the old config creation are not yet ported (e.g.
    API keys), so the files are not deleted yet.
    First working example built with Eve's sqlalchemy branch
    
    Relations between the models are not yet correctly set up, the Eve
    schema is not yet optimal (should contain some more restrictions),
    and responses currently don't include fields which are "null".
    Delete beverage resource.
    
    Closes #383
    Add blacklist (#365)
    
    Add new resource blacklist and an event-signup validator to check if a user
    is on the blacklist. People can be on the blacklist for multiple
    separate reasons, therefore blacklist is a new resource and not a single
    field in the user resource.
    Fix domain initialization (#328)
    
    * Fix domain initialization
    
    * Fix media test setup and style
    
    * Thats why we have reviews
    Update settings, in particular version number, and serve logo from static files
    
    Furthermore, I now ensured that the setup always uses the correct version
    number.
    
    This required me to remove the 'hack' to always install the current folder
    from `requirements.txt`. This was quite unusual anyways.
    
    As a result tox etc. needed to be adjusted.
    
    Additionally, the logo used for OAuth and (soon) docs is now served consistently from a static endpoint.
    Add support for monitoring with Sentry
    
    Resolves #264
    LDAP v3 (#250)
    
    Until now, only the `ou` field form ldap was used to determine a students' department.
    
    As it turns out, departments are never deleted from this list, i.e. if a student switches from ITET to INFK, both departments will be in the list, not only the current department.
    
    We now use the `deparmentNumber` field to determine the department. It is a little bit more effort to parse, but at least we reliably know a students department now.
    Allow zero-config api usage
    
    By now, all configuration for API has useful default values or can handle
    if values are unset (e.g. LDAP is deactivated if unconfigured)
    
    Therefore it is not necessary to create a config before running the API.
    `bootstrap.py` is changed a little to allow creating an app without config,
    which is especially useful for tests and quick development servers.
    Additionally, the configuration can now specified by environment vars, which
    will be useful when working with Docker, which is planned for the near future.
    
    All missing default values which were used by the CLI are moved into
    `settings.py`.
    
    The `create_config` command of the CLI is removed. In most cases, it is easier
    to copy and modify an existing config.
    
    The README is updated and now includes instructions on how to create a config
    file (including config template for copypasting)
    Main validator in separate file
    Media: Remove custom filestorage class to store files in db for simplicity. (#202)
    Run hooks on embedded documents (#199)
    Ldap improvements (#175)
    
    First of all, the structure of ldap.py is now simplified. The class is dropped
    and replaced by a few module level functions which are easier to understand.
    
    Next the functions themselves have been rearranged to be easier to test.
    Some premature optimization has been removed: The updating of all users
    now uses the same function as the one for one user only, since there were not
    really noticable performance differences. Again, this simplifies testing.
    
    Additionally repaired escape sequences. Either '\..' or r'\..' works, but r'\..' was to much ;)
    
    Speaking of testing: Using mock, all ldap functions are now tested.
    There still are some integration tests to verify everything actually works with the
    eth ldap.
    
    Finally a few changes in bootstrap, cli and sessions to use the new functions.
    
    After all I am quite happy with this version now. A few points are still up for improvement and I have added them to ldap.py, but over all the code is much simpler and better tested now, which is nice.
    Fixed import order to conform to the google style guide
    
    - Three groups: standard lib, external packages, internal imports
    - No relative imports
    - Sorted alphabetically and case insensitive in the groups
    Fixed wrong import
    Renamed purchases to beverages
    Removed flask bootstrap, not needed anymore
    remove eve-docs
    add swagger as endpoint documentation
    Fixed rebase conflicts with a merge.
    Reactivated docs
    Updated groups to new funcitonality, small validation functions still missing
    Added cron module
    Work on studydocs. files field disabled for now
    
    list of files are not supported by eve at the moment. Will be reactivated, when fixed.
    Temp save to local changes; JobOffers tests on the way
    Removed unneeded comment.
    Added init_app to cascade so that you can see in the file how the hooks are added.
    Completed FileSystemStorage in media and tested it.
    Added new command line interface using Click
    
    It is much less code than before.
    All function to run the code currently updated to work with mongo will
    work with the new config.
    But some functions from the old config creation are not yet ported (e.g.
    API keys), so the files are not deleted yet.
    Changed configuration handling slightly
    
    - As recommended by the flask docs about factory functions, `create_app`
    now takes the config file as an argument.
    - Since only bootstrap takes care of the config import, `get_config` was
    removed from utils
    - Cleaned up settings.py and removed some no longer needed stuff
    Rewrote event resource
    Added option to delete an object, when a related object is deleted
    
    This can be used to automatically remove all sessions if a user is
    deleted or signups if an event is deleted.
    Deactivated studydocs, as the resource is unfinished and interfering with tests
    Rewrote purchases resource with mongo, added tests
    
    This changes the public interface of /purchases in not compatible ways.
    Removed option to disable auth globally
    
    Reasoning:
    - In use, the API doesn't work without auth since everything revolves
      about which user can do what
    - Disabled auth only used in testing
    - Several functions (e.g. validators etc) would need to check if auth is
      enabled
    - The problem can be solved nicer (see below)
    
    Solution:
    - Removed the disable_auth option
    - Use the new auth hook (intended to provide groups and apikeys the
      option to extend auth) to always authenticate as root
    
    This way we do not need to provide exceptions for disabled auth, since
    the WebTestNoAuth just acts as root all the time.
    Cleaned up bootstrap.py
    
    Removed lots of SQL related things
    Preparation for new auth: Remove last connections of old one
    
    There was still a user hook in auth. Moved to user module
    Flake8 fixes and minor changes to utils and settings
    
    In settings uncommented the ID_FIELD option since it was causing trouble
    in utils used itertools counter
    Disabelign everything that is not working with mongo right now
    
    python run.py is now able to start up an api with only module studydocuments
    LDAP overhaul.
    
    Changed a lot of the current implementation to make it look more like a flask extension and make it easiert to use.
    
    It is working together with the app now much better.
    This required changes in cron -> made everything on cron work together with the app instead of initializing its own db connection.
    
    Also ldap now handles importing users itself, adjusted authentication to use this. Its much clearer now, I hope.
    
    Adjusted bootstrap for the new changes and ldap tests.
    Moved storage schema defition to media, deleted schemas.py.
    
    Everything is modular now. Yay!
    Made users a module
    
    models.py is now gone.
    
    Removed/Updated all references to it.
    Made studydocs a module
    Made Purchases a module
    
    Note: There appear to be no tests
    Made Joboffers a module
    Put auth into own module too
    
    Also adjusted imports in other files to make everything work again.
    Moved little shared part of validator to utils.py
    
    Not completely sure if this is the best decision, but it felt like the shared validation fit well into utils.
    Moved file storage related validation into media.py
    
    Also made media.py more like a flask extension by adding an init_app function which registers the blueprint and validator.
    All group related functionality is now in groups.py
    
    This includes model, schema, validation as well as group_permission and mailinlist hooks.
    
    All other files have been adjusted to import correctly.
    Made events.py the first api module.
    
    Moved everything from models and schemas regarding events (and eventsignups) to confirm.py and renamed this to events.py
    
    Added new utility functions to safely extend domain and validator.
    Had to modify auth a little to work together with new structure - owner/registered_methods/public_methods etc are now stored in the domain aswell.
    
    Needed to move declaration of storage to schemas.py because of this (since the info does not need to be in the model anymore, but in the domain)
    Group schema is now generated on demand.
    
    Until now the group permission schema was generated at app creation.
    
    This makes it a bit difficult to modularize the app since you have to
    be very careful when to call it. Now its just generated when necessary which solves this problem.
    
    Since its not very performance hungry this should be no big problem.
    Turned login endpoint into hooks for Eve.
    
    We do not need a custom /sessions endpoint anymore.
    This will now be handled by eve and the login is just a hook.
    Moved user hooks to validation for flexibility
    
    Cleaned up related code.
    
    Also moved the related tests to user tests.
    
    Changed ldap part in authentication to take advantage of the new
    functionality
    Added missing functionality to mailinglists
    
    See tests in the previous commit.
    
    Now all hooks work as the new group functionality intends.
    
    Also gave hooks more descriptive names.
    Adjusted tests, corrected errors.
    Renamed everything correctly
    
    Used new resource names in all files
    Code cleanup and tests
    
    Removed several parts of code not needed anymore
    
    wrote tests to cover more functionality
    
    Added new validation rules
    Finished work on removing "will_be_owner"
    
    Added lots of test for groups and signup to test all functionality
    
    Added new validation to cover the functionality from "will be owner"
    
    Cleaned up schemas and added validation
    
    Added a new group hook in authorization to properly filter groups.
    
    Updated the hooks in bootstrap.
    WIP
    
    Actually just commiting so I can change pcs
    Flake8 fixes in various files
    
    Closes #101
    Dropping the database clears foreign keys first
    
    Dropping tables failed due to remaining dependencies and required
    manual action. Now the database can be recreated without droping it first
    Finished group permissions, added tests
    
    Removed all old permission tests and cron utilities.
    Tie permissions to groups, not yet working
    
    Every group now saves a permissions object wich is validated against a jsonschema
    
    tests still missing
    bootstrap: use the dialect to determine if we're running on MySQL or not
    
    A small test case has been added to prevent further bugs.
    Fix for 6bdd2a81234e05f52e9f6e2322060581c981c2b6
    
    The database url is not necessarily mysql but can also contain
    the driver
    Style: rename "authentification" to "authentication"
    models/User: add password validation / transparent password hashing
    bootstrap: tell MySQL not to treat the value 0 as NULL
    Use correct Column type for text fields
    
    It is UnicodeText instead of TEXT
    
    Removed localization import from bootstrap (file does not exist anymore)
    Removed translatable fields in events and joboffers
    
    Our functionalitz was nice an all but actually a little overkill which led to confusion when using the api.
    
    And we dont have any situation where any other language than german and english.
    
    Our solution would be for a usecase with many different languages.
    
    So now we have a simplified solution which only includes german and english fields.
    
    Also added a "catchphrase" field for events.
    Removed username, added email login
    
    Closes #80
    
    Instead of using the username for a session, it now uses the nethz.
    (which is will be it almost all cases anyways)
    
    Alternatively you can now login with email, but you have to explicitly
    state so by using a "email" field instead of "nethz" field in your post to
    sessions.
    
    Updated tests and docs.
    
    Also moved sessions test into auth test because they were doing the same.
    Manage.py, next take
    
    This time properly tested locally. Should really really work now ;)
    So much ldap
    
    Everything. Collected everything related to ldap in ldap.py
    
    Also updated developer docs. Check there to see how everything works
    New group/forward system
    
    Forwards are now managed in the following way:
    
    - Users can be added to groups
    - Groups can have any number of mail addresses forwarded to
    - Anonymous addresses can be added to groups
    - Anonymous addresses can be added to public groups using email
      confirmation
    - Group owners can add users or addresses to their groups
    LDAP updates and testing and docs
    
    In bootstrap modified ldap setup,
    extended manage.py to create necessary fields
    authentication is now complete and imports and updates user.
    
    Because everyone gets imported, there must be a setting "other" in
    department. Updated model accordingly
    
    Also added nethz library fork to requirements
    API can into LDAP
    
    Creating a session now successfully queries LDAP to login with nethz
    
    This does not work without the proper info set in config file.
    manage.py does not add those lines yet.
    
    No user data is copied so far, just given root access
    Shortened license header to important info
    Added AGPL license, content encoding, updated setup.py
    Validator: Eventsignups
    
    All custom checks for eventsignups are not part of the validator
    
    Removed item method patch for forwardusers because thats not needed
    (was already removed for forwardaddresses, now correctly removed for both)
    
    Some tests were implemented for patch, removed them.
    
    One hook in validation.py converning eventsignups was covering
    authorization. Moved it to authorization.py and updated bootstrap.
    
    Also updated schema to include new validation.
    
    (and  fixed a typo in settings)
    Added hooks for iternal _email_unreg and _token
    
    Added hooks that move content from _email to _email unreg before
    and the other way around after db access
    
    Added hooks to remove _token from response after db acces
    
    Added hooks that move content from _email to _email unreg before
    and the other way around after db access
    
    Added hooks to remove _token from response after db accesss
    More Validator
    
    Moved more validation into validator and added tests
    Modified schema
    
    Renamed 'extra_fields' in signups to 'additional_fields' for consistency
    (Modified in models, schema and renamed once in confirm)
    
    Removed test_hooks and moved content to test_eventsignups
    More Validator
    
    Moved more validation into validator and added tests
    Modified schema
    
    Renamed 'extra_fields' in signups to 'additional_fields' for consistency
    (Modified in models, schema and renamed once in confirm)
    
    Removed test_hooks and moved content to test_eventsignups
    Fix for where mysql/sqlite throw different exceptions
    Removed environments
    
    As tests are independent now and it is unlikely to have a development
    and production server in the same folder environments are not needed
    anymore
    Tests create their own environment(db, folders)
    
    One can specify using manage.py to use the configured MySQL server, but
    a random database will be created there.
    Fixes for authorization
    
    - Run authorization hooks as first hooks
    - Set eve's PUBLIC_ITEM_METHOD config
    Moved init_database to bootstrap to improve dependencies
    Authorization fixes
    
    - Fix for disabled authentification
    - Custom endpoints use common_authorization
    - Create no tables for classes belonging to custom endpoints
    Extended documentation, style fixes
    
    - many docstrings include params and return value now
    - """ only for docstrings
    - no \ line continuation
    intriducing a new confirmation system
    still not working 100%
    manage.py doesn't use eve object anymore, uses get_config and sqlalchemy directly
    
    some work done for apikeys
    Make all accesses to config use eve's config object
    
    Reasons:
    - consistency with eve
    - better readability
    - defaults if app is not loaded
    Refactoring
    
    - load_schema() -> get_schema() for same naming scheme as get_config
    - event_hooks.py which is no meaningful name split to
      authentification.py, authorization.py, validation.py, confirms.py
    - move file_endpoint.py into media.py
    - moved permission_matrix into settings.py, because thats what it is
    Fix for merge 2955675f877563fa6cb69a4642ec26f19f714f16
    Refactoring of authentification, fix that g.logged_in_user is always set
    Flake8 fixes (again)
    
    Make the machine happy
    File and studydoc testting
    
    Testing for files and studydocs
    
    removed hook from media to delete files, this is now done be relationships
    removed same hook from bootstrap
    first commit for new confirmation system:
    
    small language fixes in models and event_hooks
    less hooks, smaller bootstrap
    Localization added
    
    Added the possibily to translate title and description in /events and
    /joboffers
    
    For this reason added classes to models, modified schema where the model
    was insufficient and added a default language to settings
    (And a few hooks in localization which are added to bootstrap)
    
    Also added tests for all new functions in test_localization
    Modified test_permission_matrix because to work with the new layout of
    joboffers (it provided a title which now has to be posted to translations,
    so now it just sends a company name to post a offer)
    
    Also added both user and developer documentation, find more info ther
    Also added both user and developer documentation, find more info theree
    Url to files in bootstrap.py now from config
    
    bootstrap.py had a generic URL-prefix '/storage' for files
    Modified this so it will use the URL as specified in
    config 'STORAGE_URL' instead§
    Finished forward backend
    Update to Eve 0.5.1 + Eve SQLAlchemy fork
    
    Eve 0.5 moved SQLAlchemy support to a different package. We follow the
    official eve repository now and use a fork of the extension. Changes are
    only imports except for authentification.
    
    The big change introduced by this is that the lookup query parameter now
    only understands python syntax, but has support for embedding with it.
    
    The fork introduces that values returned by Eve are now dict and
    the SQLAResult class is removed of Eve-Sqlalchemy for now to resolve
    problems with hooks, json and possibly other unexspected behaviour.
    
    See issue #11 in eve-sqlalchemy
    https://github.com/RedTurtle/eve-sqlalchemy/issues/11
    Added support for PUT to hooks
    
    event_hooks.py, utils.py  and bootstrap.py got a lot more comments
    removed the delete-hooks because they are crap.
    Working on Solution with natural SQLAlchemy resources.
    Removed confirm hooks for POST, PATCH forwardaddresses, added for DELETE
    
    Anonymous users should only be added by list owners, however they can
    remove themselves.
    Backend for mail forwards
    User password hashes are never exposed
    
    Also changed user collection test accordingly and made test for hidden
    passwords better.
    New simpler token generation
    
    Tokens are now random bytes instead of signed information.
    It is very unlikely anybody would have ever used the signed information.
    Furthermore the information can not reflect changes(logout) at the
    server, so any client would have had to connect to the server and check
    the token with the API anyway. Changing to random tokens decreases code
    complexity.
    Users can now only change fields they are supposed to
    
    Also corrected the tests for that
    Custom file endpoint: Added test and varia
    
    Renamed the file from download to file_endpoint to make the purpose
    clearer.
    Modified bootstrap to work with the new filename.
    Added authentification test for the file endpoint.
    Added a function 'new_file' in the test/util that allows creating a file
    entry in the database (and creates a file in the storage folder as well)
    Hook for delete studydocs
    
    Created a hook in media.py that checks all files belonging to a studydoc
    and deletes them.
    Added the hook in bootstrap.py
    
    Not sure if media is the best place for the code of the hook, still
    considering moving it
    Flake8 fix
    Auth: Implemented permissions for PATCH
    
    Also bugfixes for password hashing when patching users
    Added hooks to cleanup orphan relations when using DELETE
    
    - Delete Signups when an Event is deleted
    - Delete ForwardUsers when a Forward is deleted
    - Reown things when a User is deleted
    - Unsubscribe and remove signups when User is deleted
    create_app: rename disableAuth to disable_auth
    
    We dont use camel case for functions
    pre_post_permissions_callback got merged in but is deprecated
    Adds a flag to create_app to disable authentification
    genereal code design changes for event_hooks.py: check-functions now get called automatically for hooked_ressources and for both POST and PATCH
    
    code appearance changes in confirm.py: no camel-case
    
    new hooks for /forwardaddresses, /events
    Removes parameter to create_app to create the database
    
    This is already done by the manage.py script
    Additional settings for the app config and
    modified bootstrap to utilize everything new
    POST, GET and DELETE now working with auth in
    general. But permissions dont work yet.
    Additional settings for the app config and
    modified bootstrap to utilize everything new
    deleted two empty event_hooks for /users
    eventsignups-hook expanded to PATCH
    
    small bugfixes
    POST, GET and DELETE now working with auth in
    general. But permissions dont work yet.
    Changed groupmembership pre post hook to work with Permission Class
    Flake8 fix
    Added system for owners and affected users.
    
    Every object can have an owner and an affected user, which is referenced through some id. This can also be indirect through a relation. The owner can perform all actions on that special object without permissions for that endpoint. The affected user can always read what affects him and can through a setting also get permission to DELETE or PATCH an object.
    
    POST requests are parsed such that if the created object would belong to the posting user, access is granted. Therefore if the owner is stored in the object itself, everybody can post, effectivly creating a public resource!
    This special behaviour is used for files.
    In general the owner feature is used for forwards, which can be owned by the mailinglist owner.
    _author field is now automatically filled on POST and PUT requests
    Tidied up auth.py. Renamed the blueprint from login to auth, added many comments.
    Login tokens are hashed now, Only sessions resource public
    Authentification initial implementation
    
    manage.py create private+public key used to sign login tokens
    event hooks to confirm unpublic eventsignups
    added blueprint for /confirms
    deleted unused rest_logic
     Please enter the commit message for your changes. Lines starting
    forgot to import event_hooks in the bootstrap, fix for previous commit
    added event_hook for /eventsignups, now a POST without email gets added the email of the user and a post without email and user_id gets rejected
    Removed reference to event_hooks, which was removed in bd3e5639c305d77f09587b6ad894c17e2ff562ac
    event hook for event signups, still work in progress
    Removed event_hook dummys from master because it has no reason to be
    there.
    Still can be found in branch eventhooks.
    First changes, event hooks for pre get users and post get users.
    So far just printing something, proof of concept
    Implemented own logic for presentation, little changes for flake8
    Try to get own logic working#
    Seperated endpoint definitions from bootstrap, so we can now make changes to the generated schemas.
    Refactor bootstrapping and configuration for reusability
    
    The app instance is now created with a function, which allows to create multiple apps for different environments (e.g., testing).
    
    Configuration is now done in two steps (previously: amivapi.config module): First, amivapi.settings is consulted for default settings which are applied in all environments, which is then extended by environment-specific config files from the ROOT/config directory. Creating of the latter can be done by executing `python manage.py create_config` and following the instructions.
    Push Eve to 0.8.2 (dev branch for now). (#387)
    Improve mail function (#384)
    
    All API mails are sent from the same address, thus the `mail` util
    does not require a sender mail anymore, and instead always uses
    the API mail from the config.
    
    Additionally, the mail function now adds an configurable subject
    line, defaulting to "[AMIV] {subject}", to increase
    consistency and allow users to spot API mails quickly.
    Fix issue 348 (semicolons between characters of To email address) (#372)
    
    Check if argument is a string or a list of strings. If it is a string convert to [string]
    
    Closes #348.
    Add schema definitions for internal fields (#326)
    
    The API now adds definitions for all internal fields to the schema, i.e.
    _etag and so on. Eve already did this for the _id field, so I extended it
    (mainly such that the online documentation can include it nicely).
    Move schema description validation rules into general validator (#322)
    
    * Move schema description validation rules into general validator
    
    We use additional schema rules such as 'description' to make our
    schema more descriptive. However, Cerberus will complain about
    unknown schema rules, so they have to be defined somewhere,
    even if they don't do anything.
    
    Currently, this is done in the documentation sub-module.
    This is  a bit problematic, as our API is designed with replaceable
    modules in mind -- but deactivating or replacing the doc module will
    now cause errors in *all* schemas.
    
    As the additional description rules are important whether or not we
    use the online docs, I have moved the rules into the general validator.
    
    * Fix style errors to make this mergeable (as a base for other PRs)
    Only send mail when mail server is configured (#309)
    
    * Only send mail when mail server is configured
    
    * Increment version
    Improve hooks, ensure private user fields are always hidden
    
    User fields like the password hash were visible after PATCH.
    
    The solution to this issue was to use a more general hook that can run after all requests in addition the the database hook.
    
    For this hook, a bit of parsing utilities were added, which turned out to be useful in other locations, too.
    
    Fixes #216
    Add Oauth2 login, remove python2
    
    This commit mainly implements shiny new OAuth2 functionality to the API,
    in form of a central login page which can be used for *Implicit Grants*.
    
    Documentation for this new feature included.
    
    Along this we decided to drop python 2 support to simplify the new
    feature. This lead to cleaning up other parts of the code as well.
    
    Finally, Travis and tox were adjusted to drop python2 as well.
    LDAP v3 (#250)
    
    Until now, only the `ou` field form ldap was used to determine a students' department.
    
    As it turns out, departments are never deleted from this list, i.e. if a student switches from ITET to INFK, both departments will be in the list, not only the current department.
    
    We now use the `deparmentNumber` field to determine the department. It is a little bit more effort to parse, but at least we reliably know a students department now.
    Use SSL to send mails (#207)
    
    * Use SSL to send mails
    
    * Added SMTP port & login
    
    * SMTP: send ehlo if login not required and use 587 as default port
    Main validator in separate file
    Media: Remove custom filestorage class to store files in db for simplicity. (#202)
    Add a timeout for connections to an SMTP server (#201)
    Run hooks on embedded documents (#199)
    Unnecessary work to make code more 'pythonic' (who cares anyway^^)
    auth hooks can work with embedded relations
    
    Fixes #195
    Fixed import order to conform to the google style guide
    
    - Three groups: standard lib, external packages, internal imports
    - No relative imports
    - Sorted alphabetically and case insensitive in the groups
    Moved api resource key validator to utils to use it for apikeys as well.
    Added accepted field to signups with FCFS and manual selection strategies
    
    Also send emails, when people get promoted from the waiting list
    Tidied up event module and fixed some small bugs
    Fixed rebase conflicts with a merge.
    Moved depends any validator to main validator in utils.py
    Changed configuration handling slightly
    
    - As recommended by the flask docs about factory functions, `create_app`
    now takes the config file as an argument.
    - Since only bootstrap takes care of the config import, `get_config` was
    removed from utils
    - Cleaned up settings.py and removed some no longer needed stuff
    Flake8 fixes
    Removed useless functions
    Changed mail function to allow inspection of sent mail in tests
    Added sudo^^ Needed for patch_internal etc.
    Updated requirements and fixed small things
    
    Note: We are now on flask 0.10, not the latest 0.11
    
    There seems to be an error with the TestClient, which crashes
    on abort because of a change in 0.11.
    
    Needs more investigation, though
    Disabelign everything that is not working with mongo right now
    
    python run.py is now able to start up an api with only module studydocuments
    Circular imports gone, merged db_utils into utils.
    
    All utils are now happily in one file.
    Moved little shared part of validator to utils.py
    
    Not completely sure if this is the best decision, but it felt like the shared validation fit well into utils.
    Save sql class in domain.
    
    Since not all models are in models.py anymore it was more complicated to find the model.
    To solve this a reference to the model is simply stored in the domain.
    Made events.py the first api module.
    
    Moved everything from models and schemas regarding events (and eventsignups) to confirm.py and renamed this to events.py
    
    Added new utility functions to safely extend domain and validator.
    Had to modify auth a little to work together with new structure - owner/registered_methods/public_methods etc are now stored in the domain aswell.
    
    Needed to move declaration of storage to schemas.py because of this (since the info does not need to be in the model anymore, but in the domain)
    Moved domain creation into utils.py
    
    To prepare for modularization. Now we can start taking schemas.py apart.
    Validator cleanup, small util changes
    
    Used more of eves data class to clean up code in validator.
    Renamed everything correctly
    
    Used new resource names in all files
    Finished work on removing "will_be_owner"
    
    Added lots of test for groups and signup to test all functionality
    
    Added new validation to cover the functionality from "will be owner"
    
    Cleaned up schemas and added validation
    
    Added a new group hook in authorization to properly filter groups.
    
    Updated the hooks in bootstrap.
    Flake8 fixes in various files
    
    Closes #101
    utils.recursive_any_getattr accepts lists now
    Added support for many-to-one owner resolution to utils.get_owner
    Finished group permissions, added tests
    
    Removed all old permission tests and cron utilities.
    models/User: add password validation / transparent password hashing
    Dependencies: use passlib for password hashing
    
    From the website:
    
        Passlib is a password hashing library for Python 2 & 3,
        which provides cross-platform implementations of over 30
        password hashing algorithms, as well as a framework for
        managing existing password hashes.
    So much ldap
    
    Everything. Collected everything related to ldap in ldap.py
    
    Also updated developer docs. Check there to see how everything works
    Removed unused imports
    Fixing wrong imported reference in utils.py
    Changed the token_generator function in utils.py:94 to be cryptographically secure.
    The function does not accept the 'chars' argument anymore since it uses the urlsafe_b64encode function to generate the string from os.urandom output. This is not a problem since this argument was nowhere used anyway. And I hope it wont be important in the future either.
    More LDAP: Sync, tests
    
    Added a _synchronized field to users that specifies last ldap sync.
    
    Also made a cronjob that updates bassed on those fields.
    
    Included tests.
    LDAP updates and testing and docs
    
    In bootstrap modified ldap setup,
    extended manage.py to create necessary fields
    authentication is now complete and imports and updates user.
    
    Because everyone gets imported, there must be a setting "other" in
    department. Updated model accordingly
    
    Also added nethz library fork to requirements
    Python3 fixes
    - more unicode/bytearray conversion
    - reduce was removed in favor of for loops
    - generator/list conversion
    Shortened license header to important info
    flake8 fix
    Added AGPL license, content encoding, updated setup.py
    Send mail via function in utils.py
    Some advancement for python 3 support
    
    - Local includes always use package amivapi
    - Except clauses use 'as' syntax
    - Changed baseclass of media.ExtFile to FileIO
    moved token_generator to utils
    deleted unused function in utils
    documentation
    Removed environments
    
    As tests are independent now and it is unlikely to have a development
    and production server in the same folder environments are not needed
    anymore
    Moved init_database to bootstrap to improve dependencies
    Documentation for util functions
    Extended documentation, style fixes
    
    - many docstrings include params and return value now
    - """ only for docstrings
    - no \ line continuation
    Fixes for MySQL support
    
    MySQL does not support CHAR columns with length more than 256.
    First row inserted with auto_increment will have its ID overwritten
    intriducing a new confirmation system
    still not working 100%
    Made more precise error message when creating an already existing
    database
    manage.py doesn't use eve object anymore, uses get_config and sqlalchemy directly
    
    some work done for apikeys
    Make all accesses to config use eve's config object
    
    Reasons:
    - consistency with eve
    - better readability
    - defaults if app is not loaded
    Refactoring of authentification, fix that g.logged_in_user is always set
    Added support for PUT to hooks
    
    event_hooks.py, utils.py  and bootstrap.py got a lot more comments
    Removed function parse_data from utils
    
    The function parse_data contained a 'with request:' which served
    no purpose in the current state of our application but at the same
    time caused error with file saving since files where closed
    prematurely.
    
    Since the with block was not necessary and without it parse_data
    would just call eve.methods.common.payload(), I removed parse_data
    and replaced it everywhere with payload()
    Make manage.py ask to delete database, also more verbose
    
    If a database already exists manage.py create_database will ask and drop
    it. Also the full command to create the database is shown when
    create_config is executed.
    Added authentification for file download
    
    The auth class was modified to be able to use classes in
    models.py which only contain permission details and don't inherit
    Base
    root and anonymous have _etag, _created and _updated when they are created
    Move getClassForResource to utils.py and rename it to get_class_for_resource, Flake8 fixes
    
    We use camel case for classnames and underscores for functions
    Passwords are now assumed to be unicode and converted to a bytearray before hashing
    
    This should fix problems with not matching hashes for some people
    Databases are now created in utils.py, so the method can be used by tests
    Flake8 fix
    added library for parsing and other stuff
    Update requirements and test setup. (#396)
    
    For some reason, the generic alpine image would not correctly update
    the repositories and would not find mongodb.
    
    With a fixed version, this issue does not occur anymore.
    
    Additionally, important changes due to version update:
    
    - Pytz: Dependency removed, as datetime
      can handle utc on its own.
    
    - Cerberus: `valueschema` renamed to `valuesrules`.
    
    - MongoDB: `insert` is replaced by `insert_one` and `insert_many`.
      As a consequence, ObjectIDs are retrieved
      a bit differently.
    
    - PassLib: `encrypt` renamed to `hash`.
      `vary_round` is deprecated, has it
      "provided little security and was not worth
      the additional complexity" [1].
    
    [1]: https://passlib.readthedocs.io/en/stable/history/1.7.html?highlight=vary_rounds#crypt-context-api-deprecations
    
    Closes #394 (new eve version fixes this bug)
    Fix that dependencies are not correctly checked when fields are deleted. (#376)
    
    Fix that dependencies are not correctly checked when fields are deleted (aka set to None) with PATCH.
    Validate all aspect ratios with tolerance (#368)
    Media fix (#345)
    
    * Update file tests to always assert content, fix ratio validation
    Media validation exception (#344)
    
    * Add test to highlight the issue
    
    * Fix validator crashes
    
    I have noticed that Cerberus swallows exceptions.
    I modified the test framework to detect this.
    
    This showed two errors in our validators. One was a missing
    return statement, the other was more fundamental:
    
    Whenever a file validator would register an error, Cerberus
    would crash, as it internally saved the validated value
    and for some reason deepcopies it during the processing.
    File buffers couldn't be deepcopied, causing a crash.
    
    I have solved this by removed the reference to the validated
    value, as it is *never* used anyways.
    (I have no clue why it is in there in the first place)
    
    Closes #337
    Move schema description validation rules into general validator (#322)
    
    * Move schema description validation rules into general validator
    
    We use additional schema rules such as 'description' to make our
    schema more descriptive. However, Cerberus will complain about
    unknown schema rules, so they have to be defined somewhere,
    even if they don't do anything.
    
    Currently, this is done in the documentation sub-module.
    This is  a bit problematic, as our API is designed with replaceable
    modules in mind -- but deactivating or replacing the doc module will
    now cause errors in *all* schemas.
    
    As the additional description rules are important whether or not we
    use the online docs, I have moved the rules into the general validator.
    
    * Fix style errors to make this mergeable (as a base for other PRs)
    Fix schema validation (#311)
    
    * Fix schema validation
    
    Cerberus is too dumb for the current `2 * tuple()` format, so I fixed it^^
    
    * Update validation.py
    
    * Update settings.py
    
    * Actually fix error, improve handling of integer ratios
    
    * Pick simpler tolerance
    
    * Increment version
    
    * Make test clearer
    Add validation for event description and image aspect ratio
    
    Resolves #96
    Resolves #127
    Fix test config and eventsignup validation
    
    First of all, the test config would load sentry config from a file in the
    current working dir. Not anymore :)
    
    Furthermore, eventsignups with email would crash the API.
    
    To fix this, a proper combination of `required` and `exclude` was needed,
    which is able to to ignore None values. (None equals not set)
    
    As Cerberus is a bit inconsequential about None values
    (e.g. they can be ignored for `required`, but not for `exclude`), this
    required patching how Cerberus handles exludes.
    
    Resolves #213
    Update Eve to version 0.8
    
    * Update to Eve 0.8
    
    Eve 0.8 brings Cerberus 1.0, which requires lots of changes:
    - Several properties have been renamed
    - type checking is now handled differently
    - validation rules require a schema in the docstring to validate the schema
      itself
    
    Additional Changes in Eve itself:
    - A PATCH on a document which misses a field having a default value will now
      result in setting this value, even if the field was not provided in the
      PATCH’s payload. (From Eve changelog)
    - Some error messages changed.
    Allow password changes only with 'recent' token (#260)
    
    To increase security, not any token may be used to change a user password.
    
    Instead, it must not be older than a certain threshold, e.g. 1 minute.
    
    This way, the user must be prompted to confirm his identity by
    logging in to change a password.
    Main validator in separate file
    Moved little shared part of validator to utils.py
    
    Not completely sure if this is the best decision, but it felt like the shared validation fit well into utils.
    Moved file storage related validation into media.py
    
    Also made media.py more like a flask extension by adding an init_app function which registers the blueprint and validator.
    All group related functionality is now in groups.py
    
    This includes model, schema, validation as well as group_permission and mailinlist hooks.
    
    All other files have been adjusted to import correctly.
    Made events.py the first api module.
    
    Moved everything from models and schemas regarding events (and eventsignups) to confirm.py and renamed this to events.py
    
    Added new utility functions to safely extend domain and validator.
    Had to modify auth a little to work together with new structure - owner/registered_methods/public_methods etc are now stored in the domain aswell.
    
    Needed to move declaration of storage to schemas.py because of this (since the info does not need to be in the model anymore, but in the domain)
    Group schema is now generated on demand.
    
    Until now the group permission schema was generated at app creation.
    
    This makes it a bit difficult to modularize the app since you have to
    be very careful when to call it. Now its just generated when necessary which solves this problem.
    
    Since its not very performance hungry this should be no big problem.
    Validator cleanup, small util changes
    
    Used more of eves data class to clean up code in validator.
    Moved user hooks to validation for flexibility
    
    Cleaned up related code.
    
    Also moved the related tests to user tests.
    
    Changed ldap part in authentication to take advantage of the new
    functionality
    Updated eventsignup validation
    
    Validation was improved for groupusermembers,
    eventsignups are similar, so I improved the validation there as well
    Code cleanup and tests
    
    Removed several parts of code not needed anymore
    
    wrote tests to cover more functionality
    
    Added new validation rules
    Finished work on removing "will_be_owner"
    
    Added lots of test for groups and signup to test all functionality
    
    Added new validation to cover the functionality from "will be owner"
    
    Cleaned up schemas and added validation
    
    Added a new group hook in authorization to properly filter groups.
    
    Updated the hooks in bootstrap.
    Flake8 fixes in various files
    
    Closes #101
    Renamed is_public fields of Events and Groups
    
    Group.is_public -> Group.allow_self_enrollment
    Event.is_public -> Event.allow_email_signup
    
    The fields have different meanings but had the same name
    
     See issue #99
    Finished group permissions, added tests
    
    Removed all old permission tests and cron utilities.
    Tie permissions to groups, not yet working
    
    Every group now saves a permissions object wich is validated against a jsonschema
    
    tests still missing
    Use UTC datetime's everywhere
    
    datetime.now() returns (server-)local time, but we store UTC in the database.
    Fixed exception in signup validator
    Some tests improvements, validator fix
    
    A test for a part of the validator was missing
    Added the test, found a flaw in validator
    
    Fixed validator :)
    New group/forward system
    
    Forwards are now managed in the following way:
    
    - Users can be added to groups
    - Groups can have any number of mail addresses forwarded to
    - Anonymous addresses can be added to groups
    - Anonymous addresses can be added to public groups using email
      confirmation
    - Group owners can add users or addresses to their groups
    Shortened license header to important info
    Added AGPL license, content encoding, updated setup.py
    Validator documentation
    
    Added proper docstrings for all validator functions
    
    Fixed a little typo in eventsignups tests
    
    Renamed a function in validator and added to schema
    
    Added little documentation
    Validator: Events
    
    Moved all custom event validation hooks into the validator
    
    (Added new rules to schema and wrote tests)
    Validator: Eventsignups
    
    All custom checks for eventsignups are not part of the validator
    
    Removed item method patch for forwardusers because thats not needed
    (was already removed for forwardaddresses, now correctly removed for both)
    
    Some tests were implemented for patch, removed them.
    
    One hook in validation.py converning eventsignups was covering
    authorization. Moved it to authorization.py and updated bootstrap.
    
    Also updated schema to include new validation.
    
    (and  fixed a typo in settings)
    More Validator
    
    Moved more validation into validator and added tests
    Modified schema
    
    Renamed 'extra_fields' in signups to 'additional_fields' for consistency
    (Modified in models, schema and renamed once in confirm)
    
    Removed test_hooks and moved content to test_eventsignups
    More Validator
    
    Moved more validation into validator and added tests
    Modified schema
    
    Renamed 'extra_fields' in signups to 'additional_fields' for consistency
    (Modified in models, schema and renamed once in confirm)
    
    Removed test_hooks and moved content to test_eventsignups
    Extended documentation, style fixes
    
    - many docstrings include params and return value now
    - """ only for docstrings
    - no \ line continuation
    intriducing a new confirmation system
    still not working 100%
    Improved validation for permissions
    
    Permission validation now only uses cerberus.
    
    Added validator for future time and removed hook from validation.
    Moved the test from test_event_hooks to test_permissions because it
    tests the permissions (duh)
    Added new validation rule to the schema
    
    Furthermore added nullable=False to expiry_date in the model to make
    fit our idea: No permission should be forever
    Filetype whitelisting
    
    Implemented a custom validator for filetype validation that supports PDF
    and image formats
    
    Added validation rules to Schema and testing to the file tests
    
    Note: A new test-requirement is needed! pillow is used to create image
    files in different formats to test the validator
    answered Conrad's in-source-code-hidden question, updated documentation
    Make all accesses to config use eve's config object
    
    Reasons:
    - consistency with eve
    - better readability
    - defaults if app is not loaded
    Refactoring
    
    - load_schema() -> get_schema() for same naming scheme as get_config
    - event_hooks.py which is no meaningful name split to
      authentification.py, authorization.py, validation.py, confirms.py
    - move file_endpoint.py into media.py
    - moved permission_matrix into settings.py, because thats what it is
    Update to Eve 0.5.1 + Eve SQLAlchemy fork
    
    Eve 0.5 moved SQLAlchemy support to a different package. We follow the
    official eve repository now and use a fork of the extension. Changes are
    only imports except for authentification.
    
    The big change introduced by this is that the lookup query parameter now
    only understands python syntax, but has support for embedding with it.
    
    The fork introduces that values returned by Eve are now dict and
    the SQLAResult class is removed of Eve-Sqlalchemy for now to resolve
    problems with hooks, json and possibly other unexspected behaviour.
    
    See issue #11 in eve-sqlalchemy
    https://github.com/RedTurtle/eve-sqlalchemy/issues/11
    Added custom validator for media type.
    Added custom validator for media type.
    Fix crashes when trying to send blacklist emails (#401)
    
    Fix crashes when trying to send blacklist emails
    
    Fix #391
    Adds email send functionality to blacklist (#378)
    
    Adds some functions that send out an email to a user everytime a new
    entry on the blacklist is created for him or one of his entries changed
    (patched). The emails include the reason for the blacklist entry and the
    price if it exists.
    Add blacklist (#365)
    
    Add new resource blacklist and an event-signup validator to check if a user
    is on the blacklist. People can be on the blacklist for multiple
    separate reasons, therefore blacklist is a new resource and not a single
    field in the user resource.
    Add blacklist (#365)
    
    Add new resource blacklist and an event-signup validator to check if a user
    is on the blacklist. People can be on the blacklist for multiple
    separate reasons, therefore blacklist is a new resource and not a single
    field in the user resource.
    Adds email send functionality to blacklist (#378)
    
    Adds some functions that send out an email to a user everytime a new
    entry on the blacklist is created for him or one of his entries changed
    (patched). The emails include the reason for the blacklist entry and the
    price if it exists.
    Add blacklist (#365)
    
    Add new resource blacklist and an event-signup validator to check if a user
    is on the blacklist. People can be on the blacklist for multiple
    separate reasons, therefore blacklist is a new resource and not a single
    field in the user resource.
    Relative URL for /api-docs (#329)
    
    * Make doc url relative to work with HTTPS
    
    * Style fixes
    
    * Bump version
    Update settings, in particular version number, and serve logo from static files
    
    Furthermore, I now ensured that the setup always uses the correct version
    number.
    
    This required me to remove the 'hack' to always install the current folder
    from `requirements.txt`. This was quite unusual anyways.
    
    As a result tox etc. needed to be adjusted.
    
    Additionally, the logo used for OAuth and (soon) docs is now served consistently from a static endpoint.
    Fix incorrect query parameter documentation (#332)
    
    * Fix incorrect query parameter documentation
    
    * Bump version number
    Update online documentation, remove outdated docs (#323)
    
    - Removed outdated developer and admin documentation.
    - Moved documents such as the Cheatsheet or the OAuth user guide into the
      online docs, which are now the 'single source of truth' for users.
    - Extended the Cheatsheet to cover sending data with multipart/form-data
    - Added general introductions to REST and API auth.
    - In the online docs, added support for:
      - Query parameters.
      - Authorization header.
      - Additional lookup path for GET.
      - Error Responses.
    - Hooks are not displayed anymore, as they are only relevant for API developers
      and not for users.
    - Updates ReDoc to version 2.
    
    Regarding the documentation updates, I briefly considered putting them into
    a pull request to Eve-Swagger. However, development on Eve-Swagger seems stale,
    with two open pull requests without response. Furthermore, most additions
    include AMIV API specific detail (e.g. a link to the cheatsheet), so I opted
    for a API specific solution instead.
    Update online documentation, remove outdated docs (#323)
    
    - Removed outdated developer and admin documentation.
    - Moved documents such as the Cheatsheet or the OAuth user guide into the
      online docs, which are now the 'single source of truth' for users.
    - Extended the Cheatsheet to cover sending data with multipart/form-data
    - Added general introductions to REST and API auth.
    - In the online docs, added support for:
      - Query parameters.
      - Authorization header.
      - Additional lookup path for GET.
      - Error Responses.
    - Hooks are not displayed anymore, as they are only relevant for API developers
      and not for users.
    - Updates ReDoc to version 2.
    
    Regarding the documentation updates, I briefly considered putting them into
    a pull request to Eve-Swagger. However, development on Eve-Swagger seems stale,
    with two open pull requests without response. Furthermore, most additions
    include AMIV API specific detail (e.g. a link to the cheatsheet), so I opted
    for a API specific solution instead.
    Fix filtering example in cheatsheet.md
    
    Co-authored-by: Alexander Dietmüller <alexander@dietmueller.de>
    Update online documentation, remove outdated docs (#323)
    
    - Removed outdated developer and admin documentation.
    - Moved documents such as the Cheatsheet or the OAuth user guide into the
      online docs, which are now the 'single source of truth' for users.
    - Extended the Cheatsheet to cover sending data with multipart/form-data
    - Added general introductions to REST and API auth.
    - In the online docs, added support for:
      - Query parameters.
      - Authorization header.
      - Additional lookup path for GET.
      - Error Responses.
    - Hooks are not displayed anymore, as they are only relevant for API developers
      and not for users.
    - Updates ReDoc to version 2.
    
    Regarding the documentation updates, I briefly considered putting them into
    a pull request to Eve-Swagger. However, development on Eve-Swagger seems stale,
    with two open pull requests without response. Furthermore, most additions
    include AMIV API specific detail (e.g. a link to the cheatsheet), so I opted
    for a API specific solution instead.
    Relative URL for /api-docs (#329)
    
    * Make doc url relative to work with HTTPS
    
    * Style fixes
    
    * Bump version
    Update online documentation, remove outdated docs (#323)
    
    - Removed outdated developer and admin documentation.
    - Moved documents such as the Cheatsheet or the OAuth user guide into the
      online docs, which are now the 'single source of truth' for users.
    - Extended the Cheatsheet to cover sending data with multipart/form-data
    - Added general introductions to REST and API auth.
    - In the online docs, added support for:
      - Query parameters.
      - Authorization header.
      - Additional lookup path for GET.
      - Error Responses.
    - Hooks are not displayed anymore, as they are only relevant for API developers
      and not for users.
    - Updates ReDoc to version 2.
    
    Regarding the documentation updates, I briefly considered putting them into
    a pull request to Eve-Swagger. However, development on Eve-Swagger seems stale,
    with two open pull requests without response. Furthermore, most additions
    include AMIV API specific detail (e.g. a link to the cheatsheet), so I opted
    for a API specific solution instead.
    Update online documentation, remove outdated docs (#323)
    
    - Removed outdated developer and admin documentation.
    - Moved documents such as the Cheatsheet or the OAuth user guide into the
      online docs, which are now the 'single source of truth' for users.
    - Extended the Cheatsheet to cover sending data with multipart/form-data
    - Added general introductions to REST and API auth.
    - In the online docs, added support for:
      - Query parameters.
      - Authorization header.
      - Additional lookup path for GET.
      - Error Responses.
    - Hooks are not displayed anymore, as they are only relevant for API developers
      and not for users.
    - Updates ReDoc to version 2.
    
    Regarding the documentation updates, I briefly considered putting them into
    a pull request to Eve-Swagger. However, development on Eve-Swagger seems stale,
    with two open pull requests without response. Furthermore, most additions
    include AMIV API specific detail (e.g. a link to the cheatsheet), so I opted
    for a API specific solution instead.
    Update online documentation, remove outdated docs (#323)
    
    - Removed outdated developer and admin documentation.
    - Moved documents such as the Cheatsheet or the OAuth user guide into the
      online docs, which are now the 'single source of truth' for users.
    - Extended the Cheatsheet to cover sending data with multipart/form-data
    - Added general introductions to REST and API auth.
    - In the online docs, added support for:
      - Query parameters.
      - Authorization header.
      - Additional lookup path for GET.
      - Error Responses.
    - Hooks are not displayed anymore, as they are only relevant for API developers
      and not for users.
    - Updates ReDoc to version 2.
    
    Regarding the documentation updates, I briefly considered putting them into
    a pull request to Eve-Swagger. However, development on Eve-Swagger seems stale,
    with two open pull requests without response. Furthermore, most additions
    include AMIV API specific detail (e.g. a link to the cheatsheet), so I opted
    for a API specific solution instead.
    Fix that dependencies are not correctly checked when fields are deleted. (#376)
    
    Fix that dependencies are not correctly checked when fields are deleted (aka set to None) with PATCH.
    Allow password changes only with 'recent' token (#260)
    
    To increase security, not any token may be used to change a user password.
    
    Instead, it must not be older than a certain threshold, e.g. 1 minute.
    
    This way, the user must be prompted to confirm his identity by
    logging in to change a password.
    Fix newsletter subscription when upgrading users to members via LDAP.
    
    When users are upgraded to members via LDAP, subscribe them to the newsletter.
    Newsletter settings of already imported members are not touched.
    
    Closes #400
    Fix ldap membership detection (students >2019). (#398)
    Replace deprecated .count() calls with .count_documents(). (#380)
    Update documentation for user resource (#319)
    Update Eve to version 0.8
    
    * Update to Eve 0.8
    
    Eve 0.8 brings Cerberus 1.0, which requires lots of changes:
    - Several properties have been renamed
    - type checking is now handled differently
    - validation rules require a schema in the docstring to validate the schema
      itself
    
    Additional Changes in Eve itself:
    - A PATCH on a document which misses a field having a default value will now
      result in setting this value, even if the field was not provided in the
      PATCH’s payload. (From Eve changelog)
    - Some error messages changed.
    LDAP v3 (#250)
    
    Until now, only the `ou` field form ldap was used to determine a students' department.
    
    As it turns out, departments are never deleted from this list, i.e. if a student switches from ITET to INFK, both departments will be in the list, not only the current department.
    
    We now use the `deparmentNumber` field to determine the department. It is a little bit more effort to parse, but at least we reliably know a students department now.
    Flake8 fix (#185)
    
    * Flake8 fix
    
    * Remove pypy testing
    
    * Remove pypy also for travis
    Ldap improvements (#175)
    
    First of all, the structure of ldap.py is now simplified. The class is dropped
    and replaced by a few module level functions which are easier to understand.
    
    Next the functions themselves have been rearranged to be easier to test.
    Some premature optimization has been removed: The updating of all users
    now uses the same function as the one for one user only, since there were not
    really noticable performance differences. Again, this simplifies testing.
    
    Additionally repaired escape sequences. Either '\..' or r'\..' works, but r'\..' was to much ;)
    
    Speaking of testing: Using mock, all ldap functions are now tested.
    There still are some integration tests to verify everything actually works with the
    eth ldap.
    
    Finally a few changes in bootstrap, cli and sessions to use the new functions.
    
    After all I am quite happy with this version now. A few points are still up for improvement and I have added them to ldap.py, but over all the code is much simpler and better tested now, which is nice.
    Media fix (#345)
    
    * Update file tests to always assert content, fix ratio validation
    Media validation exception (#344)
    
    * Add test to highlight the issue
    
    * Fix validator crashes
    
    I have noticed that Cerberus swallows exceptions.
    I modified the test framework to detect this.
    
    This showed two errors in our validators. One was a missing
    return statement, the other was more fundamental:
    
    Whenever a file validator would register an error, Cerberus
    would crash, as it internally saved the validated value
    and for some reason deepcopies it during the processing.
    File buffers couldn't be deepcopied, causing a crash.
    
    I have solved this by removed the reference to the validated
    value, as it is *never* used anyways.
    (I have no clue why it is in there in the first place)
    
    Closes #337
    Fix domain initialization (#328)
    
    * Fix domain initialization
    
    * Fix media test setup and style
    
    * Thats why we have reviews
    Fix schema validation (#311)
    
    * Fix schema validation
    
    Cerberus is too dumb for the current `2 * tuple()` format, so I fixed it^^
    
    * Update validation.py
    
    * Update settings.py
    
    * Actually fix error, improve handling of integer ratios
    
    * Pick simpler tolerance
    
    * Increment version
    
    * Make test clearer
    Add validation for event description and image aspect ratio
    
    Resolves #96
    Resolves #127
    Add Oauth2 login, remove python2
    
    This commit mainly implements shiny new OAuth2 functionality to the API,
    in form of a central login page which can be used for *Implicit Grants*.
    
    Documentation for this new feature included.
    
    Along this we decided to drop python 2 support to simplify the new
    feature. This lead to cleaning up other parts of the code as well.
    
    Finally, Travis and tox were adjusted to drop python2 as well.
    Media: Remove custom filestorage class to store files in db for simplicity. (#202)
    Fixed flake8 errors
    Fixed import order to conform to the google style guide
    
    - Three groups: standard lib, external packages, internal imports
    - No relative imports
    - Sorted alphabetically and case insensitive in the groups
    Fix for tests to work in windows
    
    Programming on my brothers PC made me notice this.
    
    All tests work fine, but in a MediaTest we open an nonexiting file. The
    default mode is 'r' this seems to be a problem on windows since it
    doesnt allow this mode for '' (whatever this means). But removing the
    explicit 'r' lets python out what to use and it seems to work.
    Eve expects the file updated time to have UTC tzdata.
    
    Added tests for the problem. Closes #150
    Completed FileSystemStorage in media and tested it.
    Update requirements and test setup. (#396)
    
    For some reason, the generic alpine image would not correctly update
    the repositories and would not find mongodb.
    
    With a fixed version, this issue does not occur anymore.
    
    Additionally, important changes due to version update:
    
    - Pytz: Dependency removed, as datetime
      can handle utc on its own.
    
    - Cerberus: `valueschema` renamed to `valuesrules`.
    
    - MongoDB: `insert` is replaced by `insert_one` and `insert_many`.
      As a consequence, ObjectIDs are retrieved
      a bit differently.
    
    - PassLib: `encrypt` renamed to `hash`.
      `vary_round` is deprecated, has it
      "provided little security and was not worth
      the additional complexity" [1].
    
    [1]: https://passlib.readthedocs.io/en/stable/history/1.7.html?highlight=vary_rounds#crypt-context-api-deprecations
    
    Closes #394 (new eve version fixes this bug)
    Replace deprecated .count() calls with .count_documents(). (#380)
    Add schema definitions for internal fields (#326)
    
    The API now adds definitions for all internal fields to the schema, i.e.
    _etag and so on. Eve already did this for the _id field, so I extended it
    (mainly such that the online documentation can include it nicely).
    Update documentation for auth resources (#320)
    Update Eve to version 0.8
    
    * Update to Eve 0.8
    
    Eve 0.8 brings Cerberus 1.0, which requires lots of changes:
    - Several properties have been renamed
    - type checking is now handled differently
    - validation rules require a schema in the docstring to validate the schema
      itself
    
    Additional Changes in Eve itself:
    - A PATCH on a document which misses a field having a default value will now
      result in setting this value, even if the field was not provided in the
      PATCH’s payload. (From Eve changelog)
    - Some error messages changed.
    Fix event queue (#259)
    
    * Fix that event signups didn't get accepted with unlimited spots
    * Fix fixture generator for events with unlimited spots
    * Simplify event queue tests, fix response for new signups, remove hooks
    Add Oauth2 login, remove python2
    
    This commit mainly implements shiny new OAuth2 functionality to the API,
    in form of a central login page which can be used for *Implicit Grants*.
    
    Documentation for this new feature included.
    
    Along this we decided to drop python 2 support to simplify the new
    feature. This lead to cleaning up other parts of the code as well.
    
    Finally, Travis and tox were adjusted to drop python2 as well.
    Fixed flake8 errors
    Fixed import order to conform to the google style guide
    
    - Three groups: standard lib, external packages, internal imports
    - No relative imports
    - Sorted alphabetically and case insensitive in the groups
    Added accepted field to signups with FCFS and manual selection strategies
    
    Also send emails, when people get promoted from the waiting list
    New Eve version (my fork currently, for boolean serialization. Needed to fix some part of fixtures since post_internal returns 5 values ins Eves newest version. (#154)
    Added show_website flag to joboffers and reworked other fields
    Added fields time_advertising_start, time_advertising_end and priority to events
    Added random generators for lists and media to fixtures
    Corrections to please the PEP8 God of Python Syntax
    Removed author field from JobOffers; Added Preprocessor for joboffer for required field; Created two JobOffers tests
    Removed unneeded import.
    Modified fixtures because there is no root user in the database anymore
    Flake8 fixes
    Seperated fixture system from main test class
    
    The file got pretty long, now it is a mixin. Also custom
    validators can be handles easier by poroviding functions
    to generate the affected fields manually for a fixture
    Add Oauth2 login, remove python2
    
    This commit mainly implements shiny new OAuth2 functionality to the API,
    in form of a central login page which can be used for *Implicit Grants*.
    
    Documentation for this new feature included.
    
    Along this we decided to drop python 2 support to simplify the new
    feature. This lead to cleaning up other parts of the code as well.
    
    Finally, Travis and tox were adjusted to drop python2 as well.
    Add Function to update the scheduling of a task (#204)
    
    Added method to update scheduling of a task. Time of execution and args can be changed.
    Fixed import order to conform to the google style guide
    
    - Three groups: standard lib, external packages, internal imports
    - No relative imports
    - Sorted alphabetically and case insensitive in the groups
    Added cron module
    Restructured all tests
    
    The tests are now in the directories of the respective module, e.g. all
    users tests are in the /tests/users directory.
    
    Tests can be run with
            py.test amivapi/tests
    
    All not-updated tests have been moved to the "old tests" directory
    Some of them might even work with the new version, but I haven't checked
    that yet
    Moved Session model and schema to auth module
    
    adjusted all files that needed Session model
    Code cleanup and tests
    
    Removed several parts of code not needed anymore
    
    wrote tests to cover more functionality
    
    Added new validation rules
    Flake8 fixes in various files
    
    Closes #101
    Finished group permissions, added tests
    
    Removed all old permission tests and cron utilities.
    Shortened license header to important info
    Added AGPL license, content encoding, updated setup.py
    Cron sends emails about expiring permissions
    Added cron feature to clean db
    
    +Test
    +Doc
    Replace deprecated .count() calls with .count_documents(). (#380)
    Add event moderators (#377)
    
    Add field to event resource that allows to specify a moderator for an event.
    Event moderators are able to:
     - make changes to an event (patch)
     - see the list of participants
    
    Only a user has write permission for its signups.
    Write permission is only given if the user_id issuing
    the request and the user_id of the targeted signup match.
    Modified fixtures because there is no root user in the database anymore
    Review of new fixture system and test utils.
    
    Its really nice! I just made some flake8 fixes regarding the comments
    and modified a few of the for loops so the statements are easier to
    read.
    
    Furthermore the test config is now in the test class so it can be
    modified by tests.
    
    Mainly needed for ldap tests (coming soon (tm) )
    New test fixture system
    
    The new system can guess missing fields based on the context
    of the fixture. The schema is parsed, so all kind of objects
    can be generated using WebTest.load_fixture and WebTest.create_object
    for convenience
    Fix test config and eventsignup validation
    
    First of all, the test config would load sentry config from a file in the
    current working dir. Not anymore :)
    
    Furthermore, eventsignups with email would crash the API.
    
    To fix this, a proper combination of `required` and `exclude` was needed,
    which is able to to ignore None values. (None equals not set)
    
    As Cerberus is a bit inconsequential about None values
    (e.g. they can be ignored for `required`, but not for `exclude`), this
    required patching how Cerberus handles exludes.
    
    Resolves #213
    Add support for monitoring with Sentry
    
    Resolves #264
    Testing db works now.
    
    In the test settings the database name was stored in MONGO_DBTEST and Eve couldn't find it.
    Changed to key to MONGO_DBNAME and now Eve uses the correct db for testing.
    
    Also moved to test config into utils so its easier to find.
    
    Furthermore removed the automatic database drop on test setup and replaced it with an
    assert (that the db is empty) to make sure no database gets overwritten accidentially.
     tests are now running (failing, but running. it's something)
    testing creates for every test a new mongo database and removes it after the test
    bootstrap: use the dialect to determine if we're running on MySQL or not
    
    A small test case has been added to prevent further bugs.
    tests: allow testing with sqlite database again
    
    After the changes in 86b600fc sqlite did not work anymore.
    tests: refactor engine creation to use only one connection for setup
    
    Closes #88
    Dependencies: replace mysql-connector-python with mysqlclient
    
    mysqlclient is a drop-in replacement for MySQL-Python with Python 3 compatability.
    Shortened license header to important info
    Added AGPL license, content encoding, updated setup.py
    Fixes for previous commits
    
    - Forgot to remove environment in tests.util.teardown
    - Wrong string concatenation
    - More code style improvement
    Removed environments
    
    As tests are independent now and it is unlikely to have a development
    and production server in the same folder environments are not needed
    anymore
    Tests create their own environment(db, folders)
    
    One can specify using manage.py to use the configured MySQL server, but
    a random database will be created there.
    Moved init_database to bootstrap to improve dependencies
    Fixed errors in hooks
    
    - Inserting nonexisting foreign key in test_file_endpoint
    - Using undefined array index in test_hooks
    - ID of some object was assumed to be some value
    Made more precise error message when creating an already existing
    database
    Make manage.py ask to delete database, also more verbose
    
    If a database already exists manage.py create_database will ask and drop
    it. Also the full command to create the database is shown when
    create_config is executed.
    Databases are now created in utils.py, so the method can be used by tests
    tests: Add base class for tests against the full WSGI stack
    
    Subclassing WebTest in your tests lets you execute requests against the api without having to run a complete server.
    tests: move files into amivapi-module
    
    With this they are part of the regular amivapi-module.
    Introduced unit testing with some example test cases
    To run the tests use "python -m unittest discover" in the project top level folder
    First working example built with Eve's sqlalchemy branch
    
    Relations between the models are not yet correctly set up, the Eve
    schema is not yet optimal (should contain some more restrictions),
    and responses currently don't include fields which are "null".
    Add test to enforce schema consistency (#324)
    
    Currently, Eve allos fields to be undefined, which basically
    only result in confusion.
    
    To be more consistent in general, this test will enforce
    that all fields are required XOR have a default value.
    Update requirements and test setup. (#396)
    
    For some reason, the generic alpine image would not correctly update
    the repositories and would not find mongodb.
    
    With a fixed version, this issue does not occur anymore.
    
    Additionally, important changes due to version update:
    
    - Pytz: Dependency removed, as datetime
      can handle utc on its own.
    
    - Cerberus: `valueschema` renamed to `valuesrules`.
    
    - MongoDB: `insert` is replaced by `insert_one` and `insert_many`.
      As a consequence, ObjectIDs are retrieved
      a bit differently.
    
    - PassLib: `encrypt` renamed to `hash`.
      `vary_round` is deprecated, has it
      "provided little security and was not worth
      the additional complexity" [1].
    
    [1]: https://passlib.readthedocs.io/en/stable/history/1.7.html?highlight=vary_rounds#crypt-context-api-deprecations
    
    Closes #394 (new eve version fixes this bug)
    Fix that dependencies are not correctly checked when fields are deleted. (#376)
    
    Fix that dependencies are not correctly checked when fields are deleted (aka set to None) with PATCH.
    Media validation exception (#344)
    
    * Add test to highlight the issue
    
    * Fix validator crashes
    
    I have noticed that Cerberus swallows exceptions.
    I modified the test framework to detect this.
    
    This showed two errors in our validators. One was a missing
    return statement, the other was more fundamental:
    
    Whenever a file validator would register an error, Cerberus
    would crash, as it internally saved the validated value
    and for some reason deepcopies it during the processing.
    File buffers couldn't be deepcopied, causing a crash.
    
    I have solved this by removed the reference to the validated
    value, as it is *never* used anyways.
    (I have no clue why it is in there in the first place)
    
    Closes #337
    Fix domain initialization (#328)
    
    * Fix domain initialization
    
    * Fix media test setup and style
    
    * Thats why we have reviews
    Add schema definitions for internal fields (#326)
    
    The API now adds definitions for all internal fields to the schema, i.e.
    _etag and so on. Eve already did this for the _id field, so I extended it
    (mainly such that the online documentation can include it nicely).
    Fix test config and eventsignup validation
    
    First of all, the test config would load sentry config from a file in the
    current working dir. Not anymore :)
    
    Furthermore, eventsignups with email would crash the API.
    
    To fix this, a proper combination of `required` and `exclude` was needed,
    which is able to to ignore None values. (None equals not set)
    
    As Cerberus is a bit inconsequential about None values
    (e.g. they can be ignored for `required`, but not for `exclude`), this
    required patching how Cerberus handles exludes.
    
    Resolves #213
    Allow password changes only with 'recent' token (#260)
    
    To increase security, not any token may be used to change a user password.
    
    Instead, it must not be older than a certain threshold, e.g. 1 minute.
    
    This way, the user must be prompted to confirm his identity by
    logging in to change a password.
    Add Oauth2 login, remove python2
    
    This commit mainly implements shiny new OAuth2 functionality to the API,
    in form of a central login page which can be used for *Implicit Grants*.
    
    Documentation for this new feature included.
    
    Along this we decided to drop python 2 support to simplify the new
    feature. This lead to cleaning up other parts of the code as well.
    
    Finally, Travis and tox were adjusted to drop python2 as well.
    Bugfix: Missing `departmentNumber` in ldap should not crash the API (#262)
    
    I was just importing missing users from LDAP and had to discover that the
    ISG apparently is not that much into data validation, at least not when it
    comes to LDAP.
    
    A few (2, to be precise) users are missing the `departmentNumber` field
    we need to determine the department.
    
    In this case, the API should not crash but rather assume that the user
    has no department.
    LDAP v3 (#250)
    
    Until now, only the `ou` field form ldap was used to determine a students' department.
    
    As it turns out, departments are never deleted from this list, i.e. if a student switches from ITET to INFK, both departments will be in the list, not only the current department.
    
    We now use the `deparmentNumber` field to determine the department. It is a little bit more effort to parse, but at least we reliably know a students department now.
    Update test and travis configuration for zero-config api
    
    The tests now specify not only the test database, but also the test user.
    
    This way, travis does not need to create a configuration at all to run the
    tests.
    
    Furthermore, update the README to include a command to create the test user
    with mongodb.
    Improve mailing list config handling and cli. (#231)
    Fixed import order to conform to the google style guide
    
    - Three groups: standard lib, external packages, internal imports
    - No relative imports
    - Sorted alphabetically and case insensitive in the groups
    Fixed rebase conflicts with a merge.
    Removed unused function from test utils.
    Removed annoying assert in test setup that was never really relevant.D
    Added cron module
    Added apikeys to auth
    Removed unused code
    Completed FileSystemStorage in media and tested it.
    Renamed ROOT_MAIL to API_MAIL to make more clear its for mails sent by amivapi.
    Seperated fixture system from main test class
    
    The file got pretty long, now it is a mixin. Also custom
    validators can be handles easier by poroviding functions
    to generate the affected fields manually for a fixture
    Changed mail function to allow inspection of sent mail in tests
    Moved email regex to settings.py
    Removed usage of 'get_config' from test utils because its not needed there.
    Removed the root user from the database.
    
    Like the anonymous user (already gone) it was needed mostly for database
    relations in sql.
    We don't really need this anymore.
    
    Therefore I removed the root user from the database. To act as root you
    don't need a session anymore, you can just send the root password as
    token. The root user is not kind of a glorified api key.
    
    This has the following advantages:
    - We don't need to initialise the db anymore
    - The users collection only contains actual people now
    
    This means the tests don't need to create the root user and generally
    the initdb function in mongo_manage is gone.
    Review of new fixture system and test utils.
    
    Its really nice! I just made some flake8 fixes regarding the comments
    and modified a few of the for loops so the statements are easier to
    read.
    
    Furthermore the test config is now in the test class so it can be
    modified by tests.
    
    Mainly needed for ldap tests (coming soon (tm) )
    Fixed type confusion in fixture processing
    Increased test performance by a factor of about 100
    
    Tests create many users. Most time testing is spent hashing
    passwords. For tests the number of hashing rounds was reduced by
    a factor of about 1000.
    New test fixture system
    
    The new system can guess missing fields based on the context
    of the fixture. The schema is parsed, so all kind of objects
    can be generated using WebTest.load_fixture and WebTest.create_object
    for convenience
    Renamed session fields to be nicer, added data_relation
    Rewrote purchases resource with mongo, added tests
    
    This changes the public interface of /purchases in not compatible ways.
    Added write_resource_method
    
    Needed for e.g. study documents, where POST is neither public nor
    reserved for admins -> we need to be able to verify per user wheter POST
    is allowed.
    
    Updated link_methods and tests
    Removed option to disable auth globally
    
    Reasoning:
    - In use, the API doesn't work without auth since everything revolves
      about which user can do what
    - Disabled auth only used in testing
    - Several functions (e.g. validators etc) would need to check if auth is
      enabled
    - The problem can be solved nicer (see below)
    
    Solution:
    - Removed the disable_auth option
    - Use the new auth hook (intended to provide groups and apikeys the
      option to extend auth) to always authenticate as root
    
    This way we do not need to provide exceptions for disabled auth, since
    the WebTestNoAuth just acts as root all the time.
    Added link method integration tests, fixed bugs
    
    Some methods were not playing together with Eve
    as intended, but now they should.
    
    One problem with "home" remains.
    Python 3 compatibility fixes
    Renamed tests/util to test/utils
    
    I know its stupid, but it was really annoying me that we had both a
    util and a utils file ^^
    First version of new authentication, testing not yet complete
    
    Quite thorough tests of all authentication features
    
    Added other functionality: add to each link a 'methods' field containing
    the allowed methods.
    This is not tested completely yet.
    
    Auth integration and sessions not tested yet.
    Updated requirements and fixed small things
    
    Note: We are now on flask 0.10, not the latest 0.11
    
    There seems to be an error with the TestClient, which crashes
    on abort because of a change in 0.11.
    
    Needs more investigation, though
    Added method to create root user to mongo_manage
    
    Note: We should probably rework our manage.py.
    (Possibly with the new flask cli?)
    
    But now we can use
    
        > python manage.py initdb
    
    to create a root user in the database.
    The tests to this as well.
    Flake8 fixes and minor changes to utils and settings
    
    In settings uncommented the ID_FIELD option since it was causing trouble
    in utils used itertools counter
    Testing db works now.
    
    In the test settings the database name was stored in MONGO_DBTEST and Eve couldn't find it.
    Changed to key to MONGO_DBNAME and now Eve uses the correct db for testing.
    
    Also moved to test config into utils so its easier to find.
    
    Furthermore removed the automatic database drop on test setup and replaced it with an
    assert (that the db is empty) to make sure no database gets overwritten accidentially.
     tests are now running (failing, but running. it's something)
    testing creates for every test a new mongo database and removes it after the test
    Replaced db access with post_internal
    Made users a module
    
    models.py is now gone.
    
    Removed/Updated all references to it.
    Made studydocs a module
    Made Joboffers a module
    Moved Session model and schema to auth module
    
    adjusted all files that needed Session model
    All group related functionality is now in groups.py
    
    This includes model, schema, validation as well as group_permission and mailinlist hooks.
    
    All other files have been adjusted to import correctly.
    Made events.py the first api module.
    
    Moved everything from models and schemas regarding events (and eventsignups) to confirm.py and renamed this to events.py
    
    Added new utility functions to safely extend domain and validator.
    Had to modify auth a little to work together with new structure - owner/registered_methods/public_methods etc are now stored in the domain aswell.
    
    Needed to move declaration of storage to schemas.py because of this (since the info does not need to be in the model anymore, but in the domain)
    Renamed everything correctly
    
    Used new resource names in all files
    Code cleanup and tests
    
    Removed several parts of code not needed anymore
    
    wrote tests to cover more functionality
    
    Added new validation rules
    Renamed is_public fields of Events and Groups
    
    Group.is_public -> Group.allow_self_enrollment
    Event.is_public -> Event.allow_email_signup
    
    The fields have different meanings but had the same name
    
     See issue #99
    Renamed Group.owner_id to Group.moderator_id
    
    owner is used to refer to holders of special permissions. For
    groups this includes members of the group and therefore owner_id is
    a misleading name.
    Finished group permissions, added tests
    
    Removed all old permission tests and cron utilities.
    Fix for tests after commit e6f3267b550ac69e781f1b54eb1e21845fb411c3
    models/User: add password validation / transparent password hashing
    tests/util: refactor, use dict.setdefault/update instead of if-chains
    Removed username, added email login
    
    Closes #80
    
    Instead of using the username for a session, it now uses the nethz.
    (which is will be it almost all cases anyways)
    
    Alternatively you can now login with email, but you have to explicitly
    state so by using a "email" field instead of "nethz" field in your post to
    sessions.
    
    Updated tests and docs.
    
    Also moved sessions test into auth test because they were doing the same.
    New group/forward system
    
    Forwards are now managed in the following way:
    
    - Users can be added to groups
    - Groups can have any number of mail addresses forwarded to
    - Anonymous addresses can be added to groups
    - Anonymous addresses can be added to public groups using email
      confirmation
    - Group owners can add users or addresses to their groups
    Python3 fixes
    - more unicode/bytearray conversion
    - reduce was removed in favor of for loops
    - generator/list conversion
    Shortened license header to important info
    Added AGPL license, content encoding, updated setup.py
    moved token_generator to utils
    test util creates token for forwardaddresses and eventsignups
    Coding style fixes
    
    See #62
    Removed environments
    
    As tests are independent now and it is unlikely to have a development
    and production server in the same folder environments are not needed
    anymore
    Tests create their own environment(db, folders)
    
    One can specify using manage.py to use the configured MySQL server, but
    a random database will be created there.
    token generator named by what it does
    Extended documentation, style fixes
    
    - many docstrings include params and return value now
    - """ only for docstrings
    - no \ line continuation
    Fixed errors in hooks
    
    - Inserting nonexisting foreign key in test_file_endpoint
    - Using undefined array index in test_hooks
    - ID of some object was assumed to be some value
    deleted Confirm data-class
    not needed any more
    intriducing a new confirmation system
    still not working 100%
    Refactoring of authentification, fix that g.logged_in_user is always set
    third commit for new confirmation system
    
    applied changes in model and resources to tests/util and permission_matrix
    Fixes for tests and media
    
    Several tests had some little bugs which are now fixed
    
    file test works now that util doesn't enforce json, only when not
    specified (because file tests need multipart/form-data)
    
    delete in media doesnt fail anymore if no filename is specified
    (e.g. when creating an event without images and then deleting it)
    
    forgot another instance of job_offer title in permission matrix in
    last fix
    
    In models I failed when merging and forgot to delete two lines that
    are not necessary anymore and were causing trouble
    Update to Eve 0.5.1 + Eve SQLAlchemy fork
    
    Eve 0.5 moved SQLAlchemy support to a different package. We follow the
    official eve repository now and use a fork of the extension. Changes are
    only imports except for authentification.
    
    The big change introduced by this is that the lookup query parameter now
    only understands python syntax, but has support for embedding with it.
    
    The fork introduces that values returned by Eve are now dict and
    the SQLAResult class is removed of Eve-Sqlalchemy for now to resolve
    problems with hooks, json and possibly other unexspected behaviour.
    
    See issue #11 in eve-sqlalchemy
    https://github.com/RedTurtle/eve-sqlalchemy/issues/11
    made a function for the annoying 2 line code counting the number of lines in a db table and comparing it with a number
    Now only 1 Line (YAY)
    Backend for mail forwards
    Forwards have a public flag now
    
    If a forward is public any user can self enroll to that forward. If that
    field is not set, then only admins and the list owner can add people.
    New simpler token generation
    
    Tokens are now random bytes instead of signed information.
    It is very unlikely anybody would have ever used the signed information.
    Furthermore the information can not reflect changes(logout) at the
    server, so any client would have had to connect to the server and check
    the token with the API anyway. Changing to random tokens decreases code
    complexity.
    Made test/util Flake8 conform again
    
    Forget to run the tests, corrected mistakes.
    
    And its 23:30 on 31. Dez. 2014. I really should stop doing this.
    
    Happy new year, everyone!
    Custom file endpoint: Added test and varia
    
    Renamed the file from download to file_endpoint to make the purpose
    clearer.
    Modified bootstrap to work with the new filename.
    Added authentification test for the file endpoint.
    Added a function 'new_file' in the test/util that allows creating a file
    entry in the database (and creates a file in the storage folder as well)
    Changed the output after a test-fail.
    usually response.json raises an error but the real problem is that eve just passes an error that is not json-formatted
    therefore i know return the response.data and response.status
    Added new_studydocument to test utils
    added new functions in test/util to create event and forward
    Tests: Util functions to generate more objects
    Tests: New util functions
    
    - Util function to find an entry in a response _items list
    - Util function to create a permission
    - Decorator to quickly create util functions to create objects
    Tests: Util functions to fill database fill metafields
    
    Also new_session function added
    Tests: TestClient support for tokens
    
    The paramter token of testclient.get, post, put, patch, delete can be
    set to a token to send with the request
    WebTest: Made the app object available for tests
    
    The app object can provide an application context to extract config options such as DATE_FORMAT
    tests: new_user function hashes the password
    create_app: rename disableAuth to disable_auth
    
    We dont use camel case for functions
    Add test base class WebTestNoAuth for tests with disabled authentification
    
    Also made test output more verbose in case of error by outputting the response
    from the server
    tests: replace api tests with new WebTests
    tests: Add base class for tests against the full WSGI stack
    
    Subclassing WebTest in your tests lets you execute requests against the api without having to run a complete server.
    Replace deprecated .count() calls with .count_documents(). (#380)
    Added option to delete an object, when a related object is deleted
    
    This can be used to automatically remove all sessions if a user is
    deleted or signups if an event is deleted.
    Added random generators for lists and media to fixtures
    Tests: remove dependency on pillow
    
    Pillow was only used to create a (static) image for testing purposes.
    Installing pillow requires the libjpeg & zlib development headers,
    which is a pain in the a** :)
    Tests: remove dependency on pillow
    
    Pillow was only used to create a (static) image for testing purposes.
    Installing pillow requires the libjpeg & zlib development headers,
    which is a pain in the a** :)
    Add validation for event description and image aspect ratio
    
    Resolves #96
    Resolves #127
    Add blacklist (#365)
    
    Add new resource blacklist and an event-signup validator to check if a user
    is on the blacklist. People can be on the blacklist for multiple
    separate reasons, therefore blacklist is a new resource and not a single
    field in the user resource.
    Adds email send functionality to blacklist (#378)
    
    Adds some functions that send out an email to a user everytime a new
    entry on the blacklist is created for him or one of his entries changed
    (patched). The emails include the reason for the blacklist entry and the
    price if it exists.
    Add blacklist (#365)
    
    Add new resource blacklist and an event-signup validator to check if a user
    is on the blacklist. People can be on the blacklist for multiple
    separate reasons, therefore blacklist is a new resource and not a single
    field in the user resource.
    Testing db works now.
    
    In the test settings the database name was stored in MONGO_DBTEST and Eve couldn't find it.
    Changed to key to MONGO_DBNAME and now Eve uses the correct db for testing.
    
    Also moved to test config into utils so its easier to find.
    
    Furthermore removed the automatic database drop on test setup and replaced it with an
    assert (that the db is empty) to make sure no database gets overwritten accidentially.
     tests are now running (failing, but running. it's something)
    testing creates for every test a new mongo database and removes it after the test
    bootstrap: use the dialect to determine if we're running on MySQL or not
    
    A small test case has been added to prevent further bugs.
    tests: allow testing with sqlite database again
    
    After the changes in 86b600fc sqlite did not work anymore.
    tests: refactor engine creation to use only one connection for setup
    
    Closes #88
    Dependencies: replace mysql-connector-python with mysqlclient
    
    mysqlclient is a drop-in replacement for MySQL-Python with Python 3 compatability.
    Shortened license header to important info
    Added AGPL license, content encoding, updated setup.py
    Fixes for previous commits
    
    - Forgot to remove environment in tests.util.teardown
    - Wrong string concatenation
    - More code style improvement
    Removed environments
    
    As tests are independent now and it is unlikely to have a development
    and production server in the same folder environments are not needed
    anymore
    Tests create their own environment(db, folders)
    
    One can specify using manage.py to use the configured MySQL server, but
    a random database will be created there.
    Moved init_database to bootstrap to improve dependencies
    Fixed errors in hooks
    
    - Inserting nonexisting foreign key in test_file_endpoint
    - Using undefined array index in test_hooks
    - ID of some object was assumed to be some value
    Made more precise error message when creating an already existing
    database
    Make manage.py ask to delete database, also more verbose
    
    If a database already exists manage.py create_database will ask and drop
    it. Also the full command to create the database is shown when
    create_config is executed.
    Databases are now created in utils.py, so the method can be used by tests
    tests: Add base class for tests against the full WSGI stack
    
    Subclassing WebTest in your tests lets you execute requests against the api without having to run a complete server.
    tests: move files into amivapi-module
    
    With this they are part of the regular amivapi-module.
    Introduced unit testing with some example test cases
    To run the tests use "python -m unittest discover" in the project top level folder
    First working example built with Eve's sqlalchemy branch
    
    Relations between the models are not yet correctly set up, the Eve
    schema is not yet optimal (should contain some more restrictions),
    and responses currently don't include fields which are "null".
    Forget to commit that a test was removed.
    New test fixture system
    
    The new system can guess missing fields based on the context
    of the fixture. The schema is parsed, so all kind of objects
    can be generated using WebTest.load_fixture and WebTest.create_object
    for convenience
    Split up user tests for clarity
    Renamed tests/util to test/utils
    
    I know its stupid, but it was really annoying me that we had both a
    util and a utils file ^^
    Restructured all tests
    
    The tests are now in the directories of the respective module, e.g. all
    users tests are in the /tests/users directory.
    
    Tests can be run with
            py.test amivapi/tests
    
    All not-updated tests have been moved to the "old tests" directory
    Some of them might even work with the new version, but I haven't checked
    that yet
    Added auth class to users
    
    tests not done yet though.
    Fixed some user tests and problems
    
    I forget to complete some tests. While doing so I found some
    errors and fixed them. Yay :)
    
    There is now a root user in the db with id:
    000000000000000000000000 (24 zeros)
    
    Make sure to call
    
        python mongo_manage.py initdb
    
    to create it
    Improved password hashing tests.
    
    User tests without auth are now complete.
    Updated user resource to mongo
    
    Auth part is yet missing, but tests are somewhat updated.
    Created user domain
    
    First step to go away from sql.
    Made users a module
    
    models.py is now gone.
    
    Removed/Updated all references to it.
    Fix bug that non-members could log in.
    
    A POST to /sessions so far only checked if a user is in the database.
    If you can get a session you are treated like a member and have access to files etc.
    
    But actually your membership can be set to "none" and you should not be able to log in.
    
    Added a test to show this behaviour and modified POST to /sessions to check membership status.
    
    At the same time separated LDAP part of POST to /sessions better and improved logging.
    Moved user hooks to validation for flexibility
    
    Cleaned up related code.
    
    Also moved the related tests to user tests.
    
    Changed ldap part in authentication to take advantage of the new
    functionality
    Removed username, added email login
    
    Closes #80
    
    Instead of using the username for a session, it now uses the nethz.
    (which is will be it almost all cases anyways)
    
    Alternatively you can now login with email, but you have to explicitly
    state so by using a "email" field instead of "nethz" field in your post to
    sessions.
    
    Updated tests and docs.
    
    Also moved sessions test into auth test because they were doing the same.
    Python3 fixes
    - more unicode/bytearray conversion
    - reduce was removed in favor of for loops
    - generator/list conversion
    Shortened license header to important info
    Added AGPL license, content encoding, updated setup.py
    Removed print without parantheses
    User password hashes are never exposed
    
    Also changed user collection test accordingly and made test for hidden
    passwords better.
    Email fields are now validated by regex
    
    This is only against accidential errors. Therefore we dont need a complex regex.
    We could even do less for validation. If you want a bigger regex read:
    http://davidcel.is/blog/2012/09/06/stop-validating-email-addresses-with-regex/
    Change tests to work with current API including authentification and hooks
    tests: replace api tests with new WebTests
    tests: move files into amivapi-module
    
    With this they are part of the regular amivapi-module.
    Separated constants and settings. Settings are now in config.py and constants are still in run.py
    
    Added username field to User(extraordinary users do not have nethz for login)
    
    Renamed Session.token to Session.signature
    Added unittest for flake8
    Added requirement flake8
    
    Added field password to User
    Added field token to Session
    Introduced unit testing with some example test cases
    To run the tests use "python -m unittest discover" in the project top level folder
    Add newsletter subscriber export endpoint
    
    Resolves #242
    Restructured all tests
    
    The tests are now in the directories of the respective module, e.g. all
    users tests are in the /tests/users directory.
    
    Tests can be run with
            py.test amivapi/tests
    
    All not-updated tests have been moved to the "old tests" directory
    Some of them might even work with the new version, but I haven't checked
    that yet
    First working example built with Eve's sqlalchemy branch
    
    Relations between the models are not yet correctly set up, the Eve
    schema is not yet optimal (should contain some more restrictions),
    and responses currently don't include fields which are "null".
    Update documentation for user resource (#319)
    Set minlength for password (#287)
    
    Set a min length for passwords.
    
    Closes #287
    Stop non-admins from querying restricted fields. (#270)
    
    Fields like legi number are hidden from non-admin users.
    Nevertheless, it was possible to query for those fields, e.g. for a
    particular legi number, which will only return a single result.
    
    And even if the legi number is hidden, since it is unique it can be
    matched to its user without problem.
    
    Changes:
    - Eve already allows restricting query parameters, which is now done
      dynamically for user requests
    - Test included
    GET to /users now projects a password_set field (#223)
    
    /users now includes a password_set field
    Run hooks on embedded documents (#199)
    Fixed import order to conform to the google style guide
    
    - Three groups: standard lib, external packages, internal imports
    - No relative imports
    - Sorted alphabetically and case insensitive in the groups
    New test fixture system
    
    The new system can guess missing fields based on the context
    of the fixture. The schema is parsed, so all kind of objects
    can be generated using WebTest.load_fixture and WebTest.create_object
    for convenience
    Removed password projection stuff from users.
    
    See previous commit: Eve intends to leave the projection entirely up to
    the user. So we conform to that and exclude fields based on permissions
    in a hook (and always remove password from response)
    Finished limited field of views without projection
    
    Reason: Currently the projection is intended as a feature for user side
    in eve. The projection in eve will always be overwritten by the request
    and there are no easy ways to prohibit this.
    
    So we now use a hook that will remove all hiden fields from the response
    depending on the current user.
    
    Performance wise, this is probably not optimal, but I think user request
    are not happening so much that this would be an issue (unlike e.g. event
    which will be accessed everytime someone opens the amiv page)
    Moved rehashing to sessions, removed from users, added tests
    
    In the users module it would lead to a infinite import
    (auth imports users imports auth imports ..)
    
    Fixed now and added tests
    Split up user tests for clarity
    Renamed tests/util to test/utils
    
    I know its stupid, but it was really annoying me that we had both a
    util and a utils file ^^
    Restructured all tests
    
    The tests are now in the directories of the respective module, e.g. all
    users tests are in the /tests/users directory.
    
    Tests can be run with
            py.test amivapi/tests
    
    All not-updated tests have been moved to the "old tests" directory
    Some of them might even work with the new version, but I haven't checked
    that yet
    Added auth class to users
    
    tests not done yet though.
    Fixed some user tests and problems
    
    I forget to complete some tests. While doing so I found some
    errors and fixed them. Yay :)
    
    There is now a root user in the db with id:
    000000000000000000000000 (24 zeros)
    
    Make sure to call
    
        python mongo_manage.py initdb
    
    to create it
    Improved password hashing tests.
    
    User tests without auth are now complete.
    Updated user resource to mongo
    
    Auth part is yet missing, but tests are somewhat updated.
    Created user domain
    
    First step to go away from sql.
    Made users a module
    
    models.py is now gone.
    
    Removed/Updated all references to it.
    Fix bug that non-members could log in.
    
    A POST to /sessions so far only checked if a user is in the database.
    If you can get a session you are treated like a member and have access to files etc.
    
    But actually your membership can be set to "none" and you should not be able to log in.
    
    Added a test to show this behaviour and modified POST to /sessions to check membership status.
    
    At the same time separated LDAP part of POST to /sessions better and improved logging.
    Moved user hooks to validation for flexibility
    
    Cleaned up related code.
    
    Also moved the related tests to user tests.
    
    Changed ldap part in authentication to take advantage of the new
    functionality
    Removed username, added email login
    
    Closes #80
    
    Instead of using the username for a session, it now uses the nethz.
    (which is will be it almost all cases anyways)
    
    Alternatively you can now login with email, but you have to explicitly
    state so by using a "email" field instead of "nethz" field in your post to
    sessions.
    
    Updated tests and docs.
    
    Also moved sessions test into auth test because they were doing the same.
    Python3 fixes
    - more unicode/bytearray conversion
    - reduce was removed in favor of for loops
    - generator/list conversion
    Shortened license header to important info
    Added AGPL license, content encoding, updated setup.py
    Removed print without parantheses
    User password hashes are never exposed
    
    Also changed user collection test accordingly and made test for hidden
    passwords better.
    Email fields are now validated by regex
    
    This is only against accidential errors. Therefore we dont need a complex regex.
    We could even do less for validation. If you want a bigger regex read:
    http://davidcel.is/blog/2012/09/06/stop-validating-email-addresses-with-regex/
    Change tests to work with current API including authentification and hooks
    tests: replace api tests with new WebTests
    tests: move files into amivapi-module
    
    With this they are part of the regular amivapi-module.
    Separated constants and settings. Settings are now in config.py and constants are still in run.py
    
    Added username field to User(extraordinary users do not have nethz for login)
    
    Renamed Session.token to Session.signature
    Added unittest for flake8
    Added requirement flake8
    
    Added field password to User
    Added field token to Session
    Introduced unit testing with some example test cases
    To run the tests use "python -m unittest discover" in the project top level folder
    Fixed import order to conform to the google style guide
    
    - Three groups: standard lib, external packages, internal imports
    - No relative imports
    - Sorted alphabetically and case insensitive in the groups
    Added show_website flag to joboffers and reworked other fields
    Small Flake8 correction
    Added some comments to the tests
    [{-_-}]ZZZZzzzz zz z.... All to sleep, the last sacrifice of time to Flake8 The God of Python Syntax has been made; Flake8 is clear for now...
    Corrections to please the PEP8 God of Python Syntax
    Removed author field from JobOffers; Added Preprocessor for joboffer for required field; Created two JobOffers tests
    Temp save to local changes; JobOffers tests on the way
    Update documentation for groups resource (#318)
    Configure Eve to not merge nested documents (#295)
    
    In it's default configuration, Eve merges nested documents on PATCH,
    and therefore using PATCH, it is impossible to delete keys from nested
    documents, e.g. it is not possible to remove single permissions from groups.
    
    We patched Eve to allow turning this feature off.
    
    With the switch to Eve 0.8, this feature is included in Eve and
    so this patch can turn off merging of nested documents.
    
    To make sure it's working, a test is added.
    
    Resolves #267.
    Update Eve to version 0.8
    
    * Update to Eve 0.8
    
    Eve 0.8 brings Cerberus 1.0, which requires lots of changes:
    - Several properties have been renamed
    - type checking is now handled differently
    - validation rules require a schema in the docstring to validate the schema
      itself
    
    Additional Changes in Eve itself:
    - A PATCH on a document which misses a field having a default value will now
      result in setting this value, even if the field was not provided in the
      PATCH’s payload. (From Eve changelog)
    - Some error messages changed.
    Rename `has_zoidberg_share` to `requires_storage` (Resolves #182) (#238)
    auth hooks can work with embedded relations
    
    Fixes #195
    Added lookfor by group name for groups. Closes #138
    Updated groups to new funcitonality, small validation functions still missing
    Changed names of variables which overwrote python builtins
    Finished group validation
    Updated groups to new funcitonality, small validation functions still missing
    Update Eve to version 0.8
    
    * Update to Eve 0.8
    
    Eve 0.8 brings Cerberus 1.0, which requires lots of changes:
    - Several properties have been renamed
    - type checking is now handled differently
    - validation rules require a schema in the docstring to validate the schema
      itself
    
    Additional Changes in Eve itself:
    - A PATCH on a document which misses a field having a default value will now
      result in setting this value, even if the field was not provided in the
      PATCH’s payload. (From Eve changelog)
    - Some error messages changed.
    Add Oauth2 login, remove python2
    
    This commit mainly implements shiny new OAuth2 functionality to the API,
    in form of a central login page which can be used for *Implicit Grants*.
    
    Documentation for this new feature included.
    
    Along this we decided to drop python 2 support to simplify the new
    feature. This lead to cleaning up other parts of the code as well.
    
    Finally, Travis and tox were adjusted to drop python2 as well.
    LDAP v3 (#250)
    
    Until now, only the `ou` field form ldap was used to determine a students' department.
    
    As it turns out, departments are never deleted from this list, i.e. if a student switches from ITET to INFK, both departments will be in the list, not only the current department.
    
    We now use the `deparmentNumber` field to determine the department. It is a little bit more effort to parse, but at least we reliably know a students department now.
    Create mailing list files remotely via ssh. (#243)
    
    Until now, mailing list files are created locally.
    For the mailing lists to actually work, they need to be copied to a remote
    server.
    
    This copying is now included in AMIVAPI, which has two main benefits:
    
    - No local files are required anymore, useful for future deployment with docker
    - No external copying tool is required to make mailing lists work with amivapi
    
    Unfortunately, the mailing list server supports *only* ssh connections,
    therefore we have no other option to transfer the files.
    
    While I do not think this is a very *good* solution, I believe its the *best*
    approach we have available.
    
    Closes #239.
    Improve mailing list config handling and cli. (#231)
    Updated groups to new funcitonality, small validation functions still missing
    Fixed import order to conform to the google style guide
    
    - Three groups: standard lib, external packages, internal imports
    - No relative imports
    - Sorted alphabetically and case insensitive in the groups
    Updated groups to new funcitonality, small validation functions still missing
    Replace deprecated .count() calls with .count_documents(). (#380)
    Added expiry date to group memberships
    Updated groups to new funcitonality, small validation functions still missing
    Testing db works now.
    
    In the test settings the database name was stored in MONGO_DBTEST and Eve couldn't find it.
    Changed to key to MONGO_DBNAME and now Eve uses the correct db for testing.
    
    Also moved to test config into utils so its easier to find.
    
    Furthermore removed the automatic database drop on test setup and replaced it with an
    assert (that the db is empty) to make sure no database gets overwritten accidentially.
     tests are now running (failing, but running. it's something)
    testing creates for every test a new mongo database and removes it after the test
    bootstrap: use the dialect to determine if we're running on MySQL or not
    
    A small test case has been added to prevent further bugs.
    tests: allow testing with sqlite database again
    
    After the changes in 86b600fc sqlite did not work anymore.
    tests: refactor engine creation to use only one connection for setup
    
    Closes #88
    Dependencies: replace mysql-connector-python with mysqlclient
    
    mysqlclient is a drop-in replacement for MySQL-Python with Python 3 compatability.
    Shortened license header to important info
    Added AGPL license, content encoding, updated setup.py
    Fixes for previous commits
    
    - Forgot to remove environment in tests.util.teardown
    - Wrong string concatenation
    - More code style improvement
    Removed environments
    
    As tests are independent now and it is unlikely to have a development
    and production server in the same folder environments are not needed
    anymore
    Tests create their own environment(db, folders)
    
    One can specify using manage.py to use the configured MySQL server, but
    a random database will be created there.
    Moved init_database to bootstrap to improve dependencies
    Fixed errors in hooks
    
    - Inserting nonexisting foreign key in test_file_endpoint
    - Using undefined array index in test_hooks
    - ID of some object was assumed to be some value
    Made more precise error message when creating an already existing
    database
    Make manage.py ask to delete database, also more verbose
    
    If a database already exists manage.py create_database will ask and drop
    it. Also the full command to create the database is shown when
    create_config is executed.
    Databases are now created in utils.py, so the method can be used by tests
    tests: Add base class for tests against the full WSGI stack
    
    Subclassing WebTest in your tests lets you execute requests against the api without having to run a complete server.
    tests: move files into amivapi-module
    
    With this they are part of the regular amivapi-module.
    Introduced unit testing with some example test cases
    To run the tests use "python -m unittest discover" in the project top level folder
    First working example built with Eve's sqlalchemy branch
    
    Relations between the models are not yet correctly set up, the Eve
    schema is not yet optimal (should contain some more restrictions),
    and responses currently don't include fields which are "null".
    Inhibit public signups with user mail addresses (#333)
    
    * Add test for #330
    
    * Add solution
    Update schema and documentation for event resources (#315)
    Add cascading delete to eventsignups (#298)
    
    Resolves #279
    Fix test config and eventsignup validation
    
    First of all, the test config would load sentry config from a file in the
    current working dir. Not anymore :)
    
    Furthermore, eventsignups with email would crash the API.
    
    To fix this, a proper combination of `required` and `exclude` was needed,
    which is able to to ignore None values. (None equals not set)
    
    As Cerberus is a bit inconsequential about None values
    (e.g. they can be ignored for `required`, but not for `exclude`), this
    required patching how Cerberus handles exludes.
    
    Resolves #213
    Fixed flake8 errors
    fix flake8 issues
    fix expected successful patch return to 200
    require additional_fields jsonschema constraints at validation
    adapt tests to jsonschema in additional_fields
    Improved event module tests. Coverage in the module is now 100%
    Tidied up event module and fixed some small bugs
    Update Eve to version 0.8
    
    * Update to Eve 0.8
    
    Eve 0.8 brings Cerberus 1.0, which requires lots of changes:
    - Several properties have been renamed
    - type checking is now handled differently
    - validation rules require a schema in the docstring to validate the schema
      itself
    
    Additional Changes in Eve itself:
    - A PATCH on a document which misses a field having a default value will now
      result in setting this value, even if the field was not provided in the
      PATCH’s payload. (From Eve changelog)
    - Some error messages changed.
    Add Oauth2 login, remove python2
    
    This commit mainly implements shiny new OAuth2 functionality to the API,
    in form of a central login page which can be used for *Implicit Grants*.
    
    Documentation for this new feature included.
    
    Along this we decided to drop python 2 support to simplify the new
    feature. This lead to cleaning up other parts of the code as well.
    
    Finally, Travis and tox were adjusted to drop python2 as well.
    Move secret key from config to database. (#224)
    
    Move secret key from config to database.
    Allow admins to overwrite FCFS decision for POST requests.
    
    Even if FCFS in enabled, admins should be allowed to force a signup to be accepted.
    This worked as intended for PATCH requests already, and now also works for POST.
    
    Fixes #381
    Fix event queue (#259)
    
    * Fix that event signups didn't get accepted with unlimited spots
    * Fix fixture generator for events with unlimited spots
    * Simplify event queue tests, fix response for new signups, remove hooks
    Improved event module tests. Coverage in the module is now 100%
    Added accepted field to signups with FCFS and manual selection strategies
    
    Also send emails, when people get promoted from the waiting list
    Update position field of eventsignups.
    
    - Add documentation for position field.
    - Add position field to post response.
    
    Fixes #405
    Fixes #410
    signup count split between accepted and unaccepted (#374)
    
    The signup_count was introduced such that people who do not see the signups know whether an event is full or not. However, so far also unaccepted signups are counted in, contradicting it's purpose.
    
    With this PR we split between unaccepted and accepted signups. Fixes #364.
    Fixed import order to conform to the google style guide
    
    - Three groups: standard lib, external packages, internal imports
    - No relative imports
    - Sorted alphabetically and case insensitive in the groups
    Improved event module tests. Coverage in the module is now 100%
    Substituted use of sleep in test with freezegun
    Added some comments to the tests
    Added Projections/Hooks to EventSignups GET to display position in the signups list (To know position in waitinglist, you only need 'poisition-spots'); Added Tests to test position projection in eventsignups
    Fixed error in events signup_count insertion hook and added tests
    Rewrote event resource
    Fix issue for sending event signup confirm email (#419)
    
    Ensures that a confirm email is sent to an event signup by email even
    when "user" is set to null in the request payload.
    Adds info on the registration end to acceptance email (#375)
    
    Closes #359
    Remove any None values from event emails (#373)
    
    Adds a test whether there are any None values in the email texts and removes all the two bugs which caused these so far.
    
    Closes #350
    Improved event module tests. Coverage in the module is now 100%
    Added accepted field to signups with FCFS and manual selection strategies
    
    Also send emails, when people get promoted from the waiting list
    Added option not to redirect in confirm mails.
    Rewrote event resource
    Adds info on the registration end to acceptance email (#375)
    
    Closes #359
    Add event moderators (#377)
    
    Add field to event resource that allows to specify a moderator for an event.
    Event moderators are able to:
     - make changes to an event (patch)
     - see the list of participants
    
    Only a user has write permission for its signups.
    Write permission is only given if the user_id issuing
    the request and the user_id of the targeted signup match.
    Restrict user eventsignup write access to signup window
    
    Currently, users can only signup to an event during the specified times, yet can modify (and delete!) their signup at any time, which can cause issues for the event organizers.
    
    With this patch, users can only modify their signup during the signup window. Afterwards, the signup is essentially 'frozen' for them.
    
    However, admins can still modify the signup. So if the user requires any late-minute changes, he or she must notify the event organizers, which is exactly how we'd like it :)
    
    Allows write access to /eventsignups for non-admins only within the registration window.
    Admins can write to the resource at all time.
    
    Resolves #240.
    Add check-in to eventsignups (#198)
    
    Added 'Checked In' field in eventsignups model and wrote tests to check that only users with admin rights can check in users at events.
    Fixed import order to conform to the google style guide
    
    - Three groups: standard lib, external packages, internal imports
    - No relative imports
    - Sorted alphabetically and case insensitive in the groups
    fix flake8 issues
    require additional_fields jsonschema constraints at validation
    adapt tests to jsonschema in additional_fields
    Improved event module tests. Coverage in the module is now 100%
    Tidied up event module and fixed some small bugs
    Rewrote event resource
    Fix that dependencies are not correctly checked when fields are deleted. (#376)
    
    Fix that dependencies are not correctly checked when fields are deleted (aka set to None) with PATCH.
    Fix issue #176 (#193)
    Add blacklist (#365)
    
    Add new resource blacklist and an event-signup validator to check if a user
    is on the blacklist. People can be on the blacklist for multiple
    separate reasons, therefore blacklist is a new resource and not a single
    field in the user resource.
    Add validation for event description and image aspect ratio
    
    Resolves #96
    Resolves #127
    Update Eve to version 0.8
    
    * Update to Eve 0.8
    
    Eve 0.8 brings Cerberus 1.0, which requires lots of changes:
    - Several properties have been renamed
    - type checking is now handled differently
    - validation rules require a schema in the docstring to validate the schema
      itself
    
    Additional Changes in Eve itself:
    - A PATCH on a document which misses a field having a default value will now
      result in setting this value, even if the field was not provided in the
      PATCH’s payload. (From Eve changelog)
    - Some error messages changed.
    Extended event validator tests for only if not null
    
    - Fixed some docstrings
    - Added dedicated test for 'only if not null'.
    - Further specified test to check zero values
    require additional_fields jsonschema constraints at validation
    adapt tests to jsonschema in additional_fields
    Improved event module tests. Coverage in the module is now 100%
    Tidied up event module and fixed some small bugs
    Added fields time_advertising_start, time_advertising_end and priority to events
    Fixed issue #141: later_than validator assumed fields existed previously in patch
    Tests and fixes for event times. Closes #134
    Now that requirements are gone, clear up tests and remove copypaste stuff
    Flake8 fixes for validation tests.
    Removed if not null condition on spots, replaced by cerberus setting dependency
    Rewrote event resource
    Add blacklist (#365)
    
    Add new resource blacklist and an event-signup validator to check if a user
    is on the blacklist. People can be on the blacklist for multiple
    separate reasons, therefore blacklist is a new resource and not a single
    field in the user resource.
    Testing db works now.
    
    In the test settings the database name was stored in MONGO_DBTEST and Eve couldn't find it.
    Changed to key to MONGO_DBNAME and now Eve uses the correct db for testing.
    
    Also moved to test config into utils so its easier to find.
    
    Furthermore removed the automatic database drop on test setup and replaced it with an
    assert (that the db is empty) to make sure no database gets overwritten accidentially.
     tests are now running (failing, but running. it's something)
    testing creates for every test a new mongo database and removes it after the test
    bootstrap: use the dialect to determine if we're running on MySQL or not
    
    A small test case has been added to prevent further bugs.
    tests: allow testing with sqlite database again
    
    After the changes in 86b600fc sqlite did not work anymore.
    tests: refactor engine creation to use only one connection for setup
    
    Closes #88
    Dependencies: replace mysql-connector-python with mysqlclient
    
    mysqlclient is a drop-in replacement for MySQL-Python with Python 3 compatability.
    Shortened license header to important info
    Added AGPL license, content encoding, updated setup.py
    Fixes for previous commits
    
    - Forgot to remove environment in tests.util.teardown
    - Wrong string concatenation
    - More code style improvement
    Removed environments
    
    As tests are independent now and it is unlikely to have a development
    and production server in the same folder environments are not needed
    anymore
    Tests create their own environment(db, folders)
    
    One can specify using manage.py to use the configured MySQL server, but
    a random database will be created there.
    Moved init_database to bootstrap to improve dependencies
    Fixed errors in hooks
    
    - Inserting nonexisting foreign key in test_file_endpoint
    - Using undefined array index in test_hooks
    - ID of some object was assumed to be some value
    Made more precise error message when creating an already existing
    database
    Make manage.py ask to delete database, also more verbose
    
    If a database already exists manage.py create_database will ask and drop
    it. Also the full command to create the database is shown when
    create_config is executed.
    Databases are now created in utils.py, so the method can be used by tests
    tests: Add base class for tests against the full WSGI stack
    
    Subclassing WebTest in your tests lets you execute requests against the api without having to run a complete server.
    tests: move files into amivapi-module
    
    With this they are part of the regular amivapi-module.
    Introduced unit testing with some example test cases
    To run the tests use "python -m unittest discover" in the project top level folder
    First working example built with Eve's sqlalchemy branch
    
    Relations between the models are not yet correctly set up, the Eve
    schema is not yet optimal (should contain some more restrictions),
    and responses currently don't include fields which are "null".
    Fix home link methods (#363)
    
    For the home endpoint, some link methods were incorrect, i.e. the API would report that some methods are allowed for the current user (although they were not) and some of the reported methods would not be allowed.
    
    This was the result of to unrelated problems:
    
    1. Not allowed `HEAD`: Eve automatically allows `HEAD` requests if `GET` is possible. However, if `GET` is set to `public_methods`, `HEAD` *is not* automatically included, and has to be set explicitly. Unaware of this, the API would report that `HEAD` is allowed, while it was not. I have corrected the respective resource configs such that `HEAD` is allowed whenever `GET` is, as it is intended.
    
    2. Allowed `GET` if it is not: Some resources using `AdminOnlyAuth` would not create a user lookup filter, but instead `abort`. The API had no way to check this properly, and would report that `GET` is possible (even if it would be aborted. I have changed the output of creating a lookup filter such that not allowing *any* lookup for a user can be properly returned. Now the API can correctly determine whether `GET` is possible or not.
    
    Aside from that, I improved the tests for links on `/` to actually test all reported methods.
    
    Closes #343.
    Make link methods compatible with custom resource titles (#314)
    
    Previously, link methods would check the `title` field to identify a link
    resource, which does not work if an alternative title is used.
    Using the `href` field, this issue does not exist.
    Improve hooks, ensure private user fields are always hidden
    
    User fields like the password hash were visible after PATCH.
    
    The solution to this issue was to use a more general hook that can run after all requests in addition the the database hook.
    
    For this hook, a bit of parsing utilities were added, which turned out to be useful in other locations, too.
    
    Fixes #216
    Add Oauth2 login, remove python2
    
    This commit mainly implements shiny new OAuth2 functionality to the API,
    in form of a central login page which can be used for *Implicit Grants*.
    
    Documentation for this new feature included.
    
    Along this we decided to drop python 2 support to simplify the new
    feature. This lead to cleaning up other parts of the code as well.
    
    Finally, Travis and tox were adjusted to drop python2 as well.
    Fixed import order to conform to the google style guide
    
    - Three groups: standard lib, external packages, internal imports
    - No relative imports
    - Sorted alphabetically and case insensitive in the groups
    New test fixture system
    
    The new system can guess missing fields based on the context
    of the fixture. The schema is parsed, so all kind of objects
    can be generated using WebTest.load_fixture and WebTest.create_object
    for convenience
    Added write_resource_method
    
    Needed for e.g. study documents, where POST is neither public nor
    reserved for admins -> we need to be able to verify per user wheter POST
    is allowed.
    
    Updated link_methods and tests
    Python 3 compatibility fix
    Fixed link method bug for unsuccesful patches
    
    Errors would call the link methods hooks to, which would then crash
    because there are no _links in the error response.
    
    Hook now only acts on 200 responses.
    Finished tests for link methods.
    
    Home endpoint link methods work properly now:
    - Resource admin is determined per resource
    
    Furthermore:
    - Framework for group and api key auth is in place
    Added link method integration tests, fixed bugs
    
    Some methods were not playing together with Eve
    as intended, but now they should.
    
    One problem with "home" remains.
    Restructured auth tests to remove some copied code
    Python 3 compatibility fixes
    Renamed tests/util to test/utils
    
    I know its stupid, but it was really annoying me that we had both a
    util and a utils file ^^
    Restructured all tests
    
    The tests are now in the directories of the respective module, e.g. all
    users tests are in the /tests/users directory.
    
    Tests can be run with
            py.test amivapi/tests
    
    All not-updated tests have been moved to the "old tests" directory
    Some of them might even work with the new version, but I haven't checked
    that yet
    Rewrote link_methods for simpler testing
    
    The tests are not perfect yet, but much clearer already.
    Add Oauth2 login, remove python2
    
    This commit mainly implements shiny new OAuth2 functionality to the API,
    in form of a central login page which can be used for *Implicit Grants*.
    
    Documentation for this new feature included.
    
    Along this we decided to drop python 2 support to simplify the new
    feature. This lead to cleaning up other parts of the code as well.
    
    Finally, Travis and tox were adjusted to drop python2 as well.
    Fixed import order to conform to the google style guide
    
    - Three groups: standard lib, external packages, internal imports
    - No relative imports
    - Sorted alphabetically and case insensitive in the groups
    Improved auth code.
    
    Added some decorators to avoid reusing the same if clause all the time.
    This also made testing easier.
    Added write_resource_method
    
    Needed for e.g. study documents, where POST is neither public nor
    reserved for admins -> we need to be able to verify per user wheter POST
    is allowed.
    
    Updated link_methods and tests
    Restructured auth tests to remove some copied code
    Fix deprecation warnings. (#409)
    Update requirements and test setup. (#396)
    
    For some reason, the generic alpine image would not correctly update
    the repositories and would not find mongodb.
    
    With a fixed version, this issue does not occur anymore.
    
    Additionally, important changes due to version update:
    
    - Pytz: Dependency removed, as datetime
      can handle utc on its own.
    
    - Cerberus: `valueschema` renamed to `valuesrules`.
    
    - MongoDB: `insert` is replaced by `insert_one` and `insert_many`.
      As a consequence, ObjectIDs are retrieved
      a bit differently.
    
    - PassLib: `encrypt` renamed to `hash`.
      `vary_round` is deprecated, has it
      "provided little security and was not worth
      the additional complexity" [1].
    
    [1]: https://passlib.readthedocs.io/en/stable/history/1.7.html?highlight=vary_rounds#crypt-context-api-deprecations
    
    Closes #394 (new eve version fixes this bug)
    Fix home link methods (#363)
    
    For the home endpoint, some link methods were incorrect, i.e. the API would report that some methods are allowed for the current user (although they were not) and some of the reported methods would not be allowed.
    
    This was the result of to unrelated problems:
    
    1. Not allowed `HEAD`: Eve automatically allows `HEAD` requests if `GET` is possible. However, if `GET` is set to `public_methods`, `HEAD` *is not* automatically included, and has to be set explicitly. Unaware of this, the API would report that `HEAD` is allowed, while it was not. I have corrected the respective resource configs such that `HEAD` is allowed whenever `GET` is, as it is intended.
    
    2. Allowed `GET` if it is not: Some resources using `AdminOnlyAuth` would not create a user lookup filter, but instead `abort`. The API had no way to check this properly, and would report that `GET` is possible (even if it would be aborted. I have changed the output of creating a lookup filter such that not allowing *any* lookup for a user can be properly returned. Now the API can correctly determine whether `GET` is possible or not.
    
    Aside from that, I improved the tests for links on `/` to actually test all reported methods.
    
    Closes #343.
    Simplify keyword handling in token parsing
    
    While fixing flake8 errors I decided to simplify our token parsing altogether.
    The primary crash was happening because of the special treatments of certain
    keywords like "Token" and "Bearer", which, used on their own without an actual
    token would cause a crash.
    
    Now, the api does not treat any keyword special.
    If a keyword is provided, it is ignored. This includes:
    `Token <token>`, `Bearer <token>`, `Blablabla <token>`
    
    We advocate not using a keyword anyway, so this maximizes compatibility.
    Furthermore, since the special treatment of keywords is gone, the original
    crash cannot happen anymore.
    Fix minor coding-style issue
    Remove 'Basic' header content from test
    Clean up unnecessary spaces
    Add test to address incomplete authorization headers
    Fixed import order to conform to the google style guide
    
    - Three groups: standard lib, external packages, internal imports
    - No relative imports
    - Sorted alphabetically and case insensitive in the groups
    Removed the root user from the database.
    
    Like the anonymous user (already gone) it was needed mostly for database
    relations in sql.
    We don't really need this anymore.
    
    Therefore I removed the root user from the database. To act as root you
    don't need a session anymore, you can just send the root password as
    token. The root user is not kind of a glorified api key.
    
    This has the following advantages:
    - We don't need to initialise the db anymore
    - The users collection only contains actual people now
    
    This means the tests don't need to create the root user and generally
    the initdb function in mongo_manage is gone.
    Renamed session fields to be nicer, added data_relation
    Fixed str/objectid problem in auth.
    
    g.current_user is now always a string like intended.
    In the has_write_permission hook the item dict might contain ObjectIds,
    because the hook takes place before Eve converts them to str.
    
    Added a warning to remind of this.
    Improved auth code.
    
    Added some decorators to avoid reusing the same if clause all the time.
    This also made testing easier.
    Added write_resource_method
    
    Needed for e.g. study documents, where POST is neither public nor
    reserved for admins -> we need to be able to verify per user wheter POST
    is allowed.
    
    Updated link_methods and tests
    Separated authentication from admin check.
    
    This will be needed to determine correct permissions for all
    resources in the home endpoint.
    Restructured auth tests to remove some copied code
    Python 3 compatibility fixes
    Renamed tests/util to test/utils
    
    I know its stupid, but it was really annoying me that we had both a
    util and a utils file ^^
    Restructured all tests
    
    The tests are now in the directories of the respective module, e.g. all
    users tests are in the /tests/users directory.
    
    Tests can be run with
            py.test amivapi/tests
    
    All not-updated tests have been moved to the "old tests" directory
    Some of them might even work with the new version, but I haven't checked
    that yet
    First version of new authentication, testing not yet complete
    
    Quite thorough tests of all authentication features
    
    Added other functionality: add to each link a 'methods' field containing
    the allowed methods.
    This is not tested completely yet.
    
    Auth integration and sessions not tested yet.
    Update requirements and test setup. (#396)
    
    For some reason, the generic alpine image would not correctly update
    the repositories and would not find mongodb.
    
    With a fixed version, this issue does not occur anymore.
    
    Additionally, important changes due to version update:
    
    - Pytz: Dependency removed, as datetime
      can handle utc on its own.
    
    - Cerberus: `valueschema` renamed to `valuesrules`.
    
    - MongoDB: `insert` is replaced by `insert_one` and `insert_many`.
      As a consequence, ObjectIDs are retrieved
      a bit differently.
    
    - PassLib: `encrypt` renamed to `hash`.
      `vary_round` is deprecated, has it
      "provided little security and was not worth
      the additional complexity" [1].
    
    [1]: https://passlib.readthedocs.io/en/stable/history/1.7.html?highlight=vary_rounds#crypt-context-api-deprecations
    
    Closes #394 (new eve version fixes this bug)
    Allow session lookup via token. (#271)
    
    For most OAuth usecases, accessing tools will have the token and might need to verify whether the session still exists.
    
    This change is intended to make the process even simpler, by allowing requests of the form
    `GET /sessions/<token>`.
    Updated session tests.
    Removed the root user from the database.
    
    Like the anonymous user (already gone) it was needed mostly for database
    relations in sql.
    We don't really need this anymore.
    
    Therefore I removed the root user from the database. To act as root you
    don't need a session anymore, you can just send the root password as
    token. The root user is not kind of a glorified api key.
    
    This has the following advantages:
    - We don't need to initialise the db anymore
    - The users collection only contains actual people now
    
    This means the tests don't need to create the root user and generally
    the initdb function in mongo_manage is gone.
    Increased test performance by a factor of about 100
    
    Tests create many users. Most time testing is spent hashing
    passwords. For tests the number of hashing rounds was reduced by
    a factor of about 1000.
    New test fixture system
    
    The new system can guess missing fields based on the context
    of the fixture. The schema is parsed, so all kind of objects
    can be generated using WebTest.load_fixture and WebTest.create_object
    for convenience
    Renamed session fields to be nicer, added data_relation
    Moved rehashing to sessions, removed from users, added tests
    
    In the users module it would lead to a infinite import
    (auth imports users imports auth imports ..)
    
    Fixed now and added tests
    Updated and cleaned sessin tests.
    Session work now
    
    - Added new style auth
    - Updated tests
    - Added a few tests
    Restructured all tests
    
    The tests are now in the directories of the respective module, e.g. all
    users tests are in the /tests/users directory.
    
    Tests can be run with
            py.test amivapi/tests
    
    All not-updated tests have been moved to the "old tests" directory
    Some of them might even work with the new version, but I haven't checked
    that yet
    Changed session test to reflect the fact that all eth members can log in.
    
    This follows the reasoning in #120, find more there
    Fix bug that non-members could log in.
    
    A POST to /sessions so far only checked if a user is in the database.
    If you can get a session you are treated like a member and have access to files etc.
    
    But actually your membership can be set to "none" and you should not be able to log in.
    
    Added a test to show this behaviour and modified POST to /sessions to check membership status.
    
    At the same time separated LDAP part of POST to /sessions better and improved logging.
    Remove unnecessary print in sessions test
    Renamed test_authenticated to test_sessions
    
    Because it only tests the sessions resource and this is easier to see now
    Slight auth test improvements
    
    Check now if the correct user was authenticated
    Simplified post to /sessions
    
    Removed the part that you have to specify 'nethz' in a 'nethz' field and
    'email' in an 'email' field because it was kinda stupid.
    
    Didn't really make the code for auth easier and any frontend tool would
    require more effort (it would need to figure out wether to send the input
    as nethz or email)
    
    So I removed this again and put it in a general "user" field.
    
    I did not go back to the old "username" because we don't have usernames
    anymore.
    
    Updated tests and docs.
    
    Furthermore improved quality of post to sessions by using cerberus for
    validation (More options e.g. no empty string for username)
    Removed username, added email login
    
    Closes #80
    
    Instead of using the username for a session, it now uses the nethz.
    (which is will be it almost all cases anyways)
    
    Alternatively you can now login with email, but you have to explicitly
    state so by using a "email" field instead of "nethz" field in your post to
    sessions.
    
    Updated tests and docs.
    
    Also moved sessions test into auth test because they were doing the same.
    Changed test because mighty irrelevant
    
    Was not able to reproduce why the test fails in travis, in all local
    environments it worked.
    
    And because it will basically never that a nethz name contains a ASCII
    NULL I just changed the test.
    Fix authentification test
    Shortened license header to important info
    More tests for authentification
    Replace deprecated .count() calls with .count_documents(). (#380)
    Set minlength for password (#287)
    
    Set a min length for passwords.
    
    Closes #287
    Fixed import order to conform to the google style guide
    
    - Three groups: standard lib, external packages, internal imports
    - No relative imports
    - Sorted alphabetically and case insensitive in the groups
    Fixed bug in test_session_expiry (#164)
    
    Periodic functions were scheduled to a time, which was never reached
    due to the frozen time. The @periodic decorator is called before the
    time is frozen.
    Added periodic task to delete old sessions
    Set minlength for password (#287)
    
    Set a min length for passwords.
    
    Closes #287
    Add Oauth2 login, remove python2
    
    This commit mainly implements shiny new OAuth2 functionality to the API,
    in form of a central login page which can be used for *Implicit Grants*.
    
    Documentation for this new feature included.
    
    Along this we decided to drop python 2 support to simplify the new
    feature. This lead to cleaning up other parts of the code as well.
    
    Finally, Travis and tox were adjusted to drop python2 as well.
    Restructured all tests
    
    The tests are now in the directories of the respective module, e.g. all
    users tests are in the /tests/users directory.
    
    Tests can be run with
            py.test amivapi/tests
    
    All not-updated tests have been moved to the "old tests" directory
    Some of them might even work with the new version, but I haven't checked
    that yet
    First working example built with Eve's sqlalchemy branch
    
    Relations between the models are not yet correctly set up, the Eve
    schema is not yet optimal (should contain some more restrictions),
    and responses currently don't include fields which are "null".
    Fix deprecation warnings. (#409)
    Fixed typo
    Added new api key mechanic: They are now a resource.
    Added another apikey test because resource_admin was not tested.
    Updated apikeys
    
    Use admin and readonly admin to let auth take care of methods.
    
    Also not abort all the time, only if not public.
    Added apikeys to auth
    Metadata summary for study documents (#342)
    
    Currently, we have a lot of metadata for study docs, but no efficient way to search through it.
    In order to provide users a menu to select professors, for example, an application would have to download *all* study documents to learn the possible professors.
    
    On the other hand, this information is much needed, as most students will not know from the top of their head how exactly their professors name might be written or if their lecture can be found as 'Analysis' or 'Analysis I'
    
    This defeats the purpose of filtering study documents with metadata.
    
    Thus, this commit adds a server-side summary of metadata.
    The response contains a new meta field `_summary`, which lists the available values for all meta-data fields along with how many documents are available for them.
    
    ```
    _summary:
        professor:
            Prof. Dr. Awesome: 10
            Prof. Okay: 5
            ...
        lecture:
            ...
        ...
    ```
    
    The summary is efficiently computed using the MongoDB aggregation framework.
    Update study documents documentation and schema (#317)
    Updated studydoc metadata. Closes #136
    Tests for studydocs
    Update requirements and test setup. (#396)
    
    For some reason, the generic alpine image would not correctly update
    the repositories and would not find mongodb.
    
    With a fixed version, this issue does not occur anymore.
    
    Additionally, important changes due to version update:
    
    - Pytz: Dependency removed, as datetime
      can handle utc on its own.
    
    - Cerberus: `valueschema` renamed to `valuesrules`.
    
    - MongoDB: `insert` is replaced by `insert_one` and `insert_many`.
      As a consequence, ObjectIDs are retrieved
      a bit differently.
    
    - PassLib: `encrypt` renamed to `hash`.
      `vary_round` is deprecated, has it
      "provided little security and was not worth
      the additional complexity" [1].
    
    [1]: https://passlib.readthedocs.io/en/stable/history/1.7.html?highlight=vary_rounds#crypt-context-api-deprecations
    
    Closes #394 (new eve version fixes this bug)
    Fix home link methods (#363)
    
    For the home endpoint, some link methods were incorrect, i.e. the API would report that some methods are allowed for the current user (although they were not) and some of the reported methods would not be allowed.
    
    This was the result of to unrelated problems:
    
    1. Not allowed `HEAD`: Eve automatically allows `HEAD` requests if `GET` is possible. However, if `GET` is set to `public_methods`, `HEAD` *is not* automatically included, and has to be set explicitly. Unaware of this, the API would report that `HEAD` is allowed, while it was not. I have corrected the respective resource configs such that `HEAD` is allowed whenever `GET` is, as it is intended.
    
    2. Allowed `GET` if it is not: Some resources using `AdminOnlyAuth` would not create a user lookup filter, but instead `abort`. The API had no way to check this properly, and would report that `GET` is possible (even if it would be aborted. I have changed the output of creating a lookup filter such that not allowing *any* lookup for a user can be properly returned. Now the API can correctly determine whether `GET` is possible or not.
    
    Aside from that, I improved the tests for links on `/` to actually test all reported methods.
    
    Closes #343.
    Improve hooks, ensure private user fields are always hidden
    
    User fields like the password hash were visible after PATCH.
    
    The solution to this issue was to use a more general hook that can run after all requests in addition the the database hook.
    
    For this hook, a bit of parsing utilities were added, which turned out to be useful in other locations, too.
    
    Fixes #216
    Stop non-admins from querying restricted fields. (#270)
    
    Fields like legi number are hidden from non-admin users.
    Nevertheless, it was possible to query for those fields, e.g. for a
    particular legi number, which will only return a single result.
    
    And even if the legi number is hidden, since it is unique it can be
    matched to its user without problem.
    
    Changes:
    - Eve already allows restricting query parameters, which is now done
      dynamically for user requests
    - Test included
    Add field `password_set` to user PATCH response (Fixes #255) (#256)
    
    * Add field `password_set` to user PATCH response (Fixes #255)
    
    * Fix documentation of user hooks
    Fixed outdated docstring (#226)
    GET to /users now projects a password_set field (#223)
    
    /users now includes a password_set field
    Updated user auth class
    Removed password projection stuff from users.
    
    See previous commit: Eve intends to leave the projection entirely up to
    the user. So we conform to that and exclude fields based on permissions
    in a hook (and always remove password from response)
    Finished limited field of views without projection
    
    Reason: Currently the projection is intended as a feature for user side
    in eve. The projection in eve will always be overwritten by the request
    and there are no easy ways to prohibit this.
    
    So we now use a hook that will remove all hiden fields from the response
    depending on the current user.
    
    Performance wise, this is probably not optimal, but I think user request
    are not happening so much that this would be an issue (unlike e.g. event
    which will be accessed everytime someone opens the amiv page)
    Removed option to disable auth globally
    
    Reasoning:
    - In use, the API doesn't work without auth since everything revolves
      about which user can do what
    - Disabled auth only used in testing
    - Several functions (e.g. validators etc) would need to check if auth is
      enabled
    - The problem can be solved nicer (see below)
    
    Solution:
    - Removed the disable_auth option
    - Use the new auth hook (intended to provide groups and apikeys the
      option to extend auth) to always authenticate as root
    
    This way we do not need to provide exceptions for disabled auth, since
    the WebTestNoAuth just acts as root all the time.
    Moved rehashing to sessions, removed from users, added tests
    
    In the users module it would lead to a infinite import
    (auth imports users imports auth imports ..)
    
    Fixed now and added tests
    Some more work on users.
    
    Moved some prevent_projection to security.py,
    started work on hiding of fields (tests missing yet!)
    Added auth class to users
    
    tests not done yet though.
    Add validation for event description and image aspect ratio
    
    Resolves #96
    Resolves #127
    Add newsletter subscriber export endpoint
    
    Resolves #242
    Add test to enforce schema consistency (#324)
    
    Currently, Eve allos fields to be undefined, which basically
    only result in confusion.
    
    To be more consistent in general, this test will enforce
    that all fields are required XOR have a default value.
    Update documentation for user resource (#319)
    Add validation for event description and image aspect ratio
    
    Resolves #96
    Resolves #127
    Set minlength for password (#287)
    
    Set a min length for passwords.
    
    Closes #287
    Allow password changes only with 'recent' token (#260)
    
    To increase security, not any token may be used to change a user password.
    
    Instead, it must not be older than a certain threshold, e.g. 1 minute.
    
    This way, the user must be prompted to confirm his identity by
    logging in to change a password.
    GET to /users now projects a password_set field (#223)
    
    /users now includes a password_set field
    Indices for fields that are commonly accessed
    Some format and docs fixes (#172)
    
    * Some format and documentation fixes.
    
    * Fixes for previous commit
    
    * Formatted description a bit clearer and removed old TODO
    
    * Fixed flake8 error
    fix flake8 issues
    Removed comment with old documentation
    correct documentation format for user model
    Moved email regex to settings.py
    Removed password projection stuff from users.
    
    See previous commit: Eve intends to leave the projection entirely up to
    the user. So we conform to that and exclude fields based on permissions
    in a hook (and always remove password from response)
    Some more work on users.
    
    Moved some prevent_projection to security.py,
    started work on hiding of fields (tests missing yet!)
    Added auth class to users
    
    tests not done yet though.
    Preparation for new auth: Remove last connections of old one
    
    There was still a user hook in auth. Moved to user module
    Fixed some user tests and problems
    
    I forget to complete some tests. While doing so I found some
    errors and fixed them. Yay :)
    
    There is now a root user in the db with id:
    000000000000000000000000 (24 zeros)
    
    Make sure to call
    
        python mongo_manage.py initdb
    
    to create it
    Updated user resource to mongo
    
    Auth part is yet missing, but tests are somewhat updated.
    Created user domain
    
    First step to go away from sql.
    Made users a module
    
    models.py is now gone.
    
    Removed/Updated all references to it.
    Made studydocs a module
    Made Purchases a module
    
    Note: There appear to be no tests
    Made Joboffers a module
    Moved Session model and schema to auth module
    
    adjusted all files that needed Session model
    Circular imports gone, merged db_utils into utils.
    
    All utils are now happily in one file.
    All group related functionality is now in groups.py
    
    This includes model, schema, validation as well as group_permission and mailinlist hooks.
    
    All other files have been adjusted to import correctly.
    Made events.py the first api module.
    
    Moved everything from models and schemas regarding events (and eventsignups) to confirm.py and renamed this to events.py
    
    Added new utility functions to safely extend domain and validator.
    Had to modify auth a little to work together with new structure - owner/registered_methods/public_methods etc are now stored in the domain aswell.
    
    Needed to move declaration of storage to schemas.py because of this (since the info does not need to be in the model anymore, but in the domain)
    Moved Base models in db_utils.py.
    
    Preparing to make everything more modular.
    Couldn't put in utils for the moment since utils depends on models and we would get circular imports this way.
    After modularizing everything models.py should be gone anyway so we can then merge db_utils.py and utils.py
    Removed "foreign key" property of "email" field in eventsignups
    
    Not sure why it needed to be there anyways.
    
    It seems to not break anything, but maybe we have some untested functionality here?
    
    Hermann, you added this: Is this field necessary for something I cant see?
    Correct projected fields for users.
    
    The projected user fields still contained "groups", but since quite a while this field doesnt exist anymore.
    Renamed it to properly project "groupmemberships".
    Added missing functionality to mailinglists
    
    See tests in the previous commit.
    
    Now all hooks work as the new group functionality intends.
    
    Also gave hooks more descriptive names.
    Adjusted tests, corrected errors.
    Renamed everything correctly
    
    Used new resource names in all files
    First changes to group resources
    
    Adjusted models. Other files and tests incomplete.
    Some additional model descriptions
    Updated eventsignup validation
    
    Validation was improved for groupusermembers,
    eventsignups are similar, so I improved the validation there as well
    Clean Relationship definitons in models
    
    Closes #75, more info there
    Code cleanup and tests
    
    Removed several parts of code not needed anymore
    
    wrote tests to cover more functionality
    
    Added new validation rules
    Finished work on removing "will_be_owner"
    
    Added lots of test for groups and signup to test all functionality
    
    Added new validation to cover the functionality from "will be owner"
    
    Cleaned up schemas and added validation
    
    Added a new group hook in authorization to properly filter groups.
    
    Updated the hooks in bootstrap.
    WIP
    
    Actually just commiting so I can change pcs
    Remove will-be-owner, WIP
    
    Removed some functions already and cleaned up schema.
    
    Validator updates in schema are missing
    tests as well
    Flake8 fixes in various files
    
    Closes #101
    Enabled default embedding of Group.user_subscribers and Group.address_subscribers
    
    This makes it clearer to new users, what the content of the embedded field
    is, namely GroupUserMembers and not Users
    Renamed is_public fields of Events and Groups
    
    Group.is_public -> Group.allow_self_enrollment
    Event.is_public -> Event.allow_email_signup
    
    The fields have different meanings but had the same name
    
     See issue #99
    Renamed Group.owner_id to Group.moderator_id
    
    owner is used to refer to holders of special permissions. For
    groups this includes members of the group and therefore owner_id is
    a misleading name.
    Changed type of Group.permissions to work with MySQL
    
    JSON -> JSONText (JSON is a CHAR Type and requires a length
    in MySQL)
    Users can see their groups, owners can not delete them anymore
    Added integrity check for __owner__ fields
    Finished group permissions, added tests
    
    Removed all old permission tests and cron utilities.
    Tie permissions to groups, not yet working
    
    Every group now saves a permissions object wich is validated against a jsonschema
    
    tests still missing
    models/JSON: raise error when encountering non-JSON data from database
    Added field to groups to give them a zoidberg share
    Back to upstream eve_sqlalchemy
    
    The authorization functions are changed to work with the new version
    models/User: add password validation / transparent password hashing
    flake8 fixes
    Added readonly count of signups to events
    models: introduce JSON column type for native storage of JSON data
    Use correct Column type for text fields
    
    It is UnicodeText instead of TEXT
    
    Removed localization import from bootstrap (file does not exist anymore)
    Removed translatable fields in events and joboffers
    
    Our functionalitz was nice an all but actually a little overkill which led to confusion when using the api.
    
    And we dont have any situation where any other language than german and english.
    
    Our solution would be for a usecase with many different languages.
    
    So now we have a simplified solution which only includes german and english fields.
    
    Also added a "catchphrase" field for events.
    Added API documentation
    Added resource to log purchases for beer and kaffi
    Added flags where to show Events
    Removed username, added email login
    
    Closes #80
    
    Instead of using the username for a session, it now uses the nethz.
    (which is will be it almost all cases anyways)
    
    Alternatively you can now login with email, but you have to explicitly
    state so by using a "email" field instead of "nethz" field in your post to
    sessions.
    
    Updated tests and docs.
    
    Also moved sessions test into auth test because they were doing the same.
    Renamed event images, added one for infoscreen
    
    Closes #76
    Changed sync process because of ldap limitations
    
    Perfomance with eth ldap was very bad, so the entire structure of ldap
    requests has changed. Now all users are synched at once with ldap since it
    doesnt make sence (performance wise) to split it into small chunks.
    
    See docs and ldap.py for explanations
    So much ldap
    
    Everything. Collected everything related to ldap in ldap.py
    
    Also updated developer docs. Check there to see how everything works
    New group/forward system
    
    Forwards are now managed in the following way:
    
    - Users can be added to groups
    - Groups can have any number of mail addresses forwarded to
    - Anonymous addresses can be added to groups
    - Anonymous addresses can be added to public groups using email
      confirmation
    - Group owners can add users or addresses to their groups
    More LDAP: Sync, tests
    
    Added a _synchronized field to users that specifies last ldap sync.
    
    Also made a cronjob that updates bassed on those fields.
    
    Included tests.
    LDAP updates and testing and docs
    
    In bootstrap modified ldap setup,
    extended manage.py to create necessary fields
    authentication is now complete and imports and updates user.
    
    Because everyone gets imported, there must be a setting "other" in
    department. Updated model accordingly
    
    Also added nethz library fork to requirements
    Removed birthday and ldapAddress
    
    See #72
    Substituted send_no_mail with send_newsletter
    
    New version is more precise. In addition removed nullable flag, as this
    also modifies the schema
    Added send_no_mail field, refined User model
    Shortened license header to important info
    Added AGPL license, content encoding, updated setup.py
    More Validator
    
    Moved more validation into validator and added tests
    Modified schema
    
    Renamed 'extra_fields' in signups to 'additional_fields' for consistency
    (Modified in models, schema and renamed once in confirm)
    
    Removed test_hooks and moved content to test_eventsignups
    More Validator
    
    Moved more validation into validator and added tests
    Modified schema
    
    Renamed 'extra_fields' in signups to 'additional_fields' for consistency
    (Modified in models, schema and renamed once in confirm)
    
    Removed test_hooks and moved content to test_eventsignups
    Authorization fixes
    
    - Fix for disabled authentification
    - Custom endpoints use common_authorization
    - Create no tables for classes belonging to custom endpoints
    Extended documentation, style fixes
    
    - many docstrings include params and return value now
    - """ only for docstrings
    - no \ line continuation
    Some documentation fixes
    Fixes for MySQL support
    
    MySQL does not support CHAR columns with length more than 256.
    First row inserted with auto_increment will have its ID overwritten
    deleted Confirm data-class
    not needed any more
    more docuemntation for data-model
    intriducing a new confirmation system
    still not working 100%
    changed method-permissions for forwardaddresses and eventsignups
    Improved validation for permissions
    
    Permission validation now only uses cerberus.
    
    Added validator for future time and removed hook from validation.
    Moved the test from test_event_hooks to test_permissions because it
    tests the permissions (duh)
    Added new validation rule to the schema
    
    Furthermore added nullable=False to expiry_date in the model to make
    fit our idea: No permission should be forever
    Removed jsonify, as this is no longer needed with sql-alchemy fork
    Fixed wrong database column size for tokens
    Improved authentification docs
    second commit for new confirmation system
    
    models _ForwardAddress and _EventSignup are now internal, the access from outside is handeled by blueprints in confirm.py
    Fixes for tests and media
    
    Several tests had some little bugs which are now fixed
    
    file test works now that util doesn't enforce json, only when not
    specified (because file tests need multipart/form-data)
    
    delete in media doesnt fail anymore if no filename is specified
    (e.g. when creating an event without images and then deleting it)
    
    forgot another instance of job_offer title in permission matrix in
    last fix
    
    In models I failed when merging and forgot to delete two lines that
    are not necessary anymore and were causing trouble
    Localization added
    
    Added the possibily to translate title and description in /events and
    /joboffers
    
    For this reason added classes to models, modified schema where the model
    was insufficient and added a default language to settings
    (And a few hooks in localization which are added to bootstrap)
    
    Also added tests for all new functions in test_localization
    Modified test_permission_matrix because to work with the new layout of
    joboffers (it provided a title which now has to be posted to translations,
    so now it just sends a company name to post a offer)
    
    Also added both user and developer documentation, find more info ther
    Also added both user and developer documentation, find more info theree
    Kindof-working alpha
    
    Using information by Fubu kind of smashed into our API to get a
    first semi-working version
    
    Problems with:
    - visibility of language fields
    - _author and _etag fields
    - creation of various language fields
    First tests of language implementation
    
    Nothing else. Not working in any way yet
    added first documentation in models.py, new base-class field __description__
    
    small update to schema of users, enumerations get validated now on a higher level
    bugfix: deleting a user will delete his/her sessions
    Fixed wrong projection field in User model
    added recursive deletion incl. tests (no-auth)
    Removed confirm hooks for POST, PATCH forwardaddresses, added for DELETE
    
    Anonymous users should only be added by list owners, however they can
    remove themselves.
    Forwards have a public flag now
    
    If a forward is public any user can self enroll to that forward. If that
    field is not set, then only admins and the list owner can add people.
    Added /roles endpoint to GET available roles
    Added authentification for file download
    
    The auth class was modified to be able to use classes in
    models.py which only contain permission details and don't inherit
    Base
    Price of events is now in Rappen as integer
    Updates to Media and models
    
    In models: GET is now allowed on /files for all registered users
    Furthermore, everything related to media, which will be modified in
    schemas, has been tagged appropriately.
    
    In media: Added a few lines of commentary for better explanation.
    No functional changes.
    Bugfixes concerning files
    
    Fixes in several files:
    In Schemas added a 'required: True' to the data of the file resource
    In Models the images in joboffers and event were not created in the
    database correctly
    In Media the filestorage class was modified so it no longer breaks if a
    resource contains no file and eve still checks for no file. Now returns
    'None' correctly.
    Owners can PATCH and PUT ForwardUsers
    
    The permissions ensure that the result of the operation could have been
    reached anyway using DELETE and POST. Therefore we can also allow this
    directly.
    Added event pictures
    
    Three kinds of event picturs added to models, according to google docs
    specifications
    Adjusted the schema to recognize them as 'media'-type
    Modified models and schemas to work with files
    
    In models: Created a column for every file with CHAR(100)
    In Schemas: Changed the the corresponing fields in the schma to type:
    media so they are properly recognized by eve
    
    Also: In models added a relationship from files to studydocs with backref,
    since files are only used in combination with studydocs now
    Session: Permit delete by owner
    
    People want to log out, so they have to be able to delete their session
    change due to sqlalchemy-warning: decimal-objects not supported, prices are now strings and need to be validated by schema
    Flake8 fixes
    Modifing models for studydocs
    Removed creating file folder in manage.py -> bug
    New auth system
    
    For every request the user is put in one of four categories:
    anonymous, registered, owner or admin
    
    1. If user_id is 0 or he has a permissions where the role is admin for
    the requested resource, then the user is admin
    2. If not and the user has the id in the field refered to by any of
    the __owner__ field entries then he is owner
    3. If not and he is logged in, he is registered, else anonymous
    
    After that the methods allowed are found depending on an array in the
    model.
    For anonymous the __public_methods__ array
    For registered the __registered_methods__ array
    For owner the __owner_methods__ array
    For admin all methods are allowed
    Updated models and schemas to work with media.
    Updated models and schemas to work with media.
    events must now provide is_public and spots
    Changed User.email and User.username to non unicode fields. Unicode is annoying and there is no reason people should use unicode here.
    
    Really. Fuck unicode emails, they are only used for spam protection and to fake domains.
    Flake8 fix
    Added system for owners and affected users.
    
    Every object can have an owner and an affected user, which is referenced through some id. This can also be indirect through a relation. The owner can perform all actions on that special object without permissions for that endpoint. The affected user can always read what affects him and can through a setting also get permission to DELETE or PATCH an object.
    
    POST requests are parsed such that if the created object would belong to the posting user, access is granted. Therefore if the owner is stored in the object itself, everybody can post, effectivly creating a public resource!
    This special behaviour is used for files.
    In general the owner feature is used for forwards, which can be owned by the mailinglist owner.
    Users are now associated with rights based on their permissions.
    
    The Group resource is removed and replaced by a Permission Resource, which makes it only possible to grant and revoke permissions
    Added _author field
    Login tokens are hashed now, Only sessions resource public
    Authentification initial implementation
    
    manage.py create private+public key used to sign login tokens
    added data class Confirm to save actions which need to get confirmed
    Moved definition of the projected fields into the models for better maintainability
    
    Also reduced code size :)
    Tidied up code, flake8 conformant again
    Made plural forms of resources ending in 's' extended by 'es' as in standard English
    Tablenames are now lowercase and resource names are the tablenames
    
    Eve exspects resource names to be equal to the tablenames when creating schemata.
    This commit creates that behaviour. Before this commit it was not possible to post
    to resources, which have relationsships.
    Generalized serialization of embedded resources to base class
    
    Taken from sqlalchemy example https://github.com/nicolaiarocci/eve/blob/sqlalchemy/examples/SQL/tables.py#L34-L44
    Made the code flake8 conform again
    Enabled projections for embedded resources in GET requests
    
    To make this possible every SQL Alchemy mapped class got a new function _asdict() which returns the content of the class as a dict object. This is needed as Eve will fail to recursively add data when the data is implemented using SQL Alchemy. Instead the value of the projected field will be the returned dict object of the related class.
    Implemented own logic for presentation, little changes for flake8
    Moved the registerSchema calls to schemas.py to reduce dependencies in models.py
    
    Before this commit registerSchema decorators prohibited to have relationships to classes not yet registered. By registering the schemas later all classes can be declared first.
    Renamed email Forward resources, their names were too long.
    
    It is now forwards, forwardusers and forwardaddresses
    Changed email resource name and added support for user subscribers
    Restructured User, Group, Event and Signup mappings so they can be decorated by @registerSchema
    Die Relations zischen den Daten-Klassen sind nun richtig, ausser für Mails. Hier fehlt noch die Änderung mit den 2 Tupeln aus der Besprechung.
    models: fix pyflakes error
    models/User: add server default for membership-Enum
    
    Somehow sqlalchemy forgets to use the specified default (which is generally only applied on the Python side) when no value is set on insert.
    Separated constants and settings. Settings are now in config.py and constants are still in run.py
    
    Added username field to User(extraordinary users do not have nethz for login)
    
    Renamed Session.token to Session.signature
    Added unittest for flake8
    Added requirement flake8
    
    Added field password to User
    Added field token to Session
    First working example built with Eve's sqlalchemy branch
    
    Relations between the models are not yet correctly set up, the Eve
    schema is not yet optimal (should contain some more restrictions),
    and responses currently don't include fields which are "null".
    Improve hooks, ensure private user fields are always hidden
    
    User fields like the password hash were visible after PATCH.
    
    The solution to this issue was to use a more general hook that can run after all requests in addition the the database hook.
    
    For this hook, a bit of parsing utilities were added, which turned out to be useful in other locations, too.
    
    Fixes #216
    Add newsletter subscriber export endpoint
    
    Resolves #242
    Stop non-admins from querying restricted fields. (#270)
    
    Fields like legi number are hidden from non-admin users.
    Nevertheless, it was possible to query for those fields, e.g. for a
    particular legi number, which will only return a single result.
    
    And even if the legi number is hidden, since it is unique it can be
    matched to its user without problem.
    
    Changes:
    - Eve already allows restricting query parameters, which is now done
      dynamically for user requests
    - Test included
    Add field `password_set` to user PATCH response (Fixes #255) (#256)
    
    * Add field `password_set` to user PATCH response (Fixes #255)
    
    * Fix documentation of user hooks
    GET to /users now projects a password_set field (#223)
    
    /users now includes a password_set field
    Removed password projection stuff from users.
    
    See previous commit: Eve intends to leave the projection entirely up to
    the user. So we conform to that and exclude fields based on permissions
    in a hook (and always remove password from response)
    Finished limited field of views without projection
    
    Reason: Currently the projection is intended as a feature for user side
    in eve. The projection in eve will always be overwritten by the request
    and there are no easy ways to prohibit this.
    
    So we now use a hook that will remove all hiden fields from the response
    depending on the current user.
    
    Performance wise, this is probably not optimal, but I think user request
    are not happening so much that this would be an issue (unlike e.g. event
    which will be accessed everytime someone opens the amiv page)
    Some more work on users.
    
    Moved some prevent_projection to security.py,
    started work on hiding of fields (tests missing yet!)
    Added auth class to users
    
    tests not done yet though.
    Preparation for new auth: Remove last connections of old one
    
    There was still a user hook in auth. Moved to user module
    Fixed some user tests and problems
    
    I forget to complete some tests. While doing so I found some
    errors and fixed them. Yay :)
    
    There is now a root user in the db with id:
    000000000000000000000000 (24 zeros)
    
    Make sure to call
    
        python mongo_manage.py initdb
    
    to create it
    Updated user resource to mongo
    
    Auth part is yet missing, but tests are somewhat updated.
    Created user domain
    
    First step to go away from sql.
    Made users a module
    
    models.py is now gone.
    
    Removed/Updated all references to it.
    Made studydocs a module
    Made Purchases a module
    
    Note: There appear to be no tests
    Made Joboffers a module
    Moved Session model and schema to auth module
    
    adjusted all files that needed Session model
    Circular imports gone, merged db_utils into utils.
    
    All utils are now happily in one file.
    All group related functionality is now in groups.py
    
    This includes model, schema, validation as well as group_permission and mailinlist hooks.
    
    All other files have been adjusted to import correctly.
    Made events.py the first api module.
    
    Moved everything from models and schemas regarding events (and eventsignups) to confirm.py and renamed this to events.py
    
    Added new utility functions to safely extend domain and validator.
    Had to modify auth a little to work together with new structure - owner/registered_methods/public_methods etc are now stored in the domain aswell.
    
    Needed to move declaration of storage to schemas.py because of this (since the info does not need to be in the model anymore, but in the domain)
    Moved Base models in db_utils.py.
    
    Preparing to make everything more modular.
    Couldn't put in utils for the moment since utils depends on models and we would get circular imports this way.
    After modularizing everything models.py should be gone anyway so we can then merge db_utils.py and utils.py
    Removed "foreign key" property of "email" field in eventsignups
    
    Not sure why it needed to be there anyways.
    
    It seems to not break anything, but maybe we have some untested functionality here?
    
    Hermann, you added this: Is this field necessary for something I cant see?
    Correct projected fields for users.
    
    The projected user fields still contained "groups", but since quite a while this field doesnt exist anymore.
    Renamed it to properly project "groupmemberships".
    Added missing functionality to mailinglists
    
    See tests in the previous commit.
    
    Now all hooks work as the new group functionality intends.
    
    Also gave hooks more descriptive names.
    Adjusted tests, corrected errors.
    Renamed everything correctly
    
    Used new resource names in all files
    First changes to group resources
    
    Adjusted models. Other files and tests incomplete.
    Some additional model descriptions
    Updated eventsignup validation
    
    Validation was improved for groupusermembers,
    eventsignups are similar, so I improved the validation there as well
    Clean Relationship definitons in models
    
    Closes #75, more info there
    Code cleanup and tests
    
    Removed several parts of code not needed anymore
    
    wrote tests to cover more functionality
    
    Added new validation rules
    Finished work on removing "will_be_owner"
    
    Added lots of test for groups and signup to test all functionality
    
    Added new validation to cover the functionality from "will be owner"
    
    Cleaned up schemas and added validation
    
    Added a new group hook in authorization to properly filter groups.
    
    Updated the hooks in bootstrap.
    WIP
    
    Actually just commiting so I can change pcs
    Remove will-be-owner, WIP
    
    Removed some functions already and cleaned up schema.
    
    Validator updates in schema are missing
    tests as well
    Flake8 fixes in various files
    
    Closes #101
    Enabled default embedding of Group.user_subscribers and Group.address_subscribers
    
    This makes it clearer to new users, what the content of the embedded field
    is, namely GroupUserMembers and not Users
    Renamed is_public fields of Events and Groups
    
    Group.is_public -> Group.allow_self_enrollment
    Event.is_public -> Event.allow_email_signup
    
    The fields have different meanings but had the same name
    
     See issue #99
    Renamed Group.owner_id to Group.moderator_id
    
    owner is used to refer to holders of special permissions. For
    groups this includes members of the group and therefore owner_id is
    a misleading name.
    Changed type of Group.permissions to work with MySQL
    
    JSON -> JSONText (JSON is a CHAR Type and requires a length
    in MySQL)
    Users can see their groups, owners can not delete them anymore
    Added integrity check for __owner__ fields
    Finished group permissions, added tests
    
    Removed all old permission tests and cron utilities.
    Tie permissions to groups, not yet working
    
    Every group now saves a permissions object wich is validated against a jsonschema
    
    tests still missing
    models/JSON: raise error when encountering non-JSON data from database
    Added field to groups to give them a zoidberg share
    Back to upstream eve_sqlalchemy
    
    The authorization functions are changed to work with the new version
    models/User: add password validation / transparent password hashing
    flake8 fixes
    Added readonly count of signups to events
    models: introduce JSON column type for native storage of JSON data
    Use correct Column type for text fields
    
    It is UnicodeText instead of TEXT
    
    Removed localization import from bootstrap (file does not exist anymore)
    Removed translatable fields in events and joboffers
    
    Our functionalitz was nice an all but actually a little overkill which led to confusion when using the api.
    
    And we dont have any situation where any other language than german and english.
    
    Our solution would be for a usecase with many different languages.
    
    So now we have a simplified solution which only includes german and english fields.
    
    Also added a "catchphrase" field for events.
    Added API documentation
    Added resource to log purchases for beer and kaffi
    Added flags where to show Events
    Removed username, added email login
    
    Closes #80
    
    Instead of using the username for a session, it now uses the nethz.
    (which is will be it almost all cases anyways)
    
    Alternatively you can now login with email, but you have to explicitly
    state so by using a "email" field instead of "nethz" field in your post to
    sessions.
    
    Updated tests and docs.
    
    Also moved sessions test into auth test because they were doing the same.
    Renamed event images, added one for infoscreen
    
    Closes #76
    Changed sync process because of ldap limitations
    
    Perfomance with eth ldap was very bad, so the entire structure of ldap
    requests has changed. Now all users are synched at once with ldap since it
    doesnt make sence (performance wise) to split it into small chunks.
    
    See docs and ldap.py for explanations
    So much ldap
    
    Everything. Collected everything related to ldap in ldap.py
    
    Also updated developer docs. Check there to see how everything works
    New group/forward system
    
    Forwards are now managed in the following way:
    
    - Users can be added to groups
    - Groups can have any number of mail addresses forwarded to
    - Anonymous addresses can be added to groups
    - Anonymous addresses can be added to public groups using email
      confirmation
    - Group owners can add users or addresses to their groups
    More LDAP: Sync, tests
    
    Added a _synchronized field to users that specifies last ldap sync.
    
    Also made a cronjob that updates bassed on those fields.
    
    Included tests.
    LDAP updates and testing and docs
    
    In bootstrap modified ldap setup,
    extended manage.py to create necessary fields
    authentication is now complete and imports and updates user.
    
    Because everyone gets imported, there must be a setting "other" in
    department. Updated model accordingly
    
    Also added nethz library fork to requirements
    Removed birthday and ldapAddress
    
    See #72
    Substituted send_no_mail with send_newsletter
    
    New version is more precise. In addition removed nullable flag, as this
    also modifies the schema
    Added send_no_mail field, refined User model
    Shortened license header to important info
    Added AGPL license, content encoding, updated setup.py
    More Validator
    
    Moved more validation into validator and added tests
    Modified schema
    
    Renamed 'extra_fields' in signups to 'additional_fields' for consistency
    (Modified in models, schema and renamed once in confirm)
    
    Removed test_hooks and moved content to test_eventsignups
    More Validator
    
    Moved more validation into validator and added tests
    Modified schema
    
    Renamed 'extra_fields' in signups to 'additional_fields' for consistency
    (Modified in models, schema and renamed once in confirm)
    
    Removed test_hooks and moved content to test_eventsignups
    Authorization fixes
    
    - Fix for disabled authentification
    - Custom endpoints use common_authorization
    - Create no tables for classes belonging to custom endpoints
    Extended documentation, style fixes
    
    - many docstrings include params and return value now
    - """ only for docstrings
    - no \ line continuation
    Some documentation fixes
    Fixes for MySQL support
    
    MySQL does not support CHAR columns with length more than 256.
    First row inserted with auto_increment will have its ID overwritten
    deleted Confirm data-class
    not needed any more
    more docuemntation for data-model
    intriducing a new confirmation system
    still not working 100%
    changed method-permissions for forwardaddresses and eventsignups
    Improved validation for permissions
    
    Permission validation now only uses cerberus.
    
    Added validator for future time and removed hook from validation.
    Moved the test from test_event_hooks to test_permissions because it
    tests the permissions (duh)
    Added new validation rule to the schema
    
    Furthermore added nullable=False to expiry_date in the model to make
    fit our idea: No permission should be forever
    Removed jsonify, as this is no longer needed with sql-alchemy fork
    Fixed wrong database column size for tokens
    Improved authentification docs
    second commit for new confirmation system
    
    models _ForwardAddress and _EventSignup are now internal, the access from outside is handeled by blueprints in confirm.py
    Fixes for tests and media
    
    Several tests had some little bugs which are now fixed
    
    file test works now that util doesn't enforce json, only when not
    specified (because file tests need multipart/form-data)
    
    delete in media doesnt fail anymore if no filename is specified
    (e.g. when creating an event without images and then deleting it)
    
    forgot another instance of job_offer title in permission matrix in
    last fix
    
    In models I failed when merging and forgot to delete two lines that
    are not necessary anymore and were causing trouble
    Localization added
    
    Added the possibily to translate title and description in /events and
    /joboffers
    
    For this reason added classes to models, modified schema where the model
    was insufficient and added a default language to settings
    (And a few hooks in localization which are added to bootstrap)
    
    Also added tests for all new functions in test_localization
    Modified test_permission_matrix because to work with the new layout of
    joboffers (it provided a title which now has to be posted to translations,
    so now it just sends a company name to post a offer)
    
    Also added both user and developer documentation, find more info ther
    Also added both user and developer documentation, find more info theree
    Kindof-working alpha
    
    Using information by Fubu kind of smashed into our API to get a
    first semi-working version
    
    Problems with:
    - visibility of language fields
    - _author and _etag fields
    - creation of various language fields
    First tests of language implementation
    
    Nothing else. Not working in any way yet
    added first documentation in models.py, new base-class field __description__
    
    small update to schema of users, enumerations get validated now on a higher level
    bugfix: deleting a user will delete his/her sessions
    Fixed wrong projection field in User model
    added recursive deletion incl. tests (no-auth)
    Removed confirm hooks for POST, PATCH forwardaddresses, added for DELETE
    
    Anonymous users should only be added by list owners, however they can
    remove themselves.
    Forwards have a public flag now
    
    If a forward is public any user can self enroll to that forward. If that
    field is not set, then only admins and the list owner can add people.
    Added /roles endpoint to GET available roles
    Added authentification for file download
    
    The auth class was modified to be able to use classes in
    models.py which only contain permission details and don't inherit
    Base
    Price of events is now in Rappen as integer
    Updates to Media and models
    
    In models: GET is now allowed on /files for all registered users
    Furthermore, everything related to media, which will be modified in
    schemas, has been tagged appropriately.
    
    In media: Added a few lines of commentary for better explanation.
    No functional changes.
    Bugfixes concerning files
    
    Fixes in several files:
    In Schemas added a 'required: True' to the data of the file resource
    In Models the images in joboffers and event were not created in the
    database correctly
    In Media the filestorage class was modified so it no longer breaks if a
    resource contains no file and eve still checks for no file. Now returns
    'None' correctly.
    Owners can PATCH and PUT ForwardUsers
    
    The permissions ensure that the result of the operation could have been
    reached anyway using DELETE and POST. Therefore we can also allow this
    directly.
    Added event pictures
    
    Three kinds of event picturs added to models, according to google docs
    specifications
    Adjusted the schema to recognize them as 'media'-type
    Modified models and schemas to work with files
    
    In models: Created a column for every file with CHAR(100)
    In Schemas: Changed the the corresponing fields in the schma to type:
    media so they are properly recognized by eve
    
    Also: In models added a relationship from files to studydocs with backref,
    since files are only used in combination with studydocs now
    Session: Permit delete by owner
    
    People want to log out, so they have to be able to delete their session
    change due to sqlalchemy-warning: decimal-objects not supported, prices are now strings and need to be validated by schema
    Flake8 fixes
    Modifing models for studydocs
    Removed creating file folder in manage.py -> bug
    New auth system
    
    For every request the user is put in one of four categories:
    anonymous, registered, owner or admin
    
    1. If user_id is 0 or he has a permissions where the role is admin for
    the requested resource, then the user is admin
    2. If not and the user has the id in the field refered to by any of
    the __owner__ field entries then he is owner
    3. If not and he is logged in, he is registered, else anonymous
    
    After that the methods allowed are found depending on an array in the
    model.
    For anonymous the __public_methods__ array
    For registered the __registered_methods__ array
    For owner the __owner_methods__ array
    For admin all methods are allowed
    Updated models and schemas to work with media.
    Updated models and schemas to work with media.
    events must now provide is_public and spots
    Changed User.email and User.username to non unicode fields. Unicode is annoying and there is no reason people should use unicode here.
    
    Really. Fuck unicode emails, they are only used for spam protection and to fake domains.
    Flake8 fix
    Added system for owners and affected users.
    
    Every object can have an owner and an affected user, which is referenced through some id. This can also be indirect through a relation. The owner can perform all actions on that special object without permissions for that endpoint. The affected user can always read what affects him and can through a setting also get permission to DELETE or PATCH an object.
    
    POST requests are parsed such that if the created object would belong to the posting user, access is granted. Therefore if the owner is stored in the object itself, everybody can post, effectivly creating a public resource!
    This special behaviour is used for files.
    In general the owner feature is used for forwards, which can be owned by the mailinglist owner.
    Users are now associated with rights based on their permissions.
    
    The Group resource is removed and replaced by a Permission Resource, which makes it only possible to grant and revoke permissions
    Added _author field
    Login tokens are hashed now, Only sessions resource public
    Authentification initial implementation
    
    manage.py create private+public key used to sign login tokens
    added data class Confirm to save actions which need to get confirmed
    Moved definition of the projected fields into the models for better maintainability
    
    Also reduced code size :)
    Tidied up code, flake8 conformant again
    Made plural forms of resources ending in 's' extended by 'es' as in standard English
    Tablenames are now lowercase and resource names are the tablenames
    
    Eve exspects resource names to be equal to the tablenames when creating schemata.
    This commit creates that behaviour. Before this commit it was not possible to post
    to resources, which have relationsships.
    Generalized serialization of embedded resources to base class
    
    Taken from sqlalchemy example https://github.com/nicolaiarocci/eve/blob/sqlalchemy/examples/SQL/tables.py#L34-L44
    Made the code flake8 conform again
    Enabled projections for embedded resources in GET requests
    
    To make this possible every SQL Alchemy mapped class got a new function _asdict() which returns the content of the class as a dict object. This is needed as Eve will fail to recursively add data when the data is implemented using SQL Alchemy. Instead the value of the projected field will be the returned dict object of the related class.
    Implemented own logic for presentation, little changes for flake8
    Moved the registerSchema calls to schemas.py to reduce dependencies in models.py
    
    Before this commit registerSchema decorators prohibited to have relationships to classes not yet registered. By registering the schemas later all classes can be declared first.
    Renamed email Forward resources, their names were too long.
    
    It is now forwards, forwardusers and forwardaddresses
    Changed email resource name and added support for user subscribers
    Restructured User, Group, Event and Signup mappings so they can be decorated by @registerSchema
    Die Relations zischen den Daten-Klassen sind nun richtig, ausser für Mails. Hier fehlt noch die Änderung mit den 2 Tupeln aus der Besprechung.
    models: fix pyflakes error
    models/User: add server default for membership-Enum
    
    Somehow sqlalchemy forgets to use the specified default (which is generally only applied on the Python side) when no value is set on insert.
    Separated constants and settings. Settings are now in config.py and constants are still in run.py
    
    Added username field to User(extraordinary users do not have nethz for login)
    
    Renamed Session.token to Session.signature
    Added unittest for flake8
    Added requirement flake8
    
    Added field password to User
    Added field token to Session
    First working example built with Eve's sqlalchemy branch
    
    Relations between the models are not yet correctly set up, the Eve
    schema is not yet optimal (should contain some more restrictions),
    and responses currently don't include fields which are "null".
    Fix typo in resource definition for joboffers (#393)
    Fix that dependencies are not correctly checked when fields are deleted. (#376)
    
    Fix that dependencies are not correctly checked when fields are deleted (aka set to None) with PATCH.
    Fix home link methods (#363)
    
    For the home endpoint, some link methods were incorrect, i.e. the API would report that some methods are allowed for the current user (although they were not) and some of the reported methods would not be allowed.
    
    This was the result of to unrelated problems:
    
    1. Not allowed `HEAD`: Eve automatically allows `HEAD` requests if `GET` is possible. However, if `GET` is set to `public_methods`, `HEAD` *is not* automatically included, and has to be set explicitly. Unaware of this, the API would report that `HEAD` is allowed, while it was not. I have corrected the respective resource configs such that `HEAD` is allowed whenever `GET` is, as it is intended.
    
    2. Allowed `GET` if it is not: Some resources using `AdminOnlyAuth` would not create a user lookup filter, but instead `abort`. The API had no way to check this properly, and would report that `GET` is possible (even if it would be aborted. I have changed the output of creating a lookup filter such that not allowing *any* lookup for a user can be properly returned. Now the API can correctly determine whether `GET` is possible or not.
    
    Aside from that, I improved the tests for links on `/` to actually test all reported methods.
    
    Closes #343.
    Update documentation for job offers resource (#321)
    Add validation for event description and image aspect ratio
    
    Resolves #96
    Resolves #127
    Added show_website flag to joboffers and reworked other fields
    refractor endpoint descriptions to be parsable by eve-swagger
    Corrections to please the PEP8 God of Python Syntax
    Removed author field from JobOffers; Added Preprocessor for joboffer for required field; Created two JobOffers tests
    Temp save to local changes; JobOffers tests on the way
    Adapted the JobOffer Ressource to MongoDB
    Lots of flake8 fixes
    Removed sqlalchemy dependencies
    Adjusted 'joboffers' to fit new structure.
    Made Joboffers a module
    Fix deprecation warnings. (#409)
    Update requirements and test setup. (#396)
    
    For some reason, the generic alpine image would not correctly update
    the repositories and would not find mongodb.
    
    With a fixed version, this issue does not occur anymore.
    
    Additionally, important changes due to version update:
    
    - Pytz: Dependency removed, as datetime
      can handle utc on its own.
    
    - Cerberus: `valueschema` renamed to `valuesrules`.
    
    - MongoDB: `insert` is replaced by `insert_one` and `insert_many`.
      As a consequence, ObjectIDs are retrieved
      a bit differently.
    
    - PassLib: `encrypt` renamed to `hash`.
      `vary_round` is deprecated, has it
      "provided little security and was not worth
      the additional complexity" [1].
    
    [1]: https://passlib.readthedocs.io/en/stable/history/1.7.html?highlight=vary_rounds#crypt-context-api-deprecations
    
    Closes #394 (new eve version fixes this bug)
    Add event moderators (#377)
    
    Add field to event resource that allows to specify a moderator for an event.
    Event moderators are able to:
     - make changes to an event (patch)
     - see the list of participants
    
    Only a user has write permission for its signups.
    Write permission is only given if the user_id issuing
    the request and the user_id of the targeted signup match.
    Update documentation for groups resource (#318)
    Move schema description validation rules into general validator (#322)
    
    * Move schema description validation rules into general validator
    
    We use additional schema rules such as 'description' to make our
    schema more descriptive. However, Cerberus will complain about
    unknown schema rules, so they have to be defined somewhere,
    even if they don't do anything.
    
    Currently, this is done in the documentation sub-module.
    This is  a bit problematic, as our API is designed with replaceable
    modules in mind -- but deactivating or replacing the doc module will
    now cause errors in *all* schemas.
    
    As the additional description rules are important whether or not we
    use the online docs, I have moved the rules into the general validator.
    
    * Fix style errors to make this mergeable (as a base for other PRs)
    Add validation for event description and image aspect ratio
    
    Resolves #96
    Resolves #127
    Update Eve to version 0.8
    
    * Update to Eve 0.8
    
    Eve 0.8 brings Cerberus 1.0, which requires lots of changes:
    - Several properties have been renamed
    - type checking is now handled differently
    - validation rules require a schema in the docstring to validate the schema
      itself
    
    Additional Changes in Eve itself:
    - A PATCH on a document which misses a field having a default value will now
      result in setting this value, even if the field was not provided in the
      PATCH’s payload. (From Eve changelog)
    - Some error messages changed.
    Make group-moderator embeddable
    
    As so many other relationships, it makes things easier if the group-moderator is embeddable.
    Rename `has_zoidberg_share` to `requires_storage` (Resolves #182) (#238)
    Indices for fields that are commonly accessed
    auth hooks can work with embedded relations
    
    Fixes #195
    Some format and docs fixes (#172)
    
    * Some format and documentation fixes.
    
    * Fixes for previous commit
    
    * Formatted description a bit clearer and removed old TODO
    
    * Fixed flake8 error
    Fixed import order to conform to the google style guide
    
    - Three groups: standard lib, external packages, internal imports
    - No relative imports
    - Sorted alphabetically and case insensitive in the groups
    Updated some documentation
    Added expiry date to group memberships
    refractor endpoint descriptions to be parsable by eve-swagger
    Added lookfor by group name for groups. Closes #138
    Fixed a line that was to long
    more descriptive docstring
    Finished group validation
    Updated groups to new funcitonality, small validation functions still missing
    Fix deprecation warnings. (#409)
    Fixed import order to conform to the google style guide
    
    - Three groups: standard lib, external packages, internal imports
    - No relative imports
    - Sorted alphabetically and case insensitive in the groups
    Added expiry date to group memberships
    Updated groups to new funcitonality, small validation functions still missing
    Lots of flake8 fixes
    Removed sqlalchemy dependencies
    Adjusted 'groups' to fit new module structure
    Renamed "settings" to "endpoints" in modules
    
    Originally named settings after eve standart definition, renamed now to make purpose clearer
    Broke up huge files, places events and groups into directories
    
    This way its a little easier to navigate the code.
    Update documentation for groups resource (#318)
    Create mailing list files remotely via ssh. (#243)
    
    Until now, mailing list files are created locally.
    For the mailing lists to actually work, they need to be copied to a remote
    server.
    
    This copying is now included in AMIVAPI, which has two main benefits:
    
    - No local files are required anymore, useful for future deployment with docker
    - No external copying tool is required to make mailing lists work with amivapi
    
    Unfortunately, the mailing list server supports *only* ssh connections,
    therefore we have no other option to transfer the files.
    
    While I do not think this is a very *good* solution, I believe its the *best*
    approach we have available.
    
    Closes #239.
    Improve mailing list config handling and cli. (#231)
    Updated groups to new funcitonality, small validation functions still missing
    Made users a module
    
    models.py is now gone.
    
    Removed/Updated all references to it.
    Renamed "settings" to "endpoints" in modules
    
    Originally named settings after eve standart definition, renamed now to make purpose clearer
    Broke up huge files, places events and groups into directories
    
    This way its a little easier to navigate the code.
    Finished group validation
    Updated groups to new funcitonality, small validation functions still missing
    Update Eve to version 0.8
    
    * Update to Eve 0.8
    
    Eve 0.8 brings Cerberus 1.0, which requires lots of changes:
    - Several properties have been renamed
    - type checking is now handled differently
    - validation rules require a schema in the docstring to validate the schema
      itself
    
    Additional Changes in Eve itself:
    - A PATCH on a document which misses a field having a default value will now
      result in setting this value, even if the field was not provided in the
      PATCH’s payload. (From Eve changelog)
    - Some error messages changed.
    Fix typo
    Moved api resource key validator to utils to use it for apikeys as well.
    Finished group validation
    Updated groups to new funcitonality, small validation functions still missing
    Broke up huge files, places events and groups into directories
    
    This way its a little easier to navigate the code.
    Fix issue for sending event signup confirm email (#419)
    
    Ensures that a confirm email is sent to an event signup by email even
    when "user" is set to null in the request payload.
    Improve mail function (#384)
    
    All API mails are sent from the same address, thus the `mail` util
    does not require a sender mail anymore, and instead always uses
    the API mail from the config.
    
    Additionally, the mail function now adds an configurable subject
    line, defaulting to "[AMIV] {subject}", to increase
    consistency and allow users to spot API mails quickly.
    Adds info on the registration end to acceptance email (#375)
    
    Closes #359
    Remove any None values from event emails (#373)
    
    Adds a test whether there are any None values in the email texts and removes all the two bugs which caused these so far.
    
    Closes #350
    Fix token in email (#366)
    
    TherThe email tests failed because the token could not be decoded. This PR fixes this.
    
    The tokens were returned as bytes, and for some reason, the url_for that turns the token into
    a clickable link would take the b'...' and apply some escaping, resulting in b%27...%27.
    I now switched to the url-safe version of the signer, and everything is well.
    
    I'm not quite sure why the tests did not fail before, but now everything is working as intended.
    Fix event queue (#259)
    
    * Fix that event signups didn't get accepted with unlimited spots
    * Fix fixture generator for events with unlimited spots
    * Simplify event queue tests, fix response for new signups, remove hooks
    Add Oauth2 login, remove python2
    
    This commit mainly implements shiny new OAuth2 functionality to the API,
    in form of a central login page which can be used for *Implicit Grants*.
    
    Documentation for this new feature included.
    
    Along this we decided to drop python 2 support to simplify the new
    feature. This lead to cleaning up other parts of the code as well.
    
    Finally, Travis and tox were adjusted to drop python2 as well.
    Fixed import order to conform to the google style guide
    
    - Three groups: standard lib, external packages, internal imports
    - No relative imports
    - Sorted alphabetically and case insensitive in the groups
    Added accepted field to signups with FCFS and manual selection strategies
    
    Also send emails, when people get promoted from the waiting list
    Removed SERVER_NAME, as it will be set automatically when using wsgi
    python 3 fix in signup token handlin
    Renamed ROOT_MAIL to API_MAIL to make more clear its for mails sent by amivapi.
    Added option not to redirect in confirm mails.
    Rewrote event resource
    Made users a module
    
    models.py is now gone.
    
    Removed/Updated all references to it.
    Broke up huge files, places events and groups into directories
    
    This way its a little easier to navigate the code.
    Allow admins to overwrite FCFS decision for POST requests.
    
    Even if FCFS in enabled, admins should be allowed to force a signup to be accepted.
    This worked as intended for PATCH requests already, and now also works for POST.
    
    Fixes #381
    Replace deprecated .count() calls with .count_documents(). (#380)
    Adds info on the registration end to acceptance email (#375)
    
    Closes #359
    Remove any None values from event emails (#373)
    
    Adds a test whether there are any None values in the email texts and removes all the two bugs which caused these so far.
    
    Closes #350
    Fix token in email (#366)
    
    TherThe email tests failed because the token could not be decoded. This PR fixes this.
    
    The tokens were returned as bytes, and for some reason, the url_for that turns the token into
    a clickable link would take the b'...' and apply some escaping, resulting in b%27...%27.
    I now switched to the url-safe version of the signer, and everything is well.
    
    I'm not quite sure why the tests did not fail before, but now everything is working as intended.
    Fix event queue (#259)
    
    * Fix that event signups didn't get accepted with unlimited spots
    * Fix fixture generator for events with unlimited spots
    * Simplify event queue tests, fix response for new signups, remove hooks
    Add Oauth2 login, remove python2
    
    This commit mainly implements shiny new OAuth2 functionality to the API,
    in form of a central login page which can be used for *Implicit Grants*.
    
    Documentation for this new feature included.
    
    Along this we decided to drop python 2 support to simplify the new
    feature. This lead to cleaning up other parts of the code as well.
    
    Finally, Travis and tox were adjusted to drop python2 as well.
    Fixed flake8 errors
    Remove unused code. There are no bulk deletes on eventsignups, so we need no hooks.
    Added accepted field to signups with FCFS and manual selection strategies
    
    Also send emails, when people get promoted from the waiting list
    Add event moderators (#377)
    
    Add field to event resource that allows to specify a moderator for an event.
    Event moderators are able to:
     - make changes to an event (patch)
     - see the list of participants
    
    Only a user has write permission for its signups.
    Write permission is only given if the user_id issuing
    the request and the user_id of the targeted signup match.
    Update Eve to version 0.8
    
    * Update to Eve 0.8
    
    Eve 0.8 brings Cerberus 1.0, which requires lots of changes:
    - Several properties have been renamed
    - type checking is now handled differently
    - validation rules require a schema in the docstring to validate the schema
      itself
    
    Additional Changes in Eve itself:
    - A PATCH on a document which misses a field having a default value will now
      result in setting this value, even if the field was not provided in the
      PATCH’s payload. (From Eve changelog)
    - Some error messages changed.
    Restrict user eventsignup write access to signup window
    
    Currently, users can only signup to an event during the specified times, yet can modify (and delete!) their signup at any time, which can cause issues for the event organizers.
    
    With this patch, users can only modify their signup during the signup window. Afterwards, the signup is essentially 'frozen' for them.
    
    However, admins can still modify the signup. So if the user requires any late-minute changes, he or she must notify the event organizers, which is exactly how we'd like it :)
    
    Allows write access to /eventsignups for non-admins only within the registration window.
    Admins can write to the resource at all time.
    
    Resolves #240.
    Tidied up event module and fixed some small bugs
    Rewrote event resource
    Update position field of eventsignups.
    
    - Add documentation for position field.
    - Add position field to post response.
    
    Fixes #405
    Fixes #410
    Add event moderators (#377)
    
    Add field to event resource that allows to specify a moderator for an event.
    Event moderators are able to:
     - make changes to an event (patch)
     - see the list of participants
    
    Only a user has write permission for its signups.
    Write permission is only given if the user_id issuing
    the request and the user_id of the targeted signup match.
    signup count split between accepted and unaccepted (#374)
    
    The signup_count was introduced such that people who do not see the signups know whether an event is full or not. However, so far also unaccepted signups are counted in, contradicting it's purpose.
    
    With this PR we split between unaccepted and accepted signups. Fixes #364.
    Add blacklist (#365)
    
    Add new resource blacklist and an event-signup validator to check if a user
    is on the blacklist. People can be on the blacklist for multiple
    separate reasons, therefore blacklist is a new resource and not a single
    field in the user resource.
    Fix home link methods (#363)
    
    For the home endpoint, some link methods were incorrect, i.e. the API would report that some methods are allowed for the current user (although they were not) and some of the reported methods would not be allowed.
    
    This was the result of to unrelated problems:
    
    1. Not allowed `HEAD`: Eve automatically allows `HEAD` requests if `GET` is possible. However, if `GET` is set to `public_methods`, `HEAD` *is not* automatically included, and has to be set explicitly. Unaware of this, the API would report that `HEAD` is allowed, while it was not. I have corrected the respective resource configs such that `HEAD` is allowed whenever `GET` is, as it is intended.
    
    2. Allowed `GET` if it is not: Some resources using `AdminOnlyAuth` would not create a user lookup filter, but instead `abort`. The API had no way to check this properly, and would report that `GET` is possible (even if it would be aborted. I have changed the output of creating a lookup filter such that not allowing *any* lookup for a user can be properly returned. Now the API can correctly determine whether `GET` is possible or not.
    
    Aside from that, I improved the tests for links on `/` to actually test all reported methods.
    
    Closes #343.
    change cents to rappen (#356)
    
    The description text with 'cents' is more confusing than helpful to users.
    Use correct ratio (portrait) for event posters, update docs. (#346)
    Fix typo in events documentation (#336)
    
    * Fix typo in events documentation
    
    * Bump version number
    Inhibit public signups with user mail addresses (#333)
    
    * Add test for #330
    
    * Add solution
    Update schema and documentation for event resources (#315)
    Add validation for event description and image aspect ratio
    
    Resolves #96
    Resolves #127
    Add cascading delete to eventsignups (#298)
    
    Resolves #279
    Fix test config and eventsignup validation
    
    First of all, the test config would load sentry config from a file in the
    current working dir. Not anymore :)
    
    Furthermore, eventsignups with email would crash the API.
    
    To fix this, a proper combination of `required` and `exclude` was needed,
    which is able to to ignore None values. (None equals not set)
    
    As Cerberus is a bit inconsequential about None values
    (e.g. they can be ignored for `required`, but not for `exclude`), this
    required patching how Cerberus handles exludes.
    
    Resolves #213
    Update Eve to version 0.8
    
    * Update to Eve 0.8
    
    Eve 0.8 brings Cerberus 1.0, which requires lots of changes:
    - Several properties have been renamed
    - type checking is now handled differently
    - validation rules require a schema in the docstring to validate the schema
      itself
    
    Additional Changes in Eve itself:
    - A PATCH on a document which misses a field having a default value will now
      result in setting this value, even if the field was not provided in the
      PATCH’s payload. (From Eve changelog)
    - Some error messages changed.
    increase minimum price for event to 1 (#280)
    Fix documentation of event.additional_fields (resolves #212) (#218)
    Added default for the checkedin field as NONE (#200)
    Add check-in to eventsignups (#198)
    
    Added 'Checked In' field in eventsignups model and wrote tests to check that only users with admin rights can check in users at events.
    require additional_fields jsonschema constraints at validation
    switch additional_fields to jsonschema
    Added accepted field to signups with FCFS and manual selection strategies
    
    Also send emails, when people get promoted from the waiting list
    Tidied up event module and fixed some small bugs
    Updated some documentation
    Added fields time_advertising_start, time_advertising_end and priority to events
    Updated a description in events
    refractor endpoint descriptions to be parsable by eve-swagger
    Renamed remaining endpoints.py to model.py for consistency
    Tests and fixes for event times. Closes #134
    Added new validation to require a field if another is not present
    Removed lots of 'required's and replaced them with sensible default values.
    Removed if not null condition on spots, replaced by cerberus setting dependency
    comment layout fixes
    
    yes, I am a little bit pedantic ;)
    Added images to events
    Rewrote event resource
    Lots of flake8 fixes
    Removed sqlalchemy dependencies
    Removed default parameters for cleaner code
    Adjusted 'events' to fit new strucutre
    Renamed "settings" to "endpoints" in modules
    
    Originally named settings after eve standart definition, renamed now to make purpose clearer
    Broke up huge files, places events and groups into directories
    
    This way its a little easier to navigate the code.
    Update position field of eventsignups.
    
    - Add documentation for position field.
    - Add position field to post response.
    
    Fixes #405
    Fixes #410
    Replace deprecated .count() calls with .count_documents(). (#380)
    signup count split between accepted and unaccepted (#374)
    
    The signup_count was introduced such that people who do not see the signups know whether an event is full or not. However, so far also unaccepted signups are counted in, contradicting it's purpose.
    
    With this PR we split between unaccepted and accepted signups. Fixes #364.
    Added Projections/Hooks to EventSignups GET to display position in the signups list (To know position in waitinglist, you only need 'poisition-spots'); Added Tests to test position projection in eventsignups
    Fixed error in events signup_count insertion hook and added tests
    Rewrote event resource
    Update position field of eventsignups.
    
    - Add documentation for position field.
    - Add position field to post response.
    
    Fixes #405
    Fixes #410
    Adds info on the registration end to acceptance email (#375)
    
    Closes #359
    Fix event queue (#259)
    
    * Fix that event signups didn't get accepted with unlimited spots
    * Fix fixture generator for events with unlimited spots
    * Simplify event queue tests, fix response for new signups, remove hooks
    Add Oauth2 login, remove python2
    
    This commit mainly implements shiny new OAuth2 functionality to the API,
    in form of a central login page which can be used for *Implicit Grants*.
    
    Documentation for this new feature included.
    
    Along this we decided to drop python 2 support to simplify the new
    feature. This lead to cleaning up other parts of the code as well.
    
    Finally, Travis and tox were adjusted to drop python2 as well.
    Fixed import order to conform to the google style guide
    
    - Three groups: standard lib, external packages, internal imports
    - No relative imports
    - Sorted alphabetically and case insensitive in the groups
    Remove unused code. There are no bulk deletes on eventsignups, so we need no hooks.
    Added accepted field to signups with FCFS and manual selection strategies
    
    Also send emails, when people get promoted from the waiting list
    Tidied up event module and fixed some small bugs
    Renamed remaining endpoints.py to model.py for consistency
    Added Projections/Hooks to EventSignups GET to display position in the signups list (To know position in waitinglist, you only need 'poisition-spots'); Added Tests to test position projection in eventsignups
    Rewrote event resource
    Removed sqlalchemy dependencies
    Adjusted 'events' to fit new strucutre
    Renamed "settings" to "endpoints" in modules
    
    Originally named settings after eve standart definition, renamed now to make purpose clearer
    Broke up huge files, places events and groups into directories
    
    This way its a little easier to navigate the code.
    Add Oauth2 login, remove python2
    
    This commit mainly implements shiny new OAuth2 functionality to the API,
    in form of a central login page which can be used for *Implicit Grants*.
    
    Documentation for this new feature included.
    
    Along this we decided to drop python 2 support to simplify the new
    feature. This lead to cleaning up other parts of the code as well.
    
    Finally, Travis and tox were adjusted to drop python2 as well.
    Update requirements and test setup. (#396)
    
    For some reason, the generic alpine image would not correctly update
    the repositories and would not find mongodb.
    
    With a fixed version, this issue does not occur anymore.
    
    Additionally, important changes due to version update:
    
    - Pytz: Dependency removed, as datetime
      can handle utc on its own.
    
    - Cerberus: `valueschema` renamed to `valuesrules`.
    
    - MongoDB: `insert` is replaced by `insert_one` and `insert_many`.
      As a consequence, ObjectIDs are retrieved
      a bit differently.
    
    - PassLib: `encrypt` renamed to `hash`.
      `vary_round` is deprecated, has it
      "provided little security and was not worth
      the additional complexity" [1].
    
    [1]: https://passlib.readthedocs.io/en/stable/history/1.7.html?highlight=vary_rounds#crypt-context-api-deprecations
    
    Closes #394 (new eve version fixes this bug)
    Replace deprecated .count() calls with .count_documents(). (#380)
    Fix issue #176 (#193)
    Add blacklist (#365)
    
    Add new resource blacklist and an event-signup validator to check if a user
    is on the blacklist. People can be on the blacklist for multiple
    separate reasons, therefore blacklist is a new resource and not a single
    field in the user resource.
    Media validation exception (#344)
    
    * Add test to highlight the issue
    
    * Fix validator crashes
    
    I have noticed that Cerberus swallows exceptions.
    I modified the test framework to detect this.
    
    This showed two errors in our validators. One was a missing
    return statement, the other was more fundamental:
    
    Whenever a file validator would register an error, Cerberus
    would crash, as it internally saved the validated value
    and for some reason deepcopies it during the processing.
    File buffers couldn't be deepcopied, causing a crash.
    
    I have solved this by removed the reference to the validated
    value, as it is *never* used anyways.
    (I have no clue why it is in there in the first place)
    
    Closes #337
    Inhibit public signups with user mail addresses (#333)
    
    * Add test for #330
    
    * Add solution
    Add validation for event description and image aspect ratio
    
    Resolves #96
    Resolves #127
    Update Eve to version 0.8
    
    * Update to Eve 0.8
    
    Eve 0.8 brings Cerberus 1.0, which requires lots of changes:
    - Several properties have been renamed
    - type checking is now handled differently
    - validation rules require a schema in the docstring to validate the schema
      itself
    
    Additional Changes in Eve itself:
    - A PATCH on a document which misses a field having a default value will now
      result in setting this value, even if the field was not provided in the
      PATCH’s payload. (From Eve changelog)
    - Some error messages changed.
    Add Oauth2 login, remove python2
    
    This commit mainly implements shiny new OAuth2 functionality to the API,
    in form of a central login page which can be used for *Implicit Grants*.
    
    Documentation for this new feature included.
    
    Along this we decided to drop python 2 support to simplify the new
    feature. This lead to cleaning up other parts of the code as well.
    
    Finally, Travis and tox were adjusted to drop python2 as well.
    Fixed import order to conform to the google style guide
    
    - Three groups: standard lib, external packages, internal imports
    - No relative imports
    - Sorted alphabetically and case insensitive in the groups
    Fixed spelling mistake to trigger travis
    
    Somehow it did not work with the last commit
    Simplified if condition in event validator
    Improved only_if_not_null check to not require deepcopy.
    Renamed variable in event validator to reduce confusion
    additional_fields is already used at other locations with a different meaning
    fix only_if_not_null validator bug for patches
    fix flake8 issues
    fix only_if_not_null validator bug for patches
    require additional_fields jsonschema constraints at validation
    switch additional_fields to jsonschema
    Improved event module tests. Coverage in the module is now 100%
    Tidied up event module and fixed some small bugs
    Allow eventsignup admins to sign up people for events out of registration window
    Fixed exception in later_than and earlier_than validators (#153)
    
    later_than and earlier_than threw exceptions if the referenced value
    was missing. This was not prevented by required flags, as the validators
    were executed anyway. Also this masked all other messages with the exception
    making it hard to detect the problem for users.
    Fixed issue #141: later_than validator assumed fields existed previously in patch
    Tests and fixes for event times. Closes #134
    Added new validation to require a field if another is not present
    Removed if not null condition on spots, replaced by cerberus setting dependency
    Moved depends any validator to main validator in utils.py
    Rewrote event resource
    Broke up huge files, places events and groups into directories
    
    This way its a little easier to navigate the code.
    Adds info on the registration end to acceptance email (#375)
    
    Closes #359
    Remove any None values from event emails (#373)
    
    Adds a test whether there are any None values in the email texts and removes all the two bugs which caused these so far.
    
    Closes #350
    Fix token in email (#366)
    
    TherThe email tests failed because the token could not be decoded. This PR fixes this.
    
    The tokens were returned as bytes, and for some reason, the url_for that turns the token into
    a clickable link would take the b'...' and apply some escaping, resulting in b%27...%27.
    I now switched to the url-safe version of the signer, and everything is well.
    
    I'm not quite sure why the tests did not fail before, but now everything is working as intended.
    Fix event queue (#259)
    
    * Fix that event signups didn't get accepted with unlimited spots
    * Fix fixture generator for events with unlimited spots
    * Simplify event queue tests, fix response for new signups, remove hooks
    Add Oauth2 login, remove python2
    
    This commit mainly implements shiny new OAuth2 functionality to the API,
    in form of a central login page which can be used for *Implicit Grants*.
    
    Documentation for this new feature included.
    
    Along this we decided to drop python 2 support to simplify the new
    feature. This lead to cleaning up other parts of the code as well.
    
    Finally, Travis and tox were adjusted to drop python2 as well.
    Fixed import order to conform to the google style guide
    
    - Three groups: standard lib, external packages, internal imports
    - No relative imports
    - Sorted alphabetically and case insensitive in the groups
    Added accepted field to signups with FCFS and manual selection strategies
    
    Also send emails, when people get promoted from the waiting list
    Removed SERVER_NAME, as it will be set automatically when using wsgi
    python 3 fix in signup token handlin
    Renamed ROOT_MAIL to API_MAIL to make more clear its for mails sent by amivapi.
    Added option not to redirect in confirm mails.
    Rewrote event resource
    Made users a module
    
    models.py is now gone.
    
    Removed/Updated all references to it.
    Broke up huge files, places events and groups into directories
    
    This way its a little easier to navigate the code.
    Fix deprecation warnings. (#409)
    Update requirements and test setup. (#396)
    
    For some reason, the generic alpine image would not correctly update
    the repositories and would not find mongodb.
    
    With a fixed version, this issue does not occur anymore.
    
    Additionally, important changes due to version update:
    
    - Pytz: Dependency removed, as datetime
      can handle utc on its own.
    
    - Cerberus: `valueschema` renamed to `valuesrules`.
    
    - MongoDB: `insert` is replaced by `insert_one` and `insert_many`.
      As a consequence, ObjectIDs are retrieved
      a bit differently.
    
    - PassLib: `encrypt` renamed to `hash`.
      `vary_round` is deprecated, has it
      "provided little security and was not worth
      the additional complexity" [1].
    
    [1]: https://passlib.readthedocs.io/en/stable/history/1.7.html?highlight=vary_rounds#crypt-context-api-deprecations
    
    Closes #394 (new eve version fixes this bug)
    Update documentation for auth resources (#320)
    Update Eve to version 0.8
    
    * Update to Eve 0.8
    
    Eve 0.8 brings Cerberus 1.0, which requires lots of changes:
    - Several properties have been renamed
    - type checking is now handled differently
    - validation rules require a schema in the docstring to validate the schema
      itself
    
    Additional Changes in Eve itself:
    - A PATCH on a document which misses a field having a default value will now
      result in setting this value, even if the field was not provided in the
      PATCH’s payload. (From Eve changelog)
    - Some error messages changed.
    Add Oauth2 login, remove python2
    
    This commit mainly implements shiny new OAuth2 functionality to the API,
    in form of a central login page which can be used for *Implicit Grants*.
    
    Documentation for this new feature included.
    
    Along this we decided to drop python 2 support to simplify the new
    feature. This lead to cleaning up other parts of the code as well.
    
    Finally, Travis and tox were adjusted to drop python2 as well.
    Create all tokens with URL safe characters (#186)
    
    Also they use 256 bit entropy instead of 2048
    
    Closes #186
    Some format and docs fixes (#172)
    
    * Some format and documentation fixes.
    
    * Fixes for previous commit
    
    * Formatted description a bit clearer and removed old TODO
    
    * Fixed flake8 error
    Fixed import order to conform to the google style guide
    
    - Three groups: standard lib, external packages, internal imports
    - No relative imports
    - Sorted alphabetically and case insensitive in the groups
    Changed docstring of an auth hook of apikeys to be more descriptive.
    Added new api key mechanic: They are now a resource.
    Updated apikeys
    
    Use admin and readonly admin to let auth take care of methods.
    
    Also not abort all the time, only if not public.
    Moved apikey auth to seperate file
    Fix deprecation warnings. (#409)
    Update documentation for auth resources (#320)
    Allow session lookup via token. (#271)
    
    For most OAuth usecases, accessing tools will have the token and might need to verify whether the session still exists.
    
    This change is intended to make the process even simpler, by allowing requests of the form
    `GET /sessions/<token>`.
    Add Oauth2 login, remove python2
    
    This commit mainly implements shiny new OAuth2 functionality to the API,
    in form of a central login page which can be used for *Implicit Grants*.
    
    Documentation for this new feature included.
    
    Along this we decided to drop python 2 support to simplify the new
    feature. This lead to cleaning up other parts of the code as well.
    
    Finally, Travis and tox were adjusted to drop python2 as well.
    LDAP v3 (#250)
    
    Until now, only the `ou` field form ldap was used to determine a students' department.
    
    As it turns out, departments are never deleted from this list, i.e. if a student switches from ITET to INFK, both departments will be in the list, not only the current department.
    
    We now use the `deparmentNumber` field to determine the department. It is a little bit more effort to parse, but at least we reliably know a students department now.
    auth hooks can work with embedded relations
    
    Fixes #195
    Create all tokens with URL safe characters (#186)
    
    Also they use 256 bit entropy instead of 2048
    
    Closes #186
    Ldap improvements (#175)
    
    First of all, the structure of ldap.py is now simplified. The class is dropped
    and replaced by a few module level functions which are easier to understand.
    
    Next the functions themselves have been rearranged to be easier to test.
    Some premature optimization has been removed: The updating of all users
    now uses the same function as the one for one user only, since there were not
    really noticable performance differences. Again, this simplifies testing.
    
    Additionally repaired escape sequences. Either '\..' or r'\..' works, but r'\..' was to much ;)
    
    Speaking of testing: Using mock, all ldap functions are now tested.
    There still are some integration tests to verify everything actually works with the
    eth ldap.
    
    Finally a few changes in bootstrap, cli and sessions to use the new functions.
    
    After all I am quite happy with this version now. A few points are still up for improvement and I have added them to ldap.py, but over all the code is much simpler and better tested now, which is nice.
    Some format and docs fixes (#172)
    
    * Some format and documentation fixes.
    
    * Fixes for previous commit
    
    * Formatted description a bit clearer and removed old TODO
    
    * Fixed flake8 error
    Fixed import order to conform to the google style guide
    
    - Three groups: standard lib, external packages, internal imports
    - No relative imports
    - Sorted alphabetically and case insensitive in the groups
    Updated some documentation
    refractor endpoint descriptions to be parsable by eve-swagger
    Fixed rebase conflicts with a merge.
    fix: DELETE on /sessions should not be possible
    typo fixes
    Added periodic task to delete old sessions
    Removed the root user from the database.
    
    Like the anonymous user (already gone) it was needed mostly for database
    relations in sql.
    We don't really need this anymore.
    
    Therefore I removed the root user from the database. To act as root you
    don't need a session anymore, you can just send the root password as
    token. The root user is not kind of a glorified api key.
    
    This has the following advantages:
    - We don't need to initialise the db anymore
    - The users collection only contains actual people now
    
    This means the tests don't need to create the root user and generally
    the initdb function in mongo_manage is gone.
    Fixed typo: Setting for cascade delete was called 'cacade_delete'
    Ldap tests and Connector completed.
    Added option to delete an object, when a related object is deleted
    
    This can be used to automatically remove all sessions if a user is
    deleted or signups if an event is deleted.
    Renamed session fields to be nicer, added data_relation
    Fixed str/objectid problem in auth.
    
    g.current_user is now always a string like intended.
    In the has_write_permission hook the item dict might contain ObjectIds,
    because the hook takes place before Eve converts them to str.
    
    Added a warning to remind of this.
    Updated session auth class
    Moved rehashing to sessions, removed from users, added tests
    
    In the users module it would lead to a infinite import
    (auth imports users imports auth imports ..)
    
    Fixed now and added tests
    Session work now
    
    - Added new style auth
    - Updated tests
    - Added a few tests
    First version of new authentication, testing not yet complete
    
    Quite thorough tests of all authentication features
    
    Added other functionality: add to each link a 'methods' field containing
    the allowed methods.
    This is not tested completely yet.
    
    Auth integration and sessions not tested yet.
    Add Oauth2 login, remove python2
    
    This commit mainly implements shiny new OAuth2 functionality to the API,
    in form of a central login page which can be used for *Implicit Grants*.
    
    Documentation for this new feature included.
    
    Along this we decided to drop python 2 support to simplify the new
    feature. This lead to cleaning up other parts of the code as well.
    
    Finally, Travis and tox were adjusted to drop python2 as well.
    Move secret key from config to database. (#224)
    
    Move secret key from config to database.
    Fixed import order to conform to the google style guide
    
    - Three groups: standard lib, external packages, internal imports
    - No relative imports
    - Sorted alphabetically and case insensitive in the groups
    fix critical bug where delete hooks get overwritten
    Moved apikey auth to seperate file
    Added apikeys to auth
    Moved check resource write permission in front of validator.
    Added write_resource_method
    
    Needed for e.g. study documents, where POST is neither public nor
    reserved for admins -> we need to be able to verify per user wheter POST
    is allowed.
    
    Updated link_methods and tests
    Improved and cleaned comments in auth init.
    Finished tests for link methods.
    
    Home endpoint link methods work properly now:
    - Resource admin is determined per resource
    
    Furthermore:
    - Framework for group and api key auth is in place
    Separated authentication from admin check.
    
    This will be needed to determine correct permissions for all
    resources in the home endpoint.
    Added link method integration tests, fixed bugs
    
    Some methods were not playing together with Eve
    as intended, but now they should.
    
    One problem with "home" remains.
    First version of new authentication, testing not yet complete
    
    Quite thorough tests of all authentication features
    
    Added other functionality: add to each link a 'methods' field containing
    the allowed methods.
    This is not tested completely yet.
    
    Auth integration and sessions not tested yet.
    Moved Session model and schema to auth module
    
    adjusted all files that needed Session model
    Put auth into own module too
    
    Also adjusted imports in other files to make everything work again.
    Fix home link methods (#363)
    
    For the home endpoint, some link methods were incorrect, i.e. the API would report that some methods are allowed for the current user (although they were not) and some of the reported methods would not be allowed.
    
    This was the result of to unrelated problems:
    
    1. Not allowed `HEAD`: Eve automatically allows `HEAD` requests if `GET` is possible. However, if `GET` is set to `public_methods`, `HEAD` *is not* automatically included, and has to be set explicitly. Unaware of this, the API would report that `HEAD` is allowed, while it was not. I have corrected the respective resource configs such that `HEAD` is allowed whenever `GET` is, as it is intended.
    
    2. Allowed `GET` if it is not: Some resources using `AdminOnlyAuth` would not create a user lookup filter, but instead `abort`. The API had no way to check this properly, and would report that `GET` is possible (even if it would be aborted. I have changed the output of creating a lookup filter such that not allowing *any* lookup for a user can be properly returned. Now the API can correctly determine whether `GET` is possible or not.
    
    Aside from that, I improved the tests for links on `/` to actually test all reported methods.
    
    Closes #343.
    Add Oauth2 login, remove python2
    
    This commit mainly implements shiny new OAuth2 functionality to the API,
    in form of a central login page which can be used for *Implicit Grants*.
    
    Documentation for this new feature included.
    
    Along this we decided to drop python 2 support to simplify the new
    feature. This lead to cleaning up other parts of the code as well.
    
    Finally, Travis and tox were adjusted to drop python2 as well.
    Simplify keyword handling in token parsing
    
    While fixing flake8 errors I decided to simplify our token parsing altogether.
    The primary crash was happening because of the special treatments of certain
    keywords like "Token" and "Bearer", which, used on their own without an actual
    token would cause a crash.
    
    Now, the api does not treat any keyword special.
    If a keyword is provided, it is ignored. This includes:
    `Token <token>`, `Bearer <token>`, `Blablabla <token>`
    
    We advocate not using a keyword anyway, so this maximizes compatibility.
    Furthermore, since the special treatment of keywords is gone, the original
    crash cannot happen anymore.
    Set token to None when incomplete
    Fix issue #219
    Fixed import order to conform to the google style guide
    
    - Three groups: standard lib, external packages, internal imports
    - No relative imports
    - Sorted alphabetically and case insensitive in the groups
    small clarification
    Small syntax improvements and safety double checks for auth.py
    Moved apikey auth to seperate file
    Added apikeys to auth
    Removed the root user from the database.
    
    Like the anonymous user (already gone) it was needed mostly for database
    relations in sql.
    We don't really need this anymore.
    
    Therefore I removed the root user from the database. To act as root you
    don't need a session anymore, you can just send the root password as
    token. The root user is not kind of a glorified api key.
    
    This has the following advantages:
    - We don't need to initialise the db anymore
    - The users collection only contains actual people now
    
    This means the tests don't need to create the root user and generally
    the initdb function in mongo_manage is gone.
    Renamed session fields to be nicer, added data_relation
    Fixed str/objectid problem in auth.
    
    g.current_user is now always a string like intended.
    In the has_write_permission hook the item dict might contain ObjectIds,
    because the hook takes place before Eve converts them to str.
    
    Added a warning to remind of this.
    Improved auth code.
    
    Added some decorators to avoid reusing the same if clause all the time.
    This also made testing easier.
    Added an extra check for auth required to not block public methods
    Added write_resource_method
    
    Needed for e.g. study documents, where POST is neither public nor
    reserved for admins -> we need to be able to verify per user wheter POST
    is allowed.
    
    Updated link_methods and tests
    Removed option to disable auth globally
    
    Reasoning:
    - In use, the API doesn't work without auth since everything revolves
      about which user can do what
    - Disabled auth only used in testing
    - Several functions (e.g. validators etc) would need to check if auth is
      enabled
    - The problem can be solved nicer (see below)
    
    Solution:
    - Removed the disable_auth option
    - Use the new auth hook (intended to provide groups and apikeys the
      option to extend auth) to always authenticate as root
    
    This way we do not need to provide exceptions for disabled auth, since
    the WebTestNoAuth just acts as root all the time.
    little change to auth comment
    Improved and cleaned up comments in auth.py
    Separated authentication from admin check.
    
    This will be needed to determine correct permissions for all
    resources in the home endpoint.
    Added a bit more explanation to auth.py
    Small doc updates to clarify admin handling.
    First version of new authentication, testing not yet complete
    
    Quite thorough tests of all authentication features
    
    Added other functionality: add to each link a 'methods' field containing
    the allowed methods.
    This is not tested completely yet.
    
    Auth integration and sessions not tested yet.
    Fix home link methods (#363)
    
    For the home endpoint, some link methods were incorrect, i.e. the API would report that some methods are allowed for the current user (although they were not) and some of the reported methods would not be allowed.
    
    This was the result of to unrelated problems:
    
    1. Not allowed `HEAD`: Eve automatically allows `HEAD` requests if `GET` is possible. However, if `GET` is set to `public_methods`, `HEAD` *is not* automatically included, and has to be set explicitly. Unaware of this, the API would report that `HEAD` is allowed, while it was not. I have corrected the respective resource configs such that `HEAD` is allowed whenever `GET` is, as it is intended.
    
    2. Allowed `GET` if it is not: Some resources using `AdminOnlyAuth` would not create a user lookup filter, but instead `abort`. The API had no way to check this properly, and would report that `GET` is possible (even if it would be aborted. I have changed the output of creating a lookup filter such that not allowing *any* lookup for a user can be properly returned. Now the API can correctly determine whether `GET` is possible or not.
    
    Aside from that, I improved the tests for links on `/` to actually test all reported methods.
    
    Closes #343.
    Make link methods compatible with custom resource titles (#314)
    
    Previously, link methods would check the `title` field to identify a link
    resource, which does not work if an alternative title is used.
    Using the `href` field, this issue does not exist.
    Improve hooks, ensure private user fields are always hidden
    
    User fields like the password hash were visible after PATCH.
    
    The solution to this issue was to use a more general hook that can run after all requests in addition the the database hook.
    
    For this hook, a bit of parsing utilities were added, which turned out to be useful in other locations, too.
    
    Fixes #216
    Run hooks on embedded documents (#199)
    Fixed import order to conform to the google style guide
    
    - Three groups: standard lib, external packages, internal imports
    - No relative imports
    - Sorted alphabetically and case insensitive in the groups
    Added write_resource_method
    
    Needed for e.g. study documents, where POST is neither public nor
    reserved for admins -> we need to be able to verify per user wheter POST
    is allowed.
    
    Updated link_methods and tests
    Fixed link method bug for unsuccesful patches
    
    Errors would call the link methods hooks to, which would then crash
    because there are no _links in the error response.
    
    Hook now only acts on 200 responses.
    Removed leftover print from link_methods.py
    Improved and cleaned up comments for link_methods.py
    Finished tests for link methods.
    
    Home endpoint link methods work properly now:
    - Resource admin is determined per resource
    
    Furthermore:
    - Framework for group and api key auth is in place
    Added link method integration tests, fixed bugs
    
    Some methods were not playing together with Eve
    as intended, but now they should.
    
    One problem with "home" remains.
    Python 3 compatibility fixes
    Rewrote link_methods for simpler testing
    
    The tests are not perfect yet, but much clearer already.
    First version of new authentication, testing not yet complete
    
    Quite thorough tests of all authentication features
    
    Added other functionality: add to each link a 'methods' field containing
    the allowed methods.
    This is not tested completely yet.
    
    Auth integration and sessions not tested yet.
    Update settings, in particular version number, and serve logo from static files
    
    Furthermore, I now ensured that the setup always uses the correct version
    number.
    
    This required me to remove the 'hack' to always install the current folder
    from `requirements.txt`. This was quite unusual anyways.
    
    As a result tox etc. needed to be adjusted.
    
    Additionally, the logo used for OAuth and (soon) docs is now served consistently from a static endpoint.
    Update documentation for auth resources (#320)
    Add Oauth2 login, remove python2
    
    This commit mainly implements shiny new OAuth2 functionality to the API,
    in form of a central login page which can be used for *Implicit Grants*.
    
    Documentation for this new feature included.
    
    Along this we decided to drop python 2 support to simplify the new
    feature. This lead to cleaning up other parts of the code as well.
    
    Finally, Travis and tox were adjusted to drop python2 as well.
    Update settings, in particular version number, and serve logo from static files
    
    Furthermore, I now ensured that the setup always uses the correct version
    number.
    
    This required me to remove the 'hack' to always install the current folder
    from `requirements.txt`. This was quite unusual anyways.
    
    As a result tox etc. needed to be adjusted.
    
    Additionally, the logo used for OAuth and (soon) docs is now served consistently from a static endpoint.
    Add Oauth2 login, remove python2
    
    This commit mainly implements shiny new OAuth2 functionality to the API,
    in form of a central login page which can be used for *Implicit Grants*.
    
    Documentation for this new feature included.
    
    Along this we decided to drop python 2 support to simplify the new
    feature. This lead to cleaning up other parts of the code as well.
    
    Finally, Travis and tox were adjusted to drop python2 as well.
    Update settings, in particular version number, and serve logo from static files
    
    Furthermore, I now ensured that the setup always uses the correct version
    number.
    
    This required me to remove the 'hack' to always install the current folder
    from `requirements.txt`. This was quite unusual anyways.
    
    As a result tox etc. needed to be adjusted.
    
    Additionally, the logo used for OAuth and (soon) docs is now served consistently from a static endpoint.
    Add Oauth2 login, remove python2
    
    This commit mainly implements shiny new OAuth2 functionality to the API,
    in form of a central login page which can be used for *Implicit Grants*.
    
    Documentation for this new feature included.
    
    Along this we decided to drop python 2 support to simplify the new
    feature. This lead to cleaning up other parts of the code as well.
    
    Finally, Travis and tox were adjusted to drop python2 as well.
    Metadata summary for study documents (#342)
    
    Currently, we have a lot of metadata for study docs, but no efficient way to search through it.
    In order to provide users a menu to select professors, for example, an application would have to download *all* study documents to learn the possible professors.
    
    On the other hand, this information is much needed, as most students will not know from the top of their head how exactly their professors name might be written or if their lecture can be found as 'Analysis' or 'Analysis I'
    
    This defeats the purpose of filtering study documents with metadata.
    
    Thus, this commit adds a server-side summary of metadata.
    The response contains a new meta field `_summary`, which lists the available values for all meta-data fields along with how many documents are available for them.
    
    ```
    _summary:
        professor:
            Prof. Dr. Awesome: 10
            Prof. Okay: 5
            ...
        lecture:
            ...
        ...
    ```
    
    The summary is efficiently computed using the MongoDB aggregation framework.
    auth hooks can work with embedded relations
    
    Fixes #195
    Flake8 fixes
    No resource wide delete anymore, auth for that gone too
    Add a comment for a hook.
    Work on studydocs. files field disabled for now
    
    list of files are not supported by eve at the moment. Will be reactivated, when fixed.
    Some work on studydocs, tests still missing
    Add additional study document types. (#421)
    
    This commit adds two new types of study documents: `oral exams` and `study guides`.
    
    - `oral exams` are introduces mainly for maintenance. We received complaints that it is hard to get an overview of available oral exams because it is currently impossible to differentiate them from normal exams.
    - `study guides` are mainly intended for the AMIV PVK, but also for similar amiv-hosted courses that provide guides in form of scripts or presentations to students. They are different from `cheat sheets`, as they are much more extensive. And they are different from `lecture documents`, as they are neither official documents, nor necessarily follow the lecture structure (e.g. a PVK might cover the topics of a lecture, but present them in different order and context). Finally, there is a need for students to find study guides (compared to generic lecture notes) for their exam preparations.
    
    Closes #420.
    Metadata summary for study documents (#342)
    
    Currently, we have a lot of metadata for study docs, but no efficient way to search through it.
    In order to provide users a menu to select professors, for example, an application would have to download *all* study documents to learn the possible professors.
    
    On the other hand, this information is much needed, as most students will not know from the top of their head how exactly their professors name might be written or if their lecture can be found as 'Analysis' or 'Analysis I'
    
    This defeats the purpose of filtering study documents with metadata.
    
    Thus, this commit adds a server-side summary of metadata.
    The response contains a new meta field `_summary`, which lists the available values for all meta-data fields along with how many documents are available for them.
    
    ```
    _summary:
        professor:
            Prof. Dr. Awesome: 10
            Prof. Okay: 5
            ...
        lecture:
            ...
        ...
    ```
    
    The summary is efficiently computed using the MongoDB aggregation framework.
    Update study documents documentation and schema (#317)
    Add validation for event description and image aspect ratio
    
    Resolves #96
    Resolves #127
    Indices for fields that are commonly accessed
    Removed resource wide delete
    
    it's unnecessary and might cause errors.
    refractor endpoint descriptions to be parsable by eve-swagger
    Renamed remaining endpoints.py to model.py for consistency
    Updated studydoc metadata. Closes #136
    Added a coursesemester field in the Schema. See Issue #133. (-.-)ZZzzz
    Added files to studydocs
    Work on studydocs. files field disabled for now
    
    list of files are not supported by eve at the moment. Will be reactivated, when fixed.
    Some work on studydocs, tests still missing
    Lots of flake8 fixes
    Disabelign everything that is not working with mongo right now
    
    python run.py is now able to start up an api with only module studydocuments
    remove depenedncy for create_schema as this is hardcoded now
    hardcode schema for endpoints in order to switch to mongo
    Made studydocs a module
    Metadata summary for study documents (#342)
    
    Currently, we have a lot of metadata for study docs, but no efficient way to search through it.
    In order to provide users a menu to select professors, for example, an application would have to download *all* study documents to learn the possible professors.
    
    On the other hand, this information is much needed, as most students will not know from the top of their head how exactly their professors name might be written or if their lecture can be found as 'Analysis' or 'Analysis I'
    
    This defeats the purpose of filtering study documents with metadata.
    
    Thus, this commit adds a server-side summary of metadata.
    The response contains a new meta field `_summary`, which lists the available values for all meta-data fields along with how many documents are available for them.
    
    ```
    _summary:
        professor:
            Prof. Dr. Awesome: 10
            Prof. Okay: 5
            ...
        lecture:
            ...
        ...
    ```
    
    The summary is efficiently computed using the MongoDB aggregation framework.
    Fixed import order to conform to the google style guide
    
    - Three groups: standard lib, external packages, internal imports
    - No relative imports
    - Sorted alphabetically and case insensitive in the groups
    Renamed remaining endpoints.py to model.py for consistency
    Work on studydocs. files field disabled for now
    
    list of files are not supported by eve at the moment. Will be reactivated, when fixed.
    Some work on studydocs, tests still missing
    Disabelign everything that is not working with mongo right now
    
    python run.py is now able to start up an api with only module studydocuments
    Made studydocs a module
