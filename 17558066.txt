    Replace pylint with pyflakes/flake8
    
    pylint reports a lot of warnings, but many of them are false positive,
    and it's difficult to configure it. It also seems that for some reason
    the included config file is not working well with the latest version.
    
    Update the documentation to recommend using pyflakes and flake8 instead
    of pylint. Remove the pylint config and add a basic flake8 config with
    minimum settings:
    
    - Maximum line length 80 columns
    - Ignore warnings about indentation (repo uses 2 rather than expected 4)
    - Ignore warnings about import placement
    
    In this commit no code cleanup is done, and it's expected that most of
    the files will throw up quite a few warnings, at least for flake8. These
    can be cleaned up in follow-up commits.
    
    The existing pylint suppression comments are left as-is. These will be
    helpful when cleaning up pyflakes warnings later.
    
    Change-Id: I2f7cb4340266ed07cc973ca6483b8f09d66a765b
    improve docs
    
    Change-Id: Ide4008f09c2f17f8fb3d85dfffe94544abfdd6a6
    SUBMITTING_PATCHES: Expand instructions
    
    This commit adds additional instructions on getting patches submitted,
    based on my recent experience doing so.
    
    Change-Id: I8e0d37d316214cc9a39383414773aad181f83f18
    Add pylint configuration and instructions
    
    pylint configuration file (.pylintrc) is added, and submission
    instructions are updated to include pylint usage steps.
    
    Deprecated pylint suppression (`disable-msg`) is updated in a few
    modules to make it work properly with the latest version (0.26).
    
    Change-Id: I4ec2ef318e23557a374ecdbf40fe12645766830c
    Patches should be submitted to master, not maint
    
    Update SUBMITTING_PATCHES accordingly.
    
    Change-Id: I6fd57a84c67d3762f1f23276d95cac2aeecd5e8f
    Update SUBMITTING_PATCHES
    
    The review server is now at gerrit-review.googlesource.com.
    
    Change-Id: I4be67fdb1876eb2e2af4420ac63557596b9e233b
    Document how to contribute to the repo project
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    improve docs
    
    Change-Id: Ide4008f09c2f17f8fb3d85dfffe94544abfdd6a6
    Change print statements to work in python3
    
    This is part of a series of changes to introduce Python3 support.
    
    Change-Id: I373be5de7141aa127d7debdbce1df39148dbec32
    Coding style cleanup
    
    Fix the following issues reported by pylint:
    
    C0321: More than one statement on a single line
    W0622: Redefining built-in 'name'
    W0612: Unused variable 'name'
    W0613: Unused argument 'name'
    W0102: Dangerous default value 'value' as argument
    W0105: String statement has no effect
    
    Also fixed a few cases of inconsistent indentation.
    
    Change-Id: Ie0db839e7c57d576cff12d8c055fe87030d00744
    Correct call to `sys.exit()`
    
    It should be `sys.exit()` not `os.exit()`.
    
    Change-Id: Iaeeef456ddf2d17f5df2b712e50e3630bed856c3
    Don't start the pager if stdout is a pipe
    
    The repo script often uses a pager by default and will produce
    control characters (coloring) to standard output when using the
    pager, even if the output is redirected to another pipe or script.
    This is because the pager setup checked for the terminal presence
    on FD 0, and in case of redirection FD 0 is still attached to
    the terminal.
    
    Instead require that both FD 0 and FD 1 are connected to the terminal
    in order to start the pager.
    
    Bug: REPO-19, b.android.com/2004
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Initial Contribution
    Support units in progress messages
    
    This allows our progress meter to be used for bytes transferred, by
    setting the units to KB or MB to let the user know the size.
    
    Change-Id: Ie8653d4a40d79439026c18bd51915845b2c5bba9
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Do not emit progress if stderr is not a tty
    
    Avoids logging progress data into cron logs, etc.
    
    Suggested-by: Michael Richardson <mcr@sandelman.ottawa.on.ca>
    Change-Id: I4eefa2c282f0ca0a95a0185612b52e2146669e4c
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Only display a progress meter once we spend 0.5 seconds on a task
    
    The point of the progress meter is to let the user know that the
    task is progressing, and give them a chance to estimate when it will
    be complete.  If the task completes in under 0.5 seconds then it
    is sufficiently fast enough that the user doesn't need to be kept
    up-to-date on its progress; in fact showing the meter may just slow
    the task down waiting on the tty to redraw.
    
    We now delay the progress meter 0.5 seconds (or 1 second if the
    Python time.time() function isn't accurate enough) to avoid any
    really fast tasks, like a no-op local sync.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Disable the progress meter when trace is enabled
    
    The trace output often interfers with the progress meter, so its
    easier to just disable the progress meter if trace is active.
    Its already verbose enough to let the user know we are working,
    which is all the progress meter is there for anyway.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Don't divide by zero in progress meter
    
    If there are no projects to fetch, the progress meter would
    have divided by zero during `repo sync`, and that throws a
    ZeroDivisionError.  Instead we report the progress with an
    unknown amount remaining.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Add a project progress meter to 'repo sync'
    
    This way users can see how much is left during fetch.  Its
    especially useful when most syncs are no-ops but there are
    hundreds of repositories to poll.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Fix checkout error when depth passed to repo init and revision is a sha1
    
    Currently, if direct fetch of a sha1 is not supported by git server and
    depth option is used, we fallback on syncing the upstream branch by
    ignoring depth option.
    
    This fallback doesn't work in next 2 cases:
    (1) upstream attribute is not specified in manifest
    (2) depth option is passed to repo init command
        (not with clone-depth attribute in manifest)
    
    This commit do the following:
    - fixes (1) by updating condition used to apply fallback
      first we retry with depth set to None, then by syncing all branches
    - fixes (2) by passing depth as argument of _RemoteFetch() method
      thus, its value is not set again to depth value passed to repo init
      command when applying fallback
    
    Change-Id: Ifd6fffafc49ba229df624b0d7b64c83d47619d17
    _CheckDirReference: log actual error before suggesting --force-sync
    
    A recent backward incompatible change created confusion and loss of
    productivity and highlighted the very limited amount of information
    provided when repo sync fails; merely recommending to --force-sync
    and blow-up git repos without any hint as to why. The addition of
    this basic _error(...) call would have provided a clue and will in
    the future.
    
    BUG=Issue 232
    TEST=simulate a breakage similar to the ones reported at
      https://groups.google.com/a/chromium.org/forum/#!topic/chromium-os-dev/2-0oCy_CX5s
      cd .repo/projects/src/third_party/libapps.git/
      file info; rm info; ln -s wronglink info
      cd -
      repo sync src/third_party/libapps/
      # error message now shows the failure
    
    Change-Id: Idd2f177a096f1ad686caa8c67cb361d594ccaa57
    status: add -q/--quiet option
    
    The --quiet option reduces the output to just
    a list of projects with modified workspaces (and
    orphans if -o is specified)
    
    A common use case is when performing a full-workspace
    merge.  The integrator will kick-off a merge via:
    
        repo forall -c git merge <some tag>
    
    And then produce a short list of conflicted projects via:
    
        repo status -q
    
    The integrator can then iteratively fix and clean up all conficted
    components.  The merge is complete when:
    
        repo status -q
    
        returns no output.
    
    Change-Id: Ibbba8713eac35befd8287c95948874e23fd5c7e2
    implement optional 'pushurl' in the manifest file
    
    Allow the 'remote' element in the manifest file to define an optional
    'pushurl' attribute which is passed into the .git/config file.
    
    Change-Id: If342d299d371374aedc4440645798888869c9714
    Signed-off-by: Steve Rae <steve.rae@raedomain.com>
    RepoHook: do not list options twice during hash based approval
    
    Instead of
    
      Do you want to allow this script to run (yes/yes-never-ask-again/NO)? (yes/always/NO)?
    
    ask
    
      Do you want to allow this script to run (yes/always/NO)?
    
    Change-Id: I5f5a2d0e88086a8d85e54fb8623a62d74a20956a
    Signed-off-by: Jonathan Nieder <jrn@google.com>
    RepoHook: allow users to approve hooks via manifests
    
    The constant prompting when registered hooks change can be tedious and
    has a large multiplication factor when the project is large (e.g. the
    AOSP).  It gets worse as people want to write more checks, hooks, docs,
    and tests (or fix bugs), but every CL that goes in will trigger a new
    prompt to approve.
    
    Let's tweak our trust model when it comes to hooks.  Since people start
    off by calling `repo init` with a URL to a manifest, and that manifest
    defines all the hooks, anchor trust in that.  This requires that we get
    the manifest over a trusted link (e.g. https or ssh) so that it can't
    be MITM-ed.  If the user chooses to use an untrusted link (e.g. git or
    http), then we'll fallback to the existing hash based approval.
    
    Bug: Issue 226
    Change-Id: I77be9e4397383f264fcdaefb582e345ea4069a13
    project: Set config option to skip lfs smudge filter
    
    During sync, repo runs `git read-tree --reset -u -v HEAD` which causes
    git-lfs's smudge filter to run. However this fails because git-lfs does
    not work with bare repositories.
    
    Add lfs.filter configuration to the project config as suggested in the
    comments on the upstream git-lfs client issue [1]. This prevents the
    smudge filter from running, and the sync completes successfully.
    
    For any projects that have LFS objects, `git lfs pull` must be executed.
    
    [1] https://github.com/github/git-lfs/issues/1422
    
    Bug: Issue 224
    Change-Id: I091ff37998131e2e6bbc59aa37ee352fe12d7fcd
    Fix removing broken symlink in reference dir
    
    Re-ordered to first create the symlink before checking the source
    file and remove the destination if the source does not exists.
    
    Change-Id: Iae923ba2ef0ba5a8dc1b8e42d8cc3f3708f773af
    Fix variable assignment
    
    If upstream string is empty, current_branch_only variable will be assigned
    to an empty string.
    
    This is not what we expect here as this variable is a boolean.
    
    Change-Id: Ibba935e25a74c2be1e50c88b4b403cf394ba365e
    Fix submodule checkout error when using sync-s option
    
    When sync-s="true" option is used, the checkout of a submodule will try
    to use the revision attribute of the parent project.
    
    If this revision is a named reference, the checkout will fail if there
    is no reference with this name in the submodule.
    
    The proposed solution is to use the git commit id as revisionExpr for
    submodules.
    
    Change-Id: Ie8390a11957fd6a9c61289c6861d13cb3fa11678
    Fix XmlManifest.Save with remotes that have 'alias' set
    
    When the alias attribute is set for a remote, the RemoteSpec attached to
    a Project only contains the alias name used by git, not the original
    name used in the manifest. But that's not enough information to
    reconstruct the manifest, so save off the original manifest name as
    another RemoteSpec parameter, only used to write the manifest out.
    
    Bug: Issue 181
    Bug: Issue 219
    Change-Id: Id7417dfd6ce5572e4e5fe14f22924fdf088ca4f3
    diffmanifests: support custom git pretty format strings
    
    Change-Id: I29f4f1351c421f393328514d145df1a96aed9ee2
    repo: Repo does not always handle '.' parameter correctly
    
    The repo script allows a manifest to specify a '.' as the path the
    top-level directory, which co-locates the .git and .repo directories,
    and places files from the git repository at the top-level:
    
      <project name="proj_name" path="." />
      <project name="sierra.other.git" path="other" />
    
    Most commands work correctly with this setup. Some commands, however,
    fail to find the project. For instance, 'repo sync' works, and 'repo sync .'
    works in a sub-project ('other' in this case) but 'repo sync .' in the
    top-level directory fails with the error:
    
    error: project . not found
    
    There are two reasons for this:
    
    1. The self.worktree attribute of the Project object is not normalized,
    so with a '.' for path its value would be '/my/project/root/.'. This is
    fine when used as a path, since it's the same path as '/my/project/root',
    but when used in a string comparison it fails. This commit applies
    os.path.normpath() to that value before storing it.
    
    2. The _GetProjectByPath method in command.py was not checking the path
    against manifest.topdir, so even once it was normalized the project was
    not found. This commit adds a check against manifest.topdir if the
    loop drops out without finding a project.
    
    Change-Id: Ic84d053f1bbb5a357cad566805d5a326ae8246d2
    Fix symlinking of new projects
    
    We weren't copying these lists, so the += was actually changing the
    underlying lists.
    
    When a new project was added to the manifest, we run _CheckDirReference
    against the manifest project with share_refs=True, which added the
    working_tree_* to the shareable_* lists. Then, when we load the new
    manifest and create the new project, it uses the lists that already
    contain the working_tree_* files, even though we passed
    share_refs=False.
    
    This happens reliably under the above conditions, but doesn't seem to
    happen when syncing a fresh tree. So we've got a mixture of links that
    may need to be cleaned up later. This patch will just stop it from
    happening in the future.
    
    Change-Id: Ib7935bfad78af1e494a75e55134ec829f13c2a41
    RepoHook: set __file__ when running the hook
    
    A common design pattern is to use __file__ to find the location of the
    active python module to assist in output or loading of related assets.
    The current hook systems runs the pre-upload.py hook in a context w/out
    that set leading to runtime errors:
    
    $ repo upload --cbr .
    ERROR: Traceback (most recent call last):
      File ".../repo/project.py", line 481, in _ExecuteHook
        self._script_fullpath, 'exec'), context)
      File ".../repohooks/pre-upload.py", line 32, in <module>
        path = os.path.dirname(os.path.realpath(__file__))
    NameError: name '__file__' is not defined
    
    Define this variable in this context so code can safely use it.
    
    Change-Id: If6331312445fa61d9351b59f83abcc1c99ae6748
    project.py: Cleaned up pylint/pep8 violations
    
    I noticed when running pylint (as the SUBMITTING_PATCHES file directs)
    that there were a number of violations reported. This makes it difficult
    to see violations I might have introduced. This commit corrects all
    pylint violations in the project.py script.
    
    This script now has a pylint score of 10.0, and no violations reported
    by pep8.
    
    Change-Id: I1462fd84f5b6b4c0dc893052671373e7ffd838f1
    Fix prune when bare git has detached head
    
    We don't really use HEAD much in the bare git repositories, but there
    have been reports of errors in git-symbolic-ref:
    
      symbolic-ref: fatal: Refusing to point HEAD outside of refs/
    
    That happen when the bare git repo is in the detached head state. It's
    possible that previous operations were killed while we were pruning
    branches.
    
    Use DetachHead instead of SetHead if we're restoring the repo into a
    detached head state.
    
    Change-Id: I9062e8957bc70367d3ded399685ac026fbb421fc
    Check for broken links when updating linkfiles
    
    If a linkfile is a broken link (destination does not exist), and it
    needs to be updated, we didn't notice that it needed to be removed
    first. Use lexists instead of exists to check for this condition.
    
    Change-Id: I1f6a1f0193d3fd2b9f7a647836044997f6ab32eb
    Sync: Add option to prune refs during sync
    
    By passing --prune to the sync command, the --prune option is
    given to the `git fetch`, causing refs that no longer exist on
    the remote to be removed.
    
    Change-Id: I3cedacce14276d96ac2d5aabf2d07fd05e92bc02
    _CopyAndLinkFiles even if the sources haven't changed
    
    The source or destination attributes may have changed even if the source
    didn't, so we need to make sure that these are up to date.
    
    Change-Id: I266ef3598ddda7e8c23bc9c6a049905ddc586348
    GITC: Add repo start support.
    
    Add repo start support for GITC checkouts. If the user is in
    the GITC FS view, they can now run repo start to check out
    the sources and create a new working branch.
    
    When "repo start" is called on a GITC project, the revision
    tag is set to an empty string and saved in a new tag:
    old-revision. This tells the GITC filesystem to display the
    local copy of the sources when being viewed. The local copy
    is created by pulling the project sources and the new branch
    is created based off the original project revision.
    
    Updated main.py to setup each command's gitc_manifest when
    appropriate.
    
    Updated repo sync's logic to sync opened projects and
    updating the GITC manifest file for the rest.
    
    Change-Id: I7e4809d1c4fc43c69b26f2f1bebe45aab0cae628
    project.py: Improve message shown when hook is not replaced
    
    If a hook file has been modified locally, it will not be replaced.
    
    Improve the message to make this clearer.
    
    Also change it from an error to a warning.
    
    Change-Id: I62c635390f24d2868db17717c247861b0381c99f
    project.py: Consistently use the _error method to print error messages
    
    Use the _error method instead of directly calling `print`.
    
    Also add a new _warn convenience method.
    
    Change-Id: Ia332c14ef8d9d1fe2df128dbf36b5521802ccdf1
    Support smart-sync through persistent-http[s]
    
    Use the same cookies and proxy that git traffic goes through for
    persistent-http[s] to support authentication for smart-sync.
    
    Change-Id: I20f4a281c259053a5a4fdbc48b1bca48e781c692
    Fix formatting of message when retrying clone
    
    Passing the force_sync variable into the string formatting results in
    the message:
    
      "Retrying clone after deleting None"
    
    or
    
      "Retrying clone after deleting True".
    
    Pass the name of the git directory instead.
    
    Also, move the print inside the if-block so it's only displayed
    when the retry is actually going to be attempted.
    
    Change-Id: I76d9ecc176cecee4ad512d13e9d1f6bd36aacbbb
    Include project path in --force-sync error message
    
    For projects that have been cloned outside of the repo command (or
    cloned a long time ago), commit abaa7f312f1b6c8d11d7c757fe909900ce5788b5
    introduced an error message to invite the user to use --force-sync.
    However, due to the risk of data loss, it's useful to know which
    project's git directory is being replaced before deciding whether or not
    to provide --force-sync.
    
    This change updates the exception's associated value to include the
    project's relative path and explain to the user how they can resolve the
    issue. A previous version of this commit used the project name. However,
    for projects that have multiple work trees, the name can be ambiguous,
    while the path clearly identifies which git directory will be replaced.
    
    Change-Id: If717e66fda4d19accc0a8e889a91f4cd4ff14dff
    Fix shallow clone behavior
    
    The existing code here makes sure that switching clone-depth from on to
    off actually causes the history to be fully restored. Unfortunately, it
    does this by fetching the full history every time the fetch spec
    changes. Switching between two clone-depth="1" branches will fetch far
    more than the top commit.
    
    Instead, when not using clone-depth, pass --depth=2147483647 to git
    fetch so that it ensures that we have the entire history. That is
    slightly less efficient, so limit it to only when there are shallow
    objects in the project by checking for the existance of the 'shallow'
    file.
    
    Change-Id: Iee0cfc9c6992c208344b1d9123769992412db67b
    Fix _ReferenceGitDir symlinking
    
    This fixes these errors:
    
      ...
      File ".repo/repo/project.py", line 2371, in _ReferenceGitDir
        os.symlink(os.path.relpath(src, os.path.dirname(dst)), dst)
      OSError: [Errno 17] File exists
    
    Which was happening for checkouts that were created before v1.12.8, when
    project-objects was created. Nothing had yet been forcing these
    checkouts to use project-objects, until the recent verification changes.
    
    In this OSError case, we already created the symlink, so src == dst, and
    the directory did not exist. This caused us to run os.makedirs the
    os.symlink on the same file.
    
    dst really should be the file in gitdir, not the target of that symlink
    if it exists. So just use realpath for the dotgit portion of the path.
    
    Change-Id: Iff5396a2093de91029c42cf38aa57131fd22981c
    Add option to correct gitdir when syncing
    
    In some cases, a user may wish to continue with a sync even though
    it would require overwriting an existing git directory. This behavior
    is not safe as a default because it could result in the loss of some
    user data, but as an optional flag it allows the user more flexibility.
    
    To support this, add a --force-sync flag to the sync command that will
    attempt to overwrite the existing git dir if it is specified and the
    existing git dir points to the wrong obj dir.
    
    Change-Id: Ieddda8ad54e264a1eb4a9d54881dd6ebc8a03833
    InitGitDir: Clean up created directories
    
    If _InitGitDir fails, it leaves any progress it had made on the file
    system. This can cause subsequent calls to repo sync to behave
    differently. This is especially evident when _CheckDirReference() fails,
    since it will not be invoked when sync is retried because both the
    source and destination directories already exist.
    
    To address this, have _InitGitDir() clean up any directories it has created
    if it catches an exception. Also behave the same way for _InitWorkTree().
    
    Change-Id: Ic16bb3feea649e115b59bd44be294e89e3692aeb
    Revert "Add --prune option to fetch when syncing a mirror repo"
    
    For some users it is not desirable to remove refs that don't exist
    on the remote server when syncing a mirror repo.
    
    This reverts commit b4d43b9f664d6472b6c1e91c98f951037d00cea5.
    
    Change-Id: Ie849b66682138ef88da6cd1a5fbb27e993197dd7
    project.RemoteFetch: Handle depth cases more robustly
    
    The fetch logic for the case where depth is set and revision is a
    SHA1 has several failure modes that are not handled well by the
    current logic.
    
    1) 'git fetch <SHA1>' requires git version >= 1.8.3
    2) 'git fetch <SHA1>' can be prevented by a configuration option on the server.
    3) 'git fetch --depth=<N> <refspec>' can fail to contain a SHA1 specified by
       the manifest.
    
    Each of these cases cause infinite recursion when _RemoteFetch() tries to call
    itself with current_branch_only=False because current_branch_only is set to
    True when depth != None.
    
    To try to prevent the infinite recursion, we set self.clone_depth to None
    before the first retry of _RemoteFetch(). This will allow the Fetch to
    eventually succeed in the case where clone-depth is specified in the manifest.
    A user specified depth from the init command will still recurse infinitely.
    
    In addition, never try to fetch a SHA1 directly if the git version being used
    is not at least 1.8.3.
    
    Change-Id: I802fc17878c0929cfd63fff611633c1d3b54ecd3
    Teach _LinkFile._Link to handle globs.
    
    This allows a project to use globs in the linkfile src attribute. When
    a glob is used in the src the dest field must be a directory. Then
    _LinkFile._Link(self) calls will create symbolic links in the dest
    directory to all of the entries in the src as defined by the glob
    specification.
    
    Below all of the entries in master-configs/ will have symbolic links
    in <root dir>/configs directory:
    
      <project name="helloworld.git" path="apps/helloworld">
          <linkfile src="master-configs/*" dest="configs"/>
      </project>
    
    Change-Id: Idfed8fa47c83d2ca6e2b8e867731b8e2f9e2eb47
    Make linkfile symlinks relative
    
    The source (target) of the symlink is specified relative to a project
    within a tree, and the destination is specified relative to the top
    of the tree, so it should always be possible to create a relative symlink
    to the target file.  Relative symlinks will allow moving an entire tree
    without breaking the symlink, and copying a tree (with -p) without leaving
    a symlink to the old tree.
    
    Change-Id: I16492a8b59a137d2abe43ca78e3b212e2c835599
    Skip sleep and retry if git remote update exits with a signal
    
    Pressing ctrl-c during repo sync often hangs for 30 to 45 seconds
    due to the time.sleep and retry in _RemoteFetch.  If git exits with
    a signal, for example -2 for SIGINT triggered by ctrl-c, skip the
    sleep and retry.
    
    Change-Id: I32da12c2dcc96d9cc0b12a066e824b12ebfb52a0
    Fail if gitdir does not point to objdir during sync
    
    There are a set of cases that can cause the git directory in
    .repo/projects to point to a directory in .repo/project-objects that
    is not the one specified in the manifest. This results in a tree that
    is not sane, and so should cause a failure.
    
    In order to reproduce the failure case:
    1) Sync to any manifest
    2) Change the 'name' of a project to a different repository. Leave the
       'path' the same.
    3) Resync the modified project. The project-objects directory will not
       be created, and the projects directory will remain pointed at the old
       project-objects.
    
    Change-Id: Ie6711b1c773508850c5c9f748a27ff72d65e2bf2
    Add option on sync to avoid fetching from remotes for existing sha1
    
    In 2fb6466f795eb30c1dfa598501f5b5d2981e6a5f an optimisation was
    added to avoid fetching from remotes if the project is fixed to
    a revision and the revision is already available locally.
    
    This causes problems for users who expect all objects to be
    fetched by default.
    
    Change the logic so that the optimized behaviour is only enabled if
    an option is explicitly given to repo sync.
    
    Change-Id: I3b2794ddd8e0071b1787e166463cd8347ca9e24f
    Don't attempt to create "fully qualified names" for SHA1s
    
    Doing so breaks "repo init -b <SHA1>".
    
    Change-Id: Ic071a1b099a9125db22ea446d7e92e7854d69b37
    Add --prune option to fetch when syncing a mirror repo
    
    When syncing a mirror repo, add the --prune option to the fetch
    command to force removal of stale refs from the mirror.
    
    Change-Id: I4b43b2a5c86b9915627887c16f6569066f3ab978
    Don't append branch to fetch spec when syncing to a mirror
    
    Appending the branch to the fetch spec causes sync of a mirror to
    fail for projects that don't have an explicit revision specified,
    and don't have a branch of the same name as the default revision.
    
    For example, a manifest defining a default revision:
    
     <default revision="master">
    
    having a project without an explicit revision:
    
     <project name="path/to/project">
    
    and not having a branch named "master", will cause repo sync to
    fail for that project with the error:
    
     Couldn't find remote ref refs/heads/master
    
    Modify the logic to not append the branch onto the fetch spec when
    syncing to a mirror.
    
    Change-Id: I5c4457bd125519abf27abe682dea62ad708978c9
    Maintain fully qualified tracking branches
    
    When running repo branch, the git merge line (in many circumstances)
    is set to the revision of the project specified in the manifest.  If
    this is a branch name that is not fully-qualified, we will end up with
    something like "merge = master" instead of "merge = refs/heads/master".
    This change examines the revision if we are going to use that and
    changes branch short names to fully qualified branch names.
    
    Change-Id: Ie1be94fb8d45df8eeac44a47f729a3819a05fa81
    use the max depth instead of unshallow
    
    This allows the use of older versions of git
    
    Change-Id: I88ea685066603af19896a791829355ddbfa91ffe
    Always capture output for GitCommand
    
    Switch the GitCommand program to always capture the output for stdout
    and stderr.  And by default print the output while running.
    
    The options capture_stdout and capture_stderr have effectively become
    options to supress the printing of stdout and stderr.
    
    Update the 'git fetch' to use '--progress' so that the progress messages
    will be displayed.  git checks if the output location isatty() and if it
    is not a TTY it will by default not print the progress messages.
    
    Change-Id: Ifdae138e008f80a59195f9f43c911a1a5210ec60
    Revert "Implementation of manifest defined githooks"
    
    This reverts commit 38e4387f8eb8cffd6359d726c38a7c524fef07e3.
    
    A "repo init" followed by "repo sync" is meant to be as safe as
    "git clone".  In particular it should not run arbitrary code provided
    by the manifest owner.
    
    It would still be nice to have support for manifest-defined git hooks
    --- they'd just need a prompt like the upload RepoHook has.  Hopefully
    a later change can bring them back.
    
    Change-Id: I5ecd90fb5c2ed64f103d856d1ffcba38a47b062d
    Signed-off-by: Jonathan Nieder <jrn@google.com>
    Add space between project path and branch in repo status.
    
    Currently, paths longer than 39 chars have no space after them so it looks
    like this:
    
    project path/branch master
    
    Change-Id: I4c1bb13648ac099ade8a8d4ebafa04131571f842
    Print stderr output from git command for RemoteFetch
    
    The stderr output generated by git during a RemoteFetch was not being
    printed.  This information is useful so print it.
    
    Change-Id: I6e6ce12c4a57e5ca2359f76ce14f2fcbbc37a5ef
    Ensure the repo project is never fetched with partial depth
    
    If the repo project is synced with partial depth, then the tags
    won't be fetched and users will be told the newest sha1 in the
    stable branch isn't signed.
    
    Change-Id: I107df97b4836b928c76aa33a700fa35d1705ae09
    Handle case where 'git remote prune' needs to be run
    
    Handle the case when this error occurs:
        error: some local refs could not be updated; try running
         'git remote prune origin' to remove any old, conflicting branches
    
    This is usually caused by a reference getting changed from a file to a
    directory.
    
    For example:
      Initially someone creates a branch 'foo' and it is stored as:
        .git/refs/remotes/origin/foo
    
      Then later on it is decided to change the layout structure where 'foo'
      is a directory with branches below it:
        .git/refs/remotes/origin/foo/master
    
      The problem occurs when someone still has
      '.git/refs/remotes/origin/foo' on their system and does a repo sync.
      When this occurs the error message for needing to do a
      'git remote prune origin' occurs.
    
    Now when doing a 'git fetch' if the error message from git says that a
    'git remote prune' is needed, it will do the prune and then retry the
    fetch.
    
    Change-Id: I4c6f5aa6bd932f0ef7a39134400bedd52e82f633
    Signed-off-by: John L. Villalovos <john.l.villalovos@intel.com>
    Implementation of manifest defined githooks
    
    When working within a team or corporation it is often
    useful/required to use predefined git templates. This
    change teaches repo to use a per-remote git hook template
    structure.
    
    The implementation is done as a continuation of the
    existing projecthook functionality. The terminology is
    therefore defined as projecthooks.
    
    The downloaded projecthooks are stored in the .repo
    directory as a metaproject separating them from the users
    project forest.
    
    The projecthooks are downloaded and set up when doing a
    repo init and updated for each new repo init.
    
    When downloading a mirror the projecthooks gits are
    not added to the bare forest since the intention is to
    ensure that the latest are used (allows for company policy
    enforcement).
    
    The projecthooks are defined in the manifest file in the
    remote element as a subnode, the name refers to the
    project name on the server referred to in the remote.
    <remote name="myremote ..>
       <projecthook name="myprojecthookgit" revision="myrevision"/>
    </remote>
    
    The hooks found in the projecthook revision supersede
    the stock hooks found in repo. This removes the need for
    updating the projecthook gits for repo stock hook changes.
    
    Change-Id: I6796b7b0342c1f83c35f4b3e46782581b069a561
    Signed-off-by: Patrik Ryd <patrik.ryd@stericsson.com>
    Signed-off-by: Ian Kumlien <ian.kumlien@gmail.com>
    pylint fixes for project.py
    
    Fix all the formatting warnings and unused variables
    
    Change-Id: I17d88a23572303879530077f3a80451de5417fbb
    Use depth flag when fetching
    
    Currently, we only use the depth flag when cloning.  The result is that when
    new project history has merges, the entire history of the merged branch is
    brought in and the project becomes unshallow very quickly.  --depth and
    clone-depth are often used to save on space, not just network load, so this
    seems less than ideal.
    
    This change uses --depth on every fetch (when the user has depth specified),
    not just the initial clone.  The result is that the given project stays
    consistently shallow as opposed to growing over time, especially when merges
    are involved.
    
    Change-Id: Iac706cfdad4a555c72f9d9f1119195d38d91df12
    Handle shallow checkout of SHA1 pinned repos
    
    When doing a shallow checkout SHA1 pinned repos with repo init --depth=1 and
    repo sync -c, repo would try to fetch only some reference and fail if the exact
    SHA1 repo was missing.
    Instead, when depth is set, fetch only the specific commit.
    
    Change-Id: If3f799d0e78c03faea47f796380bb5e367b11998
    Don't delete hooks in .git/hooks
    
    We currently delete all hooks in .git/hooks for each project before
    symlink'ing in the standard project hooks.  This can be annoying for
    users who have installed custom git hooks.
    
    There's no reason to delete all existing hooks.  Just rip out the
    deletion code.
    
    Change-Id: I5062a6cd20af700f6d6a17b11ad6c94853987c57
    Signed-off-by: Mitchel Humpherys <mitchelh@codeaurora.org>
    Respect --quiet when looking up bundle cookie file
    
    Change-Id: I02a244132c49e4bb50ecda978974d6d2b220f6d1
    Save cookies back to jar when fetching clone.bundle
    
    Change-Id: I3ef71b5e7f8ee1cda66057e46ae234866c7258c4
    Hold persistent proxy connection open while fetching clone.bundle
    
    The persistent proxy may choose to present a per-process cookie file
    that gets cleaned up after the process exits, to help with the fact
    that libcurl cannot save cookies atomically when a cookie file is
    shared across processes. We were letting this cleanup happen
    immediately by closing stdin as soon as we read the configuration
    option, resulting in a nonexistent cookie file by the time we use the
    config option.
    
    Work around this by converting the cookie logic to a context manager
    method, which closes the process only when we're done with the cookie
    file.
    
    Change-Id: I12a88b25cc19621ef8161337144c1b264264211a
    Silence warnings about invalid clone.bundle files when quieted
    
    The invalid clone.bundle file warning is not typically user actionable,
    and can be confusing. So don't show it when -q flag is in effect.
    
    Change-Id: If9fef4085391acf54b63c75029ec0e161c38eb86
    Revert "Check for existence of refs upon initial fetch"
    
    This reverts commit 565480588d2bff4205b437862505e77382189811.
    
    We are reverting this change for 2 reasons:
    
    1) It introduced a bug for users using sync -c with a reference mirror.
    2) The fetch specs have recently changed to cause git to properly fail
    when we request a non-existent branch of a manifest, removing the need
    for this change.
    
    Change-Id: I0f63da9bfb40cf5ffafb7979f1b8c929a738fc7b
    upload: report names of uncommitted files
    
    When there are uncommitted files in the tree, 'repo upload' stops to
    ask if it is OK to continue, but does not report the actual names of
    uncommitted files.
    
    This patch adds plumbing to have the outstanding file names reported
    if desired.
    
    BUG=None
    TEST=verified that 'repo upload' properly operates with the following
        conditions present in the tree:
        . file(s) modified locally
        . file(s) added to index, but not committed
        . files not known to git
        . no modified files (the upload proceeds as expected)
    
    Change-Id: If65d5f8e8bcb3300c16d85dc5d7017758545f80d
    Signed-off-by: Vadim Bendebury <vbendeb@chromium.org>
    Signed-off-by: Vadim Bendebury <vbendeb@google.com>
    Always fetch the specific revision given
    
    Don't assume the revision is in refs/heads/.
    
    Change-Id: I1f71be222ed3ed940d2265aad43d1f2d601fc03a
    Support specifying non-HEADS refs as upstream
    
    While not typical, some users might have an upstream that isn't in
    the usual refs/heads/* namespace. There's no reason not to use
    those refs as the value for the upstream attribute, so support
    doing so.
    
    Change-Id: I5b119f1135c3268c20e7c4084682e860d3ee1fb1
    Don't open non-binary files as binary
    
    * Don't pen the git config file, and the git ".lock" file as binary.
    
    Change-Id: I7b3939658456f2fd0a0500443cdd8d1ee1a4459d
    Use fetch --unshallow when appropriate.
    
    If a user reinits to a different manifest or the manifest updates so
    that a project no longer has a fixed depth, we need to use --unshallow
    when we fetch.
    
    Change-Id: I6d3f15e5464b5eaad9205654bc24354947a78aea
    Enable remotes to define their own revision
    
    Some projects use multiple remotes.
    In some cases these remotes have different naming conventions.
    Add an option to define a revision in the remote configuration.
    
    The `project` revision takes precedence over `remote` and `default`.
    The `remote` revision takes precedence over `default`.
    The `default` revision acts as a fall back as it originally did.
    
    Change-Id: I2b376160d45d48b0bab840c02a3eef1a1e32cf6d
    Use next(iterator) rather than iterator.next()
    
    iterator.next() was replaced with iterator.__next__() in Python 3.
    Use next(iterator) instead which will select the correct method for
    returning the next item.
    
    Change-Id: I6d0c89c8b32e817e5897fe87332933dacf22027b
    Use exec() rather than execfile()
    
    execfile() is not in Python 3.
    
    Change-Id: I5af222340f13c1e8edaa820e7675d3e4d62a1689
    Ensure HEAD is correct when skipping remote fetch
    
    A recent optimization (2fb6466f795eb30c1dfa598501f5b5d2981e6a5f) skips
    performing a remote fetch if we already know we have the sha1 we want.
    However, that optimization skipped initialization steps that ensure HEAD
    points to the correct sha1.  This change makes sure not to skip those
    steps.
    
    Here is an example of how to test this change:
    
    """""""""
    url=<manifest url>
    branch1=<branch name>
    branch2=<branch name>
    project=<project with revision set to different sha1 in each branch>
    
    repo init -u $url -b $branch1 --mirror
    repo sync $project
    first=$(cd $project.git; git rev-parse HEAD)
    
    repo init -b $branch2
    repo sync $project
    second=$(cd platform/build.git; git rev-parse HEAD)
    
    if [[ $first == $second ]]
    then
        echo 'problem!'
    else
        echo 'no problem!'
    fi
    """""""""
    Add 'shallow' gitfile to symlinks
    
    This fixes the bug that kept clients from doing things like `git log`
    in projects using the clone-depth feature.
    
    Change-Id: Ib4024a7b82ceaa7eb7b8935b007b3e8225e0aea8
    Add linkfile support.
    
    It's just like copyfile and runs at the same time as copyfile but
    instead of copying it creates a symlink instead.  This is needed
    because copyfile copies the target of the link as opposed to the
    symlink itself.
    
    Change-Id: I7bff2aa23f0d80d9d51061045bd9c86a9b741ac5
    Ignore clone-depth attribute when fetching to a mirror
    
    If a manifest includes projects with a clone-depth=1 attribute, and a
    workspace is initialised from that manifest using the --mirror option,
    any workspaces initialised and synced from the mirror will fail with:
    
      fatal: attempt to fetch/clone from a shallow repository
    
    on the projects that had the clone-depth.
    
    Ignore the clone-depth attribute when fetching from the remote to a
    mirror workspace. Thus the mirror will be synched with a complete
    clone of all the repositories.
    
    Change-Id: I638b77e4894f5eda137d31fa6358eec53cf4654a
    Make --no-tags work with -c
    
    Currently, the --no-tags option is ignored if the user asks to only
    fetch the current branch. There is no reason for this restriction. Fix
    it.
    
    Change-Id: Ibaaeae85ebe9955ed49325940461d630d794b990
    Signed-off-by: Mitchel Humpherys <mitchelh@codeaurora.org>
    Fix indentation in project.py
    
    Change-Id: I81c630536eaa54d5a25b9cb339a96c28619815ea
    More verbose errors for NoManifestExceptions.
    
    The old "manifest required for this command -- please run
    init" is replaced by a more helpful message that lists the
    command repo was trying to execute (with arguments) as well
    as the str() of the NoManifestException. For example:
    
    > error: in `sync`: [Errno 2] No such file or directory:
    >       'path/to/.repo/manifests/.git/HEAD'
    > error: manifest missing or unreadable -- please run init
    
    Other failure points in basic command parsing and dispatch
    are more clearly explained in the same fashion.
    
    Change-Id: I6212e5c648bc5d57e27145d55a5391ca565e4149
    Don't fetch from remotes if commit id exists locally
    
    In existing workspaces where the manifest specifies a commit id in the
    manifest, we can avoid doing a fetch from the remote if we have the
    commit locally. This substantially improves sync times for fully
    specified manifests.
    
    Change-Id: Ide216f28a545e00e0b493ce90ed0019513c61613
    Add the "diffmanifests" command
    
    This command allows a deeper diff between two manifest projects.
    In addition to changed projects, it displays the logs of the
    commits between both revisions for each project.
    
    Change-Id: I86d30602cfbc654f8c84db2be5d8a30cb90f1398
    Signed-off-by: Julien Campergue <julien.campergue@parrot.com>
    Check for existence of refs upon initial fetch
    
    When we do an initial fetch and have not specified any branch etc,
    the following fetch command will not error:
    git fetch origin --tags +refs/heads/*:refs/remotes/origin/*
    
    In this change we make sure something got fetched and if not we report
    an error.
    
    This fixes the bug that occurs when we init using a bad manifest url and
    then are unable to init again (because a manifest project has been
    inited with no manifest).
    
    Change-Id: I6f8aaefc83a1837beb10b1ac90bea96dc8e61156
    Only fetch current branch on shallow clients
    
    Fetching a new branch on a shallow client may download the entire
    project history, as the depth parameter is not passed to git
    fetch. Force the fetch to only download the current branch.
    
    Change-Id: Ie17ce8eb5e3487c24d90b2cae8227319dea482c8
    Add --archive option to init to sync using git archive
    
    This significantly reduces sync time and used brandwidth as only
    a tar of each project's revision is checked out, but git is not
    accessible from projects anymore.
    
    This is relevant when git is not needed in projects but sync
    speed/brandwidth may be important like on CI servers when building
    several versions from scratch regularly for example.
    
    Archive is not supported over http/https.
    
    Change-Id: I48c3c7de2cd5a1faec33e295fcdafbc7807d0e4d
    Signed-off-by: Julien Campergue <julien.campergue@parrot.com>
    Canonicalize project hooks path before use
    
    If the top-level .repo directory is moved somewhere else (e.g. a
    different drive) and replaced with a symlink, _InitHooks() will create
    broken symlinks. Resolving symlinks before computing the relative path
    for the symlink keeps the path within the repo tree, so the tree can
    be moved anywhere.
    
    Change-Id: Ifa5c07869e3477186ddd2c255c6c607f547bc1fe
    Fix print of git-remote-persistent-https error
    
    If git-remote-persistent-https fails, we use an iter() and then
    subsequently a .read() on stderr.  Python doesn't like this and
    gives the following error message:
    ValueError: Mixing iteration and read methods would lose data
    
    This change removes the use of iter() to avoid the issue.
    
    Change-Id: I980659b83229e2a559c20dcc7b116f8d2476abd5
    Fix some python3 encoding issues
    
    * Add .decode('utf-8') where needed
    * Add 'b' to `open` where needed, and remove where unnecessary
    
    Change-Id: I0f03ecf9ed1a78e3b2f15f9469deb9aaab698657
    repo: Support multiple branches for the same project.
    
    It is often useful to be able to include the same project more than
    once, but with different branches and placed in different paths in the
    workspace. Add this feature.
    
    This CL adds the concept of an object directory. The object directory
    stores objects that can be shared amongst several working trees. For
    newly synced repositories, we set up the git repo now to share its
    objects with an object repo.
    
    Each worktree for a given repo shares objects, but has an independent
    set of references and branches. This ensures that repo only has to
    update the objects once; however the references for each worktree are
    updated separately. Storing the references separately is needed to
    ensure that commits to a branch on one worktree will not change the
    HEAD commits of the others.
    
    One nice side effect of sharing objects between different worktrees is
    that you can easily cherry-pick changes between the two worktrees
    without needing to fetch them.
    
    Bug: Issue 141
    Change-Id: I5e2f4e1a7abb56f9d3f310fa6fd0c17019330ecd
    Accept all UTF-8 committer names
    
    Change-Id: I7d9d49a8bacf2dc332614d26cdfcc905be7a5290
    Wait for git-remote-persistent-https -print_config to exit
    
    Change-Id: I5ab96e7c8575682217d440ddc52ecfdc8c35f179
    DownloadPatchSet: fetch the change only, and nothing else.
    
    * Previously, it would run `git fetch <remote.name> <change refspec>
      <remote.fetch>, which would fetch all the branches, even if 'sync-c'
      was set to true in the manifest.
    * Fix that, since all it needs to fetch is the change that was asked
      for, and nothing else.
    * For some more info, refer to the discussion on:
      I42a9d419b51f5da03f20a640ea68993cda4b6500
    
    Change-Id: Ibc801695d56fc16e56f999e0f61393f54461785f
    Read cookie file from git-remote-persistent-https if applicable
    
    git-remote-persistent-https proxy implementations may pass cookie file
    configuration to git-remote-https. When fetching bundles for
    persistent-http(s) URLs, use the -print_config flag (if supported) to
    extract this information from the proxy binary and pass it to curl,
    overriding http.cookiefile from .gitconfig.
    
    This adds a few ms overhead per clone.bundle fetch, which should be
    acceptable since it happens only on the initial clone, which takes
    much longer anyway.
    
    Change-Id: I03be8ebaf8d3005855d33998cd8ecd412e8ec287
    Ensure clone.bundle files have proper header
    
    Server auth middleware may return a 200 from a clone.bundle request
    that is not a bundle file, but instead a login or access denied page.
    Instead of just checking the file size, actually check the first few
    bytes of the file to ensure it is a bundle file before proceeding.
    
    Change-Id: Icea07567c568a24fd838e5cf974c58f9e4abd7c0
    Send reviews to a different branch from fetch
    
    This adds the ability to have reviews pushed to a different branch
    from the one on which changes are based. This is useful for "gateway"
    systems without smartsync.
    
    Change-Id: I3a8a0fabcaf6055e62d3fb55f89c944e2f81569f
    Move Python version checking to a separate module
    
    Add a new module with methods for checking the Python version.
    
    Instead of handling Python3 imports with try...except blocks, first
    check the python version and then import the relevant modules.  This
    makes the code a bit cleaner and will result in less diff when/if we
    remove support for Python < 3 later.
    
    Use the same mechanism to handle `input` vs. `raw_input` and add
    suppression of pylint warnings caused by redefinition of the built-in
    method `input`.
    
    Change-Id: Ia403e525b88d77640a741ac50382146e7d635924
    Also-by: Chirayu Desai <cdesai@cyanogenmod.org>
    Signed-off-by: Chirayu Desai <cdesai@cyanogenmod.org>
    Use reference also for manifest git
    
    When running 'repo init --reference=<mirror>', the mirror will be
    used for all projects except the manifest project. This is because
    the _InitGitDir function uses the 'repo.reference' git config
    value specified in the manifest git, which has no effect when
    creating the manifest git as that value will be set after the git
    has been successfully cloned.
    
    Information about where the manifest git is located on the server
    is only known when performing the 'repo init', so that information
    has to be provided when cloning the git in order for it to set up
    a proper mapping.
    
    Change-Id: I47a2c8b3267a4065965058718ce1def4ecb34d5a
    Signed-off-by: Chirayu Desai <cdesai@cyanogenmod.org>
    Repo should not fetch tags for shallow projects
    
    Fetching all tags for a shallow git results in an
    inconstent git and forces git to fetch more than
    the depth specified.
    
    This change teaches repo not to fetch any tags in a
    repository initialised with the depth option.
    
    Change-Id: I557ead9f88fa0d6a19b1cb55b23bba1100fcb8f2
    Signed-off-by: Patrik Ryd <patrik.ryd@stericsson.com>
    Some fixes for supporting python3
    
    * Fix imports.
    * Use python3 syntax.
    * Wrap map() calls with list().
    * Use list() only wherever needed.
      (Thanks Conley!)
    * Fix dictionary iteration methods
      (s/iteritems/items/).
    * Make use of sorted() in appropriate places
    * Use iterators directly in the loop.
    * Don't use .keys() wherever it isn't needed.
    * Use sys.maxsize instead of sys.maxint
    
    TODO:
    * Make repo work fully with python3. :)
    
    Some of this was done by the '2to3' tool [1], by
    applying the needed fixes in a way that doesn't
    break compatibility with python2.
    
    Links:
    [1]: http://docs.python.org/2/library/2to3.html
    
    Change-Id: Ibdf3bf9a530d716db905733cb9bfef83a48820f7
    Signed-off-by: Chirayu Desai <cdesai@cyanogenmod.org>
    Allow clone depth to be specified per project
    
    If the clone-depth attribute is set on a project, its value will
    be used to set the depth when fetching the git.  The value, if
    given, must be a positive integer.
    
    The value in the clone-depth attribute overrides any value given to
    repo init via the --depth command line option.
    
    Change-Id: I273015b3724213600b63e40cca4cafaa9f782ddf
    Special handling for manifest group "default"
    
    Change Details:
    * Make "default" a special manifest group that matches any project that
      does not have the special project group "notdefault"
    * Use "default" instead of "all,-notdefault" when user does not specify
      manifest group
    * Expand -g option help to include example usage of manifest groups
    
    Change Benefits:
    * Allow a more intuitive and expressive manifest groups specification:
      * "default" instead of "all,-notdefault"
      * "default,foo" instead of "all,-notdefault,foo"
      * "default,-foo" instead of "all,-notdefault,-foo"
      * "foo,-default" which has no equivalent
    * Default manifest groups behavior can be restored by the command
      'repo init -g default'. This is significantly more intuitive than the
      current equivalent command 'repo init -g all,-notdefault'.
    
    Change-Id: I6d0673791d64a650110a917c248bcebb23b279d3
    Re-initialise repos git hooks when updating the forest
    
    Repo now re-initialises the git-hooks reference directory
    when updating the forest. This allows for any new template
    files to be made available throughout the project forest
    when updating the forest. Previous functionality required
    the user to recreate the forest.
    
    Change-Id: I9051265028a9e77d6139791547fff095bc195077
    Signed-off-by: Patrik Ryd <patrik.ryd@stericsson.com>
    upload: support --re and --cc options over HTTP
    
    HTTP can't use the older style of passing options as part of
    the git receive-pack command line. Use the new style as defined
    by https://gerrit-review.googlesource.com/42652 when connecting
    over HTTP.
    
    If the Gerrit server is too old to understand the % option
    syntax used here one of two outcomes is possible:
    
    - If no topic name was sent the server will fail with an error
      message. This happens because the user tried to do an upload to
      "refs/for/master%r=alice", and the branch does not exist.
      The user can delete the options and retry the upload.
    
    - If a topic was set the options will be read as part of the
      topic string and shown on the change page in the topic field.
    
    Either outcome is slightly better than the current behavior of
    just dropping the data on the floor and forgetting whatever the
    user tried to supply.
    
    Change-Id: Ib2df62679e5bf3ee93d6b18c12ab6474f96d9106
    Add --no-tags option to prevent fetching of tags
    
    Add an option to pass `--no-tags' to `git fetch'.
    
    Change-Id: I4158cc369773e08e55a167091c38ca304a197587
    Signed-off-by: Mitchel Humpherys <mitchelh@codeaurora.org>
    Check for a cookie file when fetching clone.bundle.
    
    If the user's git config specifies a cookie file for HTTP, use it when
    fetching clone.bundle, as it may contain the required login credentials
    to get access (e.g. when used with Compute Engine service accounts).
    
    Change-Id: I12ee9e38694822ef1de4ed62138c3876c43f431b
    Represent git-submodule as nested projects, take 2
    
    (Previous submission of this change broke Android buildbot due to
     incorrect regular expression for parsing git-config output.  During
     investigation, we also found that Android, which pulls Chromium, has a
     workaround for Chromium's submodules; its manifest includes Chromium's
     submodules.  This new change, in addition to fixing the regex, also
     take this type of workarounds into consideration; it adds a new
     attribute that makes repo not fetch submodules unless submodules have a
     project element defined in the manifest, or this attribute is
     overridden by a parent project element or by the default element.)
    
    We need a representation of git-submodule in repo; otherwise repo will
    not sync submodules, and leave workspace in a broken state.  Of course
    this will not be a problem if all projects are owned by the owner of the
    manifest file, who may simply choose not to use git-submodule in all
    projects.  However, this is not possible in practice because manifest
    file owner is unlikely to own all upstream projects.
    
    As git submodules are simply git repositories, it is natural to treat
    them as plain repo projects that live inside a repo project.  That is,
    we could use recursively declared projects to denote the is-submodule
    relation of git repositories.
    
    The behavior of repo remains the same to projects that do not have a
    sub-project within.  As for parent projects, repo fetches them and their
    sub-projects as normal projects, and then checks out subprojects at the
    commit specified in parent's commit object.  The sub-project is fetched
    at a path relative to parent project's working directory; so the path
    specified in manifest file should match that of .gitmodules file.
    
    If a submodule is not registered in repo manifest, repo will derive its
    properties from itself and its parent project, which might not always be
    correct.  In such cases, the subproject is called a derived subproject.
    
    To a user, a sub-project is merely a git-submodule; so all tips of
    working with a git-submodule apply here, too.  For example, you should
    not run `repo sync` in a parent repository if its submodule is dirty.
    
    Change-Id: I4b8344c1b9ccad2f58ad304573133e5d52e1faef
    Raise a NoManifestException when the manifest DNE
    
    When a command (eg, `repo forall`) expects the manifest project to
    exist, but there is no manifest, an IOException gets raised.  This
    change defines a new Exception type to be raised in these cases and
    raises it when project.py fails to read the manifest.
    
    Change-Id: Iac576c293a37f7d8f60cd4f6aa95b2c97f9e7957
    Tidy up code formatting a bit more
    
    Enable the following Pylint warnings:
    
      C0322: Operator not preceded by a space
      C0323: Operator not followed by a space
      C0324: Comma not followed by a space
    
    And make the necessary fixes.
    
    Change-Id: I74d74283ad5138cbaf28d492b18614eb355ff9fe
    Fix: "Statement seems to have no effect"
    
    Pylint raises an error on the call:
    
      print
    
    Change it to:
    
     print()
    
    Change-Id: I507e1b3dd928fa6c32ea7e86260fb3d7b1428e6f
    Fix inconsistent indentation
    
    The repo coding style is to indent at 2 characters, but there are
    many places where this is not followed.
    
    Enable pylint warning "W0311: Bad indentation" and make sure all
    indentation is at multiples of 2 characters.
    
    Change-Id: I68f0f64470789ce2429ab11104d15d380a63e6a8
    Change print statements to work in python3
    
    This is part of a series of changes to introduce Python3 support.
    
    Change-Id: I373be5de7141aa127d7debdbce1df39148dbec32
    Fix pylint warning W0108: Lambda may not be necessary
    
    Remove unnecessary usage of lambda.
    
    Change-Id: I06d41933057d60d15d307ee800cca052a44754c6
    project: Require git >= 1.7.2 for setting config on command line
    
    This option causes the git call to fail, which probably indicates a
    programming error; callers should check the git version and change the
    call appropriately if -c is not available. Failing loudly is preferable
    to failing silently in the general case.
    
    For an example of correctly checking at the call site, see I8fd313dd.
    If callers prefer to fail silently, they may set GIT_CONFIG_PARAMETERS
    in the environment rather than using the config kwarg to pass
    configuration.
    
    Change-Id: I0de18153d44d3225cd3031e6ead54461430ed334
    Even more coding style cleanup
    
    Fixing some more pylint warnings:
    
    W1401: Anomalous backslash in string
    W0623: Redefining name 'name' from outer scope
    W0702: No exception type(s) specified
    E0102: name: function already defined line n
    
    Change-Id: I5afcdb4771ce210390a79981937806e30900a93c
    Revert "Represent git-submodule as nested projects"
    
    This reverts commit 69998b0c6ff724bf620480140ccce648fec7d6a9.
    Broke Android's non-gitmodule use case.
    
    Conflicts:
            project.py
            subcmds/sync.py
    
    Change-Id: I68ceeb63d8ee3b939f85a64736bdc81dfa352aed
    Fix pylint warnings introduced by the submodule patch
    
    "69998b0 Represent git-submodule as nested projects" has introduced a
    few pylint warnings.
    
    W0612:1439,8:Project._GetSubmodules.get_submodules: Unused variable 'sub_gitdir'
    W0613:1424,36:Project._GetSubmodules.get_submodules: Unused argument 'path'
    W0612:1450,25:Project._GetSubmodules.parse_gitmodules: Unused variable 'e'
    W0622:516,8:Sync.Execute: Redefining built-in 'all'
    
    Change-Id: I84378e2832ed1b5ab023e394d53b22dcea799ba4
    project: Support config args in git command callables
    
    Change-Id: I9d4d0d2b1aeebe41a6b24a339a154d258af665eb
    Use modern Python exception syntax
    
    "except Exception as e" instead of "except Exception, e"
    
    This is part of a transition to supporting Python 3.  Python >= 2.6
    support "as" syntax.
    
    Note: this removes Python 2.5 support.
    
    Change-Id: I309599f3981bba2b46111c43102bee38ff132803
    Represent git-submodule as nested projects
    
    We need a representation of git-submodule in repo; otherwise repo will
    not sync submodules, and leave workspace in a broken state.  Of course
    this will not be a problem if all projects are owned by the owner of the
    manifest file, who may simply choose not to use git-submodule in all
    projects.  However, this is not possible in practice because manifest
    file owner is unlikely to own all upstream projects.
    
    As git submodules are simply git repositories, it is natural to treat
    them as plain repo projects that live inside a repo project.  That is,
    we could use recursively declared projects to denote the is-submodule
    relation of git repositories.
    
    The behavior of repo remains the same to projects that do not have a
    sub-project within.  As for parent projects, repo fetches them and their
    sub-projects as normal projects, and then checks out subprojects at the
    commit specified in parent's commit object.  The sub-project is fetched
    at a path relative to parent project's working directory; so the path
    specified in manifest file should match that of .gitmodules file.
    
    If a submodule is not registered in repo manifest, repo will derive its
    properties from itself and its parent project, which might not always be
    correct.  In such cases, the subproject is called a derived subproject.
    
    To a user, a sub-project is merely a git-submodule; so all tips of
    working with a git-submodule apply here, too.  For example, you should
    not run `repo sync` in a parent repository if its submodule is dirty.
    
    Change-Id: I541e9e2ac1a70304272dbe09724572aa1004eb5c
    More coding style cleanup
    
    Fixing more issues found with pylint.  Some that were supposed to
    have been fixed in the previous sweep (Ie0db839e) but were missed:
    
    C0321: More than one statement on a single line
    W0622: Redefining built-in 'name'
    
    And some more:
    
    W0631: Using possibly undefined loop variable 'name'
    W0223: Method 'name' is abstract in class 'name' but is not overridden
    W0231: __init__ method from base class 'name' is not called
    
    Change-Id: Ie119183708609d6279e973057a385fde864230c3
    Rename "dir" variables
    
    The variable name "dir" conflicts with the name of a Python built-in
    function: http://docs.python.org/library/functions.html#dir
    
    Change-Id: I850f3ec8df7563dc85e21f2876fe5e6550ca2d8f
    Coding style cleanup
    
    Fix the following issues reported by pylint:
    
    C0321: More than one statement on a single line
    W0622: Redefining built-in 'name'
    W0612: Unused variable 'name'
    W0613: Unused argument 'name'
    W0102: Dangerous default value 'value' as argument
    W0105: String statement has no effect
    
    Also fixed a few cases of inconsistent indentation.
    
    Change-Id: Ie0db839e7c57d576cff12d8c055fe87030d00744
    manifest: record the original revision when in -r mode.
    
    Currently when doing a sync against a revision locked manifest,
    sync has no option but to fall back to sync'ing the entire refs space;
    it doesn't know which ref to ask for that contains the sha1 it wants.
    
    This sucks if we're in -c mode; thus when we generate a revision
    locked manifest, record the originating branch- and try syncing that
    branch first.  If the sha1 is found within that branch, this saves
    us having to pull down the rest of the repo- a potentially heavy
    saving.
    
    If that branch doesn't have the desired sha1, we fallback to sync'ing
    everything.
    
    Change-Id: I99a5e44fa1d792dfcada76956a2363187df94cf1
    Fix errors when clone.bundle missing on server
    
    Catch curl failures to download clone.bundle; don't let git try to parse
    the 404 page as a bundle file (was causing much user confusion).
    
    This should eliminate false error messages from init and sync such as:
      error: '.repo/manifests.git/clone.bundle' does not look like a v2 bundle file
      fatal: Could not read bundle '.repo/manifests.git/clone.bundle'.
      error: RPC failed; result=22, HTTP code = 400
    
    Signed-off-by: Matt Gumbel <matthew.k.gumbel@intel.com>
    Change-Id: I7994f7c0baecfb45bb5a5850c48bd2a0ffabe773
    Allow projects to be specified as notdefault
    
    Instead of every group being in the group "default", every project
    is now in the group "all".   A group that should not be downloaded
    by default may be added to the group "notdefault".
    
    This allows all group names to be positive (instead of removing groups
    directly in the manifest with -default) and offers a clear way of
    selecting every project (--groups all).
    
    Change-Id: I99cd70309adb1f8460db3bbc6eff46bdcd22256f
    Remove unused imports
    
    There are several imports that are not used.  Remove them.
    
    Change-Id: I2ac3be66827bd68d3faedcef7d6bbf30ea01d3f2
    project.py: Replace the relpath function with os.path.relpath
    
    Change-Id: Ib313340344968211cecfc0a718f6072e41da1a91
    Use curl command line tool for clone.bundle
    
    urllib2 is not thread safe and may be causing sync to lock up or
    not work correctly on various platforms. Instead use the command
    line curl program.
    
    Change-Id: I36eaf18bb4df089d26ea99d533cb015e7c616eb0
    Fix unsupported operand type(s) for +: 'int' and 'str'
    
    Change-Id: I88455107d63daaa60c3b33c010aa8c730a590c70
    Fix percent done on resumed /clone.bundle
    
    The Content-Length when resuming is the number of bytes that
    remain in the file. To compute the total size as expected by
    the progress meter, we must add the bytes already stored.
    
    While we are in this method fix uses of % operator to ensure
    a tuple is always supplied.
    
    Change-Id: Ic899231b5bc0ab43b3ddb1d29845f6390e820115
    upload: add --draft option.
    
    Change-Id: I6967ff2f8163cd4116027b3f15ddb36875942af4
    Don't delete the branch config when switching branches.
    
    The fix for issue #46 in 5d016502ebc6 appears to break syncing in some
    situations: the branch is deleted after the point where it's been
    configured, which deletes part of its configuration and causes the
    config to change each time you call `repo init`, alternating between a
    configuration that works and one that doesn't.
    
    Instead of deleting the branch with git branch -D, use git update-ref -d
    which just deletes the ref (to avoid the rebase) without touching the
    configuration for the branch that was set up during the first repo init.
    
    This appears to ensure the config is left in a valid state all the time
    no matter what combination of repo init commands you run, without
    reintroducing the rebasing issue.
    
    Change-Id: Iaadaa6e56a46840bbc593fa5b35cb5b34cd3ce69
    Detach branch even when already on the latest revision using sync -d
    
    This patch fixes repo behaviour when running sync -d with unmodified
    topic branches.
    
    Prior to this patch sync -d would see the latest revision is already
    checked out, thus staying on the branch. Since "-d" means detach we
    should follow git's behaviour and actually detach from the branch in
    that case.
    
    Basic test case - after a fresh repo init + sync -
            * repo start --all testdetach
            * repo sync -d
            * repo status
    -> status shows active topic branch "testdetach",
       should show :
    nothing to commit (working directory clean)
    
    Change-Id: Ic1351e6b5721b76557a51ab09f9dd42c38a4b415
    Fix switching manifest branches using repo init -b
    
    See repo issue #46 :
            https://code.google.com/p/git-repo/issues/detail?id=46
    
    When using repo init -b on an already existing repository,
    the next sync will try to rebase changes coming from the old manifest
    branch onto the new, leading in the best case scenario to conflicts
    and in the worst case scenario to an incorrect "mixed up" manifest.
    
    This patch fixes this by deleting the "default" branch in the local
    manifest repository when the -d init switch is used, thus forcing
    repo to perform a fresh checkout of the new manifest branch
    
    Change-Id: I379e4875ec5357d8614d1197b6afbe58f9606751
    Allow projects with groups=None
    
    Mirror manifest and repo projects are outside the manifest and
    have no groups.  Allow project groups to be None for these
    projects.
    
    Change-Id: I3e1c4add894fe1c43aa4e77a1fc1558aa10dd191
    Fix initial sync broken by sync-c option
    
    Change-Id: I308753da8944e6ce5c46e3bfee1bcd41d5b7e292
    repo download: add --ff-only option
    
    Allows to ff-only a gerrit patch
    This patch is necessary to automatically ensure that the patch will
    be correctly submitted on ff-only gerrit projects
    
    You can now use:
    repo download (--ff-only|-f) project changeid/patchnumber
    
    This is useful to automate verification of fast forward status of a patch
    in the context of build automation, and commit gating (e.g. buildbot)
    
    Change-Id: I403a667557a105411a633e62c8eec23d93724b43
    Signed-off-by: Erwan Mahe <erwan.mahe@intel.com>
    Signed-off-by: Pierre Tardy <pierre.tardy@intel.com>
    repo download: add --revert option
    
    BZ: 4779
    Allows to revert a gerrit patch
    This patch is necessary for the on-demand creation of
    engineering builds using buildbot
    
    You can now use:
    repo download [--revert|-r project changeid/patchnumber
    
    This is useful to automate reverting of a patch
    in the context of build automation, and regression bisection
    
    Change-Id: I3985e80e4b2a230f83526191ea1379765a54bdcf
    Signed-off-by: Erwan Mahe <erwan.mahe@intel.com>
    Signed-off-by: Pierre Tardy <pierre.tardy@intel.com>
    repo download: add --cherry-pick option
    
    default option uses git checkout, and thus overwrite the previous
    checkouts.  this is a problem for automated builds of several
    changesets in the same project for daily builds of pending submission
    
    You can now use:
    repo download [--cherry-pick|-c] project changeid/patchnumber
    
    This will parse the manifest, cd to the corresponding project
    download the changes to FETCH_HEAD and cherry-pick the result.
    
    This is useful to automate cherry-picking of a patch
    in the context of build automation, and commit gating (e.g. buildbot)
    
    Change-Id: Ib638afd87677f1be197afb7b0f73c70fb98909fe
    Signed-off-by: Pierre Tardy <pierre.tardy@intel.com>
    Add sync-c option to manifest
    
    There are use-cases when fetching all branch is impractical and
    we really need to fetch only one branch/tag.
    e.g. there is a large project with binaries and every update of a
    binary file is put to a separate branch.
    The whole project history might be too large to allow users fetch it.
    
    Add 'sync-c' option to 'project' and 'default' tags to make it possible
    to configure 'sync-c' behavior at per-project and per-manifest level.
    
    Note that currently there is no possibility to revert boolean flag from
    command line. If 'sync-c' is set in manifest then you cannot make
    full fetch by providing a repo tool argument.
    
    Change-Id: Ie36fe5737304930493740370239403986590f593
    Refine groups functionality
    
    Every project is in group "default".  "-default" does not remove
    it from this project.  All group names specified in the manifest
    are positive names as opposed to a mix of negative and positive.
    
    Specified groups are resolved in order.  If init is supplied with
    --groups="group1,-group2", the following describes the project
    selection when syncing:
    
      * all projects in "group1" will be added, and
      * all projects in "group2" will be removed.
    
    Change-Id: I1df3dcdb64bbd4cd80d675f9b2d3becbf721f661
    Add project annotation handling to repo
    
    Allow the optional addition of "annotation" nodes nested under
    projects.  Each annotation node must have "name" and "value"
    attributes.  These name/value pairs will be exported into the
    environment during any forall command, prefixed with "REPO__"
    
    In addition, an optional "keep" attribute with case insensitive "true"
    or "false" values can be included to determine whether the annotation
    will be exported with 'repo manifest'
    
    Change-Id: Icd7540afaae02c958f769ce3d25661aa721a9de8
    Signed-off-by: James W. Mills <jameswmills@gmail.com>
    Check if SHA1 presents in repository
    
    Previously repo had incorrect code that did not really check
    if sha1 presents in a project. It worked for tags though.
    
    Check if a revision (either tag or sha1) is present by using
    'git rev_parse' functionality.
    
    Change-Id: I1787f3348573948573948753987394839487572b
    Add manifest groups
    
    Allows specifying a list of groups with a -g argument to repo init.
    The groups act on a group= attribute specified on projects in the
    manifest.
    All projects are implicitly labelled with "default" unless they are
    explicitly labelled "-default".
    Prefixing a group with "-" removes matching projects from the list
    of projects to sync.
    If any non-inverted manifest groups are specified, the default label
    is ignored.
    
    Change-Id: I3a0dd7a93a8a1756205de1d03eee8c00906af0e5
    Reviewed-on: https://gerrit-review.googlesource.com/34570
    Reviewed-by: Shawn Pearce <sop@google.com>
    Tested-by: Shawn Pearce <sop@google.com>
    Option for 'repo diff' to generate output suitable for 'patch' cmd
    
    The -u option causes 'repo diff' to generate diff output
    with file paths relative to the repository root,
    so the output can be applied to the Unix 'patch' command.
    The name '-u' was selected for convenience, because
    both 'diff' and 'git diff' accept the option with the same name
    to generate an 'unified diff' output suitable for 'patch' command.
    
    Change-Id: I79c8356db4ed20ecaccc258b3ba139db76666fe0
    Reviewed-on: https://gerrit-review.googlesource.com/34380
    Reviewed-by: Shawn Pearce <sop@google.com>
    Tested-by: Shawn Pearce <sop@google.com>
    Ignore /clone.bundle on HTTP 401, 403 and 404
    
    401: Unauthorized, authentication may be required. This is usually
         handled internally by the HTTP client in Python. If it reaches
         our code in repo, the Python HTTP client didn't find a password
         in ~/.netrc that it could use.
    
    403: Authentication was supplied, but is incorrect. It might be
         that the CDN doesn't want to offer this clone.bundle file
         to the client, but the Git fetch operation would still be
         successful. This might arise if branch level read controls
         were used in Gerrit Code Review and the /clone.bundle file
         contained branches not visible to the client.
    
    404: The server has no /clone.bundle file available.
    
    In all of these cases, sliently ignore the /clone.bundle file HTTP
    error and let the Git operation take over.
    
    Change-Id: I1787f3cac86b017351952bbb793fe5874d83c72b
    Do not change branch.foo.merge in case of manifest sync
    
    In case of manifest/smart sync repo changes ".merge" config
    option from branch to SHA. Doing 'repo upload' fails as
    repo tries to upload to a remote branch that looks like SHA
    (e.g. refs/for/23423423423423423423423)
    
    Do not update the .merge in case if revision is SHA.
    
    Change-Id: I9139708fa17f21eec5a7e23c3255333626bf529e
    sync: --no-clone-bundle disables the clone bundle support
    
    Change-Id: Ia9ed7da8451b273c1be620c3dd0dcad777b29096
    Permit - in URL schemes for special URLs
    
    Clients might be using their own special git-remote-* helper that
    has a hypen in its name. Permit - in the scheme part of the URL
    when trying to decide if it is an SSH URL and assume it is *not*
    SSH if the URL matches "foo-bar://" style.
    
    Change-Id: I7ba2d810a614f6e605a441d5972902c4a14e73fd
    repo status to print project name on clean gits
    
    repo status just prints "# on branch oprofile" if you have branched
    in clean status. This doesn't really tell which branch is meant.
    
    Instead we can use the same syntax with modified gits which will
    give us detailed information.
    
    Change-Id: I55fe5154d278e10a814281dd2ba501ec6e956730
    Add 'rebase="false"' attribute to the <project/> XML.
    
    This new attribute can prevent 'repo sync' from automatically rebasing.
    
    I hit a situation in where one of the git repositories I was tracking
    was actually an external repository that I wanted to pull commits
    into and merge myself. (NOT rebase, since that would lose the merge
    history.) In this case, I'm not using 'repo upload', I'm manually
    managing the merges to and from this repository.
    
    Everything was going great until I typed 'repo sync' and it rebased
    my manually-merged tree. Hence the option to skip it.
    
    Change-Id: I965e0dd1acb87f4a56752ebedc7e2de1c502dbf8
    Avoid missing content-length header in project.py
    
    Occassionally, the content-length may be missing when using urlib
    in python 2.6 and 2.7.  This change assumes the value of the header is
    0 if it doesn't exist
    
    Change-Id: Iaf1c8a796bc667823d4d7c30f9b617644b271d00
    upload: Support uploading to Gerrit over https://
    
    If SSH is not available, Gerrit returns NOT_AVAILABLE to the /ssh_info
    query made by repo upload. In this case fallback to the /p/$PROJECT URL
    that Gerrit also exports and use that for uploads.
    
    Change-Id: I1e3e39ab709ecc0a692614a41a42446426f39c08
    Fix typo
    
    Change-Id: Idd68ad0a34fcf4bd4e18b0248f50187a539d610a
    Add a sync flag that fetches only current branch
    
    There is also shortcuts in case if the "current branch" is
    a persistent revision such as tag or sha1. We check if the
    persistent revision is present locally and if it does - do
    no fetch anything from the server.
    
    This greately reduces sync time and size of the on-disk repo
    
    Change-Id: I23c6d95185474ed6e1a03c836a47f489953b99be
    Fix Python 2.4 support
    
    Change-Id: I89521ae52fa564f0d849cc51e71fee65b3c47bab
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Work around Python 2.7 urllib2 bug
    
    If the remote is using authenticated HTTP, but does not have
    $GIT_URL/clone.bundle files in each repository, an initial sync
    would fail around 8 projects in due to the library not resetting
    the number of failures after getting a 404.
    
    Work around this by updating the retry counter ourselves.
    
    The urllib2 library is also not thread-safe. Make it somewhat
    safer by wrapping the critical section with a lock.
    
    Change-Id: I886e2750ef4793cbe2150c3b5396eb9f10974f7f
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Fix AttributeError: 'HTTPError' object has no attribute 'reason'
    
    Not every version of urllib2 supplies a reason object on the
    HTTPError exception that it throws from urlopen().  Work around
    this by using str(e) instead and hope the string formatting includes
    sufficient information.
    
    Change-Id: I0f4586dba0aa7152691b2371627c951f91fdfc8d
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Work around Python 2.7 failure to initialize base class
    
    urllib2 returns a malformed HTTPError object in certain situations.
    For example, urllib2 has a couple of places where it creates an
    HTTPError object with no fp:
    
      if self.retried > 5:
        # retry sending the username:password 5 times before failing.
        raise HTTPError(req.get_full_url(), 401, "basic auth failed",
                        headers, None)
    
    When it does that, HTTPError's ctor doesn't call through to
    addinfourl's ctor:
    
      # The addinfourl classes depend on fp being a valid file
      # object.  In some cases, the HTTPError may not have a valid
      # file object.  If this happens, the simplest workaround is to
      # not initialize the base classes.
      if fp is not None:
        self.__super_init(fp, hdrs, url, code)
    
    Which means the 'headers' slot in addinfourl is not initialized and
    info() fails.  It is completely insane that urllib2 decides not to
    initialize its own base class sometimes.
    
    Change-Id: I32a0d738f71bdd7d38d86078b71d9001e26f1ec3
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    sync: Fetch after applying bundle and retry after errors
    
    After a $GIT_URL/clone.bundle has been applied to the new local
    repository, perform an incremental fetch using `git fetch` to ensure
    the local repository is up-to-date. This allows the hosting server
    to offer stale /clone.bundle files to bootstrap a new client.
    
    If a single git fetch fails, it may succeed again after a short
    delay.  Transient failures are typical in environments where the
    remote Git server happens to have limits on how many requests it
    can serve at once (the anonymous git daemon, or an HTTP server).
    Wait a randomized delay between 30 and 45 seconds and retry the
    failed project once.  This delay gives the site time to recover
    from a transient traffic spike, and the randomization makes it less
    likely that a spike occurs again from all of the same clients.
    
    Change-Id: I97fb0fcb33630fb78ac1a21d1a4a3e2268ab60c0
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    sync: Support downloading bundle to initialize repository
    
    An HTTP (or HTTPS) based remote server may now offer a 'clone.bundle'
    file in each repository's Git directory. Over an http:// or https://
    remote repo will first ask for '$URL/clone.bundle', and if present
    download this to bootstrap the local client, rather than relying
    on the native Git transport to initialize the new repository.
    
    Bundles may be hosted elsewhere. The client automatically follows a
    HTTP 302 redirect to acquire the bundle file. This allows servers
    to direct clients to cached copies residing on content delivery
    networks, where the bundle may be closer to the end-user.
    
    Bundle downloads are resumeable from where they last left off,
    allowing clients to initialize large repositories even when the
    connection gets interrupted.
    
    If a bundle does not exist for a repository (a HTTP 404 response
    code is returned for '$URL/clone.bundle'), the native Git transport
    is used instead. If the client is performing a shallow sync, the
    bundle transport is not used, as there is no way to embed shallow
    data into the bundle.
    
    Change-Id: I05dad17792fd6fd20635a0f71589566e557cc743
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Add commit-msg hook also for manifest project
    
    The manifest project has - by design - not a review URL associated
    with it. It is actually not even a 'project' in repo's sense.
    
    This will prevent the commit-msg hook from being added, which is
    not necessarily wanted as the project is managed in gerrit.
    
    This commit will enable the commit-msg hook, which in turn will
    add the Change-Id-line to every new commit in it. This simplifies
    replacing patch sets (by git push ... refs/for/...).
    
    Change-Id: I42d0f6fd79e6282d9d47074a3819e68d968999a7
    Signed-off-by: Victor Boivie <victor.boivie@sonyericsson.com>
    Add a --depth option to repo init.
    
    Change-Id: Id30fb4a85f4f8a1847420b0b51a86060041eb5bf
    Add branch support to repo upload
    
    This commit adds a --br=<branch> option to repo upload.
    
    repo currently examines every non-published branch. This is problematic
    for my workflow. I have many branches in my kernel tree. Many of these
    branches are based off of upstream remotes (I have many remotes) and
    will never be uploaded (they'll get sent upstream as a patch).
    
    Having repo scan these branches adds to my upload processing time
    and clutters the branch selection buffer. I've also seen repo get
    confused when one of my branches is 1000s of commits different from
    m/master.
    
    Change-Id: I68fa18951ea59ba373277b57ffcaf8cddd7e7a40
    Fixed repo checkout error message when git reports errors.
    
    In the current version of repo checkout, we often get the error:
      error: no project has branch xyzzy
    
    ...even when the actual error was something else.  This fixes it
    to only report the 'no project has branch' when that is actually true.
    
    This fix is very similar to one made for 'repo abandon':
      https://review.source.android.com/#change,22207
    
    The repo checkout error is filed as: <http://crosbug.com/6514>
    
    TEST=manual
    
    A sample creating a case where 'git checkout' will fail:
    
      $ repo start branch1 .
      $ repo start branch2 .
      $ touch bogusfile
      $ git add bogusfile
      $ git commit -m "create bogus file"
      [branch2 f8b6b08] create bogus file
       0 files changed, 0 insertions(+), 0 deletions(-)
       create mode 100644 bogusfile
      $ echo "More" >> bogusfile
      $ repo checkout branch1 .
      error: chromite/: cannot checkout branch1
    
    A sample case showing that we still fail if no project has a branch:
    
      $ repo checkout xyzzy .
      error: no project has branch xyzzy
    
    Change-Id: I48a8e258fa7a9c1f2800dafc683787204bbfcc63
    Fixed repo abandon to give better messages.
    
    The main fix is to give an error message if nothing was actually
    abandoned.  See <http://crosbug.com/6041>.
    
    The secondary fix is to list projects where the abandon happened.
    This could be done in a separate CL or dropped altogether if requested.
    
    TEST=manual
    
    $ repo abandon dougabc; echo $?
    Abandon dougabc: 100% (127/127), done.
    Abandoned in 2 project(s):
      chromite
      src/platform/init
    0
    
    $ repo abandon dougabc; echo $?
    Abandon dougabc: 100% (127/127), done.
    error: no project has branch dougabc
    1
    
    $ repo abandon dougabc; echo $?
    Abandon dougabc: 100% (127/127), done.
    error: chromite/: cannot abandon dougabc
    1
    
    Change-Id: I79520cc3279291acadc1a24ca34a761e9de04ed4
    Add option to check status of projects in parallel.
    
    Change-Id: I6ac653f88573def8bb3d96031d3570ff966251ad
    Creating rr-cache
    
    If git-rerere is enabled, it uses the rr-cache directory that
    repo currently creates a symlink from, but doesn't create the
    destination directory (inside the project's directory). Git
    will then complain during merges and rebases.
    
    This commit creates the rr-cache directory inside the project.
    
    Change-Id: If8b57a04f022fc6ed6a7007d05aa2e876e6611ee
    Support repo-level pre-upload hook and prep for future hooks.
    
    All repo-level hooks are expected to live in a single project at the
    top level of that project.  The name of the hooks project is provided
    in the manifest.xml.  The manifest also lists which hooks are enabled
    to make it obvious if a file somehow failed to sync down (or got
    deleted).
    
    Before running any hook, we will prompt the user to make sure that it
    is OK.  A user can deny running the hook, allow once, or allow
    "forever" (until hooks change).  This tries to keep with the git
    spirit of not automatically running anything on the user's computer
    that got synced down.  Note that individual repo commands can add
    always options to avoid these prompts as they see fit (see below for
    the 'upload' options).
    
    When hooks are run, they are loaded into the current interpreter (the
    one running repo) and their main() function is run.  This mechanism is
    used (instead of using subprocess) to make it easier to expand to a
    richer hook interface in the future.  During loading, the
    interpreter's sys.path is updated to contain the directory containing
    the hooks so that hooks can be split into multiple files.
    
    The upload command has two options that control hook behavior:
      - no-verify=False, verify=False (DEFAULT):
        If stdout is a tty, can prompt about running upload hooks if needed.
        If user denies running hooks, the upload is cancelled.  If stdout is
        not a tty and we would need to prompt about upload hooks, upload is
        cancelled.
      - no-verify=False, verify=True:
        Always run upload hooks with no prompt.
      - no-verify=True, verify=False:
        Never run upload hooks, but upload anyway (AKA bypass hooks).
      - no-verify=True, verify=True:
        Invalid
    
    Sample bit of manifest.xml code for enabling hooks (assumes you have a
    project named 'hooks' where hooks are stored):
      <repo-hooks in-project="hooks" enabled-list="pre-upload" />
    
    Sample main() function in pre-upload.py in hooks directory:
      def main(project_list, **kwargs):
        print ('These projects will be uploaded: %s' %
               ', '.join(project_list))
        print ('I am being a good boy and ignoring anything in kwargs\n'
               'that I don\'t understand.')
        print 'I fail 50% of the time.  How flaky.'
        if random.random() <= .5:
          raise Exception('Pre-upload hook failed.  Have a nice day.')
    
    Change-Id: I5cefa2cd5865c72589263cf8e2f152a43c122f70
    Post-nonexistent-revision crash sidestepped
    
    Fix for the bug that leaves a fractional .git directory after attempting to
    perform an initial sync to a nonexistent revision. Moved the initialization of
    the working directory to after the revision ID has already been checked. Now,
    no project/.git directory gets created at all if the revision ID is bad.
    
    Change-Id: I0c9b2a59573410f1d11de7661591bf02e4ce326b
    Renamed 'repo_hooks' function to '_ProjectHooks'.
    
    This renaming was done for two reasons:
    1. The hooks are actually project-level hooks, not repo-level
       hooks.  Since we are talking about adding repo-level hooks,
       It keeps things less confusing if we name the existing hooks
       to be "ProjectHooks"
    2. The function is a private function in project.py and so
       should have capitalization to match.
    
    I also added a docstring describing this function.
    
    Change-Id: I1d30f5de08e8f9f99f78146e68c76f906782d97e
    Fixed bug identifying 'commit-msg' files.
    
    There was a minor typo that would cause repo to (I believe)
    mistakenly identify any file that contained a substring of the
    word 'commit-msg' as a commit message hook.  For example, the file
    'mit' or the file 'msg' would be treated as a commit message hook.
    I believe that it was intended that repo only recognize files
    named exactly 'commit-msg'.
    
    Change-Id: I93edbddf3da3cf0935641e6efb19b0a8ee6e2308
    Fix mirror clients with no worktree
    
    Commit "Make path references OS independent" (df14a70c45)
    broke mirror clients by trying to invoke replace() on None
    when there is no worktree.
    
    Change-Id: Ie0a187058358f7dcdf83119e45cc65409c980f11
    Make path references OS independent
    
    Change-Id: I5573995adfd52fd54bddc62d1d1ea78fb1328130
    (cherry picked from commit b0f9a02394779c1c9422a9649412c9ac5fb0f12f)
    
    Conflicts:
    
            command.py
    Make path references OS independent
    
    Change-Id: I5573995adfd52fd54bddc62d1d1ea78fb1328130
    upload: Remove --replace option
    
    It hasn't been necessary for a long time, and its
    functionality can be accomplished with 'git push'.
    
    Change-Id: Ic00d3adbe4cee7be3955117489c69d6e90106559
    sync --quiet: be more quiet
    
    Change-Id: I5e8363c7b32e4546d1236cfc5a32e01c3e5ea8e6
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    sync: Enable use of git clone --reference
    
    Use git clone to initialize a new repository, and when possible
    allow callers to use --reference to reuse an existing checkout as
    the initial object storage area for the new checkout.
    
    Change-Id: Ie27f760247f311ce484c6d3e85a90d94da2febfc
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    upload -t: Automatically include local branch name
    
    If the -t flag is given to upload, the local branch name is
    automatically sent to Gerrit Code Review as the topic branch name
    for the change(s).  This requires the server to be Gerrit Code
    Review v2.1.3-53-gd50c94e or later, which isn't widely deployed
    right now, so the default is opt-out.
    
    Change-Id: I034fcacb405b7cb909147152db427fe69dd7bcbf
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Warn users before uploading if there are local changes
    
    Change-Id: I231d7b6a3211e9f5ec71a542a0109b0c195d5e40
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    sync: Try fetching a tag as a last resort before giving up
    
    If a tagged commit is not reachable by the fetch refspec configured
    for the git (usually refs/heads/*) it will not be downloaded by
    'git fetch'.  The tag can however be downloaded with 'git fetch
    --tags' or 'git fetch tag <tag>'.
    
    This patch fixes the situation when a tag is not found after a
    'git fetch'. Repo will issue 'git fetch tag <tag>' before giving
    up completely.
    
    Change-Id: I87796a5e1d51fcf398f346a274b7a069df37599a
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Allow files to be copied into new folders
    
    Change-Id: I7f169e32be5a4328bb87ce7c2ff4b6529e925126
    Automatically install Gerrit Code Review's commit-msg hook
    
    Most users of repo are also using Gerrit Code Review, and will want
    the commit-msg hook to be automatically installed into their local
    projects so that Change-Ids are assigned when commits are created,
    not when they are first uploaded.
    
    (cherry picked from commit a949fa5d202f0a1f812d7630f3e5bf0f02ca4e98
     but squashed with latest hook script from version 2.1.2)
    
    Change-Id: Ie68b2d60ac85d8c2285d2e1e6a4536eb76695547
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Fail sync when encountering "N commits behind."
    
    This is almost always something the user needs to address
    before continuing work, so promoting it to a failure (rather
    than simply an informational message) seems the right way to
    go. As a side-effect, repo will now exit with a non-zero
    status code in this situation, so pipelines of the form
    `repo sync && make` will fail if there are branches that
    are stalled due to uploaded but unmerged patches.
    Check that we are not overwriting a local repository when syncing.
    
    If a local git repository exists within the same folder as a new project that
    is added, when the user syncs the repo, the sync will overwrite the local
    files under the project's .git repository with its own symlinks. Make sure
    that we do not overwrite 'normal' files in repo and throw an error when
    that happens.
    sync: Fix split call on malformed email addresses
    
    If an email address in a commit object contains a space, like a few
    malformed ones on the Linux kernel, we still want to split only on
    the first space.
    
    Unfortunately my brain was too damaged by Perl and originally wrote
    the split asking for 2 results; in Python split's argument is how
    many splits to perform.  Here we want only 1 split, to break apart
    the commit identity from the email address on the same line.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Automatically install Gerrit Code Review's commit-msg hook
    
    Most users of repo are also using Gerrit Code Review, and will want
    the commit-msg hook to be automatically installed into their local
    projects so that Change-Ids are assigned when commits are created,
    not when they are first uploaded.
    
    Change-Id: Ide42e93b068832f099d68a79c2863d22145d05ad
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Allow meta projects to be created not under .repo/
    
    Some types of manifests might prefer to put their meta project work
    tree under topdir, rather than inside of the .repo/ directory.  We
    can support that by allowing relpath to be optionally passed in.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    init: add -o, --origin to name manifest remote
    
    The -o option permits the user to control the name of the manifest's
    remote, which normally is hardcoded to be 'origin', but can differ
    because we derive it at runtime from the configuration file.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Make refs/remotes/m management the manifest object's responsibility
    
    I plan to have the new submodule manifest format use a different
    layout for the m refs than the XML manifest format has used in
    the past.  Thus we need to move the behavior management into the
    manifest object, and out of the project, so we can change it.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Teach Project how to relink a .git/ in the work tree
    
    The _LinkWorkTree method can now be used to relink the work tree,
    such as if the real repository was moved to a different location
    on disk.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Silence 'Current branch %s is up to date' during sync
    
    We accidentally introduced this message during 1.6.8 by always
    invoking `git rebase` when there were no new commits from the
    upstream, but the user had local commits.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Fix unnecessary self in project.py
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Change project.revision to revisionExpr and revisionId
    
    The revisionExpr field now holds an expression from the manifest,
    such as "refs/heads/master", while revisionId holds the current
    commit-ish SHA-1 of the revisionExpr.  Currently that is only
    filled in if the manifest points directly to a SHA-1.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Change DWIMery hack for dealing with rewound remote branch
    
    The trick of looking at the reflog for the remote tracking branch
    and only going back one commit works some of the time, but not all of
    the time.  Its sort of relying on the fact that the user didn't use
    `repo sync -n` or `git fetch` to only update the tracking branches
    and skip the working directory update.
    
    Doing this right requires looking through the history of the SHA-1
    source (what the upstream used to be) and finding a spot where the
    DAG diveraged away suddenly, and consider that to be the rewind
    point.  That's really difficult to do, as we don't have a clear
    picture of what that old point was.
    
    A close approximation is to list all of the commits that are in
    HEAD, but not the new upstream, and rebase all of those where the
    committer email address is this user's email address.  In most cases,
    this will effectively rebase only the user's new original work.
    
    If the user is the project maintainer and rewound the branch
    themselves, and they don't want all of the commits they have created
    to be rebased onto the new upstream, they should handle the rebase
    on their own, after the sync is complete.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Refactor how projects parse remotes so it can be replaced
    
    We now feed Project a RemoteSpec, instead of the Remote directly
    from the XmlManifest.  This way the RemoteSpec already has the
    full project URL, rather than just the base, permitting other
    types of manifests to produce the URL in their own style.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Remove support for the extra <remote> definitions in manifests
    
    These aren't that widely used, and actually make it difficult for
    users to fully mirror a forest of repositories, and then permit
    someone else to clone off that forest, rather then the original
    upstream servers.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Automatically guess Gerrit change number in "repo upload --replace"
    
    This feature only works if you have one commit to replace right now
    (the common case).
    Perform copy file activity when creating a new work directory
    
    Performance improvements in repo sync caused us to skip out of the
    initial Sync_LocalHalf without ever running CopyFiles, so we didn't
    create the top level Makefile in new clients whose manifest request
    one with a <copyfile> element.
    
    Now we run CopyFiles after the initial read-tree that populates
    the project working directory.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Fix 'repo sync' rebase logic on a published branch
    
    If the current branch is published, but all published commits are
    merged into the manifest revision, but there is also at least one
    unpublished commit on the current branch, we should rebase the
    unpublished commit, rather than creating a merge commit.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Automatically use SSH control master support during sync
    
    By creating a background ssh "control master" process which lives
    for the duration of our sync cycle we can easily cut the time for
    a no-op sync of 132 projects from 60s to 18s.
    
    Bug: REPO-11
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Highlight projects which still have sync failures during 'repo status'
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Modify 'repo abandon' to be more like 'repo checkout' and 'repo start'
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Improve checkout performance for the common unmodified case
    
    Most projects will have their branch heads matching in all branches,
    so switching between them should be just a matter of updating the
    work tree's HEAD symref.  This can be done in pure Python, saving
    quite a bit of time over forking 'git checkout'.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Add progress meter to 'repo start'
    
    This is mostly useful if the number of projects to switch is many
    (e.g. all of Android) and a large number of them are behind the
    current manifest revision.  We wind up needing to run git just to
    make the working tree match, and that often makes the command take
    a couple of seconds longer than we'd like.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Make usage of open safer by setting binary mode and closing fds
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Speed up 'repo start' by removing some forks
    
    Its quite common for most projects to be matching the current
    manifest revision, as most developers only modify one or two projects
    at any one time.  We can speed up `repo start foo` (that impacts
    the entire client) by performing most of the branch creation and
    switch operations in pure Python, and thus avoid 4 forks per project.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Remove unused methods from project.ReviewableBranch
    
    These used to be used back when we had Gerrit 1.x support and used
    HTTP based uploads to transmit changes for review.  Since we moved
    entirely to Gerrit 2.x, these are no longer called.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Only fetch repo once-per-day under normal 'repo sync' usage
    
    Its unlikely that a new version of repo will be delivered in any
    given day, so we now check only once every 24 hours to see if repo
    has been updated.  This reduces the sync cost, as we no longer need
    to contact the repo distribution servers every time we do a sync.
    
    repo selfupdate can still be used to force a check.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Avoid git fork on the common case of repo not changing
    
    Usually repo is upgraded only once a week, if that often.  Most of
    the time we invoke HasChanges on the repo project (or even on the
    manifest project) the current HEAD will resolve to the same SHA-1
    as the remote tracking ref, and there are therefore no changes.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Avoid unnecessary git symbolic-ref calls during repo sync
    
    If the m/BRANCH ref is already pointing at the value set in the
    manifest there is no reason to set it again.  Leave it alone,
    thus saving a full fork+exec call.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Improve repo sync performance by avoid git forks
    
    By resolving the current HEAD and the manifest revision using pure
    Python, we can in the common case of "no changes" avoid a lot of
    git operations and directly jump out of the local sync method.
    
    This reduces the no-op `repo sync -l` time for Android's 114 projects
    from more than 6s to under 0.8s.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Implement git ref reading purely in Python
    
    Its much faster to read the refs from 114 projects when the reader
    is pure Python and just doing file IO than forking 114 git commands
    and parsing their output.
    
    The reader caches refs based upon file mtimes.  If any single ref
    file has been modified since the last read, we re-read the entire
    repository's ref namespace.  This simplifies the code as we don't
    need to worry about shooting down symbolic-refs, but it may cause
    more IO than is necessary if only one ref gets updated.
    
    This change drops `repo branches` in Android from 1.658s to 0.206s.
    Likewise, `repo sync` improves dramatically as well.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Implement 'git symbolic-ref HEAD' in Python
    
    This is invoked once per project in `repo sync`.  Taking it out
    saves about 1/114 of a second, so on a large set of projects like
    Android it can save up to a full second of sync time.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Remove confusing message from repo sync output
    
    Someone pointed out this message isn't always the truth; so we
    shouldn't print it.  The code path is executed when there are
    published commits, yet our output talks about unpublished ones.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Change repo sync to be more friendly when updating the tree
    
    We now try to sync all projects that can be done safely first, before
    we start rebasing user commits over the upstream.  This has the nice
    effect of making the local tree as close to the upstream as possible
    before the user has to start resolving merge conflicts, as that extra
    information in other projects may aid in the conflict resolution.
    
    Informational output is buffered and delayed until calculation for
    all projects has been done, so that the user gets one concise list
    of notice messages, rather than it interrupting the progress meter.
    
    Fast-forward output is now prefixed with the project header, so the
    user can see which project that update is taking place in, and make
    some relation of the diffstat back to the project name.
    
    Rebase output is now prefixed with the project header, so that if
    the rebase fails, the user can see which project we were operating
    on and can try to address the failure themselves.
    
    Since rebase sits on a detached HEAD, we now look for an in-progress
    rebase during sync, so we can alert the user that the given project
    is in a state we cannot handle.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Refactor error message display in project.py
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Use default rebase during sync instead of rebase -i
    
    rebase interactive (aka rebase -i) has changed in newer versions
    of git, and doesn't always generate the sequence of commits the
    same way it used to.  It also doesn't handle having a previously
    applied commit try to be applied again.
    
    The default rebase algorithm is better suited to our needs.
    It uses --ignore-if-in-upstream when generating the patch series
    for git-am, and git-am with its 3-way fallback is able to handle
    a rename case just as well as the cherry-pick variant used by -m.
    Its also a generally faster implementation.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    status: tell the user the working tree is clean
    
    If there is nothing output at all, tell the user the working tree is
    completely clean.  It just gives them a bit more of a warm-fuzzy
    feeling knowing repo and until the end.  It also more closely
    matches with the output of git status.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Add 'repo sync -d' to detach projects from their current topic
    
    The -d flag moves the project back to a detached HEAD state,
    matching what is listed in the manifest.  This can be useful to
    set a client to something stable (or at least well-known), such as
    before a sequence of 'repo download' commands are used to get some
    changes for testing.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Make 'repo start' restartable upon failures
    
    If `repo start foo` fails due to uncommitted and unmergeable changes
    in a single project, we have switched half of the projects over to
    the new target branches, but didn't on the one that failed to move.
    
    This change improves the situation by doing three things differently:
    
    - We keep going when we encounter an error, so other projects
      that can successfully switch still switch.
    
    - We ignore projects whose current branch is already on the
      requested name; they are logically already setup.
    
    - We checkout the branch if it already exists, rather than
      trying to recreate the branch.
    
    Bug: REPO-22
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Don't capture stdout during 'repo checkout'
    
    There isn't any great value in buffering stdout into memory
    coming from git checkout.  So don't bother doing it.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Add a repo branches subcommand to describe current branches
    
    We now display a summary of the available topic branches in this
    client, based upon a sorted union of all existing projects.
    
    Bug: REPO-21
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Add checkout command.
    
    Teach repo how to checkout a branch in all projects or a list
    of specific projects.
    
    Bug: REPO-21
    Add repo manifest -o to save a manifest
    
    This can be useful to create a new manifest from an existing client,
    especially if the client wants to use the "-r" option to set each
    project's revision to the current commit SHA-1, making a sort of a
    tag file that can be used to recreate this exact state elsewhere.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Set core.bare to true on mirror repositories
    
    When creating a mirror repository we will always be using a bare
    repository.  Setting $GIT_DIR/config to have core.bare = true is
    reasonable and helps Git to recognize the environment it is in.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Get rid of the horrible android import work around hack
    
    Months ago when the Android Open Source Project launched we had some
    import errors that had to be fixed and worked over.  These hacks
    were here to help users update their clients to newer versions of
    the imported code.
    
    Its very likely all clients have either been deleted, or have been
    updated and have the fixed imports.  So we don't need this hack in
    repo anymore.
    
    If a very ancient client still existed, it would need to be created
    from scratch anyway, due to the Android cupcake branch merging
    into master and the manifest changes not being able to be handled
    correctly by repo.  A new client wouldn't have the incorrectly
    imported code in it, and thus wouldn't need this hack.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Fix repo status when there are renamed/copied files
    
    I missed a parameter in the format string, but still provided the
    value in the parameter list, so the format failed to produce an
    output message.
    
    Bug: REPO-15
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Report better errors when a project revision is invalid
    
    If a manifest specifies an invalid revision property, give the
    user a better error message detaling the problem, instead of an
    ugly Python traceback with a strange Git error message.
    
    Bug: REPO-2
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Fix repo prune output to sort by branch name
    
    We didn't always sort the output.  Now we do.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Fix repo prune to work on git 1.6.1-rc3~5 and later
    
    Prior to git 1.6.1-rc3~5 the output of 'git branch -d' matched:
    
      Deleted branch (.*)\.
    
    where the subgroup grabbed the branch name. In v1.6.1-rc3~5 (aka
    a126ed0a01e265d7f3b2972a34e85636e12e6d34) Brandon Casey changed
    the output to include the SHA-1 of the branch name, now matching
    the pattern:
    
      Deleted branch (.*) \([0-9a-f]*\)\.
    
    Instead of parsing the output of git branch we now re-obtain the
    list of branches after the deletion attempt and perform a set
    difference in memory to determine which branches we were able to
    successfully delete.
    
    Bug: REPO-9
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Remove the protobuf based HTTP upload code path
    
    Now that Gerrit2 has been released and the only supported upload
    protocol is direct git push over SSH we no longer need the large
    and complex protobuf client library, or the upload chunking logic
    in gerrit_upload.py.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Support Gerrit2's ssh:// based upload
    
    In Gerrit2 uploads are sent over "git push ssh://...", as this
    is a more efficient transport and is easier to code from external
    scripts and/or direct command line usage by an end-user.
    
    Gerrit1's HTTP POST based format is assumed if the review server
    does not have the /ssh_info URL available on it.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Remove astray comma
    
    There's an extra "," at the end of the line, which is causing
    trouble when the manifest file specifies a revision for a
    project.  Since the default manifest file doesn't specify
    revisions for the projects, the problem has gone unnoticed.
    
    Thanks to Barry Silverman <barry@disus.com> for spotting the
    issue and providing a patch.
    
    Signed-off-by: Marcelo E. Magallon <marcelo.magallon@gmail.com>
    Add --review and --cc flags to repo upload, so you can
    assign reviewers when you upload changes.
    Teach 'repo upload --replace' how to add replacement patch sets
    
    Users are prompted with the list of known changes we are about
    to upload, and they can fill out the current change numbers for
    any changes which already exist in the data store.  For each of
    those changes the change number and commit id is sent as part of
    the upload request, so Gerrit can insert the new commit as a new
    patch set of the existing change, rather than make a new change.
    
    This facility permits developers to replace a patch so they can
    address comments made on a prior version of the same change.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Refactor part of GetUploadableBranches to lookup one specific branch
    
    This way project.GetUploadableBranch(project.CurrentBranch) can tell
    us how (if at all) to upload the currently checked out branch.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Add <remote project-name="..."> attribute within projects
    
    By setting a project-name on a remote nested within a project forks
    of a project like the Linux kernel can be easily handled by fetching
    all relevant forks into the same client side project under different
    remote names.  Developers can create branches off different remotes
    using `git checkout --track -b $myname $remote/$branch` and later
    `repo upload` automatically redirects to the proper fork project
    in the code review server.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Use remote.*.projectname to indicate the target project for upload
    
    This way "forks" of a project, e.g. the linux kernel, can be setup to
    use different destination projects in the review server by creating
    different remotes in the client side Git repository.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Add 'repo init --mirror' to download a complete forrest
    
    The mirror option downloads a complete forrest (as described by the
    manifest) and creates a replica of the remote repositories rather
    than a client working directory.  This permits other clients to
    sync off the mirror site.
    
    A mirror can be positioned in a "DMZ", where the mirror executes
    "repo sync" to obtain changes from the external upstream and
    clients inside the protected zone operate off the mirror only,
    and therefore do not require direct git:// access to the external
    upstream repositories.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Introduce 'repo abandon <branchname>' as an alias for 'git branch -D'
    
    This destroys a local development branch, removing all history
    of that branch from ever existing.  If the branch is currently
    checked out we move back to the upstream revision.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Install a default pre-auto-gc hook in all repositories
    
    This hook is evaluated by `git gc --auto` to determine if it is a
    good idea to execute a GC at this time, or defer it to some later
    date.  When working on a laptop its a good idea to avoid GC if you
    are on battery power as the extra CPU and disk IO would consume a
    decent amount of the charge.
    
    The hook is the standard sample hook from git.git contrib/hooks,
    last modified in git.git by 84ed4c5d117d72f02cc918e413b9861a9d2846d7.
    I added the GPLv2 header to the script to ensure the license notice
    is clear, as it does not match repo's own APLv2 license.
    
    We only update hooks during initial repository creation or on
    a repo sync.  This way we don't incur huge overheads from the
    hook stat operations during "repo status" or even the normal
    "repo sync" cases.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Catch symlink creation failures and report a better error
    
    Some users have noticed that repo doesn't work on VFAT, as we
    require a POSIX filesystem with POSIX symlink support.  Catching the
    OSError during our symlink creation and raising a GitError with a
    more descriptive message will help users to troubleshoot and fix
    their own installation problems.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Don't print "Already up-to-date" during repo sync
    
    If we are already up-to-date we just want to display no output.
    This means we have to avoid calling "git merge" if there aren't
    commits to be merged into the working directory.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Fast-forward a fully merged topic branch during 'repo sync'
    
    Instead of trying to rebase the changes on a topic branch that
    has been fully merged into the upstream branch we track, we should
    just fast-forward the topic branch to the new upstream revision.
    This way the branch doesn't try to rewrite commits that are already
    merged in the upstream.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Don't flip out if there are no template hooks
    
    Git may have been installed without its hooks directory, which
    means we won't have any hooks in a repo created git repository.
    Since we are just deleting the hooks it doesn't matter.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Stop downloading snapshots as native git:// is faster
    
    Downloading and streaming a tar into Git is slower than just
    letting the native git:// protocol handle the data transfer,
    especially when there are multiple revisions available and
    Git can perform delta compression across revisions.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Stop hiding remote missing object errors
    
    Hiding error messages from the remote peer is not a good idea,
    as users should be made aware when the remote peer is not a
    complete Git repository so they can alert the administrators
    and have the repository corrected.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Repair any mis-directed android-1.0 annotated tags
    
    The initial open source release of the Android 1.0 platform had
    some problems with its Perforce->Git imports.  Google was forced
    to rewrite some history to redirect users onto more stable upstream
    sources and correct errors in the imports.
    
    Not everyone has the correct android-1.0 tags, as some users did
    manage to fetch the platform early, before the mirror sites crashed
    and the history was rewritten.
    
    This change is a band-aid to ensure any stale android-1.0 tags are
    get updated to the corrected version.  It should be backed out at
    some point in the near future, when we can be fairly certain that
    everyone has the correct android-1.0 tags.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Teach repo how to download changes to the local checkout
    
    Now `repo download . 1402` would download the change numbered 1402
    into the current project and check it out for the user, using a
    detached HEAD.  `repo sync .` would back out of the change and
    return to the upstream version.
    
    Multiple projects can be fetched at once by listing them out on
    the command line as different arguments.
    
    Individual patch sets can be selected by adding a '/n' to indicate
    the n-th patch set should be downloaded instead of the default of
    patch set 1.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Show which user account each change was uploaded under
    
    This way users are well aware of which account we used when the
    uploads are complete, so they can be certain to sign into the web
    application with that user identity.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Fix StopIteration exception during repo {sync,status}
    
    If we run out of entries next() will throw StopIteration.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Fix 'repo sync' when the remote reflog has only 1 entry
    
    If the reflog for the upstream branch has only 1 entry in it, as
    the branch has been updated only once, we can get back the 0{40}
    object id from `git rev-parse upstream@{1}`, in which case we should
    consider it to be the same as if upstream@{1} is not defined.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Initial Contribution
    replace REPO_URL
    init: Add no-tags and current branch options
    
    This avoids fetching tags and branches for huge manifests
    
    Change-Id: I19c9724d75364440b881b297d42b906f541f73ff
    Add a check and more output to protect against invalid REPO_URLs
    
    If you don't know that the url to git-repo itself can be overridden via
    REPO_URL, it's hard to debug cases where REPO_URL is accidentally set to
    another repository, e.g. inside a Jenkins CI job. What makes is even
    harder is that the ".repo/repo" directory gets silently removed in such
    cases as verifications fails, which makes it impossible to look at the
    cloned files to understand the problem.
    
    To better protect against such an issue, warn if the cloned git-repo
    repository does not contain a top-level "repo" file, and state that the
    ".repo/repo" directory will be removed in case of a clone failure.
    
    Change-Id: I697b4999205a5967910c0237772ccaada01e74d4
    repo: add comment for updating maintainer keys
    
    Change-Id: Ic1e7557f9597234033561ab9fb3104b87e30015e
    Increment the wrapper version
    
    There have been a number of changes in the repo wrapper since the last
    increment that was done in fee390ee:
    
    - 9711a98 init: Add --no-clone-bundle option
    - 631d0ec Support non-ASCII GNUPGHOME environment variable
    - 4088eb4 repo: Cleaned up pylint/pep8 violations
    - 5553628 repo: Add check of REPO_URL env variable
    - 745b4ad Fix gitc-init behavior
    - d3ddcdb Ignore clone.bundle on HTTP 501, i.e. Not Implemented
    
    Change-Id: I3f763ef0ec2df2d726dff429021b48ad474148f1
    init: Add --no-clone-bundle option
    
    Bug: Issue 218
    Change-Id: I42ba1f5fb9168875da0df6bdf4fe44c8d6498d54
    Support non-ASCII GNUPGHOME environment variable
    
    Here we don't need to encode this gpg_dir string when using
    Python 2.7 on Linux.
    
    Change-Id: I56724e9511d3b1aea61535e654a45c212130630d
    repo: Cleaned up pylint/pep8 violations
    
    I noticed when running pylint (as the SUBMITTING_PATCHES file directs)
    that there were a number of violations reported. This makes it difficult
    to see violations I might have introduced. This commit corrects all
    pylint violations in the repo script.
    
    First I ran this to clean up the formatting:
    
     autopep8 --max-line-length=80 --indent-size 2 repo
    
    Following that the following violations remained:
    
    % pylint --rcfile=.pylintrc repo
    ************* Module repo
    W:220,21: Redefining name 'init_optparse' from outer scope (line 156)
    (redefined-outer-name)
    W:482, 2: No exception type(s) specified (bare-except)
    C:704, 0: Old-style class defined. (old-style-class)
    
    For line 220, the parameter to _GitcInitOptions was renamed so as not to
    mask the init_optparse global.
    
    For line 482, a pylint directive was added to disable the bare-execpt
    violation for just that line.
    
    For line 704, the _Options class was changed to subclass object.
    
    Additionally, the comments at lines 107-113 were spaced out to line up
    with the comment at line 112 that autopep8 moved.
    
    This script now has a pylint score of 10.0
    
    Change-Id: I779b66eb6b061a195d3c4372b99dec1b6d2a214f
    repo: Add check of REPO_URL env variable
    
    We want to be able to run repo on a system that is not connected to
    the Internet and cannot access https://gerrit.googlesource.com. We
    can put a clone of that repos there, but would prefer to use the
    stable version of the repo script instead of a locally modified
    version.
    
    This commit adds a check for the REPO_URL environment variable. If
    that is set and not empty its value will be set in the REPO_URL
    global in repo.  Otherwise the standard path will be used.
    
    Change-Id: I0616f5f81ef75f3463b73623b892cb5eed6bb7ba
    Fix gitc-init behavior
    
    With gitc-init, a gitc client may be specified using '-c'. If we're
    not currently in that client, we need to change directories so that
    we don't affect the local checkout, and to ensure that repo is
    checked out in the new client.
    
    This also makes '-c' optional if already in a gitc client, to match
    the rest of the init options.
    
    Change-Id: Ib514ad9fd101698060ae89bb035499800897e9bd
    launcher: Update repo after applying clone.bundle
    
    If the clone.bundle is out of date, repo may be installed with an old
    version. It will upgrade with the next sync a day later, or when "repo
    selfupdate" is run.
    
    This behavior was added to normal project downloads, but was never added
    to the repo launcher.
    
    Change-Id: Ib04bef3a658c98fe1b6c53b3e8d0067165a5e3f7
    gitc: Improve help visibility
    
    This improves the visiblity of gitc-init if we can get the gitc config,
    and hides it otherwise.
    
    Change-Id: I82830b0b07c311e8c74397ba79eb4c361f8b6fb5
    Fix gitc check if gitc isn't installed
    
    This was doing cwd.startswith(''), which is always true.
    
    Change-Id: Icc059c09492b31e2d7651e4a595bda783c5abc47
    GITC: Pull GITC Manifest Dir from the config.
    
    Updates the repo launcher and gitc_utils to pull the manifest
    directory location out of the gitc config file.
    
    Change-Id: Id08381b8a7d61962093d5cddcb3ff6afbb13004b
    GITC: Add gitc-init subcommand to repo.
    
    Adds the new gitc-init command to set up a GITC client. Gitc-init
    sets up the client directory and calls repo init within it. Once
    the repo is initialized, then generates a GITC manifest file
    by using git ls-remote on each project and retrieving the HEAD SHA
    to use as the revision attribute.
    
    Gitc-init inherits from and has all the options as repo init.
    
    Change-Id: Icd7e47e90eab752a77de7c80ebc98cfe16bf6de3
    Ignore clone.bundle on HTTP 501, i.e. Not Implemented
    
    Change-Id: I03ee003d3bd5d0684a31bdf7961a55a511dfa0e2
    Revert "Change the min git version from 1.7.2 to 1.8.2"
    
    This reverts commit 52b99aa91d0fbb5ea363b5febb367d602dbc56db.
    
    Change-Id: I01d93704c92f7af1ca2b36dbc9509ee1290e2d3c
    Change the min git version from 1.7.2 to 1.8.2
    
    This is needed for the --unshallow option of git fetch.
    
    Change-Id: Ifdc5cec6130315c643924328fea425f1b94cb04a
    Don't exit with error on HTTP 401 when downloading clone bundle
    
    If the server returns HTTP 401 (unauthorized) when attempting to
    download clone bundle files, ignore it and continue, rather than
    exiting with a fatal error.
    
    Change-Id: I2c7ee03e149c354c7e4ad6ea1ebf266534778fe1
    Change implementation of cleanup in case of clone failure during "repo init"
    
    Fix includes:
    1. It deletes only .repo/repo instead of the whole .repo repository.
    
    Bug: Issue 161
    Change-Id: I1ab8caa7538fec5e6206d1b029f63bd3f60dedcd
    Prevent warning twice about Python 3 usage
    
    Only warn about using Python 3 when running the repo script directly.
    This prevents the user being warned twice.
    
    Change-Id: I2ee51ea2fa0127ea310598320e460ec9f38c6488
    Don't try to remove .repo if it doesn't exist
    
    Part of the cleanup path for _Init is removing the .repo
    directory. However, _Init can fail before creating the .repo directory,
    so trying to remove it raises another exception:
    
        fatal: invalid branch name 'refs/changes/53/55053/4'
        Traceback (most recent call last):
          File "/home/mitchelh/bin/repo", line 775, in <module>
            main(sys.argv[1:])
          File "/home/mitchelh/bin/repo", line 749, in main
            os.rmdir(repodir)
        OSError: [Errno 2] No such file or directory: '.repo'
    
    Fix this by only removing .repo if it actually exists.
    
    Change-Id: Ia251d29e9c73e013eb296501d11c36263457e235
    Update the version number on the repo launcher
    
    The repo launcher version needs to be updated so some users can take
    advantage of the more robust version number parsing.
    
    Change-Id: Ibcd8036363311528db82db2b252357ffd21eb59b
    Share git version parsing code with wrapper module
    
    'repo' and 'git_command.py' had their own git version parsing code.
    This change shares that code between the modules.  DRY is good.
    
    Change-Id: Ic896d2dc08353644bd4ced57e15a91284d97d54a
    Fix os.mkdir race condition.
    
    This code checks whether a dir exists before creating it. In between the
    check and the mkdir call, it is possible that another process will have
    created the directory. We have seen this bug occur many times in
    practice during our 'repo init' tests.
    
    Change-Id: Ia47d39955739aa38fd303f4e90be7b4c50d9d4ba
    Add --archive option to init to sync using git archive
    
    This significantly reduces sync time and used brandwidth as only
    a tar of each project's revision is checked out, but git is not
    accessible from projects anymore.
    
    This is relevant when git is not needed in projects but sync
    speed/brandwidth may be important like on CI servers when building
    several versions from scratch regularly for example.
    
    Archive is not supported over http/https.
    
    Change-Id: I48c3c7de2cd5a1faec33e295fcdafbc7807d0e4d
    Signed-off-by: Julien Campergue <julien.campergue@parrot.com>
    Allow using repo with python3
    
    * Switching from python2 to python3 in the same workspace isn't
      currently supported, due to a change in the pickle version (which
      isn't supported by python2)
    * Basic functionality does work with python3, however not everything
      is expected to
    
    Change-Id: I4256b5a9861562d0260b503f972c1569190182aa
    Do not use print_function from __future__
    
    Python 2.4 and 2.5 do not have a print_function available, so we need a
    compatible print function for displaying an error message when the user
    has an older version of Python.
    
    Change-Id: I54d7297be98bb53970e873b36c6605e6dad386c3
    repo: use explicit Python executable to run main.py
    
    Small step to support non-POSIX platforms.
    
    Change-Id: I3bdb9c82c2dfbacb1da328caaa1a406ab91ad675
    Update gpg key for cco3@android.com
    
    cco3@android.com has a new gpg key, so this needs to be updated in the
    repo scripts so that he can sign updates.
    
    Change-Id: I9f058263b35bd027502d6e3b814d7aeb801a1e6e
    Move Python version checking to a separate module
    
    Add a new module with methods for checking the Python version.
    
    Instead of handling Python3 imports with try...except blocks, first
    check the python version and then import the relevant modules.  This
    makes the code a bit cleaner and will result in less diff when/if we
    remove support for Python < 3 later.
    
    Use the same mechanism to handle `input` vs. `raw_input` and add
    suppression of pylint warnings caused by redefinition of the built-in
    method `input`.
    
    Change-Id: Ia403e525b88d77640a741ac50382146e7d635924
    Also-by: Chirayu Desai <cdesai@cyanogenmod.org>
    Signed-off-by: Chirayu Desai <cdesai@cyanogenmod.org>
    repo: add rudimentary version checking
    
    Change-Id: I957775c7ce0821971cc2320597e1a7a31950bcf3
    Signed-off-by: Chirayu Desai <cdesai@cyanogenmod.org>
    Special handling for manifest group "default"
    
    Change Details:
    * Make "default" a special manifest group that matches any project that
      does not have the special project group "notdefault"
    * Use "default" instead of "all,-notdefault" when user does not specify
      manifest group
    * Expand -g option help to include example usage of manifest groups
    
    Change Benefits:
    * Allow a more intuitive and expressive manifest groups specification:
      * "default" instead of "all,-notdefault"
      * "default,foo" instead of "all,-notdefault,foo"
      * "default,-foo" instead of "all,-notdefault,-foo"
      * "foo,-default" which has no equivalent
    * Default manifest groups behavior can be restored by the command
      'repo init -g default'. This is significantly more intuitive than the
      current equivalent command 'repo init -g all,-notdefault'.
    
    Change-Id: I6d0673791d64a650110a917c248bcebb23b279d3
    Don't exit with error on HTTP 403 when downloading clone bundle
    
    If the server returns HTTP 403 (forbidden) when attempting to
    download clone bundle files, ignore it and continue, rather than
    exiting with a fatal error.
    
    Change-Id: Icf78cba0332b51b0e7b622f7c7924369b551b6f6
    Sync help text in repo from init.py
    
    Change Ia6032865f9296b29524c2c25b72bd8e175b30489 improved the
    help text for the init command, but the same improvement was not made
    in repo.
    
    Change-Id: Idc34e479b5237137b90e8b040824776e4f7883b0
    Tidy up code formatting a bit more
    
    Enable the following Pylint warnings:
    
      C0322: Operator not preceded by a space
      C0323: Operator not followed by a space
      C0324: Comma not followed by a space
    
    And make the necessary fixes.
    
    Change-Id: I74d74283ad5138cbaf28d492b18614eb355ff9fe
    Fix: "Statement seems to have no effect"
    
    Pylint raises an error on the call:
    
      print
    
    Change it to:
    
     print()
    
    Change-Id: I507e1b3dd928fa6c32ea7e86260fb3d7b1428e6f
    Change print statements to work in python3
    
    This is part of a series of changes to introduce Python3 support.
    
    Change-Id: I373be5de7141aa127d7debdbce1df39148dbec32
    More code style cleanup
    
    Clean up a few more unnecessary usages of lambda in `repo` that were missed
    in the previous sweep that only considered files ending in .py.
    
    Remove a duplicate import.
    
    Change-Id: I03cf467a5630cbe4eee6649520c52e94a7db76be
    Remove magic hack
    
    It should be assumed that on modern development environments, python
    is accessible to /usr/bin/env
    
    Change the shebang as necessary and remove the magic hack.
    
    This also means losing the -E option on the call to python, so that
    PYTHONPATH and PYTHONHOME will be respected and local configuration
    problems in those vars would be noticed
    
    Change-Id: I6f0708ca7693f05a4c3621c338f03619563ba630
    Change usages of xrange() to range()
    
    In Python3, range() creates a generator rather than a list.
    
    None of the parameters in the ranges changed looked large enough
    to create an impact in memory in Python2.  Note: the only use of
    range() was for iteration and did not need to be changed.
    
    This is part of a series of changes to introduce Python3 support.
    
    Change-Id: I50b665f9296ea160a5076c71f36a65f76e47029f
    Use python3 urllib when urllib2 not available
    
    This is part of a series of changes to introduce Python3 support.
    
    Change-Id: I605b145791053c1f2d7bf3c907c5a68649b21d12
    Use 'stat' package instead of literals for mkdir()
    
    This is part of a series of changes to introduce Python3 support.
    
    Change-Id: Ic988ad181d32357d82dfa554e70d8525118334c0
    Update minimum git version to 1.7.2
    
    We now use the -c flag which was introduced in git 1.7.2.
    
    Change-Id: I9195c0f6ac9fa63e783a03628049fe2c67d258ff
    Add a PGP key for cco3@android.com
    
    This change adds a PGP key to allow cco3@android.com to sign releases.
    
    Change-Id: I18a70c8b7d8f272dd1aad9d6b2e4a237ef35af33
    Update PGP keys during _PostRepoUpgrade in `sync`
    
    Previously, if a key was added, a client wouldn't add the key during
    the sync step.  This would cause issues if a new key were added and a
    subsequent release were signed by that key.
    
    Change-Id: I4fac317573cd9d0e8da62aa42e00faf08bfeb26c
    Use modern Python exception syntax
    
    "except Exception as e" instead of "except Exception, e"
    
    This is part of a transition to supporting Python 3.  Python >= 2.6
    support "as" syntax.
    
    Note: this removes Python 2.5 support.
    
    Change-Id: I309599f3981bba2b46111c43102bee38ff132803
    Rename "dir" variables
    
    The variable name "dir" conflicts with the name of a Python built-in
    function: http://docs.python.org/library/functions.html#dir
    
    Change-Id: I850f3ec8df7563dc85e21f2876fe5e6550ca2d8f
    Clean up imports
    
    manifest_xml: import `HEAD` and `R_HEADS` from correct module
    version: import `HEAD` from correct module
    
    `HEAD` and `R_HEADS` should be imported from the git_refs module,
    where they are originally defined, rather than from the project
    module.
    
    repo: remove unused import of readline
    
    cherry_pick: import standard modules on separate lines
    smartsync: import subcmd modules explicitly from subcmd
    
    Use:
      `import re
      import sys`
    and
      `from subcmds.sync import Sync`
    
    Instead of:
      `import sys, re`
    and
      `from sync import Sync`
    
    Change-Id: Ie10dd6832710939634c4f5c86b9ba5a9cd6fc92e
    Use gerrit.googlesource.com/git-repo as the default URL
    
    This is basically the same repository, but may be slightly more
    up-to-date than the one on code.google.com/p/git-repo.
    
    Change-Id: I5c99539f53231958eefb6993f00997c9adf0a3c9
    Detect git is not installed
    
    Fix detection for Git not being in $PATH during the initial
    run of `repo init` in a new directory.
    
    Change-Id: I2b1fcce1fb8afc47271f5c3bd2a28369009b2fb7
    Add a --platform flag
    
    Projects may optionally specify their platform
    (eg, groups="platform-linux" in the manifest).
    
    By default, repo will automatically detect the platform. However,
    users may specify --platform=[auto|all|linux|darwin].
    
    Change-Id: Ie678851fb2fec5b0938aede01f16c53138a16537
    Refine groups functionality
    
    Every project is in group "default".  "-default" does not remove
    it from this project.  All group names specified in the manifest
    are positive names as opposed to a mix of negative and positive.
    
    Specified groups are resolved in order.  If init is supplied with
    --groups="group1,-group2", the following describes the project
    selection when syncing:
    
      * all projects in "group1" will be added, and
      * all projects in "group2" will be removed.
    
    Change-Id: I1df3dcdb64bbd4cd80d675f9b2d3becbf721f661
    Add manifest groups
    
    Allows specifying a list of groups with a -g argument to repo init.
    The groups act on a group= attribute specified on projects in the
    manifest.
    All projects are implicitly labelled with "default" unless they are
    explicitly labelled "-default".
    Prefixing a group with "-" removes matching projects from the list
    of projects to sync.
    If any non-inverted manifest groups are specified, the default label
    is ignored.
    
    Change-Id: I3a0dd7a93a8a1756205de1d03eee8c00906af0e5
    Reviewed-on: https://gerrit-review.googlesource.com/34570
    Reviewed-by: Shawn Pearce <sop@google.com>
    Tested-by: Shawn Pearce <sop@google.com>
    Add support for Apache Digest authentication for repo init.
    
    repo tool supports only Basic authentication for now. For those
    who want to use this tool to manage their own projects, in case
    the administrator has configured the Apache server with Digest
    authentication method, users will fail to be authenticated when
    they run the command 'repo init'.
    Add the digest authentication password manager to the handler
    list will fix this issue.
    
    Since Git HTTP protocol will require the user be authenticated
    for fetch operation first before pushing commits to the remote,
    it is unlikely for the administrator to implement anonymous
    read (aka pull) access and write access (aka push) for
    authenticated user. Both read and write have to be authenticated.
    Be aware that the user may have to add an extra line in his
    ~/.netrc file:
    -------------------
    account example.com
    -------------------
    where 'example.com' is the realm for Apache Digest authentication.
    
    Change-Id: I76eb27b205554426d9ce1965deaaf727b87916cd
    Signed-off-by: Xiaodong Xu <stid.smth@gmail.com>
    Revert "Default repo manifest settings in git config"
    
    This reverts commit ee1c2f5717fcc137ab887a4aae8a08d50a539b9a.
    
    This breaks a lot of buildbot systems. Rolling it back for now
    until we can understand what the breakage was and how to fix it.
    Don't prompt the user for name/email unless necessary
    
    If the user has already configured a workspace, use these values
    when re-running 'repo init'.
    
    Otherwise, if the user has global name and e-mail set, use these.
    
    It's always possible to override this and be prompted by specifying
    --config-name when running 'repo init'.
    
    Change-Id: If45f0e4b14884071439fb02709dc5cb53f070f60
    Default repo manifest settings in git config
    
    A default manifest URL can be specified using:
      git config --global repo-manifest.<id>.url <url>
    
    A default manifest server can be specified using:
      git config --global repo-manifest.<id>.server <url>
    
    A default git mirror reference can be specified using:
      git config --global repo-manifest.<id>.reference <path>
    
    This will allow the user to use 'repo init -u <id>' as
    a shorter alternative to specifying the full URL.
    
    Also, manifest server will not have to be specified in the
    manifest XML and the reference will not have to be specified
    on the command line. If they are, they will override these
    default values however.
    
    Change-Id: Ifdbc160bd5909ec7df9efb0c5d7136f1d9351754
    Signed-off-by: Victor Boivie <victor.boivie@sonyericsson.com>
    sync: Support downloading bundle to initialize repository
    
    An HTTP (or HTTPS) based remote server may now offer a 'clone.bundle'
    file in each repository's Git directory. Over an http:// or https://
    remote repo will first ask for '$URL/clone.bundle', and if present
    download this to bootstrap the local client, rather than relying
    on the native Git transport to initialize the new repository.
    
    Bundles may be hosted elsewhere. The client automatically follows a
    HTTP 302 redirect to acquire the bundle file. This allows servers
    to direct clients to cached copies residing on content delivery
    networks, where the bundle may be closer to the end-user.
    
    Bundle downloads are resumeable from where they last left off,
    allowing clients to initialize large repositories even when the
    connection gets interrupted.
    
    If a bundle does not exist for a repository (a HTTP 404 response
    code is returned for '$URL/clone.bundle'), the native Git transport
    is used instead. If the client is performing a shallow sync, the
    bundle transport is not used, as there is no way to embed shallow
    data into the bundle.
    
    Change-Id: I05dad17792fd6fd20635a0f71589566e557cc743
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Change default REPO_URL to code.google.com
    
    Change-Id: If7700daf96fb8f3ee449e5774017272ef31b4b44
    Add --depth option to main repo wrapper.
    
    See related repo change:
      https://review.source.android.com/#change,22722
    
    Change-Id: I9bdd86971c94604477b91cdf47d6fac2c0bc186e
    Bump repo version to 1,10
    
    Change-Id: Ifdc041e7152af31de413b9269f20000acd945b3b
    Make path references OS independent
    
    Change-Id: I5573995adfd52fd54bddc62d1d1ea78fb1328130
    (cherry picked from commit b0f9a02394779c1c9422a9649412c9ac5fb0f12f)
    
    Conflicts:
    
            command.py
    Encode the environment variables passed to git
    
    Windows allows the environment to have unicode values.
    This will cause Python to fail to execute the command.
    
    Change-Id: I37d922c3d7ced0d5b4883f0220346ac42defc5e9
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Exit with statuscode 0 for repo help init
    
    The complete help text is printed, so the program executed successfully.
    
    Some tools (like OpenGrok) detects the availibility of a program by
    running it with a known set of options and check the return code.
    It is an easy and portable way of checking for the existence of a program
    instead of searching the path (and handle extensions) ourselves.
    
    Change-Id: Ic13428c77be4a36d599ccb8c86d893308818eae3
    Make path references OS independent
    
    Change-Id: I5573995adfd52fd54bddc62d1d1ea78fb1328130
    sync: Enable use of git clone --reference
    
    Use git clone to initialize a new repository, and when possible
    allow callers to use --reference to reuse an existing checkout as
    the initial object storage area for the new checkout.
    
    Change-Id: Ie27f760247f311ce484c6d3e85a90d94da2febfc
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    init: add -o, --origin to name manifest remote
    
    The -o option permits the user to control the name of the manifest's
    remote, which normally is hardcoded to be 'origin', but can differ
    because we derive it at runtime from the configuration file.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    init (wrapper): Note that -m is now deprecated
    
    If the manifest format isn't XML, this option isn't available.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Refactor Manifest to be XmlManifest
    
    We'll soon be supporting two different manifest formats, but we
    can't immediately remove support for the current XML one that is
    in wide spread use within Android.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Clarify options that control the repo executable version
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Correct the REPO_URL in the wrapper script to android.git.kernel.org
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Add 'repo init --mirror' to download a complete forrest
    
    The mirror option downloads a complete forrest (as described by the
    manifest) and creates a replica of the remote repositories rather
    than a client working directory.  This permits other clients to
    sync off the mirror site.
    
    A mirror can be positioned in a "DMZ", where the mirror executes
    "repo sync" to obtain changes from the external upstream and
    clients inside the protected zone operate off the mirror only,
    and therefore do not require direct git:// access to the external
    upstream repositories.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    wrapper 1.6
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Added missing wait after git-version call in wrapper
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Remove the Python 2.4 dependency and use just 'python'
    
    Many Linux distributions are including python2.5 by default, as
    it is the latest stable release of the language.  Using python2.4
    (and asking users to specifically install it) is just cruel and
    unusual punishment.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Initial Contribution
    Add rpc: to default protocol whitelist
    
    Change-Id: I57e1c3d93c0ce56da9c487df65eb3d258e0260e8
    Set GIT_ALLOW_PROTOCOL to limit dangerous protocols
    
    See git commit 33cfccbbf35a -- some protocols allow arbitrary command
    execution as part of the URL. Instead of blindly allowing those,
    whitelist the allowed URL protocols unless the user has already done so.
    
    Bug: Issue 210
    Change-Id: I6bd8e721aa5e3dab53ef28cfdc8fde33eb74ef76
    git_command: only decode when needed
    
    strings no longer need decoding, since unicode is str
    
    Change-Id: I9516d298fee7ddc058452394b7759327fe3aa7a8
    decode the buffer before appending
    
    output from a process is in bytes in python3. we need
    to decode it.
    
    in Python3, bytes don't have an encode attribute. use this
    to identify it.
    
    Change-Id: I152f2ec34614131027db680ead98b53f9b321ed5
    Always capture output for GitCommand
    
    Switch the GitCommand program to always capture the output for stdout
    and stderr.  And by default print the output while running.
    
    The options capture_stdout and capture_stderr have effectively become
    options to supress the printing of stdout and stderr.
    
    Update the 'git fetch' to use '--progress' so that the progress messages
    will be displayed.  git checks if the output location isatty() and if it
    is not a TTY it will by default not print the progress messages.
    
    Change-Id: Ifdae138e008f80a59195f9f43c911a1a5210ec60
    Decode git version
    
    Used by 'repo --version'
    With Python 3,
    * Before: b'git version 2.1.0'
    * After: git version 2.1.0
    
    Change-Id: I4321bb0f09e92cda1123c35910338b940e82a305
    Share git version parsing code with wrapper module
    
    'repo' and 'git_command.py' had their own git version parsing code.
    This change shares that code between the modules.  DRY is good.
    
    Change-Id: Ic896d2dc08353644bd4ced57e15a91284d97d54a
    Respect version hyphenation
    
    The last change regarding version parsing lost handling of version
    hyphenation, this restores that.  In otherwords,
    1.1.1-otherstuff is parsed as (1,1,1) instead of (1,1,0)
    
    Change-Id: I3753944e92095606653835ed2bd090b9301c7194
    Handle release candidates in git version parsing
    
    Right now repo chokes on git versions like "1.9.rc1".  This change
    treats 'rc*' as a '0'.
    
    Change-Id: I612b7b431675ba7415bf70640a673e48dbb00a90
    Fix some python3 encoding issues
    
    * Add .decode('utf-8') where needed
    * Add 'b' to `open` where needed, and remove where unnecessary
    
    Change-Id: I0f03ecf9ed1a78e3b2f15f9469deb9aaab698657
    Change print statements to work in python3
    
    This is part of a series of changes to introduce Python3 support.
    
    Change-Id: I373be5de7141aa127d7debdbce1df39148dbec32
    Fix pylint warning W0108: Lambda may not be necessary
    
    Remove unnecessary usage of lambda.
    
    Change-Id: I06d41933057d60d15d307ee800cca052a44754c6
    Even more coding style cleanup
    
    Fixing some more pylint warnings:
    
    W1401: Anomalous backslash in string
    W0623: Redefining name 'name' from outer scope
    W0702: No exception type(s) specified
    E0102: name: function already defined line n
    
    Change-Id: I5afcdb4771ce210390a79981937806e30900a93c
    Use modern Python exception syntax
    
    "except Exception as e" instead of "except Exception, e"
    
    This is part of a transition to supporting Python 3.  Python >= 2.6
    support "as" syntax.
    
    Note: this removes Python 2.5 support.
    
    Change-Id: I309599f3981bba2b46111c43102bee38ff132803
    Rename "dir" variables
    
    The variable name "dir" conflicts with the name of a Python built-in
    function: http://docs.python.org/library/functions.html#dir
    
    Change-Id: I850f3ec8df7563dc85e21f2876fe5e6550ca2d8f
    Fix bug in version_tuple to handle strings with -rc#
    
    Example of version string that caused a problem: git version 1.7.11-rc3
    
    Change-Id: I8a68b6b37f7b2ded23a1f8ae0d12131050a8807b
    CC: sop@google.com
    Single quote http.proxy in GIT_CONFIG_PARAMETERS
    
    Git requires the values in this environment variable to be
    single quoted. repo must wrap the expression into '' before
    adding it to the environment.
    
    Change-Id: I20a1fb8772f9aa6e9fd5a0516c981c2ca020ef05
    Use GIT_CONFIG_PARAMETERS instead of -c for http.proxy
    
    Ancient versions of Git don't understand the -c command line flag
    that we tried to use to pass http_proxy down into Git on Darwin.
    Use the environment variable instead, to more gracefully degrade
    with these old versions.
    
    Change-Id: Iffffa32088c1fd803895b990b3377ecfec6a1b14
    Pass http_proxy as -c http.proxy on Mac OS X
    
    The system libcurl library seems to ignore http_proxy on Mac OS
    X systems. Copy the http_proxy environment variable (if set) as
    `git -c http.proxy` whenever running a Git command.
    
    Change-Id: I0ab29336897178f70b85092601f9fcc306dd17e1
    Stabilize repo communication with subprocesses.
    
    Make repo use the standard way in python to work with pipes.
    Communication via pipes to sub processes is done by calling
    communicate(). This will make repo not hang every now and
    then.
    
    Change-Id: Ibe2c4ecbdbcbe72f0b725ca50d54088e5646fc5d
    Enhance HTTP support
    
    Setting REPO_CURL_VERBOSE=1 in the environment will register a debug
    level HTTPHandler on the urllib2 library, showing HTTP requests and
    responses on the stderr channel of repo.
    
    During any HTTP or HTTPS request created inside of the repo process,
    a custom User-Agent header is now defined:
    
      User-Agent: git-repo/1.7.5 (Linux) git/1.7.7 Python/2.6.5
    
    Change-Id: Ia5026fb1e1500659bd2af27416d85e205048bf26
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Use os.environ.copy() instead of dict()
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    (cherry picked from commit 3218c13205694434edb2375ab8a8515554eed366)
    Encode the environment variables passed to git
    
    Windows allows the environment to have unicode values.
    This will cause Python to fail to execute the command.
    
    Change-Id: I37d922c3d7ced0d5b4883f0220346ac42defc5e9
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Use os.environ.copy() instead of dict()
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    sync: kill git fetch process before SSH control master process
    
    If the SSH control master process is killed while an active git
    fetch is using its network socket, the underlying SSH client may
    not realize the connection was broken.  This can lead to both the
    client and the server waiting indefinitely for network messages
    which will never be sent.
    
    Work around the problem by keeping track of any processes that use
    the tunnels we establish.  If we are about to kill any of the SSH
    control masters that we started, ensure the clients using them are
    successfully killed first.
    
    Change-Id: Ida6c124dcb0c6a26bf7dd69cba2fbdc2ecd5b2fc
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Rename _ssh_sock() to fix code style issue.
    
    Since _ssh_sock is imported out of the git_command module, the leading
    underscore should be removed from the function name.
    Refactor git version detection for reuse
    
    This way we can use it to detect feature support in the underlying
    git, such as new options or commands that have been added in more
    recent versions.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Work around 'ControlPath too long' on Mac OS X
    
    Mac OS X sets TMPDIR to a very long path within /var, so long
    that a socket created in that location is too big for a struct
    sockaddr_un on the platform, resulting in OpenSSH being unable
    to create or bind to a socket in that location.
    
    Instead we try to use the very short and very common /tmp, but
    fall back to the guessed default if /tmp does not exist.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Automatically use SSH control master support during sync
    
    By creating a background ssh "control master" process which lives
    for the duration of our sync cycle we can easily cut the time for
    a no-op sync of 132 projects from 60s to 18s.
    
    Bug: REPO-11
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Fix `repo --trace` to show ref and config loads
    
    The value of the varible TRACE was copied during the import, which
    happens before the --trace option can be processed.  So instead we
    now use a function to determine if the value is set, as the function
    can be safely copied early during import.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Initial Contribution
    Revert "Repo: fall back to http, if ssh connection fails for http repos"
    
    This reverts commit 488bf092d5992bd1b8f8681c444f2cc283d05bcb.
    
    Issue 230
    
    Change-Id: I3a5725301f576e1a2ac499cb6daa631895115640
    implement optional 'pushurl' in the manifest file
    
    Allow the 'remote' element in the manifest file to define an optional
    'pushurl' attribute which is passed into the .git/config file.
    
    Change-Id: If342d299d371374aedc4440645798888869c9714
    Signed-off-by: Steve Rae <steve.rae@raedomain.com>
    Repo: fall back to http, if ssh connection fails for http repos
    
    if a gerrit server has ssh and https access enabled, but user access
    (for some users) is limited to https, 'repo upload' command will fail
    for them.
    
    Gerrit returns a ssh configuration (gerrit/ssh_info), that does not work
    for users limited to https.
    
    With this patch repo will test, if the returned ssh configuration from
    gerrit/ssh_info is working. if not, it will fall back to https for upload.
    
    Change-Id: If98f472e994f350bf71f35610cd649b163f1ab33
    Repo: improve error detection for new ssh connections
    
    this check can only detect errors that happen within 1 sec after launching
    ssh. But this is typically enough to catch configuration issues like
    'connection refused' or 'authentication failed'.
    
    Change-Id: I00b6f62d4c2889b1faa6c820e49a198554c92795
    Support smart-sync through persistent-http[s]
    
    Use the same cookies and proxy that git traffic goes through for
    persistent-http[s] to support authentication for smart-sync.
    
    Change-Id: I20f4a281c259053a5a4fdbc48b1bca48e781c692
    git_config: fix _SaveJson typo
    
    Change-Id: I35ca2b3733e6d1508669f9a6690c6645c582912e
    git_config: add support for remote '.'
    
    As a fix for issue #149, this patch add support for the remote '.'
    (local).
    
    As an alias for the local repository, remote '.' is lacking a fetch =
    config in .git/config.
    
    Without such refspec, repo info --overview is not able to process a
    local tracking branch.
    
    v2: Check for name == '.' before checking if merge starts with refs/,
        since the case where it's not is invalid.
    
    Signed-off-by: Yann Droneaud <ydroneaud@opteya.com>
    Signed-off-by: Filipe Brandenburger <filbranden@google.com>
    
    Change-Id: I8c8fd8602cd68baecb530301ae41d37d751ec85d
    Support persistent-http(s) review urls
    
    Change-Id: I8e0065685c968dfa9dc26bcdb6ee2fa14019c509
    Support specifying non-HEADS refs as upstream
    
    While not typical, some users might have an upstream that isn't in
    the usual refs/heads/* namespace. There's no reason not to use
    those refs as the value for the upstream attribute, so support
    doing so.
    
    Change-Id: I5b119f1135c3268c20e7c4084682e860d3ee1fb1
    Don't open non-binary files as binary
    
    * Don't pen the git config file, and the git ".lock" file as binary.
    
    Change-Id: I7b3939658456f2fd0a0500443cdd8d1ee1a4459d
    Use JSON instead of pickle
    
    Use JSON as it is shown to be much faster than pickle.
    Also clean up the loading and saving functions.
    
    Change-Id: I45b3dee7b4d59a1c0e0d38d4a83b543ac5839390
    Fix UrlInsteadOf to handle multiple strings
    
    For complex .gitconfig url rewrites, multiple insteadOf lines may be
    used for a url. Search all of them for the right rewrite.
    
    Change-Id: If5e9ecd054e86226924b0baf513801cd57c389cd
    Stop appending 'p/' to review urls
    
    Gerrit no longer requires 'p/', and this causes unexpected behavior.
    In this change we stop appending 'p/' to the urls.
    
    Change-Id: I72c13bf838f4112086141959fb1af249f9213ce6
    Changes to support sso: repositories for upload
    
    Change-Id: Iddf90d52f700a1f6462abe76d4f4a367ebb6d603
    Fix some python3 encoding issues
    
    * Add .decode('utf-8') where needed
    * Add 'b' to `open` where needed, and remove where unnecessary
    
    Change-Id: I0f03ecf9ed1a78e3b2f15f9469deb9aaab698657
    Assume http upload if ssh_info cannot be parsed
    
    When uploading a change for review, we sometimes request /ssh_info to
    get the correct port number for uploading via ssh (regardless of
    whether or not we intend to upload over ssh).
    
    If we have trouble accessing /ssh_info (for authentication reasons,
    etc), we now press on under the assumption that we will upload via http
    instead of aborting.
    
    Change-Id: Ica6bbeac1279e89424a903529649b7f4af0b6937
    Handle HTTPException when attempting to get ssh_info
    
    The call to `urlopen` can raise `HTTPException`, but this is not
    caught which results in a python Traceback.
    
    Add handling of the exception.  Because `HTTPException` and its
    derived classes do not have any message, print the name of the
    exception in the error message instead.
    
    Change-Id: Ic90fb4cc0e92702375cd976d4a03876c8ce8bffc
    Move Python version checking to a separate module
    
    Add a new module with methods for checking the Python version.
    
    Instead of handling Python3 imports with try...except blocks, first
    check the python version and then import the relevant modules.  This
    makes the code a bit cleaner and will result in less diff when/if we
    remove support for Python < 3 later.
    
    Use the same mechanism to handle `input` vs. `raw_input` and add
    suppression of pylint warnings caused by redefinition of the built-in
    method `input`.
    
    Change-Id: Ia403e525b88d77640a741ac50382146e7d635924
    Also-by: Chirayu Desai <cdesai@cyanogenmod.org>
    Signed-off-by: Chirayu Desai <cdesai@cyanogenmod.org>
    Some fixes for supporting python3
    
    * Fix imports.
    * Use python3 syntax.
    * Wrap map() calls with list().
    * Use list() only wherever needed.
      (Thanks Conley!)
    * Fix dictionary iteration methods
      (s/iteritems/items/).
    * Make use of sorted() in appropriate places
    * Use iterators directly in the loop.
    * Don't use .keys() wherever it isn't needed.
    * Use sys.maxsize instead of sys.maxint
    
    TODO:
    * Make repo work fully with python3. :)
    
    Some of this was done by the '2to3' tool [1], by
    applying the needed fixes in a way that doesn't
    break compatibility with python2.
    
    Links:
    [1]: http://docs.python.org/2/library/2to3.html
    
    Change-Id: Ibdf3bf9a530d716db905733cb9bfef83a48820f7
    Signed-off-by: Chirayu Desai <cdesai@cyanogenmod.org>
    Tidy up code formatting a bit more
    
    Enable the following Pylint warnings:
    
      C0322: Operator not preceded by a space
      C0323: Operator not followed by a space
      C0324: Comma not followed by a space
    
    And make the necessary fixes.
    
    Change-Id: I74d74283ad5138cbaf28d492b18614eb355ff9fe
    Fix inconsistent indentation
    
    The repo coding style is to indent at 2 characters, but there are
    many places where this is not followed.
    
    Enable pylint warning "W0311: Bad indentation" and make sure all
    indentation is at multiples of 2 characters.
    
    Change-Id: I68f0f64470789ce2429ab11104d15d380a63e6a8
    Change print statements to work in python3
    
    This is part of a series of changes to introduce Python3 support.
    
    Change-Id: I373be5de7141aa127d7debdbce1df39148dbec32
    Fix pylint warning W0108: Lambda may not be necessary
    
    Remove unnecessary usage of lambda.
    
    Change-Id: I06d41933057d60d15d307ee800cca052a44754c6
    Change usages of xrange() to range()
    
    In Python3, range() creates a generator rather than a list.
    
    None of the parameters in the ranges changed looked large enough
    to create an impact in memory in Python2.  Note: the only use of
    range() was for iteration and did not need to be changed.
    
    This is part of a series of changes to introduce Python3 support.
    
    Change-Id: I50b665f9296ea160a5076c71f36a65f76e47029f
    Use python3 urllib when urllib2 not available
    
    This is part of a series of changes to introduce Python3 support.
    
    Change-Id: I605b145791053c1f2d7bf3c907c5a68649b21d12
    Even more coding style cleanup
    
    Fixing some more pylint warnings:
    
    W1401: Anomalous backslash in string
    W0623: Redefining name 'name' from outer scope
    W0702: No exception type(s) specified
    E0102: name: function already defined line n
    
    Change-Id: I5afcdb4771ce210390a79981937806e30900a93c
    Use modern Python exception syntax
    
    "except Exception as e" instead of "except Exception, e"
    
    This is part of a transition to supporting Python 3.  Python >= 2.6
    support "as" syntax.
    
    Note: this removes Python 2.5 support.
    
    Change-Id: I309599f3981bba2b46111c43102bee38ff132803
    Coding style cleanup
    
    Fix the following issues reported by pylint:
    
    C0321: More than one statement on a single line
    W0622: Redefining built-in 'name'
    W0612: Unused variable 'name'
    W0613: Unused argument 'name'
    W0102: Dangerous default value 'value' as argument
    W0105: String statement has no effect
    
    Also fixed a few cases of inconsistent indentation.
    
    Change-Id: Ie0db839e7c57d576cff12d8c055fe87030d00744
    Permit - in URL schemes for special URLs
    
    Clients might be using their own special git-remote-* helper that
    has a hypen in its name. Permit - in the scheme part of the URL
    when trying to decide if it is an SSH URL and assume it is *not*
    SSH if the URL matches "foo-bar://" style.
    
    Change-Id: I7ba2d810a614f6e605a441d5972902c4a14e73fd
    upload: Support uploading to Gerrit over https://
    
    If SSH is not available, Gerrit returns NOT_AVAILABLE to the /ssh_info
    query made by repo upload. In this case fallback to the /p/$PROJECT URL
    that Gerrit also exports and use that for uploads.
    
    Change-Id: I1e3e39ab709ecc0a692614a41a42446426f39c08
    upload: Honor REPO_HOST_PORT_INFO environment variable
    
    REPO_HOST_PORT_INFO can be set to 'host:port' and be used
    instead of the review URL given in the manifest.
    
    Change-Id: I440bdecb2c2249fe5285ec5d0c28a937b4053450
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Fix AttributeError: 'HTTPError' object has no attribute 'reason'
    
    Not every version of urllib2 supplies a reason object on the
    HTTPError exception that it throws from urlopen().  Work around
    this by using str(e) instead and hope the string formatting includes
    sufficient information.
    
    Change-Id: I0f4586dba0aa7152691b2371627c951f91fdfc8d
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    sync: Support downloading bundle to initialize repository
    
    An HTTP (or HTTPS) based remote server may now offer a 'clone.bundle'
    file in each repository's Git directory. Over an http:// or https://
    remote repo will first ask for '$URL/clone.bundle', and if present
    download this to bootstrap the local client, rather than relying
    on the native Git transport to initialize the new repository.
    
    Bundles may be hosted elsewhere. The client automatically follows a
    HTTP 302 redirect to acquire the bundle file. This allows servers
    to direct clients to cached copies residing on content delivery
    networks, where the bundle may be closer to the end-user.
    
    Bundle downloads are resumeable from where they last left off,
    allowing clients to initialize large repositories even when the
    connection gets interrupted.
    
    If a bundle does not exist for a repository (a HTTP 404 response
    code is returned for '$URL/clone.bundle'), the native Git transport
    is used instead. If the client is performing a shallow sync, the
    bundle transport is not used, as there is no way to embed shallow
    data into the bundle.
    
    Change-Id: I05dad17792fd6fd20635a0f71589566e557cc743
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Add support for url.*.insteadof
    
    Teach repo how to resolve URLs using the url.insteadof feature
    that C Git natively uses during clone, fetch or push. This will
    later allow repo to resolve a URL before accessing it directly.
    We do not want to pre-resolve things and store the resolved URL
    into individual projects, as this makes it impossible for the
    user to undo the insteadof mapping at a later date.
    
    Change-Id: I0f62e811197c53fbc8a8be424e3cabf4ed07b4cb
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Honor http_proxy variable globally
    
    If the http_proxy environment variable was set, honor it during
    the entire repo session for any Python created HTTP connections.
    
    Change-Id: Ib4ae833cb2cdd47ab0126949f6b399d2c142887d
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Honor 'http_proxy' environment variable
    
    'repo upload' makes http request using urllib2 python library.
    Unfortunately this library does not work (by default) in case
    if the user behind a proxy.
    
    This change adds proxy handler in case if 'http_proxy' environment
    variable is set.
    
    Change-Id: Ic4176ad733fc21bd5b59661b3eacc2f0a7c3c1ff
    upload: Catch and cleanly report connectivity errors
    
    Instead of giving a Python backtrace when there is a connectivity
    problem during repo upload, report that we cannot access the host,
    and why, with a halfway decent error message.
    
    Bug: REPO-45
    Change-Id: I9a45b387e86e48073a2d99bd6d594c1a7d6d99d4
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    (cherry picked from commit d2dfac81ad6a060179b4b2289060af2dc7a5cdfd)
    Fixed race condition in 'repo sync -jN' that would open multiple masters.
    
    This fixes the SSH Control Masters to be managed in a thread-safe
    fashion.  This is important because "repo sync -jN" uses threads to
    sync more than one repository at the same time.  The problem didn't
    show up earlier because it was masked if all of the threads tried to
    connect to the same host that was used on the "repo init" line.
    Only delete corrupt pickle config files if they exist
    
    os.remove() raises OSError if the file being removed doesn't exist.
    Check before calling to ensure we don't raise a useless exception
    on an already deleted file.
    
    Change-Id: I44c1c7dd97a47fcab8afb6c18fdf179158b6dab7
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Check for existing SSH ControlMaster
    
    Be more thorough about checking for an existing ssh master by
    running a test command first, and only opening up a new master
    if the test fails to connect.
    
    Change-Id: I56fe8e7b4dbc123675b7f259e81d359ed0cd55cf
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    upload: Allow review.HOST.username to override email
    
    Some users might need to use a different login name than the local
    part of their email address for their Gerrit Code Review user
    account.  Allow it to be overridden with the review.HOST.username
    configuration variable.
    
    Change-Id: I714469142ac7feadf09fee9c26680c0e09076b75
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Do not invoke ssh with -p argument when no port has been specified.
    
    This change allows local SSH configuration to choose the port number
    to use when not explicitly set in the manifest.
    
    (cherry picked from commit 4c0f67046543c7c6ab24175e143001f14b76ea01)
    
    Change-Id: Ibea99cfe46b6a2cc27f754cc3944a2fe10f6fda4
    sync: kill git fetch process before SSH control master process
    
    If the SSH control master process is killed while an active git
    fetch is using its network socket, the underlying SSH client may
    not realize the connection was broken.  This can lead to both the
    client and the server waiting indefinitely for network messages
    which will never be sent.
    
    Work around the problem by keeping track of any processes that use
    the tunnels we establish.  If we are about to kill any of the SSH
    control masters that we started, ensure the clients using them are
    successfully killed first.
    
    Change-Id: Ida6c124dcb0c6a26bf7dd69cba2fbdc2ecd5b2fc
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Rename _ssh_sock() to fix code style issue.
    
    Since _ssh_sock is imported out of the git_command module, the leading
    underscore should be removed from the function name.
    Honor url.insteadOf when setting up SSH control master connection
    
    Repo can now properly handle url.insteadOf sections in the
    user's ~/.gitconfig file.  This means that a user can now enjoy
    the master-ssh functionality even if he/she uses insteadOf's in
    ~/.gitconfig to rewrite git:// URLs to ssh:// style URLs.
    
    Change-Id: Ic0f04a9c57206a7b89eb0f10bf188c4c483debe3
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    upload: Catch and cleanly report connectivity errors
    
    Instead of giving a Python backtrace when there is a connectivity
    problem during repo upload, report that we cannot access the host,
    and why, with a halfway decent error message.
    
    Bug: REPO-45
    Change-Id: I9a45b387e86e48073a2d99bd6d594c1a7d6d99d4
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Do not invoke ssh with -p argument when no port has been specified.
    
    This change allows local SSH configuration to choose the port number to
    use when not explicitly set in the manifest.
    Only remove a stale pickle file if it exists
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Allow callers to reset the git config cache
    
    If commands modify the git config too rapidly we might not notice
    the .git/config file has been modified, as they could run in the
    same filesystem timestamp window and thus not cause a change on
    the config's mtime.  This can cause repo to miss re-reading the
    config file after running a command.
    
    Allowing the cache to be flushed forces us to re-read the config.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Fix error parsing a non-existant configuration file
    
    If a file (e.g. ~/.gitconfig) does not exist, we get None
    here rather than a string.  NoneType lacks rstrip() so we
    cannot strip it.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    git_config: handle configuration entries with no values
    
    A git-config entry with no value was preventing repo
    from initializing.  This modifies _ReadGit() to handle
    config entries with empty values.
    
    Signed-off-by: David Aguilar <davvid@gmail.com>
    Reported-by: Josh Guilfoyle <jasta00@gmail.com>
    Fix invalid use of try-catch
    
    Its try-except in Python.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Don't crash if the ssh client is already dead
    
    If the SSH client terminated abnormally in the background (e.g. the
    server shutdown while we were doing a sync) then the pid won't exist.
    Instead of crashing, ignore it, the result we wanted (a non-orphaned
    ssh process) is already acheived.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Ignore EOFError when reading a truncated pickle file
    
    If the pickle config file is 0 bytes in length,  we may have
    crashed (or been aborted) while writing the file out to disk.
    Instead of crashing with a backtrace, just treat the file as
    though it wasn't present and load off a `git config` fork.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Add missing return False to preconnect
    
    Noticed by users on repo-discuss, we were missing a return False
    here to signal that SSH control master was not used to setup the
    network connection.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Allow callers of GitConfig to specify the pickle file path
    
    This way we can put it in another directory than the config file
    itself, e.g. hide it inside ".git" when parsing a ".gitmodules"
    file from the working tree.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Teach GitConfig how to yield subsection names
    
    This can be useful when pulling apart a configuration file, like
    finding all entries which match submodule.*.*.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Fix ssh://user@hostname/ style URLs parsing
    
    I only tested this with ssh://hostname/ style URLs, so I failed
    to test ssh://user@hostname/ format, which failed if the hostname
    portion was longer than 1 character.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Disable SSH ControlMaster option on Cygwin
    
    Bug: REPO-29
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Fix UnboundLocalError: local variable 'port' when using SSH
    
    If the SSH URL doesn't contain a port number, but uses the ssh://
    or git+ssh:// syntax we raised a Python runtime error due to the
    'port' local variable not being assigned a value.  Default it to
    the IANA assigned port for SSH, 22.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Automatically use SSH control master support during sync
    
    By creating a background ssh "control master" process which lives
    for the duration of our sync cycle we can easily cut the time for
    a no-op sync of 132 projects from 60s to 18s.
    
    Bug: REPO-11
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Make usage of open safer by setting binary mode and closing fds
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Speed up 'repo start' by removing some forks
    
    Its quite common for most projects to be matching the current
    manifest revision, as most developers only modify one or two projects
    at any one time.  We can speed up `repo start foo` (that impacts
    the entire client) by performing most of the branch creation and
    switch operations in pure Python, and thus avoid 4 forks per project.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Fix `repo --trace` to show ref and config loads
    
    The value of the varible TRACE was copied during the import, which
    happens before the --trace option can be processed.  So instead we
    now use a function to determine if the value is set, as the function
    can be safely copied early during import.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Enable tracing of ref scans and config unpickling
    
    These are not as expensive as spawning a git command, but they are
    not free either.  We want to keep track of how many times we wind
    up calling them on any particular operation.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Pickle parsed git config files
    
    We now cache the output of `git config --list` for each of our
    GitConfig instances in a Python pickle file.  These can be read
    back in using only the Python interpreter at a much faster rate
    than we can fork+exec the git config process.
    
    If the corresponding git config file has a newer modification
    timestamp than the pickle file, we delete the pickle file and
    regenerate it.  This ensures that any edits made by the user
    will be taken into account the next time we consult the file.
    
    This reduces the time for a no-op repo sync from 0.847s to 0.269s.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Supporrt mixed case subsection names in Git config files
    
    In the case of:
    
      [url "Foo"]
        insteadOf = Bar
    
    We should return "Bar" for the key "url.Foo.insteadof", but not
    for the key "url.foo.insteadof".  This requires splitting the
    key into its components and only lower casing the section and
    value name, leaving the subsection portion alone.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Only lookup review server '/ssh_info' once per repo process
    
    If the user has multiple projects to upload changes to, and they
    are all going to the same review server, we only need to query the
    '/ssh_info' data once.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Produce a useful error if /ssh_info was HTML and not plain text
    
    If /ssh_info is protected by an HTML based login page, we may get
    back a "200 OK" response from the server with some HTML document
    asking us to authenticate.  This can't be parsed into a host name
    and port number, so we shouldn't even try.
    
    Valid host names and decimal port numbers cannot contain '<', but
    an unexpected HTML login page would.  So we test for '<' to give
    us a fair indicator that the content isn't what we think it is,
    and bail out.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Handle review URLs pointing directly at Gerrit
    
    If a review URL is set to 'http://host/Gerrit' because the user
    thinks that is the correct way to point repo at Gerrit, we should
    be a bit more flexible and fix the URL by dropping the '/Gerrit'
    suffix and replace it with '/ssh_info'.
    
    Likewise, if a review URL points already at '/ssh_info' for a Gerrit
    instance, we should leave it alone.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Support Gerrit2's ssh:// based upload
    
    In Gerrit2 uploads are sent over "git push ssh://...", as this
    is a more efficient transport and is easier to code from external
    scripts and/or direct command line usage by an end-user.
    
    Gerrit1's HTTP POST based format is assumed if the review server
    does not have the /ssh_info URL available on it.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Use remote.*.projectname to indicate the target project for upload
    
    This way "forks" of a project, e.g. the linux kernel, can be setup to
    use different destination projects in the review server by creating
    different remotes in the client side Git repository.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Add 'repo init --mirror' to download a complete forrest
    
    The mirror option downloads a complete forrest (as described by the
    manifest) and creates a replica of the remote repositories rather
    than a client working directory.  This permits other clients to
    sync off the mirror site.
    
    A mirror can be positioned in a "DMZ", where the mirror executes
    "repo sync" to obtain changes from the external upstream and
    clients inside the protected zone operate off the mirror only,
    and therefore do not require direct git:// access to the external
    upstream repositories.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Cache the per-user configuration to avoid duplicate instances
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Initial Contribution
    Update mailmap
    
    Order the entries alphabetically and add a couple more.
    
    Change-Id: I8d98e8a5a1dd6868b566a42428030d2040b8af7a
    Add a .mailmap file
    
    Change-Id: I3c7e68fae0f8c082b2e0fbfc26cfb7dda31f1d34
    gitc: Lower concurrent ls-projects requests
    
    Too many requests at the same time is causing 502 errors.
    
    Change-Id: Ic8fbb2fbb7fb6014733fa5be018d2dc02472f704
    Bail out when manifest is referencing a bad SHA-1 revision.
    
    BUG: Issue 222
    Change-Id: Ie0a64b39922d6fdf1be2989eb514985be8490278
    pylint: Fix unused-{argument,variable} warning
    
    This commit fixes 4 out of the remaining 5 pylint warnings:
    
    $ pylint --rcfile=.pylintrc *.py
    ************* Module gitc_utils
    W:146, 0: TODO(sbasi/jorg): Come up with a solution to remove the sleep below. (fixme)
    W:130, 6: Unused variable 'name' (unused-variable)
    ************* Module main
    W:382,32: Unused argument 'fp' (unused-argument)
    W:382,36: Unused argument 'code' (unused-argument)
    W:382,42: Unused argument 'msg' (unused-argument)
    
    Change-Id: Ie3d77b9a65b7daefaa9aa4b80f4b682c1678fd58
    Signed-off-by: Stefan Beller <sbeller@google.com>
    Fix gitc-init behavior
    
    With gitc-init, a gitc client may be specified using '-c'. If we're
    not currently in that client, we need to change directories so that
    we don't affect the local checkout, and to ensure that repo is
    checked out in the new client.
    
    This also makes '-c' optional if already in a gitc client, to match
    the rest of the init options.
    
    Change-Id: Ib514ad9fd101698060ae89bb035499800897e9bd
    GITC: Always update the gitc manifest from the repo manifest
    
    This way any changes made to the main manifest are reflected in the gitc
    manifest. It's also necessary to use both manifests to sync since the
    information required to update the gitc manifest is actually in the repo
    manifest.
    
    This also fixes a few issues that came up when testing. notdefault
    groups weren't being saved to the gitc manifest in a method that matched
    'sync'. The merge branch wasn't always being set to the correct value
    either.
    
    Change-Id: I435235cb5622a048ffad0059affd32ecf71f1f5b
    Revert "GITC: Always update the gitc manifest from the repo manifest"
    
    This reverts commit 250303b437855c2b50d052a05a08ed517423af8b.
    
    Change-Id: I1fd8af20f802553151aacb953c913f3305ca6057
    GITC: Always update the gitc manifest from the repo manifest
    
    This way any changes made to the main manifest are reflected in the gitc
    manifest. It's also necessary to use both manifests to sync since the
    information required to update the gitc manifest is actually in the repo
    manifest.
    
    This also fixes a few issues that came up when testing. notdefault
    groups weren't being saved to the gitc manifest in a method that matched
    'sync'. The merge branch wasn't always being set to the correct value
    either.
    
    Change-Id: I5dbc850dd73a9fbd10ab2470ae4c40e46ff894de
    GITC: Pull GITC Manifest Dir from the config.
    
    Updates the repo launcher and gitc_utils to pull the manifest
    directory location out of the gitc config file.
    
    Change-Id: Id08381b8a7d61962093d5cddcb3ff6afbb13004b
    GITC: Add repo start support.
    
    Add repo start support for GITC checkouts. If the user is in
    the GITC FS view, they can now run repo start to check out
    the sources and create a new working branch.
    
    When "repo start" is called on a GITC project, the revision
    tag is set to an empty string and saved in a new tag:
    old-revision. This tells the GITC filesystem to display the
    local copy of the sources when being viewed. The local copy
    is created by pulling the project sources and the new branch
    is created based off the original project revision.
    
    Updated main.py to setup each command's gitc_manifest when
    appropriate.
    
    Updated repo sync's logic to sync opened projects and
    updating the GITC manifest file for the rest.
    
    Change-Id: I7e4809d1c4fc43c69b26f2f1bebe45aab0cae628
    gitc_utils: Fix incorrect string format argument
    
    Change-Id: Ibbac6e111833c8f5d93cb6cb4a10f8f2c4fd8e11
    gitc_utils: Remove unused variable
    
    Change-Id: I569819675a99ff6c01fb57b23fed033c39d14d1f
    gitc_utils: Remove unused import; add missing import
    
    shutils is not used. Remove it.
    
    sys is used, but not imported.  Import it.
    
    Change-Id: I4ee582f33bbd451601097ef2f20bee23b54764cd
    GITC: Add repo sync support.
    
    Add repo sync support for GITC checkouts. If the user is in the
    GITC client directory they can still pull the sources as normal
    if they pass in the --force-gitc argument. Otherwise the user
    should call repo sync in the GITC view to update the user's
    remote view. (This works because .repo in the GITC view will
    link to .repo in the client config directory.)
    
    Part of the support for this change is the refactoring of GITC
    related code into gitc_utils.py.
    
    Change-Id: I2636aaa50b450b6f091309db8dd0e8f4dbdad579
    Set correct name in PyDev and Eclipse project config
    
    The name of the project is shown as "repo" in the project list in
    the Eclipse workspace.
    
    This change renames it to "git-repo" to match the name of the git
    repository.
    
    The existing project in Eclipse must be removed (it is not necessary
    to delete project contents on disk) and re-imported for the change to
    take effect.
    
    Change-Id: I2ac022d22f46e5361dfe49c0dbcad482aaefe628
    Add PyDev project files to repo
    Don't allow git fetch to start ControlMaster
    
    To avoid connectivity problems, we don't want the ssh process
    that is started by git fetch to become a ControlMaster for the
    overall sync task.  If it did, we would lose connectivity when
    git fetch was finished with the current project, causing later
    projects to not fetch efficiently.
    
    Change-Id: I8d0dcf9b361276ff8c8b5a6324cbd4a501e9c4dd
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Automatically use SSH control master support during sync
    
    By creating a background ssh "control master" process which lives
    for the duration of our sync cycle we can easily cut the time for
    a no-op sync of 132 projects from 60s to 18s.
    
    Bug: REPO-11
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Set correct name in PyDev and Eclipse project config
    
    The name of the project is shown as "repo" in the project list in
    the Eclipse workspace.
    
    This change renames it to "git-repo" to match the name of the git
    repository.
    
    The existing project in Eclipse must be removed (it is not necessary
    to delete project contents on disk) and re-imported for the change to
    take effect.
    
    Change-Id: I2ac022d22f46e5361dfe49c0dbcad482aaefe628
    Change PyDev project version to "python 2.6"
    
    Repo is dropping support for Python <2.5 soon, so this updates the
    PyDev configuration appropriately.
    
    Change-Id: If327951e3a9fd9ff7513b931bfcfe6172dc8e4c5
    Add PyDev project files to repo
    error: fix typos
    
    Change-Id: I09c47024ef54c360ea3c15c5d4f169e13444e412
    More verbose errors for NoManifestExceptions.
    
    The old "manifest required for this command -- please run
    init" is replaced by a more helpful message that lists the
    command repo was trying to execute (with arguments) as well
    as the str() of the NoManifestException. For example:
    
    > error: in `sync`: [Errno 2] No such file or directory:
    >       'path/to/.repo/manifests/.git/HEAD'
    > error: manifest missing or unreadable -- please run init
    
    Other failure points in basic command parsing and dispatch
    are more clearly explained in the same fashion.
    
    Change-Id: I6212e5c648bc5d57e27145d55a5391ca565e4149
    Raise a NoManifestException when the manifest DNE
    
    When a command (eg, `repo forall`) expects the manifest project to
    exist, but there is no manifest, an IOException gets raised.  This
    change defines a new Exception type to be raised in these cases and
    raises it when project.py fails to read the manifest.
    
    Change-Id: Iac576c293a37f7d8f60cd4f6aa95b2c97f9e7957
    More coding style cleanup
    
    Fixing more issues found with pylint.  Some that were supposed to
    have been fixed in the previous sweep (Ie0db839e) but were missed:
    
    C0321: More than one statement on a single line
    W0622: Redefining built-in 'name'
    
    And some more:
    
    W0631: Using possibly undefined loop variable 'name'
    W0223: Method 'name' is abstract in class 'name' but is not overridden
    W0231: __init__ method from base class 'name' is not called
    
    Change-Id: Ie119183708609d6279e973057a385fde864230c3
    Coding style cleanup
    
    Fix the following issues reported by pylint:
    
    C0321: More than one statement on a single line
    W0622: Redefining built-in 'name'
    W0612: Unused variable 'name'
    W0613: Unused argument 'name'
    W0102: Dangerous default value 'value' as argument
    W0105: String statement has no effect
    
    Also fixed a few cases of inconsistent indentation.
    
    Change-Id: Ie0db839e7c57d576cff12d8c055fe87030d00744
    Remove `ImportError` class
    
    The definition of `ImportError` redefines the Python built-in
    class of the same name.
    
    It is not used anywhere, so remove it.
    
    Change-Id: I557ce28c93a3306fff72873dc6f477330fc33128
    Add manifest groups
    
    Allows specifying a list of groups with a -g argument to repo init.
    The groups act on a group= attribute specified on projects in the
    manifest.
    All projects are implicitly labelled with "default" unless they are
    explicitly labelled "-default".
    Prefixing a group with "-" removes matching projects from the list
    of projects to sync.
    If any non-inverted manifest groups are specified, the default label
    is ignored.
    
    Change-Id: I3a0dd7a93a8a1756205de1d03eee8c00906af0e5
    Reviewed-on: https://gerrit-review.googlesource.com/34570
    Reviewed-by: Shawn Pearce <sop@google.com>
    Tested-by: Shawn Pearce <sop@google.com>
    sync: Support downloading bundle to initialize repository
    
    An HTTP (or HTTPS) based remote server may now offer a 'clone.bundle'
    file in each repository's Git directory. Over an http:// or https://
    remote repo will first ask for '$URL/clone.bundle', and if present
    download this to bootstrap the local client, rather than relying
    on the native Git transport to initialize the new repository.
    
    Bundles may be hosted elsewhere. The client automatically follows a
    HTTP 302 redirect to acquire the bundle file. This allows servers
    to direct clients to cached copies residing on content delivery
    networks, where the bundle may be closer to the end-user.
    
    Bundle downloads are resumeable from where they last left off,
    allowing clients to initialize large repositories even when the
    connection gets interrupted.
    
    If a bundle does not exist for a repository (a HTTP 404 response
    code is returned for '$URL/clone.bundle'), the native Git transport
    is used instead. If the client is performing a shallow sync, the
    bundle transport is not used, as there is no way to embed shallow
    data into the bundle.
    
    Change-Id: I05dad17792fd6fd20635a0f71589566e557cc743
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Support repo-level pre-upload hook and prep for future hooks.
    
    All repo-level hooks are expected to live in a single project at the
    top level of that project.  The name of the hooks project is provided
    in the manifest.xml.  The manifest also lists which hooks are enabled
    to make it obvious if a file somehow failed to sync down (or got
    deleted).
    
    Before running any hook, we will prompt the user to make sure that it
    is OK.  A user can deny running the hook, allow once, or allow
    "forever" (until hooks change).  This tries to keep with the git
    spirit of not automatically running anything on the user's computer
    that got synced down.  Note that individual repo commands can add
    always options to avoid these prompts as they see fit (see below for
    the 'upload' options).
    
    When hooks are run, they are loaded into the current interpreter (the
    one running repo) and their main() function is run.  This mechanism is
    used (instead of using subprocess) to make it easier to expand to a
    richer hook interface in the future.  During loading, the
    interpreter's sys.path is updated to contain the directory containing
    the hooks so that hooks can be split into multiple files.
    
    The upload command has two options that control hook behavior:
      - no-verify=False, verify=False (DEFAULT):
        If stdout is a tty, can prompt about running upload hooks if needed.
        If user denies running hooks, the upload is cancelled.  If stdout is
        not a tty and we would need to prompt about upload hooks, upload is
        cancelled.
      - no-verify=False, verify=True:
        Always run upload hooks with no prompt.
      - no-verify=True, verify=False:
        Never run upload hooks, but upload anyway (AKA bypass hooks).
      - no-verify=True, verify=True:
        Invalid
    
    Sample bit of manifest.xml code for enabling hooks (assumes you have a
    project named 'hooks' where hooks are stored):
      <repo-hooks in-project="hooks" enabled-list="pre-upload" />
    
    Sample main() function in pre-upload.py in hooks directory:
      def main(project_list, **kwargs):
        print ('These projects will be uploaded: %s' %
               ', '.join(project_list))
        print ('I am being a good boy and ignoring anything in kwargs\n'
               'that I don\'t understand.')
        print 'I fail 50% of the time.  How flaky.'
        if random.random() <= .5:
          raise Exception('Pre-upload hook failed.  Have a nice day.')
    
    Change-Id: I5cefa2cd5865c72589263cf8e2f152a43c122f70
    Document any crashes from the user's text editor
    
    Rather than failing with no information, display the child exit
    status and the command line we tried to use to edit a text file.
    There may be some useful information to help understand the crash.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Report better errors when a project revision is invalid
    
    If a manifest specifies an invalid revision property, give the
    user a better error message detaling the problem, instead of an
    ugly Python traceback with a strange Git error message.
    
    Bug: REPO-2
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Install a default pre-auto-gc hook in all repositories
    
    This hook is evaluated by `git gc --auto` to determine if it is a
    good idea to execute a GC at this time, or defer it to some later
    date.  When working on a laptop its a good idea to avoid GC if you
    are on battery power as the extra CPU and disk IO would consume a
    decent amount of the charge.
    
    The hook is the standard sample hook from git.git contrib/hooks,
    last modified in git.git by 84ed4c5d117d72f02cc918e413b9861a9d2846d7.
    I added the GPLv2 header to the script to ensure the license notice
    is clear, as it does not match repo's own APLv2 license.
    
    We only update hooks during initial repository creation or on
    a repo sync.  This way we don't incur huge overheads from the
    hook stat operations during "repo status" or even the normal
    "repo sync" cases.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Initial Contribution
    Fix gitc-init behavior
    
    With gitc-init, a gitc client may be specified using '-c'. If we're
    not currently in that client, we need to change directories so that
    we don't affect the local checkout, and to ensure that repo is
    checked out in the new client.
    
    This also makes '-c' optional if already in a gitc client, to match
    the rest of the init options.
    
    Change-Id: Ib514ad9fd101698060ae89bb035499800897e9bd
    Fix inconsistent indentation
    
    The repo coding style is to indent at 2 characters, but there are
    many places where this is not followed.
    
    Enable pylint warning "W0311: Bad indentation" and make sure all
    indentation is at multiples of 2 characters.
    
    Change-Id: I68f0f64470789ce2429ab11104d15d380a63e6a8
    Fix error parsing a non-existant configuration file
    
    If a file (e.g. ~/.gitconfig) does not exist, we get None
    here rather than a string.  NoneType lacks rstrip() so we
    cannot strip it.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    git_config: handle configuration entries with no values
    
    A git-config entry with no value was preventing repo
    from initializing.  This modifies _ReadGit() to handle
    config entries with empty values.
    
    Signed-off-by: David Aguilar <davvid@gmail.com>
    Reported-by: Josh Guilfoyle <jasta00@gmail.com>
    Fix gitc-init behavior
    
    With gitc-init, a gitc client may be specified using '-c'. If we're
    not currently in that client, we need to change directories so that
    we don't affect the local checkout, and to ensure that repo is
    checked out in the new client.
    
    This also makes '-c' optional if already in a gitc client, to match
    the rest of the init options.
    
    Change-Id: Ib514ad9fd101698060ae89bb035499800897e9bd
    git_config: handle configuration entries with no values
    
    A git-config entry with no value was preventing repo
    from initializing.  This modifies _ReadGit() to handle
    config entries with empty values.
    
    Signed-off-by: David Aguilar <davvid@gmail.com>
    Reported-by: Josh Guilfoyle <jasta00@gmail.com>
    manifest-format: fix EMPTY keyword usage
    
    The keyword EMPTY doesn't use parens.
    
    BUG=git-repo:140
    
    Change-Id: I7cd28a09c401520a72e5c244a77d9d70385f1b61
    implement optional 'pushurl' in the manifest file
    
    Allow the 'remote' element in the manifest file to define an optional
    'pushurl' attribute which is passed into the .git/config file.
    
    Change-Id: If342d299d371374aedc4440645798888869c9714
    Signed-off-by: Steve Rae <steve.rae@raedomain.com>
    Improve documentation of manifest server RPC methods
    
    Mention that the RPC endpoints are used when running repo
    sync with the --smart-sync and --smart-tag options
    
    Change-Id: I4b0b82e8b714fe923a5b325a6135f0128bf636ff
    Fix typos for manifest dtd
    
    Change-Id: If53721544eca570e2bcce4598cdc2670a679c681
    docs: add copyfile and linkfile elements description
    
    The "copyfile" element is available since 2009 and
    have been used in every Android manifest; the "linkfile"
    element is available since 2014.
    Now it's a good time to add both to the documentation
    
    Change-Id: Ia987edf5f69a006235fbd3f33b744e9794a6d964
    Signed-off-by: Ruslan Bilovol <ruslan.bilovol@gmail.com>
    Revert "Implementation of manifest defined githooks"
    
    This reverts commit 38e4387f8eb8cffd6359d726c38a7c524fef07e3.
    
    A "repo init" followed by "repo sync" is meant to be as safe as
    "git clone".  In particular it should not run arbitrary code provided
    by the manifest owner.
    
    It would still be nice to have support for manifest-defined git hooks
    --- they'd just need a prompt like the upload RepoHook has.  Hopefully
    a later change can bring them back.
    
    Change-Id: I5ecd90fb5c2ed64f103d856d1ffcba38a47b062d
    Signed-off-by: Jonathan Nieder <jrn@google.com>
    Implementation of manifest defined githooks
    
    When working within a team or corporation it is often
    useful/required to use predefined git templates. This
    change teaches repo to use a per-remote git hook template
    structure.
    
    The implementation is done as a continuation of the
    existing projecthook functionality. The terminology is
    therefore defined as projecthooks.
    
    The downloaded projecthooks are stored in the .repo
    directory as a metaproject separating them from the users
    project forest.
    
    The projecthooks are downloaded and set up when doing a
    repo init and updated for each new repo init.
    
    When downloading a mirror the projecthooks gits are
    not added to the bare forest since the intention is to
    ensure that the latest are used (allows for company policy
    enforcement).
    
    The projecthooks are defined in the manifest file in the
    remote element as a subnode, the name refers to the
    project name on the server referred to in the remote.
    <remote name="myremote ..>
       <projecthook name="myprojecthookgit" revision="myrevision"/>
    </remote>
    
    The hooks found in the projecthook revision supersede
    the stock hooks found in repo. This removes the need for
    updating the projecthook gits for repo stock hook changes.
    
    Change-Id: I6796b7b0342c1f83c35f4b3e46782581b069a561
    Signed-off-by: Patrik Ryd <patrik.ryd@stericsson.com>
    Signed-off-by: Ian Kumlien <ian.kumlien@gmail.com>
    Support specifying non-HEADS refs as upstream
    
    While not typical, some users might have an upstream that isn't in
    the usual refs/heads/* namespace. There's no reason not to use
    those refs as the value for the upstream attribute, so support
    doing so.
    
    Change-Id: I5b119f1135c3268c20e7c4084682e860d3ee1fb1
    Enable transferring of attribute using command 'repo manifest -o -'
    
    'upstream' attribute is now transferred to the new manifest xml
    that is created when using command 'repo manifest -o -'.
    
    Manifest help is updated for the attributes 'sync-c','sync-s' and
    'sync-j'.
    
    Bug: Issue 164
    Change-Id: If63f781e91d25c5b5b5ea0696b0c04337b0a686a
    Add extend-project tag to support adding groups to an existing project
    
    Currently, if a local manifest wants to add groups to an existing
    project, it must use remove-project and then re-add the project with
    the new groups.  This makes the local manifest more fragile, requiring
    updates to the local manifest if the original manifest changes.
    
    Add a new extend-project tag, which supports adding groups to an
    existing project.
    
    Change-Id: Ib4d1352efd722a65dd263d02644b9ea5ab6ed400
    Enable remotes to define their own revision
    
    Some projects use multiple remotes.
    In some cases these remotes have different naming conventions.
    Add an option to define a revision in the remote configuration.
    
    The `project` revision takes precedence over `remote` and `default`.
    The `remote` revision takes precedence over `default`.
    The `default` revision acts as a fall back as it originally did.
    
    Change-Id: I2b376160d45d48b0bab840c02a3eef1a1e32cf6d
    Fix error in xml manifest doc.
    
    The docs on the annotations say that zero or more may exist as a child
    of a project, so that means that a "*" instead of a "?" should be used.
    
    Change-Id: Iff855d003dfb05cd980f285a237332914e1dad70
    Remove trailing whitespace
    
    Change-Id: I56bcb559431277d40070fa33c580c6c3525ff9bc
    Send reviews to a different branch from fetch
    
    This adds the ability to have reviews pushed to a different branch
    from the one on which changes are based. This is useful for "gateway"
    systems without smartsync.
    
    Change-Id: I3a8a0fabcaf6055e62d3fb55f89c944e2f81569f
    Allow mirror to be created in directories specified by 'path' attribute
    
    In some cases, especially when local manifest files exist, users may want
    to force the mirrored repositories to be created in folders according to
    their 'path' attribute in the manifest, rather than according to the name
    of the repositories.
    
    To enable this functionality for specified mirror, add a new attribute
    'force-path' for that project in the manifest, set its value to 'true'.
    
    Change-Id: I61df8c987a23d84309b113e7d886ec90c838a6cc
    Signed-off-by: Scott Fan <fancp2007@gmail.com>
    Allow clone depth to be specified per project
    
    If the clone-depth attribute is set on a project, its value will
    be used to set the depth when fetching the git.  The value, if
    given, must be a positive integer.
    
    The value in the clone-depth attribute overrides any value given to
    repo init via the --depth command line option.
    
    Change-Id: I273015b3724213600b63e40cca4cafaa9f782ddf
    Add missing manifest format documentation
    
    Documentation of the "sync-j", "sync-c", "sync-s" and "upstream"
    attributes is missing/incomplete.  Add it.
    
    Change-Id: I74977f819f603c520ef3818f85c3b51399cd2b94
    Represent git-submodule as nested projects, take 2
    
    (Previous submission of this change broke Android buildbot due to
     incorrect regular expression for parsing git-config output.  During
     investigation, we also found that Android, which pulls Chromium, has a
     workaround for Chromium's submodules; its manifest includes Chromium's
     submodules.  This new change, in addition to fixing the regex, also
     take this type of workarounds into consideration; it adds a new
     attribute that makes repo not fetch submodules unless submodules have a
     project element defined in the manifest, or this attribute is
     overridden by a parent project element or by the default element.)
    
    We need a representation of git-submodule in repo; otherwise repo will
    not sync submodules, and leave workspace in a broken state.  Of course
    this will not be a problem if all projects are owned by the owner of the
    manifest file, who may simply choose not to use git-submodule in all
    projects.  However, this is not possible in practice because manifest
    file owner is unlikely to own all upstream projects.
    
    As git submodules are simply git repositories, it is natural to treat
    them as plain repo projects that live inside a repo project.  That is,
    we could use recursively declared projects to denote the is-submodule
    relation of git repositories.
    
    The behavior of repo remains the same to projects that do not have a
    sub-project within.  As for parent projects, repo fetches them and their
    sub-projects as normal projects, and then checks out subprojects at the
    commit specified in parent's commit object.  The sub-project is fetched
    at a path relative to parent project's working directory; so the path
    specified in manifest file should match that of .gitmodules file.
    
    If a submodule is not registered in repo manifest, repo will derive its
    properties from itself and its parent project, which might not always be
    correct.  In such cases, the subproject is called a derived subproject.
    
    To a user, a sub-project is merely a git-submodule; so all tips of
    working with a git-submodule apply here, too.  For example, you should
    not run `repo sync` in a parent repository if its submodule is dirty.
    
    Change-Id: I4b8344c1b9ccad2f58ad304573133e5d52e1faef
    Minor documentation formatting and grammatical fixes
    
    Change-Id: Iaac6377c787b3bb42242780e9d1116e718e0188d
    Fix documentation reference to local_manifest.xml
    
    Documentation of the remove-project element still refers explicitly
    to local_manifest.xml.
    
    Change it to the more generic "a local manifest".
    
    Change-Id: I6278beab99a582fae26a4e053adc110362c714c2
    Make load order of local manifests deterministic
    
    Local manifest files stored in the local_manifests folder are loaded
    in alphabetical order, so it's easier to know in which order project
    removals/additions/modifications will be applied.
    
    If local_manifests.xml exists, it will be loaded before the files in
    local_manifests.
    
    Change-Id: Ia5c0349608f1823b4662cd6b340b99915bd973d5
    Print deprecation warning when local_manifest.xml is used
    
    The preferred way to specify local manifests is to drop the file(s)
    in the local_manifests folder.  Print a deprecation warning when
    the legacy local_manifest.xml file is used.
    
    Change-Id: Ice85bd06fb612d6fcceeaa0755efd130556c4464
    Add support for multiple local manifests
    
    Add support for multiple local manifests stored in the local_manifests
    folder under the .repo home directory.
    
    Local manifests will be processed in addition to local_manifest.xml.
    
    Change-Id: Ia0569cea7e9ae0fe3208a8ffef5d9679e14db03b
    Revert "Represent git-submodule as nested projects"
    
    This reverts commit 69998b0c6ff724bf620480140ccce648fec7d6a9.
    Broke Android's non-gitmodule use case.
    
    Conflicts:
            project.py
            subcmds/sync.py
    
    Change-Id: I68ceeb63d8ee3b939f85a64736bdc81dfa352aed
    Represent git-submodule as nested projects
    
    We need a representation of git-submodule in repo; otherwise repo will
    not sync submodules, and leave workspace in a broken state.  Of course
    this will not be a problem if all projects are owned by the owner of the
    manifest file, who may simply choose not to use git-submodule in all
    projects.  However, this is not possible in practice because manifest
    file owner is unlikely to own all upstream projects.
    
    As git submodules are simply git repositories, it is natural to treat
    them as plain repo projects that live inside a repo project.  That is,
    we could use recursively declared projects to denote the is-submodule
    relation of git repositories.
    
    The behavior of repo remains the same to projects that do not have a
    sub-project within.  As for parent projects, repo fetches them and their
    sub-projects as normal projects, and then checks out subprojects at the
    commit specified in parent's commit object.  The sub-project is fetched
    at a path relative to parent project's working directory; so the path
    specified in manifest file should match that of .gitmodules file.
    
    If a submodule is not registered in repo manifest, repo will derive its
    properties from itself and its parent project, which might not always be
    correct.  In such cases, the subproject is called a derived subproject.
    
    To a user, a sub-project is merely a git-submodule; so all tips of
    working with a git-submodule apply here, too.  For example, you should
    not run `repo sync` in a parent repository if its submodule is dirty.
    
    Change-Id: I541e9e2ac1a70304272dbe09724572aa1004eb5c
    Allow projects to be specified as notdefault
    
    Instead of every group being in the group "default", every project
    is now in the group "all".   A group that should not be downloaded
    by default may be added to the group "notdefault".
    
    This allows all group names to be positive (instead of removing groups
    directly in the manifest with -default) and offers a clear way of
    selecting every project (--groups all).
    
    Change-Id: I99cd70309adb1f8460db3bbc6eff46bdcd22256f
    manifest-format.txt: Add documentation for GetManifest RPC method
    
    Add documentation of the GetManifest RPC method in the
    manifest-server section.
    
    Change-Id: I5cda5929bc8a0ca9d3f2b9da63216427041d2823
    manifest-format.txt: Fix a couple of minor spelling mistakes
    
    Change-Id: Ic2d266c8cf08827a71846db9d3711feb02885f01
    Add remote alias support in manifest
    
    The `alias` is an optional attribute in element `remote`. It can be
    used to override attibute `name` to be set as the remote name in each
    project's .git/config. Its value can be duplicated while attribute
    `name` has to be unique across the manifest file. This helps each
    project to be able to have same remote name which actually points
    to different remote url.
    
    It eases some automation scripts to be able to checkout/push to same
    remote name but actually different remote url, like:
    
    repo forall -c "git checkout -b work same_remote/work"
    repo forall -c "git push same_remote work:work"
    
    for example:
    The manifest with 'alias' will look like:
    
    <?xml version='1.0' encoding='UTF-8'?>
    <manifest>
      <remote alias="same_alias" fetch="git://git.external1.org/" name="ext1"
          review="http://review.external1.org"/>
      <remote alias="same_alias" fetch="git://git.external2.org/" name="ext2"
          review="http://review.external2.org"/>
      <remote alias="same_alias" fetch="ssh://git.internal.com:29418" name="int"
          review="http://review.internal.com"/>
      <default remote="int" revision="int-branch" sync-j="2"/>
      <project name="path/to/project1" path="project1" remote="ext1"/>
      <project name="path/to/project2" path="project2" remote="ext2"/>
      <project name="path/to/project3" path="project3"/>
      ...
    </manifest>
    
    In each project, use command "git remote -v"
    
    project1:
    same_alias  git://git.external1.org/project1 (fetch)
    same_alias  git://git.external1.org/project1 (push)
    
    project2:
    same_alias  git://git.external2.org/project2 (fetch)
    same_alias  git://git.external2.org/project2 (push)
    
    project3:
    same_alias  ssh://git.internal.com:29418/project3 (fetch)
    same_alias  ssh://git.internal.com:29418/project3 (push)
    
    Change-Id: I2c48263097ff107f0c978f3e83966ae71d06cb90
    Inject the project name into each projects groups.
    
    For CrOS, we have scenarios were people checkout a smaller version
    of our manifest via groups, and enable individual repositories as
    needed for their work.  Previously this was via local_manifest
    manipulation, which breaks via manifest-groups would require a
    remove-project tag.
    
    Via injecting the projects name into the projects groups, this
    allows us to instead manipulate the configured groups allowing
    the user to turn on/off projects as necessary.
    
    Change-Id: I07b7918e16cc9dc28eb47e19a46a04dc4fd0be74
    ManifestXml: add include support
    
    Having the ability to include other manifests is a very practical feature
    to ease the managment of manifest. It allows to divide a manifest into separate
    files, and create different environment depending  on what we want to release
    
    You can have unlimited recursion of include, the manifest configs will simply be concatenated
    as if it was in a single file.
    
    command "repo manifest" will create a single manifest, and not recreate the manifest hierarchy
    
    for example:
    Our developement manifest will look like:
    
    <?xml version='1.0' encoding='UTF-8'?>
    <manifest>
      <default revision="platform/android/main" remote="intel"/>
      <include name="server.xml"/> <!-- The Server configuration -->
      <include name="aosp.xml" />  <!-- All the AOSP projects -->
      <include name="bsp.xml" />   <!-- The BSP projects that we release in source form -->
      <include name="bsp-priv.xml" /> <!-- The source of the BSP projects we release in binary form -->
    </manifest>
    
    Our release manifest will look like:
    
    <?xml version='1.0' encoding='UTF-8'?>
    <manifest>
      <default revision="platform/android/release-ext" remote="intel"/>
      <include name="server.xml"/> <!-- The Server configuration -->
      <include name="aosp.xml" />  <!-- All the AOSP projects -->
      <include name="bsp.xml" />   <!-- The BSP projects that we release in source form -->
      <include name="bsp-ext.xml" /> <!-- The PREBUILT version of the BSP projects we release in binary form -->
    </manifest>
    
    And it is also easy to create and maintain feature branch with a manifest that looks like:
    
    <?xml version='1.0' encoding='UTF-8'?>
    <manifest>
      <default revision="feature_branch_foobar" remote="intel"/>
      <include name="server.xml"/> <!-- The Server configuration -->
      <include name="aosp.xml" />  <!-- All the AOSP projects -->
      <include name="bsp.xml" />   <!-- The BSP projects that we release in source form -->
      <include name="bsp-priv.xml" /> <!-- The source of the BSP projects we release in binary form -->
    </manifest>
    
    Signed-off-by: Brian Harring <brian.harring@intel.com>
    Signed-off-by: Pierre Tardy <pierre.tardy@intel.com>
    Change-Id: I833a30d303039e485888768e6b81561b7665e89d
    Add sync-c option to manifest
    
    There are use-cases when fetching all branch is impractical and
    we really need to fetch only one branch/tag.
    e.g. there is a large project with binaries and every update of a
    binary file is put to a separate branch.
    The whole project history might be too large to allow users fetch it.
    
    Add 'sync-c' option to 'project' and 'default' tags to make it possible
    to configure 'sync-c' behavior at per-project and per-manifest level.
    
    Note that currently there is no possibility to revert boolean flag from
    command line. If 'sync-c' is set in manifest then you cannot make
    full fetch by providing a repo tool argument.
    
    Change-Id: Ie36fe5737304930493740370239403986590f593
    Refine groups functionality
    
    Every project is in group "default".  "-default" does not remove
    it from this project.  All group names specified in the manifest
    are positive names as opposed to a mix of negative and positive.
    
    Specified groups are resolved in order.  If init is supplied with
    --groups="group1,-group2", the following describes the project
    selection when syncing:
    
      * all projects in "group1" will be added, and
      * all projects in "group2" will be removed.
    
    Change-Id: I1df3dcdb64bbd4cd80d675f9b2d3becbf721f661
    Add project annotation handling to repo
    
    Allow the optional addition of "annotation" nodes nested under
    projects.  Each annotation node must have "name" and "value"
    attributes.  These name/value pairs will be exported into the
    environment during any forall command, prefixed with "REPO__"
    
    In addition, an optional "keep" attribute with case insensitive "true"
    or "false" values can be included to determine whether the annotation
    will be exported with 'repo manifest'
    
    Change-Id: Icd7540afaae02c958f769ce3d25661aa721a9de8
    Signed-off-by: James W. Mills <jameswmills@gmail.com>
    Add manifest groups
    
    Allows specifying a list of groups with a -g argument to repo init.
    The groups act on a group= attribute specified on projects in the
    manifest.
    All projects are implicitly labelled with "default" unless they are
    explicitly labelled "-default".
    Prefixing a group with "-" removes matching projects from the list
    of projects to sync.
    If any non-inverted manifest groups are specified, the default label
    is ignored.
    
    Change-Id: I3a0dd7a93a8a1756205de1d03eee8c00906af0e5
    Reviewed-on: https://gerrit-review.googlesource.com/34570
    Reviewed-by: Shawn Pearce <sop@google.com>
    Tested-by: Shawn Pearce <sop@google.com>
    sync: Allow -j to have a default in manifest
    
    This permits manifest authors to suggest a number of parallel
    fetch operations against a remote server. For example, Gerrit
    Code Review servers support queuing of requests and processes
    them in first-in, first-out order. Running concurrent fetches
    can utilize multiple CPUs on the Gerrit server, but will also
    decrease overall operation latency by having the request put
    into the queue ready to execute as soon as a CPU is free.
    
    Change-Id: I3d3904acb6f63516bae4b071c510ad57a2afab18
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Support repo-level pre-upload hook and prep for future hooks.
    
    All repo-level hooks are expected to live in a single project at the
    top level of that project.  The name of the hooks project is provided
    in the manifest.xml.  The manifest also lists which hooks are enabled
    to make it obvious if a file somehow failed to sync down (or got
    deleted).
    
    Before running any hook, we will prompt the user to make sure that it
    is OK.  A user can deny running the hook, allow once, or allow
    "forever" (until hooks change).  This tries to keep with the git
    spirit of not automatically running anything on the user's computer
    that got synced down.  Note that individual repo commands can add
    always options to avoid these prompts as they see fit (see below for
    the 'upload' options).
    
    When hooks are run, they are loaded into the current interpreter (the
    one running repo) and their main() function is run.  This mechanism is
    used (instead of using subprocess) to make it easier to expand to a
    richer hook interface in the future.  During loading, the
    interpreter's sys.path is updated to contain the directory containing
    the hooks so that hooks can be split into multiple files.
    
    The upload command has two options that control hook behavior:
      - no-verify=False, verify=False (DEFAULT):
        If stdout is a tty, can prompt about running upload hooks if needed.
        If user denies running hooks, the upload is cancelled.  If stdout is
        not a tty and we would need to prompt about upload hooks, upload is
        cancelled.
      - no-verify=False, verify=True:
        Always run upload hooks with no prompt.
      - no-verify=True, verify=False:
        Never run upload hooks, but upload anyway (AKA bypass hooks).
      - no-verify=True, verify=True:
        Invalid
    
    Sample bit of manifest.xml code for enabling hooks (assumes you have a
    project named 'hooks' where hooks are stored):
      <repo-hooks in-project="hooks" enabled-list="pre-upload" />
    
    Sample main() function in pre-upload.py in hooks directory:
      def main(project_list, **kwargs):
        print ('These projects will be uploaded: %s' %
               ', '.join(project_list))
        print ('I am being a good boy and ignoring anything in kwargs\n'
               'that I don\'t understand.')
        print 'I fail 50% of the time.  How flaky.'
        if random.random() <= .5:
          raise Exception('Pre-upload hook failed.  Have a nice day.')
    
    Change-Id: I5cefa2cd5865c72589263cf8e2f152a43c122f70
    Added feature to print a <notice> from manifest at the end of a sync.
    
    This feature is used to convey information on a when a branch has
    ceased development or if it is an experimental branch with a few
    gotchas, etc.
    
    You add it to your manifest XML by doing something like this:
    <manifest>
      <notice>
        NOTE TO DEVELOPERS:
          If you checkin code, you have to pinky-swear that it contains no bugs.
          Anyone who breaks their promise will have tomatoes thrown at them in the
          team meeting.  Be sure to bring an extra set of clothes.
      </notice>
    
      <remote ... />
      ...
    </manifest>
    
    Carriage returns and indentation are relevant for the text in this tag.
    
    This feature was requested by Anush Elangovan on the ChromiumOS team.
    Add a 'smart sync' option to repo sync
    
    This option allows the user to specify a manifest server to use when
    syncing. This manifest server will provide a manifest pegging each
    project to a known green build. This allows developers to work on a
    known good tree that is known to build and pass tests, preventing
    failed builds to hamper productivity.
    
    The manifest used is not "sticky" so as to allow subsequent
    'repo sync' calls to sync to the tip of the tree.
    
    Change-Id: Id0a24ece20f5a88034ad364b416a1dd2e394226d
    manifest: Only display XML help on XML manifest
    
    Some of the help text is only related to the XML formatted manifest,
    so only display that text if that is the current format.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Remove support for the extra <remote> definitions in manifests
    
    These aren't that widely used, and actually make it difficult for
    users to fully mirror a forest of repositories, and then permit
    someone else to clone off that forest, rather then the original
    upstream servers.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Correct note about local_manifest.xml capabilities
    
    With the <remove-project> element we can remove projects, and
    fully replace them with a different definition.  So this note
    is out of date.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Add a 'repo manifest' command whose help is the manifest file format
    
    This should make it easier for users to discover the file format
    on their own, and read about it.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Support <remove-project name="X"> in manifest to remove/replace X
    
    The manifest files now permit removing a project so the user can
    either keep it out of their client, or replace it with a different
    project using an entirely different configuration.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Add <add-remote to-project="..."> to inject additional remotes
    
    This way users can add forks they know about to an existing project
    that was already declared in the primary manifest.  This is mostly
    useful with the Linux kernel project, where multiple forks is quite
    common for the main upstream tree (e.g. Linus' tree), a platform
    architecture tree (e.g. ARM) and a device specific tree (e.g. the
    msm7k tree used by Android).
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Add <remote project-name="..."> attribute within projects
    
    By setting a project-name on a remote nested within a project forks
    of a project like the Linux kernel can be easily handled by fetching
    all relevant forks into the same client side project under different
    remote names.  Developers can create branches off different remotes
    using `git checkout --track -b $myname $remote/$branch` and later
    `repo upload` automatically redirects to the proper fork project
    in the code review server.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Add some short documentation about the local manifest
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Add a basic outline of the repo manifest file format
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Update commit-msg hook to version from Gerrit 2.12.1
    
    Change-Id: I31b74aba998f8e83f370a759218777f2557a8872
    Update the commit-msg hook to the version from Gerrit 2.8.2
    
    Change-Id: Id911bc6841f488a42d08580de800c3afafa2937e
    Update the commit-msg hook to the version from Gerrit 2.6
    
    Change-Id: Iaf21ba8d2ceea58973dbc56f0b4ece54500cd997
    Update the commit-msg hook to the version from Gerrit 2.5.2
    
    Change-Id: I00760fe55a0e1b61375a378c05f263e7bc857ca0
    Update commit-msg hook to version from Gerrit v2.5-rc0
    
    Change-Id: I0d11ac0c24cd53386e996b7dd9bd37c89c789f60
    Automatically install Gerrit Code Review's commit-msg hook
    
    Most users of repo are also using Gerrit Code Review, and will want
    the commit-msg hook to be automatically installed into their local
    projects so that Change-Ids are assigned when commits are created,
    not when they are first uploaded.
    
    (cherry picked from commit a949fa5d202f0a1f812d7630f3e5bf0f02ca4e98
     but squashed with latest hook script from version 2.1.2)
    
    Change-Id: Ie68b2d60ac85d8c2285d2e1e6a4536eb76695547
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    commit-msg: Don't create message with only Change-Id
    
    If a user aborts a commit, the commit-msg hook is still called,
    but with an empty file.  We need to leave the empty file alone.
    
    Change-Id: I13766135dac267823cb08ab76f67d2000ba2d1ce
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    commit-msg: Update the commit message hook
    
    This version fixes a bug where Change-Id lines become the subject
    line, if the subject used a pattern like the subject of this
    message does.
    
    Change-Id: I7f7e0363091d03eb05dead2992fc19763214de65
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Automatically install Gerrit Code Review's commit-msg hook
    
    Most users of repo are also using Gerrit Code Review, and will want
    the commit-msg hook to be automatically installed into their local
    projects so that Change-Ids are assigned when commits are created,
    not when they are first uploaded.
    
    Change-Id: Ide42e93b068832f099d68a79c2863d22145d05ad
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    hooks/pre-auto-gc: fix AC detection on OSX Maverick
    
    The output of pmset has been changed to "Now drawing from 'AC Power'"
    
    Change-Id: Id425d3bcd6a28656736a6d2c3096623a3ec053cc
    hooks/pre-auto-gc: look in sysfs to see if a battery is known.
    
    Barring any kernel bugs, if this directory exists and there is
    a symlink in there (which will point to the battery object),
    that means there is a battery known to the kernel.
    
    No symlink should mean no battery as far as the kernel is concerned.
    
    Change-Id: Ib12819a5bbb816f0ae5ca080e5812a2db08441e9
    Install a default pre-auto-gc hook in all repositories
    
    This hook is evaluated by `git gc --auto` to determine if it is a
    good idea to execute a GC at this time, or defer it to some later
    date.  When working on a laptop its a good idea to avoid GC if you
    are on battery power as the extra CPU and disk IO would consume a
    decent amount of the charge.
    
    The hook is the standard sample hook from git.git contrib/hooks,
    last modified in git.git by 84ed4c5d117d72f02cc918e413b9861a9d2846d7.
    I added the GPLv2 header to the script to ensure the license notice
    is clear, as it does not match repo's own APLv2 license.
    
    We only update hooks during initial repository creation or on
    a repo sync.  This way we don't incur huge overheads from the
    hook stat operations during "repo status" or even the normal
    "repo sync" cases.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Add GitcClientCommand class for GITC-specific commands
    
    These won't show up as common commands in the help text unless in a GITC
    client, and will refuse to execute.
    
    Change-Id: Iffe82adcc9d6ddde9cb4b204f83ff018042bdab0
    gitc: Improve help visibility
    
    This improves the visiblity of gitc-init if we can get the gitc config,
    and hides it otherwise.
    
    Change-Id: I82830b0b07c311e8c74397ba79eb4c361f8b6fb5
    Some fixes for supporting python3
    
    * Fix imports.
    * Use python3 syntax.
    * Wrap map() calls with list().
    * Use list() only wherever needed.
      (Thanks Conley!)
    * Fix dictionary iteration methods
      (s/iteritems/items/).
    * Make use of sorted() in appropriate places
    * Use iterators directly in the loop.
    * Don't use .keys() wherever it isn't needed.
    * Use sys.maxsize instead of sys.maxint
    
    TODO:
    * Make repo work fully with python3. :)
    
    Some of this was done by the '2to3' tool [1], by
    applying the needed fixes in a way that doesn't
    break compatibility with python2.
    
    Links:
    [1]: http://docs.python.org/2/library/2to3.html
    
    Change-Id: Ibdf3bf9a530d716db905733cb9bfef83a48820f7
    Signed-off-by: Chirayu Desai <cdesai@cyanogenmod.org>
    Fix: Missing spaces in printed messages
    
    Several messages are printed with the `print` method and the message
    is split across two lines, i.e.:
    
     print('This is a message split'
           'across two source code lines')
    
    Which causes the message to be printed as:
    
     This is a message splitacross two source code lines
    
    Add a space at the end of the first line before the line break:
    
     print('This is a message split '
           'across two source code lines'
    
    Also correct a minor spelling mistake.
    
    Change-Id: Ib98d93fcfb98d78f48025fcc428b6661380cff79
    Tidy up code formatting a bit more
    
    Enable the following Pylint warnings:
    
      C0322: Operator not preceded by a space
      C0323: Operator not followed by a space
      C0324: Comma not followed by a space
    
    And make the necessary fixes.
    
    Change-Id: I74d74283ad5138cbaf28d492b18614eb355ff9fe
    Change print statements to work in python3
    
    This is part of a series of changes to introduce Python3 support.
    
    Change-Id: I373be5de7141aa127d7debdbce1df39148dbec32
    Coding style cleanup
    
    Fix the following issues reported by pylint:
    
    C0321: More than one statement on a single line
    W0622: Redefining built-in 'name'
    W0612: Unused variable 'name'
    W0613: Unused argument 'name'
    W0102: Dangerous default value 'value' as argument
    W0105: String statement has no effect
    
    Also fixed a few cases of inconsistent indentation.
    
    Change-Id: Ie0db839e7c57d576cff12d8c055fe87030d00744
    help: Fix help sync
    
    help sync crashed as sync required the manifest to be configured to
    create the option parser, as the default number of jobs is required.
    
    Change-Id: Ie75e8d75ac0e38313e4aab451cbb24430e84def5
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    help: Don't show empty Summary or Description sections
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    (cherry picked from commit 60e679209a5495393ef584efaaad287fc8b77c51)
    help: Don't show empty Summary or Description sections
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Create an abstract Manifest base class
    
    This will help as we add support for another manifest type.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Support a level 2 heading in help description text
    
    The level 2 headings (denoted by ~) indent the heading two spaces,
    but continue to use the bold formatter to offset them from the
    other surrounding text.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Show options help after the summary for a command
    
    It is a bit clearer to read this way.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Add a 'repo manifest' command whose help is the manifest file format
    
    This should make it easier for users to discover the file format
    on their own, and read about it.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Tell users how to see the complete list of commands
    
    Using "repo help --all" may not be obvious.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Don't permit users to run repo status in a mirror client
    
    If a client was created with "repo init --mirror" then there are
    no working directories present, and no files checked out.  Using
    a command like "repo status" in this context makes no sense, and
    actually throws back a Pytyon traceback at the console when the
    underlying commands fail out.
    
    We now tag commands with the MirrorSafeCommand type if they are
    able to be executed within a mirror directory safely.  Using a
    command in a mirror which lacks this base class results in a
    useful error letting you know the command isn't supported.
    
    Bug: REPO-14
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Initial Contribution
    Prevent repo info from crashing when default element doesn't exist.
    
    repo info will crash when using a manifest with no default element despite
    default being an optional element. Output nothing for "Manifest Branch" if no
    default element exists (or if no default revision exists).
    
    Change-Id: I7ebffa2408863837ba980f0ab6e593134400aea9
    Remove unused show_smart option on list and info commands
    
    Change-Id: Idf0e161a0b0cc23a5a3ee44d18cb797162cfdd7b
    Some fixes for supporting python3
    
    * Fix imports.
    * Use python3 syntax.
    * Wrap map() calls with list().
    * Use list() only wherever needed.
      (Thanks Conley!)
    * Fix dictionary iteration methods
      (s/iteritems/items/).
    * Make use of sorted() in appropriate places
    * Use iterators directly in the loop.
    * Don't use .keys() wherever it isn't needed.
    * Use sys.maxsize instead of sys.maxint
    
    TODO:
    * Make repo work fully with python3. :)
    
    Some of this was done by the '2to3' tool [1], by
    applying the needed fixes in a way that doesn't
    break compatibility with python2.
    
    Links:
    [1]: http://docs.python.org/2/library/2to3.html
    
    Change-Id: Ibdf3bf9a530d716db905733cb9bfef83a48820f7
    Signed-off-by: Chirayu Desai <cdesai@cyanogenmod.org>
    Add manifest groups to the output of `info`
    
    List the user's manifest groups when running `repo info`.
    
    These groups are passed to `repo init` using the -g/--groups flag.
    
    Change-Id: Ie8a4ed74a35b8b90df3b1ee198fe725b1cd68ae7
    Fix crash in repo info when `%` is used in commit messages
    
    Fix for issue #131
    http://code.google.com/p/git-repo/issues/detail?id=131
    
    Change-Id: I078533ab5f3a83154c4ad6aa97a5525fc5139d20
    Fix: GitError when using repo info -d
    
    If a workspace is initialised with:
    
     repo init -u git://path/to/manifest -b manifest-branch
    
    and the default.xml specifies the default revision as `other-branch`,
    running `repo info -d` results in a GitError:
    
      fatal: bad revision 'refs/remotes/m/other-branch..'
    
    The repo info command uses the default revision to build the symlink
    to the remote revision which is passed to the `git rev-list` command.
    
    This is incorrect; the manifest's branch name should be used.
    
    Change-Id: Ibae5b91869848276785facfaef433e38d49fd726
    Fix: missing spaces in info command output
    
    Text should be joined with " " rather than "" in the output.
    
    Change-Id: I6c5dddc15743e98c3b43702cb5d3ec32f81c3221
    Add repo info command
    
    The info command will print information regarding the current manifest
    and local git branch. It will also show the difference of commits
    between the local branch and the remote branch.
    
    It also incorporates an overview command into info which shows commits
    over all branches.
    
    Change-Id: Iafedd978f44c84d240c010897eff58bbfbd7de71
    Change print statements to work in python3
    
    This is part of a series of changes to introduce Python3 support.
    
    Change-Id: I373be5de7141aa127d7debdbce1df39148dbec32
    sync: Run `git gc --auto` after fetch
    
    Users may wind up with a lot of loose object content in projects they
    don't frequently make changes in, but that are modified by others.
    
    Since we bypass many git code paths that would have otherwise called
    out to `git gc --auto`, its possible for these projects to have
    their loose object database grow out of control.  To help prevent
    that, we now invoke it ourselves during the network half of sync.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    (cherry picked from commit 1875ddd47c0bf38e5cc52e1e5875caabce2d8742)
    sync: Run `git gc --auto` after fetch
    
    Users may wind up with a lot of loose object content in projects they
    don't frequently make changes in, but that are modified by others.
    
    Since we bypass many git code paths that would have otherwise called
    out to `git gc --auto`, its possible for these projects to have
    their loose object database grow out of control.  To help prevent
    that, we now invoke it ourselves during the network half of sync.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Clarify options that control the repo executable version
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Add 'repo selfupdate' to upgrade only repo
    
    Users may want to upgrade only repo to the latest release, but
    leave their working tree state alone and avoid 'repo sync'.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    sync: Fix semaphore release bug that causes thread 'leaks'
    
    When repo syncs a manifest that utilizes multiple branches
    in the same project, then the sync will use an extra
    thread for each "duplicate".  For example, if
    the manifest includes the project "foo" and "bar"
    twice, then "repo sync -jN" will fetch with N+2 threads.
    
    This is caused by _FetchHelper() releasing the thread semaphore
    object each time it's called, even though _FetchProjectList()
    may call this function multiple times within the scope of a
    single thread.
    
    Fix by moving the thread semaphore release to
    _FetchProjectList(), which is only called once per thread
    instance.
    
    Change-Id: I1da78b145e09524d40457db5ca5c37d315432bd8
    Support broken symlinks when cleaning obsolete paths
    
    When there's a symlink to a directory, os.walk still lists the symlink
    in dirs, even if it isn't configured to follow symlinks. This will fail
    the listdirs check if the symlink is broken (either before or during the
    cleanup). So instead, check for directory symlinks and remove them using
    os.remove.
    
    Bug: Issue 231
    Change-Id: I0ec45a26be566613a4a39bf694a3d9c6328481c2
    On project cleanup, don't remove nested projects
    
    When there are nested projects in a manifest, like on AOSP right now:
    
    <project path="build" name="platform/build" />
    <project path="build/blueprint" name="platform/build/blueprint" />
    <project path="build/kati" name="platform/build/kati" />
    <project path="build/soong" name="platform/build/soong" />
    
    And the top "build" project is removed (or renamed to remove the
    nesting), repo just wipes away everything under build/ and re-creates
    the projects that are still there. But it only checks to see if the
    build/ project is dirty, so if there are dirty files in a nested
    project, they'll just be blown away, and a fresh worktree checked out.
    
    Instead, behave similarly to how `git clean -dxf` behaves and preserve
    any subdirectories that have git repositories in them. This isn't as
    strict as git -- it does not check to see if the '.git' entry is a
    readable gitdir, just whether an entry named '.git' exists.
    
    If it encounters any errors removing files, we'll print them all out to
    stderr and tell the user that we were unable to clean up the obsolete
    project, that they should clean it up manually, then sync again.
    
    Change-Id: I2f6a7dd205a8e0b7590ca5369e9b0ba21d5a6f77
    When syncing a project with a shared object store, disable automatic pruning.
    
    The shared object stores confuse git and make it throw away objects which are
    still in use. We'll avoid that problem by disabling automatic pruning on those
    projects, but there's nothing preventing a user from changing the config back
    or pruning a repository manually.
    
    BUG=chromium:375945
    TEST=Ran repo sync on fresh ChromeOS checkout, starting with a branch of repo
    with this change. Verified that the kernel projects and no others were
    identified as having shared object stores, and that repo successfully disabled
    automatic pruning in their configs. Re-enabled pruning and ran repo sync just
    on one of the kernel directories. Verified that pruning was re-disabled as a
    result.
    
    Change-Id: I728ed5b06f0087aeb5a23ba8f5410a7cd10af5b0
    sync: Update help text for --smart-sync to be more specific
    
    The --smart-sync option should return the manifest for *the latest*
    known good build.
    
    Change-Id: I2f3216b5b9e1af2ea5f9c3bf1c025813a3b77581
    Sync: Fix error exit code when both -n and -f are used
    
    When repo sync is used with -f (--force-error) and a project fails to
    sync, the sync will continue but then exit with an error status.
    
    However if -n (--network-only) is also used, the exit code is 0, even
    when a project failed.
    
    Modify the logic to make sure the sync exits with the correct status.
    
    Bug: Issue 214
    Change-Id: I0b5d97a34642c5aa3743750ef14a42c9d5743c1d
    Sync: Add option to prune refs during sync
    
    By passing --prune to the sync command, the --prune option is
    given to the `git fetch`, causing refs that no longer exist on
    the remote to be removed.
    
    Change-Id: I3cedacce14276d96ac2d5aabf2d07fd05e92bc02
    Sync: Add HTTP Cookie File header on temporary cookie file
    
    The .gitcookies file generated by googlesource.com does not have
    the header:
    
     # (Netscape) HTTP Cookie File
    
    which causes python's MozillaCookieJar.load to fail with the
    error:
    
     "does not look like a Netscape format cookies file"
    
    Prepend the expected header onto the generated cookie file.
    
    We don't bother to check if the header already exists on the
    file; repeating it does not cause any problem.
    
    Bug: Issue 207
    Change-Id: I7d39720a1d36a6aae00f70691156514ebc04e579
    Sync: Don't fail when git cookies can't be loaded
    
    If the git cookies file fails to load, use a default
    cookie jar instead.
    
    Bug: Issue 207
    Change-Id: I7cb326c204f2784ab4dbd13801b3186667af5b78
    GITC: Always update the gitc manifest from the repo manifest
    
    This way any changes made to the main manifest are reflected in the gitc
    manifest. It's also necessary to use both manifests to sync since the
    information required to update the gitc manifest is actually in the repo
    manifest.
    
    This also fixes a few issues that came up when testing. notdefault
    groups weren't being saved to the gitc manifest in a method that matched
    'sync'. The merge branch wasn't always being set to the correct value
    either.
    
    Change-Id: I435235cb5622a048ffad0059affd32ecf71f1f5b
    Revert "GITC: Always update the gitc manifest from the repo manifest"
    
    This reverts commit 250303b437855c2b50d052a05a08ed517423af8b.
    
    Change-Id: I1fd8af20f802553151aacb953c913f3305ca6057
    GITC: Always update the gitc manifest from the repo manifest
    
    This way any changes made to the main manifest are reflected in the gitc
    manifest. It's also necessary to use both manifests to sync since the
    information required to update the gitc manifest is actually in the repo
    manifest.
    
    This also fixes a few issues that came up when testing. notdefault
    groups weren't being saved to the gitc manifest in a method that matched
    'sync'. The merge branch wasn't always being set to the correct value
    either.
    
    Change-Id: I5dbc850dd73a9fbd10ab2470ae4c40e46ff894de
    GITC: Fix repo sync.
    
    Fixing http://b/23785024 by calling os.getcwd() because variable
    cwd no longer exists.
    
    Change-Id: I21ff7d059e072f9f60726db76b67587a92c878ad
    GITC: Pull GITC Manifest Dir from the config.
    
    Updates the repo launcher and gitc_utils to pull the manifest
    directory location out of the gitc config file.
    
    Change-Id: Id08381b8a7d61962093d5cddcb3ff6afbb13004b
    GITC: Add repo start support.
    
    Add repo start support for GITC checkouts. If the user is in
    the GITC FS view, they can now run repo start to check out
    the sources and create a new working branch.
    
    When "repo start" is called on a GITC project, the revision
    tag is set to an empty string and saved in a new tag:
    old-revision. This tells the GITC filesystem to display the
    local copy of the sources when being viewed. The local copy
    is created by pulling the project sources and the new branch
    is created based off the original project revision.
    
    Updated main.py to setup each command's gitc_manifest when
    appropriate.
    
    Updated repo sync's logic to sync opened projects and
    updating the GITC manifest file for the rest.
    
    Change-Id: I7e4809d1c4fc43c69b26f2f1bebe45aab0cae628
    Smartsync: Don't fail if there isn't a cookiefile
    
    Change-Id: I434a259f43ca9808e88051ac8ba865c519a24702
    Sync: Refactor netrc parsing
    
    Don't emit a message when the netrc file doesn't exist or couldn't
    be opened.
    
    Instead of trying to unpack the result of info.authenticators() and
    catching the resulting TypeError when it's None, first store it to
    a local and only unpack it if it has a value.
    
    Also remove an unused import.
    
    Change-Id: I5c404d91e48c261c1ab850c3e5f040c4f4c235cb
    Support smart-sync through persistent-http[s]
    
    Use the same cookies and proxy that git traffic goes through for
    persistent-http[s] to support authentication for smart-sync.
    
    Change-Id: I20f4a281c259053a5a4fdbc48b1bca48e781c692
    GITC: Add repo sync support.
    
    Add repo sync support for GITC checkouts. If the user is in the
    GITC client directory they can still pull the sources as normal
    if they pass in the --force-gitc argument. Otherwise the user
    should call repo sync in the GITC view to update the user's
    remote view. (This works because .repo in the GITC view will
    link to .repo in the client config directory.)
    
    Part of the support for this change is the refactoring of GITC
    related code into gitc_utils.py.
    
    Change-Id: I2636aaa50b450b6f091309db8dd0e8f4dbdad579
    Emit project info in case of sync exception.
    
    Previously repo would only print the failing project path if
    Sync_NetworkHalf returned false/empty, but if it threw an
    exception the print() was never called.
    
    Change-Id: I58c41de43930df5e34b21561c205e062a72e290f
    Add option to correct gitdir when syncing
    
    In some cases, a user may wish to continue with a sync even though
    it would require overwriting an existing git directory. This behavior
    is not safe as a default because it could result in the loss of some
    user data, but as an optional flag it allows the user more flexibility.
    
    To support this, add a --force-sync flag to the sync command that will
    attempt to overwrite the existing git dir if it is specified and the
    existing git dir points to the wrong obj dir.
    
    Change-Id: Ieddda8ad54e264a1eb4a9d54881dd6ebc8a03833
    sync: Remove smart sync override manifest when not in smart sync mode
    
    When syncing with the -s or -t option, a smart_sync_override.xml file
    is created. This file is left in the file system when syncing again
    without the -s or -t option.
    
    Remove the smart sync override manifest, if it exists, when not using
    the -s or -t option.
    
    Change-Id: I697a0f6405205ba5f84a4d470becf7cd23c07b4b
    sync: Improve error message when writing smart sync manifest fails
    
    The error message only states that writing the manifest failed.
    
    Include the exception message, so it's easier to track down the reason
    that the write failed.
    
    Change-Id: I06e942c48a19521ba45292199519dd0a8bdb1de7
    Add option on sync to avoid fetching from remotes for existing sha1
    
    In 2fb6466f795eb30c1dfa598501f5b5d2981e6a5f an optimisation was
    added to avoid fetching from remotes if the project is fixed to
    a revision and the revision is already available locally.
    
    This causes problems for users who expect all objects to be
    fetched by default.
    
    Change the logic so that the optimized behaviour is only enabled if
    an option is explicitly given to repo sync.
    
    Change-Id: I3b2794ddd8e0071b1787e166463cd8347ca9e24f
    Add missing documentation of --current-branch option on sync command
    
    Change-Id: I72d6e3d51241148c1df97bbad26338debb1fcb4e
    Allow selection of a target when using smart sync.
    
    Change-Id: I02a24471b9b62dbba3773f22a289825bc566acd9
    Use JSON instead of pickle
    
    Use JSON as it is shown to be much faster than pickle.
    Also clean up the loading and saving functions.
    
    Change-Id: I45b3dee7b4d59a1c0e0d38d4a83b543ac5839390
    Clean up duplicate logic in subcmds/sync.py.
    
    The fetch logic is now shared between the jobs == 1 and
    jobs > 1 cases. This refactoring also fixes a bug where
    opts.force_broken was not honored when jobs > 1.
    
    Change-Id: Ic886f3c3c00f3d8fc73a65366328fed3c44dc3be
    Add wrapper module
    
    This takes the wrapper importing code from main.py and moves it into
    its own module so that other modules may import it without causing
    circular imports with main.py.
    
    Change-Id: I9402950573933ed6f14ce0bfb600f74f32727705
    Properly iterate through values
    
    the value of Manifest.projects has changed from being the dictionary
    to the values of the dictionary.  Here we handle this change
    correctly on a PostRepoUpgrade.
    
    From a `git diff v1.12.7 -- manifest_xml.py`:
    +  @property
       def projects(self):
         self._Load()
    -    return self._projects
    +    return self._paths.values()
    
    self._paths does contain the projects according to this line of
    manifest_xml.py:
    484      self._paths[project.relpath] = project
    
    Change-Id: I141f8d5468ee10dfb08f99ba434004a307fed810
    Add --archive option to init to sync using git archive
    
    This significantly reduces sync time and used brandwidth as only
    a tar of each project's revision is checked out, but git is not
    accessible from projects anymore.
    
    This is relevant when git is not needed in projects but sync
    speed/brandwidth may be important like on CI servers when building
    several versions from scratch regularly for example.
    
    Archive is not supported over http/https.
    
    Change-Id: I48c3c7de2cd5a1faec33e295fcdafbc7807d0e4d
    Signed-off-by: Julien Campergue <julien.campergue@parrot.com>
    Fix some python3 encoding issues
    
    * Add .decode('utf-8') where needed
    * Add 'b' to `open` where needed, and remove where unnecessary
    
    Change-Id: I0f03ecf9ed1a78e3b2f15f9469deb9aaab698657
    repo: Support multiple branches for the same project.
    
    It is often useful to be able to include the same project more than
    once, but with different branches and placed in different paths in the
    workspace. Add this feature.
    
    This CL adds the concept of an object directory. The object directory
    stores objects that can be shared amongst several working trees. For
    newly synced repositories, we set up the git repo now to share its
    objects with an object repo.
    
    Each worktree for a given repo shares objects, but has an independent
    set of references and branches. This ensures that repo only has to
    update the objects once; however the references for each worktree are
    updated separately. Storing the references separately is needed to
    ensure that commits to a branch on one worktree will not change the
    HEAD commits of the others.
    
    One nice side effect of sharing objects between different worktrees is
    that you can easily cherry-pick changes between the two worktrees
    without needing to fetch them.
    
    Bug: Issue 141
    Change-Id: I5e2f4e1a7abb56f9d3f310fa6fd0c17019330ecd
    Sync: Improved error message when manifest server RPC call fails
    
    When the RPC call fails, the error message returned by the server
    is printed, but it is not obvious that this is caused by RPC call
    failure.
    
    Prefix the error message with a descriptive message that explains
    what went wrong.
    
    Change-Id: I4b77af22aacc2e9843c4df9d06bf54e41d9692ff
    Sync: Print name of manifest server used for smart sync/smart tag
    
    When syncing using smart sync or smart tag mode, print the url of
    the manifest server that is being used.
    
    This is useful in organisations that have multiple manifest servers
    used in different manifest branches.
    
    Change-Id: Ib5bc2de5af6f4a942d0ef735c65cbc0721059a61
    sync: assign manifest_name earlier
    
    * manifest_name was never set if opt.smart_sync or opt.smart_tag is used.
    * Set it earlier, so that the code handles it correctly when it is None.
    * An UnboundLocalError is raised if running `repo sync` without any options:
      local variable 'manifest_name' referenced before assignment
    * This fixes the above regression caused by commit
      53a6c5d93a8ba708208826dab64c55fe97f06d0b
    
    Change-Id: I57086670f3589beea8461ce0344f6ec47ab85b7b
    Fix urllib.parse (urlparse) handling
    
    Revert "Fix "'module' object is not callable" error", and fix it properly.
    
    * The urlparse module is renamed to urllib.parse in Python 3.
    * This commit fixes the code to use "urllib.parse.urlparse"
      instead of creating a new module urlib and setting
      urlib.parse to urlparse.urlparse.
    * Fixes an AttributeError:
      'function' object has no attribute 'uses_relative'
    
    This reverts commit cd51f17c643370e6199216462c1be36f04d57291.
    
    Change-Id: I48490b20ecd19cf5a6edd835506ea5a467d556ac
    Fix "'module' object is not callable" error
    
    In a couple of files the urlparse method was not being set up
    correctly for python < 3 and this resulted in an error being
    thrown when trying to call it.
    
    Change-Id: I4d2040ac77101e4e228ee225862f365ae3d96cec
    Degrade: Fix smart sync/smart tag
    
    This was broken in b2bd91c, which updated the manifest after it had
    been overridden, which made it fall back to the original file (and
    not the one from the manifest server).
    
    This builds on 0766900 and overrides the manifest by the one
    downloaded from the manifest server completely.
    
    Change-Id: Ic3972390a68919b614616631d99c9e7a63c0e0db
    Move Python version checking to a separate module
    
    Add a new module with methods for checking the Python version.
    
    Instead of handling Python3 imports with try...except blocks, first
    check the python version and then import the relevant modules.  This
    makes the code a bit cleaner and will result in less diff when/if we
    remove support for Python < 3 later.
    
    Use the same mechanism to handle `input` vs. `raw_input` and add
    suppression of pylint warnings caused by redefinition of the built-in
    method `input`.
    
    Change-Id: Ia403e525b88d77640a741ac50382146e7d635924
    Also-by: Chirayu Desai <cdesai@cyanogenmod.org>
    Signed-off-by: Chirayu Desai <cdesai@cyanogenmod.org>
    Some fixes for supporting python3
    
    * Fix imports.
    * Use python3 syntax.
    * Wrap map() calls with list().
    * Use list() only wherever needed.
      (Thanks Conley!)
    * Fix dictionary iteration methods
      (s/iteritems/items/).
    * Make use of sorted() in appropriate places
    * Use iterators directly in the loop.
    * Don't use .keys() wherever it isn't needed.
    * Use sys.maxsize instead of sys.maxint
    
    TODO:
    * Make repo work fully with python3. :)
    
    Some of this was done by the '2to3' tool [1], by
    applying the needed fixes in a way that doesn't
    break compatibility with python2.
    
    Links:
    [1]: http://docs.python.org/2/library/2to3.html
    
    Change-Id: Ibdf3bf9a530d716db905733cb9bfef83a48820f7
    Signed-off-by: Chirayu Desai <cdesai@cyanogenmod.org>
    sync: be more verbose
    
    * Print project name if the "quiet" option is not used.
    
    Change-Id: I99863bb50f66e4dcbaf2d170bdd05971f2a4e19a
    Signed-off-by: Chirayu Desai <cdesai@cyanogenmod.org>
    Reload the correct manifest during sync.
    
    Fix for issue #134
    https://code.google.com/p/git-repo/issues/detail?id=134
    
    Change-Id: I94c2dea5dd63917e3f9c90cbd628921d7d61b12a
    Fix: Missing spaces in printed messages
    
    Several messages are printed with the `print` method and the message
    is split across two lines, i.e.:
    
     print('This is a message split'
           'across two source code lines')
    
    Which causes the message to be printed as:
    
     This is a message splitacross two source code lines
    
    Add a space at the end of the first line before the line break:
    
     print('This is a message split '
           'across two source code lines'
    
    Also correct a minor spelling mistake.
    
    Change-Id: Ib98d93fcfb98d78f48025fcc428b6661380cff79
    Add --no-tags option to prevent fetching of tags
    
    Add an option to pass `--no-tags' to `git fetch'.
    
    Change-Id: I4158cc369773e08e55a167091c38ca304a197587
    Signed-off-by: Mitchel Humpherys <mitchelh@codeaurora.org>
    Allow sync to run even when the manifest is broken.
    
    If the current manifest is broken then "repo sync" fails because it
    can't retrieve the default value for --jobs. Use 1 in this case, in
    order that you can "repo sync" to get a fixed manifest (assuming someone
    fixed it upstream).
    
    Change-Id: I4262abb59311f1e851ca2a663438a7e9f796b9f6
    Represent git-submodule as nested projects, take 2
    
    (Previous submission of this change broke Android buildbot due to
     incorrect regular expression for parsing git-config output.  During
     investigation, we also found that Android, which pulls Chromium, has a
     workaround for Chromium's submodules; its manifest includes Chromium's
     submodules.  This new change, in addition to fixing the regex, also
     take this type of workarounds into consideration; it adds a new
     attribute that makes repo not fetch submodules unless submodules have a
     project element defined in the manifest, or this attribute is
     overridden by a parent project element or by the default element.)
    
    We need a representation of git-submodule in repo; otherwise repo will
    not sync submodules, and leave workspace in a broken state.  Of course
    this will not be a problem if all projects are owned by the owner of the
    manifest file, who may simply choose not to use git-submodule in all
    projects.  However, this is not possible in practice because manifest
    file owner is unlikely to own all upstream projects.
    
    As git submodules are simply git repositories, it is natural to treat
    them as plain repo projects that live inside a repo project.  That is,
    we could use recursively declared projects to denote the is-submodule
    relation of git repositories.
    
    The behavior of repo remains the same to projects that do not have a
    sub-project within.  As for parent projects, repo fetches them and their
    sub-projects as normal projects, and then checks out subprojects at the
    commit specified in parent's commit object.  The sub-project is fetched
    at a path relative to parent project's working directory; so the path
    specified in manifest file should match that of .gitmodules file.
    
    If a submodule is not registered in repo manifest, repo will derive its
    properties from itself and its parent project, which might not always be
    correct.  In such cases, the subproject is called a derived subproject.
    
    To a user, a sub-project is merely a git-submodule; so all tips of
    working with a git-submodule apply here, too.  For example, you should
    not run `repo sync` in a parent repository if its submodule is dirty.
    
    Change-Id: I4b8344c1b9ccad2f58ad304573133e5d52e1faef
    Tidy up code formatting a bit more
    
    Enable the following Pylint warnings:
    
      C0322: Operator not preceded by a space
      C0323: Operator not followed by a space
      C0324: Comma not followed by a space
    
    And make the necessary fixes.
    
    Change-Id: I74d74283ad5138cbaf28d492b18614eb355ff9fe
    Fix inconsistent indentation
    
    The repo coding style is to indent at 2 characters, but there are
    many places where this is not followed.
    
    Enable pylint warning "W0311: Bad indentation" and make sure all
    indentation is at multiples of 2 characters.
    
    Change-Id: I68f0f64470789ce2429ab11104d15d380a63e6a8
    Change print statements to work in python3
    
    This is part of a series of changes to introduce Python3 support.
    
    Change-Id: I373be5de7141aa127d7debdbce1df39148dbec32
    Always show --manifest-server-* options
    
    The --manifest-server-* flags broke the smartsync subcmd since
    the corresponding variables weren't getting set.  This change
    ensures that they will always be set, regardless of whether we are
    using sync -s or smartsync.
    
    Change-Id: I1b642038787f2114fa812ecbc15c64e431bbb829
    sync: Only parallelize gc for git >= 1.7.2
    
    This minimum version is required for the -c argument to set config on
    the command line. Without this option, git by default uses as many
    threads per invocation as there are CPUs, so we cannot safely
    parallelize without hosing a system.
    
    Change-Id: I8fd313dd84917658162b5134b2d9aa34a96f2772
    Even more coding style cleanup
    
    Fixing some more pylint warnings:
    
    W1401: Anomalous backslash in string
    W0623: Redefining name 'name' from outer scope
    W0702: No exception type(s) specified
    E0102: name: function already defined line n
    
    Change-Id: I5afcdb4771ce210390a79981937806e30900a93c
    Revert "Represent git-submodule as nested projects"
    
    This reverts commit 69998b0c6ff724bf620480140ccce648fec7d6a9.
    Broke Android's non-gitmodule use case.
    
    Conflicts:
            project.py
            subcmds/sync.py
    
    Change-Id: I68ceeb63d8ee3b939f85a64736bdc81dfa352aed
    repo selfupdate: Fix _PostRepoUpgrade takes 2 arguments
    
    Change-Id: I1cf9e0674ea366ddce96c949e0bc085e3452b25a
    Update PGP keys during _PostRepoUpgrade in `sync`
    
    Previously, if a key was added, a client wouldn't add the key during
    the sync step.  This would cause issues if a new key were added and a
    subsequent release were signed by that key.
    
    Change-Id: I4fac317573cd9d0e8da62aa42e00faf08bfeb26c
    Fix pylint warnings introduced by the submodule patch
    
    "69998b0 Represent git-submodule as nested projects" has introduced a
    few pylint warnings.
    
    W0612:1439,8:Project._GetSubmodules.get_submodules: Unused variable 'sub_gitdir'
    W0613:1424,36:Project._GetSubmodules.get_submodules: Unused argument 'path'
    W0612:1450,25:Project._GetSubmodules.parse_gitmodules: Unused variable 'e'
    W0622:516,8:Sync.Execute: Redefining built-in 'all'
    
    Change-Id: I84378e2832ed1b5ab023e394d53b22dcea799ba4
    sync: Run gc --auto in parallel
    
    We can't just let this run wild with a high (or even low) -j, since
    that would hose a system. Instead, limit the total number of threads
    across all git gc subprocesses to the number of CPUs reported by the
    multiprocessing module (available in Python 2.6 and above).
    
    Change-Id: Icca0161a1e6116ffa5f7cfc6f5faecda510a7fb9
    sync: Keep a moving average of last fetch times
    
    Try to more accurately estimate which projects take the longest to
    sync by keeping an exponentially weighted moving average (a=0.5) of
    fetch times, rather than just recording the last observation. This
    should discount individual outliers (e.g. an unusually large project
    update) and hopefully allow truly slow repos to bubble to the top.
    
    Change-Id: I72b2508cb1266e8a19cf15b616d8a7fc08098cb3
    sync: Order projects according to last fetch time
    
    Some projects may consistently take longer to fetch than others, for
    example a more active project may have many more Gerrit changes than a
    less active project, which take longer to transfer. Use a simple
    heuristic based on the last fetch time to fetch slower projects first,
    so we do not tend to spend the end of the sync fetching a small number
    of outliers.
    
    This algorithm is probably not optimal, and due to inter-run latency
    variance and Python thread scheduling, we may not even have good
    estimates of a project sync time.
    
    Change-Id: I9a463f214b3ed742e4d807c42925b62cb8b1745b
    Use modern Python exception syntax
    
    "except Exception as e" instead of "except Exception, e"
    
    This is part of a transition to supporting Python 3.  Python >= 2.6
    support "as" syntax.
    
    Note: this removes Python 2.5 support.
    
    Change-Id: I309599f3981bba2b46111c43102bee38ff132803
    Represent git-submodule as nested projects
    
    We need a representation of git-submodule in repo; otherwise repo will
    not sync submodules, and leave workspace in a broken state.  Of course
    this will not be a problem if all projects are owned by the owner of the
    manifest file, who may simply choose not to use git-submodule in all
    projects.  However, this is not possible in practice because manifest
    file owner is unlikely to own all upstream projects.
    
    As git submodules are simply git repositories, it is natural to treat
    them as plain repo projects that live inside a repo project.  That is,
    we could use recursively declared projects to denote the is-submodule
    relation of git repositories.
    
    The behavior of repo remains the same to projects that do not have a
    sub-project within.  As for parent projects, repo fetches them and their
    sub-projects as normal projects, and then checks out subprojects at the
    commit specified in parent's commit object.  The sub-project is fetched
    at a path relative to parent project's working directory; so the path
    specified in manifest file should match that of .gitmodules file.
    
    If a submodule is not registered in repo manifest, repo will derive its
    properties from itself and its parent project, which might not always be
    correct.  In such cases, the subproject is called a derived subproject.
    
    To a user, a sub-project is merely a git-submodule; so all tips of
    working with a git-submodule apply here, too.  For example, you should
    not run `repo sync` in a parent repository if its submodule is dirty.
    
    Change-Id: I541e9e2ac1a70304272dbe09724572aa1004eb5c
    Rename "dir" variables
    
    The variable name "dir" conflicts with the name of a Python built-in
    function: http://docs.python.org/library/functions.html#dir
    
    Change-Id: I850f3ec8df7563dc85e21f2876fe5e6550ca2d8f
    Coding style cleanup
    
    Fix the following issues reported by pylint:
    
    C0321: More than one statement on a single line
    W0622: Redefining built-in 'name'
    W0612: Unused variable 'name'
    W0613: Unused argument 'name'
    W0102: Dangerous default value 'value' as argument
    W0105: String statement has no effect
    
    Also fixed a few cases of inconsistent indentation.
    
    Change-Id: Ie0db839e7c57d576cff12d8c055fe87030d00744
    Remove unreachable code
    
    Change 9bb1816b removed part of a block of code, but left the
    remaining part unreachable.  Remove it.
    
    Change-Id: Icdc6061d00e6027df32dee9a3bad3999fe7cdcbc
    sync: Support manual authentication to the manifest server
    
    Add two new command line options, -u/--manifest-server-username and
    -p/--manifest-server-password, which can be used to specify a username
    and password to authenticate to the manifest server when using the
    -s/--smart-sync or -t/--smart-tag option.
    
    If -u and -p are not specified when using the -s or -t option, use
    authentication credentials from the .netrc file (if there are any).
    
    Authentication credentials from -u/-p or .netrc are not used if the
    manifest server specified in the manifest file already includes
    credentials.
    
    Change-Id: I6cf9540d28f6cef64c5694e8928cfe367a71d28d
    sync: Support authentication to manifest server with .netrc
    
    When using the --smart-sync or --smart-tag option, and the specified
    manifest server is hosted on a server that requires authentication,
    repo sync fails with the error: HTTP 401 Unauthorized.
    
    Add support for getting the credentials from the .netrc file.
    
    If a .netrc file exists in the user's home directory, and it contains
    credentials for the hostname of the manifest server specified in the
    manifest, use the credentials to authenticate with the manifest server
    using the URL syntax extension for Basic Authentication:
    
      http://user:password@host:port/path
    
    Credentials from the .netrc file are only used if the manifest server
    URL specified in the manifest does not already include credentials.
    
    Change-Id: I06e6586e8849d0cd12fa9746789e8d45d5b1f848
    sync: Correct imports of `R_HEADS` and `HEAD`
    
    `R_HEADS` is imported twice, from both the git_refs and project
    modules.
    
    It is actually defined in git_refs, and in project it is imported
    from there, so the import of `R_HEADS` from project in the sync
    module is redundant.  Remove it.
    
    `HEAD` is imported from project, but like `R_HEADS` it is actually
    defined in git_refs.  Import it from git_refs instead.
    
    Change-Id: I8e2b0217d0d9f9f4ee5ef5b8cd0b026174ac52f4
    sync: catch exceptions when connecting to the manifest server
    
    When connecting to the manifest server, exceptions can occur but
    are not caught, resulting in the repo sync exiting with a python
    traceback.
    
    Add handling of the following exceptions:
    
    - IOError, which can be raised for example if the manifest server
    URL is malformed.
    - xmlrpclib.ProtocolError, which can be raised if the connection
    to the manifest server fails with HTTP error.
    - xmlrpclib.Fault, which can be raised if the RPC call fails for
    some other reason.
    
    Change-Id: I3a4830aef0941debadd515aac776a3932e28a943
    Make "repo sync -j<count>" stop properly on Ctrl-C.
    
    The threaded 'repo sync' implementation would very often freeze the
    process when interrupted by the user with Ctrl-C. The only solution
    being to kill -9 the process explicitly from another terminal.
    
    The reason for this is best explained here:
    
    http://snakesthatbite.blogspot.fr/2010/09/cpython-threading-interrupting.html
    
    This patch makes all helper sync threads 'daemon', which allows the
    process to terminate immediately on Ctrl-C.
    
    Note that this will forcefully kill all threads in case of interruption; this
    is generally a bad thing, but:
    
      1/ This is equivalent to calling kill -9 in another terminal, which
         is the _only_ thing that can currently stop the process.
    
      2/ There doesn't seem to be a way to tell the worker threads to
         gently stop when they are in a blocking operation anyway (even
         in the non-threaded case).
    
    + Do the same for "repo status -j<count>".
    
    Change-Id: Ieaf45b0eacee36f35427f8edafd87415c2aa7be4
    sync: Honor --no-clone-bundle with -j1
    
    Change-Id: I7c12902e386121a374d525be673092360c67c53d
    Add manifest groups
    
    Allows specifying a list of groups with a -g argument to repo init.
    The groups act on a group= attribute specified on projects in the
    manifest.
    All projects are implicitly labelled with "default" unless they are
    explicitly labelled "-default".
    Prefixing a group with "-" removes matching projects from the list
    of projects to sync.
    If any non-inverted manifest groups are specified, the default label
    is ignored.
    
    Change-Id: I3a0dd7a93a8a1756205de1d03eee8c00906af0e5
    Reviewed-on: https://gerrit-review.googlesource.com/34570
    Reviewed-by: Shawn Pearce <sop@google.com>
    Tested-by: Shawn Pearce <sop@google.com>
    sync: --no-clone-bundle disables the clone bundle support
    
    Change-Id: Ia9ed7da8451b273c1be620c3dd0dcad777b29096
    sync: Add manifest_name parameter
    
    This parameter changes the manifest used by 'repo sync' for only
    this execution. It should be useful for developers wishing to get
    the repo temporarily into a known state, without clobbering their
    existing manifest.
    
    Tested by shifting Chrome OS between minilayout and full, and
    between several release-builder-generated manifests.
    
    Change-Id: I14194b665195b0e78f368d9ec8b8a83227af2627
    Add a sync flag that fetches only current branch
    
    There is also shortcuts in case if the "current branch" is
    a persistent revision such as tag or sha1. We check if the
    persistent revision is present locally and if it does - do
    no fetch anything from the server.
    
    This greately reduces sync time and size of the on-disk repo
    
    Change-Id: I23c6d95185474ed6e1a03c836a47f489953b99be
    Fix Python 2.4 support
    
    Change-Id: I89521ae52fa564f0d849cc51e71fee65b3c47bab
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    sync: Update default -j flag from manifest
    
    If the manifest is updated and the default sync-j attribute
    was modified, honor it during this sync session if the user
    has not supplied a -j flag on the command line.
    
    Change-Id: I127ee5c779e2bbbb40b30bddc10ec1fa704b3bf3
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    sync: Allow -j to have a default in manifest
    
    This permits manifest authors to suggest a number of parallel
    fetch operations against a remote server. For example, Gerrit
    Code Review servers support queuing of requests and processes
    them in first-in, first-out order. Running concurrent fetches
    can utilize multiple CPUs on the Gerrit server, but will also
    decrease overall operation latency by having the request put
    into the queue ready to execute as soon as a CPU is free.
    
    Change-Id: I3d3904acb6f63516bae4b071c510ad57a2afab18
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    sync: Limit -j to file descriptors
    
    Each worker thread requires at least 3 file descriptors to run the
    forked 'git fetch' child to operate against the local repository.
    Mac OS X has the RLIMIT_NOFILE set to 256 by default, which means
    a sync -j128 often fails when the workers run out of pipes within
    the Python parent process.
    
    Change-Id: I2cdb14621b899424b079daf7969bc8c16b85b903
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Smart tag support
    
    This is an evolution of 'smart-sync' that adds a new option, -t,
    that allows you to specify a tag/label to use instead of the
    "latest good build" on the current manifest branch which -s does.
    
    Signed-off-by: Victor Boivie <victor.boivie@sonyericsson.com>
    Change-Id: I8c20fd91104a6aafa0271d4d33f6c4850aade17e
    Fix parallel sync on python < 2.6.
    
    Event.isSet was renamed to is_set in 2.6, but we should
    use the earlier syntax to avoid breaking compatibility
    with older Python installations.
    
    Change-Id: I41888ed38df278191d7496c1a6eed15e881733f4
    sync: Fix syntax error on Python 2.4
    
    Change-Id: I371d032d5a1ddde137721cbe2b24bfa38f20aaaa
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Make 'repo sync -jN' exit with an error code in the case of sync errors.
    
    The bug that this is fixing is described here:
    
    http://code.google.com/p/chromium-os/issues/detail?id=6813
    
    This fix allows the helper threads to signal the main thread that they
    saw an error.  When the main thread sees the error, it will let all
    existing threads finish, then exit with an error.
    
    Change-Id: If3019bc6b0b3ab9304d49ed2eea53e9d57f3095a
    sync: Run `git gc --auto` after fetch
    
    Users may wind up with a lot of loose object content in projects they
    don't frequently make changes in, but that are modified by others.
    
    Since we bypass many git code paths that would have otherwise called
    out to `git gc --auto`, its possible for these projects to have
    their loose object database grow out of control.  To help prevent
    that, we now invoke it ourselves during the network half of sync.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    (cherry picked from commit 1875ddd47c0bf38e5cc52e1e5875caabce2d8742)
    Encode the environment variables passed to git
    
    Windows allows the environment to have unicode values.
    This will cause Python to fail to execute the command.
    
    Change-Id: I37d922c3d7ced0d5b4883f0220346ac42defc5e9
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Added feature to print a <notice> from manifest at the end of a sync.
    
    This feature is used to convey information on a when a branch has
    ceased development or if it is an experimental branch with a few
    gotchas, etc.
    
    You add it to your manifest XML by doing something like this:
    <manifest>
      <notice>
        NOTE TO DEVELOPERS:
          If you checkin code, you have to pinky-swear that it contains no bugs.
          Anyone who breaks their promise will have tomatoes thrown at them in the
          team meeting.  Be sure to bring an extra set of clothes.
      </notice>
    
      <remote ... />
      ...
    </manifest>
    
    Carriage returns and indentation are relevant for the text in this tag.
    
    This feature was requested by Anush Elangovan on the ChromiumOS team.
    sync: Use --force-broken to continue other projects
    
    This adds a new flag -f/--force-broken that will allow the rest of
    the sync process to continue instead of bailing when a particular
    project fails to sync.
    
    Change-Id: I23680f2ee7927410f7ed930b1d469424c9aa246e
    Signed-off-by: Andrei Warkentin <andreiw@motorola.com>
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    sync --quiet: be more quiet
    
    Change-Id: I5e8363c7b32e4546d1236cfc5a32e01c3e5ea8e6
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    sync: support --jobs to fetch projects simultaneously
    
    This patch does two things for being compatibile with
    those Python which are built without threading support:
    
    1. As the Python document and Shawn suggested, import dummy_threading
       when the threading is not available.
    
    2. Reserve the single threaded code and make it default.
       In cases the --jobs does not work properly with dummy_threading,
       we still have a safe fallback.
    
    Change-Id: I40909ef8e9b5c22f315c0a1da9be38eed8b0a2dc
    Aliasing sync -s to 'smartsync'
    
    This alias will let people use this command without having to
    remember the option.
    
    Change-Id: I3256d9e8e884c5be9e77f70e9cfb73e0f0c544c6
    Override manifest file only after it is fully written to disk.
    
    We called "Override()" before closing the file passed in argument.
    
    Change-Id: I15adb99deb14297ef72fcb1b0945eb246f172fb0
    Strip refs/heads in the branch sent to the manifest server.
    
    The manifest server doesn't want to have refs/heads passed to it, so
    we need to strip that when the branch contains it.
    
    Change-Id: I044f8a9629220e886fd5e02e3c1ac4b4bb6020ba
    sync: Safely skip already deleted projects
    
    Do not error if a project is missing on the filesystem, is deleted
    from manifest.xml, but still exists in project.list.
    
    Change-Id: I1d13e435473c83091e27e4df571504ef493282dd
    Add a 'smart sync' option to repo sync
    
    This option allows the user to specify a manifest server to use when
    syncing. This manifest server will provide a manifest pegging each
    project to a known green build. This allows developers to work on a
    known good tree that is known to build and pass tests, preventing
    failed builds to hamper productivity.
    
    The manifest used is not "sticky" so as to allow subsequent
    'repo sync' calls to sync to the tip of the tree.
    
    Change-Id: Id0a24ece20f5a88034ad364b416a1dd2e394226d
    Fixing project renaming bug.
    
    This bug happens when a project gets added to the manifest, and
    then is renamed. Users who happened to have run "repo sync" after
    the project was added but before the rename happened will try to
    read the data from the old project, as the manifest was only updated
    after all projects were updated successfully.
    sync: Support upgrading manifest formats
    
    If the manifest format changes during init or sync we need to do
    a full reparse of the manifest, and possibly allow the new object
    to reconfigure the local workspace to match its expectations.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    sync: Run `git gc --auto` after fetch
    
    Users may wind up with a lot of loose object content in projects they
    don't frequently make changes in, but that are modified by others.
    
    Since we bypass many git code paths that would have otherwise called
    out to `git gc --auto`, its possible for these projects to have
    their loose object database grow out of control.  To help prevent
    that, we now invoke it ourselves during the network half of sync.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Create an abstract Manifest base class
    
    This will help as we add support for another manifest type.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    sync: Keep the project.list file sorted
    
    Its easier to locate an entry visually if the file is sorted.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    sync: Tolerate blank lines in project.list
    
    If a line is blank in project.list, its not a relevant project path,
    so skip over it.  Existing project.list files may have blank lines if
    sync was run with no projects at all, and the file was created empty.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    sync: Don't process project.list in a mirror
    
    We have no working tree, so we cannot update the project.list
    state file, nor should we try to delete a directory if a project is
    removed from the manifest.  Clients would still need the repository
    for historical records.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Delete empty parent subdirs after deleting obsolete paths.
    
    After sync, we delete obsolete project paths.
    Iterate and delete parent subdirs which are empty.
    Tested on projects within subdirectories.
    Update project paths after sync.
    
    After a repo sync, some of the project paths might need
    to be removed. This changes maintains a list of project
    paths from the previous sync operation and compares.
    Change project.revision to revisionExpr and revisionId
    
    The revisionExpr field now holds an expression from the manifest,
    such as "refs/heads/master", while revisionId holds the current
    commit-ish SHA-1 of the revisionExpr.  Currently that is only
    filled in if the manifest points directly to a SHA-1.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Document the SSH ControlMaster behavior of repo sync
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Clarify options that control the repo executable version
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Only fetch repo once-per-day under normal 'repo sync' usage
    
    Its unlikely that a new version of repo will be delivered in any
    given day, so we now check only once every 24 hours to see if repo
    has been updated.  This reduces the sync cost, as we no longer need
    to contact the repo distribution servers every time we do a sync.
    
    repo selfupdate can still be used to force a check.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Change repo sync to be more friendly when updating the tree
    
    We now try to sync all projects that can be done safely first, before
    we start rebasing user commits over the upstream.  This has the nice
    effect of making the local tree as close to the upstream as possible
    before the user has to start resolving merge conflicts, as that extra
    information in other projects may aid in the conflict resolution.
    
    Informational output is buffered and delayed until calculation for
    all projects has been done, so that the user gets one concise list
    of notice messages, rather than it interrupting the progress meter.
    
    Fast-forward output is now prefixed with the project header, so the
    user can see which project that update is taking place in, and make
    some relation of the diffstat back to the project name.
    
    Rebase output is now prefixed with the project header, so that if
    the rebase fails, the user can see which project we were operating
    on and can try to address the failure themselves.
    
    Since rebase sits on a detached HEAD, we now look for an in-progress
    rebase during sync, so we can alert the user that the given project
    is in a state we cannot handle.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Add 'repo selfupdate' to upgrade only repo
    
    Users may want to upgrade only repo to the latest release, but
    leave their working tree state alone and avoid 'repo sync'.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Add a project progress meter to 'repo sync'
    
    This way users can see how much is left during fetch.  Its
    especially useful when most syncs are no-ops but there are
    hundreds of repositories to poll.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Add 'repo sync -l' to only do local operations
    
    This permits usage of 'repo sync' while offline, as we bypass the
    network based portions of the code and do only the local sync.
    
    An example use case might be:
    
      repo sync -n  ; # while we have network
      ... some time later ...
      repo sync -l  ; # while without network, come up to date
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Add 'repo sync -d' to detach projects from their current topic
    
    The -d flag moves the project back to a detached HEAD state,
    matching what is listed in the manifest.  This can be useful to
    set a client to something stable (or at least well-known), such as
    before a sequence of 'repo download' commands are used to get some
    changes for testing.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Add 'repo sync -n' to only do the network transfer
    
    This makes it easier to update all repositories, without actually
    impacting the working directory, or learning about how to use
    `repo forall -c 'git fetch $REPO_REMOTE' `.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Hide the internal sync --repo-upgraded flag from users
    
    This is only meant to be passed through while repo upgrades itself
    during a sync.  It should never be something a user invokes on
    their own.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Don't permit users to run repo status in a mirror client
    
    If a client was created with "repo init --mirror" then there are
    no working directories present, and no files checked out.  Using
    a command like "repo status" in this context makes no sense, and
    actually throws back a Pytyon traceback at the console when the
    underlying commands fail out.
    
    We now tag commands with the MirrorSafeCommand type if they are
    able to be executed within a mirror directory safely.  Using a
    command in a mirror which lacks this base class results in a
    useful error letting you know the command isn't supported.
    
    Bug: REPO-14
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Add 'repo init --mirror' to download a complete forrest
    
    The mirror option downloads a complete forrest (as described by the
    manifest) and creates a replica of the remote repositories rather
    than a client working directory.  This permits other clients to
    sync off the mirror site.
    
    A mirror can be positioned in a "DMZ", where the mirror executes
    "repo sync" to obtain changes from the external upstream and
    clients inside the protected zone operate off the mirror only,
    and therefore do not require direct git:// access to the external
    upstream repositories.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Install a default pre-auto-gc hook in all repositories
    
    This hook is evaluated by `git gc --auto` to determine if it is a
    good idea to execute a GC at this time, or defer it to some later
    date.  When working on a laptop its a good idea to avoid GC if you
    are on battery power as the extra CPU and disk IO would consume a
    decent amount of the charge.
    
    The hook is the standard sample hook from git.git contrib/hooks,
    last modified in git.git by 84ed4c5d117d72f02cc918e413b9861a9d2846d7.
    I added the GPLv2 header to the script to ensure the license notice
    is clear, as it does not match repo's own APLv2 license.
    
    We only update hooks during initial repository creation or on
    a repo sync.  This way we don't incur huge overheads from the
    hook stat operations during "repo status" or even the normal
    "repo sync" cases.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Initial Contribution
    GITC: Add repo gitc-delete command.
    
    repo gitc-delete deletes a GITC client and all the locally
    saved sources. Useful for removing unnecessary clients and
    recovering disk space.
    
    Change-Id: Idf23addcea52b8713d268c34a7b37da0c5e5cd26
    Change print statements to work in python3
    
    This is part of a series of changes to introduce Python3 support.
    
    Change-Id: I373be5de7141aa127d7debdbce1df39148dbec32
    Coding style cleanup
    
    Fix the following issues reported by pylint:
    
    C0321: More than one statement on a single line
    W0622: Redefining built-in 'name'
    W0612: Unused variable 'name'
    W0613: Unused argument 'name'
    W0102: Dangerous default value 'value' as argument
    W0105: String statement has no effect
    
    Also fixed a few cases of inconsistent indentation.
    
    Change-Id: Ie0db839e7c57d576cff12d8c055fe87030d00744
    Initial Contribution
    Change print statements to work in python3
    
    This is part of a series of changes to introduce Python3 support.
    
    Change-Id: I373be5de7141aa127d7debdbce1df39148dbec32
    Clean up imports
    
    manifest_xml: import `HEAD` and `R_HEADS` from correct module
    version: import `HEAD` from correct module
    
    `HEAD` and `R_HEADS` should be imported from the git_refs module,
    where they are originally defined, rather than from the project
    module.
    
    repo: remove unused import of readline
    
    cherry_pick: import standard modules on separate lines
    smartsync: import subcmd modules explicitly from subcmd
    
    Use:
      `import re
      import sys`
    and
      `from subcmds.sync import Sync`
    
    Instead of:
      `import sys, re`
    and
      `from sync import Sync`
    
    Change-Id: Ie10dd6832710939634c4f5c86b9ba5a9cd6fc92e
    Describe the repo launch version in `repo version`
    
      repo version v1.7.8
             (from https://android.googlesource.com/tools/repo.git)
      repo launcher version 1.14
             (from /home/sop/bin/repo)
      git version 1.7.8.rc2.256.gcc761
      Python 2.6.5 (r265:79063, Apr 16 2010, 13:57:41)
      [GCC 4.4.3]
    
    Change-Id: Ifcbe5b0e226a1a6ca85455eb62e4da5e9a0f0ca0
    Don't permit users to run repo status in a mirror client
    
    If a client was created with "repo init --mirror" then there are
    no working directories present, and no files checked out.  Using
    a command like "repo status" in this context makes no sense, and
    actually throws back a Pytyon traceback at the console when the
    underlying commands fail out.
    
    We now tag commands with the MirrorSafeCommand type if they are
    able to be executed within a mirror directory safely.  Using a
    command in a mirror which lacks this base class results in a
    useful error letting you know the command isn't supported.
    
    Bug: REPO-14
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Add 'repo version' to describe what code we are running
    
    I meant to have this in here, so clients can more easily report
    what version of repo they are running.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Initial Contribution
    Fix gitc-init behavior
    
    With gitc-init, a gitc client may be specified using '-c'. If we're
    not currently in that client, we need to change directories so that
    we don't affect the local checkout, and to ensure that repo is
    checked out in the new client.
    
    This also makes '-c' optional if already in a gitc client, to match
    the rest of the init options.
    
    Change-Id: Ib514ad9fd101698060ae89bb035499800897e9bd
    Add GitcClientCommand class for GITC-specific commands
    
    These won't show up as common commands in the help text unless in a GITC
    client, and will refuse to execute.
    
    Change-Id: Iffe82adcc9d6ddde9cb4b204f83ff018042bdab0
    fixed typo in gitc_init.py help output
    
    Change-Id: I86459bf63297487457d6c4c995dfd1e63133ec53
    GITC: Always update the gitc manifest from the repo manifest
    
    This way any changes made to the main manifest are reflected in the gitc
    manifest. It's also necessary to use both manifests to sync since the
    information required to update the gitc manifest is actually in the repo
    manifest.
    
    This also fixes a few issues that came up when testing. notdefault
    groups weren't being saved to the gitc manifest in a method that matched
    'sync'. The merge branch wasn't always being set to the correct value
    either.
    
    Change-Id: I435235cb5622a048ffad0059affd32ecf71f1f5b
    Revert "GITC: Always update the gitc manifest from the repo manifest"
    
    This reverts commit 250303b437855c2b50d052a05a08ed517423af8b.
    
    Change-Id: I1fd8af20f802553151aacb953c913f3305ca6057
    GITC: Always update the gitc manifest from the repo manifest
    
    This way any changes made to the main manifest are reflected in the gitc
    manifest. It's also necessary to use both manifests to sync since the
    information required to update the gitc manifest is actually in the repo
    manifest.
    
    This also fixes a few issues that came up when testing. notdefault
    groups weren't being saved to the gitc manifest in a method that matched
    'sync'. The merge branch wasn't always being set to the correct value
    either.
    
    Change-Id: I5dbc850dd73a9fbd10ab2470ae4c40e46ff894de
    gitc: Improve help visibility
    
    This improves the visiblity of gitc-init if we can get the gitc config,
    and hides it otherwise.
    
    Change-Id: I82830b0b07c311e8c74397ba79eb4c361f8b6fb5
    GITC: Pull GITC Manifest Dir from the config.
    
    Updates the repo launcher and gitc_utils to pull the manifest
    directory location out of the gitc config file.
    
    Change-Id: Id08381b8a7d61962093d5cddcb3ff6afbb13004b
    GITC: Expand relative remote URLs.
    
    The GITC filesystem does not understand relative URLs for remotes,
    so now if a remote uses a relative URL, it will be be expanded to
    be relative to the manifest URL.
    
    Change-Id: Ie1210758560aeb1934da3f71496aaf19c2728214
    gitc_init: Remove unused import
    
    Also add missing newline at the end of the file.
    
    Change-Id: I206e6c4b033d223eb0ff5824ecbf6fd98c39c918
    GITC: Add repo sync support.
    
    Add repo sync support for GITC checkouts. If the user is in the
    GITC client directory they can still pull the sources as normal
    if they pass in the --force-gitc argument. Otherwise the user
    should call repo sync in the GITC view to update the user's
    remote view. (This works because .repo in the GITC view will
    link to .repo in the client config directory.)
    
    Part of the support for this change is the refactoring of GITC
    related code into gitc_utils.py.
    
    Change-Id: I2636aaa50b450b6f091309db8dd0e8f4dbdad579
    GITC: Add gitc-init subcommand to repo.
    
    Adds the new gitc-init command to set up a GITC client. Gitc-init
    sets up the client directory and calls repo init within it. Once
    the repo is initialized, then generates a GITC manifest file
    by using git ls-remote on each project and retrieving the HEAD SHA
    to use as the revision attribute.
    
    Gitc-init inherits from and has all the options as repo init.
    
    Change-Id: Icd7e47e90eab752a77de7c80ebc98cfe16bf6de3
    status: add -q/--quiet option
    
    The --quiet option reduces the output to just
    a list of projects with modified workspaces (and
    orphans if -o is specified)
    
    A common use case is when performing a full-workspace
    merge.  The integrator will kick-off a merge via:
    
        repo forall -c git merge <some tag>
    
    And then produce a short list of conflicted projects via:
    
        repo status -q
    
    The integrator can then iteratively fix and clean up all conficted
    components.  The merge is complete when:
    
        repo status -q
    
        returns no output.
    
    Change-Id: Ibbba8713eac35befd8287c95948874e23fd5c7e2
    status: lose dependence on StringIO
    
    buflist was being used, which isn't available in Python 3.
    
    `Execute` was using StringIO to capture the output of `PrintWorkTreeStatus`,
    only to redirect it straight to stdout.
    Instead, just let `PrintWorkTreeStatus` do it's own thing directly to stdout.
    
    for handling `_FindOrphans`, we swap StringIO for a list. Nothing was done
    that needed a a file like object.
    
    Change-Id: Ibdaae137904de66a5ffb590d84203ef0fe782d8b
    Use next(iterator) rather than iterator.next()
    
    iterator.next() was replaced with iterator.__next__() in Python 3.
    Use next(iterator) instead which will select the correct method for
    returning the next item.
    
    Change-Id: I6d0c89c8b32e817e5897fe87332933dacf22027b
    Move Python version checking to a separate module
    
    Add a new module with methods for checking the Python version.
    
    Instead of handling Python3 imports with try...except blocks, first
    check the python version and then import the relevant modules.  This
    makes the code a bit cleaner and will result in less diff when/if we
    remove support for Python < 3 later.
    
    Use the same mechanism to handle `input` vs. `raw_input` and add
    suppression of pylint warnings caused by redefinition of the built-in
    method `input`.
    
    Change-Id: Ia403e525b88d77640a741ac50382146e7d635924
    Also-by: Chirayu Desai <cdesai@cyanogenmod.org>
    Signed-off-by: Chirayu Desai <cdesai@cyanogenmod.org>
    Some fixes for supporting python3
    
    * Fix imports.
    * Use python3 syntax.
    * Wrap map() calls with list().
    * Use list() only wherever needed.
      (Thanks Conley!)
    * Fix dictionary iteration methods
      (s/iteritems/items/).
    * Make use of sorted() in appropriate places
    * Use iterators directly in the loop.
    * Don't use .keys() wherever it isn't needed.
    * Use sys.maxsize instead of sys.maxint
    
    TODO:
    * Make repo work fully with python3. :)
    
    Some of this was done by the '2to3' tool [1], by
    applying the needed fixes in a way that doesn't
    break compatibility with python2.
    
    Links:
    [1]: http://docs.python.org/2/library/2to3.html
    
    Change-Id: Ibdf3bf9a530d716db905733cb9bfef83a48820f7
    Signed-off-by: Chirayu Desai <cdesai@cyanogenmod.org>
    'repo status --orphans' shows non-repo files
    
    'repo status --orphans' searches for non-repo objects
    (not within a project), which is particularly helpful
    before removing a working tree.
    
    Change-Id: I2239c12e6bc0447b0ad71129551cb50fa671961c
    Change print statements to work in python3
    
    This is part of a series of changes to introduce Python3 support.
    
    Change-Id: I373be5de7141aa127d7debdbce1df39148dbec32
    Coding style cleanup
    
    Fix the following issues reported by pylint:
    
    C0321: More than one statement on a single line
    W0622: Redefining built-in 'name'
    W0612: Unused variable 'name'
    W0613: Unused argument 'name'
    W0102: Dangerous default value 'value' as argument
    W0105: String statement has no effect
    
    Also fixed a few cases of inconsistent indentation.
    
    Change-Id: Ie0db839e7c57d576cff12d8c055fe87030d00744
    Make "repo sync -j<count>" stop properly on Ctrl-C.
    
    The threaded 'repo sync' implementation would very often freeze the
    process when interrupted by the user with Ctrl-C. The only solution
    being to kill -9 the process explicitly from another terminal.
    
    The reason for this is best explained here:
    
    http://snakesthatbite.blogspot.fr/2010/09/cpython-threading-interrupting.html
    
    This patch makes all helper sync threads 'daemon', which allows the
    process to terminate immediately on Ctrl-C.
    
    Note that this will forcefully kill all threads in case of interruption; this
    is generally a bad thing, but:
    
      1/ This is equivalent to calling kill -9 in another terminal, which
         is the _only_ thing that can currently stop the process.
    
      2/ There doesn't seem to be a way to tell the worker threads to
         gently stop when they are in a blocking operation anyway (even
         in the non-threaded case).
    
    + Do the same for "repo status -j<count>".
    
    Change-Id: Ieaf45b0eacee36f35427f8edafd87415c2aa7be4
    Avoid failing concat for multi-encoding filenames
    
    repo status should output filenames one by one instead of trying to
    build a string from incompatible encodings (like utf-8 and sjis
    filenames)
    
    Change-Id: I52282236ececa562f109f9ea4b2e971d2b4bc045
    repo status to print project name on clean gits
    
    repo status just prints "# on branch oprofile" if you have branched
    in clean status. This doesn't really tell which branch is meant.
    
    Instead we can use the same syntax with modified gits which will
    give us detailed information.
    
    Change-Id: I55fe5154d278e10a814281dd2ba501ec6e956730
    Add option to check status of projects in parallel.
    
    Change-Id: I6ac653f88573def8bb3d96031d3570ff966251ad
    Make 'repo status' show the branch you are currently on
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Document 'repo status' output
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    status: tell the user the working tree is clean
    
    If there is nothing output at all, tell the user the working tree is
    completely clean.  It just gives them a bit more of a warm-fuzzy
    feeling knowing repo and until the end.  It also more closely
    matches with the output of git status.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Initial Contribution
    Add option to rebase onto project's manifest version
    
    Some teams have a continuous build server that would mark certain
    manifest green and safe to sync to.  Then team members could repo
    sync to that particular manifest file and make sure they always
    sync to a green build.  But if she/he has some local changes and
    wants to rebase, currently it would be a manual process to find the
    correct version to rebase onto.  This patch helps with that use
    case by automating the process to rebase onto the currently synced
    manifest version.
    
    Change-Id: I847c9eb6addf7f84fd3f5594fbf8c0bcc103f9a5
    repo: Support multiple branches for the same project.
    
    It is often useful to be able to include the same project more than
    once, but with different branches and placed in different paths in the
    workspace. Add this feature.
    
    This CL adds the concept of an object directory. The object directory
    stores objects that can be shared amongst several working trees. For
    newly synced repositories, we set up the git repo now to share its
    objects with an object repo.
    
    Each worktree for a given repo shares objects, but has an independent
    set of references and branches. This ensures that repo only has to
    update the objects once; however the references for each worktree are
    updated separately. Storing the references separately is needed to
    ensure that commits to a branch on one worktree will not change the
    HEAD commits of the others.
    
    One nice side effect of sharing objects between different worktrees is
    that you can easily cherry-pick changes between the two worktrees
    without needing to fetch them.
    
    Bug: Issue 141
    Change-Id: I5e2f4e1a7abb56f9d3f310fa6fd0c17019330ecd
    Fix: Missing spaces in printed messages
    
    Several messages are printed with the `print` method and the message
    is split across two lines, i.e.:
    
     print('This is a message split'
           'across two source code lines')
    
    Which causes the message to be printed as:
    
     This is a message splitacross two source code lines
    
    Add a space at the end of the first line before the line break:
    
     print('This is a message split '
           'across two source code lines'
    
    Also correct a minor spelling mistake.
    
    Change-Id: Ib98d93fcfb98d78f48025fcc428b6661380cff79
    Change print statements to work in python3
    
    This is part of a series of changes to introduce Python3 support.
    
    Change-Id: I373be5de7141aa127d7debdbce1df39148dbec32
    Coding style cleanup
    
    Fix the following issues reported by pylint:
    
    C0321: More than one statement on a single line
    W0622: Redefining built-in 'name'
    W0612: Unused variable 'name'
    W0613: Unused argument 'name'
    W0102: Dangerous default value 'value' as argument
    W0105: String statement has no effect
    
    Also fixed a few cases of inconsistent indentation.
    
    Change-Id: Ie0db839e7c57d576cff12d8c055fe87030d00744
    Remove unused imports
    
    There are several imports that are not used.  Remove them.
    
    Change-Id: I2ac3be66827bd68d3faedcef7d6bbf30ea01d3f2
    Support automatically stashing local modifications during repo-rebase.
    
    Currently repo-rebase requires that all modifications be committed
    locally before it will allow the rebase. In high-velocity environments,
    you may want to just pull in newer code without explicitly creating
    local commits, which is typically achieved using git-stash.
    
    If called with the --auto-stash command line argument, and it is
    determined that the current index is dirty, the local modifications
    are stashed, and the rebase continues.  If a stash was performed, that
    stash is popped once the rebase completes.
    
    Note that there is still a possibility that the git-stash pop will
    result in a merge conflict.
    
    Change-Id: Ibe3da96f0b4486cb7ce8d040639187e26501f6af
    rebase: Pass through more options
    
    Passing through --whitespace=fix to rebase can be useful
    to clean up a branch prior to uploading it for review.
    
    Change-Id: Id85f1912e5e11ff9602e3b342c2fd7441abe67d7
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    rebase: Automatically rebase branch on upstrea
    
      Usage: repo rebase [[-i] <project>...]
    
    Rebases the current topic branch of the specified (or all)
    projects against the appropriate upstream.
    
    Note: Interactive rebase is currently only supported when
    exactly one project is specified on the command line.
    
    Change-Id: I7376e35f27a6585149def82938c1ca99f36db2c4
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    diffmanifests: support custom git pretty format strings
    
    Change-Id: I29f4f1351c421f393328514d145df1a96aed9ee2
    Add the "diffmanifests" command
    
    This command allows a deeper diff between two manifest projects.
    In addition to changed projects, it displays the logs of the
    commits between both revisions for each project.
    
    Change-Id: I86d30602cfbc654f8c84db2be5d8a30cb90f1398
    Signed-off-by: Julien Campergue <julien.campergue@parrot.com>
    Option for 'repo diff' to generate output suitable for 'patch' cmd
    
    The -u option causes 'repo diff' to generate diff output
    with file paths relative to the repository root,
    so the output can be applied to the Unix 'patch' command.
    The name '-u' was selected for convenience, because
    both 'diff' and 'git diff' accept the option with the same name
    to generate an 'unified diff' output suitable for 'patch' command.
    
    Change-Id: I79c8356db4ed20ecaccc258b3ba139db76666fe0
    Reviewed-on: https://gerrit-review.googlesource.com/34380
    Reviewed-by: Shawn Pearce <sop@google.com>
    Tested-by: Shawn Pearce <sop@google.com>
    Initial Contribution
    Change print statements to work in python3
    
    This is part of a series of changes to introduce Python3 support.
    
    Change-Id: I373be5de7141aa127d7debdbce1df39148dbec32
    More coding style cleanup
    
    Fixing more issues found with pylint.  Some that were supposed to
    have been fixed in the previous sweep (Ie0db839e) but were missed:
    
    C0321: More than one statement on a single line
    W0622: Redefining built-in 'name'
    
    And some more:
    
    W0631: Using possibly undefined loop variable 'name'
    W0223: Method 'name' is abstract in class 'name' but is not overridden
    W0231: __init__ method from base class 'name' is not called
    
    Change-Id: Ie119183708609d6279e973057a385fde864230c3
    Fixed repo checkout error message when git reports errors.
    
    In the current version of repo checkout, we often get the error:
      error: no project has branch xyzzy
    
    ...even when the actual error was something else.  This fixes it
    to only report the 'no project has branch' when that is actually true.
    
    This fix is very similar to one made for 'repo abandon':
      https://review.source.android.com/#change,22207
    
    The repo checkout error is filed as: <http://crosbug.com/6514>
    
    TEST=manual
    
    A sample creating a case where 'git checkout' will fail:
    
      $ repo start branch1 .
      $ repo start branch2 .
      $ touch bogusfile
      $ git add bogusfile
      $ git commit -m "create bogus file"
      [branch2 f8b6b08] create bogus file
       0 files changed, 0 insertions(+), 0 deletions(-)
       create mode 100644 bogusfile
      $ echo "More" >> bogusfile
      $ repo checkout branch1 .
      error: chromite/: cannot checkout branch1
    
    A sample case showing that we still fail if no project has a branch:
    
      $ repo checkout xyzzy .
      error: no project has branch xyzzy
    
    Change-Id: I48a8e258fa7a9c1f2800dafc683787204bbfcc63
    Improve checkout performance for the common unmodified case
    
    Most projects will have their branch heads matching in all branches,
    so switching between them should be just a matter of updating the
    work tree's HEAD symref.  This can be done in pure Python, saving
    quite a bit of time over forking 'git checkout'.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Cleanup checkout help to match other commands
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Add checkout command.
    
    Teach repo how to checkout a branch in all projects or a list
    of specific projects.
    
    Bug: REPO-21
    Introduce 'repo abandon <branchname>' as an alias for 'git branch -D'
    
    This destroys a local development branch, removing all history
    of that branch from ever existing.  If the branch is currently
    checked out we move back to the upstream revision.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Initial Contribution
    Add --inverse-regex option to forall subcommand
    
    Make it possible to exclude projects using regex/wildcard.
    
    The syntax is similar to that of the -r option, e.g.:
    
      repo forall -i ^platform/ ^device/ -c 'echo $REPO_PROJECT'
    
    Change-Id: Id250de5665152228c044c79337d3ac15b5696484
    Better error display on forall
    
    It was only displaying 'Project list error: GitError()'
    without any useful info about the project nor the error
    
    Change-Id: Iad66cbaa03cad1053b5ae9ecc90d7772aa42ac13
    Support filtering by group on forall and list subcmd
    
    Enable operating against groups of repositories. As it stands, it isn't
    compatible with `-r/--regex`.
    
    `repo forall -g groupname -c pwd` will  run `pwd` for all projects in
    groupname.
    
    `repo forall -g thisgroup,-butnotthisone -c pwd` will  run `pwd` for all
    projects in `thisgroup` but not `butnotthisone`.
    
    `repo list -g groupname -n` will list all the names of repos in
    `groupname`.
    
    Change-Id: Ia75c50ce52541d1c8cea2874b20a4db2e0e54960
    forall: use smart sync override manifest if it exists
    
    If a workspace is synced with the -s or -t option, the included projects
    may be different to those in the original manifest. However, when using
    the forall command, the list of the projects from the original manifest
    is used.
    
    If the smart sync manifest file exists, use it to override the original
    manifest.
    
    Change-Id: Iaefcbe148d2158ac046f158d98bbd8b5a5378ce7
    forall: Don't try to get lrev of projects in mirror workspace
    
    git rev-parse fails for projects that don't have an explicit revision
    specified, and don't have a branch of the same name as the default
    revision. This can be the case in a workspace synced with the smart
    sync (-s) or smart tag (-t) option.
    
    Change-Id: I19bfe9fe7396170379415d85f10f6440dc6ea08f
    forall: setenv, only encode val if encode exists
    
    Change-Id: I655e3043d0118c4e929897d3a51e5e013e5758dc
    Catch exceptions in project list generator
    
    If the generator that produces per-project worker arguments raises an
    exception it triggers python bug http://bugs.python.org/issue8296.
    Rewrite the generator expression as a generator function, and catch
    Exceptions and KeyboardInterrupts to end the iteration.
    
    Also add a pool worker initializer to disable SIGINT to prevent
    KeyboardInterrupts inside multiprocessing.Pool in the worker threads
    causing the same problem.
    
    Fixes easy-to-reproduce hangs when hitting ctrl-c during
    repo forall -c echo
    
    Change-Id: Ie4a65b3e1e07a64ed6bb6ff20f3912c4326718ca
    forall: use a generator to map the Pool
    
    Before, a list was generated, which is why there was a massive delay.
    
    Using a generator will allow processes to start straight away
    
    Change-Id: Ia325b0b340cc328c08c9bcc92a6709bbdaf6a664
    Add --jobs option to forall subcommand
    
    Enable '--jobs' ('-j') option in the forall subcommand. For -jn
    where n > 1, the '-p' option can no longer guarantee the
    continuity of console output between the project header and the
    output from the worker process.
    
    SIG_INT is sent to all worker processes upon keyboard interrupt
    (Ctrl+C).
    
    Bug: Issue 105
    Change-Id: If09afa2ed639d481ede64f28b641dc80d0b89a5c
    Add total count and iteration count to forall environment
    
    For long-running forall commands sometimes it's useful to know which
    iteration is currently running. Add REPO_I and REPO_COUNT environment
    variables to reflect the current iteration count as well as the total
    number of iterations so that the user can build simple status
    indicators.
    
    Example:
    
        $ repo forall -c 'echo $REPO_I / $REPO_COUNT; git gc'
        1 / 579
        Counting objects: 41, done.
        Delta compression using up to 8 threads.
        Compressing objects: 100% (19/19), done.
        Writing objects: 100% (41/41), done.
        Total 41 (delta 21), reused 41 (delta 21)
        2 / 579
        Counting objects: 53410, done.
        Delta compression using up to 8 threads.
        Compressing objects: 100% (10423/10423), done.
        Writing objects: 100% (53410/53410), done.
        Total 53410 (delta 42513), reused 53410 (delta 42513)
        3 / 579
        ...
    
    Change-Id: I9f28b0d8b7debe423eed3b4bc1198b23e40c0c50
    Signed-off-by: Mitchel Humpherys <mitchelh@codeaurora.org>
    Print project name for -p on mirror clients
    
    It doesn't make sense to print the relpath, since there's nothing
    checked out there and the dir shouldn't even exist.
    
    Change-Id: Id43631a8e0895929d3a5ad4ca8c2dc9e3d233e70
    Add regex support for subcommand forall
    
    Filter the project list based on regex or wildcard matching
    of strings, then we can handle subset of all projects.
    
    Change-Id: Ib6c23aec79e7d981f7b6a5eb0ae93c44effec467
    Signed-off-by: Zhiguang Li <muzili@gmail.com>
    Add option to abort on error in forall
    
    Add a new option (-e, --abort-on-errors) which will cause forall to
    abort without iterating through remaining projects if a command
    exits unsuccessfully.
    
    Bug: Issue 17
    Change-Id: Ibea405e0d98b575ad3bda719d511f6982511c19c
    Signed-off-by: Victor Boivie <victor.boivie@sonyericsson.com>
    Change print statements to work in python3
    
    This is part of a series of changes to introduce Python3 support.
    
    Change-Id: I373be5de7141aa127d7debdbce1df39148dbec32
    Add pylint configuration and instructions
    
    pylint configuration file (.pylintrc) is added, and submission
    instructions are updated to include pylint usage steps.
    
    Deprecated pylint suppression (`disable-msg`) is updated in a few
    modules to make it work properly with the latest version (0.26).
    
    Change-Id: I4ec2ef318e23557a374ecdbf40fe12645766830c
    More coding style cleanup
    
    Fixing more issues found with pylint.  Some that were supposed to
    have been fixed in the previous sweep (Ie0db839e) but were missed:
    
    C0321: More than one statement on a single line
    W0622: Redefining built-in 'name'
    
    And some more:
    
    W0631: Using possibly undefined loop variable 'name'
    W0223: Method 'name' is abstract in class 'name' but is not overridden
    W0231: __init__ method from base class 'name' is not called
    
    Change-Id: Ie119183708609d6279e973057a385fde864230c3
    Coding style cleanup
    
    Fix the following issues reported by pylint:
    
    C0321: More than one statement on a single line
    W0622: Redefining built-in 'name'
    W0612: Unused variable 'name'
    W0613: Unused argument 'name'
    W0102: Dangerous default value 'value' as argument
    W0105: String statement has no effect
    
    Also fixed a few cases of inconsistent indentation.
    
    Change-Id: Ie0db839e7c57d576cff12d8c055fe87030d00744
    Add project annotation handling to repo
    
    Allow the optional addition of "annotation" nodes nested under
    projects.  Each annotation node must have "name" and "value"
    attributes.  These name/value pairs will be exported into the
    environment during any forall command, prefixed with "REPO__"
    
    In addition, an optional "keep" attribute with case insensitive "true"
    or "false" values can be included to determine whether the annotation
    will be exported with 'repo manifest'
    
    Change-Id: Icd7540afaae02c958f769ce3d25661aa721a9de8
    Signed-off-by: James W. Mills <jameswmills@gmail.com>
    forall: Silently skip missing projects
    
    If a project is missing locally, it might be OK to skip over it
    and continue running the same command in other projects.
    
    Bug: REPO-43
    Change-Id: I64f97eb315f379ab2c51fc53d24ed340b3d09250
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    (cherry picked from commit d4cd69bdef28c5a9287c85c48a18ce621eba689d)
    Encode the environment variables passed to git
    
    Windows allows the environment to have unicode values.
    This will cause Python to fail to execute the command.
    
    Change-Id: I37d922c3d7ced0d5b4883f0220346ac42defc5e9
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    forall: Silently skip missing projects
    
    If a project is missing locally, it might be OK to skip over it
    and continue running the same command in other projects.
    
    Bug: REPO-43
    Change-Id: I64f97eb315f379ab2c51fc53d24ed340b3d09250
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Change project.revision to revisionExpr and revisionId
    
    The revisionExpr field now holds an expression from the manifest,
    such as "refs/heads/master", while revisionId holds the current
    commit-ish SHA-1 of the revisionExpr.  Currently that is only
    filled in if the manifest points directly to a SHA-1.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Change -p command to use stdout instead of stderr.
    Add -p to `repo forall` to improve output formatting
    
    When trying to read log output from many projects at once it can
    be difficult to make sense of which messages came from where.
    
    For many professional developers it is common to want to view the
    last week's worth of your work, so you can write a weekly summary
    of your activity for your status report.
    
    This is easier with the new -p option:
    
      repo forall -pc git log --reverse --since=1.week.ago --author=sop
    
    produces a report of all commits written by me in the last week,
    formatted in a paged output display, with headers inserted in
    front of each project's output.
    
    Where this can be even more useful is with git log's pickaxe,
    e.g. now we can use:
    
      repo forall -pc git log -Sbar v1.0..v1.1
    
    to locate all additions or removals of the symbol 'bar' since v1.0,
    up to and including v1.1.  Before displaying the matching commits in
    a project, a project header is shown, giving the user some context
    information for the matching results.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Fix formatting of 'repo help sync'
    
    The formatting for the enviroment variable section was incorrect.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Set forall environment variables to empty string if None
    
    If the value obtained is None we now set the variable to
    '' instead, in an attempt to make execve() happier about
    our 3rd argument, the env dictionary.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Allow repo forall -c on a mirror by using GIT_DIR as pwd
    
    We can permit a forall on a mirror, but only if we put
    the command into the git repository.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Export additional environment variables to repo forall:
    
    REPO_PATH is the path relative the the root of the client.
    
    REPO_REMOTE is the name of the remote system from the manifest.
    
    REPO_LREV is the name of the revision from the manifest, but
    translated to something the local repository knows.
    
    REPO_RREV is the name of the revision from the manifest.
    
    This allows us to do commands like:
    
      repo forall -c 'echo "(cd $REPO_PATH && git checkout `git rev-parse HEAD`)"'
    Initial Contribution
    Some fixes for supporting python3
    
    * Fix imports.
    * Use python3 syntax.
    * Wrap map() calls with list().
    * Use list() only wherever needed.
      (Thanks Conley!)
    * Fix dictionary iteration methods
      (s/iteritems/items/).
    * Make use of sorted() in appropriate places
    * Use iterators directly in the loop.
    * Don't use .keys() wherever it isn't needed.
    * Use sys.maxsize instead of sys.maxint
    
    TODO:
    * Make repo work fully with python3. :)
    
    Some of this was done by the '2to3' tool [1], by
    applying the needed fixes in a way that doesn't
    break compatibility with python2.
    
    Links:
    [1]: http://docs.python.org/2/library/2to3.html
    
    Change-Id: Ibdf3bf9a530d716db905733cb9bfef83a48820f7
    Signed-off-by: Chirayu Desai <cdesai@cyanogenmod.org>
    Add repo info command
    
    The info command will print information regarding the current manifest
    and local git branch. It will also show the difference of commits
    between the local branch and the remote branch.
    
    It also incorporates an overview command into info which shows commits
    over all branches.
    
    Change-Id: Iafedd978f44c84d240c010897eff58bbfbd7de71
    Change print statements to work in python3
    
    This is part of a series of changes to introduce Python3 support.
    
    Change-Id: I373be5de7141aa127d7debdbce1df39148dbec32
    Coding style cleanup
    
    Fix the following issues reported by pylint:
    
    C0321: More than one statement on a single line
    W0622: Redefining built-in 'name'
    W0612: Unused variable 'name'
    W0613: Unused argument 'name'
    W0102: Dangerous default value 'value' as argument
    W0105: String statement has no effect
    
    Also fixed a few cases of inconsistent indentation.
    
    Change-Id: Ie0db839e7c57d576cff12d8c055fe87030d00744
    Add "repo overview" command.
    
    The overview command shows an overview of each branch in all (or the
    specified) projects.  The overview lists any local commits that have
    not yet been merged into the project.
    
    The report output is inspired by the report displayed following a
    "repo prune" event, with the addition of listing the one-line log
    messages for each commit that is not yet merged.
    
    The report can also be filtered to show only active branches; by
    default all branches that have commits beyond the upstream HEAD will
    be listed.
    
    Change-Id: Ibe67793991ad1aa38de3bc9747de4ba64e5591aa
    Initial Contribution
    Clean up imports
    
    manifest_xml: import `HEAD` and `R_HEADS` from correct module
    version: import `HEAD` from correct module
    
    `HEAD` and `R_HEADS` should be imported from the git_refs module,
    where they are originally defined, rather than from the project
    module.
    
    repo: remove unused import of readline
    
    cherry_pick: import standard modules on separate lines
    smartsync: import subcmd modules explicitly from subcmd
    
    Use:
      `import re
      import sys`
    and
      `from subcmds.sync import Sync`
    
    Instead of:
      `import sys, re`
    and
      `from sync import Sync`
    
    Change-Id: Ie10dd6832710939634c4f5c86b9ba5a9cd6fc92e
    Aliasing sync -s to 'smartsync'
    
    This alias will let people use this command without having to
    remember the option.
    
    Change-Id: I3256d9e8e884c5be9e77f70e9cfb73e0f0c544c6
    Initial Contribution
    Provide detail print-out when not all projects of a branch are current.
    
    When current is "split" (i.e. some projects are current while others are not):
    - Disable 'not in' printout (i.e. will print out all projects)
    - Disable printing of multiple projects on one line
    - Print current projects in green, non-current in white
    
    Since using color to differentiate current from non-current in "split" cases:
    - In non-split cases also print out project names in color (green for current
      white for non-current)
    
    Change-Id: Ia6b826612c708447cecfe5954dc767f7b2ea2ea7
    Remove trailing whitespace
    
    Change-Id: I56bcb559431277d40070fa33c580c6c3525ff9bc
    Some fixes for supporting python3
    
    * Fix imports.
    * Use python3 syntax.
    * Wrap map() calls with list().
    * Use list() only wherever needed.
      (Thanks Conley!)
    * Fix dictionary iteration methods
      (s/iteritems/items/).
    * Make use of sorted() in appropriate places
    * Use iterators directly in the loop.
    * Don't use .keys() wherever it isn't needed.
    * Use sys.maxsize instead of sys.maxint
    
    TODO:
    * Make repo work fully with python3. :)
    
    Some of this was done by the '2to3' tool [1], by
    applying the needed fixes in a way that doesn't
    break compatibility with python2.
    
    Links:
    [1]: http://docs.python.org/2/library/2to3.html
    
    Change-Id: Ibdf3bf9a530d716db905733cb9bfef83a48820f7
    Signed-off-by: Chirayu Desai <cdesai@cyanogenmod.org>
    Change print statements to work in python3
    
    This is part of a series of changes to introduce Python3 support.
    
    Change-Id: I373be5de7141aa127d7debdbce1df39148dbec32
    More coding style cleanup
    
    Fixing more issues found with pylint.  Some that were supposed to
    have been fixed in the previous sweep (Ie0db839e) but were missed:
    
    C0321: More than one statement on a single line
    W0622: Redefining built-in 'name'
    
    And some more:
    
    W0631: Using possibly undefined loop variable 'name'
    W0223: Method 'name' is abstract in class 'name' but is not overridden
    W0231: __init__ method from base class 'name' is not called
    
    Change-Id: Ie119183708609d6279e973057a385fde864230c3
    Coding style cleanup
    
    Fix the following issues reported by pylint:
    
    C0321: More than one statement on a single line
    W0622: Redefining built-in 'name'
    W0612: Unused variable 'name'
    W0613: Unused argument 'name'
    W0102: Dangerous default value 'value' as argument
    W0105: String statement has no effect
    
    Also fixed a few cases of inconsistent indentation.
    
    Change-Id: Ie0db839e7c57d576cff12d8c055fe87030d00744
    branches: Enable output of multiple projects
    
    Fixes a bug introduced by 498a0e8a79ab76eeb6adc40f12b04d59820716f9
    ("Make 'repo branches -a' the default behavior").
    
    Change-Id: Ib739f82f4647890c46d7c9fb2f2e63a16a0481de
    branches: Describe output format in `repo help branches`
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Make 'repo branches -a' the default behavior
    
    Extensive discussion with users lead to the fact that needing to
    supply -a to view what they really wanted to see was just wrong.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Print '(no branches)' if the output of `repo branches` is empty
    
    This way its clear the command did something, and reported
    that it had nothing to show you, because you have no active
    branches in this client.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Add a repo branches subcommand to describe current branches
    
    We now display a summary of the available topic branches in this
    client, based upon a sorted union of all existing projects.
    
    Bug: REPO-21
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    init: Add no-tags and current branch options
    
    This avoids fetching tags and branches for huge manifests
    
    Change-Id: I19c9724d75364440b881b297d42b906f541f73ff
    init: Add --no-clone-bundle option
    
    Bug: Issue 218
    Change-Id: I42ba1f5fb9168875da0df6bdf4fe44c8d6498d54
    init: Respect --quiet option when synching manifest repository
    
    Change-Id: Ib58b7dd971670e0888e6428333050700e776b0de
    A couple of fixes to the init command's -p option.
    
    Adds windows as one of the allowed platforms flags.
    Fixes -p foo to append 'platform-foo', instead of each letter (list.extend
    expects a list and thus appends each char in the string, rather than the
    string itself).
    
    Change-Id: I73a92127ac29a32fc31b335cc54a246302904140
    init: don't call urllib.parse
    
    it's actually urllib.parse.urlparse
    
    Change-Id: Ie3532e54625e887c8682d92b932ea21a629e8d60
    Revert "Implementation of manifest defined githooks"
    
    This reverts commit 38e4387f8eb8cffd6359d726c38a7c524fef07e3.
    
    A "repo init" followed by "repo sync" is meant to be as safe as
    "git clone".  In particular it should not run arbitrary code provided
    by the manifest owner.
    
    It would still be nice to have support for manifest-defined git hooks
    --- they'd just need a prompt like the upload RepoHook has.  Hopefully
    a later change can bring them back.
    
    Change-Id: I5ecd90fb5c2ed64f103d856d1ffcba38a47b062d
    Signed-off-by: Jonathan Nieder <jrn@google.com>
    Implementation of manifest defined githooks
    
    When working within a team or corporation it is often
    useful/required to use predefined git templates. This
    change teaches repo to use a per-remote git hook template
    structure.
    
    The implementation is done as a continuation of the
    existing projecthook functionality. The terminology is
    therefore defined as projecthooks.
    
    The downloaded projecthooks are stored in the .repo
    directory as a metaproject separating them from the users
    project forest.
    
    The projecthooks are downloaded and set up when doing a
    repo init and updated for each new repo init.
    
    When downloading a mirror the projecthooks gits are
    not added to the bare forest since the intention is to
    ensure that the latest are used (allows for company policy
    enforcement).
    
    The projecthooks are defined in the manifest file in the
    remote element as a subnode, the name refers to the
    project name on the server referred to in the remote.
    <remote name="myremote ..>
       <projecthook name="myprojecthookgit" revision="myrevision"/>
    </remote>
    
    The hooks found in the projecthook revision supersede
    the stock hooks found in repo. This removes the need for
    updating the projecthook gits for repo stock hook changes.
    
    Change-Id: I6796b7b0342c1f83c35f4b3e46782581b069a561
    Signed-off-by: Patrik Ryd <patrik.ryd@stericsson.com>
    Signed-off-by: Ian Kumlien <ian.kumlien@gmail.com>
    pylint fixes for project.py
    
    Fix all the formatting warnings and unused variables
    
    Change-Id: I17d88a23572303879530077f3a80451de5417fbb
    Add --archive option to init to sync using git archive
    
    This significantly reduces sync time and used brandwidth as only
    a tar of each project's revision is checked out, but git is not
    accessible from projects anymore.
    
    This is relevant when git is not needed in projects but sync
    speed/brandwidth may be important like on CI servers when building
    several versions from scratch regularly for example.
    
    Archive is not supported over http/https.
    
    Change-Id: I48c3c7de2cd5a1faec33e295fcdafbc7807d0e4d
    Signed-off-by: Julien Campergue <julien.campergue@parrot.com>
    Move Python version checking to a separate module
    
    Add a new module with methods for checking the Python version.
    
    Instead of handling Python3 imports with try...except blocks, first
    check the python version and then import the relevant modules.  This
    makes the code a bit cleaner and will result in less diff when/if we
    remove support for Python < 3 later.
    
    Use the same mechanism to handle `input` vs. `raw_input` and add
    suppression of pylint warnings caused by redefinition of the built-in
    method `input`.
    
    Change-Id: Ia403e525b88d77640a741ac50382146e7d635924
    Also-by: Chirayu Desai <cdesai@cyanogenmod.org>
    Signed-off-by: Chirayu Desai <cdesai@cyanogenmod.org>
    Use reference also for manifest git
    
    When running 'repo init --reference=<mirror>', the mirror will be
    used for all projects except the manifest project. This is because
    the _InitGitDir function uses the 'repo.reference' git config
    value specified in the manifest git, which has no effect when
    creating the manifest git as that value will be set after the git
    has been successfully cloned.
    
    Information about where the manifest git is located on the server
    is only known when performing the 'repo init', so that information
    has to be provided when cloning the git in order for it to set up
    a proper mapping.
    
    Change-Id: I47a2c8b3267a4065965058718ce1def4ecb34d5a
    Signed-off-by: Chirayu Desai <cdesai@cyanogenmod.org>
    Special handling for manifest group "default"
    
    Change Details:
    * Make "default" a special manifest group that matches any project that
      does not have the special project group "notdefault"
    * Use "default" instead of "all,-notdefault" when user does not specify
      manifest group
    * Expand -g option help to include example usage of manifest groups
    
    Change Benefits:
    * Allow a more intuitive and expressive manifest groups specification:
      * "default" instead of "all,-notdefault"
      * "default,foo" instead of "all,-notdefault,foo"
      * "default,-foo" instead of "all,-notdefault,-foo"
      * "foo,-default" which has no equivalent
    * Default manifest groups behavior can be restored by the command
      'repo init -g default'. This is significantly more intuitive than the
      current equivalent command 'repo init -g all,-notdefault'.
    
    Change-Id: I6d0673791d64a650110a917c248bcebb23b279d3
    Fix: missing space in information message after repo init
    
    In the information message displayed after running repo init, there
    is a missing space:
    
      If this is not the directory in which you want to initializerepo
    
    Add a space.
    
    Change-Id: I20467673ba7481cfe782ba58ff6ed2f7ce9824a5
    Better error message when using --mirror in existing workspace
    
    If repo init is run with the --mirror option, repo checks if there
    is already a workspace initialized in the current location, and if
    so, exits with an error message:
    
      --mirror not supported on existing client
    
    This error can cause confusion; the users do not understand what
    is wrong and what they need to do to fix it.
    
    Change the error message to make it a bit clearer.
    
    Change-Id: Ifd06ef64fd264bd1117e4184c49afe0345b75d8c
    Allow init command to set options from environment variables
    
    The manifest URL and mirror location can be specified in environment
    variables which will be used if the options are not passed on the
    command line
    
    Change-Id: Ida87968b4a91189822c3738f835e2631e10b847e
    Tidy up code formatting a bit more
    
    Enable the following Pylint warnings:
    
      C0322: Operator not preceded by a space
      C0323: Operator not followed by a space
      C0324: Comma not followed by a space
    
    And make the necessary fixes.
    
    Change-Id: I74d74283ad5138cbaf28d492b18614eb355ff9fe
    Change print statements to work in python3
    
    This is part of a series of changes to introduce Python3 support.
    
    Change-Id: I373be5de7141aa127d7debdbce1df39148dbec32
    Convert prompt answers to lower case before checking
    
    When prompting for yes/no answers, convert the answer to lower
    case before comparing.  This makes it easier to catch answers
    like "Yes", "yes", and "YES" with a comparison only for "yes".
    
    Change-Id: I06da8281cec81a7438ebb46ddaf3344d12abe1eb
    Even more coding style cleanup
    
    Fixing some more pylint warnings:
    
    W1401: Anomalous backslash in string
    W0623: Redefining name 'name' from outer scope
    W0702: No exception type(s) specified
    E0102: name: function already defined line n
    
    Change-Id: I5afcdb4771ce210390a79981937806e30900a93c
    Show user about not initializing repo in current directory
    
    If the parent of current directory has an initialized repo,
    for example, if the current directory is
    '/home/users/harry/platform/ics', and there is an initialized repo
    in harry's home directory '/home/users/harry/.repo', when user
    run 'repo init' command, repo is always initialized to parent
    directory in '/home/users/harry/.repo', but most of time user
    intends to initialize repo in the current directory, this patch
    tells user how to do it.
    
    Change-Id: Id7a76fb18ec0af243432c29605140d60f3de85ca
    Use modern Python exception syntax
    
    "except Exception as e" instead of "except Exception, e"
    
    This is part of a transition to supporting Python 3.  Python >= 2.6
    support "as" syntax.
    
    Note: this removes Python 2.5 support.
    
    Change-Id: I309599f3981bba2b46111c43102bee38ff132803
    Coding style cleanup
    
    Fix the following issues reported by pylint:
    
    C0321: More than one statement on a single line
    W0622: Redefining built-in 'name'
    W0612: Unused variable 'name'
    W0613: Unused argument 'name'
    W0102: Dangerous default value 'value' as argument
    W0105: String statement has no effect
    
    Also fixed a few cases of inconsistent indentation.
    
    Change-Id: Ie0db839e7c57d576cff12d8c055fe87030d00744
    Expand ~ to user's home directory for --reference
    
    This allows a user to have a 'repo init' as:
      $ repo init -u ... --reference=~/mirror
    
    Change-Id: Ib85b7c8ffca9d732132c68fe9a8d7f0ab1fa9288
    Allow projects to be specified as notdefault
    
    Instead of every group being in the group "default", every project
    is now in the group "all".   A group that should not be downloaded
    by default may be added to the group "notdefault".
    
    This allows all group names to be positive (instead of removing groups
    directly in the manifest with -default) and offers a clear way of
    selecting every project (--groups all).
    
    Change-Id: I99cd70309adb1f8460db3bbc6eff46bdcd22256f
    init: Improved help text for the --mirror option
    
    Change-Id: Ia6032865f9296b29524c2c25b72bd8e175b30489
    Fix switching manifest branches using repo init -b
    
    See repo issue #46 :
            https://code.google.com/p/git-repo/issues/detail?id=46
    
    When using repo init -b on an already existing repository,
    the next sync will try to rebase changes coming from the old manifest
    branch onto the new, leading in the best case scenario to conflicts
    and in the worst case scenario to an incorrect "mixed up" manifest.
    
    This patch fixes this by deleting the "default" branch in the local
    manifest repository when the -d init switch is used, thus forcing
    repo to perform a fresh checkout of the new manifest branch
    
    Change-Id: I379e4875ec5357d8614d1197b6afbe58f9606751
    Fix syntax errors in subcmds/init.py
    
    Fixes three errors:
    Python doesn't like the line wrap after 'and'.
    platform.system is a function, needs to be platform.system().
    Typo all_platfroms instead of all_platforms.
    
    Change-Id: Ia875e521bc01ae2eb321ec62d839173c00f86c2d
    Add a --platform flag
    
    Projects may optionally specify their platform
    (eg, groups="platform-linux" in the manifest).
    
    By default, repo will automatically detect the platform. However,
    users may specify --platform=[auto|all|linux|darwin].
    
    Change-Id: Ie678851fb2fec5b0938aede01f16c53138a16537
    Refine groups functionality
    
    Every project is in group "default".  "-default" does not remove
    it from this project.  All group names specified in the manifest
    are positive names as opposed to a mix of negative and positive.
    
    Specified groups are resolved in order.  If init is supplied with
    --groups="group1,-group2", the following describes the project
    selection when syncing:
    
      * all projects in "group1" will be added, and
      * all projects in "group2" will be removed.
    
    Change-Id: I1df3dcdb64bbd4cd80d675f9b2d3becbf721f661
    Add manifest groups
    
    Allows specifying a list of groups with a -g argument to repo init.
    The groups act on a group= attribute specified on projects in the
    manifest.
    All projects are implicitly labelled with "default" unless they are
    explicitly labelled "-default".
    Prefixing a group with "-" removes matching projects from the list
    of projects to sync.
    If any non-inverted manifest groups are specified, the default label
    is ignored.
    
    Change-Id: I3a0dd7a93a8a1756205de1d03eee8c00906af0e5
    Reviewed-on: https://gerrit-review.googlesource.com/34570
    Reviewed-by: Shawn Pearce <sop@google.com>
    Tested-by: Shawn Pearce <sop@google.com>
    Revert "Default repo manifest settings in git config"
    
    This reverts commit ee1c2f5717fcc137ab887a4aae8a08d50a539b9a.
    
    This breaks a lot of buildbot systems. Rolling it back for now
    until we can understand what the breakage was and how to fix it.
    Don't prompt the user for name/email unless necessary
    
    If the user has already configured a workspace, use these values
    when re-running 'repo init'.
    
    Otherwise, if the user has global name and e-mail set, use these.
    
    It's always possible to override this and be prompted by specifying
    --config-name when running 'repo init'.
    
    Change-Id: If45f0e4b14884071439fb02709dc5cb53f070f60
    Default repo manifest settings in git config
    
    A default manifest URL can be specified using:
      git config --global repo-manifest.<id>.url <url>
    
    A default manifest server can be specified using:
      git config --global repo-manifest.<id>.server <url>
    
    A default git mirror reference can be specified using:
      git config --global repo-manifest.<id>.reference <path>
    
    This will allow the user to use 'repo init -u <id>' as
    a shorter alternative to specifying the full URL.
    
    Also, manifest server will not have to be specified in the
    manifest XML and the reference will not have to be specified
    on the command line. If they are, they will override these
    default values however.
    
    Change-Id: Ifdbc160bd5909ec7df9efb0c5d7136f1d9351754
    Signed-off-by: Victor Boivie <victor.boivie@sonyericsson.com>
    repo: capitalize default prompt char
    
    It is common in command line tools to indicate what the default answer
    will be if the user simply hits enter.  In repo, the display is just
    "y/n" with no indication as to which is the default.  So change the n
    to N in the messages since that is how repo operates.
    
    Change-Id: I81819ae630355072eb0365e59168b0921289498f
    sync: Support downloading bundle to initialize repository
    
    An HTTP (or HTTPS) based remote server may now offer a 'clone.bundle'
    file in each repository's Git directory. Over an http:// or https://
    remote repo will first ask for '$URL/clone.bundle', and if present
    download this to bootstrap the local client, rather than relying
    on the native Git transport to initialize the new repository.
    
    Bundles may be hosted elsewhere. The client automatically follows a
    HTTP 302 redirect to acquire the bundle file. This allows servers
    to direct clients to cached copies residing on content delivery
    networks, where the bundle may be closer to the end-user.
    
    Bundle downloads are resumeable from where they last left off,
    allowing clients to initialize large repositories even when the
    connection gets interrupted.
    
    If a bundle does not exist for a repository (a HTTP 404 response
    code is returned for '$URL/clone.bundle'), the native Git transport
    is used instead. If the client is performing a shallow sync, the
    bundle transport is not used, as there is no way to embed shallow
    data into the bundle.
    
    Change-Id: I05dad17792fd6fd20635a0f71589566e557cc743
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Add a --depth option to repo init.
    
    Change-Id: Id30fb4a85f4f8a1847420b0b51a86060041eb5bf
    Fixed problems w/ 2nd repo init if first repo init had bad URL.
    
    This is the simplest fix: if we had problems syncing the
    manifest.git directory and we were the ones that created it,
    we should delete it.  This doesn't try to do anything complex
    like try to recover from a .repo directory that got broken in
    some other way.
    
    This is filed as: <http://crosbug.com/13403>
    
    TEST=manual
    
    Init once with a bad URL:
      $ repo init -u http://foobar.example.com
      Getting manifest ...
         from http://foobar.example.com
      Connection closed by 172.22.121.77
      error: Couldn't resolve host 'foobar.example.com' while accessing http://foobar.example.com/info/refs
    
      fatal: HTTP request failed
      fatal: cannot obtain manifest http://foobar.example.com
    
    Init again: identical to the first.  Good:
      $ repo init -u http://foobar.example.com
      Getting manifest ...
         from http://foobar.example.com
      Connection closed by 172.22.121.77
      error: Couldn't resolve host 'foobar.example.com' while accessing http://foobar.example.com/info/refs
    
      fatal: HTTP request failed
      fatal: cannot obtain manifest http://foobar.example.com
    
    Init with correct URL:
      $ repo init -u http://git.chromium.org/git/manifest -m minilayout.xml
      Getting manifest ...
         from http://git.chromium.org/git/manifest
      [ ... cut ... ]
    
      repo initialized in /.../repoiniterr
    
    Try a bad URL after a good one; it doesn't get saved (good):
      $ repo init -u http://foobar.example.com
      Connection closed by 172.22.121.77
      error: Couldn't resolve host 'foobar.example.com' while accessing http://foobar.example.com/info/refs
    
      fatal: HTTP request failed
      fatal: cannot obtain manifest http://foobar.example.com
    
    Just to confirm, I can still do a good one after a bad...
      $ repo init -u http://git.chromium.org/git/manifest -m minilayout.xml
    
      Your Name  [George Washington]:
      Your Email [george@washington.example.com]:
    
      Your identity is: George Washington <george@washington.example.com>
      is this correct [y/n]? y
    
      repo initialized in /.../repoiniterr
    
    Change-Id: I1692821a330d97b1d218b2e191a93245b33f2362
    sync: Enable use of git clone --reference
    
    Use git clone to initialize a new repository, and when possible
    allow callers to use --reference to reuse an existing checkout as
    the initial object storage area for the new checkout.
    
    Change-Id: Ie27f760247f311ce484c6d3e85a90d94da2febfc
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Allow 'y' as a valid response when confirming identity
    
    I prefer having to type only one character rather than all three,
    and it seems like other confirmation prompts use the same style.
    Introduce manifest format using git submodules
    
    If a manifest top level directory contains '.gitmodules' we now
    assume this is a git module format manifest and switch to using
    that code, rather than the legacy XML based manifest.
    
    At the same time, we move the bare repository for a project from
    $TOP/.repo/projects/$REPO_PATH.git to be $REPO_NAME.git instead.
    This makes it easier for us to later support a repo init from an
    existing work tree, as we can more accurately predict the path of
    the project's repository in the workspace.  It also means that the
    $TOP/.repo/projects/ directory is layed out like a mirror would be.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    sync: Support upgrading manifest formats
    
    If the manifest format changes during init or sync we need to do
    a full reparse of the manifest, and possibly allow the new object
    to reconfigure the local workspace to match its expectations.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    init: add -o, --origin to name manifest remote
    
    The -o option permits the user to control the name of the manifest's
    remote, which normally is hardcoded to be 'origin', but can differ
    because we derive it at runtime from the configuration file.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    init: Ensure repo.mirror is noticed once set
    
    If we don't clear the cache, there can be a timestamp race between
    the pickle file and the raw text file, and we may not pick up the
    edit when we create a new config object around the same path name.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Abstract manifest branch creation from init to the manifest object
    
    This permits the XML style manifest to use 'default', while other
    types can use their own creation strategy for the current branch.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    init: Allow -m only on XML formatted manifest
    
    If the manifest is the newer SubmoduleManifest style, then the -m
    option makes no sense, as you cannot select a specific file within
    the current branch.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Try to prevent 'repo sync' as a user name
    
    When someone copies and pastes a setup line from a web page,
    they might actually copy 'repo sync' onto the clipboard and wind
    up pasting it into the "Your Name" prompt.  This means they will
    initialize their client with the user name of "repo sync", creating
    some rather funny looking commits later on.  For example:
    
      To setup your source tree:
    
        mkdir ~/code
        cd ~/code
        repo init -u git://....
        repo sync
    
    If this entire block was just blindly copy and pasted into the
    terminal, the shell won't read "repo sync" but "repo init" will.
    
    By showing the user their full identity string, and asking them
    to confirm it before we continue, we can give the hapless user a
    chance to recover from this mistake, without unfairly harming those
    who were actually named 'repo' by their parents.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Refactor git version detection for reuse
    
    This way we can use it to detect feature support in the underlying
    git, such as new options or commands that have been added in more
    recent versions.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Change project.revision to revisionExpr and revisionId
    
    The revisionExpr field now holds an expression from the manifest,
    such as "refs/heads/master", while revisionId holds the current
    commit-ish SHA-1 of the revisionExpr.  Currently that is only
    filled in if the manifest points directly to a SHA-1.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Refactor how projects parse remotes so it can be replaced
    
    We now feed Project a RemoteSpec, instead of the Remote directly
    from the XmlManifest.  This way the RemoteSpec already has the
    full project URL, rather than just the base, permitting other
    types of manifests to produce the URL in their own style.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Improve the help text for 'repo init'
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Clarify options that control the repo executable version
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Change repo sync to be more friendly when updating the tree
    
    We now try to sync all projects that can be done safely first, before
    we start rebasing user commits over the upstream.  This has the nice
    effect of making the local tree as close to the upstream as possible
    before the user has to start resolving merge conflicts, as that extra
    information in other projects may aid in the conflict resolution.
    
    Informational output is buffered and delayed until calculation for
    all projects has been done, so that the user gets one concise list
    of notice messages, rather than it interrupting the progress meter.
    
    Fast-forward output is now prefixed with the project header, so the
    user can see which project that update is taking place in, and make
    some relation of the diffstat back to the project name.
    
    Rebase output is now prefixed with the project header, so that if
    the rebase fails, the user can see which project we were operating
    on and can try to address the failure themselves.
    
    Since rebase sits on a detached HEAD, we now look for an in-progress
    rebase during sync, so we can alert the user that the given project
    is in a state we cannot handle.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Make 'repo start' restartable upon failures
    
    If `repo start foo` fails due to uncommitted and unmergeable changes
    in a single project, we have switched half of the projects over to
    the new target branches, but didn't on the one that failed to move.
    
    This change improves the situation by doing three things differently:
    
    - We keep going when we encounter an error, so other projects
      that can successfully switch still switch.
    
    - We ignore projects whose current branch is already on the
      requested name; they are logically already setup.
    
    - We checkout the branch if it already exists, rather than
      trying to recreate the branch.
    
    Bug: REPO-22
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Fix repo re-init in a mirror to not prompt
    
    On a mirror client we don't prompt for user.name,user.email as the
    data is only necessary if you will make new commits.  On a re-init
    we were testing the command line option, not the existing IsMirror
    property from the manifest configuration file.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Allow repo init to restart if URL was initially invalid
    
    This allows the user to run "repo init -u" again after an
    initial attempt failed due to an invalid URL.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Give a more friendly error in 'repo init' if manifest url is invalid
    
    Instead of a stack trace ending in origin/master not existing we
    now tell the user the manifest url is invalid if 'git fetch' has
    failed out early.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Support "repo init -b foo && repo sync" to switch baselines
    
    We now correctly support re-initializing an existing client to point
    to a different branch of the same manifest repository, effectively
    allowing the client to switch the baseline it is operating on.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Don't permit "repo init --mirror" in an existing client
    
    Simply setting repo.mirror true doesn't make a client into a mirror.
    The on-disk layout is completely wrong for a mirror repository,
    and until we fix our layout for a non-mirror client to more closely
    resemble the upstream we can't do anything to easily turn on or
    turn off the mirror status flag.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Don't permit users to run repo status in a mirror client
    
    If a client was created with "repo init --mirror" then there are
    no working directories present, and no files checked out.  Using
    a command like "repo status" in this context makes no sense, and
    actually throws back a Pytyon traceback at the console when the
    underlying commands fail out.
    
    We now tag commands with the MirrorSafeCommand type if they are
    able to be executed within a mirror directory safely.  Using a
    command in a mirror which lacks this base class results in a
    useful error letting you know the command isn't supported.
    
    Bug: REPO-14
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Add 'repo init --mirror' to download a complete forrest
    
    The mirror option downloads a complete forrest (as described by the
    manifest) and creates a replica of the remote repositories rather
    than a client working directory.  This permits other clients to
    sync off the mirror site.
    
    A mirror can be positioned in a "DMZ", where the mirror executes
    "repo sync" to obtain changes from the external upstream and
    clients inside the protected zone operate off the mirror only,
    and therefore do not require direct git:// access to the external
    upstream repositories.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Initial Contribution
    Fix 'repo cherry-pick' to avoid hanging on commit-msg update.
    
    After performing the actual cherry-pick operation, the code
    in cherry_pick.py opens a pipe to 'git commit -F' to rewrite the commit
    message, emits the fixed-up commit msg to the pipe, then waits
    for 'git commit' to complete. The child 'git' process winds up
    hanging while reading from the pipe, however, since the parent
    process still has it open. To fix the hang, change the parent process
    to close its end of the pipe after it has emitted the message.
    
    Change-Id: I5929371e69a5b076f09009d00d40a2c72ac8ac33
    Fix: Missing spaces in printed messages
    
    Several messages are printed with the `print` method and the message
    is split across two lines, i.e.:
    
     print('This is a message split'
           'across two source code lines')
    
    Which causes the message to be printed as:
    
     This is a message splitacross two source code lines
    
    Add a space at the end of the first line before the line break:
    
     print('This is a message split '
           'across two source code lines'
    
    Also correct a minor spelling mistake.
    
    Change-Id: Ib98d93fcfb98d78f48025fcc428b6661380cff79
    Add missing sys module when referencing stderr
    
    `repo cherry-pick` was broken because we were referencing stderr
    instead of sys.stderr.  This should fix it.
    
    Change-Id: I67f25c3a0790d029edc65732c319df7c684546c8
    Change print statements to work in python3
    
    This is part of a series of changes to introduce Python3 support.
    
    Change-Id: I373be5de7141aa127d7debdbce1df39148dbec32
    Clean up imports
    
    manifest_xml: import `HEAD` and `R_HEADS` from correct module
    version: import `HEAD` from correct module
    
    `HEAD` and `R_HEADS` should be imported from the git_refs module,
    where they are originally defined, rather than from the project
    module.
    
    repo: remove unused import of readline
    
    cherry_pick: import standard modules on separate lines
    smartsync: import subcmd modules explicitly from subcmd
    
    Use:
      `import re
      import sys`
    and
      `from subcmds.sync import Sync`
    
    Instead of:
      `import sys, re`
    and
      `from sync import Sync`
    
    Change-Id: Ie10dd6832710939634c4f5c86b9ba5a9cd6fc92e
    Remove unused imports
    
    There are several imports that are not used.  Remove them.
    
    Change-Id: I2ac3be66827bd68d3faedcef7d6bbf30ea01d3f2
    Added repo cherry-pick command
    
    It is undesired to have the same Change-Id:-line for two separate
    commits, and when cherry-picking, the user must manually change it.
    
    If this is not done, bad things may happen (such as when the user
    is uploading the cherry-picked commit to Gerrit, it will instead
    see it as a new patch-set for the original change, or worse).
    
    repo cherry-pick works the same was as git cherry-pick, except that
    it replaces the Change-Id with a new one and adds a reference
    back to the commit from where it was picked.
    
    On failures (when git can not successfully apply the cherry-picked
    commit), instructions will be written to the user.
    
    Change-Id: I5a38b89839f91848fad43386d43cae2f6cdabf83
    Some fixes for supporting python3
    
    * Fix imports.
    * Use python3 syntax.
    * Wrap map() calls with list().
    * Use list() only wherever needed.
      (Thanks Conley!)
    * Fix dictionary iteration methods
      (s/iteritems/items/).
    * Make use of sorted() in appropriate places
    * Use iterators directly in the loop.
    * Don't use .keys() wherever it isn't needed.
    * Use sys.maxsize instead of sys.maxint
    
    TODO:
    * Make repo work fully with python3. :)
    
    Some of this was done by the '2to3' tool [1], by
    applying the needed fixes in a way that doesn't
    break compatibility with python2.
    
    Links:
    [1]: http://docs.python.org/2/library/2to3.html
    
    Change-Id: Ibdf3bf9a530d716db905733cb9bfef83a48820f7
    Signed-off-by: Chirayu Desai <cdesai@cyanogenmod.org>
    More coding style cleanup
    
    Fixing more issues found with pylint.  Some that were supposed to
    have been fixed in the previous sweep (Ie0db839e) but were missed:
    
    C0321: More than one statement on a single line
    W0622: Redefining built-in 'name'
    
    And some more:
    
    W0631: Using possibly undefined loop variable 'name'
    W0223: Method 'name' is abstract in class 'name' but is not overridden
    W0231: __init__ method from base class 'name' is not called
    
    Change-Id: Ie119183708609d6279e973057a385fde864230c3
    Initial Contribution
    Change print statements to work in python3
    
    This is part of a series of changes to introduce Python3 support.
    
    Change-Id: I373be5de7141aa127d7debdbce1df39148dbec32
    Coding style cleanup
    
    Fix the following issues reported by pylint:
    
    C0321: More than one statement on a single line
    W0622: Redefining built-in 'name'
    W0612: Unused variable 'name'
    W0613: Unused argument 'name'
    W0102: Dangerous default value 'value' as argument
    W0105: String statement has no effect
    
    Also fixed a few cases of inconsistent indentation.
    
    Change-Id: Ie0db839e7c57d576cff12d8c055fe87030d00744
    manifest: record the original revision when in -r mode.
    
    Currently when doing a sync against a revision locked manifest,
    sync has no option but to fall back to sync'ing the entire refs space;
    it doesn't know which ref to ask for that contains the sha1 it wants.
    
    This sucks if we're in -c mode; thus when we generate a revision
    locked manifest, record the originating branch- and try syncing that
    branch first.  If the sha1 is found within that branch, this saves
    us having to pull down the rest of the repo- a potentially heavy
    saving.
    
    If that branch doesn't have the desired sha1, we fallback to sync'ing
    everything.
    
    Change-Id: I99a5e44fa1d792dfcada76956a2363187df94cf1
    `repo manifest`: default to stdout if no "-o"
    
    Change-Id: I1b0ff9ed5df6386f0c2a851c6c48d063199fe663
    manifest: Support --upgrade to submodule format, from XML
    
    By running `repo manifest --uprade` an administrator can update the
    current manifest format from the XML format to submodule format, but
    we need all projects to be checked out in a work tree for this to
    function correctly.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Introduce manifest format using git submodules
    
    If a manifest top level directory contains '.gitmodules' we now
    assume this is a git module format manifest and switch to using
    that code, rather than the legacy XML based manifest.
    
    At the same time, we move the bare repository for a project from
    $TOP/.repo/projects/$REPO_PATH.git to be $REPO_NAME.git instead.
    This makes it easier for us to later support a repo init from an
    existing work tree, as we can more accurately predict the path of
    the project's repository in the workspace.  It also means that the
    $TOP/.repo/projects/ directory is layed out like a mirror would be.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    manifest: Only support -o option on XML formatted manifest
    
    If the manifest isn't a single file format manifest, the -o option
    makes no sense, as you cannot export multiple files to a single
    stream for display or redirection.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    manifest: Only display XML help on XML manifest
    
    Some of the help text is only related to the XML formatted manifest,
    so only display that text if that is the current format.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Add repo manifest -o to save a manifest
    
    This can be useful to create a new manifest from an existing client,
    especially if the client wants to use the "-r" option to set each
    project's revision to the current commit SHA-1, making a sort of a
    tag file that can be used to recreate this exact state elsewhere.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Add a 'repo manifest' command whose help is the manifest file format
    
    This should make it easier for users to discover the file format
    on their own, and read about it.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Don't permit users to run repo status in a mirror client
    
    If a client was created with "repo init --mirror" then there are
    no working directories present, and no files checked out.  Using
    a command like "repo status" in this context makes no sense, and
    actually throws back a Pytyon traceback at the console when the
    underlying commands fail out.
    
    We now tag commands with the MirrorSafeCommand type if they are
    able to be executed within a mirror directory safely.  Using a
    command in a mirror which lacks this base class results in a
    useful error letting you know the command isn't supported.
    
    Bug: REPO-14
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Add 'repo version' to describe what code we are running
    
    I meant to have this in here, so clients can more easily report
    what version of repo they are running.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Initial Contribution
    Tidy up code formatting a bit more
    
    Enable the following Pylint warnings:
    
      C0322: Operator not preceded by a space
      C0323: Operator not followed by a space
      C0324: Comma not followed by a space
    
    And make the necessary fixes.
    
    Change-Id: I74d74283ad5138cbaf28d492b18614eb355ff9fe
    Change print statements to work in python3
    
    This is part of a series of changes to introduce Python3 support.
    
    Change-Id: I373be5de7141aa127d7debdbce1df39148dbec32
    Even more coding style cleanup
    
    Fixing some more pylint warnings:
    
    W1401: Anomalous backslash in string
    W0623: Redefining name 'name' from outer scope
    W0702: No exception type(s) specified
    E0102: name: function already defined line n
    
    Change-Id: I5afcdb4771ce210390a79981937806e30900a93c
    Remove unused imports
    
    There are several imports that are not used.  Remove them.
    
    Change-Id: I2ac3be66827bd68d3faedcef7d6bbf30ea01d3f2
    Fix format string bugs in grep
    
    This fixes some format string bugs in grep which cause repo to with
    "TypeError: not enough arguments for format string" when grepping and
    the output contains a valid Python format string.
    
    Change-Id: Ice8968ea106148d409490e4f71a2833b0cc80816
    grep: Only use --color on git 1.6.3 and later
    
    The --color flag wasn't introduced until git 1.6.3.  Prior to that
    version, `git grep --color` just produces a fatal error, as it is
    an unsupported option.  Since this is just pretty output and is not
    critical to execution, we can simply omit the option if the version
    of git we are running on doesn't support it.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Clarify the option section header in 'repo help grep'
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Add 'repo grep' to support searching all projects
    
    Users can now use 'repo grep' to search all projects, rather than
    'repo forall -c git grep'.  Its not only shorter to type, but it
    also filters results better by highlighting which projects matched
    in the client workspace.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Support filtering by group on forall and list subcmd
    
    Enable operating against groups of repositories. As it stands, it isn't
    compatible with `-r/--regex`.
    
    `repo forall -g groupname -c pwd` will  run `pwd` for all projects in
    groupname.
    
    `repo forall -g thisgroup,-butnotthisone -c pwd` will  run `pwd` for all
    projects in `thisgroup` but not `butnotthisone`.
    
    `repo list -g groupname -n` will list all the names of repos in
    `groupname`.
    
    Change-Id: Ia75c50ce52541d1c8cea2874b20a4db2e0e54960
    Remove unused show_smart option on list and info commands
    
    Change-Id: Idf0e161a0b0cc23a5a3ee44d18cb797162cfdd7b
    Add regex support for subcommand forall
    
    Filter the project list based on regex or wildcard matching
    of strings, then we can handle subset of all projects.
    
    Change-Id: Ib6c23aec79e7d981f7b6a5eb0ae93c44effec467
    Signed-off-by: Zhiguang Li <muzili@gmail.com>
    list: add name-only and path-only options
    
    `repo list -n` prints only the name of the projects.
    `repo list -p` prints only the path of the projects.
    
    Change-Id: If7d78eb2651f0b1b2fe555dc286bd2bdcad0d56d
    Signed-off-by: Chirayu Desai <cdesai@cyanogenmod.org>
    Change print statements to work in python3
    
    This is part of a series of changes to introduce Python3 support.
    
    Change-Id: I373be5de7141aa127d7debdbce1df39148dbec32
    Add regex matching to repo list command
    
    The repo list -r command will execute a regex search for every
    argument provided on both the project name and the project
    worktree path.
    
    Useful for finding rarely used gits.
    
    Change-Id: Iaff90dd36c240b3d5d74817d11469be22d77ae03
    Add 'list' command to repo.
    
    This isn't a required command, but might be more discoverable for
    repo newbies?
    
    Change-Id: If357346f234774d42e04e024e65acdaf6dca6c62
    upload: short circuit when nothing is pending
    
    When nothing is pending, most of this code is already short-circuited.
    Hoist the single check up to make this more obvious/slightly faster.
    
    Change-Id: Iec3a7e08eacd23a7c5f964900d5776bf5252c804
    RepoHook: allow users to approve hooks via manifests
    
    The constant prompting when registered hooks change can be tedious and
    has a large multiplication factor when the project is large (e.g. the
    AOSP).  It gets worse as people want to write more checks, hooks, docs,
    and tests (or fix bugs), but every CL that goes in will trigger a new
    prompt to approve.
    
    Let's tweak our trust model when it comes to hooks.  Since people start
    off by calling `repo init` with a URL to a manifest, and that manifest
    defines all the hooks, anchor trust in that.  This requires that we get
    the manifest over a trusted link (e.g. https or ssh) so that it can't
    be MITM-ed.  If the user chooses to use an untrusted link (e.g. git or
    http), then we'll fallback to the existing hash based approval.
    
    Bug: Issue 226
    Change-Id: I77be9e4397383f264fcdaefb582e345ea4069a13
    upload: report names of uncommitted files
    
    When there are uncommitted files in the tree, 'repo upload' stops to
    ask if it is OK to continue, but does not report the actual names of
    uncommitted files.
    
    This patch adds plumbing to have the outstanding file names reported
    if desired.
    
    BUG=None
    TEST=verified that 'repo upload' properly operates with the following
        conditions present in the tree:
        . file(s) modified locally
        . file(s) added to index, but not committed
        . files not known to git
        . no modified files (the upload proceeds as expected)
    
    Change-Id: If65d5f8e8bcb3300c16d85dc5d7017758545f80d
    Signed-off-by: Vadim Bendebury <vbendeb@chromium.org>
    Signed-off-by: Vadim Bendebury <vbendeb@google.com>
    Define unicode as str if using Python 3
    
    The unicode object was renamed to str in Python 3
    
    Change-Id: I1e4972fb07b313d3462587b3059bb3638d779625
    Add reviewers automatically from project's git config
    
    The `review.URL.autocopy` setting sends email notification to the
    named reviewers, but does not add them as reviewer on the uploaded
    change.
    
    Add a new setting `review.URL.autoreviewer`.  The named reviewers
    will be added as reviewer on the uploaded change.
    
    Change-Id: I3fddfb49edf346f8724fe15b84be8c39d43e7e65
    Signed-off-by: bijia <bijia@xiaomi.com>
    Don't backtrace when current branch is not uploadable.
    
    The backtrace currently occurs when one uses the "--cbr" argument with
    the repo upload subcommand if the current branch is not tracking an
    upstream branch. There may be other cases that would backtrace as well,
    but this is the only one I found so far.
    
    Change-Id: Ie712fbb0ce3e7fe3b72769fca89cc4c0e3d2fce0
    Only check merge destination if it isn't None
    
    Change-Id: Ifb1dcd07142933489e93a1f4f03e38289087b609
    Fix indentation
    
    git-repo uses 2 space indentation.  A couple of recent changes
    introduced 4 space indentation in some modules.
    
    Change-Id: Ia4250157c1824c1b5e7d555068c4608f995be9da
    repo: Support multiple branches for the same project.
    
    It is often useful to be able to include the same project more than
    once, but with different branches and placed in different paths in the
    workspace. Add this feature.
    
    This CL adds the concept of an object directory. The object directory
    stores objects that can be shared amongst several working trees. For
    newly synced repositories, we set up the git repo now to share its
    objects with an object repo.
    
    Each worktree for a given repo shares objects, but has an independent
    set of references and branches. This ensures that repo only has to
    update the objects once; however the references for each worktree are
    updated separately. Storing the references separately is needed to
    ensure that commits to a branch on one worktree will not change the
    HEAD commits of the others.
    
    One nice side effect of sharing objects between different worktrees is
    that you can easily cherry-pick changes between the two worktrees
    without needing to fetch them.
    
    Bug: Issue 141
    Change-Id: I5e2f4e1a7abb56f9d3f310fa6fd0c17019330ecd
    Don't upload when dest branch is not merge branch
    
    Example:
    - `repo init -b master` / sync a project
    - In one project: `git checkout -b work origin/branch-thats-not-master`
    - make some changes, `git commit`
    - `repo upload .`
    - Upload will now be skipped with a warning instead of being uploaded to
      master
    
    Change-Id: I990b36217b75fe3c8b4d776e7fefa1c7d9ab7282
    don't pass project revision to UploadForReview
    
    Passing a project revisionExpr to UploadForReview will cause it to
    try to push to refs/for/<sha> if the revision points to a sha
    instead of a branch.  Pass None for dest_branch if no destination
    branch has been specified, which will cause UploadForReview to
    upload to the merge branch.
    
    There is room for further improvement, the user prompts will
    still print "Upload project <project> to remote branch <sha>",
    and then upload to the merge branch and not the sha, but that
    is the same behavior that was in 1.12.2.
    
    Change-Id: I06c510336ae67ff7e68b5b69e929693179d15c0b
    upload: fix display of destination branch for SingleBranch
    
    The command `repo upload --cbr -D <some branch>` will display
    the default revision, and not the actual destination branch.
    
    Fix that and display the branch to which the change will be
    uploaded to.
    
    Change-Id: I712ed0871c819dce6774c47254dac4efec4532e0
    Fix a few issues with dest-branch and multiples
    
    This fixes dest-branch display with >1 branch being uploaded to at
    once, and correctly handles setting the target branch in that case.
    
    Change-Id: If5e9c7ece02cc0d903e2cb377485ebea73a07107
    Fix a bug in repo upload --cbr
    
    repo upload --cbr bailed out if some branches did not have
    modifications when it is used.
    
    Change-Id: I35f264ff7d77bb4bf8f26b4c3faffa184920b6c5
    Send reviews to a different branch from fetch
    
    This adds the ability to have reviews pushed to a different branch
    from the one on which changes are based. This is useful for "gateway"
    systems without smartsync.
    
    Change-Id: I3a8a0fabcaf6055e62d3fb55f89c944e2f81569f
    Move Python version checking to a separate module
    
    Add a new module with methods for checking the Python version.
    
    Instead of handling Python3 imports with try...except blocks, first
    check the python version and then import the relevant modules.  This
    makes the code a bit cleaner and will result in less diff when/if we
    remove support for Python < 3 later.
    
    Use the same mechanism to handle `input` vs. `raw_input` and add
    suppression of pylint warnings caused by redefinition of the built-in
    method `input`.
    
    Change-Id: Ia403e525b88d77640a741ac50382146e7d635924
    Also-by: Chirayu Desai <cdesai@cyanogenmod.org>
    Signed-off-by: Chirayu Desai <cdesai@cyanogenmod.org>
    Some fixes for supporting python3
    
    * Fix imports.
    * Use python3 syntax.
    * Wrap map() calls with list().
    * Use list() only wherever needed.
      (Thanks Conley!)
    * Fix dictionary iteration methods
      (s/iteritems/items/).
    * Make use of sorted() in appropriate places
    * Use iterators directly in the loop.
    * Don't use .keys() wherever it isn't needed.
    * Use sys.maxsize instead of sys.maxint
    
    TODO:
    * Make repo work fully with python3. :)
    
    Some of this was done by the '2to3' tool [1], by
    applying the needed fixes in a way that doesn't
    break compatibility with python2.
    
    Links:
    [1]: http://docs.python.org/2/library/2to3.html
    
    Change-Id: Ibdf3bf9a530d716db905733cb9bfef83a48820f7
    Signed-off-by: Chirayu Desai <cdesai@cyanogenmod.org>
    Fix: Missing spaces in printed messages
    
    Several messages are printed with the `print` method and the message
    is split across two lines, i.e.:
    
     print('This is a message split'
           'across two source code lines')
    
    Which causes the message to be printed as:
    
     This is a message splitacross two source code lines
    
    Add a space at the end of the first line before the line break:
    
     print('This is a message split '
           'across two source code lines'
    
    Also correct a minor spelling mistake.
    
    Change-Id: Ib98d93fcfb98d78f48025fcc428b6661380cff79
    Tidy up code formatting a bit more
    
    Enable the following Pylint warnings:
    
      C0322: Operator not preceded by a space
      C0323: Operator not followed by a space
      C0324: Comma not followed by a space
    
    And make the necessary fixes.
    
    Change-Id: I74d74283ad5138cbaf28d492b18614eb355ff9fe
    Fix inconsistent indentation
    
    The repo coding style is to indent at 2 characters, but there are
    many places where this is not followed.
    
    Enable pylint warning "W0311: Bad indentation" and make sure all
    indentation is at multiples of 2 characters.
    
    Change-Id: I68f0f64470789ce2429ab11104d15d380a63e6a8
    Change print statements to work in python3
    
    This is part of a series of changes to introduce Python3 support.
    
    Change-Id: I373be5de7141aa127d7debdbce1df39148dbec32
    Convert prompt answers to lower case before checking
    
    When prompting for yes/no answers, convert the answer to lower
    case before comparing.  This makes it easier to catch answers
    like "Yes", "yes", and "YES" with a comparison only for "yes".
    
    Change-Id: I06da8281cec81a7438ebb46ddaf3344d12abe1eb
    Even more coding style cleanup
    
    Fixing some more pylint warnings:
    
    W1401: Anomalous backslash in string
    W0623: Redefining name 'name' from outer scope
    W0702: No exception type(s) specified
    E0102: name: function already defined line n
    
    Change-Id: I5afcdb4771ce210390a79981937806e30900a93c
    Use modern Python exception syntax
    
    "except Exception as e" instead of "except Exception, e"
    
    This is part of a transition to supporting Python 3.  Python >= 2.6
    support "as" syntax.
    
    Note: this removes Python 2.5 support.
    
    Change-Id: I309599f3981bba2b46111c43102bee38ff132803
    Coding style cleanup
    
    Fix the following issues reported by pylint:
    
    C0321: More than one statement on a single line
    W0622: Redefining built-in 'name'
    W0612: Unused variable 'name'
    W0613: Unused argument 'name'
    W0102: Dangerous default value 'value' as argument
    W0105: String statement has no effect
    
    Also fixed a few cases of inconsistent indentation.
    
    Change-Id: Ie0db839e7c57d576cff12d8c055fe87030d00744
    upload: add --draft option.
    
    Change-Id: I6967ff2f8163cd4116027b3f15ddb36875942af4
    repo: Add option review.URL.uploadtopic support
    
    This patch adds the option to include topic branches by adding the
    following to a .gitconfig file:
    
        uploadtopic = true
    
    This option is only read in when the -t option is not already
    specified at the command line.
    
    Change-Id: I0e0eea49438bb4e4a21c2ac5bd498b68b5a9a845
    New flag for repo upload: --current_branch (--cbr)
    
    A convenient equivalent to `repo upload --br=<current git branch>`.
    
    Note that the head branch will be selected for each project
    uploaded by repo, so different branches may be uploaded for
    different projects.
    
    Change-Id: I10ad8ceaa63f055105c2d847c6e329fa4226dbaf
    Added remote destination branch information when uploading.
    
    Several times one have done an upload only to later notice in gerrit
    that the upload was done to the wrong branch as the git has not yet
    been branched for the current git. This change will make repo print
    what the destination branch is when asking the user if she wants to
    go through with the upload.
    
    Change-Id: Ia9c3a92a6a04c022edfebf4f8d651ac062bb1f3b
    repo: capitalize default prompt char
    
    It is common in command line tools to indicate what the default answer
    will be if the user simply hits enter.  In repo, the display is just
    "y/n" with no indication as to which is the default.  So change the n
    to N in the messages since that is how repo operates.
    
    Change-Id: I81819ae630355072eb0365e59168b0921289498f
    Fixed UnicodeDecodeError while uploading changes.
    
    When commit with comment that has non-ASCII characters,
    UnicodeDecodeError will be raised
    while uploading multiple project/branch changes.
    Because some strings in script are not str type, but unicode.
    So all the strings are decoded to unicode,
    and python use ascii to do this,
    it can not decode non-ASCII characters,
    so UnicodeDecodeError raised.
    
    Signed-off-by: chenguodong <chenguodong@huawei.com>
    
    Change-Id: I46447f489a4b9760a5899c7ba9d764b688594e46
    Add branch support to repo upload
    
    This commit adds a --br=<branch> option to repo upload.
    
    repo currently examines every non-published branch. This is problematic
    for my workflow. I have many branches in my kernel tree. Many of these
    branches are based off of upstream remotes (I have many remotes) and
    will never be uploaded (they'll get sent upstream as a patch).
    
    Having repo scan these branches adds to my upload processing time
    and clutters the branch selection buffer. I've also seen repo get
    confused when one of my branches is 1000s of commits different from
    m/master.
    
    Change-Id: I68fa18951ea59ba373277b57ffcaf8cddd7e7a40
    Support repo-level pre-upload hook and prep for future hooks.
    
    All repo-level hooks are expected to live in a single project at the
    top level of that project.  The name of the hooks project is provided
    in the manifest.xml.  The manifest also lists which hooks are enabled
    to make it obvious if a file somehow failed to sync down (or got
    deleted).
    
    Before running any hook, we will prompt the user to make sure that it
    is OK.  A user can deny running the hook, allow once, or allow
    "forever" (until hooks change).  This tries to keep with the git
    spirit of not automatically running anything on the user's computer
    that got synced down.  Note that individual repo commands can add
    always options to avoid these prompts as they see fit (see below for
    the 'upload' options).
    
    When hooks are run, they are loaded into the current interpreter (the
    one running repo) and their main() function is run.  This mechanism is
    used (instead of using subprocess) to make it easier to expand to a
    richer hook interface in the future.  During loading, the
    interpreter's sys.path is updated to contain the directory containing
    the hooks so that hooks can be split into multiple files.
    
    The upload command has two options that control hook behavior:
      - no-verify=False, verify=False (DEFAULT):
        If stdout is a tty, can prompt about running upload hooks if needed.
        If user denies running hooks, the upload is cancelled.  If stdout is
        not a tty and we would need to prompt about upload hooks, upload is
        cancelled.
      - no-verify=False, verify=True:
        Always run upload hooks with no prompt.
      - no-verify=True, verify=False:
        Never run upload hooks, but upload anyway (AKA bypass hooks).
      - no-verify=True, verify=True:
        Invalid
    
    Sample bit of manifest.xml code for enabling hooks (assumes you have a
    project named 'hooks' where hooks are stored):
      <repo-hooks in-project="hooks" enabled-list="pre-upload" />
    
    Sample main() function in pre-upload.py in hooks directory:
      def main(project_list, **kwargs):
        print ('These projects will be uploaded: %s' %
               ', '.join(project_list))
        print ('I am being a good boy and ignoring anything in kwargs\n'
               'that I don\'t understand.')
        print 'I fail 50% of the time.  How flaky.'
        if random.random() <= .5:
          raise Exception('Pre-upload hook failed.  Have a nice day.')
    
    Change-Id: I5cefa2cd5865c72589263cf8e2f152a43c122f70
    upload: Catch and cleanly report connectivity errors
    
    Instead of giving a Python backtrace when there is a connectivity
    problem during repo upload, report that we cannot access the host,
    and why, with a halfway decent error message.
    
    Bug: REPO-45
    Change-Id: I9a45b387e86e48073a2d99bd6d594c1a7d6d99d4
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    (cherry picked from commit d2dfac81ad6a060179b4b2289060af2dc7a5cdfd)
    upload: Remove --replace option
    
    It hasn't been necessary for a long time, and its
    functionality can be accomplished with 'git push'.
    
    Change-Id: Ic00d3adbe4cee7be3955117489c69d6e90106559
    upload: Fix --replace flag
    
    --replace started to fail due to a Python error, I forgot to pass
    through the opt structure to the replace function.
    
    Change-Id: Ifcd7a0c715c3fd9070a4c58208612a626382de35
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    upload: Allow review.HOST.username to override email
    
    Some users might need to use a different login name than the local
    part of their email address for their Gerrit Code Review user
    account.  Allow it to be overridden with the review.HOST.username
    configuration variable.
    
    Change-Id: I714469142ac7feadf09fee9c26680c0e09076b75
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    upload -t: Automatically include local branch name
    
    If the -t flag is given to upload, the local branch name is
    automatically sent to Gerrit Code Review as the topic branch name
    for the change(s).  This requires the server to be Gerrit Code
    Review v2.1.3-53-gd50c94e or later, which isn't widely deployed
    right now, so the default is opt-out.
    
    Change-Id: I034fcacb405b7cb909147152db427fe69dd7bcbf
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Warn users before uploading if there are local changes
    
    Change-Id: I231d7b6a3211e9f5ec71a542a0109b0c195d5e40
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    upload: Automatically --cc folks in review.URL.autocopy
    
    The upload command will read review.URL.autocopy from the project's
    configuration and append the list of e-mails specified to the
    --cc argument of the upload command if a non-empty --re argument
    was provided.
    
    Change-Id: I2424517d17dd3444b20f0e6a003be6e70b8904f6
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    upload: Move confirmation threshold from 3 to 5 commits
    
    Change-Id: I7275d195cf04f02694206b9f838540b0228ff5e1
    upload: Confirm unusually large number of uploaded commit
    
    Add a sentinel check to require a second explicit confirmation if the
    user is attempting to upload (or upload --replace) an unusually large
    number of commits.  This may help the user to catch an accidentally
    incorrect rebase they had done previously.
    
    Change-Id: I12c4d102f90a631d6ad193486a70ffd520ef6ae0
    upload: Catch and cleanly report connectivity errors
    
    Instead of giving a Python backtrace when there is a connectivity
    problem during repo upload, report that we cannot access the host,
    and why, with a halfway decent error message.
    
    Bug: REPO-45
    Change-Id: I9a45b387e86e48073a2d99bd6d594c1a7d6d99d4
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    upload: Document --replace is deprecated
    
    Change-Id: I52715bcfec9c038d0e02505aa7e4054ebc0434aa
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Automatically guess Gerrit change number in "repo upload --replace"
    
    This feature only works if you have one commit to replace right now
    (the common case).
    Display the URL we will upload changes to for review
    
    This gives the user the last chance to confirm where the change is
    going to be sent to.  Knowing the review server URL will help the
    user decide if continuing with the upload makes sense.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Improve the help text for 'repo upload'
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Only compute commits in repo upload if we need to show a prompt
    
    If the user has disabled a prompt, skip the two commands we use to
    obtain the list of commits and the date of the branch.  These will
    never be displayed and just waste the end-user's time.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Allow review.URL.autoupload to skip prompting during `repo upload`
    
    If review.URL.autoupload is set to true in a project's .git/config
    or in ~/.gitconfig then `repo upload` will automatically upload,
    and skip prompting the end-user.
    
    Conversely, if review.URL.autoupload is set to false, then repo
    will refuse to upload to that project.
    
    Bug: REPO-25
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Don't bother listing branch URLs during upload
    
    Modern Gerrit2 automatically outputs the URL for each commit to
    stderr as it creates the records.  Dumping the URL ourselves is
    unnecessary additional output, and worse is just an approximate
    guess for the correct web URL.  Gerrit might not live at the top
    level directory for the server, or might even prefer a different
    hostname for web connections than what is listed in the manifest.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Describe upload --replace in upload's help text
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Don't accept multiple commits for the same change in upload --replace
    
    Gerrit won't permit more than one commit using the same change
    number during a replacement request, so we should error out if
    the user has asked for this in their upload edit script.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Fix upload --replace after it was broken when --review,--cc was added
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Add --review and --cc flags to repo upload, so you can
    assign reviewers when you upload changes.
    Teach 'repo upload --replace' how to add replacement patch sets
    
    Users are prompted with the list of known changes we are about
    to upload, and they can fill out the current change numbers for
    any changes which already exist in the data store.  For each of
    those changes the change number and commit id is sent as part of
    the upload request, so Gerrit can insert the new commit as a new
    patch set of the existing change, rather than make a new change.
    
    This facility permits developers to replace a patch so they can
    address comments made on a prior version of the same change.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Show which user account each change was uploaded under
    
    This way users are well aware of which account we used when the
    uploads are complete, so they can be certain to sign into the web
    application with that user identity.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Initial Contribution
    Consider local project to be default for 'repo start'
    
    The requirement to explicitly specify the local project when starting
    a new repo branch is somewhat counter intuitive.
    
    This patch uses the current directory's git tree as the default
    project.
    
    Tested by running
    
      'repo start <name>'
    
    observed that the result is the same as if running
    
      'repo start <name> .'
    
    Change-Id: If106caa801b4cd5ba70dbe8354a227d59f100aa3
    GITC: Fix 'repo start <branch> <repo>/<subdir>'
    
    As soon as we wrote the gitc manifest, the folder for that repo became
    empty, causing the next GetProjects lookup to fail. Reorder the
    GetProjects calls so that they all happen while we still have the
    repository contents available.
    
    If you were already in a subdir, for cases like 'repo start <branch> .',
    this would still fail, since the working directory would disappear out
    from under you. That's fine most of the time, since we shouldn't be
    doing operations based on the local directory, but git has a realpath
    function that tries to restore CWD by chdir'ing back to it. So if the
    working directory no longer exists, chdir to the topdir before
    continuing.
    
    Change-Id: Ibdf6cd37ff6e5a5f8338347c3919175491f7166f
    GITC: Always update the gitc manifest from the repo manifest
    
    This way any changes made to the main manifest are reflected in the gitc
    manifest. It's also necessary to use both manifests to sync since the
    information required to update the gitc manifest is actually in the repo
    manifest.
    
    This also fixes a few issues that came up when testing. notdefault
    groups weren't being saved to the gitc manifest in a method that matched
    'sync'. The merge branch wasn't always being set to the correct value
    either.
    
    Change-Id: I435235cb5622a048ffad0059affd32ecf71f1f5b
    Revert "GITC: Always update the gitc manifest from the repo manifest"
    
    This reverts commit 250303b437855c2b50d052a05a08ed517423af8b.
    
    Change-Id: I1fd8af20f802553151aacb953c913f3305ca6057
    GITC: Always update the gitc manifest from the repo manifest
    
    This way any changes made to the main manifest are reflected in the gitc
    manifest. It's also necessary to use both manifests to sync since the
    information required to update the gitc manifest is actually in the repo
    manifest.
    
    This also fixes a few issues that came up when testing. notdefault
    groups weren't being saved to the gitc manifest in a method that matched
    'sync'. The merge branch wasn't always being set to the correct value
    either.
    
    Change-Id: I5dbc850dd73a9fbd10ab2470ae4c40e46ff894de
    GITC: Add repo start support.
    
    Add repo start support for GITC checkouts. If the user is in
    the GITC FS view, they can now run repo start to check out
    the sources and create a new working branch.
    
    When "repo start" is called on a GITC project, the revision
    tag is set to an empty string and saved in a new tag:
    old-revision. This tells the GITC filesystem to display the
    local copy of the sources when being viewed. The local copy
    is created by pulling the project sources and the new branch
    is created based off the original project revision.
    
    Updated main.py to setup each command's gitc_manifest when
    appropriate.
    
    Updated repo sync's logic to sync opened projects and
    updating the GITC manifest file for the rest.
    
    Change-Id: I7e4809d1c4fc43c69b26f2f1bebe45aab0cae628
    If revision is sha hash and dest-branch is defined, use it for starting branch
    
    Change-Id: I538c7d216f72b87629b61aee547d374a398c95da
    Change print statements to work in python3
    
    This is part of a series of changes to introduce Python3 support.
    
    Change-Id: I373be5de7141aa127d7debdbce1df39148dbec32
    Coding style cleanup
    
    Fix the following issues reported by pylint:
    
    C0321: More than one statement on a single line
    W0622: Redefining built-in 'name'
    W0612: Unused variable 'name'
    W0613: Unused argument 'name'
    W0102: Dangerous default value 'value' as argument
    W0105: String statement has no effect
    
    Also fixed a few cases of inconsistent indentation.
    
    Change-Id: Ie0db839e7c57d576cff12d8c055fe87030d00744
    Fix for failures with repo upload for projects that have a SHA1 for a revision; instead use the default manifest revision
    
    Change-Id: Ie5ef5a45ed6b0ca1a52a550df3cd7bd72e745f5f
    Require a project or '--all' to be specified when using 'repo start'.
    Improve checkout performance for the common unmodified case
    
    Most projects will have their branch heads matching in all branches,
    so switching between them should be just a matter of updating the
    work tree's HEAD symref.  This can be done in pure Python, saving
    quite a bit of time over forking 'git checkout'.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Add progress meter to 'repo start'
    
    This is mostly useful if the number of projects to switch is many
    (e.g. all of Android) and a large number of them are behind the
    current manifest revision.  We wind up needing to run git just to
    make the working tree match, and that often makes the command take
    a couple of seconds longer than we'd like.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Improve the help text for 'repo start'
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Make 'repo start' restartable upon failures
    
    If `repo start foo` fails due to uncommitted and unmergeable changes
    in a single project, we have switched half of the projects over to
    the new target branches, but didn't on the one that failed to move.
    
    This change improves the situation by doing three things differently:
    
    - We keep going when we encounter an error, so other projects
      that can successfully switch still switch.
    
    - We ignore projects whose current branch is already on the
      requested name; they are logically already setup.
    
    - We checkout the branch if it already exists, rather than
      trying to recreate the branch.
    
    Bug: REPO-22
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Initial Contribution
    implement optional '--all' in the abandon command
    
    when you want to delete all local branches, you should be find
    all branches' name, and type them behind 'repo abandon' command.
    
    Usage:
        repo abandon --all [<project>...]
    
    Change-Id: I4d391f37fb9d89b8095488c585468eafc1a35f31
    Removed duplication code in abandon.py
    
    code about getting argument is duplicated.
    so this line is removed
    
    Change-Id: Id321b999c7dacdb403cd986cbf35f8db62efc157
    Change print statements to work in python3
    
    This is part of a series of changes to introduce Python3 support.
    
    Change-Id: I373be5de7141aa127d7debdbce1df39148dbec32
    More coding style cleanup
    
    Fixing more issues found with pylint.  Some that were supposed to
    have been fixed in the previous sweep (Ie0db839e) but were missed:
    
    C0321: More than one statement on a single line
    W0622: Redefining built-in 'name'
    
    And some more:
    
    W0631: Using possibly undefined loop variable 'name'
    W0223: Method 'name' is abstract in class 'name' but is not overridden
    W0231: __init__ method from base class 'name' is not called
    
    Change-Id: Ie119183708609d6279e973057a385fde864230c3
    Fixed repo abandon to give better messages.
    
    The main fix is to give an error message if nothing was actually
    abandoned.  See <http://crosbug.com/6041>.
    
    The secondary fix is to list projects where the abandon happened.
    This could be done in a separate CL or dropped altogether if requested.
    
    TEST=manual
    
    $ repo abandon dougabc; echo $?
    Abandon dougabc: 100% (127/127), done.
    Abandoned in 2 project(s):
      chromite
      src/platform/init
    0
    
    $ repo abandon dougabc; echo $?
    Abandon dougabc: 100% (127/127), done.
    error: no project has branch dougabc
    1
    
    $ repo abandon dougabc; echo $?
    Abandon dougabc: 100% (127/127), done.
    error: chromite/: cannot abandon dougabc
    1
    
    Change-Id: I79520cc3279291acadc1a24ca34a761e9de04ed4
    Modify 'repo abandon' to be more like 'repo checkout' and 'repo start'
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Introduce 'repo abandon <branchname>' as an alias for 'git branch -D'
    
    This destroys a local development branch, removing all history
    of that branch from ever existing.  If the branch is currently
    checked out we move back to the upstream revision.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Initial Contribution
    Exit 1 if repo download -c fails
    
    Change-Id: I6985548bf87032b121eeccf858c4eeca1a60598c
    Add error message for download -c conflicts
    
    Currently if you run repo download -c on a change and the cherry-pick
    runs into a merge conflict a Traceback is produced:
    
    rob@rob-i5-lm ~/Programming/repo_test/repo1 $ repo download -c repo1 3/1
    From ssh://rob-i5-lm:29418/repo1
     * branch            refs/changes/03/3/1 -> FETCH_HEAD
    error: could not apply 0c8b474... 2
    hint: after resolving the conflicts, mark the corrected paths
    hint: with 'git add <paths>' or 'git rm <paths>'
    hint: and commit the result with 'git commit'
    Traceback (most recent call last):
      File "/home/rob/Programming/git-repo/main.py", line 408, in <module>
        _Main(sys.argv[1:])
      File "/home/rob/Programming/git-repo/main.py", line 384, in _Main
        result = repo._Run(argv) or 0
      File "/home/rob/Programming/git-repo/main.py", line 143, in _Run
        result = cmd.Execute(copts, cargs)
      File "/home/rob/Programming/git-repo/subcmds/download.py", line 90, in Execute
        project._CherryPick(dl.commit)
      File "/home/rob/Programming/git-repo/project.py", line 1943, in _CherryPick
        raise GitError('%s cherry-pick %s ' % (self.name, rev))
    error.GitError: repo1 cherry-pick 0c8b4740f876f8f8372bbaed430f02b6ba8b1898
    
    This amount of error message is confusing to users and has the side effect
    of the git message telling you the actual issue being ignored.
    
    This change introduces a message stating that the cherry-pick couldn't
    be completed removing the Traceback.
    
    To reproduce the issue create a change that causes a conflict with one currently
    in review and use repo download -c to cherry-pick the conflicting change.
    
    Change-Id: I8ddf4e0c8ad9bd04b1af5360313f67cc053f7d6a
    Tidy up code formatting a bit more
    
    Enable the following Pylint warnings:
    
      C0322: Operator not preceded by a space
      C0323: Operator not followed by a space
      C0324: Comma not followed by a space
    
    And make the necessary fixes.
    
    Change-Id: I74d74283ad5138cbaf28d492b18614eb355ff9fe
    Change print statements to work in python3
    
    This is part of a series of changes to introduce Python3 support.
    
    Change-Id: I373be5de7141aa127d7debdbce1df39148dbec32
    Remove unused imports
    
    There are several imports that are not used.  Remove them.
    
    Change-Id: I2ac3be66827bd68d3faedcef7d6bbf30ea01d3f2
    repo download: add --ff-only option
    
    Allows to ff-only a gerrit patch
    This patch is necessary to automatically ensure that the patch will
    be correctly submitted on ff-only gerrit projects
    
    You can now use:
    repo download (--ff-only|-f) project changeid/patchnumber
    
    This is useful to automate verification of fast forward status of a patch
    in the context of build automation, and commit gating (e.g. buildbot)
    
    Change-Id: I403a667557a105411a633e62c8eec23d93724b43
    Signed-off-by: Erwan Mahe <erwan.mahe@intel.com>
    Signed-off-by: Pierre Tardy <pierre.tardy@intel.com>
    repo download: add --revert option
    
    BZ: 4779
    Allows to revert a gerrit patch
    This patch is necessary for the on-demand creation of
    engineering builds using buildbot
    
    You can now use:
    repo download [--revert|-r project changeid/patchnumber
    
    This is useful to automate reverting of a patch
    in the context of build automation, and regression bisection
    
    Change-Id: I3985e80e4b2a230f83526191ea1379765a54bdcf
    Signed-off-by: Erwan Mahe <erwan.mahe@intel.com>
    Signed-off-by: Pierre Tardy <pierre.tardy@intel.com>
    repo download: add --cherry-pick option
    
    default option uses git checkout, and thus overwrite the previous
    checkouts.  this is a problem for automated builds of several
    changesets in the same project for daily builds of pending submission
    
    You can now use:
    repo download [--cherry-pick|-c] project changeid/patchnumber
    
    This will parse the manifest, cd to the corresponding project
    download the changes to FETCH_HEAD and cherry-pick the result.
    
    This is useful to automate cherry-picking of a patch
    in the context of build automation, and commit gating (e.g. buildbot)
    
    Change-Id: Ib638afd87677f1be197afb7b0f73c70fb98909fe
    Signed-off-by: Pierre Tardy <pierre.tardy@intel.com>
    Fix to display the usage message of the command download when the user
    don't provide any arguments to 'repo download'.
    
    Signed-off-by: Thiago Farina <thiago.farina@gmail.com>
    (cherry picked from commit 840ed0fab7cb4c2ab296c7d7d45f13e2523bae1c)
    Fix to display the usage message of the command download when the user
    don't provide any arguments to 'repo download'.
    
    Signed-off-by: Thiago Farina <thiago.farina@gmail.com>
    Teach repo how to download changes to the local checkout
    
    Now `repo download . 1402` would download the change numbered 1402
    into the current project and check it out for the user, using a
    detached HEAD.  `repo sync .` would back out of the change and
    return to the upstream version.
    
    Multiple projects can be fetched at once by listing them out on
    the command line as different arguments.
    
    Individual patch sets can be selected by adding a '/n' to indicate
    the n-th patch set should be downloaded instead of the default of
    patch set 1.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    stage: replace filter on lambda with list comprehension
    
    To fix the pylint warning:
    
      W0110: map/filter on lambda could be replaced by comprehension
    
    Change-Id: Ib914b42992bb2fbfe888a68fb7b05a7695565b63
    Change print statements to work in python3
    
    This is part of a series of changes to introduce Python3 support.
    
    Change-Id: I373be5de7141aa127d7debdbce1df39148dbec32
    Change usages of xrange() to range()
    
    In Python3, range() creates a generator rather than a list.
    
    None of the parameters in the ranges changed looked large enough
    to create an impact in memory in Python2.  Note: the only use of
    range() was for iteration and did not need to be changed.
    
    This is part of a series of changes to introduce Python3 support.
    
    Change-Id: I50b665f9296ea160a5076c71f36a65f76e47029f
    Coding style cleanup
    
    Fix the following issues reported by pylint:
    
    C0321: More than one statement on a single line
    W0622: Redefining built-in 'name'
    W0612: Unused variable 'name'
    W0613: Unused argument 'name'
    W0102: Dangerous default value 'value' as argument
    W0105: String statement has no effect
    
    Also fixed a few cases of inconsistent indentation.
    
    Change-Id: Ie0db839e7c57d576cff12d8c055fe87030d00744
    Only display project path in 'repo stage -i'
    
    Generally we only show the project path, relative from the top of the
    client.  Showing the project name may be confusing for the end-user.
    
    Signed-off-by: Shawn O. Pearce <sop@google.com>
    Initial Contribution
