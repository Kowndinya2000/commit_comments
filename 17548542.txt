    Always show the Contribute tab in the navbar.
    Make clear that the attribution file is in plaintext.
    Add licensing information to the individual exploration pages.
    Consolidate error handling boilerplate.
    
    Also:
    
    (a) Have a friendlier 404 error page.
    (b) Remove unused route from app.yaml.
    (c) Add a robots.txt file.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Moving models/ to apps/ in preparation for the migration to django non-rel
    Add missing files from previous commit
    Moving controllers to a separate folder
    Initial commit.
    Remove widget_domain, replacing it with two base classes for interactions and rich-text components.
    First half of the work needed to rename widgets to interactions/rich-text-components.
    LogicProof widget: add explanatory note for previous commit.
    LogicProof widget: response to review comments, and fix a couple of bugs.
    LogicProof widget: response to review comments.
    LogicProof widget: response to review comments.
    LogicProof widget: response to review, including adding a system to automatically generate defaultData.js, and additional tests.
    LogicProof widget: finish moving tests to the karma framework.
    LogicProof widget: response to second set of review comments.
    Response to first set of review comments.
    LogicProof widget: make various updates including conversion to logic unicode symbols, inclusion of static/js tests & tools, and improvements to the UI.
    Add static js files for the LogicProof widget
    Remove widget_domain, replacing it with two base classes for interactions and rich-text components.
    First half of the work needed to rename widgets to interactions/rich-text-components.
    LogicProof widget: response to review comments.
    Trivial changes. The purpose of this commit is to try and make it possible to leave comments on the code via the code.google.com UI.
    LogicProof widget: some minor housekeeping.
    LogicProof widget: finish moving tests to the karma framework.
    LogicProof widget: response to second set of review comments.
    LogicProof widget: fix a serious bug in type assignment.
    LogicProof widget: make various updates including conversion to logic unicode symbols, inclusion of static/js tests & tools, and improvements to the UI.
    Add static js files for the LogicProof widget
    First half of the work needed to rename widgets to interactions/rich-text-components.
    LogicProof exploration: add new excluded middle rule.
    LogicProof widget: remove a line template whose checks are too slow, and a few minor fixes.
    LogicProof widget: response to review comments, and fix a couple of bugs.
    LogicProof widget: response to review comments.
    Remove widget_domain, replacing it with two base classes for interactions and rich-text components.
    First half of the work needed to rename widgets to interactions/rich-text-components.
    LogicProof widget: response to review comments.
    LogicProof exploration: add new excluded middle rule.
    Upgrade Angular to v1.3.0-rc.5 and jQuery to v2.1.1.
    LogicProof widget: response to review comments.
    Trivial changes. The purpose of this commit is to try and make it possible to leave comments on the code via the code.google.com UI.
    LogicProof widget: response to review comments.
    LogicProof widget: response to review, including adding a system to automatically generate defaultData.js, and additional tests.
    LogicProof widget: make minor alterations to default data in response to testing feedback.
    Response to first set of review comments.
    LogicProof widget: make various updates including conversion to logic unicode symbols, inclusion of static/js tests & tools, and improvements to the UI.
    First half of the work needed to rename widgets to interactions/rich-text-components.
    Trivial changes. The purpose of this commit is to try and make it possible to leave comments on the code via the code.google.com UI.
    LogicProof widget: make various updates including conversion to logic unicode symbols, inclusion of static/js tests & tools, and improvements to the UI.
    Add static js files for the LogicProof widget
    Remove widget_domain, replacing it with two base classes for interactions and rich-text components.
    First half of the work needed to rename widgets to interactions/rich-text-components.
    Trivial changes. The purpose of this commit is to try and make it possible to leave comments on the code via the code.google.com UI.
    LogicProof widget: some minor housekeeping.
    LogicProof widget: belated response to review comments.
    LogicProof widget: response to second set of review comments.
    LogicProof widget: make various updates including conversion to logic unicode symbols, inclusion of static/js tests & tools, and improvements to the UI.
    Add static js files for the LogicProof widget
    Remove widget_domain, replacing it with two base classes for interactions and rich-text components.
    First half of the work needed to rename widgets to interactions/rich-text-components.
    LogicProof widget: response to review comments.
    Trivial changes. The purpose of this commit is to try and make it possible to leave comments on the code via the code.google.com UI.
    LogicProof widget: finish moving tests to the karma framework.
    First half of the work needed to rename widgets to interactions/rich-text-components.
    LogicProof widget: response to review comment.
    LogicProof widget: response to review comments.
    LogicProof exploration: add new excluded middle rule.
    LogicProof widget: response to review comments.
    LogicProof widget: response to review, including adding a system to automatically generate defaultData.js, and additional tests.
    LogicProof widget: make various updates including conversion to logic unicode symbols, inclusion of static/js tests & tools, and improvements to the UI.
    First half of the work needed to rename widgets to interactions/rich-text-components.
    LogicProof exploration: add new excluded middle rule.
    LogicProof widget: response to review comments.
    LogicProof widget: remove a line template whose checks are too slow, and a few minor fixes.
    LogicProof widget: response to review comments, and fix a couple of bugs.
    LogicProof widget: response to review comments.
    Trivial changes. The purpose of this commit is to try and make it possible to leave comments on the code via the code.google.com UI.
    LogicProof widget: response to review comments.
    LogicProof widget: response to review, including adding a system to automatically generate defaultData.js, and additional tests.
    LogicProof widget: make minor alterations to default data in response to testing feedback.
    LogicProof widget: make various updates including conversion to logic unicode symbols, inclusion of static/js tests & tools, and improvements to the UI.
    Add static js files for the LogicProof widget
    Add validation for rules and interaction customizations.
    Do not overwrite err in code widget error handling code
    Trivial changes to comments (to not use the word 'widget').
    Remove widget_domain, replacing it with two base classes for interactions and rich-text components.
    First half of the work needed to rename widgets to interactions/rich-text-components.
    Change comment in CodeRepl.js file to exclude languages 'lua' and 'scheme' that are no longer used
    Move widget responses to the client side, to minimize unnecessary RPCs.
    Fixes for issues discovered during release testing and a few others.
    
    1. Add docstring for video id in the noninteractive video widget.
    2. Some $scope.$apply() calls are throwing errors in the frontend, and this is causing things like the code widget to fail silently (the 'Run' button never turns on). Add logging of frontend errors to the backend so that we can detect and fix these.
    3. Update ui-codemirror to a newer version in order to fix a $scope.$apply() error in the ui-codemirror library.
    4. Make images for options in multiple-choice questions smaller so that they don't overwhelm the rule editor.
    Response to review comments.
    Add line numbering to the codeREPL widget without the textarea being greyed out.
    Fix code repl server error -- missing "code".
    Move JS code for individual widgets from its temporary home in templates/dev/head/components to the extensions/widgets directory.
    Remove widget_domain, replacing it with two base classes for interactions and rich-text components.
    First half of the work needed to rename widgets to interactions/rich-text-components.
    Modified numeric, text, continue, coderepl and graph input to use material design
    Fix lots of small bugs.
    
    (1) In the MusicNotesInput widget, rename 'play desired sequence' to 'play target sequence'.
    (2) In NumericInput view for the learner's input, do not show integers as floats.
    (3) In the TextInput widget, improve the description of the 'rows' field.
    (4) Rename Code REPL widget to 'Code input'.
    (5) In the MusicNotesInput widget, change the 'Add Note' button to make it clear what type of note is being referred to (a music note, not a comment).
    (6) Rename 'Tutorial' to 'Walkthrough' (the former sounds like 'manual').
    (7) Disable 'look inside' functionality in preview mode.
    (8) Add Amy's name to credits.
    (9) Show edit buttons in gallery for moderators (issue 373).
    (10) Fix broken loading when the history tab in the exploration editor is shown on initial load.
    (11) Fix the broken revert modal in history tab (the link to try out the old version did not work).
    (12) Move the 'create' button nearer to the 'add new state' input field.
    (13) Move the learner answer div styling to a common location in the conversation skin view.
    (14) Allow states defined in rules to use '.' (issue 166).
    (15) Add moderator page to profile menu (issue 374).
    Add a border around the codemirror instance for the code REPL widget.
    Add codemirror view for customization args that have code-type values.
    Move widget responses to the client side, to minimize unnecessary RPCs.
    Additional response to review comments.
    Response to review comments.
    Add line numbering to the codeREPL widget without the textarea being greyed out.
    Resolving merge problem.
    Continue the Bootstrap 3 upgrade.
    changed all buttons to bootstrap, fixed some alignments
    Remove the line numbers option from codemirror, since that occasionally causes user-visible failures -- a blank grey screen shows up.
    Convert interactive widgets to Angular directives.
    
    This has the following advantages:
    (a) speed: the interactive widgets now load faster because there is no
    need for a second request to the server to populate the iframe.
    (b) no more monkeying around with the parent container to handle iframe
    height changes
    (c) less boilerplate is needed for each individual widget
    (d) there is no need to reload JS libraries separately for the widget,
    since these libraries will have already been included in the container page.
    Delay loading of the coding widget until its height can be determined.
    Allow most Oppia explorations to be played on IE9. Some interactive widgets, like the code REPL, interactive map and LaTeX input, are still proving problematic.
    Add syntax highlighting and line numbers to the Code REPL widget
    Add pre- and post- hooks to the code evaluation widget. Add rules for comparing the output of a submission.
    Update to AngularJS 1.2.0-rc.3.
    Update to AngularJS 1.2.0-rc.3.
    Get the code widget to update its containing page with its height after it has finished loading.
    Remove the vertical scrollbars from embedded iframes.
    Fix scrolling behavior if an individual response in the response log is empty. Use a specific version of jsrepl.
    Upgrade Angular to 1.2.0-rc.2. Change modal callsites to buttons instead of links, and add contextual escaping using  where needed. Add a separate page for 404 errors.
    Allow selection of particular value generators when editing parameters. Minor improvements to the code widget display.
    Remove value generators that are not currently in use. Write code that implements the restricted generators.
    CodeRepl widget single / multiline modes.
    Handle conversion to safe JSON strings in the templates instead of in the Python code. This cleans up the widget parsing code, which now only needs to send the correct parameters with which to parse the template.
    Separate exploration data files from other extensions.
    Added jsrepl installation.
    Added tests in objects_test.py.
    CodeWidget for programming explorations.
    First half of the work needed to rename widgets to interactions/rich-text-components.
    Separate exploration data files from other extensions.
    CodeWidget for programming explorations.
    Adds a basic test for the code widget
    Add validation for rules and interaction customizations.
    Various improvements to the editor page.
    
    (1) Reorganize the interaction dropdown menu to remove many single-item categories.
    (2) Remove help dropdown menu.
    (3) Fix bug when user clicks 'add new state' and then cancels.
    (4) Move 'Create New...' to the second position in the rule destination dropdown so that it does not look like a menu heading.
    Restyle the interactions menu.
    Specify a display mode for each interaction and adjust the learner view accordingly.
    Remove widget_domain, replacing it with two base classes for interactions and rich-text components.
    First half of the work needed to rename widgets to interactions/rich-text-components.
    Renamed interactions for consistency, added padding to rule headings and buttons.
    Fix lots of small bugs.
    
    (1) In the MusicNotesInput widget, rename 'play desired sequence' to 'play target sequence'.
    (2) In NumericInput view for the learner's input, do not show integers as floats.
    (3) In the TextInput widget, improve the description of the 'rows' field.
    (4) Rename Code REPL widget to 'Code input'.
    (5) In the MusicNotesInput widget, change the 'Add Note' button to make it clear what type of note is being referred to (a music note, not a comment).
    (6) Rename 'Tutorial' to 'Walkthrough' (the former sounds like 'manual').
    (7) Disable 'look inside' functionality in preview mode.
    (8) Add Amy's name to credits.
    (9) Show edit buttons in gallery for moderators (issue 373).
    (10) Fix broken loading when the history tab in the exploration editor is shown on initial load.
    (11) Fix the broken revert modal in history tab (the link to try out the old version did not work).
    (12) Move the 'create' button nearer to the 'add new state' input field.
    (13) Move the learner answer div styling to a common location in the conversation skin view.
    (14) Allow states defined in rules to use '.' (issue 166).
    (15) Add moderator page to profile menu (issue 374).
    Re-committing previous change that removed languages 'lua' and 'scheme' as local copy had been undone
    Removed unused CodeRepl options and and adjusted setup to include a larger variety of Mac users
    Fix small error in CodeRepl customization args schema.
    Add codemirror view for customization args that have code-type values.
    Add some UI customization options to the form builders. In particular:
    
    (a) Allow descriptions to be specified for dict fields.
    (b) Allow customization of 'Add element' buttons for lists.
    (c) Allow the number of rows in a unicode field to be specified.
    Add tests for the new widget customization args.
    Migrate widget configuration parameters to a simpler format that is more consistent with upcoming refactorings.
    
    NOTE: this change passes backend tests but the frontend does not work. This will be handled in a separate commit.
    Add a system for handling dependencies of widgets that include additional angular modules.
    Add a simple framework for handling widget dependencies.
    In the python files for interactive widgets, the obj_type of the reader's answer should be represented as a string.
    Add some enhancements to the coding widget: a rulespec for errors, and a large input box for the placeholder code.
    Remove some superfluous options from the code widget.
    Add syntax highlighting and line numbers to the Code REPL widget
    Lint the codebase.
    Add pre- and post- hooks to the code evaluation widget. Add rules for comparing the output of a submission.
    Remove value generators that are not currently in use. Write code that implements the restricted generators.
    Modify widgets to use value generators for their customization args. This commit removes the widget customization functionality in the frontend, which will be added back in the next commit or two.
    CodeRepl widget single / multiline modes.
    WIP: drop down selection for widget customize.
    Separate exploration data files from other extensions.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Added jsrepl installation.
    Added tests in objects_test.py.
    CodeWidget for programming explorations.
    Change the name of the models directory from 'apps' to 'storage'.
    Move domain-related files to their own folder in the repository.
    Complete the transition to first-class Rule objects. Remove the classifier model and all calls to it.
    Rename widget models file to widget_domain.py to reflect its independence of the storage layer.
    Moving some domain methods into the base widget class.
    Use Python classes instead of YAML files as the data sources for widgets. Fix a bug in revision f46fbbfe3ac3 where reader responses were rendered with backslashes and quotes.
    Add validation for rules and interaction customizations.
    Some small CSS changes to the music interaction view.
    Remove widget_domain, replacing it with two base classes for interactions and rich-text components.
    First half of the work needed to rename widgets to interactions/rich-text-components.
    Fix lots of small bugs.
    
    (1) In the MusicNotesInput widget, rename 'play desired sequence' to 'play target sequence'.
    (2) In NumericInput view for the learner's input, do not show integers as floats.
    (3) In the TextInput widget, improve the description of the 'rows' field.
    (4) Rename Code REPL widget to 'Code input'.
    (5) In the MusicNotesInput widget, change the 'Add Note' button to make it clear what type of note is being referred to (a music note, not a comment).
    (6) Rename 'Tutorial' to 'Walkthrough' (the former sounds like 'manual').
    (7) Disable 'look inside' functionality in preview mode.
    (8) Add Amy's name to credits.
    (9) Show edit buttons in gallery for moderators (issue 373).
    (10) Fix broken loading when the history tab in the exploration editor is shown on initial load.
    (11) Fix the broken revert modal in history tab (the link to try out the old version did not work).
    (12) Move the 'create' button nearer to the 'add new state' input field.
    (13) Move the learner answer div styling to a common location in the conversation skin view.
    (14) Allow states defined in rules to use '.' (issue 166).
    (15) Add moderator page to profile menu (issue 374).
    Move widget responses to the client side, to minimize unnecessary RPCs.
    Resolving merge problem.
    Continue the Bootstrap 3 upgrade.
    changed all buttons to bootstrap, fixed some alignments
    Add MusicNotesInput widget to Oppia.
    Fix failing karma test.
    Trivial changes to comments (to not use the word 'widget').
    First half of the work needed to rename widgets to interactions/rich-text-components.
    Upgrade Angular to v1.3.0-rc.5 and jQuery to v2.1.1.
    Fix lots of small bugs.
    
    (1) In the MusicNotesInput widget, rename 'play desired sequence' to 'play target sequence'.
    (2) In NumericInput view for the learner's input, do not show integers as floats.
    (3) In the TextInput widget, improve the description of the 'rows' field.
    (4) Rename Code REPL widget to 'Code input'.
    (5) In the MusicNotesInput widget, change the 'Add Note' button to make it clear what type of note is being referred to (a music note, not a comment).
    (6) Rename 'Tutorial' to 'Walkthrough' (the former sounds like 'manual').
    (7) Disable 'look inside' functionality in preview mode.
    (8) Add Amy's name to credits.
    (9) Show edit buttons in gallery for moderators (issue 373).
    (10) Fix broken loading when the history tab in the exploration editor is shown on initial load.
    (11) Fix the broken revert modal in history tab (the link to try out the old version did not work).
    (12) Move the 'create' button nearer to the 'add new state' input field.
    (13) Move the learner answer div styling to a common location in the conversation skin view.
    (14) Allow states defined in rules to use '.' (issue 166).
    (15) Add moderator page to profile menu (issue 374).
    Fix some broken frontend tests.
    Added tests to musicNote.
    Add tests and update pitch_perfect.
    Fix some small errors in the previous commit.
    Add a few frontend tests for the MusicNotesInput widget.
    Various improvements to the editor page.
    
    (1) Reorganize the interaction dropdown menu to remove many single-item categories.
    (2) Remove help dropdown menu.
    (3) Fix bug when user clicks 'add new state' and then cancels.
    (4) Move 'Create New...' to the second position in the rule destination dropdown so that it does not look like a menu heading.
    Restyle the interactions menu.
    Specify a display mode for each interaction and adjust the learner view accordingly.
    Remove widget_domain, replacing it with two base classes for interactions and rich-text components.
    First half of the work needed to rename widgets to interactions/rich-text-components.
    First half of the work needed to rename widgets to interactions/rich-text-components.
    Fixed Music widget state editor per Jacob's review. Added stats_response.
    Trivial changes to comments (to not use the word 'widget').
    Remove widget_domain, replacing it with two base classes for interactions and rich-text components.
    First half of the work needed to rename widgets to interactions/rich-text-components.
    Resolve review comments.
    Add initalSequence functionality to MusicNotesInput.
    Add hint functionality to music widget.
    Update MIDI.js version and remove patch.
    Make changes from review and refactor MusicNotesInput response template.
    Add MIDI.js.patch and change links to patched files.
    Move widget responses to the client side, to minimize unnecessary RPCs.
    Fix some small errors in the previous commit.
    Add a few frontend tests for the MusicNotesInput widget.
    Updated pitch_perfect exploration and fix zero indexing issue.
    Remove console.logs.
    Make note conversion functions inverses and add docs for note objects.
    Remove extra code. Make code more consistent.
    Fixes from code review. Updated UI and seperated functions.
    Add MusicNotesInput widget with updated UI.
    Update directive title
    Fix repainting of ledger lines, remove MIDI delay, and update note revert to use noteId.
    Make MusicNotesInput widget responsive.
    Make widget responsive.
    Fix repainting of ledger lines, remove MIDI delay, and update note revert to use noteId.
    Make MusicNotesInput widget responsive.
    Make widget responsive.
    Fix several music-input-related bugs.
    Add MusicNotesInput widget to Oppia.
    First half of the work needed to rename widgets to interactions/rich-text-components.
    Add MusicNotesInput widget to Oppia.
    First half of the work needed to rename widgets to interactions/rich-text-components.
    Add MusicNotesInput widget to Oppia.
    First half of the work needed to rename widgets to interactions/rich-text-components.
    Add MusicNotesInput widget to Oppia.
    First half of the work needed to rename widgets to interactions/rich-text-components.
    Add MusicNotesInput widget to Oppia.
    Some small CSS changes to the music interaction view.
    First half of the work needed to rename widgets to interactions/rich-text-components.
    Add MusicNotesInput widget with updated UI.
    Make MusicNotesInput widget responsive.
    Make MusicNotesInput widget responsive.
    Add MusicNotesInput widget to Oppia.
    Further UI improvements to the state content and interaction editors. Change the default initial state name.
    addressed more review comments.
    Add a 'most recent updates' section to the user dashboard.
    Fixed tests that didn't expect jobs to be enqueued by event triggers.
    Do not require duplication of realtime datastore classes.
    Address some review comments (the others are for future commits).
    Add a test to check that continuous computation classes are specified correctly, and introduce the concept of managers for one-off jobs.
    Migrate the existing StatsPageJobManager to use the new continuous computations framework.
    Explicitly pass in class names to MapReduce pipelines, and allow deleting of realtime datastore entities to depend on a timestamp.
    Address review comments. In particular, wrap the various state changes in transactions.
    Trivial commit fixing some lint issues, but mostly meant to group the files related to continuous computations in a set so that review comments can be left on them.
    Allow MapReduces to compare mapped items against the time the job was enqueued. Standardize time-handling conventions throughout the codebase (use '_msec' suffix and use methods from utils.py for time conversions).
    Remove the listener registration from event handlers and replace it with a more explicit ContinuousComputation dispatcher registry that is generated on event dequeue. In the earlier system, listeners were dynamically added to event handlers using a class attribute, and that made it hard to reason about the lifecycle and to avoid duplicate registrations.
    Implement a preliminary framework for continuously-running computations.
    Add links to read-only explorations in the Contribute gallery.
    Add a new input reader for reading multiple datastore input fields during mapreduce jobs.
    Resolving merge problem.
    Add an dashboard in the admin page for jobs.
    Add a test for enqueueing two instances of the same job type.
    Implement a working end-to-end MapReduce test.
    Minor renaming of test names.
    Use a jobs manager as a facade tomodels in the datastore, rather than duplicating state in a separate domain object.
    First pass at MapReduce job implementation.
    Finish up basic jobs models and tests.
    Further work on the jobs modelling. Still not ready for merging to develop yet; needs more tests.
    Preliminary commit for jobs functionality with tests. Not yet ready for check-in.
    Add some comments in response to review comments.
    Add models to keep track of long-running jobs.
    Revert erroneous gallery capitalization changes. Add job for conversion of InteractiveMap distances.
    Make all loads of the gallery use the search functionality. Add basic ranking.
    Add a job for checking exploration validity. This will be used for ensuring that no currently-existing exploration uses an invalid parameter name.
    Add pow(), log() and abs() functions. Add a job for listing expressions in existing explorations.
    Converted ExplorationSummaryCreation job from continuous to one-off. Improved some tests.
    Tried to convert ExpSummariesAggregator to oneoff job but get errors in core.jobs_test.
    And remove it from the job registry
    Using exploration summary domain objects instead of summary models directly, addressed code review.
    Prep for migration to stats jobs
    1. Stop writing to State Counter (old style) models
    2. Migrate all uses of current state counters over to aggregator
    3. Update aggregator to use both old and new models correctly
    4. Create one off job to deal with the overlap between these two systems
    Use exploration summaries to speed up galleries. Include MR job to generate initial summaries.
    Further refactoring of model deletion cron job.
    Add a one-off job for populating initial subscription data.
    Add a 'most recent updates' section to the user dashboard.
    Remove one-off stats migration job after discussion with Stephanie.
    Added a one-off test to index all explorations.
    Add a test to check that continuous computation classes are specified correctly, and introduce the concept of managers for one-off jobs.
    Migrate the existing StatsPageJobManager to use the new continuous computations framework.
    Explicitly pass in class names to MapReduce pipelines, and allow deleting of realtime datastore entities to depend on a timestamp.
    Remove the listener registration from event handlers and replace it with a more explicit ContinuousComputation dispatcher registry that is generated on event dequeue. In the earlier system, listeners were dynamically added to event handlers using a class attribute, and that made it hard to reason about the lifecycle and to avoid duplicate registrations.
    Implement a preliminary framework for continuously-running computations.
    Extend the event handler framework to accept listeners.
    Translate state counter events into event log entries
    Creating a job calculating the number of completions and total visits
    Resolving merge problem.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Create is_generic for rules and set it for existing rule types
    Separate exploration data files from other extensions.
    Automatically compute the parameters for rules based on the rule description.
    Add rules for NonnegativeInt.
    Add infrastructure and data for handling composite rules. This is a more flexible version of the current classifier framework and will eventually replace it.
    Remove normalizers; switch to data.objects.models.
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Renaming rule files to have YAML suffixes. Adding normalizers.
    Adding tests for classifiers and using PEP-8 for the Python files.
    Moving sample classifiers, explorations and widgets to a separate directory.
    Make multiple choice widget work.
    Adding some basic list rules.
    Adding the remaining two classifiers.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Moving models/ to apps/ in preparation for the migration to django non-rel
    Add missing files from previous commit
    Moving controllers to a separate folder
    Initial commit.
    Tried to convert ExpSummariesAggregator to oneoff job but get errors in core.jobs_test.
    Further refactoring of model deletion cron job.
    Use a MR job to cleanup old datastore entities, instead of doing so in a request/response cycle.
    Add a 'last updated' time to the user dashboard recent updates table.
    Add a cron job to clean up old auxiliary model instances for MR jobs.
    Change cron reporter to report on job status every 24 hours.
    Set up cron job for mailing the app admin if any MR jobs have failed recently.
    
    WARNING: this is not ready for merge into develop. We still need to patch
    gae-mapreduce-1.9.0.0/mapreduce/model.py, line 908, to use indexed=True.
    Deprecate file input widgets. Add a button in the admin dashboard to view job output.
    Add a separate section for unfinished jobs to the admin dashboard.
    Fix the handling of non-ascii characters in the migration job.
    Remove superfluous method.
    Show no more than 100 recent jobs on the admin dashboard.
    Remove suppression of default behavior of require_correct_job_type() for MR jobs.
    Add comment about why we have two realtime layers in BaseContinuousComputationManager.
    Address review comments.
    Address some review comments.
    Slight refactoring of the delete_layer() logic to put more of it into the realtime datastore base class.
    Do not require duplication of realtime datastore classes.
    When a computation is stopped, cancel the current batch job. In the admin dashboard, do not show a cancel button for batch jobs related to continuous computations.
    Address some review comments (the others are for future commits).
    Add a test to check that continuous computation classes are specified correctly, and introduce the concept of managers for one-off jobs.
    Create an admin dashboard for continuous computations.
    Migrate the existing StatsPageJobManager to use the new continuous computations framework.
    Make the timestamp a mandatory arg for realtime datastore instance deletion.
    Explicitly pass in class names to MapReduce pipelines, and allow deleting of realtime datastore entities to depend on a timestamp.
    Address review comments. In particular, wrap the various state changes in transactions.
    Trivial commit fixing some lint issues, but mostly meant to group the files related to continuous computations in a set so that review comments can be left on them.
    Check that no computations of the given type are running before kicking off a new one.
    Allow MapReduces to compare mapped items against the time the job was enqueued. Standardize time-handling conventions throughout the codebase (use '_msec' suffix and use methods from utils.py for time conversions).
    Remove the listener registration from event handlers and replace it with a more explicit ContinuousComputation dispatcher registry that is generated on event dequeue. In the earlier system, listeners were dynamically added to event handlers using a class attribute, and that made it hard to reason about the lifecycle and to avoid duplicate registrations.
    Implement a preliminary framework for continuously-running computations.
    Add a new input reader for reading multiple datastore input fields during mapreduce jobs.
    Resolving merge problem.
    Add an dashboard in the admin page for jobs.
    Use class names directly, instead of stringly-typing them.
    Add documentation to the BaseJobManager class.
    Add a transaction to prevent races when creating new jobs.
    Implement a working end-to-end MapReduce test.
    Use a jobs manager as a facade tomodels in the datastore, rather than duplicating state in a separate domain object.
    First pass at MapReduce job implementation.
    Finish up basic jobs models and tests.
    Further work on the jobs modelling. Still not ready for merging to develop yet; needs more tests.
    Preliminary commit for jobs functionality with tests. Not yet ready for check-in.
    Add some comments in response to review comments.
    Add models to keep track of long-running jobs.
    Add email sending functionality so that, later, we can send error reports and job failure messages to the app admins.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Add latency counters.
    Move perf counters out of the domain layer.
    Add email sending functionality so that, later, we can send error reports and job failure messages to the app admins.
    implemented PutErrors and DeleteErrors, and changed how retries are handled. I've also added some testing utilities.
    Resolving merge problem.
    Feedback thread barebone UI and data path.
    Further work on the jobs modelling. Still not ready for merging to develop yet; needs more tests.
    Add models to keep track of long-running jobs.
    Remove the Django port of Oppia from the codebase.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Check username for uniqueness
    
    Includes code review changes from previous username commits
    Requires a username for editors and adds a path to create them
    Check username for uniqueness
    
    Includes code review changes from previous username commits
    Requires a username for editors and adds a path to create them
    Remove the image storage model. Move image file uploading to use the file system storage model.
    Add a simple virtual file system for exploration assets.
    Requires a username for editors and adds a path to create them
    Requires a username for editors and adds a path to create them
    Add config property model and CSRF protection.
    Move state models to the exploration storage model file, since they really belong together.
    Add transactions around operations that update states in an exploration.
    Remove parameter storage model, and use only its domain class.
    Add memcache support.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Add user_services switching.
    Add import_models method for _Django
    Add model-switching mechanism.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Moving models/ to apps/ in preparation for the migration to django non-rel
    Add missing files from previous commit
    Moving controllers to a separate folder
    Initial commit.
    Use a separate task queue for handling event post-processing.
    Extend the event handler framework to accept listeners.
    Resolving merge problem.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Lint the codebase.
    Move jinja_utils to a separate module.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Implement pluggable skins.
    Automatically compute the parameters for rules based on the rule description.
    Add rules for NonnegativeInt.
    Add infrastructure and data for handling composite rules. This is a more flexible version of the current classifier framework and will eventually replace it.
    Remove normalizers; switch to data.objects.models.
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Renaming rule files to have YAML suffixes. Adding normalizers.
    Adding tests for classifiers and using PEP-8 for the Python files.
    Moving sample classifiers, explorations and widgets to a separate directory.
    Make multiple choice widget work.
    Adding some basic list rules.
    Adding the remaining two classifiers.
    Resolving merge problem.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Moving models/ to apps/ in preparation for the migration to django non-rel
    Add missing files from previous commit
    Moving controllers to a separate folder
    Initial commit.
    Add functionality for regenerating the search index.
    add a get_document_from_index function, and changed the way documents are converted to dicts to also include the language_code and rank attributes. This means that a returned document can be added to the index again, safely.
    modified gae_search_services_test.py to use the new test_utils FunctionWrapper subclasses.
    addressed further code review comments.
    pulled succeed_after_n_times into Spy
    address code review
    Removed checks for TransientError from add_documents_to_index and delete_documents_from_index
    implemented PutErrors and DeleteErrors, and changed how retries are handled. I've also added some testing utilities.
    implemented sorting
    commit untracked changes
    implement gae platform search services
    Add functionality for regenerating the search index.
    Small protractor test updates.
    Add language codes to the search query.
    Implement server-side paging for the gallery.
    Some fixes for search functionality:
    
    (a) Handle unparseable queries gracefully.
    (b) Index the demo explorations when they are loaded.
    (c) Remove the temporary event handler in exp_services.py.
    Add a search field to the gallery.
    added evens to be triggered when an exploration or its status changes.
    added search to exp_domain layer
    add a get_document_from_index function, and changed the way documents are converted to dicts to also include the language_code and rank attributes. This means that a returned document can be added to the index again, safely.
    clarified passingin None as cursor
    clarified 'cursor' argument documentation.'
    address code review
    Removed checks for TransientError from add_documents_to_index and delete_documents_from_index
    implemented PutErrors and DeleteErrors, and changed how retries are handled. I've also added some testing utilities.
    completed search 'sort' argument documentation.
    implemented sorting
    commit untracked changes
    implement gae platform search services
    implement gae platform search services
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Moving models/ to apps/ in preparation for the migration to django non-rel
    Add missing files from previous commit
    Moving controllers to a separate folder
    Initial commit.
    Allow users to leave the signup page mid-way through signup, logging them out if they do so.
    Make signing in required if the user is logged in but has not chosen a username.
    Fix an import error in gae_current_user_services.
    Resolving comments."
    Resolving comments.
    Making a change that changes the way a user logs out of oppia. Unlike earlier this will onky log them out of appengine and not of any other google services. Issue 136
    Minor fix to get_user_id method to remove duplication.
    Add OpenID authentication system for non-GAE platform.
    Move checks for whether the user is a super admin directly to the platform level.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Refine rights management for moderators, admins and super admins.
    Implement admin and moderator rights management.
    Add a model for exploration rights.
    Make JS files compatible with minification.
    Use actual user_ids instead of email addresses. Require the user to pick a valid username that would appear in the commit logs.
    Check username for uniqueness
    
    Includes code review changes from previous username commits
    Check username for uniqueness
    
    Includes code review changes from previous username commits
    Add memcache support.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Add user_services switching.
    Move domain-related files to their own folder in the repository.
    Use module-level imports. Avoid aliasing module names where possible.
    Move user-related methods (which are GAE-dependent) into a single file.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Restructure tests, so that each module has its own test file.
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Renaming rule files to have YAML suffixes. Adding normalizers.
    Adding tests for classifiers and using PEP-8 for the Python files.
    Add memcache support.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Moving models/ to apps/ in preparation for the migration to django non-rel
    Add missing files from previous commit
    Moving controllers to a separate folder
    Initial commit.
    Implement the backend for recording and querying all commits to all explorations (together with filters and paging).
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Lint the codebase.
    Add transactions around operations that update states in an exploration.
    Move jinja_utils to a separate module.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Implement pluggable skins.
    Automatically compute the parameters for rules based on the rule description.
    Add rules for NonnegativeInt.
    Add infrastructure and data for handling composite rules. This is a more flexible version of the current classifier framework and will eventually replace it.
    Remove normalizers; switch to data.objects.models.
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Renaming rule files to have YAML suffixes. Adding normalizers.
    Adding tests for classifiers and using PEP-8 for the Python files.
    Moving sample classifiers, explorations and widgets to a separate directory.
    Make multiple choice widget work.
    Adding some basic list rules.
    Adding the remaining two classifiers.
    Add transactions around operations that update states in an exploration.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Moving models/ to apps/ in preparation for the migration to django non-rel
    Add missing files from previous commit
    Moving controllers to a separate folder
    Initial commit.
    Include the app name in emails sent to the admin.
    Add email sending functionality so that, later, we can send error reports and job failure messages to the app admins.
    Include the app name in emails sent to the admin.
    Add checks that cron handler is actually being called by cron. Add check for passing tests in deploy script. Fix syntax error.
    Add email sending functionality so that, later, we can send error reports and job failure messages to the app admins.
    Add email sending functionality so that, later, we can send error reports and job failure messages to the app admins.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Moving models/ to apps/ in preparation for the migration to django non-rel
    Add missing files from previous commit
    Moving controllers to a separate folder
    Initial commit.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Lint the codebase.
    Batch datastore get() and put() operations, and use local caches where possible. This halves the exploration loading time! (E.g., on the dev server, the binary search exploration used to take 18.3 s to load from scratch, and now it takes 9.8 s.)
    Move perf counters out of the domain layer.
    Add memcache performance counters.
    Add memcache support.
    Add memcache support.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Moving models/ to apps/ in preparation for the migration to django non-rel
    Add missing files from previous commit
    Moving controllers to a separate folder
    Initial commit.
    Remove duplicate warnings.
    Remove the 'widget_sticky' setting.
    Update tests.
    Update protractor tests.
    Redesign the gallery page.
    
    Still TODO:
    (a) Fix integration test for language and category selection.
    (b) Check if paging is needed for the no-query case.
    (c) Implement carousel.
    Make 'preview mode' into a separate tab.
    Protractor tests: add functionality to display screenshots from failed tests.
    Protractor tests: refactor some of the code to avoid duplication of widget handling and generalise the editing of configuration properties.
    Protractor tests: add tests for the publication ect. process and subsequent gallery display.
    Protractor tests: add functionality and examples for editor rules and multiple states.
    Create framework for end-to-end testing in protractor.
    Hide superfluous error messages; remove an unneeded trailing comma.
    Add an integration test framework and a sample integration test.
    Add missing dependency to karma tests
    Replace intro-js with ng-joyride -- the former was leading to a buggy editor tutorial.
    Upgrade angular version to 1.3.13 to fix bug in ngAnimate.
    Address review comments.
    
    (1) Add proper tooltips to icons in navbar.
    (2) Reduce size of top-left Oppia icon to 40px height.
    (3) Change box-shadow of right sidebar to follow material design spec.
    (4) Standardize horizontal and vertical offsets of the titles of the various tabs.
    Merged branch 'new-paging' into develop. Modified front-end test slightly.
    First half of the work needed to rename widgets to interactions/rich-text-components.
    Karma tests: modify the coverage reports to include all javascript except the test files themselves. Also delete an outdated test.
    Fix tests.
    Add missing directories to karma coverage report.
    Allow each widget to have its own integration test utilities.
    Upgrade Angular to v1.3.0-rc.5 and jQuery to v2.1.1.
    Expression tests ported to karma.
    Exclude expressions js files from Karma test for now.
    UI fixes for the gallery page:
    
    (1) Hide the edit buttons in mobile view.
    (2) Animate the left nav (this is not yet working fully correctly, though).
    (3) Fix issue with top navbar dropdowns not behaving correctly in mobile view.
    Move code for forms to its own directory. Fix small bug in float validator.
    Add CodeMirror MergeView to compare history
    Also change ui-codemirror from v0.1.1 to v0.1.2
    Fix some broken frontend tests.
    Move to the recommended Angular .controller syntax.
    
    This follows the recommendation in the list of breaking changes
    for Angular 1.3.0 described at
    
        https://github.com/angular/angular.js/blob/master/CHANGELOG.md#130-beta15-unbelievable-advancement-2014-07-11
    Remove phantomjs and use chrome instead.
    Fixes for issues discovered during release testing and a few others.
    
    1. Add docstring for video id in the noninteractive video widget.
    2. Some $scope.$apply() calls are throwing errors in the frontend, and this is causing things like the code widget to fail silently (the 'Run' button never turns on). Add logging of frontend errors to the backend so that we can detect and fix these.
    3. Update ui-codemirror to a newer version in order to fix a $scope.$apply() error in the ui-codemirror library.
    4. Make images for options in multiple-choice questions smaller so that they don't overwhelm the rule editor.
    Implement sortable rules.
    Upgrade frontend test libraries, and add a code coverage reporter.
    Resolving merge problem.
    Continue the Bootstrap 3 upgrade.
    First pass at upgrading to Bootstrap 3.
    Use PhantomJS instead of Firefox for running unit tests.
    Add a few frontend tests for the MusicNotesInput widget.
    Add a first end-to-end test.
    Convert interactive widgets to Angular directives.
    
    This has the following advantages:
    (a) speed: the interactive widgets now load faster because there is no
    need for a second request to the server to populate the iframe.
    (b) no more monkeying around with the parent container to handle iframe
    height changes
    (c) less boilerplate is needed for each individual widget
    (d) there is no need to reload JS libraries separately for the widget,
    since these libraries will have already been included in the container page.
    Update to AngularJS 1.2.0-rc.3.
    Add test for RTE conversion.
    Update to AngularJS 1.2.0-rc.3.
    Add test for RTE conversion.
    Do JS testing with only one browser.
    Convert parameter change editor dropdown to use the new reusable select2 component. Remove the old angular-ui dependency.
    Remove dependency on ngRoute and simplify the routing code in the editor view. This turns out to have the nice side-effect of making the exploration editor page load a lot faster :-)
    Improve frontend modal code using ui.bootstrap.
    Upgrade Angular to 1.2.0-rc.2. Change modal callsites to buttons instead of links, and add contextual escaping using  where needed. Add a separate page for 404 errors.
    Improve the flow for adding an element to a list. Add unit tests for the list directive.
    Run frontend tests on Firefox too.
    Move core JS files to the frontend root so that they are more easily discoverable.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Update angularjs version to 1.0.7
    Add a note to the node.js script to accommodate different Linux OSes.
    Add karma tests and node.js installation.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Add tests for filters
    Change testacular to karma. Modify initial state name.
    Update testacular (karma) config file.
    Reorganize frontend JS files, partitioning them into 'apps'.
    Adding frontend test framework and an example test.
    Upgrade GAE version from 1.9.10 to 1.9.11.
    Revert "Add a patch to the mapreduce library to index shards by time updated so that queries for recent failing shards can be made."
    
    This reverts commit fd8bf553a6026baa94d6c242ca34a5c6c4d2e138. We will instead clean up old jobs so that a full table scan isn't a big deal.
    Add a patch to the mapreduce library to index shards by time updated so that queries for recent failing shards can be made.
    Upgrade GAE SDK version from v1.8.8 to v1.9.10.
    Addressed review comments.
    Small fixes to correct issues discovered during test deployment.
    Modify the dashboard view to show private, beta and released explorations.
    Allow tests to log output to the console.
    Remove SLOW_TAGS option, migrate other options so that they can be used directly in test.sh, and refactor scripts/backend_tests.py for clarity.
    Speed up the backend tests significantly by running them in parallel.
    
    To-do:
    1. Test the error case, both when Ctrl-C is used and when it is not.
    2. Migrate all options from gae_suite.py to backend_tests.py, so that
       the former never needs to be run directly.
    3. Time the relative difference when using coverage reports and note
       it in the docstring for test.sh.
    4. Allow INFO logs to be output to the terminal.
    Combine the splash and dashboard page controllers into a common homepage controller.
    Add tests for MathLatexString
    Add email sending functionality so that, later, we can send error reports and job failure messages to the app admins.
    Add a test to check that continuous computation classes are specified correctly, and introduce the concept of managers for one-off jobs.
    Allow MapReduces to compare mapped items against the time the job was enqueued. Standardize time-handling conventions throughout the codebase (use '_msec' suffix and use methods from utils.py for time conversions).
    Remove the listener registration from event handlers and replace it with a more explicit ContinuousComputation dispatcher registry that is generated on event dequeue. In the earlier system, listeners were dynamically added to event handlers using a class attribute, and that made it hard to reason about the lifecycle and to avoid duplicate registrations.
    Implement a preliminary framework for continuously-running computations.
    Extend the event handler framework to accept listeners.
    added search to exp_domain layer
    updated expected number of tests, and fixed some stupid mistakes.
    UX improvements for the editor prerequisites page.
    
    1. Remove some of the descriptive text.
    2. Make errors more immediate.
    3. Prevent form submission if it won't be accepted anyway.
    Update number of tests.
    Add a registry for skins.
    Move each skin to its own directory. Load only the HTML template, and let that template load everything else.
    make windows tests pass
    Fix more Windows tests; use simpler construct_path
    Remove all traces of the old feedback models.
    Add a test for feedback migration.
    Add a test for feedback model ids.
    Add more controller-level tests for feedback threads.
    First round of tests for the feedback thread backend. Also consolidate some handlers.
    Fix merge errors.
    Remove exception wrapping in objects.py. Use schemas to validate some objects. Add more tests for schema validation and normalization of objects using schemas.
    Add a module for schema-based validation of objects (and other things).
    LogicProof widget: make minor alterations to default data in response to testing feedback.
    Remove cloning functionality from the backend.
    Changed sys.path to import the correct version of dependencies.
    Creating a job calculating the number of completions and total visits
    Add a new input reader for reading multiple datastore input fields during mapreduce jobs.
    Resolving merge problem.
    Further improvements of some editor tests (addressing code review).
    Add an dashboard in the admin page for jobs.
    Add a test for enqueueing two instances of the same job type.
    Implement a working end-to-end MapReduce test.
    Use a jobs manager as a facade tomodels in the datastore, rather than duplicating state in a separate domain object.
    First pass at MapReduce job implementation.
    Add a modal to the exploration editor page that gives instructions for releasing an exploration.
    Minor style fixes
    Add generated session ids and time spent in state to reader files
    Finish up basic jobs models and tests.
    Further work on the jobs modelling. Still not ready for merging to develop yet; needs more tests.
    Preliminary commit for jobs functionality with tests. Not yet ready for check-in.
    Create base events and events needed for completion rate (Start/Leave)
    LogicProof widget: response to second set of review comments.
    Fix test count.
    Removing v2 of stats models to ease further development
    Feedback list test updates and typo fixes.
    Tests for feedback list.
    Removing v2 of stats models to ease further development
    Feedback list test updates and typo fixes.
    Tests for feedback list.
    Add additional exploration properties.
    
    (The properties are: skill tags, blurb, author notes, objective and
    language code.)
    
    WARNING: This should not be merged into the main branch until the
    frontend is written, otherwise all publish will fail since there is
    nowhere to specify the (required) objective.
    Add a new gallery for playtesting.
    LogicProof widget: make various updates including conversion to logic unicode symbols, inclusion of static/js tests & tools, and improvements to the UI.
    Fix error arising due to unnecessary conversion of unicode strings to Python's str type.
    Implement the frontend for the recent commits list.
    
    Still TODO:
    - audit the data returned to ensure nothing private is exposed
    - test on a production instance
    - reuse the functionality in the exploration version history page
    - reuse the functionality in the user profile page
    Implement the backend for recording and querying all commits to all explorations (together with filters and paging).
    Add tests for the preceding commit.
    Fix a bug introduced in revision 5b4a64d16cc involving misgeneration of new exploration ids.
    Add models to keep track of long-running jobs.
    Merge of missing answer changes, fixing conflicts
    Add an option to open links in the same window.
    In the python files for interactive widgets, the obj_type of the reader's answer should be represented as a string.
    Housekeeping changes: remove unneeded block_number, normalize reader answers prior to processing them, do not fail if the stats answer logs overflow (issue 139), make warmup handler not throw 404s.
    Add tests for the moderator page.
    Allow editors to download earlier versions of an exploration as zip files
    added a couple of rudimentary tests for the moderator page backend
    Admins and moderators should be able to see all public explorations in the Contribute gallery.
    Add functionality for banning editors.
    Improve the final wording for the test script.
    Fix some broken tests.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Implement reverting functionality.
    Add moderator role display in the top-right of each page (for moderators).
    Refine rights management for moderators, admins and super admins.
    In the learners' gallery, point viewers to the Contribute page.
    Add a deploy script. Do not require building or testing in the startup script.
    Allow old versions of explorations to be linked to.
    Add more controller tests.
    Add warmup request handler. Remove a superfluous test.
    Remove the existing music note widget.
    Add a Contributor gallery. Update URL routing. Make other small UI tweaks.
    Implement the necessary queries for the gallery and profile pages.
    Allow owners, collaborators and playtesters of explorations to be set.
    Revise the wording for the static pages.
    Improve the way exploration creation and saving is handled in the backend. Require commit_cmds and commit_messages to be specified by default, where possible.
    Add versioning for config model. Fix editor prerequisites JS tests.
    Tighten up the implementation of user settings and rights.
    Implement generic versioned models that all storage classes can use.
    
    Also, for explorations, create a new version for every save action,
    rather than only after the exploration is published.
    Standardize the reader URL mapping and also standardize the way JSON interactions are handled in all the server-side integration tests.
    Fully migrate explorations to use the rights manager.
    Rework the splash page.
    Allow configuration properties to be edited in the admin UI.
    Add a dialogue requesting a commit message when saving to the state editor.
    Move unresolved answers functionality to a separate handler.
    Add tests for more handlers in controllers.editor.
    Add tests to ensure that object editor templates have the correct names and that object editors are defined for the types specified in the various rule descriptions.
    Remove unused List rule.
    Specialize the set editor; make it specify the type of item it contains.
    Remove an unused rule.
    Remove unneeded objects and rules.
    Properly escape strings in HTTP responses.
    Add pre- and post- hooks to the code evaluation widget. Add rules for comparing the output of a submission.
    Replace the link control in jwysiwyg with a safer one.
    Add filepath prefix checking and tests for catching invalid filepaths.
    Fixing merge issue.
    Resurrected welcome exploration and added explore link from splash screen to gallery.
    Tidy up outstanding issues with the script that embeds explorations in other pages, making it fully functional and allowing it to show error messages where appropriate. Fix the number of tests run (which the previous commit forgot to change).
    Resurrected welcome exploration and added explore link from splash screen to gallery.
    Create UpdateStateTests and add additional checks on incoming data to update_state itself.
    Add rights management for deleting explorations. Only an admin can delete published explorations; only the owner and admins can delete unpublished ones.
    Enable soft deletion of explorations.
    Add code and tests for handling viewing rights to an exploration.
    Add tests for editor prerequisites page.
    Add an editor prerequisites page with information about the CC0 license.
    Infer allowed noninteractive widget tags directly from the widget definitions.
    Reinstate the image upload feature.
    Explicitly register widgets that are permitted in the server. Remove unneeded methods and files.
    Add tests for CSRF functionality.
    Remove the JS tests from the automatic Python testing -- the node installation is causing trouble on some computers. Move it into a run_js_tests.sh script instead.
    Add fairly strict HTML sanitization for rich-text-editor content.
    Minor security enhancements.
    Move the tar exploration assets into a directory so that they can be served from the exploration filesystem. Allow rules to make use of a filesystem.
    Add a disk-backed implementation of the file system so that it can be substituted for a datastore-backed one in tests.
    Do not require the exploration id to be passed for every file system call.
    Tests for lowercasing usernames
    Check username for uniqueness
    
    Includes code review changes from previous username commits
    Check username for uniqueness
    
    Includes code review changes from previous username commits
    Add exploration assets to the downloaded zip file.
    Remove the image storage model. Move image file uploading to use the file system storage model.
    Add versioning capability to the exploration assets file system.
    Add a simple virtual file system for exploration assets.
    Update the number of tests
    Fix an error in a custom jinja filter name, which caused the binary search exploration to fail.
    Update the number of total tests. Allow '_' in widget parameter name.
    Evaluate parameters sequentially, rather than as an unordered set.
    Minor modifications to the file input widget and the third-party install script.
    Fix permission issues in start scripts
    Complete the schema change that allows more flexible rule specifications (i.e. that allow Boolean combinators and classifying based on parameters).
    Move the yaml files to use value generators for state parameter changes, and ensure that the reader view works. Note that this commit breaks the editor view; this will be fixed in a future commit. None of these commits will be pushed to master until we have a working build.
    Complete the implementation of the widget customization param editors using the new value generators.
    Allow the running of individual tests and test classes. Allow the categorization of tests as slow so that they can be omitted using a command-line flag if desired.
    Add a parse_with_jinja flag to the 'copier' value generator.
    Remove value generators that are not currently in use. Write code that implements the restricted generators.
    Reinstating memcache functionality. Clear more keys from memcache when versioning so that old copies of explorations aren't retrieved.
    Temporarily commenting out memcache. Move export_to_versionable_dict() method inside save_exploration() method.
    Modify widgets to use value generators for their customization args. This commit removes the widget customization functionality in the frontend, which will be added back in the next commit or two.
    Initial implementation of value generators.
    Introduce server-side validation of exploration and state names. Standardize the characters that can be used in these names.
    Display version history in the editor UI. Add snapshot models to Django backend.
    Add versioning of explorations.
    Add functionality for exporting explorations to versionable dicts, to prepare for full versioning of explorations.
    Add test suite for django to automatically discover and run tests. Add platform switching to tests.
    Rename tests.py for GAE models to gae_models_test.py
    Fully test and document the BaseModel storage class.
    Add a generic backend simulator to the reader controller test player, so that it is easier to test playthroughs of the sample explorations.
    import feconf only after dev_appserver is imported.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    For persistent storage, store states as JSON blobs instead of rich objects. The rich object representation will be used for retrieving them from memcache.
    Set platform to gae before running gae tests
    Added jsrepl installation.
    Add model switching and django test runner.
    Add integration test for statistics.
    Condense and clarify the get_state_stats_for_explorations() method.
    Add karma tests and node.js installation.
    Added tests in objects_test.py.
    CodeWidget for programming explorations.
    Remove unneeded typed object models.
    Add more tests to the exploration app.
    Moving the collection of unresolved answers for a state to the statistics module.
    Add a test for count_state_hits().
    Complete the transition to first-class Rule objects. Remove the classifier model and all calls to it.
    Add rules for NonnegativeInt.
    Update the number of tests.
    Add infrastructure and data for handling composite rules. This is a more flexible version of the current classifier framework and will eventually replace it.
    Add a registry of widgets.
    Remove all dependencies on widget storage classes.
    Move gae_runtime directory one level above so that it does not get uploaded to the GAE production app.
    Simplify some code in the statistics model. Fix an error in the retrieval of journal entities by using state keys instead of state ids.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Move state deletion logic from the controllers into the domain layer.
    Separate the exploration model into a domain object class and a storage class.
    Add tests for more exploration services.
    The exploration model should not know who the current user is.
    Temporarily remove partially-implemented dataset functionality. This depends on how typed objects are maintained, and it looks like the way we do this might need to be refactored. We can put this functionality back in later.
    Remove unneeded methods from exploration/models.py
    Remove unnecessary imports, including sympy (which we will include later once we actually use it).
    Add tests for gallery and base controllers.
    Remove dependence of the gallery controller on the exploration model. Create an exploration services file containing actions that involve explorations.
    Minor doc tweak.
    Allowing tests to be run on individual subdirectories.
    Reorganize frontend JS files, partitioning them into 'apps'.
    Refactor the state model, breaking up a long method and making the logic clearer.
    Add unit tests for statistics model.
    Creates top ten improvable states statistics analysis
    Upgrade tests to use GAE 1.7.7
    Fully test the Widget model.
    Add tests for the widget model. Fix an error in adventure.yaml.
    Ensure that any state has a parent exploration. Add the correct content type to JSON responses. Add end-to-end test for the reader controller.
    Add a datasets property to the Exploration model.
    Moving models/ to apps/ in preparation for the migration to django non-rel
    Add tests to the exploration, parameter and classifier models, bringing them to nearly 100% coverage.
    Add more model tests.
    Add verification for demo explorations.
    Combining the Parameter and MultiParameter classes into a single Parameter class.
    Moving parameters to use the new Parameter models. This change is not backwards-compatible.
    Updating the state parameters to use the MultiParameter model. For now they are all of type UnicodeString.
    Add a parameter change model.
    Remove normalizers; switch to data.objects.models.
    Adding remaining types (video, image, html).
    Creating objects using all existing normalizers.
    Add support for typed objects in Oppia.
    Add an admin handler that allows reloading of the default explorations. Move the methods in controller_utils.py to the respective models/controllers.
    Added InteractiveMap and classifier Coord2D.
    Removing the AugmentedUser class to make queries faster.
    Move a utility method to utils.py, and add tests.
    Adding versioning support for most third-party libraries.
    Finish testing utils.py
    Merge changes
    Finish refactoring of widgets.
    Restructuring the widget models so that widgets are only loaded once from files and thereafter stored in the datastore.
    Add a base model class. Improve the model tests.
    Finish tests for utils.py
    Make lists with unicode strings display properly in the reader view.
    Add more tests for utils.
    Add a unit test for utils
    Change NDB queries to get_by_id for speed.
    Restructure tests, so that each module has its own test file.
    Allow addition of collaborators.
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Get the test runner to also run the classifier tests.
    add unit tests for utils.py
    Add additional unit tests
    Move exploration, state and parameter models into separate files.
    Deleting old files.
    Continuing to replace the old input_view/action_set infrastructure with the new interactive_widget/interactive_ruleset infrastructure. WARNING: The present commit leaves Oppia in a broken state.
    Persisting interactive widget ids for a state. Renaming 'blurb' to 'description' for consistency; renaming widget.class to widget.id since class is a reserved word in JavaScript.
    Added unit tests for the models module
    Add a couple of simple functional tests.
    Add a test for the index page.
    Fixing import issues for 'coverage run'
    Add a basic test suite for Oppia
    addressed code review comments.
    updated expected number of tests, and fixed some stupid mistakes.
    addressed code review of test_utils_tests
    addressed code review.
    added FunctionWrapper and subclasses to test_utils
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Moving models/ to apps/ in preparation for the migration to django non-rel
    Add missing files from previous commit
    Moving controllers to a separate folder
    Initial commit.
    Require the user to explicitly select the interaction for each state.
    Allow users to leave the signup page mid-way through signup, logging them out if they do so.
    Make signing in required if the user is logged in but has not chosen a username.
    Change several instances of http to https. Simplify search query code slightly.
    Resolving comments.
    Resolving comments."
    Resolving comments.
    Complete the deprecation of 'widget'.
    Reverting unnecessary change.
    Making a change that changes the way a user logs out of oppia. Unlike earlier this will onky log them out of appengine and not of any other google services. Issue 136
    Break the state transition handler into multiple handlers, similar to what is done in editor preview mode.
    Using exploration summary domain objects instead of summary models directly, addressed code review.
    Use more unicode strings in tests. COnsolidate common strings.
    Include the app name in emails sent to the admin.
    Addressed review comments and made the exp_jobs_test work with the new private exploration behavior.
    Use a separate task queue for handling event post-processing.
    Address review comments -- in particular, add more tests.
    addressed more review comments.
    Add a 'most recent updates' section to the user dashboard.
    Fixed tests that didn't expect jobs to be enqueued by event triggers.
    Modify the dashboard view to show private, beta and released explorations.
    Allow tests to log output to the console.
    Remove SLOW_TAGS option, migrate other options so that they can be used directly in test.sh, and refactor scripts/backend_tests.py for clarity.
    Add email sending functionality so that, later, we can send error reports and job failure messages to the app admins.
    Remove the listener registration from event handlers and replace it with a more explicit ContinuousComputation dispatcher registry that is generated on event dequeue. In the earlier system, listeners were dynamically added to event handlers using a class attribute, and that made it hard to reason about the lifecycle and to avoid duplicate registrations.
    addressed code review comments.
    Implement a preliminary framework for continuously-running computations.
    updated expected number of tests, and fixed some stupid mistakes.
    addressed code review.
    added FunctionWrapper and subclasses to test_utils
    pulled succeed_after_n_times into Spy
    address code review
    implemented PutErrors and DeleteErrors, and changed how retries are handled. I've also added some testing utilities.
    minor code style changes.
    addressed code review
    add a swap method to TestBase
    implement gae platform search services
    Tidy up the test runner.
    Resolving merge problem.
    Implement a working end-to-end MapReduce test.
    First pass at MapReduce job implementation.
    Finish up basic jobs models and tests.
    Preliminary commit for jobs functionality with tests. Not yet ready for check-in.
    In tests, change is_admin to is_super_admin to avoid confusion.
    Add tests for the moderator page.
    Remove the Django port of Oppia from the codebase.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Address some, but not all, of the failing Django tests.
    Change save() to commit(). Refactor model creation and update.
    Refine rights management for moderators, admins and super admins.
    Add more controller tests.
    Implement admin and moderator rights management.
    Allow owners, collaborators and playtesters of explorations to be set.
    Add versioning for config model. Fix editor prerequisites JS tests.
    Tighten up the implementation of user settings and rights.
    Implement generic versioned models that all storage classes can use.
    
    Also, for explorations, create a new version for every save action,
    rather than only after the exploration is published.
    Remove the state model from the backend.
    
    Reasons:
    - It is confusing to keep track of two separate lifecycles for states
        and explorations.
    - The state name and state id were duplicate ways to identify a
        particular state.
    
    Side effects:
    - This change has resulted in an update to the YAML schema. The update is
        fully backward-compatible.
    - States are now identified in URLs and in analytics by their names
        rather than their ids.
    Standardize the reader URL mapping and also standardize the way JSON interactions are handled in all the server-side integration tests.
    Use actual user_ids instead of email addresses. Require the user to pick a valid username that would appear in the commit logs.
    Lint the codebase.
    Allow configuration properties to be edited in the admin UI.
    Move unresolved answers functionality to a separate handler.
    Add tests for more handlers in controllers.editor.
    Fix django tests.
    Properly escape strings in HTTP responses.
    Enable soft deletion of explorations.
    Move delete_all_* methods to the test file, since they should only be used there.
    Add tests for editor prerequisites page.
    Remove the image storage model. Move image file uploading to use the file system storage model.
    Add a simple virtual file system for exploration assets.
    Security fix: add XSSI protection.
    Allow the running of individual tests and test classes. Allow the categorization of tests as slow so that they can be omitted using a command-line flag if desired.
    When an exploration is deleted, delete its snapshots too. Otherwise when the demo explorations are reloaded (say) then the version snapshotting will fail because the current version already exists. We should change this behavior later to mark explorations as deleted instead of actually deleting them (so that they can be restored from backup), but this will do for now.
    Display version history in the editor UI. Add snapshot models to Django backend.
    Add functionality for exporting explorations to versionable dicts, to prepare for full versioning of explorations.
    Add test suite for django to automatically discover and run tests. Add platform switching to tests.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Add integration test for statistics.
    Move domain-related files to their own folder in the repository.
    Add more tests to the exploration app.
    Moving the collection of unresolved answers for a state to the statistics module.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Add tests for gallery and base controllers.
    Restructure tests, so that each module has its own test file.
    Speed up the backend tests significantly by running them in parallel.
    
    To-do:
    1. Test the error case, both when Ctrl-C is used and when it is not.
    2. Migrate all options from gae_suite.py to backend_tests.py, so that
       the former never needs to be run directly.
    3. Time the relative difference when using coverage reports and note
       it in the docstring for test.sh.
    4. Allow INFO logs to be output to the terminal.
    Housekeeping changes: remove unneeded block_number, normalize reader answers prior to processing them, do not fail if the stats answer logs overflow (issue 139), make warmup handler not throw 404s.
    Add a load test script for the reader view, and fix a bug in the appstats implementation (it was working in dev but not in production).
    Add a load test script for the reader view, and fix a bug in the appstats implementation.
    Small protractor test updates.
    Update tests.
    More fixes to integration tests.
    Fix integration tests.
    Address additional review comments
    Address review comments
    add functions for reading text in codemirror
    Remove widget_domain, replacing it with two base classes for interactions and rich-text components.
    First half of the work needed to rename widgets to interactions/rich-text-components.
    Protractor tests: Switch editor and player utilities to using protractor-specific classes where possible. Also remove some instances of 'widget'.
    Address review comments.
    Update integration tests.
    Protractor tests: response to review comments.
    Protractor tests: response to review comments.
    Add new stages to the tutorial for the preview and save buttons; rewrite other parts to flow better. Fix issue with the part of tutorial that pertains to rules not displaying correctly. Fix integration tests.
    Protractor tests: refactor some of the code, including abstracting out the handling of rules.
    Protractor tests: response to review comments, including adding some additional checks of editor behaviour.
    Protractor tests: refactor some of the code to avoid duplication of widget handling and generalise the editing of configuration properties.
    Protractor tests: response to review comments.
    Protractor tests: add tests for non-interactive widgets and the rich-text editor. In the process refactor the test code for widgets, objects and forms.
    Protractor tests: add functionality and examples for editor rules and multiple states.
    Address review comment.
    Add functionality for clearing the RTE.
    Update protractor to v1.2.0
    Rest of response to review comments on integration tests.
    Initial response to review comments.
    Create framework for end-to-end testing in protractor.
    Require the user to explicitly select the interaction for each state.
    Remove the 'widget_sticky' setting.
    Protractor tests: Response to review comments.
    Protractor tests: Switch gallery, admin and users to using protractor-specific class when possible. This is to make it easier for those editing production code to identify protractor's requirements.
    Protractor tests: response to review comments.
    Protractor tests: response to review comments, including adding some additional checks of editor behaviour.
    Protractor tests: refactor some of the code to avoid duplication of widget handling and generalise the editing of configuration properties.
    Protractor tests: add tests for non-interactive widgets and the rich-text editor. In the process refactor the test code for widgets, objects and forms.
    Protractor tests: add tests that when oppia explorations are embedded in another page the hooks from the explorations back to that page function correctly. Also respond to review comments.
    Protractor tests: response to review comments.
    Protractor tests: add tests for the embedding of oppia explorations in external webpages, and modify the examples of such embeddings accordingly. This does not include propogation of events from the explorations to the surrounding pages.
    Require the user to explicitly select the interaction for each state.
    Update Protractor tests.
    Move 'publish exploration' button to navbar.
    Address protractor review comments.
    Make 'preview mode' into a separate tab.
    Protractor tests: Switch editor and player utilities to using protractor-specific classes where possible. Also remove some instances of 'widget'.
    Update integration tests.
    Protractor tests: add a test framework for interactive widgets and do some minor refactoring.
    Address Jacob's review comments. Rename 'beta' to 'public'. Reduce number of status choices in the gallery.
    Protractor tests: response to review comments.
    Protractor tests: response to review comments.
    Add new stages to the tutorial for the preview and save buttons; rewrite other parts to flow better. Fix issue with the part of tutorial that pertains to rules not displaying correctly. Fix integration tests.
    Protractor tests: refactor some of the code, including abstracting out the handling of rules.
    Protractor tests: response to review comments, including adding some additional checks of editor behaviour.
    Protractor tests: add tests for non-interactive widgets and the rich-text editor. In the process refactor the test code for widgets, objects and forms.
    Minor changes to button name and exploration objective placeholder.
    Refactor graphData out into a graphDataService.
    Add objective and language fields to the 'create exploration' form.
    Protractor tests: add tests for the publication ect. process and subsequent gallery display.
    Protractor tests: add functionality and examples for editor rules and multiple states.
    Protractor tests: add functions relating to the settings tab, and refactor some earlier code.
    Additional response to review comments.
    Rest of response to review comments on integration tests.
    Initial response to review comments.
    Create framework for end-to-end testing in protractor.
    Add validation for the new EndConversation interaction, and hide its rule display.
    Add a delay to the integration test to give the learner card some time to load.
    Make 'preview mode' into a separate tab.
    First half of the work needed to rename widgets to interactions/rich-text-components.
    Protractor tests: Switch editor and player utilities to using protractor-specific classes where possible. Also remove some instances of 'widget'.
    Update integration tests.
    Move initial parameter evaluation to use the client-side framework.
    Protractor tests: response to review comments.
    Protractor tests: add a test framework for interactive widgets and do some minor refactoring.
    Protractor tests: response to review comments.
    Protractor tests: response to review comments.
    Protractor tests: refactor some of the code, including abstracting out the handling of rules.
    Protractor tests: response to review comments, including adding some additional checks of editor behaviour.
    Protractor tests: refactor some of the code to avoid duplication of widget handling and generalise the editing of configuration properties.
    Protractor tests: response to review comments.
    Protractor tests: add tests for non-interactive widgets and the rich-text editor. In the process refactor the test code for widgets, objects and forms.
    Protractor tests: add tests for the embedding of oppia explorations in external webpages, and modify the examples of such embeddings accordingly. This does not include propogation of events from the explorations to the surrounding pages.
    Address review comments.
    Allow each widget to have its own integration test utilities.
    Protractor tests: add tests for the publication ect. process and subsequent gallery display.
    Protractor tests: add functionality and examples for editor rules and multiple states.
    Protractor tests: add functions relating to the settings tab, and refactor some earlier code.
    Rest of response to review comments on integration tests.
    Initial response to review comments.
    Create framework for end-to-end testing in protractor.
    Protractor tests: Scroll to neutral element in editor view if it's not showing.
    Require the user to explicitly select the interaction for each state.
    Remove duplicate warnings.
    Small protractor test updates.
    Update Protractor tests.
    Update integration tests to handle new interaction dropdown.
    Move the 'create new state' option into the rule destination dropdown.
    Fix jittering when moving from the editor tab to the preview tab. Update tests.
    Fix integration tests.
    Fix protractor tests
    Replace intro-js with ng-joyride -- the former was leading to a buggy editor tutorial.
    Update protractor tests.
    More fixes to integration tests.
    Move rule tabs to the bottom of the state editor.
    Update integration tests.
    Remove header of subsequent state from editor view; remove 'click to see rules' button. Style the editor so that the layout looks nice.
    Address review comments
    integration tests for history page
    Address protractor review comments.
    Update integration tests.
    Make 'preview mode' into a separate tab.
    Protractor tests: fix an issue withe scrolling.
    First half of the work needed to rename widgets to interactions/rich-text-components.
    Protractor tests: respond to review comments.
    Protractor tests: Switch editor and player utilities to using protractor-specific classes where possible. Also remove some instances of 'widget'.
    Highlight the current tab in the navbar. Update integration tests.
    add protractor tests for history page
    Protractor tests: fix an issue with a button being hidden and so unclickable.
    Address review comments.
    Update integration tests.
    Protractor tests: response to review comments.
    Protractor tests: response to review comments.
    Protractor tests: add a test framework for interactive widgets and do some minor refactoring.
    Fix tests.
    Update integration tests.
    Protractor tests: response to review comments.
    Protractor tests: response to review comments.
    Add new stages to the tutorial for the preview and save buttons; rewrite other parts to flow better. Fix issue with the part of tutorial that pertains to rules not displaying correctly. Fix integration tests.
    Protractor tests: refactor some of the code, including abstracting out the handling of rules.
    Protractor tests: response to review comments, including adding some additional checks of editor behaviour.
    Protractor tests: add tests for complex behaviours and navigation within the exploration editor.
    Protractor tests: refactor some of the code to avoid duplication of widget handling and generalise the editing of configuration properties.
    Protractor tests: response to review comments.
    Protractor tests: add tests for non-interactive widgets and the rich-text editor. In the process refactor the test code for widgets, objects and forms.
    Add listener to enter key for set widget. Fix integration test.
    More fixes to the editor view.
    
    (1) Pull interaction selector out of the customization view.
    (2) Dismiss warnings when rules are changed.
    (3) Shorten the labels for the 'save changes' and 'discard changes' buttons.
    (4) Fix issue #147: show an error message when an invalid link is saved.
    Refactor graphData out into a graphDataService.
    Add objective and language fields to the 'create exploration' form.
    Fix broken integration test.
    Additional UI fixes: spacing, click handlers, consistency.
    Further UI improvements to the state content and interaction editors. Change the default initial state name.
    Add a welcome message to the content editor and more contextual feedback to the interaction editor.
    Amend integration tests following Jacob's advice.
    Redesign the editor rules interface. Also make the behavior of the 'save changes' button more responsive.
    Simplify the widget customization interface.
    Protractor tests: add tests for the publication ect. process and subsequent gallery display.
    Protractor tests: add functionality and examples for editor rules and multiple states.
    Protractor tests: add functions relating to the settings tab, and refactor some earlier code.
    Add functionality for clearing the RTE.
    Update protractor to v1.2.0
    Additional additonal response to review comments.
    Additional response to review comments.
    Rest of response to review comments on integration tests.
    Initial response to review comments.
    Create framework for end-to-end testing in protractor.
    Small fixes to routing.
    Upgrade angular version to 1.3.13 to fix bug in ngAnimate.
    Protractor tests: Response to review comments.
    Protractor tests: Switch gallery, admin and users to using protractor-specific class when possible. This is to make it easier for those editing production code to identify protractor's requirements.
    Address review comment.
    Address review comments.
    Update integration tests.
    Add new stages to the tutorial for the preview and save buttons; rewrite other parts to flow better. Fix issue with the part of tutorial that pertains to rules not displaying correctly. Fix integration tests.
    Protractor tests: response to review comments, including adding some additional checks of editor behaviour.
    Protractor tests: add tests for complex behaviours and navigation within the exploration editor.
    Protractor tests: add tests for non-interactive widgets and the rich-text editor. In the process refactor the test code for widgets, objects and forms.
    Protractor tests: response to review.
    Protractor tests: add checks for console errors during tests. Also respond to review comments.
    Protractor tests: start adding framework to check for console errors. Also fix one such error on the admin page.
    Protractor tests: response to review comments.
    Protractor tests: add tests for the publication ect. process and subsequent gallery display.
    Protractor tests: add functionality and examples for editor rules and multiple states.
    Protractor tests: add functions relating to the settings tab, and refactor some earlier code.
    Rest of response to review comments on integration tests.
    Initial response to review comments.
    Create framework for end-to-end testing in protractor.
    Move to the recommended Angular .controller syntax.
    
    This follows the recommendation in the list of breaking changes
    for Angular 1.3.0 described at
    
        https://github.com/angular/angular.js/blob/master/CHANGELOG.md#130-beta15-unbelievable-advancement-2014-07-11
    Consolidate error handling boilerplate.
    
    Also:
    
    (a) Have a friendlier 404 error page.
    (b) Remove unused route from app.yaml.
    (c) Add a robots.txt file.
    Introduce a new user dashboard page.
    Remove all traces of the old feedback models.
    Profile page expl stats coding fixes.
    Compute and show exploration stats in profile page.
    display feedback on the profile page (needs debuggign - data gets lots somewhere along the way)
    display feedback on the profile page (needs debuggign - data gets lots somewhere along the way)
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Implement the necessary queries for the gallery and profile pages.
    Tighten up the implementation of user settings and rights.
    Make JS files compatible with minification.
    Add an editor prerequisites page with information about the CC0 license.
    Move the request creator to a factory method on the main app, since it is used everywhere.
    Move the request creator to a factory method on the main app, since it is used everywhere.
    Redirect on successful username save
    Check username for uniqueness
    
    Includes code review changes from previous username commits
    Requires a username for editors and adds a path to create them
    Check username for uniqueness
    
    Includes code review changes from previous username commits
    Requires a username for editors and adds a path to create them
    Add a 'create new exploration' button to the profile page.
    Requires a username for editors and adds a path to create them
    Requires a username for editors and adds a path to create them
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Remove some unnecessary variables.
    Show a loading indicator for the profile page.
    Minor linting.
    Using proper JS formatting in Profile.js
    removing console.log lines
    Pretty-ing up the profile page
    Adding "My Explorations" to the profile page
    Creating a profile page with improvable states
    Reorganize frontend JS files, partitioning them into 'apps'.
    Restructuring the view directories more intuitively.
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Restructuring JS files, and adding caching headers to static content.
    Require the user to explicitly select the interaction for each state.
    Fix integration tests
    Make signing in required if the user is logged in but has not chosen a username.
    Protractor tests: Response to review comments.
    Protractor tests: Switch gallery, admin and users to using protractor-specific class when possible. This is to make it easier for those editing production code to identify protractor's requirements.
    Add delay to protractor tests.
    Protractor tests: response to review comments.
    If an interstitial breaks the exploration creation flow, redirect to the exploration creation modal in the gallery at the end of the process.
    Protractor tests: response to review comments, including adding some additional checks of editor behaviour.
    Protractor tests: refactor some of the code to avoid duplication of widget handling and generalise the editing of configuration properties.
    Protractor tests: add tests for the embedding of oppia explorations in external webpages, and modify the examples of such embeddings accordingly. This does not include propogation of events from the explorations to the surrounding pages.
    Protractor tests: add functionality and examples for editor rules and multiple states.
    Protractor tests: add functions relating to the settings tab, and refactor some earlier code.
    Additional response to review comments.
    Rest of response to review comments on integration tests.
    Initial response to review comments.
    Create framework for end-to-end testing in protractor.
    Fix integration tests.
    Protractor tests: Switch gallery, admin and users to using protractor-specific class when possible. This is to make it easier for those editing production code to identify protractor's requirements.
    Address review comments.
    Update integration tests.
    Remove private explorations from the gallery. Remove 'status' checkbox group. Update integration tests.
    Address Jacob's review comments. Rename 'beta' to 'public'. Reduce number of status choices in the gallery.
    Add new stages to the tutorial for the preview and save buttons; rewrite other parts to flow better. Fix issue with the part of tutorial that pertains to rules not displaying correctly. Fix integration tests.
    Protractor tests: response to review comments.
    Protractor tests: response to review comments.
    Protractor tests: add tests for the publication ect. process and subsequent gallery display.
    Rename EndConversation interaction id to EndExploration.
    Require the user to explicitly select the interaction for each state.
    Update Protractor tests.
    Remove the 'widget_sticky' setting.
    Fix jittering when moving from the editor tab to the preview tab. Update tests.
    Update protractor tests.
    Small fixes to routing.
    More fixes to integration tests.
    Fix an integration test.
    Address review comments
    integration tests for history page
    Make 'preview mode' into a separate tab.
    First half of the work needed to rename widgets to interactions/rich-text-components.
    Protractor tests: Switch editor and player utilities to using protractor-specific classes where possible. Also remove some instances of 'widget'.
    add protractor tests for history page
    Protractor tests: response to review comments.
    Protractor tests: response to review comments.
    Protractor tests: add a test framework for interactive widgets and do some minor refactoring.
    Add an integration test which includes parameters.
    Update integration tests.
    Protractor tests: response to review comments.
    Add new stages to the tutorial for the preview and save buttons; rewrite other parts to flow better. Fix issue with the part of tutorial that pertains to rules not displaying correctly. Fix integration tests.
    Protractor tests: refactor some of the code, including abstracting out the handling of rules.
    Protractor tests: response to review comments, including adding some additional checks of editor behaviour.
    Protractor tests: add tests for complex behaviours and navigation within the exploration editor.
    Protractor tests: refactor some of the code to avoid duplication of widget handling and generalise the editing of configuration properties.
    Protractor tests: response to review comments.
    Protractor tests: add tests for non-interactive widgets and the rich-text editor. In the process refactor the test code for widgets, objects and forms.
    Protractor tests: add checks for console errors during tests. Also respond to review comments.
    Address review comments.
    Allow each widget to have its own integration test utilities.
    Small usability/bug fixes.
    
    (1) Use different symbol for 'Look inside' button.
    (2) Make feedback links go to the exploration editor feedback tab.
    (3) Clarify exploration permissions.
    (4) In integration tests, clear the RTE before appending content.
    (5) Fix timestamps in moderator page.
    Further UI improvements to the state content and interaction editors. Change the default initial state name.
    Amend integration tests following Jacob's advice.
    Redesign the editor rules interface. Also make the behavior of the 'save changes' button more responsive.
    Protractor tests: add tests for the publication ect. process and subsequent gallery display.
    Protractor tests: add functionality and examples for editor rules and multiple states.
    Protractor tests: add functions relating to the settings tab, and refactor some earlier code.
    Additional response to review comments.
    Rest of response to review comments on integration tests.
    Initial response to review comments.
    Create framework for end-to-end testing in protractor.
    Rename EndConversation interaction id to EndExploration.
    Require the user to explicitly select the interaction for each state.
    Fix integration tests.
    Protractor tests: Switch gallery, admin and users to using protractor-specific class when possible. This is to make it easier for those editing production code to identify protractor's requirements.
    Update integration tests.
    Remove private explorations from the gallery. Remove 'status' checkbox group. Update integration tests.
    Address Jacob's review comments. Rename 'beta' to 'public'. Reduce number of status choices in the gallery.
    Protractor tests: refactor some of the code, including abstracting out the handling of rules.
    Protractor tests: add checks for console errors during tests. Also respond to review comments.
    Allow each widget to have its own integration test utilities.
    Add listener to enter key for set widget. Fix integration test.
    Fix more UI issues.
    
    (1) Fix overflowing interactive map widget.
    (2) Reverse the order of the cancel/submit buttons in the feedback modal in the learner view.
    (3) Add icons to the Edit and Preview buttons in the exploration editor page.
    (4) Adjust the width of the header row so that the control buttons fit in one line.
    (5) Allow the tutorial to be started properly when the user is in preview mode.
    (6) Widen the tutorial tooltip for the initial step, and remove the step numbers in the red circles.
    (7) Make some CSS fixes to the exploration editor for the case when the exploration is not editable by the current user.
    Protractor tests: response to review comments.
    Protractor tests: add tests for the publication ect. process and subsequent gallery display.
    Remove the 'widget_sticky' setting.
    Address review comment. Fix integration test flakiness.
    Address review comments.
    Update integration tests.
    Small lint fix.
    Protractor tests: refactor some of the code to avoid duplication of widget handling and generalise the editing of configuration properties.
    Protractor tests: add tests for non-interactive widgets and the rich-text editor. In the process refactor the test code for widgets, objects and forms.
    Protractor tests: add checks for console errors during tests. Also respond to review comments.
    Protractor tests: start adding framework to check for console errors. Also fix one such error on the admin page.
    Protractor tests: add tests that when oppia explorations are embedded in another page the hooks from the explorations back to that page function correctly. Also respond to review comments.
    Protractor tests: response to review comments.
    Protractor tests: add tests for the embedding of oppia explorations in external webpages, and modify the examples of such embeddings accordingly. This does not include propogation of events from the explorations to the surrounding pages.
    Move local navigation in learner view to the navbar.
    Protractor tests: add checks for console errors during tests. Also respond to review comments.
    Protractor tests: start adding framework to check for console errors. Also fix one such error on the admin page.
    Additional response to review comments.
    Initial response to review comments.
    Create framework for end-to-end testing in protractor.
    Move to the recommended Angular .controller syntax.
    
    This follows the recommendation in the list of breaking changes
    for Angular 1.3.0 described at
    
        https://github.com/angular/angular.js/blob/master/CHANGELOG.md#130-beta15-unbelievable-advancement-2014-07-11
    Consolidate error handling boilerplate.
    
    Also:
    
    (a) Have a friendlier 404 error page.
    (b) Remove unused route from app.yaml.
    (c) Add a robots.txt file.
    Introduce a new user dashboard page.
    Remove all traces of the old feedback models.
    Profile page expl stats coding fixes.
    Compute and show exploration stats in profile page.
    display feedback on the profile page (needs debuggign - data gets lots somewhere along the way)
    display feedback on the profile page (needs debuggign - data gets lots somewhere along the way)
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Implement the necessary queries for the gallery and profile pages.
    Tighten up the implementation of user settings and rights.
    Make JS files compatible with minification.
    Add an editor prerequisites page with information about the CC0 license.
    Move the request creator to a factory method on the main app, since it is used everywhere.
    Move the request creator to a factory method on the main app, since it is used everywhere.
    Redirect on successful username save
    Check username for uniqueness
    
    Includes code review changes from previous username commits
    Requires a username for editors and adds a path to create them
    Check username for uniqueness
    
    Includes code review changes from previous username commits
    Requires a username for editors and adds a path to create them
    Add a 'create new exploration' button to the profile page.
    Requires a username for editors and adds a path to create them
    Requires a username for editors and adds a path to create them
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Remove some unnecessary variables.
    Show a loading indicator for the profile page.
    Minor linting.
    Using proper JS formatting in Profile.js
    removing console.log lines
    Pretty-ing up the profile page
    Adding "My Explorations" to the profile page
    Creating a profile page with improvable states
    Reorganize frontend JS files, partitioning them into 'apps'.
    Restructuring the view directories more intuitively.
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Restructuring JS files, and adding caching headers to static content.
    Require the user to explicitly select the interaction for each state.
    Make signing in required if the user is logged in but has not chosen a username.
    Add new stages to the tutorial for the preview and save buttons; rewrite other parts to flow better. Fix issue with the part of tutorial that pertains to rules not displaying correctly. Fix integration tests.
    Protractor tests: refactor some of the code to avoid duplication of widget handling and generalise the editing of configuration properties.
    Protractor tests: add tests for non-interactive widgets and the rich-text editor. In the process refactor the test code for widgets, objects and forms.
    Protractor tests: add checks for console errors during tests. Also respond to review comments.
    Protractor tests: start adding framework to check for console errors. Also fix one such error on the admin page.
    Further UI improvements to the state content and interaction editors. Change the default initial state name.
    Protractor tests: add functionality and examples for editor rules and multiple states.
    Protractor tests: add functions relating to the settings tab, and refactor some earlier code.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Add caching headers to static files. Add missing image file for tests from a previous commit.
    Add help text
    Remove the 'widget_sticky' setting.
    Fix jittering when moving from the editor tab to the preview tab. Update tests.
    Complete the deprecation of 'widget'.
    Minor cleanup fixes based on Jacob's comments
    Further UI improvements to the state content and interaction editors. Change the default initial state name.
    In the learner view, load the entire exploration at the outset, and move the construction of the interactive widget HTML tags to the frontend.
    Improved integration test of download handler.
    Update text on About and Gallery pages.
    Allow users to leave the signup page mid-way through signup, logging them out if they do so.
    Make signing in required if the user is logged in but has not chosen a username.
    Fixed false-negative test that found string "153" in generated parser.js.
    Use more unicode strings in tests. COnsolidate common strings.
    Remove SLOW_TAGS option, migrate other options so that they can be used directly in test.sh, and refactor scripts/backend_tests.py for clarity.
    Minor lint fixes, mostly to the controller layer.
    Extend CSRF token lifetime.
    Remove the Django port of Oppia from the codebase.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Revise the wording for the static pages.
    Lint the codebase.
    Fix django tests.
    Properly escape strings in HTTP responses.
    Add tests for CSRF functionality.
    Minor security enhancements.
    Move the yaml files to use value generators for state parameter changes, and ensure that the reader view works. Note that this commit breaks the editor view; this will be fixed in a future commit. None of these commits will be pushed to master until we have a working build.
    Complete the implementation of the widget customization param editors using the new value generators.
    Allow the running of individual tests and test classes. Allow the categorization of tests as slow so that they can be omitted using a command-line flag if desired.
    Revert a change that caused Django controller tests to fail.
    Minor tidying up.
    Add test suite for django to automatically discover and run tests. Add platform switching to tests.
    Use Route/RedirectRoute instead of route tuples to facilitate use of uri_for in templates.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Where possible, use a user_id instead of an explicit User object.
    Add tests for gallery and base controllers.
    Minor lint fixes, mostly to the controller layer.
    Add the ability for editors to change statuses of feedback threads.
    Minor code clean up for feedback tab.
    Address review comments.
    Add a list of recent feedback messages to the moderator page.
    Add an indicator to the feedback tab header of when the last feedback update was. Remove some unneeded scrolling behavior.
    Address several UI comments by Jacob.
    Add more controller-level tests for feedback threads.
    First round of tests for the feedback thread backend. Also consolidate some handlers.
    Build a UI for feedback threads and messages.
    Feedback thread UI clean up.
    Feedback thread barebone UI and data path.
    Split about page into two. Minor linting fixes.
    Make rich-text component loading happen at the same time as the page load.
    Consolidate retrieval of interaction registry, and make it happen during page load.
    Migrate the backend widget registries and the controllers.
    First half of the work needed to rename widgets to interactions/rich-text-components.
    Minor lint fixes, mostly to the controller layer.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Implement generic versioned models that all storage classes can use.
    
    Also, for explorations, create a new version for every save action,
    rather than only after the exploration is published.
    Consolidate the handlers for the editor page into a single file.
    Lint the codebase.
    Finish cleaning up obj_services.py.
    Finish the port to the new object editor framework, at least for the editors that already exist. Remove the old editors in templates/dev/head/components/.
    Introduce the concept of object editors that handle editing of ints, strings, etc. in a generic fashion. Port all object editors over to the new framework (except the ListEditor, which needs some more work).
    Reinstate the image upload feature.
    Reinstate the noninteractive image widget. This commit provides a filepicker; the upload feature will be added in a future commit.
    Explicitly register widgets that are permitted in the server. Remove unneeded methods and files.
    Get and store the base64-encoded value of RTE images in the client, so that they aren't reloaded each time the content of the RTE iframe changes. Also implement Koji's review suggestions and fix an error in the JS test script.
    First stage of converting the noninteractive content editor into a single highly-functional RTE. This is still missing dialogs for editing the widget properties, and has a few small hacks that need to be cleaned up before being pushed into master.
    Get and store the base64-encoded value of RTE images in the client, so that they aren't reloaded each time the content of the RTE iframe changes. Also implement Koji's review suggestions and fix an error in the JS test script.
    First stage of converting the noninteractive content editor into a single highly-functional RTE. This is still missing dialogs for editing the widget properties, and has a few small hacks that need to be cleaned up before being pushed into master.
    Move the tar exploration assets into a directory so that they can be served from the exploration filesystem. Allow rules to make use of a filesystem.
    Do not require the exploration id to be passed for every file system call.
    Remove the image storage model. Move image file uploading to use the file system storage model.
    Fix the image upload flow. Remove exploration image functionality.
    Security improvements.
    Remove dependency on ngRoute and simplify the routing code in the editor view. This turns out to have the nice side-effect of making the exploration editor page load a lot faster :-)
    Complete the implementation of the widget customization param editors using the new value generators.
    Add config property model and CSRF protection.
    Reinstating memcache functionality. Clear more keys from memcache when versioning so that old copies of explorations aren't retrieved.
    Add proof-of-concept for inclusion of value generator editors via directives.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Arrange the entries of PATH_MAP in alphabetic order. Add some TODOs.
    Move PATH_MAP to feconf to remove duplication.
    Add model-switching mechanism.
    Add development server and static file serving for non-GAE platform.
    Change the name of the models directory from 'apps' to 'storage'.
    Use module-level imports. Avoid aliasing module names where possible.
    Minor adjustments to build file and the use of feconf.JINJA_ENV.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Fix some errors due to missing URL routes.
    Move get() method for IdModel classes to the common superclass.
    Add tests for gallery and base controllers.
    Reorganize frontend JS files, partitioning them into 'apps'.
    Restructure editor views.
    Specify only needed JS files in each template view.
    Ensure that any state has a parent exploration. Add the correct content type to JSON responses. Add end-to-end test for the reader controller.
    Moving models/ to apps/ in preparation for the migration to django non-rel
    More cleanup.
    Adding images to sample explorations. Rejigging CSS for gallery page.
    Serve libs from third_party/static instead of resources/.
    Separate widgets and images into separate model classes.
    Improve tests for the image class and the widget class.
    Lint most python files
    Change NDB queries to get_by_id for speed.
    Simplify self.response.out.write to self.response.write. Store the Jinja2 environment as a cached property.
    Do not try to decode an image file when assigning it an id
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Moving existing widgets to use the static/ directory.
    Improving the exploration creation flow on the gallery page.
    Improving the statistics page. Removing caching headers since we also serve locally-constructed files in the resource requests; think about this later.
    Restructuring JS files, and adding caching headers to static content.
    Moving to PEP-8 method name styles (method_name rather than MethodName)
    Move lib-serving code into resources.LibHandler
    Renaming the image handler.
    Move models to a separate folder.
    Linting all Python files to use the PEP-8 4-space-indentation standard.
    Moving controllers to a separate folder
    Adding files missed in previous commit
    Use better images for the gallery thumbnails and the exploration intro card.
    Consolidate retrieval of interaction registry, and make it happen during page load.
    Address review comments.
    Hide the 'edit exploration' button in the learner view navbar for users who cannot edit that exploration.
    Specify a display mode for each interaction and adjust the learner view accordingly.
    Complete the deprecation of 'widget'.
    Migrate the backend widget registries and the controllers.
    Display the exploration title in the top navbar.
    Add call to 'maybe leave' handler.
    Remove more unneeded code for server-side parameter evaluation.
    Remove functionality for server-side parsing of expressions.
    Fix some confusing user flows. In particular, change 'Look Inside' to 'Edit' on the learn page if the user has edit privileges.
    Move initial parameter evaluation to use the client-side framework.
    Added 2 columns on card
    Add a 'continue' button for going from the feedback of one state to the content of the next.
    Tidy up the expression evaluation code to the point that the sample exploration registers no differences between the client and server evaluations.
    Add versioned statistics aggregation and allow different versions to be viewed from stats page
    reolving comments.
    Adding exploration names to page titles for exploration editor and player pages. Issue 413.
    Fix a bug in which the ruleSpec data from the classifier wasn't being sent to the answer recording handler.
    Use a different method to pass the rule input_type to the frontend.
    Break the state transition handler into multiple handlers, similar to what is done in editor preview mode.
    Add a live-preview mode to the exploration editor.
    Refactor the learner feedback handler so that parts of it can be accessed as separate functions.
    Make it possible to view player skins in the editor view.
    Address more review comments.
    Move skin templates into directives. This is in preparation for allowing preview mode in the editor view -- we can then load all of these templates in the editor view at the outset and invoke them with HTML tags when necessary.
    Addressed review comments
    Note: One test does fail.
    Prep for migration to stats jobs
    1. Stop writing to State Counter (old style) models
    2. Migrate all uses of current state counters over to aggregator
    3. Update aggregator to use both old and new models correctly
    4. Create one off job to deal with the overlap between these two systems
    Move more of the reader feedback handler logic to the frontend.
    In the learner view, load the entire exploration at the outset, and move the construction of the interactive widget HTML tags to the frontend.
    Send the entire exploration in the player frontend when the page loads.
    Tidy up naming and clarify the code.
    Migrate widget configuration parameters to a simpler format that is more consistent with upcoming refactorings.
    
    NOTE: this change passes backend tests but the frontend does not work. This will be handled in a separate commit.
    Allow dependencies to be specified for the editor page itself, in addition to the widgets it contains.
    Migrate existing event handlers to the new framework.
    Move event handler to a separate file, since it is no longer handling analytics-only events.
    Add a system for handling dependencies of widgets that include additional angular modules.
    Add a registry for skins.
    Move each skin to its own directory. Load only the HTML template, and let that template load everything else.
    Minor renaming and lint corrections. Remove some unused methods.
    First pass at defining a common core for pluggable skins.
    Address review comments: allow users to provide a subject line and specify whether their feedback is exploration- or state-specific.
    Route reader-submitted feedback to the new feedback system, and remove the frontend for the old feedback system.
    Creating a job calculating the number of completions and total visits
    Implement world-viewable exploration editor pages.
    Resolving merge problem.
    Added simple integration tests for reverting to old exploration and for resolving feedback
    Logging start and leave events from reader
    Reformatting based off of code review
    Add generated session ids and time spent in state to reader files
    Fix unicode error.
    Address review comments.
    Add propagation of reader id for reader feedback when feedback is given;
    fix bugs in getting existing reader feedback for profile.
    TODO: make feedback listing human readable.
    Add a simple framework for handling widget dependencies.
    Merge of missing answer changes, fixing conflicts
    Fixed test for merge error.
    Sticky title re-branch.
    Housekeeping changes: remove unneeded block_number, normalize reader answers prior to processing them, do not fail if the stats answer logs overflow (issue 139), make warmup handler not throw 404s.
    Revert "Sticky title merge."
    
    This reverts commit 9d8d0acecba8b89a51787bee68165c5d609e2faf.
    It broke accessiblity.
    Sticky title merge.
    By default, hide beta explorations in both galleries.
    Add propagation of reader id for reader feedback when feedback is given;
    fix bugs in getting existing reader feedback for profile.
    TODO: make feedback listing human readable.
    Move JS code for individual widgets from its temporary home in templates/dev/head/components to the extensions/widgets directory.
    Convert interactive widgets to Angular directives.
    
    This has the following advantages:
    (a) speed: the interactive widgets now load faster because there is no
    need for a second request to the server to populate the iframe.
    (b) no more monkeying around with the parent container to handle iframe
    height changes
    (c) less boilerplate is needed for each individual widget
    (d) there is no need to reload JS libraries separately for the widget,
    since these libraries will have already been included in the container page.
    Remove scope.apply error in the reader view.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Prevent reader page from being iframed when it is displayed with header and footer. Add ng-cloak to some widgets to prevent premature display.
    Not adding map widget in the reader log in sticky case.
    Add licensing information to the individual exploration pages.
    Allow old versions of explorations to be linked to.
    Add a Contributor gallery. Update URL routing. Make other small UI tweaks.
    Implement the necessary queries for the gallery and profile pages.
    Implement admin and moderator rights management.
    Minor UI changes, including fixing wording on About page, adding a 'Beta' subtitle, and making the widget preview less opaque.
    Tighten up the implementation of user settings and rights.
    Remove the state model from the backend.
    
    Reasons:
    - It is confusing to keep track of two separate lifecycles for states
        and explorations.
    - The state name and state id were duplicate ways to identify a
        particular state.
    
    Side effects:
    - This change has resulted in an update to the YAML schema. The update is
        fully backward-compatible.
    - States are now identified in URLs and in analytics by their names
        rather than their ids.
    Standardize the reader URL mapping and also standardize the way JSON interactions are handled in all the server-side integration tests.
    Fully migrate explorations to use the rights manager.
    Use actual user_ids instead of email addresses. Require the user to pick a valid username that would appear in the commit logs.
    Add a check for non-existent explorations in the page that displays a random exploration.
    Rework the splash page.
    Make the feedback model more flexible.
    Separate the widget registry from the widget domain file so that it can be used by the html cleaner without circular dependencies.
    Display rules that are confusing more prominently. Fix an XSS bug.
    Rename frontend state editor fields to match those of the backend. In particular, change interactive_widget to widget_id, interactive_params to widget_customization_args, interactive_rulesets to widget_handlers and sticky_interactive_widget to widget_sticky.
    Add code and tests for handling viewing rights to an exploration.
    Fix bug where rule feedback was being treated as a string rather than a list
    Remove more unnecessary code.
    Minor security enhancements.
    Remove the image storage model. Move image file uploading to use the file system storage model.
    Display the reader's previous answer regardless of whether the widget is sticky or not.
    Create a safe RTE component directive. Add RTE functionality using jWysiwyg to the rule feedback editor.
    Add django model for feedback given by the reader to editors.
    Adding a button allowing the reader to send feedback to editors
    Create a directory for tools at the same level as the oppia root dir, and put all files unneeded at runtime into it. Also, reduce startup latency by loading only the welcome exploration by default, instead of all of them.
    Re-allow the setting of exploration initialization parameters.
    Add config property model and CSRF protection.
    Fix issue 51: parse the feedback string with Jinja, and only then escape it.
    Modify widgets to use value generators for their customization args. This commit removes the widget customization functionality in the frontend, which will be added back in the next commit or two.
    Introduce a ParamSpec class for maintaining parameter type information at the exploration level. TODOs: remove the ability in the frontend to set values at the exploration level, display the parameter types in the exploration metadata page, and rename exploration.parameters to exploration.param_specs in the backend.
    Continue refactoring parameters. The workflow is now more explicit: parameters are first parsed using the state params, then explicitly converted to JS strings within widget_domain.py if the respective template requires this. Finally, they are inserted into the template which uses them.
    Streamlining parameter update logic a little more; removing some special cases. Work still needs to be done to make the template generation methods in widget_domain.py consistent with each other, and to figure out the order of, and when to do, Jinja substitution and JSONification.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    For persistent storage, store states as JSON blobs instead of rich objects. The rich object representation will be used for retrieving them from memcache.
    Start moving repository methods to the services files so that domain objects can become plain python objects.
    Implement pluggable skins.
    Add model-switching mechanism.
    Add the handler name as an argument for accessing the stats rule answer log.
    Major refactoring to make the statistics model more concrete and use domain concepts from the exploration and state models. Remove the feedback controller and replace it with a link to the bug tracker and groups page. Restrict the unresolved answers feature to be used only with the default rule of a state.
    Move functionality from the reader controller to the exploration domain layer.
    Move answer classification methods to the exp_services module.
    Change the name of the models directory from 'apps' to 'storage'.
    Move domain-related files to their own folder in the repository.
    Moving the collection of unresolved answers for a state to the statistics module.
    Rename widget models file to widget_domain.py to reflect its independence of the storage layer.
    Move all remaining methods into the BaseWidget class.
    Add a registry of widgets.
    Remove all dependencies on widget storage classes.
    Use Python classes instead of YAML files as the data sources for widgets. Fix a bug in revision f46fbbfe3ac3 where reader responses were rendered with backslashes and quotes.
    Use module-level imports. Avoid aliasing module names where possible.
    Completing the refactoring of the reader POST method to improve its clarity. Split the reader response rendering template into separate templates html and iframes.
    Pull some of the reader POST methods into separate child methods.
    Continue to clarify the reader POST method.
    Add reader response templates to all widgets and make this template into an instance property.
    Minor adjustments to build file and the use of feconf.JINJA_ENV.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Continue to clean up reader controller POST method.
    Separate out the answer classification logic into its own method.
    In the reader feedback controller, separate the naming of the old and the new state variable.
    Clean up export_to_yaml().
    Add an explicit init_state_id property to avoid unnecessary database lookups. Minor refactorings and rewordings.
    Store a payload attribute on handlers which use a payload. Move get_state_by_id() into the domain object.
    Separate the exploration model into a domain object class and a storage class.
    Pull statistics functions out into a services file.
    Finish moving stuff out of the exploration model class.
    Move more methods from the Exploration model class to the exploration services file.
    Remove direct dependencies from the controllers and other modules on the Exploration storage model so that it is easily swappable. The Exploration storage model is now imported only by the exploration services and test files.
    Remove use of parent property and ancestor queries. Start the process of making the State accessible only via its containing Exploration.
    Turn the init_state of an exploration into a @property to avoid duplication of information.
    Multiple choice static rendering.
    No default answer string rendering when sticky.
    Fixed merge mistake.
    Static interactive to draw correctly at state change.
    
    It was using the old state instead of the new one in the reader.py.
    Minor linting
    Static rendering of interactive widget in the response log.
    Move get() method for IdModel classes to the common superclass.
    Add tests for gallery and base controllers.
    Add support for non-interactive widgets.
    Continue refactoring the codebase to recognize both interactive and non-interactive widgets.
    Stop double-counting the initial state
    Remove further traces of non-interactive widgets.
    Make 'Continue' widget hit default rule (not 'no answer')
    Make sure it records the last state
    Reorganize frontend JS files, partitioning them into 'apps'.
    Restructuring the view directories more intuitively.
    Remove use of gnome-terminal from start.sh so that the script (hopefully) runs on a Mac.
    At the initial state, after getting the exploration parameters,
    also get the initial state's parameter changes.
    Change order of parameter value use/parameter value update slightly(for a parameter change belonging to "new" state):
    use old parameter for feedback in old state, then update to new value before displaying the new text and such.
    Consider the following adventure game use case:
    
    you have {{item}}.
    
    user: take item.
    feedback: you drop {{item}} (old item)
    new state: you pick up {{item}} (new item)
    Small fix to parameter handling in reader.py
    Fix broken tests. Rewrite reader parameter logic so that parameters are initialized using the new state. Change schema for exploration demos so that they are at exploration level (and the states list is now a list, rather than a dict, of states).
    -got rid of some out-of-date todos
    -changeable parameters
    -fixed param change interface to correctly set parameters to values of other parameters (including student's previous answer)
    Added exploration-level parameter initialization.
    Changed yaml of Music exploration to function this way.
    Everything is working exactly the way it was before.
    TODO:
    - make parameters changeable in reader.py
    - make sure parameter changes work properly
    - add interface for exploration-level parameter initialization
    - change exploration-level parameter specification in yaml to not be so hacky
    Ensure that any state has a parent exploration. Add the correct content type to JSON responses. Add end-to-end test for the reader controller.
    Change the reader feedback controller to use the .value property in params.
    Moving models/ to apps/ in preparation for the migration to django non-rel
    Make classifiers into first-class objects.
    More cleanup
    Continue cleanup. Simplify the MusicStaff widget.
    Records all answers and displays stats broken down by rule hit
    Updating the state parameters to use the MultiParameter model. For now they are all of type UnicodeString.
    Widget sticky bool param added.
    
    Prevents reloading the widget if it is the same type as the previous
    state's.
    Added a checkbox in editor to control this bool param.
    Bug fix: change <br> tags to show up as line breaks.
    Refactoring and adding validation to the Exploration model.
    Add an admin handler that allows reloading of the default explorations. Move the methods in controller_utils.py to the respective models/controllers.
    Adding an new field to individual states to ease tracking of unresolved answers.
    Tracks each student landing on each state
    Add escaping to feedback field.
    Collect random() methods in utils.
    Allowing multiple feedback responses per rule.
    Do not use the default exploration as one of the random choices for 'Launch a random exploration'. Minor CSS fixes.
    Modify how the feedback text is displayed.
    Changes to the UI
    Highlight Oppia's last response instead of the reader's answer.
    Add error pages.
    Remove 'attrs' from yaml files.
    Refactor the State model. Introduce more implicit property validation.
    Move state transition logic to state model class.
    Move CSS file back to templates/dev/head so that it is caught by the build.py script.
    Fix an error where clicking 'try again' on the sample exploration loads a new page
    Finish refactoring of widgets.
    Restructuring the widget models so that widgets are only loaded once from files and thereafter stored in the datastore.
    Make lists with unicode strings display properly in the reader view.
    Rename a method and fix a bug where content.value was limited to 500 chars.
    Removing yaml_utils.py and moving its methods to the relevant places in the layered architecture.
    Refactoring utils
    Making reset easy via "Play again?" links
    Separating the state transition logic from the rest of the handler.
    Remove get_entity method
    Lint most python files
    Making state.content into an ndb.Model.
    Change NDB queries to get_by_id for speed.
    Restructure tests, so that each module has its own test file.
    Simplify self.response.out.write to self.response.write. Store the Jinja2 environment as a cached property.
    Fix error in parsing code string.
    Standardize request object passing in the reader view. Add a method that allows conversion of strings to ASCII-type strings for display in the views.
    Showing the full default answer on the stats page for multiple choice inputs.
    Add a rich text editor.
    Including the reader's answer in the state parameters. Updating the music exploration.
    Allowing parameters to be used in non-interactive content and feedback.
    Making parameters work end-to-end for the music widget.
    Introducing a postMessage framework for interactive widgets
    Improving the statistics page. Removing caching headers since we also serve locally-constructed files in the resource requests; think about this later.
    Restructuring JS files, and adding caching headers to static content.
    Improve the interactive widget UI
    Fixing some bugs in the interactive widget preview
    Renaming rule files to have YAML suffixes. Adding normalizers.
    Multiple choice input widgets now display the choice name instead of the choice number.
    Allow classifier rules to emit an additional data value giving more information about the classification mismatch.
    Using os.path.join() to create directory paths.
    Moving sample classifiers, explorations and widgets to a separate directory.
    Moving to PEP-8 method name styles (method_name rather than MethodName)
    Move lib-serving code into resources.LibHandler
    All END states are now 'END'; there is no more use of '-1'. All 'END' and '-1' literals have been changed to use one of the constants in either utils.py or editorExploration.js.
    Make multiple choice widget work.
    Move exploration, state and parameter models into separate files.
    Making YAML uploads work with the new formats.
    Deleting old files.
    Continuing to replace the old input_view/action_set infrastructure with the new interactive_widget/interactive_ruleset infrastructure. WARNING: The present commit leaves Oppia in a broken state.
    Fixing bugs in stats and displaying in the stats collection page
    Two new stats: exploration completed and default answer hit
    Finished a basic stats handler, recording visit counts for a given exploration.
    Move models to a separate folder.
    Linting all Python files to use the PEP-8 4-space-indentation standard.
    Moving controllers to a separate folder
    Rename 'mode' to 'nav_mode'.
    Merge the reader and editor main pages into a single gallery page
    Improvements to the reader set interface and the exploration graph visualization
    Add a sample exploration to the home page
    Remove generic 'metadata' property for explorations and replace it with individual fields
    Renaming state.text to state.content in the backend
    Adding another fix for JS files
    Adding a d3.js graph
    Minor renaming. Also removed link from end of finished.html, since we don't want it to display in iframed mode.
    Making third-party files internal and inserting them into the startup shell script.
    Make the reader interface fully functional.
    Enable publishing of explorations.
    Removing more traces of metrics, and transferring the set image classes to the CSS file.
    Removing _new suffix from new file names
    Removing duplicate code
    Removing old files
    Transitioning existing Oppia classes and pages to the new structure
    Implement the editor index page.
    Make the index page spiffy. Add login functionality to editor views and display the login/logout status in the navbar.
    Adding an index page, and simplifying some of the backend logic
    Modifying the individual exploration page.
    Modifying the structure of the categories for the reader main page
    Adding data for the reader home page
    Refactoring the base class into a separate file, and rejigging the URL routing
    Adding stuff to the navbar
    Creating a new set of HTML, JS and CSS files for a redesigned Oppia frontend
    Initial commit.
    Make signing in required if the user is logged in but has not chosen a username.
    Use more unicode strings in tests. COnsolidate common strings.
    Remove SLOW_TAGS option, migrate other options so that they can be used directly in test.sh, and refactor scripts/backend_tests.py for clarity.
    Minor lint fixes, mostly to the controller layer.
    add vfs_ prefex to two utils method
    Fix more Windows tests; use simpler construct_path
    Add links to read-only explorations in the Contribute gallery.
    Resolving merge problem.
    Fix some broken tests on Windows due to incorrect path separators.
    In tests, change is_admin to is_super_admin to avoid confusion.
    Remove the Django port of Oppia from the codebase.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Tighten up the implementation of user settings and rights.
    Standardize the reader URL mapping and also standardize the way JSON interactions are handled in all the server-side integration tests.
    Consolidate the handlers for the editor page into a single file.
    Use actual user_ids instead of email addresses. Require the user to pick a valid username that would appear in the commit logs.
    Add some vertical spacing to the reader view.
    Add some vertical spacing to the reader view.
    Reinstate the image upload feature.
    Remove the image storage model. Move image file uploading to use the file system storage model.
    Minor linting to stats code.
    Move 'unresolved answers' section to the bottom of the page. Make tutorial only focus on active rule.
    Require the user to explicitly select the interaction for each state.
    Include object editor code on every HTML template.
    Add validation for rules and interaction customizations.
    Fix broken test. Add test for validating config property schemas.
    Remove obsolete admin page config properties. Restructure config properties to use schemas.
    Show intro card image in editor preview.
    Remove the 'widget_sticky' setting.
    Consolidate retrieval of interaction registry, and make it happen during page load.
    Address review comments.
    Fix jittering when moving from the editor tab to the preview tab. Update tests.
    Redesign the gallery page.
    
    Still TODO:
    (a) Fix integration test for language and category selection.
    (b) Check if paging is needed for the no-query case.
    (c) Implement carousel.
    Make signing in required if the user is logged in but has not chosen a username.
    Specify a display mode for each interaction and adjust the learner view accordingly.
    Surface 404 errors only when an exploration is not found.
    Complete the deprecation of 'widget'.
    Migrate the backend widget registries and the controllers.
    First half of the work needed to rename widgets to interactions/rich-text-components.
    Cleaning up based on code reviews
    Response to code review of c4088eb7deba
    Fix some confusing user flows. In particular, change 'Look Inside' to 'Edit' on the learn page if the user has edit privileges.
    Ensure that invalid parameter names cannot be used.
    Move initial parameter evaluation to use the client-side framework.
    Additional modifications to address review comments
    Changes to state diff modal layout, add export exploration data by state
    and display state data in codemirror
    Add versioned statistics aggregation and allow different versions to be viewed from stats page
    reolving comments.
    Adding exploration names to page titles for exploration editor and player pages. Issue 413.
    Address Jacob's review comments. Rename 'beta' to 'public'. Reduce number of status choices in the gallery.
    Show the tutorial immediately for first-time users.
    Lint fixes.
    Break the state transition handler into multiple handlers, similar to what is done in editor preview mode.
    Address review comments
    Add service for comparing states between 2 versions
    Respond to additional review comments
    Respond to review comments
    Add services for version history tree
    Also download all snapshots in history tab
    Add a live-preview mode to the exploration editor.
    Make it possible to view player skins in the editor view.
    Further UI improvements to the state content and interaction editors. Change the default initial state name.
    Add a backend test for the private-viewable functionality.
    Add an option for private explorations to be viewed by anyone with the link.
    Address more review comments.
    Allow states to be added in the frontend without requiring a backend RPC.
    Remove 'add user by email' functionality
    Made changes as per Sean's comments, also fixed ExplorationEditor.js which was broken during a previous sync.
    Feature request for adding roles to explorations using usernames(issue 286), will put beautification of html in a different commit.
    
    Conflicts:
            core/templates/dev/head/editor/ExplorationEditor.js
    Remove 'add user by email' functionality
    Prep for migration to stats jobs
    1. Stop writing to State Counter (old style) models
    2. Migrate all uses of current state counters over to aggregator
    3. Update aggregator to use both old and new models correctly
    4. Create one off job to deal with the overlap between these two systems
    Made changes as per Sean's comments, also fixed ExplorationEditor.js which was broken during a previous sync.
    Feature request for adding roles to explorations using usernames(issue 286), will put beautification of html in a different commit.
    Add language-code selection functionality to the exploration editor.
    Verify that an old version of an exploration is still valid before reverting to it.
    Load all interactive widgets when the page loads to minimize the number of RPCs required. Also, show the preview tab in the interactive widget editor accordion when the widget id is changed.
    Tidy up naming and clarify the code.
    Add backend tests for JSON download
    Address additional comments
    Address review comments
    Allow exploration to be downloaded as JSON object
    Allow dependencies to be specified for the editor page itself, in addition to the widgets it contains.
    Migrate the existing StatsPageJobManager to use the new continuous computations framework.
    Minor lint fixes, mostly to the controller layer.
    Migrate existing event handlers to the new framework.
    Move event handler to a separate file, since it is no longer handling analytics-only events.
    Add a system for handling dependencies of widgets that include additional angular modules.
    Get the stats graph to read from the old models until we have a proper migration process in place.
    Rename StateStats to StateStatistics for parity with ExplorationStatistics. Return only the top 10 unresolved answers to avoid overloading the client browser.
    Minor refactoring of statistics frontend and backend, including removing some unused methods.
    Add a skin chooser to the frontend editor UI.
    lots of little linter-type fixes
    Cleaning up the calls to models and tests
    Remove all traces of the old feedback models.
    Further bug fixes.
    
    (a) Add a help link to the parameter changes section.
    (b) Display interactive map coordinates to 3 decimal places.
    (c) Correct a misleading rule name in the tar file rules.
    (d) Fix an issue with having black text on dark blue background in the navbar when a tab name is focused on.
    (e) Fix a bug with the exploration deletion flow.
    (f) Only show the delete button to exploration owners.
    If a user can edit an exploration, but has not yet registered as an editor, redirect them to the editor registration page.
    A further round of fixes for interactive and noninteractive widgets.
    
    (a) Rename the description for one of the rules in the tar file widget to distinguish it from another one.
    (b) Add a stats_response.html to the map input widget.
    (c) Fix uppercase/lowercase issue in file extensions of uploaded images.
    (d) Add clarification to the image widget about which filetypes are permitted.
    (e) Fix an icon error in the noninteractive collapsible widget.
    Fix view permission error in the editor page.
    Use new models for completion rate in the front end
    Add links to read-only explorations in the Contribute gallery.
    Address review comments.
    Implement world-viewable exploration editor pages.
    Add green button to the release modal.
    Add a modal to the exploration editor page that gives instructions for releasing an exploration.
    Create a separate controller for the exploration settings tab. Pull out more stuff from the exploration editor into standalone services, and group similar services under a base ExplorationPropertyService.
    Removing v2 of stats models to ease further development
    Removing v2 of stats models to ease further development
    Address review comments.
    Add a simple framework for handling widget dependencies.
    Merge of missing answer changes, fixing conflicts
    Move exploration metadata and version history to separate tabs, and add more documentation to the UI.
    Add logging for moderator queries.
    Allow moderators to unpublish explorations.
    Fix issue 116: allow jpg extension for images.
    Minor changes to commit allowing editors to download previous versions.
    Allow editors to download earlier versions of an exploration as zip files
    Add more logging data to try and debug issue of exploration changes being lost on saving; change superadmin permissions.
    Small bug fix: unicode was used instead of str.
    Introduce the concept of beta explorations, and allow them to be publicized or unpublicized by moderators. Fix an error in the admin/moderator permissions.
    Grant moderators delete permissions for explorations; record roles when deleting.
    Add functionality for banning editors.
    Move JS code for individual widgets from its temporary home in templates/dev/head/components to the extensions/widgets directory.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Implement reverting functionality.
    Load the version history lazily. Generate automated summaries for each changelist in the backend.
    Change save() to commit(). Refactor model creation and update.
    Fix diff computation for rules in the frontend.
    Add licensing information to the individual exploration pages.
    Add a Contributor gallery. Update URL routing. Make other small UI tweaks.
    Add a button for releasing ownership of an exploration to the community.
    Implement the necessary queries for the gallery and profile pages.
    Implement admin and moderator rights management.
    Allow owners, collaborators and playtesters of explorations to be set.
    Minor UI changes, including fixing wording on About page, adding a 'Beta' subtitle, and making the widget preview less opaque.
    Use save() instead of put() for VersionedModels.
    Various small UI fixes.
    Make the filesystem use the common VersionedModels.
    Tighten up the implementation of user settings and rights.
    Implement generic versioned models that all storage classes can use.
    
    Also, for explorations, create a new version for every save action,
    rather than only after the exploration is published.
    Add interstitial loading pages.
    Resolve a TODO regarding the use of both id and widget_id in a widget description.
    Allow add and delete state operations to be done as part of a larger commit.
    Represent a changelist as a sequence of commands and process this sequence server-side.
    Start writing a changelist handler on the server side. Move the delete_state() function to the exploration domain object so that it can be executed together with other changes.
    Remove the concept of stateId from the frontend.
    Remove the state model from the backend.
    
    Reasons:
    - It is confusing to keep track of two separate lifecycles for states
        and explorations.
    - The state name and state id were duplicate ways to identify a
        particular state.
    
    Side effects:
    - This change has resulted in an update to the YAML schema. The update is
        fully backward-compatible.
    - States are now identified in URLs and in analytics by their names
        rather than their ids.
    Standardize the reader URL mapping and also standardize the way JSON interactions are handled in all the server-side integration tests.
    Consolidate the handlers for the editor page into a single file.
    Fully migrate explorations to use the rights manager.
    Use actual user_ids instead of email addresses. Require the user to pick a valid username that would appear in the commit logs.
    Lint the codebase.
    Allow reader feedback to be marked as fixed or will_not_fix.
    Change the editor page warning message to an announcement and make it HTML.
    Fetch exploration statistics separately, so that the editor page loads faster.
    Automatically update the version history when a save event occurs.
    Add the concept of computed configuration properties. Fix some errors in the behavior of discardChanges() on the exploration editor page.
    Allow configuration properties to be edited in the admin UI.
    Split admin page into HTML and JS parts.
    Add separate handler for exploration rights management. Rewire URL endpoints for the editor to avoid ambiguity. Add commit messages for adding and deleting states.
    Pass exploration changes through the same save flow as the state changes.
    Batch changes to the exploration and its states so that any set of changes to the exploration results in a single entry in the version history log.
    Allow multiple states to be edited in a single commit.
    Add separate handler for exploration rights management. Rewire URL endpoints for the editor to avoid ambiguity. Add commit messages for adding and deleting states.
    Pass exploration changes through the same save flow as the state changes.
    Batch changes to the exploration and its states so that any set of changes to the exploration results in a single entry in the version history log.
    Allow multiple states to be edited in a single commit.
    Add a dialogue requesting a commit message when saving to the state editor.
    Move unresolved answers functionality to a separate handler.
    Add tests for more handlers in controllers.editor.
    Finish cleaning up obj_services.py.
    Only load full state statistics when they are asked for, rather than when the exploration is loaded. This decreases the loading time significantly.
    Move the logic for showing usernames in version history into the controller layer.
    Introduce the concept of object editors that handle editing of ints, strings, etc. in a generic fashion. Port all object editors over to the new framework (except the ListEditor, which needs some more work).
    Batch datastore get() and put() operations, and use local caches where possible. This halves the exploration loading time! (E.g., on the dev server, the binary search exploration used to take 18.3 s to load from scratch, and now it takes 9.8 s.)
    Rename frontend state editor fields to match those of the backend. In particular, change interactive_widget to widget_id, interactive_params to widget_customization_args, interactive_rulesets to widget_handlers and sticky_interactive_widget to widget_sticky.
    Add rights management for deleting explorations. Only an admin can delete published explorations; only the owner and admins can delete unpublished ones.
    Enable soft deletion of explorations.
    Reinstate the noninteractive image widget. This commit provides a filepicker; the upload feature will be added in a future commit.
    Allow an admin to change the editor list for an exploration.
    Check username for uniqueness
    
    Includes code review changes from previous username commits
    Check username for uniqueness
    
    Includes code review changes from previous username commits
    Remove the image storage model. Move image file uploading to use the file system storage model.
    Allow downloading of explorations as zip files.
    Move more modals to the angular-ui.bootstrap framework.
    Schema change: make param specs into key-value pairs so that exactly one param spec is defined for each param name.
    Re-allow the setting of exploration initialization parameters.
    In the frontend, rename parameters to paramSpecs.
    Complete the implementation of the widget customization param editors using the new value generators.
    Add config property model and CSRF protection.
    Rename exploration.parameters to exploration.param_specs.
    Introduce a ParamSpec class for maintaining parameter type information at the exploration level. TODOs: remove the ability in the frontend to set values at the exploration level, display the parameter types in the exploration metadata page, and rename exploration.parameters to exploration.param_specs in the backend.
    Add version data to requests and responses. Add version check when saving an exploration.
    Minor improvements to the exploration download controller.
    Add transactions around operations that update states in an exploration.
    Turn get_or_create_param() into a get-only method that does not affect the repository.
    Display version history in the editor UI. Add snapshot models to Django backend.
    Add explicit checks for deletion rights.
    Add versioning of explorations.
    Use Route/RedirectRoute instead of route tuples to facilitate use of uri_for in templates.
    Adding states and adding rules should update the graph immediately, without refreshing the page.
    fix issue #27 (error message when creating states)
    Fix error in previous commit.
    Make controllers accept exploration and state ids as arguments, instead of domain objects.
    Change state mutator methods to not return anything.
    Move jinja_utils to a separate module.
    Remove parameter storage model, and use only its domain class.
    Modify save_state to take the exploration_id as well.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    For persistent storage, store states as JSON blobs instead of rich objects. The rich object representation will be used for retrieving them from memcache.
    Remove dependence of exploration domain class on the exploration model class.
    Add model-switching mechanism.
    Add the handler name as an argument for accessing the stats rule answer log.
    Condense and clarify the get_state_stats_for_explorations() method.
    Add lots more tests for the statistics models.
    Minor clarifications to get_top_ten_improvable_states().
    Major refactoring to make the statistics model more concrete and use domain concepts from the exploration and state models. Remove the feedback controller and replace it with a link to the bug tracker and groups page. Restrict the unresolved answers feature to be used only with the default rule of a state.
    Move Karma error message nearer the location at which an error is likely to occur. Move more controller methods into the domain layer.
    Move more logic into the domain layer. Fix some select2 error messages in the frontend that occur due to imported libraries being in the wrong order.
    Remove YAML editor functionality.
    Propagate the new representation of a state to the frontend.
    Propagate the use of the terms 'rule_specs' and 'description' to the frontend.
    Move answer classification methods to the exp_services module.
    Change the name of the models directory from 'apps' to 'storage'.
    Move domain-related files to their own folder in the repository.
    Moving the collection of unresolved answers for a state to the statistics module.
    Remove some duplication in stats_services. Rename state.Rule to state.RuleSpec to distinguish it from the rules in apps/rule.
    Complete the transition to first-class Rule objects. Remove the classifier model and all calls to it.
    Rename widget models file to widget_domain.py to reflect its independence of the storage layer.
    Move all remaining methods into the BaseWidget class.
    Moving some domain methods into the base widget class.
    Remove all dependencies on widget storage classes.
    Use module-level imports. Avoid aliasing module names where possible.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Fix a missing dependency on App Engine which caused some tests to fail. Minor simplification of ExplorationHandler.get() return value.
    Using elements of editor_ids directly as email.
    Add an explicit init_state_id property to avoid unnecessary database lookups. Minor refactorings and rewordings.
    Store a payload attribute on handlers which use a payload. Move get_state_by_id() into the domain object.
    rename_state() should take state_id as an argument rather than the entire State object.
    Move state deletion logic from the controllers into the domain layer.
    Separate the exploration model into a domain object class and a storage class.
    Where possible, use a user_id instead of an explicit User object.
    Pull statistics functions out into a services file.
    Change states to state_ids for clarity.
    Move add_state() and delete() back to the model class. Add an add_editor() method to exploration.services.
    Remove some unnecessary imports
    Finish moving stuff out of the exploration model class.
    Move more methods from the Exploration model class to the exploration services file.
    Remove direct dependencies from the controllers and other modules on the Exploration storage model so that it is easily swappable. The Exploration storage model is now imported only by the exploration services and test files.
    Remove use of parent property and ancestor queries. Start the process of making the State accessible only via its containing Exploration.
    Turn the init_state of an exploration into a @property to avoid duplication of information.
    Revert "First draft of classifying on arbitrary parameters instead of just answers."
    
    We will revisit this functionality later, because it's actually a substantial change with changes to how classifiers function
    
    This reverts commit 305a1b40b5e4f8f1f8f07ab3d26cd19fa9ebf4f8.
    First draft of classifying on arbitrary parameters instead of just answers.
    TODO: also display parameter name in classification description; fix substitution hack (looking for "Answer" and substituting with param choice)
    To ponder: does it still make sense to group rules into types of classifiers, and associate those with particular inputs/widgets?
    Since we could now be comparing to arbitrary parameters instead of answers.
    Or, should the comparison parameter choice happen on a per-classifier instead of per-rule basis? this would give less flexibility, but might make more sense with the classifier/rule breakdown.
    Remove unneeded methods from exploration/models.py
    Add the current user as an attribute of each request handler. Simplify the logic for the gallery controller.
    Add 'My Explorations' tab to navbar.
    finished exploration-level parameter interface with editing.
    TODO:
    some code cleanup (TODOs in code)
    export exploration-level params in yaml
    think about adding ability to delete parameters (only delete if all associated param changes are gone? or maybe just delete all associated param changes?)
    Add 'improvable states' to exploration stats page
    Reorganize frontend JS files, partitioning them into 'apps'.
    Make the iframe widget check the appropriate event origin.
    Use promises to smoothly handle exploration loading in the exploration editor page.
    Reinstate display of unresolved answers list in the editor UI.
    clean up line length for chart api data
    Moving to the Google charts API
    Ensure that any state has a parent exploration. Add the correct content type to JSON responses. Add end-to-end test for the reader controller.
    Adding the no answer line in the rules
    Update ParamChange docs and validate the obj_type of ParamChange models when they are created.
    Moving models/ to apps/ in preparation for the migration to django non-rel
    Remove use of 'attrs' from the interactive widgets
    Various cleanups.
    Combining the Parameter and MultiParameter classes into a single Parameter class.
    Moving parameters to use the new Parameter models. This change is not backwards-compatible.
    Records all answers and displays stats broken down by rule hit
    Updating the state parameters to use the MultiParameter model. For now they are all of type UnicodeString.
    Widget sticky bool param added.
    
    Prevents reloading the widget if it is the same type as the previous
    state's.
    Added a checkbox in editor to control this bool param.
    Remove normalizers; switch to data.objects.models.
    Small refactoring of duplicate code
    Remove unnecessary imports
    Finish cleanup of exploration.py
    Refactoring and adding validation to the Exploration model.
    Add an admin handler that allows reloading of the default explorations. Move the methods in controller_utils.py to the respective models/controllers.
    Adding an new field to individual states to ease tracking of unresolved answers.
    Showing stats on the state editor page
    Move statistics to the exploration metadata tab.
    Use the user's nickname in the UI, instead of email.
    Removing the AugmentedUser class to make queries faster.
    Add a flag to disable YAML functionality.
    Adding images to sample explorations. Rejigging CSS for gallery page.
    Change all frontend requests to use .createRequest().
    Add error pages.
    Admins should have full access to the app.
    Remove 'code'.
    Remove 'rule' attribute from each rule as well. The only thing left to remove is 'code'.
    Change the format of the classifiers
    Make it possible to retrieve exploration-level parameters from the backend.
    Move some controller utility methods to the exploration model class.
    Move a utility method to utils.py, and add tests.
    Make it less painful to edit a string parameter for a widget.
    Refactor the State model. Introduce more implicit property validation.
    Merge changes
    Finish refactoring of widgets.
    changed exploration parameters model to be more similar to widget param model for consistency and ease of use;
    added almost all propagation of adding new parameters, except it breaks exploration a bit so commented out.
    making sure exploration parameters propagate from back to front and vice versa
    Restructuring the widget models so that widgets are only loaded once from files and thereafter stored in the datastore.
    Finish tests for utils.py
    Removing yaml_utils.py and moving its methods to the relevant places in the layered architecture.
    Refactoring utils
    Introducing a request payload to minimize the number of JSON conversions needed.
    Final shot at linting
    Removed an assumption that parameter values were strings.
    Lint most python files
    Making state.content into an ndb.Model.
    Change NDB queries to get_by_id for speed.
    Update the default exploration
    Simplify self.response.out.write to self.response.write. Store the Jinja2 environment as a cached property.
    Allow addition of collaborators.
    Allow forking of demo explorations.
    Fixing some errors in the classifier rule parsing
    Adding a classifier for music notes.
    Refactoring the state deletion code. Also, we now do not create an exploration if any of its setup parameters (like the YAML file) are invalid.
    Add help text
    Deleting extra 15132hashKey keys in the rules array when it is passed to the backend.
    Connecting the set-parameter interface to the backend, and tweaking its UI
    Making changes to the music widget, moving some of its functionality to Oppia
    Improving the exploration creation flow on the gallery page.
    Restructuring JS files, and adding caching headers to static content.
    Adding normalization support for rule parameters
    Move interactive widget preview into a separate file.
    Make YAML editing work.
    Sending all data via the Exploration object in the frontend. Renaming stateContent to content for parity with the backend. Fix URL routing.
    Remove editor.StatePage, since it is no longer needed.
    Improve the interactive widget UI
    Fixing some bugs in the interactive widget preview
    Making the exploration metadata editor display less noisy. Removing some unneeded code due to the destination refactor. Adding a method to models.State to output an entire state as a Python dictionary.
    Refactoring ExplorationData methods to replace saveStateChange
    Moving to PEP-8 method name styles (method_name rather than MethodName)
    Move lib-serving code into resources.LibHandler
    Removing final vestiges of the old system (actions, inputType, dests)
    Store destination ids rather than names. Make the exploration tree format rules correctly.
    Removing stateData. Using explorationData for all get transactions.
    All END states are now 'END'; there is no more use of '-1'. All 'END' and '-1' literals have been changed to use one of the constants in either utils.py or editorExploration.js.
    Move interactive widget preview to separate file, and into ng-view
    Make multiple choice widget work.
    Move exploration, state and parameter models into separate files.
    Making YAML uploads work with the new formats.
    Deleting old files.
    Continuing to replace the old input_view/action_set infrastructure with the new interactive_widget/interactive_ruleset infrastructure. WARNING: The present commit leaves Oppia in a broken state.
    Add edit, delete, move up and move down buttons for individual rules
    Add feedback textarea and dest input field to rule modal, and display these properties in the overall rule UI
    Fully persist interactive widget parameters and rulesets.
    Move models to a separate folder.
    Persisting interactive widget ids for a state. Renaming 'blurb' to 'description' for consistency; renaming widget.class to widget.id since class is a reserved word in JavaScript.
    Adding new fields to the state model class. Adding UI elements for customizing interactive widgets and displaying rules for them.
    Linting all Python files to use the PEP-8 4-space-indentation standard.
    Moving controllers to a separate folder
    Separate controllers into different pages.
    Adding decorator for checking editor permissions
    Use decorator to simplify permissions handling
    Rename 'mode' to 'nav_mode'.
    Merge the reader and editor main pages into a single gallery page
    Streamline backend handling of state updating via GUI/YAML interfaces
    Add a sample exploration to the home page
    Allow uploading of explorations from YAML files
    Write initial state to beginning of file
    Adding modal for creating a new exploration.
    Lots of small edits and refactorings
    Continue simplifying classifier logic
    Simplifying classifier logic.
    Fix a bug in the handling of action_sets
    Allow explorations to be downloaded as YAML files
    Allow deletion of explorations
    Allowing widget content to be empty
    Adding further touches to the graph visualization
    Renaming vizualization files
    Allowing preview images for explorations to be uploaded
    Clearing some unneeded methods and variables. Minor fixes to the widget repository.
    Combining exploration PUT requests into a single saveExplorationProperty() method
    Synchronize PUT methods on explorations and tighten up the frontend for editing exploration properties
    Remove generic 'metadata' property for explorations and replace it with individual fields
    Standardize representation of state.content to {'type': ..., 'value': ...}
    Fix a bug in the GUI editor
    Separating the code for the various editor views into their own JS files, and removing the superfluous data from the backend responses
    Move templates to editor/views and make a separate GuiEditor controller.
    Removing more error classes
    Changing stateText to stateContent everywhere else
    Renaming state.text to state.content in the backend
    Unify the various names used for default categories to 'Default'
    Adding a d3.js graph
    Start building a single-source-of-truth for state data
    Enable loading of default YAMLfrom the backend
    Remove state name checking in the YAML handler.
    Finish the YAML conversion.
    Print exception tracebacks.
    Adding a YAML text editor for each state.
    Allow importing of exploration from a file
    Minor renaming. Also removed link from end of finished.html, since we don't want it to display in iframed mode.
    Experiment with displaying state data as YAML, and updating image, video and widget behavior in the editor UI.
    Making third-party files internal and inserting them into the startup shell script.
    Improve docs.
    Incorporate better error handling in the backend.
    Enable publishing of explorations.
    Add editing permissions.
    Removing more traces of metrics, and transferring the set image classes to the CSS file.
    Removing _new suffix from new file names
    Removing duplicate code
    Removing old files
    Transitioning existing Oppia classes and pages to the new structure
    Implement the editor index page.
    Make the index page spiffy. Add login functionality to editor views and display the login/logout status in the navbar.
    Adding an index page, and simplifying some of the backend logic
    Adding data for the reader home page
    Refactoring the base class into a separate file, and rejigging the URL routing
    Adding stuff to the navbar
    Creating a new set of HTML, JS and CSS files for a redesigned Oppia frontend
    Delete unused code
    Initial commit.
    Require the user to explicitly select the interaction for each state.
    Make signing in required if the user is logged in but has not chosen a username.
    Complete the deprecation of 'widget'.
    Remove more unneeded code for server-side parameter evaluation.
    Implement if/then/else for expressions. This completes the conversion of the Lazy Magician exploration to use the new expression language.
    Resolving comments.
    reolving comments.
    Lint fixes.
    Break the state transition handler into multiple handlers, similar to what is done in editor preview mode.
    Refactor the learner feedback handler so that parts of it can be accessed as separate functions.
    Use more unicode strings in tests. COnsolidate common strings.
    Move more of the reader feedback handler logic to the frontend.
    In the learner view, load the entire exploration at the outset, and move the construction of the interactive widget HTML tags to the frontend.
    Remove unnecessary warning on reader view of unpublished exploration.
    Remove SLOW_TAGS option, migrate other options so that they can be used directly in test.sh, and refactor scripts/backend_tests.py for clarity.
    Minor lint fixes, mostly to the controller layer.
    Address review comments: allow users to provide a subject line and specify whether their feedback is exploration- or state-specific.
    Route reader-submitted feedback to the new feedback system, and remove the frontend for the old feedback system.
    Fixed test for merge error.
    Sticky title re-branch.
    Housekeeping changes: remove unneeded block_number, normalize reader answers prior to processing them, do not fail if the stats answer logs overflow (issue 139), make warmup handler not throw 404s.
    Revert "Sticky title merge."
    
    This reverts commit 9d8d0acecba8b89a51787bee68165c5d609e2faf.
    It broke accessiblity.
    Sticky title merge.
    Remove the Django port of Oppia from the codebase.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Allow old versions of explorations to be linked to.
    Remove the existing music note widget.
    Add a Contributor gallery. Update URL routing. Make other small UI tweaks.
    Implement the necessary queries for the gallery and profile pages.
    Improve the way exploration creation and saving is handled in the backend. Require commit_cmds and commit_messages to be specified by default, where possible.
    Tighten up the implementation of user settings and rights.
    Perform strict validation on the demo explorations and on published explorations.
    Remove the state model from the backend.
    
    Reasons:
    - It is confusing to keep track of two separate lifecycles for states
        and explorations.
    - The state name and state id were duplicate ways to identify a
        particular state.
    
    Side effects:
    - This change has resulted in an update to the YAML schema. The update is
        fully backward-compatible.
    - States are now identified in URLs and in analytics by their names
        rather than their ids.
    Standardize the reader URL mapping and also standardize the way JSON interactions are handled in all the server-side integration tests.
    Fully migrate explorations to use the rights manager.
    Use actual user_ids instead of email addresses. Require the user to pick a valid username that would appear in the commit logs.
    Lint the codebase.
    fix adventure exploration test
    Fix django tests.
    Add batched saving for everything except param_changes. Fix an error in the client that mistakenly added 'subject: answer' to the default rules.
    Add code and tests for handling viewing rights to an exploration.
    updated binary search to use new way of using images
    Add a test to cover oppia's feedback as well as the text for the new state.
    incremental edit of binary search exploration
    Remove the image storage model. Move image file uploading to use the file system storage model.
    Security fix: add XSSI protection.
    Security improvements.
    Fix an error in a custom jinja filter name, which caused the binary search exploration to fail.
    Fix doc error.
    Streamline the way reader tests are written. Make some tests faster by not loading all explorations.
    Allow the running of individual tests and test classes. Allow the categorization of tests as slow so that they can be omitted using a command-line flag if desired.
    Add test suite for django to automatically discover and run tests. Add platform switching to tests.
    Add a generic backend simulator to the reader controller test player, so that it is easier to test playthroughs of the sample explorations.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Add integration test for statistics.
    Major refactoring to make the statistics model more concrete and use domain concepts from the exploration and state models. Remove the feedback controller and replace it with a link to the bug tracker and groups page. Restrict the unresolved answers feature to be used only with the default rule of a state.
    Remove unneeded admin functionality.
    Use module-level imports. Avoid aliasing module names where possible.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Fix broken tests. Rewrite reader parameter logic so that parameters are initialized using the new state. Change schema for exploration demos so that they are at exploration level (and the states list is now a list, rather than a dict, of states).
    Ensure that any state has a parent exploration. Add the correct content type to JSON responses. Add end-to-end test for the reader controller.
    Refactoring utils
    Restructure tests, so that each module has its own test file.
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Renaming rule files to have YAML suffixes. Adding normalizers.
    Adding tests for classifiers and using PEP-8 for the Python files.
    Add more detail to the recent changes page.
    Address review comments.
    Add functionality for regenerating the search index.
    Include object editor code on every HTML template.
    Migrate the backend widget registries and the controllers.
    Add the current time to the admin page, and change the order in which sections are presented.
    Deprecate file input widgets. Add a button in the admin dashboard to view job output.
    Tidy up naming and clarify the code.
    Add a separate section for unfinished jobs to the admin dashboard.
    When a computation is stopped, cancel the current batch job. In the admin dashboard, do not show a cancel button for batch jobs related to continuous computations.
    Add a test to check that continuous computation classes are specified correctly, and introduce the concept of managers for one-off jobs.
    Create an admin dashboard for continuous computations.
    Allow MapReduces to compare mapped items against the time the job was enqueued. Standardize time-handling conventions throughout the codebase (use '_msec' suffix and use methods from utils.py for time conversions).
    Minor lint fixes, mostly to the controller layer.
    Fix a display error on the admin jobs dashboard.
    Remove all traces of the old feedback models.
    Add a test for feedback migration.
    Feedback migrated from the old system should be anonymous.
    Fix thread.id error.
    Complete feedback item migration code.
    First pass at feedback item migration
    Resolving merge problem.
    Add an dashboard in the admin page for jobs.
    Fix error arising due to unnecessary conversion of unicode strings to Python's str type.
    Add logging for moderator queries.
    Fix admin page by including some missing scripts. Move the RTE modal template into the HTML editor.
    Move checks for whether the user is a super admin directly to the platform level.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Refine rights management for moderators, admins and super admins.
    Fail more gently on user-facing queries. Validate new explorations prior to creating their rights object.
    Add warmup request handler. Remove a superfluous test.
    Add a button for releasing ownership of an exploration to the community.
    Implement admin and moderator rights management.
    Add config properties for editor prerequisites page.
    Add versioning for config model. Fix editor prerequisites JS tests.
    Lint the codebase.
    Make computed config properties refreshable.
    Add the concept of computed configuration properties. Fix some errors in the behavior of discardChanges() on the exploration editor page.
    Allow configuration properties to be edited in the admin UI.
    Create a directory for tools at the same level as the oppia root dir, and put all files unneeded at runtime into it. Also, reduce startup latency by loading only the welcome exploration by default, instead of all of them.
    Reloading all explorations is taking too long, so allow reloading of individual explorations in the admin page.
    Add config property model and CSRF protection.
    Add latency counters.
    Move perf counters out of the domain layer.
    Add memcache performance counters.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Remove unneeded admin functionality.
    Move domain-related files to their own folder in the repository.
    Complete the transition to first-class Rule objects. Remove the classifier model and all calls to it.
    Rename widget models file to widget_domain.py to reflect its independence of the storage layer.
    Add a registry of widgets.
    Remove all dependencies on widget storage classes.
    Use module-level imports. Avoid aliasing module names where possible.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Store a payload attribute on handlers which use a payload. Move get_state_by_id() into the domain object.
    Remove direct dependencies from the controllers and other modules on the Exploration storage model so that it is easily swappable. The Exploration storage model is now imported only by the exploration services and test files.
    Add the current user as an attribute of each request handler. Simplify the logic for the gallery controller.
    Reorganize frontend JS files, partitioning them into 'apps'.
    Add an iframe widget.
    Moving models/ to apps/ in preparation for the migration to django non-rel
    Make classifiers into first-class objects.
    Use json.dumps() and JSON.parse() to pass parameters to widgets safely.
    Add an admin handler that allows reloading of the default explorations. Move the methods in controller_utils.py to the respective models/controllers.
    Add logging for moderator queries.
    Add tests for the moderator page.
    removed unnecessary get() functions and changed the handling of no such user to not rely on them.
    Fixes to moderator page in response to comments
    Revert "Merging moderator page into main branch"
    
    This reverts commit 41f68ff03a3f72d0fc5f2d4c4e37106e01707cff, reversing
    changes made to dee9ead5e46b3616eaae6c5e7fb55a6e8fdde539.
    Basic functionality for moderators to get users' email addresses
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Minor security enhancements.
    Add handler to read uploaded files.
    Allow the running of individual tests and test classes. Allow the categorization of tests as slow so that they can be omitted using a command-line flag if desired.
    Add test suite for django to automatically discover and run tests. Add platform switching to tests.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Add tests for gallery and base controllers.
    Restructure tests, so that each module has its own test file.
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Renaming rule files to have YAML suffixes. Adding normalizers.
    Adding tests for classifiers and using PEP-8 for the Python files.
    Split about page into two. Minor linting fixes.
    Restyle About page.
    Merge sidebar/navbar changes.
    Lint fixes.
    Combine the splash and dashboard page controllers into a common homepage controller.
    Share the 'Create Exploration' button between the dashboard and contribute gallery pages.
    Introduce a new user dashboard page.
    Minor lint fixes, mostly to the controller layer.
    Remove state names from the profile page. Fix a broken test.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Always show the Contribute tab in the navbar.
    Allow the admin to configure the id for the sample exploration on the splash page. Make the link to the gallery more prominent.
    Add more controller tests.
    Minor fixes for login/logout buttons. Remove unused images.
    Revise the wording for the static pages.
    Rework the splash page.
    Resurrected welcome exploration and added explore link from splash screen to gallery.
    Fixed the default page test.
    Resurrected welcome exploration and added explore link from splash screen to gallery.
    Fixed the default page test.
    Allow the running of individual tests and test classes. Allow the categorization of tests as slow so that they can be omitted using a command-line flag if desired.
    Add test suite for django to automatically discover and run tests. Add platform switching to tests.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    CSS change to work on Firefox too. Fix a test.
    Reduce height of interactive widget display. Remove a line from tests.
    Fixes to the main page.
    Fix a test
    Changing the default exploration and the formatting of the homepage.
    Separating the state transition logic from the rest of the handler.
    Restructure tests, so that each module has its own test file.
    Fix migration job. Fix bug with state parameter changes display in state editor UI.
    Split about page into two. Minor linting fixes.
    Add config property for additional links in the sidebar menu. Complete work needed for config property for gallery carousel.
    Include object editor code on every HTML template.
    Make rich-text component loading happen at the same time as the page load.
    Remove obsolete admin page config properties. Restructure config properties to use schemas.
    Show the profile picture on all pages.
    Allow users to leave the signup page mid-way through signup, logging them out if they do so.
    Make signing in required if the user is logged in but has not chosen a username.
    Merge sidebar/navbar changes.
    Show the tutorial immediately for first-time users.
    Add objective and language fields to the 'create exploration' form.
    Add a forum page to the site.
    Consolidate the three galleries into a single public one.
    Consolidate error handling boilerplate.
    
    Also:
    
    (a) Have a friendlier 404 error page.
    (b) Remove unused route from app.yaml.
    (c) Add a robots.txt file.
    Remove the SHOW_FEEDBACK_TAB flag. Guard against non-logged-in users submitting new threads or messages.
    First round of tests for the feedback thread backend. Also consolidate some handlers.
    Remove a couple of places that were still editable in the view-only mode for the exploration editor.
    Implement world-viewable exploration editor pages.
    Feedback thread barebone UI and data path.
    Create a new site guidelines page and clarify some of the wording.
    Fix unicode error.
    Fix error arising due to unnecessary conversion of unicode strings to Python's str type.
    Extend CSRF token lifetime.
    Fixes to moderator page in response to comments
    Revert "Merging moderator page into main branch"
    
    This reverts commit 41f68ff03a3f72d0fc5f2d4c4e37106e01707cff, reversing
    changes made to dee9ead5e46b3616eaae6c5e7fb55a6e8fdde539.
    Basic functionality for moderators to get users' email addresses
    Grant moderators delete permissions for explorations; record roles when deleting.
    Admins and moderators should be able to see all public explorations in the Contribute gallery.
    Add functionality for banning editors.
    Add OpenID authentication system for non-GAE platform.
    Move checks for whether the user is a super admin directly to the platform level.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Make logging more silent in production.
    Always show the Contribute tab in the navbar.
    Add moderator role display in the top-right of each page (for moderators).
    Refine rights management for moderators, admins and super admins.
    In the learners' gallery, point viewers to the Contribute page.
    Fix YAML file upload flow, and make it a configurable property in the admin page.
    Add licensing information to the individual exploration pages.
    Add a end-of-head-tag code hook.
    Put the redirect in the correct place. Also fix broken postMessage check in widgets.
    Redirect to the new test server.
    Add a Contributor gallery. Update URL routing. Make other small UI tweaks.
    Add a button for releasing ownership of an exploration to the community.
    Allow owners, collaborators and playtesters of explorations to be set.
    Add versioning for config model. Fix editor prerequisites JS tests.
    Tighten up the implementation of user settings and rights.
    Consolidate the validation for explorations in the exp_domain module.
    Remove the state model from the backend.
    
    Reasons:
    - It is confusing to keep track of two separate lifecycles for states
        and explorations.
    - The state name and state id were duplicate ways to identify a
        particular state.
    
    Side effects:
    - This change has resulted in an update to the YAML schema. The update is
        fully backward-compatible.
    - States are now identified in URLs and in analytics by their names
        rather than their ids.
    Standardize the reader URL mapping and also standardize the way JSON interactions are handled in all the server-side integration tests.
    Consolidate the handlers for the editor page into a single file.
    Fully migrate explorations to use the rights manager.
    Use actual user_ids instead of email addresses. Require the user to pick a valid username that would appear in the commit logs.
    Lint the codebase.
    Allow configuration properties to be edited in the admin UI.
    Minor wording changes.
    Properly escape strings in HTTP responses.
    Add an editor prerequisites page with information about the CC0 license.
    Redirect on successful username save
    Add tests for CSRF functionality.
    Allow an admin to change the editor list for an exploration.
    Minor security enhancements.
    Check username for uniqueness
    
    Includes code review changes from previous username commits
    Requires a username for editors and adds a path to create them
    Check username for uniqueness
    
    Includes code review changes from previous username commits
    Requires a username for editors and adds a path to create them
    Requires a username for editors and adds a path to create them
    Requires a username for editors and adds a path to create them
    Fix the image upload flow. Remove exploration image functionality.
    Security fix: add XSSI protection.
    Security improvements.
    Improve frontend modal code using ui.bootstrap.
    Improve the validation tests for exploration yaml files.
    Upgrade Angular to 1.2.0-rc.2. Change modal callsites to buttons instead of links, and add contextual escaping using  where needed. Add a separate page for 404 errors.
    Move the yaml files to use value generators for state parameter changes, and ensure that the reader view works. Note that this commit breaks the editor view; this will be fixed in a future commit. None of these commits will be pushed to master until we have a working build.
    Complete the implementation of the widget customization param editors using the new value generators.
    Add config property model and CSRF protection.
    Introduce server-side validation of exploration and state names. Standardize the characters that can be used in these names.
    Add latency counters.
    Use Route/RedirectRoute instead of route tuples to facilitate use of uri_for in templates.
    Make controllers accept exploration and state ids as arguments, instead of domain objects.
    Move jinja_utils to a separate module.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    For persistent storage, store states as JSON blobs instead of rich objects. The rich object representation will be used for retrieving them from memcache.
    Import user_services using registry.
    Start moving repository methods to the services files so that domain objects can become plain python objects.
    Move domain-related files to their own folder in the repository.
    Use module-level imports. Avoid aliasing module names where possible.
    Move user-related methods (which are GAE-dependent) into a single file.
    Minor adjustments to build file and the use of feconf.JINJA_ENV.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Store a payload attribute on handlers which use a payload. Move get_state_by_id() into the domain object.
    Separate the exploration model into a domain object class and a storage class.
    Missed a couple of changes in the previous commit.
    Where possible, use a user_id instead of an explicit User object.
    The exploration model should not know who the current user is.
    Finish moving stuff out of the exploration model class.
    Move more methods from the Exploration model class to the exploration services file.
    Remove direct dependencies from the controllers and other modules on the Exploration storage model so that it is easily swappable. The Exploration storage model is now imported only by the exploration services and test files.
    Remove use of parent property and ancestor queries. Start the process of making the State accessible only via its containing Exploration.
    Remove unneeded methods from exploration/models.py
    Move get() method for IdModel classes to the common superclass.
    Add tests for gallery and base controllers.
    Add the current user as an attribute of each request handler. Simplify the logic for the gallery controller.
    Make the iframe widget check the appropriate event origin.
    Restructuring the view directories more intuitively.
    Specify only needed JS files in each template view.
    Ensure that any state has a parent exploration. Add the correct content type to JSON responses. Add end-to-end test for the reader controller.
    Moving models/ to apps/ in preparation for the migration to django non-rel
    Refactoring and adding validation to the Exploration model.
    Add an admin handler that allows reloading of the default explorations. Move the methods in controller_utils.py to the respective models/controllers.
    Use the user's nickname in the UI, instead of email.
    Removing the AugmentedUser class to make queries faster.
    Add autoescaping.
    Add caching headers to dynamic responses. Reduce cache time for static files to 1 month.
    Add a flag to disable YAML functionality.
    Add error pages.
    Display a user's role in the navbar.
    Add a check for existence of the exploration in base.py
    Restructuring the widget models so that widgets are only loaded once from files and thereafter stored in the datastore.
    Improve tests for the image class and the widget class.
    Refactoring utils
    Lint most python files
    Change NDB queries to get_by_id for speed.
    Simplify self.response.out.write to self.response.write. Store the Jinja2 environment as a cached property.
    Allow addition of collaborators.
    Continue tidying up pages.py.
    Moving to PEP-8 method name styles (method_name rather than MethodName)
    Move lib-serving code into resources.LibHandler
    Add TODO
    Bundle JS and CSS header libs into single files for speed.
    Move exploration, state and parameter models into separate files.
    Overriding BaseHandler.__init__() as described in http://webapp-improved.appspot.com/guide/handlers.html
    Move models to a separate folder.
    Linting all Python files to use the PEP-8 4-space-indentation standard.
    Moving controllers to a separate folder
    Adding decorator for checking editor permissions
    Use decorator to simplify permissions handling
    Redesign widget repository page
    Remove superfluous error handlers
    Print exception tracebacks.
    Adding YAML file verification.
    Incorporate better error handling in the backend.
    Removing _new suffix from new file names
    Removing duplicate code
    Transitioning existing Oppia classes and pages to the new structure
    Make the index page spiffy. Add login functionality to editor views and display the login/logout status in the navbar.
    Adding an index page, and simplifying some of the backend logic
    Updating docs in base.py
    Adding missing base.py file from previous push
    Initial commit.
    Make all loads of the gallery use the search functionality. Add basic ranking.
    Show the profile picture on all pages.
    Redesign the gallery page.
    
    Still TODO:
    (a) Fix integration test for language and category selection.
    (b) Check if paging is needed for the no-query case.
    (c) Implement carousel.
    Make signing in required if the user is logged in but has not chosen a username.
    Use the user's preferred languages in the gallery. Create an editable preference page and a viewable profile page.
    Add language codes to the search query.
    Implement server-side paging for the gallery.
    Make the gallery page the homepage. Remove unused CSS rules. Update integration tests.
    Merge sidebar/navbar changes.
    Remove private explorations from the gallery. Remove 'status' checkbox group. Update integration tests.
    Address Jacob's review comments. Rename 'beta' to 'public'. Reduce number of status choices in the gallery.
    Lint fixes.
    Addressed code review comments, minor changes.
    Converted ExplorationSummaryCreation job from continuous to one-off. Improved some tests.
    Added test for exploration summaries. Small changes related to exploration summaries.
    Add objective and language fields to the 'create exploration' form.
    Using exploration summary domain objects instead of summary models directly, addressed code review.
    Use more unicode strings in tests. COnsolidate common strings.
    Use exploration summaries to speed up galleries. Include MR job to generate initial summaries.
    Show better language descriptions in gallery and editor page. Update wording in editor page modals and move tooltips onto their corresponding action buttons.
    Change highlight color for Edit button, and only show it on explorations the user can edit.
    Consolidate the three galleries into a single public one.
    Minor lint fixes, mostly to the controller layer.
    Fix view permission error in the editor page.
    Add links to read-only explorations in the Contribute gallery.
    Implement world-viewable exploration editor pages.
    Resolving merge problem.
    Continue the Bootstrap 3 upgrade.
    Rename 'playtest gallery' to 'playtest queue' in tests and in the backend code.
    Represent the playtest gallery as a flat list. Remove subtitle from the learn gallery.
    Add additional exploration properties.
    
    (The properties are: skill tags, blurb, author notes, objective and
    language code.)
    
    WARNING: This should not be merged into the main branch until the
    frontend is written, otherwise all publish will fail since there is
    nowhere to specify the (required) objective.
    Add a new gallery for playtesting.
    Address review comments.
    Fix a bug introduced in revision 5b4a64d16cc involving misgeneration of new exploration ids.
    In tests, change is_admin to is_super_admin to avoid confusion.
    Add tests for the moderator page.
    Add more logging data to try and debug issue of exploration changes being lost on saving; change superadmin permissions.
    By default, hide beta explorations in both galleries.
    Amend tests for user editing and deleting permissions
    Amend test of editing and deleting permissions
    Add more tests for editing and deletion rights of different users
    Admins and moderators should be able to see all public explorations in the Contribute gallery.
    Remove the Django port of Oppia from the codebase.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Address some, but not all, of the failing Django tests.
    Add moderator role display in the top-right of each page (for moderators).
    Refine rights management for moderators, admins and super admins.
    In the learners' gallery, point viewers to the Contribute page.
    Allow the admin to configure the id for the sample exploration on the splash page. Make the link to the gallery more prominent.
    Add more controller tests.
    Add a Contributor gallery. Update URL routing. Make other small UI tweaks.
    Allow the running of individual tests and test classes. Allow the categorization of tests as slow so that they can be omitted using a command-line flag if desired.
    Add test suite for django to automatically discover and run tests. Add platform switching to tests.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Add tests for gallery and base controllers.
    Restructure tests, so that each module has its own test file.
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Renaming rule files to have YAML suffixes. Adding normalizers.
    Adding tests for classifiers and using PEP-8 for the Python files.
    Add config property for additional links in the sidebar menu. Complete work needed for config property for gallery carousel.
    Add a config property for the gallery carousel slides.
    Remove obsolete admin page config properties. Restructure config properties to use schemas.
    Use better images for the gallery thumbnails and the exploration intro card.
    Make all loads of the gallery use the search functionality. Add basic ranking.
    Add validation for the new EndConversation interaction, and hide its rule display.
    Make signing in required if the user is logged in but has not chosen a username.
    Use the user's preferred languages in the gallery. Create an editable preference page and a viewable profile page.
    Add language codes to the search query.
    Implement server-side paging for the gallery.
    Migrate the backend widget registries and the controllers.
    First half of the work needed to rename widgets to interactions/rich-text-components.
    Merge the gallery page and the splash page.
    Add language selection functionality to the gallery.
    Remove private explorations from the gallery. Remove 'status' checkbox group. Update integration tests.
    Address Jacob's review comments. Rename 'beta' to 'public'. Reduce number of status choices in the gallery.
    If an interstitial breaks the exploration creation flow, redirect to the exploration creation modal in the gallery at the end of the process.
    Add a search field to the gallery.
    Lint fixes.
    Addressed code review comments, minor changes.
    Fixed bug where summaries of old exploration domain objects were created.
    Addressed code review, minor changes.
    Added test for exploration summaries. Small changes related to exploration summaries.
    Fix several bugs:
    
    1) Remove the obtrusive warning message when the objective field is blurred in the exploration settings page.
    2) Highlight the rule tiles properly on mouseover.
    3) If the interactive widget editor is open and the user navigates to preview mode, save the interactive widget first.
    4) Remove one click from the 'create new exploration' flow in the gallery page.
    5) Fix a bug where the numeric input widget was not accepting inputs of 0.
    6) Fix a display bug where the numeric input widget was aligned too far to the left.
    Add objective and language fields to the 'create exploration' form.
    Addressed code review, only minor changes.
    Using exploration summary domain objects instead of summary models directly, addressed code review.
    Use exploration summaries to speed up galleries. Include MR job to generate initial summaries.
    Speed up gallery a bit.
    Centralize the default limit for datastore queries.
    
    An earlier commit (c84460c11a0f) suggesting that inequality filters
    were not working properly was incorrect; the real culprit was that
    the default query limit was too low.
    Show better language descriptions in gallery and editor page. Update wording in editor page modals and move tooltips onto their corresponding action buttons.
    Change highlight color for Edit button, and only show it on explorations the user can edit.
    Show private explorations in gallery. Move the view/edit link to a button in the top-right of each gallery tile.
    Consolidate the three galleries into a single public one.
    Tidy up naming and clarify the code.
    Speed up the contribute gallery by not making so many individual calls to rights_manager.can_edit().
    Reverting debug a change mistakenly checked in.
    Add enclosing span to oppia-parameter during rte editting.
    Remove cloning functionality from the backend.
    Add links to read-only explorations in the Contribute gallery.
    Show 'community-owned' tags next to community-owned explorations in the playtest queue.
    Rename 'playtest gallery' to 'playtest queue' in tests and in the backend code.
    Represent the playtest gallery as a flat list. Remove subtitle from the learn gallery.
    Add a new gallery for playtesting.
    Address review comments.
    Implement the frontend for the recent commits list.
    
    Still TODO:
    - audit the data returned to ensure nothing private is exposed
    - test on a production instance
    - reuse the functionality in the exploration version history page
    - reuse the functionality in the user profile page
    Allow an announcement to be placed in the contribute gallery.
    By default, hide beta explorations in both galleries.
    Admins and moderators should be able to see all public explorations in the Contribute gallery.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    In the learners' gallery, point viewers to the Contribute page.
    Fix YAML file upload flow, and make it a configurable property in the admin page.
    Add more controller tests.
    Add a Contributor gallery. Update URL routing. Make other small UI tweaks.
    Implement the necessary queries for the gallery and profile pages.
    Implement admin and moderator rights management.
    Minor UI changes, including fixing wording on About page, adding a 'Beta' subtitle, and making the widget preview less opaque.
    Improve the way exploration creation and saving is handled in the backend. Require commit_cmds and commit_messages to be specified by default, where possible.
    Tighten up the implementation of user settings and rights.
    Add interstitial loading pages.
    Fully migrate explorations to use the rights manager.
    Lint the codebase.
    Check username for uniqueness
    
    Includes code review changes from previous username commits
    Check username for uniqueness
    
    Includes code review changes from previous username commits
    Remove the image storage model. Move image file uploading to use the file system storage model.
    Add a 'create new exploration' button to the profile page.
    Add config property model and CSRF protection.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Import user_services using registry.
    Move domain-related files to their own folder in the repository.
    Use module-level imports. Avoid aliasing module names where possible.
    Move user-related methods (which are GAE-dependent) into a single file.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Where possible, use a user_id instead of an explicit User object.
    The exploration model should not know who the current user is.
    Remove direct dependencies from the controllers and other modules on the Exploration storage model so that it is easily swappable. The Exploration storage model is now imported only by the exploration services and test files.
    Add tests for gallery and base controllers.
    Add the current user as an attribute of each request handler. Simplify the logic for the gallery controller.
    Remove dependence of the gallery controller on the exploration model. Create an exploration services file containing actions that involve explorations.
    Creating a profile page with improvable states
    Reorganize frontend JS files, partitioning them into 'apps'.
    Restructuring the view directories more intuitively.
    Ensure that any state has a parent exploration. Add the correct content type to JSON responses. Add end-to-end test for the reader controller.
    Moving models/ to apps/ in preparation for the migration to django non-rel
    Refactoring and adding validation to the Exploration model.
    Add an admin handler that allows reloading of the default explorations. Move the methods in controller_utils.py to the respective models/controllers.
    Use the user's nickname in the UI, instead of email.
    Removing the AugmentedUser class to make queries faster.
    Refactoring utils
    Lint most python files
    Change NDB queries to get_by_id for speed.
    Only logged-in users should be able to fork explorations.
    Simplify self.response.out.write to self.response.write. Store the Jinja2 environment as a cached property.
    Allow addition of collaborators.
    Making it more intuitive for the user to view only explorations he/she can edit.
    Allow forking of demo explorations.
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Restructuring JS files, and adding caching headers to static content.
    Various small frontend fixes.
    Moving to PEP-8 method name styles (method_name rather than MethodName)
    Move lib-serving code into resources.LibHandler
    Move exploration, state and parameter models into separate files.
    Finished a basic stats handler, recording visit counts for a given exploration.
    Move models to a separate folder.
    Added a spacesToUnderscore filter and a 'My Explorations' tab for the gallery page.
    Linting all Python files to use the PEP-8 4-space-indentation standard.
    Moving controllers to a separate folder
    Adding files missed in previous commit
    Further refactoring of model deletion cron job.
    Fix a missing import and some lint issues.
    Use a MR job to cleanup old datastore entities, instead of doing so in a request/response cycle.
    Add a cron job to clean up old auxiliary model instances for MR jobs.
    Add checks that cron handler is actually being called by cron. Add check for passing tests in deploy script. Fix syntax error.
    Fix cron URL. Modify email message to only send at most 50 errors.
    Change cron reporter to report on job status every 24 hours.
    Set up cron job for mailing the app admin if any MR jobs have failed recently.
    
    WARNING: this is not ready for merge into develop. We still need to patch
    gae-mapreduce-1.9.0.0/mapreduce/model.py, line 908, to use indexed=True.
    Migrate the existing StatsPageJobManager to use the new continuous computations framework.
    Minor lint fixes, mostly to the controller layer.
    implement cron jobs to update/rebuild the search index.
    Get the stats graph to read from the old models until we have a proper migration process in place.
    Cleaning up the calls to models and tests
    Changes from code reviews of several commits
    Adding 6 hour cron job for statistics calculation
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Lint the codebase.
    Move jinja_utils to a separate module.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Implement pluggable skins.
    Automatically compute the parameters for rules based on the rule description.
    Add rules for NonnegativeInt.
    Add infrastructure and data for handling composite rules. This is a more flexible version of the current classifier framework and will eventually replace it.
    Remove normalizers; switch to data.objects.models.
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Renaming rule files to have YAML suffixes. Adding normalizers.
    Adding tests for classifiers and using PEP-8 for the Python files.
    Moving sample classifiers, explorations and widgets to a separate directory.
    Make multiple choice widget work.
    Adding some basic list rules.
    Adding the remaining two classifiers.
    Make signing in required if the user is logged in but has not chosen a username.
    Use more unicode strings in tests. COnsolidate common strings.
    Minor lint fixes, mostly to the controller layer.
    In tests, change is_admin to is_super_admin to avoid confusion.
    Fix review comments.
    Add tests for the moderator page.
    *Now* add a couple of tests.
    Allow users to leave the signup page mid-way through signup, logging them out if they do so.
    Restyle signup page.
    Make signing in required if the user is logged in but has not chosen a username.
    Use more unicode strings in tests. COnsolidate common strings.
    Consolidate the three galleries into a single public one.
    Minor lint fixes, mostly to the controller layer.
    UX improvements for the editor prerequisites page.
    
    1. Remove some of the descriptive text.
    2. Make errors more immediate.
    3. Prevent form submission if it won't be accepted anyway.
    Implement world-viewable exploration editor pages.
    Resolving merge problem.
    Continue the Bootstrap 3 upgrade.
    Remove the Django port of Oppia from the codebase.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Add more controller tests.
    Implement the necessary queries for the gallery and profile pages.
    Tighten up the implementation of user settings and rights.
    Standardize the reader URL mapping and also standardize the way JSON interactions are handled in all the server-side integration tests.
    Use actual user_ids instead of email addresses. Require the user to pick a valid username that would appear in the commit logs.
    Add tests for more handlers in controllers.editor.
    Add tests for editor prerequisites page.
    Add an editor prerequisites page with information about the CC0 license.
    Split the dashboard into two different pages.
    Making changes needed after merge with develop.
    Resolving review comments.
    Remove obsolete admin page config properties. Restructure config properties to use schemas.
    Make signing in required if the user is logged in but has not chosen a username.
    Remove unused code. Use exploration summaries for all queries.
    Merge the gallery page and the splash page.
    Make the gallery page the homepage. Remove unused CSS rules. Update integration tests.
    Merge sidebar/navbar changes.
    Show notification counts in the navbar and page title, where appropriate. Highlight new updates in the dashboard. Fix a couple of bugs in the settings and history tabs where the exploration data was not being fully loaded before the tab was displayed.
    Record the time a user last checked the dashboard.
    Add a 'last updated' time to the user dashboard recent updates table.
    Address more review comments. In particular, fix an error where anonymous feedback threads were not being handled correctly in the dashboard display.
    Add a 'most recent updates' section to the user dashboard.
    Consolidate the three galleries into a single public one.
    Modify the dashboard view to show private, beta and released explorations.
    Combine the splash and dashboard page controllers into a common homepage controller.
    Share the 'Create Exploration' button between the dashboard and contribute gallery pages.
    Introduce a new user dashboard page.
    Minor lint fixes, mostly to the controller layer.
    Resolving merge problem.
    Pass MODERATOR_REQUEST_FORUM_URL value to site guidelines page.
    wording changes for release policy page
    Create a new site guidelines page and clarify some of the wording.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Allow the splash page exploration version to be set as a config property.
    Allow the admin to configure the id for the sample exploration on the splash page. Make the link to the gallery more prominent.
    Replace the images on the splash page with generic ones.
    Add links to Yana's exploration design tips. Merge the About and License pages.
    Add a Contributor gallery. Update URL routing. Make other small UI tweaks.
    Implement admin and moderator rights management.
    Minor UI changes, including fixing wording on About page, adding a 'Beta' subtitle, and making the widget preview less opaque.
    Revise the wording for the static pages.
    Tighten up the implementation of user settings and rights.
    Add a check for non-existent explorations in the page that displays a random exploration.
    Lint the codebase.
    Resurrected welcome exploration and added explore link from splash screen to gallery.
    Replacing the welcome page with a splash page.
    Resurrected welcome exploration and added explore link from splash screen to gallery.
    Replacing the welcome page with a splash page.
    Replacing the welcome page with a splash page.
    Replacing the welcome page with a splash page.
    Check username for uniqueness
    
    Includes code review changes from previous username commits
    Check username for uniqueness
    
    Includes code review changes from previous username commits
    Create a directory for tools at the same level as the oppia root dir, and put all files unneeded at runtime into it. Also, reduce startup latency by loading only the welcome exploration by default, instead of all of them.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Import user_services using registry.
    Start moving repository methods to the services files so that domain objects can become plain python objects.
    Major refactoring to make the statistics model more concrete and use domain concepts from the exploration and state models. Remove the feedback controller and replace it with a link to the bug tracker and groups page. Restrict the unresolved answers feature to be used only with the default rule of a state.
    Remove unneeded admin functionality.
    Move domain-related files to their own folder in the repository.
    Use module-level imports. Avoid aliasing module names where possible.
    Move user-related methods (which are GAE-dependent) into a single file.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Separate the exploration model into a domain object class and a storage class.
    Finish moving stuff out of the exploration model class.
    Remove direct dependencies from the controllers and other modules on the Exploration storage model so that it is easily swappable. The Exploration storage model is now imported only by the exploration services and test files.
    Restructuring the view directories more intuitively.
    Moving models/ to apps/ in preparation for the migration to django non-rel
    Use json.dumps() and JSON.parse() to pass parameters to widgets safely.
    Refactoring and adding validation to the Exploration model.
    Add an admin handler that allows reloading of the default explorations. Move the methods in controller_utils.py to the respective models/controllers.
    Add a feedback handler to Oppia.
    Improve navigation to the gallery page. Serve YUI locally.
    Restructuring the widget models so that widgets are only loaded once from files and thereafter stored in the datastore.
    Removing yaml_utils.py and moving its methods to the relevant places in the layered architecture.
    Separating the state transition logic from the rest of the handler.
    Lint most python files
    Simplify self.response.out.write to self.response.write. Store the Jinja2 environment as a cached property.
    Continue tidying up pages.py.
    More tweaks to the About page.
    Cosmetic revisions to the code for simple pages.
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Minor fixes and title changes
    Adding the musical exploration as a default exploration
    Restructuring JS files, and adding caching headers to static content.
    Make YAML editing work.
    Moving sample classifiers, explorations and widgets to a separate directory.
    Moving to PEP-8 method name styles (method_name rather than MethodName)
    Move exploration, state and parameter models into separate files.
    Continuing to replace the old input_view/action_set infrastructure with the new interactive_widget/interactive_ruleset infrastructure. WARNING: The present commit leaves Oppia in a broken state.
    Move models to a separate folder.
    Linting all Python files to use the PEP-8 4-space-indentation standard.
    Moving controllers to a separate folder
    Adding files missed in previous commit
    Split about page into two. Minor linting fixes.
    Remove obsolete admin page config properties. Restructure config properties to use schemas.
    Add demo 'About' exploration.
    Merge sidebar/navbar changes.
    Address Amit's comments from release testing.
    
    1) Rework the 'Compare revisions' button and surrounding text in the exploration history tab.
    2) Make button layout more consistent across the editor and gallery pages.
    3) Remove header on forum page.
    4) Right-align 'Create New Exploration' button in gallery with the individual gallery tiles.
    5) Remove some text in the 'publish exploration' modal.
    Add a forum page to the site.
    Combine the splash and dashboard page controllers into a common homepage controller.
    Share the 'Create Exploration' button between the dashboard and contribute gallery pages.
    Introduce a new user dashboard page.
    Minor lint fixes, mostly to the controller layer.
    Resolving merge problem.
    Pass MODERATOR_REQUEST_FORUM_URL value to site guidelines page.
    wording changes for release policy page
    Create a new site guidelines page and clarify some of the wording.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Allow the splash page exploration version to be set as a config property.
    Allow the admin to configure the id for the sample exploration on the splash page. Make the link to the gallery more prominent.
    Replace the images on the splash page with generic ones.
    Add links to Yana's exploration design tips. Merge the About and License pages.
    Add a Contributor gallery. Update URL routing. Make other small UI tweaks.
    Implement admin and moderator rights management.
    Minor UI changes, including fixing wording on About page, adding a 'Beta' subtitle, and making the widget preview less opaque.
    Revise the wording for the static pages.
    Tighten up the implementation of user settings and rights.
    Add a check for non-existent explorations in the page that displays a random exploration.
    Lint the codebase.
    Resurrected welcome exploration and added explore link from splash screen to gallery.
    Replacing the welcome page with a splash page.
    Resurrected welcome exploration and added explore link from splash screen to gallery.
    Replacing the welcome page with a splash page.
    Replacing the welcome page with a splash page.
    Replacing the welcome page with a splash page.
    Check username for uniqueness
    
    Includes code review changes from previous username commits
    Check username for uniqueness
    
    Includes code review changes from previous username commits
    Create a directory for tools at the same level as the oppia root dir, and put all files unneeded at runtime into it. Also, reduce startup latency by loading only the welcome exploration by default, instead of all of them.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Import user_services using registry.
    Start moving repository methods to the services files so that domain objects can become plain python objects.
    Major refactoring to make the statistics model more concrete and use domain concepts from the exploration and state models. Remove the feedback controller and replace it with a link to the bug tracker and groups page. Restrict the unresolved answers feature to be used only with the default rule of a state.
    Remove unneeded admin functionality.
    Move domain-related files to their own folder in the repository.
    Use module-level imports. Avoid aliasing module names where possible.
    Move user-related methods (which are GAE-dependent) into a single file.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Separate the exploration model into a domain object class and a storage class.
    Finish moving stuff out of the exploration model class.
    Remove direct dependencies from the controllers and other modules on the Exploration storage model so that it is easily swappable. The Exploration storage model is now imported only by the exploration services and test files.
    Restructuring the view directories more intuitively.
    Moving models/ to apps/ in preparation for the migration to django non-rel
    Use json.dumps() and JSON.parse() to pass parameters to widgets safely.
    Refactoring and adding validation to the Exploration model.
    Add an admin handler that allows reloading of the default explorations. Move the methods in controller_utils.py to the respective models/controllers.
    Add a feedback handler to Oppia.
    Improve navigation to the gallery page. Serve YUI locally.
    Restructuring the widget models so that widgets are only loaded once from files and thereafter stored in the datastore.
    Removing yaml_utils.py and moving its methods to the relevant places in the layered architecture.
    Separating the state transition logic from the rest of the handler.
    Lint most python files
    Simplify self.response.out.write to self.response.write. Store the Jinja2 environment as a cached property.
    Continue tidying up pages.py.
    More tweaks to the About page.
    Cosmetic revisions to the code for simple pages.
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Minor fixes and title changes
    Adding the musical exploration as a default exploration
    Restructuring JS files, and adding caching headers to static content.
    Make YAML editing work.
    Moving sample classifiers, explorations and widgets to a separate directory.
    Moving to PEP-8 method name styles (method_name rather than MethodName)
    Move exploration, state and parameter models into separate files.
    Continuing to replace the old input_view/action_set infrastructure with the new interactive_widget/interactive_ruleset infrastructure. WARNING: The present commit leaves Oppia in a broken state.
    Move models to a separate folder.
    Linting all Python files to use the PEP-8 4-space-indentation standard.
    Moving controllers to a separate folder
    Adding files missed in previous commit
    Update text on About and Gallery pages.
    Fix broken test. Add test for validating config property schemas.
    Remove obsolete admin page config properties. Restructure config properties to use schemas.
    Remove the 'widget_sticky' setting.
    Update tests.
    Allow users to leave the signup page mid-way through signup, logging them out if they do so.
    Make signing in required if the user is logged in but has not chosen a username.
    Merge the gallery page and the splash page.
    Fix lots of small bugs.
    
    (1) In the MusicNotesInput widget, rename 'play desired sequence' to 'play target sequence'.
    (2) In NumericInput view for the learner's input, do not show integers as floats.
    (3) In the TextInput widget, improve the description of the 'rows' field.
    (4) Rename Code REPL widget to 'Code input'.
    (5) In the MusicNotesInput widget, change the 'Add Note' button to make it clear what type of note is being referred to (a music note, not a comment).
    (6) Rename 'Tutorial' to 'Walkthrough' (the former sounds like 'manual').
    (7) Disable 'look inside' functionality in preview mode.
    (8) Add Amy's name to credits.
    (9) Show edit buttons in gallery for moderators (issue 373).
    (10) Fix broken loading when the history tab in the exploration editor is shown on initial load.
    (11) Fix the broken revert modal in history tab (the link to try out the old version did not work).
    (12) Move the 'create' button nearer to the 'add new state' input field.
    (13) Move the learner answer div styling to a common location in the conversation skin view.
    (14) Allow states defined in rules to use '.' (issue 166).
    (15) Add moderator page to profile menu (issue 374).
    Use more unicode strings in tests. COnsolidate common strings.
    Consolidate the three galleries into a single public one.
    Share the 'Create Exploration' button between the dashboard and contribute gallery pages.
    Introduce a new user dashboard page.
    Minor lint fixes, mostly to the controller layer.
    Remove all traces of the old feedback models.
    Add a test for feedback migration.
    Resolving merge problem.
    Continue the Bootstrap 3 upgrade.
    In tests, change is_admin to is_super_admin to avoid confusion.
    Add functionality for banning editors.
    Remove the Django port of Oppia from the codebase.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Add moderator role display in the top-right of each page (for moderators).
    Add more controller tests.
    Change the editor page warning message to an announcement and make it HTML.
    Allow configuration properties to be edited in the admin UI.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Moving models/ to apps/ in preparation for the migration to django non-rel
    Add missing files from previous commit
    Moving controllers to a separate folder
    Initial commit.
    Split the dashboard into two different pages.
    Remove obsolete admin page config properties. Restructure config properties to use schemas.
    Redesign the gallery page.
    
    Still TODO:
    (a) Fix integration test for language and category selection.
    (b) Check if paging is needed for the no-query case.
    (c) Implement carousel.
    Allow users to leave the signup page mid-way through signup, logging them out if they do so.
    Make signing in required if the user is logged in but has not chosen a username.
    Address review comments.
    
    (1) Add proper tooltips to icons in navbar.
    (2) Reduce size of top-left Oppia icon to 40px height.
    (3) Change box-shadow of right sidebar to follow material design spec.
    (4) Standardize horizontal and vertical offsets of the titles of the various tabs.
    Merge the gallery page and the splash page.
    Make the gallery page the homepage. Remove unused CSS rules. Update integration tests.
    Merge sidebar/navbar changes.
    Fix broken backend test.
    Make small amendments to the navbar and the exploration editor header.
    Use more unicode strings in tests. COnsolidate common strings.
    Add a 'last updated' time to the user dashboard recent updates table.
    Address more review comments. In particular, fix an error where anonymous feedback threads were not being handled correctly in the dashboard display.
    Add a 'most recent updates' section to the user dashboard.
    Consolidate the three galleries into a single public one.
    Modify the dashboard view to show private, beta and released explorations.
    Combine the splash and dashboard page controllers into a common homepage controller.
    Share the 'Create Exploration' button between the dashboard and contribute gallery pages.
    Introduce a new user dashboard page.
    Minor lint fixes, mostly to the controller layer.
    Remove state names from the profile page. Fix a broken test.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Always show the Contribute tab in the navbar.
    Allow the admin to configure the id for the sample exploration on the splash page. Make the link to the gallery more prominent.
    Add more controller tests.
    Minor fixes for login/logout buttons. Remove unused images.
    Revise the wording for the static pages.
    Rework the splash page.
    Resurrected welcome exploration and added explore link from splash screen to gallery.
    Fixed the default page test.
    Resurrected welcome exploration and added explore link from splash screen to gallery.
    Fixed the default page test.
    Allow the running of individual tests and test classes. Allow the categorization of tests as slow so that they can be omitted using a command-line flag if desired.
    Add test suite for django to automatically discover and run tests. Add platform switching to tests.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    CSS change to work on Firefox too. Fix a test.
    Reduce height of interactive widget display. Remove a line from tests.
    Fixes to the main page.
    Fix a test
    Changing the default exploration and the formatting of the homepage.
    Separating the state transition logic from the rest of the handler.
    Restructure tests, so that each module has its own test file.
    Split about page into two. Minor linting fixes.
    Remove obsolete admin page config properties. Restructure config properties to use schemas.
    Show user profile image as learner icon
    Show the profile picture on all pages.
    Partially working profile picture upload
    Allow users to leave the signup page mid-way through signup, logging them out if they do so.
    Restyle signup page.
    Make signing in required if the user is logged in but has not chosen a username.
    Use the user's preferred languages in the gallery. Create an editable preference page and a viewable profile page.
    Restyle the profile page. Allow incremental saving. Use language codes instead of languages.
    Make language selection work properly on the profile page
    Save bio to user_settings and load existing bio into profile
    Lint fixes.
    Refactor admin page to use new schema-based forms.
    Introduce a new user dashboard page.
    UX improvements for the editor prerequisites page.
    
    1. Remove some of the descriptive text.
    2. Make errors more immediate.
    3. Prevent form submission if it won't be accepted anyway.
    Remove all traces of the old feedback models.
    first pass of listing user's feedback on profile page.
    No tests yet, no actual display on page, but data should be getting returned.
    first pass of listing user's feedback on profile page.
    No tests yet, no actual display on page, but data should be getting returned.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Add a Contributor gallery. Update URL routing. Make other small UI tweaks.
    Implement the necessary queries for the gallery and profile pages.
    Minor UI changes, including fixing wording on About page, adding a 'Beta' subtitle, and making the widget preview less opaque.
    Revise the wording for the static pages.
    Add config properties for editor prerequisites page.
    Tighten up the implementation of user settings and rights.
    Standardize the reader URL mapping and also standardize the way JSON interactions are handled in all the server-side integration tests.
    Use actual user_ids instead of email addresses. Require the user to pick a valid username that would appear in the commit logs.
    Lint the codebase.
    Add tests for editor prerequisites page.
    Add an editor prerequisites page with information about the CC0 license.
    Redirect on successful username save
    Checking username to be only alphanumeric characters
    Check username for uniqueness
    
    Includes code review changes from previous username commits
    Refactoring username setting into a proper domain
    Requires a username for editors and adds a path to create them
    Check username for uniqueness
    
    Includes code review changes from previous username commits
    Refactoring username setting into a proper domain
    Requires a username for editors and adds a path to create them
    Remove the image storage model. Move image file uploading to use the file system storage model.
    Add a 'create new exploration' button to the profile page.
    Requires a username for editors and adds a path to create them
    Requires a username for editors and adds a path to create them
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Import user_services using registry.
    Add lots more tests for the statistics models.
    Minor clarifications to get_top_ten_improvable_states().
    Move domain-related files to their own folder in the repository.
    Use module-level imports. Avoid aliasing module names where possible.
    Move user-related methods (which are GAE-dependent) into a single file.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Add delete_all_explorations() method and use it in tests. Fix a bug in profile.py where self.user was used instead of self.user_id.
    Pull statistics functions out into a services file.
    Remove unneeded methods from exploration/models.py
    Add missing decorator annotation.
    Add missing decorator.
    Add the current user as an attribute of each request handler. Simplify the logic for the gallery controller.
    Adding "My Explorations" to the profile page
    Creating a profile page with improvable states
    Restructuring the view directories more intuitively.
    Moving models/ to apps/ in preparation for the migration to django non-rel
    Use json.dumps() and JSON.parse() to pass parameters to widgets safely.
    Refactoring and adding validation to the Exploration model.
    Add an admin handler that allows reloading of the default explorations. Move the methods in controller_utils.py to the respective models/controllers.
    Add a feedback handler to Oppia.
    Improve navigation to the gallery page. Serve YUI locally.
    Restructuring the widget models so that widgets are only loaded once from files and thereafter stored in the datastore.
    Removing yaml_utils.py and moving its methods to the relevant places in the layered architecture.
    Separating the state transition logic from the rest of the handler.
    Lint most python files
    Simplify self.response.out.write to self.response.write. Store the Jinja2 environment as a cached property.
    Continue tidying up pages.py.
    More tweaks to the About page.
    Cosmetic revisions to the code for simple pages.
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Minor fixes and title changes
    Adding the musical exploration as a default exploration
    Restructuring JS files, and adding caching headers to static content.
    Make YAML editing work.
    Moving sample classifiers, explorations and widgets to a separate directory.
    Moving to PEP-8 method name styles (method_name rather than MethodName)
    Move exploration, state and parameter models into separate files.
    Continuing to replace the old input_view/action_set infrastructure with the new interactive_widget/interactive_ruleset infrastructure. WARNING: The present commit leaves Oppia in a broken state.
    Move models to a separate folder.
    Linting all Python files to use the PEP-8 4-space-indentation standard.
    Moving controllers to a separate folder
    Adding files missed in previous commit
    Require the user to explicitly select the interaction for each state.
    Remove the 'widget_sticky' setting.
    Fix jittering when moving from the editor tab to the preview tab. Update tests.
    Make signing in required if the user is logged in but has not chosen a username.
    Complete the deprecation of 'widget'.
    Remove more unneeded code for server-side parameter evaluation.
    Additional modifications to address review comments
    Changes to state diff modal layout, add export exploration data by state
    and display state data in codemirror
    Resolving comments.
    Add versioned statistics aggregation and allow different versions to be viewed from stats page
    reolving comments.
    Lint fixes.
    Break the state transition handler into multiple handlers, similar to what is done in editor preview mode.
    Further UI improvements to the state content and interaction editors. Change the default initial state name.
    Allow states to be added in the frontend without requiring a backend RPC.
    Fix broken test.
    Reinstate test for viewer permissions
    Remove 'add user by email' functionality
    Made changes as per Sean's comments, also fixed ExplorationEditor.js which was broken during a previous sync.
    Feature request for adding roles to explorations using usernames(issue 286), will put beautification of html in a different commit.
    
    Conflicts:
            core/templates/dev/head/editor/ExplorationEditor.js
    Reinstate test for viewer permissions
    Remove 'add user by email' functionality
    Use more unicode strings in tests. COnsolidate common strings.
    Made changes as per Sean's comments, also fixed ExplorationEditor.js which was broken during a previous sync.
    Feature request for adding roles to explorations using usernames(issue 286), will put beautification of html in a different commit.
    Move more of the reader feedback handler logic to the frontend.
    In the learner view, load the entire exploration at the outset, and move the construction of the interactive widget HTML tags to the frontend.
    Consolidate the three galleries into a single public one.
    Add backend tests for JSON download
    Remove SLOW_TAGS option, migrate other options so that they can be used directly in test.sh, and refactor scripts/backend_tests.py for clarity.
    When a computation is stopped, cancel the current batch job. In the admin dashboard, do not show a cancel button for batch jobs related to continuous computations.
    Migrate the existing StatsPageJobManager to use the new continuous computations framework.
    Remove the listener registration from event handlers and replace it with a more explicit ContinuousComputation dispatcher registry that is generated on event dequeue. In the earlier system, listeners were dynamically added to event handlers using a class attribute, and that made it hard to reason about the lifecycle and to avoid duplicate registrations.
    Minor lint fixes, mostly to the controller layer.
    lots of little linter-type fixes
    Cleaning up the calls to models and tests
    Route reader-submitted feedback to the new feedback system, and remove the frontend for the old feedback system.
    Implement world-viewable exploration editor pages.
    Resolving merge problem.
    Open zip file in binary mode
    Further improvements of some editor tests (addressing code review).
    Improved editor integration tests (addressing code review)
    Improved integration tests for reverting to old version and for resolving feedback.
    Added simple integration tests for reverting to old exploration and for resolving feedback
    Very small improvement of integration test for exploration rights handler.
    Improved editor integration test for exploration rights handler.
    Added editor integration test for exploration rights handler.
    Improve the UI for displaying objectives (and the warning to specify them if they aren't specified yet). Add objectives to existing demo explorations.
    Style improvements for download integration tests.
    Improved integration test of download handler.
    Added integration test for download handler.
    Download test is running now, but not really testing anything yet.
    Changed ExplorationDownloadIntegrationTest, still not working.
    Attempt to write ExplorationDownloadIntegrationTest, does not work yet.
    Changed ExplorationDownloadIntegrationTest, still not working.
    Attempt to write ExplorationDownloadIntegrationTest, does not work yet.
    Move exploration metadata and version history to separate tabs, and add more documentation to the UI.
    Housekeeping changes: remove unneeded block_number, normalize reader answers prior to processing them, do not fail if the stats answer logs overflow (issue 139), make warmup handler not throw 404s.
    In tests, change is_admin to is_super_admin to avoid confusion.
    Add functionality for banning editors.
    Remove the Django port of Oppia from the codebase.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Address some, but not all, of the failing Django tests.
    Allow old versions of explorations to be linked to.
    Add a Contributor gallery. Update URL routing. Make other small UI tweaks.
    Implement admin and moderator rights management.
    Improve the way exploration creation and saving is handled in the backend. Require commit_cmds and commit_messages to be specified by default, where possible.
    Tighten up the implementation of user settings and rights.
    Implement generic versioned models that all storage classes can use.
    
    Also, for explorations, create a new version for every save action,
    rather than only after the exploration is published.
    Allow add and delete state operations to be done as part of a larger commit.
    Perform strict validation on the demo explorations and on published explorations.
    Remove the state model from the backend.
    
    Reasons:
    - It is confusing to keep track of two separate lifecycles for states
        and explorations.
    - The state name and state id were duplicate ways to identify a
        particular state.
    
    Side effects:
    - This change has resulted in an update to the YAML schema. The update is
        fully backward-compatible.
    - States are now identified in URLs and in analytics by their names
        rather than their ids.
    Standardize the reader URL mapping and also standardize the way JSON interactions are handled in all the server-side integration tests.
    Fully migrate explorations to use the rights manager.
    Use actual user_ids instead of email addresses. Require the user to pick a valid username that would appear in the commit logs.
    Lint the codebase.
    Fetch exploration statistics separately, so that the editor page loads faster.
    Add separate handler for exploration rights management. Rewire URL endpoints for the editor to avoid ambiguity. Add commit messages for adding and deleting states.
    Add some vertical spacing to the reader view.
    Add separate handler for exploration rights management. Rewire URL endpoints for the editor to avoid ambiguity. Add commit messages for adding and deleting states.
    Add some vertical spacing to the reader view.
    Move unresolved answers functionality to a separate handler.
    Add tests for more handlers in controllers.editor.
    Add rights management for deleting explorations. Only an admin can delete published explorations; only the owner and admins can delete unpublished ones.
    Remove the image storage model. Move image file uploading to use the file system storage model.
    Security fix: add XSSI protection.
    Security improvements.
    Streamline the way reader tests are written. Make some tests faster by not loading all explorations.
    Allow the running of individual tests and test classes. Allow the categorization of tests as slow so that they can be omitted using a command-line flag if desired.
    Add test suite for django to automatically discover and run tests. Add platform switching to tests.
    Use Route/RedirectRoute instead of route tuples to facilitate use of uri_for in templates.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Add integration test for statistics.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Restructure tests, so that each module has its own test file.
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Renaming rule files to have YAML suffixes. Adding normalizers.
    Adding tests for classifiers and using PEP-8 for the Python files.
    Make signing in required if the user is logged in but has not chosen a username.
    Use more unicode strings in tests. COnsolidate common strings.
    Minor lint fixes, mostly to the controller layer.
    If a user can edit an exploration, but has not yet registered as an editor, redirect them to the editor registration page.
    Remove the SHOW_FEEDBACK_TAB flag. Guard against non-logged-in users submitting new threads or messages.
    Add a list of recent feedback messages to the moderator page.
    Add an indicator to the feedback tab header of when the last feedback update was. Remove some unneeded scrolling behavior.
    Address several UI comments by Jacob.
    Add more controller-level tests for feedback threads.
    First round of tests for the feedback thread backend. Also consolidate some handlers.
    Merge sidebar/navbar changes.
    Move to the recommended Angular .controller syntax.
    
    This follows the recommendation in the list of breaking changes
    for Angular 1.3.0 described at
    
        https://github.com/angular/angular.js/blob/master/CHANGELOG.md#130-beta15-unbelievable-advancement-2014-07-11
    Create a separate controller for the exploration settings tab. Pull out more stuff from the exploration editor into standalone services, and group similar services under a base ExplorationPropertyService.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Redirect to the new test server.
    Pull the oppia embedding code out into a separate script and set up a messaging service to communicate between oppia and its embedding page.
    Introduce server-side validation of exploration and state names. Standardize the characters that can be used in these names.
    Streamlining parameter update logic a little more; removing some special cases. Work still needs to be done to make the template generation methods in widget_domain.py consistent with each other, and to figure out the order of, and when to do, Jinja substitution and JSONification.
    Add a generic backend simulator to the reader controller test player, so that it is easier to test playthroughs of the sample explorations.
    Clean up images folder.
    Split the dashboard into two different pages.
    Style the login button
    Include object editor code on every HTML template.
    Make rich-text component loading happen at the same time as the page load.
    Fix the navbar, hide exploration description and image on small screens
    Remove breadcrumb when window is narrow and keep the user icon on the right
    Remove noscript tag and add a logo for G+ snippets.
    Changed small aspects of navbar, carousel, and images.
    Redo scrolling behaviour.Ensure 'sign in' tab at top-right of page is clickable.
    Add drag-and-drop upload for images.
    Autofocus on input in signin page, remove profile link from top right menu
    Add a dropdown for signing in.
    1. Make splash page carousel scroll faster.
    2. Add 'Give Feedback' tab to sidebar.
    3. Remove 'Dashboard' tab from sidebar, and show notification counts in the top right instead.
    4. Vertically center splash page text.
    Show the profile picture on all pages.
    Partially working profile picture upload
    Update the user_white png image.
    Address additional review comments
    Move attribution guide to a common template, and move it out of the sidebar in the editor view.
    Address review comments
    Change username to default user icon
    Fixed more margin and spacing issues on the splash page.
    Changed order and removed border on user dropdown menu.
    Redesign the gallery page.
    
    Still TODO:
    (a) Fix integration test for language and category selection.
    (b) Check if paging is needed for the no-query case.
    (c) Implement carousel.
    Allow users to leave the signup page mid-way through signup, logging them out if they do so.
    Make signing in required if the user is logged in but has not chosen a username.
    Move 'About' and 'Forum' to the navbar. Add breadcrumbs on all pages.
    Use the user's preferred languages in the gallery. Create an editable preference page and a viewable profile page.
    Restyle the profile page. Allow incremental saving. Use language codes instead of languages.
    Change several instances of http to https. Simplify search query code slightly.
    Address comments
    Add schema.org metadata for sharing
    Fixed lint issues
    Changed CC attribution in explorations to be icon and small link, added anchor in About page to the license.
    Fix issue 549: dropdown menu roots are not highlighting correctly.
    Restyle the login/signup links.
    Add an outline of the new profile page.
    
    Note: this is just a skeleton, and is only marginally functional.
    Start redesigning the state editor.
    Protractor tests: Switch editor and player utilities to using protractor-specific classes where possible. Also remove some instances of 'widget'.
    Display the exploration title in the top navbar.
    Move local navigation in learner view to the navbar.
    Bring top-nav into base.html so that local top-nav blocks can be defined within it. (This is not possible for templates which are jinja-included.)
    Merge sidebar/navbar changes.
    Move to the new color scheme, and add Angela's logos.
    Resolving comments.
    reolving comments.
    Updated images, added horizontal separators, adjusted margins.
    Show notification counts in the navbar and page title, where appropriate. Highlight new updates in the dashboard. Fix a couple of bugs in the settings and history tabs where the exploration data was not being fully loaded before the tab was displayed.
    Tests for evaluateExpression.
    Turned expression parser and evaluator into angular services.
    Refactor base HTML page for clarity.
    Fix lots of small bugs.
    
    (1) In the MusicNotesInput widget, rename 'play desired sequence' to 'play target sequence'.
    (2) In NumericInput view for the learner's input, do not show integers as floats.
    (3) In the TextInput widget, improve the description of the 'rows' field.
    (4) Rename Code REPL widget to 'Code input'.
    (5) In the MusicNotesInput widget, change the 'Add Note' button to make it clear what type of note is being referred to (a music note, not a comment).
    (6) Rename 'Tutorial' to 'Walkthrough' (the former sounds like 'manual').
    (7) Disable 'look inside' functionality in preview mode.
    (8) Add Amy's name to credits.
    (9) Show edit buttons in gallery for moderators (issue 373).
    (10) Fix broken loading when the history tab in the exploration editor is shown on initial load.
    (11) Fix the broken revert modal in history tab (the link to try out the old version did not work).
    (12) Move the 'create' button nearer to the 'add new state' input field.
    (13) Move the learner answer div styling to a common location in the conversation skin view.
    (14) Allow states defined in rules to use '.' (issue 166).
    (15) Add moderator page to profile menu (issue 374).
    Add objective and language fields to the 'create exploration' form.
    Make small amendments to the navbar and the exploration editor header.
    Add a forum page to the site.
    Add metadata to prevent unnecessary log entries for browserconfig.xml and apple-touch-icon.png.
    UI fixes for the gallery page:
    
    (1) Hide the edit buttons in mobile view.
    (2) Animate the left nav (this is not yet working fully correctly, though).
    (3) Fix issue with top navbar dropdowns not behaving correctly in mobile view.
    Consolidate the three galleries into a single public one.
    Move HTML editor code to the schema-based editor files.
    Remove uniquify post_normalizer and replace it with frontend and backend validators.
    Parameter widget icon and fix for nav_mode setting.
    Add a system for handling dependencies of widgets that include additional angular modules.
    Param widget: addressed review comments.
    Do not load new object editor directives in the main templates until the whole object editing framework is ready.
    Add normalizers framework. Add frontend HTML code and tests for schema-based editors.
    Frontend UI fixes to the state editor.
    Resolving merge problem.
    Continue the Bootstrap 3 upgrade.
    First pass at upgrading to Bootstrap 3.
    Various small fixes based on release testing:
    
    * add playtest link to site footer
    * add link to the playtest queue from the Learn Gallery page
    * make minimap graph pannable
    * make "Add new state" field not have a red error box around it
    * rewrote the Welcome demo exploration to use the noninteractive-widget
    links
    * fix wording for exploration counts on the profile page
    Create a new site guidelines page and clarify some of the wording.
    Add a new gallery for playtesting.
    Move the help links to a Help tab in the navbar.
    Remove the 'center' tag, which is deprecated in HTML5.
    Add some ARIA roles to the reader page.
    Make logging more silent in production.
    Move iframe resizing logic to be used only in the reader view. Allow the height of the iframe to be reduced on exploration reset.
    Always show the Contribute tab in the navbar.
    Add instructions for users who have JavaScript disabled.
    Add moderator role display in the top-right of each page (for moderators).
    Refine rights management for moderators, admins and super admins.
    Make clear that the attribution file is in plaintext.
    Add licensing information to the individual exploration pages.
    Add a end-of-head-tag code hook.
    Replace the images on the splash page with generic ones.
    CSS tweaks. Add licensing reminder in image upload modal.
    Add more controller tests.
    Make the navbar responsive.
    Add links to Yana's exploration design tips. Merge the About and License pages.
    Add a Contributor gallery. Update URL routing. Make other small UI tweaks.
    Minor fixes for login/logout buttons. Remove unused images.
    Added cartoon, changed content to be less FOSSy
    Added logo
    Fixed merge issues, made beta more terse
    Design changes
    Allow owners, collaborators and playtesters of explorations to be set.
    Minor UI changes, including fixing wording on About page, adding a 'Beta' subtitle, and making the widget preview less opaque.
    Revise the wording for the static pages.
    Improve the way exploration creation and saving is handled in the backend. Require commit_cmds and commit_messages to be specified by default, where possible.
    Tighten up the implementation of user settings and rights.
    Add interstitial loading pages.
    Add a noninteractive LaTex-display widget.
    Change the editor page warning message to an announcement and make it HTML.
    Separate the select2 and RTE directives.
    Pull the oppia embedding code out into a separate script and set up a messaging service to communicate between oppia and its embedding page.
    Do not require the outer window to message the iframed exploration, due to cross-domain issues.
    Add more messaging to the exploration feedback modal. Move the general feedback page (that was linked from the navbar) to a 'contact us' page linked from the footer.
    Create a safe RTE component directive. Add RTE functionality using jWysiwyg to the rule feedback editor.
    Fix bug where admin link was a relative URL. Fix scoping error in textinput widget.
    Minor modifications to the file input widget and the third-party install script.
    Add links to admin page in the main UI.
    Allow escaping of dollar signsso that they are not automatically LaTeXified.
    Add config property model and CSRF protection.
    Introduce server-side validation of exploration and state names. Standardize the characters that can be used in these names.
    Move core JS files to the frontend root so that they are more easily discoverable.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move reusable directives to the components/ folder.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Further fine-tuning of the navbar.
    Add 'My Explorations' tab to navbar.
    Pretty-ing up the profile page
    Creating a profile page with improvable states
    Reorganize frontend JS files, partitioning them into 'apps'.
    1. Make a proper responsive navbar, using a customized version of the Bootstrap lib. 2. Fix a bug where the state name was not displaying on the state editor page.
    Restructuring the view directories more intuitively.
    Move libs that are only needed by the exploration editor into the exploration editor HTML.
    Specify only needed JS files in each template view.
    Moving to the Google charts API
    Stop MathJax 'loading' messages from displaying.
    Add autoescaping.
    Really fix the footer
    Fix footer positioning
    Adding images to sample explorations. Rejigging CSS for gallery page.
    Minor CSS changes to the gallery page.
    Do not use the default exploration as one of the random choices for 'Launch a random exploration'. Minor CSS fixes.
    Changes to the UI
    Add a feedback handler to Oppia.
    Display a user's role in the navbar.
    Minor fixes the the main page and the rich text editor.
    Serve libs from third_party/static instead of resources/.
    Move select2 dependency to be handled directly in app.yaml
    Adding MathJax support.
    Adding titles to pages.
    Improving form validation on the gallery page, making the warning butterbar display more prominent, and limiting the number of warnings shown.
    Moving existing widgets to use the static/ directory.
    Introducing a postMessage framework for interactive widgets
    Restructuring JS files, and adding caching headers to static content.
    Move lib-serving code into resources.LibHandler
    Bundle JS and CSS header libs into single files for speed.
    Add  dependency to handle Explorations (and later States).
    Populate the interactive widget repository iframe. Remove wysihtml5.
    Rename 'mode' to 'nav_mode'.
    Merge the reader and editor main pages into a single gallery page
    Adding wysihtml5 library, exporting PYTHONPATH variable and making a tweak to the editor home page.
    Removing jsPlumb library and fixing the 'add state' behavior on the exploration page
    Make the footer go to the bottom of the page for short pages
    Add terms page
    Add an 'About Oppia' page
    Streamlining warnings behaviour
    Add d3.js library
    Minor renaming. Also removed link from end of finished.html, since we don't want it to display in iframed mode.
    Experiment with displaying state data as YAML, and updating image, video and widget behavior in the editor UI.
    Making third-party files internal and inserting them into the startup shell script.
    Renaming standard and output directories to dev and prod respectively.
    Removing _new suffix from new file names
    Removing old files
    Transitioning existing Oppia classes and pages to the new structure
    Implement the editor index page.
    Make the index page spiffy. Add login functionality to editor views and display the login/logout status in the navbar.
    Adding an index page, and simplifying some of the backend logic
    making the nav bar work at any browser width
    Adding stuff to the navbar
    Adding Bootstrap library support
    Creating a new set of HTML, JS and CSS files for a redesigned Oppia frontend
    Redesign the editor rules interface. Also make the behavior of the 'save changes' button more responsive.
    Add frontend services to cache the widget repositories. Adjust noninteractive widgets so that they work with the new customization args.
    Refactor the state interactive widget frontend code.
    
    In particular:
    
    1) Move the tag construction for the widget preview to the frontend.
    2) Introduce new state property services for the widget attributes.
    Add tests for filters.
    Create a separate controller for the exploration settings tab. Pull out more stuff from the exploration editor into standalone services, and group similar services under a base ExplorationPropertyService.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Refactor the rule modal to separate it more cleanly from its container.
    Finish addressing issue 21: add information about incoming links to a state.
    Move core JS files to the frontend root so that they are more easily discoverable.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Propagate the use of the terms 'rule_specs' and 'description' to the frontend.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Add tests for filters
    Upgrade angular version to 1.3.13 to fix bug in ngAnimate.
    Implemented paging with latest version of develop
    Upgrade Angular to v1.3.0-rc.5 and jQuery to v2.1.1.
    Turned expression parser and evaluator into angular services.
    Expression validator for schema based editor.
    UI fixes for the gallery page:
    
    (1) Hide the edit buttons in mobile view.
    (2) Animate the left nav (this is not yet working fully correctly, though).
    (3) Fix issue with top navbar dropdowns not behaving correctly in mobile view.
    Move HTML editor code to the schema-based editor files.
    Change the editor page warning message to an announcement and make it HTML.
    Replace the link control in jwysiwyg with a safer one.
    Update to AngularJS 1.2.0-rc.3.
    Update to AngularJS 1.2.0-rc.3.
    Add fairly strict HTML sanitization for rich-text-editor content.
    Convert parameter change editor dropdown to use the new reusable select2 component. Remove the old angular-ui dependency.
    Create a safe RTE component directive. Add RTE functionality using jWysiwyg to the rule feedback editor.
    Upgrade Angular to 1.2.0-rc.2. Change modal callsites to buttons instead of links, and add contextual escaping using  where needed. Add a separate page for 404 errors.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Update angularjs version to 1.0.7
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Move libs that are only needed by the exploration editor into the exploration editor HTML.
    Minor fixes the the main page and the rich text editor.
    Improve navigation to the gallery page. Serve YUI locally.
    Serve libs from third_party/static instead of resources/.
    Make rich-text component loading happen at the same time as the page load.
    Add drag-and-drop upload functionality for image RTE extension. Also add validation.
    Consolidate retrieval of interaction registry, and make it happen during page load.
    Include ngImgCrop library
    Replace intro-js with ng-joyride -- the former was leading to a buggy editor tutorial.
    Set focus automatically for NumericInput and TextInput interactions.
    Add a carousel to the splash page.
    Implemented paging with latest version of develop
    Migrate the backend widget registries and the controllers.
    First half of the work needed to rename widgets to interactions/rich-text-components.
    Add language selection functionality to the gallery.
    Modified numeric, text, continue, coderepl and graph input to use material design
    Remove material design libraries for the 1.2.12 release.
    Add bower-material and hammer.js dependencies.
    Add a search field to the gallery.
    Use a different method to pass the rule input_type to the frontend.
    Break the state transition handler into multiple handlers, similar to what is done in editor preview mode.
    Fix 'can rename state to END' bug in state editor.
    Small usability/bug fixes.
    
    (1) Use different symbol for 'Look inside' button.
    (2) Make feedback links go to the exploration editor feedback tab.
    (3) Clarify exploration permissions.
    (4) In integration tests, clear the RTE before appending content.
    (5) Fix timestamps in moderator page.
    Simplify the widget customization interface.
    Move skin templates into directives. This is in preparation for allowing preview mode in the editor view -- we can then load all of these templates in the editor view at the outset and invoke them with HTML tags when necessary.
    Completely refactor the state graph to use a template. In the process, fix a couple of bugs involving SVG defs not working in Firefox.
    Use abbreviated datetime for dashboard frontend. Remove unused method.
    UI fixes for the gallery page:
    
    (1) Hide the edit buttons in mobile view.
    (2) Animate the left nav (this is not yet working fully correctly, though).
    (3) Fix issue with top navbar dropdowns not behaving correctly in mobile view.
    Add a mock to give a specific date in tests.
    Load all interactive widgets when the page loads to minimize the number of RPCs required. Also, show the preview tab in the interactive widget editor accordion when the widget id is changed.
    Add frontend services to cache the widget repositories. Adjust noninteractive widgets so that they work with the new customization args.
    Renaming oppiaDateFormatter factory and related methods to DatetimeFormatter
    Remove oppiaRequestCreator and replace it with an HTTP request interceptor.
    Add an Object.create() polyfill for IE8. We use Object.create() in editor/EditorServices.js.
    Consolidate error handling boilerplate.
    
    Also:
    
    (a) Have a friendlier 404 error page.
    (b) Remove unused route from app.yaml.
    (c) Add a robots.txt file.
    IE8 does not support String.prototype.trim(), so we have to manually add it (this is causing frontend errors).
    resolving comments.
    Feature request to show time instead of date when date is current date.
    Address review comments.
    Add a system for handling dependencies of widgets that include additional angular modules.
    More bug fixes.
    
    1) Fix a JSON-encoding bug where numeric 0 values were not being accepted for encoding prior to being passed to the backend.
    2) Remove $scope.$apply() error from the rich text editor.
    3) Ensure that, if an exploration is being edited and a download link is clicked, a 'beforeunload' confirmation dialog does not pop up (since the user isn't moving to another window).
    Fixes for issues discovered during release testing and a few others.
    
    1. Add docstring for video id in the noninteractive video widget.
    2. Some $scope.$apply() calls are throwing errors in the frontend, and this is causing things like the code widget to fail silently (the 'Run' button never turns on). Add logging of frontend errors to the backend so that we can detect and fix these.
    3. Update ui-codemirror to a newer version in order to fix a $scope.$apply() error in the ui-codemirror library.
    4. Make images for options in multiple-choice questions smaller so that they don't overwhelm the rule editor.
    Remove HTML construction in JS and use directive templates instead. Address review comments.
    Add normalizers framework. Add frontend HTML code and tests for schema-based editors.
    Set default headers for POST and PUT requests from the frontend.
    Implement sortable rules.
    Tidy up the player services API. Add tests for the timer service.
    Add an indicator to the feedback tab header of when the last feedback update was. Remove some unneeded scrolling behavior.
    Fix small minification error in three directives. Remove a superfluous directive.
    Various bug fixes: (a) fix a minification issue, (b) ensure that lists are editable by default, (c) make the jwysiwyg rich-text editor responsive.
    Frontend UI fixes to the state editor.
    Review fixes.
    Improve the UI for displaying objectives (and the warning to specify them if they aren't specified yet). Add objectives to existing demo explorations.
    Address review comments.
    Create a separate controller for the exploration settings tab. Pull out more stuff from the exploration editor into standalone services, and group similar services under a base ExplorationPropertyService.
    Represent the playtest gallery as a flat list. Remove subtitle from the learn gallery.
    Introduce a service that supplies controllers with the name of the currently-active state.
    Remove the Django port of Oppia from the codebase.
    Convert interactive widgets to Angular directives.
    
    This has the following advantages:
    (a) speed: the interactive widgets now load faster because there is no
    need for a second request to the server to populate the iframe.
    (b) no more monkeying around with the parent container to handle iframe
    height changes
    (c) less boilerplate is needed for each individual widget
    (d) there is no need to reload JS libraries separately for the widget,
    since these libraries will have already been included in the container page.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Properly minify the  delegator.
    Make logging more silent in production.
    Make JS files compatible with minification.
    Reinstate the noninteractive image widget. This commit provides a filepicker; the upload feature will be added in a future commit.
    Move the request creator to a factory method on the main app, since it is used everywhere.
    Add an HTML conversion service. Correctly persist parameter values in noninteractive widget tags.
    Move the request creator to a factory method on the main app, since it is used everywhere.
    Add an HTML conversion service. Correctly persist parameter values in noninteractive widget tags.
    Convert parameter change editor dropdown to use the new reusable select2 component. Remove the old angular-ui dependency.
    Remove dependency on ngRoute and simplify the routing code in the editor view. This turns out to have the nice side-effect of making the exploration editor page load a lot faster :-)
    Use ui-bootstrap tooltips throughout, except in modals generated in JS (this will come later). The aim is to remove the old angular-ui dependency.
    Improve frontend modal code using ui.bootstrap.
    Upgrade Angular to 1.2.0-rc.2. Change modal callsites to buttons instead of links, and add contextual escaping using  where needed. Add a separate page for 404 errors.
    Move core JS files to the frontend root so that they are more easily discoverable.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Reorganize frontend JS files, partitioning them into 'apps'.
    Restructuring the view directories more intuitively.
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Restructuring JS files, and adding caching headers to static content.
    Add file missed by accident in previous commit.
    Make list, int and nonnegative-int editors use schema-based forms. Fix display of rules for interactive map.
    Add validation for rules and interaction customizations.
    Restyle the rule editor to use tabs.
    
    Remaining TODOs:
    - Fix the 'add rule' flow.
    - Remove isTmpRule, cancelEdit and protractor-test-temporary-rule.
    - Add fixed bar at the top/bottom for rule destinations.
    - Fix weird sorting behaviour.
    Respond to review comments
    Handled duplicate labels in image with regions editor
    Show multiple-choice input as HTML in the rule description field.
    Change readonly rule display to a plain text string.
    Respond to review comments
    Changed graph representation in rule editor back to filler string
    Added read-only graph view to rules (replacing [Object object])
    Revert the change of removing markup from multiple-choice options.
    Remove truncation for rule description preview.
    Fix overflowing text in rule feedback and descriptions.
    Show HTML for the rule feedback, rather than text. Only strip markup from multiple-choice rules if the result is non-empty. Remove extra ellipsis.
    Fix several issues with multiple-choice rules:
    
    (a) Stop very long strings in multiple-choice buttons from overflowing.
    (b) Strip RTE tags from multiple-choice strings when displaying them.
    (c) Fix a typo that caused the index of the choice to be displayed rather than
        its text.
    Some small CSS fixes.
    Tweaked a lot of color, wording, and alignment issues in the exploration editor.
    Redesign the editor rules interface. Also make the behavior of the 'save changes' button more responsive.
    Add frontend services to cache the widget repositories. Adjust noninteractive widgets so that they work with the new customization args.
    Refactor the state interactive widget frontend code.
    
    In particular:
    
    1) Move the tag construction for the widget preview to the frontend.
    2) Introduce new state property services for the widget attributes.
    Fix rules for multiple-choice input to read correctly from the widget customization args.
    Add tests for filters.
    Add more frontend validation functionality.
    Create a separate controller for the exploration settings tab. Pull out more stuff from the exploration editor into standalone services, and group similar services under a base ExplorationPropertyService.
    Remove the rule editor modal and allow parts of a rule to be edited inline.
    Remove the rule editor modal and allow parts of a rule to be edited inline.
    Remove the rule editor modal and allow parts of a rule to be edited inline.
    Refactor the rule editor to remove duplicate HTML.
    Fix several music-input-related bugs.
    Support HTML in the choices for a multiple choice widget.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Refactor the rule modal to separate it more cleanly from its container.
    Complete the schema change that allows more flexible rule specifications (i.e. that allow Boolean combinators and classifying based on parameters).
    Remove interactiveParams from the widget preview frontend -- this duplicates data and causes confusion. Update the multiple-choice rule editor to use the new parameter specification.
    Fix issue 50: multiple choice answers were not being displayed correctly.
    Finish addressing issue 21: add information about incoming links to a state.
    Move core JS files to the frontend root so that they are more easily discoverable.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Make the state graph visualization into a reusable directive.
    Propagate the use of the terms 'rule_specs' and 'description' to the frontend.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Revert "First draft of classifying on arbitrary parameters instead of just answers."
    
    We will revisit this functionality later, because it's actually a substantial change with changes to how classifiers function
    
    This reverts commit 305a1b40b5e4f8f1f8f07ab3d26cd19fa9ebf4f8.
    First draft of classifying on arbitrary parameters instead of just answers.
    TODO: also display parameter name in classification description; fix substitution hack (looking for "Answer" and substituting with param choice)
    To ponder: does it still make sense to group rules into types of classifiers, and associate those with particular inputs/widgets?
    Since we could now be comparing to arbitrary parameters instead of answers.
    Or, should the comparison parameter choice happen on a per-classifier instead of per-rule basis? this would give less flexibility, but might make more sense with the classifier/rule breakdown.
    Add tests for filters
    Reorganize frontend JS files, partitioning them into 'apps'.
    Restructuring the view directories more intuitively.
    Move statistics to the exploration metadata tab.
    Add a warning to the editor UI when there are feedbackless self-loops. Use a refresh icon to indicate a self-loop. Fix the truncate filter to work with a feedback list.
    Change the format of the classifiers
    Refactor the State model. Introduce more implicit property validation.
    Add view interface for set input
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Allowing new states to be added from within other states.
    Making parameters work end-to-end for the music widget.
    Fix several issues: (1) Show multiple choice option text rather than just the index numbers in the editor rule dialogs, (2) make stats handler accept non-string default answers, (3) remove 'required' from multiple choice input widget, (4) reword 'create new exploration' modal text
    Improving the exploration creation flow on the gallery page.
    Restructuring JS files, and adding caching headers to static content.
    Change 'participation playbook' sidebar icon.
    Split about page into two. Minor linting fixes.
    Use a different icon for the forum link in the sidebar.
    Add config property for additional links in the sidebar menu. Complete work needed for config property for gallery carousel.
    Edited many margins, changed drag icon, added blog link, changed tutorial curtain.
    Minor changes to alignment and wording of various labels and buttons.
    Move state parameter changes editor to sidebar. Also, various minor wording changes.
    Changed a lot of margins, font sizes, etc.
    1. Make splash page carousel scroll faster.
    2. Add 'Give Feedback' tab to sidebar.
    3. Remove 'Dashboard' tab from sidebar, and show notification counts in the top right instead.
    4. Vertically center splash page text.
    Move 'About' and 'Forum' to the navbar. Add breadcrumbs on all pages.
    Move the username to be always on the top-right.
    Make the gallery page the homepage. Remove unused CSS rules. Update integration tests.
    Merge sidebar/navbar changes.
    Add drag-and-drop upload functionality for image RTE extension. Also add validation.
    Include ngImgCrop library
    Replace intro-js with ng-joyride -- the former was leading to a buggy editor tutorial.
    Upgrade angular version to 1.3.13 to fix bug in ngAnimate.
    Address review comments.
    
    (1) Add proper tooltips to icons in navbar.
    (2) Reduce size of top-left Oppia icon to 40px height.
    (3) Change box-shadow of right sidebar to follow material design spec.
    (4) Standardize horizontal and vertical offsets of the titles of the various tabs.
    Remove material design libraries for the 1.2.12 release.
    Add bower-material and hammer.js dependencies.
    Upgrade intro.js to v1.0.0. This fixes the issue with the grayed out 'Let's go' button at the end of the tutorial.
    Upgrade Angular to v1.3.0-rc.5 and jQuery to v2.1.1.
    Add a tutorial for the editor page.
    Fix broken library link.
    Use local version of MathJax, similar to what we do for other third-party libraries.
    Update select2 to v3.5.1.
    Download a local copy of MathJax.
    
    (Sometimes their CDN does not work.)
    Add a system for handling dependencies of widgets that include additional angular modules.
    Fixes for issues discovered during release testing and a few others.
    
    1. Add docstring for video id in the noninteractive video widget.
    2. Some $scope.$apply() calls are throwing errors in the frontend, and this is causing things like the code widget to fail silently (the 'Run' button never turns on). Add logging of frontend errors to the backend so that we can detect and fix these.
    3. Update ui-codemirror to a newer version in order to fix a $scope.$apply() error in the ui-codemirror library.
    4. Make images for options in multiple-choice questions smaller so that they don't overwhelm the rule editor.
    Implement sortable rules.
    Resolving merge problem.
    Continue the Bootstrap 3 upgrade.
    First pass at upgrading to Bootstrap 3.
    LogicProof widget: move to the new dependency system.
    LogicProof widget: make various updates including conversion to logic unicode symbols, inclusion of static/js tests & tools, and improvements to the UI.
    Add a simple framework for handling widget dependencies.
    Create the LogicProof widget
    Add callback function for initial MIDI library load, otherwise a console error is raised.
    Fix several music-input-related bugs.
    Add MusicNotesInput widget to Oppia.
    Convert interactive widgets to Angular directives.
    
    This has the following advantages:
    (a) speed: the interactive widgets now load faster because there is no
    need for a second request to the server to populate the iframe.
    (b) no more monkeying around with the parent container to handle iframe
    height changes
    (c) less boilerplate is needed for each individual widget
    (d) there is no need to reload JS libraries separately for the widget,
    since these libraries will have already been included in the container page.
    Make some browser-compatibility changes in order to try and support IE. This is still work in progress.
    Allow owners, collaborators and playtesters of explorations to be set.
    Update to AngularJS 1.2.0-rc.3.
    Load JQuery and JQueryUI from CDN, and fall back to the local filesystem if this fails.
    Update to AngularJS 1.2.0-rc.3.
    Load JQuery and JQueryUI from CDN, and fall back to the local filesystem if this fails.
    Add a new select2 component and use it in the exploration creation modal.
    Remove dependency on ngRoute and simplify the routing code in the editor view. This turns out to have the nice side-effect of making the exploration editor page load a lot faster :-)
    Improve frontend modal code using ui.bootstrap.
    Upgrade Angular to 1.2.0-rc.2. Change modal callsites to buttons instead of links, and add contextual escaping using  where needed. Add a separate page for 404 errors.
    Upgrade dependencies and ensure that each one has a full version number.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Update angularjs version to 1.0.7
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    1. Make a proper responsive navbar, using a customized version of the Bootstrap lib. 2. Fix a bug where the state name was not displaying on the state editor page.
    Serve libs from third_party/static instead of resources/.
    Include ngImgCrop library
    Replace intro-js with ng-joyride -- the former was leading to a buggy editor tutorial.
    Add feedback menu to top right of cards in learner view.
    Change several instances of http to https. Simplify search query code slightly.
    Move to the new color scheme, and add Angela's logos.
    Implementation of an introductory card of the exploration page
    Remove material design libraries for the 1.2.12 release.
    Add bower-material and hammer.js dependencies.
    Upgrade intro.js to v1.0.0. This fixes the issue with the grayed out 'Let's go' button at the end of the tutorial.
    Add a tutorial for the editor page.
    Update select2 to v3.5.1.
    Respond to review comments
    Move widget responses to the client side, to minimize unnecessary RPCs.
    Resolving merge problem.
    First pass at upgrading to Bootstrap 3.
    Bring in jquery-ui CSS themes for resizable RTE editing areas (which jwysiwyg depends on).
    Convert parameter change editor dropdown to use the new reusable select2 component. Remove the old angular-ui dependency.
    Add a new select2 component and use it in the exploration creation modal.
    Create a safe RTE component directive. Add RTE functionality using jWysiwyg to the rule feedback editor.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    1. Make a proper responsive navbar, using a customized version of the Bootstrap lib. 2. Fix a bug where the state name was not displaying on the state editor page.
    Move libs that are only needed by the exploration editor into the exploration editor HTML.
    Serve libs from third_party/static instead of resources/.
    Add drag-and-drop upload for images.
    Small usability/bug fixes.
    
    (1) Use different symbol for 'Look inside' button.
    (2) Make feedback links go to the exploration editor feedback tab.
    (3) Clarify exploration permissions.
    (4) In integration tests, clear the RTE before appending content.
    (5) Fix timestamps in moderator page.
    In the datetime tests, acccount for the possibility that the browser may be using other locales.
    Fix locale-dependent test.
    Add a mock to give a specific date in tests.
    Resolving comments.
    Various UI and functionality fixes.
    
    (a) Add tests for the HTML and JSON escapers
    (b) Handle scope inheritance properly in the custom editors
    (c) Remove confirmation dialog on widget change
    (d) Remove obtrusive warning message for missing objectives
    (e) Fix typo and unescaping in logic proof widget
    Adding test for oppiaDatetimeFormatter
    Address review comments.
    Create a separate controller for the exploration settings tab. Pull out more stuff from the exploration editor into standalone services, and group similar services under a base ExplorationPropertyService.
    Add drag-and-drop upload functionality for image RTE extension. Also add validation.
    Add drag-and-drop upload for images.
    Fix small minification error in three directives. Remove a superfluous directive.
    Frontend UI fixes to the state editor.
    Resolving merge problem.
    Address more review comments.
    Address review comments.
    Implement the frontend for the recent commits list.
    
    Still TODO:
    - audit the data returned to ensure nothing private is exposed
    - test on a production instance
    - reuse the functionality in the exploration version history page
    - reuse the functionality in the user profile page
    Make the state editor draggable.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Only change the values of name fields on-blur.
    Various small UI fixes.
    Set up minification of JS and CSS files.
    Add a noninteractive LaTex-display widget.
    Reinstate the image upload feature.
    Add directives for the oppia-noninteractive tags so that they can be shown in the editor view. Make the GuiEditor show a single RTE for non-interactive content.
    Add directives for the oppia-noninteractive tags so that they can be shown in the editor view. Make the GuiEditor show a single RTE for non-interactive content.
    Introduce server-side validation of exploration and state names. Standardize the characters that can be used in these names.
    Move core JS files to the frontend root so that they are more easily discoverable.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Reorganize frontend JS files, partitioning them into 'apps'.
    Restyle the dashboard page to look more consistent with the rest of the site.
    Add a dropdown for signing in.
    Address additional review comments
    Address review comments
    Allow users to leave the signup page mid-way through signup, logging them out if they do so.
    Fix issue 549: dropdown menu roots are not highlighting correctly.
    Merge sidebar/navbar changes.
    Refactor tutorial code into a help tab controller and a separate service tracking first-time usage.
    Show the tutorial immediately for first-time users.
    Show notification counts in the navbar and page title, where appropriate. Highlight new updates in the dashboard. Fix a couple of bugs in the settings and history tabs where the exploration data was not being fully loaded before the tab was displayed.
    Add a tutorial for the editor page.
    Move skin templates into directives. This is in preparation for allowing preview mode in the editor view -- we can then load all of these templates in the editor view at the outset and invoke them with HTML tags when necessary.
    Move to the recommended Angular .controller syntax.
    
    This follows the recommendation in the list of breaking changes
    for Angular 1.3.0 described at
    
        https://github.com/angular/angular.js/blob/master/CHANGELOG.md#130-beta15-unbelievable-advancement-2014-07-11
    Set default headers for POST and PUT requests from the frontend.
    Resolving merge problem.
    Continue the Bootstrap 3 upgrade.
    Create a separate controller for the exploration settings tab. Pull out more stuff from the exploration editor into standalone services, and group similar services under a base ExplorationPropertyService.
    Remove pathnameArray from the global scope.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Make logging more silent in production.
    Move iframe resizing logic to be used only in the reader view. Allow the height of the iframe to be reduced on exploration reset.
    Adjust iframe height on resize too. Also scroll the containing page to the bottom of iframe.
    Redirect to the new test server.
    Add interstitial loading pages.
    Set up minification of JS and CSS files.
    Add a noninteractive LaTex-display widget.
    Make minor edits to the commit message dialogue.
    Reinstate the image upload feature.
    Move the request creator to a factory method on the main app, since it is used everywhere.
    Move the request creator to a factory method on the main app, since it is used everywhere.
    Minor security enhancements.
    Pull the oppia embedding code out into a separate script and set up a messaging service to communicate between oppia and its embedding page.
    Remove the image storage model. Move image file uploading to use the file system storage model.
    Set postMessage target to allow explorations to be iframed in any page.
    Do not require the outer window to message the iframed exploration, due to cross-domain issues.
    Add a 'create new exploration' button to the profile page.
    Fix the image upload flow. Remove exploration image functionality.
    Add config property model and CSRF protection.
    Allow text in the interactive iframe to be rendered using mathjax.
    Introduce server-side validation of exploration and state names. Standardize the characters that can be used in these names.
    Fix issue 35: remove trailing slash from image upload URL.
    Streamlining parameter update logic a little more; removing some special cases. Work still needs to be done to make the template generation methods in widget_domain.py consistent with each other, and to figure out the order of, and when to do, Jinja substitution and JSONification.
    Add frontend warning message about explorations being transient on the demo site.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Major refactoring to make the statistics model more concrete and use domain concepts from the exploration and state models. Remove the feedback controller and replace it with a link to the bug tracker and groups page. Restrict the unresolved answers feature to be used only with the default rule of a state.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Split addContentToIframe entry point for ID param type.
    Static rendering of interactive widget in the response log.
    Reorganize frontend JS files, partitioning them into 'apps'.
    Remove superfluous scope.apply() calls. Remove unused code.
    Remove superfluous () calls. Remove unused code.
    Change the rich text editor to YUI 2. Fix a bug in image editing.
    Restructuring the view directories more intuitively.
    Add a feedback handler to Oppia.
    Adding MathJax support.
    Improve tests for the image class and the widget class.
    Introducing a request payload to minimize the number of JSON conversions needed.
    Make the 'add category' field into a dropdown.
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Moving existing widgets to use the static/ directory.
    Improving the exploration creation flow on the gallery page.
    Restructuring JS files, and adding caching headers to static content.
    Redesign the gallery page.
    
    Still TODO:
    (a) Fix integration test for language and category selection.
    (b) Check if paging is needed for the no-query case.
    (c) Implement carousel.
    Protractor tests: Switch editor and player utilities to using protractor-specific classes where possible. Also remove some instances of 'widget'.
    Update integration tests.
    If an interstitial breaks the exploration creation flow, redirect to the exploration creation modal in the gallery at the end of the process.
    UI fixes based on user tests:
    
    (1) Change phrasing for 'misspelled by one character' rule.
    (2) Remove the sentence in save-exploration modal that suggests a status change to the exploration.
    (3) Autofocus to title in gallery modal when the 'create new' button is clicked.
    (4) Autofocus to the corresponding create-new-state text box after a new state has just been created.
    (5) Add a loading indicator when the content for a new state is loading in the learner view.
    (6) Make the exploration map modal bigger.
    Improve the rule destination selection interface by removing the search icon, adding targeted error messages, and adding '(New)' helper text.
    Resolving comments.
    Resolving Sean's comments.
    This commit has 3 changes as per issue 363 . 1)Validate title on the create exploration page in realtime instead of after the user clicks save. 2)Move the warnings inline. 3)Disable the save button when the title is invalid.
    Rename 'Objective' to 'Goal' in the UI and clean up the exploration creation modal view.
    Minor changes to button name and exploration objective placeholder.
    Remove 'required' attribute from exploration objective field.
    Add objective and language fields to the 'create exploration' form.
    Address Amit's comments from release testing.
    
    1) Rework the 'Compare revisions' button and surrounding text in the exploration history tab.
    2) Make button layout more consistent across the editor and gallery pages.
    3) Remove header on forum page.
    4) Right-align 'Create New Exploration' button in gallery with the individual gallery tiles.
    5) Remove some text in the 'publish exploration' modal.
    Share the 'Create Exploration' button between the dashboard and contribute gallery pages.
    Refactor embedding into a service and add styling to share dropdown.
    Ensure that lists in the admin page and feedback editor are editable.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Make logging more silent in production.
    Make JS files compatible with minification.
    Finish cleaning up obj_services.py.
    Finish adding alwaysEditable option to the remaining editors. Fix some bugs in the parameter change editor.
    Update the editors for Int, Real, SanitizedUrl and UnicodeString to take an always-editable attribute. Similar changes for the other editors will come in a future commit.
    Finish the port to the new object editor framework, at least for the editors that already exist. Remove the old editors in templates/dev/head/components/.
    Introduce the concept of object editors that handle editing of ints, strings, etc. in a generic fashion. Port all object editors over to the new framework (except the ListEditor, which needs some more work).
    Modify the state parameter change editor to use the same value generators that are used in the widget parameter editor.
    Complete the implementation of the widget customization param editors using the new value generators.
    Make exploration overview graph look a bit nicer.
    Small changes to the editor page.
    
    1. Colour the active state in the graph.
    2. Change default rule tag to 'No other rules apply...'
    3. Move settings before statistics in the navbar icon menu.
    4. Change 'publish draft' to 'save changes'.
    Fix reachability verification checks. Move legend in history tab within the graph. Colour end states dark green.
    Remove further instances of 'EndConversation' from the core codebase.
    Add validation for the new EndConversation interaction, and hide its rule display.
    Fix integration tests.
    Cleaning up based on code reviews
    Response to code review of c4088eb7deba
    Fix height of nodes in graph, delete extra parameters
    Fix old state names, respond to other review comments
    A few more changes:
    * Clearer old name label
    * Rename explorationVersionData -> explorationVersionMetadata
    * Prevent querying for state data when state was added or deleted (and does not exist in old/new versions)
    Partially address review comments
    Changes to state diff modal layout, add export exploration data by state
    and display state data in codemirror
    Add versioned statistics aggregation and allow different versions to be viewed from stats page
    Fix bug where state graph was not being centered correctly on page load.
    UI fixes based on user tests:
    
    (1) Change phrasing for 'misspelled by one character' rule.
    (2) Remove the sentence in save-exploration modal that suggests a status change to the exploration.
    (3) Autofocus to title in gallery modal when the 'create new' button is clicked.
    (4) Autofocus to the corresponding create-new-state text box after a new state has just been created.
    (5) Add a loading indicator when the content for a new state is loading in the learner view.
    (6) Make the exploration map modal bigger.
    Fixes to history graph UI
    Separate node IDs and labels, add links styles mapping, add secondary node label to node title
    Refactor state graph to use node IDs
    Add state and link colors to history graph
    Fix height of small graphs, which are now truncated.
    Address another review comment.
    Address review comments.
    Upgrade d3 version to v3.4.11. Make some variables in the state-graph-viz directive readonly.
    Make the graph in the modal pannable.
    Completely refactor the state graph to use a template. In the process, fix a couple of bugs involving SVG defs not working in Firefox.
    Refactoring state graph code without changing behavior: split out the layout computing into a separate service, and provide a basic template for the graph.
    Minor refactoring of statistics frontend and backend, including removing some unused methods.
    Make the pannable area larger, and modify the original translation array instead of creating a copy.
    Ensure that the state graph is never panned out of the viewport.
    Fix a bug where the + button in the state minimap was not showing up in Safari.
    Route reader-submitted feedback to the new feedback system, and remove the frontend for the old feedback system.
    Remove a couple of places that were still editable in the view-only mode for the exploration editor.
    Resolving merge problem.
    More miscellaneous UI fixes. Added an expandable warnings bar below the save and discard buttons.
    Small wording changes. Redid the layout of the exploration settings page.
    Continue the Bootstrap 3 upgrade.
    First pass at upgrading to Bootstrap 3.
    Fix a vertical stats graph cutoff bug in Firefox. Make some of the wording on the stats page more systematic.
    changed color of first state to pale green
    Fix a bug where the graph height and width defaults were not being set, causing the graph to render incorrectly in Firefox.
    Fixed code-styling issues, reverted rule editor so that the feedback and destination are on the same row.
    Make nodes in the state graph have a fixed width.
    Replace many buttons with Bootstrap icons, place 'destination' right under the rule description, remove arrows from the default rule, change remove the word 'but' from the rule called 'but misspelled by one chracter', other minor styling changes for rule editor.
    Further fixes to the state graph visualizations: make nodes wide enough to contain their text, and fix an overlap issue between the maximize button and the graph nodes.
    Change size of exploration mini-map to 250x250, add border-radius, add margins to '+' button in mini-map.
    
    Still to do:
    -The blocks in the mini-map are currently drawn from the top left corner, they should be positioned by their centers.
    -There should be a panning animation when a block is clicked on, it's a bit confusing to jump between states at the moment.
    -The content gets clipped when the window is resized. The layout is rather confusing, and may need some refactoring.
    Add a modal that shows a larger version of the state graph minimap. Add an option to pan the visualization so that it centers on the current state.
    Make each state visualization graph detect the width and height of its container. Make the state graph minimap taller.
    Remove some code that is causing errors to be generated in the browser console.
    Remove comments in order to restore functionality into the state editor UI.
    Primarily removed state editor from modal window into main editing area, turned exploration graph into a mini-map.
    Removing v2 of stats models to ease further development
    Removing v2 of stats models to ease further development
    Merge of missing answer changes, fixing conflicts
    Fix some saving bugs in the rule editor.
    Fix some saving bugs in the rule editor.
    Add some transition effects to the state graph visualization.
    Move interactive widget customization into the inline editor for the widget.
    Improvments to post-it look
    
    Making rect clickable, same as full state rect
    Made larger to reflect larger state rect
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Overlay the state editor on the exploration graph editor, and remove the separate tab for the state editor.
    Make the graph visualization more responsive, and make the states fit in the viewport without the need for scrolling.
    Prettier post-it
    Get rid of javascript console error loading stats
    More of a post-it look for the warning icon
    Showing warning icon for unresolved feedback
    Change stats view to use warning icon in place of colored borders
    Fix bug where width/height of the graph visualization were not being correctly set in Firefox.
    Allow add and delete state operations to be done as part of a larger commit.
    Represent a changelist as a sequence of commands and process this sequence server-side.
    Remove the concept of stateId from the frontend.
    Set up minification of JS and CSS files.
    Make JS files compatible with minification.
    Make the feedback model more flexible.
    Refactor the rule modal to separate it more cleanly from its container.
    Tidy up the visualizations.js file.
    Create a StatsViewer controller and move the modal code into an HTML template for maintainability.
    Introduce a StatsViewer controller. Improve the routing behavior in the exploration editor.
    Move more modals to the angular-ui.bootstrap framework.
    Remove dependency on ngRoute and simplify the routing code in the editor view. This turns out to have the nice side-effect of making the exploration editor page load a lot faster :-)
    Use ui-bootstrap tooltips throughout, except in modals generated in JS (this will come later). The aim is to remove the old angular-ui dependency.
    Basic visualization of state feedback from readers for editors
    Fix an error where all rules were being declared as atomic. Remove extra verbiage from exploration improvement hints.
    Add more contextual documentation about confusing states and states that lack feedback.
    help links
    Move from SVG modal to Oppia modal
    refactor popup into one function
    SVG style popup for more info
    Fix issue 33: If there is no path from a node to the END state, color it pink on the exploration graph.
    Make width of graph visualization dynamic.
    Fix for issue 26: once a state is renamed, update its name immediately on the exploration graph, rather than wait for the page to be reloaded.
    More clear stats paths
    - Adds a legend for stats graph viewer
    - Fixes arrows seeming to be different colors
    - Adds different colors for different help types
    - Removes text explaining what is now in the picture
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Giving more saliency to borders in stats view
    Make 'highlight states' for graph viz more configurable
    Restoring proper default fill-opacity on graphs
    Basics of "highlight states that need help"
    clearing up the view a little
    adding self-loops to graph visualization
    deleting some console lines
    Making it work for ALL svgs
    svg dynamic heights
    Move reusable directives to the components/ folder.
    Use the first entry counts (rather than the total entry counts) to determine node colors for the state graph visualization.
    Make the state graph visualization into a reusable directive.
    Move more logic into the domain layer. Fix some select2 error messages in the frontend that occur due to imported libraries being in the wrong order.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Start of a graph visualization for stats
    Making cleaner arrows in graph viz
    Fix a bug in the display of node text for the exploration graph in Firefox
    Finish edits to exploration graph to make it look nicer.
    Adjusting the links on the exploration graph visualization to start and end at the midpoints of nodes.
    editor graph node overlap issue fixed
    editor graph rendering tweaks
    Reorganize frontend JS files, partitioning them into 'apps'.
    Fix bugs in the exploration editor frontend: add-new-state did not work properly, state visualizations did not update when changes were made.
    Ensure that the exploration graph doesn't get cut off by the left edge of the viewing area.
    Restructuring the view directories more intuitively.
    Make circles in exploration graph into ellipses. Remove dead code.
    Continue tidying up the exploration resource.
    Use promises to smoothly handle exploration loading in the exploration editor page.
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Refactoring the state deletion code. Also, we now do not create an exploration if any of its setup parameters (like the YAML file) are invalid.
    Restructuring JS files, and adding caching headers to static content.
    Make YAML editing work.
    Removing final vestiges of the old system (actions, inputType, dests)
    Removing stateData. Using explorationData for all get transactions.
    All END states are now 'END'; there is no more use of '-1'. All 'END' and '-1' literals have been changed to use one of the constants in either utils.py or editorExploration.js.
    Deleting old files.
    Add  dependency to handle Explorations (and later States).
    Minor tweaks to state-deletion and graph-node-color logic.
    Fix a bug with the graph visualization in which the edges were not displaying.
    Removing jsPlumb library and fixing the 'add state' behavior on the exploration page
    Fix a bug with the graph visualization where the initial state wasn't showing up
    Fixing URL routing
    Add tooltip to graph nodes
    Correcting a typo in the sample exploration
    Improvements to the reader set interface and the exploration graph visualization
    Lots of small edits and refactorings
    Finishing touches to the state graph visualization
    Adding further touches to the graph visualization
    Introduce separate namespaces for the different visualizations
    Add a delete state handler to the graph vizualization
    Remove 'factory' suffix from factories
    Add click handler to graph nodes
    Continue work on graph styling. Separate vizualizations into separate tabs.
    Replicate the state graph in d3.js
    Renaming vizualization files
    Complete the basic tree display
    Removing drag-and-drop palette, combining exploration editor tabs, and starting an experiment with a d3.js tree layout
    Adding files missed in previous CL
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Make JS files compatible with minification.
    Finish adding alwaysEditable option to the remaining editors. Fix some bugs in the parameter change editor.
    Modify the state parameter change editor to use the same value generators that are used in the widget parameter editor.
    Complete the implementation of the widget customization param editors using the new value generators.
    Allow clicking outside a modal to dismiss it
    Refactor embedding into a service and add styling to share dropdown.
    Small changes to the editor page.
    
    1. Colour the active state in the graph.
    2. Change default rule tag to 'No other rules apply...'
    3. Move settings before statistics in the navbar icon menu.
    4. Change 'publish draft' to 'save changes'.
    Add validation for the new EndConversation interaction, and hide its rule display.
    Numerous margin, positioning, and styling fixes for the exploration editor.
    integration tests for history page
    Protractor tests: respond to review comments.
    Protractor tests: Switch editor and player utilities to using protractor-specific classes where possible. Also remove some instances of 'widget'.
    Fix old state names, respond to other review comments
    Changes to state diff modal layout, add export exploration data by state
    and display state data in codemirror
    Fix bug where state graph was not being centered correctly on page load.
    Separate node IDs and labels, add links styles mapping, add secondary node label to node title
    Refactor state graph to use node IDs
    Add state and link colors to history graph
    Fix height of small graphs, which are now truncated.
    Fix graph height being too small in the editor statistics tab in Firefox.
    Fixed rule header pencil issue, minor CSS fixes.
    Renamed interactions for consistency, added padding to rule headings and buttons.
    Move more of the state operations to explorationStatesService.
    Further UI improvements to the state content and interaction editors. Change the default initial state name.
    Upgrade d3 version to v3.4.11. Make some variables in the state-graph-viz directive readonly.
    Refactor the state graph html in an attempt to make the drag response less sluggish.
    Make the graph in the modal pannable.
    Completely refactor the state graph to use a template. In the process, fix a couple of bugs involving SVG defs not working in Firefox.
    Refactoring state graph code without changing behavior: split out the layout computing into a separate service, and provide a basic template for the graph.
    Add language selection functionality to the gallery.
    Improve the rule destination selection interface by removing the search icon, adding targeted error messages, and adding '(New)' helper text.
    Amend integration tests following Jacob's advice.
    Add the ability for editors to change statuses of feedback threads.
    Further UI improvements based on feedback from testing.
    Remove some Edit buttons. Restyle the rule picker.
    Remove some Edit buttons. Restyle the rule picker.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Set up minification of JS and CSS files.
    Make JS files compatible with minification.
    Separate the select2 and RTE directives.
    Ensure images display properly in multiple-choice rule editor. Add additional validation to image click input region labels.
    Clean up images folder.
    Fix the width of the clickable area of the rule destination link.
    Forbid deletion of default rule.
    Edited many margins, changed drag icon, added blog link, changed tutorial curtain.
    If user is not logged in, don't show interaction dropdown, and don't highlight rule section on hover.
    Numerous small changes for new rule editor.
    Make default rule selectable from 'add rule' dialog. Prohibit rule saving when feedback is empty and the destination is the same state.
    Standardize edit rule views for both the 'existing rule' and the 'add rule' cases.
    Minor changes to alignment and wording of various labels and buttons.
    Do not hide the 'add item' button for a list whose elements have choices.
    Do not allow rules to be saved if their descriptions are invalid.
    Small changes to the editor page.
    
    1. Colour the active state in the graph.
    2. Change default rule tag to 'No other rules apply...'
    3. Move settings before statistics in the navbar icon menu.
    4. Change 'publish draft' to 'save changes'.
    Move the 'create new state' option into the rule destination dropdown.
    Move state name from sidebar to main editor. Tidy up CSS for avatars.
    Style the rule editor.
    Restyle the content and interaction parts of the state editor.
    Numerous margin, positioning, and styling fixes for the exploration editor.
    Replace intro-js with ng-joyride -- the former was leading to a buggy editor tutorial.
    Update protractor tests.
    Changed a few margins, replaced arrows with 'destination'.
    Make adding new states from rules more explicit. Remove global 'add state' buttons.
    Make rule interior look nice.
    Restyle the exterior of the rule editor.
    Add a few more event updates that were missing in the previous commit.
    Move rule tabs to the bottom of the state editor.
    Move the rule tabs to the bottom of the state editor. Remove the 'next state' bar.
    Restyle rule editor to make the tabs clearer. Also, keep the correct rule tab open after sorting.
    Allow new rules to be added.
    Refactor the rule description editor into a separate directive.
    Restyle the rule editor to use tabs.
    
    Remaining TODOs:
    - Fix the 'add rule' flow.
    - Remove isTmpRule, cancelEdit and protractor-test-temporary-rule.
    - Add fixed bar at the top/bottom for rule destinations.
    - Fix weird sorting behaviour.
    Remove widget_domain, replacing it with two base classes for interactions and rich-text components.
    Protractor tests: Switch editor and player utilities to using protractor-specific classes where possible. Also remove some instances of 'widget'.
    Resolving comments.
    Show multiple-choice input as HTML in the rule description field.
    Disable the rules dropdown in exploration editor when there is just one choice. Issue 408.
    Change readonly rule display to a plain text string.
    Clarify the 'add variation' text for each rule.
    Change interaction editor icon from a pencil to a cog (to suggest 'settings' or 'customization').
    Protractor tests: add tests for complex behaviours and navigation within the exploration editor.
    Improve the rule destination selection interface by removing the search icon, adding targeted error messages, and adding '(New)' helper text.
    Remove on-hover effect for content and rule sections in non-editable mode.
    Fix overflowing text in rule feedback and descriptions.
    Show HTML for the rule feedback, rather than text. Only strip markup from multiple-choice rules if the result is non-empty. Remove extra ellipsis.
    Fix several issues with multiple-choice rules:
    
    (a) Stop very long strings in multiple-choice buttons from overflowing.
    (b) Strip RTE tags from multiple-choice strings when displaying them.
    (c) Fix a typo that caused the index of the choice to be displayed rather than
        its text.
    Upgrade Angular to v1.3.0-rc.5 and jQuery to v2.1.1.
    Fixed rule header pencil issue, minor CSS fixes.
    Renamed interactions for consistency, added padding to rule headings and buttons.
    Fix more UI issues.
    
    (1) Fix overflowing interactive map widget.
    (2) Reverse the order of the cancel/submit buttons in the feedback modal in the learner view.
    (3) Add icons to the Edit and Preview buttons in the exploration editor page.
    (4) Adjust the width of the header row so that the control buttons fit in one line.
    (5) Allow the tutorial to be started properly when the user is in preview mode.
    (6) Widen the tutorial tooltip for the initial step, and remove the step numbers in the red circles.
    (7) Make some CSS fixes to the exploration editor for the case when the exploration is not editable by the current user.
    Fix lots of small bugs.
    
    (1) In the MusicNotesInput widget, rename 'play desired sequence' to 'play target sequence'.
    (2) In NumericInput view for the learner's input, do not show integers as floats.
    (3) In the TextInput widget, improve the description of the 'rows' field.
    (4) Rename Code REPL widget to 'Code input'.
    (5) In the MusicNotesInput widget, change the 'Add Note' button to make it clear what type of note is being referred to (a music note, not a comment).
    (6) Rename 'Tutorial' to 'Walkthrough' (the former sounds like 'manual').
    (7) Disable 'look inside' functionality in preview mode.
    (8) Add Amy's name to credits.
    (9) Show edit buttons in gallery for moderators (issue 373).
    (10) Fix broken loading when the history tab in the exploration editor is shown on initial load.
    (11) Fix the broken revert modal in history tab (the link to try out the old version did not work).
    (12) Move the 'create' button nearer to the 'add new state' input field.
    (13) Move the learner answer div styling to a common location in the conversation skin view.
    (14) Allow states defined in rules to use '.' (issue 166).
    (15) Add moderator page to profile menu (issue 374).
    Address review comments.
    Create a controller for the exploration graph. Remove more occurrences of .
    Refactor out the routing logic into a separate service, and simplify it.
    Minor CSS changes.
    Additional UI fixes: spacing, click handlers, consistency.
    Some small CSS fixes.
    Minor cleanup fixes based on Jacob's comments
    Tweaked a lot of color, wording, and alignment issues in the exploration editor.
    Further UI improvements to the state content and interaction editors. Change the default initial state name.
    Add a welcome message to the content editor and more contextual feedback to the interaction editor.
    Amend integration tests following Jacob's advice.
    Redesign the editor rules interface. Also make the behavior of the 'save changes' button more responsive.
    Initial response to review comments.
    Button margin and alignment adjustments.
    Address Amit's comments from release testing.
    
    1) Rework the 'Compare revisions' button and surrounding text in the exploration history tab.
    2) Make button layout more consistent across the editor and gallery pages.
    3) Remove header on forum page.
    4) Right-align 'Create New Exploration' button in gallery with the individual gallery tiles.
    5) Remove some text in the 'publish exploration' modal.
    Do not use ng-click for divs in gallery; links end up misdirecting. Also, hide the rule feedback editor behind a button so that multiple small changes to the text do not automatically trigger multiple save events.
    Add a size option for the schema-based HTML input form, and convert the state content and feedback RTEs to use it.
    Use the new schema-based forms for real-number editors.
    Fix rules for multiple-choice input to read correctly from the widget customization args.
    Make sort tabs match the color of the rule header.
    Make the entire rule header draggable, and round off the top-left corner of the default rule tile.
    Added handle to sortable arrow
    Changed sorting icon, restricted sorting handle to sorting icon.
    Changed rule dragging arrows to glyphicon resize arrows.
    Remove the arrows for the default rule.
    Added up-down glyphicon arrows in rule headers to indicate draggability.
    Add normalizers framework. Add frontend HTML code and tests for schema-based editors.
    Implement sortable rules.
    Add the ability for editors to change statuses of feedback threads.
    Fix a bug: rules for the set editor could not be edited.
    Fix size of destination bubble, modify some buttons in the UI to be smaller
    Build a UI for feedback threads and messages.
    Resolving merge problem.
    Implement basic functionality for a readonly editor view of an exploration.
    Small fixes: add 'no objective' warning to the warnings list, fix unable-to-publish-exploration issue, make 'Done' buttons in rules smaller.
    More miscellaneous UI fixes. Added an expandable warnings bar below the save and discard buttons.
    Continue the Bootstrap 3 upgrade.
    First pass at upgrading to Bootstrap 3.
    changed all buttons to bootstrap, fixed some alignments
    Fixed code-styling issues, reverted rule editor so that the feedback and destination are on the same row.
    Replace many buttons with Bootstrap icons, place 'destination' right under the rule description, remove arrows from the default rule, change remove the word 'but' from the rule called 'but misspelled by one chracter', other minor styling changes for rule editor.
    Redo rule editor: place destination area in bottom of rule editor, update swap rule buttons, change Add new rule button, other misc. changes.
    Use a downward-left pointing pencil as the edit icon, so that the pencil points towards the item that is to be edited.
    Use a downward-left pointing pencil as the edit icon, so that the pencil points towards the item that is to be edited.
    Minor wording change.
    Address issue 151: clarify the 'feedback required' message.
    Fix a bug where rule destination state URLs were not being escaped correctly.
    Minor fixes to the state editor.
    Make the central column of the state editor wider, and remove some buttons.
    Tighten up the behavior of the rule editor in the scenario where a new rule is added.
    Further UI improvements based on feedback from testing.
    Ensure that the editable box does not cover the link to a destination state.
    Move 'Add rule' button to the center. Adjust size of borders and fix the overflowing, on small screens, of the 'Select' buttons for picking rules.
    Remove some Edit buttons. Restyle the rule picker.
    Remove the rule editor modal and allow parts of a rule to be edited inline.
    Ensure that the editable box does not cover the link to a destination state.
    Move 'Add rule' button to the center. Adjust size of borders and fix the overflowing, on small screens, of the 'Select' buttons for picking rules.
    Remove some Edit buttons. Restyle the rule picker.
    Remove the rule editor modal and allow parts of a rule to be edited inline.
    Remove the rule editor modal and allow parts of a rule to be edited inline.
    Refactor the rule editor to remove duplicate HTML.
    Allow clicking outside a modal to dismiss it
    UI fixes based on user tests:
    
    (1) Change phrasing for 'misspelled by one character' rule.
    (2) Remove the sentence in save-exploration modal that suggests a status change to the exploration.
    (3) Autofocus to title in gallery modal when the 'create new' button is clicked.
    (4) Autofocus to the corresponding create-new-state text box after a new state has just been created.
    (5) Add a loading indicator when the content for a new state is loading in the learner view.
    (6) Make the exploration map modal bigger.
    Resolving comments.
    Resolving Sean's comments.
    This commit has 3 changes as per issue 363 . 1)Validate title on the create exploration page in realtime instead of after the user clicks save. 2)Move the warnings inline. 3)Disable the save button when the title is invalid.
    Add objective and language fields to the 'create exploration' form.
    Share the 'Create Exploration' button between the dashboard and contribute gallery pages.
    Address review comments.
    Numerous changes to editor page.
    Fix several issues uncovered during testing.
    
    1. Display a more comprehensible message when malformed expressions are used.
    2. Make && and || return booleans.
    3. Close the parameter change editor (possibly saving unsaved changes) if an external change arises.
    4. Display a warning if an invalid parameter name is used.
    Ensure that invalid parameter names cannot be used.
    Move exploration parameter specs to a standalone service.
    Slightly improve the editor parameter UI.
    Add the ability for editors to change statuses of feedback threads.
    Implement basic functionality for a readonly editor view of an exploration.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Make logging more silent in production.
    Allow parameter changes to be swapped.
    Set up minification of JS and CSS files.
    Make JS files compatible with minification.
    Add the concept of computed configuration properties. Fix some errors in the behavior of discardChanges() on the exploration editor page.
    Minor wording changes.
    Add a CoordTwoDim editor template. Improve the user experience for the parameter change editor.
    Finish adding alwaysEditable option to the remaining editors. Fix some bugs in the parameter change editor.
    Remove unnecessary buttons from the list editor.
    Complete implementation of batch saving for parameter changes.
    Improve the parameter change interface to be more human-readable.
    Convert parameter change editor dropdown to use the new reusable select2 component. Remove the old angular-ui dependency.
    Clicking save on a modal should also save any fields that are currently in editable form.
    Schema change: make param specs into key-value pairs so that exactly one param spec is defined for each param name.
    Allow selection of particular value generators when editing parameters. Minor improvements to the code widget display.
    Re-allow the setting of exploration initialization parameters.
    In the frontend, rename parameters to paramSpecs.
    Modify the state parameter change editor to use the same value generators that are used in the widget parameter editor.
    Ensure images display properly in multiple-choice rule editor. Add additional validation to image click input region labels.
    Show the active rule inline, rather than at the bottom.
    Require the user to explicitly select the interaction for each state.
    Various improvements to the editor page.
    
    (1) Reorganize the interaction dropdown menu to remove many single-item categories.
    (2) Remove help dropdown menu.
    (3) Fix bug when user clicks 'add new state' and then cancels.
    (4) Move 'Create New...' to the second position in the rule destination dropdown so that it does not look like a menu heading.
    Update Protractor tests.
    Numerous small changes for new rule editor.
    Make default rule selectable from 'add rule' dialog. Prohibit rule saving when feedback is empty and the destination is the same state.
    Standardize edit rule views for both the 'existing rule' and the 'add rule' cases.
    Do not allow rules to be saved if their descriptions are invalid.
    Remove duplicate import.
    Move the 'create new state' option into the rule destination dropdown.
    Allow clicking outside a modal to dismiss it
    Make adding new states from rules more explicit. Remove global 'add state' buttons.
    Add a few more event updates that were missing in the previous commit.
    Move rule tabs to the bottom of the state editor.
    Address review comments.
    Allow new rules to be added.
    Refactor the rule description editor into a separate directive.
    Restyle the rule editor to use tabs.
    
    Remaining TODOs:
    - Fix the 'add rule' flow.
    - Remove isTmpRule, cancelEdit and protractor-test-temporary-rule.
    - Add fixed bar at the top/bottom for rule destinations.
    - Fix weird sorting behaviour.
    Migrate the backend widget registries and the controllers.
    Changed answer type from NonnegativeInteger to UnicodeString
    Removing extra comma.
    Resolving comments.
    Disable the rules dropdown in exploration editor when there is just one choice. Issue 408.
    Clarify the 'add variation' text for each rule.
    Addressed review comments
    Improve the rule destination selection interface by removing the search icon, adding targeted error messages, and adding '(New)' helper text.
    Fixed bug in graph isomorphism and rule editor, added new exploration, added response
    Bugfixing for graph exploration to work
    Fix several issues with multiple-choice rules:
    
    (a) Stop very long strings in multiple-choice buttons from overflowing.
    (b) Strip RTE tags from multiple-choice strings when displaying them.
    (c) Fix a typo that caused the index of the choice to be displayed rather than
        its text.
    Upgrade Angular to v1.3.0-rc.5 and jQuery to v2.1.1.
    More fixes to the editor view.
    
    (1) Pull interaction selector out of the customization view.
    (2) Dismiss warnings when rules are changed.
    (3) Shorten the labels for the 'save changes' and 'discard changes' buttons.
    (4) Fix issue #147: show an error message when an invalid link is saved.
    Create a controller for the exploration graph. Remove more occurrences of .
    Refactor out the routing logic into a separate service, and simplify it.
    Allow ruleEditor to depend on explorationStatesService.
    Additional UI fixes: spacing, click handlers, consistency.
    Some small CSS fixes.
    Minor cleanup fixes based on Jacob's comments
    Further UI improvements to the state content and interaction editors. Change the default initial state name.
    Add a welcome message to the content editor and more contextual feedback to the interaction editor.
    Amend integration tests following Jacob's advice.
    Redesign the editor rules interface. Also make the behavior of the 'save changes' button more responsive.
    Address Amit's comments from release testing.
    
    1) Rework the 'Compare revisions' button and surrounding text in the exploration history tab.
    2) Make button layout more consistent across the editor and gallery pages.
    3) Remove header on forum page.
    4) Right-align 'Create New Exploration' button in gallery with the individual gallery tiles.
    5) Remove some text in the 'publish exploration' modal.
    Do not use ng-click for divs in gallery; links end up misdirecting. Also, hide the rule feedback editor behind a button so that multiple small changes to the text do not automatically trigger multiple save events.
    Add a size option for the schema-based HTML input form, and convert the state content and feedback RTEs to use it.
    Fix a couple of omissions in previous commits.
    Tidy up naming and clarify the code.
    Fix rules for multiple-choice input to read correctly from the widget customization args.
    Make sort tabs match the color of the rule header.
    Make the entire rule header draggable, and round off the top-left corner of the default rule tile.
    Fix a saving bug: when a rule with an input is selected, and then changed to a rule without an input, the extraneous input is kept, causing an error on the backend. Also, refresh the state editor when changes are discarded.
    Add the ability for editors to change statuses of feedback threads.
    Fix size of destination bubble, modify some buttons in the UI to be smaller
    Frontend UI fixes to the state editor.
    Implement basic functionality for a readonly editor view of an exploration.
    Address issue 151: clarify the 'feedback required' message.
    Fix a bug where rule destination state URLs were not being escaped correctly.
    When the rule description editor is closed, close the rule picker as well.
    Minor fixes to the state editor.
    Make the central column of the state editor wider, and remove some buttons.
    Tighten up the behavior of the rule editor in the scenario where a new rule is added.
    Further bug fixes.
    Fix some saving bugs in the rule editor.
    Remove some Edit buttons. Restyle the rule picker.
    Remove the rule editor modal and allow parts of a rule to be edited inline.
    Fix some saving bugs in the rule editor.
    Remove some Edit buttons. Restyle the rule picker.
    Remove the rule editor modal and allow parts of a rule to be edited inline.
    Remove the rule editor modal and allow parts of a rule to be edited inline.
    Refactor the rule editor to remove duplicate HTML.
    Numerous changes to editor page.
    Make list, int and nonnegative-int editors use schema-based forms. Fix display of rules for interactive map.
    Fix several issues uncovered during testing.
    
    1. Display a more comprehensible message when malformed expressions are used.
    2. Make && and || return booleans.
    3. Close the parameter change editor (possibly saving unsaved changes) if an external change arises.
    4. Display a warning if an invalid parameter name is used.
    Ensure that invalid parameter names cannot be used.
    Move exploration parameter specs to a standalone service.
    Slightly improve the editor parameter UI.
    Renamed interactions for consistency, added padding to rule headings and buttons.
    Simplify the state editor.
    Further bug fixes.
    
    (a) Add a help link to the parameter changes section.
    (b) Display interactive map coordinates to 3 decimal places.
    (c) Correct a misleading rule name in the tar file rules.
    (d) Fix an issue with having black text on dark blue background in the navbar when a tab name is focused on.
    (e) Fix a bug with the exploration deletion flow.
    (f) Only show the delete button to exploration owners.
    Move the parameter changes section into the content section so that it is less obtrusive as the first thing on the state editor page.
    Resolving merge problem.
    Implement basic functionality for a readonly editor view of an exploration.
    Small wording changes. Redid the layout of the exploration settings page.
    First pass at upgrading to Bootstrap 3.
    changed all buttons to bootstrap, fixed some alignments
    Make the central column of the state editor wider, and remove some buttons.
    UI changes: make the rightmost column of the state editor narrower, and improve the help text and default values for the noninteractive link widget. Remove some unused code from the exploration editor.
    Allow parameter changes to be swapped.
    Allow deletion of parameters when their edit view is opened.
    Add a submission button to the 'add state' form. Inline some macros.
    Minor wording changes.
    Add a CoordTwoDim editor template. Improve the user experience for the parameter change editor.
    Finish adding alwaysEditable option to the remaining editors. Fix some bugs in the parameter change editor.
    Use consistent button styles on the state editor page. Right-align all buttons. Have a consistent 2:10 column layout with the 10-column subdivided as 9:3.
    Small changes: remove padding on container-fluid elements; display some text when the parameter change list is empty.
    Improve the parameter change interface to be more human-readable.
    Make cursor turn to pointer on links. Change the UI for adding new rules. Do not consider changing something to the same value to be an actual change.
    Convert parameter change editor dropdown to use the new reusable select2 component. Remove the old angular-ui dependency.
    Allow selection of particular value generators when editing parameters. Minor improvements to the code widget display.
    Modify the state parameter change editor to use the same value generators that are used in the widget parameter editor.
    Split the dashboard into two different pages.
    Resolving comments and adding tests for dashboard.
    Address Jacob's review comments. Rename 'beta' to 'public'. Reduce number of status choices in the gallery.
    Consolidate the three galleries into a single public one.
    Modify the dashboard view to show private, beta and released explorations.
    Edits to improve responsiveness
    - Hide picture, objective and creation date in dashboard
    - Increase margins around titles
    Split the dashboard into two different pages.
    Edits to improve responsiveness
    - Hide picture, objective and creation date in dashboard
    - Increase margins around titles
    Split the dashboard into two different pages.
    Split the dashboard into two different pages.
    Split the dashboard into two different pages.
    Coerce numeric values to Numbers before running evaluation operations on them.
    Update expressions README. Fix error in parsing of functions. Ensure that all expressions in a string with multiple expressions are parsed, not just the first one.
    Expression tests ported to karma.
    Implement if/then/else for expressions. This completes the conversion of the Lazy Magician exploration to use the new expression language.
    Add pow(), log() and abs() functions. Add a job for listing expressions in existing explorations.
    Add a floor function. Fix incorrect warning message.
    Coerce numeric values to Numbers before running evaluation operations on them.
    Style fixes in evaluatorSpec.js.
    Tests for evaluateExpression.
    Expression tests ported to karma.
    Implement if/then/else for expressions. This completes the conversion of the Lazy Magician exploration to use the new expression language.
    Update expressions README. Fix error in parsing of functions. Ensure that all expressions in a string with multiple expressions are parsed, not just the first one.
    Fully auto-generate expression parser.js again.
    Turned expression parser and evaluator into angular services.
    Expression validator for schema based editor.
    Expression not allowing function name to be a subexpression.
    Expression: moved to core/templates/dev/head.
    Expression evaluator error cases.
    Evaluator and its tests.
    Expression parser.
    Update expressions README. Fix error in parsing of functions. Ensure that all expressions in a string with multiple expressions are parsed, not just the first one.
    Expression updates for script file name changes.
    Expression: moved to core/templates/dev/head.
    Expressions -- doc fixes.
    Adding documentations for expression.
    Implement if/then/else for expressions. This completes the conversion of the Lazy Magician exploration to use the new expression language.
    Update expressions README. Fix error in parsing of functions. Ensure that all expressions in a string with multiple expressions are parsed, not just the first one.
    Expression not allowing function name to be a subexpression.
    Expression updates for script file name changes.
    Expression: moved to core/templates/dev/head.
    Expressions -- doc fixes.
    Adding documentations for expression.
    Evaluator and its tests.
    Expression parser.
    Fix several issues uncovered during testing.
    
    1. Display a more comprehensible message when malformed expressions are used.
    2. Make && and || return booleans.
    3. Close the parameter change editor (possibly saving unsaved changes) if an external change arises.
    4. Display a warning if an invalid parameter name is used.
    Ensure that invalid parameter names cannot be used.
    Implement if/then/else for expressions. This completes the conversion of the Lazy Magician exploration to use the new expression language.
    Add pow(), log() and abs() functions. Add a job for listing expressions in existing explorations.
    Add a floor function. Fix incorrect warning message.
    Coerce numeric values to Numbers before running evaluation operations on them.
    Update expressions README. Fix error in parsing of functions. Ensure that all expressions in a string with multiple expressions are parsed, not just the first one.
    Fully auto-generate expression parser.js again.
    Expression tests ported to karma.
    Turned expression parser and evaluator into angular services.
    Expression validator for schema based editor.
    Expressions style and comments.
    Expression comment update.
    Expression not allowing function name to be a subexpression.
    Expression: moved to core/templates/dev/head.
    Expression: comment updates.
    Expression: evaluator and test updates.
    Expression doc updates.
    Expression evaluator error cases.
    Expressions -- doc fixes.
    Adding documentations for expression.
    Evaluator and its tests.
    Move 'About' and 'Forum' to the navbar. Add breadcrumbs on all pages.
    Small usability/bug fixes.
    
    (1) Use different symbol for 'Look inside' button.
    (2) Make feedback links go to the exploration editor feedback tab.
    (3) Clarify exploration permissions.
    (4) In integration tests, clear the RTE before appending content.
    (5) Fix timestamps in moderator page.
    Add a list of recent feedback messages to the moderator page.
    Add more detail to the recent changes page.
    Implement the frontend for the recent commits list.
    
    Still TODO:
    - audit the data returned to ensure nothing private is exposed
    - test on a production instance
    - reuse the functionality in the exploration version history page
    - reuse the functionality in the user profile page
    more fixes in response to comments
    removed unnecessary get() functions and changed the handling of no such user to not rely on them.
    Fixes to moderator page in response to comments
    Revert "Merging moderator page into main branch"
    
    This reverts commit 41f68ff03a3f72d0fc5f2d4c4e37106e01707cff, reversing
    changes made to dee9ead5e46b3616eaae6c5e7fb55a6e8fdde539.
    Basic functionality for moderators to get users' email addresses
    Small usability/bug fixes.
    
    (1) Use different symbol for 'Look inside' button.
    (2) Make feedback links go to the exploration editor feedback tab.
    (3) Clarify exploration permissions.
    (4) In integration tests, clear the RTE before appending content.
    (5) Fix timestamps in moderator page.
    Renaming oppiaDateFormatter factory and related methods to DatetimeFormatter
    Remove oppiaRequestCreator and replace it with an HTTP request interceptor.
    Move to the recommended Angular .controller syntax.
    
    This follows the recommendation in the list of breaking changes
    for Angular 1.3.0 described at
    
        https://github.com/angular/angular.js/blob/master/CHANGELOG.md#130-beta15-unbelievable-advancement-2014-07-11
    Consolidate error handling boilerplate.
    
    Also:
    
    (a) Have a friendlier 404 error page.
    (b) Remove unused route from app.yaml.
    (c) Add a robots.txt file.
    Set default headers for POST and PUT requests from the frontend.
    Add a list of recent feedback messages to the moderator page.
    Add more detail to the recent changes page.
    Represent the playtest gallery as a flat list. Remove subtitle from the learn gallery.
    Address review comments.
    Implement the frontend for the recent commits list.
    
    Still TODO:
    - audit the data returned to ensure nothing private is exposed
    - test on a production instance
    - reuse the functionality in the exploration version history page
    - reuse the functionality in the user profile page
    more fixes in response to comments
    removed unnecessary get() functions and changed the handling of no such user to not rely on them.
    Fixes to moderator page in response to comments
    Revert "Merging moderator page into main branch"
    
    This reverts commit 41f68ff03a3f72d0fc5f2d4c4e37106e01707cff, reversing
    changes made to dee9ead5e46b3616eaae6c5e7fb55a6e8fdde539.
    Basic functionality for moderators to get users' email addresses
    Add functionality for regenerating the search index.
    Migrate the backend widget registries and the controllers.
    Protractor tests: Response to review comments.
    Protractor tests: Switch gallery, admin and users to using protractor-specific class when possible. This is to make it easier for those editing production code to identify protractor's requirements.
    Protractor tests: start adding framework to check for console errors. Also fix one such error on the admin page.
    Protractor tests: response to review comments.
    Protractor tests: add tests for the embedding of oppia explorations in external webpages, and modify the examples of such embeddings accordingly. This does not include propogation of events from the explorations to the surrounding pages.
    Refactor admin page to use new schema-based forms.
    Add the current time to the admin page, and change the order in which sections are presented.
    Move HTML editor code to the schema-based editor files.
    Deprecate file input widgets. Add a button in the admin dashboard to view job output.
    Tidy up naming and clarify the code.
    Add a separate section for unfinished jobs to the admin dashboard.
    When a computation is stopped, cancel the current batch job. In the admin dashboard, do not show a cancel button for batch jobs related to continuous computations.
    Add a test to check that continuous computation classes are specified correctly, and introduce the concept of managers for one-off jobs.
    Create an admin dashboard for continuous computations.
    Fix a display error on the admin jobs dashboard.
    Remove all traces of the old feedback models.
    Disallow 'duplicate' status for feedback threads. Ensure that a new migration job cannot be started if the previous one is still running.
    First pass at feedback item migration
    Ensure that lists in the admin page and feedback editor are editable.
    Resolving merge problem.
    Add an dashboard in the admin page for jobs.
    Continue the Bootstrap 3 upgrade.
    First pass at upgrading to Bootstrap 3.
    Fix admin page by including some missing scripts. Move the RTE modal template into the HTML editor.
    Fix a CSS bug in the gallery pages, where the hover/click area for the gallery tiles was not being drawn correctly.
    Small improvements to the admin page.
    Allow owners, collaborators and playtesters of explorations to be set.
    Reinstate credits.
    Add config properties for editor prerequisites page.
    Make computed config properties refreshable.
    Change the editor page warning message to an announcement and make it HTML.
    Add the concept of computed configuration properties. Fix some errors in the behavior of discardChanges() on the exploration editor page.
    Allow configuration properties to be edited in the admin UI.
    Split admin page into HTML and JS parts.
    Add links to admin page in the main UI.
    Reloading all explorations is taking too long, so allow reloading of individual explorations in the admin page.
    Add config property model and CSRF protection.
    Add memcache performance counters.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Remove unneeded admin functionality.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Add an iframe widget.
    Use json.dumps() and JSON.parse() to pass parameters to widgets safely.
    Add an admin handler that allows reloading of the default explorations. Move the methods in controller_utils.py to the respective models/controllers.
    Add functionality for regenerating the search index.
    Deprecate file input widgets. Add a button in the admin dashboard to view job output.
    Remove oppiaRequestCreator and replace it with an HTTP request interceptor.
    Move to the recommended Angular .controller syntax.
    
    This follows the recommendation in the list of breaking changes
    for Angular 1.3.0 described at
    
        https://github.com/angular/angular.js/blob/master/CHANGELOG.md#130-beta15-unbelievable-advancement-2014-07-11
    When a computation is stopped, cancel the current batch job. In the admin dashboard, do not show a cancel button for batch jobs related to continuous computations.
    Create an admin dashboard for continuous computations.
    Set default headers for POST and PUT requests from the frontend.
    Disallow 'duplicate' status for feedback threads. Ensure that a new migration job cannot be started if the previous one is still running.
    Complete feedback item migration code.
    Resolving merge problem.
    Add an dashboard in the admin page for jobs.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Implement admin and moderator rights management.
    Add config properties for editor prerequisites page.
    Make computed config properties refreshable.
    Allow configuration properties to be edited in the admin UI.
    Split admin page into HTML and JS parts.
    Show an error message if an expression in an HTML field cannot be evaluated. Remove an unused interpolation method.
    Sanitize HTML before displaying it.
    Address review comments, and add a few unit tests.
    Keep share icon active when dropdown is open
    Edited many margins, changed drag icon, added blog link, changed tutorial curtain.
    Add tooltips to navbar icons in learner view
    Add demo 'About' exploration.
    Consolidate retrieval of interaction registry, and make it happen during page load.
    Address review comments.
    Move attribution guide to a common template, and move it out of the sidebar in the editor view.
    Address review comments
    Hide the 'edit exploration' button in the learner view navbar for users who cannot edit that exploration.
    Replace embed icon.
    Add feedback menu to top right of cards in learner view.
    Address comments
    Add schema.org metadata for sharing
    Specify a display mode for each interaction and adjust the learner view accordingly.
    Added correct user and oppia icons, Added icons next to input widgets, Removed submit button for single-row text input
    Fixed user and oppia icons
    Migrate the backend widget registries and the controllers.
    Refactor embedding into a service and add styling to share dropdown.
    Add share to google+ and embeding to navbar.
    Display the exploration title in the top navbar.
    Move local navigation in learner view to the navbar.
    Resolving comments.
    Client side eval -- compare against server eval.
    reolving comments.
    Adding exploration names to page titles for exploration editor and player pages. Issue 413.
    Client side eval -- compare against server eval.
    Fix more UI issues.
    
    (1) Fix overflowing interactive map widget.
    (2) Reverse the order of the cancel/submit buttons in the feedback modal in the learner view.
    (3) Add icons to the Edit and Preview buttons in the exploration editor page.
    (4) Adjust the width of the header row so that the control buttons fit in one line.
    (5) Allow the tutorial to be started properly when the user is in preview mode.
    (6) Widen the tutorial tooltip for the initial step, and remove the step numbers in the red circles.
    (7) Make some CSS fixes to the exploration editor for the case when the exploration is not editable by the current user.
    Small usability/bug fixes.
    
    (1) Use different symbol for 'Look inside' button.
    (2) Make feedback links go to the exploration editor feedback tab.
    (3) Clarify exploration permissions.
    (4) In integration tests, clear the RTE before appending content.
    (5) Fix timestamps in moderator page.
    Make it possible to view player skins in the editor view.
    Move skin templates into directives. This is in preparation for allowing preview mode in the editor view -- we can then load all of these templates in the editor view at the outset and invoke them with HTML tags when necessary.
    Remove unnecessary warning on reader view of unpublished exploration.
    Add a system for handling dependencies of widgets that include additional angular modules.
    Move each skin to its own directory. Load only the HTML template, and let that template load everything else.
    Feedback submitted at the END state should automatically refer to the entire exploration.
    Address review comments. Move feedback modal template up to exploration_player.html.
    First pass at defining a common core for pluggable skins.
    Address review comments.
    Add a simple framework for handling widget dependencies.
    By default, hide beta explorations in both galleries.
    Remove the 'center' tag, which is deprecated in HTML5.
    Move JS code for individual widgets from its temporary home in templates/dev/head/components to the extensions/widgets directory.
    Convert interactive widgets to Angular directives.
    
    This has the following advantages:
    (a) speed: the interactive widgets now load faster because there is no
    need for a second request to the server to populate the iframe.
    (b) no more monkeying around with the parent container to handle iframe
    height changes
    (c) less boilerplate is needed for each individual widget
    (d) there is no need to reload JS libraries separately for the widget,
    since these libraries will have already been included in the container page.
    Delay loading of the coding widget until its height can be determined.
    Allow old versions of explorations to be linked to.
    Add more controller tests.
    Minor UI changes, including fixing wording on About page, adding a 'Beta' subtitle, and making the widget preview less opaque.
    Tighten up the implementation of user settings and rights.
    Display rules that are confusing more prominently. Fix an XSS bug.
    Add code and tests for handling viewing rights to an exploration.
    Complete end-to-end display of noninteractive video and hints widgets. Remove unneeded code.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Implement pluggable skins.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    More angular style reader_exploration.html.
    Multiple choice static rendering.
    Reorganize frontend JS files, partitioning them into 'apps'.
    Improvements to the UI: add instructions to the exploration editor state diagram, add cancel buttons to the exploration metadata editors, and lighten the color of the reader conversation log so that the most recent interaction stands out.
    Scroll down after Oppia emits feedback.
    Responsive CSS changes.
    Changes to the UI
    Highlight Oppia's last response instead of the reader's answer.
    Reduce height of interactive widget display. Remove a line from tests.
    Fixes to the main page.
    Fix typo in Congratulations text (thanks to Matt Bachmann)
    Fix an error where clicking 'try again' on the sample exploration loads a new page
    Making reset easy via "Play again?" links
    Moving existing widgets to use the static/ directory.
    Improving the look-and-feel of the reader exploration interface
    Add a sample exploration to the home page
    Allow reader exploration page to be reset
    Streamlining warnings behaviour
    Renaming standard and output directories to dev and prod respectively.
    Making interactive widgets work
    Removing _new suffix from new file names
    Make the index page spiffy. Add login functionality to editor views and display the login/logout status in the navbar.
    Updating reader UI
    Adding an index page, and simplifying some of the backend logic
    Modifying the individual exploration page.
    Creating a new set of HTML, JS and CSS files for a redesigned Oppia frontend
    Add validation for the new EndConversation interaction, and hide its rule display.
    Show an error message if an expression in an HTML field cannot be evaluated. Remove an unused interpolation method.
    Fix several issues uncovered during testing.
    
    1. Display a more comprehensible message when malformed expressions are used.
    2. Make && and || return booleans.
    3. Close the parameter change editor (possibly saving unsaved changes) if an external change arises.
    4. Display a warning if an invalid parameter name is used.
    Sanitize HTML before displaying it.
    Move exploration parameter specs to a standalone service.
    Rewrite the test exploration to include parameters. Unescape text in expressions that was entered using an HTML editor so that it can be evaluated.
    Move initial parameter evaluation to use the client-side framework.
    Update binary search exploration to (partially) use new expression syntax.
    
    Still TODO:
    - initial params + content
    - group all expressions into an array and make a single call to the client/server evaluation service
    - convert the rest of the binary search exploration (exponentiation, log, if/else)
    - add a test for the case where multiple parameters are set within a state and rely on each other
    Update expressions README. Fix error in parsing of functions. Ensure that all expressions in a string with multiple expressions are parsed, not just the first one.
    Fix a couple of issues detected when testing the expression framework with the binary search exploration.
    Tidy up the expression evaluation code to the point that the sample exploration registers no differences between the client and server evaluations.
    Address review comments, and add a few unit tests.
    Client side eval -- compare against server eval.
    Client side eval -- compare against server eval.
    Extract parameter store into a separate service and add tests for it.
    Convert the timerService into a stopwatch provider service that returns stopwatch instances.
    Tidy up the player services API. Add tests for the timer service.
    Clean up images folder.
    Require the user to explicitly select the interaction for each state.
    Show intro card image in editor preview.
    Use better images for the gallery thumbnails and the exploration intro card.
    Show user profile image as learner icon
    Remove the 'widget_sticky' setting.
    Consolidate retrieval of interaction registry, and make it happen during page load.
    Address review comments.
    Add validation for the new EndConversation interaction, and hide its rule display.
    First pass at an 'end conversation' interaction.
    Allow clicking outside a modal to dismiss it
    Only autofocus on interaction inputs in the learner view.
    Add feedback menu to top right of cards in learner view.
    Show the learner's answer immediately after they submit it.
    Add schema.org metadata for sharing
    Specify a display mode for each interaction and adjust the learner view accordingly.
    Make 'preview mode' into a separate tab.
    Complete the deprecation of 'widget'.
    Migrate the backend widget registries and the controllers.
    Refactor embedding into a service and add styling to share dropdown.
    Add share to google+ and embeding to navbar.
    Move local navigation in learner view to the navbar.
    Add call to 'maybe leave' handler.
    Remove more unneeded code for server-side parameter evaluation.
    Remove functionality for server-side parsing of expressions.
    Fix typo.
    Fix invalid parameter specification in the demo counting exploration. Fix a merge error.
    Change 'View Source' back to 'Look Inside'.
    Fix several issues uncovered during testing.
    
    1. Display a more comprehensible message when malformed expressions are used.
    2. Make && and || return booleans.
    3. Close the parameter change editor (possibly saving unsaved changes) if an external change arises.
    4. Display a warning if an invalid parameter name is used.
    Fix some confusing user flows. In particular, change 'Look Inside' to 'Edit' on the learn page if the user has edit privileges.
    Rewrite the test exploration to include parameters. Unescape text in expressions that was entered using an HTML editor so that it can be evaluated.
    Move initial parameter evaluation to use the client-side framework.
    Add a floor function. Fix incorrect warning message.
    Coerce numeric values to Numbers before running evaluation operations on them.
    Make a call to the server only if client evaluation of expressions fails.
    Fix a couple of issues detected when testing the expression framework with the binary search exploration.
    Tidy up the expression evaluation code to the point that the sample exploration registers no differences between the client and server evaluations.
    Address review comments, and add a few unit tests.
    Client side eval -- compare against server eval.
    Fix error in PlayerServices.js file that was causing integration test failures in editor preview mode.
    Refactor init() method in PlayerServices to pass specific parameters to the learner skin (rather than a generic data blob).
    Fix a bug in which the ruleSpec data from the classifier wasn't being sent to the answer recording handler.
    UI fixes based on user tests:
    
    (1) Change phrasing for 'misspelled by one character' rule.
    (2) Remove the sentence in save-exploration modal that suggests a status change to the exploration.
    (3) Autofocus to title in gallery modal when the 'create new' button is clicked.
    (4) Autofocus to the corresponding create-new-state text box after a new state has just been created.
    (5) Add a loading indicator when the content for a new state is loading in the learner view.
    (6) Make the exploration map modal bigger.
    Client side eval -- compare against server eval.
    Resolving concerns.
    Resolving concerns.
    Change that supresses the warning message that pops up when trying to navigate away or reset an exploration while in preview mode. Issue 416.
    Use a different method to pass the rule input_type to the frontend.
    Break the state transition handler into multiple handlers, similar to what is done in editor preview mode.
    Fix lots of small bugs.
    
    (1) In the MusicNotesInput widget, rename 'play desired sequence' to 'play target sequence'.
    (2) In NumericInput view for the learner's input, do not show integers as floats.
    (3) In the TextInput widget, improve the description of the 'rows' field.
    (4) Rename Code REPL widget to 'Code input'.
    (5) In the MusicNotesInput widget, change the 'Add Note' button to make it clear what type of note is being referred to (a music note, not a comment).
    (6) Rename 'Tutorial' to 'Walkthrough' (the former sounds like 'manual').
    (7) Disable 'look inside' functionality in preview mode.
    (8) Add Amy's name to credits.
    (9) Show edit buttons in gallery for moderators (issue 373).
    (10) Fix broken loading when the history tab in the exploration editor is shown on initial load.
    (11) Fix the broken revert modal in history tab (the link to try out the old version did not work).
    (12) Move the 'create' button nearer to the 'add new state' input field.
    (13) Move the learner answer div styling to a common location in the conversation skin view.
    (14) Allow states defined in rules to use '.' (issue 166).
    (15) Add moderator page to profile menu (issue 374).
    Address review comments.
    Show parameter values in editor preview.
    Add a live-preview mode to the exploration editor.
    Address review comments.
    Make it possible to view player skins in the editor view.
    Move skin templates into directives. This is in preparation for allowing preview mode in the editor view -- we can then load all of these templates in the editor view at the outset and invoke them with HTML tags when necessary.
    Prep for migration to stats jobs
    1. Stop writing to State Counter (old style) models
    2. Migrate all uses of current state counters over to aggregator
    3. Update aggregator to use both old and new models correctly
    4. Create one off job to deal with the overlap between these two systems
    Move more of the reader feedback handler logic to the frontend.
    Extract parameter store into a separate service and add tests for it.
    In the learner view, load the entire exploration at the outset, and move the construction of the interactive widget HTML tags to the frontend.
    Fix bug in PlayerServices that caused exploration version numbers to be ignored.
    Remove oppiaRequestCreator and replace it with an HTTP request interceptor.
    Parameter non-interactive widget.
    Initialize _startTime in the Stopwatch constructor rather than the prototype.
    Convert the timerService into a stopwatch provider service that returns stopwatch instances.
    Feedback submitted at the END state should automatically refer to the entire exploration.
    Address review comments. Move feedback modal template up to exploration_player.html.
    Tidy up the player services API. Add tests for the timer service.
    First pass at defining a common core for pluggable skins.
    Split about page into two. Minor linting fixes.
    Update text on About and Gallery pages.
    Changed a few pages into cards, fixed other margins.
    Add Debanshu to list of authors.
    Add demo 'About' exploration.
    Fixed right quick links menu, added smooth scrolling.
    Restyle About page.
    Restyle the interactions menu.
    Move 'About' and 'Forum' to the navbar. Add breadcrumbs on all pages.
    Update credits list.
    Change several instances of http to https. Simplify search query code slightly.
    Fixed lint issues
    Changed CC attribution in explorations to be icon and small link, added anchor in About page to the license.
    Merge sidebar/navbar changes.
    Move to the new color scheme, and add Angela's logos.
    Update AUTHORS and CONTRIBUTORS files, and the About page.
    Bump the version number to v1.2.11 and update the changelog. Add names of new contributors to the About page.
    Fix lots of small bugs.
    
    (1) In the MusicNotesInput widget, rename 'play desired sequence' to 'play target sequence'.
    (2) In NumericInput view for the learner's input, do not show integers as floats.
    (3) In the TextInput widget, improve the description of the 'rows' field.
    (4) Rename Code REPL widget to 'Code input'.
    (5) In the MusicNotesInput widget, change the 'Add Note' button to make it clear what type of note is being referred to (a music note, not a comment).
    (6) Rename 'Tutorial' to 'Walkthrough' (the former sounds like 'manual').
    (7) Disable 'look inside' functionality in preview mode.
    (8) Add Amy's name to credits.
    (9) Show edit buttons in gallery for moderators (issue 373).
    (10) Fix broken loading when the history tab in the exploration editor is shown on initial load.
    (11) Fix the broken revert modal in history tab (the link to try out the old version did not work).
    (12) Move the 'create' button nearer to the 'add new state' input field.
    (13) Move the learner answer div styling to a common location in the conversation skin view.
    (14) Allow states defined in rules to use '.' (issue 166).
    (15) Add moderator page to profile menu (issue 374).
    Minor changes to wording on splash and About pages.
    Bump the version number to v1.2.9 and update the changelog. Add new contributors to the CONTRIBUTORS file and credits page.
    Add Xinyu and Brett to the credits list.
    Add Shantanu to the list of contributors.
    Make tab links work in production. There was a minification error due to JS comments in HTML files being erroneously collapsed onto one line (which had the effect of commenting out subsequent lines as well).
    Add Michael and Frederik to the list of contributors.
    Resolving merge problem.
    First pass at upgrading to Bootstrap 3.
    Fix tab navigation error. Make small change to naming of the 'How to use Oppia' page.
    Rename 'playtest gallery' to 'playtest queue'. Rewrite the publish modal.
    Add Amit to the CONTRIBUTORS file.
    Update AUTHORS and CONTRIBUTORS files.
    Fix a number of issues discovered during testing (thanks to Jacob).
    
    1) Rename "site guidelines" to "how to use this site"
    2) Make the "Address this feedback" link in the stats viewer link to the state editor, rather than the main exploration tab.
    3) Add a specific warning message if there is a feedbackless self-loop for a default rule.
    4) Format the feedback messages in the user profile as a table.
    Create a new site guidelines page and clarify some of the wording.
    Minor edits to explanations of how beta mode works
    Add explanation of how beta mode works.
    Add a noninteractive collapsible widget.
    Fix some broken tests.
    Add links to Yana's exploration design tips. Merge the About and License pages.
    Remove the existing music note widget.
    Minor fixes for login/logout buttons. Remove unused images.
    Added tabs to about page
    restyled about page
    Minor UI changes, including fixing wording on About page, adding a 'Beta' subtitle, and making the widget preview less opaque.
    Reinstate credits.
    Revise the wording for the static pages.
    Fix some wording in the static pages.
    Tidy up outstanding issues with the script that embeds explorations in other pages, making it fully functional and allowing it to show error messages where appropriate. Fix the number of tests run (which the previous commit forgot to change).
    Add more messaging to the exploration feedback modal. Move the general feedback page (that was linked from the navbar) to a 'contact us' page linked from the footer.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Restructuring the view directories more intuitively.
    More tweaks to the About page.
    Cosmetic revisions to the code for simple pages.
    Adding titles to pages.
    Wording changes
    Add an 'About Oppia' page
    Split about page into two. Minor linting fixes.
    Update text on About and Gallery pages.
    Changed a few pages into cards, fixed other margins.
    Add Debanshu to list of authors.
    Add demo 'About' exploration.
    Fixed right quick links menu, added smooth scrolling.
    Restyle About page.
    Restyle the interactions menu.
    Move 'About' and 'Forum' to the navbar. Add breadcrumbs on all pages.
    Update credits list.
    Change several instances of http to https. Simplify search query code slightly.
    Fixed lint issues
    Changed CC attribution in explorations to be icon and small link, added anchor in About page to the license.
    Merge sidebar/navbar changes.
    Move to the new color scheme, and add Angela's logos.
    Update AUTHORS and CONTRIBUTORS files, and the About page.
    Bump the version number to v1.2.11 and update the changelog. Add names of new contributors to the About page.
    Fix lots of small bugs.
    
    (1) In the MusicNotesInput widget, rename 'play desired sequence' to 'play target sequence'.
    (2) In NumericInput view for the learner's input, do not show integers as floats.
    (3) In the TextInput widget, improve the description of the 'rows' field.
    (4) Rename Code REPL widget to 'Code input'.
    (5) In the MusicNotesInput widget, change the 'Add Note' button to make it clear what type of note is being referred to (a music note, not a comment).
    (6) Rename 'Tutorial' to 'Walkthrough' (the former sounds like 'manual').
    (7) Disable 'look inside' functionality in preview mode.
    (8) Add Amy's name to credits.
    (9) Show edit buttons in gallery for moderators (issue 373).
    (10) Fix broken loading when the history tab in the exploration editor is shown on initial load.
    (11) Fix the broken revert modal in history tab (the link to try out the old version did not work).
    (12) Move the 'create' button nearer to the 'add new state' input field.
    (13) Move the learner answer div styling to a common location in the conversation skin view.
    (14) Allow states defined in rules to use '.' (issue 166).
    (15) Add moderator page to profile menu (issue 374).
    Minor changes to wording on splash and About pages.
    Bump the version number to v1.2.9 and update the changelog. Add new contributors to the CONTRIBUTORS file and credits page.
    Add Xinyu and Brett to the credits list.
    Add Shantanu to the list of contributors.
    Make tab links work in production. There was a minification error due to JS comments in HTML files being erroneously collapsed onto one line (which had the effect of commenting out subsequent lines as well).
    Add Michael and Frederik to the list of contributors.
    Resolving merge problem.
    First pass at upgrading to Bootstrap 3.
    Fix tab navigation error. Make small change to naming of the 'How to use Oppia' page.
    Rename 'playtest gallery' to 'playtest queue'. Rewrite the publish modal.
    Add Amit to the CONTRIBUTORS file.
    Update AUTHORS and CONTRIBUTORS files.
    Fix a number of issues discovered during testing (thanks to Jacob).
    
    1) Rename "site guidelines" to "how to use this site"
    2) Make the "Address this feedback" link in the stats viewer link to the state editor, rather than the main exploration tab.
    3) Add a specific warning message if there is a feedbackless self-loop for a default rule.
    4) Format the feedback messages in the user profile as a table.
    Create a new site guidelines page and clarify some of the wording.
    Minor edits to explanations of how beta mode works
    Add explanation of how beta mode works.
    Add a noninteractive collapsible widget.
    Fix some broken tests.
    Add links to Yana's exploration design tips. Merge the About and License pages.
    Remove the existing music note widget.
    Minor fixes for login/logout buttons. Remove unused images.
    Added tabs to about page
    restyled about page
    Minor UI changes, including fixing wording on About page, adding a 'Beta' subtitle, and making the widget preview less opaque.
    Reinstate credits.
    Revise the wording for the static pages.
    Fix some wording in the static pages.
    Tidy up outstanding issues with the script that embeds explorations in other pages, making it fully functional and allowing it to show error messages where appropriate. Fix the number of tests run (which the previous commit forgot to change).
    Add more messaging to the exploration feedback modal. Move the general feedback page (that was linked from the navbar) to a 'contact us' page linked from the footer.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Restructuring the view directories more intuitively.
    More tweaks to the About page.
    Cosmetic revisions to the code for simple pages.
    Adding titles to pages.
    Wording changes
    Add an 'About Oppia' page
    Move 'About' and 'Forum' to the navbar. Add breadcrumbs on all pages.
    Address Amit's comments from release testing.
    
    1) Rework the 'Compare revisions' button and surrounding text in the exploration history tab.
    2) Make button layout more consistent across the editor and gallery pages.
    3) Remove header on forum page.
    4) Right-align 'Create New Exploration' button in gallery with the individual gallery tiles.
    5) Remove some text in the 'publish exploration' modal.
    Add a forum page to the site.
    Make rich-text component loading happen at the same time as the page load.
    Do not hide the 'add item' button for a list whose elements have choices.
    Do not allow rules to be saved if their descriptions are invalid.
    Removed focus from active element on form submission that happens on existing element
    Refactor code that uses interactions and RTE components to distinguish properly between customization_arg_specs and customization_args.
    Only hide the 'add item' button for lists whose items are single-line unicode strings.
    Added comments to modification on set input form submission
    Allow clicking outside a modal to dismiss it
    Only autofocus on interaction inputs in the learner view.
    Added parand around continue button, fixed positioning of delete button on set input fields, fixed form submission attempt from existing set input fields
    Fix issue 488: do not show a warning for numeric input when the input field is in focus.
    Fixed nits from Sean's comments
    Implemented hide/show of 'Add Item' button on Set Input
    Propagate blur events from text, int and float fields within a list.
    Change several instances of http to https. Simplify search query code slightly.
    Complete the deprecation of 'widget'.
    Migrate the backend widget registries and the controllers.
    First half of the work needed to rename widgets to interactions/rich-text-components.
    Change 'disabled' attribute to 'is-disabled' in forms. This was causing problems in IE browsers.
    Forbid multiple-choice questions from having zero choices.
    Turned expression parser and evaluator into angular services.
    Expression validator for schema based editor.
    Add listener to enter key for set widget. Fix integration test.
    More fixes to the editor view.
    
    (1) Pull interaction selector out of the customization view.
    (2) Dismiss warnings when rules are changed.
    (3) Shorten the labels for the 'save changes' and 'discard changes' buttons.
    (4) Fix issue #147: show an error message when an invalid link is saved.
    Allow expression editor to take any string.
    Further UI improvements to the state content and interaction editors. Change the default initial state name.
    Add a validator for testing the maximum length of a list.
    Add a welcome message to the content editor and more contextual feedback to the interaction editor.
    Redesign the editor rules interface. Also make the behavior of the 'save changes' button more responsive.
    Remove autofocus from interactive widgets since this is distracting in the editor view. Add disabled options to the unicode editor and add a placeholder customization option to the ui_config.
    Add a size option for the schema-based HTML input form, and convert the state content and feedback RTEs to use it.
    Move HTML editor code to the schema-based editor files.
    Add codemirror view for customization args that have code-type values.
    Add focus management, allowing focus to be set when a new list item is added. Fix some tests.
    Remove uniquify post_normalizer and replace it with frontend and backend validators.
    Start migrating post_normalizers to validators, and add a few more custom error messages.
    Move code for forms to its own directory. Fix small bug in float validator.
    Change 'parameter' to 'expression' in form builders. Separate out the viewer mode to reduce the cyclomatic complexity.
    Move the overall schema form template to the test file.
    Rewrite the music note input editor to make use of the new schema-based forms framework.
    Remove require_is_one_of normalizer, which is not needed anymore given that we have 'choices'. Add some inline validation.
    Allow multiple-choice selection in input fields.
    Minor housekeeping changes.
    
    (1) Remove the no-longer-used TabEditor templates.
    (2) Change the 'Add element' text for the noninteractive tab widget.
    (3) Fix an error in the scope specification for the custom editor template (using the '&' option caused the recursionHelper to throw an error on initial load).
    Amend widget customization args specification to use a schema with type 'custom', rather than a separate 'custom_editor' field.
    Add some UI customization options to the form builders. In particular:
    
    (a) Allow descriptions to be specified for dict fields.
    (b) Allow customization of 'Add element' buttons for lists.
    (c) Allow the number of rows in a unicode field to be specified.
    Change the schema for dict fields to specify the properties as a list, so that the corresponding fields can be ordered appropriately in the editor view.
    Set default values for additional types of forms. Update localValue for RTE, so that the RTE content is updated if it is part of a list and a previous element gets deleted.
    Make the new widget specifications work in the frontend editor and reader views.
    Implement frontend checking for the length of a list.
    Add a preview mode to the form builders.
    Rename the frontend schema_editor files to form_builder.
    Drop debug outputs.
    Fix for convertHtmlWithParamsToUnicode logic and double click handler.
    Add enclosing span to oppia-parameter during rte editting.
    Continue cleaning up the unicode editor code. Add validation each time the content of the RTE is changed.
    Integrate the new unicode editor with the examples on the demo page. Tidy up its UI.
    Address review comments; rework parsing logic.
    When the user opens the add-parameter modal and then clicks cancel, the document should be unaffected.
    Make oppia-parameter tags in the unicode editor into noneditable elements, and fix several other bugs.
    Add a fancy editor for unicode objects that allows incorporation of parameters.
    Add parameter functionality to float editors.
    Add parameter functionality to int editors.
    Add support for parameters in boolean forms.
    Add more frontend validation functionality.
    First attempt at adding form validation.
    Add editors for numeric values.
    Remove HTML construction in JS and use directive templates instead. Address review comments.
    Add normalizers framework. Add frontend HTML code and tests for schema-based editors.
    Numerous small changes for new rule editor.
    Do not hide the 'add item' button for a list whose elements have choices.
    Make float editors display inline and change the location of the error messages.
    Do not allow rules to be saved if their descriptions are invalid.
    Removed focus from active element on form submission that happens on existing element
    Refactor code that uses interactions and RTE components to distinguish properly between customization_arg_specs and customization_args.
    Only hide the 'add item' button for lists whose items are single-line unicode strings.
    Only autofocus on interaction inputs in the learner view.
    Added parand around continue button, fixed positioning of delete button on set input fields, fixed form submission attempt from existing set input fields
    Fix issue 488: do not show a warning for numeric input when the input field is in focus.
    Fix text area bug that causes it to overlap with content
    Fixed nits from Sean
    Focused input styling. Blue for active input and red for input error
    Update protractor tests.
    Changed a few margins, replaced arrows with 'destination'.
    Implemented hide/show of 'Add Item' button on Set Input
    Prevent long text submission from spanning out of card edges, modified scrolling logic to always go to bottom of page, fixed placement of float input
    Added a card around supplemental interactions and modified set input layout
    Propagate blur events from text, int and float fields within a list.
    Remove widget_domain, replacing it with two base classes for interactions and rich-text components.
    Migrate the backend widget registries and the controllers.
    First half of the work needed to rename widgets to interactions/rich-text-components.
    Protractor tests: Switch editor and player utilities to using protractor-specific classes where possible. Also remove some instances of 'widget'.
    Modified numeric, text, continue, coderepl and graph input to use material design
    Change 'disabled' attribute to 'is-disabled' in forms. This was causing problems in IE browsers.
    Forbid multiple-choice questions from having zero choices.
    Protractor tests: add tests for non-interactive widgets and the rich-text editor. In the process refactor the test code for widgets, objects and forms.
    Expression validator for schema based editor.
    Add listener to enter key for set widget. Fix integration test.
    Renamed interactions for consistency, added padding to rule headings and buttons.
    Address review comments.
    Allow expression editor to take any string.
    Add a validator for testing the maximum length of a list.
    Button margin and alignment adjustments.
    Remove autofocus from interactive widgets since this is distracting in the editor view. Add disabled options to the unicode editor and add a placeholder customization option to the ui_config.
    Add a size option for the schema-based HTML input form, and convert the state content and feedback RTEs to use it.
    Move HTML editor code to the schema-based editor files.
    Use the new schema-based forms for real-number editors.
    Add codemirror view for customization args that have code-type values.
    Add focus management, allowing focus to be set when a new list item is added. Fix some tests.
    Remove uniquify post_normalizer and replace it with frontend and backend validators.
    Start migrating post_normalizers to validators, and add a few more custom error messages.
    Move code for forms to its own directory. Fix small bug in float validator.
    Change 'parameter' to 'expression' in form builders. Separate out the viewer mode to reduce the cyclomatic complexity.
    Use a checkbox as the input view for pure boolean variables.
    Add form validation for float input.
    Move the overall schema form template to the test file.
    Remove require_is_one_of normalizer, which is not needed anymore given that we have 'choices'. Add some inline validation.
    Various UI and functionality fixes.
    
    (a) Add tests for the HTML and JSON escapers
    (b) Handle scope inheritance properly in the custom editors
    (c) Remove confirmation dialog on widget change
    (d) Remove obtrusive warning message for missing objectives
    (e) Fix typo and unescaping in logic proof widget
    Allow multiple-choice selection in input fields.
    Minor housekeeping changes.
    
    (1) Remove the no-longer-used TabEditor templates.
    (2) Change the 'Add element' text for the noninteractive tab widget.
    (3) Fix an error in the scope specification for the custom editor template (using the '&' option caused the recursionHelper to throw an error on initial load).
    Amend widget customization args specification to use a schema with type 'custom', rather than a separate 'custom_editor' field.
    Add some UI customization options to the form builders. In particular:
    
    (a) Allow descriptions to be specified for dict fields.
    (b) Allow customization of 'Add element' buttons for lists.
    (c) Allow the number of rows in a unicode field to be specified.
    Change the schema for dict fields to specify the properties as a list, so that the corresponding fields can be ordered appropriately in the editor view.
    Make the new widget specifications work in the frontend editor and reader views.
    Implement frontend checking for the length of a list.
    Add a preview mode to the form builders.
    Rename the frontend schema_editor files to form_builder.
    Integrate the new unicode editor with the examples on the demo page. Tidy up its UI.
    Add a fancy editor for unicode objects that allows incorporation of parameters.
    Add parameter functionality to float editors.
    Add parameter functionality to int editors.
    Add support for parameters in boolean forms.
    Add a list subfield to the test dict form.
    Remove deletion control from noneditable list UI. Show the saved values on the test page.
    Add more frontend validation functionality.
    First attempt at adding form validation.
    Add editors for numeric values.
    Remove HTML construction in JS and use directive templates instead. Address review comments.
    Change 'disabled' attribute to 'is-disabled' in forms. This was causing problems in IE browsers.
    Add codemirror view for customization args that have code-type values.
    Add focus management, allowing focus to be set when a new list item is added. Fix some tests.
    Move code for forms to its own directory. Fix small bug in float validator.
    Change 'parameter' to 'expression' in form builders. Separate out the viewer mode to reduce the cyclomatic complexity.
    Move the overall schema form template to the test file.
    Make the new widget specifications work in the frontend editor and reader views.
    Add a preview mode to the form builders.
    Rename the frontend schema_editor files to form_builder.
    Integrate the new unicode editor with the examples on the demo page. Tidy up its UI.
    Make oppia-parameter tags in the unicode editor into noneditable elements, and fix several other bugs.
    Add a fancy editor for unicode objects that allows incorporation of parameters.
    Add parameter functionality to int editors.
    Remove deletion control from noneditable list UI. Show the saved values on the test page.
    Add more frontend validation functionality.
    Do not load new object editor directives in the main templates until the whole object editing framework is ready.
    Remove HTML construction in JS and use directive templates instead. Address review comments.
    Add normalizers framework. Add frontend HTML code and tests for schema-based editors.
    Change 'disabled' attribute to 'is-disabled' in forms. This was causing problems in IE browsers.
    Add codemirror view for customization args that have code-type values.
    Start migrating post_normalizers to validators, and add a few more custom error messages.
    Move code for forms to its own directory. Fix small bug in float validator.
    Change 'parameter' to 'expression' in form builders. Separate out the viewer mode to reduce the cyclomatic complexity.
    Move the overall schema form template to the test file.
    Remove require_is_one_of normalizer, which is not needed anymore given that we have 'choices'. Add some inline validation.
    Allow multiple-choice selection in input fields.
    Add some UI customization options to the form builders. In particular:
    
    (a) Allow descriptions to be specified for dict fields.
    (b) Allow customization of 'Add element' buttons for lists.
    (c) Allow the number of rows in a unicode field to be specified.
    Change the schema for dict fields to specify the properties as a list, so that the corresponding fields can be ordered appropriately in the editor view.
    Set default values for additional types of forms. Update localValue for RTE, so that the RTE content is updated if it is part of a list and a previous element gets deleted.
    Make the new widget specifications work in the frontend editor and reader views.
    Implement frontend checking for the length of a list.
    Rename the frontend schema_editor files to form_builder.
    Move to the recommended Angular .controller syntax.
    
    This follows the recommendation in the list of breaking changes
    for Angular 1.3.0 described at
    
        https://github.com/angular/angular.js/blob/master/CHANGELOG.md#130-beta15-unbelievable-advancement-2014-07-11
    Integrate the new unicode editor with the examples on the demo page. Tidy up its UI.
    Add a fancy editor for unicode objects that allows incorporation of parameters.
    Add parameter functionality to float editors.
    Add parameter functionality to int editors.
    Add support for parameters in boolean forms.
    Add a list subfield to the test dict form.
    Add more frontend validation functionality.
    First attempt at adding form validation.
    Add editors for numeric values.
    Add normalizers framework. Add frontend HTML code and tests for schema-based editors.
    First half of the work needed to rename widgets to interactions/rich-text-components.
    Upgrade Angular to v1.3.0-rc.5 and jQuery to v2.1.1.
    Move HTML editor code to the schema-based editor files.
    Start migrating post_normalizers to validators, and add a few more custom error messages.
    Move code for forms to its own directory. Fix small bug in float validator.
    Remove require_is_one_of normalizer, which is not needed anymore given that we have 'choices'. Add some inline validation.
    Rename the frontend schema_editor files to form_builder.
    Integrate the new unicode editor with the examples on the demo page. Tidy up its UI.
    Address review comments; rework parsing logic.
    Add another test for html-unicode conversion.
    Add a fancy editor for unicode objects that allows incorporation of parameters.
    Add tests for filters.
    Use separate CSS files for the HTML and unicode editors, since line wrapping works differently in both cases.
    Continue cleaning up the unicode editor code. Add validation each time the content of the RTE is changed.
    Integrate the new unicode editor with the examples on the demo page. Tidy up its UI.
    Address review comments; rework parsing logic.
    Add a fancy editor for unicode objects that allows incorporation of parameters.
    Add a CSS stylesheet for the editor RTE.
    Ensure images display properly in multiple-choice rule editor. Add additional validation to image click input region labels.
    Added additional margins and other small wording changes.
    Clean up images folder.
    Numerous changes to editor page.
    Edits to improve responsiveness
    - Hide picture, objective and creation date in dashboard
    - Increase margins around titles
    Prevent navbar link from remaining active after clicking
    Split the dashboard into two different pages.
    Address review comment.
    Changed a few pages into cards, fixed other margins.
    Changed the Interaction and interface for edit button on exploration tiles
    Resolving comments and adding tests for dashboard.
    Add additional .skipBtn class to make tutorial skip button selector more explicit.
    Remove the 'skip' icon from the editor tutorial.
    Resolving review comments.
    Fix the navbar, hide exploration description and image on small screens
    Add validation for rules and interaction customizations.
    Made numerous changes to tutorial, fixed broken tutorial scrolling.
    Edited many margins, changed drag icon, added blog link, changed tutorial curtain.
    Use better images for the gallery thumbnails and the exploration intro card.
    Redesigning the dashboard to include tiles similar to gallery. Issue 632.
    If user is not logged in, don't show interaction dropdown, and don't highlight rule section on hover.
    Changed width of share dropdown menu.
    Removed accidental empty CSS class.
    Made minor fixes to loading dots and scroll targets.
    Added more images for gallery.
    Numerous small changes for new rule editor.
    Changed small aspects of navbar, carousel, and images.
    Minor changes to alignment and wording of various labels and buttons.
    Move state parameter changes editor to sidebar. Also, various minor wording changes.
    Stop loading mesesage from disappearing prematurely. Remove accordion in editor sidebar.
    Redo scrolling behaviour.Ensure 'sign in' tab at top-right of page is clickable.
    Changed more colors and margins.
    Changed a lot of margins, font sizes, etc.
    Fixed right quick links menu, added smooth scrolling.
    Add drag-and-drop upload for images.
    Restyle the dashboard page to look more consistent with the rest of the site.
    Restyle About page.
    Add a dropdown for signing in.
    Move the 'create new state' option into the rule destination dropdown.
    1. Make splash page carousel scroll faster.
    2. Add 'Give Feedback' tab to sidebar.
    3. Remove 'Dashboard' tab from sidebar, and show notification counts in the top right instead.
    4. Vertically center splash page text.
    Partially working profile picture upload
    Address additional review comments
    Move state name from sidebar to main editor. Tidy up CSS for avatars.
    Address review comments
    Style the rule editor.
    Restyle the content and interaction parts of the state editor.
    Hide navbar elements when screen size is small
    Change username to default user icon
    Changed a few margins, darkened splash photos.
    Changed outlines and transparency values for top navbar items.
    Fix to navbar menus, gallery tile link, and linear gradient for interstitial (for Firefox compatibility).
    Numerous margin, positioning, and styling fixes for the exploration editor.
    Fixed more margin and spacing issues on the splash page.
    Change to linear-gradient for firefox compatibility and add a gradient for title in player
    Changed order and removed border on user dropdown menu.
    Changed wording, margins, and positioning of elements on splash page.
    Respond to review comments
    Replace intro-js with ng-joyride -- the former was leading to a buggy editor tutorial.
    Change interaction selector to two-tier system sorted by category
    Fixed nits from Sean
    Focused input styling. Blue for active input and red for input error
    Changed a few margins, replaced arrows with 'destination'.
    Minor tweaks to CSS of gallery page.
    Make adding new states from rules more explicit. Remove global 'add state' buttons.
    Make rule interior look nice.
    Restyle the exterior of the rule editor.
    Make the state rules section a little less prominent.
    Center the state cards in the editor view.
    Make sidebar content fixed.
    Add a carousel to the splash page.
    Redesign the gallery page.
    
    Still TODO:
    (a) Fix integration test for language and category selection.
    (b) Check if paging is needed for the no-query case.
    (c) Implement carousel.
    Partial implementation of search bar redesign.
    Restyle signup page.
    Add interstitial section to the gallery page.
    Small stylistic changes to the learner view and gallery page.
    Restyle the profile page. Allow incremental saving. Use language codes instead of languages.
    Move rule tabs to the bottom of the state editor.
    Move the rule tabs to the bottom of the state editor. Remove the 'next state' bar.
    Fixed nits suggested by Sean
    Switched multiple choice implementation from links to buttons
    Make the entire rule handler draggable, and move the draggable tabs to the left of the card.
    Update integration tests.
    Add a destination bar at the bottom of the state editor for navigating to the 'next' rule.
    Restyle rule editor to make the tabs clearer. Also, keep the correct rule tab open after sorting.
    Allow new rules to be added.
    Restyle the rule editor to use tabs.
    
    Remaining TODOs:
    - Fix the 'add rule' flow.
    - Remove isTmpRule, cancelEdit and protractor-test-temporary-rule.
    - Add fixed bar at the top/bottom for rule destinations.
    - Fix weird sorting behaviour.
    Split the rules section of the editor into its own controller.
    Remove header of subsequent state from editor view; remove 'click to see rules' button. Style the editor so that the layout looks nice.
    Add schema.org metadata for sharing
    Implementation of multiple choice using links
    Fixed nits as per Sean's comments
    Added correct user and oppia icons, Added icons next to input widgets, Removed submit button for single-row text input
    Fixed lint issues
    Alphabetized CSS
    Changed banner and search bar on splash page.
    Changed CC attribution in explorations to be icon and small link, added anchor in About page to the license.
    Fix issue 549: dropdown menu roots are not highlighting correctly.
    Address review comments.
    
    (1) Add proper tooltips to icons in navbar.
    (2) Reduce size of top-left Oppia icon to 40px height.
    (3) Change box-shadow of right sidebar to follow material design spec.
    (4) Standardize horizontal and vertical offsets of the titles of the various tabs.
    Restyle the login/signup links.
    More style edits
    Style edits and accounted for small queries; commented out interfering CSS
    Make the right sidebar a distinct section of the state editor page.
    Move exploration warnings to top navbar. Adjust sidebar position and add license information to it.
    Make 'preview mode' into a separate tab.
    Continue decluttering the state editor.
    In the state editor, show a snippet of a card for the next state where applicable.
    Hide the rules section by default.
    Add an outline of the new profile page.
    
    Note: this is just a skeleton, and is only marginally functional.
    Start redesigning the state editor.
    Remove widget_domain, replacing it with two base classes for interactions and rich-text components.
    Added row selector in feedback tab
    First half of the work needed to rename widgets to interactions/rich-text-components.
    Merge the gallery page and the splash page.
    Refactor embedding into a service and add styling to share dropdown.
    Response to code review of c4088eb7deba
    Modified numeric, text, continue, coderepl and graph input to use material design
    Display the exploration title in the top navbar.
    Add default images for the gallery tiles.
    Revamp the look-and-feel of the gallery tiles. Change background color on default banner image.
    Make the gallery page the homepage. Remove unused CSS rules. Update integration tests.
    Merge sidebar/navbar changes.
    Move to the new color scheme, and add Angela's logos.
    Show an error message if an expression in an HTML field cannot be evaluated. Remove an unused interpolation method.
    Fix some bugs in the Google Maps integration. Specifically, make the zoom show properly, and trigger a resize event when the map is first loaded in order to show all the map tiles.
    Change the size of the caret sign in oppia warnings
    Add IE-specific rules to CSS file.
    Issue 462: Search loading indicator: Fix style issues
    Issue 462: Search loading indicator: Add spinning animation
    Make tutorial buttons slightly larger.
    Changed bike vector image, removed min width from p tags in splash page.
    Fixed splash page spacing on small screens.
    Address review comments.
    Make the widget selector responsive.
    Remove unused styles.
    Combined saving, discarding, publishing, and nominating for release into a single button with a dropdown.
    Change interaction editor icon from a pencil to a cog (to suggest 'settings' or 'customization').
    Add new stages to the tutorial for the preview and save buttons; rewrite other parts to flow better. Fix issue with the part of tutorial that pertains to rules not displaying correctly. Fix integration tests.
    Changed Create New Exploration button size, changed placeholder text for search bar, reduced search debounce to 400ms
    Show the tutorial immediately for first-time users.
    UI fixes based on user tests:
    
    (1) Change phrasing for 'misspelled by one character' rule.
    (2) Remove the sentence in save-exploration modal that suggests a status change to the exploration.
    (3) Autofocus to title in gallery modal when the 'create new' button is clicked.
    (4) Autofocus to the corresponding create-new-state text box after a new state has just been created.
    (5) Add a loading indicator when the content for a new state is loading in the learner view.
    (6) Make the exploration map modal bigger.
    Removed splash image top margin, added blurred edges.
    Changed button hover colors, changed paragraph font size, made hero image smaller.
    Updated images, added horizontal separators, adjusted margins.
    Added call to action buttons.
    Changed hover color of new notification row in Dashboard.
    Address review comments. Standardize calls to datetime service.
    Show notification counts in the navbar and page title, where appropriate. Highlight new updates in the dashboard. Fix a couple of bugs in the settings and history tabs where the exploration data was not being fully loaded before the tab was displayed.
    Improve the rule destination selection interface by removing the search icon, adding targeted error messages, and adding '(New)' helper text.
    Remove on-hover effect for content and rule sections in non-editable mode.
    Fix graph height being too small in the editor statistics tab in Firefox.
    Fixed rule header pencil issue, minor CSS fixes.
    Renamed interactions for consistency, added padding to rule headings and buttons.
    More fixes to the editor view.
    
    (1) Pull interaction selector out of the customization view.
    (2) Dismiss warnings when rules are changed.
    (3) Shorten the labels for the 'save changes' and 'discard changes' buttons.
    (4) Fix issue #147: show an error message when an invalid link is saved.
    Fix more UI issues.
    
    (1) Fix overflowing interactive map widget.
    (2) Reverse the order of the cancel/submit buttons in the feedback modal in the learner view.
    (3) Add icons to the Edit and Preview buttons in the exploration editor page.
    (4) Adjust the width of the header row so that the control buttons fit in one line.
    (5) Allow the tutorial to be started properly when the user is in preview mode.
    (6) Widen the tutorial tooltip for the initial step, and remove the step numbers in the red circles.
    (7) Make some CSS fixes to the exploration editor for the case when the exploration is not editable by the current user.
    Fix lots of small bugs.
    
    (1) In the MusicNotesInput widget, rename 'play desired sequence' to 'play target sequence'.
    (2) In NumericInput view for the learner's input, do not show integers as floats.
    (3) In the TextInput widget, improve the description of the 'rows' field.
    (4) Rename Code REPL widget to 'Code input'.
    (5) In the MusicNotesInput widget, change the 'Add Note' button to make it clear what type of note is being referred to (a music note, not a comment).
    (6) Rename 'Tutorial' to 'Walkthrough' (the former sounds like 'manual').
    (7) Disable 'look inside' functionality in preview mode.
    (8) Add Amy's name to credits.
    (9) Show edit buttons in gallery for moderators (issue 373).
    (10) Fix broken loading when the history tab in the exploration editor is shown on initial load.
    (11) Fix the broken revert modal in history tab (the link to try out the old version did not work).
    (12) Move the 'create' button nearer to the 'add new state' input field.
    (13) Move the learner answer div styling to a common location in the conversation skin view.
    (14) Allow states defined in rules to use '.' (issue 166).
    (15) Add moderator page to profile menu (issue 374).
    Fix several bugs:
    
    1) Remove the obtrusive warning message when the objective field is blurred in the exploration settings page.
    2) Highlight the rule tiles properly on mouseover.
    3) If the interactive widget editor is open and the user navigates to preview mode, save the interactive widget first.
    4) Remove one click from the 'create new exploration' flow in the gallery page.
    5) Fix a bug where the numeric input widget was not accepting inputs of 0.
    6) Fix a display bug where the numeric input widget was aligned too far to the left.
    Create a controller for the exploration graph. Remove more occurrences of .
    Minor CSS changes.
    Additional UI fixes: spacing, click handlers, consistency.
    Some small CSS fixes.
    Minor cleanup fixes based on Jacob's comments
    Tweaked a lot of color, wording, and alignment issues in the exploration editor.
    Further UI improvements to the state content and interaction editors. Change the default initial state name.
    Add a welcome message to the content editor and more contextual feedback to the interaction editor.
    Redesign the editor rules interface. Also make the behavior of the 'save changes' button more responsive.
    Simplify the state editor.
    Remove several unnecessary borders.
    Simplify the widget customization interface.
    Completely refactor the state graph to use a template. In the process, fix a couple of bugs involving SVG defs not working in Firefox.
    Do not use ng-click for divs in gallery; links end up misdirecting. Also, hide the rule feedback editor behind a button so that multiple small changes to the text do not automatically trigger multiple save events.
    Simplify gallery UI layout.
    Fix animation of left nav in gallery.
    UI fixes for the gallery page:
    
    (1) Hide the edit buttons in mobile view.
    (2) Animate the left nav (this is not yet working fully correctly, though).
    (3) Fix issue with top navbar dropdowns not behaving correctly in mobile view.
    First pass at making the gallery view (somewhat) responsive.
    Change highlight color for Edit button, and only show it on explorations the user can edit.
    Some styling changes to address review comments.
    Show private explorations in gallery. Move the view/edit link to a button in the top-right of each gallery tile.
    Add checkbox groups for languages and beta/non-beta statuses.
    Consolidate the three galleries into a single public one.
    Add a size option for the schema-based HTML input form, and convert the state content and feedback RTEs to use it.
    Add form validation for float input.
    Add a preview mode to the form builders.
    Make sort tabs match the color of the rule header.
    Several UI improvements based on user feedback.
    
    * Change 'More info...' to question mark symbol.
    * Make 'Edit', 'Preview' links in the interactive widget accordion look clickable.
    * Reduce the left padding in the list of widget types.
    * Move the 'use this widget'/'cancel' buttons to the bottom of the widget editor, as is canonical.
    * Make the empty content placeholder message more positive.
    * Show navbar dropdowns on-hover.
    Add a test to check that continuous computation classes are specified correctly, and introduce the concept of managers for one-off jobs.
    Make the entire rule header draggable, and round off the top-left corner of the default rule tile.
    Added handle to sortable arrow
    Integrate the new unicode editor with the examples on the demo page. Tidy up its UI.
    Fixes for issues discovered during release testing and a few others.
    
    1. Add docstring for video id in the noninteractive video widget.
    2. Some $scope.$apply() calls are throwing errors in the frontend, and this is causing things like the code widget to fail silently (the 'Run' button never turns on). Add logging of frontend errors to the backend so that we can detect and fix these.
    3. Update ui-codemirror to a newer version in order to fix a $scope.$apply() error in the ui-codemirror library.
    4. Make images for options in multiple-choice questions smaller so that they don't overwhelm the rule editor.
    Add additional space between navbar and exploration editor content (this is based on Amit's commit). Move the state title to the right so it looks more centered.
    Changed sorting icon, restricted sorting handle to sorting icon.
    Changed rule dragging arrows to glyphicon resize arrows.
    Move each skin to its own directory. Load only the HTML template, and let that template load everything else.
    Further bug fixes.
    
    (a) Add a help link to the parameter changes section.
    (b) Display interactive map coordinates to 3 decimal places.
    (c) Correct a misleading rule name in the tar file rules.
    (d) Fix an issue with having black text on dark blue background in the navbar when a tab name is focused on.
    (e) Fix a bug with the exploration deletion flow.
    (f) Only show the delete button to exploration owners.
    Make exploration labels more explicit. Move publish button to top of page, rather than burying it in the Settings tab.
    Address review comments. Remove unnecessary space between the two columns of the state editor.
    Made some style modifications to the mini-graph and content-editor
    Fix size of destination bubble, modify some buttons in the UI to be smaller
    Build a UI for feedback threads and messages.
    Various bug fixes: (a) fix a minification issue, (b) ensure that lists are editable by default, (c) make the jwysiwyg rich-text editor responsive.
    Add links to read-only explorations in the Contribute gallery.
    Resolving merge problem.
    Address more review comments.
    Small fixes: add 'no objective' warning to the warnings list, fix unable-to-publish-exploration issue, make 'Done' buttons in rules smaller.
    More miscellaneous UI fixes. Added an expandable warnings bar below the save and discard buttons.
    Small wording changes. Redid the layout of the exploration settings page.
    Continue the Bootstrap 3 upgrade.
    First pass at upgrading to Bootstrap 3.
    Made contribution page and modal look a bit better
    Playtest styling fixes
    Add horizontal rule to state title, reduce height of parameter area, revamp 'add state' input box and button.
    Remove the fixed-width CSS for the exploration graph minimap container, so that it is not cut off by the right edge of the screen.
    Fixed code-styling issues, reverted rule editor so that the feedback and destination are on the same row.
    Replace many buttons with Bootstrap icons, place 'destination' right under the rule description, remove arrows from the default rule, change remove the word 'but' from the rule called 'but misspelled by one chracter', other minor styling changes for rule editor.
    Redo rule editor: place destination area in bottom of rule editor, update swap rule buttons, change Add new rule button, other misc. changes.
    Improve the UI for displaying objectives (and the warning to specify them if they aren't specified yet). Add objectives to existing demo explorations.
    Further fixes to the state graph visualizations: make nodes wide enough to contain their text, and fix an overlap issue between the maximize button and the graph nodes.
    Change size of exploration mini-map to 250x250, add border-radius, add margins to '+' button in mini-map.
    
    Still to do:
    -The blocks in the mini-map are currently drawn from the top left corner, they should be positioned by their centers.
    -There should be a panning animation when a block is clicked on, it's a bit confusing to jump between states at the moment.
    -The content gets clipped when the window is resized. The layout is rather confusing, and may need some refactoring.
    Make each state visualization graph detect the width and height of its container. Make the state graph minimap taller.
    playtest queue further redesign
    Primarily removed state editor from modal window into main editing area, turned exploration graph into a mini-map.
    bootstrap-ified playtest gallery table, to make further style standardization easier
    Fix a number of issues discovered during testing (thanks to Jacob).
    
    1) Rename "site guidelines" to "how to use this site"
    2) Make the "Address this feedback" link in the stats viewer link to the state editor, rather than the main exploration tab.
    3) Add a specific warning message if there is a feedbackless self-loop for a default rule.
    4) Format the feedback messages in the user profile as a table.
    Feedback list test updates and typo fixes.
    Remove several instances of &nbsp; characters; used CSS instead.
    Added exploration links to the profile page feedback list.
    Use a downward-left pointing pencil as the edit icon, so that the pencil points towards the item that is to be edited.
    Feedback list test updates and typo fixes.
    Remove several instances of &nbsp; characters; used CSS instead.
    Added exploration links to the profile page feedback list.
    Added exploration links to the profile page feedback list.
    Use a downward-left pointing pencil as the edit icon, so that the pencil points towards the item that is to be edited.
    Implement the frontend for the recent commits list.
    
    Still TODO:
    - audit the data returned to ensure nothing private is exposed
    - test on a production instance
    - reuse the functionality in the exploration version history page
    - reuse the functionality in the user profile page
    Prettified profile feedback list a bit.
    Remove the sticky header in the reader UI.
    
    Unfortunately, two problems were discovered during testing:
    
    (a) YouTube videos do not interact well with the sticky header. A
    duplicate copy appears at the top of the screen.
    (b) If the non-interactive state content is large, the sticky header
    will take up almost the whole of the screen, making further progress
    impossible.
    Make the central column of the state editor wider, and remove some buttons.
    Move exploration metadata and version history to separate tabs, and add more documentation to the UI.
    Move 'Add rule' button to the center. Adjust size of borders and fix the overflowing, on small screens, of the 'Select' buttons for picking rules.
    Remove some Edit buttons. Restyle the rule picker.
    Move 'Add rule' button to the center. Adjust size of borders and fix the overflowing, on small screens, of the 'Select' buttons for picking rules.
    Sticky title re-branch.
    Remove some Edit buttons. Restyle the rule picker.
    Small CSS change to make the gallery view toggle button line up against the top edge of the gallery box.
    Address issue 110: make the state header editable, and remove the now-redundant state editor title line.
    Address issue 110 by showing the state name in the state editor header. Try and remove some vertical whitespace, and make the state editor taller.
    Revert "Sticky title merge."
    
    This reverts commit 9d8d0acecba8b89a51787bee68165c5d609e2faf.
    It broke accessiblity.
    Sticky title merge.
    Allow an announcement to be placed in the contribute gallery.
    By default, hide beta explorations in both galleries.
    Remove the feedback button if the screen width is small. Otherwise, it obscures a large part of the screen on a mobile device.
    Do not gray out the final feedback. Use a different color for the exploration-completed feedback.
    Add numeric input validation.
    Remove the 'center' tag, which is deprecated in HTML5.
    Move the interactive widget picker inline.
    Add Firefox CSS rules.
    Fix a CSS bug in the gallery pages, where the hover/click area for the gallery tiles was not being drawn correctly.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Allow noninteractive widgets to be used in the rule feedback. Show the full rule feedback in the state editor.
    Overlay the state editor on the exploration graph editor, and remove the separate tab for the state editor.
    Make the graph visualization more responsive, and make the states fit in the viewport without the need for scrolling.
    Change CSS for reader response to not use a strange symbol.
    Separate the version history into its own section.
    Add licensing information to the individual exploration pages.
    Replace the images on the splash page with generic ones.
    CSS tweaks. Add licensing reminder in image upload modal.
    Add links to Yana's exploration design tips. Merge the About and License pages.
    Add a Contributor gallery. Update URL routing. Make other small UI tweaks.
    Minor fixes for login/logout buttons. Remove unused images.
    move gallery content over
    Added tabs to about page
    Added cartoon, changed content to be less FOSSy
    restyled about page
    Added logo
    Fixed merge issues, made beta more terse
    Design changes
    Minor UI changes, including fixing wording on About page, adding a 'Beta' subtitle, and making the widget preview less opaque.
    Add interstitial loading pages.
    Rework the splash page.
    Make play icon always visible in tiles in gallery
    Allow configuration properties to be edited in the admin UI.
    Allow multiple states to be edited in a single commit.
    Add some vertical spacing to the reader view.
    Allow multiple states to be edited in a single commit.
    Add some vertical spacing to the reader view.
    Display rules that are confusing more prominently. Fix an XSS bug.
    Finish the port to the new object editor framework, at least for the editors that already exist. Remove the old editors in templates/dev/head/components/.
    Tweaks based off of code review for bubble-like editor changes
    Bubble-like styling for rules in editor page
    Use consistent button styles on the state editor page. Right-align all buttons. Have a consistent 2:10 column layout with the 10-column subdivided as 9:3.
    State editor rule button style.
    Small changes: remove padding on container-fluid elements; display some text when the parameter change list is empty.
    Improve the UI for the changelist buttons. Add another set of buttons at the bottom of the page.
    Adding a three-column layout for the state editor.
    Make cursor turn to pointer on links. Change the UI for adding new rules. Do not consider changing something to the same value to be an actual change.
    Implement batched saving for state names and content.
    Fix style issues in state editor.
    Add an editor prerequisites page with information about the CC0 license.
    State editor layout: indent elements that are not in reader.
    Make mouse cursor turn into a pointer on tab headings.
    Simplify the state editor UI. Remove unused CSS rules.
    Reinstate the image upload feature.
    Reinstate the noninteractive image widget. This commit provides a filepicker; the upload feature will be added in a future commit.
    Remove the vertical scrollbars from embedded iframes.
    Gallery play button to look like a play button.
    Prevent labels from wrapping.
    More gallery CSS tweaks. Fix some lint errors.
    Continue work on the gallery page CSS.
    Improve the CSS for the gallery page.
    Create a safe RTE component directive. Add RTE functionality using jWysiwyg to the rule feedback editor.
    Feedback button animation.
    Make the feedback button a little smaller.
    Adding a button allowing the reader to send feedback to editors
    Upgrade Angular to 1.2.0-rc.2. Change modal callsites to buttons instead of links, and add contextual escaping using  where needed. Add a separate page for 404 errors.
    Move core JS files to the frontend root so that they are more easily discoverable.
    Fix issue 29: Display a warning if the END state is unreachable.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Remove the editor tree visualization. Improve the styling of the exploration editor landing page.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Reorganize frontend JS files, partitioning them into 'apps'.
    1. Make a proper responsive navbar, using a customized version of the Bootstrap lib. 2. Fix a bug where the state name was not displaying on the state editor page.
    Restructuring the view directories more intuitively.
    Make circles in exploration graph into ellipses. Remove dead code.
    Improvements to the UI: add instructions to the exploration editor state diagram, add cancel buttons to the exploration metadata editors, and lighten the color of the reader conversation log so that the most recent interaction stands out.
    Move exploration metadata to its own view, so that the exploration map can fill more of the screen.
    The viewport rules seem to be stopping the oppia.css file from being recognized as text/css when cached. Remove them for now.
    Really fix the footer
    Adding images to sample explorations. Rejigging CSS for gallery page.
    Minor CSS changes to the gallery page.
    CSS change to work on Firefox too. Fix a test.
    More UI Changes
    Scroll down after Oppia emits feedback.
    Do not use the default exploration as one of the random choices for 'Launch a random exploration'. Minor CSS fixes.
    Responsive CSS changes.
    Changes to the UI
    Highlight Oppia's last response instead of the reader's answer.
    Make the default exploration friendlier, and change the CSS to make the student's answer stand out less. Later we should make Oppia's feedback stand out more.
    Some CSS fixes.
    Fixes to the main page.
    Move CSS file back to templates/dev/head so that it is caught by the build.py script.
    Minor changes to the CSS file and the guiEditor content JS code.
    Serve libs from third_party/static instead of resources/.
    Improve tests for the image class and the widget class.
    Adding more flavor to the counting exploration. Tweak the interactive widget rules view.
    Remove cursor:pointer from non-interactive content display
    Add headers to CSS stylesheet.
    Add help text
    Improving the parameter change interface.
    Improving form validation on the gallery page, making the warning butterbar display more prominent, and limiting the number of warnings shown.
    Making changes to the music widget, moving some of its functionality to Oppia
    Improving the statistics page. Removing caching headers since we also serve locally-constructed files in the resource requests; think about this later.
    Improve the interactive widget UI
    Various small frontend fixes.
    Move interactive widget preview to separate file, and into ng-view
    Tweaking the interactive widget UI
    Adding rule display for interactive widgets. Still need to save updates to the server.
    Add interactive widget modal
    Make the gallery page tabbable.
    Make the footer go to the bottom of the page for short pages
    Add terms page
    Add an 'About Oppia' page
    Improving the look-and-feel of the reader exploration interface
    Finishing touches to the state graph visualization
    Adding further touches to the graph visualization
    Introduce separate namespaces for the different visualizations
    Continue work on graph styling. Separate vizualizations into separate tabs.
    Removing drag-and-drop palette, combining exploration editor tabs, and starting an experiment with a d3.js tree layout
    Allowing preview images for explorations to be uploaded
    Adding a d3.js graph
    making close button appear for error messages and answer classifications
    Fix layout of index page
    Changing homepage
    Renaming standard and output directories to dev and prod respectively.
    Removing more traces of metrics, and transferring the set image classes to the CSS file.
    Updating the classifier views.
    Transitioning existing Oppia classes and pages to the new structure
    Make the index page spiffy. Add login functionality to editor views and display the login/logout status in the navbar.
    Updating reader UI
    Adding an index page, and simplifying some of the backend logic
    Modifying the individual exploration page.
    Skeleton of Available Explorations from student perspective
    making the nav bar work at any browser width
    Adding stuff to the navbar
    Creating a new set of HTML, JS and CSS files for a redesigned Oppia frontend
    Use separate CSS files for the HTML and unicode editors, since line wrapping works differently in both cases.
    Continue cleaning up the unicode editor code. Add validation each time the content of the RTE is changed.
    Integrate the new unicode editor with the examples on the demo page. Tidy up its UI.
    Address review comments; rework parsing logic.
    Add a fancy editor for unicode objects that allows incorporation of parameters.
    Add a CSS stylesheet for the editor RTE.
    Move 'About' and 'Forum' to the navbar. Add breadcrumbs on all pages.
    Protractor tests: Response to review comments.
    Protractor tests: Switch gallery, admin and users to using protractor-specific class when possible. This is to make it easier for those editing production code to identify protractor's requirements.
    Change issues link on error page to use HTTPS.
    Consolidate error handling boilerplate.
    
    Also:
    
    (a) Have a friendlier 404 error page.
    (b) Remove unused route from app.yaml.
    (c) Add a robots.txt file.
    Upgrade Angular to 1.2.0-rc.2. Change modal callsites to buttons instead of links, and add contextual escaping using  where needed. Add a separate page for 404 errors.
    Modify the state parameter change editor to use the same value generators that are used in the widget parameter editor.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Restructuring the view directories more intuitively.
    Add error pages.
    Revert erroneous gallery capitalization changes. Add job for conversion of InteractiveMap distances.
    Truncate objective in gallery tile if it is too long. Make state name bigger.
    Fix gallery search handler to return exactly as many explorations as requested, where possible.
    Make list, int and nonnegative-int editors use schema-based forms. Fix display of rules for interactive map.
    Preload carousel images.
    Fix broken karma test
    Add config property for additional links in the sidebar menu. Complete work needed for config property for gallery carousel.
    Add a config property for the gallery carousel slides.
    Use better images for the gallery thumbnails and the exploration intro card.
    Ensure initial paging happens correctly.
    Make all loads of the gallery use the search functionality. Add basic ranking.
    Added more images for gallery.
    Changed small aspects of navbar, carousel, and images.
    Minor changes to alignment and wording of various labels and buttons.
    Changed a lot of margins, font sizes, etc.
    Make the splash-to-search-results transition less abrupt. Fix 'no results' text so it holds even when all categories are selected.
    Restyle the dashboard page to look more consistent with the rest of the site.
    Add another splash image to the carousel.
    1. Make splash page carousel scroll faster.
    2. Add 'Give Feedback' tab to sidebar.
    3. Remove 'Dashboard' tab from sidebar, and show notification counts in the top right instead.
    4. Vertically center splash page text.
    Changed wording, margins, and positioning of elements on splash page.
    Show selected categories at the top of their respective dropdowns.
    Fix integration tests.
    Add a carousel to the splash page.
    Redesign the gallery page.
    
    Still TODO:
    (a) Fix integration test for language and category selection.
    (b) Check if paging is needed for the no-query case.
    (c) Implement carousel.
    Partial implementation of search bar redesign.
    Use the user's preferred languages in the gallery. Create an editable preference page and a viewable profile page.
    Add language codes to the search query.
    Implement server-side paging for the gallery.
    Provide category data along with the search query.
    Change several instances of http to https. Simplify search query code slightly.
    More style edits
    Style edits and accounted for small queries; commented out interfering CSS
    Implemented paging with latest version of develop
    Add a placeholder and improve the 'no explorations found' messaging.
    Add language selection functionality to the gallery.
    Add default images for the gallery tiles.
    Rename isLoading to searchIsLoading and remove stray spaces
    Cause the search icon to change to a different symbol while results are being fetched
    Make tutorial buttons slightly larger.
    Remove private explorations from the gallery. Remove 'status' checkbox group. Update integration tests.
    Address Jacob's review comments. Rename 'beta' to 'public'. Reduce number of status choices in the gallery.
    Auto-select beta category in the gallery. In the gallery, mark released explorations as 'featured'. Adjust site wording.
    If an interstitial breaks the exploration creation flow, redirect to the exploration creation modal in the gallery at the end of the process.
    Changed Create New Exploration button size, changed placeholder text for search bar, reduced search debounce to 400ms
    Add a search field to the gallery.
    Fix lots of small bugs.
    
    (1) In the MusicNotesInput widget, rename 'play desired sequence' to 'play target sequence'.
    (2) In NumericInput view for the learner's input, do not show integers as floats.
    (3) In the TextInput widget, improve the description of the 'rows' field.
    (4) Rename Code REPL widget to 'Code input'.
    (5) In the MusicNotesInput widget, change the 'Add Note' button to make it clear what type of note is being referred to (a music note, not a comment).
    (6) Rename 'Tutorial' to 'Walkthrough' (the former sounds like 'manual').
    (7) Disable 'look inside' functionality in preview mode.
    (8) Add Amy's name to credits.
    (9) Show edit buttons in gallery for moderators (issue 373).
    (10) Fix broken loading when the history tab in the exploration editor is shown on initial load.
    (11) Fix the broken revert modal in history tab (the link to try out the old version did not work).
    (12) Move the 'create' button nearer to the 'add new state' input field.
    (13) Move the learner answer div styling to a common location in the conversation skin view.
    (14) Allow states defined in rules to use '.' (issue 166).
    (15) Add moderator page to profile menu (issue 374).
    Do not use ng-click for divs in gallery; links end up misdirecting. Also, hide the rule feedback editor behind a button so that multiple small changes to the text do not automatically trigger multiple save events.
    Simplify gallery UI layout.
    Show better language descriptions in gallery and editor page. Update wording in editor page modals and move tooltips onto their corresponding action buttons.
    First pass at making the gallery view (somewhat) responsive.
    Change highlight color for Edit button, and only show it on explorations the user can edit.
    Show private explorations in gallery. Move the view/edit link to a button in the top-right of each gallery tile.
    Add checkbox groups for languages and beta/non-beta statuses.
    Consolidate the three galleries into a single public one.
    Revert erroneous gallery capitalization changes. Add job for conversion of InteractiveMap distances.
    Truncate objective in gallery tile if it is too long. Make state name bigger.
    Added additional margins and other small wording changes.
    Update text on About and Gallery pages.
    Edits to improve responsiveness
    - Hide picture, objective and creation date in dashboard
    - Increase margins around titles
    Fix the navbar, hide exploration description and image on small screens
    Add a config property for the gallery carousel slides.
    Use better images for the gallery thumbnails and the exploration intro card.
    Make the splash-to-search-results transition less abrupt. Fix 'no results' text so it holds even when all categories are selected.
    Restyle the dashboard page to look more consistent with the rest of the site.
    Address review comments
    Style the rule editor.
    Restyle the content and interaction parts of the state editor.
    Don't close category and language selectors after selecting an option
    Hide navbar elements when screen size is small
    Fix to navbar menus, gallery tile link, and linear gradient for interstitial (for Firefox compatibility).
    Fixed more margin and spacing issues on the splash page.
    Changed wording, margins, and positioning of elements on splash page.
    Minor fix to the previous commit.
    Show selected categories at the top of their respective dropdowns.
    Minor tweaks to CSS of gallery page.
    More fixes to integration tests.
    Fix integration tests.
    Add a carousel to the splash page.
    Redesign the gallery page.
    
    Still TODO:
    (a) Fix integration test for language and category selection.
    (b) Check if paging is needed for the no-query case.
    (c) Implement carousel.
    Partial implementation of search bar redesign.
    Add interstitial section to the gallery page.
    Make signing in required if the user is logged in but has not chosen a username.
    Small stylistic changes to the learner view and gallery page.
    Move 'About' and 'Forum' to the navbar. Add breadcrumbs on all pages.
    Fix scoping error.
    Use the user's preferred languages in the gallery. Create an editable preference page and a viewable profile page.
    Add language codes to the search query.
    Implement server-side paging for the gallery.
    Fix issue 580: the 'create exploration' button does not display properly in Firefox.
    Changed banner and search bar on splash page.
    Address review comments.
    
    (1) Add proper tooltips to icons in navbar.
    (2) Reduce size of top-left Oppia icon to 40px height.
    (3) Change box-shadow of right sidebar to follow material design spec.
    (4) Standardize horizontal and vertical offsets of the titles of the various tabs.
    Style edits and accounted for small queries; commented out interfering CSS
    Implemented paging with latest version of develop
    First half of the work needed to rename widgets to interactions/rich-text-components.
    Protractor tests: Switch gallery, admin and users to using protractor-specific class when possible. This is to make it easier for those editing production code to identify protractor's requirements.
    Address review comment. Fix integration test flakiness.
    Merge the gallery page and the splash page.
    Update integration tests.
    Add a placeholder and improve the 'no explorations found' messaging.
    Add language selection functionality to the gallery.
    Add default images for the gallery tiles.
    Revamp the look-and-feel of the gallery tiles. Change background color on default banner image.
    Merge sidebar/navbar changes.
    Issue 462: Search loading indicator: Fix style issues
    Issue 462: Search loading indicator: Add spinning animation
    Forgot this.
    Rename isLoading to searchIsLoading and remove stray spaces
    Cause the search icon to change to a different symbol while results are being fetched
    Rename tutorial link to 'Oppia editor tutorial' in the help menu. Make 'no results found' message in the gallery more friendly.
    Remove private explorations from the gallery. Remove 'status' checkbox group. Update integration tests.
    Address Jacob's review comments. Rename 'beta' to 'public'. Reduce number of status choices in the gallery.
    Auto-select beta category in the gallery. In the gallery, mark released explorations as 'featured'. Adjust site wording.
    If an interstitial breaks the exploration creation flow, redirect to the exploration creation modal in the gallery at the end of the process.
    Changed Create New Exploration button size, changed placeholder text for search bar, reduced search debounce to 400ms
    Add a search field to the gallery.
    Fix lots of small bugs.
    
    (1) In the MusicNotesInput widget, rename 'play desired sequence' to 'play target sequence'.
    (2) In NumericInput view for the learner's input, do not show integers as floats.
    (3) In the TextInput widget, improve the description of the 'rows' field.
    (4) Rename Code REPL widget to 'Code input'.
    (5) In the MusicNotesInput widget, change the 'Add Note' button to make it clear what type of note is being referred to (a music note, not a comment).
    (6) Rename 'Tutorial' to 'Walkthrough' (the former sounds like 'manual').
    (7) Disable 'look inside' functionality in preview mode.
    (8) Add Amy's name to credits.
    (9) Show edit buttons in gallery for moderators (issue 373).
    (10) Fix broken loading when the history tab in the exploration editor is shown on initial load.
    (11) Fix the broken revert modal in history tab (the link to try out the old version did not work).
    (12) Move the 'create' button nearer to the 'add new state' input field.
    (13) Move the learner answer div styling to a common location in the conversation skin view.
    (14) Allow states defined in rules to use '.' (issue 166).
    (15) Add moderator page to profile menu (issue 374).
    Fix several bugs:
    
    1) Remove the obtrusive warning message when the objective field is blurred in the exploration settings page.
    2) Highlight the rule tiles properly on mouseover.
    3) If the interactive widget editor is open and the user navigates to preview mode, save the interactive widget first.
    4) Remove one click from the 'create new exploration' flow in the gallery page.
    5) Fix a bug where the numeric input widget was not accepting inputs of 0.
    6) Fix a display bug where the numeric input widget was aligned too far to the left.
    Protractor tests: response to review comments.
    Protractor tests: add tests for the publication ect. process and subsequent gallery display.
    Rest of response to review comments on integration tests.
    Button margin and alignment adjustments.
    Address Amit's comments from release testing.
    
    1) Rework the 'Compare revisions' button and surrounding text in the exploration history tab.
    2) Make button layout more consistent across the editor and gallery pages.
    3) Remove header on forum page.
    4) Right-align 'Create New Exploration' button in gallery with the individual gallery tiles.
    5) Remove some text in the 'publish exploration' modal.
    Do not use ng-click for divs in gallery; links end up misdirecting. Also, hide the rule feedback editor behind a button so that multiple small changes to the text do not automatically trigger multiple save events.
    Simplify gallery UI layout.
    Further fixes based on pre-release feedback from Jacob:
    
    1. Use ndb.OR for gallery query rather than !=, since the latter is more susceptible to indexes not having been built.
    2. Change 'Close' buttons in state and exploration delete modals to 'Cancel'.
    3. Fix gallery display error in Firefox
    Show better language descriptions in gallery and editor page. Update wording in editor page modals and move tooltips onto their corresponding action buttons.
    Fix animation of left nav in gallery.
    UI fixes for the gallery page:
    
    (1) Hide the edit buttons in mobile view.
    (2) Animate the left nav (this is not yet working fully correctly, though).
    (3) Fix issue with top navbar dropdowns not behaving correctly in mobile view.
    First pass at making the gallery view (somewhat) responsive.
    Made 'edit' button smaller in gallery
    Change highlight color for Edit button, and only show it on explorations the user can edit.
    Some styling changes to address review comments.
    Show private explorations in gallery. Move the view/edit link to a button in the top-right of each gallery tile.
    Add checkbox groups for languages and beta/non-beta statuses.
    Consolidate the three galleries into a single public one.
    Remove an obsolete karma test
    Make all loads of the gallery use the search functionality. Add basic ranking.
    Redesign the gallery page.
    
    Still TODO:
    (a) Fix integration test for language and category selection.
    (b) Check if paging is needed for the no-query case.
    (c) Implement carousel.
    Use the user's preferred languages in the gallery. Create an editable preference page and a viewable profile page.
    Add language codes to the search query.
    Add a placeholder and improve the 'no explorations found' messaging.
    Remove private explorations from the gallery. Remove 'status' checkbox group. Update integration tests.
    Address Jacob's review comments. Rename 'beta' to 'public'. Reduce number of status choices in the gallery.
    Auto-select beta category in the gallery. In the gallery, mark released explorations as 'featured'. Adjust site wording.
    Show better language descriptions in gallery and editor page. Update wording in editor page modals and move tooltips onto their corresponding action buttons.
    Change highlight color for Edit button, and only show it on explorations the user can edit.
    Show private explorations in gallery. Move the view/edit link to a button in the top-right of each gallery tile.
    Add checkbox groups for languages and beta/non-beta statuses.
    Consolidate the three galleries into a single public one.
    Remove oppiaRequestCreator and replace it with an HTTP request interceptor.
    Move to the recommended Angular .controller syntax.
    
    This follows the recommendation in the list of breaking changes
    for Angular 1.3.0 described at
    
        https://github.com/angular/angular.js/blob/master/CHANGELOG.md#130-beta15-unbelievable-advancement-2014-07-11
    Share the 'Create Exploration' button between the dashboard and contribute gallery pages.
    Remove cloning functionality from the backend.
    Create a separate controller for the exploration settings tab. Pull out more stuff from the exploration editor into standalone services, and group similar services under a base ExplorationPropertyService.
    By default, hide beta explorations in both galleries.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Add a Contributor gallery. Update URL routing. Make other small UI tweaks.
    Add interstitial loading pages.
    Make JS files compatible with minification.
    Fix broken test.
    Fix broken test.
    Remove the image storage model. Move image file uploading to use the file system storage model.
    Add a 'create new exploration' button to the profile page.
    More gallery CSS tweaks. Fix some lint errors.
    Improve frontend modal code using ui.bootstrap.
    In the frontend, rename parameters to paramSpecs.
    Add a generic backend simulator to the reader controller test player, so that it is easier to test playthroughs of the sample explorations.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Temporarily remove partially-implemented dataset functionality. This depends on how typed objects are maintained, and it looks like the way we do this might need to be refactored. We can put this functionality back in later.
    Add tests for filters
    Add tests for the gallery frontend.
    Give the stats editor tab its own namespace
    Update testacular (karma) config file.
    Reorganize frontend JS files, partitioning them into 'apps'.
    Restructuring the view directories more intuitively.
    Adding frontend test framework and an example test.
    Made Preferences page subtext same as Updates page subtext.
    Clean up images folder.
    making preferences page consistent
    redesigned the preferences page to look same as the rest of the pages(dashboard/updates/myexploration)
    Changed a few pages into cards, fixed other margins.
    Move state parameter changes editor to sidebar. Also, various minor wording changes.
    Prevent blank images from being uploaded in the preferences page.
    Add drag-and-drop upload for images.
    Show an error message if the uploaded profile picture is invalid.
    Show the profile picture on all pages.
    Partially working profile picture upload
    Move 'About' and 'Forum' to the navbar. Add breadcrumbs on all pages.
    Use the user's preferred languages in the gallery. Create an editable preference page and a viewable profile page.
    Restyle the profile page. Allow incremental saving. Use language codes instead of languages.
    Make language selection work properly on the profile page
    Save bio to user_settings and load existing bio into profile
    Add an outline of the new profile page.
    
    Note: this is just a skeleton, and is only marginally functional.
    Introduce a new user dashboard page.
    Remove all traces of the old feedback models.
    Resolving merge problem.
    More miscellaneous UI fixes. Added an expandable warnings bar below the save and discard buttons.
    Various small fixes based on release testing:
    
    * add playtest link to site footer
    * add link to the playtest queue from the Learn Gallery page
    * make minimap graph pannable
    * make "Add new state" field not have a red error box around it
    * rewrote the Welcome demo exploration to use the noninteractive-widget
    links
    * fix wording for exploration counts on the profile page
    Profile page expl stats coding fixes.
    Compute and show exploration stats in profile page.
    Fix issue 120: change erroneous link on profile page.
    Fix a number of issues discovered during testing (thanks to Jacob).
    
    1) Rename "site guidelines" to "how to use this site"
    2) Make the "Address this feedback" link in the stats viewer link to the state editor, rather than the main exploration tab.
    3) Add a specific warning message if there is a feedbackless self-loop for a default rule.
    4) Format the feedback messages in the user profile as a table.
    Remove state names from the profile page. Fix a broken test.
    Feedback list test updates and typo fixes.
    Some fixes and code style improvements for profile page.
    Added exploration links to the profile page feedback list.
    Feedback list test updates and typo fixes.
    Some fixes and code style improvements for profile page.
    Added exploration links to the profile page feedback list.
    Added exploration links to the profile page feedback list.
    Fix html element typo.
    Prettified profile feedback list a bit.
    display feedback on the profile page (needs debuggign - data gets lots somewhere along the way)
    display feedback on the profile page (needs debuggign - data gets lots somewhere along the way)
    Add a Contributor gallery. Update URL routing. Make other small UI tweaks.
    Implement the necessary queries for the gallery and profile pages.
    Allow owners, collaborators and playtesters of explorations to be set.
    Minor UI changes, including fixing wording on About page, adding a 'Beta' subtitle, and making the widget preview less opaque.
    Tighten up the implementation of user settings and rights.
    Remove the state model from the backend.
    
    Reasons:
    - It is confusing to keep track of two separate lifecycles for states
        and explorations.
    - The state name and state id were duplicate ways to identify a
        particular state.
    
    Side effects:
    - This change has resulted in an update to the YAML schema. The update is
        fully backward-compatible.
    - States are now identified in URLs and in analytics by their names
        rather than their ids.
    Remove the image storage model. Move image file uploading to use the file system storage model.
    Add a 'create new exploration' button to the profile page.
    Use ui-bootstrap tooltips throughout, except in modals generated in JS (this will come later). The aim is to remove the old angular-ui dependency.
    Add additional track-by-index arg for ng-repeat on profile page.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Show a loading indicator for the profile page.
    Include priority score in improvable states
    Pretty-ing up the profile page
    Adding common answers onto default rule improvable states
    Adding "My Explorations" to the profile page
    Creating a profile page with improvable states
    Add drag-and-drop upload functionality for image RTE extension. Also add validation.
    Add drag-and-drop upload for images.
    Show an error message if the uploaded profile picture is invalid.
    Show the profile picture on all pages.
    Partially working profile picture upload
    Use the user's preferred languages in the gallery. Create an editable preference page and a viewable profile page.
    Restyle the profile page. Allow incremental saving. Use language codes instead of languages.
    Make language selection work properly on the profile page
    Save bio to user_settings and load existing bio into profile
    Move to the recommended Angular .controller syntax.
    
    This follows the recommendation in the list of breaking changes
    for Angular 1.3.0 described at
    
        https://github.com/angular/angular.js/blob/master/CHANGELOG.md#130-beta15-unbelievable-advancement-2014-07-11
    Consolidate error handling boilerplate.
    
    Also:
    
    (a) Have a friendlier 404 error page.
    (b) Remove unused route from app.yaml.
    (c) Add a robots.txt file.
    Introduce a new user dashboard page.
    Remove all traces of the old feedback models.
    Profile page expl stats coding fixes.
    Compute and show exploration stats in profile page.
    display feedback on the profile page (needs debuggign - data gets lots somewhere along the way)
    display feedback on the profile page (needs debuggign - data gets lots somewhere along the way)
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Implement the necessary queries for the gallery and profile pages.
    Tighten up the implementation of user settings and rights.
    Make JS files compatible with minification.
    Add an editor prerequisites page with information about the CC0 license.
    Move the request creator to a factory method on the main app, since it is used everywhere.
    Move the request creator to a factory method on the main app, since it is used everywhere.
    Redirect on successful username save
    Check username for uniqueness
    
    Includes code review changes from previous username commits
    Requires a username for editors and adds a path to create them
    Check username for uniqueness
    
    Includes code review changes from previous username commits
    Requires a username for editors and adds a path to create them
    Add a 'create new exploration' button to the profile page.
    Requires a username for editors and adds a path to create them
    Requires a username for editors and adds a path to create them
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Remove some unnecessary variables.
    Show a loading indicator for the profile page.
    Minor linting.
    Using proper JS formatting in Profile.js
    removing console.log lines
    Pretty-ing up the profile page
    Adding "My Explorations" to the profile page
    Creating a profile page with improvable states
    Reorganize frontend JS files, partitioning them into 'apps'.
    Restructuring the view directories more intuitively.
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Restructuring JS files, and adding caching headers to static content.
    Revert erroneous gallery capitalization changes. Add job for conversion of InteractiveMap distances.
    Changed a few pages into cards, fixed other margins.
    Autofocus on input in signin page, remove profile link from top right menu
    Allow clicking outside a modal to dismiss it
    Restyle signup page.
    Make signing in required if the user is logged in but has not chosen a username.
    Move skin templates into directives. This is in preparation for allowing preview mode in the editor view -- we can then load all of these templates in the editor view at the outset and invoke them with HTML tags when necessary.
    Remove oppiaRequestCreator and replace it with an HTTP request interceptor.
    Move to the recommended Angular .controller syntax.
    
    This follows the recommendation in the list of breaking changes
    for Angular 1.3.0 described at
    
        https://github.com/angular/angular.js/blob/master/CHANGELOG.md#130-beta15-unbelievable-advancement-2014-07-11
    Consolidate error handling boilerplate.
    
    Also:
    
    (a) Have a friendlier 404 error page.
    (b) Remove unused route from app.yaml.
    (c) Add a robots.txt file.
    Address review comment.
    UX improvements for the editor prerequisites page.
    
    1. Remove some of the descriptive text.
    2. Make errors more immediate.
    3. Prevent form submission if it won't be accepted anyway.
    Set default headers for POST and PUT requests from the frontend.
    Add username validity checks into Javascript
    
    The duplicate check is not included in the Javascript.
    Python checks are still in place, but should not be hit, just as a double check.
    Fix a CSS bug in the gallery pages, where the hover/click area for the gallery tiles was not being drawn correctly.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Add config properties for editor prerequisites page.
    Tighten up the implementation of user settings and rights.
    Make JS files compatible with minification.
    Fixing check for has_username param
    Add tests for editor prerequisites page.
    Add an editor prerequisites page with information about the CC0 license.
    Clean up images folder.
    Show the profile picture on all pages.
    Partially working profile picture upload
    Move 'About' and 'Forum' to the navbar. Add breadcrumbs on all pages.
    Use the user's preferred languages in the gallery. Create an editable preference page and a viewable profile page.
    Restyle the profile page. Allow incremental saving. Use language codes instead of languages.
    Make language selection work properly on the profile page
    Save bio to user_settings and load existing bio into profile
    Add an outline of the new profile page.
    
    Note: this is just a skeleton, and is only marginally functional.
    Introduce a new user dashboard page.
    Remove all traces of the old feedback models.
    Resolving merge problem.
    More miscellaneous UI fixes. Added an expandable warnings bar below the save and discard buttons.
    Various small fixes based on release testing:
    
    * add playtest link to site footer
    * add link to the playtest queue from the Learn Gallery page
    * make minimap graph pannable
    * make "Add new state" field not have a red error box around it
    * rewrote the Welcome demo exploration to use the noninteractive-widget
    links
    * fix wording for exploration counts on the profile page
    Profile page expl stats coding fixes.
    Compute and show exploration stats in profile page.
    Fix issue 120: change erroneous link on profile page.
    Fix a number of issues discovered during testing (thanks to Jacob).
    
    1) Rename "site guidelines" to "how to use this site"
    2) Make the "Address this feedback" link in the stats viewer link to the state editor, rather than the main exploration tab.
    3) Add a specific warning message if there is a feedbackless self-loop for a default rule.
    4) Format the feedback messages in the user profile as a table.
    Remove state names from the profile page. Fix a broken test.
    Feedback list test updates and typo fixes.
    Some fixes and code style improvements for profile page.
    Added exploration links to the profile page feedback list.
    Feedback list test updates and typo fixes.
    Some fixes and code style improvements for profile page.
    Added exploration links to the profile page feedback list.
    Added exploration links to the profile page feedback list.
    Fix html element typo.
    Prettified profile feedback list a bit.
    display feedback on the profile page (needs debuggign - data gets lots somewhere along the way)
    display feedback on the profile page (needs debuggign - data gets lots somewhere along the way)
    Add a Contributor gallery. Update URL routing. Make other small UI tweaks.
    Implement the necessary queries for the gallery and profile pages.
    Allow owners, collaborators and playtesters of explorations to be set.
    Minor UI changes, including fixing wording on About page, adding a 'Beta' subtitle, and making the widget preview less opaque.
    Tighten up the implementation of user settings and rights.
    Remove the state model from the backend.
    
    Reasons:
    - It is confusing to keep track of two separate lifecycles for states
        and explorations.
    - The state name and state id were duplicate ways to identify a
        particular state.
    
    Side effects:
    - This change has resulted in an update to the YAML schema. The update is
        fully backward-compatible.
    - States are now identified in URLs and in analytics by their names
        rather than their ids.
    Remove the image storage model. Move image file uploading to use the file system storage model.
    Add a 'create new exploration' button to the profile page.
    Use ui-bootstrap tooltips throughout, except in modals generated in JS (this will come later). The aim is to remove the old angular-ui dependency.
    Add additional track-by-index arg for ng-repeat on profile page.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Show a loading indicator for the profile page.
    Include priority score in improvable states
    Pretty-ing up the profile page
    Adding common answers onto default rule improvable states
    Adding "My Explorations" to the profile page
    Creating a profile page with improvable states
    Changed a few pages into cards, fixed other margins.
    Autofocus on input in signin page, remove profile link from top right menu
    Allow users to leave the signup page mid-way through signup, logging them out if they do so.
    Restyle signup page.
    Make signing in required if the user is logged in but has not chosen a username.
    Move 'About' and 'Forum' to the navbar. Add breadcrumbs on all pages.
    Change several instances of http to https. Simplify search query code slightly.
    Protractor tests: Response to review comments.
    Protractor tests: Switch gallery, admin and users to using protractor-specific class when possible. This is to make it easier for those editing production code to identify protractor's requirements.
    Address review comment.
    UX improvements for the editor prerequisites page.
    
    1. Remove some of the descriptive text.
    2. Make errors more immediate.
    3. Prevent form submission if it won't be accepted anyway.
    Fix several issues discovered during release testing:
    
    1. Make username input field on editor registration page shorter.
    2. Remove non-working links in statistics tab that link back to the state editor.
    3. Ensure that the number of times an answer was submitted is visible in the statistics tab modal.
    4. Make statistics tab rule descriptions slightly more human-readable.
    5. Rename 'Common responses' to the more accurate 'Unhandled responses'.
    6. Remove 'by' in front of author names in the exploration feedback threads view.
    7. Remove some whitespace above the feedback thread list.
    8. Disallow submission of reader feedback until some feedback is typed.
    9. Use human-readable status names for feedback messages.
    10. Shorten the text in the reader feedback modal.
    Improve the form styling for the editor prerequisites page.
    Resolving merge problem.
    More miscellaneous UI fixes. Added an expandable warnings bar below the save and discard buttons.
    Continue the Bootstrap 3 upgrade.
    First pass at upgrading to Bootstrap 3.
    changed all buttons to bootstrap, fixed some alignments
    Create a new site guidelines page and clarify some of the wording.
    Add licensing information to the individual exploration pages.
    Minor UI changes, including fixing wording on About page, adding a 'Beta' subtitle, and making the widget preview less opaque.
    Revise the wording for the static pages.
    Various small UI fixes.
    Minor wording fixes for the editor prerequisites page.
    Add config properties for editor prerequisites page.
    Tighten up the implementation of user settings and rights.
    Add an editor prerequisites page with information about the CC0 license.
    Changed a few pages into cards, fixed other margins.
    Make signing in required if the user is logged in but has not chosen a username.
    Remove oppiaRequestCreator and replace it with an HTTP request interceptor.
    Move to the recommended Angular .controller syntax.
    
    This follows the recommendation in the list of breaking changes
    for Angular 1.3.0 described at
    
        https://github.com/angular/angular.js/blob/master/CHANGELOG.md#130-beta15-unbelievable-advancement-2014-07-11
    UX improvements for the editor prerequisites page.
    
    1. Remove some of the descriptive text.
    2. Make errors more immediate.
    3. Prevent form submission if it won't be accepted anyway.
    Tests for Javascript checks of username validity
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Fix a broken test.
    Add versioning for config model. Fix editor prerequisites JS tests.
    Adding regression tests for GET errors on profile page
    Add file missed in previous commit.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Make JS files compatible with minification.
    Move core JS files to the frontend root so that they are more easily discoverable.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Reorganize frontend JS files, partitioning them into 'apps'.
    Restructuring the view directories more intuitively.
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Restructuring JS files, and adding caching headers to static content.
    Protractor tests: add checks for console errors during tests. Also respond to review comments.
    Protractor tests: add tests that when oppia explorations are embedded in another page the hooks from the explorations back to that page function correctly. Also respond to review comments.
    Remove the need for separate tag-ids in the embedding script. Create a test page for visual checking of the embedding options.
    Add a registry in the embedding page for the Oppia iframes on the page.
    Revert "Message passing from container page to iframed reader so we can make sticky title work in iframe."
    
    This reverts commit 3cb6ee04421a70ba953bb3f3f0595d4f49039ce6. It will be re-committed after some code changes.
    Message passing from container page to iframed reader so we can make sticky title work in iframe.
    Remove the need for a whitelist from the Oppia embedding script. Fix a couple of bugs.
    Allow most Oppia explorations to be played on IE9. Some interactive widgets, like the code REPL, interactive map and LaTeX input, are still proving problematic.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Make logging more silent in production.
    No scroll to bottom of iframe at page load.
    Move iframe resizing logic to be used only in the reader view. Allow the height of the iframe to be reduced on exploration reset.
    Add more events to the messenger service for the exploration embedding use case.
    Set up minification of JS and CSS files.
    Make JS files compatible with minification.
    Minor security enhancements.
    Pass version number and source tag id to the child frame, so that these can be sent back to the parent frame when the height of the embedded exploration is changed.
    Do not require the embedded exploration to read values from its container page.
    Pull the oppia embedding code out into a separate script and set up a messaging service to communicate between oppia and its embedding page.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Make logging more silent in production.
    Remove the state model from the backend.
    
    Reasons:
    - It is confusing to keep track of two separate lifecycles for states
        and explorations.
    - The state name and state id were duplicate ways to identify a
        particular state.
    
    Side effects:
    - This change has resulted in an update to the YAML schema. The update is
        fully backward-compatible.
    - States are now identified in URLs and in analytics by their names
        rather than their ids.
    Make JS files compatible with minification.
    Move core JS files to the frontend root so that they are more easily discoverable.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Reorganize frontend JS files, partitioning them into 'apps'.
    Restructuring the view directories more intuitively.
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Improving form validation on the gallery page, making the warning butterbar display more prominent, and limiting the number of warnings shown.
    Restructuring JS files, and adding caching headers to static content.
    Remove stats versioning selector; computed stats seem to be buggy.
    Minor linting to stats code.
    Allow clicking outside a modal to dismiss it
    Cleaning up in response to code review
    Refresh state graph on stats page when a different version is selected.
    
    Due to lack of a clean alternative, 'all' and 'none' are shown with the
    current version of the graph.
    Move tabs to the top navigation bar, making the editor UI much cleaner. Add headings to the various pages in the editor.
    Further cleanup of work on versioned statistics.
    Cleaning up based on code reviews
    Response to code review of c4088eb7deba
    Fix old state names, respond to other review comments
    Changes to state diff modal layout, add export exploration data by state
    and display state data in codemirror
    Add versioned statistics aggregation and allow different versions to be viewed from stats page
    Fix bug where state graph was not being centered correctly on page load.
    Address review comments. Standardize calls to datetime service.
    Fix merge error.
    Refactor graphData out into a graphDataService.
    Create a controller for the exploration graph. Remove more occurrences of .
    Refactor out the routing logic into a separate service, and simplify it.
    Add an explorationStates service.
    Address more review comments.
    Prep for migration to stats jobs
    1. Stop writing to State Counter (old style) models
    2. Migrate all uses of current state counters over to aggregator
    3. Update aggregator to use both old and new models correctly
    4. Create one off job to deal with the overlap between these two systems
    Move to the recommended Angular .controller syntax.
    
    This follows the recommendation in the list of breaking changes
    for Angular 1.3.0 described at
    
        https://github.com/angular/angular.js/blob/master/CHANGELOG.md#130-beta15-unbelievable-advancement-2014-07-11
    Migrate the existing StatsPageJobManager to use the new continuous computations framework.
    Minor refactoring of statistics frontend and backend, including removing some unused methods.
    Rename StatsViewer to ExplorationStatistics to be more consistent with other files in the editor templates directory.
    Fix several issues discovered during release testing:
    
    1. Make username input field on editor registration page shorter.
    2. Remove non-working links in statistics tab that link back to the state editor.
    3. Ensure that the number of times an answer was submitted is visible in the statistics tab modal.
    4. Make statistics tab rule descriptions slightly more human-readable.
    5. Rename 'Common responses' to the more accurate 'Unhandled responses'.
    6. Remove 'by' in front of author names in the exploration feedback threads view.
    7. Remove some whitespace above the feedback thread list.
    8. Disallow submission of reader feedback until some feedback is typed.
    9. Use human-readable status names for feedback messages.
    10. Shorten the text in the reader feedback modal.
    Remove a couple of places that were still editable in the view-only mode for the exploration editor.
    Address review comments.
    Get rid of the 'answers received' section at the bottom of the editor, and put it on the bottom-right instead.
    Add a modal that shows a larger version of the state graph minimap. Add an option to pan the visualization so that it centers on the current state.
    Removing v2 of stats models to ease further development
    Removing v2 of stats models to ease further development
    Merge of missing answer changes, fixing conflicts
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Make logging more silent in production.
    Make the graph visualization more responsive, and make the states fit in the viewport without the need for scrolling.
    Remove the concept of stateId from the frontend.
    Set up minification of JS and CSS files.
    Allow reader feedback to be marked as fixed or will_not_fix.
    Add separate handler for exploration rights management. Rewire URL endpoints for the editor to avoid ambiguity. Add commit messages for adding and deleting states.
    Add separate handler for exploration rights management. Rewire URL endpoints for the editor to avoid ambiguity. Add commit messages for adding and deleting states.
    Only load full state statistics when they are asked for, rather than when the exploration is loaded. This decreases the loading time significantly.
    Add file missed in previous commit.
    Remove tutorial steps for highlighting the active rule, since the latter is sometimes not displayed.
    Fix typos.
    Add validation for rules and interaction customizations.
    Made numerous changes to tutorial, fixed broken tutorial scrolling.
    Various improvements to the editor page.
    
    (1) Reorganize the interaction dropdown menu to remove many single-item categories.
    (2) Remove help dropdown menu.
    (3) Fix bug when user clicks 'add new state' and then cancels.
    (4) Move 'Create New...' to the second position in the rule destination dropdown so that it does not look like a menu heading.
    Stop loading mesesage from disappearing prematurely. Remove accordion in editor sidebar.
    Move 'publish exploration' button to navbar.
    Small changes to the editor page.
    
    1. Colour the active state in the graph.
    2. Change default rule tag to 'No other rules apply...'
    3. Move settings before statistics in the navbar icon menu.
    4. Change 'publish draft' to 'save changes'.
    Remove the 'widget_sticky' setting.
    Consolidate retrieval of interaction registry, and make it happen during page load.
    Fix jankiness of tutorial.
    Numerous margin, positioning, and styling fixes for the exploration editor.
    Allow clicking outside a modal to dismiss it
    Indicate editor tab in navbar breadcrumb. Use cards in subsidiary editor pages.
    Replace intro-js with ng-joyride -- the former was leading to a buggy editor tutorial.
    Add schema.org metadata for sharing
    Update integration tests.
    Make the right sidebar a distinct section of the state editor page.
    Move exploration warnings to top navbar. Adjust sidebar position and add license information to it.
    Make 'preview mode' into a separate tab.
    Move the 'publish in gallery' button to the settings tab.
    Move the save and publish buttons to the navbar.
    Continue decluttering the state editor.
    Complete the deprecation of 'widget'.
    Migrate the backend widget registries and the controllers.
    First half of the work needed to rename widgets to interactions/rich-text-components.
    Refactor embedding into a service and add styling to share dropdown.
    Highlight the current tab in the navbar. Update integration tests.
    Move tabs to the top navigation bar, making the editor UI much cleaner. Add headings to the various pages in the editor.
    Set up the editor navigation controller to be more general (and not just apply to the 'Help' control).
    Display the exploration title in the top navbar.
    Move exploration parameter specs to a standalone service.
    Move initial parameter evaluation to use the client-side framework.
    Add tooltip to 'publish exploration' button.
    Fix issue with the 'save button' tutorial screen not showing correctly when the tutorial is viewed by a first-time user.
    Add new stages to the tutorial for the preview and save buttons; rewrite other parts to flow better. Fix issue with the part of tutorial that pertains to rules not displaying correctly. Fix integration tests.
    Refactor tutorial code into a help tab controller and a separate service tracking first-time usage.
    Show the tutorial immediately for first-time users.
    Fix issues 441 and 442: recompute graph after the first state of the exploration is changed, and save the state name when a tab transition is made.
    Fix two UI issues:
    
    (1) When the save modal is opened, shift focus to the textarea field in which to enter a commit message.
    (2) After a new feedback message is sent, clear the feedback message input field.
    Refactor state graph to use node IDs
    Small edits to tutorial text.
    Added and formatted example text to editor tutorial.
    Editor tutorial edits.
    Fix more UI issues.
    
    (1) Fix overflowing interactive map widget.
    (2) Reverse the order of the cancel/submit buttons in the feedback modal in the learner view.
    (3) Add icons to the Edit and Preview buttons in the exploration editor page.
    (4) Adjust the width of the header row so that the control buttons fit in one line.
    (5) Allow the tutorial to be started properly when the user is in preview mode.
    (6) Widen the tutorial tooltip for the initial step, and remove the step numbers in the red circles.
    (7) Make some CSS fixes to the exploration editor for the case when the exploration is not editable by the current user.
    Fix lots of small bugs.
    
    (1) In the MusicNotesInput widget, rename 'play desired sequence' to 'play target sequence'.
    (2) In NumericInput view for the learner's input, do not show integers as floats.
    (3) In the TextInput widget, improve the description of the 'rows' field.
    (4) Rename Code REPL widget to 'Code input'.
    (5) In the MusicNotesInput widget, change the 'Add Note' button to make it clear what type of note is being referred to (a music note, not a comment).
    (6) Rename 'Tutorial' to 'Walkthrough' (the former sounds like 'manual').
    (7) Disable 'look inside' functionality in preview mode.
    (8) Add Amy's name to credits.
    (9) Show edit buttons in gallery for moderators (issue 373).
    (10) Fix broken loading when the history tab in the exploration editor is shown on initial load.
    (11) Fix the broken revert modal in history tab (the link to try out the old version did not work).
    (12) Move the 'create' button nearer to the 'add new state' input field.
    (13) Move the learner answer div styling to a common location in the conversation skin view.
    (14) Allow states defined in rules to use '.' (issue 166).
    (15) Add moderator page to profile menu (issue 374).
    Minor wording change.
    Add a tutorial for the editor page.
    Refactor graphData out into a graphDataService.
    Create a controller for the exploration graph. Remove more occurrences of .
    Move more of the state operations to explorationStatesService.
    Refactor out the routing logic into a separate service, and simplify it.
    Address review comments.
    Add an explorationStates service.
    Add a live-preview mode to the exploration editor.
    Redesign the editor rules interface. Also make the behavior of the 'save changes' button more responsive.
    Add an option for private explorations to be viewed by anyone with the link.
    Allow states to be added in the frontend without requiring a backend RPC.
    Completely refactor the state graph to use a template. In the process, fix a couple of bugs involving SVG defs not working in Firefox.
    Made changes as per Sean's comments, also fixed ExplorationEditor.js which was broken during a previous sync.
    Feature request for adding roles to explorations using usernames(issue 286), will put beautification of html in a different commit.
    
    Conflicts:
            core/templates/dev/head/editor/ExplorationEditor.js
    Made changes as per Sean's comments, also fixed ExplorationEditor.js which was broken during a previous sync.
    Complete the 'change initial state name' feature.
    Feature request for adding roles to explorations using usernames(issue 286), will put beautification of html in a different commit.
    Frontend code for making initial state name settable. TODO: backend code and the body of saveExplorationInitStateName().
    Add a category label to the exploration editor page. Change color of status labels.
    Do not reset the location hash after an editor view is loaded, because this causes errors when navigating to states whose names have trailing question marks.
    When the discard button is clicked, register all pending changes before clearing the change stack.
    Add language-code selection functionality to the exploration editor.
    Various UI and functionality fixes.
    
    (a) Add tests for the HTML and JSON escapers
    (b) Handle scope inheritance properly in the custom editors
    (c) Remove confirmation dialog on widget change
    (d) Remove obtrusive warning message for missing objectives
    (e) Fix typo and unescaping in logic proof widget
    UI improvements and bug fixes to history diff-view
    * Auto-update diff-view when selection is changed
    * Make diff-view larger
    * Auto scroll to diff-view on selection
    * Remove 'revert' function in diff-view
    * Fix bug in returning version number when there are more than 30 revisions
    * Fix alignment of revision data
    Load all interactive widgets when the page loads to minimize the number of RPCs required. Also, show the preview tab in the interactive widget editor accordion when the widget id is changed.
    Renaming oppiaDateFormatter factory and related methods to DatetimeFormatter
    Allow exploration to be downloaded as JSON object
    Remove oppiaRequestCreator and replace it with an HTTP request interceptor.
    Move to the recommended Angular .controller syntax.
    
    This follows the recommendation in the list of breaking changes
    for Angular 1.3.0 described at
    
        https://github.com/angular/angular.js/blob/master/CHANGELOG.md#130-beta15-unbelievable-advancement-2014-07-11
    Consolidate error handling boilerplate.
    
    Also:
    
    (a) Have a friendlier 404 error page.
    (b) Remove unused route from app.yaml.
    (c) Add a robots.txt file.
    Move exploration history functions out into a separate controller.
    resolving comments.
    Feature request to show time instead of date when date is current date.
    More bug fixes.
    
    1) Fix a JSON-encoding bug where numeric 0 values were not being accepted for encoding prior to being passed to the backend.
    2) Remove $scope.$apply() error from the rich text editor.
    3) Ensure that, if an exploration is being edited and a download link is clicked, a 'beforeunload' confirmation dialog does not pop up (since the user isn't moving to another window).
    Minor refactoring of statistics frontend and backend, including removing some unused methods.
    Address review comments.
    Address review comments.
    Add further warnings to the frontend exploration editor. Now, under normal operation, a backend server validation error should never be triggered.
    Add a skin chooser to the frontend editor UI.
    Set default headers for POST and PUT requests from the frontend.
    Further bug fixes.
    
    (a) Add a help link to the parameter changes section.
    (b) Display interactive map coordinates to 3 decimal places.
    (c) Correct a misleading rule name in the tar file rules.
    (d) Fix an issue with having black text on dark blue background in the navbar when a tab name is focused on.
    (e) Fix a bug with the exploration deletion flow.
    (f) Only show the delete button to exploration owners.
    Fix omission of a broadcast event in previous commit.
    Fix a saving bug: when a rule with an input is selected, and then changed to a rule without an input, the extraneous input is kept, causing an error on the backend. Also, refresh the state editor when changes are discarded.
    Fix a bug that prevented changes to rules from being saved after a new interactive widget was selected.
    Make exploration labels more explicit. Move publish button to top of page, rather than burying it in the Settings tab.
    Address review comments.
    Add an indicator to the feedback tab header of when the last feedback update was. Remove some unneeded scrolling behavior.
    Implement world-viewable exploration editor pages.
    Resolving merge problem.
    Feedback thread barebone UI and data path.
    Implement basic functionality for a readonly editor view of an exploration.
    Add instructions for embedding explorations.
    Small fixes: add 'no objective' warning to the warnings list, fix unable-to-publish-exploration issue, make 'Done' buttons in rules smaller.
    Move settings-related stuff to the exploration settings page.
    More miscellaneous UI fixes. Added an expandable warnings bar below the save and discard buttons.
    Continue the Bootstrap 3 upgrade.
    Add a modal to the exploration editor page that gives instructions for releasing an exploration.
    Move all editor-related services to a common file in the editor/ directory.
    Do not automatically switch to the initial state on exploration initialization, unless no state is currently active.
    Review fixes.
    Improve the UI for displaying objectives (and the warning to specify them if they aren't specified yet). Add objectives to existing demo explorations.
    Add a modal that shows a larger version of the state graph minimap. Add an option to pan the visualization so that it centers on the current state.
    Ensure that an active state name is always specified.
    Address review comments.
    Primarily removed state editor from modal window into main editing area, turned exploration graph into a mini-map.
    Create a separate controller for the exploration settings tab. Pull out more stuff from the exploration editor into standalone services, and group similar services under a base ExplorationPropertyService.
    Fix a number of issues discovered during testing (thanks to Jacob).
    
    1) Rename "site guidelines" to "how to use this site"
    2) Make the "Address this feedback" link in the stats viewer link to the state editor, rather than the main exploration tab.
    3) Add a specific warning message if there is a feedbackless self-loop for a default rule.
    4) Format the feedback messages in the user profile as a table.
    Removing v2 of stats models to ease further development
    Removing v2 of stats models to ease further development
    Factor out the exploration title into a common service that can be referenced cleanly from both the main window and the settings tab (which will soon have its own controller). Add tests for this service.
    Pull the editor change list functionality out into a separate service, and add tests for it.
    Merge of missing answer changes, fixing conflicts
    Move exploration metadata and version history to separate tabs, and add more documentation to the UI.
    UI changes: make the rightmost column of the state editor narrower, and improve the help text and default values for the noninteractive link widget. Remove some unused code from the exploration editor.
    Fix some saving bugs in the rule editor.
    Fix some saving bugs in the rule editor.
    Allow moderators to unpublish explorations.
    Fix issue 137: stale parameter values in interactive widget selector
    Minor changes to commit allowing editors to download previous versions.
    Allow editors to download earlier versions of an exploration as zip files
    Ensure that the 'externalSave' event is propagated by trying it two ways. (The way that uses  is not triggered when the 'Save Changes' button is pressed when the RTE is open.)
    Clarify handling of 'externalSave' events. Make stickyInteractiveWidget react only to changes from the UI, and not to changes due to a change in the active state.
    Introduce a service that supplies controllers with the name of the currently-active state.
    Show error messages on server connection failure.
    By default, hide beta explorations in both galleries.
    Introduce the concept of beta explorations, and allow them to be publicized or unpublicized by moderators. Fix an error in the admin/moderator permissions.
    Grant moderators delete permissions for explorations; record roles when deleting.
    For cloned explorations, do not show version history, and make the messaging at the top of the editor page clearer.
    Move interactive widget customization into the inline editor for the widget.
    Remove pathnameArray from the global scope.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Make logging more silent in production.
    Overlay the state editor on the exploration graph editor, and remove the separate tab for the state editor.
    Make the graph visualization more responsive, and make the states fit in the viewport without the need for scrolling.
    Change stats view to use warning icon in place of colored borders
    Implement reverting functionality.
    Load the version history lazily. Generate automated summaries for each changelist in the backend.
    Only change the values of name fields on-blur.
    Separate the version history into its own section.
    Fix a bug where updates to the exploration parameter specs were not sent to the backend.
    Add information about added, deleted and changed states to the commit modal.
    Improve the messaging for cloned explorations.
    Add a Contributor gallery. Update URL routing. Make other small UI tweaks.
    Add a button for releasing ownership of an exploration to the community.
    Allow owners, collaborators and playtesters of explorations to be set.
    Various small UI fixes.
    Tighten up the implementation of user settings and rights.
    Add interstitial loading pages.
    Allow add and delete state operations to be done as part of a larger commit.
    Represent a changelist as a sequence of commands and process this sequence server-side.
    Modify the frontend changelist to be more consistent with what is planned for the backend.
    Start writing a changelist handler on the server side. Move the delete_state() function to the exploration domain object so that it can be executed together with other changes.
    Remove the concept of stateId from the frontend.
    Remove the state model from the backend.
    
    Reasons:
    - It is confusing to keep track of two separate lifecycles for states
        and explorations.
    - The state name and state id were duplicate ways to identify a
        particular state.
    
    Side effects:
    - This change has resulted in an update to the YAML schema. The update is
        fully backward-compatible.
    - States are now identified in URLs and in analytics by their names
        rather than their ids.
    Set up minification of JS and CSS files.
    Make JS files compatible with minification.
    Use actual user_ids instead of email addresses. Require the user to pick a valid username that would appear in the commit logs.
    Only allow adding or deleting a state when it is the only item in the change list.
    Fetch exploration statistics separately, so that the editor page loads faster.
    Automatically update the version history when a save event occurs.
    Add the concept of computed configuration properties. Fix some errors in the behavior of discardChanges() on the exploration editor page.
    Add separate handler for exploration rights management. Rewire URL endpoints for the editor to avoid ambiguity. Add commit messages for adding and deleting states.
    Pass exploration changes through the same save flow as the state changes.
    Batch changes to the exploration and its states so that any set of changes to the exploration results in a single entry in the version history log.
    Fix review comments.
    Allow multiple states to be edited in a single commit.
    Add separate handler for exploration rights management. Rewire URL endpoints for the editor to avoid ambiguity. Add commit messages for adding and deleting states.
    Pass exploration changes through the same save flow as the state changes.
    Batch changes to the exploration and its states so that any set of changes to the exploration results in a single entry in the version history log.
    Fix review comments.
    Allow multiple states to be edited in a single commit.
    Add a dialogue requesting a commit message when saving to the state editor.
    Add a submission button to the 'add state' form. Inline some macros.
    Add a window.beforeunload event to the exploration editor page which prompts the user about unsaved changes.
    Complete implementation of batch saving for parameter changes.
    Improve the UI for the changelist buttons. Add another set of buttons at the bottom of the page.
    Add batched saving for everything except param_changes. Fix an error in the client that mistakenly added 'subject: answer' to the default rules.
    Implement batched saving for state names and content.
    Add rights management for deleting explorations. Only an admin can delete published explorations; only the owner and admins can delete unpublished ones.
    Reinstate the noninteractive image widget. This commit provides a filepicker; the upload feature will be added in a future commit.
    Move the request creator to a factory method on the main app, since it is used everywhere.
    Move the request creator to a factory method on the main app, since it is used everywhere.
    Minor fix to remove console errors when the list of exploration editors is empty on initial page load.
    Allow an admin to change the editor list for an exploration.
    Fix the image upload flow. Remove exploration image functionality.
    Refactor the rule modal to separate it more cleanly from its container.
    Minor change to scrolling behavior in state editor page.
    Tidy up the visualizations.js file.
    Introduce a StatsViewer controller. Improve the routing behavior in the exploration editor.
    Move more modals and remove some duplicate code.
    Move more modals to the angular-ui.bootstrap framework.
    Remove dependency on ngRoute and simplify the routing code in the editor view. This turns out to have the nice side-effect of making the exploration editor page load a lot faster :-)
    Schema change: make param specs into key-value pairs so that exactly one param spec is defined for each param name.
    Complete the schema change that allows more flexible rule specifications (i.e. that allow Boolean combinators and classifying based on parameters).
    Re-allow the setting of exploration initialization parameters.
    In the frontend, rename parameters to paramSpecs.
    Modify the state parameter change editor to use the same value generators that are used in the widget parameter editor.
    help links
    Add version data to requests and responses. Add version check when saving an exploration.
    Introduce server-side validation of exploration and state names. Standardize the characters that can be used in these names.
    Display version history in the editor UI. Add snapshot models to Django backend.
    Fix issue 33: If there is no path from a node to the END state, color it pink on the exploration graph.
    Adding states and adding rules should update the graph immediately, without refreshing the page.
    Fix issue 29: Display a warning if the END state is unreachable.
    Fix for issue 26: once a state is renamed, update its name immediately on the exploration graph, rather than wait for the page to be reloaded.
    More clear stats paths
    - Adds a legend for stats graph viewer
    - Fixes arrows seeming to be different colors
    - Adds different colors for different help types
    - Removes text explaining what is now in the picture
    Make controllers accept exploration and state ids as arguments, instead of domain objects.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Giving more saliency to borders in stats view
    Make 'highlight states' for graph viz more configurable
    Basics of "highlight states that need help"
    Use the first entry counts (rather than the total entry counts) to determine node colors for the state graph visualization.
    Make the state graph visualization into a reusable directive.
    Remove YAML editor functionality.
    Propagate the new representation of a state to the frontend.
    Propagate the use of the terms 'rule_specs' and 'description' to the frontend.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Start of a graph visualization for stats
    Minor linting.
    finished exploration-level parameter interface with editing.
    TODO:
    some code cleanup (TODOs in code)
    export exploration-level params in yaml
    think about adding ability to delete parameters (only delete if all associated param changes are gone? or maybe just delete all associated param changes?)
    Give the stats editor tab its own namespace
    Add 'improvable states' to exploration stats page
    Reorganize frontend JS files, partitioning them into 'apps'.
    Fix bugs in the exploration editor frontend: add-new-state did not work properly, state visualizations did not update when changes were made.
    1. Make a proper responsive navbar, using a customized version of the Bootstrap lib. 2. Fix a bug where the state name was not displaying on the state editor page.
    Add a new tab for exploration statistics.
    Restructure editor views.
    Restructuring the view directories more intuitively.
    Make circles in exploration graph into ellipses. Remove dead code.
    Continue tidying up the exploration resource.
    Use promises to smoothly handle exploration loading in the exploration editor page.
    Fix the deferred loading problems with promises. We still need to simplify how all this works.
    Reloading the state editor page breaks the page, due to promises not being handled properly. This is a temporary fix.
    Guard against some errors in the frontend (which occur when data has not yet been received from the backend).
    Moving to the Google charts API
    -got rid of some out-of-date todos
    -changeable parameters
    -fixed param change interface to correctly set parameters to values of other parameters (including student's previous answer)
    Moving parameters to use the new Parameter models. This change is not backwards-compatible.
    Widget sticky bool param added.
    
    Prevents reloading the widget if it is the same type as the previous
    state's.
    Added a checkbox in editor to control this bool param.
    Make the state name form close after the save button is clicked.
    Adding an new field to individual states to ease tracking of unresolved answers.
    Move statistics to the exploration metadata tab.
    Integrate 'Add new rule' button better with the list of answer classification rules. Allow the editor to collapse the interactivity preview.
    Improvements to the UI: add instructions to the exploration editor state diagram, add cancel buttons to the exploration metadata editors, and lighten the color of the reader conversation log so that the most recent interaction stands out.
    Show top ten stats by count for each state.
    Move exploration metadata to its own view, so that the exploration map can fill more of the screen.
    Removing the AugmentedUser class to make queries faster.
    Allowing multiple feedback responses per rule.
    Add error pages.
    Make it possible to retrieve exploration-level parameters from the backend.
    changed exploration parameters model to be more similar to widget param model for consistency and ease of use;
    added almost all propagation of adding new parameters, except it breaks exploration a bit so commented out.
    functional use of Select2 that doesn't add anything new yet but has hooks to.
    Introducing a request payload to minimize the number of JSON conversions needed.
    Allow addition of collaborators.
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Removing stateId when user navigates back to the exploration page.
    Fixing an error in explorationData.getData()
    Allowing new states to be added from within other states.
    Refactoring the state deletion code. Also, we now do not create an exploration if any of its setup parameters (like the YAML file) are invalid.
    Fix infinite warning error. Ensure initialization of newly-created states is done correctly.
    Connecting the set-parameter interface to the backend, and tweaking its UI
    Introducing a postMessage framework for interactive widgets
    Improving the exploration creation flow on the gallery page.
    Restructuring JS files, and adding caching headers to static content.
    Remove obsolete TODO.
    Remove a few logging statements.
    Move interactive widget preview into a separate file.
    Make YAML editing work.
    Sending all data via the Exploration object in the frontend. Renaming stateContent to content for parity with the backend. Fix URL routing.
    Improve the interactive widget UI
    Fixing some bugs in the interactive widget preview
    Making the exploration metadata editor display less noisy. Removing some unneeded code due to the destination refactor. Adding a method to models.State to output an entire state as a Python dictionary.
    Various small frontend fixes.
    Remove unused method
    Fixing the dest specifier in the interactive widget editor.
    Refactoring ExplorationData methods to replace saveStateChange
    Various small frontend fixes.
    Removing final vestiges of the old system (actions, inputType, dests)
    Store destination ids rather than names. Make the exploration tree format rules correctly.
    Removing stateData. Using explorationData for all get transactions.
    Start moving put and get requests to a common State/Exploration resource in the frontend
    Cleaning up some unused code
    All END states are now 'END'; there is no more use of '-1'. All 'END' and '-1' literals have been changed to use one of the constants in either utils.py or editorExploration.js.
    Move interactive widget preview to separate file, and into ng-view
    Deleting old files.
    Continuing to replace the old input_view/action_set infrastructure with the new interactive_widget/interactive_ruleset infrastructure. WARNING: The present commit leaves Oppia in a broken state.
    Adding default rules to each of the rulesets.
    Add edit, delete, move up and move down buttons for individual rules
    Add feedback textarea and dest input field to rule modal, and display these properties in the overall rule UI
    Fully persist interactive widget parameters and rulesets.
    Adding rule display for interactive widgets. Still need to save updates to the server.
    Persisting interactive widget ids for a state. Renaming 'blurb' to 'description' for consistency; renaming widget.class to widget.id since class is a reserved word in JavaScript.
    added most of the interface for declaring and changing parameters; TODO:
    (more details in forthcoming email)
    add a model for the parameter changes;
    make parameter changes per-dest/category rather than per-state;
    add similar interface for editing parametsr/changes;
    add validation to inputs;
    add yaml interface;
    actually connect to back end;
    Add  dependency to handle Explorations (and later States).
    Adding new fields to the state model class. Adding UI elements for customizing interactive widgets and displaying rules for them.
    Populate the interactive widget repository iframe. Remove wysihtml5.
    Adding an interactive widget preview window
    Minor tweaks to state-deletion and graph-node-color logic.
    Removing jsPlumb library and fixing the 'add state' behavior on the exploration page
    Fixing URL routing
    Lots of small edits and refactorings
    Simplify save state logic
    Fix a bug in the handling of action_sets
    Change default state editor mode to GUI mode
    Allow explorations to be downloaded as YAML files
    In general, only reload explorationData when the exploration editor tab is activated
    Making the routing for the exploration editor page work
    Fix two bugs: (a) remove a deprecated reference to editStateVertexName(), and (b) force exploration reload on submission of YAML file.
    Allow deletion of explorations
    Allowing widget content to be empty
    Fix location hash routing
    Removing the old state graph
    Finishing touches to the state graph visualization
    Adding further touches to the graph visualization
    Remove 'factory' suffix from factories
    Removing drag-and-drop palette, combining exploration editor tabs, and starting an experiment with a d3.js tree layout
    Move gui editor directives to the guiEditor.js file
    Allowing preview images for explorations to be uploaded
    Clearing some unneeded methods and variables. Minor fixes to the widget repository.
    Combining exploration PUT requests into a single saveExplorationProperty() method
    Remove unneeded saveQuestionName() method
    Synchronize PUT methods on explorations and tighten up the frontend for editing exploration properties
    Remove generic 'metadata' property for explorations and replace it with individual fields
    Remove some logging
    Fixing some bugs in the gui editor
    Fix a bug in the GUI editor
    Remove feedback modals; make them appear inline
    Fix three typos
    Move GUI view initialization to its controller
    Separating the code for the various editor views into their own JS files, and removing the superfluous data from the backend responses
    Move templates to editor/views and make a separate GuiEditor controller.
    Remove no-longer-needed closeEditorWindow() functionality
    Refactoring currentActiveInput management
    When the graph node is clicked, the view switches to the state editor view
    Refactoring current active input management
    Changing stateText to stateContent everywhere else
    Unify the various names used for default categories to 'Default'
    Streamlining warnings behaviour
    Adding a d3.js graph
    Minor additional fixes to the previous CL
    Start building a single-source-of-truth for state data
    Refactoring to have a common factory for state information
    Complete the update from YAML input
    Update the frontend when a YAML representation is saved
    Enable loading of default YAMLfrom the backend
    Remove state name checking in the YAML handler.
    Finish the YAML conversion.
    Adding YAML file verification.
    Removing old CSS files and correcting a bug in the widget view
    Adding a YAML text editor for each state.
    Experiment with displaying state data as YAML, and updating image, video and widget behavior in the editor UI.
    Combining .states and .optionalActions (some of this was also done in the previous changelist)
    Making third-party files internal and inserting them into the startup shell script.
    Add TODO to fix widgetCode display
    Fix widget iframing
    Enable publishing of explorations.
    Renaming standard and output directories to dev and prod respectively.
    Making interactive widgets work
    Removing more traces of metrics, and transferring the set image classes to the CSS file.
    Updating the classifier views.
    Transitioning existing Oppia classes and pages to the new structure
    Creating a new set of HTML, JS and CSS files for a redesigned Oppia frontend
    Initial commit.
    Fix reachability verification checks. Move legend in history tab within the graph. Colour end states dark green.
    Indicate editor tab in navbar breadcrumb. Use cards in subsidiary editor pages.
    integration tests for history page
    Address review comments.
    
    (1) Add proper tooltips to icons in navbar.
    (2) Reduce size of top-left Oppia icon to 40px height.
    (3) Change box-shadow of right sidebar to follow material design spec.
    (4) Standardize horizontal and vertical offsets of the titles of the various tabs.
    Move tabs to the top navigation bar, making the editor UI much cleaner. Add headings to the various pages in the editor.
    add protractor tests for history page
    Change 'return' to 'cancel' in order not to confuse the JS minifier.
    Fix old state names, respond to other review comments
    Fix old name label in modal
    A few more changes:
    * Clearer old name label
    * Rename explorationVersionData -> explorationVersionMetadata
    * Prevent querying for state data when state was added or deleted (and does not exist in old/new versions)
    UI changes to history graph:
    * More informative title
    * Only show legend of state types used
    * Actually restrict width of YAML
    * Also fix bug in refreshing version history
    Respond to review comments, refactor snapshots objects in ExplorationHistory.js
    Additional modifications to address review comments
    Partially address review comments
    Changes to state diff modal layout, add export exploration data by state
    and display state data in codemirror
    Remove mergeview, add history graph, add state modal with mergeview
    Temporarily remove version history graph
    Fixes to history graph UI
    Separate node IDs and labels, add links styles mapping, add secondary node label to node title
    Refactor state graph to use node IDs
    Add legend for history diff graph, remove auto-scroll to codemirror
    Add state and link colors to history graph
    Address additional review comments
    Address review comments
    Respond to additional review comments
    Create a controller for the exploration graph. Remove more occurrences of .
    Address Amit's comments from release testing.
    
    1) Rework the 'Compare revisions' button and surrounding text in the exploration history tab.
    2) Make button layout more consistent across the editor and gallery pages.
    3) Remove header on forum page.
    4) Right-align 'Create New Exploration' button in gallery with the individual gallery tiles.
    5) Remove some text in the 'publish exploration' modal.
    Address review comments
    UI improvements and bug fixes to history diff-view
    * Auto-update diff-view when selection is changed
    * Make diff-view larger
    * Auto scroll to diff-view on selection
    * Remove 'revert' function in diff-view
    * Fix bug in returning version number when there are more than 30 revisions
    * Fix alignment of revision data
    Address comments
    UI improvements to history page
    Hide codemirror instance when not in use
    Display details of revisions compared
    Respond to review comments
    Add CodeMirror MergeView to compare history
    Also change ui-codemirror from v0.1.1 to v0.1.2
    Address additional comments
    Address review comments
    Allow exploration to be downloaded as JSON object
    Move exploration history functions out into a separate controller.
    Remove a couple of places that were still editable in the view-only mode for the exploration editor.
    Resolving merge problem.
    First pass at upgrading to Bootstrap 3.
    Move exploration metadata and version history to separate tabs, and add more documentation to the UI.
    Move state parameter changes editor to sidebar. Also, various minor wording changes.
    Consolidate retrieval of interaction registry, and make it happen during page load.
    Fix Karma test
    Move the current state name to the sidebar.
    Move the save and publish buttons to the navbar.
    Complete the deprecation of 'widget'.
    Resolving comment.
    Resolving concerns
    Add service for comparing states between 2 versions
    Fix 'can rename state to END' bug in state editor.
    Refactor graphData out into a graphDataService.
    Create a controller for the exploration graph. Remove more occurrences of .
    Add an explorationStates service.
    Minor cleanup fixes based on Jacob's comments
    Add a welcome message to the content editor and more contextual feedback to the interaction editor.
    Add StateEditorSpec tests.
    Resolve review comments.
    Make changes from review.
    Add tests forStateEditor.
    Show the active rule inline, rather than at the bottom.
    Require the user to explicitly select the interaction for each state.
    Remove duplicate warnings.
    Add validation for rules and interaction customizations.
    Various improvements to the editor page.
    
    (1) Reorganize the interaction dropdown menu to remove many single-item categories.
    (2) Remove help dropdown menu.
    (3) Fix bug when user clicks 'add new state' and then cancels.
    (4) Move 'Create New...' to the second position in the rule destination dropdown so that it does not look like a menu heading.
    Remove the 'widget_sticky' setting.
    Consolidate retrieval of interaction registry, and make it happen during page load.
    Fix reachability verification checks. Move legend in history tab within the graph. Colour end states dark green.
    Remove further instances of 'EndConversation' from the core codebase.
    Add validation for the new EndConversation interaction, and hide its rule display.
    Allow clicking outside a modal to dismiss it
    Make 'preview mode' into a separate tab.
    Move the save and publish buttons to the navbar.
    Complete the deprecation of 'widget'.
    Migrate the backend widget registries and the controllers.
    Cleaning up in response to code review
    Refresh state graph on stats page when a different version is selected.
    
    Due to lack of a clean alternative, 'all' and 'none' are shown with the
    current version of the graph.
    Display the exploration title in the top navbar.
    Move exploration parameter specs to a standalone service.
    Tidy up logging in editor view.
    Add new stages to the tutorial for the preview and save buttons; rewrite other parts to flow better. Fix issue with the part of tutorial that pertains to rules not displaying correctly. Fix integration tests.
    Refactor tutorial code into a help tab controller and a separate service tracking first-time usage.
    Refresh the state editor after a state deletion event.
    Refactor state graph to use node IDs
    Upgrade Angular to v1.3.0-rc.5 and jQuery to v2.1.1.
    Remove duplicate dependency.
    More fixes to the editor view.
    
    (1) Pull interaction selector out of the customization view.
    (2) Dismiss warnings when rules are changed.
    (3) Shorten the labels for the 'save changes' and 'discard changes' buttons.
    (4) Fix issue #147: show an error message when an invalid link is saved.
    Fix several bugs:
    
    1) Remove the obtrusive warning message when the objective field is blurred in the exploration settings page.
    2) Highlight the rule tiles properly on mouseover.
    3) If the interactive widget editor is open and the user navigates to preview mode, save the interactive widget first.
    4) Remove one click from the 'create new exploration' flow in the gallery page.
    5) Fix a bug where the numeric input widget was not accepting inputs of 0.
    6) Fix a display bug where the numeric input widget was aligned too far to the left.
    Add a tutorial for the editor page.
    Show a warning on invalid new state names, rather than disabling the 'Done' button.
    Fix 'can rename state to END' bug in state editor.
    Refactor graphData out into a graphDataService.
    Move more of the state operations to explorationStatesService.
    Address review comments.
    Add an explorationStates service.
    Add a live-preview mode to the exploration editor.
    Add an option for private explorations to be viewed by anyone with the link.
    Allow states to be added in the frontend without requiring a backend RPC.
    Complete the 'change initial state name' feature.
    Frontend code for making initial state name settable. TODO: backend code and the body of saveExplorationInitStateName().
    Add language-code selection functionality to the exploration editor.
    Refactor the state interactive widget frontend code.
    
    In particular:
    
    1) Move the tag construction for the widget preview to the frontend.
    2) Introduce new state property services for the widget attributes.
    Remove oppiaRequestCreator and replace it with an HTTP request interceptor.
    Consolidate error handling boilerplate.
    
    Also:
    
    (a) Have a friendlier 404 error page.
    (b) Remove unused route from app.yaml.
    (c) Add a robots.txt file.
    Add further warnings to the frontend exploration editor. Now, under normal operation, a backend server validation error should never be triggered.
    Add a skin chooser to the frontend editor UI.
    Set default headers for POST and PUT requests from the frontend.
    Route reader-submitted feedback to the new feedback system, and remove the frontend for the old feedback system.
    Implement basic functionality for a readonly editor view of an exploration.
    Move all editor-related services to a common file in the editor/ directory.
    Remove stats versioning selector; computed stats seem to be buggy.
    Minor linting to stats code.
    Indicate editor tab in navbar breadcrumb. Use cards in subsidiary editor pages.
    Cleaning up in response to code review
    Move tabs to the top navigation bar, making the editor UI much cleaner. Add headings to the various pages in the editor.
    Further cleanup of work on versioned statistics.
    Cleaning up based on code reviews
    Response to code review of c4088eb7deba
    Fix error in div structure for editor statistics page.
    Add versioned statistics aggregation and allow different versions to be viewed from stats page
    Fix bug where state graph was not being centered correctly on page load.
    Address review comments. Standardize calls to datetime service.
    Refactor state graph to use node IDs
    Address more review comments.
    Prep for migration to stats jobs
    1. Stop writing to State Counter (old style) models
    2. Migrate all uses of current state counters over to aggregator
    3. Update aggregator to use both old and new models correctly
    4. Create one off job to deal with the overlap between these two systems
    Minor refactoring of statistics frontend and backend, including removing some unused methods.
    Rename StatsViewer to ExplorationStatistics to be more consistent with other files in the editor templates directory.
    Fix several issues discovered during release testing:
    
    1. Make username input field on editor registration page shorter.
    2. Remove non-working links in statistics tab that link back to the state editor.
    3. Ensure that the number of times an answer was submitted is visible in the statistics tab modal.
    4. Make statistics tab rule descriptions slightly more human-readable.
    5. Rename 'Common responses' to the more accurate 'Unhandled responses'.
    6. Remove 'by' in front of author names in the exploration feedback threads view.
    7. Remove some whitespace above the feedback thread list.
    8. Disallow submission of reader feedback until some feedback is typed.
    9. Use human-readable status names for feedback messages.
    10. Shorten the text in the reader feedback modal.
    Route reader-submitted feedback to the new feedback system, and remove the frontend for the old feedback system.
    Remove a couple of places that were still editable in the view-only mode for the exploration editor.
    Resolving merge problem.
    First pass at upgrading to Bootstrap 3.
    Fix a vertical stats graph cutoff bug in Firefox. Make some of the wording on the stats page more systematic.
    Add a modal that shows a larger version of the state graph minimap. Add an option to pan the visualization so that it centers on the current state.
    Make each state visualization graph detect the width and height of its container. Make the state graph minimap taller.
    Fix a display error in the modal dialog for the stats viewer.
    Removing v2 of stats models to ease further development
    Removing v2 of stats models to ease further development
    Merge of missing answer changes, fixing conflicts
    Allow reader feedback to be marked as fixed or will_not_fix.
    Show reader feedback in the state editor.
    Make the feedback model more flexible.
    Only load full state statistics when they are asked for, rather than when the exploration is loaded. This decreases the loading time significantly.
    Adding a three-column layout for the state editor.
    Simplify the state editor UI. Remove unused CSS rules.
    Create a StatsViewer controller and move the modal code into an HTML template for maintainability.
    Introduce a StatsViewer controller. Improve the routing behavior in the exploration editor.
    Remove dependency on ngRoute and simplify the routing code in the editor view. This turns out to have the nice side-effect of making the exploration editor page load a lot faster :-)
    SVG style popup for more info
    More clear stats paths
    - Adds a legend for stats graph viewer
    - Fixes arrows seeming to be different colors
    - Adds different colors for different help types
    - Removes text explaining what is now in the picture
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    move stats page around to emphasize prettier representations
    Basics of "highlight states that need help"
    Use the first entry counts (rather than the total entry counts) to determine node colors for the state graph visualization.
    Make the state graph visualization into a reusable directive.
    Move more logic into the domain layer. Fix some select2 error messages in the frontend that occur due to imported libraries being in the wrong order.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Start of a graph visualization for stats
    Clean up stats page by not listing rules that haven't been hit
    Only show "States that need a little help" when there are some
    Add 'improvable states' to exploration stats page
    Add missing file from previous commit
    Fix reachability verification checks. Move legend in history tab within the graph. Colour end states dark green.
    Add validation for the new EndConversation interaction, and hide its rule display.
    Allow clicking outside a modal to dismiss it
    Indicate editor tab in navbar breadcrumb. Use cards in subsidiary editor pages.
    Fix for comparison of deleted and added states in history page
    Change 'return' to 'cancel' in order not to confuse the JS minifier.
    Fix wrong legend graph color
    Fix old state names, respond to other review comments
    A few more changes:
    * Clearer old name label
    * Rename explorationVersionData -> explorationVersionMetadata
    * Prevent querying for state data when state was added or deleted (and does not exist in old/new versions)
    UI changes to history graph:
    * More informative title
    * Only show legend of state types used
    * Actually restrict width of YAML
    * Also fix bug in refreshing version history
    Respond to review comments, refactor snapshots objects in ExplorationHistory.js
    Additional modifications to address review comments
    Partially address review comments
    Changes to state diff modal layout, add export exploration data by state
    and display state data in codemirror
    Remove mergeview, add history graph, add state modal with mergeview
    Show notification counts in the navbar and page title, where appropriate. Highlight new updates in the dashboard. Fix a couple of bugs in the settings and history tabs where the exploration data was not being fully loaded before the tab was displayed.
    Fixes to history graph UI
    Separate node IDs and labels, add links styles mapping, add secondary node label to node title
    Refactor state graph to use node IDs
    Add legend for history diff graph, remove auto-scroll to codemirror
    Add state and link colors to history graph
    Add comparison for rules in version history
    Address additional review comments
    Fix lots of small bugs.
    
    (1) In the MusicNotesInput widget, rename 'play desired sequence' to 'play target sequence'.
    (2) In NumericInput view for the learner's input, do not show integers as floats.
    (3) In the TextInput widget, improve the description of the 'rows' field.
    (4) Rename Code REPL widget to 'Code input'.
    (5) In the MusicNotesInput widget, change the 'Add Note' button to make it clear what type of note is being referred to (a music note, not a comment).
    (6) Rename 'Tutorial' to 'Walkthrough' (the former sounds like 'manual').
    (7) Disable 'look inside' functionality in preview mode.
    (8) Add Amy's name to credits.
    (9) Show edit buttons in gallery for moderators (issue 373).
    (10) Fix broken loading when the history tab in the exploration editor is shown on initial load.
    (11) Fix the broken revert modal in history tab (the link to try out the old version did not work).
    (12) Move the 'create' button nearer to the 'add new state' input field.
    (13) Move the learner answer div styling to a common location in the conversation skin view.
    (14) Allow states defined in rules to use '.' (issue 166).
    (15) Add moderator page to profile menu (issue 374).
    Address review comments
    Add service for comparing states between 2 versions
    Respond to additional review comments
    Respond to review comments
    Create a controller for the exploration graph. Remove more occurrences of .
    Add services for version history tree
    Also download all snapshots in history tab
    Address Amit's comments from release testing.
    
    1) Rework the 'Compare revisions' button and surrounding text in the exploration history tab.
    2) Make button layout more consistent across the editor and gallery pages.
    3) Remove header on forum page.
    4) Right-align 'Create New Exploration' button in gallery with the individual gallery tiles.
    5) Remove some text in the 'publish exploration' modal.
    Verify that an old version of an exploration is still valid before reverting to it.
    Address review comments
    UI improvements and bug fixes to history diff-view
    * Auto-update diff-view when selection is changed
    * Make diff-view larger
    * Auto scroll to diff-view on selection
    * Remove 'revert' function in diff-view
    * Fix bug in returning version number when there are more than 30 revisions
    * Fix alignment of revision data
    Address comments
    UI improvements to history page
    Hide codemirror instance when not in use
    Display details of revisions compared
    Respond to review comments
    Add CodeMirror MergeView to compare history
    Also change ui-codemirror from v0.1.1 to v0.1.2
    Address additional comments
    Address review comments
    Allow exploration to be downloaded as JSON object
    Move to the recommended Angular .controller syntax.
    
    This follows the recommendation in the list of breaking changes
    for Angular 1.3.0 described at
    
        https://github.com/angular/angular.js/blob/master/CHANGELOG.md#130-beta15-unbelievable-advancement-2014-07-11
    Move exploration history functions out into a separate controller.
    Added additional margins and other small wording changes.
    Address review comments.
    Numerous changes to editor page.
    Move 'unresolved answers' section to the bottom of the page. Make tutorial only focus on active rule.
    Show the active rule inline, rather than at the bottom.
    Require the user to explicitly select the interaction for each state.
    Made numerous changes to tutorial, fixed broken tutorial scrolling.
    Edited many margins, changed drag icon, added blog link, changed tutorial curtain.
    Do not show the default rule if it has not been set.
    Minor changes to alignment and wording of various labels and buttons.
    Move state parameter changes editor to sidebar. Also, various minor wording changes.
    Changed more colors and margins.
    Changed a lot of margins, font sizes, etc.
    Rename doesCurrentStateHaveRules to isCurrentStateTerminal.
    Move state name from sidebar to main editor. Tidy up CSS for avatars.
    Style the rule editor.
    Restyle the content and interaction parts of the state editor.
    Add validation for the new EndConversation interaction, and hide its rule display.
    Animate state transitions in editor.
    Move rule tabs to the bottom of the state editor.
    Split the rules section of the editor into its own controller.
    Remove header of subsequent state from editor view; remove 'click to see rules' button. Style the editor so that the layout looks nice.
    Move the current state name to the sidebar.
    In the state editor, show a snippet of a card for the next state where applicable.
    Start redesigning the state editor.
    Protractor tests: Switch editor and player utilities to using protractor-specific classes where possible. Also remove some instances of 'widget'.
    Do not show unnecessary controls in the non-state-editor views of the editor page.
    Change interaction editor icon from a pencil to a cog (to suggest 'settings' or 'customization').
    Fix issues 441 and 442: recompute graph after the first state of the exploration is changed, and save the state name when a tab transition is made.
    Editor tutorial edits.
    Renamed interactions for consistency, added padding to rule headings and buttons.
    Fix more UI issues.
    
    (1) Fix overflowing interactive map widget.
    (2) Reverse the order of the cancel/submit buttons in the feedback modal in the learner view.
    (3) Add icons to the Edit and Preview buttons in the exploration editor page.
    (4) Adjust the width of the header row so that the control buttons fit in one line.
    (5) Allow the tutorial to be started properly when the user is in preview mode.
    (6) Widen the tutorial tooltip for the initial step, and remove the step numbers in the red circles.
    (7) Make some CSS fixes to the exploration editor for the case when the exploration is not editable by the current user.
    Add a tutorial for the editor page.
    Show a warning on invalid new state names, rather than disabling the 'Done' button.
    Fix 'can rename state to END' bug in state editor.
    Minor cleanup fixes based on Jacob's comments
    Tweaked a lot of color, wording, and alignment issues in the exploration editor.
    Further UI improvements to the state content and interaction editors. Change the default initial state name.
    Simplify the state editor.
    Remove several unnecessary borders.
    Simplify the widget customization interface.
    Make the new widget specifications work in the frontend editor and reader views.
    Fix a bug where the state name is not updated in the HTML.
    
    Steps to reproduce:
    (1) Create a new exploration.
    (2) Make a new state called 'a'.
    (3) Navigate to state 'a'.
    (4) Make a new state called 'b'.
    (5) Navigate to state 'b'.
    (6) Click on the state name field in the main editor. Although the
        non-editable view shows 'b', the editable view shows 'a'. This
        is a bug.
    Add additional space between navbar and exploration editor content (this is based on Amit's commit). Move the state title to the right so it looks more centered.
    Route reader-submitted feedback to the new feedback system, and remove the frontend for the old feedback system.
    Address review comments. Remove unnecessary space between the two columns of the state editor.
    Move the parameter changes section into the content section so that it is less obtrusive as the first thing on the state editor page.
    Frontend UI fixes to the state editor.
    Resolving merge problem.
    Implement basic functionality for a readonly editor view of an exploration.
    Get rid of the 'answers received' section at the bottom of the editor, and put it on the bottom-right instead.
    First pass at upgrading to Bootstrap 3.
    Add horizontal rule to state title, reduce height of parameter area, revamp 'add state' input box and button.
    Added horiz rule between params and content to match other sections.
    changed all buttons to bootstrap, fixed some alignments
    Remove the 'incoming states' section, which isn't needed since the graph is always visible.
    Remove comments in order to restore functionality into the state editor UI.
    Primarily removed state editor from modal window into main editing area, turned exploration graph into a mini-map.
    Use a downward-left pointing pencil as the edit icon, so that the pencil points towards the item that is to be edited.
    Use a downward-left pointing pencil as the edit icon, so that the pencil points towards the item that is to be edited.
    Make the central column of the state editor wider, and remove some buttons.
    Remove some Edit buttons. Restyle the rule picker.
    Remove the rule editor modal and allow parts of a rule to be edited inline.
    Remove some Edit buttons. Restyle the rule picker.
    Remove the rule editor modal and allow parts of a rule to be edited inline.
    manual rebase of state_editor.html
    added a feedback link to bottom of state editor
    manual rebase of state_editor.html
    Remove the rule editor modal and allow parts of a rule to be edited inline.
    added a feedback link to bottom of state editor
    Address issue 110: make the state header editable, and remove the now-redundant state editor title line.
    Address issue 110 by showing the state name in the state editor header. Try and remove some vertical whitespace, and make the state editor taller.
    Remove the concept of stateId from the frontend.
    Show reader feedback in the state editor.
    Allow multiple states to be edited in a single commit.
    Minor wording changes.
    Allow multiple states to be edited in a single commit.
    Minor wording changes.
    Add a dialogue requesting a commit message when saving to the state editor.
    Editor html style fixes.
    Split state editor html.
    Split state editor html.
    Add contextual help links to state editor pages.
    Move the unresolved answers section to its own controller.
    Small UI tweaks: remove toggles on the state editor page; move incoming states outside the 'editable stuff' area; align a checkbox.
    Use consistent button styles on the state editor page. Right-align all buttons. Have a consistent 2:10 column layout with the 10-column subdivided as 9:3.
    Rewrite docs for noninteractive content input field. Fix a couple of small UI bugs.
    Fix issue 61: filename in image upload UI should default to the name of the file being uploaded. Also added loading indicator.
    Improve the parameter change interface to be more human-readable.
    Improve the UI for the changelist buttons. Add another set of buttons at the bottom of the page.
    Adding a three-column layout for the state editor.
    Add batched saving for everything except param_changes. Fix an error in the client that mistakenly added 'subject: answer' to the default rules.
    Split the interactive widget frontend variables into variables that define the general widget, and variables that customize it, to more clearly match the way they are modelled in the backend.
    Make cursor turn to pointer on links. Change the UI for adding new rules. Do not consider changing something to the same value to be an actual change.
    Implement batched saving for state names and content.
    Simplify some of the state editor code. Rename InteractiveWidgetPreview to InteractiveWidgetEditor.
    Rename GuiEditor to StateEditor.
    Hide non-essential elements of the state editor under a fold.
    Fix style issues in state editor.
    State editor layout: indent elements that are not in reader.
    Display widget parameter descriptions instead of the raw parameter names.
    Simplify the state editor UI. Remove unused CSS rules.
    Reinstate the image upload feature.
    Reinstate the noninteractive image widget. This commit provides a filepicker; the upload feature will be added in a future commit.
    Complete end-to-end display of noninteractive video and hints widgets. Remove unneeded code.
    Add directives for the oppia-noninteractive tags so that they can be shown in the editor view. Make the GuiEditor show a single RTE for non-interactive content.
    First stage of converting the noninteractive content editor into a single highly-functional RTE. This is still missing dialogs for editing the widget properties, and has a few small hacks that need to be cleaned up before being pushed into master.
    Add directives for the oppia-noninteractive tags so that they can be shown in the editor view. Make the GuiEditor show a single RTE for non-interactive content.
    First stage of converting the noninteractive content editor into a single highly-functional RTE. This is still missing dialogs for editing the widget properties, and has a few small hacks that need to be cleaned up before being pushed into master.
    Remove the image storage model. Move image file uploading to use the file system storage model.
    Remove YUI dependency; use jwysiwyg for all RTEs.
    Move more modals and remove some duplicate code.
    Move more modals to the angular-ui.bootstrap framework.
    Remove dependency on ngRoute and simplify the routing code in the editor view. This turns out to have the nice side-effect of making the exploration editor page load a lot faster :-)
    Use ui-bootstrap tooltips throughout, except in modals generated in JS (this will come later). The aim is to remove the old angular-ui dependency.
    Upgrade Angular to 1.2.0-rc.2. Change modal callsites to buttons instead of links, and add contextual escaping using  where needed. Add a separate page for 404 errors.
    Re-allow the setting of exploration initialization parameters.
    In the frontend, rename parameters to paramSpecs.
    Modify the state parameter change editor to use the same value generators that are used in the widget parameter editor.
    help links
    Allow text in the interactive iframe to be rendered using mathjax.
    Finish addressing issue 21: add information about incoming links to a state.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Remove YAML editor functionality.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Add support for non-interactive widgets.
    Reorganize frontend JS files, partitioning them into 'apps'.
    Remove superfluous scope.apply() calls. Remove unused code.
    Remove superfluous () calls. Remove unused code.
    Change the rich text editor to YUI 2. Fix a bug in image editing.
    1. Make a proper responsive navbar, using a customized version of the Bootstrap lib. 2. Fix a bug where the state name was not displaying on the state editor page.
    Restructure editor views.
    Minor fixes the the main page and the rich text editor.
    Add a rich text editor.
    Add help text
    Improving the parameter change interface.
    Connecting the set-parameter interface to the backend, and tweaking its UI
    UI tweaks to the exploration editor
    Move interactive widget preview into a separate file.
    Sending all data via the Exploration object in the frontend. Renaming stateContent to content for parity with the backend. Fix URL routing.
    Move interactive widget preview to separate file, and into ng-view
    Tweaking the interactive widget UI
    Deleting old files.
    added most of the interface for declaring and changing parameters; TODO:
    (more details in forthcoming email)
    add a model for the parameter changes;
    make parameter changes per-dest/category rather than per-state;
    add similar interface for editing parametsr/changes;
    add validation to inputs;
    add yaml interface;
    actually connect to back end;
    Remove jargon (YAML) and add a comment to the start.sh file about WebOb 1.1.1 not working with PUT requests.
    Removing drag-and-drop palette, combining exploration editor tabs, and starting an experiment with a d3.js tree layout
    Redesign the widget UI in the exploration GUI editor. Add a header to the widget repository page.
    Allowing preview images for explorations to be uploaded
    Fixing some bugs in the gui editor
    Remove feedback modals; make them appear inline
    Setting up scaffolding for the widget repository
    Fix three typos
    Move GUI view initialization to its controller
    Add views that were omitted from previous CL
    Show intro card image in editor preview.
    Make 'preview mode' into a separate tab.
    Show parameter values in editor preview.
    Add a live-preview mode to the exploration editor.
    Move to the recommended Angular .controller syntax.
    
    This follows the recommendation in the list of breaking changes
    for Angular 1.3.0 described at
    
        https://github.com/angular/angular.js/blob/master/CHANGELOG.md#130-beta15-unbelievable-advancement-2014-07-11
    Consolidate error handling boilerplate.
    
    Also:
    
    (a) Have a friendlier 404 error page.
    (b) Remove unused route from app.yaml.
    (c) Add a robots.txt file.
    Introduce a new user dashboard page.
    Remove all traces of the old feedback models.
    Profile page expl stats coding fixes.
    Compute and show exploration stats in profile page.
    display feedback on the profile page (needs debuggign - data gets lots somewhere along the way)
    display feedback on the profile page (needs debuggign - data gets lots somewhere along the way)
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Implement the necessary queries for the gallery and profile pages.
    Tighten up the implementation of user settings and rights.
    Make JS files compatible with minification.
    Add an editor prerequisites page with information about the CC0 license.
    Move the request creator to a factory method on the main app, since it is used everywhere.
    Move the request creator to a factory method on the main app, since it is used everywhere.
    Redirect on successful username save
    Check username for uniqueness
    
    Includes code review changes from previous username commits
    Requires a username for editors and adds a path to create them
    Check username for uniqueness
    
    Includes code review changes from previous username commits
    Requires a username for editors and adds a path to create them
    Add a 'create new exploration' button to the profile page.
    Requires a username for editors and adds a path to create them
    Requires a username for editors and adds a path to create them
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Remove some unnecessary variables.
    Show a loading indicator for the profile page.
    Minor linting.
    Using proper JS formatting in Profile.js
    removing console.log lines
    Pretty-ing up the profile page
    Adding "My Explorations" to the profile page
    Creating a profile page with improvable states
    Reorganize frontend JS files, partitioning them into 'apps'.
    Restructuring the view directories more intuitively.
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Restructuring JS files, and adding caching headers to static content.
    Move the current state name to the sidebar.
    Allow clicking outside a modal to dismiss it
    Indicate editor tab in navbar breadcrumb. Use cards in subsidiary editor pages.
    Move tabs to the top navigation bar, making the editor UI much cleaner. Add headings to the various pages in the editor.
    Fix two UI issues:
    
    (1) When the save modal is opened, shift focus to the textarea field in which to enter a commit message.
    (2) After a new feedback message is sent, clear the feedback message input field.
    Address review comments. Standardize calls to datetime service.
    Resolving comments.
    Renaming oppiaDateFormatter factory and related methods to DatetimeFormatter
    Remove oppiaRequestCreator and replace it with an HTTP request interceptor.
    Move to the recommended Angular .controller syntax.
    
    This follows the recommendation in the list of breaking changes
    for Angular 1.3.0 described at
    
        https://github.com/angular/angular.js/blob/master/CHANGELOG.md#130-beta15-unbelievable-advancement-2014-07-11
    Consolidate error handling boilerplate.
    
    Also:
    
    (a) Have a friendlier 404 error page.
    (b) Remove unused route from app.yaml.
    (c) Add a robots.txt file.
    resolving comments.
    Feature request to show time instead of date when date is current date.
    Set default headers for POST and PUT requests from the frontend.
    Fix several issues discovered during release testing:
    
    1. Make username input field on editor registration page shorter.
    2. Remove non-working links in statistics tab that link back to the state editor.
    3. Ensure that the number of times an answer was submitted is visible in the statistics tab modal.
    4. Make statistics tab rule descriptions slightly more human-readable.
    5. Rename 'Common responses' to the more accurate 'Unhandled responses'.
    6. Remove 'by' in front of author names in the exploration feedback threads view.
    7. Remove some whitespace above the feedback thread list.
    8. Disallow submission of reader feedback until some feedback is typed.
    9. Use human-readable status names for feedback messages.
    10. Shorten the text in the reader feedback modal.
    Disallow 'duplicate' status for feedback threads. Ensure that a new migration job cannot be started if the previous one is still running.
    Add the ability for editors to change statuses of feedback threads.
    Add an indicator to the feedback tab header of when the last feedback update was. Remove some unneeded scrolling behavior.
    Minor changes to the feedback UI: remove seconds from timestamps and prevent accidental duplicate message submissions.
    Address several UI comments by Jacob.
    Add more controller-level tests for feedback threads.
    First round of tests for the feedback thread backend. Also consolidate some handlers.
    Build a UI for feedback threads and messages.
    Feedback thread UI clean up.
    Feedback thread barebone UI and data path.
    Require the user to explicitly select the interaction for each state.
    Move state parameter changes editor to sidebar. Also, various minor wording changes.
    Stop loading mesesage from disappearing prematurely. Remove accordion in editor sidebar.
    Consolidate retrieval of interaction registry, and make it happen during page load.
    Rename doesCurrentStateHaveRules to isCurrentStateTerminal.
    Address review comments.
    Add validation for the new EndConversation interaction, and hide its rule display.
    Remove header of subsequent state from editor view; remove 'click to see rules' button. Style the editor so that the layout looks nice.
    Move the current state name to the sidebar.
    Move the save and publish buttons to the navbar.
    In the state editor, show a snippet of a card for the next state where applicable.
    Move exploration parameter specs to a standalone service.
    Resolving concerns
    Adding a cancel button to content editor in exploration editor. Issue 343.
    Show a warning on invalid new state names, rather than disabling the 'Done' button.
    Fix 'can rename state to END' bug in state editor.
    Create a controller for the exploration graph. Remove more occurrences of .
    Move more of the state operations to explorationStatesService.
    Fix issue where state content and parameter changes were not being saved after navigating to and from preview mode.
    Add an explorationStates service.
    Minor cleanup fixes based on Jacob's comments
    Further UI improvements to the state content and interaction editors. Change the default initial state name.
    Add a welcome message to the content editor and more contextual feedback to the interaction editor.
    Fix issue 368: allow the initial state name to be changed without a backend error.
    Complete the 'change initial state name' feature.
    Frontend code for making initial state name settable. TODO: backend code and the body of saveExplorationInitStateName().
    Add a size option for the schema-based HTML input form, and convert the state content and feedback RTEs to use it.
    Move to the recommended Angular .controller syntax.
    
    This follows the recommendation in the list of breaking changes
    for Angular 1.3.0 described at
    
        https://github.com/angular/angular.js/blob/master/CHANGELOG.md#130-beta15-unbelievable-advancement-2014-07-11
    Set default headers for POST and PUT requests from the frontend.
    Fix a saving bug: when a rule with an input is selected, and then changed to a rule without an input, the extraneous input is kept, causing an error on the backend. Also, refresh the state editor when changes are discarded.
    Frontend UI fixes to the state editor.
    Address review comments.
    Resolving merge problem.
    Implement basic functionality for a readonly editor view of an exploration.
    Continue the Bootstrap 3 upgrade.
    Add a modal that shows a larger version of the state graph minimap. Add an option to pan the visualization so that it centers on the current state.
    Remove some code that is causing errors to be generated in the browser console.
    Remove the 'incoming states' section, which isn't needed since the graph is always visible.
    Ensure that an active state name is always specified.
    Create a separate controller for the exploration settings tab. Pull out more stuff from the exploration editor into standalone services, and group similar services under a base ExplorationPropertyService.
    Fix a number of issues discovered during testing (thanks to Jacob).
    
    1) Rename "site guidelines" to "how to use this site"
    2) Make the "Address this feedback" link in the stats viewer link to the state editor, rather than the main exploration tab.
    3) Add a specific warning message if there is a feedbackless self-loop for a default rule.
    4) Format the feedback messages in the user profile as a table.
    Pull the editor change list functionality out into a separate service, and add tests for it.
    Fix some saving bugs in the rule editor.
    Fix some saving bugs in the rule editor.
    Address issue 110: make the state header editable, and remove the now-redundant state editor title line.
    Clarify handling of 'externalSave' events. Make stickyInteractiveWidget react only to changes from the UI, and not to changes due to a change in the active state.
    Introduce a service that supplies controllers with the name of the currently-active state.
    Fix issue 91: close content and interaction editors when the active state is changed.
    Move interactive widget customization into the inline editor for the widget.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Make the graph visualization more responsive, and make the states fit in the viewport without the need for scrolling.
    Only change the values of name fields on-blur.
    Represent a changelist as a sequence of commands and process this sequence server-side.
    Modify the frontend changelist to be more consistent with what is planned for the backend.
    Consolidate the validation for explorations in the exp_domain module.
    Remove the concept of stateId from the frontend.
    Remove the state model from the backend.
    
    Reasons:
    - It is confusing to keep track of two separate lifecycles for states
        and explorations.
    - The state name and state id were duplicate ways to identify a
        particular state.
    
    Side effects:
    - This change has resulted in an update to the YAML schema. The update is
        fully backward-compatible.
    - States are now identified in URLs and in analytics by their names
        rather than their ids.
    Set up minification of JS and CSS files.
    Make JS files compatible with minification.
    Add a noninteractive LaTex-display widget.
    Allow multiple states to be edited in a single commit.
    Allow multiple states to be edited in a single commit.
    Make minor edits to the commit message dialogue.
    Add a dialogue requesting a commit message when saving to the state editor.
    Small UI tweaks: remove toggles on the state editor page; move incoming states outside the 'editable stuff' area; align a checkbox.
    Rewrite docs for noninteractive content input field. Fix a couple of small UI bugs.
    Complete implementation of batch saving for parameter changes.
    Add batched saving for everything except param_changes. Fix an error in the client that mistakenly added 'subject: answer' to the default rules.
    Make cursor turn to pointer on links. Change the UI for adding new rules. Do not consider changing something to the same value to be an actual change.
    Implement batched saving for state names and content.
    Simplify some of the state editor code. Rename InteractiveWidgetPreview to InteractiveWidgetEditor.
    Rename GuiEditor to StateEditor.
    Hide non-essential elements of the state editor under a fold.
    Display widget parameter descriptions instead of the raw parameter names.
    Reinstate the image upload feature.
    Remove noninteractive image widget (to be reinstated later).
    Complete end-to-end display of noninteractive video and hints widgets. Remove unneeded code.
    Add directives for the oppia-noninteractive tags so that they can be shown in the editor view. Make the GuiEditor show a single RTE for non-interactive content.
    Move the request creator to a factory method on the main app, since it is used everywhere.
    Add directives for the oppia-noninteractive tags so that they can be shown in the editor view. Make the GuiEditor show a single RTE for non-interactive content.
    Move the request creator to a factory method on the main app, since it is used everywhere.
    Remove the image storage model. Move image file uploading to use the file system storage model.
    Remove YUI dependency; use jwysiwyg for all RTEs.
    Clicking save on a modal should also save any fields that are currently in editable form.
    Move more modals and remove some duplicate code.
    Move more modals to the angular-ui.bootstrap framework.
    Remove dependency on ngRoute and simplify the routing code in the editor view. This turns out to have the nice side-effect of making the exploration editor page load a lot faster :-)
    Upgrade Angular to 1.2.0-rc.2. Change modal callsites to buttons instead of links, and add contextual escaping using  where needed. Add a separate page for 404 errors.
    Add docs about LaTeX
    Clarify docs for escaping the dollar sign in non-interactive content.
    Allow escaping of dollar signsso that they are not automatically LaTeXified.
    Re-allow the setting of exploration initialization parameters.
    Modify the state parameter change editor to use the same value generators that are used in the widget parameter editor.
    Allow text in the interactive iframe to be rendered using mathjax.
    Fix issue 50: multiple choice answers were not being displayed correctly.
    Write a full end-to-end cycle for customizing widget instances.
    Add proof-of-concept for inclusion of value generator editors via directives.
    Introduce server-side validation of exploration and state names. Standardize the characters that can be used in these names.
    Do not show invalid states in the UI.
    Finish addressing issue 21: add information about incoming links to a state.
    Fix for issue 26: once a state is renamed, update its name immediately on the exploration graph, rather than wait for the page to be reloaded.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Unify interactive and non-interactive widget controllers.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Split addContentToIframe entry point for ID param type.
    Add support for non-interactive widgets.
    finished exploration-level parameter interface with editing.
    TODO:
    some code cleanup (TODOs in code)
    export exploration-level params in yaml
    think about adding ability to delete parameters (only delete if all associated param changes are gone? or maybe just delete all associated param changes?)
    Reorganize frontend JS files, partitioning them into 'apps'.
    Remove superfluous scope.apply() calls. Remove unused code.
    Remove superfluous () calls. Remove unused code.
    Change the rich text editor to YUI 2. Fix a bug in image editing.
    1. Make a proper responsive navbar, using a customized version of the Bootstrap lib. 2. Fix a bug where the state name was not displaying on the state editor page.
    Restructuring the view directories more intuitively.
    Make circles in exploration graph into ellipses. Remove dead code.
    Continue tidying up the exploration resource.
    Use promises to smoothly handle exploration loading in the exploration editor page.
    Fix the deferred loading problems with promises. We still need to simplify how all this works.
    Reloading the state editor page breaks the page, due to promises not being handled properly. This is a temporary fix.
    -got rid of some out-of-date todos
    -changeable parameters
    -fixed param change interface to correctly set parameters to values of other parameters (including student's previous answer)
    Added exploration-level parameter initialization.
    Changed yaml of Music exploration to function this way.
    Everything is working exactly the way it was before.
    TODO:
    - make parameters changeable in reader.py
    - make sure parameter changes work properly
    - add interface for exploration-level parameter initialization
    - change exploration-level parameter specification in yaml to not be so hacky
    Moving parameters to use the new Parameter models. This change is not backwards-compatible.
    Add a flag to disable YAML functionality.
    Minor fixes the the main page and the rich text editor.
    Improve navigation to the gallery page. Serve YUI locally.
    fixed pre-filling parameter change fields on parameter change edit.
    Make it less painful to edit a string parameter for a widget.
    Refactor the State model. Introduce more implicit property validation.
    Minor changes to the CSS file and the guiEditor content JS code.
    new interface for specifying parameter change values (edit slighly broken, oops)
    Finish refactoring of widgets.
    changed exploration parameters model to be more similar to widget param model for consistency and ease of use;
    added almost all propagation of adding new parameters, except it breaks exploration a bit so commented out.
    Adding MathJax support.
    Restructuring the widget models so that widgets are only loaded once from files and thereafter stored in the datastore.
    functional use of Select2 that doesn't add anything new yet but has hooks to.
    WIP on select2 parameter change interface
    Introducing a request payload to minimize the number of JSON conversions needed.
    Standardize request object passing in the reader view. Add a method that allows conversion of strings to ASCII-type strings for display in the views.
    Allow addition of collaborators.
    Fix an error in which we did not save the state content when text was changed
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Add a rich text editor.
    why git why
    Allowing new states to be added from within other states.
    working on parameter changes
    Improving the parameter change interface.
    Making parameters work end-to-end for the music widget.
    Connecting the set-parameter interface to the backend, and tweaking its UI
    Restructuring JS files, and adding caching headers to static content.
    Sending all data via the Exploration object in the frontend. Renaming stateContent to content for parity with the backend. Fix URL routing.
    Various small frontend fixes.
    Removing final vestiges of the old system (actions, inputType, dests)
    Store destination ids rather than names. Make the exploration tree format rules correctly.
    Removing stateData. Using explorationData for all get transactions.
    Start moving put and get requests to a common State/Exploration resource in the frontend
    Cleaning up some unused code
    All END states are now 'END'; there is no more use of '-1'. All 'END' and '-1' literals have been changed to use one of the constants in either utils.py or editorExploration.js.
    Deleting old files.
    Persisting interactive widget ids for a state. Renaming 'blurb' to 'description' for consistency; renaming widget.class to widget.id since class is a reserved word in JavaScript.
    added most of the interface for declaring and changing parameters; TODO:
    (more details in forthcoming email)
    add a model for the parameter changes;
    make parameter changes per-dest/category rather than per-state;
    add similar interface for editing parametsr/changes;
    add validation to inputs;
    add yaml interface;
    actually connect to back end;
    Fixing URL routing
    Allow uploading of explorations from YAML files
    Allowing widget content to be empty
    Fix location hash routing
    Removing the old state graph
    Remove 'factory' suffix from factories
    Removing drag-and-drop palette, combining exploration editor tabs, and starting an experiment with a d3.js tree layout
    Move gui editor directives to the guiEditor.js file
    Implement customization of widgets
    Allowing preview images for explorations to be uploaded
    Fixing some bugs in the gui editor
    Remove feedback modals; make them appear inline
    Remove unnecessary code from GuiEditor
    Move GUI view initialization to its controller
    Adding JS files missed in previous commit
    Numerous changes to editor page.
    Hide parameter changes header in view mode, if there are none.
    Make exploration overview graph look a bit nicer.
    Move state parameter changes editor to sidebar. Also, various minor wording changes.
    Replace intro-js with ng-joyride -- the former was leading to a buggy editor tutorial.
    Make adding new states from rules more explicit. Remove global 'add state' buttons.
    integration tests for history page
    Protractor tests: Switch editor and player utilities to using protractor-specific classes where possible. Also remove some instances of 'widget'.
    Protractor tests: add tests for complex behaviours and navigation within the exploration editor.
    UI fixes based on user tests:
    
    (1) Change phrasing for 'misspelled by one character' rule.
    (2) Remove the sentence in save-exploration modal that suggests a status change to the exploration.
    (3) Autofocus to title in gallery modal when the 'create new' button is clicked.
    (4) Autofocus to the corresponding create-new-state text box after a new state has just been created.
    (5) Add a loading indicator when the content for a new state is loading in the learner view.
    (6) Make the exploration map modal bigger.
    Refactor state graph to use node IDs
    Fix graph height being too small in the editor statistics tab in Firefox.
    More fixes to the editor view.
    
    (1) Pull interaction selector out of the customization view.
    (2) Dismiss warnings when rules are changed.
    (3) Shorten the labels for the 'save changes' and 'discard changes' buttons.
    (4) Fix issue #147: show an error message when an invalid link is saved.
    Fix lots of small bugs.
    
    (1) In the MusicNotesInput widget, rename 'play desired sequence' to 'play target sequence'.
    (2) In NumericInput view for the learner's input, do not show integers as floats.
    (3) In the TextInput widget, improve the description of the 'rows' field.
    (4) Rename Code REPL widget to 'Code input'.
    (5) In the MusicNotesInput widget, change the 'Add Note' button to make it clear what type of note is being referred to (a music note, not a comment).
    (6) Rename 'Tutorial' to 'Walkthrough' (the former sounds like 'manual').
    (7) Disable 'look inside' functionality in preview mode.
    (8) Add Amy's name to credits.
    (9) Show edit buttons in gallery for moderators (issue 373).
    (10) Fix broken loading when the history tab in the exploration editor is shown on initial load.
    (11) Fix the broken revert modal in history tab (the link to try out the old version did not work).
    (12) Move the 'create' button nearer to the 'add new state' input field.
    (13) Move the learner answer div styling to a common location in the conversation skin view.
    (14) Allow states defined in rules to use '.' (issue 166).
    (15) Add moderator page to profile menu (issue 374).
    Add a tutorial for the editor page.
    Show a warning on invalid new state names, rather than disabling the 'Done' button.
    Refactor graphData out into a graphDataService.
    Create a controller for the exploration graph. Remove more occurrences of .
    Allow states to be added in the frontend without requiring a backend RPC.
    Newly added states are auto selected in the editor view instead of navigating throught the map and selecting them manually.
    Remove a couple of places that were still editable in the view-only mode for the exploration editor.
    Resolving merge problem.
    Implement basic functionality for a readonly editor view of an exploration.
    Small fixes: add 'no objective' warning to the warnings list, fix unable-to-publish-exploration issue, make 'Done' buttons in rules smaller.
    More miscellaneous UI fixes. Added an expandable warnings bar below the save and discard buttons.
    Continue the Bootstrap 3 upgrade.
    First pass at upgrading to Bootstrap 3.
    Minor style fixes
    Add horizontal rule to state title, reduce height of parameter area, revamp 'add state' input box and button.
    changed all buttons to bootstrap, fixed some alignments
    Fix a bug where the graph height and width defaults were not being set, causing the graph to render incorrectly in Firefox.
    Various small fixes based on release testing:
    
    * add playtest link to site footer
    * add link to the playtest queue from the Learn Gallery page
    * make minimap graph pannable
    * make "Add new state" field not have a red error box around it
    * rewrote the Welcome demo exploration to use the noninteractive-widget
    links
    * fix wording for exploration counts on the profile page
    Add a modal that shows a larger version of the state graph minimap. Add an option to pan the visualization so that it centers on the current state.
    Make each state visualization graph detect the width and height of its container. Make the state graph minimap taller.
    Remove comments in order to restore functionality into the state editor UI.
    Primarily removed state editor from modal window into main editing area, turned exploration graph into a mini-map.
    Further UI improvements based on feedback from testing.
    Move exploration metadata and version history to separate tabs, and add more documentation to the UI.
    Ensure that the 'externalSave' event is propagated by trying it two ways. (The way that uses  is not triggered when the 'Save Changes' button is pressed when the RTE is open.)
    Overlay the state editor on the exploration graph editor, and remove the separate tab for the state editor.
    Minor fixes for login/logout buttons. Remove unused images.
    Add a submission button to the 'add state' form. Inline some macros.
    Remove dependency on ngRoute and simplify the routing code in the editor view. This turns out to have the nice side-effect of making the exploration editor page load a lot faster :-)
    Use ui-bootstrap tooltips throughout, except in modals generated in JS (this will come later). The aim is to remove the old angular-ui dependency.
    Remove value generators that are not currently in use. Write code that implements the restricted generators.
    Fix issue 29: Display a warning if the END state is unreachable.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Remove the editor tree visualization. Improve the styling of the exploration editor landing page.
    Make the state graph visualization into a reusable directive.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Reorganize frontend JS files, partitioning them into 'apps'.
    Add loading indicators to the exploration editor page.
    Restructure editor views.
    Improvements to the UI: add instructions to the exploration editor state diagram, add cancel buttons to the exploration metadata editors, and lighten the color of the reader conversation log so that the most recent interaction stands out.
    Add help text
    Removing the old state graph
    Introduce separate namespaces for the different visualizations
    Remove 'factory' suffix from factories
    Continue work on graph styling. Separate vizualizations into separate tabs.
    Replicate the state graph in d3.js
    Customizations to the tree view
    Renaming vizualization files
    Removing drag-and-drop palette, combining exploration editor tabs, and starting an experiment with a d3.js tree layout
    Adding files missed in previous CL
    Require the user to explicitly select the interaction for each state.
    Do not allow rules to be saved if their descriptions are invalid.
    Remove the 'widget_sticky' setting.
    Consolidate retrieval of interaction registry, and make it happen during page load.
    Restyle the interactions menu.
    Refactor code that uses interactions and RTE components to distinguish properly between customization_arg_specs and customization_args.
    Restyle the content and interaction parts of the state editor.
    Respond to review comments
    Change interaction selector to two-tier system sorted by category
    Fix minor merge bug
    Respond to review comments
    Address review comments.
    Restyle rule editor to make the tabs clearer. Also, keep the correct rule tab open after sorting.
    Allow new rules to be added.
    Refactor the rule description editor into a separate directive.
    Split the rules section of the editor into its own controller.
    Remove header of subsequent state from editor view; remove 'click to see rules' button. Style the editor so that the layout looks nice.
    Hide the rules section by default.
    Complete the deprecation of 'widget'.
    Migrate the backend widget registries and the controllers.
    First half of the work needed to rename widgets to interactions/rich-text-components.
    Changed answer type from NonnegativeInteger to UnicodeString
    Respond to review comments
    Minimally working image click input and editor
    Clicking on regions working
    Add a cache for widget details, so that widget id changes can easily be undone.
    More fixes to the editor view.
    
    (1) Pull interaction selector out of the customization view.
    (2) Dismiss warnings when rules are changed.
    (3) Shorten the labels for the 'save changes' and 'discard changes' buttons.
    (4) Fix issue #147: show an error message when an invalid link is saved.
    Fix several bugs:
    
    1) Remove the obtrusive warning message when the objective field is blurred in the exploration settings page.
    2) Highlight the rule tiles properly on mouseover.
    3) If the interactive widget editor is open and the user navigates to preview mode, save the interactive widget first.
    4) Remove one click from the 'create new exploration' flow in the gallery page.
    5) Fix a bug where the numeric input widget was not accepting inputs of 0.
    6) Fix a display bug where the numeric input widget was aligned too far to the left.
    Refactor graphData out into a graphDataService.
    Allow ruleEditor to depend on explorationStatesService.
    Save changes to the widget into the exploration states service.
    Add an explorationStates service.
    Minor cleanup fixes based on Jacob's comments
    Add a welcome message to the content editor and more contextual feedback to the interaction editor.
    Redesign the editor rules interface. Also make the behavior of the 'save changes' button more responsive.
    Simplify the widget customization interface.
    In the learner view, load the entire exploration at the outset, and move the construction of the interactive widget HTML tags to the frontend.
    Add codemirror view for customization args that have code-type values.
    Remove require_is_one_of normalizer, which is not needed anymore given that we have 'choices'. Add some inline validation.
    Various UI and functionality fixes.
    
    (a) Add tests for the HTML and JSON escapers
    (b) Handle scope inheritance properly in the custom editors
    (c) Remove confirmation dialog on widget change
    (d) Remove obtrusive warning message for missing objectives
    (e) Fix typo and unescaping in logic proof widget
    Fix a couple of omissions in previous commits.
    Load all interactive widgets when the page loads to minimize the number of RPCs required. Also, show the preview tab in the interactive widget editor accordion when the widget id is changed.
    Add frontend services to cache the widget repositories. Adjust noninteractive widgets so that they work with the new customization args.
    Refactor the state interactive widget frontend code.
    
    In particular:
    
    1) Move the tag construction for the widget preview to the frontend.
    2) Introduce new state property services for the widget attributes.
    Tidy up naming and clarify the code.
    Make the new widget specifications work in the frontend editor and reader views.
    Remove oppiaRequestCreator and replace it with an HTTP request interceptor.
    Move to the recommended Angular .controller syntax.
    
    This follows the recommendation in the list of breaking changes
    for Angular 1.3.0 described at
    
        https://github.com/angular/angular.js/blob/master/CHANGELOG.md#130-beta15-unbelievable-advancement-2014-07-11
    Consolidate error handling boilerplate.
    
    Also:
    
    (a) Have a friendlier 404 error page.
    (b) Remove unused route from app.yaml.
    (c) Add a robots.txt file.
    Make the entire rule header draggable, and round off the top-left corner of the default rule tile.
    Close any open rule sub-editors when a rule starts being dragged.
    Changed sorting icon, restricted sorting handle to sorting icon.
    Set default headers for POST and PUT requests from the frontend.
    Implement sortable rules.
    Fix a saving bug: when a rule with an input is selected, and then changed to a rule without an input, the extraneous input is kept, causing an error on the backend. Also, refresh the state editor when changes are discarded.
    Fix a bug that prevented changes to rules from being saved after a new interactive widget was selected.
    Resolving merge problem.
    Continue the Bootstrap 3 upgrade.
    Fix a bug in the swapRules() function, where the temporary intermediate rule was mistakenly given the same variable name as rules that are newly added.
    Add a modal that shows a larger version of the state graph minimap. Add an option to pan the visualization so that it centers on the current state.
    Ensure that an active state name is always specified.
    Minor style fix.
    Pull the editor change list functionality out into a separate service, and add tests for it.
    Minor fixes to the state editor.
    Make the central column of the state editor wider, and remove some buttons.
    Clear any rules that are in progress of being added when the interactive widget for the state is changed.
    Further bug fixes.
    Fix some saving bugs in the rule editor.
    Remove the rule editor modal and allow parts of a rule to be edited inline.
    Fix some saving bugs in the rule editor.
    Remove the rule editor modal and allow parts of a rule to be edited inline.
    Remove the rule editor modal and allow parts of a rule to be edited inline.
    Fix issue 137: stale parameter values in interactive widget selector
    Refactor the rule editor to remove duplicate HTML.
    Clarify handling of 'externalSave' events. Make stickyInteractiveWidget react only to changes from the UI, and not to changes due to a change in the active state.
    Introduce a service that supplies controllers with the name of the currently-active state.
    Fix issue 91: close content and interaction editors when the active state is changed.
    Fix small bug in rule editor.
    Move interactive widget customization into the inline editor for the widget.
    Move the interactive widget picker inline.
    Convert interactive widgets to Angular directives.
    
    This has the following advantages:
    (a) speed: the interactive widgets now load faster because there is no
    need for a second request to the server to populate the iframe.
    (b) no more monkeying around with the parent container to handle iframe
    height changes
    (c) less boilerplate is needed for each individual widget
    (d) there is no need to reload JS libraries separately for the widget,
    since these libraries will have already been included in the container page.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Make logging more silent in production.
    Overlay the state editor on the exploration graph editor, and remove the separate tab for the state editor.
    Fix diff computation for rules in the frontend.
    Resolve a TODO regarding the use of both id and widget_id in a widget description.
    Represent a changelist as a sequence of commands and process this sequence server-side.
    Modify the frontend changelist to be more consistent with what is planned for the backend.
    Remove the concept of stateId from the frontend.
    Remove the state model from the backend.
    
    Reasons:
    - It is confusing to keep track of two separate lifecycles for states
        and explorations.
    - The state name and state id were duplicate ways to identify a
        particular state.
    
    Side effects:
    - This change has resulted in an update to the YAML schema. The update is
        fully backward-compatible.
    - States are now identified in URLs and in analytics by their names
        rather than their ids.
    Set up minification of JS and CSS files.
    Make JS files compatible with minification.
    Add MusicNote editor. Use the new editors in the rules frontend.
    Update the editors for Int, Real, SanitizedUrl and UnicodeString to take an always-editable attribute. Similar changes for the other editors will come in a future commit.
    Simplify the computation of the rule description fragments.
    Display rules that are confusing more prominently. Fix an XSS bug.
    Move the unresolved answers section to its own controller.
    Finish the port to the new object editor framework, at least for the editors that already exist. Remove the old editors in templates/dev/head/components/.
    Rewrite docs for noninteractive content input field. Fix a couple of small UI bugs.
    Add batched saving for everything except param_changes. Fix an error in the client that mistakenly added 'subject: answer' to the default rules.
    Split the interactive widget frontend variables into variables that define the general widget, and variables that customize it, to more clearly match the way they are modelled in the backend.
    Keep the default rule when the widget type is changed. Rename stickyWidget in the frontend.
    Rename frontend state editor fields to match those of the backend. In particular, change interactive_widget to widget_id, interactive_params to widget_customization_args, interactive_rulesets to widget_handlers and sticky_interactive_widget to widget_sticky.
    Simplify some of the state editor code. Rename InteractiveWidgetPreview to InteractiveWidgetEditor.
    Rename GuiEditor to StateEditor.
    Display widget parameter descriptions instead of the raw parameter names.
    Simplify the state editor UI. Remove unused CSS rules.
    Move the request creator to a factory method on the main app, since it is used everywhere.
    Move the request creator to a factory method on the main app, since it is used everywhere.
    Minor security enhancements.
    Update the exploration graph when changes are made to widgets or rules.
    Refactor the rule modal to separate it more cleanly from its container.
    Move more modals and remove some duplicate code.
    Remove the vertical scrollbars from embedded iframes.
    Remove dependency on ngRoute and simplify the routing code in the editor view. This turns out to have the nice side-effect of making the exploration editor page load a lot faster :-)
    Create a safe RTE component directive. Add RTE functionality using jWysiwyg to the rule feedback editor.
    Fix an error where all rules were being declared as atomic. Remove extra verbiage from exploration improvement hints.
    Complete the schema change that allows more flexible rule specifications (i.e. that allow Boolean combinators and classifying based on parameters).
    Modify the state parameter change editor to use the same value generators that are used in the widget parameter editor.
    Remove value generators that are not currently in use. Write code that implements the restricted generators.
    Remove interactiveParams from the widget preview frontend -- this duplicates data and causes confusion. Update the multiple-choice rule editor to use the new parameter specification.
    Fix issue 50: multiple choice answers were not being displayed correctly.
    Write a full end-to-end cycle for customizing widget instances.
    Add proof-of-concept for inclusion of value generator editors via directives.
    Substantial clean up of the WidgetRepository code to remove superfluous functionality.
    Streamlining parameter update logic a little more; removing some special cases. Work still needs to be done to make the template generation methods in widget_domain.py consistent with each other, and to figure out the order of, and when to do, Jinja substitution and JSONification.
    Remove unneeded widget repository functionality. Along with values, pass parameter object types to the widget repository.
    Adding states and adding rules should update the graph immediately, without refreshing the page.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Added jsrepl installation.
    Major refactoring to make the statistics model more concrete and use domain concepts from the exploration and state models. Remove the feedback controller and replace it with a link to the bug tracker and groups page. Restrict the unresolved answers feature to be used only with the default rule of a state.
    Propagate the new representation of a state to the frontend.
    Propagate the use of the terms 'rule_specs' and 'description' to the frontend.
    Added tests in objects_test.py.
    CodeWidget for programming explorations.
    Unify interactive and non-interactive widget controllers.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Split addContentToIframe entry point for ID param type.
    Revert "First draft of classifying on arbitrary parameters instead of just answers."
    
    We will revisit this functionality later, because it's actually a substantial change with changes to how classifiers function
    
    This reverts commit 305a1b40b5e4f8f1f8f07ab3d26cd19fa9ebf4f8.
    First draft of classifying on arbitrary parameters instead of just answers.
    TODO: also display parameter name in classification description; fix substitution hack (looking for "Answer" and substituting with param choice)
    To ponder: does it still make sense to group rules into types of classifiers, and associate those with particular inputs/widgets?
    Since we could now be comparing to arbitrary parameters instead of answers.
    Or, should the comparison parameter choice happen on a per-classifier instead of per-rule basis? this would give less flexibility, but might make more sense with the classifier/rule breakdown.
    Add support for non-interactive widgets.
    Reorganize frontend JS files, partitioning them into 'apps'.
    Fix bugs in the exploration editor frontend: add-new-state did not work properly, state visualizations did not update when changes were made.
    Restructuring the view directories more intuitively.
    Fix the deferred loading problems with promises. We still need to simplify how all this works.
    Reloading the state editor page breaks the page, due to promises not being handled properly. This is a temporary fix.
    Remove use of 'attrs' from the interactive widgets
    Replace old 'actions' attribute in JS code with 'handlers'.
    Widget sticky bool param added.
    
    Prevents reloading the widget if it is the same type as the previous
    state's.
    Added a checkbox in editor to control this bool param.
    Adding an new field to individual states to ease tracking of unresolved answers.
    Add a warning to the editor UI when there are feedbackless self-loops. Use a refresh icon to indicate a self-loop. Fix the truncate filter to work with a feedback list.
    Set the interactivity preview to be on by default
    Integrate 'Add new rule' button better with the list of answer classification rules. Allow the editor to collapse the interactivity preview.
    Allowing multiple feedback responses per rule.
    Change the format of the classifiers
    Restructuring the widget models so that widgets are only loaded once from files and thereafter stored in the datastore.
    Introducing a request payload to minimize the number of JSON conversions needed.
    Add view interface for set input
    Small usability improvements.
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    why git why
    Allowing new states to be added from within other states.
    working on parameter changes
    Allowing state parameters to be passed into interactive widgets.
    Fix several issues: (1) Show multiple choice option text rather than just the index numbers in the editor rule dialogs, (2) make stats handler accept non-string default answers, (3) remove 'required' from multiple choice input widget, (4) reword 'create new exploration' modal text
    Restructuring JS files, and adding caching headers to static content.
    Remove a few logging statements.
    Making widget customization work.
    Move interactive widget preview into a separate file.
    Changes in the feedback thread discussion to look a little better
    Numerous margin, positioning, and styling fixes for the exploration editor.
    Indicate editor tab in navbar breadcrumb. Use cards in subsidiary editor pages.
    Address review comments.
    
    (1) Add proper tooltips to icons in navbar.
    (2) Reduce size of top-left Oppia icon to 40px height.
    (3) Change box-shadow of right sidebar to follow material design spec.
    (4) Standardize horizontal and vertical offsets of the titles of the various tabs.
    Added row selector in feedback tab
    Move tabs to the top navigation bar, making the editor UI much cleaner. Add headings to the various pages in the editor.
    Fix two UI issues:
    
    (1) When the save modal is opened, shift focus to the textarea field in which to enter a commit message.
    (2) After a new feedback message is sent, clear the feedback message input field.
    Address review comments. Standardize calls to datetime service.
    Disable 'create thread' button until preconditions for successful creation are satisfied. Add text to bottom of widget picker pointing users to the issue tracker where they can request new widgets.
    Fix several issues discovered during release testing:
    
    1. Make username input field on editor registration page shorter.
    2. Remove non-working links in statistics tab that link back to the state editor.
    3. Ensure that the number of times an answer was submitted is visible in the statistics tab modal.
    4. Make statistics tab rule descriptions slightly more human-readable.
    5. Rename 'Common responses' to the more accurate 'Unhandled responses'.
    6. Remove 'by' in front of author names in the exploration feedback threads view.
    7. Remove some whitespace above the feedback thread list.
    8. Disallow submission of reader feedback until some feedback is typed.
    9. Use human-readable status names for feedback messages.
    10. Shorten the text in the reader feedback modal.
    Add the ability for editors to change statuses of feedback threads.
    Address review comments: allow users to provide a subject line and specify whether their feedback is exploration- or state-specific.
    Route reader-submitted feedback to the new feedback system, and remove the frontend for the old feedback system.
    Remove the SHOW_FEEDBACK_TAB flag. Guard against non-logged-in users submitting new threads or messages.
    Address review comments.
    Add column headings to the feedback thread table.
    Minor changes to the feedback UI: remove seconds from timestamps and prevent accidental duplicate message submissions.
    Address several UI comments by Jacob.
    First round of tests for the feedback thread backend. Also consolidate some handlers.
    Build a UI for feedback threads and messages.
    Feedback thread UI clean up.
    Feedback thread barebone UI and data path.
    Move state parameter changes editor to sidebar. Also, various minor wording changes.
    Consolidate retrieval of interaction registry, and make it happen during page load.
    Fix Karma test
    Move the current state name to the sidebar.
    Move the save and publish buttons to the navbar.
    Complete the deprecation of 'widget'.
    Resolving comment.
    Resolving concerns
    Add service for comparing states between 2 versions
    Fix 'can rename state to END' bug in state editor.
    Refactor graphData out into a graphDataService.
    Create a controller for the exploration graph. Remove more occurrences of .
    Add an explorationStates service.
    Minor cleanup fixes based on Jacob's comments
    Add a welcome message to the content editor and more contextual feedback to the interaction editor.
    Add StateEditorSpec tests.
    Resolve review comments.
    Make changes from review.
    Add tests forStateEditor.
    Ensure images display properly in multiple-choice rule editor. Add additional validation to image click input region labels.
    Collapse rule bodies while drag is happening.
    Clean up images folder.
    Address review comments.
    Numerous changes to editor page.
    Move 'unresolved answers' section to the bottom of the page. Make tutorial only focus on active rule.
    Show the active rule inline, rather than at the bottom.
    Changed a few pages into cards, fixed other margins.
    Edited many margins, changed drag icon, added blog link, changed tutorial curtain.
    Update Protractor tests.
    Numerous small changes for new rule editor.
    Changed small aspects of navbar, carousel, and images.
    Make default rule selectable from 'add rule' dialog. Prohibit rule saving when feedback is empty and the destination is the same state.
    Standardize edit rule views for both the 'existing rule' and the 'add rule' cases.
    Do not show the default rule if it has not been set.
    Do not allow rules to be saved if their descriptions are invalid.
    Fix jittering when moving from the editor tab to the preview tab. Update tests.
    Move state name from sidebar to main editor. Tidy up CSS for avatars.
    Style the rule editor.
    Numerous margin, positioning, and styling fixes for the exploration editor.
    Replace intro-js with ng-joyride -- the former was leading to a buggy editor tutorial.
    Make the state rules section a little less prominent.
    Make only the handle of each rule draggable.
    Move rule tabs to the bottom of the state editor.
    Move the rule tabs to the bottom of the state editor. Remove the 'next state' bar.
    Address review comments.
    Make the entire rule handler draggable, and move the draggable tabs to the left of the card.
    Update integration tests.
    Add a destination bar at the bottom of the state editor for navigating to the 'next' rule.
    Restyle rule editor to make the tabs clearer. Also, keep the correct rule tab open after sorting.
    Allow new rules to be added.
    Restyle the rule editor to use tabs.
    
    Remaining TODOs:
    - Fix the 'add rule' flow.
    - Remove isTmpRule, cancelEdit and protractor-test-temporary-rule.
    - Add fixed bar at the top/bottom for rule destinations.
    - Fix weird sorting behaviour.
    Split the rules section of the editor into its own controller.
    Remove header of subsequent state from editor view; remove 'click to see rules' button. Style the editor so that the layout looks nice.
    Make 'preview mode' into a separate tab.
    Hide the rules section by default.
    Start redesigning the state editor.
    Migrate the backend widget registries and the controllers.
    Protractor tests: Switch editor and player utilities to using protractor-specific classes where possible. Also remove some instances of 'widget'.
    Add new stages to the tutorial for the preview and save buttons; rewrite other parts to flow better. Fix issue with the part of tutorial that pertains to rules not displaying correctly. Fix integration tests.
    Editor tutorial edits.
    Create a controller for the exploration graph. Remove more occurrences of .
    Allow ruleEditor to depend on explorationStatesService.
    Minor CSS changes.
    Additional UI fixes: spacing, click handlers, consistency.
    Some small CSS fixes.
    Minor cleanup fixes based on Jacob's comments
    Tweaked a lot of color, wording, and alignment issues in the exploration editor.
    Redesign the editor rules interface. Also make the behavior of the 'save changes' button more responsive.
    Simplify the state editor.
    Simplify the widget customization interface.
    Protractor tests: add functionality and examples for editor rules and multiple states.
    Initial response to review comments.
    Create framework for end-to-end testing in protractor.
    Fix a couple of omissions in previous commits.
    Refactor the state interactive widget frontend code.
    
    In particular:
    
    1) Move the tag construction for the widget preview to the frontend.
    2) Introduce new state property services for the widget attributes.
    Fix rules for multiple-choice input to read correctly from the widget customization args.
    Implement sortable rules.
    Resolving merge problem.
    Implement basic functionality for a readonly editor view of an exploration.
    Small wording changes. Redid the layout of the exploration settings page.
    Continue the Bootstrap 3 upgrade.
    First pass at upgrading to Bootstrap 3.
    changed all buttons to bootstrap, fixed some alignments
    Fixed code-styling issues, reverted rule editor so that the feedback and destination are on the same row.
    Replace many buttons with Bootstrap icons, place 'destination' right under the rule description, remove arrows from the default rule, change remove the word 'but' from the rule called 'but misspelled by one chracter', other minor styling changes for rule editor.
    Redo rule editor: place destination area in bottom of rule editor, update swap rule buttons, change Add new rule button, other misc. changes.
    Primarily removed state editor from modal window into main editing area, turned exploration graph into a mini-map.
    Make the central column of the state editor wider, and remove some buttons.
    UI changes: make the rightmost column of the state editor narrower, and improve the help text and default values for the noninteractive link widget. Remove some unused code from the exploration editor.
    Fix some saving bugs in the rule editor.
    Move 'Add rule' button to the center. Adjust size of borders and fix the overflowing, on small screens, of the 'Select' buttons for picking rules.
    Remove the rule editor modal and allow parts of a rule to be edited inline.
    Fix some saving bugs in the rule editor.
    Move 'Add rule' button to the center. Adjust size of borders and fix the overflowing, on small screens, of the 'Select' buttons for picking rules.
    Remove the rule editor modal and allow parts of a rule to be edited inline.
    Remove the rule editor modal and allow parts of a rule to be edited inline.
    Refactor the rule editor to remove duplicate HTML.
    Remove the 'center' tag, which is deprecated in HTML5.
    Support HTML in the choices for a multiple choice widget.
    Allow noninteractive widgets to be used in the rule feedback. Show the full rule feedback in the state editor.
    Remove the concept of stateId from the frontend.
    Editor html style fixes.
    Split state editor html.
    Split state editor html.
    Small changes to the editor page.
    
    1. Colour the active state in the graph.
    2. Change default rule tag to 'No other rules apply...'
    3. Move settings before statistics in the navbar icon menu.
    4. Change 'publish draft' to 'save changes'.
    Fix integration tests.
    Small fixes to routing.
    Upgrade angular version to 1.3.13 to fix bug in ngAnimate.
    Animate state transitions in editor.
    Restyle the rule editor to use tabs.
    
    Remaining TODOs:
    - Fix the 'add rule' flow.
    - Remove isTmpRule, cancelEdit and protractor-test-temporary-rule.
    - Add fixed bar at the top/bottom for rule destinations.
    - Fix weird sorting behaviour.
    Fix a bug where the wrong state would be displayed if the user enters a URL referencing a non-initial state.
    Make 'preview mode' into a separate tab.
    Move tabs to the top navigation bar, making the editor UI much cleaner. Add headings to the various pages in the editor.
    Upgrade Angular to v1.3.0-rc.5 and jQuery to v2.1.1.
    Create a controller for the exploration graph. Remove more occurrences of .
    Refactor out the routing logic into a separate service, and simplify it.
    Add validation for rules and interaction customizations.
    Move 'publish exploration' button to navbar.
    Allow clicking outside a modal to dismiss it
    Move the 'publish in gallery' button to the settings tab.
    Move the save and publish buttons to the navbar.
    Continue decluttering the state editor.
    Move exploration parameter specs to a standalone service.
    Fix issues 441 and 442: recompute graph after the first state of the exploration is changed, and save the state name when a tab transition is made.
    Show notification counts in the navbar and page title, where appropriate. Highlight new updates in the dashboard. Fix a couple of bugs in the settings and history tabs where the exploration data was not being fully loaded before the tab was displayed.
    Upgrade Angular to v1.3.0-rc.5 and jQuery to v2.1.1.
    Add an explorationStates service.
    Address review comments.
    Add a readonly URL field that can be used for sharing the exploration.
    Add an option for private explorations to be viewed by anyone with the link.
    Remove 'add user by email' functionality
    Made changes as per Sean's comments, also fixed ExplorationEditor.js which was broken during a previous sync.
    Remove 'add user by email' functionality
    Made changes as per Sean's comments, also fixed ExplorationEditor.js which was broken during a previous sync.
    Complete the 'change initial state name' feature.
    Frontend code for making initial state name settable. TODO: backend code and the body of saveExplorationInitStateName().
    Consolidate the three galleries into a single public one.
    Add language-code selection functionality to the exploration editor.
    Move to the recommended Angular .controller syntax.
    
    This follows the recommendation in the list of breaking changes
    for Angular 1.3.0 described at
    
        https://github.com/angular/angular.js/blob/master/CHANGELOG.md#130-beta15-unbelievable-advancement-2014-07-11
    Add a skin chooser to the frontend editor UI.
    Further bug fixes.
    
    (a) Add a help link to the parameter changes section.
    (b) Display interactive map coordinates to 3 decimal places.
    (c) Correct a misleading rule name in the tar file rules.
    (d) Fix an issue with having black text on dark blue background in the navbar when a tab name is focused on.
    (e) Fix a bug with the exploration deletion flow.
    (f) Only show the delete button to exploration owners.
    Make exploration labels more explicit. Move publish button to top of page, rather than burying it in the Settings tab.
    Remove a couple of places that were still editable in the view-only mode for the exploration editor.
    Resolving merge problem.
    Implement basic functionality for a readonly editor view of an exploration.
    Small fixes: add 'no objective' warning to the warnings list, fix unable-to-publish-exploration issue, make 'Done' buttons in rules smaller.
    Move settings-related stuff to the exploration settings page.
    Create a separate controller for the exploration settings tab. Pull out more stuff from the exploration editor into standalone services, and group similar services under a base ExplorationPropertyService.
    Allow clicking outside a modal to dismiss it
    Make adding new states from rules more explicit. Remove global 'add state' buttons.
    Fix height of nodes in graph, delete extra parameters
    Fix old state names, respond to other review comments
    Partially address review comments
    Changes to state diff modal layout, add export exploration data by state
    and display state data in codemirror
    UI fixes based on user tests:
    
    (1) Change phrasing for 'misspelled by one character' rule.
    (2) Remove the sentence in save-exploration modal that suggests a status change to the exploration.
    (3) Autofocus to title in gallery modal when the 'create new' button is clicked.
    (4) Autofocus to the corresponding create-new-state text box after a new state has just been created.
    (5) Add a loading indicator when the content for a new state is loading in the learner view.
    (6) Make the exploration map modal bigger.
    Refactor state graph to use node IDs
    Show a warning on invalid new state names, rather than disabling the 'Done' button.
    Fix 'can rename state to END' bug in state editor.
    Refactor graphData out into a graphDataService.
    Create a controller for the exploration graph. Remove more occurrences of .
    Complete the deprecation of 'widget'.
    Respond to review comments
    Respond to review comments
    Fixes to history services and tests
    * Fix wrong change commands
    * Delete states which are added, then deleted
    * Fix doc string
    * Stop tests returning success when promise is not fulfilled
    Add comparison for rules in version history
    Address review comments
    Add service for comparing states between 2 versions
    Respond to additional review comments
    Respond to review comments
    Add services for version history tree
    Also download all snapshots in history tab
    Make 'preview mode' into a separate tab.
    Move initial parameter evaluation to use the client-side framework.
    Remove superfluous elements from the editor preview page.
    Show parameter values in editor preview.
    Add a live-preview mode to the exploration editor.
    Numerous changes to editor page.
    Move 'unresolved answers' section to the bottom of the page. Make tutorial only focus on active rule.
    Include object editor code on every HTML template.
    Add validation for rules and interaction customizations.
    Made numerous changes to tutorial, fixed broken tutorial scrolling.
    Remove obsolete admin page config properties. Restructure config properties to use schemas.
    Show intro card image in editor preview.
    Various improvements to the editor page.
    
    (1) Reorganize the interaction dropdown menu to remove many single-item categories.
    (2) Remove help dropdown menu.
    (3) Fix bug when user clicks 'add new state' and then cancels.
    (4) Move 'Create New...' to the second position in the rule destination dropdown so that it does not look like a menu heading.
    Make exploration overview graph look a bit nicer.
    Move state parameter changes editor to sidebar. Also, various minor wording changes.
    Stop loading mesesage from disappearing prematurely. Remove accordion in editor sidebar.
    Move 'publish exploration' button to navbar.
    Small changes to the editor page.
    
    1. Colour the active state in the graph.
    2. Change default rule tag to 'No other rules apply...'
    3. Move settings before statistics in the navbar icon menu.
    4. Change 'publish draft' to 'save changes'.
    Consolidate retrieval of interaction registry, and make it happen during page load.
    Restyle About page.
    Address review comments.
    Move attribution guide to a common template, and move it out of the sidebar in the editor view.
    Move state name from sidebar to main editor. Tidy up CSS for avatars.
    Style the rule editor.
    Numerous margin, positioning, and styling fixes for the exploration editor.
    Indicate editor tab in navbar breadcrumb. Use cards in subsidiary editor pages.
    Replace intro-js with ng-joyride -- the former was leading to a buggy editor tutorial.
    Small fixes to routing.
    Change several instances of http to https. Simplify search query code slightly.
    Address comments
    Split the rules section of the editor into its own controller.
    Fix a bug where the wrong state would be displayed if the user enters a URL referencing a non-initial state.
    Add schema.org metadata for sharing
    Specify a display mode for each interaction and adjust the learner view accordingly.
    Fix issue 549: dropdown menu roots are not highlighting correctly.
    integration tests for history page
    Address review comments.
    
    (1) Add proper tooltips to icons in navbar.
    (2) Reduce size of top-left Oppia icon to 40px height.
    (3) Change box-shadow of right sidebar to follow material design spec.
    (4) Standardize horizontal and vertical offsets of the titles of the various tabs.
    Move the current state name to the sidebar.
    Make the right sidebar a distinct section of the state editor page.
    Move exploration warnings to top navbar. Adjust sidebar position and add license information to it.
    Make 'preview mode' into a separate tab.
    Move the 'publish in gallery' button to the settings tab.
    Move the save and publish buttons to the navbar.
    Continue decluttering the state editor.
    In the state editor, show a snippet of a card for the next state where applicable.
    Make the sidebar of the state editor have fixed position.
    Start redesigning the state editor.
    Migrate the backend widget registries and the controllers.
    Protractor tests: Switch editor and player utilities to using protractor-specific classes where possible. Also remove some instances of 'widget'.
    Refactor embedding into a service and add styling to share dropdown.
    Highlight the current tab in the navbar. Update integration tests.
    Do not show unnecessary controls in the non-state-editor views of the editor page.
    Move tabs to the top navigation bar, making the editor UI much cleaner. Add headings to the various pages in the editor.
    Remove labels from top of exploration editor page, and add more information to the roles/permissions section of the settings tab.
    Set up the editor navigation controller to be more general (and not just apply to the 'Help' control).
    Display the exploration title in the top navbar.
    Move local navigation in learner view to the navbar.
    Bring top-nav into base.html so that local top-nav blocks can be defined within it. (This is not possible for templates which are jinja-included.)
    Make the gallery page the homepage. Remove unused CSS rules. Update integration tests.
    Merge sidebar/navbar changes.
    Fix some confusing user flows. In particular, change 'Look Inside' to 'Edit' on the learn page if the user has edit privileges.
    Ensure that invalid parameter names cannot be used.
    Reolve comments.
    Resolving comments.
    Tidy up the expression evaluation code to the point that the sample exploration registers no differences between the client and server evaluations.
    Change the size of the caret sign in oppia warnings
    Fix the caret sign to point down and remain on top-right corner
    reolving comments.
    Adding exploration names to page titles for exploration editor and player pages. Issue 413.
    Add tooltip to 'publish exploration' button.
    Rename tutorial link to 'Oppia editor tutorial' in the help menu. Make 'no results found' message in the gallery more friendly.
    Small textual change.
    Update integration tests.
    Address review comments.
    Moved Publish button outside of save dropdown.
    Minor wording changes.
    Combined saving, discarding, publishing, and nominating for release into a single button with a dropdown.
    Address Jacob's review comments. Rename 'beta' to 'public'. Reduce number of status choices in the gallery.
    Auto-select beta category in the gallery. In the gallery, mark released explorations as 'featured'. Adjust site wording.
    Add new stages to the tutorial for the preview and save buttons; rewrite other parts to flow better. Fix issue with the part of tutorial that pertains to rules not displaying correctly. Fix integration tests.
    Refactor tutorial code into a help tab controller and a separate service tracking first-time usage.
    Show the tutorial immediately for first-time users.
    Protractor tests: add tests for complex behaviours and navigation within the exploration editor.
    UI fixes based on user tests:
    
    (1) Change phrasing for 'misspelled by one character' rule.
    (2) Remove the sentence in save-exploration modal that suggests a status change to the exploration.
    (3) Autofocus to title in gallery modal when the 'create new' button is clicked.
    (4) Autofocus to the corresponding create-new-state text box after a new state has just been created.
    (5) Add a loading indicator when the content for a new state is loading in the learner view.
    (6) Make the exploration map modal bigger.
    Fix two UI issues:
    
    (1) When the save modal is opened, shift focus to the textarea field in which to enter a commit message.
    (2) After a new feedback message is sent, clear the feedback message input field.
    Add state and link colors to history graph
    Rename 'reset' button back to 'discard changes'.
    Renamed interactions for consistency, added padding to rule headings and buttons.
    More fixes to the editor view.
    
    (1) Pull interaction selector out of the customization view.
    (2) Dismiss warnings when rules are changed.
    (3) Shorten the labels for the 'save changes' and 'discard changes' buttons.
    (4) Fix issue #147: show an error message when an invalid link is saved.
    Fix more UI issues.
    
    (1) Fix overflowing interactive map widget.
    (2) Reverse the order of the cancel/submit buttons in the feedback modal in the learner view.
    (3) Add icons to the Edit and Preview buttons in the exploration editor page.
    (4) Adjust the width of the header row so that the control buttons fit in one line.
    (5) Allow the tutorial to be started properly when the user is in preview mode.
    (6) Widen the tutorial tooltip for the initial step, and remove the step numbers in the red circles.
    (7) Make some CSS fixes to the exploration editor for the case when the exploration is not editable by the current user.
    Fix lots of small bugs.
    
    (1) In the MusicNotesInput widget, rename 'play desired sequence' to 'play target sequence'.
    (2) In NumericInput view for the learner's input, do not show integers as floats.
    (3) In the TextInput widget, improve the description of the 'rows' field.
    (4) Rename Code REPL widget to 'Code input'.
    (5) In the MusicNotesInput widget, change the 'Add Note' button to make it clear what type of note is being referred to (a music note, not a comment).
    (6) Rename 'Tutorial' to 'Walkthrough' (the former sounds like 'manual').
    (7) Disable 'look inside' functionality in preview mode.
    (8) Add Amy's name to credits.
    (9) Show edit buttons in gallery for moderators (issue 373).
    (10) Fix broken loading when the history tab in the exploration editor is shown on initial load.
    (11) Fix the broken revert modal in history tab (the link to try out the old version did not work).
    (12) Move the 'create' button nearer to the 'add new state' input field.
    (13) Move the learner answer div styling to a common location in the conversation skin view.
    (14) Allow states defined in rules to use '.' (issue 166).
    (15) Add moderator page to profile menu (issue 374).
    Add a tutorial for the editor page.
    Create a controller for the exploration graph. Remove more occurrences of .
    Add objective and language fields to the 'create exploration' form.
    Add services for version history tree
    Also download all snapshots in history tab
    Refactor out the routing logic into a separate service, and simplify it.
    Make small amendments to the navbar and the exploration editor header.
    Remove superfluous elements from the editor preview page.
    Add a live-preview mode to the exploration editor.
    Make it possible to view player skins in the editor view.
    Redesign the editor rules interface. Also make the behavior of the 'save changes' button more responsive.
    Simplify the state editor.
    Allow states to be added in the frontend without requiring a backend RPC.
    Upgrade d3 version to v3.4.11. Make some variables in the state-graph-viz directive readonly.
    Protractor tests: add functions relating to the settings tab, and refactor some earlier code.
    Completely refactor the state graph to use a template. In the process, fix a couple of bugs involving SVG defs not working in Firefox.
    Refactoring state graph code without changing behavior: split out the layout computing into a separate service, and provide a basic template for the graph.
    Initial response to review comments.
    Create framework for end-to-end testing in protractor.
    Add a category label to the exploration editor page. Change color of status labels.
    Remove helper text in the objective field (it does not make sense for non-English explorations).
    Address Amit's comments from release testing.
    
    1) Rework the 'Compare revisions' button and surrounding text in the exploration history tab.
    2) Make button layout more consistent across the editor and gallery pages.
    3) Remove header on forum page.
    4) Right-align 'Create New Exploration' button in gallery with the individual gallery tiles.
    5) Remove some text in the 'publish exploration' modal.
    Further fixes based on pre-release feedback from Jacob:
    
    1. Use ndb.OR for gallery query rather than !=, since the latter is more susceptible to indexes not having been built.
    2. Change 'Close' buttons in state and exploration delete modals to 'Cancel'.
    3. Fix gallery display error in Firefox
    Show better language descriptions in gallery and editor page. Update wording in editor page modals and move tooltips onto their corresponding action buttons.
    Add language-code selection functionality to the exploration editor.
    Remove uniquify post_normalizer and replace it with frontend and backend validators.
    Move code for forms to its own directory. Fix small bug in float validator.
    Added labels
    Various UI and functionality fixes.
    
    (a) Add tests for the HTML and JSON escapers
    (b) Handle scope inheritance properly in the custom editors
    (c) Remove confirmation dialog on widget change
    (d) Remove obtrusive warning message for missing objectives
    (e) Fix typo and unescaping in logic proof widget
    Rearrange JS in the editor page so that a loading failure for the google jsapi fails gracefully.
    Fix for exploration editor running offline
    Make the new widget specifications work in the frontend editor and reader views.
    Temporarily remove inclusion of new form builder scripts in the main exploration editor page.
    Rename the frontend schema_editor files to form_builder.
    Allow dependencies to be specified for the editor page itself, in addition to the widgets it contains.
    Move exploration history functions out into a separate controller.
    Add a system for handling dependencies of widgets that include additional angular modules.
    Add additional space between navbar and exploration editor content (this is based on Amit's commit). Move the state title to the right so it looks more centered.
    Rename StateStats to StateStatistics for parity with ExplorationStatistics. Return only the top 10 unresolved answers to avoid overloading the client browser.
    Add further warnings to the frontend exploration editor. Now, under normal operation, a backend server validation error should never be triggered.
    Rename StatsViewer to ExplorationStatistics to be more consistent with other files in the editor templates directory.
    Fix a bug that prevented changes to rules from being saved after a new interactive widget was selected.
    Make the 'nominate for release' button green.
    Route reader-submitted feedback to the new feedback system, and remove the frontend for the old feedback system.
    Make exploration labels more explicit. Move publish button to top of page, rather than burying it in the Settings tab.
    Made some style modifications to the mini-graph and content-editor
    Remove the SHOW_FEEDBACK_TAB flag. Guard against non-logged-in users submitting new threads or messages.
    Add an indicator to the feedback tab header of when the last feedback update was. Remove some unneeded scrolling behavior.
    Fix small minification error in three directives. Remove a superfluous directive.
    Fix merge errors.
    Implement world-viewable exploration editor pages.
    Resolving merge problem.
    Feedback thread barebone UI and data path.
    Minor wording change.
    Implement basic functionality for a readonly editor view of an exploration.
    Get rid of the 'answers received' section at the bottom of the editor, and put it on the bottom-right instead.
    Add instructions for embedding explorations.
    Small fixes: add 'no objective' warning to the warnings list, fix unable-to-publish-exploration issue, make 'Done' buttons in rules smaller.
    Fix link errors in publish modal.
    Update release modal docs.
    Move settings-related stuff to the exploration settings page.
    More miscellaneous UI fixes. Added an expandable warnings bar below the save and discard buttons.
    Small wording changes. Redid the layout of the exploration settings page.
    Continue the Bootstrap 3 upgrade.
    First pass at upgrading to Bootstrap 3.
    Add green button to the release modal.
    Fix small error: colored wrong button green.
    Add a modal to the exploration editor page that gives instructions for releasing an exploration.
    changed all buttons to bootstrap, fixed some alignments
    Move all editor-related services to a common file in the editor/ directory.
    Further wording fixes to the gallery page, site guidelines page and publish modal.
    Add a page for publishing criteria. Rewrite the publish modal.
    Rename 'playtest gallery' to 'playtest queue'. Rewrite the publish modal.
    Improve the UI for displaying objectives (and the warning to specify them if they aren't specified yet). Add objectives to existing demo explorations.
    Change size of exploration mini-map to 250x250, add border-radius, add margins to '+' button in mini-map.
    
    Still to do:
    -The blocks in the mini-map are currently drawn from the top left corner, they should be positioned by their centers.
    -There should be a panning animation when a block is clicked on, it's a bit confusing to jump between states at the moment.
    -The content gets clipped when the window is resized. The layout is rather confusing, and may need some refactoring.
    Make each state visualization graph detect the width and height of its container. Make the state graph minimap taller.
    Primarily removed state editor from modal window into main editing area, turned exploration graph into a mini-map.
    Create a separate controller for the exploration settings tab. Pull out more stuff from the exploration editor into standalone services, and group similar services under a base ExplorationPropertyService.
    Create a new site guidelines page and clarify some of the wording.
    Remove several instances of &nbsp; characters; used CSS instead.
    Factor out the exploration title into a common service that can be referenced cleanly from both the main window and the settings tab (which will soon have its own controller). Add tests for this service.
    Remove several instances of &nbsp; characters; used CSS instead.
    Address review comments.
    Add a simple framework for handling widget dependencies.
    Further UI improvements based on feedback from testing.
    Move exploration metadata and version history to separate tabs, and add more documentation to the UI.
    Move the help links to a Help tab in the navbar.
    Make the state editor draggable.
    Allow moderators to unpublish explorations.
    Refactor the rule editor to remove duplicate HTML.
    Address issue 110 by showing the state name in the state editor header. Try and remove some vertical whitespace, and make the state editor taller.
    By default, hide beta explorations in both galleries.
    Minor edits to explanations of how beta mode works
    Add explanation of how beta mode works.
    Introduce the concept of beta explorations, and allow them to be publicized or unpublicized by moderators. Fix an error in the admin/moderator permissions.
    Grant moderators delete permissions for explorations; record roles when deleting.
    Fix issue 91: close content and interaction editors when the active state is changed.
    For cloned explorations, do not show version history, and make the messaging at the top of the editor page clearer.
    Remove the 'center' tag, which is deprecated in HTML5.
    Move JS code for individual widgets from its temporary home in templates/dev/head/components to the extensions/widgets directory.
    Convert interactive widgets to Angular directives.
    
    This has the following advantages:
    (a) speed: the interactive widgets now load faster because there is no
    need for a second request to the server to populate the iframe.
    (b) no more monkeying around with the parent container to handle iframe
    height changes
    (c) less boilerplate is needed for each individual widget
    (d) there is no need to reload JS libraries separately for the widget,
    since these libraries will have already been included in the container page.
    Replace the state editor 'close' button with a minus sign to indicate minimization, not deletion.
    Overlay the state editor on the exploration graph editor, and remove the separate tab for the state editor.
    Make the graph visualization more responsive, and make the states fit in the viewport without the need for scrolling.
    Allow parameter changes to be swapped.
    Only change the values of name fields on-blur.
    Separate the version history into its own section.
    Add information about added, deleted and changed states to the commit modal.
    Improve the messaging for cloned explorations.
    Add links to Yana's exploration design tips. Merge the About and License pages.
    Add a Contributor gallery. Update URL routing. Make other small UI tweaks.
    Minor fixes for login/logout buttons. Remove unused images.
    Add a button for releasing ownership of an exploration to the community.
    Allow owners, collaborators and playtesters of explorations to be set.
    Minor UI changes, including fixing wording on About page, adding a 'Beta' subtitle, and making the widget preview less opaque.
    Various small UI fixes.
    Fix a couple of bugs that caused widgets not to load properly. Fix another bug where the Publish button was shown for an exploration that was already published.
    Improve the way exploration creation and saving is handled in the backend. Require commit_cmds and commit_messages to be specified by default, where possible.
    Tighten up the implementation of user settings and rights.
    Allow add and delete state operations to be done as part of a larger commit.
    Represent a changelist as a sequence of commands and process this sequence server-side.
    Start writing a changelist handler on the server side. Move the delete_state() function to the exploration domain object so that it can be executed together with other changes.
    Set up minification of JS and CSS files.
    Show reader feedback in the state editor.
    Change the editor page warning message to an announcement and make it HTML.
    Allow configuration properties to be edited in the admin UI.
    Pass exploration changes through the same save flow as the state changes.
    Fix review comments.
    Allow multiple states to be edited in a single commit.
    Pass exploration changes through the same save flow as the state changes.
    Fix review comments.
    Allow multiple states to be edited in a single commit.
    Add a submission button to the 'add state' form. Inline some macros.
    Modify pre-publication message in exploration editor.
    Modify pre-publication message in exploration editor.
    Move the unresolved answers section to its own controller.
    Remove unnecessary buttons from the list editor.
    Introduce the concept of object editors that handle editing of ints, strings, etc. in a generic fashion. Port all object editors over to the new framework (except the ListEditor, which needs some more work).
    Implement batched saving for state names and content.
    Simplify some of the state editor code. Rename InteractiveWidgetPreview to InteractiveWidgetEditor.
    Rename GuiEditor to StateEditor.
    Add rights management for deleting explorations. Only an admin can delete published explorations; only the owner and admins can delete unpublished ones.
    Add code and tests for handling viewing rights to an exploration.
    Add directives for the oppia-noninteractive tags so that they can be shown in the editor view. Make the GuiEditor show a single RTE for non-interactive content.
    Add directives for the oppia-noninteractive tags so that they can be shown in the editor view. Make the GuiEditor show a single RTE for non-interactive content.
    Allow downloading of explorations as zip files.
    Add a new select2 component and use it in the exploration creation modal.
    Remove YUI dependency; use jwysiwyg for all RTEs.
    Introduce a StatsViewer controller. Improve the routing behavior in the exploration editor.
    Move more modals to the angular-ui.bootstrap framework.
    Remove dependency on ngRoute and simplify the routing code in the editor view. This turns out to have the nice side-effect of making the exploration editor page load a lot faster :-)
    Use ui-bootstrap tooltips throughout, except in modals generated in JS (this will come later). The aim is to remove the old angular-ui dependency.
    Modify the state parameter change editor to use the same value generators that are used in the widget parameter editor.
    Complete the implementation of the widget customization param editors using the new value generators.
    Add proof-of-concept for inclusion of value generator editors via directives.
    Move core JS files to the frontend root so that they are more easily discoverable.
    Add frontend warning message about explorations being transient on the demo site.
    Upgrade dependencies and ensure that each one has a full version number.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Remove the editor tree visualization. Improve the styling of the exploration editor landing page.
    Move reusable directives to the components/ folder.
    Move more logic into the domain layer. Fix some select2 error messages in the frontend that occur due to imported libraries being in the wrong order.
    Remove YAML editor functionality.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Reorganize frontend JS files, partitioning them into 'apps'.
    Add a button that allows one to jump directly to the reader view for an exploration from the exploration editor.
    Change the rich text editor to YUI 2. Fix a bug in image editing.
    1. Make a proper responsive navbar, using a customized version of the Bootstrap lib. 2. Fix a bug where the state name was not displaying on the state editor page.
    Move metadata onto a 'zippy' on the exploration editor page.
    Add a new tab for exploration statistics.
    Restructure editor views.
    Ensure that the exploration graph doesn't get cut off by the left edge of the viewing area.
    Restructuring the view directories more intuitively.
    Move libs that are only needed by the exploration editor into the exploration editor HTML.
    Specify only needed JS files in each template view.
    Move statistics to the exploration metadata tab.
    Improvements to the UI: add instructions to the exploration editor state diagram, add cancel buttons to the exploration metadata editors, and lighten the color of the reader conversation log so that the most recent interaction stands out.
    Move exploration metadata to its own view, so that the exploration map can fill more of the screen.
    Add a flag to disable YAML functionality.
    Adding images to sample explorations. Rejigging CSS for gallery page.
    Refactor the State model. Introduce more implicit property validation.
    Adding titles to pages.
    working on parameter changes
    Refactoring the state deletion code. Also, we now do not create an exploration if any of its setup parameters (like the YAML file) are invalid.
    Add help text
    Connecting the set-parameter interface to the backend, and tweaking its UI
    UI tweaks to the exploration editor
    Making the exploration metadata editor display less noisy. Removing some unneeded code due to the destination refactor. Adding a method to models.State to output an entire state as a Python dictionary.
    Various small frontend fixes.
    Removing stateData. Using explorationData for all get transactions.
    Move interactive widget preview to separate file, and into ng-view
    Tweaking the interactive widget UI
    Deleting old files.
    Continuing to replace the old input_view/action_set infrastructure with the new interactive_widget/interactive_ruleset infrastructure. WARNING: The present commit leaves Oppia in a broken state.
    Adding default rules to each of the rulesets.
    Add edit, delete, move up and move down buttons for individual rules
    Add feedback textarea and dest input field to rule modal, and display these properties in the overall rule UI
    Adding Phil's music widget
    Fully persist interactive widget parameters and rulesets.
    Adding rule display for interactive widgets. Still need to save updates to the server.
    Persisting interactive widget ids for a state. Renaming 'blurb' to 'description' for consistency; renaming widget.class to widget.id since class is a reserved word in JavaScript.
    added most of the interface for declaring and changing parameters; TODO:
    (more details in forthcoming email)
    add a model for the parameter changes;
    make parameter changes per-dest/category rather than per-state;
    add similar interface for editing parametsr/changes;
    add validation to inputs;
    add yaml interface;
    actually connect to back end;
    Adding new fields to the state model class. Adding UI elements for customizing interactive widgets and displaying rules for them.
    Populate the interactive widget repository iframe. Remove wysihtml5.
    Refactoring editor_metadata.html into a separate template.
    Add interactive widget modal
    Adding an interactive widget preview window
    Add confirmation prompt before deleting an exploration
    Fixing URL routing
    Allow explorations to be downloaded as YAML files
    Allow deletion of explorations
    Fix location hash routing
    Add click handler to tree view
    Renaming vizualization files
    Removing drag-and-drop palette, combining exploration editor tabs, and starting an experiment with a d3.js tree layout
    Allowing preview images for explorations to be uploaded
    Synchronize PUT methods on explorations and tighten up the frontend for editing exploration properties
    Move templates to editor/views and make a separate GuiEditor controller.
    When the graph node is clicked, the view switches to the state editor view
    Add a tabbed view to teh exploration editor
    Refactoring current active input management
    Streamlining warnings behaviour
    Move editor graph to separate template
    Move warning butterbar to top-level editor exploration page.
    Fix state name, which was in the wrong scope
    Adding a YAML text editor for each state.
    Allow importing of exploration from a file
    Fix tabs
    Experiment with displaying state data as YAML, and updating image, video and widget behavior in the editor UI.
    Fix widget iframing
    Make the reader interface fully functional.
    Enable publishing of explorations.
    Renaming standard and output directories to dev and prod respectively.
    Making interactive widgets work
    Removing _new suffix from new file names
    Transitioning existing Oppia classes and pages to the new structure
    Make the index page spiffy. Add login functionality to editor views and display the login/logout status in the navbar.
    Creating a new set of HTML, JS and CSS files for a redesigned Oppia frontend
    Remove the 'widget_sticky' setting.
    Complete the deprecation of 'widget'.
    Added missing semicolon on line 329
    Added a viewableIfPrivate test to Exploration Rights Services and cleared up New State Template service.
    Allow states to be added in the frontend without requiring a backend RPC.
    Rename ExplorationEditorSpec to EditorServicesSpec to reflect what it is actually testing.
    Ensure that an active state name is always specified.
    Address review comments.
    Create a separate controller for the exploration settings tab. Pull out more stuff from the exploration editor into standalone services, and group similar services under a base ExplorationPropertyService.
    Factor out the exploration title into a common service that can be referenced cleanly from both the main window and the settings tab (which will soon have its own controller). Add tests for this service.
    Pull the editor change list functionality out into a separate service, and add tests for it.
    Move exploration metadata and version history to separate tabs, and add more documentation to the UI.
    Introduce a service that supplies controllers with the name of the currently-active state.
    Add an explorationStates service.
    Move to the recommended Angular .controller syntax.
    
    This follows the recommendation in the list of breaking changes
    for Angular 1.3.0 described at
    
        https://github.com/angular/angular.js/blob/master/CHANGELOG.md#130-beta15-unbelievable-advancement-2014-07-11
    Rename StateStats to StateStatistics for parity with ExplorationStatistics. Return only the top 10 unresolved answers to avoid overloading the client browser.
    Fix a saving bug: when a rule with an input is selected, and then changed to a rule without an input, the extraneous input is kept, causing an error on the backend. Also, refresh the state editor when changes are discarded.
    Frontend UI fixes to the state editor.
    Remove a couple of places that were still editable in the view-only mode for the exploration editor.
    Resolving merge problem.
    Get rid of the 'answers received' section at the bottom of the editor, and put it on the bottom-right instead.
    Ensure that an active state name is always specified.
    Introduce a service that supplies controllers with the name of the currently-active state.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Represent a changelist as a sequence of commands and process this sequence server-side.
    Remove the concept of stateId from the frontend.
    Move unresolved answers functionality to a separate handler.
    Move the unresolved answers section to its own controller.
    Move state parameter changes editor to sidebar. Also, various minor wording changes.
    Made numerous changes to tutorial, fixed broken tutorial scrolling.
    Edited many margins, changed drag icon, added blog link, changed tutorial curtain.
    Minor changes to alignment and wording of various labels and buttons.
    Move state parameter changes editor to sidebar. Also, various minor wording changes.
    Move state name from sidebar to main editor. Tidy up CSS for avatars.
    Restyle the content and interaction parts of the state editor.
    Numerous margin, positioning, and styling fixes for the exploration editor.
    Remove header of subsequent state from editor view; remove 'click to see rules' button. Style the editor so that the layout looks nice.
    Update integration tests.
    Start redesigning the state editor.
    Protractor tests: Switch editor and player utilities to using protractor-specific classes where possible. Also remove some instances of 'widget'.
    Change interaction editor icon from a pencil to a cog (to suggest 'settings' or 'customization').
    Resolving concerns
    Adding a cancel button to content editor in exploration editor. Issue 343.
    Remove on-hover effect for content and rule sections in non-editable mode.
    Fix more UI issues.
    
    (1) Fix overflowing interactive map widget.
    (2) Reverse the order of the cancel/submit buttons in the feedback modal in the learner view.
    (3) Add icons to the Edit and Preview buttons in the exploration editor page.
    (4) Adjust the width of the header row so that the control buttons fit in one line.
    (5) Allow the tutorial to be started properly when the user is in preview mode.
    (6) Widen the tutorial tooltip for the initial step, and remove the step numbers in the red circles.
    (7) Make some CSS fixes to the exploration editor for the case when the exploration is not editable by the current user.
    Add a tutorial for the editor page.
    Additional UI fixes: spacing, click handlers, consistency.
    Minor cleanup fixes based on Jacob's comments
    Tweaked a lot of color, wording, and alignment issues in the exploration editor.
    Further UI improvements to the state content and interaction editors. Change the default initial state name.
    Add a welcome message to the content editor and more contextual feedback to the interaction editor.
    Redesign the editor rules interface. Also make the behavior of the 'save changes' button more responsive.
    Simplify the state editor.
    Remove several unnecessary borders.
    Initial response to review comments.
    Create framework for end-to-end testing in protractor.
    Button margin and alignment adjustments.
    Address Amit's comments from release testing.
    
    1) Rework the 'Compare revisions' button and surrounding text in the exploration history tab.
    2) Make button layout more consistent across the editor and gallery pages.
    3) Remove header on forum page.
    4) Right-align 'Create New Exploration' button in gallery with the individual gallery tiles.
    5) Remove some text in the 'publish exploration' modal.
    Add a size option for the schema-based HTML input form, and convert the state content and feedback RTEs to use it.
    Several UI improvements based on user feedback.
    
    * Change 'More info...' to question mark symbol.
    * Make 'Edit', 'Preview' links in the interactive widget accordion look clickable.
    * Reduce the left padding in the list of widget types.
    * Move the 'use this widget'/'cancel' buttons to the bottom of the widget editor, as is canonical.
    * Make the empty content placeholder message more positive.
    * Show navbar dropdowns on-hover.
    Address review comments. Remove unnecessary space between the two columns of the state editor.
    Made some style modifications to the mini-graph and content-editor
    Minor renaming.
    Move the parameter changes section into the content section so that it is less obtrusive as the first thing on the state editor page.
    Resolving merge problem.
    Implement basic functionality for a readonly editor view of an exploration.
    First pass at upgrading to Bootstrap 3.
    changed all buttons to bootstrap, fixed some alignments
    Use a downward-left pointing pencil as the edit icon, so that the pencil points towards the item that is to be edited.
    Use a downward-left pointing pencil as the edit icon, so that the pencil points towards the item that is to be edited.
    Make the central column of the state editor wider, and remove some buttons.
    Fix admin page by including some missing scripts. Move the RTE modal template into the HTML editor.
    Add a noninteractive LaTex-display widget.
    Allow reader feedback to be marked as fixed or will_not_fix.
    Editor html style fixes.
    Split state editor html.
    Split state editor html.
    Ensure images display properly in multiple-choice rule editor. Add additional validation to image click input region labels.
    Collapse rule bodies while drag is happening.
    Show the active rule inline, rather than at the bottom.
    Require the user to explicitly select the interaction for each state.
    Update Protractor tests.
    Numerous small changes for new rule editor.
    Make default rule selectable from 'add rule' dialog. Prohibit rule saving when feedback is empty and the destination is the same state.
    Standardize edit rule views for both the 'existing rule' and the 'add rule' cases.
    Fix some errors in previous commit.
    Do not show the default rule if it has not been set.
    Consolidate retrieval of interaction registry, and make it happen during page load.
    Update integration tests to handle new interaction dropdown.
    When the interaction id is changed to a terminal interaction, make the (hidden) default rule point to the same state.
    Allow clicking outside a modal to dismiss it
    Add a few more event updates that were missing in the previous commit.
    Move rule tabs to the bottom of the state editor.
    Address review comments.
    Update integration tests.
    Add a destination bar at the bottom of the state editor for navigating to the 'next' rule.
    Restyle rule editor to make the tabs clearer. Also, keep the correct rule tab open after sorting.
    Allow new rules to be added.
    Refactor the rule description editor into a separate directive.
    Restyle the rule editor to use tabs.
    
    Remaining TODOs:
    - Fix the 'add rule' flow.
    - Remove isTmpRule, cancelEdit and protractor-test-temporary-rule.
    - Add fixed bar at the top/bottom for rule destinations.
    - Fix weird sorting behaviour.
    Split the rules section of the editor into its own controller.
    Fix migration job. Fix bug with state parameter changes display in state editor UI.
    Fix bug in header disappearing when tutorial is loaded.
    Address review comments.
    Numerous changes to editor page.
    Hide parameter changes header in view mode, if there are none.
    Remove duplicate warnings.
    Move state parameter changes editor to sidebar. Also, various minor wording changes.
    Clean up images folder.
    Move 'publish exploration' button to navbar.
    Restyle About page.
    Minor change to ensure initial state name shows up in the settings tab.
    Numerous margin, positioning, and styling fixes for the exploration editor.
    Indicate editor tab in navbar breadcrumb. Use cards in subsidiary editor pages.
    Address review comments.
    
    (1) Add proper tooltips to icons in navbar.
    (2) Reduce size of top-left Oppia icon to 40px height.
    (3) Change box-shadow of right sidebar to follow material design spec.
    (4) Standardize horizontal and vertical offsets of the titles of the various tabs.
    Move the 'publish in gallery' button to the settings tab.
    Move the save and publish buttons to the navbar.
    Continue decluttering the state editor.
    Protractor tests: Switch editor and player utilities to using protractor-specific classes where possible. Also remove some instances of 'widget'.
    Move tabs to the top navigation bar, making the editor UI much cleaner. Add headings to the various pages in the editor.
    Remove labels from top of exploration editor page, and add more information to the roles/permissions section of the settings tab.
    Move exploration parameter specs to a standalone service.
    Address Jacob's review comments. Rename 'beta' to 'public'. Reduce number of status choices in the gallery.
    Upgrade Angular to v1.3.0-rc.5 and jQuery to v2.1.1.
    Reorder goal and category in the exploration settings page to match the exploration creation modal.
    Rename 'Objective' to 'Goal' in the UI and clean up the exploration creation modal view.
    Minor changes to button name and exploration objective placeholder.
    Small usability/bug fixes.
    
    (1) Use different symbol for 'Look inside' button.
    (2) Make feedback links go to the exploration editor feedback tab.
    (3) Clarify exploration permissions.
    (4) In integration tests, clear the RTE before appending content.
    (5) Fix timestamps in moderator page.
    Add objective and language fields to the 'create exploration' form.
    Add an explorationStates service.
    Add a readonly URL field that can be used for sharing the exploration.
    Add an option for private explorations to be viewed by anyone with the link.
    Protractor tests: add tests for the publication ect. process and subsequent gallery display.
    Protractor tests: add functions relating to the settings tab, and refactor some earlier code.
    Remove 'add user by email' functionality
    Made changes as per Sean's comments, also fixed ExplorationEditor.js which was broken during a previous sync.
    Feature request for adding roles to explorations using usernames(issue 286), will put beautification of html in a different commit.
    
    Conflicts:
            core/templates/dev/head/editor/ExplorationEditor.js
    Remove 'add user by email' functionality
    Made changes as per Sean's comments, also fixed ExplorationEditor.js which was broken during a previous sync.
    Feature request for adding roles to explorations using usernames(issue 286), will put beautification of html in a different commit.
    Frontend code for making initial state name settable. TODO: backend code and the body of saveExplorationInitStateName().
    Remove helper text in the objective field (it does not make sense for non-English explorations).
    Disable 'create thread' button until preconditions for successful creation are satisfied. Add text to bottom of widget picker pointing users to the issue tracker where they can request new widgets.
    Add small note so that, if another language is needed, the user knows they can ask for it to be added.
    Add language-code selection functionality to the exploration editor.
    Add a skin chooser to the frontend editor UI.
    Further bug fixes.
    
    (a) Add a help link to the parameter changes section.
    (b) Display interactive map coordinates to 3 decimal places.
    (c) Correct a misleading rule name in the tar file rules.
    (d) Fix an issue with having black text on dark blue background in the navbar when a tab name is focused on.
    (e) Fix a bug with the exploration deletion flow.
    (f) Only show the delete button to exploration owners.
    Make exploration labels more explicit. Move publish button to top of page, rather than burying it in the Settings tab.
    Ensure that lists in the admin page and feedback editor are editable.
    Make the exploration settings view in non-editable mode consistent with the editable view.
    Resolving merge problem.
    Implement basic functionality for a readonly editor view of an exploration.
    Move settings-related stuff to the exploration settings page.
    More miscellaneous UI fixes. Added an expandable warnings bar below the save and discard buttons.
    Small wording changes. Redid the layout of the exploration settings page.
    Continue the Bootstrap 3 upgrade.
    First pass at upgrading to Bootstrap 3.
    changed all buttons to bootstrap, fixed some alignments
    Review fixes.
    Improve the UI for displaying objectives (and the warning to specify them if they aren't specified yet). Add objectives to existing demo explorations.
    Create a separate controller for the exploration settings tab. Pull out more stuff from the exploration editor into standalone services, and group similar services under a base ExplorationPropertyService.
    Factor out the exploration title into a common service that can be referenced cleanly from both the main window and the settings tab (which will soon have its own controller). Add tests for this service.
    Further UI improvements based on feedback from testing.
    Move exploration metadata and version history to separate tabs, and add more documentation to the UI.
    Truncate objective in gallery tile if it is too long. Make state name bigger.
    Move state name from sidebar to main editor. Tidy up CSS for avatars.
    Move the current state name to the sidebar.
    Added additional margins and other small wording changes.
    Require the user to explicitly select the interaction for each state.
    Made numerous changes to tutorial, fixed broken tutorial scrolling.
    Edited many margins, changed drag icon, added blog link, changed tutorial curtain.
    If user is not logged in, don't show interaction dropdown, and don't highlight rule section on hover.
    Move state parameter changes editor to sidebar. Also, various minor wording changes.
    Do not allow rules to be saved if their descriptions are invalid.
    Changed a lot of margins, font sizes, etc.
    Update integration tests to handle new interaction dropdown.
    Restyle the interactions menu.
    Refactor code that uses interactions and RTE components to distinguish properly between customization_arg_specs and customization_args.
    Move state name from sidebar to main editor. Tidy up CSS for avatars.
    Restyle the content and interaction parts of the state editor.
    Numerous margin, positioning, and styling fixes for the exploration editor.
    Respond to review comments
    Fix protractor tests
    Change interaction selector to two-tier system sorted by category
    Move the rule tabs to the bottom of the state editor. Remove the 'next state' bar.
    Split the rules section of the editor into its own controller.
    Remove header of subsequent state from editor view; remove 'click to see rules' button. Style the editor so that the layout looks nice.
    Make 'preview mode' into a separate tab.
    Hide the rules section by default.
    Start redesigning the state editor.
    Remove widget_domain, replacing it with two base classes for interactions and rich-text components.
    Migrate the backend widget registries and the controllers.
    First half of the work needed to rename widgets to interactions/rich-text-components.
    Protractor tests: Switch editor and player utilities to using protractor-specific classes where possible. Also remove some instances of 'widget'.
    Change interaction editor icon from a pencil to a cog (to suggest 'settings' or 'customization').
    Remove on-hover effect for content and rule sections in non-editable mode.
    Hide the widget selector in the state editor in noneditable mode.
    More fixes to the editor view.
    
    (1) Pull interaction selector out of the customization view.
    (2) Dismiss warnings when rules are changed.
    (3) Shorten the labels for the 'save changes' and 'discard changes' buttons.
    (4) Fix issue #147: show an error message when an invalid link is saved.
    Fix more UI issues.
    
    (1) Fix overflowing interactive map widget.
    (2) Reverse the order of the cancel/submit buttons in the feedback modal in the learner view.
    (3) Add icons to the Edit and Preview buttons in the exploration editor page.
    (4) Adjust the width of the header row so that the control buttons fit in one line.
    (5) Allow the tutorial to be started properly when the user is in preview mode.
    (6) Widen the tutorial tooltip for the initial step, and remove the step numbers in the red circles.
    (7) Make some CSS fixes to the exploration editor for the case when the exploration is not editable by the current user.
    Add a tutorial for the editor page.
    Additional UI fixes: spacing, click handlers, consistency.
    Minor cleanup fixes based on Jacob's comments
    Tweaked a lot of color, wording, and alignment issues in the exploration editor.
    Further UI improvements to the state content and interaction editors. Change the default initial state name.
    Add a welcome message to the content editor and more contextual feedback to the interaction editor.
    Redesign the editor rules interface. Also make the behavior of the 'save changes' button more responsive.
    Simplify the state editor.
    Simplify the widget customization interface.
    Initial response to review comments.
    Create framework for end-to-end testing in protractor.
    Address Amit's comments from release testing.
    
    1) Rework the 'Compare revisions' button and surrounding text in the exploration history tab.
    2) Make button layout more consistent across the editor and gallery pages.
    3) Remove header on forum page.
    4) Right-align 'Create New Exploration' button in gallery with the individual gallery tiles.
    5) Remove some text in the 'publish exploration' modal.
    Disable 'create thread' button until preconditions for successful creation are satisfied. Add text to bottom of widget picker pointing users to the issue tracker where they can request new widgets.
    In the learner view, load the entire exploration at the outset, and move the construction of the interactive widget HTML tags to the frontend.
    Add codemirror view for customization args that have code-type values.
    Change 'parameter' to 'expression' in form builders. Separate out the viewer mode to reduce the cyclomatic complexity.
    Remove require_is_one_of normalizer, which is not needed anymore given that we have 'choices'. Add some inline validation.
    Allow multiple-choice selection in input fields.
    Amend widget customization args specification to use a schema with type 'custom', rather than a separate 'custom_editor' field.
    Load all interactive widgets when the page loads to minimize the number of RPCs required. Also, show the preview tab in the interactive widget editor accordion when the widget id is changed.
    Refactor the state interactive widget frontend code.
    
    In particular:
    
    1) Move the tag construction for the widget preview to the frontend.
    2) Introduce new state property services for the widget attributes.
    Tidy up naming and clarify the code.
    Make the new widget specifications work in the frontend editor and reader views.
    Several UI improvements based on user feedback.
    
    * Change 'More info...' to question mark symbol.
    * Make 'Edit', 'Preview' links in the interactive widget accordion look clickable.
    * Reduce the left padding in the list of widget types.
    * Move the 'use this widget'/'cancel' buttons to the bottom of the widget editor, as is canonical.
    * Make the empty content placeholder message more positive.
    * Show navbar dropdowns on-hover.
    Address review comments. Remove unnecessary space between the two columns of the state editor.
    Resolving merge problem.
    Implement basic functionality for a readonly editor view of an exploration.
    First pass at upgrading to Bootstrap 3.
    changed all buttons to bootstrap, fixed some alignments
    Primarily removed state editor from modal window into main editing area, turned exploration graph into a mini-map.
    Use a downward-left pointing pencil as the edit icon, so that the pencil points towards the item that is to be edited.
    Use a downward-left pointing pencil as the edit icon, so that the pencil points towards the item that is to be edited.
    Make the central column of the state editor wider, and remove some buttons.
    Clarify handling of 'externalSave' events. Make stickyInteractiveWidget react only to changes from the UI, and not to changes due to a change in the active state.
    changed 'customization' label to 'edit' in interaction editor
    Fix issue 91: close content and interaction editors when the active state is changed.
    Fix several music-input-related bugs.
    Move interactive widget customization into the inline editor for the widget.
    Move the interactive widget picker inline.
    Convert interactive widgets to Angular directives.
    
    This has the following advantages:
    (a) speed: the interactive widgets now load faster because there is no
    need for a second request to the server to populate the iframe.
    (b) no more monkeying around with the parent container to handle iframe
    height changes
    (c) less boilerplate is needed for each individual widget
    (d) there is no need to reload JS libraries separately for the widget,
    since these libraries will have already been included in the container page.
    CSS tweaks. Add licensing reminder in image upload modal.
    Editor html style fixes.
    Split state editor html.
    Split state editor html.
    Move the current state name to the sidebar.
    Move the save and publish buttons to the navbar.
    Complete the deprecation of 'widget'.
    Resolving comment.
    Resolving concerns
    Add service for comparing states between 2 versions
    Fix 'can rename state to END' bug in state editor.
    Refactor graphData out into a graphDataService.
    Create a controller for the exploration graph. Remove more occurrences of .
    Add an explorationStates service.
    Minor cleanup fixes based on Jacob's comments
    Add a welcome message to the content editor and more contextual feedback to the interaction editor.
    Add StateEditorSpec tests.
    Resolve review comments.
    Make changes from review.
    Add tests forStateEditor.
    Add validation for the new EndConversation interaction, and hide its rule display.
    Complete the deprecation of 'widget'.
    Fix bug in reversing changes in history diff
    Refactor state graph to use node IDs
    Respond to review comments
    Respond to review comments
    Fixes to history services and tests
    * Fix wrong change commands
    * Delete states which are added, then deleted
    * Fix doc string
    * Stop tests returning success when promise is not fulfilled
    Add comparison for rules in version history
    Address additional review comments
    Address review comments
    Add service for comparing states between 2 versions
    Respond to additional review comments
    Respond to review comments
    Add services for version history tree
    Also download all snapshots in history tab
    Numerous changes to editor page.
    Move state parameter changes editor to sidebar. Also, various minor wording changes.
    Renamed interactions for consistency, added padding to rule headings and buttons.
    Redesign the editor rules interface. Also make the behavior of the 'save changes' button more responsive.
    Rename StateStats to StateStatistics for parity with ExplorationStatistics. Return only the top 10 unresolved answers to avoid overloading the client browser.
    Fix several issues discovered during release testing:
    
    1. Make username input field on editor registration page shorter.
    2. Remove non-working links in statistics tab that link back to the state editor.
    3. Ensure that the number of times an answer was submitted is visible in the statistics tab modal.
    4. Make statistics tab rule descriptions slightly more human-readable.
    5. Rename 'Common responses' to the more accurate 'Unhandled responses'.
    6. Remove 'by' in front of author names in the exploration feedback threads view.
    7. Remove some whitespace above the feedback thread list.
    8. Disallow submission of reader feedback until some feedback is typed.
    9. Use human-readable status names for feedback messages.
    10. Shorten the text in the reader feedback modal.
    Remove a couple of places that were still editable in the view-only mode for the exploration editor.
    Resolving merge problem.
    Address more review comments.
    Address review comments.
    Get rid of the 'answers received' section at the bottom of the editor, and put it on the bottom-right instead.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Moving models/ to apps/ in preparation for the migration to django non-rel
    Add missing files from previous commit
    Moving controllers to a separate folder
    Initial commit.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Moving models/ to apps/ in preparation for the migration to django non-rel
    Add missing files from previous commit
    Moving controllers to a separate folder
    Initial commit.
    Remove unused code. Use exploration summaries for all queries.
    Add a search field to the gallery.
    Minor nits to address code review.
    Addressed code review, minor changes.
    Added test for exploration summaries. Small changes related to exploration summaries.
    Addressed code review, only minor changes.
    Using exploration summary domain objects instead of summary models directly, addressed code review.
    Add an option for private explorations to be viewed by anyone with the link.
    Use exploration summaries to speed up galleries. Include MR job to generate initial summaries.
    Centralize the default limit for datastore queries.
    
    An earlier commit (c84460c11a0f) suggesting that inequality filters
    were not working properly was incorrect; the real culprit was that
    the default query limit was too low.
    Further fixes based on pre-release feedback from Jacob:
    
    1. Use ndb.OR for gallery query rather than !=, since the latter is more susceptible to indexes not having been built.
    2. Change 'Close' buttons in state and exploration delete modals to 'Cancel'.
    3. Fix gallery display error in Firefox
    Remove a couple of unused methods.
    Rewrite user dashboard job to use the exploration snapshot class instead of the commit logs, in order to improve backward-compatibility with existing explorations.
    Address review comments.
    added 'include_deleted' option to get_multi.
    Add a 'most recent updates' section to the user dashboard.
    addressed more code review comments.
    Addressed review comments.
    Fixed some issues in get_multi and its tests, and removed tests for search functions that no longer exist.
    Stop using ndb.ComputedProperty until we understand it better.
    
    This was done because we ran into the following scenario:
    (1) Assume there is already an ndb.Model class in code that has been
        deployed to production, and several instances of this class have
        been created.
    (2) A developer adds a ComputedProperty field to the existing model
        and a query based on it.
    (3) Existing instances of this model do not have that ComputedProperty
        set, and fail to show up in the query.
    Modify the dashboard view to show private, beta and released explorations.
    addressed code review comments.
    added search to exp_domain layer
    Add a list of recent feedback messages to the moderator page.
    Add links to read-only explorations in the Contribute gallery.
    Give the language_code field a default value so that old explorations remain compatible with the exploration validation.
    Create a separate controller for the exploration settings tab. Pull out more stuff from the exploration editor into standalone services, and group similar services under a base ExplorationPropertyService.
    Add additional exploration properties.
    
    (The properties are: skill tags, blurb, author notes, objective and
    language code.)
    
    WARNING: This should not be merged into the main branch until the
    frontend is written, otherwise all publish will fail since there is
    nowhere to specify the (required) objective.
    Add a new gallery for playtesting.
    Address review comments.
    Implement the frontend for the recent commits list.
    
    Still TODO:
    - audit the data returned to ensure nothing private is exposed
    - test on a production instance
    - reuse the functionality in the exploration version history page
    - reuse the functionality in the user profile page
    Implement the backend for recording and querying all commits to all explorations (together with filters and paging).
    By default, hide beta explorations in both galleries.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Change save() to commit(). Refactor model creation and update.
    Get rid of property_dict.
    Change save() to commit() in storage classes so as not to conflict with the predefined save() in Django.
    Implement the necessary queries for the gallery and profile pages.
    Use save() instead of put() for VersionedModels.
    Improve the way exploration creation and saving is handled in the backend. Require commit_cmds and commit_messages to be specified by default, where possible.
    Add versioning for config model. Fix editor prerequisites JS tests.
    Implement generic versioned models that all storage classes can use.
    
    Also, for explorations, create a new version for every save action,
    rather than only after the exploration is published.
    Remove the state model from the backend.
    
    Reasons:
    - It is confusing to keep track of two separate lifecycles for states
        and explorations.
    - The state name and state id were duplicate ways to identify a
        particular state.
    
    Side effects:
    - This change has resulted in an update to the YAML schema. The update is
        fully backward-compatible.
    - States are now identified in URLs and in analytics by their names
        rather than their ids.
    Remove the 'tentatively_public' state; this makes it harder to query for all public explorations.
    Consolidate the handlers for the editor page into a single file.
    Fully migrate explorations to use the rights manager.
    Add a model for exploration rights.
    Lint the codebase.
    Batch datastore get() and put() operations, and use local caches where possible. This halves the exploration loading time! (E.g., on the dev server, the binary search exploration used to take 18.3 s to load from scratch, and now it takes 9.8 s.)
    Enable soft deletion of explorations.
    Remove the image storage model. Move image file uploading to use the file system storage model.
    Record creation and last update times for all entities. Explicitly declare certain fields as unindexed to increase speed.
    Schema change: make param specs into key-value pairs so that exactly one param spec is defined for each param name.
    Re-allow the setting of exploration initialization parameters.
    Allow text in the interactive iframe to be rendered using mathjax.
    Binary search exploration v1
    Rename exploration.parameters to exploration.param_specs.
    Version the skin templates. Add default_skin attr to the exploration yaml files.
    Introduce a ParamSpec class for maintaining parameter type information at the exploration level. TODOs: remove the ability in the frontend to set values at the exploration level, display the parameter types in the exploration metadata page, and rename exploration.parameters to exploration.param_specs in the backend.
    Split the exploration snapshot content and exploration snapshot metadata into two different models for faster retrieval.
    Move state models to the exploration storage model file, since they really belong together.
    Add transactions around operations that update states in an exploration.
    When an exploration is deleted, delete its snapshots too. Otherwise when the demo explorations are reloaded (say) then the version snapshotting will fail because the current version already exists. We should change this behavior later to mark explorations as deleted instead of actually deleting them (so that they can be restored from backup), but this will do for now.
    Display version history in the editor UI. Add snapshot models to Django backend.
    Add a commit message to the exploration snapshot model.
    Add versioning of explorations.
    Remove IdModel, since now all persistent models have ids.
    Remove parameter storage model, and use only its domain class.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Reverted the model switching mechanism.
    Add model switching and django test runner.
    Move answer classification methods to the exp_services module.
    Change the name of the models directory from 'apps' to 'storage'.
    Use module-level imports. Avoid aliasing module names where possible.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Separate the exploration model into a domain object class and a storage class.
    Minor renaming. Move get_all() method to base model class.
    Where possible, use a user_id instead of an explicit User object.
    Add clarifying docstrings.
    Rename ValidationError to ModelValidationError so as not to conflict with the Django term.
    Add a ValidationError class to all models.
    Change states to state_ids for clarity.
    Move add_state() and delete() back to the model class. Add an add_editor() method to exploration.services.
    The exploration model should not know who the current user is.
    Finish moving stuff out of the exploration model class.
    Move more methods from the Exploration model class to the exploration services file.
    Remove direct dependencies from the controllers and other modules on the Exploration storage model so that it is easily swappable. The Exploration storage model is now imported only by the exploration services and test files.
    Temporarily remove partially-implemented dataset functionality. This depends on how typed objects are maintained, and it looks like the way we do this might need to be refactored. We can put this functionality back in later.
    Remove use of parent property and ancestor queries. Start the process of making the State accessible only via its containing Exploration.
    Turn the init_state of an exploration into a @property to avoid duplication of information.
    Minor doc changes.
    Remove unneeded methods from exploration/models.py
    Move get() method for IdModel classes to the common superclass.
    Introduce an IdModel class.
    Creating a profile page with improvable states
    Change testacular to karma. Modify initial state name.
    Refactor the state model, breaking up a long method and making the logic clearer.
    Fix broken tests. Rewrite reader parameter logic so that parameters are initialized using the new state. Change schema for exploration demos so that they are at exploration level (and the states list is now a list, rather than a dict, of states).
    Added exploration-level parameter initialization.
    Changed yaml of Music exploration to function this way.
    Everything is working exactly the way it was before.
    TODO:
    - make parameters changeable in reader.py
    - make sure parameter changes work properly
    - add interface for exploration-level parameter initialization
    - change exploration-level parameter specification in yaml to not be so hacky
    Update ParamChange docs and validate the obj_type of ParamChange models when they are created.
    Add a datasets property to the Exploration model.
    Moving models/ to apps/ in preparation for the migration to django non-rel
    Add tests to the exploration, parameter and classifier models, bringing them to nearly 100% coverage.
    Simplify the load_default_widgets method
    Add verification for demo explorations.
    Combining the Parameter and MultiParameter classes into a single Parameter class.
    Moving parameters to use the new Parameter models. This change is not backwards-compatible.
    Small doc clarification
    Finish cleanup of exploration.py
    More cleanup.
    Refactoring and adding validation to the Exploration model.
    Add an admin handler that allows reloading of the default explorations. Move the methods in controller_utils.py to the respective models/controllers.
    Removing the AugmentedUser class to make queries faster.
    Adding images to sample explorations. Rejigging CSS for gallery page.
    Change str default to unicode.
    Make it possible to retrieve exploration-level parameters from the backend.
    Move some controller utility methods to the exploration model class.
    Refactor the State model. Introduce more implicit property validation.
    Merge changes
    changed exploration parameters model to be more similar to widget param model for consistency and ease of use;
    added almost all propagation of adding new parameters, except it breaks exploration a bit so commented out.
    Add a base model class. Improve the model tests.
    Removing yaml_utils.py and moving its methods to the relevant places in the layered architecture.
    Refactoring utils
    Lint most python files
    Change NDB queries to get_by_id for speed.
    Allow addition of collaborators.
    Continue tidying up pages.py.
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Refactoring the state deletion code. Also, we now do not create an exploration if any of its setup parameters (like the YAML file) are invalid.
    Move exploration, state and parameter models into separate files.
    Add models to keep track of long-running jobs.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Moving models/ to apps/ in preparation for the migration to django non-rel
    Add missing files from previous commit
    Moving controllers to a separate folder
    Initial commit.
    Add a cron job to clean up old auxiliary model instances for MR jobs.
    Add a separate section for unfinished jobs to the admin dashboard.
    Show no more than 100 recent jobs on the admin dashboard.
    Stop using ndb.ComputedProperty until we understand it better.
    
    This was done because we ran into the following scenario:
    (1) Assume there is already an ndb.Model class in code that has been
        deployed to production, and several instances of this class have
        been created.
    (2) A developer adds a ComputedProperty field to the existing model
        and a query based on it.
    (3) Existing instances of this model do not have that ComputedProperty
        set, and fail to show up in the query.
    Modify the dashboard view to show private, beta and released explorations.
    Create an admin dashboard for continuous computations.
    Trivial commit fixing some lint issues, but mostly meant to group the files related to continuous computations in a set so that review comments can be left on them.
    Check that no computations of the given type are running before kicking off a new one.
    Allow MapReduces to compare mapped items against the time the job was enqueued. Standardize time-handling conventions throughout the codebase (use '_msec' suffix and use methods from utils.py for time conversions).
    Implement a preliminary framework for continuously-running computations.
    Resolving merge problem.
    Add an dashboard in the admin page for jobs.
    First pass at MapReduce job implementation.
    Finish up basic jobs models and tests.
    Further work on the jobs modelling. Still not ready for merging to develop yet; needs more tests.
    Preliminary commit for jobs functionality with tests. Not yet ready for check-in.
    Add models to keep track of long-running jobs.
    Add a simple virtual file system for exploration assets.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Moving models/ to apps/ in preparation for the migration to django non-rel
    Add missing files from previous commit
    Moving controllers to a separate folder
    Initial commit.
    Centralize the default limit for datastore queries.
    
    An earlier commit (c84460c11a0f) suggesting that inequality filters
    were not working properly was incorrect; the real culprit was that
    the default query limit was too low.
    add vfs_ prefex to two utils method
    Fix some Windows tests
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Address some, but not all, of the failing Django tests.
    Change save() to commit(). Refactor model creation and update.
    Change save() to commit() in storage classes so as not to conflict with the predefined save() in Django.
    Use save() instead of put() for VersionedModels.
    Make the filesystem use the common VersionedModels.
    Do not require the exploration id to be passed for every file system call.
    Add versioning capability to the exploration assets file system.
    Add a simple virtual file system for exploration assets.
    Feedback thread barebone UI and data path.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Moving models/ to apps/ in preparation for the migration to django non-rel
    Add missing files from previous commit
    Moving controllers to a separate folder
    Initial commit.
    Centralize the default limit for datastore queries.
    
    An earlier commit (c84460c11a0f) suggesting that inequality filters
    were not working properly was incorrect; the real culprit was that
    the default query limit was too low.
    Address review comments -- in particular, add more tests.
    Add a 'most recent updates' section to the user dashboard.
    Allow MapReduces to compare mapped items against the time the job was enqueued. Standardize time-handling conventions throughout the codebase (use '_msec' suffix and use methods from utils.py for time conversions).
    Disallow 'duplicate' status for feedback threads. Ensure that a new migration job cannot be started if the previous one is still running.
    Address review comments: allow users to provide a subject line and specify whether their feedback is exploration- or state-specific.
    Route reader-submitted feedback to the new feedback system, and remove the frontend for the old feedback system.
    Make a named argument more explicit.
    Minor code clean up for feedback tab.
    Add a list of recent feedback messages to the moderator page.
    Address several UI comments by Jacob.
    First round of tests for the feedback thread backend. Also consolidate some handlers.
    Feedback thread UI clean up.
    Feedback thread barebone UI and data path.
    Feedback thread model definition.
    Add config property model and CSRF protection.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Moving models/ to apps/ in preparation for the migration to django non-rel
    Add missing files from previous commit
    Moving controllers to a separate folder
    Initial commit.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Change save() to commit(). Refactor model creation and update.
    Change save() to commit() in storage classes so as not to conflict with the predefined save() in Django.
    Use save() instead of put() for VersionedModels.
    Make the filesystem use the common VersionedModels.
    Add versioning for config model. Fix editor prerequisites JS tests.
    Allow configuration properties to be edited in the admin UI.
    Record creation and last update times for all entities. Explicitly declare certain fields as unindexed to increase speed.
    Add config property model and CSRF protection.
    Add transactions around operations that update states in an exploration.
    Move jinja_utils to a separate module.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Implement pluggable skins.
    Automatically compute the parameters for rules based on the rule description.
    Add rules for NonnegativeInt.
    Add infrastructure and data for handling composite rules. This is a more flexible version of the current classifier framework and will eventually replace it.
    Remove normalizers; switch to data.objects.models.
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Renaming rule files to have YAML suffixes. Adding normalizers.
    Adding tests for classifiers and using PEP-8 for the Python files.
    Moving sample classifiers, explorations and widgets to a separate directory.
    Make multiple choice widget work.
    Adding some basic list rules.
    Adding the remaining two classifiers.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Moving models/ to apps/ in preparation for the migration to django non-rel
    Add missing files from previous commit
    Moving controllers to a separate folder
    Initial commit.
    Minor linting to stats code.
    Cleaning up based on code reviews
    Response to code review of c4088eb7deba
    Add versioned statistics aggregation and allow different versions to be viewed from stats page
    Address more review comments.
    Addressed review comments
    Note: One test does fail.
    Prep for migration to stats jobs
    1. Stop writing to State Counter (old style) models
    2. Migrate all uses of current state counters over to aggregator
    3. Update aggregator to use both old and new models correctly
    4. Create one off job to deal with the overlap between these two systems
    Centralize the default limit for datastore queries.
    
    An earlier commit (c84460c11a0f) suggesting that inequality filters
    were not working properly was incorrect; the real culprit was that
    the default query limit was too low.
    Add a 'most recent updates' section to the user dashboard.
    Fix the handling of non-ascii characters in the migration job.
    Fix a couple of small bugs in the stats jobs: handle deleted explorations properly, and determine the exploration id and state name correctly from the model id.
    Migrate the existing StatsPageJobManager to use the new continuous computations framework.
    Address remaining review comments.
    Version documentation for events
    Don't fake missing data & use versions to distinguish
    Minor renaming and lint corrections. Remove some unused methods.
    lots of little linter-type fixes
    Explain caching decision
    Changing caching policy for annotation models
    Remove all traces of the old feedback models.
    First pass at feedback item migration
    Refactoring event log models to remove hierarchy
    Logging start and leave events from reader
    Cleaning up the event models
    Cleaning up new event types based off of code review
    Create base events and events needed for completion rate (Start/Leave)
    Removing v2 of stats models to ease further development
    Removing v2 of stats models to ease further development
    first pass of listing user's feedback on profile page.
    No tests yet, no actual display on page, but data should be getting returned.
    Fix a bug introduced in revision 5b4a64d16cc involving misgeneration of new exploration ids.
    Merge of missing answer changes, fixing conflicts
    Housekeeping changes: remove unneeded block_number, normalize reader answers prior to processing them, do not fail if the stats answer logs overflow (issue 139), make warmup handler not throw 404s.
    Fix several music-input-related bugs.
    first pass of listing user's feedback on profile page.
    No tests yet, no actual display on page, but data should be getting returned.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Add versioning for config model. Fix editor prerequisites JS tests.
    Remove the state model from the backend.
    
    Reasons:
    - It is confusing to keep track of two separate lifecycles for states
        and explorations.
    - The state name and state id were duplicate ways to identify a
        particular state.
    
    Side effects:
    - This change has resulted in an update to the YAML schema. The update is
        fully backward-compatible.
    - States are now identified in URLs and in analytics by their names
        rather than their ids.
    Lint the codebase.
    Allow reader feedback to be marked as fixed or will_not_fix.
    Make the feedback model more flexible.
    Use get_multi() for retrieving state answer logs, to speed up loading.
    Record creation and last update times for all entities. Explicitly declare certain fields as unindexed to increase speed.
    Add django model for feedback given by the reader to editors.
    Adding a button allowing the reader to send feedback to editors
    Remove IdModel, since now all persistent models have ids.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Reverted the model switching mechanism.
    Add model switching and django test runner.
    Add the handler name as an argument for accessing the stats rule answer log.
    Add lots more tests for the statistics models.
    Major refactoring to make the statistics model more concrete and use domain concepts from the exploration and state models. Remove the feedback controller and replace it with a link to the bug tracker and groups page. Restrict the unresolved answers feature to be used only with the default rule of a state.
    Change the name of the models directory from 'apps' to 'storage'.
    Moving the collection of unresolved answers for a state to the statistics module.
    Use module-level imports. Avoid aliasing module names where possible.
    Simplify some code in the statistics model. Fix an error in the retrieval of journal entities by using state keys instead of state ids.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Pull statistics functions out into a services file.
    Change states to state_ids for clarity.
    Finish moving stuff out of the exploration model class.
    Remove direct dependencies from the controllers and other modules on the Exploration storage model so that it is easily swappable. The Exploration storage model is now imported only by the exploration services and test files.
    Fix a unicode error in the statistics module.
    Remove unneeded methods from exploration/models.py
    Introduce an IdModel class.
    Removing a stale TODO
    Only count default rules with self loops eligible for improvement
    Adding common answers onto default rule improvable states
    Creating a profile page with improvable states
    Add 'improvable states' to exploration stats page
    Fix a bug in statistics viewer where the keys were not being constructed properly
    Add unit tests for statistics model.
    Small refactoring of the statistics model, in preparation for adding tests.
    Fix lint and type-conversion errors in the statistics model
    Creates top ten improvable states statistics analysis
    Moving models/ to apps/ in preparation for the migration to django non-rel
    Add tests to the exploration, parameter and classifier models, bringing them to nearly 100% coverage.
    Records all answers and displays stats broken down by rule hit
    Show top ten stats by count for each state.
    Tracks each student landing on each state
    Add a feedback handler to Oppia.
    Improve tests for the image class and the widget class.
    Lint most python files
    Change NDB queries to get_by_id for speed.
    Restructure tests, so that each module has its own test file.
    Continue tidying up pages.py.
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Fix several issues: (1) Show multiple choice option text rather than just the index numbers in the editor rule dialogs, (2) make stats handler accept non-string default answers, (3) remove 'required' from multiple choice input widget, (4) reword 'create new exploration' modal text
    Improving the statistics page. Removing caching headers since we also serve locally-constructed files in the resource requests; think about this later.
    Moving to PEP-8 method name styles (method_name rather than MethodName)
    Continuing to replace the old input_view/action_set infrastructure with the new interactive_widget/interactive_ruleset infrastructure. WARNING: The present commit leaves Oppia in a broken state.
    Fixing bugs in stats and displaying in the stats collection page
    Revamp stats to include a journal type that keeps track of a list
    Two new stats: exploration completed and default answer hit
    Add stats.py models file.
    addressed review at https://code.google.com/p/oppia/source/detail?r=82c09e74c61877a070bd3ea3cf314326ffd7bc43
    addressed more code review comments.
    Addressed review comments.
    Fixed some issues in get_multi and its tests, and removed tests for search functions that no longer exist.
    addressed code review comments.
    Remove the Django port of Oppia from the codebase.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Add test suite for django to automatically discover and run tests. Add platform switching to tests.
    Rename tests.py for GAE models to gae_models_test.py
    Fully test and document the BaseModel storage class.
    Remove IdModel, since now all persistent models have ids.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Fix some import errors.
    Change the name of the models directory from 'apps' to 'storage'.
    Use module-level imports. Avoid aliasing module names where possible.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Add files missing in previous commit.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Moving models/ to apps/ in preparation for the migration to django non-rel
    Add missing files from previous commit
    Moving controllers to a separate folder
    Initial commit.
    Surface 404 errors only when an exploration is not found.
    Rewrite user dashboard job to use the exploration snapshot class instead of the commit logs, in order to improve backward-compatibility with existing explorations.
    Address review comments.
    added 'include_deleted' option to get_multi.
    addressed review at https://code.google.com/p/oppia/source/detail?r=82c09e74c61877a070bd3ea3cf314326ffd7bc43
    Add a 'most recent updates' section to the user dashboard.
    addressed more code review comments.
    Addressed review comments.
    Fixed some issues in get_multi and its tests, and removed tests for search functions that no longer exist.
    addressed code review comments.
    removed get_all_updated_within_timedelta from base model.
    added get_all_updated_within_timedelta method to base_model.
    Minor renaming and lint corrections. Remove some unused methods.
    Add a list of recent feedback messages to the moderator page.
    Resolving merge problem.
    Preliminary commit for jobs functionality with tests. Not yet ready for check-in.
    Fix a bug introduced in revision 5b4a64d16cc involving misgeneration of new exploration ids.
    Merge of missing answer changes, fixing conflicts
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Implement reverting functionality.
    Address some, but not all, of the failing Django tests.
    Allow old versions of explorations to be linked to.
    Change save() to commit() in storage classes so as not to conflict with the predefined save() in Django.
    Use save() instead of put() for VersionedModels.
    Make the filesystem use the common VersionedModels.
    Tighten up the implementation of user settings and rights.
    Implement generic versioned models that all storage classes can use.
    
    Also, for explorations, create a new version for every save action,
    rather than only after the exploration is published.
    Lint the codebase.
    Batch datastore get() and put() operations, and use local caches where possible. This halves the exploration loading time! (E.g., on the dev server, the binary search exploration used to take 18.3 s to load from scratch, and now it takes 9.8 s.)
    Enable soft deletion of explorations.
    Remove the image storage model. Move image file uploading to use the file system storage model.
    Add versioning capability to the exploration assets file system.
    Record creation and last update times for all entities. Explicitly declare certain fields as unindexed to increase speed.
    Add parent to states in GAE so that it is possible to do transactional updates on the states of an exploration.
    Fully test and document the BaseModel storage class.
    Remove IdModel, since now all persistent models have ids.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Reverted the model switching mechanism.
    Add model switching and django test runner.
    Change the name of the models directory from 'apps' to 'storage'.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Separate the exploration model into a domain object class and a storage class.
    Minor renaming. Move get_all() method to base model class.
    Refactoring basic state operations.
    Add tests for more exploration services.
    Rename ValidationError to ModelValidationError so as not to conflict with the Django term.
    Add a ValidationError class to all models.
    Move add_state() and delete() back to the model class. Add an add_editor() method to exploration.services.
    Remove direct dependencies from the controllers and other modules on the Exploration storage model so that it is easily swappable. The Exploration storage model is now imported only by the exploration services and test files.
    Remove use of parent property and ancestor queries. Start the process of making the State accessible only via its containing Exploration.
    Move get() method for IdModel classes to the common superclass.
    Introduce an IdModel class.
    Moving models/ to apps/ in preparation for the migration to django non-rel
    More cleanup.
    Improve tests for the image class and the widget class.
    Add a base model class. Improve the model tests.
    Refactoring utils
    Restructure tests, so that each module has its own test file.
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Renaming rule files to have YAML suffixes. Adding normalizers.
    Adding tests for classifiers and using PEP-8 for the Python files.
    Check username for uniqueness
    
    Includes code review changes from previous username commits
    Requires a username for editors and adds a path to create them
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Moving models/ to apps/ in preparation for the migration to django non-rel
    Add missing files from previous commit
    Moving controllers to a separate folder
    Initial commit.
    Show the profile picture on all pages.
    Partially working profile picture upload
    Restyle the profile page. Allow incremental saving. Use language codes instead of languages.
    Make language selection work properly on the profile page
    Save bio to user_settings and load existing bio into profile
    Show the tutorial immediately for first-time users.
    Record the time a user last checked the dashboard.
    Add a 'last updated' time to the user dashboard recent updates table.
    Add a 'most recent updates' section to the user dashboard.
    Fix merge error.
    Revert "Merging moderator page into main branch"
    
    This reverts commit 41f68ff03a3f72d0fc5f2d4c4e37106e01707cff, reversing
    changes made to dee9ead5e46b3616eaae6c5e7fb55a6e8fdde539.
    Basic functionality for moderators to get users' email addresses
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Address some, but not all, of the failing Django tests.
    Tighten up the implementation of user settings and rights.
    Lint the codebase.
    Add an editor prerequisites page with information about the CC0 license.
    Small name change
    Renaming to represent normalized usernames
    Check username uniqueness against lowercase strings
    Check username for uniqueness
    
    Includes code review changes from previous username commits
    Refactoring username setting into a proper domain
    Requires a username for editors and adds a path to create them
    Requires a username for editors and adds a path to create them
    Check username for uniqueness
    
    Includes code review changes from previous username commits
    Refactoring username setting into a proper domain
    Requires a username for editors and adds a path to create them
    Requires a username for editors and adds a path to create them
    Requires a username for editors and adds a path to create them
    Requires a username for editors and adds a path to create them
    Address review comments -- in particular, add more tests.
    Add a test for feedback model ids.
    Make it possible to view player skins in the editor view.
    Move skin templates into directives. This is in preparation for allowing preview mode in the editor view -- we can then load all of these templates in the editor view at the outset and invoke them with HTML tags when necessary.
    Address review comments.
    Add a skin chooser to the frontend editor UI.
    Add a registry for skins.
    Move each skin to its own directory. Load only the HTML template, and let that template load everything else.
    Address review comments. Move feedback modal template up to exploration_player.html.
    First pass at defining a common core for pluggable skins.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Lint the codebase.
    Move jinja_utils to a separate module.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Implement pluggable skins.
    Automatically compute the parameters for rules based on the rule description.
    Add rules for NonnegativeInt.
    Add infrastructure and data for handling composite rules. This is a more flexible version of the current classifier framework and will eventually replace it.
    Remove normalizers; switch to data.objects.models.
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Renaming rule files to have YAML suffixes. Adding normalizers.
    Adding tests for classifiers and using PEP-8 for the Python files.
    Moving sample classifiers, explorations and widgets to a separate directory.
    Make multiple choice widget work.
    Adding some basic list rules.
    Adding the remaining two classifiers.
    Migrate the backend widget registries and the controllers.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Lint the codebase.
    Complete the implementation of the widget customization param editors using the new value generators.
    Lint fixes.
    Resolving merge problem.
    Revert os.sep changes to the keys used in the virtual file system.
    Fix some broken tests on Windows due to incorrect path separators.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Change save() to commit(). Refactor model creation and update.
    Use save() instead of put() for VersionedModels.
    Make the filesystem use the common VersionedModels.
    Add filepath prefix checking and tests for catching invalid filepaths.
    Move the tar exploration assets into a directory so that they can be served from the exploration filesystem. Allow rules to make use of a filesystem.
    Add a disk-backed implementation of the file system so that it can be substituted for a datastore-backed one in tests.
    Do not require the exploration id to be passed for every file system call.
    Add versioning capability to the exploration assets file system.
    Add a simple virtual file system for exploration assets.
    Lint fixes.
    Refactor admin page to use new schema-based forms.
    Add functionality for banning editors.
    Move checks for whether the user is a super admin directly to the platform level.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Change save() to commit(). Refactor model creation and update.
    Refine rights management for moderators, admins and super admins.
    Implement admin and moderator rights management.
    Use save() instead of put() for VersionedModels.
    Add config properties for editor prerequisites page.
    Make the filesystem use the common VersionedModels.
    Add versioning for config model. Fix editor prerequisites JS tests.
    Allow configuration properties to be edited in the admin UI.
    Add config property model and CSRF protection.
    Move 'unresolved answers' section to the bottom of the page. Make tutorial only focus on active rule.
    Complete the deprecation of 'widget'.
    Further cleanup of work on versioned statistics.
    Cleaning up based on code reviews
    Response to code review of c4088eb7deba
    Add versioned statistics aggregation and allow different versions to be viewed from stats page
    Lint fixes.
    Break the state transition handler into multiple handlers, similar to what is done in editor preview mode.
    Address more review comments.
    Prep for migration to stats jobs
    1. Stop writing to State Counter (old style) models
    2. Migrate all uses of current state counters over to aggregator
    3. Update aggregator to use both old and new models correctly
    4. Create one off job to deal with the overlap between these two systems
    Migrate the existing StatsPageJobManager to use the new continuous computations framework.
    Move event handler to a separate file, since it is no longer handling analytics-only events.
    Get the stats graph to read from the old models until we have a proper migration process in place.
    Rename StateStats to StateStatistics for parity with ExplorationStatistics. Return only the top 10 unresolved answers to avoid overloading the client browser.
    Minor refactoring of statistics frontend and backend, including removing some unused methods.
    Minor renaming and lint corrections. Remove some unused methods.
    lots of little linter-type fixes
    Cleaning up the calls to models and tests
    Remove all traces of the old feedback models.
    Route reader-submitted feedback to the new feedback system, and remove the frontend for the old feedback system.
    Logging start and leave events from reader
    Cleaning up new event types based off of code review
    Create base events and events needed for completion rate (Start/Leave)
    Removing v2 of stats models to ease further development
    Some fixes and code style improvements for profile page.
    Added exploration links to the profile page feedback list.
    Removing v2 of stats models to ease further development
    Some fixes and code style improvements for profile page.
    Added exploration links to the profile page feedback list.
    Added exploration links to the profile page feedback list.
    Add propagation of reader id for reader feedback when feedback is given;
    fix bugs in getting existing reader feedback for profile.
    TODO: make feedback listing human readable.
    display feedback on the profile page (needs debuggign - data gets lots somewhere along the way)
    first pass of listing user's feedback on profile page.
    No tests yet, no actual display on page, but data should be getting returned.
    Merge of missing answer changes, fixing conflicts
    Add propagation of reader id for reader feedback when feedback is given;
    fix bugs in getting existing reader feedback for profile.
    TODO: make feedback listing human readable.
    display feedback on the profile page (needs debuggign - data gets lots somewhere along the way)
    first pass of listing user's feedback on profile page.
    No tests yet, no actual display on page, but data should be getting returned.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Implement the necessary queries for the gallery and profile pages.
    Add versioning for config model. Fix editor prerequisites JS tests.
    Resolve a TODO regarding the use of both id and widget_id in a widget description.
    Remove the state model from the backend.
    
    Reasons:
    - It is confusing to keep track of two separate lifecycles for states
        and explorations.
    - The state name and state id were duplicate ways to identify a
        particular state.
    
    Side effects:
    - This change has resulted in an update to the YAML schema. The update is
        fully backward-compatible.
    - States are now identified in URLs and in analytics by their names
        rather than their ids.
    Lint the codebase.
    Allow reader feedback to be marked as fixed or will_not_fix.
    Show reader feedback in the state editor.
    Make the feedback model more flexible.
    Only load full state statistics when they are asked for, rather than when the exploration is loaded. This decreases the loading time significantly.
    Use get_multi() for retrieving state answer logs, to speed up loading.
    Create a StatsViewer controller and move the modal code into an HTML template for maintainability.
    Basic visualization of state feedback from readers for editors
    Adding a button allowing the reader to send feedback to editors
    Add config property model and CSRF protection.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    For persistent storage, store states as JSON blobs instead of rich objects. The rich object representation will be used for retrieving them from memcache.
    Start moving repository methods to the services files so that domain objects can become plain python objects.
    Add model-switching mechanism.
    Use the first entry counts (rather than the total entry counts) to determine node colors for the state graph visualization.
    Make the state graph visualization into a reusable directive.
    Add the handler name as an argument for accessing the stats rule answer log.
    Condense and clarify the get_state_stats_for_explorations() method.
    Add lots more tests for the statistics models.
    Minor clarifications to get_top_ten_improvable_states().
    Major refactoring to make the statistics model more concrete and use domain concepts from the exploration and state models. Remove the feedback controller and replace it with a link to the bug tracker and groups page. Restrict the unresolved answers feature to be used only with the default rule of a state.
    Move more logic into the domain layer. Fix some select2 error messages in the frontend that occur due to imported libraries being in the wrong order.
    Change the name of the models directory from 'apps' to 'storage'.
    Move domain-related files to their own folder in the repository.
    Moving the collection of unresolved answers for a state to the statistics module.
    Remove some duplication in stats_services. Rename state.Rule to state.RuleSpec to distinguish it from the rules in apps/rule.
    Complete the transition to first-class Rule objects. Remove the classifier model and all calls to it.
    Use module-level imports. Avoid aliasing module names where possible.
    Completing the refactoring of the reader POST method to improve its clarity. Split the reader response rendering template into separate templates html and iframes.
    Simplify some code in the statistics model. Fix an error in the retrieval of journal entities by using state keys instead of state ids.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Store a payload attribute on handlers which use a payload. Move get_state_by_id() into the domain object.
    Separate the exploration model into a domain object class and a storage class.
    Pull statistics functions out into a services file.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Move the yaml files to use value generators for state parameter changes, and ensure that the reader view works. Note that this commit breaks the editor view; this will be fixed in a future commit. None of these commits will be pushed to master until we have a working build.
    Complete the implementation of the widget customization param editors using the new value generators.
    Separate exploration data files from other extensions.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move domain-related files to their own folder in the repository.
    Remove unneeded typed object models.
    Add rules for NonnegativeInt.
    Add infrastructure and data for handling composite rules. This is a more flexible version of the current classifier framework and will eventually replace it.
    Remove normalizers; switch to data.objects.models.
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Renaming rule files to have YAML suffixes. Adding normalizers.
    Adding tests for classifiers and using PEP-8 for the Python files.
    Moving sample classifiers, explorations and widgets to a separate directory.
    Make multiple choice widget work.
    Adding some basic list rules.
    Adding the remaining two classifiers.
    Split about page into two. Minor linting fixes.
    Require the user to explicitly select the interaction for each state.
    Complete the deprecation of 'widget'.
    Further cleanup of work on versioned statistics.
    Add versioned statistics aggregation and allow different versions to be viewed from stats page
    Break the state transition handler into multiple handlers, similar to what is done in editor preview mode.
    Address more review comments.
    Addressed review comments
    Note: One test does fail.
    Prep for migration to stats jobs
    1. Stop writing to State Counter (old style) models
    2. Migrate all uses of current state counters over to aggregator
    3. Update aggregator to use both old and new models correctly
    4. Create one off job to deal with the overlap between these two systems
    Migrate existing event handlers to the new framework.
    Move event handler to a separate file, since it is no longer handling analytics-only events.
    Rename StateStats to StateStatistics for parity with ExplorationStatistics. Return only the top 10 unresolved answers to avoid overloading the client browser.
    Minor refactoring of statistics frontend and backend, including removing some unused methods.
    Minor renaming and lint corrections. Remove some unused methods.
    Remove all traces of the old feedback models.
    Logging start and leave events from reader
    Cleaning up new event types based off of code review
    Create base events and events needed for completion rate (Start/Leave)
    Removing v2 of stats models to ease further development
    Feedback list test updates and typo fixes.
    Tests for feedback list.
    Removing v2 of stats models to ease further development
    Feedback list test updates and typo fixes.
    Tests for feedback list.
    Merge of missing answer changes, fixing conflicts
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Improve the way exploration creation and saving is handled in the backend. Require commit_cmds and commit_messages to be specified by default, where possible.
    Add versioning for config model. Fix editor prerequisites JS tests.
    Remove the state model from the backend.
    
    Reasons:
    - It is confusing to keep track of two separate lifecycles for states
        and explorations.
    - The state name and state id were duplicate ways to identify a
        particular state.
    
    Side effects:
    - This change has resulted in an update to the YAML schema. The update is
        fully backward-compatible.
    - States are now identified in URLs and in analytics by their names
        rather than their ids.
    Batch datastore get() and put() operations, and use local caches where possible. This halves the exploration loading time! (E.g., on the dev server, the binary search exploration used to take 18.3 s to load from scratch, and now it takes 9.8 s.)
    Complete the schema change that allows more flexible rule specifications (i.e. that allow Boolean combinators and classifying based on parameters).
    Add versioning of explorations.
    Add test suite for django to automatically discover and run tests. Add platform switching to tests.
    Change state mutator methods to not return anything.
    Modify save_state to take the exploration_id as well.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    For persistent storage, store states as JSON blobs instead of rich objects. The rich object representation will be used for retrieving them from memcache.
    Remove dependence of exploration domain class on the exploration model class.
    Start moving repository methods to the services files so that domain objects can become plain python objects.
    Add model-switching mechanism.
    Add integration test for statistics.
    Add the handler name as an argument for accessing the stats rule answer log.
    Add lots more tests for the statistics models.
    Minor clarifications to get_top_ten_improvable_states().
    Major refactoring to make the statistics model more concrete and use domain concepts from the exploration and state models. Remove the feedback controller and replace it with a link to the bug tracker and groups page. Restrict the unresolved answers feature to be used only with the default rule of a state.
    Change the name of the models directory from 'apps' to 'storage'.
    Move domain-related files to their own folder in the repository.
    Moving the collection of unresolved answers for a state to the statistics module.
    Add a test for count_state_hits().
    Remove some duplication in stats_services. Rename state.Rule to state.RuleSpec to distinguish it from the rules in apps/rule.
    Remove all dependencies on widget storage classes.
    Use module-level imports. Avoid aliasing module names where possible.
    Simplify some code in the statistics model. Fix an error in the retrieval of journal entities by using state keys instead of state ids.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Add delete_all_explorations() method and use it in tests. Fix a bug in profile.py where self.user was used instead of self.user_id.
    Add an explicit init_state_id property to avoid unnecessary database lookups. Minor refactorings and rewordings.
    Separate the exploration model into a domain object class and a storage class.
    Where possible, use a user_id instead of an explicit User object.
    Pull statistics functions out into a services file.
    Move add_state() and delete() back to the model class. Add an add_editor() method to exploration.services.
    Move more methods from the Exploration model class to the exploration services file.
    Remove direct dependencies from the controllers and other modules on the Exploration storage model so that it is easily swappable. The Exploration storage model is now imported only by the exploration services and test files.
    Turn the init_state of an exploration into a @property to avoid duplication of information.
    Remove unneeded methods from exploration/models.py
    Add unit tests for statistics model.
    Small refactoring of the statistics model, in preparation for adding tests.
    Creates top ten improvable states statistics analysis
    Moving models/ to apps/ in preparation for the migration to django non-rel
    Improve tests for the image class and the widget class.
    Lint most python files
    Restructure tests, so that each module has its own test file.
    Require the user to explicitly select the interaction for each state.
    Remove the 'widget_sticky' setting.
    Move the 'create new state' option into the rule destination dropdown.
    Fix jittering when moving from the editor tab to the preview tab. Update tests.
    Complete the deprecation of 'widget'.
    Refactor the learner feedback handler so that parts of it can be accessed as separate functions.
    Further UI improvements to the state content and interaction editors. Change the default initial state name.
    Fix issue 368: allow the initial state name to be changed without a backend error.
    In the learner view, load the entire exploration at the outset, and move the construction of the interactive widget HTML tags to the frontend.
    Send the entire exploration in the player frontend when the page loads.
    Add language-code selection functionality to the exploration editor.
    Minor lint fixes, mostly to the controller layer.
    Improve the UI for displaying objectives (and the warning to specify them if they aren't specified yet). Add objectives to existing demo explorations.
    Add additional exploration properties.
    
    (The properties are: skill tags, blurb, author notes, objective and
    language code.)
    
    WARNING: This should not be merged into the main branch until the
    frontend is written, otherwise all publish will fail since there is
    nowhere to specify the (required) objective.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Allow old versions of explorations to be linked to.
    Improve the way exploration creation and saving is handled in the backend. Require commit_cmds and commit_messages to be specified by default, where possible.
    Allow add and delete state operations to be done as part of a larger commit.
    Consolidate the validation for explorations in the exp_domain module.
    Remove the state model from the backend.
    
    Reasons:
    - It is confusing to keep track of two separate lifecycles for states
        and explorations.
    - The state name and state id were duplicate ways to identify a
        particular state.
    
    Side effects:
    - This change has resulted in an update to the YAML schema. The update is
        fully backward-compatible.
    - States are now identified in URLs and in analytics by their names
        rather than their ids.
    Fully migrate explorations to use the rights manager.
    Batch datastore get() and put() operations, and use local caches where possible. This halves the exploration loading time! (E.g., on the dev server, the binary search exploration used to take 18.3 s to load from scratch, and now it takes 9.8 s.)
    Remove the image storage model. Move image file uploading to use the file system storage model.
    Introduce server-side validation of exploration and state names. Standardize the characters that can be used in these names.
    Add versioning of explorations.
    Add test suite for django to automatically discover and run tests. Add platform switching to tests.
    Fix some referential integrity problems.
    Modify save_state to take the exploration_id as well.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    For persistent storage, store states as JSON blobs instead of rich objects. The rich object representation will be used for retrieving them from memcache.
    We don't actually need base_domain, so remove it.
    Remove dependence of exploration domain class on the exploration model class.
    Add model-switching mechanism.
    Move more logic into the domain layer. Fix some select2 error messages in the frontend that occur due to imported libraries being in the wrong order.
    Change the name of the models directory from 'apps' to 'storage'.
    Move domain-related files to their own folder in the repository.
    Add more tests to the exploration app.
    Moving the collection of unresolved answers for a state to the statistics module.
    Remove all dependencies on widget storage classes.
    Use module-level imports. Avoid aliasing module names where possible.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Add delete_all_explorations() method and use it in tests. Fix a bug in profile.py where self.user was used instead of self.user_id.
    Fix a missing dependency on App Engine which caused some tests to fail. Minor simplification of ExplorationHandler.get() return value.
    Add an explicit init_state_id property to avoid unnecessary database lookups. Minor refactorings and rewordings.
    rename_state() should take state_id as an argument rather than the entire State object.
    Move state deletion logic from the controllers into the domain layer.
    Allow explorations to be faked in tests to remove the dependency of the exploration domain object tests on the exploration model storage class.
    Add files missing in previous commit.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Add tests to ensure that object editor templates have the correct names and that object editors are defined for the types specified in the various rule descriptions.
    Finish cleaning up obj_services.py.
    Add test suite for django to automatically discover and run tests. Add platform switching to tests.
    Separate exploration data files from other extensions.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move domain-related files to their own folder in the repository.
    Remove unneeded typed object models.
    Lint fixes.
    add vfs_ prefex to two utils method
    make windows tests pass
    Fix more Windows tests; use simpler construct_path
    Fix some Windows tests
    use construct_path instead of os.path.join
    Resolving merge problem.
    Add os.sep to fs_domain.py
    Fix issue 219 (path separator bug)
    Add models to keep track of long-running jobs.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Address some, but not all, of the failing Django tests.
    Change save() to commit(). Refactor model creation and update.
    Use save() instead of put() for VersionedModels.
    Make the filesystem use the common VersionedModels.
    Add filepath prefix checking and tests for catching invalid filepaths.
    Move delete_all_* methods to the test file, since they should only be used there.
    Move the tar exploration assets into a directory so that they can be served from the exploration filesystem. Allow rules to make use of a filesystem.
    Add a disk-backed implementation of the file system so that it can be substituted for a datastore-backed one in tests.
    Do not require the exploration id to be passed for every file system call.
    Remove the image storage model. Move image file uploading to use the file system storage model.
    Add versioning capability to the exploration assets file system.
    Add a simple virtual file system for exploration assets.
    Fix gallery search handler to return exactly as many explorations as requested, where possible.
    Split about page into two. Minor linting fixes.
    Require the user to explicitly select the interaction for each state.
    Remove the 'widget_sticky' setting.
    Fix jittering when moving from the editor tab to the preview tab. Update tests.
    Make signing in required if the user is logged in but has not chosen a username.
    Some fixes for search functionality:
    
    (a) Handle unparseable queries gracefully.
    (b) Index the demo explorations when they are loaded.
    (c) Remove the temporary event handler in exp_services.py.
    Complete the deprecation of 'widget'.
    Remove unused code. Use exploration summaries for all queries.
    Improve the error messages for invalid parameter changes.
    Respond to review comments, refactor snapshots objects in ExplorationHistory.js
    Additional modifications to address review comments
    Changes to state diff modal layout, add export exploration data by state
    and display state data in codemirror
    In a get_multiple_explorations_by_id query, do not return explorations that do not exist.
    Address Jacob's review comments. Rename 'beta' to 'public'. Reduce number of status choices in the gallery.
    Add a search field to the gallery.
    Lint fixes.
    Addressed code review comments, minor changes.
    Fixed bug where summaries of old exploration domain objects were created.
    Minor nits to address code review.
    Addressed code review, minor changes.
    Added test for exploration summaries. Small changes related to exploration summaries.
    Respond to review comments
    Further UI improvements to the state content and interaction editors. Change the default initial state name.
    Using exploration summary domain objects instead of summary models directly, addressed code review.
    Use more unicode strings in tests. COnsolidate common strings.
    Use exploration summaries to speed up galleries. Include MR job to generate initial summaries.
    In the learner view, load the entire exploration at the outset, and move the construction of the interactive widget HTML tags to the frontend.
    Remove a couple of unused methods.
    Rewrite user dashboard job to use the exploration snapshot class instead of the commit logs, in order to improve backward-compatibility with existing explorations.
    removed accidentally added indentation.
    Removed unused import.
    Addressed review comments and made the exp_jobs_test work with the new private exploration behavior.
    Make sure that private explorations aren't indexed.
    addressed minor review comment.
    Added tests to check that events are triggered in the right places.
    removed indexing logic from event_services, moved it to exp_services.
    addressed more review comments.
    Change highlight color for Edit button, and only show it on explorations the user can edit.
    addressed review at https://code.google.com/p/oppia/source/detail?r=82c09e74c61877a070bd3ea3cf314326ffd7bc43
    Add a 'most recent updates' section to the user dashboard.
    Consolidate the three galleries into a single public one.
    Remove unnecessary code in exploration export to python dict test
    resolved cyclic imports
    addressed more code review comments.
    added evens to be triggered when an exploration or its status changes.
    added test to check that explorations are removed from the index when deleted.
    Addressed review comments.
    added test for index_explorations_given_ids
    Add backend tests for JSON download
    Fixed some issues in get_multi and its tests, and removed tests for search functions that no longer exist.
    Modify the dashboard view to show private, beta and released explorations.
    Allow tests to log output to the console.
    Remove SLOW_TAGS option, migrate other options so that they can be used directly in test.sh, and refactor scripts/backend_tests.py for clarity.
    Minor lint fixes, mostly to the controller layer.
    addressed code review comments.
    added search to exp_domain layer
    Remove exception wrapping in objects.py. Use schemas to validate some objects. Add more tests for schema validation and normalization of objects using schemas.
    Remove cloning functionality from the backend.
    Add links to read-only explorations in the Contribute gallery.
    Revert os.sep changes to the keys used in the virtual file system.
    Fix some broken tests on Windows due to incorrect path separators.
    Tests for feedback list.
    Tests for feedback list.
    Add additional exploration properties.
    
    (The properties are: skill tags, blurb, author notes, objective and
    language code.)
    
    WARNING: This should not be merged into the main branch until the
    frontend is written, otherwise all publish will fail since there is
    nowhere to specify the (required) objective.
    Add a new gallery for playtesting.
    Address review comments.
    Fix error arising due to unnecessary conversion of unicode strings to Python's str type.
    Implement the frontend for the recent commits list.
    
    Still TODO:
    - audit the data returned to ensure nothing private is exposed
    - test on a production instance
    - reuse the functionality in the exploration version history page
    - reuse the functionality in the user profile page
    Implement the backend for recording and querying all commits to all explorations (together with filters and paging).
    Fix issue 145: files included with explorations are all version 1.
    Minor changes to commit allowing editors to download previous versions.
    Allow editors to download earlier versions of an exploration as zip files
    Address issue 110 by showing the state name in the state editor header. Try and remove some vertical whitespace, and make the state editor taller.
    Add additional error logging to rules.
    By default, hide beta explorations in both galleries.
    Remove the Django port of Oppia from the codebase.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Implement reverting functionality.
    Address some, but not all, of the failing Django tests.
    Change save() to commit(). Refactor model creation and update.
    Add a deploy script. Do not require building or testing in the startup script.
    Allow old versions of explorations to be linked to.
    Add warmup request handler. Remove a superfluous test.
    Remove the existing music note widget.
    Implement the necessary queries for the gallery and profile pages.
    Allow owners, collaborators and playtesters of explorations to be set.
    Use save() instead of put() for VersionedModels.
    Improve the way exploration creation and saving is handled in the backend. Require commit_cmds and commit_messages to be specified by default, where possible.
    Make the filesystem use the common VersionedModels.
    Implement generic versioned models that all storage classes can use.
    
    Also, for explorations, create a new version for every save action,
    rather than only after the exploration is published.
    Resolve a TODO regarding the use of both id and widget_id in a widget description.
    Allow add and delete state operations to be done as part of a larger commit.
    Represent a changelist as a sequence of commands and process this sequence server-side.
    Start writing a changelist handler on the server side. Move the delete_state() function to the exploration domain object so that it can be executed together with other changes.
    Perform strict validation on the demo explorations and on published explorations.
    Consolidate the validation for explorations in the exp_domain module.
    Remove the state model from the backend.
    
    Reasons:
    - It is confusing to keep track of two separate lifecycles for states
        and explorations.
    - The state name and state id were duplicate ways to identify a
        particular state.
    
    Side effects:
    - This change has resulted in an update to the YAML schema. The update is
        fully backward-compatible.
    - States are now identified in URLs and in analytics by their names
        rather than their ids.
    Fully migrate explorations to use the rights manager.
    Lint the codebase.
    Remove tar exploration.
    Add separate handler for exploration rights management. Rewire URL endpoints for the editor to avoid ambiguity. Add commit messages for adding and deleting states.
    Pass exploration changes through the same save flow as the state changes.
    Batch changes to the exploration and its states so that any set of changes to the exploration results in a single entry in the version history log.
    Add separate handler for exploration rights management. Rewire URL endpoints for the editor to avoid ambiguity. Add commit messages for adding and deleting states.
    Pass exploration changes through the same save flow as the state changes.
    Batch changes to the exploration and its states so that any set of changes to the exploration results in a single entry in the version history log.
    Add a dialogue requesting a commit message when saving to the state editor.
    Replace the link control in jwysiwyg with a safer one.
    Batch datastore get() and put() operations, and use local caches where possible. This halves the exploration loading time! (E.g., on the dev server, the binary search exploration used to take 18.3 s to load from scratch, and now it takes 9.8 s.)
    Create UpdateStateTests and add additional checks on incoming data to update_state itself.
    Add rights management for deleting explorations. Only an admin can delete published explorations; only the owner and admins can delete unpublished ones.
    Enable soft deletion of explorations.
    Make the default widget configurable and change it to TextInput.
    New states should have a default non-interactive content list with exactly one element of type 'text'.
    Make django tests pass.
    Move the tar exploration assets into a directory so that they can be served from the exploration filesystem. Allow rules to make use of a filesystem.
    Do not require the exploration id to be passed for every file system call.
    Add exploration assets to the downloaded zip file.
    Allow downloading of explorations as zip files.
    Do not retrieve all the states of an exploration unless it is absolutely necessary to do so.
    Evaluate parameters sequentially, rather than as an unordered set.
    Schema change: make param specs into key-value pairs so that exactly one param spec is defined for each param name.
    Complete the schema change that allows more flexible rule specifications (i.e. that allow Boolean combinators and classifying based on parameters).
    Re-allow the setting of exploration initialization parameters.
    Allow the running of individual tests and test classes. Allow the categorization of tests as slow so that they can be omitted using a command-line flag if desired.
    Reinstating memcache functionality. Clear more keys from memcache when versioning so that old copies of explorations aren't retrieved.
    Temporarily commenting out memcache. Move export_to_versionable_dict() method inside save_exploration() method.
    Modify widgets to use value generators for their customization args. This commit removes the widget customization functionality in the frontend, which will be added back in the next commit or two.
    Rename exploration.parameters to exploration.param_specs.
    Version the skin templates. Add default_skin attr to the exploration yaml files.
    Add version data to requests and responses. Add version check when saving an exploration.
    Add transactions around operations that update states in an exploration.
    Introduce server-side validation of exploration and state names. Standardize the characters that can be used in these names.
    Display version history in the editor UI. Add snapshot models to Django backend.
    Add explicit checks for deletion rights.
    Add versioning of explorations.
    Run frontend tests on Firefox too.
    Add functionality for exporting explorations to versionable dicts, to prepare for full versioning of explorations.
    Add test suite for django to automatically discover and run tests. Add platform switching to tests.
    Fix issue 30: add customization option for text on the Continue widget button.
    Change state mutator methods to not return anything.
    Fix some referential integrity problems.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    For persistent storage, store states as JSON blobs instead of rich objects. The rich object representation will be used for retrieving them from memcache.
    Remove dependence of exploration domain class on the exploration model class.
    Start moving repository methods to the services files so that domain objects can become plain python objects.
    Propagate the use of the terms 'rule_specs' and 'description' to the frontend.
    Move remaining state methods out to exp_services.
    Move domain-related files to their own folder in the repository.
    Add more tests to the exploration app.
    Moving the collection of unresolved answers for a state to the statistics module.
    Add a registry of widgets.
    Remove all dependencies on widget storage classes.
    Use module-level imports. Avoid aliasing module names where possible.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Add delete_all_explorations() method and use it in tests. Fix a bug in profile.py where self.user was used instead of self.user_id.
    Add an explicit init_state_id property to avoid unnecessary database lookups. Minor refactorings and rewordings.
    Move state deletion logic from the controllers into the domain layer.
    Separate the exploration model into a domain object class and a storage class.
    Where possible, use a user_id instead of an explicit User object.
    Add tests for more exploration services.
    Change states to state_ids for clarity.
    Move add_state() and delete() back to the model class. Add an add_editor() method to exploration.services.
    The exploration model should not know who the current user is.
    Finish moving stuff out of the exploration model class.
    Move more methods from the Exploration model class to the exploration services file.
    Remove direct dependencies from the controllers and other modules on the Exploration storage model so that it is easily swappable. The Exploration storage model is now imported only by the exploration services and test files.
    Remove dependence of the gallery controller on the exploration model. Create an exploration services file containing actions that involve explorations.
    Redesign the gallery page.
    
    Still TODO:
    (a) Fix integration test for language and category selection.
    (b) Check if paging is needed for the no-query case.
    (c) Implement carousel.
    Remove unused code. Use exploration summaries for all queries.
    Address Jacob's review comments. Rename 'beta' to 'public'. Reduce number of status choices in the gallery.
    Lint fixes.
    Fixed bug where summaries of old exploration domain objects were created.
    Addressed code review, only minor changes.
    Using exploration summary domain objects instead of summary models directly, addressed code review.
    Address review comments.
    Add a backend test for the private-viewable functionality.
    Add an option for private explorations to be viewed by anyone with the link.
    Added tests to check that events are triggered in the right places.
    removed indexing logic from event_services, moved it to exp_services.
    Only pas exploration ids to events.
    addressed more review comments.
    Add a 'most recent updates' section to the user dashboard.
    Added points for exploration(status) change events to be triggered.
    Modify the dashboard view to show private, beta and released explorations.
    addressed code review comments.
    added search to exp_domain layer
    Remove cloning functionality from the backend.
    Address review comments.
    Add links to read-only explorations in the Contribute gallery.
    Address review comments.
    Implement world-viewable exploration editor pages.
    Add a new gallery for playtesting.
    Allow moderators to unpublish explorations.
    By default, hide beta explorations in both galleries.
    Introduce the concept of beta explorations, and allow them to be publicized or unpublicized by moderators. Fix an error in the admin/moderator permissions.
    Grant moderators delete permissions for explorations; record roles when deleting.
    Move checks for whether the user is a super admin directly to the platform level.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Change save() to commit(). Refactor model creation and update.
    Refine rights management for moderators, admins and super admins.
    Improve the messaging for cloned explorations.
    Add a button for releasing ownership of an exploration to the community.
    Implement the necessary queries for the gallery and profile pages.
    Implement admin and moderator rights management.
    Allow owners, collaborators and playtesters of explorations to be set.
    Use save() instead of put() for VersionedModels.
    Improve the way exploration creation and saving is handled in the backend. Require commit_cmds and commit_messages to be specified by default, where possible.
    Tighten up the implementation of user settings and rights.
    Implement generic versioned models that all storage classes can use.
    
    Also, for explorations, create a new version for every save action,
    rather than only after the exploration is published.
    Add interstitial loading pages.
    Perform strict validation on the demo explorations and on published explorations.
    Remove the 'tentatively_public' state; this makes it harder to query for all public explorations.
    Fully migrate explorations to use the rights manager.
    Add a model for exploration rights.
    Split about page into two. Minor linting fixes.
    Lint fixes.
    Addressed code review, minor changes.
    Addressed code review, only minor changes.
    Using exploration summary domain objects instead of summary models directly, addressed code review.
    Use exploration summaries to speed up galleries. Include MR job to generate initial summaries.
    addressed more review comments.
    resolved cyclic imports
    Added a one-off test to index all explorations.
    Extend the event handler framework to accept listeners.
    Resolving merge problem.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Lint the codebase.
    Move jinja_utils to a separate module.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Implement pluggable skins.
    Automatically compute the parameters for rules based on the rule description.
    Add rules for NonnegativeInt.
    Add infrastructure and data for handling composite rules. This is a more flexible version of the current classifier framework and will eventually replace it.
    Remove normalizers; switch to data.objects.models.
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Renaming rule files to have YAML suffixes. Adding normalizers.
    Adding tests for classifiers and using PEP-8 for the Python files.
    Moving sample classifiers, explorations and widgets to a separate directory.
    Make multiple choice widget work.
    Adding some basic list rules.
    Adding the remaining two classifiers.
    Add validation for rules and interaction customizations.
    Consolidate retrieval of interaction registry, and make it happen during page load.
    Address review comments.
    Specify a display mode for each interaction and adjust the learner view accordingly.
    Complete the deprecation of 'widget'.
    Remove widget_domain, replacing it with two base classes for interactions and rich-text components.
    Migrate the backend widget registries and the controllers.
    Require the user to explicitly select the interaction for each state.
    Make signing in required if the user is logged in but has not chosen a username.
    Lint fixes.
    Add a 'last updated' time to the user dashboard recent updates table.
    Rewrite user dashboard job to use the exploration snapshot class instead of the commit logs, in order to improve backward-compatibility with existing explorations.
    Made tests in user_jobs_test specify a queue when counting tasks.
    Add a couple more tests for the user dashboard one-off job.
    Add a one-off job for populating initial subscription data.
    Address review comments -- in particular, add more tests.
    Add a 'most recent updates' section to the user dashboard.
    Add a 'last updated' time to the user dashboard recent updates table.
    Centralize the default limit for datastore queries.
    
    An earlier commit (c84460c11a0f) suggesting that inequality filters
    were not working properly was incorrect; the real culprit was that
    the default query limit was too low.
    Add checks that cron handler is actually being called by cron. Add check for passing tests in deploy script. Fix syntax error.
    Rewrite user dashboard job to use the exploration snapshot class instead of the commit logs, in order to improve backward-compatibility with existing explorations.
    added 'include_deleted' option to get_multi.
    Add a one-off job for populating initial subscription data.
    Address review comments -- in particular, add more tests.
    Add a 'most recent updates' section to the user dashboard.
    Lint fixes.
    Feature request for adding roles to explorations using usernames(issue 286), will put beautification of html in a different commit.
    
    Conflicts:
            core/templates/dev/head/editor/ExplorationEditor.js
    Feature request for adding roles to explorations using usernames(issue 286), will put beautification of html in a different commit.
    Add tests for the moderator page.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Allow owners, collaborators and playtesters of explorations to be set.
    Tighten up the implementation of user settings and rights.
    Minor security enhancements.
    Changing test string for better clarity
    Tests for lowercasing usernames
    Check username for uniqueness
    
    Includes code review changes from previous username commits
    Check username for uniqueness
    
    Includes code review changes from previous username commits
    Make signing in required if the user is logged in but has not chosen a username.
    Complete the deprecation of 'widget'.
    Migrate the backend widget registries and the controllers.
    Use more unicode strings in tests. COnsolidate common strings.
    Consolidate the three galleries into a single public one.
    Minor lint fixes, mostly to the controller layer.
    Add tests for the preceding commit.
    Update text on About and Gallery pages.
    Remove obsolete admin page config properties. Restructure config properties to use schemas.
    Refactor admin page to use new schema-based forms.
    Minor lint fixes, mostly to the controller layer.
    Add functionality for banning editors.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Refine rights management for moderators, admins and super admins.
    Fix YAML file upload flow, and make it a configurable property in the admin page.
    Implement admin and moderator rights management.
    Lint the codebase.
    Make computed config properties refreshable.
    Change the editor page warning message to an announcement and make it HTML.
    Add the concept of computed configuration properties. Fix some errors in the behavior of discardChanges() on the exploration editor page.
    Allow configuration properties to be edited in the admin UI.
    Add config property model and CSRF protection.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Lint the codebase.
    Add tests to ensure that object editor templates have the correct names and that object editors are defined for the types specified in the various rule descriptions.
    Finish cleaning up obj_services.py.
    Add MusicNote editor. Use the new editors in the rules frontend.
    Specialize the set editor; make it specify the type of item it contains.
    Add a normalized string editor template.
    Add a CoordTwoDim editor template. Improve the user experience for the parameter change editor.
    Simplify the computation of the rule description fragments.
    Replace the link control in jwysiwyg with a safer one.
    Finish the port to the new object editor framework, at least for the editors that already exist. Remove the old editors in templates/dev/head/components/.
    Introduce the concept of object editors that handle editing of ints, strings, etc. in a generic fashion. Port all object editors over to the new framework (except the ListEditor, which needs some more work).
    Separate exploration data files from other extensions.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move domain-related files to their own folder in the repository.
    Remove unneeded typed object models.
    Add rules for NonnegativeInt.
    Add infrastructure and data for handling composite rules. This is a more flexible version of the current classifier framework and will eventually replace it.
    Remove normalizers; switch to data.objects.models.
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Renaming rule files to have YAML suffixes. Adding normalizers.
    Adding tests for classifiers and using PEP-8 for the Python files.
    Moving sample classifiers, explorations and widgets to a separate directory.
    Make multiple choice widget work.
    Adding some basic list rules.
    Adding the remaining two classifiers.
    Implement server-side paging for the gallery.
    Address review comments -- in particular, add more tests.
    Add a 'most recent updates' section to the user dashboard.
    Route reader-submitted feedback to the new feedback system, and remove the frontend for the old feedback system.
    Minor code clean up for feedback tab.
    Address review comments.
    Add a list of recent feedback messages to the moderator page.
    Address several UI comments by Jacob.
    First round of tests for the feedback thread backend. Also consolidate some handlers.
    Build a UI for feedback threads and messages.
    Feedback thread UI clean up.
    Feedback thread barebone UI and data path.
    Split about page into two. Minor linting fixes.
    Prep for migration to stats jobs
    1. Stop writing to State Counter (old style) models
    2. Migrate all uses of current state counters over to aggregator
    3. Update aggregator to use both old and new models correctly
    4. Create one off job to deal with the overlap between these two systems
    Remove all traces of the old feedback models.
    Removing v2 of stats models to ease further development
    Tests for feedback list.
    Some fixes and code style improvements for profile page.
    Added exploration links to the profile page feedback list.
    Removing v2 of stats models to ease further development
    Tests for feedback list.
    Some fixes and code style improvements for profile page.
    Added exploration links to the profile page feedback list.
    Added exploration links to the profile page feedback list.
    Add propagation of reader id for reader feedback when feedback is given;
    fix bugs in getting existing reader feedback for profile.
    TODO: make feedback listing human readable.
    first pass of listing user's feedback on profile page.
    No tests yet, no actual display on page, but data should be getting returned.
    Merge of missing answer changes, fixing conflicts
    Add propagation of reader id for reader feedback when feedback is given;
    fix bugs in getting existing reader feedback for profile.
    TODO: make feedback listing human readable.
    first pass of listing user's feedback on profile page.
    No tests yet, no actual display on page, but data should be getting returned.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Remove the state model from the backend.
    
    Reasons:
    - It is confusing to keep track of two separate lifecycles for states
        and explorations.
    - The state name and state id were duplicate ways to identify a
        particular state.
    
    Side effects:
    - This change has resulted in an update to the YAML schema. The update is
        fully backward-compatible.
    - States are now identified in URLs and in analytics by their names
        rather than their ids.
    Lint the codebase.
    Allow reader feedback to be marked as fixed or will_not_fix.
    Show reader feedback in the state editor.
    Make the feedback model more flexible.
    Use get_multi() for retrieving state answer logs, to speed up loading.
    Use more readable names for various arguments.
    Basic visualization of state feedback from readers for editors
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Add model-switching mechanism.
    Remove unnecessary class attrs from domain objects.
    Add the handler name as an argument for accessing the stats rule answer log.
    Condense and clarify the get_state_stats_for_explorations() method.
    Add lots more tests for the statistics models.
    Major refactoring to make the statistics model more concrete and use domain concepts from the exploration and state models. Remove the feedback controller and replace it with a link to the bug tracker and groups page. Restrict the unresolved answers feature to be used only with the default rule of a state.
    Address review comments. Standardize calls to datetime service.
    Record the time a user last checked the dashboard.
    Address more review comments. In particular, fix an error where anonymous feedback threads were not being handled correctly in the dashboard display.
    Add a 'most recent updates' section to the user dashboard.
    Split about page into two. Minor linting fixes.
    Remove stats versioning selector; computed stats seem to be buggy.
    Minor linting to stats code.
    Bug fixes in StateCounterModel handling in stats_jobs
    Further cleanup of work on versioned statistics.
    Cleaning up based on code reviews
    Fixing test errors due to merge
    Response to code review of c4088eb7deba
    Fix a typo in the previous commit
    Add versioned statistics aggregation and allow different versions to be viewed from stats page
    Lint fixes.
    Remove statistics migration job.
    
    Now that the migration is complete, we don't want to accidentally run it again, so let's delete it.
    Don't process stats for deleted explorations
    Address more review comments.
    Addressed review comments
    Note: One test does fail.
    Prep for migration to stats jobs
    1. Stop writing to State Counter (old style) models
    2. Migrate all uses of current state counters over to aggregator
    3. Update aggregator to use both old and new models correctly
    4. Create one off job to deal with the overlap between these two systems
    addressed more review comments.
    resolved cyclic imports
    Minor edits to stats_jobs in preparation for the new migration scheme. The
    proposal is:
    
    (1) Push this version of the code in v1.2.8. The stats calculated are wrong
        (they only count the new instances) but nothing reads from them yet. It
        will give us a chance to see how the computation works in practice.
    (2) Immediately before the push, the computation is stopped.
        The next code push does four things simultaneously:
        (i)   switch all reads of StateCounterModel to read from the StatsAggregator
              output instead.
        (ii)  disable writes to StateCounterModel.
        (iii) add a migration job that iterates through all StateCounterModels and
              decrements them by the total number of new-style model instances;
              this number is obtained from the result of the last StatsAggregator
              computation. This job stores exploration ids that have been processed
              in a temporary datastore and repeats itself until every exploration
              has been processed (in case of unexpected failures). In a further
              code push we will delete the temporary datastore.
        (iv)  updates the StatsAggregation computation to compute the sum of the
              old and new models.
        Immediately after this code push, the one-off migration is run and, when
        it finishes, the StatsAggregation computation is restarted. The data
        displayed in the UI will be wrong until these two processes complete; based
        on test runs, this will probably be for less than an hour.
    
    If anything goes wrong in the one-off migration we should roll back the push.
    The StatsAggregation job will have run several times already so it is unlikely
    to fail. Needless to say, all this should be run on a test instance first.
    Remove one-off stats migration job after discussion with Stephanie.
    Fix the handling of non-ascii characters in the migration job.
    Add a test for the one-off stats migration job.
    Fix a couple of small bugs in the stats jobs: handle deleted explorations properly, and determine the exploration id and state name correctly from the model id.
    Do not require duplication of realtime datastore classes.
    Create an admin dashboard for continuous computations.
    Migrate the existing StatsPageJobManager to use the new continuous computations framework.
    Address remaining review comments.
    First part of code review: mostly formatting/pythonic changes
    Don't fake missing data & use versions to distinguish
    Fix bug in the tracking of end exploration events
    
    Don't use 'is' for string equals, use '=='
    line length and formatting of stats_jobs
    Translate state counter events into event log entries
    lots of little linter-type fixes
    Changes from code reviews of several commits
    Refactoring event log models to remove hierarchy
    Creating a job calculating the number of completions and total visits
    Add functionality for regenerating the search index.
    Fix migration job. Fix bug with state parameter changes display in state editor UI.
    Revert erroneous gallery capitalization changes. Add job for conversion of InteractiveMap distances.
    Make all loads of the gallery use the search functionality. Add basic ranking.
    Complete the deprecation of 'widget'.
    Improve the error messages for invalid parameter changes.
    Add a job for checking exploration validity. This will be used for ensuring that no currently-existing exploration uses an invalid parameter name.
    Add list of invalid parameter names (not used in client yet). Make parameter discovery job omit straightforward usages.
    Add pow(), log() and abs() functions. Add a job for listing expressions in existing explorations.
    Lint fixes.
    Small change of ExpSummariesCreationOneOffJobTest to address code review.
    Fixed bug in ExpSummariesCreationOneOffJob which crashed when trying to create summary for deleted explorations. Also modified tests to catch this.
    Addressed code review comments, minor changes.
    Converted ExplorationSummaryCreation job from continuous to one-off. Improved some tests.
    Tried to convert ExpSummariesAggregator to oneoff job but get errors in core.jobs_test.
    Fixed bug where summaries of old exploration domain objects were created.
    Addressed code review, minor changes.
    Addressed code review, only minor changes.
    Using exploration summary domain objects instead of summary models directly, addressed code review.
    Use exploration summaries to speed up galleries. Include MR job to generate initial summaries.
    addressed more review comments.
    resolved cyclic imports
    Added a one-off test to index all explorations.
    Extend the event handler framework to accept listeners.
    Resolving merge problem.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Lint the codebase.
    Move jinja_utils to a separate module.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Implement pluggable skins.
    Automatically compute the parameters for rules based on the rule description.
    Add rules for NonnegativeInt.
    Add infrastructure and data for handling composite rules. This is a more flexible version of the current classifier framework and will eventually replace it.
    Remove normalizers; switch to data.objects.models.
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Renaming rule files to have YAML suffixes. Adding normalizers.
    Adding tests for classifiers and using PEP-8 for the Python files.
    Moving sample classifiers, explorations and widgets to a separate directory.
    Make multiple choice widget work.
    Adding some basic list rules.
    Adding the remaining two classifiers.
    Refactor code that uses interactions and RTE components to distinguish properly between customization_arg_specs and customization_args.
    Complete the deprecation of 'widget'.
    Remove widget_domain, replacing it with two base classes for interactions and rich-text components.
    Address review comments.
    Make it possible to view player skins in the editor view.
    Move skin templates into directives. This is in preparation for allowing preview mode in the editor view -- we can then load all of these templates in the editor view at the outset and invoke them with HTML tags when necessary.
    Add a 'most recent updates' section to the user dashboard.
    Add a skin chooser to the frontend editor UI.
    Add a registry for skins.
    Move each skin to its own directory. Load only the HTML template, and let that template load everything else.
    Make signing in required if the user is logged in but has not chosen a username.
    Use more unicode strings in tests. COnsolidate common strings.
    Address review comments -- in particular, add more tests.
    Add a 'most recent updates' section to the user dashboard.
    Lint fixes.
    Break the state transition handler into multiple handlers, similar to what is done in editor preview mode.
    Prep for migration to stats jobs
    1. Stop writing to State Counter (old style) models
    2. Migrate all uses of current state counters over to aggregator
    3. Update aggregator to use both old and new models correctly
    4. Create one off job to deal with the overlap between these two systems
    Migrate existing event handlers to the new framework.
    Move event handler to a separate file, since it is no longer handling analytics-only events.
    Remove all traces of the old feedback models.
    Feedback list test updates and typo fixes.
    Tests for feedback list.
    Feedback list test updates and typo fixes.
    Tests for feedback list.
    Merge of missing answer changes, fixing conflicts
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Improve the way exploration creation and saving is handled in the backend. Require commit_cmds and commit_messages to be specified by default, where possible.
    Remove the state model from the backend.
    
    Reasons:
    - It is confusing to keep track of two separate lifecycles for states
        and explorations.
    - The state name and state id were duplicate ways to identify a
        particular state.
    
    Side effects:
    - This change has resulted in an update to the YAML schema. The update is
        fully backward-compatible.
    - States are now identified in URLs and in analytics by their names
        rather than their ids.
    Batch datastore get() and put() operations, and use local caches where possible. This halves the exploration loading time! (E.g., on the dev server, the binary search exploration used to take 18.3 s to load from scratch, and now it takes 9.8 s.)
    Add versioning of explorations.
    Add test suite for django to automatically discover and run tests. Add platform switching to tests.
    Change state mutator methods to not return anything.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    For persistent storage, store states as JSON blobs instead of rich objects. The rich object representation will be used for retrieving them from memcache.
    Remove dependence of exploration domain class on the exploration model class.
    Start moving repository methods to the services files so that domain objects can become plain python objects.
    Add model-switching mechanism.
    Add the handler name as an argument for accessing the stats rule answer log.
    Add lots more tests for the statistics models.
    Major refactoring to make the statistics model more concrete and use domain concepts from the exploration and state models. Remove the feedback controller and replace it with a link to the bug tracker and groups page. Restrict the unresolved answers feature to be used only with the default rule of a state.
    Merge of missing answer changes, fixing conflicts
    In the python files for interactive widgets, the obj_type of the reader's answer should be represented as a string.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Create is_generic for rules and set it for existing rule types
    Lint the codebase.
    Specialize the set editor; make it specify the type of item it contains.
    Display rules that are confusing more prominently. Fix an XSS bug.
    Move the tar exploration assets into a directory so that they can be served from the exploration filesystem. Allow rules to make use of a filesystem.
    WIP: Procedurally created World Cities exploration.
    Schema change: make param specs into key-value pairs so that exactly one param spec is defined for each param name.
    Complete the schema change that allows more flexible rule specifications (i.e. that allow Boolean combinators and classifying based on parameters).
    Complete the implementation of the widget customization param editors using the new value generators.
    Separate exploration data files from other extensions.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move answer classification methods to the exp_services module.
    Move domain-related files to their own folder in the repository.
    Remove unneeded parameter property class. Clarify docstring for rule objects.
    Automatically compute the parameters for rules based on the rule description.
    Complete the transition to first-class Rule objects. Remove the classifier model and all calls to it.
    Add tests for basic behaviour of rules. Clean up the Rule class.
    Add infrastructure and data for handling composite rules. This is a more flexible version of the current classifier framework and will eventually replace it.
    Remove exception wrapping in objects.py. Use schemas to validate some objects. Add more tests for schema validation and normalization of objects using schemas.
    Merge of missing answer changes, fixing conflicts
    In the python files for interactive widgets, the obj_type of the reader's answer should be represented as a string.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Add warmup request handler. Remove a superfluous test.
    Complete the schema change that allows more flexible rule specifications (i.e. that allow Boolean combinators and classifying based on parameters).
    Allow the running of individual tests and test classes. Allow the categorization of tests as slow so that they can be omitted using a command-line flag if desired.
    Separate exploration data files from other extensions.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move domain-related files to their own folder in the repository.
    Automatically compute the parameters for rules based on the rule description.
    Complete the transition to first-class Rule objects. Remove the classifier model and all calls to it.
    Add tests for basic behaviour of rules. Clean up the Rule class.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Consolidate the validation for explorations in the exp_domain module.
    Modify the state parameter change editor to use the same value generators that are used in the widget parameter editor.
    Move the yaml files to use value generators for state parameter changes, and ensure that the reader view works. Note that this commit breaks the editor view; this will be fixed in a future commit. None of these commits will be pushed to master until we have a working build.
    Allow the running of individual tests and test classes. Allow the categorization of tests as slow so that they can be omitted using a command-line flag if desired.
    Remove parameter storage model, and use only its domain class.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Add model-switching mechanism.
    Change the name of the models directory from 'apps' to 'storage'.
    Use module-level imports. Avoid aliasing module names where possible.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Moving models/ to apps/ in preparation for the migration to django non-rel
    Add tests to the exploration, parameter and classifier models, bringing them to nearly 100% coverage.
    Combining the Parameter and MultiParameter classes into a single Parameter class.
    Updating the state parameters to use the MultiParameter model. For now they are all of type UnicodeString.
    Add a parameter change model.
    changed exploration parameters model to be more similar to widget param model for consistency and ease of use;
    added almost all propagation of adding new parameters, except it breaks exploration a bit so commented out.
    Minor changes to widget and parameter model code.
    Lint most python files
    Restructure tests, so that each module has its own test file.
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Renaming rule files to have YAML suffixes. Adding normalizers.
    Adding tests for classifiers and using PEP-8 for the Python files.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Lint the codebase.
    Reinstate the noninteractive image widget. This commit provides a filepicker; the upload feature will be added in a future commit.
    Make the video and hints widgets work fully end-to-end. Rewrite the tar exploration to take advantage of the new hints widget.
    Add directives for the oppia-noninteractive tags so that they can be shown in the editor view. Make the GuiEditor show a single RTE for non-interactive content.
    Add directives for the oppia-noninteractive tags so that they can be shown in the editor view. Make the GuiEditor show a single RTE for non-interactive content.
    Add fairly strict HTML sanitization for rich-text-editor content.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Moving models/ to apps/ in preparation for the migration to django non-rel
    Add missing files from previous commit
    Moving controllers to a separate folder
    Initial commit.
    Lint fixes.
    Addressed review comments
    Note: One test does fail.
    Prep for migration to stats jobs
    1. Stop writing to State Counter (old style) models
    2. Migrate all uses of current state counters over to aggregator
    3. Update aggregator to use both old and new models correctly
    4. Create one off job to deal with the overlap between these two systems
    Use a separate task queue for handling event post-processing.
    removed indexing logic from event_services, moved it to exp_services.
    addressed more review comments.
    Only pas exploration ids to events.
    addressed more review comments.
    addressed review at https://code.google.com/p/oppia/source/detail?r=82c09e74c61877a070bd3ea3cf314326ffd7bc43
    resolved cyclic imports
    addressed more code review comments.
    added evens to be triggered when an exploration or its status changes.
    Migrate the existing StatsPageJobManager to use the new continuous computations framework.
    Address review comments. In particular, wrap the various state changes in transactions.
    Trivial commit fixing some lint issues, but mostly meant to group the files related to continuous computations in a set so that review comments can be left on them.
    Remove the listener registration from event handlers and replace it with a more explicit ContinuousComputation dispatcher registry that is generated on event dequeue. In the earlier system, listeners were dynamically added to event handlers using a class attribute, and that made it hard to reason about the lifecycle and to avoid duplicate registrations.
    Implement a preliminary framework for continuously-running computations.
    Migrate existing event handlers to the new framework.
    Extend the event handler framework to accept listeners.
    Move event handler to a separate file, since it is no longer handling analytics-only events.
    Allow dependencies to be specified for the editor page itself, in addition to the widgets it contains.
    Minor lint fixes, mostly to the controller layer.
    Address review comments.
    Add a system for handling dependencies of widgets that include additional angular modules.
    Address review comments.
    Add a simple framework for handling widget dependencies.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Lint the codebase.
    Move jinja_utils to a separate module.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Implement pluggable skins.
    Automatically compute the parameters for rules based on the rule description.
    Add rules for NonnegativeInt.
    Add infrastructure and data for handling composite rules. This is a more flexible version of the current classifier framework and will eventually replace it.
    Remove normalizers; switch to data.objects.models.
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Renaming rule files to have YAML suffixes. Adding normalizers.
    Adding tests for classifiers and using PEP-8 for the Python files.
    Moving sample classifiers, explorations and widgets to a separate directory.
    Make multiple choice widget work.
    Adding some basic list rules.
    Adding the remaining two classifiers.
    Use a separate task queue for handling event post-processing.
    Remove the listener registration from event handlers and replace it with a more explicit ContinuousComputation dispatcher registry that is generated on event dequeue. In the earlier system, listeners were dynamically added to event handlers using a class attribute, and that made it hard to reason about the lifecycle and to avoid duplicate registrations.
    Implement a preliminary framework for continuously-running computations.
    Extend the event handler framework to accept listeners.
    Migrate the backend widget registries and the controllers.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Replace the link control in jwysiwyg with a safer one.
    Separate the widget registry from the widget domain file so that it can be used by the html cleaner without circular dependencies.
    Infer allowed noninteractive widget tags directly from the widget definitions.
    Reinstate the noninteractive image widget. This commit provides a filepicker; the upload feature will be added in a future commit.
    Make the video and hints widgets work fully end-to-end. Rewrite the tar exploration to take advantage of the new hints widget.
    Update exploration data files. Two of these need further work: the tar exploration, which should use the new noninteractive hints widget, and the binary search exploration, which includes an image.
    Complete end-to-end display of noninteractive video and hints widgets. Remove unneeded code.
    Add directives for the oppia-noninteractive tags so that they can be shown in the editor view. Make the GuiEditor show a single RTE for non-interactive content.
    Add directives for the oppia-noninteractive tags so that they can be shown in the editor view. Make the GuiEditor show a single RTE for non-interactive content.
    Remove unsupported tags in RTE.
    Add fairly strict HTML sanitization for rich-text-editor content.
    Fix error in search function which caused unnecessary errors to be logged.
    Add functionality for regenerating the search index.
    Fix gallery search handler to return exactly as many explorations as requested, where possible.
    Split about page into two. Minor linting fixes.
    Require the user to explicitly select the interaction for each state.
    Make all loads of the gallery use the search functionality. Add basic ranking.
    Remove the 'widget_sticky' setting.
    Add validation for the new EndConversation interaction, and hide its rule display.
    Redesign the gallery page.
    
    Still TODO:
    (a) Fix integration test for language and category selection.
    (b) Check if paging is needed for the no-query case.
    (c) Implement carousel.
    Add language codes to the search query.
    Implement server-side paging for the gallery.
    Some fixes for search functionality:
    
    (a) Handle unparseable queries gracefully.
    (b) Index the demo explorations when they are loaded.
    (c) Remove the temporary event handler in exp_services.py.
    Complete the deprecation of 'widget'.
    Remove unused code. Use exploration summaries for all queries.
    Fix an error in the encoding of filenames when an exploration is downloaded as a zip file.
    Respond to review comments, refactor snapshots objects in ExplorationHistory.js
    Additional modifications to address review comments
    Changes to state diff modal layout, add export exploration data by state
    and display state data in codemirror
    In a get_multiple_explorations_by_id query, do not return explorations that do not exist.
    Do not attempt to index deleted explorations.
    Address Jacob's review comments. Rename 'beta' to 'public'. Reduce number of status choices in the gallery.
    Add a search field to the gallery.
    Addressed code review comments, minor changes.
    Break the state transition handler into multiple handlers, similar to what is done in editor preview mode.
    Fixed bug where summaries of old exploration domain objects were created.
    Addressed code review, minor changes.
    Added test for exploration summaries. Small changes related to exploration summaries.
    Respond to review comments
    Addressed code review, only minor changes.
    Using exploration summary domain objects instead of summary models directly, addressed code review.
    Complete the 'change initial state name' feature.
    Use exploration summaries to speed up galleries. Include MR job to generate initial summaries.
    Remove a couple of unused methods.
    Rewrite user dashboard job to use the exploration snapshot class instead of the commit logs, in order to improve backward-compatibility with existing explorations.
    Addressed review comments and made the exp_jobs_test work with the new private exploration behavior.
    Make sure that private explorations aren't indexed.
    removed indexing logic from event_services, moved it to exp_services.
    addressed more review comments.
    Change highlight color for Edit button, and only show it on explorations the user can edit.
    Only pas exploration ids to events.
    addressed more review comments.
    addressed review at https://code.google.com/p/oppia/source/detail?r=82c09e74c61877a070bd3ea3cf314326ffd7bc43
    Add a 'most recent updates' section to the user dashboard.
    Show private explorations in gallery. Move the view/edit link to a button in the top-right of each gallery tile.
    Consolidate the three galleries into a single public one.
    Verify that an old version of an exploration is still valid before reverting to it.
    Added points for exploration(status) change events to be triggered.
    addressed more code review comments.
    added evens to be triggered when an exploration or its status changes.
    Addressed review comments.
    Speed up the contribute gallery by not making so many individual calls to rights_manager.can_edit().
    added test for index_explorations_given_ids
    Address additional comments
    Fixed some issues in get_multi and its tests, and removed tests for search functions that no longer exist.
    Address review comments
    Allow exploration to be downloaded as JSON object
    Modify the dashboard view to show private, beta and released explorations.
    implement cron jobs to update/rebuild the search index.
    added search to exp_domain layer
    Add a skin chooser to the frontend editor UI.
    Remove cloning functionality from the backend.
    Add links to read-only explorations in the Contribute gallery.
    Add more detail to the recent changes page.
    Represent the playtest gallery as a flat list. Remove subtitle from the learn gallery.
    Tests for feedback list.
    Some fixes and code style improvements for profile page.
    Added exploration links to the profile page feedback list.
    Tests for feedback list.
    Some fixes and code style improvements for profile page.
    Added exploration links to the profile page feedback list.
    Added exploration links to the profile page feedback list.
    Add additional exploration properties.
    
    (The properties are: skill tags, blurb, author notes, objective and
    language code.)
    
    WARNING: This should not be merged into the main branch until the
    frontend is written, otherwise all publish will fail since there is
    nowhere to specify the (required) objective.
    Add a new gallery for playtesting.
    Address review comments.
    Implement the frontend for the recent commits list.
    
    Still TODO:
    - audit the data returned to ensure nothing private is exposed
    - test on a production instance
    - reuse the functionality in the exploration version history page
    - reuse the functionality in the user profile page
    Implement the backend for recording and querying all commits to all explorations (together with filters and paging).
    Add tests for the preceding commit.
    Fix issue 145: files included with explorations are all version 1.
    Allow editors to download earlier versions of an exploration as zip files
    By default, hide beta explorations in both galleries.
    Add functionality for banning editors.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Implement reverting functionality.
    Load the version history lazily. Generate automated summaries for each changelist in the backend.
    Change save() to commit(). Refactor model creation and update.
    Allow the splash page exploration version to be set as a config property.
    Get rid of property_dict.
    Fix a bug where updates to the exploration parameter specs were not sent to the backend.
    Fix YAML file upload flow, and make it a configurable property in the admin page.
    Fail more gently on user-facing queries. Validate new explorations prior to creating their rights object.
    Allow old versions of explorations to be linked to.
    Add syntax highlighting and line numbers to the Code REPL widget
    Add more controller tests.
    Implement the necessary queries for the gallery and profile pages.
    Implement admin and moderator rights management.
    Allow owners, collaborators and playtesters of explorations to be set.
    Use save() instead of put() for VersionedModels.
    Various small UI fixes.
    Improve the way exploration creation and saving is handled in the backend. Require commit_cmds and commit_messages to be specified by default, where possible.
    Make the filesystem use the common VersionedModels.
    Add versioning for config model. Fix editor prerequisites JS tests.
    Tighten up the implementation of user settings and rights.
    Implement generic versioned models that all storage classes can use.
    
    Also, for explorations, create a new version for every save action,
    rather than only after the exploration is published.
    Resolve a TODO regarding the use of both id and widget_id in a widget description.
    Allow add and delete state operations to be done as part of a larger commit.
    Represent a changelist as a sequence of commands and process this sequence server-side.
    Start writing a changelist handler on the server side. Move the delete_state() function to the exploration domain object so that it can be executed together with other changes.
    Perform strict validation on the demo explorations and on published explorations.
    Consolidate the validation for explorations in the exp_domain module.
    Remove the state model from the backend.
    
    Reasons:
    - It is confusing to keep track of two separate lifecycles for states
        and explorations.
    - The state name and state id were duplicate ways to identify a
        particular state.
    
    Side effects:
    - This change has resulted in an update to the YAML schema. The update is
        fully backward-compatible.
    - States are now identified in URLs and in analytics by their names
        rather than their ids.
    Fully migrate explorations to use the rights manager.
    Use actual user_ids instead of email addresses. Require the user to pick a valid username that would appear in the commit logs.
    Lint the codebase.
    Add separate handler for exploration rights management. Rewire URL endpoints for the editor to avoid ambiguity. Add commit messages for adding and deleting states.
    Pass exploration changes through the same save flow as the state changes.
    Batch changes to the exploration and its states so that any set of changes to the exploration results in a single entry in the version history log.
    Add separate handler for exploration rights management. Rewire URL endpoints for the editor to avoid ambiguity. Add commit messages for adding and deleting states.
    Pass exploration changes through the same save flow as the state changes.
    Batch changes to the exploration and its states so that any set of changes to the exploration results in a single entry in the version history log.
    Add a dialogue requesting a commit message when saving to the state editor.
    Finish cleaning up obj_services.py.
    Replace the link control in jwysiwyg with a safer one.
    Separate the widget registry from the widget domain file so that it can be used by the html cleaner without circular dependencies.
    Display rules that are confusing more prominently. Fix an XSS bug.
    Move the logic for showing usernames in version history into the controller layer.
    Use username for version history display over email address
    Batch datastore get() and put() operations, and use local caches where possible. This halves the exploration loading time! (E.g., on the dev server, the binary search exploration used to take 18.3 s to load from scratch, and now it takes 9.8 s.)
    Create UpdateStateTests and add additional checks on incoming data to update_state itself.
    Rename frontend state editor fields to match those of the backend. In particular, change interactive_widget to widget_id, interactive_params to widget_customization_args, interactive_rulesets to widget_handlers and sticky_interactive_widget to widget_sticky.
    Enable soft deletion of explorations.
    Move delete_all_* methods to the test file, since they should only be used there.
    Fix bug where rule feedback was being treated as a string rather than a list
    New states should have a default non-interactive content list with exactly one element of type 'text'.
    Remove more unnecessary code.
    Make the video and hints widgets work fully end-to-end. Rewrite the tar exploration to take advantage of the new hints widget.
    Add fairly strict HTML sanitization for rich-text-editor content.
    Move the tar exploration assets into a directory so that they can be served from the exploration filesystem. Allow rules to make use of a filesystem.
    Do not require the exploration id to be passed for every file system call.
    Load demo explorations from folders instead of from zips. With a zip it is not possible to see the diff in the source code repo.
    Refactor zip file loading so that the main loader uses only the content of the zip file and not its location.
    Allow uploading of demo explorations with assets, and allow copying of exploration assets.
    Add exploration assets to the downloaded zip file.
    Remove the image storage model. Move image file uploading to use the file system storage model.
    Add versioning capability to the exploration assets file system.
    Allow downloading of explorations as zip files.
    Do not retrieve all the states of an exploration unless it is absolutely necessary to do so.
    Evaluate parameters sequentially, rather than as an unordered set.
    Improve the validation tests for exploration yaml files.
    Schema change: make param specs into key-value pairs so that exactly one param spec is defined for each param name.
    Reloading all explorations is taking too long, so allow reloading of individual explorations in the admin page.
    Complete the schema change that allows more flexible rule specifications (i.e. that allow Boolean combinators and classifying based on parameters).
    Re-allow the setting of exploration initialization parameters.
    Move the yaml files to use value generators for state parameter changes, and ensure that the reader view works. Note that this commit breaks the editor view; this will be fixed in a future commit. None of these commits will be pushed to master until we have a working build.
    Add a parse_with_jinja flag to the 'copier' value generator.
    Fix issue 51: parse the feedback string with Jinja, and only then escape it.
    Fix error where exploration parameters were not updating when new ones were added in the state parameter editor.
    Reinstating memcache functionality. Clear more keys from memcache when versioning so that old copies of explorations aren't retrieved.
    Temporarily commenting out memcache. Move export_to_versionable_dict() method inside save_exploration() method.
    Write a full end-to-end cycle for customizing widget instances.
    Modify widgets to use value generators for their customization args. This commit removes the widget customization functionality in the frontend, which will be added back in the next commit or two.
    Rename exploration.parameters to exploration.param_specs.
    Introduce a ParamSpec class for maintaining parameter type information at the exploration level. TODOs: remove the ability in the frontend to set values at the exploration level, display the parameter types in the exploration metadata page, and rename exploration.parameters to exploration.param_specs in the backend.
    Fix an error where parameters to the update_state() method were in the wrong order.
    Fix the remaining broken Django tests.
    Move state models to the exploration storage model file, since they really belong together.
    Add version data to requests and responses. Add version check when saving an exploration.
    Add transactions around operations that update states in an exploration.
    Add parent to states in GAE so that it is possible to do transactional updates on the states of an exploration.
    Turn get_or_create_param() into a get-only method that does not affect the repository.
    When an exploration is deleted, delete its snapshots too. Otherwise when the demo explorations are reloaded (say) then the version snapshotting will fail because the current version already exists. We should change this behavior later to mark explorations as deleted instead of actually deleting them (so that they can be restored from backup), but this will do for now.
    Display version history in the editor UI. Add snapshot models to Django backend.
    Add explicit checks for deletion rights.
    Add versioning of explorations.
    Move perf counters out of the domain layer.
    Add functionality for exporting explorations to versionable dicts, to prepare for full versioning of explorations.
    Change state mutator methods to not return anything.
    Simplify create_from_yaml() method.
    Merge modify_using_dict() method into create_from_yaml().
    Allow TextInput to be either an input or a textarea, depending on the number of rows specified. Remove some erroneous parameter code.
    Move jinja_utils to a separate module.
    Fix some referential integrity problems.
    Remove parameter storage model, and use only its domain class.
    Add memcache performance counters.
    Allow explorations to be memcached too.
    Modify save_state to take the exploration_id as well.
    Add memcache support.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    For persistent storage, store states as JSON blobs instead of rich objects. The rich object representation will be used for retrieving them from memcache.
    Save the widget before assigning it to state.widget
    Move create_new to the section of the exp_services file that contains repository methods, because it is one.
    Remove dependence of exploration domain class on the exploration model class.
    Start moving repository methods to the services files so that domain objects can become plain python objects.
    Implement pluggable skins.
    Fix things missed during merge.
    Add model-switching mechanism.
    Major refactoring to make the statistics model more concrete and use domain concepts from the exploration and state models. Remove the feedback controller and replace it with a link to the bug tracker and groups page. Restrict the unresolved answers feature to be used only with the default rule of a state.
    Remove unneeded admin functionality.
    Move functionality from the reader controller to the exploration domain layer.
    Move Karma error message nearer the location at which an error is likely to occur. Move more controller methods into the domain layer.
    Move more logic into the domain layer. Fix some select2 error messages in the frontend that occur due to imported libraries being in the wrong order.
    Propagate the use of the terms 'rule_specs' and 'description' to the frontend.
    Add a parameter domain module.
    Move remaining state methods out to exp_services.
    Move answer classification methods to the exp_services module.
    Change the name of the models directory from 'apps' to 'storage'.
    Move domain-related files to their own folder in the repository.
    Moving the collection of unresolved answers for a state to the statistics module.
    Remove some duplication in stats_services. Rename state.Rule to state.RuleSpec to distinguish it from the rules in apps/rule.
    Complete the transition to first-class Rule objects. Remove the classifier model and all calls to it.
    Rename widget models file to widget_domain.py to reflect its independence of the storage layer.
    Moving some domain methods into the base widget class.
    Add a registry of widgets.
    Remove all dependencies on widget storage classes.
    Use module-level imports. Avoid aliasing module names where possible.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Add delete_all_explorations() method and use it in tests. Fix a bug in profile.py where self.user was used instead of self.user_id.
    Clean up export_to_yaml().
    Add an explicit init_state_id property to avoid unnecessary database lookups. Minor refactorings and rewordings.
    Store a payload attribute on handlers which use a payload. Move get_state_by_id() into the domain object.
    Separate the exploration model into a domain object class and a storage class.
    Minor renaming. Move get_all() method to base model class.
    Where possible, use a user_id instead of an explicit User object.
    Refactoring basic state operations.
    Add tests for more exploration services.
    Change states to state_ids for clarity.
    Move add_state() and delete() back to the model class. Add an add_editor() method to exploration.services.
    The exploration model should not know who the current user is.
    Finish moving stuff out of the exploration model class.
    Move more methods from the Exploration model class to the exploration services file.
    Remove direct dependencies from the controllers and other modules on the Exploration storage model so that it is easily swappable. The Exploration storage model is now imported only by the exploration services and test files.
    Add the current user as an attribute of each request handler. Simplify the logic for the gallery controller.
    Remove dependence of the gallery controller on the exploration model. Create an exploration services file containing actions that involve explorations.
    Consolidate retrieval of interaction registry, and make it happen during page load.
    Address review comments.
    Specify a display mode for each interaction and adjust the learner view accordingly.
    Complete the deprecation of 'widget'.
    Remove widget_domain, replacing it with two base classes for interactions and rich-text components.
    Migrate the backend widget registries and the controllers.
    First half of the work needed to rename widgets to interactions/rich-text-components.
    Protractor tests: add tests for non-interactive widgets and the rich-text editor. In the process refactor the test code for widgets, objects and forms.
    Allow each widget to have its own integration test utilities.
    Fix highlighting in the conversation skin view. Fix broken test.
    Fix lots of small bugs.
    
    (1) In the MusicNotesInput widget, rename 'play desired sequence' to 'play target sequence'.
    (2) In NumericInput view for the learner's input, do not show integers as floats.
    (3) In the TextInput widget, improve the description of the 'rows' field.
    (4) Rename Code REPL widget to 'Code input'.
    (5) In the MusicNotesInput widget, change the 'Add Note' button to make it clear what type of note is being referred to (a music note, not a comment).
    (6) Rename 'Tutorial' to 'Walkthrough' (the former sounds like 'manual').
    (7) Disable 'look inside' functionality in preview mode.
    (8) Add Amy's name to credits.
    (9) Show edit buttons in gallery for moderators (issue 373).
    (10) Fix broken loading when the history tab in the exploration editor is shown on initial load.
    (11) Fix the broken revert modal in history tab (the link to try out the old version did not work).
    (12) Move the 'create' button nearer to the 'add new state' input field.
    (13) Move the learner answer div styling to a common location in the conversation skin view.
    (14) Allow states defined in rules to use '.' (issue 166).
    (15) Add moderator page to profile menu (issue 374).
    In the learner view, load the entire exploration at the outset, and move the construction of the interactive widget HTML tags to the frontend.
    addressed review comments.
    Ignore hidden files when testing widget validity.
    Remove autofocus from interactive widgets since this is distracting in the editor view. Add disabled options to the unicode editor and add a placeholder customization option to the ui_config.
    Start migrating post_normalizers to validators, and add a few more custom error messages.
    Amend widget customization args specification to use a schema with type 'custom', rather than a separate 'custom_editor' field.
    Refactor the state interactive widget frontend code.
    
    In particular:
    
    1) Move the tag construction for the widget preview to the frontend.
    2) Introduce new state property services for the widget attributes.
    Tidy up naming and clarify the code.
    Add tests for the new widget customization args.
    Make the new widget specifications work in the frontend editor and reader views.
    Migrate widget configuration parameters to a simpler format that is more consistent with upcoming refactorings.
    
    NOTE: this change passes backend tests but the frontend does not work. This will be handled in a separate commit.
    Move widget responses to the client side, to minimize unnecessary RPCs.
    Remove the column setting for text inputs, because it does not work with responsive layout.
    Add a few frontend tests for the MusicNotesInput widget.
    Add tests for the preceding commit.
    In the python files for interactive widgets, the obj_type of the reader's answer should be represented as a string.
    Move interactive widget customization into the inline editor for the widget.
    Move JS code for individual widgets from its temporary home in templates/dev/head/components to the extensions/widgets directory.
    Convert interactive widgets to Angular directives.
    
    This has the following advantages:
    (a) speed: the interactive widgets now load faster because there is no
    need for a second request to the server to populate the iframe.
    (b) no more monkeying around with the parent container to handle iframe
    height changes
    (c) less boilerplate is needed for each individual widget
    (d) there is no need to reload JS libraries separately for the widget,
    since these libraries will have already been included in the container page.
    Remove scope.apply error in the reader view.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Add warmup request handler. Remove a superfluous test.
    Remove the existing music note widget.
    Fix a couple of bugs that caused widgets not to load properly. Fix another bug where the Publish button was shown for an exploration that was already published.
    Separate the widget registry from the widget domain file so that it can be used by the html cleaner without circular dependencies.
    Split the interactive widget frontend variables into variables that define the general widget, and variables that customize it, to more clearly match the way they are modelled in the backend.
    Display widget parameter descriptions instead of the raw parameter names.
    Complete the implementation of the widget customization param editors using the new value generators.
    Remove value generators that are not currently in use. Write code that implements the restricted generators.
    Ensure that the correct widget parameters are being sent to the frontend.
    Modify widgets to use value generators for their customization args. This commit removes the widget customization functionality in the frontend, which will be added back in the next commit or two.
    -
    Handle conversion to safe JSON strings in the templates instead of in the Python code. This cleans up the widget parsing code, which now only needs to send the correct parameters with which to parse the template.
    Move convert_to_js_string() method to widget_domain.py since that is the only place it is used.
    Streamlining parameter update logic a little more; removing some special cases. Work still needs to be done to make the template generation methods in widget_domain.py consistent with each other, and to figure out the order of, and when to do, Jinja substitution and JSONification.
    Remove unneeded widget repository functionality. Along with values, pass parameter object types to the widget repository.
    Add test suite for django to automatically discover and run tests. Add platform switching to tests.
    Separate exploration data files from other extensions.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move domain-related files to their own folder in the repository.
    Complete the transition to first-class Rule objects. Remove the classifier model and all calls to it.
    Entirely remove db and ndb dependencies from AnswerHandler.
    Add new widget_domain_test.py file.
    Require the user to explicitly select the interaction for each state.
    Add validation for rules and interaction customizations.
    Remove the 'widget_sticky' setting.
    Fix reachability verification checks. Move legend in history tab within the graph. Colour end states dark green.
    Address review comments.
    Move the 'create new state' option into the rule destination dropdown.
    Add validation for the new EndConversation interaction, and hide its rule display.
    Complete the deprecation of 'widget'.
    Remove widget_domain, replacing it with two base classes for interactions and rich-text components.
    Migrate the backend widget registries and the controllers.
    Improve the error messages for invalid parameter changes.
    Ensure that invalid parameter names cannot be used.
    Tidy up the expression evaluation code to the point that the sample exploration registers no differences between the client and server evaluations.
    Lint fixes.
    Use a different method to pass the rule input_type to the frontend.
    Use widget ids rather than widget names to determine noninteractive widget tag names. Add additional cleaning of content before display.
    Added test for exploration summaries. Small changes related to exploration summaries.
    Add objective and language fields to the 'create exploration' form.
    Refactor the learner feedback handler so that parts of it can be accessed as separate functions.
    Addressed code review, only minor changes.
    Further UI improvements to the state content and interaction editors. Change the default initial state name.
    Add a validator for testing the maximum length of a list.
    Using exploration summary domain objects instead of summary models directly, addressed code review.
    Fix issue 368: allow the initial state name to be changed without a backend error.
    Complete the 'change initial state name' feature.
    Downgrade error logging about extra widget parameters to a warning.
    In the learner view, load the entire exploration at the outset, and move the construction of the interactive widget HTML tags to the frontend.
    Send the entire exploration in the player frontend when the page loads.
    Add language-code selection functionality to the exploration editor.
    Make the new widget specifications work in the frontend editor and reader views.
    Migrate widget configuration parameters to a simpler format that is more consistent with upcoming refactorings.
    
    NOTE: this change passes backend tests but the frontend does not work. This will be handled in a separate commit.
    Fix lint issue (where tabs were used instead of spaces).
    Speed up the contribute gallery by not making so many individual calls to rights_manager.can_edit().
    addressed code review comments.
    added search to exp_domain layer
    Add a skin chooser to the frontend editor UI.
    Improve the UI for displaying objectives (and the warning to specify them if they aren't specified yet). Add objectives to existing demo explorations.
    Move 'Upload Exploration' button to the top of the contribute gallery page. Clarify the error when a zip file is uploaded by mistake.
    Fix a number of issues discovered during testing (thanks to Jacob).
    
    1) Rename "site guidelines" to "how to use this site"
    2) Make the "Address this feedback" link in the stats viewer link to the state editor, rather than the main exploration tab.
    3) Add a specific warning message if there is a feedbackless self-loop for a default rule.
    4) Format the feedback messages in the user profile as a table.
    Represent the playtest gallery as a flat list. Remove subtitle from the learn gallery.
    Address review comments.
    Add additional exploration properties.
    
    (The properties are: skill tags, blurb, author notes, objective and
    language code.)
    
    WARNING: This should not be merged into the main branch until the
    frontend is written, otherwise all publish will fail since there is
    nowhere to specify the (required) objective.
    Implement the frontend for the recent commits list.
    
    Still TODO:
    - audit the data returned to ensure nothing private is exposed
    - test on a production instance
    - reuse the functionality in the exploration version history page
    - reuse the functionality in the user profile page
    Implement the backend for recording and querying all commits to all explorations (together with filters and paging).
    Merge of missing answer changes, fixing conflicts
    Address issue 151: clarify the 'feedback required' message.
    In the python files for interactive widgets, the obj_type of the reader's answer should be represented as a string.
    Housekeeping changes: remove unneeded block_number, normalize reader answers prior to processing them, do not fail if the stats answer logs overflow (issue 139), make warmup handler not throw 404s.
    Add additional error logging to rules.
    Move JS code for individual widgets from its temporary home in templates/dev/head/components to the extensions/widgets directory.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Fix YAML file upload flow, and make it a configurable property in the admin page.
    Fail more gently on user-facing queries. Validate new explorations prior to creating their rights object.
    Allow old versions of explorations to be linked to.
    Various small UI fixes.
    Improve the way exploration creation and saving is handled in the backend. Require commit_cmds and commit_messages to be specified by default, where possible.
    Tighten up the implementation of user settings and rights.
    Resolve a TODO regarding the use of both id and widget_id in a widget description.
    Allow add and delete state operations to be done as part of a larger commit.
    Represent a changelist as a sequence of commands and process this sequence server-side.
    Start writing a changelist handler on the server side. Move the delete_state() function to the exploration domain object so that it can be executed together with other changes.
    Perform strict validation on the demo explorations and on published explorations.
    Consolidate the validation for explorations in the exp_domain module.
    Remove the concept of stateId from the frontend.
    Remove the state model from the backend.
    
    Reasons:
    - It is confusing to keep track of two separate lifecycles for states
        and explorations.
    - The state name and state id were duplicate ways to identify a
        particular state.
    
    Side effects:
    - This change has resulted in an update to the YAML schema. The update is
        fully backward-compatible.
    - States are now identified in URLs and in analytics by their names
        rather than their ids.
    Fully migrate explorations to use the rights manager.
    Use actual user_ids instead of email addresses. Require the user to pick a valid username that would appear in the commit logs.
    Lint the codebase.
    Add tests for more handlers in controllers.editor.
    Batch datastore get() and put() operations, and use local caches where possible. This halves the exploration loading time! (E.g., on the dev server, the binary search exploration used to take 18.3 s to load from scratch, and now it takes 9.8 s.)
    Add rights management for deleting explorations. Only an admin can delete published explorations; only the owner and admins can delete unpublished ones.
    Enable soft deletion of explorations.
    Make the default widget configurable and change it to TextInput.
    New states should have a default non-interactive content list with exactly one element of type 'text'.
    Checking username to be only alphanumeric characters
    Remove the image storage model. Move image file uploading to use the file system storage model.
    Do not retrieve all the states of an exploration unless it is absolutely necessary to do so.
    Schema change: make param specs into key-value pairs so that exactly one param spec is defined for each param name.
    Complete the schema change that allows more flexible rule specifications (i.e. that allow Boolean combinators and classifying based on parameters).
    Re-allow the setting of exploration initialization parameters.
    Move the yaml files to use value generators for state parameter changes, and ensure that the reader view works. Note that this commit breaks the editor view; this will be fixed in a future commit. None of these commits will be pushed to master until we have a working build.
    Reinstating memcache functionality. Clear more keys from memcache when versioning so that old copies of explorations aren't retrieved.
    Modify widgets to use value generators for their customization args. This commit removes the widget customization functionality in the frontend, which will be added back in the next commit or two.
    Rename exploration.parameters to exploration.param_specs.
    Introduce a ParamSpec class for maintaining parameter type information at the exploration level. TODOs: remove the ability in the frontend to set values at the exploration level, display the parameter types in the exploration metadata page, and rename exploration.parameters to exploration.param_specs in the backend.
    Move state models to the exploration storage model file, since they really belong together.
    Add transactions around operations that update states in an exploration.
    Add parent to states in GAE so that it is possible to do transactional updates on the states of an exploration.
    Introduce server-side validation of exploration and state names. Standardize the characters that can be used in these names.
    Display version history in the editor UI. Add snapshot models to Django backend.
    Add explicit checks for deletion rights.
    Fix issue 30: add customization option for text on the Continue widget button.
    Move jinja_utils to a separate module.
    Fix some referential integrity problems.
    Remove parameter storage model, and use only its domain class.
    Add memcache performance counters.
    Add memcache support.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    For persistent storage, store states as JSON blobs instead of rich objects. The rich object representation will be used for retrieving them from memcache.
    We don't actually need base_domain, so remove it.
    Remove dependence of exploration domain class on the exploration model class.
    Start moving repository methods to the services files so that domain objects can become plain python objects.
    Implement pluggable skins.
    Add model-switching mechanism.
    Remove unnecessary class attrs from domain objects.
    Move more logic into the domain layer. Fix some select2 error messages in the frontend that occur due to imported libraries being in the wrong order.
    Change the name of the models directory from 'apps' to 'storage'.
    Move domain-related files to their own folder in the repository.
    Add more tests to the exploration app.
    Remove some duplication in stats_services. Rename state.Rule to state.RuleSpec to distinguish it from the rules in apps/rule.
    Use module-level imports. Avoid aliasing module names where possible.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Add an explicit init_state_id property to avoid unnecessary database lookups. Minor refactorings and rewordings.
    Store a payload attribute on handlers which use a payload. Move get_state_by_id() into the domain object.
    rename_state() should take state_id as an argument rather than the entire State object.
    Move state deletion logic from the controllers into the domain layer.
    Allow explorations to be faked in tests to remove the dependency of the exploration domain object tests on the exploration model storage class.
    Add files missing in previous commit.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Consolidate the validation for explorations in the exp_domain module.
    Finish cleaning up obj_services.py.
    Checking username to be only alphanumeric characters
    Improve the validation tests for exploration yaml files.
    Schema change: make param specs into key-value pairs so that exactly one param spec is defined for each param name.
    Allow selection of particular value generators when editing parameters. Minor improvements to the code widget display.
    Move the yaml files to use value generators for state parameter changes, and ensure that the reader view works. Note that this commit breaks the editor view; this will be fixed in a future commit. None of these commits will be pushed to master until we have a working build.
    Introduce a ParamSpec class for maintaining parameter type information at the exploration level. TODOs: remove the ability in the frontend to set values at the exploration level, display the parameter types in the exploration metadata page, and rename exploration.parameters to exploration.param_specs in the backend.
    -
    WIP: drop down selection for widget customize.
    Move jinja_utils to a separate module.
    Remove parameter storage model, and use only its domain class.
    Add memcache performance counters.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Remove unnecessary class attrs from domain objects.
    Add validation to the parameter domain module.
    Add a parameter domain module.
    Make signing in required if the user is logged in but has not chosen a username.
    Lint fixes.
    Fixed bug in ExpSummariesCreationOneOffJob which crashed when trying to create summary for deleted explorations. Also modified tests to catch this.
    Addressed code review comments, minor changes.
    Converted ExplorationSummaryCreation job from continuous to one-off. Improved some tests.
    Addressed code review, minor changes.
    Added test for exploration summaries. Small changes related to exploration summaries.
    Addressed code review, only minor changes.
    Using exploration summary domain objects instead of summary models directly, addressed code review.
    Use exploration summaries to speed up galleries. Include MR job to generate initial summaries.
    Addressed review comments and made the exp_jobs_test work with the new private exploration behavior.
    addressed more review comments.
    resolved cyclic imports
    Addressed review comments.
    Added a one-off test to index all explorations.
    Make rich-text component loading happen at the same time as the page load.
    Remove widget_domain, replacing it with two base classes for interactions and rich-text components.
    Migrate the backend widget registries and the controllers.
    Revert erroneous gallery capitalization changes. Add job for conversion of InteractiveMap distances.
    Show the profile picture on all pages.
    Partially working profile picture upload
    Use the user's preferred languages in the gallery. Create an editable preference page and a viewable profile page.
    Restyle the profile page. Allow incremental saving. Use language codes instead of languages.
    Make language selection work properly on the profile page
    Save bio to user_settings and load existing bio into profile
    Show the tutorial immediately for first-time users.
    Made changes as per Sean's comments, also fixed ExplorationEditor.js which was broken during a previous sync.
    Feature request for adding roles to explorations using usernames(issue 286), will put beautification of html in a different commit.
    
    Conflicts:
            core/templates/dev/head/editor/ExplorationEditor.js
    Made changes as per Sean's comments, also fixed ExplorationEditor.js which was broken during a previous sync.
    Feature request for adding roles to explorations using usernames(issue 286), will put beautification of html in a different commit.
    Add a 'most recent updates' section to the user dashboard.
    Add tests for the moderator page.
    more fixes in response to comments
    Fixes to moderator page in response to comments
    Revert "Merging moderator page into main branch"
    
    This reverts commit 41f68ff03a3f72d0fc5f2d4c4e37106e01707cff, reversing
    changes made to dee9ead5e46b3616eaae6c5e7fb55a6e8fdde539.
    Basic functionality for moderators to get users' email addresses
    Add functionality for banning editors.
    Move checks for whether the user is a super admin directly to the platform level.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Refine rights management for moderators, admins and super admins.
    Allow owners, collaborators and playtesters of explorations to be set.
    Improve the way exploration creation and saving is handled in the backend. Require commit_cmds and commit_messages to be specified by default, where possible.
    Tighten up the implementation of user settings and rights.
    Lint the codebase.
    Move delete_all_* methods to the test file, since they should only be used there.
    Add tests for editor prerequisites page.
    Add an editor prerequisites page with information about the CC0 license.
    Minor security enhancements.
    Renaming to represent normalized usernames
    Check username uniqueness against lowercase strings
    Check username for uniqueness
    
    Includes code review changes from previous username commits
    Refactoring username setting into a proper domain
    Requires a username for editors and adds a path to create them
    Allow the running of individual tests and test classes. Allow the categorization of tests as slow so that they can be omitted using a command-line flag if desired.
    Add config property model and CSRF protection.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Added dummy models for django.
    Automatically compute the parameters for rules based on the rule description.
    Add rules for NonnegativeInt.
    Add infrastructure and data for handling composite rules. This is a more flexible version of the current classifier framework and will eventually replace it.
    Remove normalizers; switch to data.objects.models.
    Add proper file headers. Remove empty files. Add division-by-zero check on stats page.
    Renaming rule files to have YAML suffixes. Adding normalizers.
    Adding tests for classifiers and using PEP-8 for the Python files.
    Moving sample classifiers, explorations and widgets to a separate directory.
    Make multiple choice widget work.
    Adding some basic list rules.
    Adding the remaining two classifiers.
    Split about page into two. Minor linting fixes.
    Remove obsolete admin page config properties. Restructure config properties to use schemas.
    Make signing in required if the user is logged in but has not chosen a username.
    Address review comments.
    Add a backend test for the private-viewable functionality.
    Use more unicode strings in tests. COnsolidate common strings.
    Remove cloning functionality from the backend.
    Implement world-viewable exploration editor pages.
    Allow moderators to unpublish explorations.
    Introduce the concept of beta explorations, and allow them to be publicized or unpublicized by moderators. Fix an error in the admin/moderator permissions.
    Remove the Django port of Oppia from the codebase.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Address some, but not all, of the failing Django tests.
    Allow the splash page exploration version to be set as a config property.
    Fix YAML file upload flow, and make it a configurable property in the admin page.
    Add more controller tests.
    Implement admin and moderator rights management.
    Allow owners, collaborators and playtesters of explorations to be set.
    Improve the way exploration creation and saving is handled in the backend. Require commit_cmds and commit_messages to be specified by default, where possible.
    Tighten up the implementation of user settings and rights.
    Fully migrate explorations to use the rights manager.
    Split about page into two. Minor linting fixes.
    Further cleanup of work on versioned statistics.
    Fixing test errors due to merge
    Response to code review of c4088eb7deba
    Add versioned statistics aggregation and allow different versions to be viewed from stats page
    Lint fixes.
    Address more review comments.
    Prep for migration to stats jobs
    1. Stop writing to State Counter (old style) models
    2. Migrate all uses of current state counters over to aggregator
    3. Update aggregator to use both old and new models correctly
    4. Create one off job to deal with the overlap between these two systems
    Add a 'most recent updates' section to the user dashboard.
    Fix flaky jobs tests.
    Minor edits to stats_jobs in preparation for the new migration scheme. The
    proposal is:
    
    (1) Push this version of the code in v1.2.8. The stats calculated are wrong
        (they only count the new instances) but nothing reads from them yet. It
        will give us a chance to see how the computation works in practice.
    (2) Immediately before the push, the computation is stopped.
        The next code push does four things simultaneously:
        (i)   switch all reads of StateCounterModel to read from the StatsAggregator
              output instead.
        (ii)  disable writes to StateCounterModel.
        (iii) add a migration job that iterates through all StateCounterModels and
              decrements them by the total number of new-style model instances;
              this number is obtained from the result of the last StatsAggregator
              computation. This job stores exploration ids that have been processed
              in a temporary datastore and repeats itself until every exploration
              has been processed (in case of unexpected failures). In a further
              code push we will delete the temporary datastore.
        (iv)  updates the StatsAggregation computation to compute the sum of the
              old and new models.
        Immediately after this code push, the one-off migration is run and, when
        it finishes, the StatsAggregation computation is restarted. The data
        displayed in the UI will be wrong until these two processes complete; based
        on test runs, this will probably be for less than an hour.
    
    If anything goes wrong in the one-off migration we should roll back the push.
    The StatsAggregation job will have run several times already so it is unlikely
    to fail. Needless to say, all this should be run on a test instance first.
    Remove one-off stats migration job after discussion with Stephanie.
    Fix the handling of non-ascii characters in the migration job.
    Add a test for the one-off stats migration job.
    Address some review comments.
    Do not require duplication of realtime datastore classes.
    When a computation is stopped, cancel the current batch job. In the admin dashboard, do not show a cancel button for batch jobs related to continuous computations.
    Migrate the existing StatsPageJobManager to use the new continuous computations framework.
    Remove the listener registration from event handlers and replace it with a more explicit ContinuousComputation dispatcher registry that is generated on event dequeue. In the earlier system, listeners were dynamically added to event handlers using a class attribute, and that made it hard to reason about the lifecycle and to avoid duplicate registrations.
    Implement a preliminary framework for continuously-running computations.
    Migrate existing event handlers to the new framework.
    Move event handler to a separate file, since it is no longer handling analytics-only events.
    Minor renaming and lint corrections. Remove some unused methods.
    lots of little linter-type fixes
    Cleaning up the calls to models and tests
    Changes from code reviews of several commits
    Creating a job calculating the number of completions and total visits
    Add config property for additional links in the sidebar menu. Complete work needed for config property for gallery carousel.
    Add validation for rules and interaction customizations.
    Fix broken test. Add test for validating config property schemas.
    Restyle About page.
    Merge sidebar/navbar changes.
    Lint fixes.
    Combine the splash and dashboard page controllers into a common homepage controller.
    Share the 'Create Exploration' button between the dashboard and contribute gallery pages.
    Introduce a new user dashboard page.
    Minor lint fixes, mostly to the controller layer.
    Remove state names from the profile page. Fix a broken test.
    Add AUTHORS and CONTRIBUTORS files; update copyright notices.
    Always show the Contribute tab in the navbar.
    Allow the admin to configure the id for the sample exploration on the splash page. Make the link to the gallery more prominent.
    Add more controller tests.
    Minor fixes for login/logout buttons. Remove unused images.
    Revise the wording for the static pages.
    Rework the splash page.
    Resurrected welcome exploration and added explore link from splash screen to gallery.
    Fixed the default page test.
    Resurrected welcome exploration and added explore link from splash screen to gallery.
    Fixed the default page test.
    Allow the running of individual tests and test classes. Allow the categorization of tests as slow so that they can be omitted using a command-line flag if desired.
    Add test suite for django to automatically discover and run tests. Add platform switching to tests.
    Rename inner oppia/ directory to core/ to prevent confusion between two directories named oppia/.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    CSS change to work on Firefox too. Fix a test.
    Reduce height of interactive widget display. Remove a line from tests.
    Fixes to the main page.
    Fix a test
    Changing the default exploration and the formatting of the homepage.
    Separating the state transition logic from the rest of the handler.
    Restructure tests, so that each module has its own test file.
    Update integration instructions for Course Builder.
    Add script for building release candidates for integrations of Oppia with other web pages or platforms.
    Add script for building release candidates for integrations of Oppia with other web pages or platforms.
    Add script for building release candidates for integrations of Oppia with other web pages or platforms.
    Update Course Builder integration instructions.
    Push initial versions of the Oppia integration code.
    Update README files.
    Add script for building release candidates for integrations of Oppia with other web pages or platforms.
    Update integration instructions for Course Builder.
    Add script for building release candidates for integrations of Oppia with other web pages or platforms.
    Add script for building release candidates for integrations of Oppia with other web pages or platforms.
    Move the oppia directories one level down, so that Django runfiles can be put into the root directory with oppia as an app.
    Moving models/ to apps/ in preparation for the migration to django non-rel
    Add missing files from previous commit
    Moving controllers to a separate folder
    Initial commit.
    Add script for building release candidates for integrations of Oppia with other web pages or platforms.
    Add script for building release candidates for integrations of Oppia with other web pages or platforms.
    Update integration instructions for Course Builder.
    Add script for building release candidates for integrations of Oppia with other web pages or platforms.
