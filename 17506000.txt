    post-release updates
    java-helloworld has moved. Remove old Cuke4Duke docs.
    Release 1.1.5
    Words
    Release 1.1.4
    Release 1.1.3
    Fixed google groups cuke link
    Added a CONTRIBUTING.md file
    Document build problems
    Release 1.1.2
    Remember to keep Gradle example uptodate
    Updated docs and added scripts for API docs
    add waffle.io badge
    Fix contributing link.
    Updated to JUnit 4.11. Relates to #255. Might also relate to #322. IntelliJ IDEA reports features with Background and Scenario Outline incorrect.y. Might be the case on master too.
    Link to API docs
    More words
    Updated docs and added scripts for API docs
    Javadoc tweaks
    Moved the JUnit package and configured API docs
    Last release failed. Remove site distribution. We'll copy javadocs over to the site repo manually.
    Release 1.1.0
    Changed public Groovy API to cucumber.api.groovy. Fixed some docs.
    Some last minute fixes before the 1.1.0 release.
    Release 1.0.14 (1.0.13 release failed)
    Release 1.0.13 with better packaging
    1.0.12
    Release 1.0.11
    Fix for #345
    Release 1.0.10
    Release 1.0.9
    Run scenarios/features by name. Closes #233, #323
    Release 1.0.8
    Release 1.0.7
    Throw an exception if a glue or feature path doesn't exist (i.e. neither file nor directory)
    Release 1.0.6
    Release 1.0.5
    Added cobertura code coverage and started to clean up some cruftiness in the io package
    Release 1.0.4
    Release 1.0.3
    Release 1.0.2
    Release 1.0.1
          oe               .n~~%x.                .n~~%x.
        .@88             x88X   888.            x88X   888.
    ==*88888            X888X   8888L          X888X   8888L
       88888           X8888X   88888         X8888X   88888
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888f        88888X   88888f
       88888       .   48888X   88888     .   48888X   88888
       88888     .@8c   ?888X   8888"   .@8c   ?888X   8888"
       88888    '%888"   "88X   88*`   '%888"   "88X   88*`
    '**%%%%%%**   ^*       ^"==="`       ^*       ^"==="`
    Fixed spelling mistake - changed "extenstion" to "extension"
    Release 1.0.0.RC24
    Release RC22
    Release
    Added a Hello World example with Ant
    Release 1.0.0.RC21
    Help people contribute better
    README.md documentation: how to add the right dependencies in maven
    Added Cuke4Duke migration docs
    Fix doc deployment
    Let's try that release again
    Trigger travis build again
    Update build instructions
    Added Travis, since Jenkins hasn't been building in a fortnight
    Properly release examples
    Clarify build instructions
    Not about copying resources
    Make sure examples are working. Should run them before each release.
    Variable renames
    Fix link in readme
    Added OpenEJB
    Update versions
    Update release instructions
    Remind myself how to release
    Comment out openejb, because it cannot be maven-released due to SNAPSHOT dependencies
    fix maven version string
    
    The version string in the README is 1.0.0-RC6, but it needs to be
    1.0.0.RC6.
    Release 1.0.0.RC6
    Dual build
    Make sure poms are published to local repo. You should probably delete rm -Rf ~/.m2/repository ~/.ivy2/cache - see #143 and #144.
    Cleanup
    Words
    Words
    Added IDEA project files
    Trying to make tck work with Ivy
    More ivy hacking
    More pointers
    Added test target
    Added instructions for downloading using Ivy
    Ant based code gen for groovy. Fixed cli-test for jruby and groovy
    Ivy builds all the way through. Thanks for helping out @tastapod
    Generate annotations with Ant+Groovy instead of Rake+Ruby
    Done groovy full
    Build jruby jarjar
    Added some todos for build
    Use internal compiler. Remove some fixed TODOs
    Rewrote a lot of the resource loading code
    New submodule location for cucumber-tck
    Get rid of @author tags
    More contribution guidelines
    JUnit behaves better when a Before hook fails. Closes #106
    words
    Update indentation rules
    GFM
    Add a note for non-maven users
    Words
    Add link to CI
    Add link to milestones
    Add back cucumber-features. Work in progress for #45
    Typo
    Upladed Javadocs
    Added instructions about how to get SNAPSHOTs
    Added Jython support
    We're supporting Ruby now
    Help Windows users not do work twice.
    Simplified process for code generation on Windows.
    added CDI/Weld to list of support DI containers
    More words
    Removed i18n Java annotations from git - they cause too much headache because Git's poor handling of UTF-8 file names on OS X and Windows
    Words
    regenerated i18n with properly encoded file names
    Added some more instructions
    Added hacking instructions
    All core cucumber-features are passing except one
    Add travis config to deploy snapshots to sonatype.
    
    This needs the actual sonatype username and password added
    after running through a 'travis encrypt' command.
    
    Only try to deploy from one entry in the matrix, so pulled
    openjdk6 out of the main jdk matrix and added a separate
    entry with its own script with the deploy command.
    Added cobertura code coverage and started to clean up some cruftiness in the io package
    post-release updates
    Update history. closes #599
    Attribution for #634
    Use ~/.../ syntax in Groovy snippets, ref #663
    Added attribution for #683
    Attribution. Closes #691
    Attribution. Closes #689
    Cannot run cucumber test if path to jar files contains exclamation character. Closes #685
    Added Gosu support.
    
    Squashed commit of the following:
    
    commit 677ec0244cf33e40f5159250095112ac5622eb25
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 19:49:44 2014 +0000
    
        Use gosu jars from repo
    
    commit f35d0f7ad1737d126310beaf9a19ceae0a1a5cff
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 19:43:26 2014 +0000
    
        Added gosu snippets
    
    commit b8cfce6019bb12d701cd68235cd9420d07b9e991
    Merge: 5c90a6b 7e1d02f
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 16:05:32 2014 +0000
    
        Merge branch 'master' into gosu
    
    commit 5c90a6bce2f09788ed99a8e6546c1d1f03774230
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Wed Mar 12 17:01:49 2014 +0000
    
        Better Gosu
    
    commit 998b787c30e7263a63c755c6b3b668a71b358a23
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Fri Mar 7 23:06:43 2014 +0000
    
        Remove dead code
    
    commit 927bc45a977b7681be644f6f1276231be5e49998
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 10:16:13 2014 +0000
    
        For now, define the DSL alongside the stepdef
    
    commit 237f71beee6440f9f2f9f64b2d08998064e635b9
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 10:03:09 2014 +0000
    
        Try to define a DSL
    
    commit 1e3df07a25ef8009684431e78c33751c4db28136
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 09:52:50 2014 +0000
    
        Use Gosu Programs instead of classes. Need to figure out how to define Given.
    
    commit c9bd0adb5cceffdea6fe2d9e9feba8b8763472a1
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 00:28:06 2014 +0000
    
        Clean up a little
    
    commit 4b34b5b8bda1aca6149894cae8d9587446e1ba9a
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Wed Mar 5 23:30:59 2014 +0000
    
        Started experimental work on gosu module
    Ensuring features are parsed before formatters are initialised. Closes #652
    Use image/svg+xml. Closes #624
    Attribution. Closes #676
    Simplify Table conversion. Fix broken build.
    
    Squashed commit of the following:
    
    commit 4c357d2fb77d48565985b83a5f5e0d6d1cf58daf
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 23:22:39 2014 +0000
    
        Simplify code by replacing DataTable.flatten with DataTable.asList(String.class)
    
    commit 9c031dabe06813151609d5368f58d062384dc704
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 22:38:09 2014 +0000
    
        Added tests
    
    commit a6c89feb369937149cd19b03737b1d3666b1ecd2
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 21:56:40 2014 +0000
    
        Simplify table conversion
    
    commit 5896c7010ecb2aa67bb8bbc08d4047ac5bd4250a
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 21:32:27 2014 +0000
    
        Table conversion refactoring
    
    commit c2f1d3ef2190b98c43222dcc37d9ce934ad43f3c
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 13 20:39:00 2014 +0000
    
        Simplify table conversion
    Turn a DataTable with 2 columns into a Map
    Align snippets for quoted arguments with cucumber-ruby
    No longer try to build on JDK6
    Fix compilation on JDK7 on OS X. Closes #499, #487.
    Update History.md for #667.
    Improve performance of URLOutputStream. Closes #654.
    Fix concurrency bugs in Selenium Webbit example.
    
    Also switched from Chrome to Firefox, since it doesn't require the installation
    of the chromedriver command line tool.
    Fixed thread leak in timeout implementation. Closes #639
    Fix formatting typo
    History.md update on #622
    [TestNG] Allow TestNG Cucumber runner to use composition instead of inheritance. ([#622](https://github.com/cucumber/cucumber-jvm/pull/622) Marty Kube)
    New Snippet text, closes #618.
    
    Change to the new Snippet text. Update History.md.
    Fix a one off error in JRubySnippet.java.
    Update History.md
    Update History.md
    Update History.md
    Update History.md
    Attribution for #596
    Attribution for #595
    Attributions for #598 and #570
    Use PyList instead of PyArray when converting DataTable for Jython. Ref #602.
    Refactor test, ref #603
    Report summaries and  in the same way as the CLI
    Post-release of 1.1.5. Fix Deployment of cucumber-android.jar. Fixes #573
    Release 1.1.5
    Override Cucumber Options via  or cucumber-jvm.properties as well as -Dcucumber.options
    Make it possible to clobber feature paths and glue with -Dcucumber.options
    Timeout is a long, not int. Be explicit that it's millis.
    Additionally deploy the cucumber-android jar. Closes #573.
    Attribution. Closes #581, #584
    Add support for Dependency Injection.
    
    This happens via cucumber-picocontainer, cucumber-guice, cucumber-spring etx.
    Use CucumberOptions in CucumberInstrumentation, replacing RunWithCucumber. Closes #576.
    [TestNG] Java Calculator TestNG example project - #579 issue.
    [Jython] Access to scenario in Before and After hooks. Closes #582.
    
    The implementation is a little ghetto. I tried to get the arity
    of the hook function using inspect.getargspec, but couldn't get
    it to work. This implementation will most likely be sufficient though.
    master is SNAPSHOT
     is deprecated in favour of . Closes #549
    Updated History.md with Android improvements. Ref #547 and #574.
    Attribution. Fix broken test. Closes #568
    Attribution. Closes #501.
    Attribution. Closes #495, #524
    Attribution. Closes #394, #558
    Refactored --snippet option. Closes #561, #302
    Attribution. Closes #562.
    Release 1.1.4
    Upgrade dependencies
    Fixed a bug where  annotations were ignored
    Add Cucumber-Android to History.md
    Added my encrypted sonatype credentials so we can deploy. Closes #517,#528
    Updating History.md for merge of #543
    Don't shade jruby/jython/groovy artifacts - only for native packages (gem,egg,zip). Closes #518, #522.
    Always cancel timer when we're done, even if an exception is thrown. Closes #540
    Noting updated examples
    Annotating change from the pull request
    The  formatter is gone, and the  formatter is pretty
    New Spring example. Closes #508, #489, #449
    Add Scenario.source_tag_names to work with Capybara. Closes #504.
    Tagged hooks for JRuby. Fixes #467.
    Attribution. Closes #448, #489.
    Scala tweaks. Closes #432, #462.
    Attribution. Closes #482, #463.
    Attribution. Closes #485, #466
    Release 1.1.3
    Added accessors to TableDiffException. Closes #384.
    Attribution
    Attribution. Closes #443, #455.
    Attribution. Closes #464, #458
    Attribution
    Update History.md
    
    Add #461 and #471 to solved issues.
    typo
    Parenthesis around dates.
    Added release dates
    
    The command I ran to help with this was `git log --tags --simplify-by-decoration --pretty="format:%ai %d"`
    [JRuby]  and  can be set in env var, system property or  resource bundle.
    Attribution
    Custom Formatter/Reporter's  and  hook weren't run.
    Release 1.1.2
    Closes #422.
    Remember to keep Gradle example uptodate
    Closes #413, #424, #444
    Closes #424, #444.
    Attribution
    Update to JUnit 4.11
    Fixed typo in link
    Upgrade to 3.2.0.RELEASE
    Strip command line arguments in case people accidentally invoke  with arguments that have spaces left and right.
    Words
    Better table conversion. Closes #433,#434.
    Formatters can HTTP PUT to an URL
    Added . Closes #418
    Fix embedding in HTML reports. Closes #412.
    Words
    Revert to scala 2.9.2. Remove unused pom stuff.
    Simplify. Attribution. Closes #304, #430
    Deprecated  in favour of .
    Words
    Make tests slightly more readable. Follow coding conventions. Closes #379
    Update version
    Last release failed. Remove site distribution. We'll copy javadocs over to the site repo manually.
    Some last minute fixes before the 1.1.0 release.
    Attribution
    Reorder history
    I18n stepdefs.  or other language. Closes #177.
    Much improved JRuby DSL. No more leaking into global scope. Calling steps from stepefs now uses the  method.
    Set a default order of 100 for Spring @txn hooks in the cucumber.runtime.java.spring.hooks glue package. Closes #398.
    The  annotation is replaced with an  property on  and
    Write all report files as UTF8. Closes #402.
    HTMLFormatter improvements. Closes #375, #404, #283
    Improved Transformer API
    Fixed a bug where  would fail with the JUnit runner.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Attribution. Fix formatting.
    Simplified replace logic in Java and Clojure Snippet. Added attributions.
    The java module (and all other modules) finally compile on JDK 7 and OS X. Thanks to David Kowis and Sébastien Le Callonnec
    Allow overriding boolean flags with false
    Release 1.0.14 (1.0.13 release failed)
    Release 1.0.13 with better packaging
    Upgrade dependencies. Release 1.0.12
    Clean up imports, update history
    JUnit assume failures behaves just like pending. Closes #359.
    Attribution. Closes #360, #361
    Attribution
    Attribution. Closes #364, #371
    Attribution
    Attribution
    Attribution. Closes #315, #356
    Attribution. Closes #355
    Update history
    Update examples to use Transform
    Build passes with cucumber-deps
    Build passes with cucumber-deps
    History
    Release 1.0.10
    List<JavaBean> can be converted to a table again. This change sort of breaks #320 - converting a list of beans/pojos with null fields to a table will require explicit listing of fields. Closes #335.
    Big refactoring in table conversion land
    Attribution. Closes #337, #342
    Step definitions and hooks can now specify a timeout (milliseconds) after which a  is thrown if the stepdef/hook has not completed. Closes #343
    More explanatary exception if a hook is declared with bad parameter types.
    JUnit report has time reported as seconds instead of millis. Closes #347
    List legal enum values if conversion fails. Closes #344
    Added workaround for https://issues.jboss.org/browse/WELD-1119 when running on single core machines.
    Fix the link too
    Use the right release number
    Release 1.0.9
    Exceptions thrown from a step definition are no longer wrapped in CucumberException.
    Fixed regression: PendingException was causing steps to fail instead of pending. Closes #328
    Missing String.format parameters in DefaultJavaObjectFactory. Closes #336
    Exceptions being swallowed if reported in a Hook
    Better JavaDoc for DataTable
    The java-helloworld example has a simple example illustrating data tables and doc strings.
    Run scenarios/features by name. Closes #233, #323
    Added missing  argument in Jython snippets. Closes #324
    Fixed regression from v1.0.6 in Scala module - glue code wasn't loaded at all. Closes #321
    Release 1.0.8
    It's Throwable
    Ability to create  objects from a List of objects while specifying what header columns (fields) to use
    Bugfix for Tables with empty cells make the column disappear. Closes #320
    Attribution. Closes #318, #319
    Attribution
    Options (Command line or ) can be overriden with the  system property.
    Release 1.0.7
    cucumber-java lazily creates instances, just like the other DI containers
    Throw an exception if a glue or feature path doesn't exist (i.e. neither file nor directory)
    Release 1.0.6
    Fix several problems with resource loading for scripting languages (after the new classpath: scheme was introduced)
    Release 1.0.5
    [ah] Attribution. Closes #291, #309
    Fix links
    Release 1.0.4
    Ability to specify line numbers
    Improved WebDriver example that shows how to reuse a driver for the entire JVM. Another case against #295
    Allow custom @XStreamConverter to be used on regular arguments - not just table arguments.
    Attribution
    Detect subclassing in glue code and report to the user that it's illegal. Closes #301
    More friendly errors for xstream problems
    Friendlier error message when XStream fails conversion. Closes #296
    Empty strings from matched steps and table cells are converted to . This means boxed types must be used if you intend to have empty strings.
    Attribution. Closes #196
    Attribution
    Show code source for Java step definitions in case of duplicates or ambiguous stepdefs.
    Workaround for arity mismatch on Groovy. Need an explicitly empty list of closure parameters. Closes #297.
    Make it easier to create a DataTable
    Release 1.0.2
    Don't convert paths to package names - instead throw an exception. This helps people avoid mistakes.
    Attribution
    Automatically turn off ANSI colours when launched from IDEA.
    Fix bad link
    Fix bad link
    Release 1.0.1
    Updated history for #276
    Attribution. Closes #277
    Attribution. Closes #278
          oe               .n~~%x.                .n~~%x.
        .@88             x88X   888.            x88X   888.
    ==*88888            X888X   8888L          X888X   8888L
       88888           X8888X   88888         X8888X   88888
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888f        88888X   88888f
       88888       .   48888X   88888     .   48888X   88888
       88888     .@8c   ?888X   8888"   .@8c   ?888X   8888"
       88888    '%888"   "88X   88*`   '%888"   "88X   88*`
    '**%%%%%%**   ^*       ^"==="`       ^*       ^"==="`
    Attribution
    Reformat code, shuffle things around a little. Closes #207, #214.
    Added --monochrome flag, allowing monochrome output for certain formatters
    Make sure strings are quoted before printing to js. Closes #254
    Add support for enums in stepdefs. Closes #217, #240.
    Help text for CLI. Closes #142.
    Attribution. Closes #263, #274
    Release 1.0.0.RC24
    Understandable error message if a formatter needs output location. Closes #148, #232, #269.
    Running with JUnit uses a null formatter by default (instead of a progress formatter).
    Fix release artifacts so cucumber-clojure can be released. Closes #270
    Get rid of @Pending. Closes #271
    Update versions and example
    Fix for CucumberException when running Cucumber with Jacoco code coverage. Closes #258.
    Make sure scala javadoc jar is deployed. Closes #231.
    Release
    Snippets for DataTable include a hint about using List<YourType>, so people discover this neat technique
    Support DocString and DataTable in generated snippets. Closes #227
    Attribution. Closes #244, #267
    Get rid of JCommander. Closes #266.
    Native clojure backend. Closes #138, #265
    Added format attribute to @Cucumber.Options. Updated Selenium screenshot example, which should obsolete the need for change requested in #247
    Update history
    Ignore duplicate features instead of throwing exception. Closes #259.
    Better error message when filters are too strict. Closes #245.
    History
    UTF-8 everywhere. Closes #251
    Fix history
    Don't allow inheritance in glue code (stepdefs and hooks). Also fixes #257 in a more encapsulated way.
    Update history
    Attribution. Closes #241,#242.
    Support for java.util.Calendar arguments in stepdefs
    Sigh. Maven. Release again.
    Try release one more time
    Did something wrong during release, need to bump version.
    Prep for release of 1.0.0.RC17
    Renamed UnitFormatter to JUnitFormatter. Made some minor changes and deleted unused xsd. Can be added back later.
    Removed byte order mark and fixed bad formatting. Closes #224
    Attribution. Closes #212
    Stacktrace filtering filters away too much. Closes #228.
    Improved JUnit runner. Closes #107,#211,#216
    Release 1.0.0.RC16
    Embed text and images in reports. Closes #205.
    Detect duplicate step definitions. Closes #213.
    Auto-generated step definitions should escape dollar signs. Closes #204. Closes #215
    Update history
    Attribution
    Ambiguous step definitions don't cause Cucumber to blow up, they just fail the step. Fixed #206, but broke the native groovy CLI runner, which I had to disable - see #212
    Attribution
    Compiled Groovy stepdef scripts are found as well as source ones
    I18n for Jython. Closes #176.
    Fixed wrong version in header
    Update History
    Package XStream and diffutils inside core. Closes #179.
    Fail if no features are found. Closes #163
    Fail if duplicate features are detected. Closes #165.
    Categorise changes
    Prep for 1.0.0.RC14
    Remove some dead code. Closes #189.
    Attribution. Closes #185.
    Attribution. Closes #184.
    Attribution
    Update links
    Attribution
    Properly flush and close formatters. Closes #173
    Better JUnit hooks
    Bugfix: Fixed Scenario Outlines for CLI. Closes #170
    openejb is back
    Release 1.0.0.RC12
    Tagged hooks are executed properly. Closes #146.
    Attribution
    GluePath can be a package name or a path - both are accepted. Closes #164
    Fix Scala build. Closes #167.
    This seems like a good idea.
    Fix Windows build problems mentioned in #154. Add History entries.
    Release 1.0.0.RC6
    Release RC5
    Fix clojure snippets
    Added history for #139
    Publish local artifacts to local m2 repo so they can be picked up by Maven projects. Closes #143 Use userOrigin=true. Fixes #141.
    Release 1.0.0.RC4
    Added cobertura code coverage and started to clean up some cruftiness in the io package
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.6
    Ignore kannada language for java and jython - doesn't parse/compile
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.5
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.4
    Bump to latest gherkin
    Don't shade jruby/jython/groovy artifacts - only for native packages (gem,egg,zip). Closes #518, #522.
    Got rid of Maven Shade Plugin wherever it was possible.
    
    Artefacts which still have need to use the plugin:
    
        - cucumber-groovy
        - cucumber-jython
        - cucumber-jruby
    Bump Gherkin version
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.2
    Updated library versions
    Updated library versions
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.0
    Some last minute fixes before the 1.1.0 release.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Add support for non-UTF-8 encodings
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.13
    Release 1.0.13 with better packaging
    increase version to prepare for next development iteration:
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.12
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.11
    Undo bad changes I mkade in bbe40d3d451703f41ef36d16415144268d6ff72a while fixing #356
    Fix tests that broke in #356
    Tweak poms so they work in IDEA as well
    Maven fun
    Cleaning up poms
    Build passes with cucumber-deps
    Cleaning up poms
    Build passes with cucumber-deps
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.8
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.7
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.5
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Added cobertura code coverage and started to clean up some cruftiness in the io package
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.4
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0
          oe               .n~~%x.                .n~~%x.
        .@88             x88X   888.            x88X   888.
    ==*88888            X888X   8888L          X888X   8888L
       88888           X8888X   88888         X8888X   88888
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888f        88888X   88888f
       88888       .   48888X   88888     .   48888X   88888
       88888     .@8c   ?888X   8888"   .@8c   ?888X   8888"
       88888    '%888"   "88X   88*`   '%888"   "88X   88*`
    '**%%%%%%**   ^*       ^"==="`       ^*       ^"==="`
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC24
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC23
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC22
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC21
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC20
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC19
    Try release one more time
    Let's try that release again
    Closes #230
    Optimize imports, format code
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC16
    return english as default language in DSL.py
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC15
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC14
    steps toward Jython i18n support, still one hard-coded piece to remove, and some work around languages having unicode issues
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC13
    Jython updates: Additional Gherkin word support (previously just given in EN), and I18n code generation
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC12
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC11
    DRY up dependency versions
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC8
    Clean up jython full jar
    Fix the version number appropriately
    copy the jar in the pre-integration-test phase
    Started on jython package #151
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC7
    Update version
    Bringing jython up to speed with the ivy dependencies
    Set project version correctly
    Re-adding the poms from before the ant/ivy stuff
    Dual build
    Added back poms - they are generated from ivy.xml (except the parent pom)
    Don't come back maven
    Maven hosed the previous release attempt.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC1
    Let's try to make a release
    Change dependencies so that full-jars don't bundle all jars (users are expected to provide them themselves). Closes #28.
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    Added Jython support
    Changed groupId to info.cukes, and prepended cucumber- to all artifacts. Added shade plugin, so all artifacts have a -full (self contained) jar. Closes #11.
    Fix version/newline/maven problems
    Fixed pom issues
    Added an example
    Cleaning poms from duplicate project versions.
    Moved stuff around
    More submodules
    More submodules, new Annotations.
    Better abstractions by bringing in Groovy
    Don't shade jruby/jython/groovy artifacts - only for native packages (gem,egg,zip). Closes #518, #522.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Release 1.0.13 with better packaging
    Ease RuntimeOptions into the Runtime API
    Pass in ClassLoader from the outside. This is necessary in order to construct a working Runtime from a different environment, like Jython. See #151
    Started on jython package #151
    Don't shade jruby/jython/groovy artifacts - only for native packages (gem,egg,zip). Closes #518, #522.
    Release 1.0.13 with better packaging
    Started on jython package #151
    Added DataTable scenario
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Added Jython support
    Added JRuby support. Closes #3.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Add Before and After annotation support for Jython
    Use PyList instead of PyArray when converting DataTable for Jython. Ref #602.
    Added DataTable step definition
    [Jython] Access to scenario in Before and After hooks. Closes #582.
    
    The implementation is a little ghetto. I tried to get the arity
    of the hook function using inspect.getargspec, but couldn't get
    it to work. This implementation will most likely be sufficient though.
    Add Before and After annotation support for Jython
    Jython updates: Additional Gherkin word support (previously just given in EN), and I18n code generation
    Added Jython support
    Align snippets for quoted arguments with cucumber-ruby
    New Snippet text, closes #618.
    
    Change to the new Snippet text. Update History.md.
    Fix a one off error in JRubySnippet.java.
    Update Jython snippets now that we support tables
    Refactored SnippetGenerator.
    
    There was too much parallel effort in the CamelCase and Underscore
    implementations, so the new structure shares most of the logic
    and implements the different logic in a Concatenator.
    
    I also made sure IntelliJ doesn't break because of the new
    scenario lifecycle methods in the gherkin formatter interface.
    Refactored --snippet option. Closes #561, #302
    Added missing  argument in Jython snippets. Closes #324
    Update all snippets to throw PendingException, following up on #271. Need to make Clojure do this.
    Replace inheritance with delegation for #138
    Upgrade deps, improve snippets.
    Moved the JUnit package and configured API docs
    Added jython
    Added Jython support
    Moved stuff around
    Remove warnings and deprecated code
    Add Before and After annotation support for Jython
    Update all snippets to throw PendingException, following up on #271. Need to make Clojure do this.
    fix improper formatting
    fix improper formatting
    return english as default language in DSL.py
    steps toward Jython i18n support, still one hard-coded piece to remove, and some work around languages having unicode issues
    Jython updates: Additional Gherkin word support (previously just given in EN), and I18n code generation
    Added Jython support
    steps toward Jython i18n support, still one hard-coded piece to remove, and some work around languages having unicode issues
    Slightly improved python i18n. This gets rid of latin accents (fixes NO, FR etc), but symbolic characters are still there....
    Jython updates: Additional Gherkin word support (previously just given in EN), and I18n code generation
    Improved Transformer API
    Add support for List step definition parameters
    Build passes with cucumber-deps
    Pass a SingleValueConverter to ParameterType
    Build passes with cucumber-deps
    Pass a SingleValueConverter to ParameterType
    Refactored the StepDefinition interface so that backends for dynamic languages can infer the type of a parameter based on the actual argument type passed to it.
    Show code source for Java step definitions in case of duplicates or ambiguous stepdefs.
    Use I18n instead of Locale since converting from Locale to I18n is tricky.
    Refactoring out the Reporter from the step call
    
    Created a new method, runUnreportedStep, that simply grabs the step out of a match,
    throwing an exception if it does not match, and executes it.
    
    All the exceptions are required to trickle up so that they're caught by the step that
    does the actual execution so that things look right in the output.
    
    A snippit will be generated if you call a non existing step, so that's handy :)
    Revert "Bring the URI forward to the step evaluation too."
    
    This reverts commit 1851bfe0c56c8abd223ad25a57988c76d0c66396.
    Bring the URI forward to the step evaluation too.
    
    This doesn't smell right, there must be something I'm doing entirely wrong.
    Refactor to change the execut method to include Reporter and Locale
    Tagged (scoped) step definitions are reverted. Bad idea.
    Step Deinitions can be scoped by tag (just like hooks). Currently only implemented for Java.
    Date format can be specified with a @DateFormat annotation
    Refactoring to capture more info about types
    Fix broken conversion of table to List<Map<String,String>>. Addresses @nightscape's comment in #49.
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    Added Jython support
    Refactored SnippetGenerator.
    
    There was too much parallel effort in the CamelCase and Underscore
    implementations, so the new structure shares most of the logic
    and implements the different logic in a Concatenator.
    
    I also made sure IntelliJ doesn't break because of the new
    scenario lifecycle methods in the gherkin formatter interface.
    Use PyList instead of PyArray when converting DataTable for Jython. Ref #602.
    DataTable parameter fix
    Fix for DataTable as parameter in Jython steps
    
    If the argument is a DataTable it is converted to the raw form (List<List<String>) then converted to PyArray so you can pass it as a PyObject
    [Jython] Access to scenario in Before and After hooks. Closes #582.
    
    The implementation is a little ghetto. I tried to get the arity
    of the hook function using inspect.getargspec, but couldn't get
    it to work. This implementation will most likely be sufficient though.
    Refactored --snippet option. Closes #561, #302
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Formatting
    Add Before and After annotation support for Jython
    Fix several problems with resource loading for scripting languages (after the new classpath: scheme was introduced)
    Fixed some regressions to glue code introduced in 1.0.2. Might fix issue #299, but that's not confirmed.
    Update all snippets to throw PendingException, following up on #271. Need to make Clojure do this.
    remove temporary EN.py execution
    steps toward Jython i18n support, still one hard-coded piece to remove, and some work around languages having unicode issues
    Pass in ClassLoader from the outside. This is necessary in order to construct a working Runtime from a different environment, like Jython. See #151
    Created an UnreportedStepExecutor interface
    
    I don't like that this current implementation passes the Runtime into the backends
    It shouldn't. So I used the interface, so hopefully at some point, refactoring in the
    future won't suck.
    
    It passes all unit tests.
    rename world to glue
    Removed OneTimeResourceLoader and made sure glue code is loaded only once. The Backend.loadGlue method should ideally be removed, and the World and gluePaths passed to each Backend's constructor. Other TODOs on this branch: rename World to Glue. RuntimeGlue should not have a ref back to Runtime. Make Scala work again (disabled it because I don't have the required Scala fu)
    Replace inheritance with delegation for #138
    Load resoureces from classpath when using JUnit, load them from filesystem when using CLI
    All tests passing, ut still not good
    Rewrote a lot of the resource loading code
    gluePath is the best name I have come up with for 'class path or script path where stepdefs and hooks live'
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    Added Jython support
    [Jython] Access to scenario in Before and After hooks. Closes #582.
    
    The implementation is a little ghetto. I tried to get the arity
    of the hook function using inspect.getargspec, but couldn't get
    it to work. This implementation will most likely be sufficient though.
    Upgrade to gherkin 2.12.0
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Formatting
    Add Before and After annotation support for Jython
    Update Jython snippets now that we support tables
    Added missing  argument in Jython snippets. Closes #324
    Update all snippets to throw PendingException, following up on #271. Need to make Clojure do this.
    Snippets for DataTable include a hint about using List<YourType>, so people discover this neat technique
    Optimize imports, format code
    Replace inheritance with delegation for #138
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.6
    Added Gosu support.
    
    Squashed commit of the following:
    
    commit 677ec0244cf33e40f5159250095112ac5622eb25
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 19:49:44 2014 +0000
    
        Use gosu jars from repo
    
    commit f35d0f7ad1737d126310beaf9a19ceae0a1a5cff
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 19:43:26 2014 +0000
    
        Added gosu snippets
    
    commit b8cfce6019bb12d701cd68235cd9420d07b9e991
    Merge: 5c90a6b 7e1d02f
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 16:05:32 2014 +0000
    
        Merge branch 'master' into gosu
    
    commit 5c90a6bce2f09788ed99a8e6546c1d1f03774230
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Wed Mar 12 17:01:49 2014 +0000
    
        Better Gosu
    
    commit 998b787c30e7263a63c755c6b3b668a71b358a23
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Fri Mar 7 23:06:43 2014 +0000
    
        Remove dead code
    
    commit 927bc45a977b7681be644f6f1276231be5e49998
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 10:16:13 2014 +0000
    
        For now, define the DSL alongside the stepdef
    
    commit 237f71beee6440f9f2f9f64b2d08998064e635b9
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 10:03:09 2014 +0000
    
        Try to define a DSL
    
    commit 1e3df07a25ef8009684431e78c33751c4db28136
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 09:52:50 2014 +0000
    
        Use Gosu Programs instead of classes. Need to figure out how to define Given.
    
    commit c9bd0adb5cceffdea6fe2d9e9feba8b8763472a1
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 00:28:06 2014 +0000
    
        Clean up a little
    
    commit 4b34b5b8bda1aca6149894cae8d9587446e1ba9a
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Wed Mar 5 23:30:59 2014 +0000
    
        Started experimental work on gosu module
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.5
    Before and After hooks support added to Rhino
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.4
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.0
    Some last minute fixes before the 1.1.0 release.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.13
    Release 1.0.13 with better packaging
    increase version to prepare for next development iteration:
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.12
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.11
    Undo bad changes I mkade in bbe40d3d451703f41ef36d16415144268d6ff72a while fixing #356
    Fix tests that broke in #356
    Tweak poms so they work in IDEA as well
    Maven fun
    Bump versions
    Cleaning up poms
    Build passes with cucumber-deps
    Bump versions
    Cleaning up poms
    Build passes with cucumber-deps
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.8
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.7
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.5
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Added cobertura code coverage and started to clean up some cruftiness in the io package
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.4
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0
          oe               .n~~%x.                .n~~%x.
        .@88             x88X   888.            x88X   888.
    ==*88888            X888X   8888L          X888X   8888L
       88888           X8888X   88888         X8888X   88888
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888f        88888X   88888f
       88888       .   48888X   88888     .   48888X   88888
       88888     .@8c   ?888X   8888"   .@8c   ?888X   8888"
       88888    '%888"   "88X   88*`   '%888"   "88X   88*`
    '**%%%%%%**   ^*       ^"==="`       ^*       ^"==="`
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC24
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC23
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC22
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC21
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC20
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC19
    Try release one more time
    Let's try that release again
    Optimize imports, format code
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC16
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC15
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC13
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC12
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC11
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC8
    Fix the version number appropriately
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC7
    Update version
    Set project version correctly
    Re-adding the poms from before the ant/ivy stuff
    Dual build
    Added back poms - they are generated from ivy.xml (except the parent pom)
    Don't come back maven
    Upgrade deps, improve snippets.
    Maven hosed the previous release attempt.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC1
    Let's try to make a release
    Change dependencies so that full-jars don't bundle all jars (users are expected to provide them themselves). Closes #28.
    Changed groupId to info.cukes, and prepended cucumber- to all artifacts. Added shade plugin, so all artifacts have a -full (self contained) jar. Closes #11.
    Fix version/newline/maven problems
    Fixed pom issues
    Added an example
    Cleaning poms from duplicate project versions.
    Moved stuff around
    More submodules
    More submodules, new Annotations.
    Better abstractions by bringing in Groovy
    Added Gosu support.
    
    Squashed commit of the following:
    
    commit 677ec0244cf33e40f5159250095112ac5622eb25
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 19:49:44 2014 +0000
    
        Use gosu jars from repo
    
    commit f35d0f7ad1737d126310beaf9a19ceae0a1a5cff
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 19:43:26 2014 +0000
    
        Added gosu snippets
    
    commit b8cfce6019bb12d701cd68235cd9420d07b9e991
    Merge: 5c90a6b 7e1d02f
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 16:05:32 2014 +0000
    
        Merge branch 'master' into gosu
    
    commit 5c90a6bce2f09788ed99a8e6546c1d1f03774230
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Wed Mar 12 17:01:49 2014 +0000
    
        Better Gosu
    
    commit 998b787c30e7263a63c755c6b3b668a71b358a23
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Fri Mar 7 23:06:43 2014 +0000
    
        Remove dead code
    
    commit 927bc45a977b7681be644f6f1276231be5e49998
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 10:16:13 2014 +0000
    
        For now, define the DSL alongside the stepdef
    
    commit 237f71beee6440f9f2f9f64b2d08998064e635b9
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 10:03:09 2014 +0000
    
        Try to define a DSL
    
    commit 1e3df07a25ef8009684431e78c33751c4db28136
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 09:52:50 2014 +0000
    
        Use Gosu Programs instead of classes. Need to figure out how to define Given.
    
    commit c9bd0adb5cceffdea6fe2d9e9feba8b8763472a1
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 00:28:06 2014 +0000
    
        Clean up a little
    
    commit 4b34b5b8bda1aca6149894cae8d9587446e1ba9a
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Wed Mar 5 23:30:59 2014 +0000
    
        Started experimental work on gosu module
    Added Gosu support.
    
    Squashed commit of the following:
    
    commit 677ec0244cf33e40f5159250095112ac5622eb25
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 19:49:44 2014 +0000
    
        Use gosu jars from repo
    
    commit f35d0f7ad1737d126310beaf9a19ceae0a1a5cff
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 19:43:26 2014 +0000
    
        Added gosu snippets
    
    commit b8cfce6019bb12d701cd68235cd9420d07b9e991
    Merge: 5c90a6b 7e1d02f
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 16:05:32 2014 +0000
    
        Merge branch 'master' into gosu
    
    commit 5c90a6bce2f09788ed99a8e6546c1d1f03774230
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Wed Mar 12 17:01:49 2014 +0000
    
        Better Gosu
    
    commit 998b787c30e7263a63c755c6b3b668a71b358a23
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Fri Mar 7 23:06:43 2014 +0000
    
        Remove dead code
    
    commit 927bc45a977b7681be644f6f1276231be5e49998
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 10:16:13 2014 +0000
    
        For now, define the DSL alongside the stepdef
    
    commit 237f71beee6440f9f2f9f64b2d08998064e635b9
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 10:03:09 2014 +0000
    
        Try to define a DSL
    
    commit 1e3df07a25ef8009684431e78c33751c4db28136
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 09:52:50 2014 +0000
    
        Use Gosu Programs instead of classes. Need to figure out how to define Given.
    
    commit c9bd0adb5cceffdea6fe2d9e9feba8b8763472a1
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 00:28:06 2014 +0000
    
        Clean up a little
    
    commit 4b34b5b8bda1aca6149894cae8d9587446e1ba9a
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Wed Mar 5 23:30:59 2014 +0000
    
        Started experimental work on gosu module
    Added Gosu support.
    
    Squashed commit of the following:
    
    commit 677ec0244cf33e40f5159250095112ac5622eb25
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 19:49:44 2014 +0000
    
        Use gosu jars from repo
    
    commit f35d0f7ad1737d126310beaf9a19ceae0a1a5cff
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 19:43:26 2014 +0000
    
        Added gosu snippets
    
    commit b8cfce6019bb12d701cd68235cd9420d07b9e991
    Merge: 5c90a6b 7e1d02f
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 16:05:32 2014 +0000
    
        Merge branch 'master' into gosu
    
    commit 5c90a6bce2f09788ed99a8e6546c1d1f03774230
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Wed Mar 12 17:01:49 2014 +0000
    
        Better Gosu
    
    commit 998b787c30e7263a63c755c6b3b668a71b358a23
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Fri Mar 7 23:06:43 2014 +0000
    
        Remove dead code
    
    commit 927bc45a977b7681be644f6f1276231be5e49998
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 10:16:13 2014 +0000
    
        For now, define the DSL alongside the stepdef
    
    commit 237f71beee6440f9f2f9f64b2d08998064e635b9
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 10:03:09 2014 +0000
    
        Try to define a DSL
    
    commit 1e3df07a25ef8009684431e78c33751c4db28136
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 09:52:50 2014 +0000
    
        Use Gosu Programs instead of classes. Need to figure out how to define Given.
    
    commit c9bd0adb5cceffdea6fe2d9e9feba8b8763472a1
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 00:28:06 2014 +0000
    
        Clean up a little
    
    commit 4b34b5b8bda1aca6149894cae8d9587446e1ba9a
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Wed Mar 5 23:30:59 2014 +0000
    
        Started experimental work on gosu module
    Added Gosu support.
    
    Squashed commit of the following:
    
    commit 677ec0244cf33e40f5159250095112ac5622eb25
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 19:49:44 2014 +0000
    
        Use gosu jars from repo
    
    commit f35d0f7ad1737d126310beaf9a19ceae0a1a5cff
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 19:43:26 2014 +0000
    
        Added gosu snippets
    
    commit b8cfce6019bb12d701cd68235cd9420d07b9e991
    Merge: 5c90a6b 7e1d02f
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 16:05:32 2014 +0000
    
        Merge branch 'master' into gosu
    
    commit 5c90a6bce2f09788ed99a8e6546c1d1f03774230
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Wed Mar 12 17:01:49 2014 +0000
    
        Better Gosu
    
    commit 998b787c30e7263a63c755c6b3b668a71b358a23
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Fri Mar 7 23:06:43 2014 +0000
    
        Remove dead code
    
    commit 927bc45a977b7681be644f6f1276231be5e49998
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 10:16:13 2014 +0000
    
        For now, define the DSL alongside the stepdef
    
    commit 237f71beee6440f9f2f9f64b2d08998064e635b9
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 10:03:09 2014 +0000
    
        Try to define a DSL
    
    commit 1e3df07a25ef8009684431e78c33751c4db28136
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 09:52:50 2014 +0000
    
        Use Gosu Programs instead of classes. Need to figure out how to define Given.
    
    commit c9bd0adb5cceffdea6fe2d9e9feba8b8763472a1
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 00:28:06 2014 +0000
    
        Clean up a little
    
    commit 4b34b5b8bda1aca6149894cae8d9587446e1ba9a
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Wed Mar 5 23:30:59 2014 +0000
    
        Started experimental work on gosu module
    Align snippets for quoted arguments with cucumber-ruby
    New Snippet text, closes #618.
    
    Change to the new Snippet text. Update History.md.
    Fix a one off error in JRubySnippet.java.
    Refactored --snippet option. Closes #561, #302
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    fix cucumber-jvm #391
    fixed & simplified groovy step snippets
    Moved java file from groovy to java
    Update all snippets to throw PendingException, following up on #271. Need to make Clojure do this.
    Support DocString and DataTable in generated snippets. Closes #227
    Escape regex characters in steps
    
    The current rules for generating step definition templates for
    undefined steps do not escape regular expression characters.  For
    instance, the following step:
    
    Given I have $5
    
    ...generates the following template:
    
    @Given("^I have $(\\d+) in my account$")
    
    Java sees the dollar sign as a regex end-of-string marker, and the
    scenario won't run correctly.  This commit escapes dollar signs,
    parentheses, and square brackets.  The step shown above will now be
    correctly translated into a template as:
    
    @Given("^I have \\$(\\d+) in my account$")
    
    This commit changes the general SnippetGenerator.java file; it assumes
    the set of special regular expression characters will be the same
    across JVM languages.  This condition appears to hold for the currently
    supported languages.  If this changes in the future, it should be
    possible to wrap the list of escaped regex chars in a function that
    can be overridden.
    Replace inheritance with delegation for #138
    Formatting
    patch for cucumber-jvm issue #117
    Changes for gherkin 2.6.0. Will merge to master when gherkin has synced to maven central.
    Optimize imports, reformat
    Fix for #56
    Snippet definition for Java generates method name with colon in it.
    Simplified improved snippet code, removed hamcrest (not a huge fan).
    The pattern for digits in step snippets pattern are escaped copy paste ready
    Moved stuff around
    WIP - broke a lot of stuff
    Closer to correct scenario outline implementation. Need to make sure it works with multiple Examples under one Scenario Outline.
    Snippets for java, and a reusable superclass for other backends.
    Added Gosu support.
    
    Squashed commit of the following:
    
    commit 677ec0244cf33e40f5159250095112ac5622eb25
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 19:49:44 2014 +0000
    
        Use gosu jars from repo
    
    commit f35d0f7ad1737d126310beaf9a19ceae0a1a5cff
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 19:43:26 2014 +0000
    
        Added gosu snippets
    
    commit b8cfce6019bb12d701cd68235cd9420d07b9e991
    Merge: 5c90a6b 7e1d02f
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 16:05:32 2014 +0000
    
        Merge branch 'master' into gosu
    
    commit 5c90a6bce2f09788ed99a8e6546c1d1f03774230
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Wed Mar 12 17:01:49 2014 +0000
    
        Better Gosu
    
    commit 998b787c30e7263a63c755c6b3b668a71b358a23
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Fri Mar 7 23:06:43 2014 +0000
    
        Remove dead code
    
    commit 927bc45a977b7681be644f6f1276231be5e49998
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 10:16:13 2014 +0000
    
        For now, define the DSL alongside the stepdef
    
    commit 237f71beee6440f9f2f9f64b2d08998064e635b9
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 10:03:09 2014 +0000
    
        Try to define a DSL
    
    commit 1e3df07a25ef8009684431e78c33751c4db28136
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 09:52:50 2014 +0000
    
        Use Gosu Programs instead of classes. Need to figure out how to define Given.
    
    commit c9bd0adb5cceffdea6fe2d9e9feba8b8763472a1
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 00:28:06 2014 +0000
    
        Clean up a little
    
    commit 4b34b5b8bda1aca6149894cae8d9587446e1ba9a
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Wed Mar 5 23:30:59 2014 +0000
    
        Started experimental work on gosu module
    Moved the JUnit package and configured API docs
    Make sure examples are working. Should run them before each release.
    Scala fixes
    Upgrade deps, improve snippets.
    Added Jython support
    Moved stuff around
    Added Gosu support.
    
    Squashed commit of the following:
    
    commit 677ec0244cf33e40f5159250095112ac5622eb25
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 19:49:44 2014 +0000
    
        Use gosu jars from repo
    
    commit f35d0f7ad1737d126310beaf9a19ceae0a1a5cff
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 19:43:26 2014 +0000
    
        Added gosu snippets
    
    commit b8cfce6019bb12d701cd68235cd9420d07b9e991
    Merge: 5c90a6b 7e1d02f
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 16:05:32 2014 +0000
    
        Merge branch 'master' into gosu
    
    commit 5c90a6bce2f09788ed99a8e6546c1d1f03774230
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Wed Mar 12 17:01:49 2014 +0000
    
        Better Gosu
    
    commit 998b787c30e7263a63c755c6b3b668a71b358a23
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Fri Mar 7 23:06:43 2014 +0000
    
        Remove dead code
    
    commit 927bc45a977b7681be644f6f1276231be5e49998
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 10:16:13 2014 +0000
    
        For now, define the DSL alongside the stepdef
    
    commit 237f71beee6440f9f2f9f64b2d08998064e635b9
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 10:03:09 2014 +0000
    
        Try to define a DSL
    
    commit 1e3df07a25ef8009684431e78c33751c4db28136
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 09:52:50 2014 +0000
    
        Use Gosu Programs instead of classes. Need to figure out how to define Given.
    
    commit c9bd0adb5cceffdea6fe2d9e9feba8b8763472a1
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 00:28:06 2014 +0000
    
        Clean up a little
    
    commit 4b34b5b8bda1aca6149894cae8d9587446e1ba9a
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Wed Mar 5 23:30:59 2014 +0000
    
        Started experimental work on gosu module
    Added Gosu support.
    
    Squashed commit of the following:
    
    commit 677ec0244cf33e40f5159250095112ac5622eb25
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 19:49:44 2014 +0000
    
        Use gosu jars from repo
    
    commit f35d0f7ad1737d126310beaf9a19ceae0a1a5cff
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 19:43:26 2014 +0000
    
        Added gosu snippets
    
    commit b8cfce6019bb12d701cd68235cd9420d07b9e991
    Merge: 5c90a6b 7e1d02f
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 16:05:32 2014 +0000
    
        Merge branch 'master' into gosu
    
    commit 5c90a6bce2f09788ed99a8e6546c1d1f03774230
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Wed Mar 12 17:01:49 2014 +0000
    
        Better Gosu
    
    commit 998b787c30e7263a63c755c6b3b668a71b358a23
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Fri Mar 7 23:06:43 2014 +0000
    
        Remove dead code
    
    commit 927bc45a977b7681be644f6f1276231be5e49998
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 10:16:13 2014 +0000
    
        For now, define the DSL alongside the stepdef
    
    commit 237f71beee6440f9f2f9f64b2d08998064e635b9
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 10:03:09 2014 +0000
    
        Try to define a DSL
    
    commit 1e3df07a25ef8009684431e78c33751c4db28136
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 09:52:50 2014 +0000
    
        Use Gosu Programs instead of classes. Need to figure out how to define Given.
    
    commit c9bd0adb5cceffdea6fe2d9e9feba8b8763472a1
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 00:28:06 2014 +0000
    
        Clean up a little
    
    commit 4b34b5b8bda1aca6149894cae8d9587446e1ba9a
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Wed Mar 5 23:30:59 2014 +0000
    
        Started experimental work on gosu module
    Minor refactoring
    Timeout is a long, not int. Be explicit that it's millis.
    Improved Transformer API
    Add support for List step definition parameters
    Pass a SingleValueConverter to ParameterType
    Pass a SingleValueConverter to ParameterType
    Refactored the StepDefinition interface so that backends for dynamic languages can infer the type of a parameter based on the actual argument type passed to it.
    Step definitions and hooks can now specify a timeout (milliseconds) after which a  is thrown if the stepdef/hook has not completed. Closes #343
    Show code source for Java step definitions in case of duplicates or ambiguous stepdefs.
    Use I18n instead of Locale since converting from Locale to I18n is tricky.
    Refactoring out the Reporter from the step call
    
    Created a new method, runUnreportedStep, that simply grabs the step out of a match,
    throwing an exception if it does not match, and executes it.
    
    All the exceptions are required to trickle up so that they're caught by the step that
    does the actual execution so that things look right in the output.
    
    A snippit will be generated if you call a non existing step, so that's handy :)
    Revert "Bring the URI forward to the step evaluation too."
    
    This reverts commit 1851bfe0c56c8abd223ad25a57988c76d0c66396.
    Bring the URI forward to the step evaluation too.
    
    This doesn't smell right, there must be something I'm doing entirely wrong.
    Refactor to change the execut method to include Reporter and Locale
    Tagged (scoped) step definitions are reverted. Bad idea.
    Step Deinitions can be scoped by tag (just like hooks). Currently only implemented for Java.
    Fixed some Groovy bugs
    Date format can be specified with a @DateFormat annotation
    Refactoring to capture more info about types
    Fix broken conversion of table to List<Map<String,String>>. Addresses @nightscape's comment in #49.
    Implement Table.asList(Class itemType). Clean up imports
    Moved table conversion logic from java to core
    All building/passing except scala
    Misc changes to bring in XStream to do some of the heavy object conversion lifting
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    Working on Issue #19
    Added the possibility to process tables.
    Added a @JavaBeanClass annotation to allow passing list of beans to
    Steps.
    Working on Issue #9
    Added the possibility to process tables.
    Added a @JavaBeanClass annotation to allow passing list of beans to
    Steps.
    Ambiguous matches are now reported correctly. Snippets are printed from CLI.
    Take Locale from Gherkin feature instead of Step Definition. Make an outer Java class for each annotation - makes imports nicer (No more @EN.Given). Moved Java annotation code to java project.
    Adding locale in StepDefinition in order to transform arguments. It
    would be better to have locale set on an higher level, for instance
    Feature.
    Moved stuff around
    WIP - broke a lot of stuff
    If you write code that forces me to check your exceptions, then I will rip off your head and piss in your dead skull.
    More submodules
    Ioke passing
    Sort of got Rhino working
    Abstract backend test
    Better abstractions by bringing in Groovy
    Added Gosu support.
    
    Squashed commit of the following:
    
    commit 677ec0244cf33e40f5159250095112ac5622eb25
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 19:49:44 2014 +0000
    
        Use gosu jars from repo
    
    commit f35d0f7ad1737d126310beaf9a19ceae0a1a5cff
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 19:43:26 2014 +0000
    
        Added gosu snippets
    
    commit b8cfce6019bb12d701cd68235cd9420d07b9e991
    Merge: 5c90a6b 7e1d02f
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 16:05:32 2014 +0000
    
        Merge branch 'master' into gosu
    
    commit 5c90a6bce2f09788ed99a8e6546c1d1f03774230
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Wed Mar 12 17:01:49 2014 +0000
    
        Better Gosu
    
    commit 998b787c30e7263a63c755c6b3b668a71b358a23
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Fri Mar 7 23:06:43 2014 +0000
    
        Remove dead code
    
    commit 927bc45a977b7681be644f6f1276231be5e49998
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 10:16:13 2014 +0000
    
        For now, define the DSL alongside the stepdef
    
    commit 237f71beee6440f9f2f9f64b2d08998064e635b9
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 10:03:09 2014 +0000
    
        Try to define a DSL
    
    commit 1e3df07a25ef8009684431e78c33751c4db28136
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 09:52:50 2014 +0000
    
        Use Gosu Programs instead of classes. Need to figure out how to define Given.
    
    commit c9bd0adb5cceffdea6fe2d9e9feba8b8763472a1
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 00:28:06 2014 +0000
    
        Clean up a little
    
    commit 4b34b5b8bda1aca6149894cae8d9587446e1ba9a
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Wed Mar 5 23:30:59 2014 +0000
    
        Started experimental work on gosu module
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    simplified backslash escaping
    fix cucumber-jvm #391
    fixed & simplified groovy step snippets
    Update all snippets to throw PendingException, following up on #271. Need to make Clojure do this.
    Snippets for DataTable include a hint about using List<YourType>, so people discover this neat technique
    Replace inheritance with delegation for #138
    Reenabled Scala
    Upgrade deps, improve snippets.
    Simplified improved snippet code, removed hamcrest (not a huge fan).
    Ambiguous matches are now reported correctly. Snippets are printed from CLI.
    Moved stuff around
    WIP - broke a lot of stuff
    Added snippet support for all languages.
    Closer to correct scenario outline implementation. Need to make sure it works with multiple Examples under one Scenario Outline.
    Snippets for java, and a reusable superclass for other backends.
    Added Gosu support.
    
    Squashed commit of the following:
    
    commit 677ec0244cf33e40f5159250095112ac5622eb25
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 19:49:44 2014 +0000
    
        Use gosu jars from repo
    
    commit f35d0f7ad1737d126310beaf9a19ceae0a1a5cff
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 19:43:26 2014 +0000
    
        Added gosu snippets
    
    commit b8cfce6019bb12d701cd68235cd9420d07b9e991
    Merge: 5c90a6b 7e1d02f
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 16:05:32 2014 +0000
    
        Merge branch 'master' into gosu
    
    commit 5c90a6bce2f09788ed99a8e6546c1d1f03774230
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Wed Mar 12 17:01:49 2014 +0000
    
        Better Gosu
    
    commit 998b787c30e7263a63c755c6b3b668a71b358a23
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Fri Mar 7 23:06:43 2014 +0000
    
        Remove dead code
    
    commit 927bc45a977b7681be644f6f1276231be5e49998
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 10:16:13 2014 +0000
    
        For now, define the DSL alongside the stepdef
    
    commit 237f71beee6440f9f2f9f64b2d08998064e635b9
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 10:03:09 2014 +0000
    
        Try to define a DSL
    
    commit 1e3df07a25ef8009684431e78c33751c4db28136
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 09:52:50 2014 +0000
    
        Use Gosu Programs instead of classes. Need to figure out how to define Given.
    
    commit c9bd0adb5cceffdea6fe2d9e9feba8b8763472a1
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 00:28:06 2014 +0000
    
        Clean up a little
    
    commit 4b34b5b8bda1aca6149894cae8d9587446e1ba9a
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Wed Mar 5 23:30:59 2014 +0000
    
        Started experimental work on gosu module
    Added Gosu support.
    
    Squashed commit of the following:
    
    commit 677ec0244cf33e40f5159250095112ac5622eb25
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 19:49:44 2014 +0000
    
        Use gosu jars from repo
    
    commit f35d0f7ad1737d126310beaf9a19ceae0a1a5cff
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 19:43:26 2014 +0000
    
        Added gosu snippets
    
    commit b8cfce6019bb12d701cd68235cd9420d07b9e991
    Merge: 5c90a6b 7e1d02f
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 16:05:32 2014 +0000
    
        Merge branch 'master' into gosu
    
    commit 5c90a6bce2f09788ed99a8e6546c1d1f03774230
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Wed Mar 12 17:01:49 2014 +0000
    
        Better Gosu
    
    commit 998b787c30e7263a63c755c6b3b668a71b358a23
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Fri Mar 7 23:06:43 2014 +0000
    
        Remove dead code
    
    commit 927bc45a977b7681be644f6f1276231be5e49998
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 10:16:13 2014 +0000
    
        For now, define the DSL alongside the stepdef
    
    commit 237f71beee6440f9f2f9f64b2d08998064e635b9
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 10:03:09 2014 +0000
    
        Try to define a DSL
    
    commit 1e3df07a25ef8009684431e78c33751c4db28136
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 09:52:50 2014 +0000
    
        Use Gosu Programs instead of classes. Need to figure out how to define Given.
    
    commit c9bd0adb5cceffdea6fe2d9e9feba8b8763472a1
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 00:28:06 2014 +0000
    
        Clean up a little
    
    commit 4b34b5b8bda1aca6149894cae8d9587446e1ba9a
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Wed Mar 5 23:30:59 2014 +0000
    
        Started experimental work on gosu module
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.5
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.4
    Code formatting according to /CONTRIBUTING.md
    Closes issue #448. Implementation based on SpringJunit4ClassRunner and still trying to stick to the previous behaviour as much as possible
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.2
    Upgrade to 3.2.0.RELEASE
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.0
    Some last minute fixes before the 1.1.0 release.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.13
    Release 1.0.13 with better packaging
    increase version to prepare for next development iteration:
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.12
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.11
    Undo bad changes I mkade in bbe40d3d451703f41ef36d16415144268d6ff72a while fixing #356
    Fix tests that broke in #356
    Tweak poms so they work in IDEA as well
    Cleaning up poms
    Build passes with cucumber-deps
    Cleaning up poms
    Build passes with cucumber-deps
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.8
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.7
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.5
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Added cobertura code coverage and started to clean up some cruftiness in the io package
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.4
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0
          oe               .n~~%x.                .n~~%x.
        .@88             x88X   888.            x88X   888.
    ==*88888            X888X   8888L          X888X   8888L
       88888           X8888X   88888         X8888X   88888
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888f        88888X   88888f
       88888       .   48888X   88888     .   48888X   88888
       88888     .@8c   ?888X   8888"   .@8c   ?888X   8888"
       88888    '%888"   "88X   88*`   '%888"   "88X   88*`
    '**%%%%%%**   ^*       ^"==="`       ^*       ^"==="`
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC24
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC23
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC22
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC21
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC20
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC19
    Try release one more time
    Let's try that release again
    Optimize imports, format code
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC16
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC15
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC13
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC12
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC11
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC8
    Fix the version number appropriately
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC7
    Update version
    Set project version correctly
    Re-adding the poms from before the ant/ivy stuff
    Dual build
    Added back poms - they are generated from ivy.xml (except the parent pom)
    Don't come back maven
    Maven hosed the previous release attempt.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC1
    Let's try to make a release
    spring-tx vs spring-context dependency
    Spring Tx Rollback Capability in Hookdef class
    Change dependencies so that full-jars don't bundle all jars (users are expected to provide them themselves). Closes #28.
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    Changed groupId to info.cukes, and prepended cucumber- to all artifacts. Added shade plugin, so all artifacts have a -full (self contained) jar. Closes #11.
    Fix version/newline/maven problems
    Fixed pom issues
    Added an example
    Cleaning poms from duplicate project versions.
    Moved stuff around
    Added a java-specific TCK to test various DI containers
    Much more modular
    More submodules
    More submodules, new Annotations.
    Better abstractions by bringing in Groovy
    Optimize imports, reformat
    Added Spring example based on xml configuration
    Working Guice and Spring examples
    Moved stuff around
    Support several backends. Still struggling with Guice and Spring.
    If you write code that forces me to check your exceptions, then I will rip off your head and piss in your dead skull.
    Move shit around
    Release 0.3.3 - upgrading lots of stuff
    Rename packages from cucumber to cuke4duke
    Added ant build.xml for simple example. Some more renames
    Lots of restructuring and renaming. Ruby code is now packaged inside the jar. No more gem packaging.
    Use UNIX, not Windows line endings
    Added support for spring autowiring into Step classes.
    Closes issue #448. Implementation based on SpringJunit4ClassRunner and still trying to stick to the previous behaviour as much as possible
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Mostly finished CLI refactoring
    Resolved #241
    
    Removed child spring context and implemented custom scope for glue code.
    cucumber-glue.xml is internal now. All context configuration may be done in cucumber.xml
    Optimize imports, reformat
    Added Spring example with xml configuration
    Added Spring example based on xml configuration
    Working Guice and Spring examples
    Moved stuff around
    Support several backends. Still struggling with Guice and Spring.
    If you write code that forces me to check your exceptions, then I will rip off your head and piss in your dead skull.
    Move shit around
    Release 0.3.3 - upgrading lots of stuff
    Rename packages from cucumber to cuke4duke
    Added ant build.xml for simple example. Some more renames
    Lots of restructuring and renaming. Ruby code is now packaged inside the jar. No more gem packaging.
    Use UNIX, not Windows line endings
    Added support for spring autowiring into Step classes.
    Code formatting according to /CONTRIBUTING.md
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Added spring
    Working Guice and Spring examples
    Code formatting according to /CONTRIBUTING.md
    Closes issue #448. Implementation based on SpringJunit4ClassRunner and still trying to stick to the previous behaviour as much as possible
    Squashed dirty Spring features
    Resolved review comments:
    Fixed unused step definitions
    Renamed contextManagerMap to contextManagersByClass  int SpringFactory
    Corrected exception handling of TestExecutionListeners to correctly clean up state, and retain relevant information on all incurred exceptions that may have occurred.
    Resolved review comments:
    Refactored processing of TestContextManagers from stop() method to its own method call.
    Added empty lines at end of files.
    Made SpringFactory use beforeTestClass and afterTestClass methods on each scenario to support @DirtiesContext annotation and other TestExecutionListener implementations supported by the TestContextManager
    Made SpringFactory tolerant for non-spring context defining step definitions
    Added unit tests to test new functionality
    Code formatting according to /CONTRIBUTING.md
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Added spring
    Added Spring example with xml configuration
    Made SpringFactory use beforeTestClass and afterTestClass methods on each scenario to support @DirtiesContext annotation and other TestExecutionListener implementations supported by the TestContextManager
    Made SpringFactory tolerant for non-spring context defining step definitions
    Added unit tests to test new functionality
    Fix for 590 - Using spring @ContextHierarchy to manage multiple @ContextConfiguration's breaks with 1.1.5
    Resolved review comments:
    Fixed unused step definitions
    Renamed contextManagerMap to contextManagersByClass  int SpringFactory
    Corrected exception handling of TestExecutionListeners to correctly clean up state, and retain relevant information on all incurred exceptions that may have occurred.
    Made SpringFactory use beforeTestClass and afterTestClass methods on each scenario to support @DirtiesContext annotation and other TestExecutionListener implementations supported by the TestContextManager
    Made SpringFactory tolerant for non-spring context defining step definitions
    Added unit tests to test new functionality
    Code formatting according to /CONTRIBUTING.md
    Removing tests as spec - http://goo.gl/315BS issue #448
    Closes issue #448. Implementation based on SpringJunit4ClassRunner and still trying to stick to the previous behaviour as much as possible
    cucumber-java lazily creates instances, just like the other DI containers
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Mostly finished CLI refactoring
    Optimize imports, format code
    Allowed customization of Spring step definitions context
    
    SpringFactory now searches for cucumber-steps.xml and if found it - uses for configuring  step definitions context.
    Added spring
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    SpringFactory caches application bean context
    
    Overhaul of SpringFactory which never reloads the beans from cucumber.xml, but still reloads the step definition beans for each scenario.
    fix issue #14
    Code formatting according to /CONTRIBUTING.md
    Closes issue #448. Implementation based on SpringJunit4ClassRunner and still trying to stick to the previous behaviour as much as possible
    Remove redundant Locale argument in a bunch of places. Some reformatting.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Formatting
    Added Spring example based on xml configuration
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    SpringFactory caches application bean context
    
    Overhaul of SpringFactory which never reloads the beans from cucumber.xml, but still reloads the step definition beans for each scenario.
    code clean up : suppress warnings
    Working Guice and Spring examples
    Align snippets for quoted arguments with cucumber-ruby
    Code formatting according to /CONTRIBUTING.md
    Closes issue #448. Implementation based on SpringJunit4ClassRunner and still trying to stick to the previous behaviour as much as possible
    Fix for 590 - Using spring @ContextHierarchy to manage multiple @ContextConfiguration's breaks with 1.1.5
    Closes issue #448. Implementation based on SpringJunit4ClassRunner and still trying to stick to the previous behaviour as much as possible
    Allowed customization of Spring step definitions context
    
    SpringFactory now searches for cucumber-steps.xml and if found it - uses for configuring  step definitions context.
    Added spring
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    Formatting corrected (spaces instead of tabs)
    SpringFactory caches application bean context
    
    Overhaul of SpringFactory which never reloads the beans from cucumber.xml, but still reloads the step definition beans for each scenario.
    Formatting
    Added Spring example with xml configuration
    Closes issue #448. Implementation based on SpringJunit4ClassRunner and still trying to stick to the previous behaviour as much as possible
    Allowed customization of Spring step definitions context
    
    SpringFactory now searches for cucumber-steps.xml and if found it - uses for configuring  step definitions context.
    Added spring
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    Formatting corrected (spaces instead of tabs)
    SpringFactory caches application bean context
    
    Overhaul of SpringFactory which never reloads the beans from cucumber.xml, but still reloads the step definition beans for each scenario.
    SpringFactory caches application bean context
    
    Overhaul of SpringFactory which never reloads the beans from cucumber.xml, but still reloads the step definition beans for each scenario.
    Working Guice and Spring examples
    Code formatting according to /CONTRIBUTING.md
    Closes issue #448. Implementation based on SpringJunit4ClassRunner and still trying to stick to the previous behaviour as much as possible
    Moved the JUnit package and configured API docs
    Clean up imports
    Added spring
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    code clean up : suppress warnings
    Working Guice and Spring examples
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Added proof that unused hooks aren't instantiated.
    Added a UnusedStepdefs.java to all DI modules to prove that they are not instantiated when not used.
    cucumber-java lazily creates instances, just like the other DI containers
    Upgrade dependencies. Release 1.1.1.
    Moved the JUnit package and configured API docs
    Sensible renames
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Mostly finished CLI refactoring
    Optimize imports, format code
    formatting to deal with spaces vs tabs crap
    mockito verify fix
    fun after rebase
    tapped into BeanFactoryAware
    Format code for spring txn support. Closes #46.
    made non-abstract again
    fighting abstract vs autowire spring joy
    Spring Tx Rollback Capability in Hookdef class
    Changed name for CustomScopeConfigurer bean
    Resolved #241
    
    Removed child spring context and implemented custom scope for glue code.
    cucumber-glue.xml is internal now. All context configuration may be done in cucumber.xml
    Optimize imports, format code
    Renamed cucumber-steps.xml to cucumber-glue.xml
    Allowed customization of Spring step definitions context
    
    SpringFactory now searches for cucumber-steps.xml and if found it - uses for configuring  step definitions context.
    Fix for 590 - Using spring @ContextHierarchy to manage multiple @ContextConfiguration's breaks with 1.1.5
    Squashed dirty Spring features
    Resolved review comments:
    Fixed unused step definitions
    Renamed contextManagerMap to contextManagersByClass  int SpringFactory
    Corrected exception handling of TestExecutionListeners to correctly clean up state, and retain relevant information on all incurred exceptions that may have occurred.
    Resolved review comments:
    Refactored processing of TestContextManagers from stop() method to its own method call.
    Added empty lines at end of files.
    Made SpringFactory use beforeTestClass and afterTestClass methods on each scenario to support @DirtiesContext annotation and other TestExecutionListener implementations supported by the TestContextManager
    Made SpringFactory tolerant for non-spring context defining step definitions
    Added unit tests to test new functionality
    Use my own coding style
    Code formatting according to /CONTRIBUTING.md
    Code formatting according to /CONTRIBUTING.md
    Refactored getInstance method and updated the javadoc
    Closes issue #448. Implementation based on SpringJunit4ClassRunner and still trying to stick to the previous behaviour as much as possible
    cucumber-java lazily creates instances, just like the other DI containers
    Fixed bean definition overriding
    Resolved #241
    
    Removed child spring context and implemented custom scope for glue code.
    cucumber-glue.xml is internal now. All context configuration may be done in cucumber.xml
    Renamed cucumber-steps.xml to cucumber-glue.xml
    Allowed customization of Spring step definitions context
    
    SpringFactory now searches for cucumber-steps.xml and if found it - uses for configuring  step definitions context.
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    SpringFactory caches application bean context
    
    Overhaul of SpringFactory which never reloads the beans from cucumber.xml, but still reloads the step definition beans for each scenario.
    Clean up a little. Closes #14.
    fix issue #14
    Working Guice and Spring examples
    Initialize StaticApplicationContext in SpringFactory
    
    StaticApplicationContext would throw an Exception due to a missing initialization step in SpringFactory's constructor. Calling stepDefContext.refresh() fixes the problem.
    Reformatted code and optimized imports with IntelliJ (default settings).
    Moved stuff around
    Support several backends. Still struggling with Guice and Spring.
    Added a java-specific TCK to test various DI containers
    If you write code that forces me to check your exceptions, then I will rip off your head and piss in your dead skull.
    Much more modular
    More submodules, new Annotations.
    Move shit around
    New, better stepdef discovery through reflections
    Keep Guice from injecting classes it can't.
    # Please enter the commit message for your changes. Lines starting
    # with '#' will be ignored, and an empty message aborts the commit.
    # On branch master
    # Your branch is ahead of 'origin/master' by 1 commit.
    #
    # Changes to be committed:
    #   (use "git reset HEAD <file>..." to unstage)
    #
    #       modified:   cuke4duke/src/main/java/cuke4duke/internal/jvmclass/ClassLanguage.java
    #       modified:   cuke4duke/src/main/java/cuke4duke/internal/jvmclass/GuiceFactory.java
    #       modified:   cuke4duke/src/main/java/cuke4duke/internal/jvmclass/ObjectFactory.java
    #       modified:   cuke4duke/src/main/java/cuke4duke/internal/jvmclass/PicoFactory.java
    #       modified:   cuke4duke/src/main/java/cuke4duke/internal/jvmclass/SpringFactory.java
    #       modified:   cuke4duke/src/test/java/cuke4duke/internal/jvmclass/GuiceFactoryTest.java
    #
    Reformatted code with IntelliJ's default settings
    * compiles with both Scala 2.7.x and 2.8
    * Transformations are checked at compiletime (implicits)
    * ScalaDsl supports ask, announce and embed
    * Some code simplifications
    * Objectfactories returns the correect type based on class ( returns T given a Class<T> )
    * ScalaDsl and i18n moved out of 'scala' package, as scala imports with the scala name can be a bit tricky ;)
    Refactor transforms so that default transforms don't need an object factory. Better lifecycle for stepdefinition objects.
    Added new @Ordered annotation, to deal with issue #39. Scala is failing now - need to fix it.
    Refactored ObjectFactory to reflect that it is the StepMother instance that is passed to the factory after creation.
    Added support for calling steps from java steps when using spring. Needs some more cleanup.
    Enable Java step definitions to call other steps indirectly by just providing a string. Closes #26
    Clean up
    Load jvm classes from .class paths instead of .java paths. This should make it easier to support other .class based (compiled) languages like Scala.
    Fix typo
    Removed all the warnings
    
    - Added some @SuppressWarnings where needed.
    - Made some local variables to deal with map/list warnings
    comply with API changes in Cucumber 0.3.97
    Prepare for 0.1.0 release
    Almost a complete rewrite, leveraging Cucumber's new improved language support.
    Use my own coding style
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Minor renaming
    Resolved #241
    
    Removed child spring context and implemented custom scope for glue code.
    cucumber-glue.xml is internal now. All context configuration may be done in cucumber.xml
    Use my own coding style
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Minor renaming
    Resolved #241
    
    Removed child spring context and implemented custom scope for glue code.
    cucumber-glue.xml is internal now. All context configuration may be done in cucumber.xml
    Upgrade dependencies. Release 1.1.1.
    Moved the JUnit package and configured API docs
    Set a default order of 100 for Spring @txn hooks in the cucumber.runtime.java.spring.hooks glue package. Closes #398.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Sensible renames
    Get gluePath from runtimeOptions
    Optimize imports, format code
    Get rid of @author tags
    leveraged getter just to shut Emma up
    mockito verify fix
    fun after rebase
    tapped into BeanFactoryAware
    Format code for spring txn support. Closes #46.
    made non-abstract again
    fighting abstract vs autowire spring joy
    Spring Tx Rollback Capability in Hookdef class
    Moved the JUnit package and configured API docs
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.5
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.4
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.0
    Some last minute fixes before the 1.1.0 release.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.13
    Release 1.0.13 with better packaging
    increase version to prepare for next development iteration:
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.12
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.11
    Undo bad changes I mkade in bbe40d3d451703f41ef36d16415144268d6ff72a while fixing #356
    Fix tests that broke in #356
    Tweak poms so they work in IDEA as well
    Maven fun
    Cleaning up poms
    Build passes with cucumber-deps
    Cleaning up poms
    Build passes with cucumber-deps
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.8
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.7
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.5
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Added cobertura code coverage and started to clean up some cruftiness in the io package
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.4
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0
          oe               .n~~%x.                .n~~%x.
        .@88             x88X   888.            x88X   888.
    ==*88888            X888X   8888L          X888X   8888L
       88888           X8888X   88888         X8888X   88888
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888f        88888X   88888f
       88888       .   48888X   88888     .   48888X   88888
       88888     .@8c   ?888X   8888"   .@8c   ?888X   8888"
       88888    '%888"   "88X   88*`   '%888"   "88X   88*`
    '**%%%%%%**   ^*       ^"==="`       ^*       ^"==="`
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC24
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC23
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC22
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC21
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC20
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC19
    Try release one more time
    Let's try that release again
    Optimize imports, format code
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC16
    Detect duplicate step definitions. Closes #213.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC15
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC13
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC12
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC11
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC8
    Fix the version number appropriately
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC7
    Update version
    Set project version correctly
    Re-adding the poms from before the ant/ivy stuff
    Dual build
    Added back poms - they are generated from ivy.xml (except the parent pom)
    Don't come back maven
    Upgrade deps, improve snippets.
    Maven hosed the previous release attempt.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC1
    Let's try to make a release
    Change dependencies so that full-jars don't bundle all jars (users are expected to provide them themselves). Closes #28.
    Changed groupId to info.cukes, and prepended cucumber- to all artifacts. Added shade plugin, so all artifacts have a -full (self contained) jar. Closes #11.
    Fix version/newline/maven problems
    Fixed pom issues
    Added an example
    Cleaning poms from duplicate project versions.
    Moved stuff around
    More submodules
    More submodules, new Annotations.
    Better abstractions by bringing in Groovy
    Adding eclipse project files to .gitignore
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Upgrade deps, improve snippets.
    Added back codePaths that were temporarily disabled during Scenario Outline refactoring. Made html default CLI formatter since pretty is broken for scenario outline ATM.
    Added Jython support
    Added JRuby support. Closes #3.
    Upgrade deps, improve snippets.
    Fix version/newline/maven problems
    Moved stuff around
    Added snippet support for all languages.
    Much more modular
    Ioke passing
    Align snippets for quoted arguments with cucumber-ruby
    New Snippet text, closes #618.
    
    Change to the new Snippet text. Update History.md.
    Fix a one off error in JRubySnippet.java.
    Refactored --snippet option. Closes #561, #302
    Replace inheritance with delegation for #138
    Upgrade deps, improve snippets.
    Changes for gherkin 2.6.0. Will merge to master when gherkin has synced to maven central.
    Simplified improved snippet code, removed hamcrest (not a huge fan).
    Moved stuff around
    WIP - broke a lot of stuff
    Added snippet support for all languages.
    Closer to correct scenario outline implementation. Need to make sure it works with multiple Examples under one Scenario Outline.
    Snippets for java, and a reusable superclass for other backends.
    Moved the JUnit package and configured API docs
    Scala fixes
    Upgrade deps, improve snippets.
    Added Jython support
    Moved stuff around
    Detect duplicate step definitions. Closes #213.
    Moved stuff around
    Much more modular
    Ioke passing
    Move shit around
    Improved UTF-8
    Update the poms so that Ioke can be used correctly with some new features, also implement pending so it works correctly
    Fix an off-by-one-error and also add support for pending
    Handle PyString correctly on Ioke
    Add support for custom names of tables
    Added a special Cucumber::IokeException exception for Ioke, along with a static helper method to throw it. Waiting for Ola magic to figure out where to raise it.
    Preliminary support for tables.
    Added regexp_source for Ioke. Gotta love checked exceptions - change one signature and the footprint is a dozen files.
    Update the basic DSL to work, with supporting Java code
    Now recognising step arguments. Started to implement stepdef invocation.
    Initial Ioke support - hacked together with Ola Bini, Sam Aaron, Jakob Skov-Pedersen and Aslak Hellesøy at RubyFoo in London.
    Snippets for DataTable include a hint about using List<YourType>, so people discover this neat technique
    Replace inheritance with delegation for #138
    Refactored SnippetGenerator.
    
    There was too much parallel effort in the CamelCase and Underscore
    implementations, so the new structure shares most of the logic
    and implements the different logic in a Concatenator.
    
    I also made sure IntelliJ doesn't break because of the new
    scenario lifecycle methods in the gherkin formatter interface.
    Refactored --snippet option. Closes #561, #302
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Fix several problems with resource loading for scripting languages (after the new classpath: scheme was introduced)
    Fixed some regressions to glue code introduced in 1.0.2. Might fix issue #299, but that's not confirmed.
    Detect duplicate step definitions. Closes #213.
    Created an UnreportedStepExecutor interface
    
    I don't like that this current implementation passes the Runtime into the backends
    It shouldn't. So I used the interface, so hopefully at some point, refactoring in the
    future won't suck.
    
    It passes all unit tests.
    rename world to glue
    Removed OneTimeResourceLoader and made sure glue code is loaded only once. The Backend.loadGlue method should ideally be removed, and the World and gluePaths passed to each Backend's constructor. Other TODOs on this branch: rename World to Glue. RuntimeGlue should not have a ref back to Runtime. Make Scala work again (disabled it because I don't have the required Scala fu)
    Replace inheritance with delegation for #138
    More Windows fixes. #126
    Load resoureces from classpath when using JUnit, load them from filesystem when using CLI
    All tests passing, ut still not good
    Rewrote a lot of the resource loading code
    Make more of cucumber-features pass. Rename Table to DataTable. #45.
    gluePath is the best name I have come up with for 'class path or script path where stepdefs and hooks live'
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    Pass several script paths/packages to the Backend constructors. (We can't have a backend per package/script path, because code in backend A would not be able to talk to code in backend B)
    gh-9 Clean up tabs in last commit
    gh-9 Very basic Java implementation of hooks
    Renamed packages. Started work on line support - needs more work.
    Adding a TableTransformer to convert Table's rows to JavaBeans.
    Take Locale from Gherkin feature instead of Step Definition. Make an outer Java class for each annotation - makes imports nicer (No more @EN.Given). Moved Java annotation code to java project.
    Started on a CLI as an alternative to JUnit. This is necessary for other JVM languages that don't use JUnit (Clojure for example). Currently using some of the JUnit classes - will decouple this later.
    All core cucumber-features are passing except one
    Adding locale in StepDefinition in order to transform arguments. It
    would be better to have locale set on an higher level, for instance
    Feature.
    Moved stuff around
    WIP - broke a lot of stuff
    JUnit integration getting there...
    Added snippet support for all languages.
    Closer to correct scenario outline implementation. Need to make sure it works with multiple Examples under one Scenario Outline.
    More on snippets
    Added a java-specific TCK to test various DI containers
    If you write code that forces me to check your exceptions, then I will rip off your head and piss in your dead skull.
    Much more modular
    More submodules
    Now we can run Scenario Outlines
    Ioke passing
    Remove warnings and deprecated code
    Improved Transformer API
    Add support for List step definition parameters
    Pass a SingleValueConverter to ParameterType
    Pass a SingleValueConverter to ParameterType
    Refactored the StepDefinition interface so that backends for dynamic languages can infer the type of a parameter based on the actual argument type passed to it.
    Show code source for Java step definitions in case of duplicates or ambiguous stepdefs.
    Detect duplicate step definitions. Closes #213.
    Use I18n instead of Locale since converting from Locale to I18n is tricky.
    Refactoring out the Reporter from the step call
    
    Created a new method, runUnreportedStep, that simply grabs the step out of a match,
    throwing an exception if it does not match, and executes it.
    
    All the exceptions are required to trickle up so that they're caught by the step that
    does the actual execution so that things look right in the output.
    
    A snippit will be generated if you call a non existing step, so that's handy :)
    Revert "Bring the URI forward to the step evaluation too."
    
    This reverts commit 1851bfe0c56c8abd223ad25a57988c76d0c66396.
    Bring the URI forward to the step evaluation too.
    
    This doesn't smell right, there must be something I'm doing entirely wrong.
    Refactor to change the execut method to include Reporter and Locale
    Rewrote a lot of the resource loading code
    Tagged (scoped) step definitions are reverted. Bad idea.
    Step Deinitions can be scoped by tag (just like hooks). Currently only implemented for Java.
    Date format can be specified with a @DateFormat annotation
    Refactoring to capture more info about types
    Fix broken conversion of table to List<Map<String,String>>. Addresses @nightscape's comment in #49.
    Moved table conversion logic from java to core
    All building/passing except scala
    Misc changes to bring in XStream to do some of the heavy object conversion lifting
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    Working on Issue #19
    Added the possibility to process tables.
    Added a @JavaBeanClass annotation to allow passing list of beans to
    Steps.
    Working on Issue #9
    Added the possibility to process tables.
    Added a @JavaBeanClass annotation to allow passing list of beans to
    Steps.
    Ambiguous matches are now reported correctly. Snippets are printed from CLI.
    Take Locale from Gherkin feature instead of Step Definition. Make an outer Java class for each annotation - makes imports nicer (No more @EN.Given). Moved Java annotation code to java project.
    Reformatted code and optimized imports with IntelliJ (default settings).
    Adding locale in StepDefinition in order to transform arguments. It
    would be better to have locale set on an higher level, for instance
    Feature.
    Moved stuff around
    WIP - broke a lot of stuff
    Added snippet support for all languages.
    If you write code that forces me to check your exceptions, then I will rip off your head and piss in your dead skull.
    More submodules
    Now we can run Scenario Outlines
    Ioke passing
    Move shit around
    Reformatted code with IntelliJ's default settings
    Introduce a new spi package for abstracting away JRuby. Started to decouple JRuby exceptions.
    Refactor transforms so that default transforms don't need an object factory. Better lifecycle for stepdefinition objects.
    Added new @Ordered annotation, to deal with issue #39. Scala is failing now - need to fix it.
    Got rid of a couple of warnings
    Communicate the failures a little bit nicer
    Update the poms so that Ioke can be used correctly with some new features, also implement pending so it works correctly
    Fix an off-by-one-error and also add support for pending
    Handle PyString correctly on Ioke
    Add support for custom names of tables
    Optimise imports
    Added a special Cucumber::IokeException exception for Ioke, along with a static helper method to throw it. Waiting for Ola magic to figure out where to raise it.
    Preliminary support for tables.
    Added regexp_source for Ioke. Gotta love checked exceptions - change one signature and the footprint is a dozen files.
    Update the basic DSL to work, with supporting Java code
    Now recognising step arguments. Started to implement stepdef invocation.
    Initial Ioke support - hacked together with Ola Bini, Sam Aaron, Jakob Skov-Pedersen and Aslak Hellesøy at RubyFoo in London.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.5
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.4
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.0
    Some last minute fixes before the 1.1.0 release.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.13
    Release 1.0.13 with better packaging
    increase version to prepare for next development iteration:
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.12
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.11
    Undo bad changes I mkade in bbe40d3d451703f41ef36d16415144268d6ff72a while fixing #356
    Fix tests that broke in #356
    Tweak poms so they work in IDEA as well
    Cleaning up poms
    Build passes with cucumber-deps
    Cleaning up poms
    Build passes with cucumber-deps
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.8
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.7
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.5
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Added cobertura code coverage and started to clean up some cruftiness in the io package
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.4
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0
          oe               .n~~%x.                .n~~%x.
        .@88             x88X   888.            x88X   888.
    ==*88888            X888X   8888L          X888X   8888L
       88888           X8888X   88888         X8888X   88888
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888f        88888X   88888f
       88888       .   48888X   88888     .   48888X   88888
       88888     .@8c   ?888X   8888"   .@8c   ?888X   8888"
       88888    '%888"   "88X   88*`   '%888"   "88X   88*`
    '**%%%%%%**   ^*       ^"==="`       ^*       ^"==="`
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC24
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC23
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC22
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC21
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC20
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC19
    Try release one more time
    Let's try that release again
    Optimize imports, format code
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC16
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC15
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC13
    Bah, lets get it to the proper version.
    Correcting version for openejb
    DRY up dependency versions
    Update version
    Set project version correctly
    Re-adding the poms from before the ant/ivy stuff
    Dual build
    Added back poms - they are generated from ivy.xml (except the parent pom)
    Don't come back maven
    Maven hosed the previous release attempt.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC1
    Let's try to make a release
    No dependency to commons-io. Copied helper methods to cucumber.runtime.Utils.
    Addedd mockito and commons-io to the guice pom
    No dependency to commons-io. Copied helper methods to cucumber.runtime.Utils.
    Addedd mockito and commons-io to the guice pom
    Change dependencies so that full-jars don't bundle all jars (users are expected to provide them themselves). Closes #28.
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    Changed groupId to info.cukes, and prepended cucumber- to all artifacts. Added shade plugin, so all artifacts have a -full (self contained) jar. Closes #11.
    Fix version/newline/maven problems
    Fixed pom issues
    Added an example
    Cleaning poms from duplicate project versions.
    Moved stuff around
    Added a java-specific TCK to test various DI containers
    Much more modular
    More submodules
    More submodules, new Annotations.
    Better abstractions by bringing in Groovy
    Added a UnusedStepdefs.java to all DI modules to prove that they are not instantiated when not used.
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    adding openejb module
    Working Guice and Spring examples
    Renames
    adding openejb module
    Remove redundant Locale argument in a bunch of places. Some reformatting.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Removed console out
    Get rid of @author tags
    moving openejb tests from weld package to openejb one
    adding openejb module
    Added support for using CDI/Weld to write steps
    Working Guice and Spring examples
    cucumber-java lazily creates instances, just like the other DI containers
    Renames
    moving openejb tests from weld package to openejb one
    adding openejb module
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    fix for issue #15 - creates a new Weld container per scenario
    moving openejb tests from weld package to openejb one
    adding openejb module
    Added support for using CDI/Weld to write steps
    Working Guice and Spring examples
    Moved the JUnit package and configured API docs
    Added a UnusedStepdefs.java to all DI modules to prove that they are not instantiated when not used.
    Added IDEA project files
    moving openejb tests from weld package to openejb one
    Added support for using CDI/Weld to write steps
    Added JRuby support. Closes #3.
    Working Guice and Spring examples
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Added proof that unused hooks aren't instantiated.
    Added a UnusedStepdefs.java to all DI modules to prove that they are not instantiated when not used.
    cucumber-java lazily creates instances, just like the other DI containers
    Remove warnings and deprecated code
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    log4j hack is no more useful for next openejb versions and still work with old ones
    Added a timeout argument to Utils - prepping for #343
    Exceptions thrown from a step definition are no longer wrapped in CucumberException.
    cucumber-java lazily creates instances, just like the other DI containers
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Removed duplication. Better reflection error reporting across the board.
    Mostly finished CLI refactoring
    Optimize imports, format code
    Only configure Log4J once
    adding openejb module
    Moved the JUnit package and configured API docs
    Moved the JUnit package and configured API docs
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.5
    added new module: cucumber-needle
    Closes issue #448. Implementation based on SpringJunit4ClassRunner and still trying to stick to the previous behaviour as much as possible
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.2
    Upgrade to 3.2.0.RELEASE
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.0
    Some last minute fixes before the 1.1.0 release.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.13
    Release 1.0.13 with better packaging
    increase version to prepare for next development iteration:
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.12
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.11
    Undo bad changes I mkade in bbe40d3d451703f41ef36d16415144268d6ff72a while fixing #356
    Fix tests that broke in #356
    Tweak poms so they work in IDEA as well
    Cleaning up poms
    Build passes with cucumber-deps
    Cleaning up poms
    Build passes with cucumber-deps
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.8
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.7
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.5
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Added cobertura code coverage and started to clean up some cruftiness in the io package
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.4
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0
          oe               .n~~%x.                .n~~%x.
        .@88             x88X   888.            x88X   888.
    ==*88888            X888X   8888L          X888X   8888L
       88888           X8888X   88888         X8888X   88888
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888f        88888X   88888f
       88888       .   48888X   88888     .   48888X   88888
       88888     .@8c   ?888X   8888"   .@8c   ?888X   8888"
       88888    '%888"   "88X   88*`   '%888"   "88X   88*`
    '**%%%%%%**   ^*       ^"==="`       ^*       ^"==="`
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC24
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC23
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC22
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC21
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC20
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC19
    Try release one more time
    Let's try that release again
    Optimize imports, format code
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC16
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC15
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC13
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC12
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC11
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC8
    Fix the version number appropriately
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC7
    Update version
    Set project version correctly
    Re-adding the poms from before the ant/ivy stuff
    Dual build
    Added back poms - they are generated from ivy.xml (except the parent pom)
    Don't come back maven
    Maven hosed the previous release attempt.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC1
    Let's try to make a release
    spring-tx vs spring-context dependency
    Spring Tx Rollback Capability in Hookdef class
    Change dependencies so that full-jars don't bundle all jars (users are expected to provide them themselves). Closes #28.
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    Changed groupId to info.cukes, and prepended cucumber- to all artifacts. Added shade plugin, so all artifacts have a -full (self contained) jar. Closes #11.
    Fix version/newline/maven problems
    Fixed pom issues
    Added an example
    Cleaning poms from duplicate project versions.
    Moved stuff around
    Added a java-specific TCK to test various DI containers
    Much more modular
    More submodules
    More submodules, new Annotations.
    Better abstractions by bringing in Groovy
    added new module: cucumber-needle
    added new module: cucumber-needle
    added new module: cucumber-needle
    set test root logger to ERROR
    added new module: cucumber-needle
    added new module: cucumber-needle
    added new module: cucumber-needle
    added new module: cucumber-needle
    added new module: cucumber-needle
    added new module: cucumber-needle
    added new module: cucumber-needle
    added new module: cucumber-needle
    renamed package
    added new module: cucumber-needle
    added new module: cucumber-needle
    added new module: cucumber-needle
    moved to src/test
    renamed package
    added new module: cucumber-needle
    moved to src/test
    added new module: cucumber-needle
    added new module: cucumber-needle
    added new module: cucumber-needle
    added new module: cucumber-needle
    added new module: cucumber-needle
    added new module: cucumber-needle
    added new module: cucumber-needle
    added new module: cucumber-needle
    added new module: cucumber-needle
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.5
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.4
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.0
    Some last minute fixes before the 1.1.0 release.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.13
    Release 1.0.13 with better packaging
    increase version to prepare for next development iteration:
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.12
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.11
    Undo bad changes I mkade in bbe40d3d451703f41ef36d16415144268d6ff72a while fixing #356
    Fix tests that broke in #356
    Tweak poms so they work in IDEA as well
    Cleaning up poms
    Build passes with cucumber-deps
    Cleaning up poms
    Build passes with cucumber-deps
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.8
    Added a UnusedStepdefs.java to all DI modules to prove that they are not instantiated when not used.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.7
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.5
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Added cobertura code coverage and started to clean up some cruftiness in the io package
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.4
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0
          oe               .n~~%x.                .n~~%x.
        .@88             x88X   888.            x88X   888.
    ==*88888            X888X   8888L          X888X   8888L
       88888           X8888X   88888         X8888X   88888
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888f        88888X   88888f
       88888       .   48888X   88888     .   48888X   88888
       88888     .@8c   ?888X   8888"   .@8c   ?888X   8888"
       88888    '%888"   "88X   88*`   '%888"   "88X   88*`
    '**%%%%%%**   ^*       ^"==="`       ^*       ^"==="`
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC24
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC23
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC22
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC21
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC20
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC19
    Try release one more time
    Let's try that release again
    Optimize imports, format code
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC16
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC15
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC13
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC12
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC11
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC8
    Fix the version number appropriately
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC7
    Update version
    Set project version correctly
    Re-adding the poms from before the ant/ivy stuff
    Dual build
    Added back poms - they are generated from ivy.xml (except the parent pom)
    Don't come back maven
    Maven hosed the previous release attempt.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC1
    Let's try to make a release
    Change dependencies so that full-jars don't bundle all jars (users are expected to provide them themselves). Closes #28.
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    Added support for using CDI/Weld to write steps
    Fix version/newline/maven problems
    Fixed pom issues
    Added an example
    Cleaning poms from duplicate project versions.
    Moved stuff around
    More submodules
    More submodules, new Annotations.
    Better abstractions by bringing in Groovy
    Words
    Better workaround for Weld folks on single-core machines. Detailed instructions about what to do.
    EOL
    Only threadPoolSize should be necessary
    Added workaround for https://issues.jboss.org/browse/WELD-1119 when running on single core machines.
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Added weld
    Added support for using CDI/Weld to write steps
    Working Guice and Spring examples
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    Added support for using CDI/Weld to write steps
    Refute claim that stepdef classes get instantiated for every step. It happens for every scenario.
    Remove deprecation warning
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Removed console out
    Added support for using CDI/Weld to write steps
    Working Guice and Spring examples
    Added support for using CDI/Weld to write steps
    Working Guice and Spring examples
    Moved the JUnit package and configured API docs
    Added weld
    Added jython
    Added Jython support
    Moved stuff around
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Added proof that unused hooks aren't instantiated.
    Added a UnusedStepdefs.java to all DI modules to prove that they are not instantiated when not used.
    cucumber-java lazily creates instances, just like the other DI containers
    cucumber-java lazily creates instances, just like the other DI containers
    Renames
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    fix for issue #15 - creates a new Weld container per scenario
    Better workaround for Weld folks on single-core machines. Detailed instructions about what to do.
    cucumber-java lazily creates instances, just like the other DI containers
    Renames
    Get rid of @author tags
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    cleaned up code
    fix for issue #15 - creates a new Weld container per scenario
    Added support for using CDI/Weld to write steps
    Moved the JUnit package and configured API docs
    Moved the JUnit package and configured API docs
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.6
    moved import to a language compiler option so that scala 2.9 continues to work
    fixed scala warnings
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.5
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.4
    Scala tweaks. Closes #432, #462.
    Proposed solution for issue #432
    The main scala build has been modified to generate an artifact named cucumber-scala_2.10
    A new sub-directory of the scala build has been created. This uses the same source files as its parent but builds a cucumber-scala_2.9.2 artifact using the Scala 2.9.2 compiler and library
    To get this to work correctly the README.java and package.html files were moved into the scala source tree
    The scala-calculator example was modified to use the cucumber-scala_2.10 artifact
    The root pom.xml file no longer directly references Scala library dependencies as there are now different versions between the 2.10 and 2.9.2 build. (Is the a solution to this?)
    Proposed solution for issue #432
    The main scala build has been modified to generate an artifact named cucumber-scala_2.10
    A new sub-directory of the scala build has been created. This uses the same source files as its parent but builds a cucumber-scala_2.9.2 artifact using the Scala 2.9.2 compiler and library
    To get this to work correctly the README.java and package.html files were moved into the scala source tree
    The scala-calculator example was modified to use the cucumber-scala_2.10 artifact
    The root pom.xml file no longer directly references Scala library dependencies as there are now different versions between the 2.10 and 2.9.2 build. (Is the a solution to this?)
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.3
    Proposed solution for issue #432
    The main scala build has been modified to generate an artifact named cucumber-scala_2.10
    A new sub-directory of the scala build has been created. This uses the same source files as its parent but builds a cucumber-scala_2.9.2 artifact using the Scala 2.9.2 compiler and library
    To get this to work correctly the README.java and package.html files were moved into the scala source tree
    The scala-calculator example was modified to use the cucumber-scala_2.10 artifact
    The root pom.xml file no longer directly references Scala library dependencies as there are now different versions between the 2.10 and 2.9.2 build. (Is the a solution to this?)
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.2
    Revert to scala 2.9.2. Remove unused pom stuff.
    Passing Scenario reference in Before and After hooks. Added idea plugin in pom to generate idea files
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.0
    Some last minute fixes before the 1.1.0 release.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.13
    Release 1.0.13 with better packaging
    increase version to prepare for next development iteration:
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.12
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.11
    Undo bad changes I mkade in bbe40d3d451703f41ef36d16415144268d6ff72a while fixing #356
    Fix tests that broke in #356
    Tweak poms so they work in IDEA as well
    Cleaning up poms
    Build passes with cucumber-deps
    Cleaning up poms
    Build passes with cucumber-deps
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.8
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.7
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.5
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Added cobertura code coverage and started to clean up some cruftiness in the io package
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.4
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0
          oe               .n~~%x.                .n~~%x.
        .@88             x88X   888.            x88X   888.
    ==*88888            X888X   8888L          X888X   8888L
       88888           X8888X   88888         X8888X   88888
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888f        88888X   88888f
       88888       .   48888X   88888     .   48888X   88888
       88888     .@8c   ?888X   8888"   .@8c   ?888X   8888"
       88888    '%888"   "88X   88*`   '%888"   "88X   88*`
    '**%%%%%%**   ^*       ^"==="`       ^*       ^"==="`
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC24
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC23
    Make sure scala javadoc jar is deployed. Closes #231.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC22
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC21
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC20
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC19
    Try release one more time
    Let's try that release again
    Optimize imports, format code
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC16
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC15
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC13
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC12
    Fix Scala build. Closes #167.
    Only add scala sources in one place. This might fix #157
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC11
    I think this fixes build problems on Windows.
    Make POMs Windows-happy
    
    When ${baseDir} gets interpolated on Windows the traditional double-quote
    delimiters make for a malformed String literal.
    Fix Windows build problems mentioned in #154. Add History entries.
    #154, RunCukesTest.scala uses ScalaBackend.loadGlue which calls ClasspathResourceLoader().instantiateSubclasses which didn't check if the class had a valid constructor given the arguments. ScalaDslTest.scala holds multiple internal ScalaDsl instances which are compiled to classes implementing ScalaDsl but with no valid constructor. These were being picked up by the ClasspathResourceLoader causing the RunCukesTest to fail at load time
    Update version
    Set up the generation of sources to happen in the target directory
    
    Added a second "execution" of the scala plugin to add the source directory for the generated sources
    Set project version correctly
    Re-adding the poms from before the ant/ivy stuff
    Dual build
    Added back poms - they are generated from ivy.xml (except the parent pom)
    Don't come back maven
    Fix compilation of Scala module and example.
    Let's try to make a release
    Change dependencies so that full-jars don't bundle all jars (users are expected to provide them themselves). Closes #28.
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    Rename scala artifact to cucumber-scala
    scala support
    Changed groupId to info.cukes, and prepended cucumber- to all artifacts. Added shade plugin, so all artifacts have a -full (self contained) jar. Closes #11.
    Fix version/newline/maven problems
    Fixed pom issues
    Moved stuff around
    Support several backends. Still struggling with Guice and Spring.
    Updated to latest Gherkin
    Move shit around
    Updating gen.scala to reflect changes in previous commit
    
    Not sure if the code generation is still being used as the functions in
    ScalaDsl seem to have diverged slightly from what this script would
    generate in it's current form.
    
    Updating it to reflect the new logic anyway in case it's still required.
    
    Pushing this as a separate commit to allow cherry picking.
    Fixed transformation issue to use java layer for transforms
    Fix version/newline/maven problems
    Moved stuff around
    Move shit around
    Reformatted code with IntelliJ's default settings
    * compiles with both Scala 2.7.x and 2.8
    * Transformations are checked at compiletime (implicits)
    * ScalaDsl supports ask, announce and embed
    * Some code simplifications
    * Objectfactories returns the correect type based on class ( returns T given a Class<T> )
    * ScalaDsl and i18n moved out of 'scala' package, as scala imports with the scala name can be a bit tricky ;)
    Fix for #668 - using Java reflection in ScalaDsl
    
    The previous implementation was using Scala 2.9 reflection via
    Manifest[T] to extract the function parameter types using the erasure
    method (renamed to runtimeClass in Scala 2.10).
    
    The problem with this approach is that Manifest.erasure provides the
    runtime java.lang.reflect.Type, which means the type has been erased of
    paramterized type info.
    
    The ParameterInfo class relies on the ParamaterizedType information
    to determine how to auto populate Step arguments of type
    java.util.List<T>. When using java Lists from the Scala DSL, this logic
    would fail.
    
    As ParameterInfo's implementation is entirely based on the Java
    reflection API, it makes more sense to use Java reflection in the
    implementation of Scala DSL as it will be compatible with the logic in
    core.
    
    This change uses Java reflection on the Scala Function objects to
    extract the ParameterizedType information, which also simplifies the
    code.
    
    The manifest is no longer used by the register method, but seems to
    still be required on the function definitions by another part of the
    code so these have been left in place.
    
    The functionParams method has to filter out JVM bridge methods to ensure
    the correct version of the apply() method (with type parameter
    information) is captured.  Function objects only have one defined method
    named apply() so taking the head of the list should always be safe.
    Tidied up code and tests before merge
    Added test to assert custom mappers working in Scala world.
    Added additional test for the case "Custom object with a string constructor"
    Fixed broken tests (ScalaDslTest was just a line number change, and other was a half implemented test case for custom mappers) should build ok now.
    Base of further tests for new type handling - specifically to check the locale based differences, and customer mappers
    Changes to scala dsl
    Added additional test for datatable with an additional argument
    Removed 'string only' types for scala so can work with complex types (i.e. data tables) - need to implement xstream parser for bigint and bigdecimal
    Hack fixed #443 and added appropriate tests - requires refactor.
    Added cucumber scenario to reproduce issue #443 DataTable arguments aren't working with cucumber-scala
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Scala fixes for Windows. #139
    Added Jython support
    Added JRuby support. Closes #3.
    Tidied up code and tests before merge
    Added test to assert custom mappers working in Scala world.
    Tidied up code and tests before merge
    Added additional test for the case "Custom object with a string constructor"
    Tidied up code and tests before merge
    Added test to assert custom mappers working in Scala world.
    Fix for #668 - using Java reflection in ScalaDsl
    
    The previous implementation was using Scala 2.9 reflection via
    Manifest[T] to extract the function parameter types using the erasure
    method (renamed to runtimeClass in Scala 2.10).
    
    The problem with this approach is that Manifest.erasure provides the
    runtime java.lang.reflect.Type, which means the type has been erased of
    paramterized type info.
    
    The ParameterInfo class relies on the ParamaterizedType information
    to determine how to auto populate Step arguments of type
    java.util.List<T>. When using java Lists from the Scala DSL, this logic
    would fail.
    
    As ParameterInfo's implementation is entirely based on the Java
    reflection API, it makes more sense to use Java reflection in the
    implementation of Scala DSL as it will be compatible with the logic in
    core.
    
    This change uses Java reflection on the Scala Function objects to
    extract the ParameterizedType information, which also simplifies the
    code.
    
    The manifest is no longer used by the register method, but seems to
    still be required on the function definitions by another part of the
    code so these have been left in place.
    
    The functionParams method has to filter out JVM bridge methods to ensure
    the correct version of the apply() method (with type parameter
    information) is captured.  Function objects only have one defined method
    named apply() so taking the head of the list should always be safe.
    fixed scala warnings
    Tidied up code and tests before merge
    Fixed broken tests (ScalaDslTest was just a line number change, and other was a half implemented test case for custom mappers) should build ok now.
    Base of further tests for new type handling - specifically to check the locale based differences, and customer mappers
    Fixed transformation issue to use java layer for transforms
    Changes to scala dsl
    Moved the JUnit package and configured API docs
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Simplify Table conversion. Fix broken build.
    
    Squashed commit of the following:
    
    commit 4c357d2fb77d48565985b83a5f5e0d6d1cf58daf
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 23:22:39 2014 +0000
    
        Simplify code by replacing DataTable.flatten with DataTable.asList(String.class)
    
    commit 9c031dabe06813151609d5368f58d062384dc704
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 22:38:09 2014 +0000
    
        Added tests
    
    commit a6c89feb369937149cd19b03737b1d3666b1ecd2
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 21:56:40 2014 +0000
    
        Simplify table conversion
    
    commit 5896c7010ecb2aa67bb8bbc08d4047ac5bd4250a
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 21:32:27 2014 +0000
    
        Table conversion refactoring
    
    commit c2f1d3ef2190b98c43222dcc37d9ce934ad43f3c
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 13 20:39:00 2014 +0000
    
        Simplify table conversion
    Fix for #668 - using Java reflection in ScalaDsl
    
    The previous implementation was using Scala 2.9 reflection via
    Manifest[T] to extract the function parameter types using the erasure
    method (renamed to runtimeClass in Scala 2.10).
    
    The problem with this approach is that Manifest.erasure provides the
    runtime java.lang.reflect.Type, which means the type has been erased of
    paramterized type info.
    
    The ParameterInfo class relies on the ParamaterizedType information
    to determine how to auto populate Step arguments of type
    java.util.List<T>. When using java Lists from the Scala DSL, this logic
    would fail.
    
    As ParameterInfo's implementation is entirely based on the Java
    reflection API, it makes more sense to use Java reflection in the
    implementation of Scala DSL as it will be compatible with the logic in
    core.
    
    This change uses Java reflection on the Scala Function objects to
    extract the ParameterizedType information, which also simplifies the
    code.
    
    The manifest is no longer used by the register method, but seems to
    still be required on the function definitions by another part of the
    code so these have been left in place.
    
    The functionParams method has to filter out JVM bridge methods to ensure
    the correct version of the apply() method (with type parameter
    information) is captured.  Function objects only have one defined method
    named apply() so taking the head of the list should always be safe.
    Tidied up code and tests before merge
    Added test to assert custom mappers working in Scala world.
    Added additional test for the case "Custom object with a string constructor"
    Fixed broken tests (ScalaDslTest was just a line number change, and other was a half implemented test case for custom mappers) should build ok now.
    Base of further tests for new type handling - specifically to check the locale based differences, and customer mappers
    Added additional test for datatable with an additional argument
    Resolved issue with parsing biginteger and bigdecimal
    Removed 'string only' types for scala so can work with complex types (i.e. data tables) - need to implement xstream parser for bigint and bigdecimal
    Hack fixed #443 and added appropriate tests - requires refactor.
    Added cucumber scenario to reproduce issue #443 DataTable arguments aren't working with cucumber-scala
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Dominic: fix line number reference in test code
    Dominic: add scenario name to test stub
    Add Scenario.source_tag_names to work with Capybara. Closes #504.
    Fixed broken tests (ScalaDslTest was just a line number change, and other was a half implemented test case for custom mappers) should build ok now.
    Removed transform scala, and started commenting existing code
    Fixed unit test that assumed all types from core cucumber were string
    Removed 'string only' types for scala so can work with complex types (i.e. data tables) - need to implement xstream parser for bigint and bigdecimal
    Passing Scenario reference in Before and After hooks. Added idea plugin in pom to generate idea files
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Show code source for Java step definitions in case of duplicates or ambiguous stepdefs.
    Fix tagged hooks for scenario outlines. Closes #209, closes #210
    Use I18n instead of Locale since converting from Locale to I18n is tricky.
    Hooks can receive results. Closes #27.
    support for 'getOrder' on Hooks
    scala support
    Refactored SnippetGenerator.
    
    There was too much parallel effort in the CamelCase and Underscore
    implementations, so the new structure shares most of the logic
    and implements the different logic in a Concatenator.
    
    I also made sure IntelliJ doesn't break because of the new
    scenario lifecycle methods in the gherkin formatter interface.
    Remove duplication in Reflections implementations.
    
    Renamed Reflections to ClassFinder and removed generic methods.
    Created a new Reflections class that delegates to a ClassFinder.
    Refactored --snippet option. Closes #561, #302
    All tests passing again. Ref #525.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Fixed regression from v1.0.6 in Scala module - glue code wasn't loaded at all. Closes #321
    Pass in ClassLoader from the outside. This is necessary in order to construct a working Runtime from a different environment, like Jython. See #151
    Make ScalaDsl play nice with objects
    
    Go go abusive reflection.
    Improve Scala a little bit. Still needs work.
    Partially fix the scala stuff.
    
    But now I'm out of scala-fu :(
    Replace inheritance with delegation for #138
    Scala fixes
    Reenabled Scala
    Fix compilation of Scala module and example.
    control backends from world
    flatMap that shit
    Instantiate all packages
    Pass several script paths/packages to the Backend constructors. (We can't have a backend per package/script path, because code in backend A would not be able to talk to code in backend B)
    scala support
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Fixed generated Scala snippets
    Update all snippets to throw PendingException, following up on #271. Need to make Clojure do this.
    Snippets for DataTable include a hint about using List<YourType>, so people discover this neat technique
    Replace inheritance with delegation for #138
    Fix compilation of Scala module and example.
    scala support (cleanup)
    scala support
    Upgrade to gherkin 2.12.0
    Tidied up code and tests before merge
    Incremental refactoring
    Passing Scenario reference in Before and After hooks. Added idea plugin in pom to generate idea files
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Changes to work with gherkin's hook-reporting branch
    Fix tagged hooks for scenario outlines. Closes #209, closes #210
    Hooks can receive results. Closes #27.
    support for 'getOrder' on Hooks
    Implemented ScalaHookDefinition.getOrder() = Integer.MAX_VALUE
    scala support
    Fix for #668 - using Java reflection in ScalaDsl
    
    The previous implementation was using Scala 2.9 reflection via
    Manifest[T] to extract the function parameter types using the erasure
    method (renamed to runtimeClass in Scala 2.10).
    
    The problem with this approach is that Manifest.erasure provides the
    runtime java.lang.reflect.Type, which means the type has been erased of
    paramterized type info.
    
    The ParameterInfo class relies on the ParamaterizedType information
    to determine how to auto populate Step arguments of type
    java.util.List<T>. When using java Lists from the Scala DSL, this logic
    would fail.
    
    As ParameterInfo's implementation is entirely based on the Java
    reflection API, it makes more sense to use Java reflection in the
    implementation of Scala DSL as it will be compatible with the logic in
    core.
    
    This change uses Java reflection on the Scala Function objects to
    extract the ParameterizedType information, which also simplifies the
    code.
    
    The manifest is no longer used by the register method, but seems to
    still be required on the function definitions by another part of the
    code so these have been left in place.
    
    The functionParams method has to filter out JVM bridge methods to ensure
    the correct version of the apply() method (with type parameter
    information) is captured.  Function objects only have one defined method
    named apply() so taking the head of the list should always be safe.
    Fixed broken tests (ScalaDslTest was just a line number change, and other was a half implemented test case for custom mappers) should build ok now.
    Incremental refactoring
    Removed transform scala, and started commenting existing code
    Removed 'string only' types for scala so can work with complex types (i.e. data tables) - need to implement xstream parser for bigint and bigdecimal
    Hack fixed #443 and added appropriate tests - requires refactor.
    Improved Transformer API
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Add support for List step definition parameters
    Build passes with cucumber-deps
    Build passes with cucumber-deps
    Refactored the StepDefinition interface so that backends for dynamic languages can infer the type of a parameter based on the actual argument type passed to it.
    Show code source for Java step definitions in case of duplicates or ambiguous stepdefs.
    Use I18n instead of Locale since converting from Locale to I18n is tricky.
    Fix compilation of Scala module and example.
    Moved table conversion logic from java to core
    Oops I broke Scala again. Fixed.
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    scala support (cleanup)
    scala support
    moved import to a language compiler option so that scala 2.9 continues to work
    fixed scala warnings
    Fix for #668 - using Java reflection in ScalaDsl
    
    The previous implementation was using Scala 2.9 reflection via
    Manifest[T] to extract the function parameter types using the erasure
    method (renamed to runtimeClass in Scala 2.10).
    
    The problem with this approach is that Manifest.erasure provides the
    runtime java.lang.reflect.Type, which means the type has been erased of
    paramterized type info.
    
    The ParameterInfo class relies on the ParamaterizedType information
    to determine how to auto populate Step arguments of type
    java.util.List<T>. When using java Lists from the Scala DSL, this logic
    would fail.
    
    As ParameterInfo's implementation is entirely based on the Java
    reflection API, it makes more sense to use Java reflection in the
    implementation of Scala DSL as it will be compatible with the logic in
    core.
    
    This change uses Java reflection on the Scala Function objects to
    extract the ParameterizedType information, which also simplifies the
    code.
    
    The manifest is no longer used by the register method, but seems to
    still be required on the function definitions by another part of the
    code so these have been left in place.
    
    The functionParams method has to filter out JVM bridge methods to ensure
    the correct version of the apply() method (with type parameter
    information) is captured.  Function objects only have one defined method
    named apply() so taking the head of the list should always be safe.
    Fixed transformation issue to use java layer for transforms
    Changes to scala dsl
    Incremental refactoring
    Removed transform scala, and started commenting existing code
    Passing Scenario reference in Before and After hooks. Added idea plugin in pom to generate idea files
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    support for 'getOrder' on Hooks
    scala support
    Proposed solution for issue #432
    The main scala build has been modified to generate an artifact named cucumber-scala_2.10
    A new sub-directory of the scala build has been created. This uses the same source files as its parent but builds a cucumber-scala_2.9.2 artifact using the Scala 2.9.2 compiler and library
    To get this to work correctly the README.java and package.html files were moved into the scala source tree
    The scala-calculator example was modified to use the cucumber-scala_2.10 artifact
    The root pom.xml file no longer directly references Scala library dependencies as there are now different versions between the 2.10 and 2.9.2 build. (Is the a solution to this?)
    Proposed solution for issue #432
    The main scala build has been modified to generate an artifact named cucumber-scala_2.10
    A new sub-directory of the scala build has been created. This uses the same source files as its parent but builds a cucumber-scala_2.9.2 artifact using the Scala 2.9.2 compiler and library
    To get this to work correctly the README.java and package.html files were moved into the scala source tree
    The scala-calculator example was modified to use the cucumber-scala_2.10 artifact
    The root pom.xml file no longer directly references Scala library dependencies as there are now different versions between the 2.10 and 2.9.2 build. (Is the a solution to this?)
    Proposed solution for issue #432
    The main scala build has been modified to generate an artifact named cucumber-scala_2.10
    A new sub-directory of the scala build has been created. This uses the same source files as its parent but builds a cucumber-scala_2.9.2 artifact using the Scala 2.9.2 compiler and library
    To get this to work correctly the README.java and package.html files were moved into the scala source tree
    The scala-calculator example was modified to use the cucumber-scala_2.10 artifact
    The root pom.xml file no longer directly references Scala library dependencies as there are now different versions between the 2.10 and 2.9.2 build. (Is the a solution to this?)
    Proposed solution for issue #432
    The main scala build has been modified to generate an artifact named cucumber-scala_2.10
    A new sub-directory of the scala build has been created. This uses the same source files as its parent but builds a cucumber-scala_2.9.2 artifact using the Scala 2.9.2 compiler and library
    To get this to work correctly the README.java and package.html files were moved into the scala source tree
    The scala-calculator example was modified to use the cucumber-scala_2.10 artifact
    The root pom.xml file no longer directly references Scala library dependencies as there are now different versions between the 2.10 and 2.9.2 build. (Is the a solution to this?)
    Proposed solution for issue #432
    The main scala build has been modified to generate an artifact named cucumber-scala_2.10
    A new sub-directory of the scala build has been created. This uses the same source files as its parent but builds a cucumber-scala_2.9.2 artifact using the Scala 2.9.2 compiler and library
    To get this to work correctly the README.java and package.html files were moved into the scala source tree
    The scala-calculator example was modified to use the cucumber-scala_2.10 artifact
    The root pom.xml file no longer directly references Scala library dependencies as there are now different versions between the 2.10 and 2.9.2 build. (Is the a solution to this?)
    Proposed solution for issue #432
    The main scala build has been modified to generate an artifact named cucumber-scala_2.10
    A new sub-directory of the scala build has been created. This uses the same source files as its parent but builds a cucumber-scala_2.9.2 artifact using the Scala 2.9.2 compiler and library
    To get this to work correctly the README.java and package.html files were moved into the scala source tree
    The scala-calculator example was modified to use the cucumber-scala_2.10 artifact
    The root pom.xml file no longer directly references Scala library dependencies as there are now different versions between the 2.10 and 2.9.2 build. (Is the a solution to this?)
    Moved the JUnit package and configured API docs
    Simplify i18n build. Thanks @robertoandrade - ref #487
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Normalized groovy and scala generated code as well
    Delete all generated files. We generate them in the build now.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.5
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.4
    Scala tweaks. Closes #432, #462.
    Rename directory
    Proposed solution for issue #432
    The main scala build has been modified to generate an artifact named cucumber-scala_2.10
    A new sub-directory of the scala build has been created. This uses the same source files as its parent but builds a cucumber-scala_2.9.2 artifact using the Scala 2.9.2 compiler and library
    To get this to work correctly the README.java and package.html files were moved into the scala source tree
    The scala-calculator example was modified to use the cucumber-scala_2.10 artifact
    The root pom.xml file no longer directly references Scala library dependencies as there are now different versions between the 2.10 and 2.9.2 build. (Is the a solution to this?)
    Proposed solution for issue #432
    The main scala build has been modified to generate an artifact named cucumber-scala_2.10
    A new sub-directory of the scala build has been created. This uses the same source files as its parent but builds a cucumber-scala_2.9.2 artifact using the Scala 2.9.2 compiler and library
    To get this to work correctly the README.java and package.html files were moved into the scala source tree
    The scala-calculator example was modified to use the cucumber-scala_2.10 artifact
    The root pom.xml file no longer directly references Scala library dependencies as there are now different versions between the 2.10 and 2.9.2 build. (Is the a solution to this?)
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.3
    Proposed solution for issue #432
    The main scala build has been modified to generate an artifact named cucumber-scala_2.10
    A new sub-directory of the scala build has been created. This uses the same source files as its parent but builds a cucumber-scala_2.9.2 artifact using the Scala 2.9.2 compiler and library
    To get this to work correctly the README.java and package.html files were moved into the scala source tree
    The scala-calculator example was modified to use the cucumber-scala_2.10 artifact
    The root pom.xml file no longer directly references Scala library dependencies as there are now different versions between the 2.10 and 2.9.2 build. (Is the a solution to this?)
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.2
    Revert to scala 2.9.2. Remove unused pom stuff.
    Passing Scenario reference in Before and After hooks. Added idea plugin in pom to generate idea files
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.0
    Some last minute fixes before the 1.1.0 release.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.13
    Release 1.0.13 with better packaging
    increase version to prepare for next development iteration:
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.12
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.11
    Undo bad changes I mkade in bbe40d3d451703f41ef36d16415144268d6ff72a while fixing #356
    Fix tests that broke in #356
    Tweak poms so they work in IDEA as well
    Cleaning up poms
    Build passes with cucumber-deps
    Cleaning up poms
    Build passes with cucumber-deps
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.8
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.7
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.5
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Added cobertura code coverage and started to clean up some cruftiness in the io package
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.4
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0
          oe               .n~~%x.                .n~~%x.
        .@88             x88X   888.            x88X   888.
    ==*88888            X888X   8888L          X888X   8888L
       88888           X8888X   88888         X8888X   88888
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888f        88888X   88888f
       88888       .   48888X   88888     .   48888X   88888
       88888     .@8c   ?888X   8888"   .@8c   ?888X   8888"
       88888    '%888"   "88X   88*`   '%888"   "88X   88*`
    '**%%%%%%**   ^*       ^"==="`       ^*       ^"==="`
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC24
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC23
    Make sure scala javadoc jar is deployed. Closes #231.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC22
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC21
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC20
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC19
    Try release one more time
    Let's try that release again
    Optimize imports, format code
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC16
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC15
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC13
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC12
    Fix Scala build. Closes #167.
    Only add scala sources in one place. This might fix #157
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC11
    I think this fixes build problems on Windows.
    Make POMs Windows-happy
    
    When ${baseDir} gets interpolated on Windows the traditional double-quote
    delimiters make for a malformed String literal.
    Fix Windows build problems mentioned in #154. Add History entries.
    #154, RunCukesTest.scala uses ScalaBackend.loadGlue which calls ClasspathResourceLoader().instantiateSubclasses which didn't check if the class had a valid constructor given the arguments. ScalaDslTest.scala holds multiple internal ScalaDsl instances which are compiled to classes implementing ScalaDsl but with no valid constructor. These were being picked up by the ClasspathResourceLoader causing the RunCukesTest to fail at load time
    Update version
    Set up the generation of sources to happen in the target directory
    
    Added a second "execution" of the scala plugin to add the source directory for the generated sources
    Set project version correctly
    Re-adding the poms from before the ant/ivy stuff
    Dual build
    Added back poms - they are generated from ivy.xml (except the parent pom)
    Don't come back maven
    Fix compilation of Scala module and example.
    Let's try to make a release
    Change dependencies so that full-jars don't bundle all jars (users are expected to provide them themselves). Closes #28.
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    Rename scala artifact to cucumber-scala
    scala support
    Changed groupId to info.cukes, and prepended cucumber- to all artifacts. Added shade plugin, so all artifacts have a -full (self contained) jar. Closes #11.
    Fix version/newline/maven problems
    Fixed pom issues
    Moved stuff around
    Support several backends. Still struggling with Guice and Spring.
    Updated to latest Gherkin
    Move shit around
    Changed unrelesed to unreleased
    Words
    Updated docs and added scripts for API docs
    Tell people to compile
    remove JUnit-dependency from pom.xml for TestNG-example
    Bump version on examples java-calculator-testng and java-wicket
    Java Calculator TestNG example project.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.4
    Various changes needed to improve the formatting API
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.0
    Some last minute fixes before the 1.1.0 release.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.13
    increase version to prepare for next development iteration:
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.12
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.11
    Undo bad changes I mkade in bbe40d3d451703f41ef36d16415144268d6ff72a while fixing #356
    Fix tests that broke in #356
    Update examples to use Transform
    Cleaning up poms
    Build passes with cucumber-deps
    Cleaning up poms
    Build passes with cucumber-deps
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.8
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.7
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.5
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.4
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0
          oe               .n~~%x.                .n~~%x.
        .@88             x88X   888.            x88X   888.
    ==*88888            X888X   8888L          X888X   8888L
       88888           X8888X   88888         X8888X   88888
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888f        88888X   88888f
       88888       .   48888X   88888     .   48888X   88888
       88888     .@8c   ?888X   8888"   .@8c   ?888X   8888"
       88888    '%888"   "88X   88*`   '%888"   "88X   88*`
    '**%%%%%%**   ^*       ^"==="`       ^*       ^"==="`
    Make sure strings are quoted before printing to js. Closes #254
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC24
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC23
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC22
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC21
    clean up of dependencies in pom.xml of Java Calculator Examples
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC20
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC19
    Try release one more time
    Let's try that release again
    Optimize imports, format code
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC16
    Make sure examples are working. Should run them before each release.
    Update versions
    Update version
    Set project version correctly
    Re-adding the poms from before the ant/ivy stuff
    Make sure poms are published to local repo. You should probably delete rm -Rf ~/.m2/repository ~/.ivy2/cache - see #143 and #144.
    Fix refs
    Let's try to make a release
    Change dependencies so that full-jars don't bundle all jars (users are expected to provide them themselves). Closes #28.
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    Added an example using Selenium WebDriver, Webbit and WebSockets.
    Added tag support for tags. Closes #9. Closes #10.
    Changed groupId to info.cukes, and prepended cucumber- to all artifacts. Added shade plugin, so all artifacts have a -full (self contained) jar. Closes #11.
    Fix version/newline/maven problems
    Better CLI runner
    Added an example
    Cleaning poms from duplicate project versions.
    Moved stuff around
    Much more modular
    More submodules
    More submodules, new Annotations.
    Better abstractions by bringing in Groovy
    Java Calculator TestNG example project.
    Adding eclipse files to ignore list
    Adding eclipse project files to .gitignore
    Java Calculator TestNG example project.
    Java Calculator TestNG example project.
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Make sure examples are working. Should run them before each release.
    Rewrote a lot of the resource loading code
    JUnit delegates events to a secondary reporter (for example pretty or HTML) so we can get nice reports also when running from JUnit. Needs more work. See new TODOs.
    Java Calculator TestNG example project.
    Some last minute fixes before the 1.1.0 release.
    Improved Transformer API
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Make sure examples are working. Should run them before each release.
    Rewrote a lot of the resource loading code
    Fix weird indentation.
    Fixed typo in the test
    Added date_calculator_Test to illustrate the usage of #60. Still TODO:
    a) Add this to the documentation
    b) Add ability to use custom dates in List<Object>
    Java Calculator TestNG example project.
    Fix the build
    Various changes needed to improve the formatting API
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Make sure examples are working. Should run them before each release.
    Rewrote a lot of the resource loading code
    Indentation
    Fix indentation and simplify
    Indentation change
    Added basic_arithmetic example to show #75 is solved - you can now add a Given with a List<SomeObject> signature to a Scenario Outline
    Implemented suggestions in https://github.com/mmalmeida/cucumber-jvm/commit/7e994f50c50b7e0a6655f0290e8d2a2cbde9a52b#commitcomment-683920
    Update ja deps
    Added a failing test to Scenario outline
    Scenario Outlines and Background are roughly working
    Started on background
    JUnit delegates events to a secondary reporter (for example pretty or HTML) so we can get nice reports also when running from JUnit. Needs more work. See new TODOs.
    Added another example that shows off features a little more
    Added tag support for tags. Closes #9. Closes #10.
    Fix version/newline/maven problems
    Added an example
    Changing assertEquals from JUnit to TestNG within TestNG-example
    Java Calculator TestNG example project.
    Works fine when annotating the field as well
    Fix bugin example
    Fixed a bug where  annotations were ignored
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Make sure examples are working. Should run them before each release.
    Added date_calculator_Test to illustrate the usage of #60. Still TODO:
    a) Add this to the documentation
    b) Add ability to use custom dates in List<Object>
    Added another example that shows off features a little more
    Changing assertEquals from JUnit to TestNG within TestNG-example
    Java Calculator TestNG example project.
    Various changes needed to improve the formatting API
    Remove warnings and deprecated code
    Fixed a bug where  would fail with the JUnit runner.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Make sure strings are quoted before printing to js. Closes #254
    Fix indentation and simplify
    Added basic_arithmetic example to show #75 is solved - you can now add a Given with a List<SomeObject> signature to a Scenario Outline
    Implemented suggestions in https://github.com/mmalmeida/cucumber-jvm/commit/7e994f50c50b7e0a6655f0290e8d2a2cbde9a52b#commitcomment-683920
    Added a failing test to Scenario outline
    Scenario Outlines and Background are roughly working
    Started on background
    Added tag support for tags. Closes #9. Closes #10.
    Fix indentation
    gh-9 Very basic Java implementation of hooks
    Remove ant and maven plugins - no longer needed now that we can use JUnit
    Added an example
    Changing assertEquals from JUnit to TestNG within TestNG-example
    Java Calculator TestNG example project.
    Some last minute fixes before the 1.1.0 release.
    Improved Transformer API
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Make sure examples are working. Should run them before each release.
    More tweaks to make #106 work properly. The JUnit integration is more complicated and fragile than I like.
    Throw exceptions, don't return them.
    Fix weird indentation.
    Indentation changed from tab size 4 to spaces only - 4 lines
    Fixed typo in the test
    Code cleanup
    Added date_calculator_Test to illustrate the usage of #60. Still TODO:
    a) Add this to the documentation
    b) Add ability to use custom dates in List<Object>
    Address pull request comments
    Allow TestNG test cases to not have to inherit from AbstractTestNGCucumberTests
    Allow TestNG test cases to not have to inherit from AbstractTestNGCucumberTests
    Java Calculator TestNG example project.
     is deprecated in favour of . Closes #549
    Enable JSON formater for a little bit of regression testing
    Moved the JUnit package and configured API docs
    Make sure examples are working. Should run them before each release.
    More ivy
    Moved stuff around
    Java Calculator TestNG example project.
    Fix weird indentation.
    Added date_calculator_Test to illustrate the usage of #60. Still TODO:
    a) Add this to the documentation
    b) Add ability to use custom dates in List<Object>
    Java Calculator TestNG example project.
    Make sure examples are working. Should run them before each release.
    Some changes that improve readability of the java-calculator artifact.
    Added another example that shows off features a little more
    Fix version/newline/maven problems
    Added an example
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.5
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.4
    Various changes needed to improve the formatting API
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.0
    Some last minute fixes before the 1.1.0 release.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.13
    increase version to prepare for next development iteration:
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.12
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.11
    Undo bad changes I mkade in bbe40d3d451703f41ef36d16415144268d6ff72a while fixing #356
    Fix tests that broke in #356
    Update examples to use Transform
    Cleaning up poms
    Build passes with cucumber-deps
    Cleaning up poms
    Build passes with cucumber-deps
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.8
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.7
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.5
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.4
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0
          oe               .n~~%x.                .n~~%x.
        .@88             x88X   888.            x88X   888.
    ==*88888            X888X   8888L          X888X   8888L
       88888           X8888X   88888         X8888X   88888
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888f        88888X   88888f
       88888       .   48888X   88888     .   48888X   88888
       88888     .@8c   ?888X   8888"   .@8c   ?888X   8888"
       88888    '%888"   "88X   88*`   '%888"   "88X   88*`
    '**%%%%%%**   ^*       ^"==="`       ^*       ^"==="`
    Make sure strings are quoted before printing to js. Closes #254
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC24
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC23
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC22
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC21
    clean up of dependencies in pom.xml of Java Calculator Examples
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC20
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC19
    Try release one more time
    Let's try that release again
    Optimize imports, format code
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC16
    Make sure examples are working. Should run them before each release.
    Update versions
    Update version
    Set project version correctly
    Re-adding the poms from before the ant/ivy stuff
    Make sure poms are published to local repo. You should probably delete rm -Rf ~/.m2/repository ~/.ivy2/cache - see #143 and #144.
    Fix refs
    Let's try to make a release
    Change dependencies so that full-jars don't bundle all jars (users are expected to provide them themselves). Closes #28.
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    Added an example using Selenium WebDriver, Webbit and WebSockets.
    Added tag support for tags. Closes #9. Closes #10.
    Changed groupId to info.cukes, and prepended cucumber- to all artifacts. Added shade plugin, so all artifacts have a -full (self contained) jar. Closes #11.
    Fix version/newline/maven problems
    Better CLI runner
    Added an example
    Cleaning poms from duplicate project versions.
    Moved stuff around
    Much more modular
    More submodules
    More submodules, new Annotations.
    Better abstractions by bringing in Groovy
    Adding eclipse files to ignore list
    Adding eclipse project files to .gitignore
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Make sure examples are working. Should run them before each release.
    Rewrote a lot of the resource loading code
    JUnit delegates events to a secondary reporter (for example pretty or HTML) so we can get nice reports also when running from JUnit. Needs more work. See new TODOs.
    Some last minute fixes before the 1.1.0 release.
    Improved Transformer API
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Make sure examples are working. Should run them before each release.
    Rewrote a lot of the resource loading code
    Fix weird indentation.
    Fixed typo in the test
    Added date_calculator_Test to illustrate the usage of #60. Still TODO:
    a) Add this to the documentation
    b) Add ability to use custom dates in List<Object>
    Fix the build
    Various changes needed to improve the formatting API
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Make sure examples are working. Should run them before each release.
    Rewrote a lot of the resource loading code
    Indentation
    Fix indentation and simplify
    Indentation change
    Added basic_arithmetic example to show #75 is solved - you can now add a Given with a List<SomeObject> signature to a Scenario Outline
    Implemented suggestions in https://github.com/mmalmeida/cucumber-jvm/commit/7e994f50c50b7e0a6655f0290e8d2a2cbde9a52b#commitcomment-683920
    Update ja deps
    Added a failing test to Scenario outline
    Scenario Outlines and Background are roughly working
    Started on background
    JUnit delegates events to a secondary reporter (for example pretty or HTML) so we can get nice reports also when running from JUnit. Needs more work. See new TODOs.
    Added another example that shows off features a little more
    Added tag support for tags. Closes #9. Closes #10.
    Fix version/newline/maven problems
    Added an example
    Works fine when annotating the field as well
    Fix bugin example
    Fixed a bug where  annotations were ignored
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Make sure examples are working. Should run them before each release.
    Added date_calculator_Test to illustrate the usage of #60. Still TODO:
    a) Add this to the documentation
    b) Add ability to use custom dates in List<Object>
    Added another example that shows off features a little more
    Various changes needed to improve the formatting API
    Remove warnings and deprecated code
    Fixed a bug where  would fail with the JUnit runner.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Make sure strings are quoted before printing to js. Closes #254
    Fix indentation and simplify
    Added basic_arithmetic example to show #75 is solved - you can now add a Given with a List<SomeObject> signature to a Scenario Outline
    Implemented suggestions in https://github.com/mmalmeida/cucumber-jvm/commit/7e994f50c50b7e0a6655f0290e8d2a2cbde9a52b#commitcomment-683920
    Added a failing test to Scenario outline
    Scenario Outlines and Background are roughly working
    Started on background
    Added tag support for tags. Closes #9. Closes #10.
    Fix indentation
    gh-9 Very basic Java implementation of hooks
    Remove ant and maven plugins - no longer needed now that we can use JUnit
    Added an example
    Some last minute fixes before the 1.1.0 release.
    Improved Transformer API
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Make sure examples are working. Should run them before each release.
    More tweaks to make #106 work properly. The JUnit integration is more complicated and fragile than I like.
    Throw exceptions, don't return them.
    Fix weird indentation.
    Indentation changed from tab size 4 to spaces only - 4 lines
    Fixed typo in the test
    Code cleanup
    Added date_calculator_Test to illustrate the usage of #60. Still TODO:
    a) Add this to the documentation
    b) Add ability to use custom dates in List<Object>
    Report summaries and  in the same way as the CLI
     is deprecated in favour of . Closes #549
    Enable JSON formater for a little bit of regression testing
    Moved the JUnit package and configured API docs
    Make sure examples are working. Should run them before each release.
    More ivy
    Moved stuff around
    Fix weird indentation.
    Added date_calculator_Test to illustrate the usage of #60. Still TODO:
    a) Add this to the documentation
    b) Add ability to use custom dates in List<Object>
    Make sure examples are working. Should run them before each release.
    Some changes that improve readability of the java-calculator artifact.
    Added another example that shows off features a little more
    Fix version/newline/maven problems
    Added an example
    Report summaries and  in the same way as the CLI
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.6
    added spring-context-support for the spring examples project
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.5
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.4
    All cucumber tests scenarios are green for the examples/spring-tx project.
    Updated library versions
    Updated library versions
    Closes #422.
    I need help -- can't autowire WebApplicationContext instance in cucumber's context.
    Added a repository for the spring-test-mvc module.
    Chapter 14 of the Cucumber Book
    Spring Data JPA based repositories.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.0
    Some last minute fixes before the 1.1.0 release.
    [ah] Added a Spring/JPA example. Need to get the txn stuff working.
    Various changes needed to improve the formatting API
    Created Spring beans mock configuration for the examples/spring-tx project.
    Removed duplicated Spring configuration files for the examples/spring-tx project.
    Spring Data JPA based repositories.
    [ah] Added a Spring/JPA example. Need to get the txn stuff working.
    Optimize imports, reformat
    Added Spring example based on xml configuration
    Working Guice and Spring examples
    Moved stuff around
    Support several backends. Still struggling with Guice and Spring.
    If you write code that forces me to check your exceptions, then I will rip off your head and piss in your dead skull.
    Move shit around
    Release 0.3.3 - upgrading lots of stuff
    Rename packages from cucumber to cuke4duke
    Added ant build.xml for simple example. Some more renames
    Lots of restructuring and renaming. Ruby code is now packaged inside the jar. No more gem packaging.
    Use UNIX, not Windows line endings
    Added support for spring autowiring into Step classes.
    Created Spring beans mock configuration for the examples/spring-tx project.
    Removed duplicated Spring configuration files for the examples/spring-tx project.
    Chapter 14 of the Cucumber Book
    Spring Data JPA based repositories.
    [ah] Added a Spring/JPA example. Need to get the txn stuff working.
    Optimize imports, reformat
    Added Spring example based on xml configuration
    Working Guice and Spring examples
    Moved stuff around
    Support several backends. Still struggling with Guice and Spring.
    If you write code that forces me to check your exceptions, then I will rip off your head and piss in your dead skull.
    Move shit around
    Release 0.3.3 - upgrading lots of stuff
    Rename packages from cucumber to cuke4duke
    Added ant build.xml for simple example. Some more renames
    Lots of restructuring and renaming. Ruby code is now packaged inside the jar. No more gem packaging.
    Use UNIX, not Windows line endings
    Added support for spring autowiring into Step classes.
    Various changes needed to improve the formatting API
    Chapter 14 of the Cucumber Book
    Various changes needed to improve the formatting API
    Align with the Cucumber book
    Align snippets for quoted arguments with cucumber-ruby
    Renames
    Created Spring beans mock configuration for the examples/spring-tx project.
    All cucumber tests scenarios are green for the examples/spring-tx project.
    I need help -- can't autowire WebApplicationContext instance in cucumber's context.
    Chapter 14 of the Cucumber Book
    Change some remaining Cucumber.Options to CucumberOptions
    Moved the JUnit package and configured API docs
    [ah] Added a Spring/JPA example. Need to get the txn stuff working.
    All cucumber tests scenarios are green for the examples/spring-tx project.
    Align with the Cucumber book
    Created Spring beans mock configuration for the examples/spring-tx project.
    Chapter 14 of the Cucumber Book
    Align with the Cucumber book
    [ah] Added a Spring/JPA example. Need to get the txn stuff working.
    Chapter 14 of the Cucumber Book
    Various changes needed to improve the formatting API
    Chapter 14 of the Cucumber Book
    Align with the Cucumber book
    [ah] Added a Spring/JPA example. Need to get the txn stuff working.
    Spring Data JPA based repositories.
    Align with the Cucumber book
    Various changes needed to improve the formatting API
    Chapter 14 of the Cucumber Book
    Align with the Cucumber book
    [ah] Added a Spring/JPA example. Need to get the txn stuff working.
    Spring Data JPA based repositories.
    Align with the Cucumber book
    Chapter 14 of the Cucumber Book
    Chapter 14 of the Cucumber Book
    Removed duplicated Spring configuration files for the examples/spring-tx project.
    Chapter 14 of the Cucumber Book
    Spring Data JPA based repositories.
    [ah] Added a Spring/JPA example. Need to get the txn stuff working.
    Optimize imports, reformat
    Added Spring example based on xml configuration
    Working Guice and Spring examples
    Moved stuff around
    Support several backends. Still struggling with Guice and Spring.
    If you write code that forces me to check your exceptions, then I will rip off your head and piss in your dead skull.
    Move shit around
    Release 0.3.3 - upgrading lots of stuff
    Rename packages from cucumber to cuke4duke
    Added ant build.xml for simple example. Some more renames
    Lots of restructuring and renaming. Ruby code is now packaged inside the jar. No more gem packaging.
    Use UNIX, not Windows line endings
    Added support for spring autowiring into Step classes.
    Chapter 14 of the Cucumber Book
    Spring Data JPA based repositories.
    [ah] Added a Spring/JPA example. Need to get the txn stuff working.
    Chapter 14 of the Cucumber Book
    Chapter 14 of the Cucumber Book
    Bump version on examples java-calculator-testng and java-wicket
    Change pom name
    Enable Wicket example, using HtmlUnitDriver so it runs on Travis. Upgraded maven plugins.
    Moved dependency versions to root pom
    Added Wicket example to the examples profile and moved dependencies to the root pom
    Updated dependency version
    Added a WebDriver Selenium, Wicket, cucumber-JVM example
    Enable wicket example. Removed incorrect comment about cargo requiring Java 7. It does not. (Jetty 9 does, but we're on 8 now).
    More Java 7
    Spelling and formatting
    Added Java 7 information
    Added a WebDriver Selenium, Wicket, cucumber-JVM example
    Bump version on examples java-calculator-testng and java-wicket
    Change pom name
    Enable Wicket example, using HtmlUnitDriver so it runs on Travis. Upgraded maven plugins.
    Make Wicket example run on Java 1.6
    Moved dependency versions to root pom
    Various changes needed to improve the formatting API
    Added Wicket example to the examples profile and moved dependencies to the root pom
    Updated dependency version
    Added a WebDriver Selenium, Wicket, cucumber-JVM example
    Added a WebDriver Selenium, Wicket, cucumber-JVM example
    Added a WebDriver Selenium, Wicket, cucumber-JVM example
    Moved the JUnit package and configured API docs
    Make sure examples are working. Should run them before each release.
    Scala fixes
    Upgrade deps, improve snippets.
    Added Jython support
    Moved stuff around
    Enable Wicket example, using HtmlUnitDriver so it runs on Travis. Upgraded maven plugins.
    Make Wicket example run on Java 1.6
    Added a WebDriver Selenium, Wicket, cucumber-JVM example
    Added a WebDriver Selenium, Wicket, cucumber-JVM example
    Bump version on examples java-calculator-testng and java-wicket
    Change pom name
    Enable Wicket example, using HtmlUnitDriver so it runs on Travis. Upgraded maven plugins.
    Moved dependency versions to root pom
    Various changes needed to improve the formatting API
    Added Wicket example to the examples profile and moved dependencies to the root pom
    Added a WebDriver Selenium, Wicket, cucumber-JVM example
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.0
    Some last minute fixes before the 1.1.0 release.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.13
    increase version to prepare for next development iteration:
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.12
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.11
    Undo bad changes I mkade in bbe40d3d451703f41ef36d16415144268d6ff72a while fixing #356
    Fix tests that broke in #356
    Update examples to use Transform
    Cleaning up poms
    Build passes with cucumber-deps
    Cleaning up poms
    Build passes with cucumber-deps
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.8
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.7
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.5
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.4
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0
          oe               .n~~%x.                .n~~%x.
        .@88             x88X   888.            x88X   888.
    ==*88888            X888X   8888L          X888X   8888L
       88888           X8888X   88888         X8888X   88888
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888f        88888X   88888f
       88888       .   48888X   88888     .   48888X   88888
       88888     .@8c   ?888X   8888"   .@8c   ?888X   8888"
       88888    '%888"   "88X   88*`   '%888"   "88X   88*`
    '**%%%%%%**   ^*       ^"==="`       ^*       ^"==="`
    Make sure strings are quoted before printing to js. Closes #254
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC24
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC23
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC22
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC21
    clean up of dependencies in pom.xml of Java Calculator Examples
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC20
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC19
    Try release one more time
    Let's try that release again
    Optimize imports, format code
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC16
    Make sure examples are working. Should run them before each release.
    Update versions
    Update version
    Set project version correctly
    Re-adding the poms from before the ant/ivy stuff
    Make sure poms are published to local repo. You should probably delete rm -Rf ~/.m2/repository ~/.ivy2/cache - see #143 and #144.
    Fix refs
    Let's try to make a release
    Change dependencies so that full-jars don't bundle all jars (users are expected to provide them themselves). Closes #28.
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    Added an example using Selenium WebDriver, Webbit and WebSockets.
    Added tag support for tags. Closes #9. Closes #10.
    Changed groupId to info.cukes, and prepended cucumber- to all artifacts. Added shade plugin, so all artifacts have a -full (self contained) jar. Closes #11.
    Fix version/newline/maven problems
    Better CLI runner
    Added an example
    Cleaning poms from duplicate project versions.
    Moved stuff around
    Much more modular
    More submodules
    More submodules, new Annotations.
    Better abstractions by bringing in Groovy
    Added a WebDriver Selenium, Wicket, cucumber-JVM example
    Added a WebDriver Selenium, Wicket, cucumber-JVM example
    Added a WebDriver Selenium, Wicket, cucumber-JVM example
    Added a WebDriver Selenium, Wicket, cucumber-JVM example
    Added a WebDriver Selenium, Wicket, cucumber-JVM example
    Added a WebDriver Selenium, Wicket, cucumber-JVM example
    Added a WebDriver Selenium, Wicket, cucumber-JVM example
    Added a WebDriver Selenium, Wicket, cucumber-JVM example
    Added a WebDriver Selenium, Wicket, cucumber-JVM example
    Added a WebDriver Selenium, Wicket, cucumber-JVM example
    Added a WebDriver Selenium, Wicket, cucumber-JVM example
    Added a WebDriver Selenium, Wicket, cucumber-JVM example
    Update clojure example
    Updated lein-cucumber version
    Upgrade dependencies. Release 1.1.1.
    Upgrade dependencies. Release 1.0.12
    Bump dependencies
    Small Clojure tweaks
    Update version to match current cucumber-jvm snapshot
    Updated lein-cucumber version and readme
    Migrated to lein-cucumber and new step definition syntax.
    Clojure fixes - need to load glue code using Compiler.load, which allows passing in a stream instead of relying on the CLASSPATH to be set up correctly
    Various cleanup
    Implemented Before and After hooks for Clojure
    Added a Clojure/Leiningen example. Closes #25.
    Added a Clojure/Leiningen example. Closes #25.
    Update clojure example
    Small Clojure tweaks
    Updated lein-cucumber version and readme
    Updated README to reflect changes
    Added a Clojure/Leiningen example. Closes #25.
    Fleshed out the Clojure example
    Added a Clojure/Leiningen example. Closes #25.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    update example to use assert so that the feature can actually fail
    Clojure fixes - need to load glue code using Compiler.load, which allows passing in a stream instead of relying on the CLASSPATH to be set up correctly
    dashes are to be prefered to underscores.
    
    but where a namespace has a dash, the corresponding file name should have a underscore.
    
    this is due to '-' not being legal in jvm class names, and how clojure maps namespaces to .clj files and .class files
    Fleshed out the Clojure example
    Added a Clojure/Leiningen example. Closes #25.
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    update example to use assert so that the feature can actually fail
    Fleshed out the Clojure example
    Add a word so we can more easily see arg highlights
    Added a Clojure/Leiningen example. Closes #25.
    Added Jython support
    Added JRuby support. Closes #3.
    Align snippets for quoted arguments with cucumber-ruby
    Migrated to lein-cucumber and new step definition syntax.
    update example to use assert so that the feature can actually fail
    Fleshed out the Clojure example
    Add a word so we can more easily see arg highlights
    Added a Clojure/Leiningen example. Closes #25.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.5
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.4
    Various changes needed to improve the formatting API
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.0
    Some last minute fixes before the 1.1.0 release.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.13
    increase version to prepare for next development iteration:
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.12
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.11
    Undo bad changes I mkade in bbe40d3d451703f41ef36d16415144268d6ff72a while fixing #356
    Fix tests that broke in #356
    Update examples to use Transform
    Cleaning up poms
    Build passes with cucumber-deps
    Cleaning up poms
    Build passes with cucumber-deps
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.8
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.7
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.5
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.4
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.3
    Make it easier to create a DataTable
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0
          oe               .n~~%x.                .n~~%x.
        .@88             x88X   888.            x88X   888.
    ==*88888            X888X   8888L          X888X   8888L
       88888           X8888X   88888         X8888X   88888
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888f        88888X   88888f
       88888       .   48888X   88888     .   48888X   88888
       88888     .@8c   ?888X   8888"   .@8c   ?888X   8888"
       88888    '%888"   "88X   88*`   '%888"   "88X   88*`
    '**%%%%%%**   ^*       ^"==="`       ^*       ^"==="`
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC24
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC23
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC22
    Added version to gmaven-plugin
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC21
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC20
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC19
    Try release one more time
    Let's try that release again
    Optimize imports, format code
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC16
    Compiled Groovy stepdef scripts are found as well as source ones
    Make sure examples are working. Should run them before each release.
    Update versions
    Update version
    Set project version correctly
    Re-adding the poms from before the ant/ivy stuff
    Fixed Groovy example
    Fix refs
    Let's try to make a release
    added cuke4duke groovy example
    Change dependencies so that full-jars don't bundle all jars (users are expected to provide them themselves). Closes #28.
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    Changed groupId to info.cukes, and prepended cucumber- to all artifacts. Added shade plugin, so all artifacts have a -full (self contained) jar. Closes #11.
    Fix version/newline/maven problems
    Fixed pom issues
    Added an example
    Cleaning poms from duplicate project versions.
    Moved stuff around
    More submodules
    More submodules, new Annotations.
    Better abstractions by bringing in Groovy
    added cuke4duke groovy example
    Make sure examples are working. Should run them before each release.
    added cuke4duke groovy example
    Moved the JUnit package and configured API docs
    Make sure examples are working. Should run them before each release.
    Scala fixes
    Upgrade deps, improve snippets.
    Added Jython support
    Moved stuff around
    removed unused captures from regexes
    use slashes to quote regexes so that backslashes don't have to be
    escaped
    Various changes needed to improve the formatting API
    This actually gets those tests passing, whoops
    Explanatory comments added
    
    Included some comments in the Groovy example to help those coming to
    Cucumber-JVM and Groovy from other similar development environments,
    e.g. Behave and Python.
    Changed public Groovy API to cucumber.api.groovy. Fixed some docs.
    Remove unneded import
    Moved groovy stepdef
    Make sure examples are working. Should run them before each release.
    Fixed some Groovy bugs
    added cuke4duke groovy example
    added cuke4duke groovy example
    Bump version of android module.
    bumped missed versions to 1.1.6-SNAPSHOT
    Added Cukulator Android example test.
    Added Cukeulator Android example app.
    Created parent module for android examples.
    Updated android-test example with comments and assertions.
    Trying to repair #550
    REnames
    All tests passing again. Ref #525.
    Added an Android test module for integration-testing the library project.
    Use standard Android Maven Plugin project layout.
    Added android (cucumber-android) module.
    Added info on how to start Android emulator.
    Updated mvn commands in Android Readmes.
    Improve README markup
    Added Cukulator Android example test.
    Created parent module for android examples.
    Bump version of android module.
    bumped missed versions to 1.1.6-SNAPSHOT
    Use PicoContainer for DI in Android Cukelator example. POM renames.
    Refactored android test package names, updated readmes.
    Added Cukulator Android example test.
    Added Cukeulator Android example app.
    Created parent module for android examples.
    Added Cukulator Android example test.
    Added Cukeulator Android example app.
    Added Cukulator Android example test.
    Added Cukeulator Android example app.
    Updated information regarding Android ant build.
    Added Ant file to Android example to automatically download required jars.
    Updated mvn commands in Android Readmes.
    Improve README markup
    Refactored android test package names, updated readmes.
    Clarification about cucumber-android output.
    Added Cukulator Android example test.
    Added Ant file to Android example to automatically download required jars.
    Added Cukulator Android example test.
    Added Cukulator Android example test.
    Added Cukeulator Android example app.
    Added Cukulator Android example test.
    Added Cukulator Android example test.
    Added Cukeulator Android example app.
    Added Cukulator Android example test.
    Added Cukeulator Android example app.
    Change pom name
    Use PicoContainer for DI in Android Cukelator example. POM renames.
    Use CucumberOptions in CucumberInstrumentation, replacing RunWithCucumber. Closes #576.
    Added Cukulator Android example test.
    Added Cukulator Android example test.
    Added Cukulator Android example test.
    Added Cukulator Android example test.
    Added Cukulator Android example test.
    Added Cukulator Android example test.
    Added Cukulator Android example test.
    Added Ant file to Android example to automatically download required jars.
    Fix Cucumber reports for cucumber-android
    
    This enables standard Cucumber reports using the 'format' parameter of
    CucumberOptions. Reports will be stored on the device.
    Updated information regarding Android ant build.
    Added Ant file to Android example to automatically download required jars.
    Refactored android test package names, updated readmes.
    Added Cukulator Android example test.
    Added Cukulator Android example test.
    Bump version of android module.
    bumped missed versions to 1.1.6-SNAPSHOT
    Use PicoContainer for DI in Android Cukelator example. POM renames.
    Added Cukeulator Android example app.
    Added Cukeulator Android example app.
    Added Cukeulator Android example app.
    Improve README markup
    Refactored android test package names, updated readmes.
    Added Cukeulator Android example app.
    Added Cukeulator Android example app.
    Added Cukeulator Android example app.
    Added Cukeulator Android example app.
    Added Cukeulator Android example app.
    Added Cukeulator Android example app.
    Added Cukeulator Android example app.
    Added Cukeulator Android example app.
    Added Cukeulator Android example app.
    Added Cukeulator Android example app.
    Added Cukeulator Android example app.
    Added Cukeulator Android example app.
    Bump version of android module.
    bumped missed versions to 1.1.6-SNAPSHOT
    Test dependency injection in android-test project.
    Added Cukeulator Android example app.
    Created parent module for android examples.
    Created parent module for android examples.
    Refactored --snippet option. Closes #561, #302
    Improve README markup
    Use CucumberOptions in CucumberInstrumentation, replacing RunWithCucumber. Closes #576.
    Added Cukulator Android example test.
    Added Cukeulator Android example app.
    Created parent module for android examples.
    Added Cukulator Android example test.
    Added Cukeulator Android example app.
    Created parent module for android examples.
    Refactored android test package names, updated readmes.
    Created parent module for android examples.
    Updated android-test example with comments and assertions.
    Trying to repair #550
    Added an Android test module for integration-testing the library project.
    Created parent module for android examples.
    Trying to repair #550
    Added an Android test module for integration-testing the library project.
    Refactored android test package names, updated readmes.
    Created parent module for android examples.
    Trying to repair #550
    Added an Android test module for integration-testing the library project.
    Created parent module for android examples.
    Trying to repair #550
    Added an Android test module for integration-testing the library project.
    Test dependency injection in android-test project.
    Change pom name
    Use CucumberOptions in CucumberInstrumentation, replacing RunWithCucumber. Closes #576.
    Refactored android test package names, updated readmes.
    Created parent module for android examples.
    Trying to repair #550
    Added an Android test module for integration-testing the library project.
    Test dependency injection in android-test project.
    Use CucumberOptions in CucumberInstrumentation, replacing RunWithCucumber. Closes #576.
    Refactored android test package names, updated readmes.
    Created parent module for android examples.
    Updated android-test example with comments and assertions.
    Trying to repair #550
    All tests passing again. Ref #525.
    Refactoring for #525. WIP.
    Added assertions to test.
    Added an Android test module for integration-testing the library project.
    Created parent module for android examples.
    Trying to repair #550
    Added an Android test module for integration-testing the library project.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.5
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.4
    Various changes needed to improve the formatting API
    Proposed solution for issue #432
    The main scala build has been modified to generate an artifact named cucumber-scala_2.10
    A new sub-directory of the scala build has been created. This uses the same source files as its parent but builds a cucumber-scala_2.9.2 artifact using the Scala 2.9.2 compiler and library
    To get this to work correctly the README.java and package.html files were moved into the scala source tree
    The scala-calculator example was modified to use the cucumber-scala_2.10 artifact
    The root pom.xml file no longer directly references Scala library dependencies as there are now different versions between the 2.10 and 2.9.2 build. (Is the a solution to this?)
    Proposed solution for issue #432
    The main scala build has been modified to generate an artifact named cucumber-scala_2.10
    A new sub-directory of the scala build has been created. This uses the same source files as its parent but builds a cucumber-scala_2.9.2 artifact using the Scala 2.9.2 compiler and library
    To get this to work correctly the README.java and package.html files were moved into the scala source tree
    The scala-calculator example was modified to use the cucumber-scala_2.10 artifact
    The root pom.xml file no longer directly references Scala library dependencies as there are now different versions between the 2.10 and 2.9.2 build. (Is the a solution to this?)
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.3
    Proposed solution for issue #432
    The main scala build has been modified to generate an artifact named cucumber-scala_2.10
    A new sub-directory of the scala build has been created. This uses the same source files as its parent but builds a cucumber-scala_2.9.2 artifact using the Scala 2.9.2 compiler and library
    To get this to work correctly the README.java and package.html files were moved into the scala source tree
    The scala-calculator example was modified to use the cucumber-scala_2.10 artifact
    The root pom.xml file no longer directly references Scala library dependencies as there are now different versions between the 2.10 and 2.9.2 build. (Is the a solution to this?)
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.0
    Some last minute fixes before the 1.1.0 release.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.13
    increase version to prepare for next development iteration:
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.12
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.11
    Undo bad changes I mkade in bbe40d3d451703f41ef36d16415144268d6ff72a while fixing #356
    Fix tests that broke in #356
    Update examples to use Transform
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.8
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.7
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.5
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.4
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0
          oe               .n~~%x.                .n~~%x.
        .@88             x88X   888.            x88X   888.
    ==*88888            X888X   8888L          X888X   8888L
       88888           X8888X   88888         X8888X   88888
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888f        88888X   88888f
       88888       .   48888X   88888     .   48888X   88888
       88888     .@8c   ?888X   8888"   .@8c   ?888X   8888"
       88888    '%888"   "88X   88*`   '%888"   "88X   88*`
    '**%%%%%%**   ^*       ^"==="`       ^*       ^"==="`
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC24
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC23
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC22
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC21
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC20
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC19
    Try release one more time
    Let's try that release again
    Optimize imports, format code
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC16
    Make sure examples are working. Should run them before each release.
    Update versions
    Update version
    Set project version correctly
    Re-adding the poms from before the ant/ivy stuff
    Fix scala example
    Fix compilation of Scala module and example.
    Let's try to make a release
    Change dependencies so that full-jars don't bundle all jars (users are expected to provide them themselves). Closes #28.
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    Rename scala subproject
    scala support
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Move feature file
    scala support
    Added tag support for tags. Closes #9. Closes #10.
    Fix version/newline/maven problems
    Added an example
    Add delta to assertEquals
    Don't use JUnit's internal/deprecated API
    Fixed compilation error in scala example
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    scala support
    Upgrade dependencies. Release 1.1.1.
    WIP for #160
    Giving another stab at #160
    Scala fixes
    scala support
    scala support
    java-helloworld has moved. Remove old Cuke4Duke docs.
    Some more examples about how to override options
    Updated hello world example
    Added an example illustrating how to override options with cucumber.options.
    Added a Hello World example with Ant
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.6
    Fix concurrency bugs in Selenium Webbit example.
    
    Also switched from Chrome to Firefox, since it doesn't require the installation
    of the chromedriver command line tool.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.5
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.4
    Various changes needed to improve the formatting API
    Don't execute the tests on travis, but compile them
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.0
    Some last minute fixes before the 1.1.0 release.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.13
    increase version to prepare for next development iteration:
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.12
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.11
    Undo bad changes I mkade in bbe40d3d451703f41ef36d16415144268d6ff72a while fixing #356
    Fix tests that broke in #356
    Update examples to use Transform
    Cleaning up poms
    Build passes with cucumber-deps
    Cleaning up poms
    Build passes with cucumber-deps
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.8
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.7
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.5
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.4
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.3
    Make it easier to create a DataTable
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0
          oe               .n~~%x.                .n~~%x.
        .@88             x88X   888.            x88X   888.
    ==*88888            X888X   8888L          X888X   8888L
       88888           X8888X   88888         X8888X   88888
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888f        88888X   88888f
       88888       .   48888X   88888     .   48888X   88888
       88888     .@8c   ?888X   8888"   .@8c   ?888X   8888"
       88888    '%888"   "88X   88*`   '%888"   "88X   88*`
    '**%%%%%%**   ^*       ^"==="`       ^*       ^"==="`
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC24
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC23
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC22
    Added format attribute to @Cucumber.Options. Updated Selenium screenshot example, which should obsolete the need for change requested in #247
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC21
    Fix CLI args
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC20
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC19
    Try release one more time
    Let's try that release again
    Optimize imports, format code
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC16
    Added a screenshot example.
    Make sure examples are working. Should run them before each release.
    Update versions
    Update version
    Set project version correctly
    Re-adding the poms from before the ant/ivy stuff
    Fixed webbit example
    Fix refs
    Let's try to make a release
    Change dependencies so that full-jars don't bundle all jars (users are expected to provide them themselves). Closes #28.
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    Added an example using Selenium WebDriver, Webbit and WebSockets.
    Added tag support for tags. Closes #9. Closes #10.
    Changed groupId to info.cukes, and prepended cucumber- to all artifacts. Added shade plugin, so all artifacts have a -full (self contained) jar. Closes #11.
    Fix version/newline/maven problems
    Better CLI runner
    Added an example
    Cleaning poms from duplicate project versions.
    Moved stuff around
    Much more modular
    More submodules
    More submodules, new Annotations.
    Better abstractions by bringing in Groovy
    Convert temperatures both ways
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Improved WebDriver example that shows how to reuse a driver for the entire JVM. Another case against #295
    Make sure examples are working. Should run them before each release.
    Renames (had tried to make FireFox work, but the WebSockets are too flaky)
    Added an example using Selenium WebDriver, Webbit and WebSockets.
    Various changes needed to improve the formatting API
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Try release one more time
    Optimize imports, format code
    Added a screenshot example.
    Fix concurrency bugs in Selenium Webbit example.
    
    Also switched from Chrome to Firefox, since it doesn't require the installation
    of the chromedriver command line tool.
    Various changes needed to improve the formatting API
    Update javadoc
    Fixed a bug where  would fail with the JUnit runner.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Minor cleanup
    Add a guard to make sure people don't accidentally close the shared driver from a hook or stepdef.
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Improved WebDriver example that shows how to reuse a driver for the entire JVM. Another case against #295
    Added format attribute to @Cucumber.Options. Updated Selenium screenshot example, which should obsolete the need for change requested in #247
    Try release one more time
    Added a screenshot example.
    Refactored Selenium example to illustrate how a shared driver can be used across stepdefs.
    Fix concurrency bugs in Selenium Webbit example.
    
    Also switched from Chrome to Firefox, since it doesn't require the installation
    of the chromedriver command line tool.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Improved WebDriver example that shows how to reuse a driver for the entire JVM. Another case against #295
    Fix concurrency bugs in Selenium Webbit example.
    
    Also switched from Chrome to Firefox, since it doesn't require the installation
    of the chromedriver command line tool.
    Various changes needed to improve the formatting API
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Refactored Selenium example to illustrate how a shared driver can be used across stepdefs.
    Change some remaining Cucumber.Options to CucumberOptions
    Various changes needed to improve the formatting API
    Moved the JUnit package and configured API docs
    Added format attribute to @Cucumber.Options. Updated Selenium screenshot example, which should obsolete the need for change requested in #247
    Make sure examples are working. Should run them before each release.
    Scala fixes
    Upgrade deps, improve snippets.
    Added Jython support
    Moved stuff around
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Convert temperatures both ways
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Improved WebDriver example that shows how to reuse a driver for the entire JVM. Another case against #295
    Refactored Selenium example to illustrate how a shared driver can be used across stepdefs.
    More cleanup
    Renames (had tried to make FireFox work, but the WebSockets are too flaky)
    Added an example using Selenium WebDriver, Webbit and WebSockets.
    Fix concurrency bugs in Selenium Webbit example.
    
    Also switched from Chrome to Firefox, since it doesn't require the installation
    of the chromedriver command line tool.
    Various changes needed to improve the formatting API
    Improved JavaScript for temperature example
    Convert temperatures both ways
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Added an example using Selenium WebDriver, Webbit and WebSockets.
    Fix concurrency bugs in Selenium Webbit example.
    
    Also switched from Chrome to Firefox, since it doesn't require the installation
    of the chromedriver command line tool.
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    Added an example using Selenium WebDriver, Webbit and WebSockets.
    Added an example using Selenium WebDriver, Webbit and WebSockets.
    Fix concurrency bugs in Selenium Webbit example.
    
    Also switched from Chrome to Firefox, since it doesn't require the installation
    of the chromedriver command line tool.
    Updated library versions
    Updated library versions
    Convert temperatures both ways
    Make sure examples are working. Should run them before each release.
    Added an example using Selenium WebDriver, Webbit and WebSockets.
    Words/tweaks
    Release 1.1.4
    Release 1.1.3
    Release 1.1.2
    Add example of running Cucumber-JVM tests using Gradle
    Words/tweaks
    Add example of running Cucumber-JVM tests using Gradle
    Words/tweaks
    Add example of running Cucumber-JVM tests using Gradle
    Add example of running Cucumber-JVM tests using Gradle
    Various changes needed to improve the formatting API
    Words/tweaks
    Add example of running Cucumber-JVM tests using Gradle
    Add example of running Cucumber-JVM tests using Gradle
    bumped missed versions to 1.1.6-SNAPSHOT
    Created examples/java-no-features to demonstrate Cucumber JVM behaviour
    when there are no features found at all.
    Various changes needed to improve the formatting API
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.0
    Some last minute fixes before the 1.1.0 release.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.13
    increase version to prepare for next development iteration:
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.12
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.11
    Undo bad changes I mkade in bbe40d3d451703f41ef36d16415144268d6ff72a while fixing #356
    Fix tests that broke in #356
    Update examples to use Transform
    Cleaning up poms
    Build passes with cucumber-deps
    Cleaning up poms
    Build passes with cucumber-deps
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.8
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.7
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.5
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.4
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0
          oe               .n~~%x.                .n~~%x.
        .@88             x88X   888.            x88X   888.
    ==*88888            X888X   8888L          X888X   8888L
       88888           X8888X   88888         X8888X   88888
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888f        88888X   88888f
       88888       .   48888X   88888     .   48888X   88888
       88888     .@8c   ?888X   8888"   .@8c   ?888X   8888"
       88888    '%888"   "88X   88*`   '%888"   "88X   88*`
    '**%%%%%%**   ^*       ^"==="`       ^*       ^"==="`
    Make sure strings are quoted before printing to js. Closes #254
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC24
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC23
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC22
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC21
    clean up of dependencies in pom.xml of Java Calculator Examples
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC20
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC19
    Try release one more time
    Let's try that release again
    Optimize imports, format code
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC16
    Make sure examples are working. Should run them before each release.
    Update versions
    Update version
    Set project version correctly
    Re-adding the poms from before the ant/ivy stuff
    Make sure poms are published to local repo. You should probably delete rm -Rf ~/.m2/repository ~/.ivy2/cache - see #143 and #144.
    Fix refs
    Let's try to make a release
    Change dependencies so that full-jars don't bundle all jars (users are expected to provide them themselves). Closes #28.
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    Added an example using Selenium WebDriver, Webbit and WebSockets.
    Added tag support for tags. Closes #9. Closes #10.
    Changed groupId to info.cukes, and prepended cucumber- to all artifacts. Added shade plugin, so all artifacts have a -full (self contained) jar. Closes #11.
    Fix version/newline/maven problems
    Better CLI runner
    Added an example
    Cleaning poms from duplicate project versions.
    Moved stuff around
    Much more modular
    More submodules
    More submodules, new Annotations.
    Better abstractions by bringing in Groovy
    Created examples/java-no-features to demonstrate Cucumber JVM behaviour
    when there are no features found at all.
    Adding eclipse project files to .gitignore
    Fixed a typo in examples/java-no-features/README.md
    Created examples/java-no-features to demonstrate Cucumber JVM behaviour
    when there are no features found at all.
    Created examples/java-no-features to demonstrate Cucumber JVM behaviour
    when there are no features found at all.
    Moved the JUnit package and configured API docs
    Fix several problems with resource loading for scripting languages (after the new classpath: scheme was introduced)
    Workaround for arity mismatch on Groovy. Need an explicitly empty list of closure parameters. Closes #297.
    More ivy
    Moved stuff around
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.5
     is deprecated in favour of . Closes #549
    The first TestNG "native" integration.
    
    The simplest usage:
    
        import cucumber.api.testng.AbstractTestNGCucumberTests;
    
        public class RunCukesTest extends AbstractTestNGCucumberTests {
        }
    
    Note: Maybe there should be a more appropriate TestNG reporter for Cucumber.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.0
    Some last minute fixes before the 1.1.0 release.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.13
    increase version to prepare for next development iteration:
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.12
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.11
    Undo bad changes I mkade in bbe40d3d451703f41ef36d16415144268d6ff72a while fixing #356
    Fix tests that broke in #356
    Update examples to use Transform
    Cleaning up poms
    Build passes with cucumber-deps
    Cleaning up poms
    Build passes with cucumber-deps
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.8
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.7
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.5
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.4
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0
          oe               .n~~%x.                .n~~%x.
        .@88             x88X   888.            x88X   888.
    ==*88888            X888X   8888L          X888X   8888L
       88888           X8888X   88888         X8888X   88888
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888f        88888X   88888f
       88888       .   48888X   88888     .   48888X   88888
       88888     .@8c   ?888X   8888"   .@8c   ?888X   8888"
       88888    '%888"   "88X   88*`   '%888"   "88X   88*`
    '**%%%%%%**   ^*       ^"==="`       ^*       ^"==="`
    Make sure strings are quoted before printing to js. Closes #254
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC24
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC23
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC22
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC21
    clean up of dependencies in pom.xml of Java Calculator Examples
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC20
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC19
    Try release one more time
    Let's try that release again
    Optimize imports, format code
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC16
    Make sure examples are working. Should run them before each release.
    Update versions
    Update version
    Set project version correctly
    Re-adding the poms from before the ant/ivy stuff
    Make sure poms are published to local repo. You should probably delete rm -Rf ~/.m2/repository ~/.ivy2/cache - see #143 and #144.
    Fix refs
    Let's try to make a release
    Change dependencies so that full-jars don't bundle all jars (users are expected to provide them themselves). Closes #28.
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    Added an example using Selenium WebDriver, Webbit and WebSockets.
    Added tag support for tags. Closes #9. Closes #10.
    Changed groupId to info.cukes, and prepended cucumber- to all artifacts. Added shade plugin, so all artifacts have a -full (self contained) jar. Closes #11.
    Fix version/newline/maven problems
    Better CLI runner
    Added an example
    Cleaning poms from duplicate project versions.
    Moved stuff around
    Much more modular
    More submodules
    More submodules, new Annotations.
    Better abstractions by bringing in Groovy
    The first TestNG "native" integration.
    
    The simplest usage:
    
        import cucumber.api.testng.AbstractTestNGCucumberTests;
    
        public class RunCukesTest extends AbstractTestNGCucumberTests {
        }
    
    Note: Maybe there should be a more appropriate TestNG reporter for Cucumber.
    Moved the JUnit package and configured API docs
    Always fire that a test has finished, even when it's ignored.
    The first TestNG "native" integration.
    
    The simplest usage:
    
        import cucumber.api.testng.AbstractTestNGCucumberTests;
    
        public class RunCukesTest extends AbstractTestNGCucumberTests {
        }
    
    Note: Maybe there should be a more appropriate TestNG reporter for Cucumber.
    Moved the JUnit package and configured API docs
    Always fire that a test has finished, even when it's ignored.
    The first TestNG "native" integration.
    
    The simplest usage:
    
        import cucumber.api.testng.AbstractTestNGCucumberTests;
    
        public class RunCukesTest extends AbstractTestNGCucumberTests {
        }
    
    Note: Maybe there should be a more appropriate TestNG reporter for Cucumber.
    issue #322: fixed feature file indentation
    issue #322: patch using new Description factory method in JUnit 4.11
    The first TestNG "native" integration.
    
    The simplest usage:
    
        import cucumber.api.testng.AbstractTestNGCucumberTests;
    
        public class RunCukesTest extends AbstractTestNGCucumberTests {
        }
    
    Note: Maybe there should be a more appropriate TestNG reporter for Cucumber.
    Refactored SnippetGenerator.
    
    There was too much parallel effort in the CamelCase and Underscore
    implementations, so the new structure shares most of the logic
    and implements the different logic in a Concatenator.
    
    I also made sure IntelliJ doesn't break because of the new
    scenario lifecycle methods in the gherkin formatter interface.
    The first TestNG "native" integration.
    
    The simplest usage:
    
        import cucumber.api.testng.AbstractTestNGCucumberTests;
    
        public class RunCukesTest extends AbstractTestNGCucumberTests {
        }
    
    Note: Maybe there should be a more appropriate TestNG reporter for Cucumber.
    Always fire that a test has finished, even when it's ignored.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    UndefinedStepsTracker receives backends in getSnippets instead of ctor - this reduces coupling. Throw exception if there are no Backends. This might be the fix for #146
    Ensuring features are parsed before formatters are initialised. Closes #652
    Address pull request comments
    Removed 2 empty lines in the c.a.t.TestNGCucumberRunner class
    Allow TestNG test cases to not have to inherit from AbstractTestNGCucumberTests
    Address pull request comments
    Allow TestNG test cases to not have to inherit from AbstractTestNGCucumberTests
    Report summaries and  in the same way as the CLI
    Remove duplication in Reflections implementations.
    
    Renamed Reflections to ClassFinder and removed generic methods.
    Created a new Reflections class that delegates to a ClassFinder.
     is deprecated in favour of . Closes #549
    Changes according to code review
    The first TestNG "native" integration.
    
    The simplest usage:
    
        import cucumber.api.testng.AbstractTestNGCucumberTests;
    
        public class RunCukesTest extends AbstractTestNGCucumberTests {
        }
    
    Note: Maybe there should be a more appropriate TestNG reporter for Cucumber.
    added stub implementation for new formatter methods
    Changes according to code review
    The first TestNG "native" integration.
    
    The simplest usage:
    
        import cucumber.api.testng.AbstractTestNGCucumberTests;
    
        public class RunCukesTest extends AbstractTestNGCucumberTests {
        }
    
    Note: Maybe there should be a more appropriate TestNG reporter for Cucumber.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.6
    Words, formatting
    Set minimum maven version to 3.0.4 and updated plugin versions
    * fixed several bugs in the AndroidTestReporter formerly known as AndroidReporter
    * restructured project to be more maven compliant
    * added dependencies for testing purposes
    Post-release of 1.1.5. Fix Deployment of cucumber-android.jar. Fixes #573
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.5
    Use different variable for snapshot repo to fix build error.
    Use the snapshot repository url for the cucumber-android jar deployment.
    Additionally deploy the cucumber-android jar. Closes #573.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.4
    More verbose maven to diagnose android problem. Remove cucumber-core dependency - it's transitive.
    REnames
    All tests passing again. Ref #525.
    Use standard Android Maven Plugin project layout.
    Added android (cucumber-android) module.
    Make android/wait_for_emulator executable
    Add android travis setup based on https://github.com/embarkmobile/android-maven-example
    Added android (cucumber-android) module.
    Words, formatting
    Improve README markup
    Added Cukulator Android example test.
    Added Cukeulator Android example app.
    Added a link to the readme.
    All tests passing again. Ref #525.
    Updated readmes.
    Added readmes.
    Added Cukeulator Android example app.
    All tests passing again. Ref #525.
    Refactoring for #525. WIP.
    Use standard Android Maven Plugin project layout.
    post-release updates
    Report summaries and  in the same way as the CLI
    bumped missed versions to 1.1.6-SNAPSHOT
    Post-release of 1.1.5. Fix Deployment of cucumber-android.jar. Fixes #573
    Updated versionName in manifest.
    Use standard Android Maven Plugin project layout.
    Added android (cucumber-android) module.
    * fixed several bugs in the AndroidTestReporter formerly known as AndroidReporter
    * restructured project to be more maven compliant
    * added dependencies for testing purposes
    Add tests for new argument options
    Add tests for InstrumentationArguments
    * fixed several bugs in the AndroidTestReporter formerly known as AndroidReporter
    * restructured project to be more maven compliant
    * added dependencies for testing purposes
    * fixed several bugs in the AndroidTestReporter formerly known as AndroidReporter
    * restructured project to be more maven compliant
    * added dependencies for testing purposes
    * fixed several bugs in the AndroidTestReporter formerly known as AndroidReporter
    * restructured project to be more maven compliant
    * added dependencies for testing purposes
    * fixed several bugs in the AndroidTestReporter formerly known as AndroidReporter
    * restructured project to be more maven compliant
    * added dependencies for testing purposes
    added stub implementation for new formatter methods
    Fixed a bug where  would fail with the JUnit runner.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Reduce visibility in order to improve cohesiveness and reduce API
    Upgrade to Gherkin 2.10.0
    Fixing implementation errors regarding newer version of gherkin
    Running with JUnit uses a null formatter by default (instead of a progress formatter).
    Optimise imports
    Mostly finished CLI refactoring
    Properly flush and close formatters. Closes #173
    Improved the way formatters are created - less reliance on obscure system properties.
    Fix compilation of Scala module and example.
    Optimize imports, reformat
    Adding support for custom formatters.
    See #33.
    * fixed several bugs in the AndroidTestReporter formerly known as AndroidReporter
    * restructured project to be more maven compliant
    * added dependencies for testing purposes
    Make field final
    Remove all of the ext stuff
    Refactoring for #525. WIP.
    Use standard Android Maven Plugin project layout.
    Added android (cucumber-android) module.
    * fixed several bugs in the AndroidTestReporter formerly known as AndroidReporter
    * restructured project to be more maven compliant
    * added dependencies for testing purposes
    Add support for Dependency Injection.
    
    This happens via cucumber-picocontainer, cucumber-guice, cucumber-spring etx.
    All tests passing again. Ref #525.
    Refactoring for #525. WIP.
    Inject target context instead of (test) context.
    Support for AndroidTestCase.
    Use standard Android Maven Plugin project layout.
    Added android (cucumber-android) module.
    Fix build - AndroidResource implements new Resource API
    * fixed several bugs in the AndroidTestReporter formerly known as AndroidReporter
    * restructured project to be more maven compliant
    * added dependencies for testing purposes
    Refactoring for #525. WIP.
    Use standard Android Maven Plugin project layout.
    Added android (cucumber-android) module.
    Move option parsing to InstrumentationArguments
    
    This removes some code duplication in CucumberInstrumentation and
    InstrumentationArguments.
    Add command line option support for Android
    * fixed several bugs in the AndroidTestReporter formerly known as AndroidReporter
    * restructured project to be more maven compliant
    * added dependencies for testing purposes
    Refactoring for #525. WIP.
    Use standard Android Maven Plugin project layout.
    Added android (cucumber-android) module.
    * fixed several bugs in the AndroidTestReporter formerly known as AndroidReporter
    * restructured project to be more maven compliant
    * added dependencies for testing purposes
    * fixed several bugs in the AndroidTestReporter formerly known as AndroidReporter
    * restructured project to be more maven compliant
    * added dependencies for testing purposes
    Remove duplication in Reflections implementations.
    
    Renamed Reflections to ClassFinder and removed generic methods.
    Created a new Reflections class that delegates to a ClassFinder.
    Remove all of the ext stuff
    Ensuring features are parsed before formatters are initialised. Closes #652
    Rename CucumberInstrumentationHelper -> CucumberInstrumentationCore
    Android: Extract the main content CucumberInstrumentation
    
    To simplify custom instrumentation classes inheriting from other
    instrumentation base classes, basically all content of
    CucumberInstrumentation is extracted to the new helper class
    CucumberInstrumentationHelper.
    Move option parsing to InstrumentationArguments
    
    This removes some code duplication in CucumberInstrumentation and
    InstrumentationArguments.
    Add support for 'log' option
    
    This has the same effect as providing the Cucumber option '--dry-run'.
    Add support for 'coverage' option
    
    This adds support to generate EMMA code coverage reports when using
    CucumberInstrumentation. It is pretty much a 1:1 copy from
    InstrumentationTestRunner.
    Remove duplicate code for 'debug' option
    
    'debug' support has been added through PR #613
    Add support for 'debug' option
    
    This adds support to wait for a debugger to attach at instrumentation
    start. 'debug' can either be set to true or a number which represents the
    timeout in milliseconds. Default timeout is 10 seconds.
    Add support for 'count' option
    
    This adds support to only count the number of scenarios by setting the
    'count' argument to true.
    Add command line option support for Android
    Remove trailing whitespace
    Added debug wait to make sure eclipse attaches debugger appropriately
    Fix Cucumber reports for cucumber-android
    
    This enables standard Cucumber reports using the 'format' parameter of
    CucumberOptions. Reports will be stored on the device.
    * fixed several bugs in the AndroidTestReporter formerly known as AndroidReporter
    * restructured project to be more maven compliant
    * added dependencies for testing purposes
    Use standard Android Maven Plugin project layout.
    Added android (cucumber-android) module.
    Rename CucumberInstrumentationHelper -> CucumberInstrumentationCore
    Android: Extract the main content CucumberInstrumentation
    
    To simplify custom instrumentation classes inheriting from other
    instrumentation base classes, basically all content of
    CucumberInstrumentation is extracted to the new helper class
    CucumberInstrumentationHelper.
    Move option parsing to InstrumentationArguments
    
    This removes some code duplication in CucumberInstrumentation and
    InstrumentationArguments.
    Add support for 'log' option
    
    This has the same effect as providing the Cucumber option '--dry-run'.
    Add support for 'coverage' option
    
    This adds support to generate EMMA code coverage reports when using
    CucumberInstrumentation. It is pretty much a 1:1 copy from
    InstrumentationTestRunner.
    Remove duplicate code for 'debug' option
    
    'debug' support has been added through PR #613
    Add support for 'debug' option
    
    This adds support to wait for a debugger to attach at instrumentation
    start. 'debug' can either be set to true or a number which represents the
    timeout in milliseconds. Default timeout is 10 seconds.
    Add support for 'count' option
    
    This adds support to only count the number of scenarios by setting the
    'count' argument to true.
    Add command line option support for Android
    Remove trailing whitespace
    Added debug wait to make sure eclipse attaches debugger appropriately
    Fix Cucumber reports for cucumber-android
    
    This enables standard Cucumber reports using the 'format' parameter of
    CucumberOptions. Reports will be stored on the device.
    * fixed several bugs in the AndroidTestReporter formerly known as AndroidReporter
    * restructured project to be more maven compliant
    * added dependencies for testing purposes
    Use standard Android Maven Plugin project layout.
    Added android (cucumber-android) module.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.6
    Simplify i18n build. Thanks @robertoandrade - ref #487
    Fix compilation on JDK7 on OS X. Closes #499, #487.
    Ignore kannada language for java and jython - doesn't parse/compile
    Changes based on Aslak Hellesøy comments
    Log a warning when more than one IoC dependency is found in the classpath and Cucumber defaults to no IoCs.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.5
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.4
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.1
    Generate package.html
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.0
    Some last minute fixes before the 1.1.0 release.
    The  annotation is replaced with an  property on  and
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Only normalize on JDK 7. Doing it on JDK 6 causes build errors on OS X.
    Normalized groovy and scala generated code as well
    The java module (and all other modules) finally compile on JDK 7 and OS X. Thanks to David Kowis and Sébastien Le Callonnec
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.13
    Release 1.0.13 with better packaging
    increase version to prepare for next development iteration:
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.12
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.11
    Undo bad changes I mkade in bbe40d3d451703f41ef36d16415144268d6ff72a while fixing #356
    Fix tests that broke in #356
    Tweak poms so they work in IDEA as well
    Cleaning up poms
    Build passes with cucumber-deps
    Cleaning up poms
    Build passes with cucumber-deps
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.8
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.7
    cucumber-java lazily creates instances, just like the other DI containers
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.5
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Added cobertura code coverage and started to clean up some cruftiness in the io package
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.4
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0
          oe               .n~~%x.                .n~~%x.
        .@88             x88X   888.            x88X   888.
    ==*88888            X888X   8888L          X888X   8888L
       88888           X8888X   88888         X8888X   88888
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888f        88888X   88888f
       88888       .   48888X   88888     .   48888X   88888
       88888     .@8c   ?888X   8888"   .@8c   ?888X   8888"
       88888    '%888"   "88X   88*`   '%888"   "88X   88*`
    '**%%%%%%**   ^*       ^"==="`       ^*       ^"==="`
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC24
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC23
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC22
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC21
    Optimise imports
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC20
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC19
    Try release one more time
    Let's try that release again
    Optimize imports, format code
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC16
    I prefer a null check
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC15
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC13
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC12
    Fix Scala build. Closes #167.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC11
    I think this fixes build problems on Windows.
    Make POMs Windows-happy
    
    When ${baseDir} gets interpolated on Windows the traditional double-quote
    delimiters make for a malformed String literal.
    DRY up dependency versions
    Fix Windows build problems mentioned in #154. Add History entries.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC8
    Fix the version number appropriately
    Tell, don't ask. And some formatting.
    Make the Picocontainer CLI tests run
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC7
    Update version
    Added an ID to the execution phase
    generates the i18n stuff for java now
    
    Doesn't generate into the source tree, but instead generates into target, so it's properly cleansed
    and quickly generated each time
    Set project version correctly
    Re-adding the poms from before the ant/ivy stuff
    Dual build
    Added back poms - they are generated from ivy.xml (except the parent pom)
    Don't come back maven
    Maven hosed the previous release attempt.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC1
    Let's try to make a release
    Change dependencies so that full-jars don't bundle all jars (users are expected to provide them themselves). Closes #28.
    Simplified improved snippet code, removed hamcrest (not a huge fan).
    Added hamcrest as dependency in test scope.
    Removing commons-lang dependencies.
    Changed groupId to info.cukes, and prepended cucumber- to all artifacts. Added shade plugin, so all artifacts have a -full (self contained) jar. Closes #11.
    Adding a header mapper to transform headings to property names. Will be
    useful to create and populate Java Beans.
    Fix version/newline/maven problems
    Fixed pom issues
    Added an example
    Cleaning poms from duplicate project versions.
    Adding JavaMethodTransform
    Moved stuff around
    Much more modular
    More submodules
    More submodules, new Annotations.
    Better abstractions by bringing in Groovy
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    cucumber-java lazily creates instances, just like the other DI containers
    Fixed a bug where  would fail with the JUnit runner.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Add support for non-UTF-8 encodings
    Added some tests for Scenario Outline DocString substitution. Removed unused feature files.
    Dominic: expose current (gherkin) scenario to step definition code via ThreadLocal
    Dominic: expose scenario name as part of cucumber.api.Scenario
    Make it easier to correctly create RuntimeOptions from a String, ref #597.
    Rename uri to featurePath, which is more explicit
    Override Cucumber Options via  or cucumber-jvm.properties as well as -Dcucumber.options
    Add RuntimeOptions.isMonochrome(), rm Runtime factory methods
    
    Add RuntimeOptions.isMonochorme(), since commit 65f3bd6 on the master
    branch change RuntimeOptions to have private fields and getters.
    
    Basically revert commit c8feb10. Since the new android support on the
    master banch sends backends to the Runtime constructor, which
    previously only was done in tests, the change to use factory methods in
    Runtime no longer make sence.
    Localise the UndefinedStepTracker in the Runtime
    
    Localise the UndefinedStepTracker in the Runtime and remove that
    argument from the constructor. Use that the optionalGlue argument is
    null, as the cue to let the Runtime create the default RuntimeGlue.
    When the optionalGlue argument is not null, the glue injected with that
    argument will be used by the Runtime.
    Minimize the number of constructors in the Runtime class
    
    To minimize the number of constructors in the Runtime class, and to
    handle that by default a UndefinedStepTracker is created and then
    injected both into the Runtime and the RuntimeGlue, create a factory
    method as the main entry. Expose additional conveniece factory methods
    for testing in the core module in RuntimeTest.
    Add Scenario.source_tag_names to work with Capybara. Closes #504.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    Build passes with cucumber-deps
    Build passes with cucumber-deps
    Options (Command line or ) can be overriden with the  system property.
    Removed duplication. Better reflection error reporting across the board.
    Detect subclassing in glue code and report to the user that it's illegal. Closes #301
    Show code source for Java step definitions in case of duplicates or ambiguous stepdefs.
    Don't allow inheritance in glue code (stepdefs and hooks). Also fixes #257 in a more encapsulated way.
    Optimise imports
    Mostly finished CLI refactoring
    Get gluePath from runtimeOptions
    Get dryRun from runtimeOptions
    Ease RuntimeOptions into the Runtime API
    Embed text and images in reports. Closes #205.
    Detect duplicate step definitions. Closes #213.
    Fix tagged hooks for scenario outlines. Closes #209, closes #210
    Ambiguous step definitions don't cause Cucumber to blow up, they just fail the step. Fixed #206, but broke the native groovy CLI runner, which I had to disable - see #212
    Variable renames
    Issue #186. Making sure that Stepdef class is registered with ObjectFactory not a superclass when superclass declares anotated methods
    Use I18n instead of Locale since converting from Locale to I18n is tricky.
    Pass in ClassLoader from the outside. This is necessary in order to construct a working Runtime from a different environment, like Jython. See #151
    Tell, don't ask. And some formatting.
    update the tests for the refactoring
    rename world to glue
    Removed OneTimeResourceLoader and made sure glue code is loaded only once. The Backend.loadGlue method should ideally be removed, and the World and gluePaths passed to each Backend's constructor. Other TODOs on this branch: rename World to Glue. RuntimeGlue should not have a ref back to Runtime. Make Scala work again (disabled it because I don't have the required Scala fu)
    Massive Refactor pulling world out to a higher level.
    
    It's still loading resources multiple times, but all but one of the existing tests
    pass. I'll have to rewrite how that test works, and it's ignored right now
    Load resoureces from classpath when using JUnit, load them from filesystem when using CLI
    Rewrote a lot of the resource loading code
    JUnit behaves better when a Before hook fails. Closes #106
    Throw exceptions, don't return them.
    Better hooks
    Tagged (scoped) step definitions are reverted. Bad idea.
    Step Deinitions can be scoped by tag (just like hooks). Currently only implemented for Java.
    The  annotation is replaced with an  property on  and
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    More explanatary exception if a hook is declared with bad parameter types.
    Don't allow inheritance in glue code (stepdefs and hooks). Also fixes #257 in a more encapsulated way.
    Optimise imports
    Mostly finished CLI refactoring
    Fix tagged hooks for scenario outlines. Closes #209, closes #210
    Issue #186. Making sure that Stepdef class is registered with ObjectFactory not a superclass when superclass declares anotated methods
    Pass in ClassLoader from the outside. This is necessary in order to construct a working Runtime from a different environment, like Jython. See #151
    UndefinedStepsTracker receives backends in getSnippets instead of ctor - this reduces coupling. Throw exception if there are no Backends. This might be the fix for #146
    Tell, don't ask. And some formatting.
    update the tests for the refactoring
    rename world to glue
    Removed OneTimeResourceLoader and made sure glue code is loaded only once. The Backend.loadGlue method should ideally be removed, and the World and gluePaths passed to each Backend's constructor. Other TODOs on this branch: rename World to Glue. RuntimeGlue should not have a ref back to Runtime. Make Scala work again (disabled it because I don't have the required Scala fu)
    Massive Refactor pulling world out to a higher level.
    
    It's still loading resources multiple times, but all but one of the existing tests
    pass. I'll have to rewrite how that test works, and it's ignored right now
    Rewrote a lot of the resource loading code
    Step Deinitions can be scoped by tag (just like hooks). Currently only implemented for Java.
    Scenario Outlines and Background are roughly working
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    Made features pass
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    execution order of Hooks can be controlled in Java
    Added tag support for tags. Closes #9. Closes #10.
    Fix indentation
    gh-9 Missing files ignored by git
    Remove warnings and deprecated code
    More explanatary exception if a hook is declared with bad parameter types.
    cucumber-java lazily creates instances, just like the other DI containers
    Step Deinitions can be scoped by tag (just like hooks). Currently only implemented for Java.
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    Rename uri to featurePath, which is more explicit
    Report summaries and  in the same way as the CLI
    Formatters can HTTP PUT to an URL
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Fix several problems with resource loading for scripting languages (after the new classpath: scheme was introduced)
    Detect subclassing in glue code and report to the user that it's illegal. Closes #301
    Don't convert paths to package names - instead throw an exception. This helps people avoid mistakes.
    Use I18n instead of Locale since converting from Locale to I18n is tricky.
    Properly flush and close formatters. Closes #173
    Tell, don't ask. And some formatting.
    update the tests for the refactoring
    rename world to glue
    Removed OneTimeResourceLoader and made sure glue code is loaded only once. The Backend.loadGlue method should ideally be removed, and the World and gluePaths passed to each Backend's constructor. Other TODOs on this branch: rename World to Glue. RuntimeGlue should not have a ref back to Runtime. Make Scala work again (disabled it because I don't have the required Scala fu)
    Massive Refactor pulling world out to a higher level.
    
    It's still loading resources multiple times, but all but one of the existing tests
    pass. I'll have to rewrite how that test works, and it's ignored right now
    adding the ability to call a step from another, and pass the table to it
    
    WHEE
    Make a more informative exception in case an undefined step is invoked from a stepdef
    Rewrote a lot of the resource loading code
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    cucumber-java lazily creates instances, just like the other DI containers
    fixing JavaObjectFactoryTest
    fixing JavaObjectFactoryTest
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    fix for issue #15 - creates a new Weld container per scenario
    Better comment about tables in java snippets
    Align snippets for quoted arguments with cucumber-ruby
    New Snippet text, closes #618.
    
    Change to the new Snippet text. Update History.md.
    Fix a one off error in JRubySnippet.java.
    Refactored SnippetGenerator.
    
    There was too much parallel effort in the CamelCase and Underscore
    implementations, so the new structure shares most of the logic
    and implements the different logic in a Concatenator.
    
    I also made sure IntelliJ doesn't break because of the new
    scenario lifecycle methods in the gherkin formatter interface.
    Added plus and period to escaped characters
    Refactored --snippet option. Closes #561, #302
    Bugfix: Generated regex for ? character is incorrect. Closes #494.
    Some last minute fixes before the 1.1.0 release.
    issue 318: added 'throws Throwable' to Java snippets
    Update all snippets to throw PendingException, following up on #271. Need to make Clojure do this.
    Added failing test for #272
    Snippets for DataTable include a hint about using List<YourType>, so people discover this neat technique
    Support DocString and DataTable in generated snippets. Closes #227
    Escape regex characters in steps
    
    The current rules for generating step definition templates for
    undefined steps do not escape regular expression characters.  For
    instance, the following step:
    
    Given I have $5
    
    ...generates the following template:
    
    @Given("^I have $(\\d+) in my account$")
    
    Java sees the dollar sign as a regex end-of-string marker, and the
    scenario won't run correctly.  This commit escapes dollar signs,
    parentheses, and square brackets.  The step shown above will now be
    correctly translated into a template as:
    
    @Given("^I have \\$(\\d+) in my account$")
    
    This commit changes the general SnippetGenerator.java file; it assumes
    the set of special regular expression characters will be the same
    across JVM languages.  This condition appears to hold for the currently
    supported languages.  If this changes in the future, it should be
    possible to wrap the list of escaped regex chars in a function that
    can be overridden.
    Replace inheritance with delegation for #138
    Formatting
    patch for cucumber-jvm issue #117
    Changes for gherkin 2.6.0. Will merge to master when gherkin has synced to maven central.
    Optimize imports, reformat
    Fix for #56
    Snippet definition for Java generates method name with colon in it.
    Simplified improved snippet code, removed hamcrest (not a huge fan).
    The pattern for digits in step snippets pattern are escaped copy paste ready
    Moved stuff around
    WIP - broke a lot of stuff
    Closer to correct scenario outline implementation. Need to make sure it works with multiple Examples under one Scenario Outline.
    Snippets for java, and a reusable superclass for other backends.
    Remove duplication in Reflections implementations.
    
    Renamed Reflections to ClassFinder and removed generic methods.
    Created a new Reflections class that delegates to a ClassFinder.
    All tests passing again. Ref #525.
    Refactoring for #525. WIP.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Detect subclassing in glue code and report to the user that it's illegal. Closes #301
    Don't allow inheritance in glue code (stepdefs and hooks). Also fixes #257 in a more encapsulated way.
    Optimise imports
    Mostly finished CLI refactoring
    Optimize imports, format code
    Variable renames
    Issue #186. Making sure that Stepdef class is registered with ObjectFactory not a superclass when superclass declares anotated methods
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    cucumber-java lazily creates instances, just like the other DI containers
    Detect subclassing in glue code and report to the user that it's illegal. Closes #301
    Tell, don't ask. And some formatting.
    Rewrote a lot of the resource loading code
    Align snippets for quoted arguments with cucumber-ruby
    Keep generated English Java annotations so we can compile in an IDE. Fix formatting.
    Dominic: expose scenario name as part of cucumber.api.Scenario
    Dominic: expose current (gherkin) scenario to step definition code via ThreadLocal
    Moved the JUnit package and configured API docs
    cucumber-java lazily creates instances, just like the other DI containers
    Make sure examples are working. Should run them before each release.
    Scala fixes
    Upgrade deps, improve snippets.
    Added Jython support
    Moved stuff around
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Added proof that unused hooks aren't instantiated.
    cucumber-java lazily creates instances, just like the other DI containers
    Align snippets for quoted arguments with cucumber-ruby
    Added some tests for Scenario Outline DocString substitution. Removed unused feature files.
    Dominic: expose current (gherkin) scenario to step definition code via ThreadLocal
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Detect subclassing in glue code and report to the user that it's illegal. Closes #301
    Tell, don't ask. And some formatting.
    Rewrote a lot of the resource loading code
    Detect subclassing in glue code and report to the user that it's illegal. Closes #301
    Timeout is a long, not int. Be explicit that it's millis.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Step definitions and hooks can now specify a timeout (milliseconds) after which a  is thrown if the stepdef/hook has not completed. Closes #343
    Generate annotations with Ant+Groovy instead of Rake+Ruby
    Get rid of @author tags
    Tagged (scoped) step definitions are reverted. Bad idea.
    Step Deinitions can be scoped by tag (just like hooks). Currently only implemented for Java.
    Take Locale from Gherkin feature instead of Step Definition. Make an outer Java class for each annotation - makes imports nicer (No more @EN.Given). Moved Java annotation code to java project.
    Moved stuff around
    Much more modular
    Better abstractions by bringing in Groovy
    Find all annotations with reflections.
    Move shit around
    Locale-aware step definitions
    Annotating annotations so we can more easily support i18n annotations.
    Prepare for 0.1.0 release
    Almost a complete rewrite, leveraging Cucumber's new improved language support.
    Rename packages from cucumber to cuke4duke
    Added ant build.xml for simple example. Some more renames
    Lots of restructuring and renaming. Ruby code is now packaged inside the jar. No more gem packaging.
    Added support for spring autowiring into Step classes.
    more maven wrestling
    Shuffle stuff around
    Using our own Java classes instead of
    Timeout is a long, not int. Be explicit that it's millis.
    Improved Transformer API
    reduce visibility, fix javadoc
    Refactored the StepDefinition interface so that backends for dynamic languages can infer the type of a parameter based on the actual argument type passed to it.
    Step definitions and hooks can now specify a timeout (milliseconds) after which a  is thrown if the stepdef/hook has not completed. Closes #343
    Added a timeout argument to Utils - prepping for #343
    Removed duplication. Better reflection error reporting across the board.
    Clean up method formatting
    Show code source for Java step definitions in case of duplicates or ambiguous stepdefs.
    Get rid of @Pending. Closes #271
    Optimise imports
    Mostly finished CLI refactoring
    Optimize imports, format code
    Package XStream and diffutils inside core. Closes #179.
    Use I18n instead of Locale since converting from Locale to I18n is tricky.
    Tell, don't ask. And some formatting.
    Refactoring out the Reporter from the step call
    
    Created a new method, runUnreportedStep, that simply grabs the step out of a match,
    throwing an exception if it does not match, and executes it.
    
    All the exceptions are required to trickle up so that they're caught by the step that
    does the actual execution so that things look right in the output.
    
    A snippit will be generated if you call a non existing step, so that's handy :)
    Revert "Bring the URI forward to the step evaluation too."
    
    This reverts commit 1851bfe0c56c8abd223ad25a57988c76d0c66396.
    Bring the URI forward to the step evaluation too.
    
    This doesn't smell right, there must be something I'm doing entirely wrong.
    Refactor to change the execut method to include Reporter and Locale
    JUnit behaves better when a Before hook fails. Closes #106
    Throw exceptions, don't return them.
    Tagged (scoped) step definitions are reverted. Bad idea.
    Step Deinitions can be scoped by tag (just like hooks). Currently only implemented for Java.
    @DateFormat can be specified for List<SomeClassWithDateField> table arguments. Closes #84.
    Date format can be specified with a @DateFormat annotation
    Refactoring to capture more info about types
    Fix broken conversion of table to List<Map<String,String>>. Addresses @nightscape's comment in #49.
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    Made features pass
    Moved table conversion logic from java to core
    All building/passing except scala
    Misc changes to bring in XStream to do some of the heavy object conversion lifting
    Simplified table-to-list-of-object logic. Removed @JavaBeanClass - type erasure does not apply to method signatures, so the annotation is not needed. I don't think it's necessary (yet) to specify what class to use to instantiate objects - we only have one anyway. See email to list about XStream
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    Working on Issue #19
    Added the possibility to process tables.
    Added a @JavaBeanClass annotation to allow passing list of beans to
    Steps.
    Working on Issue #9
    Added the possibility to process tables.
    Added a @JavaBeanClass annotation to allow passing list of beans to
    Steps.
    Ambiguous matches are now reported correctly. Snippets are printed from CLI.
    Take Locale from Gherkin feature instead of Step Definition. Make an outer Java class for each annotation - makes imports nicer (No more @EN.Given). Moved Java annotation code to java project.
    Reformatted code and optimized imports with IntelliJ (default settings).
    Adding locale in StepDefinition in order to transform arguments. It
    would be better to have locale set on an higher level, for instance
    Feature.
    Moved stuff around
    WIP - broke a lot of stuff
    Added a java-specific TCK to test various DI containers
    If you write code that forces me to check your exceptions, then I will rip off your head and piss in your dead skull.
    Much more modular
    Ioke passing
    Sort of got Rhino working
    Abstract backend test
    Remove warnings and deprecated code
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Missing String.format parameters in DefaultJavaObjectFactory. Closes #336
    cucumber-java lazily creates instances, just like the other DI containers
    fixing JavaObjectFactoryTest
    Timeout is a long, not int. Be explicit that it's millis.
    Upgrade to gherkin 2.12.0
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Step definitions and hooks can now specify a timeout (milliseconds) after which a  is thrown if the stepdef/hook has not completed. Closes #343
    Added a timeout argument to Utils - prepping for #343
    More explanatary exception if a hook is declared with bad parameter types.
    Changes to work with gherkin's hook-reporting branch
    Removed duplication. Better reflection error reporting across the board.
    Clean up method formatting
    Fix tagged hooks for scenario outlines. Closes #209, closes #210
    Get rid of @author tags
    Throw exceptions, don't return them.
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    Hooks can receive results. Closes #27.
    execution order of Hooks can be controlled in Java
    Added tag support for tags. Closes #9. Closes #10.
    gh-9 Missing files ignored by git
    Better comment about tables in java snippets
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Simplified replace logic in Java and Clojure Snippet. Added attributions.
    issue 318: added 'throws Throwable' to Java snippets
    Update all snippets to throw PendingException, following up on #271. Need to make Clojure do this.
    Snippets for DataTable include a hint about using List<YourType>, so people discover this neat technique
    Replace inheritance with delegation for #138
    Reenabled Scala
    Upgrade deps, improve snippets.
    Pulling up code to sanitize function names to core
    Fix for #56. (Tests stayed in java)
    Fix for #56
    Snippet definition for Java generates method name with colon in it.
    Simplified improved snippet code, removed hamcrest (not a huge fan).
    The pattern for digits in step snippets pattern are escaped copy paste ready
    Reformatted code and optimized imports with IntelliJ (default settings).
    Moved stuff around
    WIP - broke a lot of stuff
    Closer to correct scenario outline implementation. Need to make sure it works with multiple Examples under one Scenario Outline.
    Snippets for java, and a reusable superclass for other backends.
    Refactored SnippetGenerator.
    
    There was too much parallel effort in the CamelCase and Underscore
    implementations, so the new structure shares most of the logic
    and implements the different logic in a Concatenator.
    
    I also made sure IntelliJ doesn't break because of the new
    scenario lifecycle methods in the gherkin formatter interface.
    Changing to strongly typed exceptions
    Changes based on Aslak Hellesøy comments
    Log a warning when more than one IoC dependency is found in the classpath and Cucumber defaults to no IoCs.
    Timeout is a long, not int. Be explicit that it's millis.
    Remove duplication in Reflections implementations.
    
    Renamed Reflections to ClassFinder and removed generic methods.
    Created a new Reflections class that delegates to a ClassFinder.
    Add support for Dependency Injection.
    
    This happens via cucumber-picocontainer, cucumber-guice, cucumber-spring etx.
    Refactored --snippet option. Closes #561, #302
    Code review fixes
    Added snippet support to java and junit
    All tests passing again. Ref #525.
    Refactoring for #525. WIP.
    The  annotation is replaced with an  property on  and
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Step definitions and hooks can now specify a timeout (milliseconds) after which a  is thrown if the stepdef/hook has not completed. Closes #343
    Added a timeout argument to Utils - prepping for #343
    More explanatary exception if a hook is declared with bad parameter types.
    Exceptions thrown from a step definition are no longer wrapped in CucumberException.
    cucumber-java lazily creates instances, just like the other DI containers
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Removed duplication. Better reflection error reporting across the board.
    Detect subclassing in glue code and report to the user that it's illegal. Closes #301
    Don't allow inheritance in glue code (stepdefs and hooks). Also fixes #257 in a more encapsulated way.
    Variable renames
    Issue #186. Making sure that Stepdef class is registered with ObjectFactory not a superclass when superclass declares anotated methods
    Remove some dead code. Closes #189.
    Make a clearer separation between the injection and the JavaBackend. This change ensures that the ObjectFactory is responsible for the finding of dependent classes that are needed to create Steps or Hook classes. Before it was the responsibility of the JavaBackend which was stepping on the toes of ObjectFactory implementations that could do that for themselves, like Guice or Spring.
    GluePath can be a package name or a path - both are accepted. Closes #164
    Pass in ClassLoader from the outside. This is necessary in order to construct a working Runtime from a different environment, like Jython. See #151
    Created an UnreportedStepExecutor interface
    
    I don't like that this current implementation passes the Runtime into the backends
    It shouldn't. So I used the interface, so hopefully at some point, refactoring in the
    future won't suck.
    
    It passes all unit tests.
    rename world to glue
    Removed OneTimeResourceLoader and made sure glue code is loaded only once. The Backend.loadGlue method should ideally be removed, and the World and gluePaths passed to each Backend's constructor. Other TODOs on this branch: rename World to Glue. RuntimeGlue should not have a ref back to Runtime. Make Scala work again (disabled it because I don't have the required Scala fu)
    Replace inheritance with delegation for #138
    Load resoureces from classpath when using JUnit, load them from filesystem when using CLI
    Rewrote a lot of the resource loading code
    Snippets no longer come out of order, but in the order they were executed. Closes #57. No more snippet dupes. Closes #55.
     managing object factory holder in java backend
    fixing JavaObjectFactoryTest
    Tagged (scoped) step definitions are reverted. Bad idea.
    Step Deinitions can be scoped by tag (just like hooks). Currently only implemented for Java.
    gluePath is the best name I have come up with for 'class path or script path where stepdefs and hooks live'
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    Use the same scanning mechanism for hooks as for stepdefs. Delete unused annotation.
    preventing recursion when registering constructor arguments of step definition classes in object factory
    Made features pass
    Initial constructor injection for step-definitions.
    Pass several script paths/packages to the Backend constructors. (We can't have a backend per package/script path, because code in backend A would not be able to talk to code in backend B)
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    execution order of Hooks can be controlled in Java
    Added tag support for tags. Closes #9. Closes #10.
    gh-9 Clean up tabs in last commit
    gh-9 Very basic Java implementation of hooks
    Renamed packages. Started work on line support - needs more work.
    Remove ant and maven plugins - no longer needed now that we can use JUnit
    Cleaning out the closet
    Take Locale from Gherkin feature instead of Step Definition. Make an outer Java class for each annotation - makes imports nicer (No more @EN.Given). Moved Java annotation code to java project.
    move cuke4duke.internal.Utils to cucumber.runtime.Utils
    Made the transformer API use String... varargs and improved JavaMethodTransformer to take advantage of it.
    Reformatted code and optimized imports with IntelliJ (default settings).
    All core cucumber-features are passing except one
    Adding JavaMethodTransform
    Moved stuff around
    WIP - broke a lot of stuff
    JUnit integration getting there...
    Snippets for java, and a reusable superclass for other backends.
    More on snippets
    Support several backends. Still struggling with Guice and Spring.
    Test DI
    Added a java-specific TCK to test various DI containers
    If you write code that forces me to check your exceptions, then I will rip off your head and piss in your dead skull.
    Much more modular
    Sort of got Rhino working
    Abstract backend test
    Something that works better.
    Find all annotations with reflections.
    Updated to latest Gherkin
    Factor out method lookup to sepearate object
    Remove duplication in Reflections implementations.
    
    Renamed Reflections to ClassFinder and removed generic methods.
    Created a new Reflections class that delegates to a ClassFinder.
    Refactoring for #525. WIP.
    The  annotation is replaced with an  property on  and
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    reduce visibility, fix javadoc
    Fix several problems with resource loading for scripting languages (after the new classpath: scheme was introduced)
    Detect subclassing in glue code and report to the user that it's illegal. Closes #301
    Fixed some regressions to glue code introduced in 1.0.2. Might fix issue #299, but that's not confirmed.
    Don't convert paths to package names - instead throw an exception. This helps people avoid mistakes.
    Don't allow inheritance in glue code (stepdefs and hooks). Also fixes #257 in a more encapsulated way.
    Optimize imports, format code
    I prefer a null check
    Fixed NullPointerException in ClasspathMethodScanner
    
    Got NullPointerException when having interface in glue code package.
    Fixed this by ignoring interfaces while scanning glue code.
    Variable renames
    Issue #186. Making sure that Stepdef class is registered with ObjectFactory not a superclass when superclass declares anotated methods
    GluePath can be a package name or a path - both are accepted. Closes #164
    No need to cache visited paths now that it's only happening once
    Pass in ClassLoader from the outside. This is necessary in order to construct a working Runtime from a different environment, like Jython. See #151
    Make the Picocontainer CLI tests run
    I can't use the onetime resource loader  :(
    
    The CLassPathMethodScanner does something with descendants, so I had to reimplement the part
    that prevents it from loading stuff multiple times (just a Set)
    Load resoureces from classpath when using JUnit, load them from filesystem when using CLI
    Rewrote a lot of the resource loading code
    Get rid of @author tags
    Tagged (scoped) step definitions are reverted. Bad idea.
    Fix failing feature
    Step Deinitions can be scoped by tag (just like hooks). Currently only implemented for Java.
    Use the same scanning mechanism for hooks as for stepdefs. Delete unused annotation.
    execution order of Hooks can be controlled in Java
    gh-9 Clean up tabs in last commit
    gh-9 Very basic Java implementation of hooks
    Renamed packages. Started work on line support - needs more work.
    Take Locale from Gherkin feature instead of Step Definition. Make an outer Java class for each annotation - makes imports nicer (No more @EN.Given). Moved Java annotation code to java project.
    move cuke4duke.internal.Utils to cucumber.runtime.Utils
    Reformatted code and optimized imports with IntelliJ (default settings).
    Calculator Feature is now passing!
    Moved stuff around
    WIP - broke a lot of stuff
    Support several backends. Still struggling with Guice and Spring.
    Test DI
    Added a java-specific TCK to test various DI containers
    Much more modular
    We can run a single feature. We also have a simple build script
    Now we can run Scenario Outlines
    Sort of got Rhino working
    Refactored Classpath class to be more versatile...
    Abstract backend test
    Better abstractions by bringing in Groovy
    Something that works better.
    Tagged (scoped) step definitions are reverted. Bad idea.
    Cleaning out the closet
    Moved stuff around
    Much more modular
    Better abstractions by bringing in Groovy
    Disabled some tests, remove JRuby
    Move shit around
    Moved remaining annotations to cuke4duke.annotation package.
    Added new @Pending annotation that can be used as a substitute for Ruby-Cucumber's #pending method. Closes #13
    Rename packages from cucumber to cuke4duke
    Added ant build.xml for simple example. Some more renames
    Lots of restructuring and renaming. Ruby code is now packaged inside the jar. No more gem packaging.
    more maven wrestling
    Shuffle stuff around
    Using our own Java classes instead of
    fixed javadoc comments for addClass() and getInstance()
    added new module: cucumber-needle
    cucumber-java lazily creates instances, just like the other DI containers
    Reformatted code and optimized imports with IntelliJ (default settings).
    Moved stuff around
    Support several backends. Still struggling with Guice and Spring.
    Added a java-specific TCK to test various DI containers
    Much more modular
    Factor out method lookup to sepearate object
    Move shit around
    New, better stepdef discovery through reflections
    Keep Guice from injecting classes it can't.
    # Please enter the commit message for your changes. Lines starting
    # with '#' will be ignored, and an empty message aborts the commit.
    # On branch master
    # Your branch is ahead of 'origin/master' by 1 commit.
    #
    # Changes to be committed:
    #   (use "git reset HEAD <file>..." to unstage)
    #
    #       modified:   cuke4duke/src/main/java/cuke4duke/internal/jvmclass/ClassLanguage.java
    #       modified:   cuke4duke/src/main/java/cuke4duke/internal/jvmclass/GuiceFactory.java
    #       modified:   cuke4duke/src/main/java/cuke4duke/internal/jvmclass/ObjectFactory.java
    #       modified:   cuke4duke/src/main/java/cuke4duke/internal/jvmclass/PicoFactory.java
    #       modified:   cuke4duke/src/main/java/cuke4duke/internal/jvmclass/SpringFactory.java
    #       modified:   cuke4duke/src/test/java/cuke4duke/internal/jvmclass/GuiceFactoryTest.java
    #
    Reformatted code with IntelliJ's default settings
    * compiles with both Scala 2.7.x and 2.8
    * Transformations are checked at compiletime (implicits)
    * ScalaDsl supports ask, announce and embed
    * Some code simplifications
    * Objectfactories returns the correect type based on class ( returns T given a Class<T> )
    * ScalaDsl and i18n moved out of 'scala' package, as scala imports with the scala name can be a bit tricky ;)
    Refactor transforms so that default transforms don't need an object factory. Better lifecycle for stepdefinition objects.
    Refactored ObjectFactory to reflect that it is the StepMother instance that is passed to the factory after creation.
    Enable Java step definitions to call other steps indirectly by just providing a string. Closes #26
    Clean up
    Load jvm classes from .class paths instead of .java paths. This should make it easier to support other .class based (compiled) languages like Scala.
    Removed all the warnings
    
    - Added some @SuppressWarnings where needed.
    - Made some local variables to deal with map/list warnings
    Almost a complete rewrite, leveraging Cucumber's new improved language support.
    Timeout is a long, not int. Be explicit that it's millis.
    The  annotation is replaced with an  property on  and
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Step definitions and hooks can now specify a timeout (milliseconds) after which a  is thrown if the stepdef/hook has not completed. Closes #343
    Added tag support for tags. Closes #9. Closes #10.
    Cleaning out the closet
    Fix version/newline/maven problems
    Moved stuff around
    Much more modular
    Better abstractions by bringing in Groovy
    Disabled some tests, remove JRuby
    Find all annotations with reflections.
    Move shit around
    Moved remaining annotations to cuke4duke.annotation package.
    Tag boolean logic working on all languages except Groovy. Tricky.
    Let the ruby side handle tag filtering. We weren't doing any tag filtering at all. Closes #38.
    @Before tag should have optional scenario parameter. Closes #11
    Added support for @Before. The tag most take in arguments (a string representing tags, although they are not parsed yet). The method must also take a scenario object. Ideally this would be of type Scenario, but that is already used as a Tag class. Need to decide what to do about that name clash.
    Rename packages from cucumber to cuke4duke
    Added ant build.xml for simple example. Some more renames
    Lots of restructuring and renaming. Ruby code is now packaged inside the jar. No more gem packaging.
    more maven wrestling
    Shuffle stuff around
    Using our own Java classes instead of
    Timeout is a long, not int. Be explicit that it's millis.
    The  annotation is replaced with an  property on  and
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Step definitions and hooks can now specify a timeout (milliseconds) after which a  is thrown if the stepdef/hook has not completed. Closes #343
    Added tag support for tags. Closes #9. Closes #10.
    Cleaning out the closet
    Fix version/newline/maven problems
    Moved stuff around
    Much more modular
    Better abstractions by bringing in Groovy
    Disabled some tests, remove JRuby
    Move shit around
    Moved remaining annotations to cuke4duke.annotation package.
    Added new @Ordered annotation, to deal with issue #39. Scala is failing now - need to fix it.
    Tag boolean logic working on all languages except Groovy. Tricky.
    Let the ruby side handle tag filtering. We weren't doing any tag filtering at all. Closes #38.
    @Before tag should have optional scenario parameter. Closes #11
    Added After annotation and hook for it
    Rename packages from cucumber to cuke4duke
    Added ant build.xml for simple example. Some more renames
    Lots of restructuring and renaming. Ruby code is now packaged inside the jar. No more gem packaging.
    more maven wrestling
    Shuffle stuff around
    Using our own Java classes instead of
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.5
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.4
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.0
    Some last minute fixes before the 1.1.0 release.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.13
    Release 1.0.13 with better packaging
    increase version to prepare for next development iteration:
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.12
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.11
    Undo bad changes I mkade in bbe40d3d451703f41ef36d16415144268d6ff72a while fixing #356
    Fix tests that broke in #356
    Tweak poms so they work in IDEA as well
    Cleaning up poms
    Build passes with cucumber-deps
    Cleaning up poms
    Build passes with cucumber-deps
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.8
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.7
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.5
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Added cobertura code coverage and started to clean up some cruftiness in the io package
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.4
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0
          oe               .n~~%x.                .n~~%x.
        .@88             x88X   888.            x88X   888.
    ==*88888            X888X   8888L          X888X   8888L
       88888           X8888X   88888         X8888X   88888
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888f        88888X   88888f
       88888       .   48888X   88888     .   48888X   88888
       88888     .@8c   ?888X   8888"   .@8c   ?888X   8888"
       88888    '%888"   "88X   88*`   '%888"   "88X   88*`
    '**%%%%%%**   ^*       ^"==="`       ^*       ^"==="`
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC24
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC23
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC22
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC21
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC20
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC19
    Try release one more time
    Let's try that release again
    Optimize imports, format code
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC16
    Set Mockito's scope to test
    
    Avoids it being inherited by end users of Cucumber (runtime).
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC15
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC13
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC12
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC11
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC8
    Fix the version number appropriately
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC7
    Update version
    Set project version correctly
    Re-adding the poms from before the ant/ivy stuff
    Dual build
    Added back poms - they are generated from ivy.xml (except the parent pom)
    Don't come back maven
    Maven hosed the previous release attempt.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC1
    Let's try to make a release
    No dependency to commons-io. Copied helper methods to cucumber.runtime.Utils.
    Addedd mockito and commons-io to the guice pom
    No dependency to commons-io. Copied helper methods to cucumber.runtime.Utils.
    Addedd mockito and commons-io to the guice pom
    Change dependencies so that full-jars don't bundle all jars (users are expected to provide them themselves). Closes #28.
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    Changed groupId to info.cukes, and prepended cucumber- to all artifacts. Added shade plugin, so all artifacts have a -full (self contained) jar. Closes #11.
    Fix version/newline/maven problems
    Fixed pom issues
    Added an example
    Cleaning poms from duplicate project versions.
    Moved stuff around
    Added a java-specific TCK to test various DI containers
    Much more modular
    More submodules
    More submodules, new Annotations.
    Better abstractions by bringing in Groovy
    Adding eclipse project files to .gitignore
    Guice Module instantiation via cucumber-guice.properties file works
    Guice Module instantiation via cucumber-guice.properties file works
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Working Guice and Spring examples
    Fix version/newline/maven problems
    Moved stuff around
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Simplified Guice module instantiation logic
    Added a feature to descripte the desired functionality
    Simplified Guice module instantiation logic
    Added a feature to descripte the desired functionality
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Removed console out
    Working Guice and Spring examples
    Simplified Guice module instantiation logic
    Guice Module instantiation via cucumber-guice.properties file works
    Simplified Guice module instantiation logic
    Guice Module instantiation via cucumber-guice.properties file works
    Optimize imports, format code
    Building guice
    Simplified Guice module instantiation logic
    Throw an Exception if passed module class could not be instantiated.
    Guice Module instantiation via cucumber-guice.properties file works
    Simplified Guice module instantiation logic
    Throw an Exception if passed module class could not be instantiated.
    Guice Module instantiation via cucumber-guice.properties file works
    Attribution for #634
    Add hookpoints in Cucumber and GuiceFactory
    
    Use case: Create a subclass of Cucumber that creates a subclass of
    GuiceFactory that creates an injector that has the injector of the
    application being tested as its parent.
    That way:
    * The application stays in control of its own lifecycle (it can create its
       own injector), but steps are still scoped by scenario.
    * Step classes can get injected by dependencies from the application
    * The application's injector can be created once and shared between
       multiple scenarios to improve performance
    cucumber-java lazily creates instances, just like the other DI containers
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Mostly finished CLI refactoring
    Optimize imports, format code
    Remove the unused import
    Remove the ignored test.
    Make a clearer separation between the injection and the JavaBackend. This change ensures that the ObjectFactory is responsible for the finding of dependent classes that are needed to create Steps or Hook classes. Before it was the responsibility of the JavaBackend which was stepping on the toes of ObjectFactory implementations that could do that for themselves, like Guice or Spring.
    Remove TODO
    Clarify intent of test
    Simplified Guice module instantiation logic
    Throw an Exception if passed module class could not be instantiated.
    Remove TODO
    Clarify intent of test
    Simplified Guice module instantiation logic
    Throw an Exception if passed module class could not be instantiated.
    Fix indentation
    Moved the JUnit package and configured API docs
    Building guice
    Moved stuff around
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Added proof that unused hooks aren't instantiated.
    Added a UnusedStepdefs.java to all DI modules to prove that they are not instantiated when not used.
    cucumber-java lazily creates instances, just like the other DI containers
    Moved the JUnit package and configured API docs
    Optimize imports, format code
    Added a feature to descripte the desired functionality
    Added a feature to descripte the desired functionality
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Optimize imports, format code
    Added a feature to descripte the desired functionality
    Added a feature to descripte the desired functionality
    Optimize imports, format code
    Guice Module instantiation via cucumber-guice.properties file works
    Added a feature to descripte the desired functionality
    Guice Module instantiation via cucumber-guice.properties file works
    Added a feature to descripte the desired functionality
    Added a feature to descripte the desired functionality
    Added a feature to descripte the desired functionality
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Simplified Guice module instantiation logic
    Guice Module instantiation via cucumber-guice.properties file works
    Added a feature to descripte the desired functionality
    Simplified Guice module instantiation logic
    Guice Module instantiation via cucumber-guice.properties file works
    Added a feature to descripte the desired functionality
    Attribution for #634
    Add hookpoints in Cucumber and GuiceFactory
    
    Use case: Create a subclass of Cucumber that creates a subclass of
    GuiceFactory that creates an injector that has the injector of the
    application being tested as its parent.
    That way:
    * The application stays in control of its own lifecycle (it can create its
       own injector), but steps are still scoped by scenario.
    * Step classes can get injected by dependencies from the application
    * The application's injector can be created once and shared between
       multiple scenarios to improve performance
    cucumber-java lazily creates instances, just like the other DI containers
    Change the method used to load the properties file from the classloader to the class method. This fixes problems when running the tests in a multi module/multi class loader setup
    Make a clearer separation between the injection and the JavaBackend. This change ensures that the ObjectFactory is responsible for the finding of dependent classes that are needed to create Steps or Hook classes. Before it was the responsibility of the JavaBackend which was stepping on the toes of ObjectFactory implementations that could do that for themselves, like Guice or Spring.
    Close stream. Remove dead code.
    Simplified Guice module instantiation logic
    Throw an Exception if passed module class could not be instantiated.
    Guice Module instantiation via cucumber-guice.properties file works
    Close stream. Remove dead code.
    Simplified Guice module instantiation logic
    Throw an Exception if passed module class could not be instantiated.
    Guice Module instantiation via cucumber-guice.properties file works
    All core cucumber-features are passing except one
    Moved stuff around
    Support several backends. Still struggling with Guice and Spring.
    Added a java-specific TCK to test various DI containers
    If you write code that forces me to check your exceptions, then I will rip off your head and piss in your dead skull.
    Much more modular
    More submodules, new Annotations.
    Factor out method lookup to sepearate object
    Move shit around
    New, better stepdef discovery through reflections
    Keep Guice from injecting classes it can't.
    # Please enter the commit message for your changes. Lines starting
    # with '#' will be ignored, and an empty message aborts the commit.
    # On branch master
    # Your branch is ahead of 'origin/master' by 1 commit.
    #
    # Changes to be committed:
    #   (use "git reset HEAD <file>..." to unstage)
    #
    #       modified:   cuke4duke/src/main/java/cuke4duke/internal/jvmclass/ClassLanguage.java
    #       modified:   cuke4duke/src/main/java/cuke4duke/internal/jvmclass/GuiceFactory.java
    #       modified:   cuke4duke/src/main/java/cuke4duke/internal/jvmclass/ObjectFactory.java
    #       modified:   cuke4duke/src/main/java/cuke4duke/internal/jvmclass/PicoFactory.java
    #       modified:   cuke4duke/src/main/java/cuke4duke/internal/jvmclass/SpringFactory.java
    #       modified:   cuke4duke/src/test/java/cuke4duke/internal/jvmclass/GuiceFactoryTest.java
    #
    Fixed a Guice memory bug (hopefully)
    * compiles with both Scala 2.7.x and 2.8
    * Transformations are checked at compiletime (implicits)
    * ScalaDsl supports ask, announce and embed
    * Some code simplifications
    * Objectfactories returns the correect type based on class ( returns T given a Class<T> )
    * ScalaDsl and i18n moved out of 'scala' package, as scala imports with the scala name can be a bit tricky ;)
    Refactor transforms so that default transforms don't need an object factory. Better lifecycle for stepdefinition objects.
    Added new @Ordered annotation, to deal with issue #39. Scala is failing now - need to fix it.
    Cleaned up indentation and code. Closes #33
    Wrapped Guice instantiation in try ... catch block to prevent errors when trying to instantiate classes
    GuiceFactory now supports injecting StepMother into test steps.
    
    Add StepMother as a constructor argument in your step file together with @Inject, and GuiceFactory will
    make sure StepMother is injected.
    
    GuiceFactory now provides the same functionality as PicoFactory and SpringFactory.
    
    This closes #31
    Rename method to inject step mother
    Improved Guice support. Scenario isolation. And we don't swallow exceptions.
    Implemented Google Guice injection support.
    
    - Created GuiceFactory which can be used for injection in steps.
    - Added example with Guice injection
    Optimize imports, format code
    Throw an Exception if passed module class could not be instantiated.
    Guice Module instantiation via cucumber-guice.properties file works
    Throw an Exception if passed module class could not be instantiated.
    Guice Module instantiation via cucumber-guice.properties file works
    Simplified Guice module instantiation logic
    Forward exception, if a properties file can not be read.
    Simplified Guice module instantiation logic
    Forward exception, if a properties file can not be read.
    Optimize imports, format code
    Throw an Exception if passed module class could not be instantiated.
    Throw an Exception if passed module class could not be instantiated.
    Moved the JUnit package and configured API docs
    Moved the JUnit package and configured API docs
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.5
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.4
    Don't shade jruby/jython/groovy artifacts - only for native packages (gem,egg,zip). Closes #518, #522.
    Got rid of Maven Shade Plugin wherever it was possible.
    
    Artefacts which still have need to use the plugin:
    
        - cucumber-groovy
        - cucumber-jython
        - cucumber-jruby
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.3
    Issue #458
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.0
    Changed public Groovy API to cucumber.api.groovy. Fixed some docs.
    Some last minute fixes before the 1.1.0 release.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.13
    Release 1.0.13 with better packaging
    increase version to prepare for next development iteration:
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.12
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.11
    Undo bad changes I mkade in bbe40d3d451703f41ef36d16415144268d6ff72a while fixing #356
    Fix tests that broke in #356
    Tweak poms so they work in IDEA as well
    Maven fun
    Cleaning up poms
    Build passes with cucumber-deps
    Cleaning up poms
    Build passes with cucumber-deps
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.8
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.7
    Throw an exception if a glue or feature path doesn't exist (i.e. neither file nor directory)
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.5
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Added cobertura code coverage and started to clean up some cruftiness in the io package
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.4
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0
          oe               .n~~%x.                .n~~%x.
        .@88             x88X   888.            x88X   888.
    ==*88888            X888X   8888L          X888X   8888L
       88888           X8888X   88888         X8888X   88888
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888f        88888X   88888f
       88888       .   48888X   88888     .   48888X   88888
       88888     .@8c   ?888X   8888"   .@8c   ?888X   8888"
       88888    '%888"   "88X   88*`   '%888"   "88X   88*`
    '**%%%%%%**   ^*       ^"==="`       ^*       ^"==="`
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC24
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC23
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC22
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC21
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC20
    Go away warning
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC19
    Try release one more time
    Let's try that release again
    Optimize imports, format code
    added missing parameters to cli test command line
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC16
    Ambiguous step definitions don't cause Cucumber to blow up, they just fail the step. Fixed #206, but broke the native groovy CLI runner, which I had to disable - see #212
    Compiled Groovy stepdef scripts are found as well as source ones
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC15
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC13
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC12
    Fix Scala build. Closes #167.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC11
    I think this fixes build problems on Windows.
    Make POMs Windows-happy
    
    When ${baseDir} gets interpolated on Windows the traditional double-quote
    delimiters make for a malformed String literal.
    Fix Windows build problems mentioned in #154. Add History entries.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC8
    Clean up groovy full jar
    Fix the version number appropriately
    Run Groovy CLI tests
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC7
    Update version
    Groovy files are appropriately generated and added to the sources
    Set project version correctly
    Re-adding the poms from before the ant/ivy stuff
    Dual build
    Added back poms - they are generated from ivy.xml (except the parent pom)
    Don't come back maven
    Upgrade deps, improve snippets.
    Added standalone script for Groovy
    Maven hosed the previous release attempt.
    Updated groovy tests so they pass in maven build
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC1
    Let's try to make a release
    Change dependencies so that full-jars don't bundle all jars (users are expected to provide them themselves). Closes #28.
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    Changed groupId to info.cukes, and prepended cucumber- to all artifacts. Added shade plugin, so all artifacts have a -full (self contained) jar. Closes #11.
    Fix version/newline/maven problems
    Fixed pom issues
    Added an example
    Cleaning poms from duplicate project versions.
    Moved stuff around
    More submodules
    More submodules, new Annotations.
    Better abstractions by bringing in Groovy
    Don't shade jruby/jython/groovy artifacts - only for native packages (gem,egg,zip). Closes #518, #522.
    added dot-based glue path example
    added missing parameters to cli test command line
    Renames
    Added standalone script for Groovy
    Don't shade jruby/jython/groovy artifacts - only for native packages (gem,egg,zip). Closes #518, #522.
    Release 1.0.13 with better packaging
    Added standalone script for Groovy
    Don't shade jruby/jython/groovy artifacts - only for native packages (gem,egg,zip). Closes #518, #522.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Release 1.0.13 with better packaging
    Optimize imports, format code
    Run Groovy CLI tests
    Added standalone script for Groovy
    Changed public Groovy API to cucumber.api.groovy. Fixed some docs.
    Added an example of how to convert a DataTable to a List of Thing in Groovy
    Use a mix of compiled and interpreted stepdefs
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Fix several problems with resource loading for scripting languages (after the new classpath: scheme was introduced)
    Workaround for arity mismatch on Groovy. Need an explicitly empty list of closure parameters. Closes #297.
    Changed public Groovy API to cucumber.api.groovy. Fixed some docs.
    Workaround for arity mismatch on Groovy. Need an explicitly empty list of closure parameters. Closes #297.
    Added Transform example for Groovy. Ref #470. Will close this issue after the web site has been updated.
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Workaround for arity mismatch on Groovy. Need an explicitly empty list of closure parameters. Closes #297.
    Added an example of how to convert a DataTable to a List of Thing in Groovy
    Fix version/newline/maven problems
    Moved stuff around
    WIP - broke a lot of stuff
    JUnit integration getting there...
    Issue #458
    Moved the JUnit package and configured API docs
    Fix several problems with resource loading for scripting languages (after the new classpath: scheme was introduced)
    Workaround for arity mismatch on Groovy. Need an explicitly empty list of closure parameters. Closes #297.
    More ivy
    Moved stuff around
    Use ~/.../ syntax in Groovy snippets, ref #663
    Align snippets for quoted arguments with cucumber-ruby
    New Snippet text, closes #618.
    
    Change to the new Snippet text. Update History.md.
    Fix a one off error in JRubySnippet.java.
    Refactored --snippet option. Closes #561, #302
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    fix cucumber-jvm #391
    fixed & simplified groovy step snippets
    Moved java file from groovy to java
    Update all snippets to throw PendingException, following up on #271. Need to make Clojure do this.
    Support DocString and DataTable in generated snippets. Closes #227
    Escape regex characters in steps
    
    The current rules for generating step definition templates for
    undefined steps do not escape regular expression characters.  For
    instance, the following step:
    
    Given I have $5
    
    ...generates the following template:
    
    @Given("^I have $(\\d+) in my account$")
    
    Java sees the dollar sign as a regex end-of-string marker, and the
    scenario won't run correctly.  This commit escapes dollar signs,
    parentheses, and square brackets.  The step shown above will now be
    correctly translated into a template as:
    
    @Given("^I have \\$(\\d+) in my account$")
    
    This commit changes the general SnippetGenerator.java file; it assumes
    the set of special regular expression characters will be the same
    across JVM languages.  This condition appears to hold for the currently
    supported languages.  If this changes in the future, it should be
    possible to wrap the list of escaped regex chars in a function that
    can be overridden.
    Replace inheritance with delegation for #138
    Formatting
    patch for cucumber-jvm issue #117
    Changes for gherkin 2.6.0. Will merge to master when gherkin has synced to maven central.
    Optimize imports, reformat
    Fix for #56
    Snippet definition for Java generates method name with colon in it.
    Simplified improved snippet code, removed hamcrest (not a huge fan).
    The pattern for digits in step snippets pattern are escaped copy paste ready
    Moved stuff around
    WIP - broke a lot of stuff
    Closer to correct scenario outline implementation. Need to make sure it works with multiple Examples under one Scenario Outline.
    Snippets for java, and a reusable superclass for other backends.
    Added Transform example for Groovy. Ref #470. Will close this issue after the web site has been updated.
    Changed public Groovy API to cucumber.api.groovy. Fixed some docs.
    Refactored the StepDefinition interface so that backends for dynamic languages can infer the type of a parameter based on the actual argument type passed to it.
    Big refactoring in table conversion land
    Workaround for arity mismatch on Groovy. Need an explicitly empty list of closure parameters. Closes #297.
    Added an example of how to convert a DataTable to a List of Thing in Groovy
    Optimize imports, format code
    Use a mix of compiled and interpreted stepdefs
    Compiled Groovy stepdef scripts are found as well as source ones
    Updated groovy tests so they pass in maven build
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    Moved stuff around
    Added snippet support for all languages.
    Closer to correct scenario outline implementation. Need to make sure it works with multiple Examples under one Scenario Outline.
    Much more modular
    Start on i18n for Groovy
    Abstract backend test
    Better abstractions by bringing in Groovy
    Compiled Groovy stepdef scripts are found as well as source ones
    Updated groovy tests so they pass in maven build
    Simplify i18n build. Thanks @robertoandrade - ref #487
    Timeout is a long, not int. Be explicit that it's millis.
    Changed public Groovy API to cucumber.api.groovy. Fixed some docs.
    Normalized groovy and scala generated code as well
    Step definitions and hooks can now specify a timeout (milliseconds) after which a  is thrown if the stepdef/hook has not completed. Closes #343
    Ant based code gen for groovy. Fixed cli-test for jruby and groovy
    Use ~/.../ syntax in Groovy snippets, ref #663
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    simplified backslash escaping
    fix cucumber-jvm #391
    fixed & simplified groovy step snippets
    Update all snippets to throw PendingException, following up on #271. Need to make Clojure do this.
    Snippets for DataTable include a hint about using List<YourType>, so people discover this neat technique
    Replace inheritance with delegation for #138
    Reenabled Scala
    Upgrade deps, improve snippets.
    Simplified improved snippet code, removed hamcrest (not a huge fan).
    Ambiguous matches are now reported correctly. Snippets are printed from CLI.
    Moved stuff around
    WIP - broke a lot of stuff
    Added snippet support for all languages.
    Closer to correct scenario outline implementation. Need to make sure it works with multiple Examples under one Scenario Outline.
    Snippets for java, and a reusable superclass for other backends.
    Minor refactoring
    Timeout is a long, not int. Be explicit that it's millis.
    Improved Transformer API
    Add support for List step definition parameters
    Pass a SingleValueConverter to ParameterType
    Pass a SingleValueConverter to ParameterType
    Refactored the StepDefinition interface so that backends for dynamic languages can infer the type of a parameter based on the actual argument type passed to it.
    Step definitions and hooks can now specify a timeout (milliseconds) after which a  is thrown if the stepdef/hook has not completed. Closes #343
    Show code source for Java step definitions in case of duplicates or ambiguous stepdefs.
    Use I18n instead of Locale since converting from Locale to I18n is tricky.
    Refactoring out the Reporter from the step call
    
    Created a new method, runUnreportedStep, that simply grabs the step out of a match,
    throwing an exception if it does not match, and executes it.
    
    All the exceptions are required to trickle up so that they're caught by the step that
    does the actual execution so that things look right in the output.
    
    A snippit will be generated if you call a non existing step, so that's handy :)
    Revert "Bring the URI forward to the step evaluation too."
    
    This reverts commit 1851bfe0c56c8abd223ad25a57988c76d0c66396.
    Bring the URI forward to the step evaluation too.
    
    This doesn't smell right, there must be something I'm doing entirely wrong.
    Refactor to change the execut method to include Reporter and Locale
    Tagged (scoped) step definitions are reverted. Bad idea.
    Step Deinitions can be scoped by tag (just like hooks). Currently only implemented for Java.
    Fixed some Groovy bugs
    Date format can be specified with a @DateFormat annotation
    Refactoring to capture more info about types
    Fix broken conversion of table to List<Map<String,String>>. Addresses @nightscape's comment in #49.
    Implement Table.asList(Class itemType). Clean up imports
    Moved table conversion logic from java to core
    All building/passing except scala
    Misc changes to bring in XStream to do some of the heavy object conversion lifting
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    Working on Issue #19
    Added the possibility to process tables.
    Added a @JavaBeanClass annotation to allow passing list of beans to
    Steps.
    Working on Issue #9
    Added the possibility to process tables.
    Added a @JavaBeanClass annotation to allow passing list of beans to
    Steps.
    Ambiguous matches are now reported correctly. Snippets are printed from CLI.
    Take Locale from Gherkin feature instead of Step Definition. Make an outer Java class for each annotation - makes imports nicer (No more @EN.Given). Moved Java annotation code to java project.
    Adding locale in StepDefinition in order to transform arguments. It
    would be better to have locale set on an higher level, for instance
    Feature.
    Moved stuff around
    WIP - broke a lot of stuff
    If you write code that forces me to check your exceptions, then I will rip off your head and piss in your dead skull.
    More submodules
    Ioke passing
    Sort of got Rhino working
    Abstract backend test
    Better abstractions by bringing in Groovy
    Minor refactoring
    Refactored SnippetGenerator.
    
    There was too much parallel effort in the CamelCase and Underscore
    implementations, so the new structure shares most of the logic
    and implements the different logic in a Concatenator.
    
    I also made sure IntelliJ doesn't break because of the new
    scenario lifecycle methods in the gherkin formatter interface.
    Timeout is a long, not int. Be explicit that it's millis.
    Remove duplication in Reflections implementations.
    
    Renamed Reflections to ClassFinder and removed generic methods.
    Created a new Reflections class that delegates to a ClassFinder.
    Refactored --snippet option. Closes #561, #302
    Refactoring for #525. WIP.
    Issue #458
    Changed public Groovy API to cucumber.api.groovy. Fixed some docs.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Build passes with cucumber-deps
    Build passes with cucumber-deps
    Step definitions and hooks can now specify a timeout (milliseconds) after which a  is thrown if the stepdef/hook has not completed. Closes #343
    Changes to work with gherkin's hook-reporting branch
    Fix several problems with resource loading for scripting languages (after the new classpath: scheme was introduced)
    Fixed some regressions to glue code introduced in 1.0.2. Might fix issue #299, but that's not confirmed.
    UTF-8 everywhere. Closes #251
    Removed console out
    Ambiguous step definitions don't cause Cucumber to blow up, they just fail the step. Fixed #206, but broke the native groovy CLI runner, which I had to disable - see #212
    Compiled Groovy stepdef scripts are found as well as source ones
    Created an UnreportedStepExecutor interface
    
    I don't like that this current implementation passes the Runtime into the backends
    It shouldn't. So I used the interface, so hopefully at some point, refactoring in the
    future won't suck.
    
    It passes all unit tests.
    rename world to glue
    Removed OneTimeResourceLoader and made sure glue code is loaded only once. The Backend.loadGlue method should ideally be removed, and the World and gluePaths passed to each Backend's constructor. Other TODOs on this branch: rename World to Glue. RuntimeGlue should not have a ref back to Runtime. Make Scala work again (disabled it because I don't have the required Scala fu)
    Replace inheritance with delegation for #138
    added constructor with additional GroovyShell parameter
    handle StackTraceElement with empty file name
    Load resoureces from classpath when using JUnit, load them from filesystem when using CLI
    All tests passing, ut still not good
    Rewrote a lot of the resource loading code
    backend should add after hook as after hook and not as before hook
    Extract method for clarity
    Prevent exceptions when trying to run groovy files that are classes
    Step Deinitions can be scoped by tag (just like hooks). Currently only implemented for Java.
    Fixed some Groovy bugs
    gluePath is the best name I have come up with for 'class path or script path where stepdefs and hooks live'
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    Pass several script paths/packages to the Backend constructors. (We can't have a backend per package/script path, because code in backend A would not be able to talk to code in backend B)
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    gh-9 Clean up tabs in last commit
    gh-9 Very basic Java implementation of hooks
    Renamed packages. Started work on line support - needs more work.
    Take Locale from Gherkin feature instead of Step Definition. Make an outer Java class for each annotation - makes imports nicer (No more @EN.Given). Moved Java annotation code to java project.
    Started on a CLI as an alternative to JUnit. This is necessary for other JVM languages that don't use JUnit (Clojure for example). Currently using some of the JUnit classes - will decouple this later.
    All core cucumber-features are passing except one
    Adding locale in StepDefinition in order to transform arguments. It
    would be better to have locale set on an higher level, for instance
    Feature.
    Moved stuff around
    WIP - broke a lot of stuff
    JUnit integration getting there...
    Closer to correct scenario outline implementation. Need to make sure it works with multiple Examples under one Scenario Outline.
    More on snippets
    Added a java-specific TCK to test various DI containers
    If you write code that forces me to check your exceptions, then I will rip off your head and piss in your dead skull.
    More submodules
    Ioke passing
    Sort of got Rhino working
    Refactored Classpath class to be more versatile...
    Start on i18n for Groovy
    Abstract backend test
    Better abstractions by bringing in Groovy
    Timeout is a long, not int. Be explicit that it's millis.
    Upgrade to gherkin 2.12.0
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    cuke4duke convention is to run env.groovy Before/After methods first/last
    Step definitions and hooks can now specify a timeout (milliseconds) after which a  is thrown if the stepdef/hook has not completed. Closes #343
    Changes to work with gherkin's hook-reporting branch
    Fix tagged hooks for scenario outlines. Closes #209, closes #210
    Step Deinitions can be scoped by tag (just like hooks). Currently only implemented for Java.
    Fixed some Groovy bugs
    Changed public Groovy API to cucumber.api.groovy. Fixed some docs.
    Step definitions and hooks can now specify a timeout (milliseconds) after which a  is thrown if the stepdef/hook has not completed. Closes #343
    Fixed some Groovy bugs
    Moved stuff around
    If you write code that forces me to check your exceptions, then I will rip off your head and piss in your dead skull.
    More submodules
    Start on i18n for Groovy
    Use pushd/popd - just feels better.
    Make script executable
    Updated docs and added scripts for API docs
    Fix JavaDoc stylesheet so it works with Java 7. Closes #457
    Javadoc tweaks
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.5
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.4
    Got rid of Maven Shade Plugin wherever it was possible.
    
    Artefacts which still have need to use the plugin:
    
        - cucumber-groovy
        - cucumber-jython
        - cucumber-jruby
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.2
    Updated library versions
    Updated library versions
    Formatters can HTTP PUT to an URL
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.0
    Some last minute fixes before the 1.1.0 release.
    Improved Transformer API
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.13
    Release 1.0.13 with better packaging
    increase version to prepare for next development iteration:
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.12
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.11
    Undo bad changes I mkade in bbe40d3d451703f41ef36d16415144268d6ff72a while fixing #356
    Fix tests that broke in #356
    Maven fun
    Struggling with shading and the deps.
    Fix deps
    Docs
    Bump versions
    Build passes with cucumber-deps
    Pass a SingleValueConverter to ParameterType
    Docs
    Bump versions
    Build passes with cucumber-deps
    Pass a SingleValueConverter to ParameterType
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.8
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.7
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.5
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Added cobertura code coverage and started to clean up some cruftiness in the io package
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.4
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0
          oe               .n~~%x.                .n~~%x.
        .@88             x88X   888.            x88X   888.
    ==*88888            X888X   8888L          X888X   8888L
       88888           X8888X   88888         X8888X   88888
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888f        88888X   88888f
       88888       .   48888X   88888     .   48888X   88888
       88888     .@8c   ?888X   8888"   .@8c   ?888X   8888"
       88888    '%888"   "88X   88*`   '%888"   "88X   88*`
    '**%%%%%%**   ^*       ^"==="`       ^*       ^"==="`
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC24
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC23
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC22
    Get rid of JCommander. Closes #266.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC21
    Optimise imports
    WIP for #160
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC20
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC19
    Try release one more time
    Let's try that release again
    Optimize imports, format code
    Adding Unit formatter
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC16
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC15
    Package XStream and diffutils inside core. Closes #179.
    Improved HTMLFormatter tests
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC13
    Properly flush and close formatters. Closes #173
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC12
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC11
    DRY up dependency versions
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC8
    Fix the version number appropriately
    Tell, don't ask. And some formatting.
    Rhino is only a test dependency
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC7
    Update version
    Set up filtering on the cucumber-version.properties file
    and add it to the build process
    Set project version correctly
    Re-adding the poms from before the ant/ivy stuff
    Dual build
    Added back poms - they are generated from ivy.xml (except the parent pom)
    Don't come back maven
    Started work on IVY based build. #108
    Rewrote a lot of the resource loading code
    Maven hosed the previous release attempt.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC1
    Let's try to make a release
    Use cucumber-html jar instead of copying its content in core, so it'll
    be possible to switch it without recompiling. #67
    Code completion metadata can now be generated from the CLI. Closes #26.
    Optimize imports, reformat
    Using cucumber-html
    Adding basic functionalities to java html formatter.
    Working on #42.
    Change dependencies so that full-jars don't bundle all jars (users are expected to provide them themselves). Closes #28.
    Use gherkin 2.4.18 from Maven Central
    Misc changes to bring in XStream to do some of the heavy object conversion lifting
    Started on code completion
    Implementing Diff between two tables.
    Changed groupId to info.cukes, and prepended cucumber- to all artifacts. Added shade plugin, so all artifacts have a -full (self contained) jar. Closes #11.
    Fix version/newline/maven problems
    Fixed pom issues
    Added an example
    Shut up maven
    Cleaning poms from duplicate project versions.
    Moved stuff around
    Support several backends. Still struggling with Guice and Spring.
    Much more modular
    More submodules
    More submodules, new Annotations.
    We can run a single feature. We also have a simple build script
    Something that works better.
    Disabled some tests, remove JRuby
    Updated to latest Gherkin
    Move shit around
    Added jcommander based CLI
    New, better stepdef discovery through reflections
    Get trace
    A pretty decent start at a pure Java Cucumber. Also a good start for a new Ruby implementation.
    Start new dev cycle
    Release 0.4.2
    Bugfix: error for mvn -Dcucumber.installGems=true cuke4duke:cucumber. Closes #79.
    Start new dev cycle
    Release 0.4.1
    Don't declare dependency on gherkin. Closes #77.
    Add new dev cycle
    Release 0.4.0
    Big refactor of build system
    Put the jar in the right spot
    Moved gem to top level
    Release 0.3.3 - upgrading lots of stuff
    Updated version numbers to cuke4duke 0.3.2 and added maven install command to
    java-webdriver example.
    
    With updated dependencies it's now possible to install dependencies from the
    java-webdriver examples folder with the following command
    
      `mvn -Dcucumber.installGems=true -e cuke4duke:cucumber`
    Various fixes to bring Cuke4Duke uptodate with latest Gherkin and Cucumber
    Various fixes to bring Cuke4Duke uptodate with latest Gherkin and Cucumber
    Prepare for release
    Prepare for release 0.3.0
    Reformatted code with IntelliJ's default settings
    Release 0.3.0.beta.2
    JRuby 1.5.0.RC1 support.
    Release 0.3.0.beta.1
    Upgrade mockito
    * compiles with both Scala 2.7.x and 2.8
    * Transformations are checked at compiletime (implicits)
    * ScalaDsl supports ask, announce and embed
    * Some code simplifications
    * Objectfactories returns the correect type based on class ( returns T given a Class<T> )
    * ScalaDsl and i18n moved out of 'scala' package, as scala imports with the scala name can be a bit tricky ;)
    Support for 2.8.0.Beta1 (breaks 2.7.x)
    Indentation
    Release 0.2.4
    Upgrade to Clojure 1.1.0
    Upgrade to JUnit 4.8.1, Ant 1.8.0, PicoContainer 2.10.2, Mockito 1.8.2, Groovy 1.7.1
    Added future Chinese stepdef annotation class - just making sure we can compile.
    issue #61 - support for tables and multiline strings
    * added more examples
    * refactored the execution/recording handle code in the scalaDsl
    * implicit conversion from Handle to Fun of Function0 allowing to call step from a stepdefinition with call-by-name
    * changed scala version from 2.7.6 to 2.7.7
    Release 0.2.3
    Release 0.2.2
    Upgrade to Ioke P-0.4.0
    Upgrade to Groovy 1.7.0
    Cleanup support for spring, support is now 2.5+ and 3.0.
    Copy a file with Maven? Easy peasy. Only 15 lines of XML.
    Added a new Ant task. Refactored Mojo to use Ant task.
    Update Groovy and Ant
    Bump version
    Better tag support in Groovy and misc enhancements
    Release 0.1.8
    Use online ioke jars (ioke-lang-lib is not there yet)
    Updated to newer versions of some dependencies
    Made programming language dependencies optional
    Bumbed all poms and ivys to 0.1.8-SNAPSHOT
    Prepare for release of 0.1.7
    Adding back Ioke jars since they aren't in an online repo yet.
    Implemented Google Guice injection support.
    
    - Created GuiceFactory which can be used for injection in steps.
    - Added example with Guice injection
    Update the poms so that Ioke can be used correctly with some new features, also implement pending so it works correctly
    Release 0.1.6
    Release 0.6.0
    Adding ioke jars as local repository
    Add ioke-lib to the various poms
    Initial Ioke support - hacked together with Ola Bini, Sam Aaron, Jakob Skov-Pedersen and Aslak Hellesøy at RubyFoo in London.
    Bump version
    Reworked the rest of the code and examples after the Scala refactorings
    Started on Javascript support
    Added Scala support
    Getting there with Clojure
    prepare for next version
    Remove snapshots - making a release
    Introduced the X.X.X-SNAPSHOT version scheme
    move compiler settings to parent pom,
    set junit scope in parent pom,
    not sure why maven-jar-plugin was specified in the maven plugin project...deleted it
    remove redundant information in child poms (version, groupId)
    Load jvm classes from .class paths instead of .java paths. This should make it easier to support other .class based (compiled) languages like Scala.
    Upgrade cucumber, remove scala
    Release v0.1.3
    Release 0.1.2
    Use mockito 1.8.0
    Release v0.1.1
    changed mockito dependency from mockito-core to mockito-all (otherwise transitive objenesis dep would be missing, see http://code.google.com/p/mockito/wiki/MavenUsers), and added missing groupId to cuke4duke-maven-plugin pom.xml
    Bump version
    Almost a complete rewrite, leveraging Cucumber's new improved language support.
    Better dependencies
    Change POM to upload javadoc
    Fix compatibility with cucumber 0.3.90
    disable tests that often fail on other platforms (??)
    Upgrade versions, fix broken test
    Refactored JUnit support
    Force Java 1.5 compilation
    Remove all README files - use Wiki from now on. Bump versions. Start a History.txt file that will contain changes for everything (too messy with several changelogs per sub project)
    Make log4j keep silent during build.
    Added ant build.xml for simple example. Some more renames
    Lots of restructuring and renaming. Ruby code is now packaged inside the jar. No more gem packaging.
    o now gems work (but need to remove hardcoding of jruby.home)
    Refactored Spring support and tests
    Added dependencies for the Spring Framework
    Added profile to run examples
    more maven wrestling
    [JRuby]  and  can be set in env var, system property or  resource bundle.
    Renamed packages. Started work on line support - needs more work.
    Renamed packages. Started work on line support - needs more work.
    Fixed use of formatter to list all step results in JSON output
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Renamed UnitFormatter to JUnitFormatter. Made some minor changes and deleted unused xsd. Can be added back later.
    Fixed some bugs. Moved from FileWriter to File in UnitFormatter
    Adding Unit formatter
    JUnitFormatter marks skipped tests as failures in strict mode
    
    Let the option strict make JUnitFormatter to mark skipped tests as
    failures. Use a new interface StrictAware to determine which formatters
    the strict option should be passed to, following the example of the
    interface ColorAware determining which formatters the monochrome option
    is sent to.
    Updates for Issue #477 - JUnitFormatter does not put required name attribute in testsuite root element.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Fix tests that broke in #356
    Renamed UnitFormatter to JUnitFormatter. Made some minor changes and deleted unused xsd. Can be added back later.
    Fixed some bugs. Moved from FileWriter to File in UnitFormatter
    UnitFormatter bug fixing #1
    Adding Unit formatter
    Align the step results in the JUnit test result files
    
    Adjust the number of . separating the step text from the step result,
    so that the results are aligned.
    Updates for Issue #477 - JUnitFormatter does not put required name attribute in testsuite root element.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Fix tests that broke in #356
    Renamed UnitFormatter to JUnitFormatter. Made some minor changes and deleted unused xsd. Can be added back later.
    Fixed some bugs. Moved from FileWriter to File in UnitFormatter
    UnitFormatter bug fixing #1
    Adding Unit formatter
    The JSONFormatter should record before hooks in the next scenario
    
    For all but the before hooks executed before the first scenario, the
    JSONFormatter records them for the latest started scenario, instead of
    the scenario be to executed next. The before hook data is shifted up
    one scenario, so generally the first scenario will record two hook
    executions for each before hook, and the last scenario none.
    Fixed use of formatter to list all step results in JSON output
    Updates for Issue #477 - JUnitFormatter does not put required name attribute in testsuite root element.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Fix tests that broke in #356
    Renamed UnitFormatter to JUnitFormatter. Made some minor changes and deleted unused xsd. Can be added back later.
    Fixed some bugs. Moved from FileWriter to File in UnitFormatter
    UnitFormatter bug fixing #1
    Adding Unit formatter
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Added a junit test for the HTML formatter
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Renamed UnitFormatter to JUnitFormatter. Made some minor changes and deleted unused xsd. Can be added back later.
    Adding Unit formatter
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Renamed UnitFormatter to JUnitFormatter. Made some minor changes and deleted unused xsd. Can be added back later.
    Adding Unit formatter
    Align the step results in the JUnit test result files
    
    Adjust the number of . separating the step text from the step result,
    so that the results are aligned.
    Updates for Issue #477 - JUnitFormatter does not put required name attribute in testsuite root element.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Fix tests that broke in #356
    Renamed UnitFormatter to JUnitFormatter. Made some minor changes and deleted unused xsd. Can be added back later.
    Fixed some bugs. Moved from FileWriter to File in UnitFormatter
    Adding Unit formatter
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Renamed UnitFormatter to JUnitFormatter. Made some minor changes and deleted unused xsd. Can be added back later.
    Fixed some bugs. Moved from FileWriter to File in UnitFormatter
    Adding Unit formatter
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Rewrote a lot of the resource loading code
    Improved Transformer API
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    Add support for List step definition parameters
    Build passes with cucumber-deps
    Pass a SingleValueConverter to ParameterType
    Build passes with cucumber-deps
    Pass a SingleValueConverter to ParameterType
    Refactored the StepDefinition interface so that backends for dynamic languages can infer the type of a parameter based on the actual argument type passed to it.
    Simplify
    Allow custom @XStreamConverter to be used on regular arguments - not just table arguments.
    Workaround for arity mismatch on Groovy. Need an explicitly empty list of closure parameters. Closes #297.
    Reformat code, shuffle things around a little. Closes #207, #214.
    Optimise imports
    Mostly finished CLI refactoring
    retrieve stepname from match instead of a stepStack
    Use I18n instead of Locale since converting from Locale to I18n is tricky.
    Pass in ClassLoader from the outside. This is necessary in order to construct a working Runtime from a different environment, like Jython. See #151
    Refactoring out the Reporter from the step call
    
    Created a new method, runUnreportedStep, that simply grabs the step out of a match,
    throwing an exception if it does not match, and executes it.
    
    All the exceptions are required to trickle up so that they're caught by the step that
    does the actual execution so that things look right in the output.
    
    A snippit will be generated if you call a non existing step, so that's handy :)
    Revert "Bring the URI forward to the step evaluation too."
    
    This reverts commit 1851bfe0c56c8abd223ad25a57988c76d0c66396.
    Bring the URI forward to the step evaluation too.
    
    This doesn't smell right, there must be something I'm doing entirely wrong.
    Refactor to change the execut method to include Reporter and Locale
    Rewrote a lot of the resource loading code
    Make more of cucumber-features pass. Rename Table to DataTable. #45.
    Date format can be specified with a @DateFormat annotation
    Refactoring to capture more info about types
    Optimize imports, reformat
    Upgrade gherkin dependency
    Allow Regexp match arguments and Doc Strings/Data Tables to be used in the same step/stepdef. Fixes #47.
    Moved table conversion logic from java to core
    All building/passing except scala
    Renames. Register the rest of our locale-aware converters
    Using XStream to convert primitives as well as objects
    Misc small refactorings
    Take Locale from Gherkin feature instead of Step Definition. Make an outer Java class for each annotation - makes imports nicer (No more @EN.Given). Moved Java annotation code to java project.
    Renames and simplifications in transformers package
    Reformatted code and optimized imports with IntelliJ (default settings).
    Calculator Feature is now passing!
    Allow for decreasing thread count in cucumber.runtime.TimeoutTest
    
    The TimeoutTest has failed occationally, also on Travis. One source of
    failure was that some extra pool thread existed when the initial thread
    count was sampled, therefore the test could fail because the current
    thread count was lower than the initial thread count. Now the test
    allow the current count to be lower or equal to the initial count.
    Fixed thread leak in timeout implementation. Closes #639
    fix the thread leak in timeout class (https://github.com/cucumber/cucumber-jvm/issues/639)
    Step definitions and hooks can now specify a timeout (milliseconds) after which a  is thrown if the stepdef/hook has not completed. Closes #343
    Dominic: expose scenario name as part of cucumber.api.Scenario
    Print summary at the end of the run
    
    Print the same kind of summary at the end of the run as Cucumber-Ruby:
    x Scenarios (x1 failed, x2 skipped, x3 pending, x4 undefined, x5 passed)
    y Steps (y1 failed, y2 skipped, y3 pending, y4 undefined, y5 passed)
    XmY.YYYs
    
    The new class SummaryCounter is used by the Runtime class to collect the
    data for the summary. The SummaryPrinter then let the SummaryCounter
    print the summary before the errors and the snippets. The printout from
    the SummaryPrinter is moved to after the printout from the formatters to
    make the summary printed after the progress or pretty printout.
    Add Scenario.source_tag_names to work with Capybara. Closes #504.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    Embed text and images in reports. Closes #205.
    Make it hardert to do the wrong thing with ScenarioResult - it is an interface, so it cannot be instantiated.
    Hooks can receive results. Closes #27.
    Make it easier to correctly create RuntimeOptions from a String, ref #597.
    Override Cucumber Options via  or cucumber-jvm.properties as well as -Dcucumber.options
    Add RuntimeOptions.isMonochrome(), rm Runtime factory methods
    
    Add RuntimeOptions.isMonochorme(), since commit 65f3bd6 on the master
    branch change RuntimeOptions to have private fields and getters.
    
    Basically revert commit c8feb10. Since the new android support on the
    master banch sends backends to the Runtime constructor, which
    previously only was done in tests, the change to use factory methods in
    Runtime no longer make sence.
    Minimize the number of constructors in the Runtime class
    
    To minimize the number of constructors in the Runtime class, and to
    handle that by default a UndefinedStepTracker is created and then
    injected both into the Runtime and the RuntimeGlue, create a factory
    method as the main entry. Expose additional conveniece factory methods
    for testing in the core module in RuntimeTest.
    Updated to JUnit 4.11. Relates to #255. Might also relate to #322. IntelliJ IDEA reports features with Background and Scenario Outline incorrect.y. Might be the case on master too.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    More explanatary exception if a hook is declared with bad parameter types.
    Options (Command line or ) can be overriden with the  system property.
    Optimise imports
    Mostly finished CLI refactoring
    Get gluePath from runtimeOptions
    Get dryRun from runtimeOptions
    Ease RuntimeOptions into the Runtime API
    Fix tagged hooks for scenario outlines. Closes #209, closes #210
    Bugfix: Fixed Scenario Outlines for CLI. Closes #170
    Tagged hooks are executed properly. Closes #146.
    Pass in ClassLoader from the outside. This is necessary in order to construct a working Runtime from a different environment, like Jython. See #151
    Tell, don't ask. And some formatting.
    Refactor stuff in Glue into Runtime
    
    It should go further than that and have some kind of runtime state machine that has
    access to the right bits and is either factoried, or created per each scenario.
    rename world to glue
    re-enabling fixed test :D
    Massive Refactor pulling world out to a higher level.
    
    It's still loading resources multiple times, but all but one of the existing tests
    pass. I'll have to rewrite how that test works, and it's ignored right now
    Load resoureces from classpath when using JUnit, load them from filesystem when using CLI
    Rewrote a lot of the resource loading code
    JUnit behaves better when a Before hook fails. Closes #106
    Better hooks
    First shot at implementing --dry-run
    First shot at implementing --dry-run
    Scenario Outlines and Background are roughly working
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    Hooks can receive results. Closes #27.
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    gh23 Dispose of backends after all hooks have excuted
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Show code source for Java step definitions in case of duplicates or ambiguous stepdefs.
    Detect duplicate step definitions. Closes #213.
    [JRuby]  and  can be set in env var, system property or  resource bundle.
    Rename uri to featurePath, which is more explicit
    Use uri instead of path in CucumberFeature
    
    On Windows paths use '\' as separator, but uri:s use '/'. On other
    platforms both paths and uri:s use '/' as separator. Make sure that
    paths are converted to uri:s when CucumberFeatures are created.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Ignore duplicate features instead of throwing exception. Closes #259.
    Fail if duplicate features are detected. Closes #165.
    Dominic: expose scenario name as part of cucumber.api.Scenario
    Make it easier to correctly create RuntimeOptions from a String, ref #597.
    Rename uri to featurePath, which is more explicit
    Report summaries and  in the same way as the CLI
    Override Cucumber Options via  or cucumber-jvm.properties as well as -Dcucumber.options
    Return exit code 0 when no features are found
    
    Return exit code 0 when no features are found, or if no found features
    match the tags filter used. Print the same message, that is used in the
    currently thrown CucumberException when this occurs, as information
    before the summary printout.
    Make it possible to inject a glue when creating a Runtime
    
    To aid testing, make it possible to inject a glue when creating a
    Runtime. Also add a test specify that a CucumberException is thrown
    if no backends are found (or an emtpy collection of backends is
    injected).
    Add RuntimeOptions.isMonochrome(), rm Runtime factory methods
    
    Add RuntimeOptions.isMonochorme(), since commit 65f3bd6 on the master
    branch change RuntimeOptions to have private fields and getters.
    
    Basically revert commit c8feb10. Since the new android support on the
    master banch sends backends to the Runtime constructor, which
    previously only was done in tests, the change to use factory methods in
    Runtime no longer make sence.
    Localise the UndefinedStepTracker in the Runtime
    
    Localise the UndefinedStepTracker in the Runtime and remove that
    argument from the constructor. Use that the optionalGlue argument is
    null, as the cue to let the Runtime create the default RuntimeGlue.
    When the optionalGlue argument is not null, the glue injected with that
    argument will be used by the Runtime.
    Minimize the number of constructors in the Runtime class
    
    To minimize the number of constructors in the Runtime class, and to
    handle that by default a UndefinedStepTracker is created and then
    injected both into the Runtime and the RuntimeGlue, create a factory
    method as the main entry. Expose additional conveniece factory methods
    for testing in the core module in RuntimeTest.
    Tell don't ask when printing summary at the end of the run
    
    Let the SummaryPrinter tell the Runtime to print the summary instead of
    asking for the SummaryCounter.
    
    Put back the check for an emtpy list of backends in the Runtime ctor,
    which was removed by mistake. Add test to check that a CucumberException
    is thrown when the list of backends is emtpy.
    
    Use Long for duration arguments in SummaryCounter, to conform to the
    return type of Result.getDuration().
    Use only jdk1.6 compliant constructs in the tests
    Print summary at the end of the run
    
    Print the same kind of summary at the end of the run as Cucumber-Ruby:
    x Scenarios (x1 failed, x2 skipped, x3 pending, x4 undefined, x5 passed)
    y Steps (y1 failed, y2 skipped, y3 pending, y4 undefined, y5 passed)
    XmY.YYYs
    
    The new class SummaryCounter is used by the Runtime class to collect the
    data for the summary. The SummaryPrinter then let the SummaryCounter
    print the summary before the errors and the snippets. The printout from
    the SummaryPrinter is moved to after the printout from the formatters to
    make the summary printed after the progress or pretty printout.
    Remove warnings and deprecated code
    throw exception when unsupported options are passed
    
    when options starting with a dash are passed which aren't handled specifically, the usages are printed to system.out and an exception is thrown
    
    Issue #463
    Revert "checking for dry run option before running hooks."
    
    This reverts commit a5ace1a63daa44f04dcaad0f0cbdfa28be124545.
    checking for dry run option before running hooks.
    
    make sure that dryRun has not been set before running hooks.
    Deprecated  in favour of .
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    JUnit assume failures behaves just like pending. Closes #359.
    Add support for List step definition parameters
    Options (Command line or ) can be overriden with the  system property.
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Issue #196 process pending steps correctly
    Issue #196 use undefinedStepTracker to detect undefined steps
    Issue #196 strict in cucumber-jvm
    Mostly finished CLI refactoring
    Get gluePath from runtimeOptions
    Get dryRun from runtimeOptions
    Ease RuntimeOptions into the Runtime API
    Properly flush and close formatters. Closes #173
    Pass in ClassLoader from the outside. This is necessary in order to construct a working Runtime from a different environment, like Jython. See #151
    Scala fixes for Windows. #139
    Load resoureces from classpath when using JUnit, load them from filesystem when using CLI
    Rewrote a lot of the resource loading code
    Don't close streams we don't create, and only close them once. Closes #96. Closes #105.
    Changes for gherkin 2.6.0. Will merge to master when gherkin has synced to maven central.
    Failing test for JSON formatter
    Added failing test for JSON output
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Rewrote a lot of the resource loading code
    Fix (with test) for space in filename bug. Closes #17.
    Renamed packages. Started work on line support - needs more work.
    Refactored SnippetGenerator.
    
    There was too much parallel effort in the CamelCase and Underscore
    implementations, so the new structure shares most of the logic
    and implements the different logic in a Concatenator.
    
    I also made sure IntelliJ doesn't break because of the new
    scenario lifecycle methods in the gherkin formatter interface.
    Refactored --snippet option. Closes #561, #302
    Style fix
    Added snippet support to core
    Remove redundant Locale argument in a bunch of places. Some reformatting.
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Issue #196 use undefinedStepTracker to detect undefined steps
    Snippets for DataTable include a hint about using List<YourType>, so people discover this neat technique
    Use I18n instead of Locale since converting from Locale to I18n is tricky.
    Fixed issue #184 - i18n java snippets for undefined steps are always generated with @Given annotation
    UndefinedStepsTracker receives backends in getSnippets instead of ctor - this reduces coupling. Throw exception if there are no Backends. This might be the fix for #146
    Created an UnreportedStepExecutor interface
    
    I don't like that this current implementation passes the Runtime into the backends
    It shouldn't. So I used the interface, so hopefully at some point, refactoring in the
    future won't suck.
    
    It passes all unit tests.
    rename world to glue
    Removed OneTimeResourceLoader and made sure glue code is loaded only once. The Backend.loadGlue method should ideally be removed, and the World and gluePaths passed to each Backend's constructor. Other TODOs on this branch: rename World to Glue. RuntimeGlue should not have a ref back to Runtime. Make Scala work again (disabled it because I don't have the required Scala fu)
    Replace inheritance with delegation for #138
    Reenabled Scala
    Upgrade deps, improve snippets.
    Snippets no longer come out of order, but in the order they were executed. Closes #57. No more snippet dupes. Closes #55.
    Ensuring features are parsed before formatters are initialised. Closes #652
    Issue #2 Ensuring features are parsed before formatters are initialised
    Make it easier to correctly create RuntimeOptions from a String, ref #597.
    Dispose line filters when feature paths are clobbered
    
    Also dispose line filters when feature paths are clobbered with
    -Dcucumber.options.
    Override Cucumber Options via  or cucumber-jvm.properties as well as -Dcucumber.options
    Make it possible to clobber feature paths and glue with -Dcucumber.options
    Refactored --snippet option. Closes #561, #302
    Clarifying test intention
    https://github.com/cucumber/cucumber-jvm/pull/561#pullrequestreviewcomment-5321728
    Added snippet support to core
    Refactor RuntimeOptions towards somthing that can be extracted as an interface. That will make it easier to provide multiple implementations.
    JUnitFormatter marks skipped tests as failures in strict mode
    
    Let the option strict make JUnitFormatter to mark skipped tests as
    failures. Use a new interface StrictAware to determine which formatters
    the strict option should be passed to, following the example of the
    interface ColorAware determining which formatters the monochrome option
    is sent to.
    throw exception when unsupported options are passed
    
    when options starting with a dash are passed which aren't handled specifically, the usages are printed to system.out and an exception is thrown
    
    Issue #463
    Remove redundant Locale argument in a bunch of places. Some reformatting.
    Strip command line arguments in case people accidentally invoke  with arguments that have spaces left and right.
    Formatters can HTTP PUT to an URL
    Make tests slightly more readable. Follow coding conventions. Closes #379
    Replaced cucumber.options split on spaces with regex
    
    added a private method (cucumberOptionsSplit to RuntimeOptions to split
    on spaces or strings encased in single quotes.
    Some last minute fixes before the 1.1.0 release.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Allow overriding boolean flags with false
    Make cucumber.options append list values rather than clobbering. Scalar values are clobbered. Filters (--tags, --names, --lines) clobbers previous filters (treated like a scalar). See #388.
    Push options processing into `RuntimeOptions`.
    
    This logic was originally implemented in the junit module, but to extend this
    behaviour to CLI, these changes are now pushed down into `RuntimeOptions`.
    fixed paramter order expected/actual
    refs #233 run features/scenarios by name
    added --name argument to specify a pattern to match a scenario or feature name
    Options (Command line or ) can be overriden with the  system property.
    Issue #196 strict in cucumber-jvm
    Help text for CLI. Closes #142.
    Get gluePath from runtimeOptions
    Ease RuntimeOptions into the Runtime API
    WIP for #160
    Added test for optional regex capture group handling. Corrected behaviour of JdkPatternArgumentMatcher to pass null for Argument offset rather than -1 for omitted optional parameter.
    Issue #466
    Upgrade to Gherkin 2.10.0
    Making the test happy
    Moved stuff around
    Abstract backend test
    Move shit around
    New cuke4duke.methodFormat system property that can be used for more control of how stepdef location is reported. Closes #48.
    Improved UTF-8
    Improved Transformer API
    Refactored the StepDefinition interface so that backends for dynamic languages can infer the type of a parameter based on the actual argument type passed to it.
    Added a timeout argument to Utils - prepping for #343
    Removed duplication. Better reflection error reporting across the board.
    Workaround for arity mismatch on Groovy. Need an explicitly empty list of closure parameters. Closes #297.
    Added Gosu support.
    
    Squashed commit of the following:
    
    commit 677ec0244cf33e40f5159250095112ac5622eb25
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 19:49:44 2014 +0000
    
        Use gosu jars from repo
    
    commit f35d0f7ad1737d126310beaf9a19ceae0a1a5cff
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 19:43:26 2014 +0000
    
        Added gosu snippets
    
    commit b8cfce6019bb12d701cd68235cd9420d07b9e991
    Merge: 5c90a6b 7e1d02f
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 16:05:32 2014 +0000
    
        Merge branch 'master' into gosu
    
    commit 5c90a6bce2f09788ed99a8e6546c1d1f03774230
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Wed Mar 12 17:01:49 2014 +0000
    
        Better Gosu
    
    commit 998b787c30e7263a63c755c6b3b668a71b358a23
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Fri Mar 7 23:06:43 2014 +0000
    
        Remove dead code
    
    commit 927bc45a977b7681be644f6f1276231be5e49998
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 10:16:13 2014 +0000
    
        For now, define the DSL alongside the stepdef
    
    commit 237f71beee6440f9f2f9f64b2d08998064e635b9
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 10:03:09 2014 +0000
    
        Try to define a DSL
    
    commit 1e3df07a25ef8009684431e78c33751c4db28136
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 09:52:50 2014 +0000
    
        Use Gosu Programs instead of classes. Need to figure out how to define Given.
    
    commit c9bd0adb5cceffdea6fe2d9e9feba8b8763472a1
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 00:28:06 2014 +0000
    
        Clean up a little
    
    commit 4b34b5b8bda1aca6149894cae8d9587446e1ba9a
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Wed Mar 5 23:30:59 2014 +0000
    
        Started experimental work on gosu module
    Drive-by cleanup
    Move helpers from CucumberPrettyFormatterTest to TestHelper
    
    Move helpers from CucumberPrettyFormatterTest to TestHelper, and
    refactor to make the helper share implementation in TestHelper.
    Fix errors in the RerunFormatter, move its testing to core
    
    Fix the rerun formatters handling of failures in background,
    scenario outline examples and hooks in the RerunFormatter.
    Move all testing of the RerunFormatter to core.
    Add failing tests to disclose issues with the RerunFormatter
    
    Add failing tests for the handling of failures in background,
    scenario outline examples and hooks in the RerunFormatter.
    Move helpers to test formatters to TestHelper.
    Add a test case for the PrettyFormatter
    
    Add a test case for the PrettyFormatter to verify that the pretty
    formatter aligns the location strings correct, when a scenario is
    executed with Cucumber-JVM.
    Add tests for the JUnitFormatter to disclose issues
    
    The main issue is that the JUnitFormatter does not handle failures
    in the before and after hooks properly. To add flexibility the tests
    also specify that the JUnitFormatter should handle both all-steps-first
    execution and one-step-at-the-time execution.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Tell, don't ask. And some formatting.
    Scala fixes for Windows. #139
    Rewrote a lot of the resource loading code
    Fix compilation of Scala module and example.
    More work on background
    Formatters can HTTP PUT to an URL
    Build passes with cucumber-deps
    Build passes with cucumber-deps
    Step definitions and hooks can now specify a timeout (milliseconds) after which a  is thrown if the stepdef/hook has not completed. Closes #343
    Simplified test
    Added a timeout argument to Utils - prepping for #343
    Fix several problems with resource loading for scripting languages (after the new classpath: scheme was introduced)
    Fixed some regressions to glue code introduced in 1.0.2. Might fix issue #299, but that's not confirmed.
    Don't convert paths to package names - instead throw an exception. This helps people avoid mistakes.
    Optimise imports
    Mostly finished CLI refactoring
    Made is isInstantiable smarter by checking inner classes properly
    Rewrote a lot of the resource loading code
    Allow top level classes. Closes #62.
    Ensuring features are parsed before formatters are initialised. Closes #652
    Issue #2 Ensuring features are parsed before formatters are initialised
    Drive-by cleanup
     is deprecated in favour of . Closes #549
    Attribution. Fix broken test. Closes #568
    #568 Inherit Information of @Cucumber.Options
    
    inherit information of cucumber.options from superclass to subclass
     * add additional information of multioptions like formatters
     * override single-options like monochrome
    Refactored --snippet option. Closes #561, #302
    Code review fixes
    Added snippet support to java and junit
    Refactor RuntimeOptions towards somthing that can be extracted as an interface. That will make it easier to provide multiple implementations.
    Formatters can HTTP PUT to an URL
    Added . Closes #418
    Moved the JUnit package and configured API docs
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Push options processing into `RuntimeOptions`.
    
    This logic was originally implemented in the junit module, but to extend this
    behaviour to CLI, these changes are now pushed down into `RuntimeOptions`.
    Ensure glue and feature path if system properties don't set them.
    
    When setting the "cucumber.options" system property, all the cucumber options
    are overridden, including glue and feature path.  This is an issue for junit
    for two reasons:
    
    - This is against the logic currently present in RuntimeOptionsFactory which
      sets glue and feature path to default values based on the JUnit test case
      if they are not set by @Cucumber.Options.
    - This makes the definition of cucumber.options in a Maven pom file awkward,
      as you have to re-define glue and feature path as a system property, even if
      you have correctly defined the path to the resource folder containing
      feature files.
    Run scenarios/features by name. Closes #233, #323
    refs #233 run features/scenarios by name
    added --name argument to specify a pattern to match a scenario or feature name
    Fix several problems with resource loading for scripting languages (after the new classpath: scheme was introduced)
    removed author tag
    Issue #196 mark steps and scenarios as failed when there are pending/undefined steps and --strict is enabled
    test thread safety of StopWatch.
    Make it easier to correctly create RuntimeOptions from a String, ref #597.
    Override Cucumber Options via  or cucumber-jvm.properties as well as -Dcucumber.options
    Add RuntimeOptions.isMonochrome(), rm Runtime factory methods
    
    Add RuntimeOptions.isMonochorme(), since commit 65f3bd6 on the master
    branch change RuntimeOptions to have private fields and getters.
    
    Basically revert commit c8feb10. Since the new android support on the
    master banch sends backends to the Runtime constructor, which
    previously only was done in tests, the change to use factory methods in
    Runtime no longer make sence.
    Minimize the number of constructors in the Runtime class
    
    To minimize the number of constructors in the Runtime class, and to
    handle that by default a UndefinedStepTracker is created and then
    injected both into the Runtime and the RuntimeGlue, create a factory
    method as the main entry. Expose additional conveniece factory methods
    for testing in the core module in RuntimeTest.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Options (Command line or ) can be overriden with the  system property.
    Mostly finished CLI refactoring
    Get gluePath from runtimeOptions
    Get dryRun from runtimeOptions
    Ease RuntimeOptions into the Runtime API
    Pass in ClassLoader from the outside. This is necessary in order to construct a working Runtime from a different environment, like Jython. See #151
    Removed OneTimeResourceLoader and made sure glue code is loaded only once. The Backend.loadGlue method should ideally be removed, and the World and gluePaths passed to each Backend's constructor. Other TODOs on this branch: rename World to Glue. RuntimeGlue should not have a ref back to Runtime. Make Scala work again (disabled it because I don't have the required Scala fu)
    Added a junit test for the HTML formatter
    Load resoureces from classpath when using JUnit, load them from filesystem when using CLI
    Rewrote a lot of the resource loading code
    First shot at implementing --dry-run
    First shot at implementing --dry-run
    gluePath is the best name I have come up with for 'class path or script path where stepdefs and hooks live'
    Optimize imports, reformat
    Fix a test
    More work on background
    Report summaries and  in the same way as the CLI
    Use only jdk1.6 compliant constructs in the tests
    Print summary at the end of the run
    
    Print the same kind of summary at the end of the run as Cucumber-Ruby:
    x Scenarios (x1 failed, x2 skipped, x3 pending, x4 undefined, x5 passed)
    y Steps (y1 failed, y2 skipped, y3 pending, y4 undefined, y5 passed)
    XmY.YYYs
    
    The new class SummaryCounter is used by the Runtime class to collect the
    data for the summary. The SummaryPrinter then let the SummaryCounter
    print the summary before the errors and the snippets. The printout from
    the SummaryPrinter is moved to after the printout from the formatters to
    make the summary printed after the progress or pretty printout.
    Format and delimiter annotations enhancement - same as for Transformer
    Transformer annotation enhancement - now it can be use to annotate other annotations
    Remove redundant Locale argument in a bunch of places. Some reformatting.
    Implemented  and . See #433
    Improved Transformer API
    Various changes needed to improve the formatting API
    Removed duplication. Better reflection error reporting across the board.
    Clean up method formatting
    Moved stuff around
    If you write code that forces me to check your exceptions, then I will rip off your head and piss in your dead skull.
    Much more modular
    Move shit around
    Use MethodFormat in cucumber
    New cuke4duke.methodFormat system property that can be used for more control of how stepdef location is reported. Closes #48.
    Added another shellwords test
    Factor shellwords out to separate class, ref #597
    Dominic: expose scenario name as part of cucumber.api.Scenario
    Make it easier to correctly create RuntimeOptions from a String, ref #597.
    Override Cucumber Options via  or cucumber-jvm.properties as well as -Dcucumber.options
    Add RuntimeOptions.isMonochrome(), rm Runtime factory methods
    
    Add RuntimeOptions.isMonochorme(), since commit 65f3bd6 on the master
    branch change RuntimeOptions to have private fields and getters.
    
    Basically revert commit c8feb10. Since the new android support on the
    master banch sends backends to the Runtime constructor, which
    previously only was done in tests, the change to use factory methods in
    Runtime no longer make sence.
    Minimize the number of constructors in the Runtime class
    
    To minimize the number of constructors in the Runtime class, and to
    handle that by default a UndefinedStepTracker is created and then
    injected both into the Runtime and the RuntimeGlue, create a factory
    method as the main entry. Expose additional conveniece factory methods
    for testing in the core module in RuntimeTest.
    Add Scenario.source_tag_names to work with Capybara. Closes #504.
    Custom Formatter/Reporter's  and  hook weren't run.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Options (Command line or ) can be overriden with the  system property.
    Optimise imports
    Mostly finished CLI refactoring
    Get gluePath from runtimeOptions
    Get dryRun from runtimeOptions
    Ease RuntimeOptions into the Runtime API
    Fix tagged hooks for scenario outlines. Closes #209, closes #210
    Pass in ClassLoader from the outside. This is necessary in order to construct a working Runtime from a different environment, like Jython. See #151
    UndefinedStepsTracker receives backends in getSnippets instead of ctor - this reduces coupling. Throw exception if there are no Backends. This might be the fix for #146
    Tell, don't ask. And some formatting.
    Refactor stuff in Glue into Runtime
    
    It should go further than that and have some kind of runtime state machine that has
    access to the right bits and is either factoried, or created per each scenario.
    rename world to glue
    Massive Refactor pulling world out to a higher level.
    
    It's still loading resources multiple times, but all but one of the existing tests
    pass. I'll have to rewrite how that test works, and it's ignored right now
    Rewrote a lot of the resource loading code
    JUnit behaves better when a Before hook fails. Closes #106
    Better hooks
    Scenario Outlines and Background are roughly working
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    Hooks can receive results. Closes #27.
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    execution order of Hooks can be controlled in Java
    Scenario Outlines: Replace tokens in the names of the generated "Example Scenario"s.
    Optimise imports
    Mostly finished CLI refactoring
    Rewrote a lot of the resource loading code
    Changes for gherkin 2.6.0. Will merge to master when gherkin has synced to maven central.
    Correctly substitute DocStrings and DataTables in Scenario Outline steps. Closes #75.
    Aviod passing null, improve message when missing feature path
    
    Overload CucumberFeature.load to avoid passing null and the need for
    null check. Improve the log message when no feature path is given at
    the command line.
    Return exit code 0 when no features are found
    
    Return exit code 0 when no features are found, or if no found features
    match the tags filter used. Print the same message, that is used in the
    currently thrown CucumberException when this occurs, as information
    before the summary printout.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Reformat code, shuffle things around a little. Closes #207, #214.
    Better error message when filters are too strict. Closes #245.
    Fail if no features are found. Closes #163
    Optimise imports
    Mostly finished CLI refactoring
    Fix tagged hooks for scenario outlines. Closes #209, closes #210
    Rewrote a lot of the resource loading code
    Changes for gherkin 2.6.0. Will merge to master when gherkin has synced to maven central.
    Scenario Outlines and Background are roughly working
    Format and delimiter annotations enhancement - same as for Transformer
    Format and delimiter annotations enhancement - same as for Transformer
    Format and delimiter annotations enhancement - same as for Transformer
    Transformer annotation enhancement - now it can be use to annotate other annotations
    Moved the JUnit package and configured API docs
    Improved Transformer API
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    Update examples to use Transform
    Docs
    Build passes with cucumber-deps
    Pass a SingleValueConverter to ParameterType
    Docs
    Build passes with cucumber-deps
    Pass a SingleValueConverter to ParameterType
    Improved Transformer API
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    Add support for List step definition parameters
    Build passes with cucumber-deps
    Build passes with cucumber-deps
    List legal enum values if conversion fails. Closes #344
    Always explicitly use a Locale
    Remove forced UTC timezone
    Empty strings from matched steps and table cells are converted to . This means boxed types must be used if you intend to have empty strings.
    Add support for enums in stepdefs
    Allow null to be passed to stepdefs with optional capture groups. Closes #90.
    Slightly better error message. Made sure the test can actually fail.
    Removed "date" in error message of ConverterWithFormat
    Updated date test to use UTC in test data.
    
    Since cucumber uses UTC itself, and the tests were using
    the system timezone, the date tests failed when running under
    a different timezone.
    Implement Table.asList(Class itemType). Clean up imports
    All building/passing except scala
    Renames. Register the rest of our locale-aware converters
    Factored out one more field.
    Removed some extra fields
    ConvertersTest refactoring
    Repeating parts have been factored out
    Various changes needed to improve the formatting API
    Improved Transformer API
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    Build passes with cucumber-deps
    Improved transforms
    Build passes with cucumber-deps
    Improved transforms
    Ability to create  objects from a List of objects while specifying what header columns (fields) to use
    Use I18n instead of Locale since converting from Locale to I18n is tricky.
    Pass in ClassLoader from the outside. This is necessary in order to construct a working Runtime from a different environment, like Jython. See #151
    Implement Table.asList(Class itemType). Clean up imports
    All building/passing except scala
    Renames. Register the rest of our locale-aware converters
    Using XStream to convert primitives as well as objects
    Made the transformer API use String... varargs and improved JavaMethodTransformer to take advantage of it.
    Renames and simplifications in transformers package
    Refactored SnippetGenerator.
    
    There was too much parallel effort in the CamelCase and Underscore
    implementations, so the new structure shares most of the logic
    and implements the different logic in a Concatenator.
    
    I also made sure IntelliJ doesn't break because of the new
    scenario lifecycle methods in the gherkin formatter interface.
    Upgrade deps, improve snippets.
    Some renames and comments
    Simplified improved snippet code, removed hamcrest (not a huge fan).
    Refactored SnippetGenerator.
    
    There was too much parallel effort in the CamelCase and Underscore
    implementations, so the new structure shares most of the logic
    and implements the different logic in a Concatenator.
    
    I also made sure IntelliJ doesn't break because of the new
    scenario lifecycle methods in the gherkin formatter interface.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Test for proof of concept
    * Cosmetic tweaks
    * Removed hard-coded dependency on ZipResourceIteratorFactory in
    ClasspathIterable
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Remove unused code
    Various changes needed to improve the formatting API
    JDK7 fixes
    Formatters can HTTP PUT to an URL
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Tighten test
    Added cobertura code coverage and started to clean up some cruftiness in the io package
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Fix Scala build. Closes #167.
    Fixed windows path logic - need to verify on POSIX
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Test for proof of concept
    * Cosmetic tweaks
    * Removed hard-coded dependency on ZipResourceIteratorFactory in
    ClasspathIterable
    [JRuby]  and  can be set in env var, system property or  resource bundle.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    style violation!
    * URL-decoding for test dir because this test will fail if you're on
    Windows and your source code sits in a directory with spaces
    Pass in ClassLoader from the outside. This is necessary in order to construct a working Runtime from a different environment, like Jython. See #151
    Release 1.0.0.RC4
    Load resoureces from classpath when using JUnit, load them from filesystem when using CLI
    Rewrote a lot of the resource loading code
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Build passes with cucumber-deps
    Build passes with cucumber-deps
    fixing up tests, and removing windows assumption
    Changing getPath to use path
    Make it easier to correctly create RuntimeOptions from a String, ref #597.
    Add failing tests to disclose issues with the RerunFormatter
    
    Add failing tests for the handling of failures in background,
    scenario outline examples and hooks in the RerunFormatter.
    Move helpers to test formatters to TestHelper.
    Refactored SnippetGenerator.
    
    There was too much parallel effort in the CamelCase and Underscore
    implementations, so the new structure shares most of the logic
    and implements the different logic in a Concatenator.
    
    I also made sure IntelliJ doesn't break because of the new
    scenario lifecycle methods in the gherkin formatter interface.
    Override Cucumber Options via  or cucumber-jvm.properties as well as -Dcucumber.options
    Use StopWatch.Stub in the test of JUnitFormatter
    
    Use StopWatch.Stub in JUnitFormatterTest to control the duration of
    steps and hooks. Take advantage of this to let two more test cases use
    feature execution instead of calling the formatter interface directly.
    Refactored --snippet option. Closes #561, #302
    Add a dummy test case in JUnit report if no features are found
    
    Jenkins will mark a job as failed even though the exit code was 0, if
    the JUnit report file contains no testcase elements. Therefore add a
    dummy testcase element to the JUnit report, when no features are found,
    or no found features match the tags filter used.
    Add tests for the JUnitFormatter to disclose issues
    
    The main issue is that the JUnitFormatter does not handle failures
    in the before and after hooks properly. To add flexibility the tests
    also specify that the JUnitFormatter should handle both all-steps-first
    execution and one-step-at-the-time execution.
    Various changes needed to improve the formatting API
    Add RuntimeOptions.isMonochrome(), rm Runtime factory methods
    
    Add RuntimeOptions.isMonochorme(), since commit 65f3bd6 on the master
    branch change RuntimeOptions to have private fields and getters.
    
    Basically revert commit c8feb10. Since the new android support on the
    master banch sends backends to the Runtime constructor, which
    previously only was done in tests, the change to use factory methods in
    Runtime no longer make sence.
    Minimize the number of constructors in the Runtime class
    
    To minimize the number of constructors in the Runtime class, and to
    handle that by default a UndefinedStepTracker is created and then
    injected both into the Runtime and the RuntimeGlue, create a factory
    method as the main entry. Expose additional conveniece factory methods
    for testing in the core module in RuntimeTest.
    JUnitFormatter marks skipped tests as failures in strict mode
    
    Let the option strict make JUnitFormatter to mark skipped tests as
    failures. Use a new interface StrictAware to determine which formatters
    the strict option should be passed to, following the example of the
    interface ColorAware determining which formatters the monochrome option
    is sent to.
    Remove redundant Locale argument in a bunch of places. Some reformatting.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Options (Command line or ) can be overriden with the  system property.
    UTF-8 everywhere. Closes #251
    Optimise imports
    Mostly finished CLI refactoring
    Get gluePath from runtimeOptions
    Get dryRun from runtimeOptions
    Ease RuntimeOptions into the Runtime API
    Renamed UnitFormatter to JUnitFormatter. Made some minor changes and deleted unused xsd. Can be added back later.
    Fixed some bugs. Moved from FileWriter to File in UnitFormatter
    UnitFormatter bug fixing #1
    Adding Unit formatter
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Mostly finished CLI refactoring
    Fix errors in the RerunFormatter, move its testing to core
    
    Fix the rerun formatters handling of failures in background,
    scenario outline examples and hooks in the RerunFormatter.
    Move all testing of the RerunFormatter to core.
    Add failing tests to disclose issues with the RerunFormatter
    
    Add failing tests for the handling of failures in background,
    scenario outline examples and hooks in the RerunFormatter.
    Move helpers to test formatters to TestHelper.
    Reenable test that was disabled for no obvious reason (it's passing)
    Make it easier to correctly create RuntimeOptions from a String, ref #597.
    Refactored SnippetGenerator.
    
    There was too much parallel effort in the CamelCase and Underscore
    implementations, so the new structure shares most of the logic
    and implements the different logic in a Concatenator.
    
    I also made sure IntelliJ doesn't break because of the new
    scenario lifecycle methods in the gherkin formatter interface.
    fixed broken test
    Override Cucumber Options via  or cucumber-jvm.properties as well as -Dcucumber.options
    Refactored --snippet option. Closes #561, #302
    Use uri instead of path in CucumberFeature
    
    On Windows paths use '\' as separator, but uri:s use '/'. On other
    platforms both paths and uri:s use '/' as separator. Make sure that
    paths are converted to uri:s when CucumberFeatures are created.
    Add RuntimeOptions.isMonochrome(), rm Runtime factory methods
    
    Add RuntimeOptions.isMonochorme(), since commit 65f3bd6 on the master
    branch change RuntimeOptions to have private fields and getters.
    
    Basically revert commit c8feb10. Since the new android support on the
    master banch sends backends to the Runtime constructor, which
    previously only was done in tests, the change to use factory methods in
    Runtime no longer make sence.
    Minimize the number of constructors in the Runtime class
    
    To minimize the number of constructors in the Runtime class, and to
    handle that by default a UndefinedStepTracker is created and then
    injected both into the Runtime and the RuntimeGlue, create a factory
    method as the main entry. Expose additional conveniece factory methods
    for testing in the core module in RuntimeTest.
    Remove warnings and deprecated code
    Remove redundant Locale argument in a bunch of places. Some reformatting.
    Adjusting test to show array out of bounds exception
    Fix for Windows OS
    Fixed imports
    Fixed formatting
    Fixed use of formatter to list all step results in JSON output
    Output embedded text in HTML report
    
    The formatter in cucumber-html already supports embedding content
    with mime-types starting with "text/" into the HTML report -
    this just makes cucumber-jvm not swallow the text content before
    it gets that far.
    JDK7 fixes
    Formatters can HTTP PUT to an URL
    Fix embedding in HTML reports. Closes #412.
    HTMLFormatter improvements. Closes #375, #404, #283
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Optimise imports
    Mostly finished CLI refactoring
    Get gluePath from runtimeOptions
    Get dryRun from runtimeOptions
    Ease RuntimeOptions into the Runtime API
    Improved HTMLFormatter tests
    Fail if no features are found. Closes #163
    HTML formatter produces empty report if no features run. Closes #191
    Properly flush and close formatters. Closes #173
    Pass in ClassLoader from the outside. This is necessary in order to construct a working Runtime from a different environment, like Jython. See #151
    Removed OneTimeResourceLoader and made sure glue code is loaded only once. The Backend.loadGlue method should ideally be removed, and the World and gluePaths passed to each Backend's constructor. Other TODOs on this branch: rename World to Glue. RuntimeGlue should not have a ref back to Runtime. Make Scala work again (disabled it because I don't have the required Scala fu)
    Added a junit test for the HTML formatter
    Add a test case for the PrettyFormatter
    
    Add a test case for the PrettyFormatter to verify that the pretty
    formatter aligns the location strings correct, when a scenario is
    executed with Cucumber-JVM.
    Add tests for the JUnitFormatter to disclose issues
    
    The main issue is that the JUnitFormatter does not handle failures
    in the before and after hooks properly. To add flexibility the tests
    also specify that the JUnitFormatter should handle both all-steps-first
    execution and one-step-at-the-time execution.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Reformat code, shuffle things around a little. Closes #207, #214.
    ignore failed and skipped steps
    retrieve stepname from match instead of a stepStack
     * added steplocation to report
     * added stepDefinition (pattern)
     * grouped steps under stepdefinitions
    removed unnecessary space (keyword already contains a space)
    Issue #270 output in json
    Added Keyword for Output
    Issue #207 UsageFormatter
    Formatters can HTTP PUT to an URL
    refs cucumber/cucumber-jvm#304
    Some last minute fixes before the 1.1.0 release.
    Write all report files as UTF8. Closes #402.
    Fixed a bug where  would fail with the JUnit runner.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Renamed FormatterConverter to FormatterFacotry and added some more unit tests to illustrate usage.
    Mostly finished CLI refactoring
    Renamed UnitFormatter to JUnitFormatter. Made some minor changes and deleted unused xsd. Can be added back later.
    Fixed some bugs. Moved from FileWriter to File in UnitFormatter
    Issue #207 UsageFormatter
    Properly flush and close formatters. Closes #173
    Improved the way formatters are created - less reliance on obscure system properties.
    Optimize imports, reformat
    Adding support for custom formatters.
    See #33.
    Make it easier to correctly create RuntimeOptions from a String, ref #597.
    Move helpers from CucumberPrettyFormatterTest to TestHelper
    
    Move helpers from CucumberPrettyFormatterTest to TestHelper, and
    refactor to make the helper share implementation in TestHelper.
    Override Cucumber Options via  or cucumber-jvm.properties as well as -Dcucumber.options
    Add a test case for the PrettyFormatter
    
    Add a test case for the PrettyFormatter to verify that the pretty
    formatter aligns the location strings correct, when a scenario is
    executed with Cucumber-JVM.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Reformat code, shuffle things around a little. Closes #207, #214.
    added stub implementation for new formatter methods
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Build passes with cucumber-deps
    Build passes with cucumber-deps
    Renamed FormatterConverter to FormatterFacotry and added some more unit tests to illustrate usage.
    Upgrade to Gherkin 2.10.0
    Fixing implementation errors regarding newer version of gherkin
    Optimise imports
    Mostly finished CLI refactoring
    Properly flush and close formatters. Closes #173
    Improved the way formatters are created - less reliance on obscure system properties.
    Fix compilation of Scala module and example.
    Optimize imports, reformat
    Adding support for custom formatters.
    See #33.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Reformat code, shuffle things around a little. Closes #207, #214.
    Added Gosu support.
    
    Squashed commit of the following:
    
    commit 677ec0244cf33e40f5159250095112ac5622eb25
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 19:49:44 2014 +0000
    
        Use gosu jars from repo
    
    commit f35d0f7ad1737d126310beaf9a19ceae0a1a5cff
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 19:43:26 2014 +0000
    
        Added gosu snippets
    
    commit b8cfce6019bb12d701cd68235cd9420d07b9e991
    Merge: 5c90a6b 7e1d02f
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 16:05:32 2014 +0000
    
        Merge branch 'master' into gosu
    
    commit 5c90a6bce2f09788ed99a8e6546c1d1f03774230
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Wed Mar 12 17:01:49 2014 +0000
    
        Better Gosu
    
    commit 998b787c30e7263a63c755c6b3b668a71b358a23
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Fri Mar 7 23:06:43 2014 +0000
    
        Remove dead code
    
    commit 927bc45a977b7681be644f6f1276231be5e49998
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 10:16:13 2014 +0000
    
        For now, define the DSL alongside the stepdef
    
    commit 237f71beee6440f9f2f9f64b2d08998064e635b9
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 10:03:09 2014 +0000
    
        Try to define a DSL
    
    commit 1e3df07a25ef8009684431e78c33751c4db28136
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 09:52:50 2014 +0000
    
        Use Gosu Programs instead of classes. Need to figure out how to define Given.
    
    commit c9bd0adb5cceffdea6fe2d9e9feba8b8763472a1
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 00:28:06 2014 +0000
    
        Clean up a little
    
    commit 4b34b5b8bda1aca6149894cae8d9587446e1ba9a
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Wed Mar 5 23:30:59 2014 +0000
    
        Started experimental work on gosu module
    Simplify Table conversion. Fix broken build.
    
    Squashed commit of the following:
    
    commit 4c357d2fb77d48565985b83a5f5e0d6d1cf58daf
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 23:22:39 2014 +0000
    
        Simplify code by replacing DataTable.flatten with DataTable.asList(String.class)
    
    commit 9c031dabe06813151609d5368f58d062384dc704
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 22:38:09 2014 +0000
    
        Added tests
    
    commit a6c89feb369937149cd19b03737b1d3666b1ecd2
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 21:56:40 2014 +0000
    
        Simplify table conversion
    
    commit 5896c7010ecb2aa67bb8bbc08d4047ac5bd4250a
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 21:32:27 2014 +0000
    
        Table conversion refactoring
    
    commit c2f1d3ef2190b98c43222dcc37d9ce934ad43f3c
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 13 20:39:00 2014 +0000
    
        Simplify table conversion
    Improved Transformer API
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Build passes with cucumber-deps
    Build passes with cucumber-deps
    Reduce visibility in order to improve cohesiveness and reduce API
    Refactored the StepDefinition interface so that backends for dynamic languages can infer the type of a parameter based on the actual argument type passed to it.
    Show code source for Java step definitions in case of duplicates or ambiguous stepdefs.
    Use I18n instead of Locale since converting from Locale to I18n is tricky.
    Properly flush and close formatters. Closes #173
    Scala fixes for Windows. #139
    Refactoring out the Reporter from the step call
    
    Created a new method, runUnreportedStep, that simply grabs the step out of a match,
    throwing an exception if it does not match, and executes it.
    
    All the exceptions are required to trickle up so that they're caught by the step that
    does the actual execution so that things look right in the output.
    
    A snippit will be generated if you call a non existing step, so that's handy :)
    Revert "Bring the URI forward to the step evaluation too."
    
    This reverts commit 1851bfe0c56c8abd223ad25a57988c76d0c66396.
    Bring the URI forward to the step evaluation too.
    
    This doesn't smell right, there must be something I'm doing entirely wrong.
    Refactor to change the execut method to include Reporter and Locale
    Rewrote a lot of the resource loading code
    Generate Cukepatch-compliant JSON
    Tagged (scoped) step definitions are reverted. Bad idea.
    Step Deinitions can be scoped by tag (just like hooks). Currently only implemented for Java.
    Better metadata
    Refactoring to capture more info about types
    Fix broken conversion of table to List<Map<String,String>>. Addresses @nightscape's comment in #49.
    Optimize imports, reformat
    Added docs about metadata generator
    Started on code completion
    Added accessors to TableDiffException. Closes #384.
    Fix diff when there are delta spanning multiple lines
    Fix diff when there are delta spanning multiple lines
    Don't use deprecated methods
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Attribution. Fix formatting.
    TableDiff with list of pojos: camelcase convert of column names to field
    names
    Ability to create  objects from a List of objects while specifying what header columns (fields) to use
    No infinite loop/OutOfMemoryException in diffs.
    Formatting
    Less retatrded exception handling
    Throw exceptions, don't return them.
    Use \n everywhere
    Improved table diffing
    Add the diff to the exception when 2 tables are different. Closes #18.
    More sensible API for tables of single values
    Diff a table with a List of Objects. Closes #52.
    Make more of cucumber-features pass. Rename Table to DataTable. #45.
    Use raw() instead of rows(). Added a couple of TODOs for Tables.
    Removed headers from test tables so we don't give the impression that they are needed.
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    Modified TableDifferTest to be line separator neutral.  Java takes care
    that for us; so we should be neutral in this regard unless we are
    specifically testing line termination differences when producing
    feature files on one OS and using it on another OS.
    
    Also tightened up the reporting produced via maven builds as specified
    in the pom.xml.
    Misc small refactorings
    Upgraded to gherkin 2.4.15, which considerably simplifies diffing logic.
    Implementing Diff between two tables.
    Simplify Table conversion. Fix broken build.
    
    Squashed commit of the following:
    
    commit 4c357d2fb77d48565985b83a5f5e0d6d1cf58daf
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 23:22:39 2014 +0000
    
        Simplify code by replacing DataTable.flatten with DataTable.asList(String.class)
    
    commit 9c031dabe06813151609d5368f58d062384dc704
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 22:38:09 2014 +0000
    
        Added tests
    
    commit a6c89feb369937149cd19b03737b1d3666b1ecd2
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 21:56:40 2014 +0000
    
        Simplify table conversion
    
    commit 5896c7010ecb2aa67bb8bbc08d4047ac5bd4250a
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 21:32:27 2014 +0000
    
        Table conversion refactoring
    
    commit c2f1d3ef2190b98c43222dcc37d9ce934ad43f3c
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 13 20:39:00 2014 +0000
    
        Simplify table conversion
    custom enum converters do not fully support mixed case enum members when they start with lower case letter. Testing this case to avoid regression when switching to localized enum convertor.
    reproducing issue with skipped enum value
    Correct error message on XStreams failure due repeated column. fixes #657
    Remove redundant Locale argument in a bunch of places. Some reformatting.
    Implement DataTable.toTable(List<Map<String,Object>>). Closes #433.
    Can convert List<Object[]> to DataTable
    Improved Transformer API
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    List<JavaBean> can be converted to a table again. This change sort of breaks #320 - converting a list of beans/pojos with null fields to a table will require explicit listing of fields. Closes #335.
    Ability to create  objects from a List of objects while specifying what header columns (fields) to use
    Bugfix for Tables with empty cells make the column disappear. Closes #320
    Add unit test showing the table issue when handling nulls
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    More friendly errors for xstream problems
    Friendlier error message when XStream fails conversion. Closes #296
    Make it easier to create a DataTable
    Improved Calendar support for tables
    Support for java.util.Calendar arguments in stepdefs
    Package XStream and diffutils inside core. Closes #179.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Make more of cucumber-features pass. Rename Table to DataTable. #45.
    Moved table conversion logic from java to core
    Improve readability
    Adding a header mapper to transform headings to property names. Will be
    useful to create and populate Java Beans.
    Improved Transformer API
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    Ability to create  objects from a List of objects while specifying what header columns (fields) to use
    Upgrade to Gherkin 2.10.0
    Make it easier to create a DataTable
    Fixing implementation errors regarding newer version of gherkin
    Improved Calendar support for tables
    Use I18n instead of Locale since converting from Locale to I18n is tricky.
    Pass in ClassLoader from the outside. This is necessary in order to construct a working Runtime from a different environment, like Jython. See #151
    More sensible API for tables of single values
    Make more of cucumber-features pass. Rename Table to DataTable. #45.
    Changes for gherkin 2.6.0. Will merge to master when gherkin has synced to maven central.
    Use gherkin 2.4.18 from Maven Central
    Implement Table.asList(Class itemType). Clean up imports
    All building/passing except scala
    Upgraded to gherkin 2.4.15, which considerably simplifies diffing logic.
    Simplify Table conversion. Fix broken build.
    
    Squashed commit of the following:
    
    commit 4c357d2fb77d48565985b83a5f5e0d6d1cf58daf
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 23:22:39 2014 +0000
    
        Simplify code by replacing DataTable.flatten with DataTable.asList(String.class)
    
    commit 9c031dabe06813151609d5368f58d062384dc704
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 22:38:09 2014 +0000
    
        Added tests
    
    commit a6c89feb369937149cd19b03737b1d3666b1ecd2
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 21:56:40 2014 +0000
    
        Simplify table conversion
    
    commit 5896c7010ecb2aa67bb8bbc08d4047ac5bd4250a
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 21:32:27 2014 +0000
    
        Table conversion refactoring
    
    commit c2f1d3ef2190b98c43222dcc37d9ce934ad43f3c
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 13 20:39:00 2014 +0000
    
        Simplify table conversion
    reproducing issue with skipped enum value
    Turn a DataTable with 2 columns into a Map
    Improved Transformer API
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Be explicit about the locale to make sure this builds on a non-US machine
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    Build passes with cucumber-deps
    Build passes with cucumber-deps
    List<JavaBean> can be converted to a table again. This change sort of breaks #320 - converting a list of beans/pojos with null fields to a table will require explicit listing of fields. Closes #335.
    Added another test for beans
    Big refactoring in table conversion land
    Package XStream and diffutils inside core. Closes #179.
    Use I18n instead of Locale since converting from Locale to I18n is tricky.
    Pass in ClassLoader from the outside. This is necessary in order to construct a working Runtime from a different environment, like Jython. See #151
    Rewrote a lot of the resource loading code
    Less retatrded exception handling
    Improved table diffing
    Add the diff to the exception when 2 tables are different. Closes #18.
    Added support for primitive types in tables. Closes #87.
    Diff a table with a List of Objects. Closes #52.
    Don't lie
    Added an example to illustrate how to use a custom XStream Converter. Closes #61.
    Fix broken conversion of table to List<Map<String,String>>. Addresses @nightscape's comment in #49.
    Ability to create List of Map from Table. Closes #49.
    Convert tables to JavaBeans if the class is annotated with @XStreamConverter(JavaBeanConverter.class)
    All building/passing except scala
    Misc changes to bring in XStream to do some of the heavy object conversion lifting
    Simplify Table conversion. Fix broken build.
    
    Squashed commit of the following:
    
    commit 4c357d2fb77d48565985b83a5f5e0d6d1cf58daf
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 23:22:39 2014 +0000
    
        Simplify code by replacing DataTable.flatten with DataTable.asList(String.class)
    
    commit 9c031dabe06813151609d5368f58d062384dc704
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 22:38:09 2014 +0000
    
        Added tests
    
    commit a6c89feb369937149cd19b03737b1d3666b1ecd2
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 21:56:40 2014 +0000
    
        Simplify table conversion
    
    commit 5896c7010ecb2aa67bb8bbc08d4047ac5bd4250a
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 21:32:27 2014 +0000
    
        Table conversion refactoring
    
    commit c2f1d3ef2190b98c43222dcc37d9ce934ad43f3c
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 13 20:39:00 2014 +0000
    
        Simplify table conversion
    replaced tabs with spaces and removed unwanted method
    added @Transpose annotation processing
    Don't use deprecated methods
    Improved Transformer API
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    Build passes with cucumber-deps
    Pass a SingleValueConverter to ParameterType
    Improved transforms
    Build passes with cucumber-deps
    Pass a SingleValueConverter to ParameterType
    Improved transforms
    Big refactoring in table conversion land
    Remove forced UTC timezone
    Empty strings from matched steps and table cells are converted to . This means boxed types must be used if you intend to have empty strings.
    Show code source for Java step definitions in case of duplicates or ambiguous stepdefs.
    Workaround for arity mismatch on Groovy. Need an explicitly empty list of closure parameters. Closes #297.
    Made tests pass on jdk7 on Windows
    Optimise imports
    Mostly finished CLI refactoring
    Improved Calendar support for tables
    Package XStream and diffutils inside core. Closes #179.
    Use I18n instead of Locale since converting from Locale to I18n is tricky.
    Pass in ClassLoader from the outside. This is necessary in order to construct a working Runtime from a different environment, like Jython. See #151
    Tell, don't ask. And some formatting.
    Refactoring out the Reporter from the step call
    
    Created a new method, runUnreportedStep, that simply grabs the step out of a match,
    throwing an exception if it does not match, and executes it.
    
    All the exceptions are required to trickle up so that they're caught by the step that
    does the actual execution so that things look right in the output.
    
    A snippit will be generated if you call a non existing step, so that's handy :)
    Revert "Bring the URI forward to the step evaluation too."
    
    This reverts commit 1851bfe0c56c8abd223ad25a57988c76d0c66396.
    Bring the URI forward to the step evaluation too.
    
    This doesn't smell right, there must be something I'm doing entirely wrong.
    Refactor to change the execut method to include Reporter and Locale
    Improved table diffing
    More sensible API for tables of single values
    Added support for primitive types in tables. Closes #87.
    Tagged (scoped) step definitions are reverted. Bad idea.
    Step Deinitions can be scoped by tag (just like hooks). Currently only implemented for Java.
    @DateFormat can be specified for List<SomeClassWithDateField> table arguments. Closes #84.
    Make more of cucumber-features pass. Rename Table to DataTable. #45.
    Changes for gherkin 2.6.0. Will merge to master when gherkin has synced to maven central.
    Tighten up tests about lists of maps
    Fix broken conversion of table to List<Map<String,String>>. Addresses @nightscape's comment in #49.
    Add failing test for list of maps
    Upgrade gherkin dependency
    Convert tables to JavaBeans if the class is annotated with @XStreamConverter(JavaBeanConverter.class)
    Moved table conversion logic from java to core
    All building/passing except scala
    Renames. Register the rest of our locale-aware converters
    Using XStream to convert primitives as well as objects
    Misc changes to bring in XStream to do some of the heavy object conversion lifting
    Simplified table-to-list-of-object logic. Removed @JavaBeanClass - type erasure does not apply to method signatures, so the annotation is not needed. I don't think it's necessary (yet) to specify what class to use to instantiate objects - we only have one anyway. See email to list about XStream
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    Working on Issue #19
    Added the possibility to process tables.
    Added a @JavaBeanClass annotation to allow passing list of beans to
    Steps.
    Working on Issue #9
    Added the possibility to process tables.
    Added a @JavaBeanClass annotation to allow passing list of beans to
    Steps.
    Simplify Table conversion. Fix broken build.
    
    Squashed commit of the following:
    
    commit 4c357d2fb77d48565985b83a5f5e0d6d1cf58daf
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 23:22:39 2014 +0000
    
        Simplify code by replacing DataTable.flatten with DataTable.asList(String.class)
    
    commit 9c031dabe06813151609d5368f58d062384dc704
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 22:38:09 2014 +0000
    
        Added tests
    
    commit a6c89feb369937149cd19b03737b1d3666b1ecd2
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 21:56:40 2014 +0000
    
        Simplify table conversion
    
    commit 5896c7010ecb2aa67bb8bbc08d4047ac5bd4250a
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 21:32:27 2014 +0000
    
        Table conversion refactoring
    
    commit c2f1d3ef2190b98c43222dcc37d9ce934ad43f3c
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 13 20:39:00 2014 +0000
    
        Simplify table conversion
    Turn a DataTable with 2 columns into a Map
    added table verification: unbalanced tables reported as errors
    replaced tabs with spaces and removed unwanted method
    added transpose() method to DataTable
    Implemented  and . See #433
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Build passes with cucumber-deps
    Build passes with cucumber-deps
    Better JavaDoc for DataTable
    Ability to create  objects from a List of objects while specifying what header columns (fields) to use
    Make it easier to create a DataTable
    Improved Calendar support for tables
    Use I18n instead of Locale since converting from Locale to I18n is tricky.
    Pass in ClassLoader from the outside. This is necessary in order to construct a working Runtime from a different environment, like Jython. See #151
    Make more of cucumber-features pass. Rename Table to DataTable. #45.
    Changes for gherkin 2.6.0. Will merge to master when gherkin has synced to maven central.
    Implement Table.asList(Class itemType). Clean up imports
    All building/passing except scala
    Using XStream to convert primitives as well as objects
    Misc changes to bring in XStream to do some of the heavy object conversion lifting
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    Upgraded to gherkin 2.4.15, which considerably simplifies diffing logic.
    Implementing Diff between two tables.
    Make possible mapping transformers by column index
    Adding locale to Table.
    Create TableHeaderMapper interface to allow customization of Heading
    mapping.
    Revert "Merge remote-tracking branch 'origin-cedric-lamalle/tables'"
    
    This reverts commit 680423f00e878db8eaa1689598921e4133da4a5f, reversing
    changes made to e21aea9afff19914352993057334a5958e22410f.
    
    Undoing unnecessary merge of branch tables.
    Starting to implement Table diffs.
    Added header mapping to Table.
    Implementing more methods on Table.
    Starting to implement tables.
    Set up filtering on the cucumber-version.properties file
    and add it to the build process
    Make sure poms are published to local repo. You should probably delete rm -Rf ~/.m2/repository ~/.ivy2/cache - see #143 and #144.
    Publish local artifacts to local m2 repo so they can be picked up by Maven projects. Closes #143 Use userOrigin=true. Fixes #141.
    Release 1.0.0.RC4
    Simplify Table conversion. Fix broken build.
    
    Squashed commit of the following:
    
    commit 4c357d2fb77d48565985b83a5f5e0d6d1cf58daf
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 23:22:39 2014 +0000
    
        Simplify code by replacing DataTable.flatten with DataTable.asList(String.class)
    
    commit 9c031dabe06813151609d5368f58d062384dc704
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 22:38:09 2014 +0000
    
        Added tests
    
    commit a6c89feb369937149cd19b03737b1d3666b1ecd2
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 21:56:40 2014 +0000
    
        Simplify table conversion
    
    commit 5896c7010ecb2aa67bb8bbc08d4047ac5bd4250a
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 21:32:27 2014 +0000
    
        Table conversion refactoring
    
    commit c2f1d3ef2190b98c43222dcc37d9ce934ad43f3c
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 13 20:39:00 2014 +0000
    
        Simplify table conversion
    Refactored --snippet option. Closes #561, #302
    Added snippet support to core
    Various changes needed to improve the formatting API
    Formatters can HTTP PUT to an URL
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Allow overriding boolean flags with false
    Run scenarios/features by name. Closes #233, #323
    Added --monochrome flag, allowing monochrome output for certain formatters
    Help text for CLI. Closes #142.
    Clean imports
    Rename uri to featurePath, which is more explicit
    Report summaries and  in the same way as the CLI
    Remove redundant Locale argument in a bunch of places. Some reformatting.
    Formatters can HTTP PUT to an URL
    Exceptions thrown from a step definition are no longer wrapped in CucumberException.
    Fix tagged hooks for scenario outlines. Closes #209, closes #210
    Use I18n instead of Locale since converting from Locale to I18n is tricky.
    Tell, don't ask. And some formatting.
    Refactor stuff in Glue into Runtime
    
    It should go further than that and have some kind of runtime state machine that has
    access to the right bits and is either factoried, or created per each scenario.
    rename world to glue
    Massive Refactor pulling world out to a higher level.
    
    It's still loading resources multiple times, but all but one of the existing tests
    pass. I'll have to rewrite how that test works, and it's ignored right now
    adding the ability to call a step from another, and pass the table to it
    
    WHEE
    Make a more informative exception in case an undefined step is invoked from a stepdef
    Refactoring out the Reporter from the step call
    
    Created a new method, runUnreportedStep, that simply grabs the step out of a match,
    throwing an exception if it does not match, and executes it.
    
    All the exceptions are required to trickle up so that they're caught by the step that
    does the actual execution so that things look right in the output.
    
    A snippit will be generated if you call a non existing step, so that's handy :)
    Revert "Bring the URI forward to the step evaluation too."
    
    This reverts commit 1851bfe0c56c8abd223ad25a57988c76d0c66396.
    Bring the URI forward to the step evaluation too.
    
    This doesn't smell right, there must be something I'm doing entirely wrong.
    Refactor to change the execut method to include Reporter and Locale
    Rewrote a lot of the resource loading code
    More tweaks to make #106 work properly. The JUnit integration is more complicated and fragile than I like.
    Snippets no longer come out of order, but in the order they were executed. Closes #57. No more snippet dupes. Closes #55.
    All is green all is good.
    Less retatrded exception handling
    JUnit behaves better when a Before hook fails. Closes #106
    Throw exceptions, don't return them.
    Better hooks
    Tagged (scoped) step definitions are reverted. Bad idea.
    Step Deinitions can be scoped by tag (just like hooks). Currently only implemented for Java.
    Make more of cucumber-features pass. Rename Table to DataTable. #45.
    Print exceptions at the end of run (regardless of what formatter is used). Exit with non-0 exit status if there are errors. Closes #71
    Whitespace
    Fixing indentation problems
    First shot at implementing --dry-run
    Whitespace
    Fixing indentation problems
    First shot at implementing --dry-run
    Make Scenario Outlines pass from CLI. Fixes #66.
    Code completion metadata can now be generated from the CLI. Closes #26.
    gluePath is the best name I have come up with for 'class path or script path where stepdefs and hooks live'
    Some renames and comments
    Scenario Outlines and Background are roughly working
    Started on background
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    Make it hardert to do the wrong thing with ScenarioResult - it is an interface, so it cannot be instantiated.
    Hooks can receive results. Closes #27.
    gh23 Dispose of backends after all hooks have excuted
    execution order of Hooks can be controlled in Java
    Added tag support for tags. Closes #9. Closes #10.
    gh-9 Clean up tabs in last commit
    gh-9 Very basic Java implementation of hooks
    Misc small refactorings
    Ambiguous matches are now reported correctly. Snippets are printed from CLI.
    Take Locale from Gherkin feature instead of Step Definition. Make an outer Java class for each annotation - makes imports nicer (No more @EN.Given). Moved Java annotation code to java project.
    Started on a CLI as an alternative to JUnit. This is necessary for other JVM languages that don't use JUnit (Clojure for example). Currently using some of the JUnit classes - will decouple this later.
    Added DocString support
    All core cucumber-features are passing except one
    Upgrade to Gherkin 2.4.5
    Moved stuff around
    WIP - broke a lot of stuff
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Changes to work with gherkin's hook-reporting branch
    Fix tagged hooks for scenario outlines. Closes #209, closes #210
    Hooks can receive results. Closes #27.
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    execution order of Hooks can be controlled in Java
    Added tag support for tags. Closes #9. Closes #10.
    gh-9 Missing files ignored by git
    Refactoring for #525. WIP.
    Reduce visibility in order to improve cohesiveness and reduce API
    Removed duplication. Better reflection error reporting across the board.
    Clean up method formatting
    Moved stuff around
    Much more modular
    Abstract backend test
    Move shit around
    Use MethodFormat in cucumber
    Reformatted code with IntelliJ's default settings
    Added a new Ant task. Refactored Mojo to use Ant task.
    New cuke4duke.methodFormat system property that can be used for more control of how stepdef location is reported. Closes #48.
    Added test for optional regex capture group handling. Corrected behaviour of JdkPatternArgumentMatcher to pass null for Argument offset rather than -1 for omitted optional parameter.
    Issue #466
    Moved stuff around
    Move shit around
    New, better stepdef discovery through reflections
    Refactored SnippetGenerator.
    
    There was too much parallel effort in the CamelCase and Underscore
    implementations, so the new structure shares most of the logic
    and implements the different logic in a Concatenator.
    
    I also made sure IntelliJ doesn't break because of the new
    scenario lifecycle methods in the gherkin formatter interface.
    Refactored --snippet option. Closes #561, #302
    Added snippet support to core
    Always fire that a test has finished, even when it's ignored.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Issue #196 use undefinedStepTracker to detect undefined steps
    Use I18n instead of Locale since converting from Locale to I18n is tricky.
    Fixed issue #184 - i18n java snippets for undefined steps are always generated with @Given annotation
    UndefinedStepsTracker receives backends in getSnippets instead of ctor - this reduces coupling. Throw exception if there are no Backends. This might be the fix for #146
    Tell, don't ask. And some formatting.
    Snippets no longer come out of order, but in the order they were executed. Closes #57. No more snippet dupes. Closes #55.
    Simplify Table conversion. Fix broken build.
    
    Squashed commit of the following:
    
    commit 4c357d2fb77d48565985b83a5f5e0d6d1cf58daf
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 23:22:39 2014 +0000
    
        Simplify code by replacing DataTable.flatten with DataTable.asList(String.class)
    
    commit 9c031dabe06813151609d5368f58d062384dc704
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 22:38:09 2014 +0000
    
        Added tests
    
    commit a6c89feb369937149cd19b03737b1d3666b1ecd2
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 21:56:40 2014 +0000
    
        Simplify table conversion
    
    commit 5896c7010ecb2aa67bb8bbc08d4047ac5bd4250a
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 21:32:27 2014 +0000
    
        Table conversion refactoring
    
    commit c2f1d3ef2190b98c43222dcc37d9ce934ad43f3c
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 13 20:39:00 2014 +0000
    
        Simplify table conversion
    replaced tabs with spaces and removed unwanted method
    added @Transpose annotation processing
    Format and delimiter annotations enhancement - same as for Transformer
    Transformer annotation enhancement - now it can be use to annotate other annotations
    Fixed a bug where  annotations were ignored
    Variable rename
    Remove redundant Locale argument in a bunch of places. Some reformatting.
    Improved Transformer API
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Small simplification, fix new package
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    Add support for List step definition parameters
    Build passes with cucumber-deps
    Pass a SingleValueConverter to ParameterType
    Build passes with cucumber-deps
    Pass a SingleValueConverter to ParameterType
    Big refactoring in table conversion land
    Simplify
    Allow custom @XStreamConverter to be used on regular arguments - not just table arguments.
    Package XStream and diffutils inside core. Closes #179.
    More ivy
    @DateFormat can be specified for List<SomeClassWithDateField> table arguments. Closes #84.
    Date format can be specified with a @DateFormat annotation
    Refactoring to capture more info about types
    Factor shellwords out to separate class, ref #597
    Changing to strongly typed exceptions
    Simplify Table conversion. Fix broken build.
    
    Squashed commit of the following:
    
    commit 4c357d2fb77d48565985b83a5f5e0d6d1cf58daf
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 23:22:39 2014 +0000
    
        Simplify code by replacing DataTable.flatten with DataTable.asList(String.class)
    
    commit 9c031dabe06813151609d5368f58d062384dc704
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 22:38:09 2014 +0000
    
        Added tests
    
    commit a6c89feb369937149cd19b03737b1d3666b1ecd2
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 21:56:40 2014 +0000
    
        Simplify table conversion
    
    commit 5896c7010ecb2aa67bb8bbc08d4047ac5bd4250a
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 21:32:27 2014 +0000
    
        Table conversion refactoring
    
    commit c2f1d3ef2190b98c43222dcc37d9ce934ad43f3c
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 13 20:39:00 2014 +0000
    
        Simplify table conversion
    added @Transpose annotation processing
    Rename uri to featurePath, which is more explicit
    Remove redundant Locale argument in a bunch of places. Some reformatting.
    Improved Transformer API
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Add support for List step definition parameters
    Pass a SingleValueConverter to ParameterType
    Pass a SingleValueConverter to ParameterType
    Reduce visibility in order to improve cohesiveness and reduce API
    Refactored the StepDefinition interface so that backends for dynamic languages can infer the type of a parameter based on the actual argument type passed to it.
    Big refactoring in table conversion land
    Ability to create  objects from a List of objects while specifying what header columns (fields) to use
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Simplify
    Allow custom @XStreamConverter to be used on regular arguments - not just table arguments.
    Show code source for Java step definitions in case of duplicates or ambiguous stepdefs.
    Workaround for arity mismatch on Groovy. Need an explicitly empty list of closure parameters. Closes #297.
    Make it easier to create a DataTable
    Reformat code, shuffle things around a little. Closes #207, #214.
    Fixed StepDefinitionMatch to work with StepDefinitions that return null for getParameterTypes (e.g. ClojureStepDefinition)
    Add support for enums in stepdefs
    Improved Calendar support for tables
    retrieve stepname from match instead of a stepStack
    Support for java.util.Calendar arguments in stepdefs
    Stacktrace filtering filters away too much. Closes #228.
    Use I18n instead of Locale since converting from Locale to I18n is tricky.
    Clojure fixes. Closes #134.
    Formatting
    first pass at clojure native backend
    Make a more informative exception in case an undefined step is invoked from a stepdef
    Refactoring out the Reporter from the step call
    
    Created a new method, runUnreportedStep, that simply grabs the step out of a match,
    throwing an exception if it does not match, and executes it.
    
    All the exceptions are required to trickle up so that they're caught by the step that
    does the actual execution so that things look right in the output.
    
    A snippit will be generated if you call a non existing step, so that's handy :)
    Revert "Bring the URI forward to the step evaluation too."
    
    This reverts commit 1851bfe0c56c8abd223ad25a57988c76d0c66396.
    Bring the URI forward to the step evaluation too.
    
    This doesn't smell right, there must be something I'm doing entirely wrong.
    Refactor to change the execut method to include Reporter and Locale
    More ivy
    Less retatrded exception handling
    Throw exceptions, don't return them.
    @DateFormat can be specified for List<SomeClassWithDateField> table arguments. Closes #84.
    Make more of cucumber-features pass. Rename Table to DataTable. #45.
    Date format can be specified with a @DateFormat annotation
    Refactoring to capture more info about types
    Fix broken conversion of table to List<Map<String,String>>. Addresses @nightscape's comment in #49.
    Optimize imports, reformat
    Scenario Outlines and Background are roughly working
    Bump to gherkin 2.5.1 - Omit step in Match JSON.
    Upgrade gherkin dependency
    Allow Regexp match arguments and Doc Strings/Data Tables to be used in the same step/stepdef. Fixes #47.
    Added a Clojure/Leiningen example. Closes #25.
    Implement Table.asList(Class itemType). Clean up imports
    Moved table conversion logic from java to core
    All building/passing except scala
    Renames. Register the rest of our locale-aware converters
    Using XStream to convert primitives as well as objects
    Misc changes to bring in XStream to do some of the heavy object conversion lifting
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    Working on Issue #19
    Added the possibility to process tables.
    Added a @JavaBeanClass annotation to allow passing list of beans to
    Steps.
    Working on Issue #9
    Added the possibility to process tables.
    Added a @JavaBeanClass annotation to allow passing list of beans to
    Steps.
    Ambiguous stepdefs are now reported with a step location format consistent with stack traces.
    Misc small refactorings
    Adding table creation in arguments transformation.
    Ambiguous matches are now reported correctly. Snippets are printed from CLI.
    Better CLI runner
    Take Locale from Gherkin feature instead of Step Definition. Make an outer Java class for each annotation - makes imports nicer (No more @EN.Given). Moved Java annotation code to java project.
    Made the transformer API use String... varargs and improved JavaMethodTransformer to take advantage of it.
    Renames and simplifications in transformers package
    Reformatted code and optimized imports with IntelliJ (default settings).
    Added DocString support
    Calculator Feature is now passing!
    Finished implementing default Transformables.
    Moved stuff around
    WIP - broke a lot of stuff
    JUnit integration getting there...
    Added snippet support for all languages.
    Closer to correct scenario outline implementation. Need to make sure it works with multiple Examples under one Scenario Outline.
    Improve test suite. New strategy for outline and background.
    Add duration
    If you write code that forces me to check your exceptions, then I will rip off your head and piss in your dead skull.
    Clojure is working again
    Now we can run Scenario Outlines
    Ioke passing
    Sort of got Rhino working
    Abstract backend test
    Better abstractions by bringing in Groovy
    Something that works better.
    Updated to latest Gherkin
    Reduce visibility in order to improve cohesiveness and reduce API
    Refactor stuff in Glue into Runtime
    
    It should go further than that and have some kind of runtime state machine that has
    access to the right bits and is either factoried, or created per each scenario.
    Make it easier to correctly create RuntimeOptions from a String, ref #597.
    Override Cucumber Options via  or cucumber-jvm.properties as well as -Dcucumber.options
     is deprecated in favour of . Closes #549
    Step Deinitions can be scoped by tag (just like hooks). Currently only implemented for Java.
    Ambiguous matches are now reported correctly. Snippets are printed from CLI.
    Reformatted code and optimized imports with IntelliJ (default settings).
    Adding JavaMethodTransform
    Moved stuff around
    Better abstractions by bringing in Groovy
    Updated to latest Gherkin
    Rename uri to featurePath, which is more explicit
    Report summaries and  in the same way as the CLI
    Aviod passing null, improve message when missing feature path
    
    Overload CucumberFeature.load to avoid passing null and the need for
    null check. Improve the log message when no feature path is given at
    the command line.
    Return exit code 0 when no features are found
    
    Return exit code 0 when no features are found, or if no found features
    match the tags filter used. Print the same message, that is used in the
    currently thrown CucumberException when this occurs, as information
    before the summary printout.
    Formatters can HTTP PUT to an URL
    Some last minute fixes before the 1.1.0 release.
    Write all report files as UTF8. Closes #402.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Optimise imports
    Mostly finished CLI refactoring
    Optimize imports, format code
    Detect duplicate step definitions. Closes #213.
    Use I18n instead of Locale since converting from Locale to I18n is tricky.
    Properly flush and close formatters. Closes #173
    Pass in ClassLoader from the outside. This is necessary in order to construct a working Runtime from a different environment, like Jython. See #151
    UndefinedStepsTracker receives backends in getSnippets instead of ctor - this reduces coupling. Throw exception if there are no Backends. This might be the fix for #146
    Tell, don't ask. And some formatting.
    Refactor stuff in Glue into Runtime
    
    It should go further than that and have some kind of runtime state machine that has
    access to the right bits and is either factoried, or created per each scenario.
    making notes and TODOs
    
    Not sure everything should go into runtime.
    
    It might be nice if we could put some of the logic that's repeatable into the Scenario Model itself
    so that it knows how to execute itself, using the Glue. Not sure. I looked at the Junit stuff and
    my brain started to melt, so I figured I will start at regular CLI runtime first, and then get the Junit stuff
    to behave.
    rename world to glue
    Removed OneTimeResourceLoader and made sure glue code is loaded only once. The Backend.loadGlue method should ideally be removed, and the World and gluePaths passed to each Backend's constructor. Other TODOs on this branch: rename World to Glue. RuntimeGlue should not have a ref back to Runtime. Make Scala work again (disabled it because I don't have the required Scala fu)
    this seems to complete the refactor
    
    There's probably much more that can be refactored to improve the calling mechanism
    
    World is created once in Runtime, and accessed from there
        runtime.getWorld();
    
    Oh yeah, need to unIgnore a test and fix it.
    Massive Refactor pulling world out to a higher level.
    
    It's still loading resources multiple times, but all but one of the existing tests
    pass. I'll have to rewrite how that test works, and it's ignored right now
    adding the ability to call a step from another, and pass the table to it
    
    WHEE
    Make a more informative exception in case an undefined step is invoked from a stepdef
    Rewrote a lot of the resource loading code
    More tweaks to make #106 work properly. The JUnit integration is more complicated and fragile than I like.
    Snippets no longer come out of order, but in the order they were executed. Closes #57. No more snippet dupes. Closes #55.
    All is green all is good.
    Less retatrded exception handling
    JUnit behaves better when a Before hook fails. Closes #106
    Throw exceptions, don't return them.
    Better hooks
    Tagged (scoped) step definitions are reverted. Bad idea.
    Step Deinitions can be scoped by tag (just like hooks). Currently only implemented for Java.
    Make more of cucumber-features pass. Rename Table to DataTable. #45.
    Print exceptions at the end of run (regardless of what formatter is used). Exit with non-0 exit status if there are errors. Closes #71
    Whitespace
    Fixing indentation problems
    First shot at implementing --dry-run
    Whitespace
    Fixing indentation problems
    First shot at implementing --dry-run
    Make Scenario Outlines pass from CLI. Fixes #66.
    Code completion metadata can now be generated from the CLI. Closes #26.
    gluePath is the best name I have come up with for 'class path or script path where stepdefs and hooks live'
    Some renames and comments
    Scenario Outlines and Background are roughly working
    Started on background
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    Make it hardert to do the wrong thing with ScenarioResult - it is an interface, so it cannot be instantiated.
    Hooks can receive results. Closes #27.
    gh23 Dispose of backends after all hooks have excuted
    execution order of Hooks can be controlled in Java
    Added tag support for tags. Closes #9. Closes #10.
    gh-9 Clean up tabs in last commit
    gh-9 Very basic Java implementation of hooks
    Misc small refactorings
    Ambiguous matches are now reported correctly. Snippets are printed from CLI.
    Take Locale from Gherkin feature instead of Step Definition. Make an outer Java class for each annotation - makes imports nicer (No more @EN.Given). Moved Java annotation code to java project.
    Started on a CLI as an alternative to JUnit. This is necessary for other JVM languages that don't use JUnit (Clojure for example). Currently using some of the JUnit classes - will decouple this later.
    Added DocString support
    All core cucumber-features are passing except one
    Upgrade to Gherkin 2.4.5
    Moved stuff around
    WIP - broke a lot of stuff
    Add default value to env
    Override Cucumber Options via  or cucumber-jvm.properties as well as -Dcucumber.options
    Simplify Env
    Simplify Env
    [JRuby]  and  can be set in env var, system property or  resource bundle.
    Drive-by cleanup
    make StopWatch thread safe.
    Dominic: expose scenario name as part of cucumber.api.Scenario
    Dominic: expose current (gherkin) scenario to step definition code via ThreadLocal
    Refactored SnippetGenerator.
    
    There was too much parallel effort in the CamelCase and Underscore
    implementations, so the new structure shares most of the logic
    and implements the different logic in a Concatenator.
    
    I also made sure IntelliJ doesn't break because of the new
    scenario lifecycle methods in the gherkin formatter interface.
    Rename uri to featurePath, which is more explicit
    Report summaries and  in the same way as the CLI
    Remove duplication in Reflections implementations.
    
    Renamed Reflections to ClassFinder and removed generic methods.
    Created a new Reflections class that delegates to a ClassFinder.
    Use StopWatch.Stub in the test of JUnitFormatter
    
    Use StopWatch.Stub in JUnitFormatterTest to control the duration of
    steps and hooks. Take advantage of this to let two more test cases use
    feature execution instead of calling the formatter interface directly.
    Refactored --snippet option. Closes #561, #302
    Added snippet support to core
    Make it possible to inject a glue when creating a Runtime
    
    To aid testing, make it possible to inject a glue when creating a
    Runtime. Also add a test specify that a CucumberException is thrown
    if no backends are found (or an emtpy collection of backends is
    injected).
    Add RuntimeOptions.isMonochrome(), rm Runtime factory methods
    
    Add RuntimeOptions.isMonochorme(), since commit 65f3bd6 on the master
    branch change RuntimeOptions to have private fields and getters.
    
    Basically revert commit c8feb10. Since the new android support on the
    master banch sends backends to the Runtime constructor, which
    previously only was done in tests, the change to use factory methods in
    Runtime no longer make sence.
    Refactor RuntimeOptions towards somthing that can be extracted as an interface. That will make it easier to provide multiple implementations.
    Localise the UndefinedStepTracker in the Runtime
    
    Localise the UndefinedStepTracker in the Runtime and remove that
    argument from the constructor. Use that the optionalGlue argument is
    null, as the cue to let the Runtime create the default RuntimeGlue.
    When the optionalGlue argument is not null, the glue injected with that
    argument will be used by the Runtime.
    Refactoring for #525. WIP.
    Minimize the number of constructors in the Runtime class
    
    To minimize the number of constructors in the Runtime class, and to
    handle that by default a UndefinedStepTracker is created and then
    injected both into the Runtime and the RuntimeGlue, create a factory
    method as the main entry. Expose additional conveniece factory methods
    for testing in the core module in RuntimeTest.
    Tell don't ask when printing summary at the end of the run
    
    Let the SummaryPrinter tell the Runtime to print the summary instead of
    asking for the SummaryCounter.
    
    Put back the check for an emtpy list of backends in the Runtime ctor,
    which was removed by mistake. Add test to check that a CucumberException
    is thrown when the list of backends is emtpy.
    
    Use Long for duration arguments in SummaryCounter, to conform to the
    return type of Result.getDuration().
    Print summary at the end of the run
    
    Print the same kind of summary at the end of the run as Cucumber-Ruby:
    x Scenarios (x1 failed, x2 skipped, x3 pending, x4 undefined, x5 passed)
    y Steps (y1 failed, y2 skipped, y3 pending, y4 undefined, y5 passed)
    XmY.YYYs
    
    The new class SummaryCounter is used by the Runtime class to collect the
    data for the summary. The SummaryPrinter then let the SummaryCounter
    print the summary before the errors and the snippets. The printout from
    the SummaryPrinter is moved to after the printout from the formatters to
    make the summary printed after the progress or pretty printout.
    Add Scenario.source_tag_names to work with Capybara. Closes #504.
    JUnit: Better check to see if an exception is pending
    JUnit: Better check to see if an exception is pending
    Custom Formatter/Reporter's  and  hook weren't run.
    adding check for dry-run option back
    
    reverted initial commit to get rid of test changes, which were included
    accidentally
    Revert "checking for dry run option before running hooks."
    
    This reverts commit a5ace1a63daa44f04dcaad0f0cbdfa28be124545.
    checking for dry run option before running hooks.
    
    make sure that dryRun has not been set before running hooks.
    Deprecated  in favour of .
    Use of @Pending annotation
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    JUnit assume failures behaves just like pending. Closes #359.
    Reduce visibility in order to improve cohesiveness and reduce API
    Changes to work with gherkin's hook-reporting branch
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Use a classpath: prefix if you want to load resources (features and stepdef scripts) from the classpath and not the file system. Should be a transparent change for JUnit users. See #312
    This makes the build fail as it should now, yay!
    Adding this bit of a change ensures that the scenario fails.
    
    My maven build still returns a succesful build though. That doesn't seem right.
    Issue #196 process pending steps correctly
    Issue #196 use undefinedStepTracker to detect undefined steps
    Issue #196 strict in cucumber-jvm
    Implementing the changes to the Gherkin stuff.
    
    It's reporting the appropriate exceptions now, not failures in the
    formatters.
    Throw PendingException from clojure snippets. See #271.
    Optimise imports
    Mostly finished CLI refactoring
    Get gluePath from runtimeOptions
    Get dryRun from runtimeOptions
    Ease RuntimeOptions into the Runtime API
    Embed text and images in reports. Closes #205.
    Fix tagged hooks for scenario outlines. Closes #209, closes #210
    Ambiguous step definitions don't cause Cucumber to blow up, they just fail the step. Fixed #206, but broke the native groovy CLI runner, which I had to disable - see #212
    Use I18n instead of Locale since converting from Locale to I18n is tricky.
    Bugfix: Fixed Scenario Outlines for CLI. Closes #170
    Tagged hooks are executed properly. Closes #146.
    GluePath can be a package name or a path - both are accepted. Closes #164
    Pass in ClassLoader from the outside. This is necessary in order to construct a working Runtime from a different environment, like Jython. See #151
    Renames
    UndefinedStepsTracker receives backends in getSnippets instead of ctor - this reduces coupling. Throw exception if there are no Backends. This might be the fix for #146
    Tell, don't ask. And some formatting.
    Created an UnreportedStepExecutor interface
    
    I don't like that this current implementation passes the Runtime into the backends
    It shouldn't. So I used the interface, so hopefully at some point, refactoring in the
    future won't suck.
    
    It passes all unit tests.
    Reset all the things in the state machine
    Reset Step Skipping
    Refactor stuff in Glue into Runtime
    
    It should go further than that and have some kind of runtime state machine that has
    access to the right bits and is either factoried, or created per each scenario.
    making notes and TODOs
    
    Not sure everything should go into runtime.
    
    It might be nice if we could put some of the logic that's repeatable into the Scenario Model itself
    so that it knows how to execute itself, using the Glue. Not sure. I looked at the Junit stuff and
    my brain started to melt, so I figured I will start at regular CLI runtime first, and then get the Junit stuff
    to behave.
    rename world to glue
    Removed OneTimeResourceLoader and made sure glue code is loaded only once. The Backend.loadGlue method should ideally be removed, and the World and gluePaths passed to each Backend's constructor. Other TODOs on this branch: rename World to Glue. RuntimeGlue should not have a ref back to Runtime. Make Scala work again (disabled it because I don't have the required Scala fu)
    should not allow setting of the world
    this seems to complete the refactor
    
    There's probably much more that can be refactored to improve the calling mechanism
    
    World is created once in Runtime, and accessed from there
        runtime.getWorld();
    
    Oh yeah, need to unIgnore a test and fix it.
    Massive Refactor pulling world out to a higher level.
    
    It's still loading resources multiple times, but all but one of the existing tests
    pass. I'll have to rewrite how that test works, and it's ignored right now
    Load resoureces from classpath when using JUnit, load them from filesystem when using CLI
    Rewrote a lot of the resource loading code
    Snippets no longer come out of order, but in the order they were executed. Closes #57. No more snippet dupes. Closes #55.
    Generate Cukepatch-compliant JSON
    Better hooks
    Tagged (scoped) step definitions are reverted. Bad idea.
    Step Deinitions can be scoped by tag (just like hooks). Currently only implemented for Java.
    Generate jsonp for metadata to make it easier to load with cross-site dynamic script tags
    @DateFormat can be specified for List<SomeClassWithDateField> table arguments. Closes #84.
    Print exceptions at the end of run (regardless of what formatter is used). Exit with non-0 exit status if there are errors. Closes #71
    Whitespace
    Fixing indentation problems
    First shot at implementing --dry-run
    Whitespace
    Fixing indentation problems
    First shot at implementing --dry-run
    Needs to signal EOF to the formatter. Otherwise formatters like JSONFormatter won't output anything
    Make Scenario Outlines pass from CLI. Fixes #66.
    Code completion metadata can now be generated from the CLI. Closes #26.
    gluePath is the best name I have come up with for 'class path or script path where stepdefs and hooks live'
    Added back codePaths that were temporarily disabled during Scenario Outline refactoring. Made html default CLI formatter since pretty is broken for scenario outline ATM.
    Some renames and comments
    Scenario Outlines and Background are roughly working
    More work on background
    Started on background
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    Pass several script paths/packages to the Backend constructors. (We can't have a backend per package/script path, because code in backend A would not be able to talk to code in backend B)
    Moved table conversion logic from java to core
    All building/passing except scala
    Renames. Register the rest of our locale-aware converters
    Using XStream to convert primitives as well as objects
    Added check for package name, so it doesn't fail so silently
    Fixes #31 support adding additional scan paths through @Feature.
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    Added tag support for tags. Closes #9. Closes #10.
    gh-9 Very basic Java implementation of hooks
    Ambiguous stepdefs are now reported with a step location format consistent with stack traces.
    Misc small refactorings
    Renamed packages. Started work on line support - needs more work.
    Ambiguous matches are now reported correctly. Snippets are printed from CLI.
    Renames and simplifications in transformers package
    All core cucumber-features are passing except one
    Calculator Feature is now passing!
    Our first cucumber-features scenario is passing.
    Moved stuff around
    WIP - broke a lot of stuff
    JUnit integration getting there...
    Dominic: expose scenario name as part of cucumber.api.Scenario
    Print summary at the end of the run
    
    Print the same kind of summary at the end of the run as Cucumber-Ruby:
    x Scenarios (x1 failed, x2 skipped, x3 pending, x4 undefined, x5 passed)
    y Steps (y1 failed, y2 skipped, y3 pending, y4 undefined, y5 passed)
    XmY.YYYs
    
    The new class SummaryCounter is used by the Runtime class to collect the
    data for the summary. The SummaryPrinter then let the SummaryCounter
    print the summary before the errors and the snippets. The printout from
    the SummaryPrinter is moved to after the printout from the formatters to
    make the summary printed after the progress or pretty printout.
    Add Scenario.source_tag_names to work with Capybara. Closes #504.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    Embed text and images in reports. Closes #205.
    Make it hardert to do the wrong thing with ScenarioResult - it is an interface, so it cannot be instantiated.
    Hooks can receive results. Closes #27.
    Reduce visibility in order to improve cohesiveness and reduce API
    Make a more informative exception in case an undefined step is invoked from a stepdef
    Show code source for Java step definitions in case of duplicates or ambiguous stepdefs.
    Detect duplicate step definitions. Closes #213.
    Improved Transformer API
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Refactored the StepDefinition interface so that backends for dynamic languages can infer the type of a parameter based on the actual argument type passed to it.
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Show code source for Java step definitions in case of duplicates or ambiguous stepdefs.
    Use I18n instead of Locale since converting from Locale to I18n is tricky.
    Tell, don't ask. And some formatting.
    Refactoring out the Reporter from the step call
    
    Created a new method, runUnreportedStep, that simply grabs the step out of a match,
    throwing an exception if it does not match, and executes it.
    
    All the exceptions are required to trickle up so that they're caught by the step that
    does the actual execution so that things look right in the output.
    
    A snippit will be generated if you call a non existing step, so that's handy :)
    Revert "Bring the URI forward to the step evaluation too."
    
    This reverts commit 1851bfe0c56c8abd223ad25a57988c76d0c66396.
    Bring the URI forward to the step evaluation too.
    
    This doesn't smell right, there must be something I'm doing entirely wrong.
    Refactor to change the execut method to include Reporter and Locale
    Less retatrded exception handling
    Tagged (scoped) step definitions are reverted. Bad idea.
    Step Deinitions can be scoped by tag (just like hooks). Currently only implemented for Java.
    @DateFormat can be specified for List<SomeClassWithDateField> table arguments. Closes #84.
    Refactoring to capture more info about types
    Fix broken conversion of table to List<Map<String,String>>. Addresses @nightscape's comment in #49.
    Implement Table.asList(Class itemType). Clean up imports
    Moved table conversion logic from java to core
    All building/passing except scala
    Misc changes to bring in XStream to do some of the heavy object conversion lifting
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    Working on Issue #19
    Added the possibility to process tables.
    Added a @JavaBeanClass annotation to allow passing list of beans to
    Steps.
    Working on Issue #9
    Added the possibility to process tables.
    Added a @JavaBeanClass annotation to allow passing list of beans to
    Steps.
    Ambiguous matches are now reported correctly. Snippets are printed from CLI.
    Take Locale from Gherkin feature instead of Step Definition. Make an outer Java class for each annotation - makes imports nicer (No more @EN.Given). Moved Java annotation code to java project.
    Reformatted code and optimized imports with IntelliJ (default settings).
    Adding locale in StepDefinition in order to transform arguments. It
    would be better to have locale set on an higher level, for instance
    Feature.
    Moved stuff around
    WIP - broke a lot of stuff
    If you write code that forces me to check your exceptions, then I will rip off your head and piss in your dead skull.
    Now we can run Scenario Outlines
    Ioke passing
    Sort of got Rhino working
    Abstract backend test
    Better abstractions by bringing in Groovy
    Something that works better.
    Updated to latest Gherkin
    Factor out method lookup to sepearate object
    Move shit around
    New, better stepdef discovery through reflections
    Optimize imports
    Use a proper StackTraceElement for the last frame containing (failing) step location.
    Get trace
    A pretty decent start at a pure Java Cucumber. Also a good start for a new Ruby implementation.
    Refactored SnippetGenerator.
    
    There was too much parallel effort in the CamelCase and Underscore
    implementations, so the new structure shares most of the logic
    and implements the different logic in a Concatenator.
    
    I also made sure IntelliJ doesn't break because of the new
    scenario lifecycle methods in the gherkin formatter interface.
    Refactored --snippet option. Closes #561, #302
    Reduce visibility in order to improve cohesiveness and reduce API
    Created an UnreportedStepExecutor interface
    
    I don't like that this current implementation passes the Runtime into the backends
    It shouldn't. So I used the interface, so hopefully at some point, refactoring in the
    future won't suck.
    
    It passes all unit tests.
    rename world to glue
    Removed OneTimeResourceLoader and made sure glue code is loaded only once. The Backend.loadGlue method should ideally be removed, and the World and gluePaths passed to each Backend's constructor. Other TODOs on this branch: rename World to Glue. RuntimeGlue should not have a ref back to Runtime. Make Scala work again (disabled it because I don't have the required Scala fu)
    Rewrote a lot of the resource loading code
    gluePath is the best name I have come up with for 'class path or script path where stepdefs and hooks live'
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    gh-9 Very basic Java implementation of hooks
    Moved stuff around
    WIP - broke a lot of stuff
    JUnit integration getting there...
    More on snippets
    Added a java-specific TCK to test various DI containers
    Sort of got Rhino working
    Make sure every scenario gets new state
    Move shit around
    New, better stepdef discovery through reflections
    Simplify Table conversion. Fix broken build.
    
    Squashed commit of the following:
    
    commit 4c357d2fb77d48565985b83a5f5e0d6d1cf58daf
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 23:22:39 2014 +0000
    
        Simplify code by replacing DataTable.flatten with DataTable.asList(String.class)
    
    commit 9c031dabe06813151609d5368f58d062384dc704
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 22:38:09 2014 +0000
    
        Added tests
    
    commit a6c89feb369937149cd19b03737b1d3666b1ecd2
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 21:56:40 2014 +0000
    
        Simplify table conversion
    
    commit 5896c7010ecb2aa67bb8bbc08d4047ac5bd4250a
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 21:32:27 2014 +0000
    
        Table conversion refactoring
    
    commit c2f1d3ef2190b98c43222dcc37d9ce934ad43f3c
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 13 20:39:00 2014 +0000
    
        Simplify table conversion
    Turn a DataTable with 2 columns into a Map
    Timeout is a long, not int. Be explicit that it's millis.
    Remove duplication in Reflections implementations.
    
    Renamed Reflections to ClassFinder and removed generic methods.
    Created a new Reflections class that delegates to a ClassFinder.
    Various changes needed to improve the formatting API
    Formatters can HTTP PUT to an URL
    Some last minute fixes before the 1.1.0 release.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Big refactoring in table conversion land
    Step definitions and hooks can now specify a timeout (milliseconds) after which a  is thrown if the stepdef/hook has not completed. Closes #343
    Cancel timer if we complete before it's done.
    Added a timeout argument to Utils - prepping for #343
    Exceptions thrown from a step definition are no longer wrapped in CucumberException.
    Fixed regression: PendingException was causing steps to fail instead of pending. Closes #328
    Throw an exception if a glue or feature path doesn't exist (i.e. neither file nor directory)
    Fix several problems with resource loading for scripting languages (after the new classpath: scheme was introduced)
    Removed duplication. Better reflection error reporting across the board.
    Fixed some regressions to glue code introduced in 1.0.2. Might fix issue #299, but that's not confirmed.
    Don't convert paths to package names - instead throw an exception. This helps people avoid mistakes.
    Optimize imports, format code
    Embed text and images in reports. Closes #205.
    Made is isInstantiable smarter by checking inner classes properly
    GluePath can be a package name or a path - both are accepted. Closes #164
    #154, RunCukesTest.scala uses ScalaBackend.loadGlue which calls ClasspathResourceLoader().instantiateSubclasses which didn't check if the class had a valid constructor given the arguments. ScalaDslTest.scala holds multiple internal ScalaDsl instances which are compiled to classes implementing ScalaDsl but with no valid constructor. These were being picked up by the ClasspathResourceLoader causing the RunCukesTest to fail at load time
    Tell, don't ask. And some formatting.
    Rewrote a lot of the resource loading code
    Date format can be specified with a @DateFormat annotation
    Refactoring to capture more info about types
    Close stream. Remove dead code.
    No dependency to commons-io. Copied helper methods to cucumber.runtime.Utils.
    Close stream. Remove dead code.
    No dependency to commons-io. Copied helper methods to cucumber.runtime.Utils.
    Various cleanup
    Added JRuby support. Closes #3.
    Ambiguous matches are now reported correctly. Snippets are printed from CLI.
    Take Locale from Gherkin feature instead of Step Definition. Make an outer Java class for each annotation - makes imports nicer (No more @EN.Given). Moved Java annotation code to java project.
    move cuke4duke.internal.Utils to cucumber.runtime.Utils
    Reformatted code and optimized imports with IntelliJ (default settings).
    Adding JavaMethodTransform
    Moved stuff around
    Much more modular
    Something that works better.
    Move shit around
    Reformatted code with IntelliJ's default settings
    Locale-aware step definitions
    New cuke4duke.methodFormat system property that can be used for more control of how stepdef location is reported. Closes #48.
    Almost done refactoring to an AbstractStepDefinition - which will simplify detection of unmatched (unused) step definitions
    Almost a complete rewrite, leveraging Cucumber's new improved language support.
    Make it possible to clobber feature paths and glue with -Dcucumber.options
    Rewrote a lot of the resource loading code
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    Renamed packages. Started work on line support - needs more work.
    Report summaries and  in the same way as the CLI
    Tell don't ask when printing summary at the end of the run
    
    Let the SummaryPrinter tell the Runtime to print the summary instead of
    asking for the SummaryCounter.
    
    Put back the check for an emtpy list of backends in the Runtime ctor,
    which was removed by mistake. Add test to check that a CucumberException
    is thrown when the list of backends is emtpy.
    
    Use Long for duration arguments in SummaryCounter, to conform to the
    return type of Result.getDuration().
    Print summary at the end of the run
    
    Print the same kind of summary at the end of the run as Cucumber-Ruby:
    x Scenarios (x1 failed, x2 skipped, x3 pending, x4 undefined, x5 passed)
    y Steps (y1 failed, y2 skipped, y3 pending, y4 undefined, y5 passed)
    XmY.YYYs
    
    The new class SummaryCounter is used by the Runtime class to collect the
    data for the summary. The SummaryPrinter then let the SummaryCounter
    print the summary before the errors and the snippets. The printout from
    the SummaryPrinter is moved to after the printout from the formatters to
    make the summary printed after the progress or pretty printout.
    Tell, don't ask. And some formatting.
    Snippets no longer come out of order, but in the order they were executed. Closes #57. No more snippet dupes. Closes #55.
    Print exceptions at the end of run (regardless of what formatter is used). Exit with non-0 exit status if there are errors. Closes #71
    Rename uri to featurePath, which is more explicit
    Fix tagged hooks for scenario outlines. Closes #209, closes #210
    Use I18n instead of Locale since converting from Locale to I18n is tricky.
    Created an UnreportedStepExecutor interface
    
    I don't like that this current implementation passes the Runtime into the backends
    It shouldn't. So I used the interface, so hopefully at some point, refactoring in the
    future won't suck.
    
    It passes all unit tests.
    Changing to strongly typed exceptions
    Changes based on Aslak Hellesøy comments
    Remove duplication in Reflections implementations.
    
    Renamed Reflections to ClassFinder and removed generic methods.
    Created a new Reflections class that delegates to a ClassFinder.
    Report summaries and  in the same way as the CLI
    Tell don't ask when printing summary at the end of the run
    
    Let the SummaryPrinter tell the Runtime to print the summary instead of
    asking for the SummaryCounter.
    
    Put back the check for an emtpy list of backends in the Runtime ctor,
    which was removed by mistake. Add test to check that a CucumberException
    is thrown when the list of backends is emtpy.
    
    Use Long for duration arguments in SummaryCounter, to conform to the
    return type of Result.getDuration().
    Print summary at the end of the run
    
    Print the same kind of summary at the end of the run as Cucumber-Ruby:
    x Scenarios (x1 failed, x2 skipped, x3 pending, x4 undefined, x5 passed)
    y Steps (y1 failed, y2 skipped, y3 pending, y4 undefined, y5 passed)
    XmY.YYYs
    
    The new class SummaryCounter is used by the Runtime class to collect the
    data for the summary. The SummaryPrinter then let the SummaryCounter
    print the summary before the errors and the snippets. The printout from
    the SummaryPrinter is moved to after the printout from the formatters to
    make the summary printed after the progress or pretty printout.
    fix the thread leak in timeout class (https://github.com/cucumber/cucumber-jvm/issues/639)
    fix the thread leak in timeout class (https://github.com/cucumber/cucumber-jvm/issues/639)
    Timeout is a long, not int. Be explicit that it's millis.
    Always cancel timer when we're done, even if an exception is thrown. Closes #540
    Step definitions and hooks can now specify a timeout (milliseconds) after which a  is thrown if the stepdef/hook has not completed. Closes #343
    Remove duplication in Reflections implementations.
    
    Renamed Reflections to ClassFinder and removed generic methods.
    Created a new Reflections class that delegates to a ClassFinder.
    Ensuring features are parsed before formatters are initialised. Closes #652
    Issue #2 Ensuring features are parsed before formatters are initialised
    Factor shellwords out to separate class, ref #597
    Make it easier to correctly create RuntimeOptions from a String, ref #597.
    Dispose line filters when feature paths are clobbered
    
    Also dispose line filters when feature paths are clobbered with
    -Dcucumber.options.
    Override Cucumber Options via  or cucumber-jvm.properties as well as -Dcucumber.options
    Make it possible to clobber feature paths and glue with -Dcucumber.options
    Refactored --snippet option. Closes #561, #302
    Return exit code 0 when no features are found
    
    Return exit code 0 when no features are found, or if no found features
    match the tags filter used. Print the same message, that is used in the
    currently thrown CucumberException when this occurs, as information
    before the summary printout.
    Added snippet support to core
    Add RuntimeOptions.isMonochrome(), rm Runtime factory methods
    
    Add RuntimeOptions.isMonochorme(), since commit 65f3bd6 on the master
    branch change RuntimeOptions to have private fields and getters.
    
    Basically revert commit c8feb10. Since the new android support on the
    master banch sends backends to the Runtime constructor, which
    previously only was done in tests, the change to use factory methods in
    Runtime no longer make sence.
    Refactor RuntimeOptions towards somthing that can be extracted as an interface. That will make it easier to provide multiple implementations.
    JUnitFormatter marks skipped tests as failures in strict mode
    
    Let the option strict make JUnitFormatter to mark skipped tests as
    failures. Use a new interface StrictAware to determine which formatters
    the strict option should be passed to, following the example of the
    interface ColorAware determining which formatters the monochrome option
    is sent to.
    throw exception when unsupported options are passed
    
    when options starting with a dash are passed which aren't handled specifically, the usages are printed to system.out and an exception is thrown
    
    Issue #463
    Remove redundant Locale argument in a bunch of places. Some reformatting.
    Strip command line arguments in case people accidentally invoke  with arguments that have spaces left and right.
    Formatters can HTTP PUT to an URL
    Make tests slightly more readable. Follow coding conventions. Closes #379
    Replaced cucumber.options split on spaces with regex
    
    added a private method (cucumberOptionsSplit to RuntimeOptions to split
    on spaces or strings encased in single quotes.
    Fixed a bug where  would fail with the JUnit runner.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Allow overriding boolean flags with false
    Make cucumber.options append list values rather than clobbering. Scalar values are clobbered. Filters (--tags, --names, --lines) clobbers previous filters (treated like a scalar). See #388.
    Push options processing into `RuntimeOptions`.
    
    This logic was originally implemented in the junit module, but to extend this
    behaviour to CLI, these changes are now pushed down into `RuntimeOptions`.
    Reduce visibility in order to improve cohesiveness and reduce API
    Added a timeout argument to Utils - prepping for #343
    refs #233 run features/scenarios by name
    added --name argument to specify a pattern to match a scenario or feature name
    Options (Command line or ) can be overriden with the  system property.
    Renamed FormatterConverter to FormatterFacotry and added some more unit tests to illustrate usage.
    Relax type
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Removed duplication. Better reflection error reporting across the board.
    Ability to specify line numbers
    Issue #196 strict in cucumber-jvm
    Added --monochrome flag, allowing monochrome output for certain formatters
    Help text for CLI. Closes #142.
    Get rid of JCommander. Closes #266.
    Optimise imports
    Mostly finished CLI refactoring
    Ensure sensible defaults for junit
    Add dry run
    Get gluePath from runtimeOptions
    Ease RuntimeOptions into the Runtime API
    WIP for #160
    Changing to strongly typed exceptions
    Rename uri to featurePath, which is more explicit
    added stub implementation for new formatter methods
    Fix build problems on Windows
    
    Windows requires readers/writers to be closed before a file is deleted.
    Use URI instead of path in the parse failure error message to make the
    output identical, and the test pass, on all platforms.
    Use uri instead of path in CucumberFeature
    
    On Windows paths use '\' as separator, but uri:s use '/'. On other
    platforms both paths and uri:s use '/' as separator. Make sure that
    paths are converted to uri:s when CucumberFeatures are created.
    Improved error message when feature file has syntax errors
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Add support for non-UTF-8 encodings
    Reduce visibility in order to improve cohesiveness and reduce API
    Upgrade to Gherkin 2.10.0
    Fixing implementation errors regarding newer version of gherkin
    Ignore duplicate features instead of throwing exception. Closes #259.
    Optimise imports
    Mostly finished CLI refactoring
    Fix tagged hooks for scenario outlines. Closes #209, closes #210
    Fail if duplicate features are detected. Closes #165.
    Use I18n instead of Locale since converting from Locale to I18n is tricky.
    Properly flush and close formatters. Closes #173
    Rewrote a lot of the resource loading code
    Don't close streams we don't create, and only close them once. Closes #96. Closes #105.
    Changes for gherkin 2.6.0. Will merge to master when gherkin has synced to maven central.
    Scenario Outlines and Background are roughly working
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    Renamed packages. Started work on line support - needs more work.
    Added a --tags CLI option
    Added tags and lines attributes to @Feature, making it possible to run a single scenario (or just some)
    Better CLI runner
    Detect duplicate step definitions. Closes #213.
    Ambiguous step definitions don't cause Cucumber to blow up, they just fail the step. Fixed #206, but broke the native groovy CLI runner, which I had to disable - see #212
    Ambiguous stepdefs are now reported with a step location format consistent with stack traces.
    Misc small refactorings
    Ambiguous matches are now reported correctly. Snippets are printed from CLI.
    Rename uri to featurePath, which is more explicit
    Revert to all-steps-first scenario execution
    
    To fix the missmatch between the PrettyFormatter from the Gherkin
    library and Cucumber-JVM, by reverting the scenario execution to
    all-steps-first execution as in Cucumber-JVM 1.1.2. This is possible
    since the JSONFormatter in the Gherkin library in Gherkin 2.12.0
    supports all-steps-first execution.
    Remove redundant Locale argument in a bunch of places. Some reformatting.
    issue #322: fixed the lookup of the createSuiteDescription method in DescriptionFactory and made some classes Serializable
    Code formatting fixes
    Fixed use of formatter to list all step results in JSON output
    Reduce visibility in order to improve cohesiveness and reduce API
    Fix tagged hooks for scenario outlines. Closes #209, closes #210
    Use I18n instead of Locale since converting from Locale to I18n is tricky.
    Bugfix: Fixed Scenario Outlines for CLI. Closes #170
    Tagged hooks are executed properly. Closes #146.
    Refactor stuff in Glue into Runtime
    
    It should go further than that and have some kind of runtime state machine that has
    access to the right bits and is either factoried, or created per each scenario.
    rename world to glue
    Less retatrded exception handling
    JUnit behaves better when a Before hook fails. Closes #106
    Throw exceptions, don't return them.
    Scenario Outlines and Background are roughly working
    More work on background
    Started on background
    issue #322: fixed the lookup of the createSuiteDescription method in DescriptionFactory and made some classes Serializable
    Fix tagged hooks for scenario outlines. Closes #209, closes #210
    Changes for gherkin 2.6.0. Will merge to master when gherkin has synced to maven central.
    Correctly substitute DocStrings and DataTables in Scenario Outline steps. Closes #75.
    Make Scenario Outlines pass from CLI. Fixes #66.
    Optimize imports, reformat
    Scenario Outlines and Background are roughly working
    More work on background
    Started on background
    Updated to JUnit 4.11. Relates to #255. Might also relate to #322. IntelliJ IDEA reports features with Background and Scenario Outline incorrect.y. Might be the case on master too.
    Reduce visibility in order to improve cohesiveness and reduce API
    Fix tagged hooks for scenario outlines. Closes #209, closes #210
    Bugfix: Fixed Scenario Outlines for CLI. Closes #170
    Tagged hooks are executed properly. Closes #146.
    Tell, don't ask. And some formatting.
    Refactor stuff in Glue into Runtime
    
    It should go further than that and have some kind of runtime state machine that has
    access to the right bits and is either factoried, or created per each scenario.
    rename world to glue
    Massive Refactor pulling world out to a higher level.
    
    It's still loading resources multiple times, but all but one of the existing tests
    pass. I'll have to rewrite how that test works, and it's ignored right now
    Rewrote a lot of the resource loading code
    Step Deinitions can be scoped by tag (just like hooks). Currently only implemented for Java.
    gluePath is the best name I have come up with for 'class path or script path where stepdefs and hooks live'
    Added back codePaths that were temporarily disabled during Scenario Outline refactoring. Made html default CLI formatter since pretty is broken for scenario outline ATM.
    Some renames and comments
    Simplify junit runner by making it inherit from Suite
    Scenario Outlines and Background are roughly working
    Dominic: expose scenario name as part of cucumber.api.Scenario
    Dominic: expose current (gherkin) scenario to step definition code via ThreadLocal
    Refactored SnippetGenerator.
    
    There was too much parallel effort in the CamelCase and Underscore
    implementations, so the new structure shares most of the logic
    and implements the different logic in a Concatenator.
    
    I also made sure IntelliJ doesn't break because of the new
    scenario lifecycle methods in the gherkin formatter interface.
    added stub implementation for new formatter methods
    Revert to all-steps-first scenario execution
    
    To fix the missmatch between the PrettyFormatter from the Gherkin
    library and Cucumber-JVM, by reverting the scenario execution to
    all-steps-first execution as in Cucumber-JVM 1.1.2. This is possible
    since the JSONFormatter in the Gherkin library in Gherkin 2.12.0
    supports all-steps-first execution.
    Add Scenario.source_tag_names to work with Capybara. Closes #504.
    Fixed use of formatter to list all step results in JSON output
    Make sure Background steps are reported under the scenario they belong to. See #276
    Embed text and images in reports. Closes #205.
    Fix tagged hooks for scenario outlines. Closes #209, closes #210
    Bugfix: Fixed Scenario Outlines for CLI. Closes #170
    Tagged hooks are executed properly. Closes #146.
    Refactor stuff in Glue into Runtime
    
    It should go further than that and have some kind of runtime state machine that has
    access to the right bits and is either factoried, or created per each scenario.
    rename world to glue
    Massive Refactor pulling world out to a higher level.
    
    It's still loading resources multiple times, but all but one of the existing tests
    pass. I'll have to rewrite how that test works, and it's ignored right now
    Rewrote a lot of the resource loading code
    More tweaks to make #106 work properly. The JUnit integration is more complicated and fragile than I like.
    Less retatrded exception handling
    JUnit behaves better when a Before hook fails. Closes #106
    Throw exceptions, don't return them.
    Better hooks
    Step Deinitions can be scoped by tag (just like hooks). Currently only implemented for Java.
    Make Scenario Outlines pass from CLI. Fixes #66.
    gluePath is the best name I have come up with for 'class path or script path where stepdefs and hooks live'
    Added back codePaths that were temporarily disabled during Scenario Outline refactoring. Made html default CLI formatter since pretty is broken for scenario outline ATM.
    Some renames and comments
    Scenario Outlines and Background are roughly working
    More work on background
    Started on background
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    JUnit delegates events to a secondary reporter (for example pretty or HTML) so we can get nice reports also when running from JUnit. Needs more work. See new TODOs.
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    Added tag support for tags. Closes #9. Closes #10.
    gh-9 Clean up tabs in last commit
    gh-9 Very basic Java implementation of hooks
    Ambiguous matches are now reported correctly. Snippets are printed from CLI.
    Better CLI runner
    Reduce visibility in order to improve cohesiveness and reduce API
    Changes for gherkin 2.6.0. Will merge to master when gherkin has synced to maven central.
    Correctly substitute DocStrings and DataTables in Scenario Outline steps. Closes #75.
    Added explicit check for empty scenario outline example steps after tokenisation
    Scenario Outlines: Replace tokens in the names of the generated "Example Scenario"s.
    Revert to all-steps-first scenario execution
    
    To fix the missmatch between the PrettyFormatter from the Gherkin
    library and Cucumber-JVM, by reverting the scenario execution to
    all-steps-first execution as in Cucumber-JVM 1.1.2. This is possible
    since the JSONFormatter in the Gherkin library in Gherkin 2.12.0
    supports all-steps-first execution.
    Updated to JUnit 4.11. Relates to #255. Might also relate to #322. IntelliJ IDEA reports features with Background and Scenario Outline incorrect.y. Might be the case on master too.
    Fixed use of formatter to list all step results in JSON output
    Optimise imports
    Mostly finished CLI refactoring
    Fix tagged hooks for scenario outlines. Closes #209, closes #210
    Bugfix: Fixed Scenario Outlines for CLI. Closes #170
    Tagged hooks are executed properly. Closes #146.
    Tell, don't ask. And some formatting.
    Refactor stuff in Glue into Runtime
    
    It should go further than that and have some kind of runtime state machine that has
    access to the right bits and is either factoried, or created per each scenario.
    rename world to glue
    Massive Refactor pulling world out to a higher level.
    
    It's still loading resources multiple times, but all but one of the existing tests
    pass. I'll have to rewrite how that test works, and it's ignored right now
    Rewrote a lot of the resource loading code
    Fix for NPE in Pretty Formatter when running Scenario Outlines
    Step Deinitions can be scoped by tag (just like hooks). Currently only implemented for Java.
    @DateFormat can be specified for List<SomeClassWithDateField> table arguments. Closes #84.
    Changes for gherkin 2.6.0. Will merge to master when gherkin has synced to maven central.
    Correctly substitute DocStrings and DataTables in Scenario Outline steps. Closes #75.
    Make Scenario Outlines pass from CLI. Fixes #66.
    gluePath is the best name I have come up with for 'class path or script path where stepdefs and hooks live'
    Added back codePaths that were temporarily disabled during Scenario Outline refactoring. Made html default CLI formatter since pretty is broken for scenario outline ATM.
    Some renames and comments
    Simplify junit runner by making it inherit from Suite
    Scenario Outlines and Background are roughly working
    Rename uri to featurePath, which is more explicit
    Aviod passing null, improve message when missing feature path
    
    Overload CucumberFeature.load to avoid passing null and the need for
    null check. Improve the log message when no feature path is given at
    the command line.
    Return exit code 0 when no features are found
    
    Return exit code 0 when no features are found, or if no found features
    match the tags filter used. Print the same message, that is used in the
    currently thrown CucumberException when this occurs, as information
    before the summary printout.
    Updated to JUnit 4.11. Relates to #255. Might also relate to #322. IntelliJ IDEA reports features with Background and Scenario Outline incorrect.y. Might be the case on master too.
    issue #322: fixed the lookup of the createSuiteDescription method in DescriptionFactory and made some classes Serializable
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Reduce visibility in order to improve cohesiveness and reduce API
    Reformat code, shuffle things around a little. Closes #207, #214.
    Better error message when filters are too strict. Closes #245.
    Optimise imports
    Mostly finished CLI refactoring
    Removed byte order mark and fixed bad formatting. Closes #224
    Update formatting to match project requirements
    Remove unnecessary equals from compare based on comments from Pull Request #229
    Fix indeterministic file ordering by sorting features alphabetically based upon their uri
    Fix tagged hooks for scenario outlines. Closes #209, closes #210
    Fail if no features are found. Closes #163
    Use I18n instead of Locale since converting from Locale to I18n is tricky.
    Pass in ClassLoader from the outside. This is necessary in order to construct a working Runtime from a different environment, like Jython. See #151
    rename world to glue
    Massive Refactor pulling world out to a higher level.
    
    It's still loading resources multiple times, but all but one of the existing tests
    pass. I'll have to rewrite how that test works, and it's ignored right now
    Load resoureces from classpath when using JUnit, load them from filesystem when using CLI
    Rewrote a lot of the resource loading code
    Some renames and comments
    Scenario Outlines and Background are roughly working
    More work on background
    Started on background
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    JUnit delegates events to a secondary reporter (for example pretty or HTML) so we can get nice reports also when running from JUnit. Needs more work. See new TODOs.
    Ambiguous matches are now reported correctly. Snippets are printed from CLI.
    Better CLI runner
    Simplify Table conversion. Fix broken build.
    
    Squashed commit of the following:
    
    commit 4c357d2fb77d48565985b83a5f5e0d6d1cf58daf
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 23:22:39 2014 +0000
    
        Simplify code by replacing DataTable.flatten with DataTable.asList(String.class)
    
    commit 9c031dabe06813151609d5368f58d062384dc704
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 22:38:09 2014 +0000
    
        Added tests
    
    commit a6c89feb369937149cd19b03737b1d3666b1ecd2
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 21:56:40 2014 +0000
    
        Simplify table conversion
    
    commit 5896c7010ecb2aa67bb8bbc08d4047ac5bd4250a
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 21:32:27 2014 +0000
    
        Table conversion refactoring
    
    commit c2f1d3ef2190b98c43222dcc37d9ce934ad43f3c
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 13 20:39:00 2014 +0000
    
        Simplify table conversion
    introduced dynamic enum converter to create needed ConverterWithEnumFormat on the fly based on the type of expected/given object
    quick fix to table enum to null conversion issue by registering custom enum converter
    fixed the ConcurrentModificationException in LocalizedXStream
    Various changes needed to improve the formatting API
    Fixed compilation
    Fixing ConcurrentModificationException when running cucumber tests in parallel
    Remove redundant Locale argument in a bunch of places. Some reformatting.
    Improved Transformer API
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Clean up imports, update history
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    Build passes with cucumber-deps
    Improved transforms
    Build passes with cucumber-deps
    Improved transforms
    Reduce visibility in order to improve cohesiveness and reduce API
    Big refactoring in table conversion land
    Ability to create  objects from a List of objects while specifying what header columns (fields) to use
    Separate lookup and registry
    Optimise imports
    Mostly finished CLI refactoring
    Improved Calendar support for tables
    Support for java.util.Calendar arguments in stepdefs
    Use I18n instead of Locale since converting from Locale to I18n is tricky.
    Pass in ClassLoader from the outside. This is necessary in order to construct a working Runtime from a different environment, like Jython. See #151
    @DateFormat can be specified for List<SomeClassWithDateField> table arguments. Closes #84.
    Date format can be specified with a @DateFormat annotation
    Optimize imports, reformat
    Convert tables to JavaBeans if the class is annotated with @XStreamConverter(JavaBeanConverter.class)
    All building/passing except scala
    Renames. Register the rest of our locale-aware converters
    Using XStream to convert primitives as well as objects
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Allow null to be passed to stepdefs with optional capture groups. Closes #90.
    Renames. Register the rest of our locale-aware converters
    Using XStream to convert primitives as well as objects
    Renames and simplifications in transformers package
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    Build passes with cucumber-deps
    Build passes with cucumber-deps
    Reduce visibility in order to improve cohesiveness and reduce API
    @DateFormat can be specified for List<SomeClassWithDateField> table arguments. Closes #84.
    Various changes needed to improve the formatting API
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Add support for enums in stepdefs
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Allow null to be passed to stepdefs with optional capture groups. Closes #90.
    Renames. Register the rest of our locale-aware converters
    Using XStream to convert primitives as well as objects
    Renames and simplifications in transformers package
    introduced dynamic enum converter to create needed ConverterWithEnumFormat on the fly based on the type of expected/given object
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Allow null to be passed to stepdefs with optional capture groups. Closes #90.
    Renames. Register the rest of our locale-aware converters
    Using XStream to convert primitives as well as objects
    Renames and simplifications in transformers package
    Reformatted code and optimized imports with IntelliJ (default settings).
    Finished implementing default Transformables.
    TimeConverter used to use the SimpleDateFormat
    The last one is [not thread safe](http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html#synchronization).
    So, this commit returns a new SimpleDateFormat instance for every request.
    Remove redundant Locale argument in a bunch of places. Some reformatting.
    Improved Transformer API
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Reduce visibility in order to improve cohesiveness and reduce API
    List<JavaBean> can be converted to a table again. This change sort of breaks #320 - converting a list of beans/pojos with null fields to a table will require explicit listing of fields. Closes #335.
    Big refactoring in table conversion land
    Remove forced UTC timezone
    Optimise imports
    Mostly finished CLI refactoring
    Improved Calendar support for tables
    Support for java.util.Calendar arguments in stepdefs
    Tell, don't ask. And some formatting.
    @DateFormat can be specified for List<SomeClassWithDateField> table arguments. Closes #84.
    All building/passing except scala
    Renames. Register the rest of our locale-aware converters
    Using XStream to convert primitives as well as objects
    Renames and simplifications in transformers package
    Reformatted code and optimized imports with IntelliJ (default settings).
    Adding new Transformable
    Improved Transformer API
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Remove forced UTC timezone
    Support for java.util.Calendar arguments in stepdefs
    Implement DataTable.toTable(List<Map<String,Object>>). Closes #433.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Attribution. Fix formatting.
    TableDiff with list of pojos: camelcase convert of column names to field
    names
    Build passes with cucumber-deps
    Build passes with cucumber-deps
    List<JavaBean> can be converted to a table again. This change sort of breaks #320 - converting a list of beans/pojos with null fields to a table will require explicit listing of fields. Closes #335.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    Build passes with cucumber-deps
    Build passes with cucumber-deps
    List<JavaBean> can be converted to a table again. This change sort of breaks #320 - converting a list of beans/pojos with null fields to a table will require explicit listing of fields. Closes #335.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Allow null to be passed to stepdefs with optional capture groups. Closes #90.
    Renames. Register the rest of our locale-aware converters
    Using XStream to convert primitives as well as objects
    Renames and simplifications in transformers package
    Improved Transformer API
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Reduce visibility in order to improve cohesiveness and reduce API
    Allow null to be passed to stepdefs with optional capture groups. Closes #90.
    @DateFormat can be specified for List<SomeClassWithDateField> table arguments. Closes #84.
    All building/passing except scala
    Renames. Register the rest of our locale-aware converters
    Using XStream to convert primitives as well as objects
    Now that JavaMethodTransformer is gone we don't need varargs. We're closer to XStream's Converter interface
    Take Locale from Gherkin feature instead of Step Definition. Make an outer Java class for each annotation - makes imports nicer (No more @EN.Given). Moved Java annotation code to java project.
    Made the transformer API use String... varargs and improved JavaMethodTransformer to take advantage of it.
    Renames and simplifications in transformers package
    Reformatted code and optimized imports with IntelliJ (default settings).
    Finished implementing default Transformables.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Allow null to be passed to stepdefs with optional capture groups. Closes #90.
    Renames. Register the rest of our locale-aware converters
    Using XStream to convert primitives as well as objects
    Renames and simplifications in transformers package
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Support for java.util.Calendar arguments in stepdefs
    Tell, don't ask. And some formatting.
    @DateFormat can be specified for List<SomeClassWithDateField> table arguments. Closes #84.
    All building/passing except scala
    Renames. Register the rest of our locale-aware converters
    Using XStream to convert primitives as well as objects
    Renames and simplifications in transformers package
    Reformatted code and optimized imports with IntelliJ (default settings).
    Adding new Transformable
    Implement DataTable.toTable(List<Map<String,Object>>). Closes #433.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Upladed Javadocs
    Implement Table.asList(Class itemType). Clean up imports
    Renames. Register the rest of our locale-aware converters
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Allow null to be passed to stepdefs with optional capture groups. Closes #90.
    Renames. Register the rest of our locale-aware converters
    Using XStream to convert primitives as well as objects
    Renames and simplifications in transformers package
    Simplify Table conversion. Fix broken build.
    
    Squashed commit of the following:
    
    commit 4c357d2fb77d48565985b83a5f5e0d6d1cf58daf
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 23:22:39 2014 +0000
    
        Simplify code by replacing DataTable.flatten with DataTable.asList(String.class)
    
    commit 9c031dabe06813151609d5368f58d062384dc704
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 22:38:09 2014 +0000
    
        Added tests
    
    commit a6c89feb369937149cd19b03737b1d3666b1ecd2
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 21:56:40 2014 +0000
    
        Simplify table conversion
    
    commit 5896c7010ecb2aa67bb8bbc08d4047ac5bd4250a
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 21:32:27 2014 +0000
    
        Table conversion refactoring
    
    commit c2f1d3ef2190b98c43222dcc37d9ce934ad43f3c
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 13 20:39:00 2014 +0000
    
        Simplify table conversion
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    Build passes with cucumber-deps
    Build passes with cucumber-deps
    Big refactoring in table conversion land
    Improved table diffing
    Diff a table with a List of Objects. Closes #52.
    Make Scenario Outlines pass from CLI. Fixes #66.
    Fix broken conversion of table to List<Map<String,String>>. Addresses @nightscape's comment in #49.
    Ability to create List of Map from Table. Closes #49.
    Implement Table.asList(Class itemType). Clean up imports
    Misc changes to bring in XStream to do some of the heavy object conversion lifting
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Allow null to be passed to stepdefs with optional capture groups. Closes #90.
    Renames. Register the rest of our locale-aware converters
    Using XStream to convert primitives as well as objects
    Renames and simplifications in transformers package
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Small simplification, fix new package
    Add support for List step definition parameters
    Improved Transformer API
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    Build passes with cucumber-deps
    Build passes with cucumber-deps
    Reduce visibility in order to improve cohesiveness and reduce API
    Empty strings from matched steps and table cells are converted to . This means boxed types must be used if you intend to have empty strings.
    Support for java.util.Calendar arguments in stepdefs
    Less retatrded exception handling
    Diff a table with a List of Objects. Closes #52.
    Allow null to be passed to stepdefs with optional capture groups. Closes #90.
    Slightly better error message. Made sure the test can actually fail.
    Removed "date" in error message of ConverterWithFormat
    @DateFormat can be specified for List<SomeClassWithDateField> table arguments. Closes #84.
    Implement Table.asList(Class itemType). Clean up imports
    All building/passing except scala
    Renames. Register the rest of our locale-aware converters
    Using XStream to convert primitives as well as objects
    Now that JavaMethodTransformer is gone we don't need varargs. We're closer to XStream's Converter interface
    Ambiguous matches are now reported correctly. Snippets are printed from CLI.
    Take Locale from Gherkin feature instead of Step Definition. Make an outer Java class for each annotation - makes imports nicer (No more @EN.Given). Moved Java annotation code to java project.
    Made the transformer API use String... varargs and improved JavaMethodTransformer to take advantage of it.
    Renames and simplifications in transformers package
    Reformatted code and optimized imports with IntelliJ (default settings).
    Adding new Transformable
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Allow null to be passed to stepdefs with optional capture groups. Closes #90.
    Renames. Register the rest of our locale-aware converters
    Using XStream to convert primitives as well as objects
    Renames and simplifications in transformers package
    minor refactoring: extracted commonalities between enum formats into AbstractEnumFormat
    OriginalFormat added to the enum formats to account for the edge case of mixed case enum member starting with lower case letter
    Improved Transformer API
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    Build passes with cucumber-deps
    Build passes with cucumber-deps
    Reduce visibility in order to improve cohesiveness and reduce API
    List legal enum values if conversion fails. Closes #344
    Add support for enums in stepdefs. Closes #217, #240.
    Add support for enums in stepdefs
    Improved Transformer API
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    Build passes with cucumber-deps
    Improved transforms
    Build passes with cucumber-deps
    Improved transforms
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    List<JavaBean> can be converted to a table again. This change sort of breaks #320 - converting a list of beans/pojos with null fields to a table will require explicit listing of fields. Closes #335.
    Refactored SnippetGenerator.
    
    There was too much parallel effort in the CamelCase and Underscore
    implementations, so the new structure shares most of the logic
    and implements the different logic in a Concatenator.
    
    I also made sure IntelliJ doesn't break because of the new
    scenario lifecycle methods in the gherkin formatter interface.
    Align snippets for quoted arguments with cucumber-ruby
    New Snippet text, closes #618.
    
    Change to the new Snippet text. Update History.md.
    Fix a one off error in JRubySnippet.java.
    Refactored SnippetGenerator.
    
    There was too much parallel effort in the CamelCase and Underscore
    implementations, so the new structure shares most of the logic
    and implements the different logic in a Concatenator.
    
    I also made sure IntelliJ doesn't break because of the new
    scenario lifecycle methods in the gherkin formatter interface.
    Added plus and period to escaped characters
    Refactored --snippet option. Closes #561, #302
    Code review fixes
    Added snippet support to java and junit
    Bugfix: Generated regex for ? character is incorrect. Closes #494.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Reduce visibility in order to improve cohesiveness and reduce API
    Reformat code, shuffle things around a little. Closes #207, #214.
    Improve javadoc
    Snippets for DataTable include a hint about using List<YourType>, so people discover this neat technique
    Support DocString and DataTable in generated snippets. Closes #227
    Escape regex characters in steps
    
    The current rules for generating step definition templates for
    undefined steps do not escape regular expression characters.  For
    instance, the following step:
    
    Given I have $5
    
    ...generates the following template:
    
    @Given("^I have $(\\d+) in my account$")
    
    Java sees the dollar sign as a regex end-of-string marker, and the
    scenario won't run correctly.  This commit escapes dollar signs,
    parentheses, and square brackets.  The step shown above will now be
    correctly translated into a template as:
    
    @Given("^I have \\$(\\d+) in my account$")
    
    This commit changes the general SnippetGenerator.java file; it assumes
    the set of special regular expression characters will be the same
    across JVM languages.  This condition appears to hold for the currently
    supported languages.  If this changes in the future, it should be
    possible to wrap the list of escaped regex chars in a function that
    can be overridden.
    Replace inheritance with delegation for #138
    Reenabled Scala
    Upgrade deps, improve snippets.
    patch for cucumber-jvm issue #117
    Some renames and comments
    Pulling up code to sanitize function names to core
    Fix for #56. (Tests stayed in java)
    Fix for #56
    Snippet definition for Java generates method name with colon in it.
    Simplified improved snippet code, removed hamcrest (not a huge fan).
    The pattern for digits in step snippets pattern are escaped copy paste ready
    Bare pattern and class arrays are replaced by ParameterPatternExchanger.
    JUnit delegates events to a secondary reporter (for example pretty or HTML) so we can get nice reports also when running from JUnit. Needs more work. See new TODOs.
    Added Jython support
    Added JRuby support. Closes #3.
    Better CLI runner
    Reformatted code and optimized imports with IntelliJ (default settings).
    Moved stuff around
    WIP - broke a lot of stuff
    Added snippet support for all languages.
    Closer to correct scenario outline implementation. Need to make sure it works with multiple Examples under one Scenario Outline.
    Improve test suite. New strategy for outline and background.
    Snippets for java, and a reusable superclass for other backends.
    Refactored SnippetGenerator.
    
    There was too much parallel effort in the CamelCase and Underscore
    implementations, so the new structure shares most of the logic
    and implements the different logic in a Concatenator.
    
    I also made sure IntelliJ doesn't break because of the new
    scenario lifecycle methods in the gherkin formatter interface.
    Reformat code, shuffle things around a little. Closes #207, #214.
    Improve javadoc
    Snippets for DataTable include a hint about using List<YourType>, so people discover this neat technique
    Tell, don't ask. And some formatting.
    Replace inheritance with delegation for #138
    Upgrade deps, improve snippets.
    Some renames and comments
    Simplified improved snippet code, removed hamcrest (not a huge fan).
    Refactored SnippetGenerator.
    
    There was too much parallel effort in the CamelCase and Underscore
    implementations, so the new structure shares most of the logic
    and implements the different logic in a Concatenator.
    
    I also made sure IntelliJ doesn't break because of the new
    scenario lifecycle methods in the gherkin formatter interface.
    Refactored SnippetGenerator.
    
    There was too much parallel effort in the CamelCase and Underscore
    implementations, so the new structure shares most of the logic
    and implements the different logic in a Concatenator.
    
    I also made sure IntelliJ doesn't break because of the new
    scenario lifecycle methods in the gherkin formatter interface.
    Refactoring for #525. WIP.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    GluePath can be a package name or a path - both are accepted. Closes #164
    Pass in ClassLoader from the outside. This is necessary in order to construct a working Runtime from a different environment, like Jython. See #151
    #154, RunCukesTest.scala uses ScalaBackend.loadGlue which calls ClasspathResourceLoader().instantiateSubclasses which didn't check if the class had a valid constructor given the arguments. ScalaDslTest.scala holds multiple internal ScalaDsl instances which are compiled to classes implementing ScalaDsl but with no valid constructor. These were being picked up by the ClasspathResourceLoader causing the RunCukesTest to fail at load time
    Removed OneTimeResourceLoader and made sure glue code is loaded only once. The Backend.loadGlue method should ideally be removed, and the World and gluePaths passed to each Backend's constructor. Other TODOs on this branch: rename World to Glue. RuntimeGlue should not have a ref back to Runtime. Make Scala work again (disabled it because I don't have the required Scala fu)
    Scala fixes for Windows. #139
    Fixes #126
    Load resoureces from classpath when using JUnit, load them from filesystem when using CLI
    JRuby correctly loads from file system (not classpath)
    Rewrote a lot of the resource loading code
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Rewrote a lot of the resource loading code
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Fix several problems with resource loading for scripting languages (after the new classpath: scheme was introduced)
    Use a classpath: prefix if you want to load resources (features and stepdef scripts) from the classpath and not the file system. Should be a transparent change for JUnit users. See #312
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Extensible at last!
    * Factored resource iterators into separate factories
    * There seems to be a classpath issue with the ZipResourceIterator,
    because when it's created by a factory loaded using the ServiceLoader
    class, it's unable to find some ZIP files (this was a problem in the
    cucumber-jython tests) the solution was to create the
    ZipThenFileResourceIteratorFallback class
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Beginning work to make resource iterators extendable
    * Raised visibility of ClasspathIterable.getPath(URL)
    * Created ResourceIteratorFactory interface
    * Factored FileResourceIterator creation into ResourceIteratorFactory
    implementation
    * Added services file for ResourceIteratorFactory
    Improve performance of URLOutputStream. Closes #654.
    Make response code configurable
    Various changes needed to improve the formatting API
    Formatters can HTTP PUT to an URL
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Tighten test
    Added cobertura code coverage and started to clean up some cruftiness in the io package
    Use Deque instead of Stack
    Rewrote a lot of the resource loading code
    Added Gosu support.
    
    Squashed commit of the following:
    
    commit 677ec0244cf33e40f5159250095112ac5622eb25
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 19:49:44 2014 +0000
    
        Use gosu jars from repo
    
    commit f35d0f7ad1737d126310beaf9a19ceae0a1a5cff
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 19:43:26 2014 +0000
    
        Added gosu snippets
    
    commit b8cfce6019bb12d701cd68235cd9420d07b9e991
    Merge: 5c90a6b 7e1d02f
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 16:05:32 2014 +0000
    
        Merge branch 'master' into gosu
    
    commit 5c90a6bce2f09788ed99a8e6546c1d1f03774230
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Wed Mar 12 17:01:49 2014 +0000
    
        Better Gosu
    
    commit 998b787c30e7263a63c755c6b3b668a71b358a23
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Fri Mar 7 23:06:43 2014 +0000
    
        Remove dead code
    
    commit 927bc45a977b7681be644f6f1276231be5e49998
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 10:16:13 2014 +0000
    
        For now, define the DSL alongside the stepdef
    
    commit 237f71beee6440f9f2f9f64b2d08998064e635b9
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 10:03:09 2014 +0000
    
        Try to define a DSL
    
    commit 1e3df07a25ef8009684431e78c33751c4db28136
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 09:52:50 2014 +0000
    
        Use Gosu Programs instead of classes. Need to figure out how to define Given.
    
    commit c9bd0adb5cceffdea6fe2d9e9feba8b8763472a1
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 00:28:06 2014 +0000
    
        Clean up a little
    
    commit 4b34b5b8bda1aca6149894cae8d9587446e1ba9a
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Wed Mar 5 23:30:59 2014 +0000
    
        Started experimental work on gosu module
    Remove duplication in Reflections implementations.
    
    Renamed Reflections to ClassFinder and removed generic methods.
    Created a new Reflections class that delegates to a ClassFinder.
    Cannot run cucumber test if path to jar files contains exclamation character. Closes #685
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Test for proof of concept
    * Cosmetic tweaks
    * Removed hard-coded dependency on ZipResourceIteratorFactory in
    ClasspathIterable
    Extensible at last!
    * Factored resource iterators into separate factories
    * There seems to be a classpath issue with the ZipResourceIterator,
    because when it's created by a factory loaded using the ServiceLoader
    class, it's unable to find some ZIP files (this was a problem in the
    cucumber-jython tests) the solution was to create the
    ZipThenFileResourceIteratorFallback class
    Beginning work to make resource iterators extendable
    * Raised visibility of ClasspathIterable.getPath(URL)
    * Created ResourceIteratorFactory interface
    * Factored FileResourceIterator creation into ResourceIteratorFactory
    implementation
    * Added services file for ResourceIteratorFactory
    Fix several problems with resource loading for scripting languages (after the new classpath: scheme was introduced)
    Fixed some regressions to glue code introduced in 1.0.2. Might fix issue #299, but that's not confirmed.
    Fixed windows path logic - need to verify on POSIX
    Rewrote a lot of the resource loading code
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Reduce visibility in order to improve cohesiveness and reduce API
    JRuby correctly loads from file system (not classpath)
    Rewrote a lot of the resource loading code
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Load resoureces from classpath when using JUnit, load them from filesystem when using CLI
    JRuby correctly loads from file system (not classpath)
    Rewrote a lot of the resource loading code
    Added Gosu support.
    
    Squashed commit of the following:
    
    commit 677ec0244cf33e40f5159250095112ac5622eb25
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 19:49:44 2014 +0000
    
        Use gosu jars from repo
    
    commit f35d0f7ad1737d126310beaf9a19ceae0a1a5cff
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 19:43:26 2014 +0000
    
        Added gosu snippets
    
    commit b8cfce6019bb12d701cd68235cd9420d07b9e991
    Merge: 5c90a6b 7e1d02f
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 16:05:32 2014 +0000
    
        Merge branch 'master' into gosu
    
    commit 5c90a6bce2f09788ed99a8e6546c1d1f03774230
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Wed Mar 12 17:01:49 2014 +0000
    
        Better Gosu
    
    commit 998b787c30e7263a63c755c6b3b668a71b358a23
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Fri Mar 7 23:06:43 2014 +0000
    
        Remove dead code
    
    commit 927bc45a977b7681be644f6f1276231be5e49998
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 10:16:13 2014 +0000
    
        For now, define the DSL alongside the stepdef
    
    commit 237f71beee6440f9f2f9f64b2d08998064e635b9
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 10:03:09 2014 +0000
    
        Try to define a DSL
    
    commit 1e3df07a25ef8009684431e78c33751c4db28136
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 09:52:50 2014 +0000
    
        Use Gosu Programs instead of classes. Need to figure out how to define Given.
    
    commit c9bd0adb5cceffdea6fe2d9e9feba8b8763472a1
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 00:28:06 2014 +0000
    
        Clean up a little
    
    commit 4b34b5b8bda1aca6149894cae8d9587446e1ba9a
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Wed Mar 5 23:30:59 2014 +0000
    
        Started experimental work on gosu module
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Scala fixes for Windows. #139
    Rewrote a lot of the resource loading code
    Renamed packages. Started work on line support - needs more work.
    Started on a CLI as an alternative to JUnit. This is necessary for other JVM languages that don't use JUnit (Clojure for example). Currently using some of the JUnit classes - will decouple this later.
    Added Gosu support.
    
    Squashed commit of the following:
    
    commit 677ec0244cf33e40f5159250095112ac5622eb25
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 19:49:44 2014 +0000
    
        Use gosu jars from repo
    
    commit f35d0f7ad1737d126310beaf9a19ceae0a1a5cff
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 19:43:26 2014 +0000
    
        Added gosu snippets
    
    commit b8cfce6019bb12d701cd68235cd9420d07b9e991
    Merge: 5c90a6b 7e1d02f
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 16:05:32 2014 +0000
    
        Merge branch 'master' into gosu
    
    commit 5c90a6bce2f09788ed99a8e6546c1d1f03774230
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Wed Mar 12 17:01:49 2014 +0000
    
        Better Gosu
    
    commit 998b787c30e7263a63c755c6b3b668a71b358a23
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Fri Mar 7 23:06:43 2014 +0000
    
        Remove dead code
    
    commit 927bc45a977b7681be644f6f1276231be5e49998
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 10:16:13 2014 +0000
    
        For now, define the DSL alongside the stepdef
    
    commit 237f71beee6440f9f2f9f64b2d08998064e635b9
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 10:03:09 2014 +0000
    
        Try to define a DSL
    
    commit 1e3df07a25ef8009684431e78c33751c4db28136
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 09:52:50 2014 +0000
    
        Use Gosu Programs instead of classes. Need to figure out how to define Given.
    
    commit c9bd0adb5cceffdea6fe2d9e9feba8b8763472a1
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 00:28:06 2014 +0000
    
        Clean up a little
    
    commit 4b34b5b8bda1aca6149894cae8d9587446e1ba9a
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Wed Mar 5 23:30:59 2014 +0000
    
        Started experimental work on gosu module
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Scala fixes for Windows. #139
    Rewrote a lot of the resource loading code
    Renamed packages. Started work on line support - needs more work.
    Started on a CLI as an alternative to JUnit. This is necessary for other JVM languages that don't use JUnit (Clojure for example). Currently using some of the JUnit classes - will decouple this later.
    All core cucumber-features are passing except one
    Moved stuff around
    WIP - broke a lot of stuff
    If you write code that forces me to check your exceptions, then I will rip off your head and piss in your dead skull.
    Sort of got Rhino working
    Refactored Classpath class to be more versatile...
    Added Gosu support.
    
    Squashed commit of the following:
    
    commit 677ec0244cf33e40f5159250095112ac5622eb25
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 19:49:44 2014 +0000
    
        Use gosu jars from repo
    
    commit f35d0f7ad1737d126310beaf9a19ceae0a1a5cff
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 19:43:26 2014 +0000
    
        Added gosu snippets
    
    commit b8cfce6019bb12d701cd68235cd9420d07b9e991
    Merge: 5c90a6b 7e1d02f
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sun Mar 16 16:05:32 2014 +0000
    
        Merge branch 'master' into gosu
    
    commit 5c90a6bce2f09788ed99a8e6546c1d1f03774230
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Wed Mar 12 17:01:49 2014 +0000
    
        Better Gosu
    
    commit 998b787c30e7263a63c755c6b3b668a71b358a23
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Fri Mar 7 23:06:43 2014 +0000
    
        Remove dead code
    
    commit 927bc45a977b7681be644f6f1276231be5e49998
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 10:16:13 2014 +0000
    
        For now, define the DSL alongside the stepdef
    
    commit 237f71beee6440f9f2f9f64b2d08998064e635b9
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 10:03:09 2014 +0000
    
        Try to define a DSL
    
    commit 1e3df07a25ef8009684431e78c33751c4db28136
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 09:52:50 2014 +0000
    
        Use Gosu Programs instead of classes. Need to figure out how to define Given.
    
    commit c9bd0adb5cceffdea6fe2d9e9feba8b8763472a1
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 6 00:28:06 2014 +0000
    
        Clean up a little
    
    commit 4b34b5b8bda1aca6149894cae8d9587446e1ba9a
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Wed Mar 5 23:30:59 2014 +0000
    
        Started experimental work on gosu module
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Changing getPath to use path
    Tell, don't ask. And some formatting.
    Scala fixes for Windows. #139
    Added standalone script for Groovy
    Rewrote a lot of the resource loading code
    Renamed packages. Started work on line support - needs more work.
    Made core tests pass on Windows
    Started on a CLI as an alternative to JUnit. This is necessary for other JVM languages that don't use JUnit (Clojure for example). Currently using some of the JUnit classes - will decouple this later.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Extensible at last!
    * Factored resource iterators into separate factories
    * There seems to be a classpath issue with the ZipResourceIterator,
    because when it's created by a factory loaded using the ServiceLoader
    class, it's unable to find some ZIP files (this was a problem in the
    cucumber-jython tests) the solution was to create the
    ZipThenFileResourceIteratorFallback class
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Beginning work to make resource iterators extendable
    * Raised visibility of ClasspathIterable.getPath(URL)
    * Created ResourceIteratorFactory interface
    * Factored FileResourceIterator creation into ResourceIteratorFactory
    implementation
    * Added services file for ResourceIteratorFactory
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Load resoureces from classpath when using JUnit, load them from filesystem when using CLI
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Reduce visibility in order to improve cohesiveness and reduce API
    Throw an exception if a glue or feature path doesn't exist (i.e. neither file nor directory)
    Added cobertura code coverage and started to clean up some cruftiness in the io package
    Rewrote a lot of the resource loading code
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Test for proof of concept
    * Cosmetic tweaks
    * Removed hard-coded dependency on ZipResourceIteratorFactory in
    ClasspathIterable
    Extensible at last!
    * Factored resource iterators into separate factories
    * There seems to be a classpath issue with the ZipResourceIterator,
    because when it's created by a factory loaded using the ServiceLoader
    class, it's unable to find some ZIP files (this was a problem in the
    cucumber-jython tests) the solution was to create the
    ZipThenFileResourceIteratorFallback class
    Formatters can HTTP PUT to an URL
    added stub implementation for new formatter methods
    Fixed a bug where  would fail with the JUnit runner.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Reduce visibility in order to improve cohesiveness and reduce API
    Upgrade to Gherkin 2.10.0
    Fixing implementation errors regarding newer version of gherkin
    Running with JUnit uses a null formatter by default (instead of a progress formatter).
    Optimise imports
    Mostly finished CLI refactoring
    Properly flush and close formatters. Closes #173
    Improved the way formatters are created - less reliance on obscure system properties.
    Fix compilation of Scala module and example.
    Optimize imports, reformat
    Adding support for custom formatters.
    See #33.
    added stub implementation for new formatter methods
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    Changes to work with gherkin's hook-reporting branch
    Upgrade to Gherkin 2.10.0
    Changing the Hook to a B or A depending on what type
    Fixing implementation errors regarding newer version of gherkin
    Implementing the changes to the Gherkin stuff.
    
    It's reporting the appropriate exceptions now, not failures in the
    formatters.
    Added --monochrome flag, allowing monochrome output for certain formatters
    Optimise imports
    Mostly finished CLI refactoring
    Embed text and images in reports. Closes #205.
    Properly flush and close formatters. Closes #173
    Tell, don't ask. And some formatting.
    Don't close streams we don't create, and only close them once. Closes #96. Closes #105.
    Changes for gherkin 2.6.0. Will merge to master when gherkin has synced to maven central.
    Make Scenario Outlines pass from CLI. Fixes #66.
    Added a progress formatter and made it the default. New iml files that get updated more easily.
    Implemented rerun formatter
    Remove warnings and deprecated code
    Formatters can HTTP PUT to an URL
    Simplify. Attribution. Closes #304, #430
    refs cucumber/cucumber-jvm#304
    Some last minute fixes before the 1.1.0 release.
    Write all report files as UTF8. Closes #402.
    Fixed a bug where  would fail with the JUnit runner.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Reduce visibility in order to improve cohesiveness and reduce API
    Renamed FormatterConverter to FormatterFacotry and added some more unit tests to illustrate usage.
    Understandable error message if a formatter needs output location. Closes #148, #232, #269.
    Running with JUnit uses a null formatter by default (instead of a progress formatter).
    Get rid of JCommander. Closes #266.
    Optimise imports
    Mostly finished CLI refactoring
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Added --monochrome flag, allowing monochrome output for certain formatters
    Mostly finished CLI refactoring
    Use the new Formatter interface methods in the RerunFormatter
    
    Simplify the RerunFormatter by taking advantage of the new methods
    startOfScenarioLifeCycle and endOfScenarioLifeCycle in the Formatter
    interface.
    Fix errors in the RerunFormatter, move its testing to core
    
    Fix the rerun formatters handling of failures in background,
    scenario outline examples and hooks in the RerunFormatter.
    Move all testing of the RerunFormatter to core.
    added stub implementation for new formatter methods
    Attribution. Closes #495, #524
    Implemented rerun formatter
    JUnitFormatter marks skipped tests as failures in strict mode
    
    Let the option strict make JUnitFormatter to mark skipped tests as
    failures. Use a new interface StrictAware to determine which formatters
    the strict option should be passed to, following the example of the
    interface ColorAware determining which formatters the monochrome option
    is sent to.
    added stub implementation for new formatter methods
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    Reduce visibility in order to improve cohesiveness and reduce API
    Changes to work with gherkin's hook-reporting branch
    Upgrade to Gherkin 2.10.0
    Fixing implementation errors regarding newer version of gherkin
    Implementing the changes to the Gherkin stuff.
    
    It's reporting the appropriate exceptions now, not failures in the
    formatters.
    Reformat code, shuffle things around a little. Closes #207, #214.
    ignore failed and skipped steps
    retrieve stepname from match instead of a stepStack
    removed unnecessary StepPrinter
     * added steplocation to report
     * added stepDefinition (pattern)
     * grouped steps under stepdefinitions
    removed unnecessary space (keyword already contains a space)
    Issue #270 output in json
    Added Keyword for Output
    Issue #207 UsageFormatter
    Use image/svg+xml. Closes #624
    Added support for SVG images in HTML output
    added stub implementation for new formatter methods
    Output embedded text in HTML report
    
    The formatter in cucumber-html already supports embedding content
    with mime-types starting with "text/" into the HTML report -
    this just makes cucumber-jvm not swallow the text content before
    it gets that far.
    Formatters can HTTP PUT to an URL
    Fix embedding in HTML reports. Closes #412.
    Some last minute fixes before the 1.1.0 release.
    HTMLFormatter improvements. Closes #375, #404, #283
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    added video/ogg mimetype to embedd videos in the HTMLReport
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    Changes to work with gherkin's hook-reporting branch
    Upgrade to Gherkin 2.10.0
    Fixing implementation errors regarding newer version of gherkin
    Implementing the changes to the Gherkin stuff.
    
    It's reporting the appropriate exceptions now, not failures in the
    formatters.
    Make sure strings are quoted before printing to js. Closes #254
    Optimise imports
    Mostly finished CLI refactoring
    Improved Calendar support for tables
    Fixed some bugs. Moved from FileWriter to File in UnitFormatter
    Embed text and images in reports. Closes #205.
    Improved HTMLFormatter tests
    HTML formatter produces empty report if no features run. Closes #191
    Properly flush and close formatters. Closes #173
    Tell, don't ask. And some formatting.
    This import stuff changed somewhere along the lines
    Added a junit test for the HTML formatter
    Improved the way formatters are created - less reliance on obscure system properties.
    Don't close streams we don't create, and only close them once. Closes #96. Closes #105.
    @DateFormat can be specified for List<SomeClassWithDateField> table arguments. Closes #84.
    Changes for gherkin 2.6.0. Will merge to master when gherkin has synced to maven central.
    Adding support for embedded data for HTMLFormatter (#48).
    Integrating cucumber-html, it's now working with a single feature.
    See #47.
    Integrating cucumber-html, it's now working with a single feature.
    See #67.
    Optimize imports, reformat
    Using cucumber-html
    Adding basic functionalities to java html formatter.
    Working on #42.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Added --monochrome flag, allowing monochrome output for certain formatters
    added stub implementation for new formatter methods
    Add a dummy test case in JUnit report if no features are found
    
    Jenkins will mark a job as failed even though the exit code was 0, if
    the JUnit report file contains no testcase elements. Therefore add a
    dummy testcase element to the JUnit report, when no features are found,
    or no found features match the tags filter used.
    Fix issues in the JUnitFormatter
    
    Change the JUnitFormatter to handle failures in the before and after
    hooks properly. Also change the JUnitFormatter to handle both
    all-steps-first execution and one-step-at-the-time execution.
    Add tests for the JUnitFormatter to disclose issues
    
    The main issue is that the JUnitFormatter does not handle failures
    in the before and after hooks properly. To add flexibility the tests
    also specify that the JUnitFormatter should handle both all-steps-first
    execution and one-step-at-the-time execution.
    Align the step results in the JUnit test result files
    
    Adjust the number of . separating the step text from the step result,
    so that the results are aligned.
    JUnitFormatter marks skipped tests as failures in strict mode
    
    Let the option strict make JUnitFormatter to mark skipped tests as
    failures. Use a new interface StrictAware to determine which formatters
    the strict option should be passed to, following the example of the
    interface ColorAware determining which formatters the monochrome option
    is sent to.
    JUnitFormatter does not throw exception in done() method.
    Updates for issue #477, wrap exceptions which may be thrown in sumTimes and rethrow
    Remove redundant Locale argument in a bunch of places. Some reformatting.
    Updates for Issue #477 - JUnitFormatter does not put required name attribute in testsuite root element.
    Formatters can HTTP PUT to an URL
    Code formatting fixes
    Fixed use of formatter to list all step results in JSON output
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    Fixed junit's failure reporting display
    
    The formatter was setting an attribute "failed," but ant (and I'm
    assuming other CLI tools) look for a "failures" attribute.
    Reduce visibility in order to improve cohesiveness and reduce API
    JUnit report has time reported as seconds instead of millis. Closes #347
    Changes to work with gherkin's hook-reporting branch
    Upgrade to Gherkin 2.10.0
    Fixing implementation errors regarding newer version of gherkin
    Implementing the changes to the Gherkin stuff.
    
    It's reporting the appropriate exceptions now, not failures in the
    formatters.
    Optimise imports
    Mostly finished CLI refactoring
    Improved Calendar support for tables
    Renamed UnitFormatter to JUnitFormatter. Made some minor changes and deleted unused xsd. Can be added back later.
    Fixed some bugs. Moved from FileWriter to File in UnitFormatter
    UnitFormatter bug fixing #1
    Adding Unit formatter
    Optimise imports
    Mostly finished CLI refactoring
    Detect duplicate step definitions. Closes #213.
    Generate Cukepatch-compliant JSON
    Reduce visibility in order to improve cohesiveness and reduce API
    Generate Cukepatch-compliant JSON
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Make more of cucumber-features pass. Rename Table to DataTable. #45.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Make more of cucumber-features pass. Rename Table to DataTable. #45.
    Moved table conversion logic from java to core
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    Removing commons-lang dependencies.
    Adding a header mapper to transform headings to property names. Will be
    useful to create and populate Java Beans.
    Added accessors to TableDiffException. Closes #384.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Improved table diffing
    Add the diff to the exception when 2 tables are different. Closes #18.
    Make more of cucumber-features pass. Rename Table to DataTable. #45.
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    Upgraded to gherkin 2.4.15, which considerably simplifies diffing logic.
    Implementing Diff between two tables.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Added accessors to TableDiffException. Closes #384.
    Fix diff when there are delta spanning multiple lines
    Fix diff when there are delta spanning multiple lines
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    Build passes with cucumber-deps
    Build passes with cucumber-deps
    Make it easier to create a DataTable
    No infinite loop/OutOfMemoryException in diffs.
    Less retatrded exception handling
    Improved table diffing
    Make more of cucumber-features pass. Rename Table to DataTable. #45.
    Changes for gherkin 2.6.0. Will merge to master when gherkin has synced to maven central.
    Implement Table.asList(Class itemType). Clean up imports
    All building/passing except scala
    Use raw() instead of rows(). Added a couple of TODOs for Tables.
    Misc small refactorings
    Upgraded to gherkin 2.4.15, which considerably simplifies diffing logic.
    Implementing Diff between two tables.
    Simplify Table conversion. Fix broken build.
    
    Squashed commit of the following:
    
    commit 4c357d2fb77d48565985b83a5f5e0d6d1cf58daf
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 23:22:39 2014 +0000
    
        Simplify code by replacing DataTable.flatten with DataTable.asList(String.class)
    
    commit 9c031dabe06813151609d5368f58d062384dc704
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 22:38:09 2014 +0000
    
        Added tests
    
    commit a6c89feb369937149cd19b03737b1d3666b1ecd2
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 21:56:40 2014 +0000
    
        Simplify table conversion
    
    commit 5896c7010ecb2aa67bb8bbc08d4047ac5bd4250a
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 21:32:27 2014 +0000
    
        Table conversion refactoring
    
    commit c2f1d3ef2190b98c43222dcc37d9ce934ad43f3c
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 13 20:39:00 2014 +0000
    
        Simplify table conversion
    Turn a DataTable with 2 columns into a Map
    wrapping unrecognized XStream ConversionException in CucumberException
    more precise detection of the "null to primitive assignment" XStream error.
    Correct error message on XStreams failure due repeated column. fixes #657
    replaced tabs with spaces and removed unwanted method
    added @Transpose annotation processing
    Implemented  and . See #433
    Better table conversion. Closes #433,#434.
    Implement DataTable.toTable(List<Map<String,Object>>). Closes #433.
    Can convert List<Object[]> to DataTable
    Improved Transformer API
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    Build passes with cucumber-deps
    Build passes with cucumber-deps
    List<JavaBean> can be converted to a table again. This change sort of breaks #320 - converting a list of beans/pojos with null fields to a table will require explicit listing of fields. Closes #335.
    Refactored the StepDefinition interface so that backends for dynamic languages can infer the type of a parameter based on the actual argument type passed to it.
    Big refactoring in table conversion land
    Better JavaDoc for DataTable
    Ability to create  objects from a List of objects while specifying what header columns (fields) to use
    Bugfix for Tables with empty cells make the column disappear. Closes #320
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    More friendly errors for xstream problems
    Friendlier error message when XStream fails conversion. Closes #296
    Make it easier to create a DataTable
    Optimise imports
    Mostly finished CLI refactoring
    Improved Calendar support for tables
    Tell, don't ask. And some formatting.
    Improved table diffing
    More sensible API for tables of single values
    Added support for primitive types in tables. Closes #87.
    Diff a table with a List of Objects. Closes #52.
    Make more of cucumber-features pass. Rename Table to DataTable. #45.
    Tighten up tests about lists of maps
    Fix broken conversion of table to List<Map<String,String>>. Addresses @nightscape's comment in #49.
    Ability to create List of Map from Table. Closes #49.
    Implement Table.asList(Class itemType). Clean up imports
    All building/passing except scala
    Misc changes to bring in XStream to do some of the heavy object conversion lifting
    Format and delimiter annotations enhancement - same as for Transformer
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Add support for List step definition parameters
    Dominic: expose scenario name as part of cucumber.api.Scenario
    [Jython] Access to scenario in Before and After hooks. Closes #582.
    
    The implementation is a little ghetto. I tried to get the arity
    of the hook function using inspect.getargspec, but couldn't get
    it to work. This implementation will most likely be sufficient though.
    Add Scenario.source_tag_names to work with Capybara. Closes #504.
    API docs
    Last release failed. Remove site distribution. We'll copy javadocs over to the site repo manually.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    Optimize imports, format code
    wrong documentation in ScenarioResult#isFailed(). changed "false" to "failed"
    Embed text and images in reports. Closes #205.
    Make it hardert to do the wrong thing with ScenarioResult - it is an interface, so it cannot be instantiated.
    Hooks can receive results. Closes #27.
    added @Transpose annotation processing
    Deprecated  in favour of .
    Use of @Pending annotation
    Update all snippets to throw PendingException, following up on #271. Need to make Clojure do this.
    Cleaning out the closet
    Format and delimiter annotations enhancement - same as for Transformer
    Moved the JUnit package and configured API docs
    Improved Transformer API
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Mostly finished CLI refactoring
    Improved Calendar support for tables
    Support for java.util.Calendar arguments in stepdefs
    Package XStream and diffutils inside core. Closes #179.
    Only on parameter
    @DateFormat can be specified for List<SomeClassWithDateField> table arguments. Closes #84.
    Refactoring to capture more info about types
    Cleaning out the closet
    Fix version/newline/maven problems
    Moved stuff around
    Much more modular
    Better abstractions by bringing in Groovy
    Disabled some tests, remove JRuby
    Move shit around
    Moved remaining annotations to cuke4duke.annotation package.
    Added new @Ordered annotation, to deal with issue #39. Scala is failing now - need to fix it.
    Added list of transform hooks to AbstractProgrammingLanguage
    Added Transform annotation
    Rename packages from cucumber to cuke4duke
    Added ant build.xml for simple example. Some more renames
    Lots of restructuring and renaming. Ruby code is now packaged inside the jar. No more gem packaging.
    more maven wrestling
    Shuffle stuff around
    Using our own Java classes instead of
    Refactored SnippetGenerator.
    
    There was too much parallel effort in the CamelCase and Underscore
    implementations, so the new structure shares most of the logic
    and implements the different logic in a Concatenator.
    
    I also made sure IntelliJ doesn't break because of the new
    scenario lifecycle methods in the gherkin formatter interface.
    Refactored --snippet option. Closes #561, #302
    Deprecated  in favour of .
    Simplify Table conversion. Fix broken build.
    
    Squashed commit of the following:
    
    commit 4c357d2fb77d48565985b83a5f5e0d6d1cf58daf
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 23:22:39 2014 +0000
    
        Simplify code by replacing DataTable.flatten with DataTable.asList(String.class)
    
    commit 9c031dabe06813151609d5368f58d062384dc704
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 22:38:09 2014 +0000
    
        Added tests
    
    commit a6c89feb369937149cd19b03737b1d3666b1ecd2
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 21:56:40 2014 +0000
    
        Simplify table conversion
    
    commit 5896c7010ecb2aa67bb8bbc08d4047ac5bd4250a
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Sat Mar 15 21:32:27 2014 +0000
    
        Table conversion refactoring
    
    commit c2f1d3ef2190b98c43222dcc37d9ce934ad43f3c
    Author: Aslak Hellesøy <aslak.hellesoy@gmail.com>
    Date:   Thu Mar 13 20:39:00 2014 +0000
    
        Simplify table conversion
    Turn a DataTable with 2 columns into a Map
    removed leading spaces on empty line
    added table verification: unbalanced tables reported as errors
    replaced tabs with spaces and removed unwanted method
    added @Transpose annotation processing
    added transpose() method to DataTable
    Implemented  and . See #433
    Better table conversion. Closes #433,#434.
    Restore ability to diff with another DataTable
    Moved the JUnit package and configured API docs
    Last release failed. Remove site distribution. We'll copy javadocs over to the site repo manually.
    Improved Transformer API
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Because I don't want to have to tweak the crap outta my compiler to make
    this work...
    Reduce visibility in order to improve cohesiveness and reduce API
    Refactored the StepDefinition interface so that backends for dynamic languages can infer the type of a parameter based on the actual argument type passed to it.
    Big refactoring in table conversion land
    Better JavaDoc for DataTable
    Ability to create  objects from a List of objects while specifying what header columns (fields) to use
    Make it easier to create a DataTable
    Improved table diffing
    Add the diff to the exception when 2 tables are different. Closes #18.
    Added support for primitive types in tables. Closes #87.
    Make more of cucumber-features pass. Rename Table to DataTable. #45.
    Changes for gherkin 2.6.0. Will merge to master when gherkin has synced to maven central.
    Fix broken conversion of table to List<Map<String,String>>. Addresses @nightscape's comment in #49.
    Ability to create List of Map from Table. Closes #49.
    Implement Table.asList(Class itemType). Clean up imports
    All building/passing except scala
    Using XStream to convert primitives as well as objects
    Misc changes to bring in XStream to do some of the heavy object conversion lifting
    Use raw() instead of rows(). Added a couple of TODOs for Tables.
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    Misc small refactorings
    Upgraded to gherkin 2.4.15, which considerably simplifies diffing logic.
    Implementing Diff between two tables.
    Make possible mapping transformers by column index
    Adding locale to Table.
    Create TableHeaderMapper interface to allow customization of Heading
    mapping.
    Revert "Merge remote-tracking branch 'origin-cedric-lamalle/tables'"
    
    This reverts commit 680423f00e878db8eaa1689598921e4133da4a5f, reversing
    changes made to e21aea9afff19914352993057334a5958e22410f.
    
    Undoing unnecessary merge of branch tables.
    Starting to implement Table diffs.
    Added header mapping to Table.
    Implementing more methods on Table.
    Starting to implement tables.
    Moved stuff around
    Much more modular
     is deprecated in favour of . Closes #549
    Implemented  and . See #433
    Improved Transformer API
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    Update examples to use Transform
    Docs
    Build passes with cucumber-deps
    Pass a SingleValueConverter to ParameterType
    Improved transforms
    Docs
    Build passes with cucumber-deps
    Pass a SingleValueConverter to ParameterType
    Improved transforms
    Format and delimiter annotations enhancement - same as for Transformer
    Transformer annotation enhancement - now it can be use to annotate other annotations
    Moved the JUnit package and configured API docs
    Improved Transformer API
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    Update examples to use Transform
    Docs
    Build passes with cucumber-deps
    Pass a SingleValueConverter to ParameterType
    Docs
    Build passes with cucumber-deps
    Pass a SingleValueConverter to ParameterType
    Make it easier to correctly create RuntimeOptions from a String, ref #597.
    Report summaries and  in the same way as the CLI
    Override Cucumber Options via  or cucumber-jvm.properties as well as -Dcucumber.options
    Remove duplication in Reflections implementations.
    
    Renamed Reflections to ClassFinder and removed generic methods.
    Created a new Reflections class that delegates to a ClassFinder.
    Add RuntimeOptions.isMonochrome(), rm Runtime factory methods
    
    Add RuntimeOptions.isMonochorme(), since commit 65f3bd6 on the master
    branch change RuntimeOptions to have private fields and getters.
    
    Basically revert commit c8feb10. Since the new android support on the
    master banch sends backends to the Runtime constructor, which
    previously only was done in tests, the change to use factory methods in
    Runtime no longer make sence.
    Minimize the number of constructors in the Runtime class
    
    To minimize the number of constructors in the Runtime class, and to
    handle that by default a UndefinedStepTracker is created and then
    injected both into the Runtime and the RuntimeGlue, create a factory
    method as the main entry. Expose additional conveniece factory methods
    for testing in the core module in RuntimeTest.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Options (Command line or ) can be overriden with the  system property.
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Use a classpath: prefix if you want to load resources (features and stepdef scripts) from the classpath and not the file system. Should be a transparent change for JUnit users. See #312
    Reformat code, shuffle things around a little. Closes #207, #214.
    Help text for CLI. Closes #142.
    Mostly finished CLI refactoring
    Get gluePath from runtimeOptions
    Ease RuntimeOptions into the Runtime API
    Properly flush and close formatters. Closes #173
    improve upon the argument parsing for formatters
    
    Enables multiple formatters, even multiple formatters to stdout. Who knows, maybe you've invented
    ones that only do something on error, and others that only do something on pending.
    Maybe you're crazy and you want dots and lines mixed.
    Maybe you wrote a formatter to put out a green bar at the very end :D
    Pass in ClassLoader from the outside. This is necessary in order to construct a working Runtime from a different environment, like Jython. See #151
    Removed OneTimeResourceLoader and made sure glue code is loaded only once. The Backend.loadGlue method should ideally be removed, and the World and gluePaths passed to each Backend's constructor. Other TODOs on this branch: rename World to Glue. RuntimeGlue should not have a ref back to Runtime. Make Scala work again (disabled it because I don't have the required Scala fu)
    Release 1.0.0.RC4
    this seems to complete the refactor
    
    There's probably much more that can be refactored to improve the calling mechanism
    
    World is created once in Runtime, and accessed from there
        runtime.getWorld();
    
    Oh yeah, need to unIgnore a test and fix it.
    Improved the way formatters are created - less reliance on obscure system properties.
    Load resoureces from classpath when using JUnit, load them from filesystem when using CLI
    Rewrote a lot of the resource loading code
    Don't close streams we don't create, and only close them once. Closes #96. Closes #105.
    Better hooks
    Generate jsonp for metadata to make it easier to load with cross-site dynamic script tags
    Changes for gherkin 2.6.0. Will merge to master when gherkin has synced to maven central.
    Print exceptions at the end of run (regardless of what formatter is used). Exit with non-0 exit status if there are errors. Closes #71
    First shot at implementing --dry-run
    First shot at implementing --dry-run
    Code completion metadata can now be generated from the CLI. Closes #26.
    gluePath is the best name I have come up with for 'class path or script path where stepdefs and hooks live'
    Added a progress formatter and made it the default. New iml files that get updated more easily.
    Added back codePaths that were temporarily disabled during Scenario Outline refactoring. Made html default CLI formatter since pretty is broken for scenario outline ATM.
    Optimize imports, reformat
    Adding support for custom formatters.
    See #33.
    More work on background
    Simplified improved snippet code, removed hamcrest (not a huge fan).
    Pass several script paths/packages to the Backend constructors. (We can't have a backend per package/script path, because code in backend A would not be able to talk to code in backend B)
    Misc cleanup
    Added a --tags CLI option
    Added tags and lines attributes to @Feature, making it possible to run a single scenario (or just some)
    Revert "Merge remote-tracking branch 'origin-cedric-lamalle/cli-jcommander'"
    
    This reverts commit f40f9dd7d165bb927526c8f9bfd71240d9468843, reversing
    changes made to 680423f00e878db8eaa1689598921e4133da4a5f.
    
    Undoing unnecessary merg of cli-jcommander.
    Fix version/newline/maven problems
    Ambiguous matches are now reported correctly. Snippets are printed from CLI.
    Better CLI runner
    Using JCommander to parse argv. Adding new options will be easier.
    Reformatted code and optimized imports with IntelliJ (default settings).
    Started on a CLI as an alternative to JUnit. This is necessary for other JVM languages that don't use JUnit (Clojure for example). Currently using some of the JUnit classes - will decouple this later.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.5
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.4
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.2
    Updated docs and added scripts for API docs
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.1
    Moved the JUnit package and configured API docs
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.0
    Some last minute fixes before the 1.1.0 release.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.13
    Release 1.0.13 with better packaging
    increase version to prepare for next development iteration:
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.12
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.11
    Undo bad changes I mkade in bbe40d3d451703f41ef36d16415144268d6ff72a while fixing #356
    Fix tests that broke in #356
    Tweak poms so they work in IDEA as well
    Cleaning up poms
    Build passes with cucumber-deps
    Cleaning up poms
    Build passes with cucumber-deps
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.8
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.7
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.5
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Added cobertura code coverage and started to clean up some cruftiness in the io package
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.4
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0
          oe               .n~~%x.                .n~~%x.
        .@88             x88X   888.            x88X   888.
    ==*88888            X888X   8888L          X888X   8888L
       88888           X8888X   88888         X8888X   88888
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888f        88888X   88888f
       88888       .   48888X   88888     .   48888X   88888
       88888     .@8c   ?888X   8888"   .@8c   ?888X   8888"
       88888    '%888"   "88X   88*`   '%888"   "88X   88*`
    '**%%%%%%**   ^*       ^"==="`       ^*       ^"==="`
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC24
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC23
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC22
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC21
    Optimise imports
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC20
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC19
    Try release one more time
    Let's try that release again
    Optimize imports, format code
    Fix failing test. Format code. Convert CRLF to LF.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC16
    Set Mockito's scope to test
    
    Avoids it being inherited by end users of Cucumber (runtime).
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC15
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC13
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC12
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC11
    DRY up dependency versions
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC8
    Fix the version number appropriately
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC7
    Update version
    Bringing up the Junit pom to match the ivy dependency information
    Set project version correctly
    Re-adding the poms from before the ant/ivy stuff
    Dual build
    Added back poms - they are generated from ivy.xml (except the parent pom)
    Don't come back maven
    Maven hosed the previous release attempt.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC1
    Let's try to make a release
    Change dependencies so that full-jars don't bundle all jars (users are expected to provide them themselves). Closes #28.
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    Changed groupId to info.cukes, and prepended cucumber- to all artifacts. Added shade plugin, so all artifacts have a -full (self contained) jar. Closes #11.
    Fix version/newline/maven problems
    Fixed pom issues
    Added an example
    Cleaning poms from duplicate project versions.
    Moved stuff around
    More submodules
    More submodules, new Annotations.
    Better abstractions by bringing in Groovy
    Improved error message when feature file has syntax errors
    Moved the JUnit package and configured API docs
    Always fire that a test has finished, even when it's ignored.
    Moved the JUnit package and configured API docs
    Always fire that a test has finished, even when it's ignored.
    issue #322: fixed feature file indentation
    issue #322: patch using new Description factory method in JUnit 4.11
    Fix for CucumberException when running Cucumber with Jacoco code coverage. Closes #258.
    Cleaning out the closet
    Moved stuff around
    Much more modular
    Better abstractions by bringing in Groovy
    Disabled some tests, remove JRuby
    Move shit around
    Moved remaining annotations to cuke4duke.annotation package.
    Added new @Pending annotation that can be used as a substitute for Ruby-Cucumber's #pending method. Closes #13
    Rename packages from cucumber to cuke4duke
    Added ant build.xml for simple example. Some more renames
    Lots of restructuring and renaming. Ruby code is now packaged inside the jar. No more gem packaging.
    more maven wrestling
    Shuffle stuff around
    Using our own Java classes instead of
    Aviod passing null, improve message when missing feature path
    
    Overload CucumberFeature.load to avoid passing null and the need for
    null check. Improve the log message when no feature path is given at
    the command line.
    Return exit code 0 when no features are found
    
    Return exit code 0 when no features are found, or if no found features
    match the tags filter used. Print the same message, that is used in the
    currently thrown CucumberException when this occurs, as information
    before the summary printout.
    Remove redundant Locale argument in a bunch of places. Some reformatting.
    issue #322: patch using new Description factory method in JUnit 4.11
    Moved the JUnit package and configured API docs
    Always fire that a test has finished, even when it's ignored.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Fix failing test. Format code. Convert CRLF to LF.
    Fixed issue #211. JUnit Descriptions for steps now include the step number within the enclosing scenario, making them unique.
    Issue #2 Ensuring features are parsed before formatters are initialised
    Change some remaining Cucumber.Options to CucumberOptions
     is deprecated in favour of . Closes #549
    Return exit code 0 when no features are found
    
    Return exit code 0 when no features are found, or if no found features
    match the tags filter used. Print the same message, that is used in the
    currently thrown CucumberException when this occurs, as information
    before the summary printout.
    Improved error message when feature file has syntax errors
    issue #322: patch using new Description factory method in JUnit 4.11
    Moved the JUnit package and configured API docs
    Always fire that a test has finished, even when it's ignored.
    Fix several problems with resource loading for scripting languages (after the new classpath: scheme was introduced)
    Use a classpath: prefix if you want to load resources (features and stepdef scripts) from the classpath and not the file system. Should be a transparent change for JUnit users. See #312
    Fix for CucumberException when running Cucumber with Jacoco code coverage. Closes #258.
    Optimise imports
    Get featurePaths from runtimeOptions
    Giving another stab at #160
    Fix failing test. Format code. Convert CRLF to LF.
    Fail if no features are found. Closes #163
    Fix build
    Make build fail on purpose - see if jenkins emails us
    Rewrote a lot of the resource loading code
    Allow top level classes. Closes #62.
    Let JUnitReporter forward start/endOfScenarioLifeCycle to formatters
    
    Also the new formatter interface methods startOfSecnarioLifeCycle and
    endOfScenarioLifeCycle need to be forwarded to the formatters.
    Deprecated  in favour of .
    Moved the JUnit package and configured API docs
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Issue #196 mark steps and scenarios as failed when there are pending/undefined steps and --strict is enabled
    Optimise imports
    Mostly finished CLI refactoring
    Fix failing test. Format code. Convert CRLF to LF.
    Removed unnecessary javadoc in Tests
    Enhanced JUnit Reporting (mark Scenarios as failed if one of the scenario's steps fails)
    Moved the JUnit package and configured API docs
    Always fire that a test has finished, even when it's ignored.
    Moved the JUnit package and configured API docs
    Make sure examples are working. Should run them before each release.
    Scala fixes
    Upgrade deps, improve snippets.
    Added Jython support
    Moved stuff around
    Refactored SnippetGenerator.
    
    There was too much parallel effort in the CamelCase and Underscore
    implementations, so the new structure shares most of the logic
    and implements the different logic in a Concatenator.
    
    I also made sure IntelliJ doesn't break because of the new
    scenario lifecycle methods in the gherkin formatter interface.
    Refactored --snippet option. Closes #561, #302
    Always fire that a test has finished, even when it's ignored.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    UndefinedStepsTracker receives backends in getSnippets instead of ctor - this reduces coupling. Throw exception if there are no Backends. This might be the fix for #146
    Let JUnitReporter forward start/endOfScenarioLifeCycle to formatters
    
    Also the new formatter interface methods startOfSecnarioLifeCycle and
    endOfScenarioLifeCycle need to be forwarded to the formatters.
    added stub implementation for new formatter methods
    JUnit: Better check to see if an exception is pending
    JUnit: Better check to see if an exception is pending
    Custom Formatter/Reporter's  and  hook weren't run.
    Deprecated  in favour of .
    Moved the JUnit package and configured API docs
    Always fire that a test has finished, even when it's ignored.
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    Changes to work with gherkin's hook-reporting branch
    Upgrade to Gherkin 2.10.0
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Fix several problems with resource loading for scripting languages (after the new classpath: scheme was introduced)
    Fixing implementation errors regarding newer version of gherkin
    Issue #196 mark steps and scenarios as failed when there are pending/undefined steps and --strict is enabled
    Implementing the changes to the Gherkin stuff.
    
    It's reporting the appropriate exceptions now, not failures in the
    formatters.
    Addressing Issue#263: Eclipse JUnit reports inaccurate run count
    fireTestStarted should not occur when a test might be ignored.
    Optimise imports
    Mostly finished CLI refactoring
    Optimize imports, format code
    Embed text and images in reports. Closes #205.
    Enhanced JUnit Reporting (mark Scenarios as failed if one of the scenario's steps fails)
    Properly flush and close formatters. Closes #173
    Better JUnit hooks
    Tagged hooks are executed properly. Closes #146.
    Improved the way formatters are created - less reliance on obscure system properties.
    More tweaks to make #106 work properly. The JUnit integration is more complicated and fragile than I like.
    Snippets no longer come out of order, but in the order they were executed. Closes #57. No more snippet dupes. Closes #55.
    Don't close streams we don't create, and only close them once. Closes #96. Closes #105.
    Get rid of @author tags
    JUnit behaves better when a Before hook fails. Closes #106
    Do not fireTestFinished() if a test was previously fireTestIgnored(). Closes #73.
    Changes for gherkin 2.6.0. Will merge to master when gherkin has synced to maven central.
    Rename variable
    Better junit reporter. Still some issues with reporting.
    Make Scenario Outlines pass from CLI. Fixes #66.
    Optimize imports, reformat
    Scenario Outlines and Background are roughly working
    Started on background
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    JUnit delegates events to a secondary reporter (for example pretty or HTML) so we can get nice reports also when running from JUnit. Needs more work. See new TODOs.
    Work in progress, Added a SanityChecker JUnit listener that will verify that we fire events correctly. That should help us fix bugs in the junit integration.
    Updated to JUnit 4.11. Relates to #255. Might also relate to #322. IntelliJ IDEA reports features with Background and Scenario Outline incorrect.y. Might be the case on master too.
    issue #322: patch using new Description factory method in JUnit 4.11
    Moved the JUnit package and configured API docs
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Make sure Background steps are reported under the scenario they belong to. See #276
    Added a very ugly hack to work around junit 4.10's lack of unique id, making a future fix a drop-in replacement. Workaround for #225
    Use unique JUnit descriptions. Fixes #225, #211
    Fixed issue #211. JUnit Descriptions for steps now include the step number within the enclosing scenario, making them unique.
    Bugfix: Fixed Scenario Outlines for CLI. Closes #170
    Tagged hooks are executed properly. Closes #146.
    Fix junit's usage of runtime stuff
    rename world to glue
    this seems to complete the refactor
    
    There's probably much more that can be refactored to improve the calling mechanism
    
    World is created once in Runtime, and accessed from there
        runtime.getWorld();
    
    Oh yeah, need to unIgnore a test and fix it.
    Massive Refactor pulling world out to a higher level.
    
    It's still loading resources multiple times, but all but one of the existing tests
    pass. I'll have to rewrite how that test works, and it's ignored right now
    Rewrote a lot of the resource loading code
    More tweaks to make #106 work properly. The JUnit integration is more complicated and fragile than I like.
    Snippets no longer come out of order, but in the order they were executed. Closes #57. No more snippet dupes. Closes #55.
    JUnit behaves better when a Before hook fails. Closes #106
    Throw exceptions, don't return them.
    Better hooks
    gluePath is the best name I have come up with for 'class path or script path where stepdefs and hooks live'
    Added back codePaths that were temporarily disabled during Scenario Outline refactoring. Made html default CLI formatter since pretty is broken for scenario outline ATM.
    Use package scope
    Simplify junit runner by making it inherit from Suite
    Scenario Outlines and Background are roughly working
    Updated to JUnit 4.11. Relates to #255. Might also relate to #322. IntelliJ IDEA reports features with Background and Scenario Outline incorrect.y. Might be the case on master too.
    Moved the JUnit package and configured API docs
    Added a very ugly hack to work around junit 4.10's lack of unique id, making a future fix a drop-in replacement. Workaround for #225
    Use unique JUnit descriptions. Fixes #225, #211
    Tagged hooks are executed properly. Closes #146.
    rename world to glue
    this seems to complete the refactor
    
    There's probably much more that can be refactored to improve the calling mechanism
    
    World is created once in Runtime, and accessed from there
        runtime.getWorld();
    
    Oh yeah, need to unIgnore a test and fix it.
    gluePath is the best name I have come up with for 'class path or script path where stepdefs and hooks live'
    Added back codePaths that were temporarily disabled during Scenario Outline refactoring. Made html default CLI formatter since pretty is broken for scenario outline ATM.
    Use package scope
    Simplify junit runner by making it inherit from Suite
    Scenario Outlines and Background are roughly working
    Rename uri to featurePath, which is more explicit
    Updated to JUnit 4.11. Relates to #255. Might also relate to #322. IntelliJ IDEA reports features with Background and Scenario Outline incorrect.y. Might be the case on master too.
    Moved the JUnit package and configured API docs
    Fix several problems with resource loading for scripting languages (after the new classpath: scheme was introduced)
    Added a very ugly hack to work around junit 4.10's lack of unique id, making a future fix a drop-in replacement. Workaround for #225
    Use unique JUnit descriptions. Fixes #225, #211
    Tagged hooks are executed properly. Closes #146.
    rename world to glue
    this seems to complete the refactor
    
    There's probably much more that can be refactored to improve the calling mechanism
    
    World is created once in Runtime, and accessed from there
        runtime.getWorld();
    
    Oh yeah, need to unIgnore a test and fix it.
    Rewrote a lot of the resource loading code
    Moved the JUnit package and configured API docs
    Remove redundant Locale argument in a bunch of places. Some reformatting.
    Work in progress, Added a SanityChecker JUnit listener that will verify that we fire events correctly. That should help us fix bugs in the junit integration.
    Moved the JUnit package and configured API docs
    Always fire that a test has finished, even when it's ignored.
    Updated to JUnit 4.11. Relates to #255. Might also relate to #322. IntelliJ IDEA reports features with Background and Scenario Outline incorrect.y. Might be the case on master too.
    Moved the JUnit package and configured API docs
    Added a very ugly hack to work around junit 4.10's lack of unique id, making a future fix a drop-in replacement. Workaround for #225
    Use unique JUnit descriptions. Fixes #225, #211
    Optimize imports, format code
    Tagged hooks are executed properly. Closes #146.
    rename world to glue
    this seems to complete the refactor
    
    There's probably much more that can be refactored to improve the calling mechanism
    
    World is created once in Runtime, and accessed from there
        runtime.getWorld();
    
    Oh yeah, need to unIgnore a test and fix it.
    Massive Refactor pulling world out to a higher level.
    
    It's still loading resources multiple times, but all but one of the existing tests
    pass. I'll have to rewrite how that test works, and it's ignored right now
    Rewrote a lot of the resource loading code
    gluePath is the best name I have come up with for 'class path or script path where stepdefs and hooks live'
    Added back codePaths that were temporarily disabled during Scenario Outline refactoring. Made html default CLI formatter since pretty is broken for scenario outline ATM.
    Use package scope
    Simplify junit runner by making it inherit from Suite
    Scenario Outlines and Background are roughly working
    Minor refactoring
    Issue #2 Ensuring features are parsed before formatters are initialised
    Add hookpoints in Cucumber and GuiceFactory
    
    Use case: Create a subclass of Cucumber that creates a subclass of
    GuiceFactory that creates an injector that has the injector of the
    application being tested as its parent.
    That way:
    * The application stays in control of its own lifecycle (it can create its
       own injector), but steps are still scoped by scenario.
    * Step classes can get injected by dependencies from the application
    * The application's injector can be created once and shared between
       multiple scenarios to improve performance
    Report summaries and  in the same way as the CLI
    Remove duplication in Reflections implementations.
    
    Renamed Reflections to ClassFinder and removed generic methods.
    Created a new Reflections class that delegates to a ClassFinder.
     is deprecated in favour of . Closes #549
    Refactored --snippet option. Closes #561, #302
    Code review fixes
    Added snippet support to java and junit
    Add RuntimeOptions.isMonochrome(), rm Runtime factory methods
    
    Add RuntimeOptions.isMonochorme(), since commit 65f3bd6 on the master
    branch change RuntimeOptions to have private fields and getters.
    
    Basically revert commit c8feb10. Since the new android support on the
    master banch sends backends to the Runtime constructor, which
    previously only was done in tests, the change to use factory methods in
    Runtime no longer make sence.
    Refactor RuntimeOptions towards somthing that can be extracted as an interface. That will make it easier to provide multiple implementations.
    Minimize the number of constructors in the Runtime class
    
    To minimize the number of constructors in the Runtime class, and to
    handle that by default a UndefinedStepTracker is created and then
    injected both into the Runtime and the RuntimeGlue, create a factory
    method as the main entry. Expose additional conveniece factory methods
    for testing in the core module in RuntimeTest.
    Print summary at the end of the run
    
    Print the same kind of summary at the end of the run as Cucumber-Ruby:
    x Scenarios (x1 failed, x2 skipped, x3 pending, x4 undefined, x5 passed)
    y Steps (y1 failed, y2 skipped, y3 pending, y4 undefined, y5 passed)
    XmY.YYYs
    
    The new class SummaryCounter is used by the Runtime class to collect the
    data for the summary. The SummaryPrinter then let the SummaryCounter
    print the summary before the errors and the snippets. The printout from
    the SummaryPrinter is moved to after the printout from the formatters to
    make the summary printed after the progress or pretty printout.
    Added . Closes #418
    Moved the JUnit package and configured API docs
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    refs #233 run features/scenarios by name
    added --name argument to specify a pattern to match a scenario or feature name
    Use a classpath: prefix if you want to load resources (features and stepdef scripts) from the classpath and not the file system. Should be a transparent change for JUnit users. See #312
    Ability to specify line numbers
    Issue #196 mark steps and scenarios as failed when there are pending/undefined steps and --strict is enabled
    Added --monochrome flag, allowing monochrome output for certain formatters
    Use unique JUnit descriptions. Fixes #225, #211
    Fix for CucumberException when running Cucumber with Jacoco code coverage. Closes #258.
    Added format attribute to @Cucumber.Options. Updated Selenium screenshot example, which should obsolete the need for change requested in #247
    Mostly finished CLI refactoring
    Ensure sensible defaults for junit
    Add dry run
    Get featurePaths from runtimeOptions
    Get gluePath from runtimeOptions
    Get dryRun from runtimeOptions
    Giving another stab at #160
    Properly flush and close formatters. Closes #173
    Tagged hooks are executed properly. Closes #146.
    Pass in ClassLoader from the outside. This is necessary in order to construct a working Runtime from a different environment, like Jython. See #151
    Removed OneTimeResourceLoader and made sure glue code is loaded only once. The Backend.loadGlue method should ideally be removed, and the World and gluePaths passed to each Backend's constructor. Other TODOs on this branch: rename World to Glue. RuntimeGlue should not have a ref back to Runtime. Make Scala work again (disabled it because I don't have the required Scala fu)
    this seems to complete the refactor
    
    There's probably much more that can be refactored to improve the calling mechanism
    
    World is created once in Runtime, and accessed from there
        runtime.getWorld();
    
    Oh yeah, need to unIgnore a test and fix it.
    Improved the way formatters are created - less reliance on obscure system properties.
    Load resoureces from classpath when using JUnit, load them from filesystem when using CLI
    Rewrote a lot of the resource loading code
    Throw exception if @RunWith(Cucumber.class) classes have methods. Closes #77.
    Allow top level classes. Closes #62.
    Print exceptions at the end of run (regardless of what formatter is used). Exit with non-0 exit status if there are errors. Closes #71
    gluePath is the best name I have come up with for 'class path or script path where stepdefs and hooks live'
    Added back codePaths that were temporarily disabled during Scenario Outline refactoring. Made html default CLI formatter since pretty is broken for scenario outline ATM.
    Optimize imports, reformat
    Some renames and comments
    Simplify junit runner by making it inherit from Suite
    Scenario Outlines and Background are roughly working
    More work on background
    Simplified improved snippet code, removed hamcrest (not a huge fan).
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    JUnit delegates events to a secondary reporter (for example pretty or HTML) so we can get nice reports also when running from JUnit. Needs more work. See new TODOs.
    Added Jython support
    Pass several script paths/packages to the Backend constructors. (We can't have a backend per package/script path, because code in backend A would not be able to talk to code in backend B)
    Fixes #31 support adding additional scan paths through @Feature.
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    Renamed packages. Started work on line support - needs more work.
    Added a --tags CLI option
    Added tags and lines attributes to @Feature, making it possible to run a single scenario (or just some)
    Fix version/newline/maven problems
    Ambiguous matches are now reported correctly. Snippets are printed from CLI.
    Take Locale from Gherkin feature instead of Step Definition. Make an outer Java class for each annotation - makes imports nicer (No more @EN.Given). Moved Java annotation code to java project.
    Reformatted code and optimized imports with IntelliJ (default settings).
    Started on a CLI as an alternative to JUnit. This is necessary for other JVM languages that don't use JUnit (Clojure for example). Currently using some of the JUnit classes - will decouple this later.
    All core cucumber-features are passing except one
    Our first cucumber-features scenario is passing.
    Moved stuff around
    WIP - broke a lot of stuff
    JUnit integration getting there...
    Updated docs and added scripts for API docs
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.6
    Simplify i18n build. Thanks @robertoandrade - ref #487
    Make JRuby module build alongside rbenv
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.5
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.4
    Don't shade jruby/jython/groovy artifacts - only for native packages (gem,egg,zip). Closes #518, #522.
    Don't attempt to publish jruby gem from Travis
    Got rid of Maven Shade Plugin wherever it was possible.
    
    Artefacts which still have need to use the plugin:
    
        - cucumber-groovy
        - cucumber-jython
        - cucumber-jruby
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.0
    Some last minute fixes before the 1.1.0 release.
    I18n stepdefs.  or other language. Closes #177.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.13
    Release 1.0.13 with better packaging
    increase version to prepare for next development iteration:
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.12
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.11
    Undo bad changes I mkade in bbe40d3d451703f41ef36d16415144268d6ff72a while fixing #356
    Fix tests that broke in #356
    Tweak poms so they work in IDEA as well
    Maven fun
    Struggling with shading and the deps.
    Cleaning up poms
    Build passes with cucumber-deps
    Cleaning up poms
    Build passes with cucumber-deps
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.8
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.7
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.5
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Added cobertura code coverage and started to clean up some cruftiness in the io package
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.4
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0
          oe               .n~~%x.                .n~~%x.
        .@88             x88X   888.            x88X   888.
    ==*88888            X888X   8888L          X888X   8888L
       88888           X8888X   88888         X8888X   88888
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888f        88888X   88888f
       88888       .   48888X   88888     .   48888X   88888
       88888     .@8c   ?888X   8888"   .@8c   ?888X   8888"
       88888    '%888"   "88X   88*`   '%888"   "88X   88*`
    '**%%%%%%**   ^*       ^"==="`       ^*       ^"==="`
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC24
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC23
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC22
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC21
    Ease RuntimeOptions into the Runtime API
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC20
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC19
    Try release one more time
    Let's try that release again
    Optimize imports, format code
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC16
    Ambiguous step definitions don't cause Cucumber to blow up, they just fail the step. Fixed #206, but broke the native groovy CLI runner, which I had to disable - see #212
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC15
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC13
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC12
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC11
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC10
    Adding installation of jruby-openssl gem
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC9
    Fix broken gem publishing
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC8
    mvn clean removes gems. Closes #153
    Fix the version number appropriately
    Revert "copy the jar at the pre-integration-test phase, as that's what we're using the copied jar for"
    
    Doh! Apparently we're using the copied jar also to build the gem!
    
    This reverts commit efc8ed210d6c4801f504ba1a5a14ef9ded51df43.
    copy the jar at the pre-integration-test phase, as that's what we're using the copied jar for
    Run Groovy CLI tests
    The ruby gem is properly built - except that the shade plugin for some strange reason add rhino.
    Properly place items in phases that make more sense
    
    Got rid of the deploy-gem profile in favor of it being in the right spot and executing by default
    if there are others that don't want to deploy a gem, they can just hax it out :D
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC7
    Update version
    ignore the lib directory, add cleaning to the lib directory
    
    Move the CLI test to the integration test phase, to ensure that we're testing against a packaged artifact :D
    got the Jruby Automation in there
    
    There's a profile to deploy the gemfile which I can't really test, but should work
    Set project version correctly
    Re-adding the poms from before the ant/ivy stuff
    Dual build
    Added back poms - they are generated from ivy.xml (except the parent pom)
    Don't come back maven
    Upgrade deps, improve snippets.
    Added standalone script for Groovy
    Maven hosed the previous release attempt.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC1
    Let's try to make a release
    Don't fail if full jar isn't built
    Started on gem packaging for jruby module
    Added back codePaths that were temporarily disabled during Scenario Outline refactoring. Made html default CLI formatter since pretty is broken for scenario outline ATM.
    Change dependencies so that full-jars don't bundle all jars (users are expected to provide them themselves). Closes #28.
    JRuby: Fix require not working because of lack of standard libraries.
    
    The org.jruby.jruby maven dependency only gives you a barebones JRuby
    interpreter - much of the ruby "standard library" is not available
    within the package. jruby-complete gives you the same interpreter but
    adds the "standard library" which is packaged inside the JAR.
    
    Obviously this comes at a price (current jruby-complete is about 10mb)
    but to do anything proper wrt to Jruby steps I would think it is
    necessary to at least have the standard lib.
    
    Could perhaps be worthwhile investigating whether to cut it down a bit,
    but for now this fixes the "requires" problem in Issue #3.
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    Changed groupId to info.cukes, and prepended cucumber- to all artifacts. Added shade plugin, so all artifacts have a -full (self contained) jar. Closes #11.
    Added JRuby support. Closes #3.
    Fix version/newline/maven problems
    Fixed pom issues
    Added an example
    Cleaning poms from duplicate project versions.
    Moved stuff around
    More submodules
    More submodules, new Annotations.
    Better abstractions by bringing in Groovy
    Don't shade jruby/jython/groovy artifacts - only for native packages (gem,egg,zip). Closes #518, #522.
    Release 1.0.13 with better packaging
    The ruby gem is properly built - except that the shade plugin for some strange reason add rhino.
    Release 1.0.0.RC4
    Release the gem
    Rewrote a lot of the resource loading code
    Started on gem packaging for jruby module
    Updated docs and added scripts for API docs
    ignore the lib directory, add cleaning to the lib directory
    
    Move the CLI test to the integration test phase, to ensure that we're testing against a packaged artifact :D
    Rewrote a lot of the resource loading code
    Override Cucumber Options via  or cucumber-jvm.properties as well as -Dcucumber.options
    [JRuby]  and  can be set in env var, system property or  resource bundle.
    JRuby 1.7
    Help text for CLI. Closes #142.
    Adding documentation about the cucumber-jruby.properties file
    Build jruby jarjar
    JRuby is easy to use now. Closes #79
    JRuby correctly loads from file system (not classpath)
    Rewrote a lot of the resource loading code
    Added a progress formatter and made it the default. New iml files that get updated more easily.
    cucumber-jruby is somewhat runnable from the CLI
    Don't shade jruby/jython/groovy artifacts - only for native packages (gem,egg,zip). Closes #518, #522.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Release 1.0.13 with better packaging
    Build jruby jarjar
    Rewrote a lot of the resource loading code
    Started on gem packaging for jruby module
    [JRuby]  and  can be set in env var, system property or  resource bundle.
    Tagged hooks for JRuby. Fixes #467.
    Much improved JRuby DSL. No more leaking into global scope. Calling steps from stepefs now uses the  method.
    JRuby 1.7
    Refactored the StepDefinition interface so that backends for dynamic languages can infer the type of a parameter based on the actual argument type passed to it.
    Big refactoring in table conversion land
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Ease RuntimeOptions into the Runtime API
    Test that fails run from CLI, but passes in junit
    adding the ability to call a step from another, and pass the table to it
    
    WHEE
    Make a more informative exception in case an undefined step is invoked from a stepdef
    Implemented the rest of the jruby parts to make calling step definitions actually work
    Support for things that are pending without a reason
    
    Whoops
    Adding a pending dsl to be able to define a step as pending
    Adding the ability to call a step definition from a different step
    Added a progress formatter and made it the default. New iml files that get updated more easily.
    Indentation and minor cleanup
    JRuby: Fix for optional arguments in step definitions.
    
    An optional regex argument should be handled correctly, for example:
    
            Given ^/Something( with an optional argument)?$/ do |arg|
            end
    
    If the regex can match the first argument, the value should be passed
    through. If it cannot, the regex match is still succesfull, and the arg
    needs to have a placeholder value - nil in JRuby's case.
    
    Previously, the .newString() call in JRubyStepDefinition would explode
    in the execute() method where the arguments are converted from the
    Object [] array to IRubyObjects.
    
    A simple check-for-null seems to fix the problem.
    Added JRuby support. Closes #3.
    Add Scenario.source_tag_names to work with Capybara. Closes #504.
    Tagged hooks for JRuby. Fixes #467.
    Ease RuntimeOptions into the Runtime API
    Making a ruby file that causes things to explode when it's loaded multiple times.
    I18n stepdefs.  or other language. Closes #177.
    Much improved JRuby DSL. No more leaking into global scope. Calling steps from stepefs now uses the  method.
    JRuby 1.7
    Test that fails run from CLI, but passes in junit
    adding the ability to call a step from another, and pass the table to it
    
    WHEE
    Make a more informative exception in case an undefined step is invoked from a stepdef
    Implemented the rest of the jruby parts to make calling step definitions actually work
    Support for things that are pending without a reason
    
    Whoops
    Adding a pending dsl to be able to define a step as pending
    Adding the ability to call a step definition from a different step
    Upgrade IDEA modules (and tweak test)
    JRuby: Fix require not working because of lack of standard libraries.
    
    The org.jruby.jruby maven dependency only gives you a barebones JRuby
    interpreter - much of the ruby "standard library" is not available
    within the package. jruby-complete gives you the same interpreter but
    adds the "standard library" which is packaged inside the JAR.
    
    Obviously this comes at a price (current jruby-complete is about 10mb)
    but to do anything proper wrt to Jruby steps I would think it is
    necessary to at least have the standard lib.
    
    Could perhaps be worthwhile investigating whether to cut it down a bit,
    but for now this fixes the "requires" problem in Issue #3.
    Indentation and minor cleanup
    JRuby: Fix for optional arguments in step definitions.
    
    An optional regex argument should be handled correctly, for example:
    
            Given ^/Something( with an optional argument)?$/ do |arg|
            end
    
    If the regex can match the first argument, the value should be passed
    through. If it cannot, the regex match is still succesfull, and the arg
    needs to have a placeholder value - nil in JRuby's case.
    
    Previously, the .newString() call in JRubyStepDefinition would explode
    in the execute() method where the arguments are converted from the
    Object [] array to IRubyObjects.
    
    A simple check-for-null seems to fix the problem.
    Added Jython support
    Added JRuby support. Closes #3.
    Align snippets for quoted arguments with cucumber-ruby
    New Snippet text, closes #618.
    
    Change to the new Snippet text. Update History.md.
    Fix a one off error in JRubySnippet.java.
    Moved the JUnit package and configured API docs
    Much improved JRuby DSL. No more leaking into global scope. Calling steps from stepefs now uses the  method.
    JRuby 1.7
    Refactored the StepDefinition interface so that backends for dynamic languages can infer the type of a parameter based on the actual argument type passed to it.
    Big refactoring in table conversion land
    Rename uri to featurePath, which is more explicit
    Tagged hooks for JRuby. Fixes #467.
    I18n stepdefs.  or other language. Closes #177.
    Much improved JRuby DSL. No more leaking into global scope. Calling steps from stepefs now uses the  method.
    JRuby 1.7
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Refactored the StepDefinition interface so that backends for dynamic languages can infer the type of a parameter based on the actual argument type passed to it.
    Changes to work with gherkin's hook-reporting branch
    Use I18n instead of Locale since converting from Locale to I18n is tricky.
    adding the ability to call a step from another, and pass the table to it
    
    WHEE
    Modification to the Jruby world stuff caching mechanism
    
    This enables World do ... end blocks to also be applied to each new world object
    that comes along
    Make a more informative exception in case an undefined step is invoked from a stepdef
    Add a World method so that things like rspec can extend self
    
    Example:
    World do
      # this step is required to glue in the RSpec Matchers to make it all work
      self.extend(::RSpec::Matchers)
    end
    Implemented the rest of the jruby parts to make calling step definitions actually work
    Use caller[0] to get the location the step was called from
    Revert "Bring the URI forward to the step evaluation too."
    
    This reverts commit 1851bfe0c56c8abd223ad25a57988c76d0c66396.
    Bring the URI forward to the step evaluation too.
    
    This doesn't smell right, there must be something I'm doing entirely wrong.
    Cleanup of unecessary things
    Working on being able to call a step from another step
    Support for things that are pending without a reason
    
    Whoops
    Adding a pending dsl to be able to define a step as pending
    Lets not commit the comments...
    Adding the ability to call a step definition from a different step
    Added initial support for Before and After hooks.
    Added initial support for Before and After hooks.
    Added Jython support
    Added JRuby support. Closes #3.
    Refactored SnippetGenerator.
    
    There was too much parallel effort in the CamelCase and Underscore
    implementations, so the new structure shares most of the logic
    and implements the different logic in a Concatenator.
    
    I also made sure IntelliJ doesn't break because of the new
    scenario lifecycle methods in the gherkin formatter interface.
    Rename uri to featurePath, which is more explicit
    Override Cucumber Options via  or cucumber-jvm.properties as well as -Dcucumber.options
    Refactored --snippet option. Closes #561, #302
    Tagged hooks for JRuby. Fixes #467.
    [JRuby]  and  can be set in env var, system property or  resource bundle.
    Fixing the CompatVersion for the JrubyBackend
    
    Closes #415
    Deprecated  in favour of .
    Much improved JRuby DSL. No more leaking into global scope. Calling steps from stepefs now uses the  method.
    JRuby 1.7
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Fix several problems with resource loading for scripting languages (after the new classpath: scheme was introduced)
    Fixed some regressions to glue code introduced in 1.0.2. Might fix issue #299, but that's not confirmed.
    UTF-8 everywhere. Closes #251
    Mostly finished CLI refactoring
    Use I18n instead of Locale since converting from Locale to I18n is tricky.
    Adding a way to load stuff into world
    
    In my specific example, RSpec matchers
    Created an UnreportedStepExecutor interface
    
    I don't like that this current implementation passes the Runtime into the backends
    It shouldn't. So I used the interface, so hopefully at some point, refactoring in the
    future won't suck.
    
    It passes all unit tests.
    rename world to glue
    Removed OneTimeResourceLoader and made sure glue code is loaded only once. The Backend.loadGlue method should ideally be removed, and the World and gluePaths passed to each Backend's constructor. Other TODOs on this branch: rename World to Glue. RuntimeGlue should not have a ref back to Runtime. Make Scala work again (disabled it because I don't have the required Scala fu)
    Take out the TODO, because it's TODONE!
    Revert "caching of the step definitions"
    
    This reverts commit 321c656e3e4e4de9ae7d33e019288f2d43fff4fa.
    
    Conflicts:
    
            jruby/src/main/java/cucumber/runtime/jruby/JRubyBackend.java
    
    Resolved the conflicts and this removes all the magic sauce that I had in the JRubyBackend
    to cache step definitions that is now in the super_happy_fun_world_branch
    Replace inheritance with delegation for #138
    adding the ability to call a step from another, and pass the table to it
    
    WHEE
    Modification to the Jruby world stuff caching mechanism
    
    This enables World do ... end blocks to also be applied to each new world object
    that comes along
    caching of the step definitions
    
    This is done because the jruby scripting engine is created once, but world is created multiple times.
    The world object is created once per scenario, and so the ruby files need to be reparsed every time to
    load in the step definitions into world.
    
    This is quite inefficient, and makes for lots of noise on the jruby side if you've got supporting ruby
    files that you're using in your step definitions.
    
    A better solution would be to refactor cucumber-jvm core to have world only be created once.
    Another solutino would be to recreate the jruby scripting container each time so that the warnings
    are gone. But then we're recreating a jruby scripting container each time and that can make things very slow.
    Converted it to use a ResourceBundle. Much cleaner.
    Need to prevent jruby from loading things multiple times
    Make a more informative exception in case an undefined step is invoked from a stepdef
    Added some properties file parsing magic for the JrubyBackend
    
    This allows a cucumber-jruby.properties file to be specified
    
    Property values:
     * GEM_PATH to configure a path to load ruby gems from
     * RUBY_VERSION to tell JRuby which version of ruby you want to use
       - 1.9 selects ruby 1.9 anything else uses 1.8
    Refactoring out the Reporter from the step call
    
    Created a new method, runUnreportedStep, that simply grabs the step out of a match,
    throwing an exception if it does not match, and executes it.
    
    All the exceptions are required to trickle up so that they're caught by the step that
    does the actual execution so that things look right in the output.
    
    A snippit will be generated if you call a non existing step, so that's handy :)
    This makes the appropriate step call, now the problem exists in cucumber-junit
    Revert "Bring the URI forward to the step evaluation too."
    
    This reverts commit 1851bfe0c56c8abd223ad25a57988c76d0c66396.
    Bring the URI forward to the step evaluation too.
    
    This doesn't smell right, there must be something I'm doing entirely wrong.
    Cleanup of unecessary things
    Working on being able to call a step from another step
    Don't hand world through
    
    "Passing the world object would give self access to more than it should"
    Load resoureces from classpath when using JUnit, load them from filesystem when using CLI
    Adding a pending dsl to be able to define a step as pending
    Adding the ability to call a step definition from a different step
    All tests passing, ut still not good
    Rewrote a lot of the resource loading code
    automatic merge failed. corrected
    Indentation
    Added initial support for Before and After hooks.
    Added initial support for Before and After hooks.
    gluePath is the best name I have come up with for 'class path or script path where stepdefs and hooks live'
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    Pass several script paths/packages to the Backend constructors. (We can't have a backend per package/script path, because code in backend A would not be able to talk to code in backend B)
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    gh-9 Clean up tabs in last commit
    gh-9 Very basic Java implementation of hooks
    Renamed packages. Started work on line support - needs more work.
    Added JRuby support. Closes #3.
    Much improved JRuby DSL. No more leaking into global scope. Calling steps from stepefs now uses the  method.
    Much improved JRuby DSL. No more leaking into global scope. Calling steps from stepefs now uses the  method.
    New Snippet text, closes #618.
    
    Change to the new Snippet text. Update History.md.
    Fix a one off error in JRubySnippet.java.
    Snippets for DataTable include a hint about using List<YourType>, so people discover this neat technique
    Replace inheritance with delegation for #138
    Reenabled Scala
    Upgrade deps, improve snippets.
    added pending to the snippit generation string
    Simplified improved snippet code, removed hamcrest (not a huge fan).
    Misc cleanup
    Added JRuby support. Closes #3.
    Reformatted code and optimized imports with IntelliJ (default settings).
    Moved stuff around
    WIP - broke a lot of stuff
    Added snippet support for all languages.
    Remove warnings and deprecated code
    Much improved JRuby DSL. No more leaking into global scope. Calling steps from stepefs now uses the  method.
    Improved Transformer API
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Add support for List step definition parameters
    Build passes with cucumber-deps
    Pass a SingleValueConverter to ParameterType
    Build passes with cucumber-deps
    Pass a SingleValueConverter to ParameterType
    Refactored the StepDefinition interface so that backends for dynamic languages can infer the type of a parameter based on the actual argument type passed to it.
    Big refactoring in table conversion land
    Show code source for Java step definitions in case of duplicates or ambiguous stepdefs.
    Use I18n instead of Locale since converting from Locale to I18n is tricky.
    Pass through the DataTable if there's one
    Implemented the rest of the jruby parts to make calling step definitions actually work
    Revert "Bring the URI forward to the step evaluation too."
    
    This reverts commit 1851bfe0c56c8abd223ad25a57988c76d0c66396.
    Bring the URI forward to the step evaluation too.
    
    This doesn't smell right, there must be something I'm doing entirely wrong.
    Working on being able to call a step from another step
    Tagged (scoped) step definitions are reverted. Bad idea.
    Step Deinitions can be scoped by tag (just like hooks). Currently only implemented for Java.
    Date format can be specified with a @DateFormat annotation
    Refactoring to capture more info about types
    Fix broken conversion of table to List<Map<String,String>>. Addresses @nightscape's comment in #49.
    JRuby: Fix for optional arguments in step definitions.
    
    An optional regex argument should be handled correctly, for example:
    
            Given ^/Something( with an optional argument)?$/ do |arg|
            end
    
    If the regex can match the first argument, the value should be passed
    through. If it cannot, the regex match is still succesfull, and the arg
    needs to have a placeholder value - nil in JRuby's case.
    
    Previously, the .newString() call in JRubyStepDefinition would explode
    in the execute() method where the arguments are converted from the
    Object [] array to IRubyObjects.
    
    A simple check-for-null seems to fix the problem.
    Moved table conversion logic from java to core
    All building/passing except scala
    Misc changes to bring in XStream to do some of the heavy object conversion lifting
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    Working on Issue #19
    Added the possibility to process tables.
    Added a @JavaBeanClass annotation to allow passing list of beans to
    Steps.
    Working on Issue #9
    Added the possibility to process tables.
    Added a @JavaBeanClass annotation to allow passing list of beans to
    Steps.
    Added JRuby support. Closes #3.
    Upgrade to gherkin 2.12.0
    Remove redundant Locale argument in a bunch of places. Some reformatting.
    Much improved JRuby DSL. No more leaking into global scope. Calling steps from stepefs now uses the  method.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Changes to work with gherkin's hook-reporting branch
    Fix tagged hooks for scenario outlines. Closes #209, closes #210
    Actually send the ScenarioResult to the ruby call
    Indentation
    Corrected indentation to spaces
    Added initial support for Before and After hooks.
    Corrected indentation to spaces
    Added initial support for Before and After hooks.
    Moved the JUnit package and configured API docs
    Moved the JUnit package and configured API docs
    Updated docs and added scripts for API docs
    Updated docs and added scripts for API docs
    Updated docs and added scripts for API docs
    Updated docs and added scripts for API docs
    Updated docs and added scripts for API docs
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.5
    Before and After hooks support added to Rhino
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.4
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.0
    Some last minute fixes before the 1.1.0 release.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.13
    Release 1.0.13 with better packaging
    increase version to prepare for next development iteration:
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.12
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.11
    Undo bad changes I mkade in bbe40d3d451703f41ef36d16415144268d6ff72a while fixing #356
    Fix tests that broke in #356
    Tweak poms so they work in IDEA as well
    Maven fun
    Bump versions
    Cleaning up poms
    Build passes with cucumber-deps
    Bump versions
    Cleaning up poms
    Build passes with cucumber-deps
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.8
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.7
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.5
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Added cobertura code coverage and started to clean up some cruftiness in the io package
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.4
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0
          oe               .n~~%x.                .n~~%x.
        .@88             x88X   888.            x88X   888.
    ==*88888            X888X   8888L          X888X   8888L
       88888           X8888X   88888         X8888X   88888
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888f        88888X   88888f
       88888       .   48888X   88888     .   48888X   88888
       88888     .@8c   ?888X   8888"   .@8c   ?888X   8888"
       88888    '%888"   "88X   88*`   '%888"   "88X   88*`
    '**%%%%%%**   ^*       ^"==="`       ^*       ^"==="`
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC24
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC23
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC22
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC21
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC20
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC19
    Try release one more time
    Let's try that release again
    Optimize imports, format code
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC16
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC15
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC13
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC12
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC11
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC8
    Fix the version number appropriately
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC7
    Update version
    Set project version correctly
    Re-adding the poms from before the ant/ivy stuff
    Dual build
    Added back poms - they are generated from ivy.xml (except the parent pom)
    Don't come back maven
    Upgrade deps, improve snippets.
    Maven hosed the previous release attempt.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC1
    Let's try to make a release
    Change dependencies so that full-jars don't bundle all jars (users are expected to provide them themselves). Closes #28.
    Changed groupId to info.cukes, and prepended cucumber- to all artifacts. Added shade plugin, so all artifacts have a -full (self contained) jar. Closes #11.
    Fix version/newline/maven problems
    Fixed pom issues
    Added an example
    Cleaning poms from duplicate project versions.
    Moved stuff around
    More submodules
    More submodules, new Annotations.
    Better abstractions by bringing in Groovy
    Tab indentation replaced with spaces
    Before and After hooks support added to Rhino
    Tab indentation replaced with spaces
    Before and After hooks support added to Rhino
    World function implemented properly
    Before and After hooks support added to Rhino
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Upgrade deps, improve snippets.
    Added back codePaths that were temporarily disabled during Scenario Outline refactoring. Made html default CLI formatter since pretty is broken for scenario outline ATM.
    Added Jython support
    Added JRuby support. Closes #3.
    World can now receive both a build and dispose function
    World function implemented properly
    Typo fixed
    Tab indentation replaced with spaces
    Before and After hooks support added to Rhino
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Upgrade deps, improve snippets.
    Added back codePaths that were temporarily disabled during Scenario Outline refactoring. Made html default CLI formatter since pretty is broken for scenario outline ATM.
    Moved stuff around
    Added snippet support for all languages.
    Much more modular
    Sort of got Rhino working
    Rhino: Simplify test. Make sure it fails is nothing is thrown.
    Timeout is a long, not int. Be explicit that it's millis.
    Tab indentation replaced with spaces
    Before and After hooks support added to Rhino
    Align snippets for quoted arguments with cucumber-ruby
    New Snippet text, closes #618.
    
    Change to the new Snippet text. Update History.md.
    Fix a one off error in JRubySnippet.java.
    Refactored --snippet option. Closes #561, #302
    Deprecated  in favour of .
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Update all snippets to throw PendingException, following up on #271. Need to make Clojure do this.
    Replace inheritance with delegation for #138
    Upgrade deps, improve snippets.
    Before and After hooks support added to Rhino
    Moved the JUnit package and configured API docs
    Scala fixes
    Upgrade deps, improve snippets.
    Added Jython support
    Moved stuff around
    World can now receive both a build and dispose function
    World function implemented properly
    rhino: Remove global variable
    Tab indentation replaced with spaces
    Before and After hooks support added to Rhino
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Update all snippets to throw PendingException, following up on #271. Need to make Clojure do this.
    Optimize imports, format code
    Added back codePaths that were temporarily disabled during Scenario Outline refactoring. Made html default CLI formatter since pretty is broken for scenario outline ATM.
    Fix version/newline/maven problems
    Ambiguous matches are now reported correctly. Snippets are printed from CLI.
    Moved stuff around
    Clojure is working again
    Much more modular
    Sort of got Rhino working
    Timeout is a long, not int. Be explicit that it's millis.
    Remove unused method
    Tab indentation replaced with spaces
    Before and After hooks support added to Rhino
    Refactored SnippetGenerator.
    
    There was too much parallel effort in the CamelCase and Underscore
    implementations, so the new structure shares most of the logic
    and implements the different logic in a Concatenator.
    
    I also made sure IntelliJ doesn't break because of the new
    scenario lifecycle methods in the gherkin formatter interface.
    World can now receive both a build and dispose function
    World function implemented properly
    Timeout is a long, not int. Be explicit that it's millis.
    Tab indentation replaced with spaces
    Before and After hooks support added to Rhino
    Refactored --snippet option. Closes #561, #302
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Fix several problems with resource loading for scripting languages (after the new classpath: scheme was introduced)
    Optimize import
    Fixed some regressions to glue code introduced in 1.0.2. Might fix issue #299, but that's not confirmed.
    UTF-8 everywhere. Closes #251
    Created an UnreportedStepExecutor interface
    
    I don't like that this current implementation passes the Runtime into the backends
    It shouldn't. So I used the interface, so hopefully at some point, refactoring in the
    future won't suck.
    
    It passes all unit tests.
    rename world to glue
    Removed OneTimeResourceLoader and made sure glue code is loaded only once. The Backend.loadGlue method should ideally be removed, and the World and gluePaths passed to each Backend's constructor. Other TODOs on this branch: rename World to Glue. RuntimeGlue should not have a ref back to Runtime. Make Scala work again (disabled it because I don't have the required Scala fu)
    Replace inheritance with delegation for #138
    More Windows fixes. #126
    Upgrade deps, improve snippets.
    Load resoureces from classpath when using JUnit, load them from filesystem when using CLI
    All tests passing, ut still not good
    Rewrote a lot of the resource loading code
    gluePath is the best name I have come up with for 'class path or script path where stepdefs and hooks live'
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    Pass several script paths/packages to the Backend constructors. (We can't have a backend per package/script path, because code in backend A would not be able to talk to code in backend B)
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    gh-9 Clean up tabs in last commit
    gh-9 Very basic Java implementation of hooks
    Renamed packages. Started work on line support - needs more work.
    Ambiguous matches are now reported correctly. Snippets are printed from CLI.
    Take Locale from Gherkin feature instead of Step Definition. Make an outer Java class for each annotation - makes imports nicer (No more @EN.Given). Moved Java annotation code to java project.
    Started on a CLI as an alternative to JUnit. This is necessary for other JVM languages that don't use JUnit (Clojure for example). Currently using some of the JUnit classes - will decouple this later.
    All core cucumber-features are passing except one
    Adding locale in StepDefinition in order to transform arguments. It
    would be better to have locale set on an higher level, for instance
    Feature.
    Moved stuff around
    WIP - broke a lot of stuff
    JUnit integration getting there...
    Added snippet support for all languages.
    Closer to correct scenario outline implementation. Need to make sure it works with multiple Examples under one Scenario Outline.
    More on snippets
    Added a java-specific TCK to test various DI containers
    If you write code that forces me to check your exceptions, then I will rip off your head and piss in your dead skull.
    Clojure is working again
    Fix Rhino
    Much more modular
    More submodules
    Sort of got Rhino working
    Remove warnings and deprecated code
    Improved Transformer API
    Add support for List step definition parameters
    Build passes with cucumber-deps
    Pass a SingleValueConverter to ParameterType
    Build passes with cucumber-deps
    Pass a SingleValueConverter to ParameterType
    Refactored the StepDefinition interface so that backends for dynamic languages can infer the type of a parameter based on the actual argument type passed to it.
    Show code source for Java step definitions in case of duplicates or ambiguous stepdefs.
    Update all snippets to throw PendingException, following up on #271. Need to make Clojure do this.
    Use I18n instead of Locale since converting from Locale to I18n is tricky.
    Refactoring out the Reporter from the step call
    
    Created a new method, runUnreportedStep, that simply grabs the step out of a match,
    throwing an exception if it does not match, and executes it.
    
    All the exceptions are required to trickle up so that they're caught by the step that
    does the actual execution so that things look right in the output.
    
    A snippit will be generated if you call a non existing step, so that's handy :)
    Revert "Bring the URI forward to the step evaluation too."
    
    This reverts commit 1851bfe0c56c8abd223ad25a57988c76d0c66396.
    Bring the URI forward to the step evaluation too.
    
    This doesn't smell right, there must be something I'm doing entirely wrong.
    Refactor to change the execut method to include Reporter and Locale
    Tagged (scoped) step definitions are reverted. Bad idea.
    Step Deinitions can be scoped by tag (just like hooks). Currently only implemented for Java.
    Date format can be specified with a @DateFormat annotation
    Refactoring to capture more info about types
    Fix broken conversion of table to List<Map<String,String>>. Addresses @nightscape's comment in #49.
    Added Jython support
    Implement Table.asList(Class itemType). Clean up imports
    Moved table conversion logic from java to core
    All building/passing except scala
    Misc changes to bring in XStream to do some of the heavy object conversion lifting
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    Working on Issue #19
    Added the possibility to process tables.
    Added a @JavaBeanClass annotation to allow passing list of beans to
    Steps.
    Working on Issue #9
    Added the possibility to process tables.
    Added a @JavaBeanClass annotation to allow passing list of beans to
    Steps.
    Ambiguous matches are now reported correctly. Snippets are printed from CLI.
    Take Locale from Gherkin feature instead of Step Definition. Make an outer Java class for each annotation - makes imports nicer (No more @EN.Given). Moved Java annotation code to java project.
    Reformatted code and optimized imports with IntelliJ (default settings).
    Adding locale in StepDefinition in order to transform arguments. It
    would be better to have locale set on an higher level, for instance
    Feature.
    Moved stuff around
    WIP - broke a lot of stuff
    If you write code that forces me to check your exceptions, then I will rip off your head and piss in your dead skull.
    Clojure is working again
    More submodules
    Ioke passing
    Sort of got Rhino working
    Deprecated  in favour of .
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Update all snippets to throw PendingException, following up on #271. Need to make Clojure do this.
    Snippets for DataTable include a hint about using List<YourType>, so people discover this neat technique
    Replace inheritance with delegation for #138
    Moved the JUnit package and configured API docs
    Moved the JUnit package and configured API docs
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.6
    Set minimum maven version to 3.0.4 and updated plugin versions
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.5
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.4
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.0
    Some last minute fixes before the 1.1.0 release.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.13
    Release 1.0.13 with better packaging
    increase version to prepare for next development iteration:
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.12
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.11
    Undo bad changes I mkade in bbe40d3d451703f41ef36d16415144268d6ff72a while fixing #356
    Fix tests that broke in #356
    Tweak poms so they work in IDEA as well
    Cleaning up poms
    Build passes with cucumber-deps
    Cleaning up poms
    Build passes with cucumber-deps
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.8
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.7
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.5
    Added cobertura code coverage and started to clean up some cruftiness in the io package
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.4
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0
          oe               .n~~%x.                .n~~%x.
        .@88             x88X   888.            x88X   888.
    ==*88888            X888X   8888L          X888X   8888L
       88888           X8888X   88888         X8888X   88888
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888f        88888X   88888f
       88888       .   48888X   88888     .   48888X   88888
       88888     .@8c   ?888X   8888"   .@8c   ?888X   8888"
       88888    '%888"   "88X   88*`   '%888"   "88X   88*`
    '**%%%%%%**   ^*       ^"==="`       ^*       ^"==="`
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC24
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC23
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC22
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC21
    Added deps needed to run in IDE
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC20
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC19
    Try release one more time
    Let's try that release again
    Optimize imports, format code
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC16
    Set Mockito's scope to test
    
    Avoids it being inherited by end users of Cucumber (runtime).
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC15
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC13
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC12
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC11
    DRY up dependency versions
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC8
    Fix the version number appropriately
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC7
    Update version
    Clojure pom dependency changes
    Set project version correctly
    Re-adding the poms from before the ant/ivy stuff
    Dual build
    Added back poms - they are generated from ivy.xml (except the parent pom)
    don't try and compile the lein plugin
    clean up the pom
    first pass at clojure native backend
    Don't come back maven
    More ivy
    Maven hosed the previous release attempt.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC1
    Let's try to make a release
    Change dependencies so that full-jars don't bundle all jars (users are expected to provide them themselves). Closes #28.
    Changed groupId to info.cukes, and prepended cucumber- to all artifacts. Added shade plugin, so all artifacts have a -full (self contained) jar. Closes #11.
    Fix version/newline/maven problems
    Fixed pom issues
    Added an example
    Cleaning poms from duplicate project versions.
    Moved stuff around
    Much more modular
    More submodules
    More submodules, new Annotations.
    Better abstractions by bringing in Groovy
    Undo last change
    Test
    Add tagged Before/After hook support
    add utilities for reading tables
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Native clojure backend. Closes #138, #265
    Fixed StepDefinitionMatch to work with StepDefinitions that return null for getParameterTypes (e.g. ClojureStepDefinition)
    More ivy
    Add tagged Before/After hook support
    Deprecated  in favour of .
    add utilities for reading tables
    Add a message ensuring that a stack trace here is normal. At least until stack trace filtering is implemented in the clojure module.
    Throw PendingException from clojure snippets. See #271.
    make syntax nicer (rewritten for new backend changes)
    Native clojure backend. Closes #138, #265
    Fixed StepDefinitionMatch to work with StepDefinitions that return null for getParameterTypes (e.g. ClojureStepDefinition)
    Fixed hooks in Clojure
    Moved stuff around
    Added snippet support for all languages.
    Clojure is working again
    Moved stuff around
    Clojure is working again
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    it would help to actually add the test feature file
    Help my IDE not complain about Clojure classes
    Align snippets for quoted arguments with cucumber-ruby
    Fixed bug where -getSnippet in clj.clj received only the step parameter.
    
    cucumber.runtime.UndefinedStepsTracker actually calls the Backend
    instances with 2 parameters--Step and FunctionNameGenerator--but
    Clojure's Backend implementation only accepts one.
    
    Instead of testing generation of Clojure Snippet with a test-only
    ClojureSnippet instance, ClojureSnippetTest now tests the real
    implementation in clj.clj.
    New Snippet text, closes #618.
    
    Change to the new Snippet text. Update History.md.
    Fix a one off error in JRubySnippet.java.
    Refactored --snippet option. Closes #561, #302
    Deprecated  in favour of .
    fix quoting of generated Clojure snippets
    
    The double quote character must be quoted within a Clojure #"..."
    regular expression.
    
    Also drop the comma in the parameter list of generated snippets to
    match the conventions of defn.
    Update all snippets to throw PendingException, following up on #271. Need to make Clojure do this.
    Support DocString and DataTable in generated snippets. Closes #227
    remove accidentally left in git artifact
    Update snippets to new syntax. See #267
    update Snippet code.
    Fix clojure snippets
    Replace inheritance with delegation for #138
    Upgrade deps, improve snippets.
    Changes for gherkin 2.6.0. Will merge to master when gherkin has synced to maven central.
    Simplified improved snippet code, removed hamcrest (not a huge fan).
    Moved stuff around
    WIP - broke a lot of stuff
    Added snippet support for all languages.
    Closer to correct scenario outline implementation. Need to make sure it works with multiple Examples under one Scenario Outline.
    Snippets for java, and a reusable superclass for other backends.
    Moved the JUnit package and configured API docs
    More ivy
    Scala fixes
    Upgrade deps, improve snippets.
    Added Jython support
    Moved stuff around
    Add tagged Before/After hook support
    Fixed bug where -getSnippet in clj.clj received only the step parameter.
    
    cucumber.runtime.UndefinedStepsTracker actually calls the Backend
    instances with 2 parameters--Step and FunctionNameGenerator--but
    Clojure's Backend implementation only accepts one.
    
    Instead of testing generation of Clojure Snippet with a test-only
    ClojureSnippet instance, ClojureSnippetTest now tests the real
    implementation in clj.clj.
    Upgrade to gherkin 2.12.0
    Added missing getLocation method in HookDefiniton and reenabled Clojure module
    Deprecated  in favour of .
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    fix the regexp, tests are passing
    add utilities for reading tables
    Refactored the StepDefinition interface so that backends for dynamic languages can infer the type of a parameter based on the actual argument type passed to it.
    Show code source for Java step definitions in case of duplicates or ambiguous stepdefs.
    Fix add-step-definition for :after to add to After hooks
    Don't convert paths to package names - instead throw an exception. This helps people avoid mistakes.
    fix quoting of generated Clojure snippets
    
    The double quote character must be quoted within a Clojure #"..."
    regular expression.
    
    Also drop the comma in the parameter list of generated snippets to
    match the conventions of defn.
    Throw PendingException from clojure snippets. See #271.
    Added comments about ClojureSnippet needing to be in sync
    Update snippets to new syntax. See #267
    update Snippet code.
    make syntax nicer (rewritten for new backend changes)
    before and after hooks
    more than one world, who knew?
    misc hackery to deal with file paths vs. classpaths, etc
    track interface change
    first pass at clojure native backend
    Fix release artifacts so cucumber-clojure can be released. Closes #270
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.5
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.4
    Got rid of Maven Shade Plugin wherever it was possible.
    
    Artefacts which still have need to use the plugin:
    
        - cucumber-groovy
        - cucumber-jython
        - cucumber-jruby
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.1.0
    Some last minute fixes before the 1.1.0 release.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.13
    Release 1.0.13 with better packaging
    increase version to prepare for next development iteration:
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.12
    Bump gherkin (which bundles new gherkin-jvm-deps jar) and use new cucumber-jvm-deps jar which is also a separate project. This should simplify build quite a lot
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.11
    Undo bad changes I mkade in bbe40d3d451703f41ef36d16415144268d6ff72a while fixing #356
    Fix tests that broke in #356
    Tweak poms so they work in IDEA as well
    Cleaning up poms
    Build passes with cucumber-deps
    Cleaning up poms
    Build passes with cucumber-deps
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.8
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.7
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.6
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.5
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Added cobertura code coverage and started to clean up some cruftiness in the io package
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.4
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.3
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.2
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.1
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0
          oe               .n~~%x.                .n~~%x.
        .@88             x88X   888.            x88X   888.
    ==*88888            X888X   8888L          X888X   8888L
       88888           X8888X   88888         X8888X   88888
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888X        88888X   88888X
       88888           88888X   88888f        88888X   88888f
       88888       .   48888X   88888     .   48888X   88888
       88888     .@8c   ?888X   8888"   .@8c   ?888X   8888"
       88888    '%888"   "88X   88*`   '%888"   "88X   88*`
    '**%%%%%%**   ^*       ^"==="`       ^*       ^"==="`
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC24
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC23
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC22
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC21
    Optimise imports
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC20
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC19
    Try release one more time
    Let's try that release again
    Optimize imports, format code
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC16
    Fix tagged hooks for scenario outlines. Closes #209, closes #210
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC15
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC14
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC13
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC12
    GluePath can be a package name or a path - both are accepted. Closes #164
    Create a full jar for picocontainer as well.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC11
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC10
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC9
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC8
    Fix the version number appropriately
    Add stepdefs.json to git
    Make the Picocontainer CLI tests run
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC7
    Update version
    add an integration test to run the picocontainer stuff via the CLI
    
    Also, re-enable the junit picocontainer tests
    Set project version correctly
    Re-adding the poms from before the ant/ivy stuff
    Dual build
    Added back poms - they are generated from ivy.xml (except the parent pom)
    Don't come back maven
    Maven hosed the previous release attempt.
    [maven-release-plugin] prepare for next development iteration
    [maven-release-plugin] prepare release v1.0.0.RC1
    Let's try to make a release
    Move meta to a more recognizeable place
    Generate jsonp for metadata to make it easier to load with cross-site dynamic script tags
    Print exceptions at the end of run (regardless of what formatter is used). Exit with non-0 exit status if there are errors. Closes #71
    Make Scenario Outlines pass from CLI. Fixes #66.
    Code completion metadata can now be generated from the CLI. Closes #26.
    Change dependencies so that full-jars don't bundle all jars (users are expected to provide them themselves). Closes #28.
    Moved JUnit support to new submodule cucumber-junit. JUnit runner will now output results using the prettyformatter if the system property cucumber.reporter is set to pretty or pretty=somefile. The Backend interface has changed. Less methods to implement, and buildWorld() takes a World object where the Backend impl can register stepdefs and hooks. Currently this means scanning the fs/classpath for stepdefs/hooks for each scenario (slow), but this can be optimised later. This allows scoping of stepdefs on a per-feature (and later - per-scenario) basis.
    Changed groupId to info.cukes, and prepended cucumber- to all artifacts. Added shade plugin, so all artifacts have a -full (self contained) jar. Closes #11.
    Fix version/newline/maven problems
    Fixed pom issues
    Added an example
    Cleaning poms from duplicate project versions.
    Moved stuff around
    Much more modular
    More submodules
    More submodules, new Annotations.
    Better abstractions by bringing in Groovy
    Always fire that a test has finished, even when it's ignored.
    Fixed regression: PendingException was causing steps to fail instead of pending. Closes #328
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Ensure sensible defaults for junit
    Support for java.util.Calendar arguments in stepdefs
    Fix tagged hooks for scenario outlines. Closes #209, closes #210
    Copy over feature resources. Clean up imports. Delete old files.
    Added picocontainer
    Fix version/newline/maven problems
    Moved stuff around
    WIP - broke a lot of stuff
    JUnit integration getting there...
    Work in progress, Added a SanityChecker JUnit listener that will verify that we fire events correctly. That should help us fix bugs in the junit integration.
    Make sure Background steps are reported under the scenario they belong to. See #276
    Add support for enums in stepdefs
    Fixed regression: PendingException was causing steps to fail instead of pending. Closes #328
    Remove forced UTC timezone
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Ability to specify line numbers
    Make sure Background steps are reported under the scenario they belong to. See #276
    Support for java.util.Calendar arguments in stepdefs
    Added picocontainer
    Updated to JUnit 4.11. Relates to #255. Might also relate to #322. IntelliJ IDEA reports features with Background and Scenario Outline incorrect.y. Might be the case on master too.
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Use unique JUnit descriptions. Fixes #225, #211
    Fixed a bug where  would fail with the JUnit runner.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Reduce visibility in order to improve cohesiveness and reduce API
    Fixed regression: PendingException was causing steps to fail instead of pending. Closes #328
    Attribution
    cucumber-java lazily creates instances, just like the other DI containers
    Ability to specify line numbers
    Make sure Background steps are reported under the scenario they belong to. See #276
    We have some new stepdefs
    Ensure sensible defaults for junit
    Improved Calendar support for tables
    Support for java.util.Calendar arguments in stepdefs
    Removed byte order mark and fixed bad formatting. Closes #224
    Optimize imports, format code
    Add stepdefs.json to git
    Copy over feature resources. Clean up imports. Delete old files.
    Added some todos for build
    Added picocontainer
    Rewrote a lot of the resource loading code
    More sensible API for tables of single values
    Generate Cukepatch-compliant JSON
    Better hooks
    Move meta to a more recognizeable place
    Better metadata
    Throw exception if @RunWith(Cucumber.class) classes have methods. Closes #77.
    Update meta and idea files
    Print exceptions at the end of run (regardless of what formatter is used). Exit with non-0 exit status if there are errors. Closes #71
    Code completion metadata can now be generated from the CLI. Closes #26.
    Work in progress, Added a SanityChecker JUnit listener that will verify that we fire events correctly. That should help us fix bugs in the junit integration.
    Moved the JUnit package and configured API docs
    Always fire that a test has finished, even when it's ignored.
    cucumber-java lazily creates instances, just like the other DI containers
    Optimize imports, reformat
    Hooks can receive results. Closes #27.
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    Added tags and lines attributes to @Feature, making it possible to run a single scenario (or just some)
    Improved Transformer API
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Build passes with cucumber-deps
    Build passes with cucumber-deps
    Remove forced UTC timezone
    Ensure sensible defaults for junit
    Improved Calendar support for tables
    Support for java.util.Calendar arguments in stepdefs
    Package XStream and diffutils inside core. Closes #179.
    Date format can be specified with a @DateFormat annotation
    Refactoring to capture more info about types
    Remove deprecation warning
    Always fire that a test has finished, even when it's ignored.
    Remove deprecation warning
    Deprecated  in favour of .
    Always fire that a test has finished, even when it's ignored.
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Fixed regression: PendingException was causing steps to fail instead of pending. Closes #328
    Removed console out
    Optimize imports, format code
    Fix tagged hooks for scenario outlines. Closes #209, closes #210
    More sensible API for tables of single values
    Tagged (scoped) step definitions are reverted. Bad idea.
    Step Deinitions can be scoped by tag (just like hooks). Currently only implemented for Java.
    Make Scenario Outlines pass from CLI. Fixes #66.
    Optimize imports, reformat
    Hooks can receive results. Closes #27.
    Added tags and lines attributes to @Feature, making it possible to run a single scenario (or just some)
    Take Locale from Gherkin feature instead of Step Definition. Make an outer Java class for each annotation - makes imports nicer (No more @EN.Given). Moved Java annotation code to java project.
    Moved stuff around
    Support several backends. Still struggling with Guice and Spring.
    Test DI
    Added a java-specific TCK to test various DI containers
    If you write code that forces me to check your exceptions, then I will rip off your head and piss in your dead skull.
    Much more modular
    More submodules, new Annotations.
    Upgrade gherkin
    Tweaks
    Abstract backend test
    Change some remaining Cucumber.Options to CucumberOptions
    Moved the JUnit package and configured API docs
    Update explicit feature path (but keep it commented out)
    Ability to specify line numbers
    Copy over feature resources. Clean up imports. Delete old files.
    Added picocontainer
    Refactoring to capture more info about types
    Merge with master. Simplified API for converting tables - no longer leaking the Java-specific TableProcessor implementation detail.
    code clean up : suppress warnings
    Working Guice and Spring examples
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Added proof that unused hooks aren't instantiated.
    cucumber-java lazily creates instances, just like the other DI containers
    Big package reorganisation. This is needed to make it more obvious what's part of the public API and what is not.
    Reformat code. It really gets out of whack when people contribute with all sorts of different IDE settings.
    Add support for enums in stepdefs
    cucumber-java lazily creates instances, just like the other DI containers
    Make a clearer separation between the injection and the JavaBackend. This change ensures that the ObjectFactory is responsible for the finding of dependent classes that are needed to create Steps or Hook classes. Before it was the responsibility of the JavaBackend which was stepping on the toes of ObjectFactory implementations that could do that for themselves, like Guice or Spring.
    Moved stuff around
    Support several backends. Still struggling with Guice and Spring.
    Added a java-specific TCK to test various DI containers
    Much more modular
    More submodules, new Annotations.
    Move shit around
    Added jcommander based CLI
    New, better stepdef discovery through reflections
    Keep Guice from injecting classes it can't.
    # Please enter the commit message for your changes. Lines starting
    # with '#' will be ignored, and an empty message aborts the commit.
    # On branch master
    # Your branch is ahead of 'origin/master' by 1 commit.
    #
    # Changes to be committed:
    #   (use "git reset HEAD <file>..." to unstage)
    #
    #       modified:   cuke4duke/src/main/java/cuke4duke/internal/jvmclass/ClassLanguage.java
    #       modified:   cuke4duke/src/main/java/cuke4duke/internal/jvmclass/GuiceFactory.java
    #       modified:   cuke4duke/src/main/java/cuke4duke/internal/jvmclass/ObjectFactory.java
    #       modified:   cuke4duke/src/main/java/cuke4duke/internal/jvmclass/PicoFactory.java
    #       modified:   cuke4duke/src/main/java/cuke4duke/internal/jvmclass/SpringFactory.java
    #       modified:   cuke4duke/src/test/java/cuke4duke/internal/jvmclass/GuiceFactoryTest.java
    #
    * compiles with both Scala 2.7.x and 2.8
    * Transformations are checked at compiletime (implicits)
    * ScalaDsl supports ask, announce and embed
    * Some code simplifications
    * Objectfactories returns the correect type based on class ( returns T given a Class<T> )
    * ScalaDsl and i18n moved out of 'scala' package, as scala imports with the scala name can be a bit tricky ;)
    Refactor transforms so that default transforms don't need an object factory. Better lifecycle for stepdefinition objects.
    Added new @Ordered annotation, to deal with issue #39. Scala is failing now - need to fix it.
    Refactored ObjectFactory to reflect that it is the StepMother instance that is passed to the factory after creation.
    Enable Java step definitions to call other steps indirectly by just providing a string. Closes #26
    Optmize imports (IntelliJ)
    Clean up
    Load jvm classes from .class paths instead of .java paths. This should make it easier to support other .class based (compiled) languages like Scala.
    Removed all the warnings
    
    - Added some @SuppressWarnings where needed.
    - Made some local variables to deal with map/list warnings
    comply with API changes in Cucumber 0.3.97
    Almost a complete rewrite, leveraging Cucumber's new improved language support.
    Moved the JUnit package and configured API docs
    Moved the JUnit package and configured API docs
