    feat(person): Created a person ship for MCOfficer (#5295)
    feat(credits): Changed comnom's credits entry to his real name, Frederick Goy IV (#5155)
    Bumping the version number to 0.9.12.
    docs(copyright): add ravenshining (#5016)
    
    * Updating the Copyright for Ravenshining's work in endless-sky#4960
    
    * Removing unneeded derivation
    
    * Update credits.txt
    
    Adding Lia Gerty to the "Artwork" category.
    Added corecontingency to the credits
    
    Going forward, I imagine that updating the credits should happen alongside updating the changelog for each release.
    feat(credits): Switching the order of artwork/photos (#4985)
    feat: Expanded the credits to include everyone who's contributed on GitHub (#4962)
    
    Also gave special acknowledgment to those who have helped with major programming, creating storylines and factions, and helping to edit and proof read missions.
    Updating the version number to 0.9.11.
    Updating the version number.
    Changed the contribution notice in the credits
    
    Moved it to the top so that it's easier to notice.
    Added reference to reporting bugs and giving feedback.
    Added reference to the Steam forums and Discord server, as those are also places where we take feedback and bug reports (which we funnel to GitHub regardless if we find an actual bug or get good feedback).
    Ref: #4295
    Updating the version number.
    Add other artist names to the credits (#4232)
    
    * Add Beccas name to credits
    
    they have added art so seems to be appropriate
    
    * add in the other names
    add my name to credits
    Updating the changelog, etc. to prep for a release on Monday or Tuesday.
    Getting ready for a release on Friday unless some other high-priority change comes up.
    Add copyright (#2527)
    
    * Update copyright
    
    * Update credits.txt
    New landscapes (#2415)
    
    * Keep drug running in human space
    
    * added 2 new landscapes (@Iridium Ore)
    
    * corrected picture size
    
    * Added last 4 images (with copyright). Added a contact email. Renamed 1 image.
    
    * Straitnd an image
    
    * Fixing an invisible bite order mark (I hope)
    Place new landscapes (#2170)
    
    * Placed new images and corrected the copyright in credits.txt
    Final updates preparing for 0.9.6 tomorrow (unless any last-minute bugs come up).
    New landscape images (#2025)
    
    * Added new images
    
    113 total
    @Striker 11 images
    @harro 10 images
    @Emotion_Machine 1 image
    
    * Fixed some oversized images
    
    * Copyright for Striker and Gardevou (Emotion_Machine)
    
    * Added copyright for harro and fixed a typo
    
    * Finshed adding copyright for @harro
    
    * Removed most images.
    
    Leaving 22.
    Changed numbering to match.
    Removed unneeded copyright for @Gardevour.
    
    * Removed 1 that I missed
    
    * Lisence change and readding an image.
    Getting ready to release 0.9.5 tomorrow (assuming no high-priority bugs come up).
    Updating the changelog and version number. Planning to release 0.9.4 on Tuesday if no new bugs crop up.
    Getting ready for the 0.9.3 release.
    hai carriers + gatling gun +rail gun (#1284)
    
    Added the Hai carriers, Gatling guns, and railguns (@Amazinite, @LocalGod79, @mdsmestad, @Wrzlprnft).
    update XCode project with Hardpoints and Body classes
    
    also, a little credit
    Updated the changelog and version info, preparing for a release a week from now.
    Another changelog update, plus version number updates.
    Added copyright credit for an image I just added from the ESO.
    Final update to the changelog and version number.
    Update my master (#1)
    Updated the credits and copyright info to include the Southern Carriers.
    Updated the changelog and version numbers for release 0.8.11.
    Changed the version number to 0.8.10 to get ready for the next release.
    Preparing for release 0.8.9.
    Updated the copyright and credits to reflect that all the sounds are now public domain sounds from freesound.org.
    Preparing for the 0.8.8 bug fix release.
    Prepping a second point release with some thigns the first one did not fix.
    Getting ready for a point release 0.8.6 to fix a critical bug in 0.8.5.
    Updated the version number to 0.8.5.
    Updated the version number and changelog for the next release.
    Incremented the version number.
    Updated the changelog and version number in preparation for a new release tomorrow.
    Updated the version number and the credits list in preparation for a new release.
    Updated more of the landscape images.
    Continuing to improve the landscape images.
    Adding seanfahey to the beta testers credits.
    Updated the version number to 0.8.0 in anticipation of a stable release one week from now (unless further bugs are found).
    Updated the version number, for the "release candidate" 0.7.12 release.
    Updated the version number to 0.7.11, and added a list of beta testers.
    Switched all URLs to HTTPS (where supported) as requested by Paul.
    Fixed a bunch of spelling errors found by the codespell tool.
    Updated the version number to 0.7.10 in anticipation of a second beta release soon.
    Updated the version number to 0.7.9.
    Added some Creative Commons BY-SA-3.0 photos from Wikimedia, and updated the credits and copyright file accordingly.
    Updated the website to point to github, and also updated the version number to 0.7.8 (which is my intended tag for the next release).
    Updated the version number to 0.7.1
    Fixed some issues I found while trying to create a Debian package.
    Tweaked the credits a bit to be less obtrusive.
    Added a scrolling list of credits in the main menu.
    Updating the "contributing" guide (which is linked to when posting issues).
    Fix typo in file contributing.md
    
    Fix typo in CONTRIBUTING.md. Changing 'to easy or hard' for 'too easy or hard'.
    Added a CONTRIBUTING.md file.
    feat(controls): Make fast-forward key configurable (#4741)
    
    * Make fast-forward key configurable
    * Do not toggle fast-forward on repeat input events
    * Rename "Menus" to "Interface" in Preferences, resize column slightly
    
    Closes endless-sky#2738
    Added a key command to toggle escort ammo usage on the fly.
    Keeping the name of the landing command what it was previously, so players with customized key layouts won't lose that command.
    Added function to return a "noun" for a "planet" object, by default this is the word "planet," but can be either "station" or "moon" if the attributes include one of those two terms.
    Changed the default "select next ship" key to "N," because backtick may not be a single key on non-QWERTY keyboards.
    Updated the preferences panel to include escort command keys (and to have space for additional preferences).
    Added an afterburner outfit. It'll probably take some balancing work to make sure it's not too powerful.
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Added an option to toggle fullscreen mode. It's still a little buggy on Linux.
    Added a preferences panel for customizing the key controls. (They are not yet used, though.)
    Remove formatting differences in license.txt (#4393)
    
    * Create LICENSE.md
    
    This change simply creates license.md to provide the automated license parsing & display by GitHub. Contents are verbatim that of license.txt
    
    (Based on MCO's explanation, GitHub specifically for LICENSE or LICENSE.md, not license.txt)
    
    * Removing file ending from LICENSE
    
    Removes ".md" from end of file to test the license on my fork.
    
    * Replacing < and > with { and }
    
    * Delete LICENSE
    
    * Replacing license.txt with LICENSE
    
    * Restore filename
    Added GPL statements to all source code files and added a license.txt file.
    docs: update storage recommendations
    README now links to the game's Steam store page rather than the community page
    
    #4360
    Better highlight the low memory / space requirements
    Add a bit more quick info to the readme
    Fix typo in README.md
    
    Changed 'release' for 'released'.
    Revert "test"
    
    This reverts commit b47144a692ab7432312c7e1fbd0432eff3963d38.
    test
    Switched all URLs to HTTPS (where supported) as requested by Paul.
    Create README.md
    build: treat compiler warnings as errors
    build(linux): Support subdirectories in SConstruct
    
    Adds a recursive fileglob method to find source files in subdirectories of `source/`
    fix: If CXX defined in env, use it (#4583)
    
    Fixes build on GCC architectures on FreeBSD
    Add 128x and 512x icon sizes to SConstruct installs (#4248)
    
    refs: #3913
    Honor environement (#2949)
    
    * Honor environement
    
    Pass environment through SCons. For instance, this is required to pass CCACHE_* variabled to ccache.
    
    * If carrying over all environment variables, no need to handle any individually.
    Made it possible to specify a non-standard build directory via a "BUILDDIR" argument to scons.
    Backing out my changes to try to fix icons on KDE, because they didn't work.
    Possible fix for low-resolution window icons on KDE.
    Fixed a curly quote in the SConstruct.
    Reorganized the icons so the .iconset only contains the files that Mac OS X expects.
    Allow to specify additional include paths
    Updated the scons script to link libmad statically when doing Steam builds, because it's not part of their runtime.
    Added support for streaming MP3s from disk (currently only tested on Linux) for music or ambient sounds.
    Add a Linux AppData file.
    0.9.2 updates
    Added support for "debug" and "profile" builds without editing the SConstruct file.
    Pass CPPFLAGS to the compiler.
    
    Used by dpkg-buildflags.
    Updated the SConstruct to link libstdc++ statically when building for Steam.
    Added a DESTDIR variable to the SConstruct to support RPM packaging, etc.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Took out the SSE 3 requirement. You can still build with -march=native if you want SSE optimization.
    Made some changes to satisfy Lintian.
    Switched to only using SSE 3 instructions, instead of SSE 4.1, to support older processors (e.g. AMD Phenom).
    Minor changes to support running the clang static analyzer on the code.
    Explicitly added libpthread to the linker options because it looks like missing that is what broke my utopic build.
    Fixed some issues I found while trying to create a Debian package.
    Switched the Linux build away from using ALUT, since my hard-coded WAV reader is good enough for now.
    Got basic audio support working. I do need to track down better sounds, or at least balance the audio levels better between them.
    Added a man page, desktop file, icons, and install build option for Linux.
    Added support for target ship outlines to be colored based on friendly / hostile status.
    Eliminated SDL_image in order to allow reading images in multiple threads simultaneously.
    Typo fix.
    Switched back to doing an optimized build.
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Added a "Files" class which abstracts out filesystem operations (including finding the resource and config path for each OS). That allows me to remove the boost dependency, which will make porting easier.
    Made some changes to get the code to compile on Ubuntu 14.04.
    Added a "New Pilot" dialog (which doesn't yet move you straight to the shipyard, though).
    Got the code to build without warnings when -Wall is defined.
    Uploaded all the files from my local repository to Google Code.
    docs(appstream): Update Appstream appdata XML information with releases (#4941)
    
    * Update appdata.xml
    
    * docs: Switch to abbreviated release documentation
    
    Add a `<url>` tag linking to the full changelog
    
    * docs(appstream): Add latest release notes summary
    
    Co-authored-by: tehhowch <tehhowch@users.noreply.github.com>
    fix: Restore behavior for showing error alerts
    
    Prior to f23745bdfc0ffe298c291ef2b303a2993ec42883 an alert would be shown for runtime errors during game initialization (e.g. various file read errors, shader link/compile errors).
    
    This commit restores that behavior, to avoid situations where the game simply crashes without a visible report (since errors.txt / stderr may not be visible).
    docs: Update changelog for v0.9.12 release (#4950)
    feat: Give the player a choice between the Broken JD and Key Stones missions to obtain a Remnant license (#4832)
    Moved the "fw delivered prisoners" condition set to a more appropriate spot
    docs: Add new bugfix mention
    Clarify changelog entry
    docs: Update changelog for v0.9.11 release (#4815)
    
    * Update changelog
    
    * Typo fixes
    
    * Update changelog
    
    * Add info, fix typos
    
    * add missing typo contributor, CICD acknowledgements
    
    * Add Stop command
    
    Co-authored-by: tehhowch <tehhowch@users.noreply.github.com>
    Copy requiredOutfits in MissionAction::Instantiate()
    
    #4555
    Fix typo (#4545)
    
    * Fix typo
    
    second to seconds
    The " Kor Mereti " government now uses the Korath language
    Update changelog
    Save thumbnails, just as we save sprites. (#4527)
    
    * Save thumbnails, just as we save sprites.
    
    This will allow variants with different thumbnails to have their thumbnails be preserved through a save/load cycle. Fixes #4503.
    
    * Update changelog.
    Update changelog for v0.9.10 (#4515)
    Changed the contribution notice in the credits
    
    Moved it to the top so that it's easier to notice.
    Added reference to reporting bugs and giving feedback.
    Added reference to the Steam forums and Discord server, as those are also places where we take feedback and bug reports (which we funnel to GitHub regardless if we find an actual bug or get good feedback).
    Ref: #4295
    Update changelog
    
    #4291
    Cleanup & add comment
    
     - If `zone.Value()` is one zoom setting, it is not the other.
     - Restored trimmed tab
     - Update changelog
    Update changelog
    Update changelog
    Enforce required attributes for in-flight spawns
    
    Otherwise, normally specified "system fleets" could take off from a planet even when they do not have the capability to land on it.
    Use singular or plural credit amount
    
     - Always include credit/credits for simplicity
    
    e.g. "You paid 100 credits in crew salaries, 1 credit in mortgage payments, and 1,234 credits in fines."
    Update changelog
    Update changelog
    Update changelog
    Update changelog (#4207)
    
    * Update changelog
    
    * Changed tabs into spaces
    
    * Typo fix
    
    * Typo fixes
    
    * Wording changes
    
    * Slight changes
    
    * Update changelog
    
    * Big changes
    
    * Update changelog
    
    * Add more changelog updates
    Bringing the changelog up to date.
    Typo fix.
    Updating the changelog.
    Updating the changelog, etc. to prep for a release on Monday or Tuesday.
    Fixed some typos in contributor names.
    Updating the changelog (and categorizing the changes to make them easier to read through).
    Fixed a few typos and omissions in the changelog.
    Updating the changelog to include everything from the past 4 months.
    Final updates preparing for 0.9.6 tomorrow (unless any last-minute bugs come up).
    Updating the changelog with everything for 0.9.6 so far.
    Typo fixes.
    Added Wrzlprnft to entry of Captain Nate
    Getting ready to release 0.9.5 tomorrow (assuming no high-priority bugs come up).
    Updating the changelog again.
    Updated the changelog with everything since the 0.9.4 release.
    Updated the changelog.
    Updating the changelog and version number. Planning to release 0.9.4 on Tuesday if no new bugs crop up.
    Cloaked ships no longer broadcast hail messages.
    Getting ready for the 0.9.3 release.
    Updating the changelog with another month of activity.
    Updated the changelog with everything from the last month.
    Final changelog updates.
    Updated the changelog and version info, preparing for a release a week from now.
    Straight quotation marks are now replaced with curly ones when rendering text.
    You can now buy outfits directly into cargo by deselecting all your ships (control + click).
    Brought the changelog up to date.
    You can now cancel "capture ship" without fighting by clicking "defend" as your first action.
    Fixed saving of the new animation attributes, plus some old ones that were not saved. Also updated the changelog.
    hai outfits
    Another changelog update, plus version number updates.
    more changelog corrections
    changelog update
    flotsam, too
    
    seriously, though - no more changelog additions in this pull
    a few changelog additions
    Updated the changelog with everything from the last two weeks.
    de-0.9.0
    Fixed a typo and some file permissions.
    Final update to the changelog and version number.
    Update changelog
    changelog & copyright
    Update my master (#1)
    Updated the credits and copyright info to include the Southern Carriers.
    Updated the changelog to reflect the last two weeks of additions.
    Name changed to alias.
    Updated the changelog to reflect the additions so far in 0.9.0 development.
    Updated the changelog and version numbers for release 0.8.11.
    Added the change list for 0.8.10.
    Added a missing credit for typo fixes.
    Added note regarding wormhole paths now being displayed on map.
    Preparing for release 0.8.9.
    Preparing for the 0.8.8 bug fix release.
    Prepping a second point release with some thigns the first one did not fix.
    Getting ready for a point release 0.8.6 to fix a critical bug in 0.8.5.
    Updated the changelog for release 0.8.5.
    Updated the version number and changelog for the next release.
    Updated the changelog for version 0.8.3.
    Updated the changelog and version number in preparation for a new release tomorrow.
    Added a changelog.
    Update developer instructions for deb-based distros.
    Updated the XCode project and MacOS build instructions to use the latest libraries from Homebrew, which is a much simpler way of setting up a development system.
    Fix typo in package list for RPM based distros
    
    I was worried you meant something different (Super-GLEW?) but...considering it's a one character difference, I think it's just a typo.
    In the RPM world, the package is named "libmad-devel" (no zero)
    Updated the Mac OS X build instructions (although libmad isn't actually linked to the XCode project yet).
    Added support for streaming MP3s from disk (currently only tested on Linux) for music or ambient sounds.
    Updated development documentation to account for the fact that some of the package names are slightly different in RPM-based distros.
    make dependency list easier to copy-paste
    
    this way it can be copy-pasted after `apt-get install` or anything of the kind
    Added missing semicolon to SDL clone/open command
    Added instructions for 32-bit Windows builds.
    Updated the readme-developer.txt to include the Windows and Linux instructions from the Wiki.
    Switched all URLs to HTTPS (where supported) as requested by Paul.
    Update library paths to be absolute.
    Support data files encoded by UTF-8.
    build: treat compiler warnings as errors
    refactor(main): Extract SDL window initialization & management into separate class (#4472)
    
    * Move SDL_Window setup from main in to a standalone class
    
    Tested, working. Only behavior change so far is moving the window loading up in the load order in an attempt to get visual to the user as quickly as possible.
    I modeled the new class after how the Audio class is handled.
    
    * Update GameWindow.cpp
    
    Added comments. Moved code to more logical order of operations. Removed the Win32 exception on cleanup operations. Added explicit call to hardware acceleration.
    
    * Update project.pbxproj
    
    Thanks to @Fzzr for testing on Mac and providing an updated XCode project file.
    
    * Cleanup unused MonitorHz
    
    Minor edits. Ignore the .gitignore
    
    * Make it unchanged.
    
    Remove my edit.
    
    * Comment editing for readability
    
    This makes more sense to a noob.
    
    * Update in response to feedback
    
    * Resolve issues introduced with that last patch
    
    Missing (), and missing ;
    Forgot to update my .h file
    
    * New module missing
    
    You will need these if compiliing on Windows.
    
    * Fix fullscreen regression
    
    Move comment to own line
    Remove old comment
    Add missing whitespace
    
    * Remove commented code
    
    * style: reorder methods, includes
    Update XCode project path and target name (#4159)
    
    * Changed path of libSDL2-2.0.0.dylib to match build instructions for MacOS
    
    * Remove unused localization and added Bundle Display Name
    
    * Changed Product Name in Build Settings for Target to ‘Endless Sky’
    
    * Modified .travis.yml for change in application name
    Fix XCode libraries
    
    https://github.com/endless-sky/endless-sky/pull/3808
    
    * Fix path to brew's SDL2.dylib install
    
    * Remove unused framework path
    
    * Don't add some Xcode directory to the header search path
    
    "XCode/mumble/jumble/usr/include" should be equivalent to /usr/include
    (and the build system takes care of prepending the SDKROOT).
    
    Having this first makes the OS-provided non-jpeg-turbo library to be
    picked up.
    Making other settings changes that XCode recommends.
    Updated the XCode project and MacOS build instructions to use the latest libraries from Homebrew, which is a much simpler way of setting up a development system.
    Add News.cpp and News.h to Xcode project (#3509)
    
    * Add News.cpp and News.h to Xcode project
    
    * Alphabetize source
    Update file references in xcodeproj
    
    Adds BatchDrawList, BatchShader, and ImageSet (.cpp and .h) to
    EndlessSky.xcodeproj/project.pbxproj , fixes linker problems when
    building from source
    Fix a bug where some source files are not included in the XCode Project for OS X (#3238)
    
    * Fix a bug where some source files are not included
    
    On OSX the build fails because some source files aren't included in the XCode project, this should fix it but I honestly don't really know what I'm doing
    
    * Update project.pbxproj
    
    * alphabetizing stuff
    
    * Removed extranius changes
    
    These changes are probably due to me poking around things in XCode, if they need to be changed I don't know, but this PR isn't about it
    
    * Removed extranius changes
    
    These changes are probably due to me poking around things in XCode, if they need to be changed I don't know, but this PR isn't about it
    
    * Removed random character
    Added LogbookPanel to the XCode project (and fixed one compile warning).
    Updating the XCode project with the source files for the InfoPanel refactoring.
    Reorganized the icons so the .iconset only contains the files that Mac OS X expects.
    Fixed Xcode project file.
    Added libmad MP3 streaming support to the XCode project.
    added Depreciation to Xcode project
    Fixed some compile issues on OS X.
    Add FogShader to XCode Project (#1374)
    update XCode project with Hardpoints and Body classes
    
    also, a little credit
    add flotsam class to XCode project
    Update my master (#1)
    XCode links for new PlanetLabel class
    Added the two new classes to the XCode project.
    Merged the functionality of BlurShader into SpriteShader, and DotShader into RingShader.
    Added /opt/libjpeg-turbo/include to search path to ensure no conflicts with any /usr/local/include files.
    Moved the File wrapper from ImageBuffer into a separate class.
    Xcode: place source files into a group called 'source' to match the filesystem representation. Also makes it a little easier to get at items that currently sort below the source files in the navigator.
    Added the Person class to the XCode project.
    Modified the runpath search paths in the XCode project so that it will work with libraries with standard @rpath paths.
    Added the new map panel classes to the XCode project.
    Fixed the XCode project to handle the new source file locations.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added the two newest classes to the XCode project.
    Various typos found in playtesting.
    Updated the .gitignore and the XCode project for Mac OS X support.
    Added the new Command class to the XCode project.
    Updated Files to use SDL's built-in functions for getting the resource path and preferences (e.g. saved games) path.
    Added the gl_header.h file to the XCode project.
    A few changes to get the code to compile on OS X correctly.
    Updated the XCode project and fixed a few issues it complained about.
    Updated the XCode project to include new files that have been added.
    Add alien “lightning” ship type.
    Update library paths to be absolute.
    Got audio working on Mac OS X (by just writing my own basic WAV reader, rather than trying to get ALUT working).
    Made some fixes to get the Mac build working.
    Updated the Mac OS X port to include the application icon and to copy the required libraries into the bundle.
    Updated the Mac OS X project. THat required a workaround because XCode apparently does not support thread_local static variables yet.
    Got the new code without SDL_image building on Mac OS X.
    Ported to Mac OS X.
    Bumping the version number to 0.9.12.
    Updating the version number to 0.9.11.
    Updating the version number.
    Updating the version number.
    Update XCode project path and target name (#4159)
    
    * Changed path of libSDL2-2.0.0.dylib to match build instructions for MacOS
    
    * Remove unused localization and added Bundle Display Name
    
    * Changed Product Name in Build Settings for Target to ‘Endless Sky’
    
    * Modified .travis.yml for change in application name
    Making other settings changes that XCode recommends.
    Updating the changelog, etc. to prep for a release on Monday or Tuesday.
    Getting ready for a release on Friday unless some other high-priority change comes up.
    Final updates preparing for 0.9.6 tomorrow (unless any last-minute bugs come up).
    Getting ready to release 0.9.5 tomorrow (assuming no high-priority bugs come up).
    Updating the changelog and version number. Planning to release 0.9.4 on Tuesday if no new bugs crop up.
    Getting ready for the 0.9.3 release.
    Updated the changelog and version info, preparing for a release a week from now.
    Another changelog update, plus version number updates.
    Final update to the changelog and version number.
    Updated the changelog and version numbers for release 0.8.11.
    Changed the version number to 0.8.10 to get ready for the next release.
    Preparing for release 0.8.9.
    Preparing for the 0.8.8 bug fix release.
    Prepping a second point release with some thigns the first one did not fix.
    Getting ready for a point release 0.8.6 to fix a critical bug in 0.8.5.
    Updated the version number to 0.8.5.
    Updated the version number and changelog for the next release.
    Incremented the version number.
    Updated the Mac OS X port to include the application icon and to copy the required libraries into the bundle.
    Ported to Mac OS X.
    Ported to Mac OS X.
    docs: Add testing/performance sections to the PR template (#4802)
    
    Feature and Bugfix PRs should convey this information
    Add a PR template (#4568)
    
    * Initial Draft
    
    Current GitHub support for multiple PR templates is lacking (url parameters only!) so people will just need to remove the bits that don't apply.
    
    * Add high-dpi plugin PR to the Content PR checklist
    docs: configure issue template picker
    Add issue templates
    
    https://github.com/endless-sky/endless-sky/pull/3986
    
    * Add issue templates
    
    * Incorporate feedback
    
    * Add link to Issues page
    Add issue templates
    
    https://github.com/endless-sky/endless-sky/pull/3986
    
    * Add issue templates
    
    * Incorporate feedback
    
    * Add link to Issues page
    build: separate copy & build steps for windows CI/CD
    build: Update action versions (#5119)
    
    * Update cache, upload-artifact & download-artifact
    
    * Update cache, upload-artifact & download-artifact
    
    * Build CD on this branch too
    
    * Revert "Build CD on this branch too"
    
    This reverts commit e42e354e08a6036f84ab1b1b72d1a80722cec008.
    feat(cd): Display build time on the releases page (#5086)
    
    * Add build date to continuous release description
    
    * Build on feature branches
    
    * Different formatting, specify timezone
    
    * No explicit \n's
    
    * Revert: Build on feature branches
    build(cd): Run `brew update` before compiling macOS (#5034)
    build(cd): Generate deployment artifacts for PR builds too (#5021)
    
    * Also build CD on PRs, but don't publish it.
    
    * Requested changes
    ci(cd): swap release tool to github-release
    
     - fix issue with deprecated querystring auth
     - fix issue with broken gothub imports
    ci(cd): Publish build artifacts as a "pre-release" (#4975)
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * dummy commit
    
    * Update cd.yaml
    
    * dummy
    
    * Update cd.yaml
    
    * Reimplement for AppImage, replace files on upload
    
    * test on this branch
    
    * AppImage needs setup job
    
    * Add version string adjustments to AppImage, too
    
    * Trigger on master
    
    * Move version string manipulation to a utility script
    
    * Make the script executable
    
    * Typo: continuos
    
    * Split version script up
    
    * Make new script executable
    
    * Add script to modify manpage
    
    * Enable build for testing
    
    * Correct script name
    
    * Restructure: Release-related stuff after building
    
    * Yay more copypasta
    
    * Correct names of the down-/upload steps
    
    * Revert; explicitly download to workspace
    
    * Fancy release description
    
    * A bit less fancy
    
    * Also modify .plist file
    
    * refactor: Combine version update scripts
    
     - pass in version, set all versions
     - Prefix  "commit" to SHA-ish arguments
    
    * cd: revert test-branch change
    
    Co-authored-by: tehhowch <tehhowch@users.noreply.github.com>
    fix(cd): Compile AppImages on xenial rather than bionic (#4951)
    
    * Run CDs on Xenial
    
    * Revert changes to trigger, default ubuntu build
    ci(cd): Also build AppImage (#4918)
    
    * Also build AppImage during CD
    * Also build AppImage during CD
    * Also build AppImage during CD
    
    * Restore trigger
    
    * Move to utils/, add missing shebang, re-add ARCH
    fix(cd): Escape some special characters in commit messages (#4897)
    
    * CD: Don't break with some special characters in commit messages
    
    * Fix: reverse order of quote symbols
    ci: Generate downloadable builds upon commit to master (#4861)
    
    * Squash: Implement Nightly CD
    
    * Call them "Continuous Builds", also edit XCode project
    
    * Rename: cd_nightly.yaml -> cd.yaml
    
    * Fix version in main.cpp & Prettier credits.txt
    
    * Versions in artifact filenames; Better credits.txt formatting
    
    * Even better credits formatting
    ci: Create and upload an x64 Linux AppImage for releases (#4821)
    
    Upon publishing a release, build an AppImage and upload it to the release.
    build: Update action versions (#5119)
    
    * Update cache, upload-artifact & download-artifact
    
    * Update cache, upload-artifact & download-artifact
    
    * Build CD on this branch too
    
    * Revert "Build CD on this branch too"
    
    This reverts commit e42e354e08a6036f84ab1b1b72d1a80722cec008.
    fix(cd): Compile AppImages on xenial rather than bionic (#4951)
    
    * Run CDs on Xenial
    
    * Revert changes to trigger, default ubuntu build
    ci(cd): Also build AppImage (#4918)
    
    * Also build AppImage during CD
    * Also build AppImage during CD
    * Also build AppImage during CD
    
    * Restore trigger
    
    * Move to utils/, add missing shebang, re-add ARCH
    ci: Generate downloadable builds upon commit to master (#4861)
    
    * Squash: Implement Nightly CD
    
    * Call them "Continuous Builds", also edit XCode project
    
    * Rename: cd_nightly.yaml -> cd.yaml
    
    * Fix version in main.cpp & Prettier credits.txt
    
    * Versions in artifact filenames; Better credits.txt formatting
    
    * Even better credits formatting
    ci: Create and upload an x64 Linux AppImage for releases (#4821)
    
    Upon publishing a release, build an AppImage and upload it to the release.
    build: Update action versions (#5119)
    
    * Update cache, upload-artifact & download-artifact
    
    * Update cache, upload-artifact & download-artifact
    
    * Build CD on this branch too
    
    * Revert "Build CD on this branch too"
    
    This reverts commit e42e354e08a6036f84ab1b1b72d1a80722cec008.
    ci(xcode): Add a test script that validates / fixes the XCode project file (#4817)
    
    * Add script that checks if the Xcode project is complete.
    
    When the Xcode project is incomplete, then the script automatically suggest a fix (and prints the fix for the user to apply).
    
    * Add additional settings required for Xcode project
    
    - Added target within Xcode project.
    - Added parent within Xcode project.
    - Added no-build flag for header files (since ES doesn't seem to use header builds)
    
    Checked with new files Test.cpp and Test.h:
    - Those files were added in the same way as that LogbookPanel.cpp and LogbookPanel.h are in the project.
    
    The test was done with a version of kronenthaler/mod-pbxproj that supports --parent.
    (The master branch of kronenthaler/mod-pbxproj  doesn't support --parent at the moment this commit was created.)
    
    * Process review comments
    
    * Process review comments
    
    Use variable for paths to xcode-project.
    Limit the check to source-file changes and to the specific check.
    
    * Install pbxproj as system module
    
    Alternative was to add the --user option, but the CI-environment is exclusively available for the test, so that isn't needed.
    
    * Also run xcode_check when the check itself was modified.
    
    * And now also use proper path to .github/workflows.
    
    * Run pbxproj as user-modules instead of system module.
    
    The tests in
    https://github.com/petervdmeer/mod-pbxproj/tree/github_tests
    are running fine.
    
    One difference between that test and the tests here is that pbxproj was running in user-mode.
    So switching to user-mode here to see if that makes a difference.
    
    * Add wheel for installing pbxproj in user-space
    
    * Add some debugging info.
    
    * Install all extra Python libs as user-libraries
    
    * Perform update and upgrade for pbxproj
    
    * Perform checkout and test of mod-pbxproject directly
    
    * Install pbxproj from cloned archive
    
    * Remove debug-info and redundant steps
    
    Remove steps that were added for debugging but that turn out not to be needed.
    
    * Add errormessage about no support for moving files
    
    * Don't exit on the first failure, but try to get an update for all files.
    
    * feat: Improve XCode validation check
    
     - generate a patch file for CI runs
     - attempt to update paths when files are moved
     - enforce unicode file encodings
    
    * ci: update xcode action
    
    * ci(xcode): Update action to run when XCode is modified
    
    * fix: add missing -e flag
    
    Co-authored-by: tehhowch <tehhowch@users.noreply.github.com>
    build: separate copy & build steps for windows CI/CD
    test: Support test case execution, locally and in CICD (#4998)
    
    * Extend CI environment with graphical testframework
    Adds CI workflow for Ubuntu 16.
    Adds minimal code to main.cpp to run hardcoded empty testcase.
    Changes script for headless testing to run hardcoded testcase.
    
    * Fix coding style issue.
    
    * Updated step names to differentiate between tests
    Renamed existing tests to parsetest_*.
    Renamed the new test to autotest_*
    Re-ordered tests so that all parse-tests are together.
    
    * Changed GameData::Progress check to (menuPanels UI)->IsInitialized.
    As based on review-feedback. Using the same pattern as isDone.
    Removed the isReady variable in the anonymous namespace of MenuPanel.
    Also replaced explicit default constructor for UI by implicit constructor.
    Tested:
    - Quit from main menu
    - Exit during flight (by closing window)
    - Ran the automated test
    
    * refactor: move "are we loaded?" from UI to GameData
     - Add "const" accessor GameData::IsLoaded & backing boolean
     - Remove UI->IsInitialized & associated branching
     - Update class comments / method names to distinguish simple accessors & identify future refactoring opportunities
        Audio::Progress -> Audio::GetProgress, as it is already a simple accessor
     - Disable moving/copying the SpriteQueue class, given that it manages threads
    
    * docs: update --help and man entries
    
    * scripts: exit early if not on a supported headless platform
    
    * chore: Update GameLoop params
    Preloaded conversation data, test, or debug mode are not modified.
    
    Co-authored-by: tehhowch <tehhowch@users.noreply.github.com>
    build: Update action versions (#5119)
    
    * Update cache, upload-artifact & download-artifact
    
    * Update cache, upload-artifact & download-artifact
    
    * Build CD on this branch too
    
    * Revert "Build CD on this branch too"
    
    This reverts commit e42e354e08a6036f84ab1b1b72d1a80722cec008.
    ci: Generate downloadable builds upon commit to master (#4861)
    
    * Squash: Implement Nightly CD
    
    * Call them "Continuous Builds", also edit XCode project
    
    * Rename: cd_nightly.yaml -> cd.yaml
    
    * Fix version in main.cpp & Prettier credits.txt
    
    * Versions in artifact filenames; Better credits.txt formatting
    
    * Even better credits formatting
    ci: Split jobs into build and test runs (#4788)
    
    * Split ubuntu jobs into build and tests
    
    * Split Windows and macOS as well
    
    * Cache artifacts to skip compilation when possible
    ci: Restore -quiet flag in macOS compile step
    
    (Warnings, suggested optimizations, and errors will still be printed)
    ci: Disable apt update of microsoft's ubuntu repos (#4758)
    
    The hosted packages are not required by our builds and fetching them has failed checks in more than just this repo
    ci: Improve GitHub Actions (#4753)
    
    * Add windows build & parse, sort out tests
    
    * Restructured, Linux/OSX Caching via sccache/ccache
    
    * Finished touches for the WIP phase
    
    * Add one more TODO
    ci(cd): Publish build artifacts as a "pre-release" (#4975)
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * dummy commit
    
    * Update cd.yaml
    
    * dummy
    
    * Update cd.yaml
    
    * Reimplement for AppImage, replace files on upload
    
    * test on this branch
    
    * AppImage needs setup job
    
    * Add version string adjustments to AppImage, too
    
    * Trigger on master
    
    * Move version string manipulation to a utility script
    
    * Make the script executable
    
    * Typo: continuos
    
    * Split version script up
    
    * Make new script executable
    
    * Add script to modify manpage
    
    * Enable build for testing
    
    * Correct script name
    
    * Restructure: Release-related stuff after building
    
    * Yay more copypasta
    
    * Correct names of the down-/upload steps
    
    * Revert; explicitly download to workspace
    
    * Fancy release description
    
    * A bit less fancy
    
    * Also modify .plist file
    
    * refactor: Combine version update scripts
    
     - pass in version, set all versions
     - Prefix  "commit" to SHA-ish arguments
    
    * cd: revert test-branch change
    
    Co-authored-by: tehhowch <tehhowch@users.noreply.github.com>
    ci(cd): Publish build artifacts as a "pre-release" (#4975)
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * dummy commit
    
    * Update cd.yaml
    
    * dummy
    
    * Update cd.yaml
    
    * Reimplement for AppImage, replace files on upload
    
    * test on this branch
    
    * AppImage needs setup job
    
    * Add version string adjustments to AppImage, too
    
    * Trigger on master
    
    * Move version string manipulation to a utility script
    
    * Make the script executable
    
    * Typo: continuos
    
    * Split version script up
    
    * Make new script executable
    
    * Add script to modify manpage
    
    * Enable build for testing
    
    * Correct script name
    
    * Restructure: Release-related stuff after building
    
    * Yay more copypasta
    
    * Correct names of the down-/upload steps
    
    * Revert; explicitly download to workspace
    
    * Fancy release description
    
    * A bit less fancy
    
    * Also modify .plist file
    
    * refactor: Combine version update scripts
    
     - pass in version, set all versions
     - Prefix  "commit" to SHA-ish arguments
    
    * cd: revert test-branch change
    
    Co-authored-by: tehhowch <tehhowch@users.noreply.github.com>
    fix(ci): Set executable bit on build_appimage.sh (#4919)
    ci(cd): Also build AppImage (#4918)
    
    * Also build AppImage during CD
    * Also build AppImage during CD
    * Also build AppImage during CD
    
    * Restore trigger
    
    * Move to utils/, add missing shebang, re-add ARCH
    ci(cd): Publish build artifacts as a "pre-release" (#4975)
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * Reimplement publishing releases
    
    * dummy commit
    
    * Update cd.yaml
    
    * dummy
    
    * Update cd.yaml
    
    * Reimplement for AppImage, replace files on upload
    
    * test on this branch
    
    * AppImage needs setup job
    
    * Add version string adjustments to AppImage, too
    
    * Trigger on master
    
    * Move version string manipulation to a utility script
    
    * Make the script executable
    
    * Typo: continuos
    
    * Split version script up
    
    * Make new script executable
    
    * Add script to modify manpage
    
    * Enable build for testing
    
    * Correct script name
    
    * Restructure: Release-related stuff after building
    
    * Yay more copypasta
    
    * Correct names of the down-/upload steps
    
    * Revert; explicitly download to workspace
    
    * Fancy release description
    
    * A bit less fancy
    
    * Also modify .plist file
    
    * refactor: Combine version update scripts
    
     - pass in version, set all versions
     - Prefix  "commit" to SHA-ish arguments
    
    * cd: revert test-branch change
    
    Co-authored-by: tehhowch <tehhowch@users.noreply.github.com>
    test: Support test case execution, locally and in CICD (#4998)
    
    * Extend CI environment with graphical testframework
    Adds CI workflow for Ubuntu 16.
    Adds minimal code to main.cpp to run hardcoded empty testcase.
    Changes script for headless testing to run hardcoded testcase.
    
    * Fix coding style issue.
    
    * Updated step names to differentiate between tests
    Renamed existing tests to parsetest_*.
    Renamed the new test to autotest_*
    Re-ordered tests so that all parse-tests are together.
    
    * Changed GameData::Progress check to (menuPanels UI)->IsInitialized.
    As based on review-feedback. Using the same pattern as isDone.
    Removed the isReady variable in the anonymous namespace of MenuPanel.
    Also replaced explicit default constructor for UI by implicit constructor.
    Tested:
    - Quit from main menu
    - Exit during flight (by closing window)
    - Ran the automated test
    
    * refactor: move "are we loaded?" from UI to GameData
     - Add "const" accessor GameData::IsLoaded & backing boolean
     - Remove UI->IsInitialized & associated branching
     - Update class comments / method names to distinguish simple accessors & identify future refactoring opportunities
        Audio::Progress -> Audio::GetProgress, as it is already a simple accessor
     - Disable moving/copying the SpriteQueue class, given that it manages threads
    
    * docs: update --help and man entries
    
    * scripts: exit early if not on a supported headless platform
    
    * chore: Update GameLoop params
    Preloaded conversation data, test, or debug mode are not modified.
    
    Co-authored-by: tehhowch <tehhowch@users.noreply.github.com>
    Increase warning visibility on Windows systems
    
     - Windows console / stderr / stdout output is hampered for GUI applications
     - Replace usage of cerr for logging errors with Files::LogError, which
       will echo to cerr and also to a file.
    Update test scripts
    
     - Move test files into 'tests' directory
    
    ps1:
     - Supply actual path for binary for Start-Process
     - Update OS check for non-PowerShell Core and PowerShell v < 6.0
     - Avoid closing host processes
    
    sh:
     - Use APPDATA on Windows (tested on MinGW/MSYS)
    Test environments need an existing directory path
    Redirect stderr to error file during tests
    
     - Otherwise writes to `cerr` (instead of using Files::LogError) will not fail tests
    Update CI files & label .gitignore
    Enable save-aware data parsing without modifying the save
    
    https://github.com/endless-sky/endless-sky/pull/3994
    
    * Allow parsing game data for content errors
    
     - Specify the `-p` or `--parse-save` command-line option to load the most recent save and allow the game to perform reference-checking.
     This option exits before initializing SDL (e.g. headless operation), and does not save the file before exiting.
     - Updated the man page and help text as well
    
    * Include whitespace warnings in DataFile::Load
    
     - Print warnings to stderr and errors.txt when spaces and tabs are mixed
     - Provides a warning if a line starts with a space, and then tabs are later used in the file for indenting
     - Provides a line-specific warning if spaces and tabs are intermixed on the same line.
     - Fix existing mixed whitespace indentation
    
    * Extend CI tooling with data parsing test
    
     - add bash script for Travis CI
     - add PS script for AppVeyor CI
    
    The scripts invoke the new `-p` command-line flag and test whether the `errors.txt` file was created.
    If so, this is taken to mean that a parsing error occurred. The scripts can be executed locally by passing the appropriate executable as the argument to the script.
    
    * Add OSX build environment
    
     - Homebrew installations of the developer dependencies (per the developer readme).
       (This will eventually result in a broken build when a core dependency publishes a new point release, at which point the XCode project will need to be updated.)
    
    * Avoid automatically saving upon game load
    
     - Closes https://github.com/endless-sky/endless-sky/issues/3510
     - Only allow saving after the player has explicitly "entered" their savegame
       Players explicitly 'enter' their savegame via the keypress / button:
       - 'Enter Ship' (after first launching the game)
       - 'Load Game' (after pressing Load/Save and then selecting a different save)
    
    In other words, if you tell the game, "Yes, this is the save I want to play," its save file will be updated when you close the game.
    If you didn't explicitly tell the game that, then the save file will not be modified.
    ci: revert removal of executable permission for test script
    Added a Wanderer dedicated transport ship to be used later
    
    #4102
    Increase warning visibility on Windows systems
    
     - Windows console / stderr / stdout output is hampered for GUI applications
     - Replace usage of cerr for logging errors with Files::LogError, which
       will echo to cerr and also to a file.
    Update test scripts
    
     - Move test files into 'tests' directory
    
    ps1:
     - Supply actual path for binary for Start-Process
     - Update OS check for non-PowerShell Core and PowerShell v < 6.0
     - Avoid closing host processes
    
    sh:
     - Use APPDATA on Windows (tested on MinGW/MSYS)
    Test environments need an existing directory path
    Redirect stderr to error file during tests
    
     - Otherwise writes to `cerr` (instead of using Files::LogError) will not fail tests
    Enable save-aware data parsing without modifying the save
    
    https://github.com/endless-sky/endless-sky/pull/3994
    
    * Allow parsing game data for content errors
    
     - Specify the `-p` or `--parse-save` command-line option to load the most recent save and allow the game to perform reference-checking.
     This option exits before initializing SDL (e.g. headless operation), and does not save the file before exiting.
     - Updated the man page and help text as well
    
    * Include whitespace warnings in DataFile::Load
    
     - Print warnings to stderr and errors.txt when spaces and tabs are mixed
     - Provides a warning if a line starts with a space, and then tabs are later used in the file for indenting
     - Provides a line-specific warning if spaces and tabs are intermixed on the same line.
     - Fix existing mixed whitespace indentation
    
    * Extend CI tooling with data parsing test
    
     - add bash script for Travis CI
     - add PS script for AppVeyor CI
    
    The scripts invoke the new `-p` command-line flag and test whether the `errors.txt` file was created.
    If so, this is taken to mean that a parsing error occurred. The scripts can be executed locally by passing the appropriate executable as the argument to the script.
    
    * Add OSX build environment
    
     - Homebrew installations of the developer dependencies (per the developer readme).
       (This will eventually result in a broken build when a core dependency publishes a new point release, at which point the XCode project will need to be updated.)
    
    * Avoid automatically saving upon game load
    
     - Closes https://github.com/endless-sky/endless-sky/issues/3510
     - Only allow saving after the player has explicitly "entered" their savegame
       Players explicitly 'enter' their savegame via the keypress / button:
       - 'Enter Ship' (after first launching the game)
       - 'Load Game' (after pressing Load/Save and then selecting a different save)
    
    In other words, if you tell the game, "Yes, this is the save I want to play," its save file will be updated when you close the game.
    If you didn't explicitly tell the game that, then the save file will not be modified.
    ci(xcode): Add a test script that validates / fixes the XCode project file (#4817)
    
    * Add script that checks if the Xcode project is complete.
    
    When the Xcode project is incomplete, then the script automatically suggest a fix (and prints the fix for the user to apply).
    
    * Add additional settings required for Xcode project
    
    - Added target within Xcode project.
    - Added parent within Xcode project.
    - Added no-build flag for header files (since ES doesn't seem to use header builds)
    
    Checked with new files Test.cpp and Test.h:
    - Those files were added in the same way as that LogbookPanel.cpp and LogbookPanel.h are in the project.
    
    The test was done with a version of kronenthaler/mod-pbxproj that supports --parent.
    (The master branch of kronenthaler/mod-pbxproj  doesn't support --parent at the moment this commit was created.)
    
    * Process review comments
    
    * Process review comments
    
    Use variable for paths to xcode-project.
    Limit the check to source-file changes and to the specific check.
    
    * Install pbxproj as system module
    
    Alternative was to add the --user option, but the CI-environment is exclusively available for the test, so that isn't needed.
    
    * Also run xcode_check when the check itself was modified.
    
    * And now also use proper path to .github/workflows.
    
    * Run pbxproj as user-modules instead of system module.
    
    The tests in
    https://github.com/petervdmeer/mod-pbxproj/tree/github_tests
    are running fine.
    
    One difference between that test and the tests here is that pbxproj was running in user-mode.
    So switching to user-mode here to see if that makes a difference.
    
    * Add wheel for installing pbxproj in user-space
    
    * Add some debugging info.
    
    * Install all extra Python libs as user-libraries
    
    * Perform update and upgrade for pbxproj
    
    * Perform checkout and test of mod-pbxproject directly
    
    * Install pbxproj from cloned archive
    
    * Remove debug-info and redundant steps
    
    Remove steps that were added for debugging but that turn out not to be needed.
    
    * Add errormessage about no support for moving files
    
    * Don't exit on the first failure, but try to get an update for all files.
    
    * feat: Improve XCode validation check
    
     - generate a patch file for CI runs
     - attempt to update paths when files are moved
     - enforce unicode file encodings
    
    * ci: update xcode action
    
    * ci(xcode): Update action to run when XCode is modified
    
    * fix: add missing -e flag
    
    Co-authored-by: tehhowch <tehhowch@users.noreply.github.com>
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    feat: Added a new, extremely rare minable asteroid (#4856)
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    Updated the asteroid images to match the new illumination angle.
    Added sprites for six different special asteroid types for minables.
    feat: Added missions to unlock the new Emerald Sword, an ancient Sheragi warship (#4786)
    Added hardpoint sprites for most of the alien weapons.
    Edit the human AMTs for better visibility
    
    #4250
    Added hardpoint sprites for all the turrets that didn't have one yet and that did have an outfit sprite already.
    Added hardpoint sprites for most of the alien weapons.
    Added hardpoint sprites for most of the alien weapons.
    Added hardpoint sprites for most of the alien weapons.
    feat: Added missions to unlock the new Emerald Sword, an ancient Sheragi warship (#4786)
    Tweaked the "slowing" effect to look a bit less tacky.
    Added two new damage types: disruption (which makes shields porous) and slowing.
    Added two new damage types: disruption (which makes shields porous) and slowing.
    Added death effects for Void Sprites.
    Spiffing up the harvestable asteroid explosions a bit.
    Stripped the iCCP profiles and other extraneous chunks from some of the PNG files.
    hai carriers + gatling gun +rail gun (#1284)
    
    Added the Hai carriers, Gatling guns, and railguns (@Amazinite, @LocalGod79, @mdsmestad, @Wrzlprnft).
    Added an "ion cannon" weapon. I'll need a lot of testing to make sure it's balanced - it makes defeating a single isolated foe too easy, but also does much less damage than other weapons of comparable size.
    Added two new damage types: disruption (which makes shields porous) and slowing.
    Added support for hull "leak" effects, when a dying ship is venting atmosphere / flames / blood / whatever.
    Added two new damage types: disruption (which makes shields porous) and slowing.
    Added a new species, the Korath, and one of their ships, the Raider, along with several weapons and outfits for it.
    Added a "cargo box" effect that is shown when you dump cargo.
    Spiffing up the harvestable asteroid explosions a bit.
    feat: Added missions to unlock the new Emerald Sword, an ancient Sheragi warship (#4786)
    feat: Added missions to unlock the new Emerald Sword, an ancient Sheragi warship (#4786)
    Added death effects for Void Sprites.
    Added images for "hallucinations."
    Created a new debris effect that is prettier than the old one.
    Made the "sparks" in the debris clouds flicker on and off.
    Created a new debris effect that is prettier than the old one.
    Made the "sparks" in the debris clouds flicker on and off.
    Created a new debris effect that is prettier than the old one.
    Added two new damage types: disruption (which makes shields porous) and slowing.
    Added an "ion cannon" weapon. I'll need a lot of testing to make sure it's balanced - it makes defeating a single isolated foe too easy, but also does much less damage than other weapons of comparable size.
    Tweaked the "slowing" effect to look a bit less tacky.
    Added two new damage types: disruption (which makes shields porous) and slowing.
    Stripped the iCCP profiles and other extraneous chunks from some of the PNG files.
    hai carriers + gatling gun +rail gun (#1284)
    
    Added the Hai carriers, Gatling guns, and railguns (@Amazinite, @LocalGod79, @mdsmestad, @Wrzlprnft).
    feat: Added missions to unlock the new Emerald Sword, an ancient Sheragi warship (#4786)
    feat: Added missions to unlock the new Emerald Sword, an ancient Sheragi warship (#4786)
    Added a new species, the Korath, and one of their ships, the Raider, along with several weapons and outfits for it.
    feat: Added missions to unlock the new Emerald Sword, an ancient Sheragi warship (#4786)
    Added a Drak ship, with various weapons.
    Spiffing up the harvestable asteroid explosions a bit.
    Added death effects for Void Sprites.
    Added an afterburner outfit. It'll probably take some balancing work to make sure it's not too powerful.
    Spiffing up the harvestable asteroid explosions a bit.
    feat: Added missions to unlock the new Emerald Sword, an ancient Sheragi warship (#4786)
    Stripped the iCCP profiles and other extraneous chunks from some of the PNG files.
    hai carriers + gatling gun +rail gun (#1284)
    
    Added the Hai carriers, Gatling guns, and railguns (@Amazinite, @LocalGod79, @mdsmestad, @Wrzlprnft).
    Added death effects for Void Sprites.
    Added two new damage types: disruption (which makes shields porous) and slowing.
    Added a "cargo box" effect that is shown when you dump cargo.
    feat: Added missions to unlock the new Emerald Sword, an ancient Sheragi warship (#4786)
    feat: Added missions to unlock the new Emerald Sword, an ancient Sheragi warship (#4786)
    Added support for hull "leak" effects, when a dying ship is venting atmosphere / flames / blood / whatever.
    Added support for hull "leak" effects, when a dying ship is venting atmosphere / flames / blood / whatever.
    Created a new debris effect that is prettier than the old one.
    Added death effects for Void Sprites.
    Added a "cargo box" effect that is shown when you dump cargo.
    Added a "cargo box" effect that is shown when you dump cargo.
    Created a new debris effect that is prettier than the old one.
    Added support for hull "leak" effects, when a dying ship is venting atmosphere / flames / blood / whatever.
    Added support for hull "leak" effects, when a dying ship is venting atmosphere / flames / blood / whatever.
    Added support for hull "leak" effects, when a dying ship is venting atmosphere / flames / blood / whatever.
    Added death effects for Void Sprites.
    Added support for hull "leak" effects, when a dying ship is venting atmosphere / flames / blood / whatever.
    Added support for hull "leak" effects, when a dying ship is venting atmosphere / flames / blood / whatever.
    Added images for "hallucinations."
    Spiffing up the harvestable asteroid explosions a bit.
    feat: Added missions to unlock the new Emerald Sword, an ancient Sheragi warship (#4786)
    Added a "cargo box" effect that is shown when you dump cargo.
    Added death effects for Void Sprites.
    Added a "cargo box" effect that is shown when you dump cargo.
    Added two new damage types: disruption (which makes shields porous) and slowing.
    Added support for hull "leak" effects, when a dying ship is venting atmosphere / flames / blood / whatever.
    Spiffing up the harvestable asteroid explosions a bit.
    Added an "ion cannon" weapon. I'll need a lot of testing to make sure it's balanced - it makes defeating a single isolated foe too easy, but also does much less damage than other weapons of comparable size.
    Added an afterburner outfit. It'll probably take some balancing work to make sure it's not too powerful.
    Created a new debris effect that is prettier than the old one.
    Added an afterburner outfit. It'll probably take some balancing work to make sure it's not too powerful.
    Spiffing up the harvestable asteroid explosions a bit.
    Tweaked the "slowing" effect to look a bit less tacky.
    Added two new damage types: disruption (which makes shields porous) and slowing.
    Added a "cargo box" effect that is shown when you dump cargo.
    Added an afterburner outfit. It'll probably take some balancing work to make sure it's not too powerful.
    Tweaked the "slowing" effect to look a bit less tacky.
    Added two new damage types: disruption (which makes shields porous) and slowing.
    Added two new damage types: disruption (which makes shields porous) and slowing.
    Added an afterburner outfit. It'll probably take some balancing work to make sure it's not too powerful.
    Added support for hull "leak" effects, when a dying ship is venting atmosphere / flames / blood / whatever.
    Added a "cargo box" effect that is shown when you dump cargo.
    Added an "ion cannon" weapon. I'll need a lot of testing to make sure it's balanced - it makes defeating a single isolated foe too easy, but also does much less damage than other weapons of comparable size.
    Added an "ion cannon" weapon. I'll need a lot of testing to make sure it's balanced - it makes defeating a single isolated foe too easy, but also does much less damage than other weapons of comparable size.
    Added a Drak ship, with various weapons.
    Made the "sparks" in the debris clouds flicker on and off.
    Created a new debris effect that is prettier than the old one.
    feat: Added missions to unlock the new Emerald Sword, an ancient Sheragi warship (#4786)
    Added images for "hallucinations."
    feat: Added missions to unlock the new Emerald Sword, an ancient Sheragi warship (#4786)
    Added images for "hallucinations."
    Tweaked the "slowing" effect to look a bit less tacky.
    Added two new damage types: disruption (which makes shields porous) and slowing.
    feat: Added missions to unlock the new Emerald Sword, an ancient Sheragi warship (#4786)
    Created a new debris effect that is prettier than the old one.
    Added the nuke, and tweaked the AI to be a bit more cautious about firing it when the target is nearby.
    Added small "sparks" to the explosion images to give them a bit more texture and a sharper look.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Regularizing the names for size progressions to always be tiny < small < medium < large < huge. (Replacing "big" with "large" in some places.)
    Added small "sparks" to the explosion images to give them a bit more texture and a sharper look.
    Uploaded all the files from my local repository to Google Code.
    Added small "sparks" to the explosion images to give them a bit more texture and a sharper look.
    Uploaded all the files from my local repository to Google Code.
    Added small "sparks" to the explosion images to give them a bit more texture and a sharper look.
    Uploaded all the files from my local repository to Google Code.
    Regularizing the names for size progressions to always be tiny < small < medium < large < huge. (Replacing "big" with "large" in some places.)
    Added small "sparks" to the explosion images to give them a bit more texture and a sharper look.
    Uploaded all the files from my local repository to Google Code.
    Added the nuke, and tweaked the AI to be a bit more cautious about firing it when the target is nearby.
    Added small "sparks" to the explosion images to give them a bit more texture and a sharper look.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Added small "sparks" to the explosion images to give them a bit more texture and a sharper look.
    Uploaded all the files from my local repository to Google Code.
    Added the nuke, and tweaked the AI to be a bit more cautious about firing it when the target is nearby.
    Regularizing the names for size progressions to always be tiny < small < medium < large < huge. (Replacing "big" with "large" in some places.)
    Uploaded all the files from my local repository to Google Code.
    Regularizing the names for size progressions to always be tiny < small < medium < large < huge. (Replacing "big" with "large" in some places.)
    Added small "sparks" to the explosion images to give them a bit more texture and a sharper look.
    Uploaded all the files from my local repository to Google Code.
    Added small "sparks" to the explosion images to give them a bit more texture and a sharper look.
    Uploaded all the files from my local repository to Google Code.
    Added the nuke, and tweaked the AI to be a bit more cautious about firing it when the target is nearby.
    Regularizing the names for size progressions to always be tiny < small < medium < large < huge. (Replacing "big" with "large" in some places.)
    Added small "sparks" to the explosion images to give them a bit more texture and a sharper look.
    Uploaded all the files from my local repository to Google Code.
    Added small "sparks" to the explosion images to give them a bit more texture and a sharper look.
    Uploaded all the files from my local repository to Google Code.
    Added small "sparks" to the explosion images to give them a bit more texture and a sharper look.
    Uploaded all the files from my local repository to Google Code.
    Added small "sparks" to the explosion images to give them a bit more texture and a sharper look.
    Uploaded all the files from my local repository to Google Code.
    Added small "sparks" to the explosion images to give them a bit more texture and a sharper look.
    Uploaded all the files from my local repository to Google Code.
    Added small "sparks" to the explosion images to give them a bit more texture and a sharper look.
    Uploaded all the files from my local repository to Google Code.
    Added small "sparks" to the explosion images to give them a bit more texture and a sharper look.
    Uploaded all the files from my local repository to Google Code.
    Regularizing the names for size progressions to always be tiny < small < medium < large < huge. (Replacing "big" with "large" in some places.)
    Added small "sparks" to the explosion images to give them a bit more texture and a sharper look.
    Uploaded all the files from my local repository to Google Code.
    Added small "sparks" to the explosion images to give them a bit more texture and a sharper look.
    Uploaded all the files from my local repository to Google Code.
    Added small "sparks" to the explosion images to give them a bit more texture and a sharper look.
    Uploaded all the files from my local repository to Google Code.
    Added small "sparks" to the explosion images to give them a bit more texture and a sharper look.
    Uploaded all the files from my local repository to Google Code.
    Added small "sparks" to the explosion images to give them a bit more texture and a sharper look.
    Uploaded all the files from my local repository to Google Code.
    Regularizing the names for size progressions to always be tiny < small < medium < large < huge. (Replacing "big" with "large" in some places.)
    Added small "sparks" to the explosion images to give them a bit more texture and a sharper look.
    Uploaded all the files from my local repository to Google Code.
    Added small "sparks" to the explosion images to give them a bit more texture and a sharper look.
    Uploaded all the files from my local repository to Google Code.
    Added small "sparks" to the explosion images to give them a bit more texture and a sharper look.
    Uploaded all the files from my local repository to Google Code.
    Added the nuke, and tweaked the AI to be a bit more cautious about firing it when the target is nearby.
    Added small "sparks" to the explosion images to give them a bit more texture and a sharper look.
    Uploaded all the files from my local repository to Google Code.
    Added small "sparks" to the explosion images to give them a bit more texture and a sharper look.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Regularizing the names for size progressions to always be tiny < small < medium < large < huge. (Replacing "big" with "large" in some places.)
    Added small "sparks" to the explosion images to give them a bit more texture and a sharper look.
    Uploaded all the files from my local repository to Google Code.
    Added small "sparks" to the explosion images to give them a bit more texture and a sharper look.
    Uploaded all the files from my local repository to Google Code.
    Added small "sparks" to the explosion images to give them a bit more texture and a sharper look.
    Uploaded all the files from my local repository to Google Code.
    Added small "sparks" to the explosion images to give them a bit more texture and a sharper look.
    Uploaded all the files from my local repository to Google Code.
    Regularizing the names for size progressions to always be tiny < small < medium < large < huge. (Replacing "big" with "large" in some places.)
    Added small "sparks" to the explosion images to give them a bit more texture and a sharper look.
    Uploaded all the files from my local repository to Google Code.
    Added the nuke, and tweaked the AI to be a bit more cautious about firing it when the target is nearby.
    Added the nuke, and tweaked the AI to be a bit more cautious about firing it when the target is nearby.
    Added the nuke, and tweaked the AI to be a bit more cautious about firing it when the target is nearby.
    Added small "sparks" to the explosion images to give them a bit more texture and a sharper look.
    Uploaded all the files from my local repository to Google Code.
    Added small "sparks" to the explosion images to give them a bit more texture and a sharper look.
    Uploaded all the files from my local repository to Google Code.
    Added small "sparks" to the explosion images to give them a bit more texture and a sharper look.
    Uploaded all the files from my local repository to Google Code.
    Added small "sparks" to the explosion images to give them a bit more texture and a sharper look.
    Uploaded all the files from my local repository to Google Code.
    Added unique explosions for Pug ships
    
    #3957
    Added unique explosions for Pug ships
    
    #3957
    Uploaded all the files from my local repository to Google Code.
    Added unique explosions for Pug ships
    
    #3957
    Added unique explosions for Pug ships
    
    #3957
    Added unique explosions for Pug ships
    
    #3957
    Added unique explosions for Pug ships
    
    #3957
    Added unique explosions for Pug ships
    
    #3957
    Added unique explosions for Pug ships
    
    #3957
    Uploaded all the files from my local repository to Google Code.
    Added unique explosions for Pug ships
    
    #3957
    Uploaded all the files from my local repository to Google Code.
    Added unique explosions for Pug ships
    
    #3957
    Added unique explosions for Pug ships
    
    #3957
    Regularizing the names for size progressions to always be tiny < small < medium < large < huge. (Replacing "big" with "large" in some places.)
    Uploaded all the files from my local repository to Google Code.
    Added unique explosions for Pug ships
    
    #3957
    Added unique explosions for Pug ships
    
    #3957
    fix(content): Corrected the dimensions of Pug explosion large 3 and 4
    Added unique explosions for Pug ships
    
    #3957
    Added unique explosions for Pug ships
    
    #3957
    Added unique explosions for Pug ships
    
    #3957
    Added unique explosions for Pug ships
    
    #3957
    Added unique explosions for Pug ships
    
    #3957
    Added unique explosions for Pug ships
    
    #3957
    Added unique explosions for Pug ships
    
    #3957
    Added unique explosions for Pug ships
    
    #3957
    Added unique explosions for Pug ships
    
    #3957
    Added unique explosions for Pug ships
    
    #3957
    Added unique explosions for Pug ships
    
    #3957
    Added unique explosions for Pug ships
    
    #3957
    Added unique explosions for Pug ships
    
    #3957
    Added unique explosions for Pug ships
    
    #3957
    Added unique explosions for Pug ships
    
    #3957
    Added unique explosions for Pug ships
    
    #3957
    Added unique explosions for Pug ships
    
    #3957
    Added unique explosions for Pug ships
    
    #3957
    Uploaded all the files from my local repository to Google Code.
    fix(content): Corrected the dimensions of Pug explosion large 3 and 4
    Added unique explosions for Pug ships
    
    #3957
    Added unique explosions for Pug ships
    
    #3957
    Added unique explosions for Pug ships
    
    #3957
    Added unique explosions for Pug ships
    
    #3957
    Added unique explosions for Pug ships
    
    #3957
    Added unique explosions for Pug ships
    
    #3957
    Added unique explosions for Pug ships
    
    #3957
    Added unique explosions for Pug ships
    
    #3957
    Added unique explosions for Pug ships
    
    #3957
    Stripping iCCP profiles from portrait images.
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Removed the iCCP profiles from the portrait images.
    Added a "news" system for displaying messages from local inhabitants you meet in the spaceport.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Stripping iCCP profiles from portrait images.
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Removed the iCCP profiles from the portrait images.
    Added a "news" system for displaying messages from local inhabitants you meet in the spaceport.
    Added more portraits for an increased variety of what can be seen
    
    #3683
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Removed the iCCP profiles from the portrait images.
    Added a "news" system for displaying messages from local inhabitants you meet in the spaceport.
    Added more portraits for an increased variety of what can be seen
    
    #3683
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Stripping iCCP profiles from portrait images.
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Added more portraits for an increased variety of what can be seen
    
    #3683
    Removed the iCCP profiles from the portrait images.
    Added a "news" system for displaying messages from local inhabitants you meet in the spaceport.
    Added more portraits for an increased variety of what can be seen
    
    #3683
    Stripping iCCP profiles from portrait images.
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Added more portraits for an increased variety of what can be seen
    
    #3683
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Added more portraits for an increased variety of what can be seen
    
    #3683
    Stripping iCCP profiles from portrait images.
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Added more portraits for an increased variety of what can be seen
    
    #3683
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Added more portraits for an increased variety of what can be seen
    
    #3683
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Added more portraits for an increased variety of what can be seen
    
    #3683
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Added more portraits for an increased variety of what can be seen
    
    #3683
    Stripping iCCP profiles from portrait images.
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Stripping iCCP profiles from portrait images.
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Stripping iCCP profiles from portrait images.
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Stripping iCCP profiles from portrait images.
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Added more portraits for an increased variety of what can be seen
    
    #3683
    Removed the iCCP profiles from the portrait images.
    Added a "news" system for displaying messages from local inhabitants you meet in the spaceport.
    Stripping iCCP profiles from portrait images.
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Stripping iCCP profiles from portrait images.
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Added more portraits for an increased variety of what can be seen
    
    #3683
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Added more portraits for an increased variety of what can be seen
    
    #3683
    Stripping iCCP profiles from portrait images.
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Removed the iCCP profiles from the portrait images.
    Added a "news" system for displaying messages from local inhabitants you meet in the spaceport.
    Stripping iCCP profiles from portrait images.
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Stripping iCCP profiles from portrait images.
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Removed the iCCP profiles from the portrait images.
    Added a "news" system for displaying messages from local inhabitants you meet in the spaceport.
    Stripping iCCP profiles from portrait images.
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Added more portraits for an increased variety of what can be seen
    
    #3683
    Stripping iCCP profiles from portrait images.
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Removed the iCCP profiles from the portrait images.
    Added a "news" system for displaying messages from local inhabitants you meet in the spaceport.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Stripping iCCP profiles from portrait images.
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Removed the iCCP profiles from the portrait images.
    Added a "news" system for displaying messages from local inhabitants you meet in the spaceport.
    Removed the iCCP profiles from the portrait images.
    Added a "news" system for displaying messages from local inhabitants you meet in the spaceport.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Stripping iCCP profiles from portrait images.
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Stripping iCCP profiles from portrait images.
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Added more portraits for an increased variety of what can be seen
    
    #3683
    Added more portraits for an increased variety of what can be seen
    
    #3683
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Removed the iCCP profiles from the portrait images.
    Added a "news" system for displaying messages from local inhabitants you meet in the spaceport.
    Removed the iCCP profiles from the portrait images.
    Added a "news" system for displaying messages from local inhabitants you meet in the spaceport.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Removed the iCCP profiles from the portrait images.
    Added a "news" system for displaying messages from local inhabitants you meet in the spaceport.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Added more portraits for an increased variety of what can be seen
    
    #3683
    Added more portraits for an increased variety of what can be seen
    
    #3683
    Removed the iCCP profiles from the portrait images.
    Added a "news" system for displaying messages from local inhabitants you meet in the spaceport.
    Added more portraits for an increased variety of what can be seen
    
    #3683
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Removed the iCCP profiles from the portrait images.
    Added a "news" system for displaying messages from local inhabitants you meet in the spaceport.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Stripping iCCP profiles from portrait images.
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Stripping iCCP profiles from portrait images.
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Added more portraits for an increased variety of what can be seen
    
    #3683
    Stripping iCCP profiles from portrait images.
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Removed the iCCP profiles from the portrait images.
    Added a "news" system for displaying messages from local inhabitants you meet in the spaceport.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Removed the iCCP profiles from the portrait images.
    Added a "news" system for displaying messages from local inhabitants you meet in the spaceport.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Added more portraits for an increased variety of what can be seen
    
    #3683
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Added more portraits for an increased variety of what can be seen
    
    #3683
    Added more portraits for an increased variety of what can be seen
    
    #3683
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Stripping iCCP profiles from portrait images.
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Added more portraits for an increased variety of what can be seen
    
    #3683
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Stripping iCCP profiles from portrait images.
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Added more portraits for an increased variety of what can be seen
    
    #3683
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Added more portraits for an increased variety of what can be seen
    
    #3683
    Removed the iCCP profiles from the portrait images.
    Added a "news" system for displaying messages from local inhabitants you meet in the spaceport.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Removed the iCCP profiles from the portrait images.
    Added a "news" system for displaying messages from local inhabitants you meet in the spaceport.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Stripping iCCP profiles from portrait images.
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Added more portraits for an increased variety of what can be seen
    
    #3683
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Added more portraits for an increased variety of what can be seen
    
    #3683
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Removed the iCCP profiles from the portrait images.
    Added a "news" system for displaying messages from local inhabitants you meet in the spaceport.
    Added more portraits for an increased variety of what can be seen
    
    #3683
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Stripping iCCP profiles from portrait images.
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Stripping iCCP profiles from portrait images.
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Removed the iCCP profiles from the portrait images.
    Added a "news" system for displaying messages from local inhabitants you meet in the spaceport.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Stripping iCCP profiles from portrait images.
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Stripping iCCP profiles from portrait images.
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Removed the iCCP profiles from the portrait images.
    Added a "news" system for displaying messages from local inhabitants you meet in the spaceport.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Removed the iCCP profiles from the portrait images.
    Added a "news" system for displaying messages from local inhabitants you meet in the spaceport.
    Removed the iCCP profiles from the portrait images.
    Added a "news" system for displaying messages from local inhabitants you meet in the spaceport.
    Stripping iCCP profiles from portrait images.
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Added new outfit images for the javelin and meteor missiles.
    Shrunk the outfit images to look less crowded in the gallery.
    Added some outfit icons. Also added license information for all the images.
    feat(content): Updated the Pilot's License image to use the silhouette of the newer Argosy model (#5260)
    Added images for the human licenses.
    Fixed the outfitter's handling of maps and licenses so that "buy" is disabled if you have one, and so that the map shows up with a count of 1 if you have mapped the entire area it covers.
    Added "license" outfits that can be purchased as a special item to give the pilot a license for a given ship type. (Ships don't yet specify what licenses they require, however.)
    feat: Added missions to unlock the new Emerald Sword, an ancient Sheragi warship (#4786)
    Added images for the reactors.
    Added a fusion reactor outfit thumbnail.
    Brig and prisoner transport jobs (#3347)
    
    * Bounty hunter and prisoner transport jobs, and a new outfit to unlock them
    
    * Copyright info
    
    * Quote government and attribute tokens
    
    * Moved the prisoner transport jobs with the rest of the passenger jobs
    
    * Relocated all bounty hunting jobs (including the new ones) to the end,
    with the other bounty hunting jobs; now they're all in the same place
    
    * For all new and relocated bounty hunting jobs, quoted tokens and made
    them available on independent worlds
    
    * Adding Brigs to a few variants
    
    * Adjusted the outfit's description
    
    * Removed an accidental double Brig on one of the variants
    
    * Address review comment by quoting "Pirate"
    
    * Address review comments
    
    * Address review comments
    
    * ++Supercapacitor  --Small Radar Jammer
    Added images for the reactors.
    Added an outfit image and icon for the nuke.
    Added images for the reactors.
    Stripped the iCCP profiles and other extraneous chunks from some of the PNG files.
    hai carriers + gatling gun +rail gun (#1284)
    
    Added the Hai carriers, Gatling guns, and railguns (@Amazinite, @LocalGod79, @mdsmestad, @Wrzlprnft).
    feat: Added missions to unlock the new Emerald Sword, an ancient Sheragi warship (#4786)
    feat: Added missions to unlock the new Emerald Sword, an ancient Sheragi warship (#4786)
    Added a "Flamethrower" weapon that uses hyperspace fuel as ammo, and updated the AI so it will not fire off its last jump worth of fuel.
    hai carriers + gatling gun +rail gun (#1284)
    
    Added the Hai carriers, Gatling guns, and railguns (@Amazinite, @LocalGod79, @mdsmestad, @Wrzlprnft).
    Starting to add images for the Remnant outfits.
    Added the image for the "keystone" outfit.
    Added a map outfit that is equivalent to "visiting" the twelve nearest systems.
    Added images for the remainder of the weapon systems you can buy.
    Shrunk the outfit images to look less crowded in the gallery.
    Added some outfit icons. Also added license information for all the images.
    Added a new torpedo launcher, and updated the projectile sprites for several other weapons.
    feat: Added missions to unlock the new Emerald Sword, an ancient Sheragi warship (#4786)
    Added new outfit images for the javelin and meteor missiles.
    Shrunk the outfit images to look less crowded in the gallery.
    Added some outfit icons. Also added license information for all the images.
    Added an "android" outfit that replaces one required crew member.
    Added images for the reactors.
    hai carriers + gatling gun +rail gun (#1284)
    
    Added the Hai carriers, Gatling guns, and railguns (@Amazinite, @LocalGod79, @mdsmestad, @Wrzlprnft).
    Added images for the remainder of the weapon systems you can buy.
    Shrunk the outfit images to look less crowded in the gallery.
    Added some outfit icons. Also added license information for all the images.
    Added images for the laser and blaster.
    Working on a new alien species, the Wanderers.
    Added images for the laser and blaster.
    Update my master (#1)
    Added outfit images for three of the Korath weapons.
    Added the last three Korath outfit images.
    Edit the human AMTs for better visibility
    
    #4250
    Added outfit images for the particle cannon and anti-missile.
    Added a new weapon for the Hai, the Pulse Cannon / Turret. Also added an icon to use for outfits (especially of alien origin) that have no thumbnail yet.
    Working on a new alien species, the Wanderers.
    Added a "supercapacitor": a tiny, low-cost battery just for allowing you to store enough energy to fire non-beam weapons.
    hai carriers + gatling gun +rail gun (#1284)
    
    Added the Hai carriers, Gatling guns, and railguns (@Amazinite, @LocalGod79, @mdsmestad, @Wrzlprnft).
    Added an afterburner outfit. It'll probably take some balancing work to make sure it's not too powerful.
    Brightened the torpedo outfits to better match the Typhoon ones.
    Added images for the remainder of the weapon systems you can buy.
    Shrunk the outfit images to look less crowded in the gallery.
    Added some outfit icons. Also added license information for all the images.
    More Coalition outfit images.
    Update my master (#1)
    Added outfit images for three of the Korath weapons.
    Added a new Korath weapon, the Repeater.
    Added outfit images for the ramscoop and hyperdrive.
    Added the last three Korath outfit images.
    feat(content): Gave the ramscoop a new, high-detail sprite (#5265)
    Added outfit images for the ramscoop and hyperdrive.
    Update my master (#1)
    Added outfit images for three of the Korath weapons.
    Added a new Korath weapon, the Piercer missile.
    Made the Slicer available in non-turret form, and added outfit images for it.
    feat: Added missions to unlock the new Emerald Sword, an ancient Sheragi warship (#4786)
    feat: Gave the void sprite "mouthparts?" a sprite (#5170)
    Added a new weapon for the Tele'ekite Wanderers, the Moonbeam.
    Added the last three Korath outfit images.
    Continuing to update the landscapes.
    Updated the landscape images so nothing has any "close up" objects in it.
    Uploaded all the files from my local repository to Google Code.
    Added some Creative Commons BY-SA-3.0 photos from Wikimedia, and updated the credits and copyright file accordingly.
    New landscape images (#2025)
    
    * Added new images
    
    113 total
    @Striker 11 images
    @harro 10 images
    @Emotion_Machine 1 image
    
    * Fixed some oversized images
    
    * Copyright for Striker and Gardevou (Emotion_Machine)
    
    * Added copyright for harro and fixed a typo
    
    * Finshed adding copyright for @harro
    
    * Removed most images.
    
    Leaving 22.
    Changed numbering to match.
    Removed unneeded copyright for @Gardevour.
    
    * Removed 1 that I missed
    
    * Lisence change and readding an image.
    Added new "landscape" images from @sivael for human space station interiors.
    Updated more of the landscape images.
    Uploaded all the files from my local repository to Google Code.
    Updated all the space station "landscape" images.
    Added some space stations throughout the galaxy, and also added "landscape" pictures for them.
    Uploaded all the files from my local repository to Google Code.
    Continuing to improve the landscape images.
    Updated the landscape images so nothing has any "close up" objects in it.
    Uploaded all the files from my local repository to Google Code.
    Add 33 new landscape images.
    
    New cityscapes can be used to resolve #790.
    Paired with endless-sky/endless-sky-high-dpi#4.
    Updated all the space station "landscape" images.
    Added some space stations throughout the galaxy, and also added "landscape" pictures for them.
    Added some space stations throughout the galaxy, and also added "landscape" pictures for them.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    Replacing some ugly landscapes with prettier ones from unsplash.com.
    Updating more of the landscape images.
    Replaced some of the uglier landscape images with new ones.
    Updated the landscape images so nothing has any "close up" objects in it.
    Uploaded all the files from my local repository to Google Code.
    Updated more of the landscape images.
    Replaced some of the uglier landscape images with new ones.
    Uploaded all the files from my local repository to Google Code.
    Replacing some ugly landscapes with prettier ones from unsplash.com.
    Continuing to improve the landscape images.
    Replaced some of the uglier landscape images with new ones.
    Uploaded all the files from my local repository to Google Code.
    Continuing to improve the landscape images.
    Updated the landscape images so nothing has any "close up" objects in it.
    Uploaded all the files from my local repository to Google Code.
    Added some Creative Commons BY-SA-3.0 photos from Wikimedia, and updated the credits and copyright file accordingly.
    Added new "landscape" images from @sivael for human space station interiors.
    Uploaded all the files from my local repository to Google Code.
    Continuing to improve the landscape images.
    Uploaded all the files from my local repository to Google Code.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    Updated the landscape images so nothing has any "close up" objects in it.
    Uploaded all the files from my local repository to Google Code.
    Updated more of the landscape images.
    Updated the landscape images so nothing has any "close up" objects in it.
    Uploaded all the files from my local repository to Google Code.
    Add 33 new landscape images.
    
    New cityscapes can be used to resolve #790.
    Paired with endless-sky/endless-sky-high-dpi#4.
    Updated more of the landscape images.
    Updated the landscape images so nothing has any "close up" objects in it.
    Uploaded all the files from my local repository to Google Code.
    Updating some landscapes with new images from unsplash.com.
    Uploaded all the files from my local repository to Google Code.
    New landscape images (#2025)
    
    * Added new images
    
    113 total
    @Striker 11 images
    @harro 10 images
    @Emotion_Machine 1 image
    
    * Fixed some oversized images
    
    * Copyright for Striker and Gardevou (Emotion_Machine)
    
    * Added copyright for harro and fixed a typo
    
    * Finshed adding copyright for @harro
    
    * Removed most images.
    
    Leaving 22.
    Changed numbering to match.
    Removed unneeded copyright for @Gardevour.
    
    * Removed 1 that I missed
    
    * Lisence change and readding an image.
    Add 33 new landscape images.
    
    New cityscapes can be used to resolve #790.
    Paired with endless-sky/endless-sky-high-dpi#4.
    New landscape images (#2025)
    
    * Added new images
    
    113 total
    @Striker 11 images
    @harro 10 images
    @Emotion_Machine 1 image
    
    * Fixed some oversized images
    
    * Copyright for Striker and Gardevou (Emotion_Machine)
    
    * Added copyright for harro and fixed a typo
    
    * Finshed adding copyright for @harro
    
    * Removed most images.
    
    Leaving 22.
    Changed numbering to match.
    Removed unneeded copyright for @Gardevour.
    
    * Removed 1 that I missed
    
    * Lisence change and readding an image.
    Uploaded all the files from my local repository to Google Code.
    Add a volcanic island to the image for Deep
    Replacing some ugly landscapes with prettier ones from unsplash.com.
    Updated the landscape images so nothing has any "close up" objects in it.
    Uploaded all the files from my local repository to Google Code.
    Added some space stations throughout the galaxy, and also added "landscape" pictures for them.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Replaced some of the uglier landscape images with new ones.
    Uploaded all the files from my local repository to Google Code.
    Updated most of the desert landscapes with higher-quality images, and some of the cities as well.
    Uploaded all the files from my local repository to Google Code.
    Updated four of the landscape images that were rather ugly.
    Updated the landscape images so nothing has any "close up" objects in it.
    Uploaded all the files from my local repository to Google Code.
    resized images
    New landscapes (#2415)
    
    * Keep drug running in human space
    
    * added 2 new landscapes (@Iridium Ore)
    
    * corrected picture size
    
    * Added last 4 images (with copyright). Added a contact email. Renamed 1 image.
    
    * Straitnd an image
    
    * Fixing an invisible bite order mark (I hope)
    Updated four of the landscape images that were rather ugly.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Add 33 new landscape images.
    
    New cityscapes can be used to resolve #790.
    Paired with endless-sky/endless-sky-high-dpi#4.
    Uploaded all the files from my local repository to Google Code.
    Add 33 new landscape images.
    
    New cityscapes can be used to resolve #790.
    Paired with endless-sky/endless-sky-high-dpi#4.
    Updated all the space station "landscape" images.
    Added some space stations throughout the galaxy, and also added "landscape" pictures for them.
    Replacing some ugly landscapes with prettier ones from unsplash.com.
    Replaced some of the uglier landscape images with new ones.
    Uploaded all the files from my local repository to Google Code.
    Added some space stations throughout the galaxy, and also added "landscape" pictures for them.
    Add 33 new landscape images.
    
    New cityscapes can be used to resolve #790.
    Paired with endless-sky/endless-sky-high-dpi#4.
    New landscape images (#2025)
    
    * Added new images
    
    113 total
    @Striker 11 images
    @harro 10 images
    @Emotion_Machine 1 image
    
    * Fixed some oversized images
    
    * Copyright for Striker and Gardevou (Emotion_Machine)
    
    * Added copyright for harro and fixed a typo
    
    * Finshed adding copyright for @harro
    
    * Removed most images.
    
    Leaving 22.
    Changed numbering to match.
    Removed unneeded copyright for @Gardevour.
    
    * Removed 1 that I missed
    
    * Lisence change and readding an image.
    Updating some landscapes with new images from unsplash.com.
    Updating more of the landscape images.
    Uploaded all the files from my local repository to Google Code.
    Replacing some ugly landscapes with prettier ones from unsplash.com.
    Uploaded all the files from my local repository to Google Code.
    Updating some landscapes with new images from unsplash.com.
    Updating more of the landscape images.
    Uploaded all the files from my local repository to Google Code.
    Replacing some ugly landscapes with prettier ones from unsplash.com.
    Uploaded all the files from my local repository to Google Code.
    Added some landscape images taken from public domain NASA images.
    Replacing some ugly landscapes with prettier ones from unsplash.com.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Updated more of the landscape images.
    Uploaded all the files from my local repository to Google Code.
    Continuing to improve the landscape images.
    Uploaded all the files from my local repository to Google Code.
    Add 33 new landscape images.
    
    New cityscapes can be used to resolve #790.
    Paired with endless-sky/endless-sky-high-dpi#4.
    Continuing to update the landscape images.
    Uploaded all the files from my local repository to Google Code.
    Replaced more landscape images with more interesting ones.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Added a small dragon pod to the image for Skymoot (#3404)
    
    * Added a dragon and futuristic cityscape to the image for Skymoot
    
    * Changed the image for Skymoot to include a small pod of dragons
    
    * Made the dragons appear darker and smaller
    Continuing to improve the landscape images.
    Uploaded all the files from my local repository to Google Code.
    Add 33 new landscape images.
    
    New cityscapes can be used to resolve #790.
    Paired with endless-sky/endless-sky-high-dpi#4.
    Added some Creative Commons BY-SA-3.0 photos from Wikimedia, and updated the credits and copyright file accordingly.
    Uploaded all the files from my local repository to Google Code.
    Updated the landscape images so nothing has any "close up" objects in it.
    Uploaded all the files from my local repository to Google Code.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    Uploaded all the files from my local repository to Google Code.
    Added new "landscape" images from @sivael for human space station interiors.
    New landscape images (#2025)
    
    * Added new images
    
    113 total
    @Striker 11 images
    @harro 10 images
    @Emotion_Machine 1 image
    
    * Fixed some oversized images
    
    * Copyright for Striker and Gardevou (Emotion_Machine)
    
    * Added copyright for harro and fixed a typo
    
    * Finshed adding copyright for @harro
    
    * Removed most images.
    
    Leaving 22.
    Changed numbering to match.
    Removed unneeded copyright for @Gardevour.
    
    * Removed 1 that I missed
    
    * Lisence change and readding an image.
    New landscape images (#2025)
    
    * Added new images
    
    113 total
    @Striker 11 images
    @harro 10 images
    @Emotion_Machine 1 image
    
    * Fixed some oversized images
    
    * Copyright for Striker and Gardevou (Emotion_Machine)
    
    * Added copyright for harro and fixed a typo
    
    * Finshed adding copyright for @harro
    
    * Removed most images.
    
    Leaving 22.
    Changed numbering to match.
    Removed unneeded copyright for @Gardevour.
    
    * Removed 1 that I missed
    
    * Lisence change and readding an image.
    Added new "landscape" images from @sivael for human space station interiors.
    New landscape images (#2025)
    
    * Added new images
    
    113 total
    @Striker 11 images
    @harro 10 images
    @Emotion_Machine 1 image
    
    * Fixed some oversized images
    
    * Copyright for Striker and Gardevou (Emotion_Machine)
    
    * Added copyright for harro and fixed a typo
    
    * Finshed adding copyright for @harro
    
    * Removed most images.
    
    Leaving 22.
    Changed numbering to match.
    Removed unneeded copyright for @Gardevour.
    
    * Removed 1 that I missed
    
    * Lisence change and readding an image.
    Updating some landscapes with new images from unsplash.com.
    Updated most of the desert landscapes with higher-quality images, and some of the cities as well.
    Replaced some of the uglier landscape images with new ones.
    Added some Creative Commons BY-SA-3.0 photos from Wikimedia, and updated the credits and copyright file accordingly.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    See Muspel from Norn, see Norn from Muspel (#4056)
    While creating @2x landscape sprites, switched to new images for some of the landscapes.
    Updated the landscape images so nothing has any "close up" objects in it.
    Uploaded all the files from my local repository to Google Code.
    Replacing some ugly landscapes with prettier ones from unsplash.com.
    Updated the landscape images so nothing has any "close up" objects in it.
    Uploaded all the files from my local repository to Google Code.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    Added five new Mars landscapes.
    Updating some landscapes with new images from unsplash.com.
    Replaced some of the uglier landscape images with new ones.
    Updating some landscapes with new images from unsplash.com.
    Uploaded all the files from my local repository to Google Code.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    Add 33 new landscape images.
    
    New cityscapes can be used to resolve #790.
    Paired with endless-sky/endless-sky-high-dpi#4.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    While creating @2x landscape sprites, switched to new images for some of the landscapes.
    Uploaded all the files from my local repository to Google Code.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    Updated all the space station "landscape" images.
    Replaced more landscape images with more interesting ones.
    Replacing some ugly landscapes with prettier ones from unsplash.com.
    While creating @2x landscape sprites, switched to new images for some of the landscapes.
    Uploaded all the files from my local repository to Google Code.
    Added some Creative Commons BY-SA-3.0 photos from Wikimedia, and updated the credits and copyright file accordingly.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    Add 33 new landscape images.
    
    New cityscapes can be used to resolve #790.
    Paired with endless-sky/endless-sky-high-dpi#4.
    Updated the landscape images so nothing has any "close up" objects in it.
    Uploaded all the files from my local repository to Google Code.
    Updating more of the landscape images.
    Uploaded all the files from my local repository to Google Code.
    New landscape images (#2025)
    
    * Added new images
    
    113 total
    @Striker 11 images
    @harro 10 images
    @Emotion_Machine 1 image
    
    * Fixed some oversized images
    
    * Copyright for Striker and Gardevou (Emotion_Machine)
    
    * Added copyright for harro and fixed a typo
    
    * Finshed adding copyright for @harro
    
    * Removed most images.
    
    Leaving 22.
    Changed numbering to match.
    Removed unneeded copyright for @Gardevour.
    
    * Removed 1 that I missed
    
    * Lisence change and readding an image.
    Updating some landscapes with new images from unsplash.com.
    Continuing to update the landscapes.
    Uploaded all the files from my local repository to Google Code.
    resized images
    New landscapes (#2415)
    
    * Keep drug running in human space
    
    * added 2 new landscapes (@Iridium Ore)
    
    * corrected picture size
    
    * Added last 4 images (with copyright). Added a contact email. Renamed 1 image.
    
    * Straitnd an image
    
    * Fixing an invisible bite order mark (I hope)
    Added some landscape images taken from public domain NASA images.
    Replacing some ugly landscapes with prettier ones from unsplash.com.
    Uploaded all the files from my local repository to Google Code.
    Replacing some ugly landscapes with prettier ones from unsplash.com.
    Updated all the space station "landscape" images.
    Added some space stations throughout the galaxy, and also added "landscape" pictures for them.
    Added some Creative Commons BY-SA-3.0 photos from Wikimedia, and updated the credits and copyright file accordingly.
    Replacing some ugly landscapes with prettier ones from unsplash.com.
    Continuing to update the landscape images.
    Updated the "lava" landscape images (replacing some ugly ones and improving contrast on others).
    Replaced more landscape images with more interesting ones.
    Uploaded all the files from my local repository to Google Code.
    Updating some landscapes with new images from unsplash.com.
    Updated more of the landscape images.
    Replaced some of the uglier landscape images with new ones.
    Uploaded all the files from my local repository to Google Code.
    Changed the color of one of the new landscape pictures to make it less similar to one of the existing ones.
    Added some Creative Commons BY-SA-3.0 photos from Wikimedia, and updated the credits and copyright file accordingly.
    Updated most of the desert landscapes with higher-quality images, and some of the cities as well.
    Uploaded all the files from my local repository to Google Code.
    Continuing to improve the landscape images.
    Uploaded all the files from my local repository to Google Code.
    Updating some landscapes with new images from unsplash.com.
    Uploaded all the files from my local repository to Google Code.
    Updating some landscapes with new images from unsplash.com.
    While creating @2x landscape sprites, switched to new images for some of the landscapes.
    Replaced more landscape images with more interesting ones.
    Replaced some of the uglier landscape images with new ones.
    Updated the landscape images so nothing has any "close up" objects in it.
    Uploaded all the files from my local repository to Google Code.
    Updated a few of the forest landscapes.
    Updated the landscape images so nothing has any "close up" objects in it.
    Uploaded all the files from my local repository to Google Code.
    New landscape images (#2025)
    
    * Added new images
    
    113 total
    @Striker 11 images
    @harro 10 images
    @Emotion_Machine 1 image
    
    * Fixed some oversized images
    
    * Copyright for Striker and Gardevou (Emotion_Machine)
    
    * Added copyright for harro and fixed a typo
    
    * Finshed adding copyright for @harro
    
    * Removed most images.
    
    Leaving 22.
    Changed numbering to match.
    Removed unneeded copyright for @Gardevour.
    
    * Removed 1 that I missed
    
    * Lisence change and readding an image.
    Replaced some of the uglier landscape images with new ones.
    Updated the landscape images so nothing has any "close up" objects in it.
    Uploaded all the files from my local repository to Google Code.
    Add 33 new landscape images.
    
    New cityscapes can be used to resolve #790.
    Paired with endless-sky/endless-sky-high-dpi#4.
    Added new "landscape" images from @sivael for human space station interiors.
    Updating some landscapes with new images from unsplash.com.
    Updated four of the landscape images that were rather ugly.
    Uploaded all the files from my local repository to Google Code.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    Add 33 new landscape images.
    
    New cityscapes can be used to resolve #790.
    Paired with endless-sky/endless-sky-high-dpi#4.
    Updated the "lava" landscape images (replacing some ugly ones and improving contrast on others).
    Replaced some of the uglier landscape images with new ones.
    Uploaded all the files from my local repository to Google Code.
    While creating @2x landscape sprites, switched to new images for some of the landscapes.
    Uploaded all the files from my local repository to Google Code.
    New landscape images (#2025)
    
    * Added new images
    
    113 total
    @Striker 11 images
    @harro 10 images
    @Emotion_Machine 1 image
    
    * Fixed some oversized images
    
    * Copyright for Striker and Gardevou (Emotion_Machine)
    
    * Added copyright for harro and fixed a typo
    
    * Finshed adding copyright for @harro
    
    * Removed most images.
    
    Leaving 22.
    Changed numbering to match.
    Removed unneeded copyright for @Gardevour.
    
    * Removed 1 that I missed
    
    * Lisence change and readding an image.
    Updated more of the landscape images.
    Updated the landscape images so nothing has any "close up" objects in it.
    Uploaded all the files from my local repository to Google Code.
    Replacing some ugly landscapes with prettier ones from unsplash.com.
    Replaced more landscape images with more interesting ones.
    Updated the landscape images so nothing has any "close up" objects in it.
    Uploaded all the files from my local repository to Google Code.
    Replacing some ugly landscapes with prettier ones from unsplash.com.
    Updated the landscape images so nothing has any "close up" objects in it.
    Uploaded all the files from my local repository to Google Code.
    Added some Creative Commons BY-SA-3.0 photos from Wikimedia, and updated the credits and copyright file accordingly.
    Updating some landscapes with new images from unsplash.com.
    While creating @2x landscape sprites, switched to new images for some of the landscapes.
    Replaced some of the uglier landscape images with new ones.
    Uploaded all the files from my local repository to Google Code.
    See Muspel from Norn, see Norn from Muspel (#4056)
    Uploaded all the files from my local repository to Google Code.
    Added some Creative Commons BY-SA-3.0 photos from Wikimedia, and updated the credits and copyright file accordingly.
    Add 33 new landscape images.
    
    New cityscapes can be used to resolve #790.
    Paired with endless-sky/endless-sky-high-dpi#4.
    Add 33 new landscape images.
    
    New cityscapes can be used to resolve #790.
    Paired with endless-sky/endless-sky-high-dpi#4.
    Updating some landscapes with new images from unsplash.com.
    Continuing to improve the landscape images.
    Updated the landscape images so nothing has any "close up" objects in it.
    Uploaded all the files from my local repository to Google Code.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    Added some Creative Commons BY-SA-3.0 photos from Wikimedia, and updated the credits and copyright file accordingly.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    Add 33 new landscape images.
    
    New cityscapes can be used to resolve #790.
    Paired with endless-sky/endless-sky-high-dpi#4.
    Add 33 new landscape images.
    
    New cityscapes can be used to resolve #790.
    Paired with endless-sky/endless-sky-high-dpi#4.
    New landscape images (#2025)
    
    * Added new images
    
    113 total
    @Striker 11 images
    @harro 10 images
    @Emotion_Machine 1 image
    
    * Fixed some oversized images
    
    * Copyright for Striker and Gardevou (Emotion_Machine)
    
    * Added copyright for harro and fixed a typo
    
    * Finshed adding copyright for @harro
    
    * Removed most images.
    
    Leaving 22.
    Changed numbering to match.
    Removed unneeded copyright for @Gardevour.
    
    * Removed 1 that I missed
    
    * Lisence change and readding an image.
    Added some Creative Commons BY-SA-3.0 photos from Wikimedia, and updated the credits and copyright file accordingly.
    Continuing to update the landscape images.
    Updated the "lava" landscape images (replacing some ugly ones and improving contrast on others).
    Uploaded all the files from my local repository to Google Code.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    Replacing some ugly landscapes with prettier ones from unsplash.com.
    Updated some of the "mountain" landscapes.
    Uploaded all the files from my local repository to Google Code.
    resized images
    New landscapes (#2415)
    
    * Keep drug running in human space
    
    * added 2 new landscapes (@Iridium Ore)
    
    * corrected picture size
    
    * Added last 4 images (with copyright). Added a contact email. Renamed 1 image.
    
    * Straitnd an image
    
    * Fixing an invisible bite order mark (I hope)
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    Updated more of the landscape images.
    Uploaded all the files from my local repository to Google Code.
    Added some Creative Commons BY-SA-3.0 photos from Wikimedia, and updated the credits and copyright file accordingly.
    New landscape images (#2025)
    
    * Added new images
    
    113 total
    @Striker 11 images
    @harro 10 images
    @Emotion_Machine 1 image
    
    * Fixed some oversized images
    
    * Copyright for Striker and Gardevou (Emotion_Machine)
    
    * Added copyright for harro and fixed a typo
    
    * Finshed adding copyright for @harro
    
    * Removed most images.
    
    Leaving 22.
    Changed numbering to match.
    Removed unneeded copyright for @Gardevour.
    
    * Removed 1 that I missed
    
    * Lisence change and readding an image.
    Uploaded all the files from my local repository to Google Code.
    Added some Creative Commons BY-SA-3.0 photos from Wikimedia, and updated the credits and copyright file accordingly.
    New landscape images (#2025)
    
    * Added new images
    
    113 total
    @Striker 11 images
    @harro 10 images
    @Emotion_Machine 1 image
    
    * Fixed some oversized images
    
    * Copyright for Striker and Gardevou (Emotion_Machine)
    
    * Added copyright for harro and fixed a typo
    
    * Finshed adding copyright for @harro
    
    * Removed most images.
    
    Leaving 22.
    Changed numbering to match.
    Removed unneeded copyright for @Gardevour.
    
    * Removed 1 that I missed
    
    * Lisence change and readding an image.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    Add 33 new landscape images.
    
    New cityscapes can be used to resolve #790.
    Paired with endless-sky/endless-sky-high-dpi#4.
    Replacing some ugly landscapes with prettier ones from unsplash.com.
    Continuing to update the landscape images.
    Updated the "lava" landscape images (replacing some ugly ones and improving contrast on others).
    Uploaded all the files from my local repository to Google Code.
    While creating @2x landscape sprites, switched to new images for some of the landscapes.
    Uploaded all the files from my local repository to Google Code.
    Added some Creative Commons BY-SA-3.0 photos from Wikimedia, and updated the credits and copyright file accordingly.
    New landscape images (#2025)
    
    * Added new images
    
    113 total
    @Striker 11 images
    @harro 10 images
    @Emotion_Machine 1 image
    
    * Fixed some oversized images
    
    * Copyright for Striker and Gardevou (Emotion_Machine)
    
    * Added copyright for harro and fixed a typo
    
    * Finshed adding copyright for @harro
    
    * Removed most images.
    
    Leaving 22.
    Changed numbering to match.
    Removed unneeded copyright for @Gardevour.
    
    * Removed 1 that I missed
    
    * Lisence change and readding an image.
    Updated some of the "mountain" landscapes.
    Uploaded all the files from my local repository to Google Code.
    Added the Remnant territory (the Ember Waste) to the map.
    Replacing some ugly landscapes with prettier ones from unsplash.com.
    Updating more of the landscape images.
    Uploaded all the files from my local repository to Google Code.
    Replacing some ugly landscapes with prettier ones from unsplash.com.
    Updating more of the landscape images.
    Replaced some of the uglier landscape images with new ones.
    Updated the landscape images so nothing has any "close up" objects in it.
    Uploaded all the files from my local repository to Google Code.
    Updated more of the landscape images.
    Uploaded all the files from my local repository to Google Code.
    Replacing some ugly landscapes with prettier ones from unsplash.com.
    While creating @2x landscape sprites, switched to new images for some of the landscapes.
    Uploaded all the files from my local repository to Google Code.
    Updated all the space station "landscape" images.
    Replaced more landscape images with more interesting ones.
    Added some space stations throughout the galaxy, and also added "landscape" pictures for them.
    Added new "landscape" images from @sivael for human space station interiors.
    Updated a few of the forest landscapes.
    Uploaded all the files from my local repository to Google Code.
    Replacing some ugly landscapes with prettier ones from unsplash.com.
    Uploaded all the files from my local repository to Google Code.
    Updating some landscapes with new images from unsplash.com.
    While creating @2x landscape sprites, switched to new images for some of the landscapes.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Replacing some ugly landscapes with prettier ones from unsplash.com.
    Updated some of the "mountain" landscapes.
    Uploaded all the files from my local repository to Google Code.
    Add 33 new landscape images.
    
    New cityscapes can be used to resolve #790.
    Paired with endless-sky/endless-sky-high-dpi#4.
    Updating some landscapes with new images from unsplash.com.
    Uploaded all the files from my local repository to Google Code.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    Added some Creative Commons BY-SA-3.0 photos from Wikimedia, and updated the credits and copyright file accordingly.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    Added some space stations throughout the galaxy, and also added "landscape" pictures for them.
    resized images
    New landscapes (#2415)
    
    * Keep drug running in human space
    
    * added 2 new landscapes (@Iridium Ore)
    
    * corrected picture size
    
    * Added last 4 images (with copyright). Added a contact email. Renamed 1 image.
    
    * Straitnd an image
    
    * Fixing an invisible bite order mark (I hope)
    Updating some landscapes with new images from unsplash.com.
    Replaced more landscape images with more interesting ones.
    Updated the landscape images so nothing has any "close up" objects in it.
    Uploaded all the files from my local repository to Google Code.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    Updated a few more landscapes, and the copyright info for them.
    Uploaded all the files from my local repository to Google Code.
    Add 33 new landscape images.
    
    New cityscapes can be used to resolve #790.
    Paired with endless-sky/endless-sky-high-dpi#4.
    Updated all the space station "landscape" images.
    Added some space stations throughout the galaxy, and also added "landscape" pictures for them.
    Updating some landscapes with new images from unsplash.com.
    Uploaded all the files from my local repository to Google Code.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    Added some Creative Commons BY-SA-3.0 photos from Wikimedia, and updated the credits and copyright file accordingly.
    Updated the landscape images so nothing has any "close up" objects in it.
    Uploaded all the files from my local repository to Google Code.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    Updated some of the "mountain" landscapes.
    Replaced some of the uglier landscape images with new ones.
    Uploaded all the files from my local repository to Google Code.
    Updating more of the landscape images.
    Replacing some ugly landscapes with prettier ones from unsplash.com.
    Uploaded all the files from my local repository to Google Code.
    New landscape images (#2025)
    
    * Added new images
    
    113 total
    @Striker 11 images
    @harro 10 images
    @Emotion_Machine 1 image
    
    * Fixed some oversized images
    
    * Copyright for Striker and Gardevou (Emotion_Machine)
    
    * Added copyright for harro and fixed a typo
    
    * Finshed adding copyright for @harro
    
    * Removed most images.
    
    Leaving 22.
    Changed numbering to match.
    Removed unneeded copyright for @Gardevour.
    
    * Removed 1 that I missed
    
    * Lisence change and readding an image.
    Add 33 new landscape images.
    
    New cityscapes can be used to resolve #790.
    Paired with endless-sky/endless-sky-high-dpi#4.
    Updating some landscapes with new images from unsplash.com.
    Replaced more landscape images with more interesting ones.
    Uploaded all the files from my local repository to Google Code.
    New landscapes (#2415)
    
    * Keep drug running in human space
    
    * added 2 new landscapes (@Iridium Ore)
    
    * corrected picture size
    
    * Added last 4 images (with copyright). Added a contact email. Renamed 1 image.
    
    * Straitnd an image
    
    * Fixing an invisible bite order mark (I hope)
    Uploaded all the files from my local repository to Google Code.
    Added some Creative Commons BY-SA-3.0 photos from Wikimedia, and updated the credits and copyright file accordingly.
    Added the Remnant territory (the Ember Waste) to the map.
    Added some Creative Commons BY-SA-3.0 photos from Wikimedia, and updated the credits and copyright file accordingly.
    Uploaded all the files from my local repository to Google Code.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    Replacing some ugly landscapes with prettier ones from unsplash.com.
    Uploaded all the files from my local repository to Google Code.
    Continuing to update the landscapes.
    Uploaded all the files from my local repository to Google Code.
    Updated most of the desert landscapes with higher-quality images, and some of the cities as well.
    Uploaded all the files from my local repository to Google Code.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    New landscape images (#2025)
    
    * Added new images
    
    113 total
    @Striker 11 images
    @harro 10 images
    @Emotion_Machine 1 image
    
    * Fixed some oversized images
    
    * Copyright for Striker and Gardevou (Emotion_Machine)
    
    * Added copyright for harro and fixed a typo
    
    * Finshed adding copyright for @harro
    
    * Removed most images.
    
    Leaving 22.
    Changed numbering to match.
    Removed unneeded copyright for @Gardevour.
    
    * Removed 1 that I missed
    
    * Lisence change and readding an image.
    Updating some landscapes with new images from unsplash.com.
    Replacing some ugly landscapes with prettier ones from unsplash.com.
    Updated all the space station "landscape" images.
    Added some space stations throughout the galaxy, and also added "landscape" pictures for them.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    Updating some landscapes with new images from unsplash.com.
    Uploaded all the files from my local repository to Google Code.
    Replacing some ugly landscapes with prettier ones from unsplash.com.
    Updated the landscape images so nothing has any "close up" objects in it.
    Uploaded all the files from my local repository to Google Code.
    Replacing some ugly landscapes with prettier ones from unsplash.com.
    Continuing to improve the landscape images.
    Uploaded all the files from my local repository to Google Code.
    Added some Creative Commons BY-SA-3.0 photos from Wikimedia, and updated the credits and copyright file accordingly.
    Updated all the space station "landscape" images.
    Added some space stations throughout the galaxy, and also added "landscape" pictures for them.
    Added some landscape images taken from public domain NASA images.
    Added some landscape images taken from public domain NASA images.
    Updated most of the desert landscapes with higher-quality images, and some of the cities as well.
    Uploaded all the files from my local repository to Google Code.
    Add 33 new landscape images.
    
    New cityscapes can be used to resolve #790.
    Paired with endless-sky/endless-sky-high-dpi#4.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    Replacing some ugly landscapes with prettier ones from unsplash.com.
    Updated more of the landscape images.
    Updated the landscape images so nothing has any "close up" objects in it.
    Uploaded all the files from my local repository to Google Code.
    Updating some of the landscape images.
    Added some landscape images taken from public domain NASA images.
    New landscape images (#2025)
    
    * Added new images
    
    113 total
    @Striker 11 images
    @harro 10 images
    @Emotion_Machine 1 image
    
    * Fixed some oversized images
    
    * Copyright for Striker and Gardevou (Emotion_Machine)
    
    * Added copyright for harro and fixed a typo
    
    * Finshed adding copyright for @harro
    
    * Removed most images.
    
    Leaving 22.
    Changed numbering to match.
    Removed unneeded copyright for @Gardevour.
    
    * Removed 1 that I missed
    
    * Lisence change and readding an image.
    Added five new Mars landscapes.
    Updated more of the landscape images.
    Uploaded all the files from my local repository to Google Code.
    Added five new Mars landscapes.
    Replacing some ugly landscapes with prettier ones from unsplash.com.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    New landscapes (#2415)
    
    * Keep drug running in human space
    
    * added 2 new landscapes (@Iridium Ore)
    
    * corrected picture size
    
    * Added last 4 images (with copyright). Added a contact email. Renamed 1 image.
    
    * Straitnd an image
    
    * Fixing an invisible bite order mark (I hope)
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    Add 33 new landscape images.
    
    New cityscapes can be used to resolve #790.
    Paired with endless-sky/endless-sky-high-dpi#4.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    Added five new Mars landscapes.
    New landscape images (#2025)
    
    * Added new images
    
    113 total
    @Striker 11 images
    @harro 10 images
    @Emotion_Machine 1 image
    
    * Fixed some oversized images
    
    * Copyright for Striker and Gardevou (Emotion_Machine)
    
    * Added copyright for harro and fixed a typo
    
    * Finshed adding copyright for @harro
    
    * Removed most images.
    
    Leaving 22.
    Changed numbering to match.
    Removed unneeded copyright for @Gardevour.
    
    * Removed 1 that I missed
    
    * Lisence change and readding an image.
    While creating @2x landscape sprites, switched to new images for some of the landscapes.
    Replaced some of the uglier landscape images with new ones.
    Uploaded all the files from my local repository to Google Code.
    Replacing some ugly landscapes with prettier ones from unsplash.com.
    Updating more of the landscape images.
    Updated the landscape images so nothing has any "close up" objects in it.
    Added some landscape images taken from public domain NASA images.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    Add 33 new landscape images.
    
    New cityscapes can be used to resolve #790.
    Paired with endless-sky/endless-sky-high-dpi#4.
    Add a high-tech image for Lagrange
    
    #3897
    Added some Creative Commons BY-SA-3.0 photos from Wikimedia, and updated the credits and copyright file accordingly.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    Updating some of the landscape images.
    Updated the landscape images so nothing has any "close up" objects in it.
    Uploaded all the files from my local repository to Google Code.
    Added new "landscape" images from @sivael for human space station interiors.
    Updated more of the landscape images.
    Uploaded all the files from my local repository to Google Code.
    Continuing to improve the landscape images.
    Updated the landscape images so nothing has any "close up" objects in it.
    Uploaded all the files from my local repository to Google Code.
    New landscape images (#2025)
    
    * Added new images
    
    113 total
    @Striker 11 images
    @harro 10 images
    @Emotion_Machine 1 image
    
    * Fixed some oversized images
    
    * Copyright for Striker and Gardevou (Emotion_Machine)
    
    * Added copyright for harro and fixed a typo
    
    * Finshed adding copyright for @harro
    
    * Removed most images.
    
    Leaving 22.
    Changed numbering to match.
    Removed unneeded copyright for @Gardevour.
    
    * Removed 1 that I missed
    
    * Lisence change and readding an image.
    While creating @2x landscape sprites, switched to new images for some of the landscapes.
    Replaced some of the uglier landscape images with new ones.
    Updated the landscape images so nothing has any "close up" objects in it.
    Uploaded all the files from my local repository to Google Code.
    Replacing some ugly landscapes with prettier ones from unsplash.com.
    Updated the landscape images so nothing has any "close up" objects in it.
    Uploaded all the files from my local repository to Google Code.
    Updated most of the desert landscapes with higher-quality images, and some of the cities as well.
    Updated the landscape images so nothing has any "close up" objects in it.
    Uploaded all the files from my local repository to Google Code.
    Updating some of the landscape images.
    Replaced some of the uglier landscape images with new ones.
    Uploaded all the files from my local repository to Google Code.
    Added some landscape images taken from public domain NASA images.
    Fixed one of the landscape images that had a black border on one side.
    Uploaded all the files from my local repository to Google Code.
    Added some Creative Commons BY-SA-3.0 photos from Wikimedia, and updated the credits and copyright file accordingly.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    Add 33 new landscape images.
    
    New cityscapes can be used to resolve #790.
    Paired with endless-sky/endless-sky-high-dpi#4.
    Updating some of the landscape images.
    Uploaded all the files from my local repository to Google Code.
    Replacing some ugly landscapes with prettier ones from unsplash.com.
    Uploaded all the files from my local repository to Google Code.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    Added five new Mars landscapes.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    Add 33 new landscape images.
    
    New cityscapes can be used to resolve #790.
    Paired with endless-sky/endless-sky-high-dpi#4.
    Updated all the space station "landscape" images.
    Replaced more landscape images with more interesting ones.
    Added some space stations throughout the galaxy, and also added "landscape" pictures for them.
    Add 33 new landscape images.
    
    New cityscapes can be used to resolve #790.
    Paired with endless-sky/endless-sky-high-dpi#4.
    Added new "landscape" images from @sivael for human space station interiors.
    Updated the landscape images so nothing has any "close up" objects in it.
    Uploaded all the files from my local repository to Google Code.
    Add 33 new landscape images.
    
    New cityscapes can be used to resolve #790.
    Paired with endless-sky/endless-sky-high-dpi#4.
    Uploaded all the files from my local repository to Google Code.
    New landscape images (#2025)
    
    * Added new images
    
    113 total
    @Striker 11 images
    @harro 10 images
    @Emotion_Machine 1 image
    
    * Fixed some oversized images
    
    * Copyright for Striker and Gardevou (Emotion_Machine)
    
    * Added copyright for harro and fixed a typo
    
    * Finshed adding copyright for @harro
    
    * Removed most images.
    
    Leaving 22.
    Changed numbering to match.
    Removed unneeded copyright for @Gardevour.
    
    * Removed 1 that I missed
    
    * Lisence change and readding an image.
    feat(content): Added a new Builder station to the Graveyard (#5198)
    Continuing to update the landscape images.
    Replaced more landscape images with more interesting ones.
    Uploaded all the files from my local repository to Google Code.
    Replaced some of the uglier landscape images with new ones.
    Uploaded all the files from my local repository to Google Code.
    Added some Creative Commons BY-SA-3.0 photos from Wikimedia, and updated the credits and copyright file accordingly.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    Added new "landscape" images from @sivael for human space station interiors.
    Updating some landscapes with new images from unsplash.com.
    Replaced some of the uglier landscape images with new ones.
    Uploaded all the files from my local repository to Google Code.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    Continuing to update the landscape images.
    Updated the "lava" landscape images (replacing some ugly ones and improving contrast on others).
    Uploaded all the files from my local repository to Google Code.
    Updated more of the landscape images.
    Uploaded all the files from my local repository to Google Code.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    Replacing some ugly landscapes with prettier ones from unsplash.com.
    Uploaded all the files from my local repository to Google Code.
    Replacing some ugly landscapes with prettier ones from unsplash.com.
    Uploaded all the files from my local repository to Google Code.
    Updated most of the desert landscapes with higher-quality images, and some of the cities as well.
    Add 33 new landscape images.
    
    New cityscapes can be used to resolve #790.
    Paired with endless-sky/endless-sky-high-dpi#4.
    Replacing some ugly landscapes with prettier ones from unsplash.com.
    Uploaded all the files from my local repository to Google Code.
    While creating @2x landscape sprites, switched to new images for some of the landscapes.
    Updated the landscape images so nothing has any "close up" objects in it.
    Updated a few more landscapes, and the copyright info for them.
    Uploaded all the files from my local repository to Google Code.
    Added some Creative Commons BY-SA-3.0 photos from Wikimedia, and updated the credits and copyright file accordingly.
    Add 33 new landscape images.
    
    New cityscapes can be used to resolve #790.
    Paired with endless-sky/endless-sky-high-dpi#4.
    Added some Creative Commons BY-SA-3.0 photos from Wikimedia, and updated the credits and copyright file accordingly.
    Updating some landscapes with new images from unsplash.com.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Replacing some ugly landscapes with prettier ones from unsplash.com.
    Uploaded all the files from my local repository to Google Code.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    Updated a few of the forest landscapes.
    Replaced some of the uglier landscape images with new ones.
    Updated the landscape images so nothing has any "close up" objects in it.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Updating some landscapes with new images from unsplash.com.
    Uploaded all the files from my local repository to Google Code.
    Added new "landscape" images from @sivael for human space station interiors.
    Added some Creative Commons BY-SA-3.0 photos from Wikimedia, and updated the credits and copyright file accordingly.
    Add 33 new landscape images.
    
    New cityscapes can be used to resolve #790.
    Paired with endless-sky/endless-sky-high-dpi#4.
    Continuing to update the landscape images.
    Uploaded all the files from my local repository to Google Code.
    Added some Creative Commons BY-SA-3.0 photos from Wikimedia, and updated the credits and copyright file accordingly.
    Updated all the space station "landscape" images.
    Added some space stations throughout the galaxy, and also added "landscape" pictures for them.
    Added some landscape images taken from public domain NASA images.
    Uploaded all the files from my local repository to Google Code.
    Updating some landscapes with new images from unsplash.com.
    Updating some of the landscape images.
    Uploaded all the files from my local repository to Google Code.
    Updated some of the "mountain" landscapes.
    Uploaded all the files from my local repository to Google Code.
    Added a moon in the sky of the "Clink" landscape.
    Updated most of the desert landscapes with higher-quality images, and some of the cities as well.
    Uploaded all the files from my local repository to Google Code.
    Added some Creative Commons BY-SA-3.0 photos from Wikimedia, and updated the credits and copyright file accordingly.
    Updated some of the "mountain" landscapes.
    Uploaded all the files from my local repository to Google Code.
    Continuing to improve the landscape images.
    Updated four of the landscape images that were rather ugly.
    Uploaded all the files from my local repository to Google Code.
    Updated most of the desert landscapes with higher-quality images, and some of the cities as well.
    Uploaded all the files from my local repository to Google Code.
    Added some space stations throughout the galaxy, and also added "landscape" pictures for them.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    New landscape images (#2025)
    
    * Added new images
    
    113 total
    @Striker 11 images
    @harro 10 images
    @Emotion_Machine 1 image
    
    * Fixed some oversized images
    
    * Copyright for Striker and Gardevou (Emotion_Machine)
    
    * Added copyright for harro and fixed a typo
    
    * Finshed adding copyright for @harro
    
    * Removed most images.
    
    Leaving 22.
    Changed numbering to match.
    Removed unneeded copyright for @Gardevour.
    
    * Removed 1 that I missed
    
    * Lisence change and readding an image.
    Replacing some ugly landscapes with prettier ones from unsplash.com.
    Updated some of the "mountain" landscapes.
    Uploaded all the files from my local repository to Google Code.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    Added some Creative Commons BY-SA-3.0 photos from Wikimedia, and updated the credits and copyright file accordingly.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    Continuing to improve the landscape images.
    Uploaded all the files from my local repository to Google Code.
    Updating some landscapes with new images from unsplash.com.
    Uploaded all the files from my local repository to Google Code.
    Added some Creative Commons BY-SA-3.0 photos from Wikimedia, and updated the credits and copyright file accordingly.
    Add 33 new landscape images.
    
    New cityscapes can be used to resolve #790.
    Paired with endless-sky/endless-sky-high-dpi#4.
    New landscape images (#2025)
    
    * Added new images
    
    113 total
    @Striker 11 images
    @harro 10 images
    @Emotion_Machine 1 image
    
    * Fixed some oversized images
    
    * Copyright for Striker and Gardevou (Emotion_Machine)
    
    * Added copyright for harro and fixed a typo
    
    * Finshed adding copyright for @harro
    
    * Removed most images.
    
    Leaving 22.
    Changed numbering to match.
    Removed unneeded copyright for @Gardevour.
    
    * Removed 1 that I missed
    
    * Lisence change and readding an image.
    Add 33 new landscape images.
    
    New cityscapes can be used to resolve #790.
    Paired with endless-sky/endless-sky-high-dpi#4.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    New landscape images (#2025)
    
    * Added new images
    
    113 total
    @Striker 11 images
    @harro 10 images
    @Emotion_Machine 1 image
    
    * Fixed some oversized images
    
    * Copyright for Striker and Gardevou (Emotion_Machine)
    
    * Added copyright for harro and fixed a typo
    
    * Finshed adding copyright for @harro
    
    * Removed most images.
    
    Leaving 22.
    Changed numbering to match.
    Removed unneeded copyright for @Gardevour.
    
    * Removed 1 that I missed
    
    * Lisence change and readding an image.
    Added some Creative Commons BY-SA-3.0 photos from Wikimedia, and updated the credits and copyright file accordingly.
    Fixed bad auto-hinting that made the '+' sign non-symmetrical.
    Fixed an inadvertent permissions change on two png files.
    Straight quotation marks are now replaced with curly ones when rendering text.
    Shifted the font glyphs over one pixel to avoid bleed between glyphs when text is not aligned to pixel boundaries. (This required a few tweaks to the kerning code, too.)
    Switched to double-scale bitmap fonts, so they will be sharp on high-DPI systems. Made the kerning a little tighter and more even in the process.
    Uploaded all the files from my local repository to Google Code.
    Fixed an inadvertent permissions change on two png files.
    Straight quotation marks are now replaced with curly ones when rendering text.
    Shifted the font glyphs over one pixel to avoid bleed between glyphs when text is not aligned to pixel boundaries. (This required a few tweaks to the kerning code, too.)
    Switched to double-scale bitmap fonts, so they will be sharp on high-DPI systems. Made the kerning a little tighter and more even in the process.
    Uploaded all the files from my local repository to Google Code.
    Added map labels that appear when you discover Wanderer, Hai, Korath, and Coalition space.
    Added map labels that appear when you discover Wanderer, Hai, Korath, and Coalition space.
    Added text labels to the map for each named sector of human space (dirt belt, rim, core, etc.).
    Added text labels to the map for each named sector of human space (dirt belt, rim, core, etc.).
    Added a label for the Ember Waste, which shows up once you make contact with the Remnant.
    Added map labels that appear when you discover Wanderer, Hai, Korath, and Coalition space.
    Added map labels that appear when you discover Wanderer, Hai, Korath, and Coalition space.
    Added text labels to the map for each named sector of human space (dirt belt, rim, core, etc.).
    Added map labels that appear when you discover Wanderer, Hai, Korath, and Coalition space.
    feat(aliens)!: new alien factions: the Builders and the Ka'het (#4716)
    Added text labels to the map for each named sector of human space (dirt belt, rim, core, etc.).
    Added text labels to the map for each named sector of human space (dirt belt, rim, core, etc.).
    Added text labels to the map for each named sector of human space (dirt belt, rim, core, etc.).
    Added map labels that appear when you discover Wanderer, Hai, Korath, and Coalition space.
    Added text labels to the map for each named sector of human space (dirt belt, rim, core, etc.).
    Added a new Remnant carrier along with a fighter and drone
    
    #4546
    Creating the Tern
    
    This PR adds the Tern, a durable drone initially designed for mining/harvesting from gas giants and frequently utilized to fill the "screening" role that most empires use fightercraft for. Given the Remnant don't have the population to spend lives in screening roles, they use these drones instead. At least, in their home systems.
    
    Graphics courtesy of BeccaBunny
    Adding the Tern
    
    Technically a Remnant Drone, currently implemented as an interceptor.
    Redesigned Betelgeuse Ships
    
    #4458
    Added shipyard thumbnails for the remaining ships that didn't have them yet
    
    #4377
    Added shipyard thumbnails for the remaining ships that didn't have them yet
    
    #4377
    Added shipyard thumbnails for the remaining ships that didn't have them yet
    
    #4377
    Added shipyard thumbnails for the remaining ships that didn't have them yet
    
    #4377
    Added new Remnant missions and content (@Zitchas @Brick63)
    
    #3761
    feat(graphics): Added new details to Tarazed ships (#5368)
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    feat(graphics): Updated the shipyard sprites of the Starling, Ibis, and Albatross to better match the top-down sprites(#5383)
    Added spaceport thumbnails for the Wanderers, Hai, and Remnant.
    Redesigned Betelgeuse Ships
    
    #4458
    Added shipyard thumbnails for the remaining ships that didn't have them yet
    
    #4377
    Added a new Remnant carrier along with a fighter and drone
    
    #4546
    Updates and Additions
    
    Adding the Petrel
    Adjustments to the Ibis
    Tweaks to the Tern.
    
    Tern: Intended to be a tanking drone.
    Petrel: Intended to be a mid range stand-back fighter
    Ibis: Medium mining/support carrier (2 figher 4 drone)
    Added shipyard thumbnails for the remaining ships that didn't have them yet
    
    #4377
    feat(person): The Subsidurial, a spacefaring organism (#4785)
    Added shipyard thumbnails for all Korath ships, just for completeness.
    feat: New Navy logistics ships (#5108)
    Added shipyard thumbnails for the remaining ships that didn't have them yet
    
    #4377
    feat(graphics): Added new details to Tarazed ships (#5368)
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    feat(graphics): Updated the shipyard sprites of the Starling, Ibis, and Albatross to better match the top-down sprites(#5383)
    Added spaceport thumbnails for the Wanderers, Hai, and Remnant.
    feat(graphics): Added new details to Tarazed ships (#5368)
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Less blurry Southbound ship sprites
    
    #4455
    New Southbound ship sprites (#4319)
    
    * Detailed sprites
    
    * updated copyright
    
    * better blur on the fury
    
    * Redid all the normal dpi scaling
    
    * Added the new Bastion with the new hardpoints position
    
    * Added Bastion to copyright and corrected an error
    
    Switched from " " to "?"
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Added shipyard thumbnails for the remaining ships that didn't have them yet
    
    #4377
    feat: Added a new advanced Remnant warship to be unlocked later (#4662)
    Revert "Merge branch 'RemnantGraphics' into Remnant-Puffin-Rename"
    
    This reverts commit 70f79e4505022a228b5dc6ce79a2f96780b8b500, reversing
    changes made to 048d210c723dacbf6008e9b05026c294e1000a4d.
    Remnant Graphics Holding Branch
    
    This is a branch intended for simply holding graphics that I am planning on merging into Vanilla once I get the story written up to the point that it makes sense.
    
    Everything in here is intended to be Tier 2=<, depending on where in the story it appears.
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    feat: New Navy logistics ships (#5108)
    Added shipyard thumbnails for the remaining ships that didn't have them yet
    
    #4377
    Added shipyard thumbnails for the remaining ships that didn't have them yet
    
    #4377
    Redesigned Betelgeuse Ships
    
    #4458
    Added shipyard thumbnails for the remaining ships that didn't have them yet
    
    #4377
    Added shipyard thumbnails for the remaining ships that didn't have them yet
    
    #4377
    Redesigned Betelgeuse Ships
    
    #4458
    Added shipyard thumbnails for the remaining ships that didn't have them yet
    
    #4377
    Added spaceport thumbnails for the Wanderers, Hai, and Remnant.
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    feat: New Navy logistics ships (#5108)
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Added spaceport thumbnails for the Wanderers, Hai, and Remnant.
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Added spaceport thumbnails for the Wanderers, Hai, and Remnant.
    Less blurry Southbound ship sprites
    
    #4455
    New Southbound ship sprites (#4319)
    
    * Detailed sprites
    
    * updated copyright
    
    * better blur on the fury
    
    * Redid all the normal dpi scaling
    
    * Added the new Bastion with the new hardpoints position
    
    * Added Bastion to copyright and corrected an error
    
    Switched from " " to "?"
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    feat(graphics): Updated the shipyard sprites of the Starling, Ibis, and Albatross to better match the top-down sprites(#5383)
    Added a new Remnant carrier along with a fighter and drone
    
    #4546
    Adding the Ibis
    
    Adds the Ibis, a Remnant Carrier of similar vintage to the Albatross.
     - Adds Ship data (with rough data)
     - Unlocks with the Capital license
     - Adds sprite
     - Adds thumbnail
     - Adds to shipyard
    
    Todo list:
    - Adjusting stats,
    - adding to fleets.
    - Adding the Tern & Ibis to BeccaBunny's copyright section.
    
    Thanks to beccaBunny for the graphics.
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Redesigned Betelgeuse Ships
    
    #4458
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    feat(graphics): Added new details to Tarazed ships (#5368)
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Less blurry Southbound ship sprites
    
    #4455
    New Southbound ship sprites (#4319)
    
    * Detailed sprites
    
    * updated copyright
    
    * better blur on the fury
    
    * Redid all the normal dpi scaling
    
    * Added the new Bastion with the new hardpoints position
    
    * Added Bastion to copyright and corrected an error
    
    Switched from " " to "?"
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Tweaked the Headhunter and Raven
    
    #4014
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Added shipyard thumbnails for the remaining ships that didn't have them yet
    
    #4377
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Added shipyard thumbnails for the remaining ships that didn't have them yet
    
    #4377
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Less blurry Southbound ship sprites
    
    #4455
    New Southbound ship sprites (#4319)
    
    * Detailed sprites
    
    * updated copyright
    
    * better blur on the fury
    
    * Redid all the normal dpi scaling
    
    * Added the new Bastion with the new hardpoints position
    
    * Added Bastion to copyright and corrected an error
    
    Switched from " " to "?"
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Added shipyard thumbnails for the remaining ships that didn't have them yet
    
    #4377
    Redesigned Betelgeuse Ships
    
    #4458
    Added shipyard thumbnails for the remaining ships that didn't have them yet
    
    #4377
    feat(graphics): Added new details to Tarazed ships (#5368)
    Added shipyard thumbnails for the remaining ships that didn't have them yet
    
    #4377
    feat: New Navy logistics ships (#5108)
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Added spaceport thumbnails for the Wanderers, Hai, and Remnant.
    Added a Wanderer dedicated transport ship to be used later
    
    #4102
    feat: Added missions to unlock the new Emerald Sword, an ancient Sheragi warship (#4786)
    Redesigned Betelgeuse Ships
    
    #4458
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Less blurry Southbound ship sprites
    
    #4455
    New Southbound ship sprites (#4319)
    
    * Detailed sprites
    
    * updated copyright
    
    * better blur on the fury
    
    * Redid all the normal dpi scaling
    
    * Added the new Bastion with the new hardpoints position
    
    * Added Bastion to copyright and corrected an error
    
    Switched from " " to "?"
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Less blurry Southbound ship sprites
    
    #4455
    New Southbound ship sprites (#4319)
    
    * Detailed sprites
    
    * updated copyright
    
    * better blur on the fury
    
    * Redid all the normal dpi scaling
    
    * Added the new Bastion with the new hardpoints position
    
    * Added Bastion to copyright and corrected an error
    
    Switched from " " to "?"
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    feat(graphics): Added new details to Tarazed ships (#5368)
    Added shipyard thumbnails for the remaining ships that didn't have them yet
    
    #4377
    Redesigned Betelgeuse Ships
    
    #4458
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    feat(graphics): Added new details to Tarazed ships (#5368)
    Added shipyard thumbnails for the remaining ships that didn't have them yet
    
    #4377
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Added shipyard thumbnails for the remaining ships that didn't have them yet
    
    #4377
    Added spaceport thumbnails for the Wanderers, Hai, and Remnant.
    Redesigned Betelgeuse Ships
    
    #4458
    Added shipyard thumbnails for the remaining ships that didn't have them yet
    
    #4377
    Less blurry Southbound ship sprites
    
    #4455
    New Southbound ship sprites (#4319)
    
    * Detailed sprites
    
    * updated copyright
    
    * better blur on the fury
    
    * Redid all the normal dpi scaling
    
    * Added the new Bastion with the new hardpoints position
    
    * Added Bastion to copyright and corrected an error
    
    Switched from " " to "?"
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Redesigned Betelgeuse Ships
    
    #4458
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Added new Remnant missions and content (@Zitchas @Brick63)
    
    #3761
    Less blurry Southbound ship sprites
    
    #4455
    New Southbound ship sprites (#4319)
    
    * Detailed sprites
    
    * updated copyright
    
    * better blur on the fury
    
    * Redid all the normal dpi scaling
    
    * Added the new Bastion with the new hardpoints position
    
    * Added Bastion to copyright and corrected an error
    
    Switched from " " to "?"
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Added shipyard thumbnails for the remaining ships that didn't have them yet
    
    #4377
    Added shipyard thumbnails for all Korath ships, just for completeness.
    Four new Remnant missions
    
    #4222
    Updating graphics.
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Less blurry Southbound ship sprites
    
    #4455
    New Southbound ship sprites (#4319)
    
    * Detailed sprites
    
    * updated copyright
    
    * better blur on the fury
    
    * Redid all the normal dpi scaling
    
    * Added the new Bastion with the new hardpoints position
    
    * Added Bastion to copyright and corrected an error
    
    Switched from " " to "?"
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Added shipyard thumbnails for the remaining ships that didn't have them yet
    
    #4377
    Added shipyard thumbnails for the remaining ships that didn't have them yet
    
    #4377
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Added shipyard thumbnails for the remaining ships that didn't have them yet
    
    #4377
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    feat(graphics): Added new details to Tarazed ships (#5368)
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Added shipyard thumbnails for the remaining ships that didn't have them yet
    
    #4377
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Added shipyard thumbnails for the remaining ships that didn't have them yet
    
    #4377
    Added shipyard thumbnails for the remaining ships that didn't have them yet
    
    #4377
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Added shipyard thumbnails for the remaining ships that didn't have them yet
    
    #4377
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Renaming the Gascraft to the Puffin
    
    Replaced all instances of "gascraft" with "puffin". Instances are located in: remnant missions.txt, remnant ships.txt, remnant.txt, as well as the sprite & thumbnail.
    
    Also relocated a copy of the gascraft description to the "deprecated outfits.txt" file and added a compatibility mission to give anyone with the gascraft event the appropriate puffin event.
    
    This also relocates the puffin ship info to be in proper alphabetical order according to its new name.
    Added spaceport thumbnails for the Wanderers, Hai, and Remnant.
    feat(graphics): Added new details to Tarazed ships (#5368)
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Added shipyard thumbnails for the remaining ships that didn't have them yet
    
    #4377
    Added a black hole in the center of the galaxy.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Added "old" variants of some of the star types, for stars near the end of their lifetime.
    Added "old" variants of some of the star types, for stars near the end of their lifetime.
    Uploaded all the files from my local repository to Google Code.
    Added "old" variants of some of the star types, for stars near the end of their lifetime.
    Added a red giant star sprite.
    Added "old" variants of some of the star types, for stars near the end of their lifetime.
    Added "old" variants of some of the star types, for stars near the end of their lifetime.
    Fixed an improperly set executable bit.
    Updated the Wolf-Rayet star sprite, and added two more of them to the map.
    Added an image for a Wolf-Rayet star.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Added an image for a supernova remnant.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Added a black hole in the center of the galaxy.
    Added some more "scene" images for conversations.
    feat: Added missions to unlock the new Emerald Sword, an ancient Sheragi warship (#4786)
    Updated Conversation to allow typing in your name (for the intro text). Also added an option for a "scene" picture, and a better UI panel.
    Added some more "scene" images for conversations.
    Added some more "scene" images for conversations.
    Added some more "scene" images for conversations.
    Added the start of a new thread of side missions that give hints about the history of various alien species.
    Starting to work on the next series of Wanderer missions.
    Added some more "scene" images for conversations.
    Added some more "scene" images for conversations.
    Fixed various small issues I found during testing.
    Added some more "scene" images for conversations.
    Added some more "scene" images for conversations.
    Added "scene" images for the pre-flight warning dialogs.
    Added some more "scene" images for conversations.
    Four new Remnant missions
    
    #4222
    Face to Maw 1,1b,2,2b
    
    - Adds 4 missions, which form two paralel lines. Mission 1 and 2 are one line, and 1b and 2b are the other. The split occurs in mission 1. (1 and 1b are simulatenous, with 1 failing 1b if it is accepted, and if it is declined than 2 cannot be triggered.
    - Adds the Penguin (upgraded gascraft)
    - Adds the Void Rifle (a unique unpurchaseable H2H weapon with awesome stats but is intended to be unique (and thus never have more than one)
    Added some more "scene" images for conversations.
    Added the start of a new thread of side missions that give hints about the history of various alien species.
    Added "scene" images for the pre-flight warning dialogs.
    Wrapped up the first "chapter" of the Free Worlds plot line. My plan is for the whole story arc to contain two more "chapters" of comparable length.
    Uploaded all the files from my local repository to Google Code.
    Added a "tactical scanner" that shows additional information about your target.
    Added expand / collapse arrows for the category names in the shipyard and outfitter (and the shipyard and outfitter maps).
    new galaxy background image
    Toned down the brightness of the galaxy backdrop image in the map, to reduce visual clutter and improve readability.
    Erased the two super-large stars from the galaxy image.
    Added a "done" button to the map panel, and also tweaked the commodity gradient to something a bit prettier and cleaned up the galaxy image.
    Uploaded all the files from my local repository to Google Code.
    The "flight checks" now show up as warning icons and only block you if you try to take off with an unusable ship.
    0.9.2 updates
    The navigation buttons are now in the same place for all four map panels. Also made the UI panel corner highlights a bit brighter.
    Added new zoom button sprite, made +/- use size 18 font to appear slightly bigger.
    0.9.2 updates
    The navigation buttons are now in the same place for all four map panels. Also made the UI panel corner highlights a bit brighter.
    Increased the space for the mission description in the mission panel, to allow up to five lines of text without looking cramped.
    Added some details and drop shadows to the mission panel's UI elements.
    Added a "mission panel" that lets you select missions from a job board. It doesn't support scrolling or mouse clicks, yet.
    Added sprites that go with the previous commit.
    Added drop shadows to all the UI elements that didn't have them.
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Uploaded all the files from my local repository to Google Code.
    Added color to the Pug galaxy image
    
    #4256
    Toned down the brightness of the galaxy backdrop image in the map, to reduce visual clutter and improve readability.
    Wrapped up the Pug segment of the Free Worlds endgame.
    Added expand / collapse arrows for the category names in the shipyard and outfitter (and the shipyard and outfitter maps).
    Added a "tactical scanner" that shows additional information about your target.
    The "flight checks" now show up as warning icons and only block you if you try to take off with an unusable ship.
    Added sprites that go with the previous commit.
    Uploaded all the files from my local repository to Google Code.
    0.9.2 updates
    The navigation buttons are now in the same place for all four map panels. Also made the UI panel corner highlights a bit brighter.
    Uploaded all the files from my local repository to Google Code.
    Added a "news" system for displaying messages from local inhabitants you meet in the spaceport.
    feat: The background haze (for regions outside of the Ember Waste) now changes in intensity according to where you are in the galaxy (#4986)
    feat: The background haze (for regions outside of the Ember Waste) now changes in intensity according to where you are in the galaxy (#4986)
    feat: The background haze (for regions outside of the Ember Waste) now changes in intensity according to where you are in the galaxy (#4986)
    feat: The background haze (for regions outside of the Ember Waste) now changes in intensity according to where you are in the galaxy (#4986)
    feat: The background haze (for regions outside of the Ember Waste) now changes in intensity according to where you are in the galaxy (#4986)
    Increased the background haze visibility
    
    #4434
    Added the Remnant territory (the Ember Waste) to the map.
    Increased the background haze visibility
    
    #4434
    0.9.2 updates
    Added a subtle "haze" effect in the background to make it look less flat and regular.
    Mocked up the main menu interface (but it is not functional yet).
    Uploaded all the files from my local repository to Google Code.
    Mocked up the main menu interface (but it is not functional yet).
    Mocked up the main menu interface (but it is not functional yet).
    feat: The background haze (for regions outside of the Ember Waste) now changes in intensity according to where you are in the galaxy (#4986)
    feat: The background haze (for regions outside of the Ember Waste) now changes in intensity according to where you are in the galaxy (#4986)
    Mocked up the main menu interface (but it is not functional yet).
    Rotated the moon in the main menu background to be facing toward the sun.
    Mocked up the main menu interface (but it is not functional yet).
    Adding the first of the Remnant outfits (some weapons, plus engines).
    Made the flicker in the pug zapper be part of the animation, rather than a reload of 2, so the sound effect will play correctly.
    Continuing to update the weapon projectile sprites.
    Added the sprites for the Pug weapons.
    Added a new torpedo launcher, and updated the projectile sprites for several other weapons.
    Added a "plasma cannon," another option for a relatively heavy, fixed gun.
    Uploaded all the files from my local repository to Google Code.
    Added a "Flamethrower" weapon that uses hyperspace fuel as ammo, and updated the AI so it will not fire off its last jump worth of fuel.
    Reduced the Repulsor range so that the zone where only the Attractor is active is a bit larger.
    Added some of the Heliarch weapons. They're going to need some balancing work before they're finalized.
    Added a new species, the Korath, and one of their ships, the Raider, along with several weapons and outfits for it.
    Continuing to update the weapon projectile sprites.
    Added a new weapon, the electron turret (basically an upgrade to the heavy laser).
    Added more Remnant outfits.
    Added some of the Heliarch weapons. They're going to need some balancing work before they're finalized.
    Added some of the Heliarch weapons. They're going to need some balancing work before they're finalized.
    Added images for "hallucinations."
    Added a new Korath weapon, the Repeater.
    Added more Remnant outfits.
    feat: Gave the Fire-lance projectiles a blue glow at the base (#4876)
    Added a new Korath weapon, the Fire-Lance (for their fighters).
    Added the sprites for the Pug weapons.
    Tweaking the Moonbeam to make it look less like the Heliarch beam weapons.
    Added a new weapon for the Tele'ekite Wanderers, the Moonbeam.
    Continuing to update the weapon projectile sprites.
    Added the sprites for the Pug weapons.
    Added more Remnant outfits.
    Added a new species, the Korath, and one of their ships, the Raider, along with several weapons and outfits for it.
    Added more Remnant outfits.
    Added a new Korath weapon, the Repeater.
    Tweaking the Moonbeam to make it look less like the Heliarch beam weapons.
    Added a new weapon for the Tele'ekite Wanderers, the Moonbeam.
    Stripped the iCCP profiles and other extraneous chunks from some of the PNG files.
    fix muzzle flare for gatling gun (#1315)
    
    * added tinyflare sprites
    
    images/projectile/tinyflare
    
    * reduced resolution
    hai carriers + gatling gun +rail gun (#1284)
    
    Added the Hai carriers, Gatling guns, and railguns (@Amazinite, @LocalGod79, @mdsmestad, @Wrzlprnft).
    Tweaking the Moonbeam to make it look less like the Heliarch beam weapons.
    Added a new weapon for the Tele'ekite Wanderers, the Moonbeam.
    hai carriers + gatling gun +rail gun (#1284)
    
    Added the Hai carriers, Gatling guns, and railguns (@Amazinite, @LocalGod79, @mdsmestad, @Wrzlprnft).
    Added another Korath weapon, the Detainer.
    Added a new species, the Korath, and one of their ships, the Raider, along with several weapons and outfits for it.
    Update my master (#1)
    Added another Korath weapon, the Disruptor.
    Added one more Heliarch weapon.
    Faded out the end of the banisher beam to make it look more natural.
    Tweaking the appearance of the Korath weapons.
    Tweaked the appearance of the Korath Banisher weapon.
    Added a new species, the Korath, and one of their ships, the Raider, along with several weapons and outfits for it.
    Added more Remnant outfits.
    Uploaded all the files from my local repository to Google Code.
    Added a "Flamethrower" weapon that uses hyperspace fuel as ammo, and updated the AI so it will not fire off its last jump worth of fuel.
    Added an image for a new "Juggernaut" ship. Also made the individual laser beam sprites less bright, so I don't have to pulse them to make them dim enough.
    Uploaded all the files from my local repository to Google Code.
    Continuing to update the weapon projectile sprites.
    Added a new torpedo launcher, and updated the projectile sprites for several other weapons.
    Reduced the Repulsor range so that the zone where only the Attractor is active is a bit larger.
    Added some of the Heliarch weapons. They're going to need some balancing work before they're finalized.
    Adding the first of the Remnant outfits (some weapons, plus engines).
    feat: Gave the Fire-lance projectiles a blue glow at the base (#4876)
    Added a new Korath weapon, the Fire-Lance (for their fighters).
    Added a "Flamethrower" weapon that uses hyperspace fuel as ammo, and updated the AI so it will not fire off its last jump worth of fuel.
    Added one more Heliarch weapon.
    Working on a new alien species, the Wanderers.
    Added another new weapon for the Hai: the Tracker, a fast, long-range missile that is not very effective up close due to its large turning radius.
    Added a new torpedo launcher, and updated the projectile sprites for several other weapons.
    Added a "plasma cannon," another option for a relatively heavy, fixed gun.
    Working on a new alien species, the Wanderers.
    0.9.2 updates
    Made the Korath "piercer" missile sprite less absurdly large.
    Added a new Korath weapon, the Piercer missile.
    Working on a new alien species, the Wanderers.
    Continuing to update the weapon projectile sprites.
    Added a new torpedo launcher, and updated the projectile sprites for several other weapons.
    Added a new species, the Korath, and one of their ships, the Raider, along with several weapons and outfits for it.
    Uploaded all the files from my local repository to Google Code.
    Added a new torpedo launcher, and updated the projectile sprites for several other weapons.
    Added a "plasma cannon," another option for a relatively heavy, fixed gun.
    Update my master (#1)
    Added another Korath weapon, the Disruptor.
    Added one more Heliarch weapon.
    Continuing to update the weapon projectile sprites.
    Added a new torpedo launcher, and updated the projectile sprites for several other weapons.
    Added a new torpedo launcher, and updated the projectile sprites for several other weapons.
    Added a new heavy weapon, the Proton Gun.
    0.9.2 updates
    Made the Korath "piercer" missile sprite less absurdly large.
    Added a new Korath weapon, the Piercer missile.
    Added the sprites for the Pug weapons.
    Continuing to update the weapon projectile sprites.
    Uploaded all the files from my local repository to Google Code.
    Added more Remnant outfits.
    Continuing to update the weapon projectile sprites.
    Added a new weapon, the electron turret (basically an upgrade to the heavy laser).
    Added another Korath weapon, the Detainer.
    Added more Remnant outfits.
    Added images for "hallucinations."
    Uploaded all the files from my local repository to Google Code.
    feat: Added missions to unlock the new Emerald Sword, an ancient Sheragi warship (#4786)
    Added some of the Heliarch weapons. They're going to need some balancing work before they're finalized.
    Faded out the end of the banisher beam to make it look more natural.
    Tweaking the appearance of the Korath weapons.
    Tweaked the appearance of the Korath Banisher weapon.
    Added a new species, the Korath, and one of their ships, the Raider, along with several weapons and outfits for it.
    Added a new torpedo launcher, and updated the projectile sprites for several other weapons.
    Added a "plasma cannon," another option for a relatively heavy, fixed gun.
    Continuing to update the weapon projectile sprites.
    Added the sprites for the Pug weapons.
    Added the sprites for the Pug weapons.
    Added another new weapon for the Hai: the Tracker, a fast, long-range missile that is not very effective up close due to its large turning radius.
    Added a "Flamethrower" weapon that uses hyperspace fuel as ammo, and updated the AI so it will not fire off its last jump worth of fuel.
    Added one more Heliarch weapon.
    Made the flicker in the pug zapper be part of the animation, rather than a reload of 2, so the sound effect will play correctly.
    Continuing to update the weapon projectile sprites.
    Added the sprites for the Pug weapons.
    Added one more Heliarch weapon.
    Update my master (#1)
    Added another Korath weapon, the Disruptor.
    Added the sprites for the Pug weapons.
    Faded out the end of the banisher beam to make it look more natural.
    Tweaking the appearance of the Korath weapons.
    Tweaked the appearance of the Korath Banisher weapon.
    Added a new species, the Korath, and one of their ships, the Raider, along with several weapons and outfits for it.
    Added the sprites for the Pug weapons.
    Added a new torpedo launcher, and updated the projectile sprites for several other weapons.
    Added a "plasma cannon," another option for a relatively heavy, fixed gun.
    Added images for "hallucinations."
    Working on a new alien species, the Wanderers.
    Added a new Korath weapon, the Repeater.
    Added the sprites for the Pug weapons.
    Added another new weapon for the Hai: the Tracker, a fast, long-range missile that is not very effective up close due to its large turning radius.
    Added a new torpedo launcher, and updated the projectile sprites for several other weapons.
    Added a "plasma cannon," another option for a relatively heavy, fixed gun.
    Added a new species, the Korath, and one of their ships, the Raider, along with several weapons and outfits for it.
    Update my master (#1)
    Added the last new Korath weapon, the Slicer turret.
    Reduced the Repulsor range so that the zone where only the Attractor is active is a bit larger.
    Added some of the Heliarch weapons. They're going to need some balancing work before they're finalized.
    Added a new species, the Korath, and one of their ships, the Raider, along with several weapons and outfits for it.
    Added a new torpedo launcher, and updated the projectile sprites for several other weapons.
    Added a "plasma cannon," another option for a relatively heavy, fixed gun.
    Adding the first of the Remnant outfits (some weapons, plus engines).
    Uploaded all the files from my local repository to Google Code.
    Continuing to update the weapon projectile sprites.
    Added a new torpedo launcher, and updated the projectile sprites for several other weapons.
    Uploaded all the files from my local repository to Google Code.
    Added the sprites for the Pug weapons.
    Continuing to update the weapon projectile sprites.
    Added a new torpedo launcher, and updated the projectile sprites for several other weapons.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    hai carriers + gatling gun +rail gun (#1284)
    
    Added the Hai carriers, Gatling guns, and railguns (@Amazinite, @LocalGod79, @mdsmestad, @Wrzlprnft).
    Uploaded all the files from my local repository to Google Code.
    Added a new species, the Korath, and one of their ships, the Raider, along with several weapons and outfits for it.
    Added another Korath weapon, the Detainer.
    feat: Gave the Fire-lance projectiles a blue glow at the base (#4876)
    Added a new Korath weapon, the Fire-Lance (for their fighters).
    Added another new weapon for the Hai: the Tracker, a fast, long-range missile that is not very effective up close due to its large turning radius.
    Continuing to update the weapon projectile sprites.
    Added the sprites for the Pug weapons.
    Continuing to update the weapon projectile sprites.
    Added the sprites for the Pug weapons.
    Stripped the iCCP profiles and other extraneous chunks from some of the PNG files.
    fix muzzle flare for gatling gun (#1315)
    
    * added tinyflare sprites
    
    images/projectile/tinyflare
    
    * reduced resolution
    hai carriers + gatling gun +rail gun (#1284)
    
    Added the Hai carriers, Gatling guns, and railguns (@Amazinite, @LocalGod79, @mdsmestad, @Wrzlprnft).
    Update my master (#1)
    Added another Korath weapon, the Disruptor.
    feat(aliens)!: new alien factions: the Builders and the Ka'het (#4716)
    Added more Remnant outfits.
    Beefed up the pulse cannon projectile so it won't look so wimpy compared to ordinary blasters.
    Added a new weapon for the Hai, the Pulse Cannon / Turret. Also added an icon to use for outfits (especially of alien origin) that have no thumbnail yet.
    Uploaded all the files from my local repository to Google Code.
    Added a new species, the Korath, and one of their ships, the Raider, along with several weapons and outfits for it.
    Added some of the Heliarch weapons. They're going to need some balancing work before they're finalized.
    Adding the first of the Remnant outfits (some weapons, plus engines).
    Continuing to update the weapon projectile sprites.
    Added the sprites for the Pug weapons.
    Added one more Heliarch weapon.
    Added more Remnant outfits.
    feat(aliens)!: new alien factions: the Builders and the Ka'het (#4716)
    Added some of the Heliarch weapons. They're going to need some balancing work before they're finalized.
    Update my master (#1)
    Added the last new Korath weapon, the Slicer turret.
    feat(aliens)!: new alien factions: the Builders and the Ka'het (#4716)
    Added an image for a new "Juggernaut" ship. Also made the individual laser beam sprites less bright, so I don't have to pulse them to make them dim enough.
    Uploaded all the files from my local repository to Google Code.
    Continuing to update the weapon projectile sprites.
    Added a new torpedo launcher, and updated the projectile sprites for several other weapons.
    Uploaded all the files from my local repository to Google Code.
    Continuing to update the weapon projectile sprites.
    Added a new torpedo launcher, and updated the projectile sprites for several other weapons.
    Working on a new alien species, the Wanderers.
    Added images for "hallucinations."
    Working on a new alien species, the Wanderers.
    Added a new Korath weapon, the Repeater.
    Added a new species, the Korath, and one of their ships, the Raider, along with several weapons and outfits for it.
    Adding the first of the Remnant outfits (some weapons, plus engines).
    Added a new torpedo launcher, and updated the projectile sprites for several other weapons.
    Added a "plasma cannon," another option for a relatively heavy, fixed gun.
    Added more Remnant outfits.
    Added one more Heliarch weapon.
    Added an alien ship.
    Continuing to update the weapon projectile sprites.
    Added a new torpedo launcher, and updated the projectile sprites for several other weapons.
    Uploaded all the files from my local repository to Google Code.
    Added a new species, the Korath, and one of their ships, the Raider, along with several weapons and outfits for it.
    0.9.2 updates
    Made the Korath "piercer" missile sprite less absurdly large.
    Added a new Korath weapon, the Piercer missile.
    Added images for "hallucinations."
    Added the sprites for the Pug weapons.
    Added some of the Heliarch weapons. They're going to need some balancing work before they're finalized.
    Added one more Heliarch weapon.
    feat: Gave the Fire-lance projectiles a blue glow at the base (#4876)
    Added a new Korath weapon, the Fire-Lance (for their fighters).
    Continuing to update the weapon projectile sprites.
    Added a new weapon, the electron turret (basically an upgrade to the heavy laser).
    Stripped the iCCP profiles and other extraneous chunks from some of the PNG files.
    fix muzzle flare for gatling gun (#1315)
    
    * added tinyflare sprites
    
    images/projectile/tinyflare
    
    * reduced resolution
    hai carriers + gatling gun +rail gun (#1284)
    
    Added the Hai carriers, Gatling guns, and railguns (@Amazinite, @LocalGod79, @mdsmestad, @Wrzlprnft).
    Added images for "hallucinations."
    Added some of the Heliarch weapons. They're going to need some balancing work before they're finalized.
    Update my master (#1)
    Added another Korath weapon, the Disruptor.
    Added a new species, the Korath, and one of their ships, the Raider, along with several weapons and outfits for it.
    Added one more Heliarch weapon.
    Update my master (#1)
    Added another Korath weapon, the Disruptor.
    Added a new Remnant carrier along with a fighter and drone
    
    #4546
    Creating the Tern
    
    This PR adds the Tern, a durable drone initially designed for mining/harvesting from gas giants and frequently utilized to fill the "screening" role that most empires use fightercraft for. Given the Remnant don't have the population to spend lives in screening roles, they use these drones instead. At least, in their home systems.
    
    Graphics courtesy of BeccaBunny
    Adding the Tern
    
    Technically a Remnant Drone, currently implemented as an interceptor.
    Redesigned Betelgeuse Ships
    
    #4458
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Fix bad sRGB profiles on some png images.
    
    Old libpng accepted them quietly, libpng 1.6+ spams stderr with error
    messages then continues.
    Fixed a typo and some file permissions.
    Modified Falcon and Leviathan
    
    six ships in all, mild tweak.  “purchase” is in death benefits, and
    availability - only through high combat rating bounty hunting/hunted
    jobs/mission.  better variants spawn less frequently.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Fix bad sRGB profiles on some png images.
    
    Old libpng accepted them quietly, libpng 1.6+ spams stderr with error
    messages then continues.
    One Commit
    
    carefully inserted each segment of ships to be added, being careful not
    to delete anything - not sure why github displays the changes that way.
    
    jobs too, but it’s less confusing.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Fix bad sRGB profiles on some png images.
    
    Old libpng accepted them quietly, libpng 1.6+ spams stderr with error
    messages then continues.
    One Commit
    
    carefully inserted each segment of ships to be added, being careful not
    to delete anything - not sure why github displays the changes that way.
    
    jobs too, but it’s less confusing.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Fix bad sRGB profiles on some png images.
    
    Old libpng accepted them quietly, libpng 1.6+ spams stderr with error
    messages then continues.
    One Commit
    
    carefully inserted each segment of ships to be added, being careful not
    to delete anything - not sure why github displays the changes that way.
    
    jobs too, but it’s less confusing.
    Added new Remnant missions and content (@Zitchas @Brick63)
    
    #3761
    Redesigned Betelgeuse Ships
    
    #4458
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Tweaked the weirdly elongated cockpit on the shuttle.
    New experimental shuttle image with a running lights animation, just to see what people think of that.
    feat(graphics): Added new details to Tarazed ships (#5368)
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    grunge, grunge, grunge, grunge...
    
    updated all of the Southern Carrier ship sprites with it.
    
    proper colour profile and everything.
    Fix bad sRGB profiles on some png images.
    
    Old libpng accepted them quietly, libpng 1.6+ spams stderr with error
    messages then continues.
    Update my master (#1)
    New Finch!
    
    also;
    • new shadows under carriers
    • more pronounced “grunge”
    • re-rendered roost to be more centred in render pane.
    realigned to maintain already defined ports
    Revert "new 'finch' sprite"
    
    This reverts commit e537f52284f0e2651d1506d719dd788b9dca1e90.
    new 'finch' sprite
    
    more practical cockpit window, better proportioned with other fighters
    with a further “crunched” front quadrant.
    added 'finch'
    
    a trimmed down Sparrow - falls somewhere between the Dagger and the
    Chaser.
    
    sprite actually proportioned to share body element sizes with Sparrow
    per description while coming in at about the same dimensions as the
    Lance.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    First step in the sales panel upgrade: your fleet now displays as a set of small icons so it all fits on screen even if you have many ships.
    Added a new ship, and adjusted the balance of the engine attributes and sizes.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added two Remnant ships.
    Redesigned Betelgeuse Ships
    
    #4458
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Fix bad sRGB profiles on some png images.
    
    Old libpng accepted them quietly, libpng 1.6+ spams stderr with error
    messages then continues.
    One Commit
    
    carefully inserted each segment of ships to be added, being careful not
    to delete anything - not sure why github displays the changes that way.
    
    jobs too, but it’s less confusing.
    Added a new Remnant carrier along with a fighter and drone
    
    #4546
    Updates and Additions
    
    Adding the Petrel
    Adjustments to the Ibis
    Tweaks to the Tern.
    
    Tern: Intended to be a tanking drone.
    Petrel: Intended to be a mid range stand-back fighter
    Ibis: Medium mining/support carrier (2 figher 4 drone)
    A small tribute, celebrating the 15th anniversary of the first episode of Firefly airing.
    feat(person): The Subsidurial, a spacefaring organism (#4785)
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    First step in the sales panel upgrade: your fleet now displays as a set of small icons so it all fits on screen even if you have many ships.
    Added a new Korath ship, the Chaser fighter.
    feat: New Navy logistics ships (#5108)
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Fix bad sRGB profiles on some png images.
    
    Old libpng accepted them quietly, libpng 1.6+ spams stderr with error
    messages then continues.
    One Commit
    
    carefully inserted each segment of ships to be added, being careful not
    to delete anything - not sure why github displays the changes that way.
    
    jobs too, but it’s less confusing.
    feat(graphics): Added new details to Tarazed ships (#5368)
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Updated the sprites for the Hawk and the Fury.
    Added a new ship, the Hawk.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added a new Navy ship, the Gunboat (which also serves for recon and scanning).
    Redesigned Betelgeuse Ships
    
    #4458
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Tweaked the weirdly elongated cockpit on the shuttle.
    New experimental shuttle image with a running lights animation, just to see what people think of that.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Made a better graphic for the Corvette, and made it appear more frequently (including outside the Deep).
    Uploaded all the files from my local repository to Google Code.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added two Remnant ships.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added a Drak ship, with various weapons.
    feat(graphics): Added new details to Tarazed ships (#5368)
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Updated the Sparrow sprite to one that is 3D rendered.
    First step in the sales panel upgrade: your fleet now displays as a set of small icons so it all fits on screen even if you have many ships.
    Uploaded all the files from my local repository to Google Code.
    New Southbound ship sprites (#4319)
    
    * Detailed sprites
    
    * updated copyright
    
    * better blur on the fury
    
    * Redid all the normal dpi scaling
    
    * Added the new Bastion with the new hardpoints position
    
    * Added Bastion to copyright and corrected an error
    
    Switched from " " to "?"
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Updated the sprites for the Hawk and the Fury.
    Uploaded all the files from my local repository to Google Code.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Fix bad sRGB profiles on some png images.
    
    Old libpng accepted them quietly, libpng 1.6+ spams stderr with error
    messages then continues.
    One Commit
    
    carefully inserted each segment of ships to be added, being careful not
    to delete anything - not sure why github displays the changes that way.
    
    jobs too, but it’s less confusing.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added quite a few new ship images, and made improvements to some of the old ones.
    Uploaded all the files from my local repository to Google Code.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added five new ship images.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    yet grungier barbs
    
    “careful! you could get an infection!”
    grungier barbs
    grunge, grunge, grunge, grunge...
    
    updated all of the Southern Carrier ship sprites with it.
    
    proper colour profile and everything.
    Fix bad sRGB profiles on some png images.
    
    Old libpng accepted them quietly, libpng 1.6+ spams stderr with error
    messages then continues.
    Update my master (#1)
    updated barb
    
    • new sprite
    • new specs
    • new outfit w/ sprite
    • cleaned up double-space after “.” in ships and plot conversations
    • license/availability missions now autofail
    Added 'Barb'
    
    • updated shadows for carrier sprites
    • sales with event: initial deployment 1
    • added to some Independent/Pirate/Northern Merchant fleets
    feat: New Navy logistics ships (#5108)
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Fix bad sRGB profiles on some png images.
    
    Old libpng accepted them quietly, libpng 1.6+ spams stderr with error
    messages then continues.
    One Commit
    
    carefully inserted each segment of ships to be added, being careful not
    to delete anything - not sure why github displays the changes that way.
    
    jobs too, but it’s less confusing.
    Redesigned Betelgeuse Ships
    
    #4458
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Fix bad sRGB profiles on some png images.
    
    Old libpng accepted them quietly, libpng 1.6+ spams stderr with error
    messages then continues.
    Fixed a typo and some file permissions.
    Modified Falcon and Leviathan
    
    six ships in all, mild tweak.  “purchase” is in death benefits, and
    availability - only through high combat rating bounty hunting/hunted
    jobs/mission.  better variants spawn less frequently.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added a new Quarg ship, the Wardragon.
    Redesigned Betelgeuse Ships
    
    #4458
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Fix bad sRGB profiles on some png images.
    
    Old libpng accepted them quietly, libpng 1.6+ spams stderr with error
    messages then continues.
    Fixed a typo and some file permissions.
    Modified Falcon and Leviathan
    
    six ships in all, mild tweak.  “purchase” is in death benefits, and
    availability - only through high combat rating bounty hunting/hunted
    jobs/mission.  better variants spawn less frequently.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added a new Wanderer ship, the Flycatcher (an autonomous anti-missile drone).
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added two more Lionheart ships, the Mule and the Bactrian.
    Center Pointedstick's Vanguard
    
    Ref: #3954
    
    * Delete pointedstick_vanguard.png
    
    * Add files via upload
    
    * Update persons.txt
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    MMK tuned Captain Nate's Vanguard, apparently
    feat: New Navy logistics ships (#5108)
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    New Syndicate heavy warship: the Vanguard
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added three new ship types, to be used mostly in the Deep.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added two new small ships, to add a bit more variety.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added a Drak ship, with various weapons.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added a new ship, the Lionheart Raven.
    Added a person for Local God
    
    #4692
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added two Wanderer heavy warship models.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added five new ship images.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added the Remnant Gascraft, for exploring gas giants.
    Less blurry Southbound ship sprites
    
    #4455
    New Southbound ship sprites (#4319)
    
    * Detailed sprites
    
    * updated copyright
    
    * better blur on the fury
    
    * Redid all the normal dpi scaling
    
    * Added the new Bastion with the new hardpoints position
    
    * Added Bastion to copyright and corrected an error
    
    Switched from " " to "?"
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Adding border padding to the Boxwing so the outline shader will draw it correctly.
    more spartan boxwing
    boxwing gets some grunge
    sRGB profiles updated
    boxwing, too
    added cargo hatch to rear of sprite
    sprite tuning
    balancing
    
    mass now makes the fighter and carrier handle more like freighters.
    
    “fighter” can get zippy, but has a little trouble with heat when
    X1200/X1700s are equipped with the AA fuel cell (and no shield
    generator).
    rudimentary addition of "Boxwing"
    
    • sprite
    • malleable ship specs
    • sales at Southbound Basics with FWCarriers event
    Added a new Remnant carrier along with a fighter and drone
    
    #4546
    Adding the Ibis
    
    Adds the Ibis, a Remnant Carrier of similar vintage to the Albatross.
     - Adds Ship data (with rough data)
     - Unlocks with the Capital license
     - Adds sprite
     - Adds thumbnail
     - Adds to shipyard
    
    Todo list:
    - Adjusting stats,
    - adding to fleets.
    - Adding the Tern & Ibis to BeccaBunny's copyright section.
    
    Thanks to beccaBunny for the graphics.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added quite a few new ship images, and made improvements to some of the old ones.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added a new ship, the Cruiser.
    feat(graphics): Added new details to Tarazed ships (#5368)
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added quite a few new ship images, and made improvements to some of the old ones.
    New Southbound ship sprites (#4319)
    
    * Detailed sprites
    
    * updated copyright
    
    * better blur on the fury
    
    * Redid all the normal dpi scaling
    
    * Added the new Bastion with the new hardpoints position
    
    * Added Bastion to copyright and corrected an error
    
    Switched from " " to "?"
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added quite a few new ship images, and made improvements to some of the old ones.
    Tweaked the Headhunter and Raven
    
    #4014
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added two new ships, the Headhunter and the Modified Argosy.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Fix bad sRGB profiles on some png images.
    
    Old libpng accepted them quietly, libpng 1.6+ spams stderr with error
    messages then continues.
    One Commit
    
    carefully inserted each segment of ships to be added, being careful not
    to delete anything - not sure why github displays the changes that way.
    
    jobs too, but it’s less confusing.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added two new ship types.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added two new small ships, to add a bit more variety.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Fix bad sRGB profiles on some png images.
    
    Old libpng accepted them quietly, libpng 1.6+ spams stderr with error
    messages then continues.
    One Commit
    
    carefully inserted each segment of ships to be added, being careful not
    to delete anything - not sure why github displays the changes that way.
    
    jobs too, but it’s less confusing.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added a special Tarazed Corp. mission to get access to the Kestrel.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added two more Megaparsec ships.
    New Southbound ship sprites (#4319)
    
    * Detailed sprites
    
    * updated copyright
    
    * better blur on the fury
    
    * Redid all the normal dpi scaling
    
    * Added the new Bastion with the new hardpoints position
    
    * Added Bastion to copyright and corrected an error
    
    Switched from " " to "?"
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    grunge, grunge, grunge, grunge...
    
    updated all of the Southern Carrier ship sprites with it.
    
    proper colour profile and everything.
    sRGB profiles updated
    replaced after tracking merge (colour corrected)
    colour correction
    Fix bad sRGB profiles on some png images.
    
    Old libpng accepted them quietly, libpng 1.6+ spams stderr with error
    messages then continues.
    more grunge!
    less bright/sharp/contrasty southern carrier sprites
    
    Skein gets a new “ferocious Chinese Dragon” look with bay “awnings”.
    Update my master (#1)
    showless carriers
    bigger bay shadows
    
    with the addition of the Korath Chaser to the fighter mask, i doubt any
    more shadow will be needed (ever)
    Added 'Barb'
    
    • updated shadows for carrier sprites
    • sales with event: initial deployment 1
    • added to some Independent/Pirate/Northern Merchant fleets
    New Finch!
    
    also;
    • new shadows under carriers
    • more pronounced “grunge”
    • re-rendered roost to be more centred in render pane.
    replaced "F.S. Alder" and "F.S. Ironwood" {formerly Bastion (heavy)} with 'Skein's
    
    and 12 phonetic alphabet named Finches
    
    also
    ‘feeder -> nest
    ‘snest -> roost
    house -> skein
    fixed "mysterious grey blob"
    
    removed shadow remaining rendering plane, dirtied ship a little more…
    Added Type F Hauler II and III "Birdsnest" and "Birdhouse"
    
    touched ‘Finch’ balance
    fixed “fighter bay”
    touched “Birdfeeder” sprite
    added “Birdsnest” and “Birdhouse” sprites, ships
    added four new ships to sales at Southbound and Tarazed shipyards
    Revert "Added Type F Hauler II and II "Birdsnest" and "Birdhouse""
    
    This reverts commit 599e255d96d3e1a049dcb8823d21d81d797d74f0.
    Added Type F Hauler II and II "Birdsnest" and "Birdhouse"
    
    added ships to sales at Southbound and Tarazed
    
    retouched birdfeeder.png
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added quite a few new ship images, and made improvements to some of the old ones.
    Redesigned Betelgeuse Ships
    
    #4458
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Fix bad sRGB profiles on some png images.
    
    Old libpng accepted them quietly, libpng 1.6+ spams stderr with error
    messages then continues.
    One Commit
    
    carefully inserted each segment of ships to be added, being careful not
    to delete anything - not sure why github displays the changes that way.
    
    jobs too, but it’s less confusing.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Fix bad sRGB profiles on some png images.
    
    Old libpng accepted them quietly, libpng 1.6+ spams stderr with error
    messages then continues.
    One Commit
    
    carefully inserted each segment of ships to be added, being careful not
    to delete anything - not sure why github displays the changes that way.
    
    jobs too, but it’s less confusing.
    feat(graphics): Added new details to Tarazed ships (#5368)
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Fix bad sRGB profiles on some png images.
    
    Old libpng accepted them quietly, libpng 1.6+ spams stderr with error
    messages then continues.
    Fixed a typo and some file permissions.
    Modified Falcon and Leviathan
    
    six ships in all, mild tweak.  “purchase” is in death benefits, and
    availability - only through high combat rating bounty hunting/hunted
    jobs/mission.  better variants spawn less frequently.
    feat: New Navy logistics ships (#5108)
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added quite a few new ship images, and made improvements to some of the old ones.
    Added five new ship images.
    Uploaded all the files from my local repository to Google Code.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Removed the unused turret in the Derecho sprite.
    Added two Wanderer heavy warship models.
    Added a Wanderer dedicated transport ship to be used later
    
    #4102
    feat: Added missions to unlock the new Emerald Sword, an ancient Sheragi warship (#4786)
    Fixed the Behemoth sprite
    
    #4611
    Redesigned Betelgeuse Ships
    
    #4458
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added a new heavy freighter, the Behemoth. Also updated the fleets and shipyards with the new ships I've added recently.
    Less blurry Southbound ship sprites
    
    #4455
    New Southbound ship sprites (#4319)
    
    * Detailed sprites
    
    * updated copyright
    
    * better blur on the fury
    
    * Redid all the normal dpi scaling
    
    * Added the new Bastion with the new hardpoints position
    
    * Added Bastion to copyright and corrected an error
    
    Switched from " " to "?"
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Updated the image for the Argosy.
    Uploaded all the files from my local repository to Google Code.
    New Southbound ship sprites (#4319)
    
    * Detailed sprites
    
    * updated copyright
    
    * better blur on the fury
    
    * Redid all the normal dpi scaling
    
    * Added the new Bastion with the new hardpoints position
    
    * Added Bastion to copyright and corrected an error
    
    Switched from " " to "?"
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added quite a few new ship images, and made improvements to some of the old ones.
    Uploaded all the files from my local repository to Google Code.
    feat(graphics): Added new details to Tarazed ships (#5368)
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Fix bad sRGB profiles on some png images.
    
    Old libpng accepted them quietly, libpng 1.6+ spams stderr with error
    messages then continues.
    Fixed a typo and some file permissions.
    Modified Falcon and Leviathan
    
    six ships in all, mild tweak.  “purchase” is in death benefits, and
    availability - only through high combat rating bounty hunting/hunted
    jobs/mission.  better variants spawn less frequently.
    Corrections to Betelgeuse ships
    
    #4501
    Redesigned Betelgeuse Ships
    
    #4458
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added quite a few new ship images, and made improvements to some of the old ones.
    Added images for "hallucinations."
    feat(graphics): Added new details to Tarazed ships (#5368)
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Fix bad sRGB profiles on some png images.
    
    Old libpng accepted them quietly, libpng 1.6+ spams stderr with error
    messages then continues.
    Fixed a typo and some file permissions.
    Modified Falcon and Leviathan
    
    six ships in all, mild tweak.  “purchase” is in death benefits, and
    availability - only through high combat rating bounty hunting/hunted
    jobs/mission.  better variants spawn less frequently.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added three new ship types, to be used mostly in the Deep.
    Redesigned Betelgeuse Ships
    
    #4458
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Tweaked the weirdly elongated cockpit on the shuttle.
    New experimental shuttle image with a running lights animation, just to see what people think of that.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Fix bad sRGB profiles on some png images.
    
    Old libpng accepted them quietly, libpng 1.6+ spams stderr with error
    messages then continues.
    One Commit
    
    carefully inserted each segment of ships to be added, being careful not
    to delete anything - not sure why github displays the changes that way.
    
    jobs too, but it’s less confusing.
    feat(graphics): Added new details to Tarazed ships (#5368)
    Per request (#3416)
    
    * Create "Power of the People", a modified Osprey warship
    
    * Use common "friendly author" phrase
    
    * Add Phrases
    
     - Amalgamation of various pop culture references, mostly
       - Han Solo
       - Ernest
       - Starship Troopers
       - The Fifth Element
       - Die Hard
    
    * Update copyright file
    
     - Removed duplicated Vanguard entry
    
    * Adding "friendly author" to Captain Nate (by request)
    Added a cloaking device. Have not yet written the AI strategy for when to engage it, though.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added the first real Wanderer warship, plus a new reactor, and rebalanced the prices of other Wanderer tech.
    Redesigned Betelgeuse Ships
    
    #4458
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Fix bad sRGB profiles on some png images.
    
    Old libpng accepted them quietly, libpng 1.6+ spams stderr with error
    messages then continues.
    One Commit
    
    carefully inserted each segment of ships to be added, being careful not
    to delete anything - not sure why github displays the changes that way.
    
    jobs too, but it’s less confusing.
    New Southbound ship sprites (#4319)
    
    * Detailed sprites
    
    * updated copyright
    
    * better blur on the fury
    
    * Redid all the normal dpi scaling
    
    * Added the new Bastion with the new hardpoints position
    
    * Added Bastion to copyright and corrected an error
    
    Switched from " " to "?"
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    grunge, grunge, grunge, grunge...
    
    updated all of the Southern Carrier ship sprites with it.
    
    proper colour profile and everything.
    sRGB profiles updated
    replaced after tracking merge (colour corrected)
    colour correction
    Fix bad sRGB profiles on some png images.
    
    Old libpng accepted them quietly, libpng 1.6+ spams stderr with error
    messages then continues.
    more grunge!
    less bright/sharp/contrasty southern carrier sprites
    
    Skein gets a new “ferocious Chinese Dragon” look with bay “awnings”.
    Update my master (#1)
    showless carriers
    bigger bay shadows
    
    with the addition of the Korath Chaser to the fighter mask, i doubt any
    more shadow will be needed (ever)
    Added 'Barb'
    
    • updated shadows for carrier sprites
    • sales with event: initial deployment 1
    • added to some Independent/Pirate/Northern Merchant fleets
    New Finch!
    
    also;
    • new shadows under carriers
    • more pronounced “grunge”
    • re-rendered roost to be more centred in render pane.
    replaced "F.S. Alder" and "F.S. Ironwood" {formerly Bastion (heavy)} with 'Skein's
    
    and 12 phonetic alphabet named Finches
    
    also
    ‘feeder -> nest
    ‘snest -> roost
    house -> skein
    Added Type F Hauler II and III "Birdsnest" and "Birdhouse"
    
    touched ‘Finch’ balance
    fixed “fighter bay”
    touched “Birdfeeder” sprite
    added “Birdsnest” and “Birdhouse” sprites, ships
    added four new ships to sales at Southbound and Tarazed shipyards
    Revert "Added Type F Hauler II and II "Birdsnest" and "Birdhouse""
    
    This reverts commit 599e255d96d3e1a049dcb8823d21d81d797d74f0.
    Added Type F Hauler II and II "Birdsnest" and "Birdhouse"
    
    added ships to sales at Southbound and Tarazed
    
    retouched birdfeeder.png
    Redesigned Betelgeuse Ships
    
    #4458
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added two new ship types, the Leviathan and the Heavy Shuttle.
    Added new Remnant missions and content (@Zitchas @Brick63)
    
    #3761
    New Southbound ship sprites (#4319)
    
    * Detailed sprites
    
    * updated copyright
    
    * better blur on the fury
    
    * Redid all the normal dpi scaling
    
    * Added the new Bastion with the new hardpoints position
    
    * Added Bastion to copyright and corrected an error
    
    Switched from " " to "?"
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    grunge, grunge, grunge, grunge...
    
    updated all of the Southern Carrier ship sprites with it.
    
    proper colour profile and everything.
    sRGB profiles updated
    replaced after tracking merge (colour corrected)
    colour correction
    Fix bad sRGB profiles on some png images.
    
    Old libpng accepted them quietly, libpng 1.6+ spams stderr with error
    messages then continues.
    more grunge!
    less bright/sharp/contrasty southern carrier sprites
    
    Skein gets a new “ferocious Chinese Dragon” look with bay “awnings”.
    Update my master (#1)
    showless carriers
    bigger bay shadows
    
    with the addition of the Korath Chaser to the fighter mask, i doubt any
    more shadow will be needed (ever)
    Added 'Barb'
    
    • updated shadows for carrier sprites
    • sales with event: initial deployment 1
    • added to some Independent/Pirate/Northern Merchant fleets
    New Finch!
    
    also;
    • new shadows under carriers
    • more pronounced “grunge”
    • re-rendered roost to be more centred in render pane.
    replaced "F.S. Alder" and "F.S. Ironwood" {formerly Bastion (heavy)} with 'Skein's
    
    and 12 phonetic alphabet named Finches
    
    also
    ‘feeder -> nest
    ‘snest -> roost
    house -> skein
    Added Type F Hauler II and III "Birdsnest" and "Birdhouse"
    
    touched ‘Finch’ balance
    fixed “fighter bay”
    touched “Birdfeeder” sprite
    added “Birdsnest” and “Birdhouse” sprites, ships
    added four new ships to sales at Southbound and Tarazed shipyards
    Revert "Added Type F Hauler II and II "Birdsnest" and "Birdhouse""
    
    This reverts commit 599e255d96d3e1a049dcb8823d21d81d797d74f0.
    Added Type F Hauler II and II "Birdsnest" and "Birdhouse"
    
    added ships to sales at Southbound and Tarazed
    
    retouched birdfeeder.png
    Added Hauler I:Type F "Birdfeeder"
    
    sprite and ship description - outfit loadout requires update.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Fix bad sRGB profiles on some png images.
    
    Old libpng accepted them quietly, libpng 1.6+ spams stderr with error
    messages then continues.
    One Commit
    
    carefully inserted each segment of ships to be added, being careful not
    to delete anything - not sure why github displays the changes that way.
    
    jobs too, but it’s less confusing.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added a new species, the Korath, and one of their ships, the Raider, along with several weapons and outfits for it.
    Added an image for a new "Juggernaut" ship. Also made the individual laser beam sprites less bright, so I don't have to pulse them to make them dim enough.
    Added images for "hallucinations."
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added two more Lionheart ships, the Mule and the Bactrian.
    feat(person): Created a person ship for MCOfficer (#5295)
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    yet grungier barbs
    
    “careful! you could get an infection!”
    grungier barbs
    grunge, grunge, grunge, grunge...
    
    updated all of the Southern Carrier ship sprites with it.
    
    proper colour profile and everything.
    Fix bad sRGB profiles on some png images.
    
    Old libpng accepted them quietly, libpng 1.6+ spams stderr with error
    messages then continues.
    Update my master (#1)
    new barbp sprite
    Barb (Proton)
    
    • new ship variant (sans-turret)
    • corresponding sprite
    • sales begin between basic Barb rollout, and Carrier/Finch rollout.
    sales restricted to Syndicate Basics (rather than also being available
    at Tarazed)
    • Backwards compatibility
    Less blurry Southbound ship sprites
    
    #4455
    New Southbound ship sprites (#4319)
    
    * Detailed sprites
    
    * updated copyright
    
    * better blur on the fury
    
    * Redid all the normal dpi scaling
    
    * Added the new Bastion with the new hardpoints position
    
    * Added Bastion to copyright and corrected an error
    
    Switched from " " to "?"
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Filled in the "holes" in the dreadnough image, because they're small enough that they look like a glitch.
    Added a new Free Worlds capital ship, the Dreadnought.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Fix bad sRGB profiles on some png images.
    
    Old libpng accepted them quietly, libpng 1.6+ spams stderr with error
    messages then continues.
    One Commit
    
    carefully inserted each segment of ships to be added, being careful not
    to delete anything - not sure why github displays the changes that way.
    
    jobs too, but it’s less confusing.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Fix bad sRGB profiles on some png images.
    
    Old libpng accepted them quietly, libpng 1.6+ spams stderr with error
    messages then continues.
    One Commit
    
    carefully inserted each segment of ships to be added, being careful not
    to delete anything - not sure why github displays the changes that way.
    
    jobs too, but it’s less confusing.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    First step in the sales panel upgrade: your fleet now displays as a set of small icons so it all fits on screen even if you have many ships.
    Added one more Syndicate ship. I've now got at least the bare minimum number of ships that I wanted to have (five or more per each of seven ship manufacturers).
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Fix bad sRGB profiles on some png images.
    
    Old libpng accepted them quietly, libpng 1.6+ spams stderr with error
    messages then continues.
    One Commit
    
    carefully inserted each segment of ships to be added, being careful not
    to delete anything - not sure why github displays the changes that way.
    
    jobs too, but it’s less confusing.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Updated the graphic for the Manta ship, to add a bit more detail on the wings.
    Added two more Megaparsec ships.
    feat(graphics): Added new details to Tarazed ships (#5368)
    Correct osprey sprite (#4244)
    
    * Delete osprey.png
    
    * Add files via upload
    
    * Delete osprey.png
    
    * Add files via upload
    
    * Delete osprey.png
    
    * Updated size
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added a new ship, the Tarazed Osprey.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Fix bad sRGB profiles on some png images.
    
    Old libpng accepted them quietly, libpng 1.6+ spams stderr with error
    messages then continues.
    One Commit
    
    carefully inserted each segment of ships to be added, being careful not
    to delete anything - not sure why github displays the changes that way.
    
    jobs too, but it’s less confusing.
    fix(graphics): Changed the Heron image to match the 2x version (#5429)
    feat(person): Created a person fleet for Zitchas (#5406)
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Updated the graphics for the combat and surveillance drones, and increased the size of the Arrow slightly.
    Added a new ship, the Syndicate Arrow, intended as a luxury ship rather than something the player will find practical.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Fix bad sRGB profiles on some png images.
    
    Old libpng accepted them quietly, libpng 1.6+ spams stderr with error
    messages then continues.
    One Commit
    
    carefully inserted each segment of ships to be added, being careful not
    to delete anything - not sure why github displays the changes that way.
    
    jobs too, but it’s less confusing.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Fix bad sRGB profiles on some png images.
    
    Old libpng accepted them quietly, libpng 1.6+ spams stderr with error
    messages then continues.
    One Commit
    
    carefully inserted each segment of ships to be added, being careful not
    to delete anything - not sure why github displays the changes that way.
    
    jobs too, but it’s less confusing.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added two new ship types.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Fix bad sRGB profiles on some png images.
    
    Old libpng accepted them quietly, libpng 1.6+ spams stderr with error
    messages then continues.
    One Commit
    
    carefully inserted each segment of ships to be added, being careful not
    to delete anything - not sure why github displays the changes that way.
    
    jobs too, but it’s less confusing.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added a new ship, the Protector.
    Renaming the Gascraft to the Puffin
    
    Replaced all instances of "gascraft" with "puffin". Instances are located in: remnant missions.txt, remnant ships.txt, remnant.txt, as well as the sprite & thumbnail.
    
    Also relocated a copy of the gascraft description to the "deprecated outfits.txt" file and added a compatibility mission to give anyone with the gascraft event the appropriate puffin event.
    
    This also relocates the puffin ship info to be in proper alphabetical order according to its new name.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added the Remnant Gascraft, for exploring gas giants.
    feat(graphics): Added new details to Tarazed ships (#5368)
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Added quite a few new ship images, and made improvements to some of the old ones.
    Re-rendered the ship sprites with a steeper illumination angle, which makes the 3D shape of the ships more visible.
    Fix bad sRGB profiles on some png images.
    
    Old libpng accepted them quietly, libpng 1.6+ spams stderr with error
    messages then continues.
    One Commit
    
    carefully inserted each segment of ships to be added, being careful not
    to delete anything - not sure why github displays the changes that way.
    
    jobs too, but it’s less confusing.
    feat: Added a new advanced Remnant warship to be unlocked later (#4662)
    Revert "Merge branch 'RemnantGraphics' into Remnant-Puffin-Rename"
    
    This reverts commit 70f79e4505022a228b5dc6ce79a2f96780b8b500, reversing
    changes made to 048d210c723dacbf6008e9b05026c294e1000a4d.
    Re-adding peregrine animation
    feat: Added a new advanced Remnant warship to be unlocked later (#4662)
    Revert "Merge branch 'RemnantGraphics' into Remnant-Puffin-Rename"
    
    This reverts commit 70f79e4505022a228b5dc6ce79a2f96780b8b500, reversing
    changes made to 048d210c723dacbf6008e9b05026c294e1000a4d.
    Re-adding peregrine animation
    feat: Added a new advanced Remnant warship to be unlocked later (#4662)
    Revert "Merge branch 'RemnantGraphics' into Remnant-Puffin-Rename"
    
    This reverts commit 70f79e4505022a228b5dc6ce79a2f96780b8b500, reversing
    changes made to 048d210c723dacbf6008e9b05026c294e1000a4d.
    Re-adding peregrine animation
    feat: Added a new advanced Remnant warship to be unlocked later (#4662)
    Revert "Merge branch 'RemnantGraphics' into Remnant-Puffin-Rename"
    
    This reverts commit 70f79e4505022a228b5dc6ce79a2f96780b8b500, reversing
    changes made to 048d210c723dacbf6008e9b05026c294e1000a4d.
    Re-adding peregrine animation
    feat: Added a new advanced Remnant warship to be unlocked later (#4662)
    Revert "Merge branch 'RemnantGraphics' into Remnant-Puffin-Rename"
    
    This reverts commit 70f79e4505022a228b5dc6ce79a2f96780b8b500, reversing
    changes made to 048d210c723dacbf6008e9b05026c294e1000a4d.
    Re-adding peregrine animation
    feat: Added a new advanced Remnant warship to be unlocked later (#4662)
    Revert "Merge branch 'RemnantGraphics' into Remnant-Puffin-Rename"
    
    This reverts commit 70f79e4505022a228b5dc6ce79a2f96780b8b500, reversing
    changes made to 048d210c723dacbf6008e9b05026c294e1000a4d.
    Re-adding peregrine animation
    feat: Added a new advanced Remnant warship to be unlocked later (#4662)
    Revert "Merge branch 'RemnantGraphics' into Remnant-Puffin-Rename"
    
    This reverts commit 70f79e4505022a228b5dc6ce79a2f96780b8b500, reversing
    changes made to 048d210c723dacbf6008e9b05026c294e1000a4d.
    Re-adding peregrine animation
    feat: Added a new advanced Remnant warship to be unlocked later (#4662)
    Revert "Merge branch 'RemnantGraphics' into Remnant-Puffin-Rename"
    
    This reverts commit 70f79e4505022a228b5dc6ce79a2f96780b8b500, reversing
    changes made to 048d210c723dacbf6008e9b05026c294e1000a4d.
    Re-adding peregrine animation
    feat: Added a new advanced Remnant warship to be unlocked later (#4662)
    Revert "Merge branch 'RemnantGraphics' into Remnant-Puffin-Rename"
    
    This reverts commit 70f79e4505022a228b5dc6ce79a2f96780b8b500, reversing
    changes made to 048d210c723dacbf6008e9b05026c294e1000a4d.
    Re-adding peregrine animation
    feat: Added a new advanced Remnant warship to be unlocked later (#4662)
    Revert "Merge branch 'RemnantGraphics' into Remnant-Puffin-Rename"
    
    This reverts commit 70f79e4505022a228b5dc6ce79a2f96780b8b500, reversing
    changes made to 048d210c723dacbf6008e9b05026c294e1000a4d.
    Re-adding peregrine animation
    feat: Added a new advanced Remnant warship to be unlocked later (#4662)
    Revert "Merge branch 'RemnantGraphics' into Remnant-Puffin-Rename"
    
    This reverts commit 70f79e4505022a228b5dc6ce79a2f96780b8b500, reversing
    changes made to 048d210c723dacbf6008e9b05026c294e1000a4d.
    Re-adding peregrine animation
    Four new Remnant missions
    
    #4222
    Fixes by PointedStick and Amazinite
    
    - Spelling Mistakes
    - Grammar Fixes
    - Slight Wording changes
    - Moved Penguin sprites into subfolder
    Updating graphics.
    Four new Remnant missions
    
    #4222
    Fixes by PointedStick and Amazinite
    
    - Spelling Mistakes
    - Grammar Fixes
    - Slight Wording changes
    - Moved Penguin sprites into subfolder
    Updating graphics.
    Four new Remnant missions
    
    #4222
    Fixes by PointedStick and Amazinite
    
    - Spelling Mistakes
    - Grammar Fixes
    - Slight Wording changes
    - Moved Penguin sprites into subfolder
    Updating graphics.
    Four new Remnant missions
    
    #4222
    Fixes by PointedStick and Amazinite
    
    - Spelling Mistakes
    - Grammar Fixes
    - Slight Wording changes
    - Moved Penguin sprites into subfolder
    Updating graphics.
    Four new Remnant missions
    
    #4222
    Fixes by PointedStick and Amazinite
    
    - Spelling Mistakes
    - Grammar Fixes
    - Slight Wording changes
    - Moved Penguin sprites into subfolder
    Updating graphics.
    Four new Remnant missions
    
    #4222
    Fixes by PointedStick and Amazinite
    
    - Spelling Mistakes
    - Grammar Fixes
    - Slight Wording changes
    - Moved Penguin sprites into subfolder
    Updating graphics.
    Four new Remnant missions
    
    #4222
    Fixes by PointedStick and Amazinite
    
    - Spelling Mistakes
    - Grammar Fixes
    - Slight Wording changes
    - Moved Penguin sprites into subfolder
    Updating graphics.
    Four new Remnant missions
    
    #4222
    Fixes by PointedStick and Amazinite
    
    - Spelling Mistakes
    - Grammar Fixes
    - Slight Wording changes
    - Moved Penguin sprites into subfolder
    Updating graphics.
    Four new Remnant missions
    
    #4222
    Fixes by PointedStick and Amazinite
    
    - Spelling Mistakes
    - Grammar Fixes
    - Slight Wording changes
    - Moved Penguin sprites into subfolder
    Updating graphics.
    Four new Remnant missions
    
    #4222
    Fixes by PointedStick and Amazinite
    
    - Spelling Mistakes
    - Grammar Fixes
    - Slight Wording changes
    - Moved Penguin sprites into subfolder
    Updating graphics.
    Four new Remnant missions
    
    #4222
    Fixes by PointedStick and Amazinite
    
    - Spelling Mistakes
    - Grammar Fixes
    - Slight Wording changes
    - Moved Penguin sprites into subfolder
    Updating graphics.
    Four new Remnant missions
    
    #4222
    Fixes by PointedStick and Amazinite
    
    - Spelling Mistakes
    - Grammar Fixes
    - Slight Wording changes
    - Moved Penguin sprites into subfolder
    Updating graphics.
    Four new Remnant missions
    
    #4222
    Fixes by PointedStick and Amazinite
    
    - Spelling Mistakes
    - Grammar Fixes
    - Slight Wording changes
    - Moved Penguin sprites into subfolder
    Updating graphics.
    Four new Remnant missions
    
    #4222
    Fixes by PointedStick and Amazinite
    
    - Spelling Mistakes
    - Grammar Fixes
    - Slight Wording changes
    - Moved Penguin sprites into subfolder
    Updating graphics.
    Four new Remnant missions
    
    #4222
    Fixes by PointedStick and Amazinite
    
    - Spelling Mistakes
    - Grammar Fixes
    - Slight Wording changes
    - Moved Penguin sprites into subfolder
    Updating graphics.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    feat(content): Created "hot Jupiter" graphics (#5229)
    feat: Added brown dwarves to various Ember Waste systems (#4960)
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    feat: Added brown dwarves to various Ember Waste systems (#4960)
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    feat(content): Created "hot Jupiter" graphics (#5229)
    Updated the remaining human station sprites
    
    #4689
    Added six new space station images.
    Uploaded all the files from my local repository to Google Code.
    Darkened the shadows on my new ring planet images to match the rest of the planets.
    Replaced some ring giant planet images that I wasn't too happy with.
    Added rings to four of the gas giants, for variety.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    feat(content): Added a new Builder station to the Graveyard (#5198)
    feat(content): Created "hot Jupiter" graphics (#5229)
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    planet sprites (#3458)
    
    New planet sprites from @comnom
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Added add-on solar panel sprites for the Heliarch ringworlds.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Uploaded all the files from my local repository to Google Code.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Uploaded all the files from my local repository to Google Code.
    feat(content): Created "hot Jupiter" graphics (#5229)
    planet sprites (#3458)
    
    New planet sprites from @comnom
    feat: Unique sprites for every human station (#4787)
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Working to update the sprites for some of the uglier planets.
    Uploaded all the files from my local repository to Google Code.
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Uploaded all the files from my local repository to Google Code.
    Added images for Korath space stations.
    Uploaded all the files from my local repository to Google Code.
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    planet sprites (#3458)
    
    New planet sprites from @comnom
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Working to update the sprites for some of the uglier planets.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Working to update the sprites for some of the uglier planets.
    Uploaded all the files from my local repository to Google Code.
    feat(aliens)!: new alien factions: the Builders and the Ka'het (#4716)
    Uploaded all the files from my local repository to Google Code.
    Updated the remaining human station sprites
    
    #4689
    Added six new space station images.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Updated the planet graphics for 12 more planets. That covers most of the ones I thought were the ugliest.
    Uploaded all the files from my local repository to Google Code.
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Uploaded all the files from my local repository to Google Code.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Added images for Korath space stations.
    Uploaded all the files from my local repository to Google Code.
    feat(aliens)!: new alien factions: the Builders and the Ka'het (#4716)
    planet sprites (#3458)
    
    New planet sprites from @comnom
    planet sprites (#3458)
    
    New planet sprites from @comnom
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Uploaded all the files from my local repository to Google Code.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    feat(content): Added a new Builder station to the Graveyard (#5198)
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Updated the planet graphics for 12 more planets. That covers most of the ones I thought were the ugliest.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    feat(aliens)!: new alien factions: the Builders and the Ka'het (#4716)
    Uploaded all the files from my local repository to Google Code.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Uploaded all the files from my local repository to Google Code.
    Darkened the shadows on my new ring planet images to match the rest of the planets.
    Replaced some ring giant planet images that I wasn't too happy with.
    Added rings to four of the gas giants, for variety.
    Uploaded all the files from my local repository to Google Code.
    feat(content): Created "hot Jupiter" graphics (#5229)
    planet sprites (#3458)
    
    New planet sprites from @comnom
    planet sprites (#3458)
    
    New planet sprites from @comnom
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Uploaded all the files from my local repository to Google Code.
    Updated the planet graphics for 12 more planets. That covers most of the ones I thought were the ugliest.
    Updated the sprites for five of the lava planets, to something a little less tacky.
    Uploaded all the files from my local repository to Google Code.
    Added images for Korath space stations.
    feat: New alien looking sprite for the Quarg station "Lagrange" (#4782)
    New lagrange image (#4226)
    
    * Delete station0.png
    
    * New lagrange
    
    * Update copyright
    Uploaded all the files from my local repository to Google Code.
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Uploaded all the files from my local repository to Google Code.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Uploaded all the files from my local repository to Google Code.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Updated seven of the planet images.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    planet sprites (#3458)
    
    New planet sprites from @comnom
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Updated the sprites for five of the lava planets, to something a little less tacky.
    Uploaded all the files from my local repository to Google Code.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Added images for Korath space stations.
    feat: Unique sprites for every human station (#4787)
    feat: Added brown dwarves to various Ember Waste systems (#4960)
    feat: Unique sprites for every human station (#4787)
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Updated seven of the planet images.
    Uploaded all the files from my local repository to Google Code.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Uploaded all the files from my local repository to Google Code.
    feat(aliens)!: new alien factions: the Builders and the Ka'het (#4716)
    feat: Added brown dwarves to various Ember Waste systems (#4960)
    planet sprites (#3458)
    
    New planet sprites from @comnom
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Uploaded all the files from my local repository to Google Code.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    More Wanderer missions.
    feat(content): Created "hot Jupiter" graphics (#5229)
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Updated the planet graphics for 12 more planets. That covers most of the ones I thought were the ugliest.
    Uploaded all the files from my local repository to Google Code.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Updated the planet graphics for 12 more planets. That covers most of the ones I thought were the ugliest.
    Uploaded all the files from my local repository to Google Code.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    feat: Added brown dwarves to various Ember Waste systems (#4960)
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Added Coalition space stations
    
    #4643
    Added add-on solar panel sprites for the Heliarch ringworlds.
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Added rings to four of the gas giants, for variety.
    Uploaded all the files from my local repository to Google Code.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Uploaded all the files from my local repository to Google Code.
    feat(aliens)!: new alien factions: the Builders and the Ka'het (#4716)
    Working to update the sprites for some of the uglier planets.
    Uploaded all the files from my local repository to Google Code.
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Added images for Korath space stations.
    Uploaded all the files from my local repository to Google Code.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Working to update the sprites for some of the uglier planets.
    Added rings to four of the gas giants, for variety.
    Uploaded all the files from my local repository to Google Code.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Updated seven of the planet images.
    Uploaded all the files from my local repository to Google Code.
    Updated the planet graphics for 12 more planets. That covers most of the ones I thought were the ugliest.
    Uploaded all the files from my local repository to Google Code.
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Updated the remaining human station sprites
    
    #4689
    Added six new space station images.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Updated the sprites for five of the lava planets, to something a little less tacky.
    Uploaded all the files from my local repository to Google Code.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Updated the planet graphics for 12 more planets. That covers most of the ones I thought were the ugliest.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    feat(content): Created "hot Jupiter" graphics (#5229)
    planet sprites (#3458)
    
    New planet sprites from @comnom
    planet sprites (#3458)
    
    New planet sprites from @comnom
    planet sprites (#3458)
    
    New planet sprites from @comnom
    planet sprites (#3458)
    
    New planet sprites from @comnom
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    planet sprites (#3458)
    
    New planet sprites from @comnom
    feat: Unique sprites for every human station (#4787)
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Added add-on solar panel sprites for the Heliarch ringworlds.
    Added a new space station.
    feat(aliens)!: new alien factions: the Builders and the Ka'het (#4716)
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Uploaded all the files from my local repository to Google Code.
    Updated the remaining human station sprites
    
    #4689
    Added six new space station images.
    Uploaded all the files from my local repository to Google Code.
    Added add-on solar panel sprites for the Heliarch ringworlds.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Uploaded all the files from my local repository to Google Code.
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Added Coalition space stations
    
    #4643
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Uploaded all the files from my local repository to Google Code.
    Updated seven of the planet images.
    Uploaded all the files from my local repository to Google Code.
    Updated the planet graphics for 12 more planets. That covers most of the ones I thought were the ugliest.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Uploaded all the files from my local repository to Google Code.
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Uploaded all the files from my local repository to Google Code.
    feat: Unique sprites for every human station (#4787)
    feat: Unique sprites for every human station (#4787)
    Uploaded all the files from my local repository to Google Code.
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Updated seven of the planet images.
    Uploaded all the files from my local repository to Google Code.
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Updated the planet graphics for 12 more planets. That covers most of the ones I thought were the ugliest.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Uploaded all the files from my local repository to Google Code.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    planet sprites (#3458)
    
    New planet sprites from @comnom
    feat(content): Created "hot Jupiter" graphics (#5229)
    Updated the remaining human station sprites
    
    #4689
    Added six new space station images.
    Uploaded all the files from my local repository to Google Code.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Uploaded all the files from my local repository to Google Code.
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Implemented wormholes. (Any planet that shows up in multiple systems is a wormhole.)
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Updated the planet graphics for 12 more planets. That covers most of the ones I thought were the ugliest.
    Uploaded all the files from my local repository to Google Code.
    feat: Unique sprites for every human station (#4787)
    planet sprites (#3458)
    
    New planet sprites from @comnom
    feat(content): Created "hot Jupiter" graphics (#5229)
    Uploaded all the files from my local repository to Google Code.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Added Coalition space stations
    
    #4643
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Uploaded all the files from my local repository to Google Code.
    Fixed a PNG that was indexed color instead of full RGB.
    Uploaded all the files from my local repository to Google Code.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Added add-on solar panel sprites for the Heliarch ringworlds.
    Uploaded all the files from my local repository to Google Code.
    feat(content): Created "hot Jupiter" graphics (#5229)
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Stripped the color profiles from two PNGs.
    Updated seven of the planet images.
    Uploaded all the files from my local repository to Google Code.
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Uploaded all the files from my local repository to Google Code.
    feat: Added brown dwarves to various Ember Waste systems (#4960)
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    Updated the planet graphics for 12 more planets. That covers most of the ones I thought were the ugliest.
    Uploaded all the files from my local repository to Google Code.
    feat: Unique sprites for every human station (#4787)
    Uploaded all the files from my local repository to Google Code.
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Updated the planet graphics for 12 more planets. That covers most of the ones I thought were the ugliest.
    Uploaded all the files from my local repository to Google Code.
    Added images for Korath space stations.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Uploaded all the files from my local repository to Google Code.
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    planet sprites (#3458)
    
    New planet sprites from @comnom
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Uploaded all the files from my local repository to Google Code.
    feat(content): Created "hot Jupiter" graphics (#5229)
    planet sprites (#3458)
    
    New planet sprites from @comnom
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    Replaced the station1 planet sprite
    
    #4644
    Added six new space station images.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Uploaded all the files from my local repository to Google Code.
    Added the Remnant territory (the Ember Waste) to the map.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Uploaded all the files from my local repository to Google Code.
    feat: Unique sprites for every human station (#4787)
    feat(aliens)!: new alien factions: the Builders and the Ka'het (#4716)
    Uploaded all the files from my local repository to Google Code.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    planet sprites (#3458)
    
    New planet sprites from @comnom
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Uploaded all the files from my local repository to Google Code.
    Stripped the color profiles from two PNGs.
    Updated the sprites for five of the lava planets, to something a little less tacky.
    Uploaded all the files from my local repository to Google Code.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    planet sprites (#3458)
    
    New planet sprites from @comnom
    strip iccp chunks
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Updated the sprites for five of the lava planets, to something a little less tacky.
    Uploaded all the files from my local repository to Google Code.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    feat: Unique sprites for every human station (#4787)
    Uploaded all the files from my local repository to Google Code.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Updated seven of the planet images.
    Uploaded all the files from my local repository to Google Code.
    Uploaded all the files from my local repository to Google Code.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Working to update the sprites for some of the uglier planets.
    Uploaded all the files from my local repository to Google Code.
    Added a secondary trigger key for weapons that use up ammo, and a display of ammo remaining for each.
    Added an outfit image and icon for the nuke.
    Added a "flamethrower" weapon, as a test of weapons using fuel as ammunition.
    Added a secondary trigger key for weapons that use up ammo, and a display of ammo remaining for each.
    Added a new torpedo launcher, and updated the projectile sprites for several other weapons.
    feat: Added missions to unlock the new Emerald Sword, an ancient Sheragi warship (#4786)
    Added a secondary trigger key for weapons that use up ammo, and a display of ammo remaining for each.
    Added a secondary trigger key for weapons that use up ammo, and a display of ammo remaining for each.
    Added an icon for the Finisher Torpedo, and fixed the direction of the Tracker icon.
    Added another new weapon for the Hai: the Tracker, a fast, long-range missile that is not very effective up close due to its large turning radius.
    Added a new Remnant weapon, the EMP torpedo.
    Working on a new alien species, the Wanderers.
    hai carriers + gatling gun +rail gun (#1284)
    
    Added the Hai carriers, Gatling guns, and railguns (@Amazinite, @LocalGod79, @mdsmestad, @Wrzlprnft).
    Added a secondary trigger key for weapons that use up ammo, and a display of ammo remaining for each.
    Added an icon for the Finisher Torpedo, and fixed the direction of the Tracker icon.
    Added a new Korath weapon, the Piercer missile.
    Added another Korath weapon, the Minelayer.
    Reorganized the icons so the .iconset only contains the files that Mac OS X expects.
    Switched to a less cartoony icon, and added all the sizes required by Mac OS X.
    Added a man page, desktop file, icons, and install build option for Linux.
    Reorganized the icons so the .iconset only contains the files that Mac OS X expects.
    Switched to a less cartoony icon, and added all the sizes required by Mac OS X.
    Added a man page, desktop file, icons, and install build option for Linux.
    Reorganized the icons so the .iconset only contains the files that Mac OS X expects.
    Switched to a less cartoony icon, and added all the sizes required by Mac OS X.
    Added a man page, desktop file, icons, and install build option for Linux.
    Reorganized the icons so the .iconset only contains the files that Mac OS X expects.
    Switched to a less cartoony icon, and added all the sizes required by Mac OS X.
    Added a man page, desktop file, icons, and install build option for Linux.
    Reorganized the icons so the .iconset only contains the files that Mac OS X expects.
    Switched to a less cartoony icon, and added all the sizes required by Mac OS X.
    Added a man page, desktop file, icons, and install build option for Linux.
    Reorganized the icons so the .iconset only contains the files that Mac OS X expects.
    Switched to a less cartoony icon, and added all the sizes required by Mac OS X.
    Added a man page, desktop file, icons, and install build option for Linux.
    Add 128x and 512x icon sizes to SConstruct installs (#4248)
    
    refs: #3913
    Reorganized the icons so the .iconset only contains the files that Mac OS X expects.
    Switched to a less cartoony icon, and added all the sizes required by Mac OS X.
    Add 128x and 512x icon sizes to SConstruct installs (#4248)
    
    refs: #3913
    Reorganized the icons so the .iconset only contains the files that Mac OS X expects.
    Switched to a less cartoony icon, and added all the sizes required by Mac OS X.
    Reorganized the icons so the .iconset only contains the files that Mac OS X expects.
    Icon for the windows binary (#2018)
    
    * WinApp.ico
    
    Add windows application iconset "WinApp.ico" to folder
    "endless-sky.iconset".
    
    * WinApp.rc
    
    Add windows application resource file "WinApp.rc" to the source folder.
    
    * Update EndlessSky.cbp
    
    Add the resource file "WinApp.rc" to the Code::Blocks project.
    Reorganized the icons so the .iconset only contains the files that Mac OS X expects.
    Switched to a less cartoony icon, and added all the sizes required by Mac OS X.
    Added a man page, desktop file, icons, and install build option for Linux.
    Reorganized the icons so the .iconset only contains the files that Mac OS X expects.
    Switched to a less cartoony icon, and added all the sizes required by Mac OS X.
    Reorganized the icons so the .iconset only contains the files that Mac OS X expects.
    Switched to a less cartoony icon, and added all the sizes required by Mac OS X.
    Added a man page, desktop file, icons, and install build option for Linux.
    Reorganized the icons so the .iconset only contains the files that Mac OS X expects.
    Switched to a less cartoony icon, and added all the sizes required by Mac OS X.
    Added a man page, desktop file, icons, and install build option for Linux.
    Reorganized the icons so the .iconset only contains the files that Mac OS X expects.
    Switched to a less cartoony icon, and added all the sizes required by Mac OS X.
    Reorganized the icons so the .iconset only contains the files that Mac OS X expects.
    Switched to a less cartoony icon, and added all the sizes required by Mac OS X.
    Reorganized the icons so the .iconset only contains the files that Mac OS X expects.
    Switched to a less cartoony icon, and added all the sizes required by Mac OS X.
    Reorganized the icons so the .iconset only contains the files that Mac OS X expects.
    Switched to a less cartoony icon, and added all the sizes required by Mac OS X.
    Reorganized the icons so the .iconset only contains the files that Mac OS X expects.
    Switched to a less cartoony icon, and added all the sizes required by Mac OS X.
    Reorganized the icons so the .iconset only contains the files that Mac OS X expects.
    Switched to a less cartoony icon, and added all the sizes required by Mac OS X.
    Fixed minor code style issues (#4428)
    Made the scanning warnings "unimportant," so they only pop up to the top of your messages list if they aren't already in the list somewhere.
    Made existing messages being displayed on the bottom of the screen will "age" more quickly each time other messages are added, to limit the total number of messages shown.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Removed superfluous std:: prefixes.
    Fixed a bug where the messages were not getting reset when loading a different game.
    Added a "Messages" class to allow any thread to safely add a message to the display.
    style: Remove unexpected trailing whitespace
    
    The only trailing whitespace should be "continuation tabs"
    Added functions to Random for getting normally distributed random numbers.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Added a Random::Real() function, and refactored to use Random everywhere (because old-fashioned rand() is considered deprecated now.)
    Added new functions to Random to set the seed and to get a binomial distribution.
    Added a "Random" class, for encapsulating thread-safe random number generation.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    feat(linting): Add conversation error checking for goto, choice nodes (#5074)
    
    * check for multi-token conversation text, which usually indicates indentation errors and can be a nightmare to debug
    
    * also detect invalid choice text nodes
    
    * conversation warnings are now errors
    NPC "completion" / MissionAction conversations can kill the player and/or NPC (#3376)
    
    * Call ConversationPanel with a pointer to the relevant ship
    
     - Allows destroying the pointed ship depending on the conversation outcome.
     - If the player is killed, the pointed ship should survive, and no BoardingPanel should be displayed.
     - Supply the ship from NPC::Do, to enable destroying the NPC via LAUNCH, DEPART, and FLEE conversation endings.
     - Include a boarding check to prevent an NPC block with a non-boarding completion requirement (e.g. `npc evade`) from displaying a BoardingPanel after the conversation ends.
    
    * Add response handling for non-"on offer" conversations
    
     - Updated PlayerInfo::BasicCallback:
       - attached it to:
         - all NPC completion conversations
           - If actually boarding the NPC, set it as the boarding ship.
       - The player is perhaps not landed: in-flight death implies:
         - capture of the flagship by the ship it was boarding (`die` when boarding)
         - crew mutiny and defection (`die` when not boarding)
         - the destruction of the ship. (`explode`)
     - Added the Conversation::EXPLODE response, based on the keyword `explode`
     - Updated the Ship::WasCaptured code to not over-transfer crew, for the case where the player dies to a conversation offered in-flight and has plenty of crew already.
    
    * Rework PlayerInfo::Die
    
     - Remove need for a private Die() method
     - Update callers of Die(bool) to use Die(int) and achieve the intended result
    
    * Eliminate need for BoardingShip()
    
     - Moved player death handling into ConversationPanel::Exit, where the relevant ship pointer is easily accessed
     - Added pointers to the ship responsible for the boarding mission / npc event into relevant Mission and MissionAction methods, to eliminate need for PlayerInfo::BoardingShip
    
    * Showing BoardingPanel requires a disabled-yet-not-destroyed ship
    
    * Add check for capture / bribery of a boarding ShipEvent's target via a mission NPC's completion conversation
    
     - A more robust method to only offer the BoardingPanel resulting from ConversationPanel::Exit (i.e. no display of sequential BoardingPanels, and obeying the conversation's exit node) should be pursued separately
    Code cleanup: "static" is redundant inside a C++11 anonymous namespace.
    Added a helper function for the common task of splitting a string into paragraphs.
    Typo fix in previous commit.
    Fixing linker errors in some compilers referring to the Conversation outcome enumeration.
    Continuing code cleanup and commenting.
    Refactoring: switching to using "!set.count(...)" instead of "set.find(...) == set.end()" because it's more concise, just as efficient, and seems clearer.
    Fixed a hard-coded default return value for Conversation that used a numeric value instead of the enumeration.
    Revert last few tabs.
    Add back whitespace.
    Add "depart"="defer+leave" and allow "on defer" callbacks.
    Errors in conversations will now print a full "trace" of the error location.
    Added brackets and indentation for every BeginChild()...EndChild() pair to improve the code readability (compared to indentation with no brackets, or no indentation at all).
    Moved all the source code files into a "source" folder to clean up the root folder.
    Removed superfluous std:: prefixes.
    Added a "flee" conversation option, meaning: launch + decline.
    Modified the Conversation class so that a "scene" image can be inserted at any point, and modified one of the Free Worlds missions to test that.
    Updated the XCode project and fixed a few issues it complained about.
    Began adding support for "Game Events" that alter the galaxy at a certain point in time. (So far all they do is modify condition flags, to test that they are indeed triggering on the proper day.)
    Gave conversation the ability to modify conditions or to branch based on existing conditions.
    Fixed a few small bugs for handling the new mission implementation.
    Got serialization of conversations working (without bothering to preserve the original node label strings).
    Added support for basic "special missions," offered in the Spaceport on certain planets.
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Added GPL statements to all source code files and added a license.txt file.
    Updated Conversation to allow typing in your name (for the intro text). Also added an option for a "scene" picture, and a better UI panel.
    Got the code to build without warnings when -Wall is defined.
    Uploaded all the files from my local repository to Google Code.
    feat(graphics): Add comment with shader name (#4995)
    
    This makes it easier to debug compilation errors
    Fixed minor code style issues (#4428)
    Remove some -Wuseless-cast warnings
    remove extra call to glUnifor1i in Font.cpp
    Modifying BatchShader to not rely on OpenGL being able to use pointers to vertex attributes in main memory.
    Fix binding of sampler tex.
    
    For samplers, Mesa3D expects the argument to be int.
    It was being sent as uint.
    Switched to using 2D "texture arrays" for sprites, so all the frames fit into a single texture.
    Added support in ImageBuffer for loading multiple frames of an animation into one buffer.
    Code cleanup: "static" is redundant inside a C++11 anonymous namespace.
    Fixed some missing #includes and one unnecessary check that would mess up other compilers.
    Truncate displayed ship names to prevent overflowing containers (#2631)
    
    * Apply truncation to the front of ship names if selling more than one
    
    Avoids awkward-looking line wraps caused by long ship names when coupled with list-style confirmation dialog.
    Refs #2249
    
    * Extend truncation to other appearances of ship names
    
    Adds front or end truncation to the following locations:
     - Hailing screen: no overflow off right edge for combinations of long ship names and/or long government names.
     - Targeting reticle: no overflow off left edge of ship name
     - Ship detail screen: no overlap of "ship:" and the ship name
     - Shipyard/Outfitter ship details screen: no/minimal overflow out of rounded square border
     - Player Info fleet list: no overflow of ship name across category
    
    Front truncation used where possible, to preserve possible identifying numbers on the tail of the ship name, e.g. the "1" in 'My Ship 1'
    
    * Remove all overlap from Shipyard/Outfitter shared panel
    
    * Font::TruncateMiddle
    
    Allow truncation of strings from the middle out. No special handling to cut in "pretty" locations to do things such as prefer whole-word removal, 2nd-letter starting, etc.
    Changes in border characters from "..." to alphanumerics, plus the slightly reduced width precision of TruncateMiddle vs Truncate(Front) made adjusting some targeted widths necessary.
    Strings in the load panel or dialogs that are too long are now truncated.
    Switching to signed in for the absolute value check for truncating strings.
    Added a missing #include.
    Font: added support for truncating a string to fit in a given width (addin ellipses if necessary).
    Replacing "NULL" with "nullptr".
    Removed some superfluous namespace qualifiers.
    0.9.2 updates
    Fix "Member 'XXX' was not initialized in this constructor " compiler
    warnings for WrappedText, ShipyardPanel, Interface, and Font.
    Add parentheses around condition in main.cpp per compiler warning
    suggestion.
    Straight quotation marks are now replaced with curly ones when rendering text.
    Added "labels" for planets you can land on, which show up when you get near them.
    Optimized text drawing by caching the shader's variable indices.
    Fixed the handling of underlines in Font::Width().
    Made the keyboard shortcut underlines only display when you hold down Alt, to avoid cluttering the interface the rest of the time.
    Underlines for hotkeys now scale to the letter than they are underlining.
    Added syntax to underline individual characters if the label string contains an underscore character preceding a character.
    Shifted the font glyphs over one pixel to avoid bleed between glyphs when text is not aligned to pixel boundaries. (This required a few tweaks to the kerning code, too.)
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Switched to double-scale bitmap fonts, so they will be sharp on high-DPI systems. Made the kerning a little tighter and more even in the process.
    The program now auto-detects the proper GLSL version number so it does not have to be set via conditional flags for each OS.
    Eliminated SDL_image in order to allow reading images in multiple threads simultaneously.
    Had to roll back to OpenGL version 3.0 instead of 3.3 on Linux, but left the Mac port at 3.3.
    Ported to Mac OS X.
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Switched to always using the Color class instead of passing around RGBA float arrays.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    feat(mechanics): Update random planet selection criteria (#4867)
    
    * feat(mechanics): Update random planet selection criteria
    
     - allow stopovers picked from a location filter to include non-spaceport planets
     - if explicitly providing planet names, randomly picked planets can now be wormholes, planets without spaceports, or planets for which the player does not have clearance
       - This applies even for mission/job destinations
    
    e.g.
    ```
    destination
        system "Civil War"
        planet "Friendly With Player" "Hostile With Player"
    ```
    can now pick "Hostile With Player" and not just "Friendly With Player", while
    ```
    destination
        system "Civil War"
    ```
    can only pick "Friendly With Player", because there was not an explicit override.
    
    (Previously, a mission had to provide `clearance` in order to pick a hostile destination randomly.)
    
    * chore(missions): require a spaceport where the stopover / mission text suggests "inhabited"
    
    * feat(content): remove stations from Han Sizer stopovers
    
    as it is a tour of worlds, e.g. planets & moons, not stations
    
    * pr feedback
    
    exclude Carbuncle, Arachne Station from corporate retreat job
    Extend LocationFilter's supported criteria
    
      Missions that trigger on boarding or assisting can now reference the ship's
        - category
          - 'and'ing a category is not possible (since multi-category ships are not possible).
          - e.g. `category "Heavy Warship" "Medium Warship"` matches any ship that is either a Heavy Warship or a Medium Warship
        - outfits
          - 'and'ing outfits is supported
          - e.g. `outfits "Electron Beam" "Electron Turret"` matches any ship that has at least an electron beam or an electron turret installed (or in cargo)
        - attributes
          - 'and'ing attributes is supported
          - e.g. `attributes "cloaking fuel"` matches any ship that has a positive "cloaking fuel" attribute, after all its installed outfits' effects are applied
    
      - Outfit and attribute references return true if the ship has a positive value for the provided token - a ship with a negative or zero-valued attribute/outfit count will not match that attribute or outfit.
    
      - Outfits can also be used for planets to restrict by the items available in its outfitter.
        e.g. `outfits "Stack Core"` would match planets Solace, Wayfarer, and Zug, after the Stack Core is available for purchase
    Move PickSystem, PickPlanet from Mission to LocationFilter
    
     - Support choosing a random system or planet from a given LocationFilter outside of just mission instantiation
    Added constructors that call Load() on a data element, so construction and Load() don't have to be done in two separate steps.
    Mission "on enter" can define a LocationFilter to pick the system(s) (#3141)
    
    * "on enter" actions can define a LocationFilter to pick the system
    
     - Example:
        on enter
          "system filter"
            government "Syndicate"
          dialog "You're now in Syndicate space!"
    
     - Without a system filter, any `on enter` actions that do not name a system will apply as soon as the player takes off (current behavior).
     - Each mission only supports a single `on enter` action without a named system (current behavior).
    
    * Use a function to convert a distance filter into a near filter
    
      - This avoids needing to save the mission origin in the MissionAction
      - Use of both "near <system>" and "distance" filters in the same `on enter` action is not supported - only the "near" filter will be kept.
      - Fixed an extra indentation level with the saved LocationFilter.
    
    * Forward compatibility for changes to LocationFilter class variables
    
    * Support multiple "generic" on enter MissionActions instead of only one
    
     - "specific" on enter: explicitly identifies the system
     - "generic" on enter: uses a LocationFilter to match a set of systems (offering in the first one that matches), or has no filter and offers immediately on launch
     - All "specific" on enter actions are checked before any "generic" on enter actions for a given system
     - Only one on enter action will be triggered per jump.
     - Each "generic" on enter is checked in the order of definition in the mission datafile
    
    * Update SetOrigin() usage
    
     - Reformat checks to avoid copying if nothing is to be done
     - Pass a system to MissionAction::Instantiate to guarantee a System * is available, even for assisting/boarding missions.
    
    * Use didEnter to track both generic and specific "on enter" actions
    Allow LocationFilter to specify attributes of a neighboring system (#3173)
    
    * Allow LocationFilter to specify attributes of a neighboring system
    
     - Neighboring systems are those that are linked, and not those that are linked or within jump drive distance, to prevent matching to possibly inaccessible systems.
    
    * Disallow in-line not & neighbor usage
    
    * Reduce duplicated code
    
    * Only check NeighborFilter matches when checking systems
    
    * Perform simpler checks first
    Added "not" operators to location filter, letting you specify a filter or filters that the location must not match.
    Added basic support for random missions that get offered when you board a ship.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Modified the mission's "cearance" tag to allow specifying a location filter, same as the "source" and "destination" tags.
    Added support for job "templates" in the mission data. To start out with, added a variety of passenger missions, some of which only happen if you are on certain kinds of planets.
    Made some small changes to support the new mission model, including having the "complete" MissionAction set the payment substitution string, and adding an operator+ to Date for setting deadlines.
    Added LocationFilter, which stores a set of criteria that a planet or system must match to be used in a mission.
    Switched to using 2D "texture arrays" for sprites, so all the frames fit into a single texture.
    Code cleanup: fixing some function parameters that have the wrong name in the header file.
    Made it so if a ship's sprite is animated, so is the target and flagship outline for it.
    The target outline will now rotate to represent what direction the target is facing in.
    Took out the need for Information and Interface to know about Radar (replacing it with generic named points, to be handled separately, instead).
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added support for target ship outlines to be colored based on friendly / hostile status.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Switched to always using the Color class instead of passing around RGBA float arrays.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    feat: Implement maintenance and operating cost attributes  (#4596)
    
    * Added a maintenance cost outfit attribute
    
    * Maintenance costs will now show in the bank panel
    
    * Allow overdue maintenance to be paid off
    
    * Properly size the max rows if you have overdue charges but no crew or maintenance
    
    * Simplified output
    
    * Added an operating costs attributes
    
    * Overdue maintenance costs now impact credit score
    
    * Pay maintenance costs after crew salaries
    
    * Include the maintenance costs of in cargo outfits
    
    * Comment correction
    
    * Clean up
    
    * Code simplification
    
    * Check for > 0 credits instead of non-zero credits for the two crazy people who give themselves negative credits
    
    * Check in cargo outfits when landed and prevent net negative maintenance costs
    
    * Prevent negative costs for each ship and each outfit in cargo instead of preventing a total net negative.
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Number formatting is now limited to one decimal place, which is enough for all current attributes. Also added a separate formatting function for numbers of credits.
    Define additional filled colors in interfaces.txt (#3425)
    
    * Define additional filled colors in interfaces.txt
    
     - Further support for modified interfaces / reskinning.
    
    * Added comments to color definitions
    
    * Reflect name change in code too
    Code cleanup: "static" is redundant inside a C++11 anonymous namespace.
    Added a help message explaining how to set which escort is your flagship that is shown in the player info panel, the outfitter, or the shipyard the first time the player has multiple ships in their fleet.
    Back salaries are now shown in the bank and taken into account when calculating net worth.
    Made Panel::Click() able to distinguish double-clicks, so that the info panel can switch to a ship only if it is double-clicked, not just clicked twice in a row.
    Moved the beginner help messages out into a data file.
    Added a line in the bank for your salary and tribute income.
    Little fixes, bank pay all, info panel targeting (#1421)
    
    * add qualify update to Pay All button at bank
    
    The loan total you qualify for wasn't being updated with Pay All
    
    * add viewing a ship in the infopanel in space will target that ship
    
    this is for general convenience and specifically to make selecting wounded ships simpler if you want to board a ship and get out of a system fast
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    Continuing to add explanatory comments and clean up messy code.
    fix mortages bounds check
    
    added bounds check to avoid undefined behaviour during vector access
    
    consolidated comments
    variables changed for reader clarity
    used static_cast example from BankPanel::KeyDown to avoid unsigned/signed comparison
    Pay Extra to Other https://github.com/endless-sky/endless-sky/issues/1215
    
    Allowed pay extra when used on Other to pay to more than just the first account
    Fix endless-sky/endless-sky#795
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Shifted the columns in the bank panel to make space for the "death benefit" label.
    Made it possible to enter numbers like "800K" or "4.38m" in the bank panel.
    Added a "Pay All" button in the bank. It will pay whatever mortgages, fines, etc. you can afford to pay.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Added help messages that pop up the first time you click on a certain panel (and the first time you end up stranded or dead).
    Spell-checked the comments.
    Updated the bank panel to handle more than 8 line items (by combining some together into an "Other" line).
    Switched to 64-bit values for storing credit amounts (to avoid rolling over if you get 2 billion credits).
    Fixed a bug where the bank panel wasn't recalculating the amount your prequalify for after you take on a new mortgage.
    Updated the UI to use the same three "named" colors everywhere for three different levels of text brightness, for consistency.
    Got crews and salaries working (including erratic ship behavior if missing crew).
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Fixed a bug in DIalog where it was calling the callback on a copy of the given object instead of the original. Added confirmation dialogs to the delete buttons in the Load Game panel. Also tweaked the starting mortgage.
    Added some sanity checks on the new mortgage and extra payment amounts.
    Added an option to go back to the main planet description in the planet panel (by clicking the landscape image).
    Added a new generic dialog class to replace specific dialogs like the "how many credits?" one.
    Switched to always using the Color class instead of passing around RGBA float arrays.
    Added GPL statements to all source code files and added a license.txt file.
    Added a "New Pilot" dialog (which doesn't yet move you straight to the shipyard, though).
    Updated how the UI panels are handled to allow the main menu to be called up regardless of what the game state is.
    Got the code to build without warnings when -Wall is defined.
    Uploaded all the files from my local repository to Google Code.
    Fixed minor code style issues (#4428)
    Support multiple fleet types in planet tributes
    
     - Use an vector of stock fleet definitions to allow customized tribute fights
     - Increase difficulty of all tribute fleets by changing the personality from "staying heroic nemesis" to "staying heroic marked unconstrained"
       - Tribute fleets will now only target the player's ships, and will be ignored by all other ships even if they would be "natural" enemies.
     - Increase visibility of tribute fleets in busy systems by applying the "target" personality
     - Fix a bug in bounds checking on "fleet" nodes in the specification syntax
    Add a "launching" personality, a counterpart to "waiting"
    
     - Mission NPCs with the "launching" personality will always take off with the player, even if their government (or other attributes) would normally prevent them from landing.
     - "launching" has precedence over "waiting" and "staying"
    Made it possible to "add" or "remove" personalities from a fleet (based on @Hadron1776's PR).
    Switched to showing a full trace if an invalid personality name is encountered, so it's easier to track down.
    NPC & Personality error reporting & fixes, for jobs & missions (#3000)
    
    * Add error output for NPC::Load to help content creators
    
    * Fix Pirate Job NPC definitions
    
     - `distance` is not a valid NPC node - it needs to be a child node of a `system` node.
     - More explicitly stagger the NPC arrival times
     - Replace `Bounty` with Pirate and `marked`.
     - Use `entering` with `system destination` when multiple NPCs that are not `staying` are started in the destination, to force one to arrive after the other.
    
    * Escort NPC fixes & updates
    
     - Fixed erroneous `distance` nodes when used directly under `npc`.
     - Removed unneeded `waiting` personality use (if an NPC is hostile to the planet, it will not take off from the planet).
     - Added non-default confusion values to Tiny, Small, and Medium escort opponents, to ease the player into combat, rather than immediately pit them against highly accurate, skilled Pirate pilots.
     - Escort mission pirates are now able to be distracted via cargo jettisoning.
     - The smallest "Escort to ..." missions phase out as the player becomes stronger.
     - High-value Marauder missions are now rarer.
     - The strongest Marauder mission will pursue the player beyond the boundary, as will the Marauder hunters
     - Ordered NPC definitions: npc -> gov -> personality -> location -> fleet(s).
    
    * Add error output for invalid Personality values
    
    * Missed offer changes
    Code cleanup: "static" is redundant inside a C++11 anonymous namespace.
    Added a new "marked" personality, that only attacks the player and will not be attacked by non-player ships. This is a replacement for what I was trying to do with the "skybound" personality.
    Added a "skybound" personality that keeps a ship from landing on planets. (Useful for creating a bounty ship that will flee to other systems but will not land even if it's technically in friendly territory.)
    Added a "target" personality that marks a ship by making it flash in the radar and the targeting display.
    Added support for independent turret tracking (and, limited turret turn rates) for everything but anti-missiles.
    Reordered the Personality class's functions to group them in ways that make more sense.
    Added a "mute" personality marking ships that never say anything in response to a hail.
    Added an "appeasing" personality that dumps cargo when attacked to distract its attackers.
    Added NPC AI support for harvesting flotsam. (For miners, or for distracting pirates by dumping cargo.)
    Added a "mining" personality that circles around searching for minable asteroids, then destroys them. (It doesn't know how to harvest the flotsam yet, though.)
    Adjusted the aim "confusion" to better simulate someone attempting to aim and to avoid having it get stuck for a second or more far from the right aim.
    The map of outfit locations now also shows what resources you have mined in each system.
    0.9.2 updates
    A ship's targeting "confusion" now decreases over time when it is firing weapons continuously. This fixes the issue where a laser turrent might miss small, fast drones entirely due to confusion.
    Added an "unconstrained" personality type that ignores the "invisible fence" that keeps other ships from flying too far from the system center.
    Added a new personality type, "swarming," that hovers near friendly ships (if any).
    Switched to a more organic-looking aim "confusion" effect.
    Added a "vindictive" personality, which will keep shooting at a ship that is already dead if it has nothing better to do.
    Added a "coward" NPC personality that will flee once it takes hull damage.
    Added a preference for whether escorts expend ammo always, frugally, or never.
    Added a "frugal" personality type that tells certain ships (including escorts) to refrain from expending ammunition unless they are outgunned.
    Added support for planetary domination. (But, it won't do anything until defense fleets have been set for each planet.)
    Added brackets and indentation for every BeginChild()...EndChild() pair to improve the code readability (compared to indentation with no brackets, or no indentation at all).
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added display of what system your "absent" escorts are in, including all non-fighter ships that are marked as escorts by their government or personality, even those you do not own.
    Added a "fleeing" personality type that will not pick targets (best combined with "timid" and "uninterested" to make it actually run away).
    Added the third and final set of Free Worlds intro missions, along with the "derelict" personality type to support them.
    Added some new Free Worlds missions, and fixed a few issues I found while developing them.
    Made several improvements to NPCs: an "uninterested" personality that does not follow the player's flagship, and improved handling of carriers. Also modified the outfit scanner to also tell you what fighters a ship is carrying.
    Added a "surveillance" personality type that flies around scanning whatever objects its sensors can scan, and that also launches drones and then leaves them behind in the system to do their own reconaissance.
    Made the "pirate raid" on players with lots of freighters more powerful, and added a personality type for attacking only the player's ships.
    Added support for NPCs "entering" or "staying" in a system, and added a sample "pirate attack" mission (currently always offered).
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Added a "personality" class representing whether a fleet of ships does things like plundering opponents (which pirates now do).
    fix(graphics): Avoid enabling adaptive VSync by default
    
     - Not supported on a number of drivers, and likely the cause of crash-on-launch in some bug reports
     - Refs:
        - endless-sky#4845
        - endless-sky#4971
    fix(mechanics): Count all ships which cannot depart the system
    
    ...even if they have a different warning displayed.
    
    While Ship::FlightCheck now reports all warnings, only the first warning is displayed in the Shipyard / Outfitter.
    (Before displaying e.g. up to 3 warning tooltips, we must determine their relative priorities and verify the checked condition parameters make sense due to the branching changes)
    
    Closes endless-sky#4949
    refactor(main): Extract SDL window initialization & management into separate class (#4472)
    
    * Move SDL_Window setup from main in to a standalone class
    
    Tested, working. Only behavior change so far is moving the window loading up in the load order in an attempt to get visual to the user as quickly as possible.
    I modeled the new class after how the Audio class is handled.
    
    * Update GameWindow.cpp
    
    Added comments. Moved code to more logical order of operations. Removed the Win32 exception on cleanup operations. Added explicit call to hardware acceleration.
    
    * Update project.pbxproj
    
    Thanks to @Fzzr for testing on Mac and providing an updated XCode project file.
    
    * Cleanup unused MonitorHz
    
    Minor edits. Ignore the .gitignore
    
    * Make it unchanged.
    
    Remove my edit.
    
    * Comment editing for readability
    
    This makes more sense to a noob.
    
    * Update in response to feedback
    
    * Resolve issues introduced with that last patch
    
    Missing (), and missing ;
    Forgot to update my .h file
    
    * New module missing
    
    You will need these if compiliing on Windows.
    
    * Fix fullscreen regression
    
    Move comment to own line
    Remove old comment
    Add missing whitespace
    
    * Remove commented code
    
    * style: reorder methods, includes
    feat(mechanics): Spaceport news can now be triggered based on the player's conditions (#5334)
    feat: Quotation marks in news now come from the phrase instead of the source code
    feat(content): Removed portrait images from spaceport news (#5187)
    
    Spaceport portraits of people were an experimental idea that has received generally negative feedback. See #4325 or the comments on #3389 after the news system was added.
    This PR removes the use of the portraits, but keeps the portrait mechanic in game, as we may find a use for it later that doesn't involve images of people, or plugins may still want to make use of the portraits of people.
    Remember the name used for a news portrait
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Added a "news" system for displaying messages from local inhabitants you meet in the spaceport.
    If the player somehow clicks through to the spaceport before all "landing" missions are offered, still offer landing missions there.
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added a new capability for missions: a "blocked" message, which is displayed in a dialog if all other requirements are met but you do not have enough bunks or cargo space free to take on a special mission. Fixes #5.
    Added proper handling for a dead player (through conversations, combat, or a failed attempt to capture a ship).
    Modified the new mission implementation so that missions can also be offered as soon as you land (e.g. to handle continuation of existing missions), and used that to create a "first contact" conversation that is shown the first time you land on any Quarg world.
    Switched over to the new Mission implementation. There are still some aspects that are not working yet (like, the job board).
    Updated the UI to use the same three "named" colors everywhere for three different levels of text brightness, for consistency.
    Switched to always using the Color class instead of passing around RGBA float arrays.
    Added GPL statements to all source code files and added a license.txt file.
    Added a "New Pilot" dialog (which doesn't yet move you straight to the shipyard, though).
    Updated how the UI panels are handled to allow the main menu to be called up regardless of what the game state is.
    Uploaded all the files from my local repository to Google Code.
    feat(mechanics): Enable creating Commands from datafile text (#4997)
    
    Doesn't add the bindings for actually reading in & then using the commands, but is one step in that direction.
    
    * Add command loading and sending it to the Engine
    This is part of the automatic-testing PR endless-sky#4370 and could also be used for endless-sky#4720.
    
    * Replaced if/else chain in Command loading by lookup map.
    Also fixed a bug that caused commands to be skipped during loading.
    
    * Add command forwarding through MainPanel.
    
    * Apply suggestions from code review
    Print the relevant token when an unrecognized command is found.
    feat(mechanics): Added a command that will bring the flagship to a stop (#4745)
    
    * Move reading of Shift modifier from AI.cpp to Command.cpp.
    
    This places reading of the Shift key state together with regular input key reads.
    
    Tested (and no issues seen):
    - N       -> cycle through ships
    - Shift-N -> cycle through escorts
    - T       -> talk to selected ship
    - shift-T -> talk to selected planet
    - B       -> board enemy ship
    - shift-B -> board escort
    - R       -> select nearest enemy
    - shift-R -> select nearest ship
    
    * Add stop command to stop all movement of players flagship
    
    Used Shift+H as key to perform full stop of flagship.
    
    * Remove no longer needed SDL include from AI.cpp
    
    * "stop command" is shift-down instead of shift-hold
    
    * Bug fix for this problem:
    
    1. user presses and holds SHIFT
    2. user presses and holds BACK
    3. ship engages reverse thrusters (BACK) for one step
    4. ship disengages reverse thrusters and then activates STOP
    
    * Process review comments
    
    Removed duplicate code.
    Minor text improvement.
    
    * Cleaned up HandleKeyboardInputs section.
    
    * Use local shift variable.
    
    * Fix comments
    
    * Add message informing the player that the flagship is stopping.
    
    * Updated message to indicate one-time action.
    
    * style: update Stop command's feedback message
    
    Co-authored-by: NomadicVolcano <60122264+NomadicVolcano@users.noreply.github.com>
    feat(controls): Make fast-forward key configurable (#4741)
    
    * Make fast-forward key configurable
    * Do not toggle fast-forward on repeat input events
    * Rename "Menus" to "Interface" in Preferences, resize column slightly
    
    Closes endless-sky#2738
    refactor(input-handling): Move kb/m reads from AI & Engine to only Engine (#4715)
    
    * Add an "And" function to the Command class.
    
    * Move keyboard inputs from AI to Engine
    Combine mouse and keyboard inputs into single activeCommands variable
    
    Tested (OK, no issues seen):
    MENU
    MAP
    INFO
    FORWARD, LEFT, RIGHT, BACK, PRIMARY, AFTERBURNER
    SCAN
    DEPLOY
    HAIL
    BOARD
    CLOAK
    LAND (autopilot)
    LAND (switch landing targets)
    LAND (landing based on mouseclick)
    JUMP (autopilot)
    JUMP (insufficient fuel warning)
    JUMP (WAIT, fleet waiting for jump)
    TARGET (cycle through enemy ships)
    NEAREST (cycle through friendly ships)
    SELECT (switch secondary weapon)
    SECONDARY (fire secondary weapon)
    DEPLOY
    FIGHT
    GATHER (looks the same as before the change)
    HOLD (looks the same as before the change)
    AMMO
    
    Signed-off-by: Peter van der Meer <peter.vd.meer@gmail.com>
    
    * Add comments on Command and made comments full sentences.
    
    - Documented the use of the WAIT command.
    - Made all comments full sentences, included full stops.
    
    * Fixed clearing commands from the wrong variable.
    
    * Remove duplicate audio-repeat-avoidance construct
    
    Repeatedly playing audio was already resolved by forwarding autoPilot
    commands only 1 single frame through activeCommands and by clearing
    the autoPilot at the same time as giving the error-message and playing
    the fail sound.
    
    * Fix an issue where JUMP is cleared before out-of-fuel error-message.
    
    The targetSystem gets set during emergency jumps (without a travel plan).
    If such situation happens and there is insufficient fuel or no jump or
    hyperdrive, then we still want the warning to be sent on the first time
    the jump command is given.
    Change aim to be explicitly signed (#4457)
    
    Some architectures default `char` as unsigned, so turrets would only rotate in one direction.
    
    Fixes endless-sky#4456
    minor enhancement: soft warning for more than 32 hardpoints (#2474)
    
    * Add a soft warning when ships have 33+ hardpoints
    
    Show a soft warning if a ship (either in the savegame or in a base definition file) has more than 32 hardpoints.
    Reason: Command.cpp uses a 32bit mask for weapons.
    
    * Added a comment regarding 32+ weapons.
    
    Added a small reference comment to Ship.cpp -> Ship::Load()
    In case this should be changed somewhen in the future to allow for more than 32 active weapons, the warning in Ship::Load should be adjusted.
    
    * changed the soft warning text (33+ hardpoints)
    
    Changed the text to respect situations with over 64 hardpoints.
    Hardpoint #65 is internally dealt (when it comes about firing) as hardpoint #1, because of an overflow in the bitwise shifting of a 64bit int.
    
    * changed the warning upon MZ's wish
    
    - print only one warning per ship, not per each hardpoint beyond 32
    - changed text to the one desired by MZ
    
    * Formatting fix.
    Added support for independent turret tracking (and, limited turret turn rates) for everything but anti-missiles.
    Fixed some things that Google's cpplint warns about (mostly, constructors that should be marked explicit).
    Added a key command to toggle escort ammo usage on the fly.
    Moved the beginner help messages out into a data file.
    Continuing to work on code cleanup and commenting.
    0.9.2 updates
    A ship's targeting "confusion" now decreases over time when it is firing weapons continuously. This fixes the issue where a laser turrent might miss small, fast drones entirely due to confusion.
    Made it possible for AI ships to "stop" almost completely, by having ships apply fractional thrust if they know they are trying to stop.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Took out most of the overloaded operators for Command, because it is not at all clear how they should handle the turn field, and ignoring it was causing problems.
    New feature: you can hold down the jump key to prepare for hyperspace but not jump yet (so that you can wait until your whole fleet is ready to jump, too).
    Eliminated the Controllable class by using Command for its command bitfield, and moving its target functions into Ship. This means there is now just a single representation of commands, instead of three different ones for different purposes.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    feat(enhancement): Created an on waypoint mission action (#5413)
    feat(mechanics): Aborting is now a separate mission trigger from failing (#5426)
    build: avoid error in default initialization of a const object for older compilers (#5365)
    
    Fixes the error: Default initialization of an object of const type "const MissionAction" without a user-provided default constructor.
    Encountered when building continuous for macOS (10.11 using Xcode 8.2.1).
    feat(mechanics): Update random planet selection criteria (#4867)
    
    * feat(mechanics): Update random planet selection criteria
    
     - allow stopovers picked from a location filter to include non-spaceport planets
     - if explicitly providing planet names, randomly picked planets can now be wormholes, planets without spaceports, or planets for which the player does not have clearance
       - This applies even for mission/job destinations
    
    e.g.
    ```
    destination
        system "Civil War"
        planet "Friendly With Player" "Hostile With Player"
    ```
    can now pick "Hostile With Player" and not just "Friendly With Player", while
    ```
    destination
        system "Civil War"
    ```
    can only pick "Friendly With Player", because there was not an explicit override.
    
    (Previously, a mission had to provide `clearance` in order to pick a hostile destination randomly.)
    
    * chore(missions): require a spaceport where the stopover / mission text suggests "inhabited"
    
    * feat(content): remove stations from Han Sizer stopovers
    
    as it is a tour of worlds, e.g. planets & moons, not stations
    
    * pr feedback
    
    exclude Carbuncle, Arachne Station from corporate retreat job
    feat(mechanics): Allow mission NPCs to spawn or despawn based off of ConditionSets (#5161)
    fix: Illegal stealth missions can no longer be fined for multiple times (#4526)
    
    feat: Fines for illegal mission cargo are now added together instead of only the worst being applied.
    feat: You are now told about how many missions you failed for being scanned.
    fix(mechanics): Ships with mission passengers must be in-system to satisfy requirements
    
    Ref c9e7e9c5d3b88c78e4a1f0ac86d64ac78f33b6fb
    fix(mechanics): Update Mission::IsSatisfied
    
     - account for 0-size mission cargo by using the CargoHold's MissionCargo container, rather than the size
     - Check the carrying ship's system, when a player ship is carried
    
    Closes endless-sky#4824
    style: Remove unexpected trailing whitespace
    
    The only trailing whitespace should be "continuation tabs"
    fix(mappanel): Evaluate completion conditions when coloring missions in map panel (#4766)
    
    * Move the test of the completion conditions from `Mission::CanComplete` into `Mission::IsSatisfied` (which is called by CanComplete) so that the map panels will correctly color active missions that cannot be completed
    feat(ux): Limit pop-ups when multiple missions have "on visit" dialogs (#4592)
    
    * Have on visit dialogs be handled by PlayerInfo instead of by MissionAction so that players won't be swamped by on visit dialogs if they hoard jobs
    * Show separate dialogs for unique missions and remind the player of deadlines
    * Simplified code and changed GetActions() to GetAction(Trigger)
    * Changed the wording for the deadline reminder
    * Count missions even if they don't have an on visit dialog, but still only display a dialog if one of the counted missions has one
    * Simplified code.
    * Ignore invisible missions.
    * Don't care about deadlines. (The player should already know that information.)
    * Don't show extra dialog if you only have one on visit.
    * Changed the wording of the extra dialog to mention other unfinished missions, not the total.
    Restrict reparenting of mission-affiliated carried ships to the same missison (#4468)
    
    * Restrict reparenting of mission-affiliated carried ships to same-mission ships
    * Avoid nullptr dereference
     - Carried ships should properly inherit their parent's system, but on the off chance one doesn't, default it into the players system
    * Replace std::find_if with a Mission class method
     - explicitly declare the lambda captures for `reparentWith`
    * Log the issuance of a fallback system
    
    Fixes #4307
    Fix std::out_of_range for out-of-system cloaking NPCs
    Explicitly track "failed" and "declined" mission statuses (#4133)
    
    * Add automatic condition flag when missions are failed
    
    * Add "declined" condition
    More syntax warnings
    
     - If a mission source, destination, waypoint, or stopover directly specify an object, only the first specified is used.
       Provides a warning to the content creator that additional tokens are ignored, and so is any location filter, if a specific token is used.
     - Warns about using 'illegal' and 'stealth' as children of `cargo`
    Add mission cargo from boarding/assisting missions only to the flagship
    
     - Missions that add or remove outfits use the proper CargoHold.
    Check if the picked boarding/assisting mission has space before offering
    
     - Use Mission::HasSpace(ship) rather than check in MainPanel::StepEvents
     - Update blocked mission handling to use the proper mission list
     - Use correct cargo / bunk numbers for "Blocked" messages if boarding
     - Set proper autoconditions when boarding
    NPC "completion" / MissionAction conversations can kill the player and/or NPC (#3376)
    
    * Call ConversationPanel with a pointer to the relevant ship
    
     - Allows destroying the pointed ship depending on the conversation outcome.
     - If the player is killed, the pointed ship should survive, and no BoardingPanel should be displayed.
     - Supply the ship from NPC::Do, to enable destroying the NPC via LAUNCH, DEPART, and FLEE conversation endings.
     - Include a boarding check to prevent an NPC block with a non-boarding completion requirement (e.g. `npc evade`) from displaying a BoardingPanel after the conversation ends.
    
    * Add response handling for non-"on offer" conversations
    
     - Updated PlayerInfo::BasicCallback:
       - attached it to:
         - all NPC completion conversations
           - If actually boarding the NPC, set it as the boarding ship.
       - The player is perhaps not landed: in-flight death implies:
         - capture of the flagship by the ship it was boarding (`die` when boarding)
         - crew mutiny and defection (`die` when not boarding)
         - the destruction of the ship. (`explode`)
     - Added the Conversation::EXPLODE response, based on the keyword `explode`
     - Updated the Ship::WasCaptured code to not over-transfer crew, for the case where the player dies to a conversation offered in-flight and has plenty of crew already.
    
    * Rework PlayerInfo::Die
    
     - Remove need for a private Die() method
     - Update callers of Die(bool) to use Die(int) and achieve the intended result
    
    * Eliminate need for BoardingShip()
    
     - Moved player death handling into ConversationPanel::Exit, where the relevant ship pointer is easily accessed
     - Added pointers to the ship responsible for the boarding mission / npc event into relevant Mission and MissionAction methods, to eliminate need for PlayerInfo::BoardingShip
    
    * Showing BoardingPanel requires a disabled-yet-not-destroyed ship
    
    * Add check for capture / bribery of a boarding ShipEvent's target via a mission NPC's completion conversation
    
     - A more robust method to only offer the BoardingPanel resulting from ConversationPanel::Exit (i.e. no display of sequential BoardingPanels, and obeying the conversation's exit node) should be pursued separately
    Show visited mission systems (#3567)
    
    * Expose Visited<T> for use by the map
    
     - Const set<T> references to Waypoints() & Stopovers()
    
    * Draw a "faint" ring around visited waypoints
    Remove erroneous semicolon
    
    @jostephd https://github.com/endless-sky/endless-sky/pull/3615#discussion_r165728476
    Update erase usage
    
     - Variant toRemove only needs to be initialized once
     - set.erase first performs a count, and erase(<key>) returns 1 if <key> was erased
     - System.links & System.neighbor used to be vectors, but were made sets in 4fa19f67a4f4e559f08b769bf7596ff52005eff2, and set supports erase(<key>)
    Move PickSystem, PickPlanet from Mission to LocationFilter
    
     - Support choosing a random system or planet from a given LocationFilter outside of just mission instantiation
    Added constructors that call Load() on a data element, so construction and Load() don't have to be done in two separate steps.
    Cleaned up the "on enter" code a bit, and used it to improve the April Fools mission.
    Mission "on enter" can define a LocationFilter to pick the system(s) (#3141)
    
    * "on enter" actions can define a LocationFilter to pick the system
    
     - Example:
        on enter
          "system filter"
            government "Syndicate"
          dialog "You're now in Syndicate space!"
    
     - Without a system filter, any `on enter` actions that do not name a system will apply as soon as the player takes off (current behavior).
     - Each mission only supports a single `on enter` action without a named system (current behavior).
    
    * Use a function to convert a distance filter into a near filter
    
      - This avoids needing to save the mission origin in the MissionAction
      - Use of both "near <system>" and "distance" filters in the same `on enter` action is not supported - only the "near" filter will be kept.
      - Fixed an extra indentation level with the saved LocationFilter.
    
    * Forward compatibility for changes to LocationFilter class variables
    
    * Support multiple "generic" on enter MissionActions instead of only one
    
     - "specific" on enter: explicitly identifies the system
     - "generic" on enter: uses a LocationFilter to match a set of systems (offering in the first one that matches), or has no filter and offers immediately on launch
     - All "specific" on enter actions are checked before any "generic" on enter actions for a given system
     - Only one on enter action will be triggered per jump.
     - Each "generic" on enter is checked in the order of definition in the mission datafile
    
    * Update SetOrigin() usage
    
     - Reformat checks to avoid copying if nothing is to be done
     - Pass a system to MissionAction::Instantiate to guarantee a System * is available, even for assisting/boarding missions.
    
    * Use didEnter to track both generic and specific "on enter" actions
    Fixed the last commit so dominated planets will not fine you (instead of dominated planets fining you even if you have mission clearance).
    Refactor PlayerInfo::Land (#3208)
    
    * Refactor on-land mission checks and fining into own functions
    
     - Mission updates based on landing are now in StepMissions()
     - Planets for which mission clearance has been given (or if infiltrating) will not fine the player
    
    * Track visited waypoints & stopovers
    
     - This enables remembering that a mission gave clearance to a particular planet
     - This enables remembering which systems needed to be visited for a mission
    
    * Remove deprecated government assignment in PlayerInfo::Load
    
     - ships.back()->SetGovernment was added to PlayerInfo::Load() in 0783cd49ea5204bab9f126723a61833d25c5118f
     - Ship::Load() sets the ship's government to be the player's government as of ef41ef02021bd43954ba25631922dae6c928a8a9
     - ApplyChanges() (called at the end of PlayerInfo::Load()) performs ship->SetGovernment for all the player's ships, in case the player's swizzle has been altered in an event
    
    * Use a better format for serializing visited stopovers and waypoints
    
    * Fix bug related to handling of the player's death
    
     - If killed due to an atrocity outfit while landed, the player's ship list needs to be cleared (otherwise the player can simply press 'D' and take off again).
    Avoid creating a passenger reference when 0 passengers are transferred (#3367)
    
    * Outfit, Commodity, and Passenger transfers require a non-zero amount
    
     - Otherwise a reference to the item is created, even though the quantity is 0.
       - This reference would cause mission failure for destroyed ships even if they were not carrying mission cargo/passengers.
    
    * Sanity check for non-zero passenger count
    Add text substitution for <waypoints> in missions
    Made it so illegality and stealth is an attribute of the mission as a whole (applying to both cargo and passengers) rather than just an attribute of the cargo.
    An error is now shown if a mission has no name or if the same mission is "loaded" from two different definitions.
    Since passengers can no longer be "plundered," there's no need to check for that when a player's ship is boarded.
    Made it so pirates won't steal passengers when plundering. Also cleaned up and simplified the CargoHold transfer code.
    Prevent matching LocationFilters to planets that have no system
    
     For planets which are only fully defined after certain GameEvents, it is possible that the game attempts to obtain the government of their system. Since these planets are not in a system yet, this would generate a segfault due to an unhandled nullptr use.
    enhancement: Visual feedback for outfit transfer missions while in-flight (#3075)
    
    * Remove deprecated declaration
    
     - 'SetDefaultPayment' was removed in f9d82bd3e1a3f0bbe0b5346a20f30bb09795393c
    
    * Provide visual feedback of ready-to-complete missions with gifts
    
     - Update the MapPanel::IsSatisfied function to use a new Mission::IsSatisfied function that checks whether or not the mission's requirements for completion are met.
     - Restore the "are required gifts in present ships cargo?" check, with guards that prevent counting cargo that is out-of-system (e.g. would not be present if the player landed immediately).
    
    * Simplify return expression
    Fail missions if mission cargo/passengers are stolen from the player
    
     - While in-flight, any failed missions are no longer colored as though they are able to be completed.
    Avoid use-after-free memory error in endless-sky#3049
    Fix dereferenced actions.end() iterator
    Made it so the conditions for a mission won't be updated by a mission action that cannot be performed. Also added an explanatory comment in CanBeDone().
    DistanceMap now takes total fuel cost into account (hyperdrive vs. scram drive) instead of assuming jump cost is always twice the hyperspace cost.
    Simplified the code in some places where map::count(key) or map::erase(key) could be used alone without calling map::find() first.
    When min() or max() takes mismatching types as inputs, where possible, switched to specifying the output type directly rather than casting both inputs to match.
    Revert "Made it so that all mission actions can display conversations or dialogs."
    
    This reverts commit 181603905497b28c403864258d4bd2935b0fba90.
    Made it so that all mission actions can display conversations or dialogs.
    Cleaned up some unnecessary namespace prefixes.
    Getting scanned can now optionally fail any mission with illegal cargo (#1584)
    
    * Getting scanned now fails any mission that has you carrying illegal cargo
    
    * Made the new "fail if scanned" behavior optional, triggered by a new "stealth" attribute you can set in a mission
    
    * Removed debugging code that sneaked into the last commit
    
    * Now the "illegal" mission attribute can include a string that will get displayed when you're scanned
    
    * Tweaked the standard fine message to be less verbose when overridden with a custom message
    
    * Write out the illegal cargo fine message correctly
    
    * Added a tab to the message so the illegal cargo messages don't all need to start with a tab in order to get the paragraphs formatted correctly
    Preserve the "failed" state of a mission in the saved file, in case it has failed but has not yet been removed from the mission list when the game is saved.
    When checking travel distance in a mission, iterate over the waypoints and stopovers in the "result" object so it includes random destinations chosen via a filter.
    For calculating mission payments, the total travel distance will now include waypoints and stopovers.
    Made it possible to use location filters to pick random waypoint systems.
    Fixed a crash when a "fail" action removed the next mission after it from the player's mission list.
    Made it possible for any mission action, including "on enter", to change the player's reputation with a government.
    Made it possible for NPCs to specify that they start in the mission's destination system.
    Refactoring: switching to using "!set.count(...)" instead of "set.find(...) == set.end()" because it's more concise, just as efficient, and seems clearer.
    Fixed handling of mission deadline multipliers.
    Fixed a bug when a conversation is shown in response to an "enter" event.
    Fixed a few places where invisible missions could display messages when they "fail."
    Added support for "on enter" mission conditions that trigger the moment you leave the current planet.
    Add "depart"="defer+leave" and allow "on defer" callbacks.
    Added some checks for planets which are defined but not placed in any system. Previously, these were crashing the game.
    Added the "ships: <category>" conditions back in, and changed where the "net worth" condition is updated.
    Mission "stopovers" now fail if there is an NPC you must accompany and it is not present.
    Added support for special commodity classes, just to be used for random cargo in missions that is not one of the basic commodity types.
    Added warning messages whenever a line of a data file or saved game is unrecognized.
    Added support for "stopover" planets specified by a mission.
    It's now possible to specify deadlines in (base + multiplier * jumps) form.
    Made it possible to change the "multiplier" for payment calculations.
    Modified Mission to save the "to offer" conditions.
    Added a "net worth" condition variable (limited to +-2B to avoid overflow errors).
    Fixed a bug where a mission could be offered even if its "to offer" conditions had ceased to be satisfied due to another mission changing the conditions.
    If you interrupt a conversation or mission dialog to load a different game, that mission is no longer automatically declined.
    "Unique" missions now get added to the start of your mission list, instead of the end.
    Added the ability to flag missions as "minor," meaning they are only offered if no other missions are being offered. This is for "flavor" missions that have no impact on the plot, like the courier and transport missions.
    'your' before 'passengers' is removed
    
    Everywhere <passengers> is used in the project, there is already a 'your', usually reading "You wish your your passenger..."
    Added a "fail" keyword in mission actions that can be used to immediately fail the current mission or any other.
    Added brackets and indentation for every BeginChild()...EndChild() pair to improve the code readability (compared to indentation with no brackets, or no indentation at all).
    Fixed the bug where you could complete a mission even if an escort carrying some of the cargo for it was not in system.
    Added a new mission type, "assisting," so that missions that appear when boarding a hostile ship can be distinguished from missions that appear when repairing a friendly one.
    Added basic support for random missions that get offered when you board a ship.
    Made it possible once more to accept jobs if you can make room for them by selling ordinary cargo or firing non-essential crew, but now it pops up a dialog asking if you want to do that rather than assuming you do and letting your cargo "capacity" go negative.
    Added an "autosave" mission option, that saves an "autosave" file when the mission is accepted. This flag should be set only for missions that are in the main story line and represent a "safe" place to revert to if the player gets stuck or fails a mission.
    Fixed the XCode project to handle the new source file locations.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Modified the cargo space check in Mission so that only special missions can force you to seel commodities to accept them.
    Added a new capability for missions: a "blocked" message, which is displayed in a dialog if all other requirements are met but you do not have enough bunks or cargo space free to take on a special mission. Fixes #5.
    Removed superfluous std:: prefixes.
    Code cleanup: always referring to the player's ship as "flagship."
    Fixed a few bugs I found while testing.
    Made it possible to accept a mission if you don't have bunks or cargo space free, but can make it free by firing crew or selling ordinary trade goods. (This is to reduce the chance of a mission string being cut off because the player has no space for the next mission.)
    Added support for mission actions to be performed when you enter a system (showing a dialog or conversation, setting flags, etc.).
    Fixed a potential segfault in Mission if a mission references a non-existent planet.
    Fixed some places where a Random::Int() call might result in a divide by zero.
    Added convenience functions to Planet and Government to simplify the syntax for querying political state. Also fixed a few busgs in my recent Command and AI changes.
    Added a "priority" mission flag that blocks others from being offered if that one is available. (For example, to keep side missions from being offered while you are on the intro thread.)
    Wrapped up the terraforming mission, and added some humanitarian missions to pirate worlds.
    Added a new "infiltrating" mission mode where you can land on a planet, but cannot access any services there or refuel your ship.
    Added a "waypoint" mission tag that can be used to mark any number of systems that you must visit (but not requiring that you land on any planets in those systems).
    Modified random missions to not pick destinations that are uninhabited or have no spaceport.
    Added two more Free Worlds missions, and fixed a bug in the new "to fail" mission condition.
    Added a "to fail" condition for missions. It specifies the conditions under which a mission will fail if active. Missions are not offered if they fail any of the "to fail" conditions, so those conditions need not be duplicated in "to offer".
    Added support for illegal cargo and outfit checks when you are scanned or when you land on a planet.
    Added an "on visit" mission action that is triggered when you reach the destination and the mission conditions are not satisfied.
    Added "evade" and "accompany" requirements for NPCs.
    Modified the mission's "cearance" tag to allow specifying a location filter, same as the "source" and "destination" tags.
    Implemented wormholes. (Any planet that shows up in multiple systems is a wormhole.)
    Gave conversation the ability to modify conditions or to branch based on existing conditions.
    Fixed a bug where accepting a job in the job board was calling the "accept mission" callback.
    Got "invisible" missions working: being accepted automatically, and not showing up in any mission lists or displays.
    Fix a few bugs found while testing tutorial missions.
    Implemented mission "clearance" for planets you can't otherwise land on. Also added "<mission>: active" condition flags.
    Finished up the intro missions for all three ship types. Also fixed a few bugs I found in the process, and added some new text substitutions.
    Started working on intro missions, and also fixed the handling of "defer" and of the special ship type flags.
    Got planetary defense missions working (three different templates for the Core, North, and South).
    Modified the location filtering logic in Mission to not pick random planets that you are not allowed to land on.
    Fixed a bug where missions were failing if your ship was scanned, instead of only failing if the ship is destroyed.
    Added support for missions altering your reputation. Also set the default government of NPCs to "Escort", because ships with no government may behave strangely.
    Got NPC support working. I've tested NPCs you must "save" or "kill", but a few kinks are left to work out (like having NPCs start at a different location than yours).
    Implemented mission deadlines, and added various cargo missions (normal, bulk, and rush).
    Increased the default mission payments, and also implemented "special" conditions reporting the number of ships of each type that you have, so a mission might only be offered, say, if you have a transport or a warship.
    Switched so "job" missions do not automatically have unlimited repeats. Also tweaked some of the job descriptions.
    Added a "name" tag to missions so that you can use unique IDs for each but still have them show up with the same name (e.g. for different templates of the same job).
    Added support for job "templates" in the mission data. To start out with, added a variety of passenger missions, some of which only happen if you are on certain kinds of planets.
    Modified the new mission implementation so that missions can also be offered as soon as you land (e.g. to handle continuation of existing missions), and used that to create a "first contact" conversation that is shown the first time you land on any Quarg world.
    Switched over to the new Mission implementation. There are still some aspects that are not working yet (like, the job board).
    Modified missions to not randomly be placed on planets you do not have permission to land on.
    Added a "probability" for special missions, so they are not always offered.
    Added tracking of "condition" flags that missions can use to determine whether their requirements are satisfied. Used those flags to ensure that each mission is only offered once. (Eventually, there may be some that are allowed to repeat, though).
    Added support for basic "special missions," offered in the Spaceport on certain planets.
    Updated all the functions that save data to use the new DataWriter class (to ensure proper indentation, quoting, etc.).
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Added support for passenger-carrying missions.
    Got CargoHold to support mission-specific cargo.
    Added a "mission panel" that lets you select missions from a job board. It doesn't support scrolling or mouse clicks, yet.
    Added a basic Mission class, with functions to generate cargo and passenger missions.
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Update the line width for the final word in a wrapped text string
    
     - If CENTER or RIGHT aligning, the extra space in the line erroneously included the width of the final word, resulting in the addition of too much space when adjusting word positions
    Replacing asserts with reasonable fall-back behavior.
    Restored the old height reported by wrapped text (including a paragraph break after) because taking that out messed up conversation formatting.
    Added "tooltips" that pop up to explain ship and outfit attributes in the shop panels and the ship info panel.
    0.9.2 updates
    Fix "Member 'XXX' was not initialized in this constructor " compiler
    warnings for WrappedText, ShipyardPanel, Interface, and Font.
    Add parentheses around condition in main.cpp per compiler warning
    suggestion.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Modified WrappedText so its default copy and assignment are valid (by avoiding manual memory allocation).
    Switched to always using the Color class instead of passing around RGBA float arrays.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    feat(mechanics): Enable creating Commands from datafile text (#4997)
    
    Doesn't add the bindings for actually reading in & then using the commands, but is one step in that direction.
    
    * Add command loading and sending it to the Engine
    This is part of the automatic-testing PR endless-sky#4370 and could also be used for endless-sky#4720.
    
    * Replaced if/else chain in Command loading by lookup map.
    Also fixed a bug that caused commands to be skipped during loading.
    
    * Add command forwarding through MainPanel.
    
    * Apply suggestions from code review
    Print the relevant token when an unrecognized command is found.
    fix: Add override to AllowFastForward() where appropriate to remove compiler warnings (#5194)
    feat: Switch off fast-forward if the player is not in flight (#5148)
    
    This is so that the behavior of fast-forward is consistent between panels (#5038). This also gives the player extra time to react when coming out of a boarding panel or on enter conversation by turning fast-forward off if it was on when entering the panel.
    
    The map panel and player info panel are exceptions to this, as they are panels that are commonly accessed and can be accessed at any time while in flight.
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    More help for confused new players.
    Implement a ShipEvent queue to allow delayed ShipEvent handling (#3371)
    
    * Implement a ShipEvent queue to allow delayed ShipEvent handling
    
     - Handling ShipEvents can result in new UI elements.
     - Only one UI element should be created and displayed to the player at a time (i.e. do not display a dialog and the BoardingPanel simultaneously).
     - Callbacks from one UI element from a given ShipEvent may result in status changes that should influence other UI elements created from the same ShipEvent (e.g. if a mission conversation offered upon boarding an NPC results in that NPC's destruction, the player should not be able to plunder said NPC).
     - Fixes a preexisting issue where the boarding panel would be offered if the player dies in a conversation.
    
    * Switch from GetUI()->IsTop(this) to GetUI()->Top().get() == this
    
     - IsTop() checks only drawn panels, not panels that are requested but not yet drawn.
    Only respond to drag selection if the click that started it occurred when no other panel was active.
    Made it possible to right click a ship or location to tell your escorts to follow a friendly ship, attack a hostile ship, or move to a location.
    Made it possible to click escort icons to select them.
    Made it possible to zoom the view in or out (via the scroll wheel or the +/- keys) without changing the UI zoom.
    Fixed some things that Google's cpplint warns about (mostly, constructors that should be marked explicit).
    Made Panel::Click() able to distinguish double-clicks, so that the info panel can switch to a ship only if it is double-clicked, not just clicked twice in a row.
    Fixed some variables that don't need to be mutable now that Panel::Draw() is not expected to be const.
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    You are no longer able to hail a ship while you or they are cloaked, and your target display no longer shows the facing angle of cloaked ships.
    Added support for clicking on ships and planets to select them.
    Made some changes to improve thread safety.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Fixed a bug in how handoff of outfits in missions is done, and added a few more Free Worlds missions.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Added Republic "licenses" for each ship, and added a fine that is assessed if you are scanned by the Republic and are flying an unlicensed ship.
    Modified the new mission implementation so that missions can also be offered as soon as you land (e.g. to handle continuation of existing missions), and used that to create a "first contact" conversation that is shown the first time you land on any Quarg world.
    Switched over to the new Mission implementation. There are still some aspects that are not working yet (like, the job board).
    Replaced the old, very limited "callback" class with function pointers that can be given any method name.
    Added a "hailing" panel, which displays communications with a ship or planet. (But, I have not implemented the actual messages yet.)
    Modified the AI to have it scan any other ships in system, if the ship has a scanner equipped. If one of the player's ships is scanned, a message is displayed.
    Added support for basic "special missions," offered in the Spaceport on certain planets.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Refactored to consistently call the PlayerInfo, "player", and the player's flagship, "flagship".
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Added GPL statements to all source code files and added a license.txt file.
    Got "New Pilot" working, including visiting the shipyard and picking out an initial ship.
    Updated how the UI panels are handled to allow the main menu to be called up regardless of what the game state is.
    Added display of the current pilot's information in the main menu.
    Switched to using the key mappings loaded from the preferences (so, they are user customizable).
    Added a preferences panel for customizing the key controls. (They are not yet used, though.)
    Uploaded all the files from my local repository to Google Code.
    fix: ensure move construct/assign closes own file
    
    An initialized `File` was never assigned to another initialized `File`, but if it had been done, would have leaked a file.
    
     - Rename the path variables in `Files` to avoid ambiguity introduced in C++17 with `std::data`
    style: Remove unexpected trailing whitespace
    
    The only trailing whitespace should be "continuation tabs"
    fix: Call fclose on the error log
    Removing some unnecessary std:: prefixes.
    Fixed a bug in Files::RecursiveList() on Windows (because it turns out Windows doesn't use 0 to indicate an invalid handle).
    Made the "previous" snapshots update by moving the files, not copying them, so their timestamps will not be changed.
    In the Load / Save panel, snapshots are now sorted by when the file was saved (in user time, not game time).
    Fixing the brace style.
    Fix segfault on problematic paths
    
    Previously, the return value of SDL_Get{Base,Pref}Path was not checked
    for validity which could result in segmentation faults if one of several
    oddities occurred (e.g. creation of the saves directory failed for lack
    of writing permissions on ~/.config on Linux). Now we exit somewhat more
    cleanly and provide a useful error message in this scenario.
    
    Fixes #1283.
    Windows saved games and preferences will now use Windows-style line endings.
    Code cleanup.
    Errors are now logged to "errors.txt" in the config directory, in addition to being printed to STDERR.
    Moved the File wrapper from ImageBuffer into a separate class.
    Fix style
    Fix memory leak on creating the plugins folder
    Fixed resource search for OS X w/out XCode.
    
    If you're running from the commandline, ../Resources doesn't exist; this
    changes the search path to search ../Resources, then ../, then the current
    directory.
    Typo fixes.
    Fixed some places where fclose() can be called on a null file pointer.
    Added some missing calls to fclose().
    Paths with non-ASCII characters should now be working on Windows.
    Moved all file IO into the Files class, so it will be easy to add support for UTF16 paths under Windows.
    The Mac app is now able to load the resources from the folder containing the .app.
    The program will now create the local "plugins" directory if it does not exist, so it is clear to the user where plugins are supposed to go.
    Switched to always using forward slash as a directory separator, even on Windows. This fixes the bug where the sounds were not being loaded on Windows.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Handle data on FreeBSD and DragonFly just like on Linux
    
    Actually, I'd use this as generic case instead of "Unsupported operating
    system" branch
    Added Files::Name() for getting the filename from a path (with Unix or Windows separators).
    Added support for plugins, placed either in the "resources" directory or the "config" directory.
    Updated Files::Init() to support Windows.
    Updated Files to use SDL's built-in functions for getting the resource path and preferences (e.g. saved games) path.
    Fixed some issues I found while trying to create a Debian package.
    Made some changes to support Windows porting, assuming MinGW will be used to provide basic POSIX functionality.
    Got basic audio support working. I do need to track down better sounds, or at least balance the audio levels better between them.
    Added an error check for if the resource directories are missing.
    Files: modified so the local directory takes precedence as the resource directory if it contains the expected files (data, images, keys.txt, etc.).
    Fixed the auto-generated copyright statements in the new "Files" class.
    Added a "Files" class which abstracts out filesystem operations (including finding the resource and config path for each OS). That allows me to remove the boost dependency, which will make porting easier.
    fix(bug): Save the variant name of gifted ships (#5403)
    feat(mechanics): The sounds and effects of a drive can now be customized (#5044)
    feat(mechanics): player can deploy/recall individual carried ships (#4719)
    
    * Deploy and recall only selected by the player instead of all ships.
    
    Implemented by a deploy variable per (carried) ship instead of a single global variable.
    
    Tested (OK):
    - Deploy and recall for flagship
    - Deploy of only subset of ships
    - Deploy and recall for escort
    - Deploy of only subset of ships (together with escort)
    - Deploy and recall of AI controlled ships
    - Return (and not deploying) damaged fighters
    - Recall of fighters (to escort) if player is out of system
    
    * Process review comment.
    
    * Remove some unneeded whitespace
    
    * Process review comments.
    
    - Issue deploy commands to the fleet when no deployable ships are selected.
    - Removed never displayed message.
    - Renamed IsLaunching to HasDeployments for clarity.
    - Renamed fighter to "carried ship" for consistency.
    
    Tested that deploy with non-deployable ships selected will deploy for the full fleet.
    
    * refactor: Update methods
    
     - rename & reoder Ship class methods
       - apply only to Player ships, but "IsDeploying" sounds applicable to all ships
     - update `IssueDeploy`
       - move conditions into shared lambda
       - group ships to deploy and ships to recall, to limit iteration passes
       - restore silent behavior of pressing D when no ships can deploy/recall
    feat(mechanics): Allow arbitrary bay facing angles (#4749)
    
    * Allow bays under any angle
    
    Bay is now internally using an angle instead of a facing (index) variable.
    Standard angles like 90 degrees and 180 degrees are still written out as right and back.
    Non-standard angles are read and written using the angle child keyword.
    
    * Added tag-reading as discussed for format as shared with endless-sky#4539.
    
    * Apply suggestions from code review
    
    Apply suggested review-changes.
    
    * Processed review comments
    
    - Simplified Save by just saving the angle if it is non-zero instead of converting back to keywords left/right/under.
    - Write out bay.side on separate line according to spec as discussed with Amazinite.
    
    * Update to ES whitespace style.
    refactor(mechanics): Change bay type identification to categories (#4391)
    
    * Change bay type identification to categories
    
    Change the ways bay types are identified from boolean to the category of
    the ship that is to be carried in the bay.
    
    This will make it easier to add new bay types in the future and/or to
    load bay types from data files instead of having them hardcoded.
    
    Signed-off-by: Peter van der Meer <peter.vd.meer@gmail.com>
    
    * Fixed some style issues
    
    * Processed review comments
    
    * Update code merged from master to categories.
    
    * Process first set of review comments
    
    - Renamed forCategory variable to category.
    - Added function to Ship to get total number of bays for a category.
    - Use total instead of free bays for display in-flight.
    - Changed launch-speed-check to use automation attribute of carried ship.
    - Added check if bay is a known type during loading.
    - Restored the Engine::Place per-category carrier selection for NPCs.
    
    Retest after rework:
    - Performed minimal load / flight / reload test with carriers, fighters and drones.
    
    * Processed review comments
    
    - Added use of const string references
    - Fixed some style issues
    - Use continue instead of intending a large block
    - Update code to make automated ships launch faster than crewed ships again
    
    * style: minor touchups
    feat(mechanics): New enginepoint types and support for over/under and angled engine flares (#4539)
    fix(mechanics): Count all ships which cannot depart the system
    
    ...even if they have a different warning displayed.
    
    While Ship::FlightCheck now reports all warnings, only the first warning is displayed in the Shipyard / Outfitter.
    (Before displaying e.g. up to 3 warning tooltips, we must determine their relative priorities and verify the checked condition parameters make sense due to the branching changes)
    
    Closes endless-sky#4949
    feat(escorts): Allow "next fuel cost" calculation to use parent's destination (#4417)
    
    Escorts with more than one hyperdrive type can now determine if they have the necessary amount of fuel before their parent begins leaving the system, meaning:
     - their escort icons will not display red unless they actually need more fuel
     - they will no longer engage hostiles while the player is holding J
    Add a "battery too small to fire weapon" flight check warning (#4177)
    
    that triggers if at least one weapon can't be fired because the ship's maximum available energy is too low
    Support launch effects for carried ships when departing from their carrier (#3602)
    
    * Support "launch effect" child node for carrier bays
    
     - Allows specifying multiple effects, and a count of how many of each, e.g.
        "launch effect" "door sparks" 5
        "launch effect" "decompression"
    
    * Provide a fallback effect for certain bay types
    
    For non-automaton ships, any internal (i.e. pressurized) bays will use a default effect if none were specified
    
    * Remove unnecessary includes
    
     - Angle & Point includes were needed before `Visual` took the responsibility for placement of effects
    Modified the HUD to show the hull level at which a ship will be disabled.
    Consider target's heat level when picking targets (#3493)
    
    * Allow Ship::Heat() to exceed 1.
    
    * Deprioritize highly overheated targets
    
    * Display excess heat as a segmented overlay bar
    Added support for hull "leak" effects, when a dying ship is venting atmosphere / flames / blood / whatever.
    Update Ship::Health calculation
    
     - function can return <0 (e.g. hull damaged beyond minimum hull) so updated comments
     - considers both "pooled" health (hull + shields) and hull-only health
     - pooled health considers disruption damage to shields
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Added support for shipyard "thumbnail" images for ships.
    Enabled text replacements in ship hails (#3716). (#3728)
    
    * Enabled text replacements in ship hails (#3716).
    
    This change allows these text replacements to be used in ship hail strings:
    - <first>, <last>
    - <ship>
    - <system>
    - <npc>
    - <date>, <day>
    
    * Fixed variable name.
    Renamed "isCarried" to "canBeCarried" for clarity.
    Refactor some AI functions (#3531)
    
    * Refactor strength-updating code into private method
    
    * Use roster to limit scope of strength update loop
    
    * Split swarming behavior to own method
    
     - Extended logic checks to ensure swarmCount entries get decremented when the targeting ship lands
     - Increased "rendezvous velocity" from 0 to .5 max speed, in the direction of the target
    
    * Bugfix for swarming behavior
    
     - Reordering of personality behaviors after autofiring meant that swarming ships (which have no or a non-hostile target) would always get their target cleared, outside of a code block that knows to manage swarmCount
     - Only ships which entered the player's system would get swarmed, and only for a short period of time (before swarmCount could "fill up" the new ships' quota of swarming assistants).
     - Restores effectively pacifist behavior of `personality swarming` that was observed from v0.9.1 to v0.9.7
    
    * Move Hyperspacing condition check
    
     - FindTarget and Autofire make no sense for hyperspacing ships as they cannot fire - Ship::Fire requires the ship to not be hyperspacing.
       - Ships can still aim turrets at other ships
     - Ships which are launching or landing similarly do not need to decide how to move
       - Updated the DoSwarm exit check so that a landing ship does not ever take a new target
       (a ship decides to land on one frame, and then begins decreasing zoom on the next, so Swarming ships that choose to land will still release their target)
     - Remove "IsTargetable" from checks that should be available to ships which are not in the player's system (such as assisting).
       - IsTargetable references the `forget` parameter, which is only 0 if the ship is in the player's system.
    
    * Cache a ship's carried status during FinishLoading
    
    * Update carried ship handling block
    
     - Rescope is drone/is fighter check to only carried ships
     - If a fighter had to choose a bayless parent (because none of its allies could carry it), only check for a new parent every ~5s rather than every step.
     - Removed duplicated BaysFree check (CanCarry performs it too).
    
    * Retreating applies to fighters and other NPCs at the same "health"
    
    * Update FindTarget
    
     - Changed ambiguous 'isPlayerEscort' to 'isYours' since it is referring only to a player-owned ship and not also NPCs with personality escort
     - Used existing variables if they had already been defined (person, system)
     - Rescoped attribute.Get calls to only be done if they are relevant, rather than for every ship.
     - If an NPC isn't targeting a hostile ship (e.g. it is going to scan its target), then it doesn't need to consider retreating.
    
    * Remove duplicated FindTarget call
    
     - FindTarget is called prior to entering DoSurveillance, so if the ship has no combat target, seeking one again on the same frame will not yield different results
    
    * Update DoSurveillance
    
     - Rescope attribute calls into only the branches which need them
     - Performing an "atmosphere scan" of a station was probably unintended
     - Drop unnecessary "hyperdrive" check
       - JumpsRemaining is 0 if the ship has no hyperspace ability, thus only checking for a jump drive is sufficient
    Added constructors that call Load() on a data element, so construction and Load() don't have to be done in two separate steps.
    Weapon blast strength decreases with distance from blast (#3276)
    
    * Weapon blast strength decreases with distance from blast
    
     - To mitigate the damage falloff for weapons with a trigger radius, a multiplier based on the ratio of trigger and blast radius is used.
     - For a weapon with 0 trigger radius, the damage will range from 100% at the center, to 25% at the edge of the blast radius.
    
    * Use worst-case distance estimate rather than exact computation
    Several related changes to fighters: they can now run their own systems when being carried (to generate energy, repair, etc.). Their heat level is now indepenedent of the ship carrying them. Fighters now retreat for repairs if badly damaged, and launch only when mostly repaired. And, repair priority is given to the least damaged fighter.
    Change Outfit * to Weapon *, warn on incorrect armament specifications
    
     - Swapped the Outfit pointers to Weapon pointers for the associated ship firing methods
     - Print warning messages for incorrect armament specifications:
       - guns positioned in turret hardpoints
       - turrets positioned in gun hardpoints
       - non-weapons positioned in any hardpoint.
    Fixing a bug where FinishLoading() is called more than once if an NPC ship is copied from a stock ship.
    Propagate the "WAIT" command down to escorts of escorts, to synchronize jumping.
    Added a new "Visual" class that represents just the information we need to track for an Effect once it's instantiated. Using it in place of Effect saves a string copy and a good deal of memory for each active visual effect.
    Switched to using a vector for Projectiles and Effects, to reduce memory allocations and improve cache performance.
    Refactored Engine::CalculateStep(), splitting each set of calculations into a separate function to improve clarity and to open a path for possibly multi-threading the most expensive calculations.
    Ship Variant definitions can add attributes without needing to fully specify all other base attributes (#2959)
    
    * Ship variants can add individual attributes
    
    via the "add attributes" node. All base attributes can still be overridden by specifying the "attributes" node.
    
    * Store "add attributes" values in baseAttributes
    
    Ship::Save() only writes out baseAttributes.Attributes(), i.e. the values from "add attributes" were being lost when loading instantiated missions from a save file.
    
    * NPCs created from a partial node description use the desired name
    
    * Use same "add" key/value syntax as other classes
    
     - The only key currently supported is "attributes"
    
    * Revert key-value-valueIndex changes
    
    * Use supported ship specification method in Syndicate Target Practice
    
    * NPC::Load prints warning, skips invalid use of ship specification
    
     - individual ships should not be fully specified in a mission's NPC definition - only `ship "model/variant" "name"`, or use of custom fleets.
    
    * Fix typo and touch up warning message
    Simple logic to determine if missile boat AI will reverse or turn around
    
    Use reverse thrust if its capability exceeds:
     - the target's ability to close the distance
     - the current closing rate of the target
     - our forward thrust capability
    
    Otherwise, turn around to use the better thrusters.
    The "flight checks" now show up as warning icons and only block you if you try to take off with an unusable ship.
    Use a wormhole's actual position instead of the previous day's position (#3085)
    
    * Use a wormhole's actual position instead of the previous day's position
    
     - Ship::Place accepts optional 4th argument, bool default = true
       - if true, perform full initialization of the ship
       - if false, only alter the ship's position, velocity, and angle
     - Updated Engine::EnterSystem to determine exactly when the player travels via wormhole and set the flagship position accordingly.
       - Fixed invalid travel plan checks when the next system is in Neighbors() but the flagship has no jump drive.
    
    * Revert Ship::Place changes to use new function, Ship::SetPosition
    Derelict ships are now able to repair, once you have boarded them to reactivate them.
    If a ship is captured, make its escorts independent.
    Ships can have a custom "swizzle" property (#2629)
    
    * Ships can have a custom "swizzle" property
    
    The nomenclature is the word "swizzle" (quotes unnecessary) followed by
    a number between 0 and 8, at the same level of indentation as sprite or
    attributes. Use 0 for no swizzling of the original sprite.
    
    * Defined key in Ship::Load
    
    * Custom swizzle corrections
    
    Invalid ship swizzle values will be ignored. Also fixed a missing
    if(government) check in Ship::Place, introduced in previous commit.
    Made it so a ship that is forced to decloak by running out of fuel or energy can't initiate cloaking again until it has decloaked fully. (Also laying the groundwork for cloak-disrupting weapons in the future.)
    Made it possible for outfits to require licenses to buy them.
    Added an indicator that shows the progress of your cargo and outfit scans of a ship.
    Made it possible to specify how much "jump fuel" a drive consumes.
    Refactoring to avoid any places in the code that make assumptions about how much fuel is used by various jump modes.
    Made it possible to specify a ship's "noun," so the game can refer to it as a "creature" instead of a "ship." Also added an "inscrutable" attribute that makes it impossible for you to scan a ship's outfits.
    smart refuelling (#2367)
    
    * smart refuelling
    
    * smart refuelling
    
    * smart refuelling
    
    * smart refuelling
    
    * remove compiler warning @endless-sky
    
    * fix > to >=
    
    bug fix for the case of fuel capacity = JumpFuel(), thx @endless-sky
    Renamed Ship::GetTargetPlanet() to GetTargetStellar() to make it clear that it refers to a StellarObject, not a Planet.
    Fixed code that assumed that the "heat dissipation" of a ship is never altered.
    Replaced the "Mass Expansion" with an "Outfit Expansion" that adds the same outfit space but also interferes with your ship's cooling if you install a lot of them.
    Made "drag" apply to acceleration from weapons as well as engines, so you can't get going infinitely fast using a weapon with a firing force.
    Cleaned up how the player's destination planet is stored, and added a message telling you if you have any mission destinations in each system you jump to.
    Added NPC AI support for harvesting flotsam. (For miners, or for distracting pirates by dumping cargo.)
    Added a "mining" personality that circles around searching for minable asteroids, then destroys them. (It doesn't know how to harvest the flotsam yet, though.)
    Scanning a ship now takes time. How long it takes, and how far away the scanner works from, now depend on "speed" and "power" attributes.
    Added the ability to specify plural forms of outfit and ship model names.
    Switched the outfitter's flight check to using the ship's official idle heat calculation that accounts for active cooling.
    Added a Chip::ChassisCost() convenience function.
    Made it possible to adjust the zoom factor of each engine hardpoint.
    Starting to go through the code to add more comments and refactor things that are unclear or could cause errors down the road.
    Made it possible for fighter bays to specify both a facing direction, and a side (over or under). Also made it possible for bays to face backward.
    Added a common base class for Ships, Projectiles, Asteroids, Effects, Flotsam, StellarObjects, etc. This is the first step in creating a generic collision detection framework that can deal with different object types.
    0.9.2 updates
    Switched to a way of optimizing the cloaking lookup that will still allow invisible ships to fire weapons.
    Added an initial range check to speed up the anti-missile code.
    Ships can no longer pick up "flotsam" when unable to "act" (cloaked, landing, etc.) or in other systems.
    Added "shield heat" and "hull heat" attributes, and made it so a carrier can repair hull of its fighters in addition to recharging shields.
    Cargo dumped by ships can now be picked up by others. Also, destroyed ships sometimes leave cargo behind.
    Fixed a crash that happened if the player tricked the game into letting them take off in an automaton (by converting it back into one right before taking off).
    Added an "uncapturable" ship attribute, and modified the boarding panel to handle it.
    Ship::IsThrusting() now reports whether thrust is actually being applied, not just whether the thrust command is set.
    Made it possible for fighter bays to launch sideways, and added a retrofitted Bulk Freighter carrying a dozen drones.
    Added two new damage types: disruption (which makes shields porous) and slowing.
    Added support for fighter bays where the fighter it is carrying is visible, drawn either below or above the ship.
    Added a "final explode" ship attribute for effects that are created in the ship's final explosion.
    Made "self destruct" allowed to have a probability between 0 and 1. It is checked once before you are allowed to plunder, and again before you are allowed to capture.
    Regularizing the shipyard and outfitter maps code to make them easier to merge.
    Clear the hyperspace jump status when a ship is "placed," in case it was mid-jump when you landed.
    Added a "cargo box" effect that is shown when you dump cargo.
    Added support for unique "persons" who can show up in any system.
    Ship licenses are no longer government specific and no longer saved in the player info (because they now only control what you can buy, not what you can own).
    Added a new mission type, "assisting," so that missions that appear when boarding a hostile ship can be distinguished from missions that appear when repairing a friendly one.
    Made it possible for engine flares and afterburner effects to "stack," so that if you have multiple engines both their flares will be shown instead of only a random one of them.
    Added a "never disabled" attribute for ships that should be impossible to board or capture.
    Added an "ion cannon" weapon. I'll need a lot of testing to make sure it's balanced - it makes defeating a single isolated foe too easy, but also does much less damage than other weapons of comparable size.
    Added "firing" animations for some of the missile weapons.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Removed some TODOs that have already been fixed.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Eliminated, as much as possible, interface code that uses weak_ptr instead of shared_ptr.
    Reordering the functions in PlayerInfo and Ship and renaming some of the poorly named ones.
    Updating the behavior of fighters so they pick a new carrier if their parent is full, and so that when you capture a fighter it will be assigned to any ship in your fleet that can hold it (starting with your flagship).
    Cleaned up the AI considerably, especially the logic for when a ship acts independently vs. as an escort. Also made various player commands (depoly, cloak, fight, gather, hold) apply only to ships owned by the player, not all escorts.
    Switched to hard-coded fuel amounts for hyper, scram, and jump drives. Also made handling of ships with multiple drives work correctly, e.g. a ship with both a hyper and a jump drive will use its hyperdrive when possible to save fuel.
    Modified the ship explosions to spread outward, so they look more explosive.
    Switched to another equation for crew bonuses: captain gets two shares, families of dead crew members each get one.
    Fixed a bug in the new code for handling inheritance for ship variants.
    Added support for specifying a ship variant by only specifying what has changed from the original and cannot be inferred, i.e. the list of outfits, plus the order of the guns and turrets if it matters.
    Switched to having the hail messages be a property of each government rather than individual ships or fleets (so that mission-related ships will use them, too, to add a bit of flavor in battles).
    Added support for mission actions to be performed when you enter a system (showing a dialog or conversation, setting flags, etc.).
    Eliminated the Controllable class by using Command for its command bitfield, and moving its target functions into Ship. This means there is now just a single representation of commands, instead of three different ones for different purposes.
    Fixed various small issues I found during testing.
    Switched to just letting events change the swizzle color of the "Escort" government, instead of setting a special "swizzle" variable in the player info.
    Added a cloaking device. Have not yet written the AI strategy for when to engage it, though.
    Fixed a bug where if you captured and sold an NPC, it would continue to follow you as a free escort until the mission ended.
    Made several improvements to NPCs: an "uninterested" personality that does not follow the player's flagship, and improved handling of carriers. Also modified the outfit scanner to also tell you what fighters a ship is carrying.
    Fixed an uninitialized variable bug in Ship.
    Your fleet now responds to "hold position," "gather at my ship," and "fight my target" commands.
    Renamed "ShipName" to "Phrase" since it is also used for random hail messages.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Added Republic "licenses" for each ship, and added a fine that is assessed if you are scanned by the Republic and are flying an unlicensed ship.
    Added a "swizzle" condition that controls the color of your ships (and that is saved even if it is zero).
    Modified hyperspacing so that escorts keep the same position they have relative to their parent unless the distance is higher than 1000 pixels.
    Made it possible to request assistance from friendly ships and have them repair or refuel you.
    Made it possible to bribe hostile ships to leave you alone. More principled captains will refuse your money, however.
    Added occasional "hail" messages that other ships send to you, with some sort of "flavor" text that gives you a sense of what their government is like.
    Modified the AI to have it scan any other ships in system, if the ship has a scanner equipped. If one of the player's ships is scanned, a message is displayed.
    Don’t magically refuel stranded escorts on save and reload. (So, save fuel for each ship; shift-TARGET to target an escort, allow boarding a non-disabled escort, equalize fuel on boarding an ally)
    Got permanent reputation changes working, with Ship::TakeDamage now returning a combination of PROVOKE, DISABLE, and DESTROY depending on the projectile's effect.
    Switched to having the AI track which ships have boarded which, so Ship doesn't have to (since only AI cared about knowing that, anyways).
    Added a "heat dissipation" attribute that varies from ship to ship, so that big ships will have more trouble radiating away heat.
    Added a rudimentary ship info panel.
    Fixed some glitches in the handling of capturing, and added the capability to "repair" damaged ships of your own by boarding them. Also tweaked the escort AI to not engage enemies if badly damaged.
    Added a display of the current status of all your escorts (shields, hull, heat, energy, fuel).
    Modified the AI so that once it has boarded and plundered a ship, it will destroy that ship (or go off and fight any live targets nearby, then come back and destroy it later) rather than just hanging up forever repeatedly boarding it.
    Updated all the functions that save data to use the new DataWriter class (to ensure proper indentation, quoting, etc.).
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Added a Random::Real() function, and refactored to use Random everywhere (because old-fashioned rand() is considered deprecated now.)
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Got fighters to dock with their carriers again once they are recalled.
    Got fighters in fleets working.
    Got carrying and launching of fighters working (but not buying or recalling them, yet).
    If the ship specification file says to put certain weapons in certain hardpoints, got Ship to honor that instead of reassigning them whenever the file is loaded.
    refactoring: for clarity, replaced Ship::IsDisabled() and IsFullyDisabled() with IsOverheated() and IsDisabled().
    Modified the boarding process to take time, and to rotate the boarding ship to line up with its victim, so that it looks more "realistic" when other ships do it.
    Added a "personality" class representing whether a fleet of ships does things like plundering opponents (which pirates now do).
    Got capturing working, at least for your flagship. Other ships can't capture other ships yet.
    Got crews and salaries working (including erratic ship behavior if missing crew).
    Added a "boarding" dialog that lets you choose what commodities or equipment to plunder from a disabled ship. (Capture is not yet implemented.)
    Added a rudimentary ship-boarding AI.
    Added a CargoHold class to handle everything pertaining to cargo (including determining when you have the capacity for it).
    Added a distinction between "fully disabled" ships (hull below the minimum), and others (i.e. temporarily disabled due to overheating). Modified the AI to ignore fully disabled ships.
    Switched to storing cargo in PlayerInfo when landed, then divvying it up among your ships when taking off. This makes it possible to use the cargo capacity of all your ships, and avoids needing to sell cargo when selling ships.
    Fixed the segfault-on-explode bug (for real, this time).
    Added GPL statements to all source code files and added a license.txt file.
    Added saving of the game (every time you leave a planet, or if you quit while on a planet).
    Updated how the UI panels are handled to allow the main menu to be called up regardless of what the game state is.
    Added saving capability to the Ship class.
    Limited the maximum velocity a ship can attain from impacts.
    Updated the AI to fire each individual weapon on a ship only if it can hit something.
    Added an Armament clas for tracking weapon logic (mounting points, reloading, streaming, etc.).
    Modified projectiles hitting ships or missiles to be handled by Engine, rather than by Ship or Projectile itself.
    Added a very rudimentary combat AI.
    Added support for "shipyard" and "outfitter" attributes on planets.
    Uploaded all the files from my local repository to Google Code.
    feat: Uninhabited planets do not fine by default (#4512)
    
    * Uninhabited planets now never fine the player
    
    * Error fix
    
    * Removed security 0 from Ruin
    
    * Added a flag to check if the security of an uninhabited planet was changed
    
    * Spacing
    
    * Name changes
    
    * Improved readability
    Refactor the check for planet accessibility
    
     - Pre-strip the "requires: " prefix from required attributes
     - Simplify test for "do we even need to look at the ship's attributes?"
    Treat "shipyard" and "outfitter" as other game data
    
     - Add reference checking to "shipyard" and "outfitter" items
        - Warn if "seen" (e.g. in a planet definition or as outfit cargo) but not given any initial items
     - Export Shipyards collection from GameData (to match Outfitters)
     - Update Planet::Load to use Shipyards() and Outfitters() in lieu of passed parameters
    Number formatting is now limited to one decimal place, which is enough for all current attributes. Also added a separate formatting function for numbers of credits.
    Support multiple fleet types in planet tributes
    
     - Use an vector of stock fleet definitions to allow customized tribute fights
     - Increase difficulty of all tribute fleets by changing the personality from "staying heroic nemesis" to "staying heroic marked unconstrained"
       - Tribute fleets will now only target the player's ships, and will be ignored by all other ships even if they would be "natural" enemies.
     - Increase visibility of tribute fleets in busy systems by applying the "target" personality
     - Fix a bug in bounds checking on "fleet" nodes in the specification syntax
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Planet: Precalculate IsInhabited
    
    This is called very frequently from the map screen, so calculate it in
    advance.
    Refactor MapPanel's Draw___ methods (#3379)
    
    * Refactor MapPanel's Draw___ methods
    
     - Improve mod coloring support via expanded use of interfaces.txt:
       - Switch the minimap from a hardcoded position to an Interface
       - Use travel plan colors from interfaces.txt
       - Use System name, link colors from interfaces.txt
     - Move the increment of `step` from MissionPanel to the base MapPanel
     - Add comments to DrawMiniMap, DrawTravelPlan, and DrawWormholes
     - Used and updated MapPanel constants
     - Draw the Travel Plan after wormholes, since wormholes by default have non-zero alpha.
       - This removes the small, dark purple centerline from drawn travel plan routes that use wormholes
     - Adds function to Planet class to export all systems in which it can be found
     - Do not show the "planet description" box if the planet in question is a wormhole.
     - Change DrawWormholes iteration scheme from "every StellarObject in every System" to "check only planets"
       - Fixes bug in DrawWormholes caused when two wormholes reference the same system (i.e. Cardea), which cause the wormhole link to be drawn over a previous directional arrow
    
    * Move the mini-map position specifier into the "hud" interface
    Also adding a check for planets with no system to Planet::GetGovernment(), just for the sake of defensive programming.
    Enhancement: Consider next refuel stop when traveling to parent ship's system (#2997)
    
    * Convenience function to know if a planet has fuel for a ship
    
    * Consider the next refuel system when an escort is traveling to the parent.
    
    An escort was only checking if it had enough fuel to reach the next
    system, so it could get stuck when it had to travel through two
    consecutive systems where it couldn't refuel.
    
    Now it checks how much fuel is required to reach the next refuel system
    on the travel route to decide if it should refuel in the current system.
    
    * Clarify code and stop checking when we go over fuel capacity
    
    * Clarify comment.
    
    * Rework required fuel check.
    
    DistanceMap is already tallying fuel so choose the best route.
    Planets now have three automatic attributes ("spaceport", "shipyard", and "outfitter") that are active if and only if each of those services is available there.
    Code cleanup: "static" is redundant inside a C++11 anonymous namespace.
    Made even just demanding tribute an atrocity, so it can't be used to cheat fleet battle missions.
    Dominating a planet now always causes that planet's government to be hostile, no matter how much they liked you before. (Demanding tribute but failing to dominate the planet does not, just in case the player does it by accident or to see what will happen.)
    Fixed the "clear" keyword not working on planet data since the add / remove keywords were added.
    Fixing a mistake in my previous commit.
    For planet attributes, shipyards, and outfitters, made it possible to remove a single item or to add an item without clearing the previous value.
    Made it so certain planets will only show up as something you can land on if your ship has certain attributes.
    Fixed a case where escorts wouldn't pathfind through wormholes.
    Made it possible for each planet and system to specify the "music" to play when you are there.
    Refactoring: switching to using "!set.count(...)" instead of "set.find(...) == set.end()" because it's more concise, just as efficient, and seems clearer.
    Allow planets to have a government defined.
    
    Still uses the system's government as the default value for planets that
    do not define "government", which is still all of them (and should
    continue to be almost all of them in the future).
    Added warning messages whenever a line of a data file or saved game is unrecognized.
    Made it possible to hail planets with no spaceport, but other signs of habitation (i.e. defense fleets or reputation requirements).
    Fixed a bug where visiting wormholes was not remembered, and also where wormhole arrows could be drawn under the route.
    When dominating a planet, ships you capture now count as destroyed instead of as active defenders.
    Fixed some pathfinding issues with wormholes with more than two exits.
    Wormholes now always return "???" as their name, to simplify all the code that displays planet names.
    Made it possible to "clear" a planet's spaceport, to turn an inhabited world into an uninhabited one.
    Added support for a "wormhole" planet type.
    Added missing return characters
    Uncommented function that was commented out for testing.
    Added function to return a "noun" for a "planet" object, by default this is the word "planet," but can be either "station" or "moon" if the attributes include one of those two terms.
    Added support for planetary domination. (But, it won't do anything until defense fleets have been set for each planet.)
    Made it so that planets marked with the "uninhabited" attribute will not offer trading, jobs, or a bank.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Modified the sales, shipyards, and outfitters to append new items by default instead of resetting each time Load() is called. To reset you must use a "clear" keyword. This allows different events to add items for sale without each having to know what all the others have added.
    Added convenience functions to Planet and Government to simplify the syntax for querying political state. Also fixed a few busgs in my recent Command and AI changes.
    Got game events to correctly handle updating each planet's record of what systems it is in, so that game events can create or destroy wormhole entrances in addition to normal planets.
    Modified Planet's parsing of descriptions so that it will add indentation to all but the first paragraph if no indentation is included in the data file.
    Added support for game events modifying planets. Now, events are fully functional (except that missions are not yet able to trigger them).
    Added support (in a kludgy way) for game events that modify what ships or outfits are available in a given sale set.
    Implemented wormholes. (Any planet that shows up in multiple systems is a wormhole.)
    Got "security levels" specified for each planet. So far the only crime you can be caught committing is having an unlicensed ship.
    Modified Planet to parse the "attributes" list.
    Planets no longer allow you to land if you have a negative reputation with their government.
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Added Planet::GetSystem() so you can map any planet to the system containing it.
    Switched the outfitter to only selling outfits available on this planet or that you sold them. That required moving the flight check into the outfitter, so you don't sell your engines on a planet with none for you to buy.
    Added GPL statements to all source code files and added a license.txt file.
    Added support for "shipyard" and "outfitter" attributes on planets.
    Uploaded all the files from my local repository to Google Code.
    feat(graphics): Add comment with shader name (#4995)
    
    This makes it easier to debug compilation errors
    Modifying BatchShader to not rely on OpenGL being able to use pointers to vertex attributes in main memory.
    Renamed "attributes" to "in" variables for compatibility with more recent OpenGL versions.
    Batching the draw commands for projectiles and effects.
    feat(mechanics): Add a MissionAction node that enables giving the player a ship (#5302)
    
    * Allow ships to be gifted by missions
    
    * Change > to >=
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    
    * Commit for comment suggestions
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    
    * Fix bug and adjust comments
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    
    * Change code to have only one function `BuyShip`
    
    * Remove useless bool
    
    * Housekeeping
    
    * More housekeeping
    
    * Don't gift nonexistent ship models
    
    * Housekeeping
    
    * Fixed a double space
    
    * Changed syntax to `give ship <model> [<name>]`
    
    * Fixed missing semicolon
    
    * Whitespace fix
    
    * Change dialog to include the model of the ship
    
    * Change it so message appears only in log
    
    * Remove `A/An <noun>` for better english
    
    * Punctuation changes
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    feat(mechanics): Save collections in order by element name (#5333)
    
    * feat(saves): write collections in deterministic order when saving
    
    * refactor: simply methods via capture lambdas
    
     - No need to pass DW instance around
     - use more "using" declarations to simply method declarations
    
    * pr feedback + lambda styling
    
     - applied a more uniform style to lambda expressions
    feat(mechanics): Allow clearing the player's destination planet from code (#5254)
    
    This protects against nullpointer exceptions when TravelDestination is called with a null-pointer as planet.
    feat(mechanics): Allow mission NPCs to spawn or despawn based off of ConditionSets (#5161)
    refactor(mechanics): Change bay type identification to categories (#4391)
    
    * Change bay type identification to categories
    
    Change the ways bay types are identified from boolean to the category of
    the ship that is to be carried in the bay.
    
    This will make it easier to add new bay types in the future and/or to
    load bay types from data files instead of having them hardcoded.
    
    Signed-off-by: Peter van der Meer <peter.vd.meer@gmail.com>
    
    * Fixed some style issues
    
    * Processed review comments
    
    * Update code merged from master to categories.
    
    * Process first set of review comments
    
    - Renamed forCategory variable to category.
    - Added function to Ship to get total number of bays for a category.
    - Use total instead of free bays for display in-flight.
    - Changed launch-speed-check to use automation attribute of carried ship.
    - Added check if bay is a known type during loading.
    - Restored the Engine::Place per-category carrier selection for NPCs.
    
    Retest after rework:
    - Performed minimal load / flight / reload test with carriers, fighters and drones.
    
    * Processed review comments
    
    - Added use of const string references
    - Fixed some style issues
    - Use continue instead of intending a large block
    - Update code to make automated ships launch faster than crewed ships again
    
    * style: minor touchups
    Skip jobs if the planet is not inhabited, not only if the planet does not have a spaceport
    
    A planet is considered inhabited if it was a spaceport, or if it was a required reputation, or if it has a defense fleet, and if it lacks the uninhabited attribute. If a planet is inhabited, then it will show the jobs board when landed. But, jobs are not generated if no spaceport is present.
    
    Instead check to see if the planet is inhabited to decide whether to skip generating jobs.
    fix(mechanics): Count all ships which cannot depart the system
    
    ...even if they have a different warning displayed.
    
    While Ship::FlightCheck now reports all warnings, only the first warning is displayed in the Shipyard / Outfitter.
    (Before displaying e.g. up to 3 warning tooltips, we must determine their relative priorities and verify the checked condition parameters make sense due to the branching changes)
    
    Closes endless-sky#4949
    feat(mechanics): Add flagship System and Planet to player conditions (#4915)
    
    * Add flagship System and Planet to player conditions
    
    This will help if we want to do asserts on flagship locations during automatic testing.
    
    * Moved range clearing to lambda function and use TrueName for planet.
    
    Processed review-feedback.
    feat(mechanics): Update the automatic conditions daily (#4917)
    
    Updating the automatic conditions here help to ensure that the conditions
    are up-to-date in relation to the current day/state of the game.
    fix(ci): Call CheckReferences even when no save exists
    
    Otherwise, deferred / referenced content would not have been checked. Such content includes government / system / planet names in LocationFilters.
    feat: If not carried, fighters and drones are launched instead of sold (#4388)
    
    Co-authored-by: tehhowch
    fix(style): Fixed the code style of the most recent commit
    
    Use tabs, not spaces. Curly braces go on their own lines.
    fix: add missing null check for flagship conditions (#4751)
    feat(ux): Limit pop-ups when multiple missions have "on visit" dialogs (#4592)
    
    * Have on visit dialogs be handled by PlayerInfo instead of by MissionAction so that players won't be swamped by on visit dialogs if they hoard jobs
    * Show separate dialogs for unique missions and remind the player of deadlines
    * Simplified code and changed GetActions() to GetAction(Trigger)
    * Changed the wording for the deadline reminder
    * Count missions even if they don't have an on visit dialog, but still only display a dialog if one of the counted missions has one
    * Simplified code.
    * Ignore invisible missions.
    * Don't care about deadlines. (The player should already know that information.)
    * Don't show extra dialog if you only have one on visit.
    * Changed the wording of the extra dialog to mention other unfinished missions, not the total.
    feat(conditions): Add flagship crew info to computed conditions (#4294)
    
    * Add flagship crew info to conditions. Partially implements endless-sky#4286
    Creates the reserved condition names
      "flagship crew"
      "flagship required crew"
      "flagship bunks"
    
    These "autoconditions" can now be used in missions' "to offer", "to complete", and other ConditionSets to reference the player's current crew, required crew, and total number of installed bunks on their flagship.
    refactor(AI): Improve reparenting of carried ships
    
    If starting out-of-system, or if the parent ship had no free bays, player-owned fighters could still behave as independent ships rather than escorts.
    Refactored the existing "find a parent" block to simplify the logic.
    refactor: Remove copies identified by OSX CI build
    fix: Specify the `std::max` overload to use
    feat: Implement maintenance and operating cost attributes  (#4596)
    
    * Added a maintenance cost outfit attribute
    
    * Maintenance costs will now show in the bank panel
    
    * Allow overdue maintenance to be paid off
    
    * Properly size the max rows if you have overdue charges but no crew or maintenance
    
    * Simplified output
    
    * Added an operating costs attributes
    
    * Overdue maintenance costs now impact credit score
    
    * Pay maintenance costs after crew salaries
    
    * Include the maintenance costs of in cargo outfits
    
    * Comment correction
    
    * Clean up
    
    * Code simplification
    
    * Check for > 0 credits instead of non-zero credits for the two crazy people who give themselves negative credits
    
    * Check in cargo outfits when landed and prevent net negative maintenance costs
    
    * Prevent negative costs for each ship and each outfit in cargo instead of preventing a total net negative.
    feat: Uninhabited planets do not fine by default (#4512)
    
    * Uninhabited planets now never fine the player
    
    * Error fix
    
    * Removed security 0 from Ruin
    
    * Added a flag to check if the security of an uninhabited planet was changed
    
    * Spacing
    
    * Name changes
    
    * Improved readability
    Allow restriction of scanning / fining by governments (#3187)
    
    * Governments store a filter describing where they enforce laws
    
      - The player can be fined or scanned in any system or planet that matches one of the enforcement zones.
      - If no zones are defined, then the government has universal jurisdiction
    
    * Only ships or planets with enforcement authority perform scans
    Reorder some includes to match style (#4430)
    Remove extra power-of-two
    Fix possible overflows for high-income players
    Use 64-bit int for PlayerInfo::conditions
    
    thus allowing rather large conditions to be serialized.
    
    This is particularly useful for financial conditions. No change to the combat rating limit of 2b is planned.
    Ships depart from their previously-specified planet (#4111)
    
    * Allow special ships to define a planet to depart from
    * Parked ships remember the planet they were parked on
       - As in `TakeOff` code, parked == disabled: no cargo transfer, and no need to recharge.
         (Parking can only be done when landed, so this will have already been done for any parked ships.)
       - When loading the player's save, only supply a planet for in-system ships that do not have one.
    
    * Only set a ship's planet if it doesn't have one
     - PlayerInfo::Land is called as a part of game startup
       - Ships unparked will not jump between in-system planets due to save reloading
    
    * Use Fleet::Place for generic in-space positioning
     - Remove effectively duplicated code from Engine
     - Any ship that is spawned in flight in the player's system is not over the reference planet unless it is taking off
    Place NPCs from boarding missions while in-flight
    
     - Expose a pointer to the recently-accepted boarding mission
     - Move "Place" code for NPCs to public method
     - Check for an active boarding mission in SpawnFleets
    Check if the picked boarding/assisting mission has space before offering
    
     - Use Mission::HasSpace(ship) rather than check in MainPanel::StepEvents
     - Update blocked mission handling to use the proper mission list
     - Use correct cargo / bunk numbers for "Blocked" messages if boarding
     - Set proper autoconditions when boarding
    Number formatting is now limited to one decimal place, which is enough for all current attributes. Also added a separate formatting function for numbers of credits.
    NPC "completion" / MissionAction conversations can kill the player and/or NPC (#3376)
    
    * Call ConversationPanel with a pointer to the relevant ship
    
     - Allows destroying the pointed ship depending on the conversation outcome.
     - If the player is killed, the pointed ship should survive, and no BoardingPanel should be displayed.
     - Supply the ship from NPC::Do, to enable destroying the NPC via LAUNCH, DEPART, and FLEE conversation endings.
     - Include a boarding check to prevent an NPC block with a non-boarding completion requirement (e.g. `npc evade`) from displaying a BoardingPanel after the conversation ends.
    
    * Add response handling for non-"on offer" conversations
    
     - Updated PlayerInfo::BasicCallback:
       - attached it to:
         - all NPC completion conversations
           - If actually boarding the NPC, set it as the boarding ship.
       - The player is perhaps not landed: in-flight death implies:
         - capture of the flagship by the ship it was boarding (`die` when boarding)
         - crew mutiny and defection (`die` when not boarding)
         - the destruction of the ship. (`explode`)
     - Added the Conversation::EXPLODE response, based on the keyword `explode`
     - Updated the Ship::WasCaptured code to not over-transfer crew, for the case where the player dies to a conversation offered in-flight and has plenty of crew already.
    
    * Rework PlayerInfo::Die
    
     - Remove need for a private Die() method
     - Update callers of Die(bool) to use Die(int) and achieve the intended result
    
    * Eliminate need for BoardingShip()
    
     - Moved player death handling into ConversationPanel::Exit, where the relevant ship pointer is easily accessed
     - Added pointers to the ship responsible for the boarding mission / npc event into relevant Mission and MissionAction methods, to eliminate need for PlayerInfo::BoardingShip
    
    * Showing BoardingPanel requires a disabled-yet-not-destroyed ship
    
    * Add check for capture / bribery of a boarding ShipEvent's target via a mission NPC's completion conversation
    
     - A more robust method to only offer the BoardingPanel resulting from ConversationPanel::Exit (i.e. no display of sequential BoardingPanels, and obeying the conversation's exit node) should be pursued separately
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Replace most gov->IsPlayer with ship->IsYours (#3600)
    
    * Use IsYours() when possible, rather than querying politics
    
    * Update "isYours" through Ship::WasCaptured
    
    * Set "personality escort" even if an NPC is using government "Escort"
    
     - Ensured all NPCs using the player government have it defined (i.e. always declare the government of the NPC)
     - Use government "Free Worlds" for Free Worlds ships
       - Parole missions / missions involving escorts when only the player has safety continue to use government "Escort"
    Added constructors that call Load() on a data element, so construction and Load() don't have to be done in two separate steps.
    Enable any mission conversation to require the player to launch
    
     - Adds a "BasicCallback" to enable conversations that come from non "on offer" conversations to force the player to depart the planet.
     - Guards setting "shouldLaunch" to true while in flight, as a boarding/assisting mission could otherwise set this and cause odd behavior on the next landing.
    Add missing reputation serialization to conversation ConditionSets
    
     - Fixes issue where changes to the stored government reputations were not reflected in the current political landscape when the changes were performed via conversation `apply` node.
    Fixed the last commit so dominated planets will not fine you (instead of dominated planets fining you even if you have mission clearance).
    Refactor PlayerInfo::Land (#3208)
    
    * Refactor on-land mission checks and fining into own functions
    
     - Mission updates based on landing are now in StepMissions()
     - Planets for which mission clearance has been given (or if infiltrating) will not fine the player
    
    * Track visited waypoints & stopovers
    
     - This enables remembering that a mission gave clearance to a particular planet
     - This enables remembering which systems needed to be visited for a mission
    
    * Remove deprecated government assignment in PlayerInfo::Load
    
     - ships.back()->SetGovernment was added to PlayerInfo::Load() in 0783cd49ea5204bab9f126723a61833d25c5118f
     - Ship::Load() sets the ship's government to be the player's government as of ef41ef02021bd43954ba25631922dae6c928a8a9
     - ApplyChanges() (called at the end of PlayerInfo::Load()) performs ship->SetGovernment for all the player's ships, in case the player's swizzle has been altered in an event
    
    * Use a better format for serializing visited stopovers and waypoints
    
    * Fix bug related to handling of the player's death
    
     - If killed due to an atrocity outfit while landed, the player's ship list needs to be cleared (otherwise the player can simply press 'D' and take off again).
    Boarding mission cargo should go into the player's flagship, not the PlayerInfo cargo hold.
    Removing some unnecessary std:: prefixes.
    Switched to a more readable way of querying the player's debt amounts.
    Create player conditions for mortgages, fines, back pay, and credit score (#3164)
    
    * Add summary methods to Account and update Account-based autoconditions
    
     - Return a count of mortgages and fines in the account.
     - Return the total owed, broken into mortgages and fines.
    
    Update account-based autoconditions
    
     New conditions for
      - # of active mortgages
      - # of active fines
      - value of active mortgages
      - value of active fines
      - value of unpaid salaries
      - player's credit score
    
    * Remove autoconditions of the number of fines/mortgages
     - The total amount is a much more useful metric than the number of each
    Potential error fixes from @AskePit.
    Making sure no invalid iterators are created in PlayerInfo::ReorderShips(), because OS X may complain about that even if they are never dereferenced.
    Ctrl-Shift-Arrow key moves selected ships on PlayerInfoPanel (#3229)
    
    * Ctrl+Shift+ Up/Down arrow key moves selected ships on PlayerInfoPanel
    
    * Use shift direction to allow dragging to the end position
    Remove deprecated bribe action
    
     - Check was added in 03a9a089df3e9440e784604de0c80e8365a447be, when the fine action did not check if the player was freshly loaded.
     - Check was deprecated by 2866bcf1c65abd90db07ffb7e470c2f73bf9485f
    Made it possible for the start conditions to include the player owning one or more ships.
    Added support for special "persons" with multiple ships. The "person" can regenerate all its ships unless you kill the flagship.
    Made it so pirates won't steal passengers when plundering. Also cleaned up and simplified the CargoHold transfer code.
    If you quit while in the new pilot conversation, a blank pilot is no longer created.
    Only rehire extra crew when the player has a flagship.
    
    Fixes crash when you create a new player with the preference
    "Rehire extra crew when lost" enabled.
    Support 'visit' & 'visit planet' in events
    
     - Adds ability for a game event to give the player knowledge of a system or planet.
     - Visit actions occur after any 'unvisit' actions in the same event
     - Update the structure of GameEvent::Load
    Added new "auto-conditions" for cargo attractiveness, armament deterrence, and pirate attraction.
    Create an auto condition for your credit balance (#2479)
    
    * Create an auto condition for your credit balance
    
    This is parallel to the "net worth" auto condition, and allows missions
    to require you have >=, <, etc. a certain credit balance. This is
    necessary for negative payment missions (missions where you pay a bribe,
    etc.) to be handled correctly if you can't afford it. Without this, they
    just don't appear. With this, you can create a mirror 'blocking' mission
    if you don't have enough money.
    
    * Removed negative limit to credits condition
    Add include missing from endless-sky#3087
    
     - courtesy of @comnom
    Store the flagship's desired crew level and try to recrew when landing (#3089)
    
    * Store the flagship's desired crew level and try to recrew when landing
    
    * Use file-only preference to control flagship rehiring
    
    * Add preference to panel, with clearer name
    
    * Alter setting of desired crew level
    
     - Set the desired crew level upon launching, rather than in HiringPanel
       - Ensures the player does not hire extra crew when landing after changing to a flagship with lower crew capacity.
     - Altered the displayed message as the rehired crew may be due to bunks once used in an automatically accepted mission.
    Convey raid fleet spawn likelihood via Player Info menu (#3087)
    
    * Move raid fleet attraction to PlayerInfo
    
    * Display raid fleet threat in PlayerInfoPanel
    
     - Roughly log-spaced tiers. The displayed number indicates the expected number of raid fleets per jump (if the system has a raid fleet).
     - If any raid fleets are spawned, a message is sent to the screen.
    
    * Display both cargo and strength components, textualize threat level
    
     - Shows each component of raid fleet attraction to the player
     - Gives a categorical rating of the number of raid fleets expected
    
    * Use likelihood of at least one raid as the threat indicator
    Fixed a bug with past-the-end iterators crashing the program when reordering ships in the fleet list on Mac OS X.
    fix loading a non-existent save from recent.txt
    Out-of-system escort tweaks (#3001)
    
    * Remote unparked Fighters/Drones are loaded into in-system carriers
    
     - Previously, unparking a carrier and its carried ships that are located in a non-player system would result in the carrier leaving its should-be escorts behind, because the escort assignment was never performed.
    
    * Recharge out-of-system escorts when landing/taking off
    Fixed some issues found by Clang's static analyzer.
    Derelict ships are now able to repair, once you have boarded them to reactivate them.
    Moved the actions that have to be done each time player.New() or player.Load() is called (resetting messages, reverting the game data, and then applying any changes) directly into those functions so they don't have to be called separately. (There was previously a bug where messages didn't reset if New() was called from the main menu.)
    In the map, clicking a planet in the current system will now set it as your flagship's landing target.
    Fixed daily weapon reloads also resetting turret angles.
    When taking off, make sure your flagship is not included in the escort selection.
    In the fleet list, made it possible to click and drag all the selected ships as a block, instead of having to reorder ships one by one.
    Ship group hotkeys now work in the shops.
    Prettify more credits displays with Format::Number (#2672)
    
    * Prettify more credits displays with Format::Number
    
    * Remove unnecessary variables in Account.cpp
    Added support for "special" log entries, containing whatever you know about a particular person, faction, etc.
    Added a helper function for the common task of splitting a string into paragraphs.
    Made the "previous" snapshots update by moving the files, not copying them, so their timestamps will not be changed.
    Reordered the entries in the saved game file to a more logical order (and fixed the fact that Load() listed them in a completely different order than Save()).
    Added a "logbook": mission actions can now have "log" entries that automatically get added to the logbook, to remind the player of where they are in the story and what quests they have completed.
    Reset weapon reload counters when a day passes in-game.
    Made it so an autopilot travel destination works even if the destination is a wormhole.
    Added checks for references to undefined data (systems, outfits, etc.).
    Handle the very unlikely case where a carrier is captured when it still has fighters aboard.
    Fixed extra, "hidden" crew members being counted on escorts in PlayerInfo::UpdateCargoCapacities().
    Switched from Planet::GetSystem() to Planet::IsInSystem() wherever possible, to support wormholes (which exist in more than one system).
    Don't show "on visit" messages in a freshly loaded game, because they were already shown when you first landed, before the game was saved.
    Simplified the code in some places where map::count(key) or map::erase(key) could be used alone without calling map::find() first.
    Auto-selling things you don't have space for now applies depreciation.
    Cleaned up how the player's destination planet is stored, and added a message telling you if you have any mission destinations in each system you jump to.
    Fixed a bug where saved games on planets created by events were treated as if the planet was undefined.
    Made sure that all "landing" missions have been offered before you take off from a planet.
    Made it possible for an event to mark a planet as unvisited without making the whole system unvisited.
    Made the "random" condition change every time it is tested, so it can be used in places other than "to offer" checks and can be used multiple times in one conversation with different results.
    Made it so automatic mission clearance, if granted, applies to stopovers as well as the destination.
    Made it so "visited," "harvested," "tribute," and "travel" tags left over in saved games from systems or planets that don't exist in the game data (e.g. because they were part of a plugin that was removed) are ignored rather than creating phantom objects.
    Auto conditions updated on landing before mission completion check
    
    Previously, the "on complete" check of a mission could check out-of-date
    auto conditions. Now, UpdateAutoConditions() is run directly before
    checking for missions that can be completed.
    Made it possible to assign number keys 0-9 to groups of escorts. (But, it's not possible to command them yet.)
    Made it possible to click escort icons to select them.
    Raised the maximum combat rating to 21, and capped it there to avoid overflow.
    Revert "Made it so that all mission actions can display conversations or dialogs."
    
    This reverts commit 181603905497b28c403864258d4bd2935b0fba90.
    Made it so that all mission actions can display conversations or dialogs.
    Made it so the map zoom level is remembered when you close the map. Also cleaned up some of the map code.
    The player info now remembers what categories are collapsed in the shipyard and outfitter and the corresponding map panels.
    Made it possible for each planet and system to specify the "music" to play when you are there.
    Compromise for fixing the exploit where you could buy and immediately sell a ship to get access to outfits it has that are not in stock here: that exploit is still blocked, but if you sell individual outfits off the ship they do become "in stock" in case selling them was a mistake.
    Fixed a bug where depreciation was not working for new pilots.
    The sale price of ships and outfits now depreciates over time. If you sell "used" outfits to an outfitter, they remain in stock to buy back (at the reduced price) until you leave the planet.
    Fixed bugs in the behavior of a stranded fighter when the player also has parked fighters.
    Update each system's list of its visible neighbors whenever a change to the game data alters the map.
    Added a "disown" button when viewing ship details while landed on a planet, for the rare cases where you want to disown a ship that you are unable to sell.
    Made it so the currently selected commodity or map coloring is remembered in the player info and is carried over to the trading panel if it is a commodity.
    Added fall-back code in case a saved game's current location no longer exists (e.g. it was a planet in a mod that has been uninstalled).
    add ship government update during ApplyChanges
    
    drones and fighters kept the swizzle they were initially loaded with until manually launched
    Fixed a crash when a "fail" action removed the next mission after it from the player's mission list.
    The map of outfit locations now also shows what resources you have mined in each system.
    Replacing "NULL" with "nullptr".
    Continuing code cleanup and commenting.
    fix unlanded fighters being sold on takeoff
    find first ~ instead of last during pilot load
    
    formatting of filePath with ~ in the names causing issues such as missing pilot info on load screen and pileup of ~ in snapshot names
    Made sure jobs marked "priority" can't block missions.
    Outfits that are "in stock" because you have sold them on a planet are now stored in the saved game so they will not disappear if you reload it. (But, they still disappear once you leave the planet.)
    Windows saved games and preferences will now use Windows-style line endings.
    re: https://github.com/endless-sky/endless-sky/issues/1209
    
    Allowed outfits that won't fit in your cargo holds during TakeOff to be sold off instead of being vaporized.
    0.9.2 updates
    Ships now recharge whatever they are able to recharge on their own, if they land on an uninhabited planet.
    Added backup saves in case the primary save is corrupted. New backups are saved only when the date changes.
    Made it possible for any mission action, including "on enter", to change the player's reputation with a government.
    NPCs that self-destruct are now properly counted as having been destroyed.
    Combat rating is now based on cost of the ship you disable (1 point per 500k credits) rather than crew, so that you get proper credit for killing powerful ships with no crew.
    Unvisited, unseen systems are now shown on the map if they are a stopover or waypoint for any visible mission.
    Unload all fighters on landing (even from disabled ships) so that no fighters will be saved with no system defined and end up "teleporting" to the current system when you reload the game.
    Fighters in other systems are no longer "unloaded" when you land.
    Fixed placement of planet labels when you first enter your ship.
    Added "day", "month", and "year" condition variables as an alternative way to script events that happen on a certain day.
    In the map detail panel, pressing "jump" now cycles the last jump on your path; Shift + "jump" locks in the last path and adds another, and delete removes one jump.
    Fixed a crash that happened if the player tricked the game into letting them take off in an automaton (by converting it back into one right before taking off).
    Refactoring: switching to using "!set.count(...)" instead of "set.find(...) == set.end()" because it's more concise, just as efficient, and seems clearer.
    Fixed a crash when loading a saved game that references a "person" that is not defined anywhere or has no ship definition.
    Fixed formatting of large credit amounts when reporting that you had to sell fighters or cargo that you could not hold.
    Don't sell off fighters that are in a different system, when the player leaves the planet.
    Fixed a bug in my fighter bay refactoring, where the game hngs if you take off with parked ships.
    Special "Persons" now count as having been destroyed if they are captured, in addition to if they are destroyed outright.
    Added support for fighter bays where the fighter it is carrying is visible, drawn either below or above the ship.
    Fixed a few places where invisible missions could display messages when they "fail."
    Made "automaton" ships never require crew, even if they have turrets.
    Add "depart"="defer+leave" and allow "on defer" callbacks.
    Allow planets to have a government defined.
    
    Still uses the system's government as the default value for planets that
    do not define "government", which is still all of them (and should
    continue to be almost all of them in the future).
    Made it impossible to park a disabled ship.
    Clearing the player's travel plan now also clears the flagship's destination system.
    Added a relatively simple but robust dynamic trade implementation.
    Set the planet for all ships that are able to land with the player, so the game counts them as being on the planet with you.
    Added some checks for planets which are defined but not placed in any system. Previously, these were crashing the game.
    Fixed a bug where reordering, selling, or buying ships would not change which one is your flagship.
    Fixed a bug in my previous change to the flagship code.
    Fixed the bug where you retain control of your flagship after it is captured.
    Added the "ships: <category>" conditions back in, and changed where the "net worth" condition is updated.
    Better handling for saved games that somehow do not include the player's planet or system.
    Added support for "stopover" planets specified by a mission.
    A job's "on accept" dialog, if any, will now be shown when you accept it.
    Fixed a bug where visiting wormholes was not remembered, and also where wormhole arrows could be drawn under the route.
    When you dump cargo, your cost basis is now adjusted properly and your loss is reported.
    Merged wormhole-links with new way of traversing wormholes that avoids links. Created function specifically for drawing wormholes, this way the wormholes can be guaranteed to be drawn under all other links. To appear as a wormhole link on the map, the wormhole *must* have a planet entry.
    The game will no longer save if it is somehow in a state where no planet or system is set, to avoid saving corrupted data.
    The flagship now takes first priority for passengers (so you're less likely to lose them) but last priority for cargo (so you have room for plunder) when loading up your ships.
    Dominated planets will no longer fine you for illegal outfits.
    Added sounds for takeoff, landing, and firing the nuke.
    Fixed a crash that could occur if missions that failed during take-off due to lack of space tried to display a dialog.
    Fighters in a different system from your flagship are now properly loaded onto any carrier in that system, rather than magically teleporting to the current system.
    More flagship fixes, to handle fighters higher in the list than your flagship.
    Fixed some more bugs that can occur when the first ship in your list is unsuitable to be your flagship.
    Your flagship now has lst priority for cargo instead of first, so that it will be free for any plunder you take.
    Added "cargo space" and "passenger space" mission conditions, and took out the ship type conditions.
    Moved all file IO into the Files class, so it will be easy to add support for UTF16 paths under Windows.
    Fixed some inconsistencies that can occur when selling your flagship if the next ship is parked or in another system.
    Fixed a bug where fighters you do not have space for do not get removed from your list when they are sold.
    My previous change to support losiong your ship through boarding combat broke the handling of having your ship die normally. Fixed that.
    Fixed a bug where if your ship is captured, you retain control of it.
    Fixed a bug where fines for illegal cargo or outfits could be assessed for ships other than the one that is scanned or for ships that are not even in-system.
    Fixed a bug that was introduced when I switched unique missions to being added to the start of the mission list.
    "Unique" missions now get added to the start of your mission list, instead of the end.
    Switched to using the presence of an icon to indicate that a weapon is secondary, so that there can be secondary weapons that have no fuel or ammo cost.
    When calculating salaries, you are no longer charged for extra crew on anything but your flagship. (A ships could be left with extra crew if it was your flagship at some point and you switched.)
    Added support for planetary domination. (But, it won't do anything until defense fleets have been set for each planet.)
    Fixed a potential out-of-bounds memory access bug due to deleting missions while iterating through the mission list.
    Added support for unique "persons" who can show up in any system.
    Fixed a bug where you still pay crew salaries for escorts that have been destroyed.
    Disabled escorts no longer get "stolen" if you abandon them and land on a planet. Also, disabled NPCs will no longer heal when you land.
    Fixed a bug where you could not select a secondary weapon if it was first in your outfits list.
    Switched to just using time() as the random number seed, because on Windows with MinGW it turns out that random_device() always returns the same value.
    Added the ability to flag missions as "minor," meaning they are only offered if no other missions are being offered. This is for "flavor" missions that have no impact on the plot, like the courier and transport missions.
    Your cargo capacity now only includes non-parked ships.
    Added a "fail" keyword in mission actions that can be used to immediately fail the current mission or any other.
    Took out the feature where hand-to-hand weapons are automatically transferred to your flagship, because it is confusing and not terribly useful.
    Fixed a bug where you could "park" a ship and then make it your flagship, so that when you depart the planet you have no ship.
    Fixed a bug where income from excess cargo was not calculated correctly if that cargo was plunder (i.e. its cost basis is zero).
    Cleaned up some unused sprites and functions, and fixed a few comment typos as well.
    Added a new mission type, "assisting," so that missions that appear when boarding a hostile ship can be distinguished from missions that appear when repairing a friendly one.
    Added basic support for random missions that get offered when you board a ship.
    Made it so that the player will never be fined by a planet's government immediately after loading a game (because they already were at risk for a fine when they first landed, before the game was saved).
    Added an "autosave" mission option, that saves an "autosave" file when the mission is accepted. This flag should be set only for missions that are in the main story line and represent a "safe" place to revert to if the player gets stuck or fails a mission.
    Added cost basis adjustments for commodities lost due to one of your ships being destroyed.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Did some code cleanup in PlayerInfo, and added a lot more comments, too.
    Fixed a possible divide-by-zero when recalculating cost bases after automatically selling excess cargo.
    Fixed an error in the cost basis calculations when selling cargo due to lack of space.
    Added tracking of your "cost basis" for commodities, so the trading panel can display the profit you will earn for selling them.
    Added a new capability for missions: a "blocked" message, which is displayed in a dialog if all other requirements are met but you do not have enough bunks or cargo space free to take on a special mission. Fixes #5.
    Include <random> for std::random_device on non-apple
    Removed superfluous std:: prefixes.
    Fixed the remaining two times where I rely on the length of Files::Saves().
    Fixed a bug on Windows where the path separator was changing to Unix mode when listing saved games.
    Modified the pathfinding when using the jump drive so that you don't have to have explored either endpoint, as long as you know it's there.
    Since most conditions have a value of 1, modified saving and loading of the player so that the 1 is assumed if it is left out.
    Reordering the functions in PlayerInfo and Ship and renaming some of the poorly named ones.
    Code cleanup: always referring to the player's ship as "flagship."
    Added support for reordering ships in your fleet in the shop side panel.
    Added support for "parking" ships (to avoid paying salaries for them), and for renaming ships.
    Cleaned up the AI considerably, especially the logic for when a ship acts independently vs. as an escort. Also made various player commands (depoly, cloak, fight, gather, hold) apply only to ships owned by the player, not all escorts.
    Fixed a bug where the planet positions weren't showing up in the map for a newly-created player.
    Did some significant optimization (at least 2x faster calculation times in big battles) by switching weapon attributes from a string to double map to a fixed set of values accessed by inlined functions, instead.
    Fixed the bug where you could buy a bunkroom, then hire extra crew, then sell the room and keep the crew.
    Added the ability to define the starting conditions (credits, mortgages, location, salaries, licenses, etc.) in the data files, to support "total conversion" mods.
    Made it possible to accept a mission if you don't have bunks or cargo space free, but can make it free by firing crew or selling ordinary trade goods. (This is to reduce the chance of a mission string being cut off because the player has no space for the next mission.)
    Fixed a bug where a ship doesn't refuel before you take off (if you changed its fuel capacity, say, by adding fuel pods.
    Outfits that you sell (including all outfits of any ship that you sell) now remain available for purchase until you leave the planet. This makes it easy to transfer a jump drive to a new ship for example.
    Added a way for a game event to "unvisit" a system - i.e. remove any knowledge you have of what is there, because it has changed in ways that you have no knowledge of.
    Added a "flee" conversation option, meaning: launch + decline.
    Added support for mission actions to be performed when you enter a system (showing a dialog or conversation, setting flags, etc.).
    Modified PlayerInfo to have saved games remember if you have "clearance" on the current planet, so that you won't suddenly lose access to a planet's services when you reload.
    Added convenience functions to Planet and Government to simplify the syntax for querying political state. Also fixed a few busgs in my recent Command and AI changes.
    Fixed a bug in how handoff of outfits in missions is done, and added a few more Free Worlds missions.
    Fixed some bugs in reordering ships or weapons in the info panel.
    Added a "priority" mission flag that blocks others from being offered if that one is available. (For example, to keep side missions from being offered while you are on the intro thread.)
    Modified the map display to show the name of any unexplored system that is a destination of a current or available mission (but no further information).
    Switched to just letting events change the swizzle color of the "Escort" government, instead of setting a special "swizzle" variable in the player info.
    Added a new "infiltrating" mission mode where you can land on a planet, but cannot access any services there or refuel your ship.
    Added a "waypoint" mission tag that can be used to mark any number of systems that you must visit (but not requiring that you land on any planets in those systems).
    Added a "to fail" condition for missions. It specifies the conditions under which a mission will fail if active. Missions are not offered if they fail any of the "to fail" conditions, so those conditions need not be duplicated in "to offer".
    Fixed a bug where if you captured and sold an NPC, it would continue to follow you as a free escort until the mission ended.
    Spell-checked the comments.
    Added a SavedGame class to be used in the load game panel rather than loading the full PlayerInfo for each game that is selected.
    Switched to allowing missions on planets with no spaceports, just not "jobs" from the job board.
    Fixed a bug where "jobs" were accessible on a planet with no job board if you clicked the "missions" button in the map view.
    Added the capability for game events to create or destroy hyperspace links.
    Began adding support for "Game Events" that alter the galaxy at a certain point in time. (So far all they do is modify condition flags, to test that they are indeed triggering on the proper day.)
    Made sure all the player's ships have a system assigned to them, and a planet as well if they are in the same system as the flagship.
    Made the player's "should launch" flag persist when the game is saved and reloaded, so that if a mission makes you launch, you will still launch after reloading.
    Got "invisible" missions working: being accepted automatically, and not showing up in any mission lists or displays.
    Fixed a bug where the date was not being updated when loading a saved game.
    Increased interest rates and ship prices to make the start of the game a bit more difficult, as well as to increase the range between mid-level and high-level ships.
    Added Republic "licenses" for each ship, and added a fine that is assessed if you are scanned by the Republic and are flying an unlicensed ship.
    Fix a few bugs found while testing tutorial missions.
    Added support for salaries (just by modifying the value of "salary: <name>" conditions, with any <name>).
    Added a "swizzle" condition that controls the color of your ships (and that is saved even if it is zero).
    Added proper handling for a dead player (through conversations, combat, or a failed attempt to capture a ship).
    Switched to only saving condition flags if they're nonzero, so all the leftover, zeroed "active" flags, etc. won't be saved.
    Finished up the intro missions for all three ship types. Also fixed a few bugs I found in the process, and added some new text substitutions.
    Added some more intro missions.
    Started working on intro missions, and also fixed the handling of "defer" and of the special ship type flags.
    Got planetary defense missions working (three different templates for the Core, North, and South).
    Added combat ratings, which are updated whenever you disable a ship (because that is the hard part) rather than when you kill it.
    Got NPC support working. I've tested NPCs you must "save" or "kill", but a few kinks are left to work out (like having NPCs start at a different location than yours).
    Implemented mission deadlines, and added various cargo missions (normal, bulk, and rush).
    Increased the default mission payments, and also implemented "special" conditions reporting the number of ships of each type that you have, so a mission might only be offered, say, if you have a transport or a warship.
    Switched so "job" missions do not automatically have unlimited repeats. Also tweaked some of the job descriptions.
    Added support for job "templates" in the mission data. To start out with, added a variety of passenger missions, some of which only happen if you are on certain kinds of planets.
    Modified the new mission implementation so that missions can also be offered as soon as you land (e.g. to handle continuation of existing missions), and used that to create a "first contact" conversation that is shown the first time you land on any Quarg world.
    Switched over to the new Mission implementation. There are still some aspects that are not working yet (like, the job board).
    Added a function to PlayerInfo to access the conditions map.
    Updated the Dialog class to allow "accept / decline mission" dialogs.
    Modified missions to not randomly be placed on planets you do not have permission to land on.
    Made the friendly / hostile map use different shades of blue and red depending on how bad your reputation is with a given government.
    Switched to 64-bit values for storing credit amounts (to avoid rolling over if you get 2 billion credits).
    All hand to hand weapons get transfered to your flagship now when you take off (because only your flagship can use them).
    Don’t magically refuel stranded escorts on save and reload. (So, save fuel for each ship; shift-TARGET to target an escort, allow boarding a non-disabled escort, equalize fuel on boarding an ally)
    Got audio working on Mac OS X (by just writing my own basic WAV reader, rather than trying to get ALUT working).
    Fixed a bug where new players were getting offered two sets of "jobs" in the job board (because they were generated twice).
    Got missions to properly handle stranded or destroyed ships causing the mission to be unable to finish.
    Gave the conversation panel an option to pop up a map showing a system highlighted, if the conversation is the introduction to a mission.
    Added tracking of "condition" flags that missions can use to determine whether their requirements are satisfied. Used those flags to ensure that each mission is only offered once. (Eventually, there may be some that are allowed to repeat, though).
    Added special missions to the map and the mission panel.
    Added code to save the player's reputations and apply them to the game data when reloading a saved game.
    Added a Politics class that can handle governments coming to the aid of allies, tracking the player's reputation in response to different actions, etc.
    Added support for basic "special missions," offered in the Spaceport on certain planets.
    Added code to assign new parent ships to "orphaned" drones and fighters.
    Added a player / fleet panel to the player info display. This includes the capability of reordering ships, including changing your flagship.
    Added a display of the current status of all your escorts (shields, hull, heat, energy, fuel).
    Updated the Mac OS X port to include the application icon and to copy the required libraries into the bundle.
    Added saving of your "travel plan."
    Updated all the functions that save data to use the new DataWriter class (to ensure proper indentation, quoting, etc.).
    Added Player::GetGovernment() so its name doesn't have to be hard-coded in many separate classes.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Fixed several glitches in the handling of missions (duplicates when reloading pilot, not moving passengers into your ship, allowing infinite passengers, formatting / display issues).
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Added support for passenger-carrying missions.
    Added mission completion messages and payment (still only for cargo, not passengers).
    Got CargoHold to support mission-specific cargo.
    Added a "mission panel" that lets you select missions from a job board. It doesn't support scrolling or mouse clicks, yet.
    Fixed some glitches in display of drone and fighter data.
    Got carrying and launching of fighters working (but not buying or recalling them, yet).
    Added a "Messages" class to allow any thread to safely add a message to the display.
    refactoring: for clarity, replaced Ship::IsDisabled() and IsFullyDisabled() with IsOverheated() and IsDisabled().
    Got capturing working, at least for your flagship. Other ships can't capture other ships yet.
    Got crews and salaries working (including erratic ship behavior if missing crew).
    Added a CargoHold class to handle everything pertaining to cargo (including determining when you have the capacity for it).
    Added a "flamethrower" weapon, as a test of weapons using fuel as ammunition.
    Fixed a bug in DIalog where it was calling the callback on a copy of the given object instead of the original. Added confirmation dialogs to the delete buttons in the Load Game panel. Also tweaked the starting mortgage.
    Added a "Files" class which abstracts out filesystem operations (including finding the resource and config path for each OS). That allows me to remove the boost dependency, which will make porting easier.
    Modified provocation to fade over time, e.g. if you accidentally shot an allied ship but then don't fire on them again, eventually they will "cool down" and stop attacking you.
    Switched to storing cargo in PlayerInfo when landed, then divvying it up among your ships when taking off. This makes it possible to use the cargo capacity of all your ships, and avoids needing to sell cargo when selling ships.
    Modified the "net worth" tracking to include the cost of your ship and cargo.
    Added keyboard shortcuts to the shipyard and outfitter, added a ship naming dialog, and fixed selection of your ships by clicking in the side panel.
    Finished the planet descriptions. Also changed the starting planet for new pilots.
    Fixed some shipyard bugs: sell not giving you money, big ships overflowing their boxes, and buy working even if it results in you having negative credits.
    Fixed a few final issues in the load / save / new mechanics. It all seems to be working correctly, now.
    Added GPL statements to all source code files and added a license.txt file.
    Switched to using boost::filesystem instead of Unix filesystem commands, for cross-platform compatibility.
    Got "New Pilot" working, including visiting the shipyard and picking out an initial ship.
    Added a "New Pilot" dialog (which doesn't yet move you straight to the shipyard, though).
    Added saving of the game (every time you leave a planet, or if you quit while on a planet).
    Added display of the current pilot's information in the main menu.
    Switched to storing shared_ptrs to ships in PlayerInfo, so that if your ship is destroyed it can still remember where it was.
    Added a secondary trigger key for weapons that use up ammo, and a display of ammo remaining for each.
    Uploaded all the files from my local repository to Google Code.
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Switching to just using a Weapon pointer in places where that's all that is needed instead of a full Outfit pointer.
    Added a new "Visual" class that represents just the information we need to track for an Effect once it's instantiated. Using it in place of Effect saves a string copy and a good deal of memory for each active visual effect.
    Switched to using a vector for Projectiles and Effects, to reduce memory allocations and improve cache performance.
    Refactored Engine::CalculateStep(), splitting each set of calculations into a separate function to improve clarity and to open a path for possibly multi-threading the most expensive calculations.
    Added two weapon modifiers: "safe," meaning the blast radius only hits hostile ships, and "phasing," meaning the projectile is not blocked by asteroids or other ships.
    Implemented a much more efficient collision detection algorithm, to speed up large battles.
    Added a common base class for Ships, Projectiles, Asteroids, Effects, Flotsam, StellarObjects, etc. This is the first step in creating a generic collision detection framework that can deal with different object types.
    Homing weapons can now have different tracking modes: better against big ships (optical), against hot ships (infrared) or against ships with no radar jamming.
    Fixed a bug where blast radius was being calculated relative to a projectile's "start" point rather than where it hit its target.
    Projectiles will now clear their target if the target is captured by a different government.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Did some significant optimization (at least 2x faster calculation times in big battles) by switching weapon attributes from a string to double map to a fixed set of values accessed by inlined functions, instead.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Added the capability for ship explosions to damage and move nearby ships.
    Modified effects (weapon impacts, etc.) to take the target's velocity into account so they still look correct if the target is moving.
    Added GPL statements to all source code files and added a license.txt file.
    Modified projectiles hitting ships or missiles to be handled by Engine, rather than by Ship or Projectile itself.
    Fixed blast radii so that they also affect friendly ships, including the ship that fired the weapon in the first place.
    Uploaded all the files from my local repository to Google Code.
    fix(visuals): Only show selected ship names if dragging/reordering
    
    The player doesn't need to see an overlay with the ships they have selected when they simply click one of the ships in the ship list
    feat: Switch off fast-forward if the player is not in flight (#5148)
    
    This is so that the behavior of fast-forward is consistent between panels (#5038). This also gives the player extra time to react when coming out of a boarding panel or on enter conversation by turning fast-forward off if it was on when entering the panel.
    
    The map panel and player info panel are exceptions to this, as they are panels that are commonly accessed and can be accessed at any time while in flight.
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Fix possible overflows for high-income players
    Use 64-bit int for PlayerInfo::conditions
    
    thus allowing rather large conditions to be serialized.
    
    This is particularly useful for financial conditions. No change to the combat rating limit of 2b is planned.
    Using float v. double in some cases of -Wdouble-promotion
    
     - Add some <algorithm> headers for uses of std::min or std::max
    Remove some -Wuseless-cast warnings
    Improve UX for PlayerInfo / ShipInfo panels (#4012)
    
    * Fix handling of "INFO" command in PlayerInfoPanel
     - Default SDL keycode associated with Command::INFO is `i`
     - Issuing INFO from other panels shows the PlayerInfoPanel
     - While PlayerInfoPanel / ShipInfoPanel is active, the key `i` is bound to the "tab" that selects the Player info
       - If the Player info is already open, close it when receiving the INFO / `i` key.
    
    Fixes issue where pressing `i` when viewing PlayerInfoPanel would open the Map to Missions, but pressing `i` when viewing ShipInfoPanel would switch to PlayerInfoPanel
    
    * Allow keyboard to park/unpark from PlayerInfoPanel
     - Interface key is `P`, which is not emitted by keyboards
       - Check instead for `p` and either left or right Shift
       - Not checking for Caps Lock (since it may simply be on for fast-forward mode).
    
    * Allow keyboard to rename and park from ShipInfoPanel
     - Check shift status before navigating to previous
    
    * Follow existing convention
     - `shift` used in other TUs instead of `hasShift`
    Number formatting is now limited to one decimal place, which is enough for all current attributes. Also added a separate formatting function for numbers of credits.
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    When displaying how attractive your fleet is to pirates, make sure it's between 0 and 100%.
    Ctrl-Shift-Arrow key moves selected ships on PlayerInfoPanel (#3229)
    
    * Ctrl+Shift+ Up/Down arrow key moves selected ships on PlayerInfoPanel
    
    * Use shift direction to allow dragging to the end position
    Moved all ratings scales into a common "rating" data type to simplify the code for handling them. Also made it so the same rating level is shown in the text and the numbers for pirate raids, so the text changes at the same time as the number does.
    Convey raid fleet spawn likelihood via Player Info menu (#3087)
    
    * Move raid fleet attraction to PlayerInfo
    
    * Display raid fleet threat in PlayerInfoPanel
    
     - Roughly log-spaced tiers. The displayed number indicates the expected number of raid fleets per jump (if the system has a raid fleet).
     - If any raid fleets are spawned, a message is sent to the screen.
    
    * Display both cargo and strength components, textualize threat level
    
     - Shows each component of raid fleet attraction to the player
     - Gives a categorical rating of the number of raid fleets expected
    
    * Use likelihood of at least one raid as the threat indicator
    Made it possible to assign group hotkeys in the player info panel's fleet listing.
    In the fleet list, made it possible to click and drag all the selected ships as a block, instead of having to reorder ships one by one.
    Added support for "special" log entries, containing whatever you know about a particular person, faction, etc.
    Truncate displayed ship names to prevent overflowing containers (#2631)
    
    * Apply truncation to the front of ship names if selling more than one
    
    Avoids awkward-looking line wraps caused by long ship names when coupled with list-style confirmation dialog.
    Refs #2249
    
    * Extend truncation to other appearances of ship names
    
    Adds front or end truncation to the following locations:
     - Hailing screen: no overflow off right edge for combinations of long ship names and/or long government names.
     - Targeting reticle: no overflow off left edge of ship name
     - Ship detail screen: no overlap of "ship:" and the ship name
     - Shipyard/Outfitter ship details screen: no/minimal overflow out of rounded square border
     - Player Info fleet list: no overflow of ship name across category
    
    Front truncation used where possible, to preserve possible identifying numbers on the tail of the ship name, e.g. the "1" in 'My Ship 1'
    
    * Remove all overlap from Shipyard/Outfitter shared panel
    
    * Font::TruncateMiddle
    
    Allow truncation of strings from the middle out. No special handling to cut in "pretty" locations to do things such as prefer whole-word removal, 2nd-letter starting, etc.
    Changes in border characters from "..." to alphanumerics, plus the slightly reduced width precision of TruncateMiddle vs Truncate(Front) made adjusting some targeted widths necessary.
    Fixed scrolling of the fleet list when "looping around" to the first or last item.
    Added a "logbook": mission actions can now have "log" entries that automatically get added to the logbook, to remind the player of where they are in the story and what quests they have completed.
    Added a help message explaining how to set which escort is your flagship that is shown in the player info panel, the outfitter, or the shipyard the first time the player has multiple ships in their fleet.
    Info panel: avoid crashing if the player has no flagship.
    Allow selecting a ship in the fleet listing and pressing RETURN or ENTER to view it.
    Split InfoPanel into separate classes for the fleet listing page and the individual ship page.
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Added support for special "persons" with multiple ships. The "person" can regenerate all its ships unless you kill the flagship.
    Special "Persons" now count as having been destroyed if they are captured, in addition to if they are destroyed outright.
    Added support for unique "persons" who can show up in any system.
    fix(graphics): Avoid velocity-based "sliding" of Visuals
    
    Ref 8a13777ad8ca580e34e01e8129ba61232fcaafbf
    
     - Only projectiles are drawn with a + .5*velocity shift
       - This should be removed in the future pending custom Sprite drawing positions
     - Remove unused DrawList method
     - Avoid creating afterburner visuals based on non-final Ship::velocity value
    
    Closes endless-sky#4261
    Using float v. double in some cases of -Wdouble-promotion
    
     - Add some <algorithm> headers for uses of std::min or std::max
    Batching the draw commands for projectiles and effects.
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Number formatting is now limited to one decimal place, which is enough for all current attributes. Also added a separate formatting function for numbers of credits.
    Several related changes to fighters: they can now run their own systems when being carried (to generate energy, repair, etc.). Their heat level is now indepenedent of the ship carrying them. Fighters now retreat for repairs if badly damaged, and launch only when mostly repaired. And, repair priority is given to the least damaged fighter.
    Define additional filled colors in interfaces.txt (#3425)
    
    * Define additional filled colors in interfaces.txt
    
     - Further support for modified interfaces / reskinning.
    
    * Added comments to color definitions
    
    * Reflect name change in code too
    Don't show a "profit" relative to the cost basis for a commodity that you have in the holds of absent ships but do not have any of on-planet.
    Made it so pirates won't steal passengers when plundering. Also cleaned up and simplified the CargoHold transfer code.
    Code cleanup: "static" is redundant inside a C++11 anonymous namespace.
    Fixed pluralization of "ton" vs. "tons" in the trading panel.
    Added a help message explaining how to set which escort is your flagship that is shown in the player info panel, the outfitter, or the shipyard the first time the player has multiple ships in their fleet.
    When min() or max() takes mismatching types as inputs, where possible, switched to specifying the output type directly rather than casting both inputs to match.
    Fixed some things that Google's cpplint warns about (mostly, constructors that should be marked explicit).
    Made Panel::Click() able to distinguish double-clicks, so that the info panel can switch to a ship only if it is double-clicked, not just clicked twice in a row.
    The trade panel is now only accessible is a system has commodity prices. Also added a "not for sale" label if some commodities are for sale but not others.
    The sale price of ships and outfits now depreciates over time. If you sell "used" outfits to an outfitter, they remain in stock to buy back (at the reduced price) until you leave the planet.
    Moved the beginner help messages out into a data file.
    Made it so the currently selected commodity or map coloring is remembered in the player info and is carried over to the trading panel if it is a commodity.
    The "Sell All" button in the trading panel now changes to "Sell Outfits" if you only have outfits left in cargo, and will not sell outfits otherwise.
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    Outfits in cargo are no longer always referred to as "plunder."
    Switched to 64-bit precision throughout the trading panel to handle players who insist on cheating to get 2 million cargo space.
    Continuing to work on code cleanup and commenting.
    Added support for an "installable" outfit attribute: if less than zero, the outfit cannot be installed in a ship, and is displayed as "harvested materials" rather than "plundered outfits" in the trading panel.
    Added Shift+B and Shift+S as shortcuts for "buy all" and "sell all" in the trading panel.
    Added a relatively simple but robust dynamic trade implementation.
    Selecting a commodity in the map now selects it in the trading panel, if that's where the map was opened from.
    Added a "buy all" button in the trading panel.
    Added a 500x multiplier (alt / option key), mainly for players with enormous cargo fleets.
    Made it impossible to buy or sell commodities which have a price of 0 in the current system.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added tracking of your "cost basis" for commodities, so the trading panel can display the profit you will earn for selling them.
    Took out most of the overloaded operators for Command, because it is not at all clear how they should handle the turn field, and ignoring it was causing problems.
    Outfits that you sell (including all outfits of any ship that you sell) now remain available for purchase until you leave the planet. This makes it easy to transfer a jump drive to a new ship for example.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Added help messages that pop up the first time you click on a certain panel (and the first time you end up stranded or dead).
    Added a "sell all" button to the trade panel, which also sells any plunder you have (rather than needing to select each outfit in the outfitter panel and sell it individually).
    Switched to 64-bit values for storing credit amounts (to avoid rolling over if you get 2 billion credits).
    Updated the UI to use the same three "named" colors everywhere for three different levels of text brightness, for consistency.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Refactored MapPanel and MissionPanel to share the underlying code for drawing the map.
    Got CargoHold to support mission-specific cargo.
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Added a line to the trading panel showing if some cargo space is taken up by plundered outfits.
    Added a CargoHold class to handle everything pertaining to cargo (including determining when you have the capacity for it).
    Switched to storing cargo in PlayerInfo when landed, then divvying it up among your ships when taking off. This makes it possible to use the cargo capacity of all your ships, and avoids needing to sell cargo when selling ships.
    Switched to always using the Color class instead of passing around RGBA float arrays.
    Added GPL statements to all source code files and added a license.txt file.
    Got "New Pilot" working, including visiting the shipyard and picking out an initial ship.
    Added a "New Pilot" dialog (which doesn't yet move you straight to the shipyard, though).
    Updated how the UI panels are handled to allow the main menu to be called up regardless of what the game state is.
    Got the code to build without warnings when -Wall is defined.
    Uploaded all the files from my local repository to Google Code.
    Fix overflow in Angle.
    
    When long is 32-bit, lround overflows with the values produced in
    System::SetDate, returning an implementation dependent number.
    Using llround is enough to avoid overflowing with the expected values.
    
    Since: 1c6e6a6f8cb77bc0447952a84d86bf66b492071b
    Code cleanup: using lround() for more accurate rounding of double to integer.
    Code cleanup: "static" is redundant inside a C++11 anonymous namespace.
    Starting to go through the code to add more comments and refactor things that are unclear or could cause errors down the road.
    Made it possible to construct an Angle from a Point and to query an angle's measure in degrees.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added a pi.h file defining a PI constant for operating systems that do not have M_PI defined in cmath.
    Added a Random::Real() function, and refactored to use Random everywhere (because old-fashioned rand() is considered deprecated now.)
    Fixed the rotations, unit vectors, and hardpoint locations so that up is always negative y and always 0 degrees.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    refactor: Require a new press to exit a conversation or select a choice (#4769)
    
    Since conversations are more important than dialogs, don't let the player accidentally skip through them
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Limit player name size
    
    and truncate the "name" entry fields
    
     - Names too long (generally >= 255 bytes) result in failure to create the pilot file.
     - For Windows systems, the pilot name is further limited by the bytes in the path to the save directory.
     - Long player names will still overflow Dialog and ConversationPanel widths due to the current `WrappedText` implementation
    NPC "completion" / MissionAction conversations can kill the player and/or NPC (#3376)
    
    * Call ConversationPanel with a pointer to the relevant ship
    
     - Allows destroying the pointed ship depending on the conversation outcome.
     - If the player is killed, the pointed ship should survive, and no BoardingPanel should be displayed.
     - Supply the ship from NPC::Do, to enable destroying the NPC via LAUNCH, DEPART, and FLEE conversation endings.
     - Include a boarding check to prevent an NPC block with a non-boarding completion requirement (e.g. `npc evade`) from displaying a BoardingPanel after the conversation ends.
    
    * Add response handling for non-"on offer" conversations
    
     - Updated PlayerInfo::BasicCallback:
       - attached it to:
         - all NPC completion conversations
           - If actually boarding the NPC, set it as the boarding ship.
       - The player is perhaps not landed: in-flight death implies:
         - capture of the flagship by the ship it was boarding (`die` when boarding)
         - crew mutiny and defection (`die` when not boarding)
         - the destruction of the ship. (`explode`)
     - Added the Conversation::EXPLODE response, based on the keyword `explode`
     - Updated the Ship::WasCaptured code to not over-transfer crew, for the case where the player dies to a conversation offered in-flight and has plenty of crew already.
    
    * Rework PlayerInfo::Die
    
     - Remove need for a private Die() method
     - Update callers of Die(bool) to use Die(int) and achieve the intended result
    
    * Eliminate need for BoardingShip()
    
     - Moved player death handling into ConversationPanel::Exit, where the relevant ship pointer is easily accessed
     - Added pointers to the ship responsible for the boarding mission / npc event into relevant Mission and MissionAction methods, to eliminate need for PlayerInfo::BoardingShip
    
    * Showing BoardingPanel requires a disabled-yet-not-destroyed ship
    
    * Add check for capture / bribery of a boarding ShipEvent's target via a mission NPC's completion conversation
    
     - A more robust method to only offer the BoardingPanel resulting from ConversationPanel::Exit (i.e. no display of sequential BoardingPanels, and obeying the conversation's exit node) should be pursued separately
    Add missing reputation serialization to conversation ConditionSets
    
     - Fixes issue where changes to the stored government reputations were not reflected in the current political landscape when the changes were performed via conversation `apply` node.
    Define additional filled colors in interfaces.txt (#3425)
    
    * Define additional filled colors in interfaces.txt
    
     - Further support for modified interfaces / reskinning.
    
    * Added comments to color definitions
    
    * Reflect name change in code too
    Implement a ShipEvent queue to allow delayed ShipEvent handling (#3371)
    
    * Implement a ShipEvent queue to allow delayed ShipEvent handling
    
     - Handling ShipEvents can result in new UI elements.
     - Only one UI element should be created and displayed to the player at a time (i.e. do not display a dialog and the BoardingPanel simultaneously).
     - Callbacks from one UI element from a given ShipEvent may result in status changes that should influence other UI elements created from the same ShipEvent (e.g. if a mission conversation offered upon boarding an NPC results in that NPC's destruction, the player should not be able to plunder said NPC).
     - Fixes a preexisting issue where the boarding panel would be offered if the player dies in a conversation.
    
    * Switch from GetUI()->IsTop(this) to GetUI()->Top().get() == this
    
     - IsTop() checks only drawn panels, not panels that are requested but not yet drawn.
    Code cleanup: replacing container::size() in if statements with !container::empty().
    Code cleanup: "static" is redundant inside a C++11 anonymous namespace.
    Typo in my previous commit.
    When entering text, caps lock should shift letters but not any other keys.
    When min() or max() takes mismatching types as inputs, where possible, switched to specifying the output type directly rather than casting both inputs to match.
    Reformatting for uniformity.
    Allow keypad to be used in conversations.
    Added a setting to adjust the scroll speed.
    Switched over to the new, cleaner clickable zone syntax in a few places where it was easy to do so.
    Added the ship name to the flight check, so if you have many ships it's clear which one needs fixing.
    Made it so the currently selected commodity or map coloring is remembered in the player info and is carried over to the trading panel if it is a commodity.
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    Continuing code cleanup and commenting.
    Constrain scroll in ConversationPanel so that last line is always visible
    Changed Panel::Drag and Panel::Scroll to take double dx/dy
    
    Fixes endless-sky/endless-sky#805
    Add "depart"="defer+leave" and allow "on defer" callbacks.
    Conversation panel now behaves the same when clicking as when pressing enter.
    The map panel shown from the conversation panel now has the systems correctly colored (by reputation).
    Made Caps Lock work when entering text.
    Added clearer options for how to enter your name when creating a new pilot (an OK button, and support for the return key).
    Added basic support for random missions that get offered when you board a ship.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Removed superfluous std:: prefixes.
    Fixed a place that caused a g++ warning on Ubuntu 14.10.
    Took out most of the overloaded operators for Command, because it is not at all clear how they should handle the turn field, and ignoring it was causing problems.
    Code cleanup: always referring to the player's ship as "flagship."
    Mission dialogs now allow you to bring up a map, the same as conversation panels. Also made the arrow marking the destination system larger, so it stands out on the map.
    Fixed a bug where toggling full-screen was not working when the conversation panel was active.
    Fixed a bug in the conversation panel where the wrong choice was displayed if multiple choices led to the same node.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Modified the Conversation class so that a "scene" image can be inserted at any point, and modified one of the Free Worlds missions to test that.
    Fixed a bug where if you captured and sold an NPC, it would continue to follow you as a free escort until the mission ended.
    Addednumeric labels to the choices in the conversation panel, both as a keyboard shortcut and as a way of making it clearer that they are items to choose between and not just text to read.
    Made some changes to support Windows porting, assuming MinGW will be used to provide basic POSIX functionality.
    Made the end of conversation not scroll to clear the screen, in ConversationPanel.
    Fixed a bug I had introduced into the ConversationPanel scrolling.
    Fixed a few more bugs I found while beginning work on the Free Worlds story line.
    Switched the UI code over to using the generic "ClickZone" class in a few more places.
    Modified the conversation panel to always scroll to just show the new text when you respond.
    Added scroll wheel support to the conversation panel.
    Gave conversation the ability to modify conditions or to branch based on existing conditions.
    Finished up the intro missions for all three ship types. Also fixed a few bugs I found in the process, and added some new text substitutions.
    Moved the wildcard replacing code from ConversationPanel into Format so that other classes can share it.
    Replaced the old, very limited "callback" class with function pointers that can be given any method name.
    Added text substitution for <first> and <last> to the conversation panel. Eventually I'll add destination planet and system, and maybe other things as well.
    Gave the conversation panel an option to pop up a map showing a system highlighted, if the conversation is the introduction to a mission.
    Fixed some bugs in the "done" button in the conversation panel.
    Updated the UI to use the same three "named" colors everywhere for three different levels of text brightness, for consistency.
    Added a DrawBackdrop() function to Panel so that individual panels don't have to duplicate that functionality.
    Added mouse click support to the conversation panel.
    Ported to Mac OS X.
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Added an option to toggle fullscreen mode. It's still a little buggy on Linux.
    Fixed a bug where the edge of the conversation panel would not repeat to fill a tall window.
    Switched to always using the Color class instead of passing around RGBA float arrays.
    Added GPL statements to all source code files and added a license.txt file.
    Got "New Pilot" working, including visiting the shipyard and picking out an initial ship.
    Added a "New Pilot" dialog (which doesn't yet move you straight to the shipyard, though).
    Updated Conversation to allow typing in your name (for the intro text). Also added an option for a "scene" picture, and a better UI panel.
    Uploaded all the files from my local repository to Google Code.
    fix: Illegal stealth missions can no longer be fined for multiple times (#4526)
    
    feat: Fines for illegal mission cargo are now added together instead of only the worst being applied.
    feat: You are now told about how many missions you failed for being scanned.
    Fixed minor code style issues (#4428)
    Number formatting is now limited to one decimal place, which is enough for all current attributes. Also added a separate formatting function for numbers of credits.
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Removed compiler warning. (#2933)
    
    * Removed compiler warning.
    
    * Removed compiler warning.
    Code cleanup: using lround() for more accurate rounding of double to integer.
    Simplified the code in some places where map::count(key) or map::erase(key) could be used alone without calling map::find() first.
    Free Dominated Planet
    Cleaned up some unnecessary namespace prefixes.
    Line break added.
    Reverted the "for" used in the illegal mission cargo messages.
    Made it so if a government has an "attitude toward" another government of less than +-5%, it has no permanent effects on your reputation. (This is so two governments can be at war without making it so that if you attack one, eventually the other will like you.)
    Added an "atrocity" outfit attribute that makes a government automatically hostile toward you if you're caught carrying that outfit.
    Getting scanned can now optionally fail any mission with illegal cargo (#1584)
    
    * Getting scanned now fails any mission that has you carrying illegal cargo
    
    * Made the new "fail if scanned" behavior optional, triggered by a new "stealth" attribute you can set in a mission
    
    * Removed debugging code that sneaked into the last commit
    
    * Now the "illegal" mission attribute can include a string that will get displayed when you're scanned
    
    * Tweaked the standard fine message to be less verbose when overridden with a custom message
    
    * Write out the illegal cargo fine message correctly
    
    * Added a tab to the message so the illegal cargo messages don't all need to start with a tab in order to get the paragraphs formatted correctly
    Undoing a commit because I didn't see there was a PR for it.
    Altered the fine message to make more sense with species names as well as governments.
    Re-worded the fine dialog to remove awkwardness
    can bribe but still not land on provoked planets
    
    swapped check to make bribes matter before provocation
    Cleaned up the Fleet class and fixed a bug where NPCs don't use fighter names.
    Refactoring: switching to using "!set.count(...)" instead of "set.find(...) == set.end()" because it's more concise, just as efficient, and seems clearer.
    Update my master (#1)
    Provoking the same ship twice now makes it hostile both times. Also, an unprovoked attack now clears your bribe status with any ally of the ship you attacked.
    Landing permission now checks if the planet is inhabited, rather than if it has a spaceport.
    Allow planets to have a government defined.
    
    Still uses the system's government as the default value for planets that
    do not define "government", which is still all of them (and should
    continue to be almost all of them in the future).
    Added some checks for planets which are defined but not placed in any system. Previously, these were crashing the game.
    FIxed a bug where if you bribed a government, attacked it, bribed it again, then bribed their planet to let you land, it would not allow you to.
    Fixed a bug where fines for illegal cargo or outfits could be assessed for ships other than the one that is scanned or for ships that are not even in-system.
    Fixed a bug where dominated planets would not allow you to use all their services.
    Added support for planetary domination. (But, it won't do anything until defense fleets have been set for each planet.)
    Fixed a mistake in my previous commit.
    Fixed a bug where fines were not actually getting applied to the player.
    Took out the fines for operating a ship you have no license for. Licenses will still be used to limit what ships you can purchase, but the fines just create too many annoyances.
    Added an "interference plating" item that gives you a chance of evading detection when your ship is scanned and you are carrying illegal cargo or equipment.
    Made it so that the player will never be fined by a planet's government immediately after loading a game (because they already were at risk for a fine when they first landed, before the game was saved).
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added convenience functions to Planet and Government to simplify the syntax for querying political state. Also fixed a few busgs in my recent Command and AI changes.
    Fixed various small issues I found during testing.
    Added a new "infiltrating" mission mode where you can land on a planet, but cannot access any services there or refuel your ship.
    Fixed a few glitches I found while testing the "illegal cargo" modifications.
    Added support for illegal cargo and outfit checks when you are scanned or when you land on a planet.
    Fixed a bug I accidentally introduced that was keeping friendly ships from being "provoked" if you attacked them.
    Made it possible for game events to alter one government's attitude toward another.
    Got "security levels" specified for each planet. So far the only crime you can be caught committing is having an unlicensed ship.
    Added Republic "licenses" for each ship, and added a fine that is assessed if you are scanned by the Republic and are flying an unlicensed ship.
    Implemented mission "clearance" for planets you can't otherwise land on. Also added "<mission>: active" condition flags.
    Switched System::GetGovernment() to returning a pointer instead of a reference, to match how I refer to GameData objects everywhere else.
    Modified missions to not randomly be placed on planets you do not have permission to land on.
    Planets no longer allow you to land if you have a negative reputation with their government.
    Made it possible to bribe hostile ships to leave you alone. More principled captains will refuse your money, however.
    Got permanent reputation changes working, with Ship::TakeDamage now returning a combination of PROVOKE, DISABLE, and DESTROY depending on the projectile's effect.
    Added a Politics class that can handle governments coming to the aid of allies, tracking the player's reputation in response to different actions, etc.
    Made it possible for the shipyard and outfitter maps to filter the list to only show items sold in the selected system.
    Fixed some things that Google's cpplint warns about (mostly, constructors that should be marked explicit).
    Fixed some variables that don't need to be mutable now that Panel::Draw() is not expected to be const.
    Switched over to the new, cleaner clickable zone syntax in a few places where it was easy to do so.
    The map of outfit locations now also shows what resources you have mined in each system.
    Added a find function to the maps of where ships and outfits are sold.
    Modified the outfitter and sales maps to use the new common MapSales panel rather than duplicating code.
    Made it possible to click category names in the maps of shipyards and outfitters to collapse or expand that category. Shift + click expands or collapses all.
    Added a key for the sales maps.
    You can now hold Shift to select a second item to compare to, in the maps of the shipyards and outfitters.
    Fixed alphabetization of the lists in the maps of shipyards and outfitters.
    Fixed a bug in the shipyards map where if a ship variant is for sale, the base model is shown instead.
    Added two new map views, showing all ships and outfits that you know can be bought, and where they are sold.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Fixed an uninitialized variable.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Added a SavedGame class to be used in the load game panel rather than loading the full PlayerInfo for each game that is selected.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Modified the load panel to handle file lists longer than the panel has space for.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Added arrow key shortcuts for the load panel.
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Fixed a bug in DIalog where it was calling the callback on a copy of the given object instead of the original. Added confirmation dialogs to the delete buttons in the Load Game panel. Also tweaked the starting mortgage.
    Fixed some missing #includes.
    Got the Load / Save panel working.
    Added GPL statements to all source code files and added a license.txt file.
    Got "New Pilot" working, including visiting the shipyard and picking out an initial ship.
    Added a "New Pilot" dialog (which doesn't yet move you straight to the shipyard, though).
    Added a Load / Save panel (not yet functional).
    Made it possible for the shipyard and outfitter maps to filter the list to only show items sold in the selected system.
    Fixed some things that Google's cpplint warns about (mostly, constructors that should be marked explicit).
    Fixed some variables that don't need to be mutable now that Panel::Draw() is not expected to be const.
    Switched over to the new, cleaner clickable zone syntax in a few places where it was easy to do so.
    The map of outfit locations now also shows what resources you have mined in each system.
    Added a find function to the maps of where ships and outfits are sold.
    Modified the outfitter and sales maps to use the new common MapSales panel rather than duplicating code.
    Made it possible to click category names in the maps of shipyards and outfitters to collapse or expand that category. Shift + click expands or collapses all.
    Added a key for the sales maps.
    You can now hold Shift to select a second item to compare to, in the maps of the shipyards and outfitters.
    Fixed alphabetization of the lists in the maps of shipyards and outfitters.
    Fixed a bug in the shipyards map where if a ship variant is for sale, the base model is shown instead.
    Added two new map views, showing all ships and outfits that you know can be bought, and where they are sold.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Fixed an uninitialized variable.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Added a SavedGame class to be used in the load game panel rather than loading the full PlayerInfo for each game that is selected.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Modified the load panel to handle file lists longer than the panel has space for.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Added arrow key shortcuts for the load panel.
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Fixed a bug in DIalog where it was calling the callback on a copy of the given object instead of the original. Added confirmation dialogs to the delete buttons in the Load Game panel. Also tweaked the starting mortgage.
    Fixed some missing #includes.
    Got the Load / Save panel working.
    Added GPL statements to all source code files and added a license.txt file.
    Got "New Pilot" working, including visiting the shipyard and picking out an initial ship.
    Added a "New Pilot" dialog (which doesn't yet move you straight to the shipyard, though).
    Added a Load / Save panel (not yet functional).
    Added a "Dictionary" class that works like an STL map<string, double> but allows faster lookup and no string allocations.
    Apply all feedbacks.
    Support data files encoded by UTF-8.
    feat(mechanics): Save collections in order by element name (#5333)
    
    * feat(saves): write collections in deterministic order when saving
    
    * refactor: simply methods via capture lambdas
    
     - No need to pass DW instance around
     - use more "using" declarations to simply method declarations
    
    * pr feedback + lambda styling
    
     - applied a more uniform style to lambda expressions
    feat(mechanics): Spaceport news can now be triggered based on the player's conditions (#5334)
    fix(news): avoid picking empty News items
    test: Support test case execution, locally and in CICD (#4998)
    
    * Extend CI environment with graphical testframework
    Adds CI workflow for Ubuntu 16.
    Adds minimal code to main.cpp to run hardcoded empty testcase.
    Changes script for headless testing to run hardcoded testcase.
    
    * Fix coding style issue.
    
    * Updated step names to differentiate between tests
    Renamed existing tests to parsetest_*.
    Renamed the new test to autotest_*
    Re-ordered tests so that all parse-tests are together.
    
    * Changed GameData::Progress check to (menuPanels UI)->IsInitialized.
    As based on review-feedback. Using the same pattern as isDone.
    Removed the isReady variable in the anonymous namespace of MenuPanel.
    Also replaced explicit default constructor for UI by implicit constructor.
    Tested:
    - Quit from main menu
    - Exit during flight (by closing window)
    - Ran the automated test
    
    * refactor: move "are we loaded?" from UI to GameData
     - Add "const" accessor GameData::IsLoaded & backing boolean
     - Remove UI->IsInitialized & associated branching
     - Update class comments / method names to distinguish simple accessors & identify future refactoring opportunities
        Audio::Progress -> Audio::GetProgress, as it is already a simple accessor
     - Disable moving/copying the SpriteQueue class, given that it manages threads
    
    * docs: update --help and man entries
    
    * scripts: exit early if not on a supported headless platform
    
    * chore: Update GameLoop params
    Preloaded conversation data, test, or debug mode are not modified.
    
    Co-authored-by: tehhowch <tehhowch@users.noreply.github.com>
    feat(tools): Update `--ships` output data table (#4382)
    
    * Add # of guns/turrets to --ships flag
    
    This adds the maximum number of guns and turrets per ship to the `--ships` command line flag of the main executable. This is useful for creating data tables from the game's resource files.
    
    * feat: update reported energy / heat in ship table
    
     - account for a variety of new heat / energy uses since table implementation
     - avoid division by zero if run with incomplete ship definitions present
     - replace shorthand column header names with meaningful names
    
    Co-authored-by: tehhowch <tehhowch@users.noreply.github.com>
    fix(mechanics): Avoid routing through not-yet-defined systems (#5142)
    
    * Fixed pathing through undefined systems.
    
    The pathfinder could still choose to path through a system that has not
    yet been defined (for example, when it is created by a mission).  The
    rest of the game ignores these systems with similar checks to these.
    
    * Update source/GameData.cpp
    
    * Update source/System.cpp
    feat(government): Allow customization of the government's displayed name (#4768)
    
    * Support an optional "display name" key for Governments
     - Allow setting a customized display name for a government, rather always displaying the name used to define the government
    
    * Set the display name for existing pseudo-governments
    Parse GameEvents for additional definitions (#4238)
    
    * Parse events for additional defines
    * Simplify deferred definition loading
      - Use const & for `key`
      - Remove need for if-else if chain.
    
    This allows GameEvents to be the sole source of certain game object definitions without generating spurious warning messages.
    Treat "shipyard" and "outfitter" as other game data
    
     - Add reference checking to "shipyard" and "outfitter" items
        - Warn if "seen" (e.g. in a planet definition or as outfit cargo) but not given any initial items
     - Export Shipyards collection from GameData (to match Outfitters)
     - Update Planet::Load to use Shipyards() and Outfitters() in lieu of passed parameters
    'outfitters' specifies possible carried outfits
    
    ... just as "commodities" specifies possible carried commodities.
    Rather than rewriting the same list of outfits multiple times for similar fleets, name an `outfitter` that has the desired possible outfit cargo.
    e.g.
    fleet "My Fleet"
      outfitters "Ammo South" "Ammo North"
    Quit after displaying tables (#3899)
    
    * Quit after displaying tables
    
    * Update man page with launch prevention of -s and -w options
    Update Pirate planetary defense missions (#3482)
    
    * Update pirate "planetary defense" missions
    
     - Fix incorrect opposition references in UI text
     - Add unpaid variants (25% chance) that are slightly easier than the paid variants
       - Same overall chance of triggering a defense mission
    
    * Add reference checking of stock conversations
    
    * Co-locate mission conversations and mission definitions
    Several related changes to fighters: they can now run their own systems when being carried (to generate energy, repair, etc.). Their heat level is now indepenedent of the ship carrying them. Fighters now retreat for repairs if badly damaged, and launch only when mostly repaired. And, repair priority is given to the least damaged fighter.
    Added a "news" system for displaying messages from local inhabitants you meet in the spaceport.
    Removing some unnecessary std:: prefixes.
    Batching the draw commands for projectiles and effects.
    Switched to using the new ImageSet class for batch-loading of sprites. (But still with each frame going into separate textures.)
    Added an ImageSet class, which will store all data that must be loaded for a given sprite and all functions for parsing sprite paths.
    Made solar collection and ramscoop rates vary from system to system depending on the star(s).
    Made it possible for the start conditions to include the player owning one or more ships.
    Added support for special "persons" with multiple ships. The "person" can regenerate all its ships unless you kill the flagship.
    Extend reference-checking in GameData::CheckReferences (#3116)
    
    * Extend reference-checking in GameData::CheckReferences
    
     - Add Name() to Minable & Phrase
     - Add IsDefined() to GameEvent
    
    * Enable reference-checking for GameEvents and Missions
    
    * IsDefined->Name and other feedback
    Moved all ratings scales into a common "rating" data type to simplify the code for handling them. Also made it so the same rating level is shown in the text and the numbers for pirate raids, so the text changes at the same time as the number does.
    Convey raid fleet spawn likelihood via Player Info menu (#3087)
    
    * Move raid fleet attraction to PlayerInfo
    
    * Display raid fleet threat in PlayerInfoPanel
    
     - Roughly log-spaced tiers. The displayed number indicates the expected number of raid fleets per jump (if the system has a raid fleet).
     - If any raid fleets are spawned, a message is sent to the screen.
    
    * Display both cargo and strength components, textualize threat level
    
     - Shows each component of raid fleet attraction to the player
     - Gives a categorical rating of the number of raid fleets expected
    
    * Use likelihood of at least one raid as the threat indicator
    Code cleanup: replacing container::size() in if statements with !container::empty().
    Derelict ships are now able to repair, once you have boarded them to reactivate them.
    The "galaxies" data (including labels) now resets when you reload a game.
    fix check for submunitions in PrintWeaponTable()
    Added map labels that appear when you discover Wanderer, Hai, Korath, and Coalition space.
    Added checks for references to undefined data (systems, outfits, etc.).
    Moved the combat rating names to a data file.
    Simplified the implementation of deferred landscape loading, because the previous version was so obtuse that it was hard to tell if it was correct or not.
    Made it possible to load MP3s from plugins.
    Added support for showing a list of all installed plugins, plus the icon and about text for each (if any).
    Made it possible to specify the background haze image for each star system.
    Cleaned up some unnecessary namespace prefixes.
    Split the preferences into multiple pages (controls, settings, and plugins) to make space to display all the "hidden" settings and for new key controls to be added if needed.
    Made the ship spreadsheet export show total space, not available space, and skip variants, to make it easier to use for balancing.
    Changed how the game data Revert() works so that it will clean out any extra items, like governments left over from plugins or systems added by events.
    Updated the tooltips for "cost:" and "sells for:".
    Added a check for null sprites in Preload().
    Moved the beginner help messages out into a data file.
    Added custom messages for when you try to land on certain unusual stellar objects (like a lava world, or a nascent wormhole).
    Update each system's list of its visible neighbors whenever a change to the game data alters the map.
    Systems can now define "minables" in addition to normal asteroids.
    Added "fog of war" obscuring parts of the map backdrop that are not yet visited.
    Added "tooltips" that pop up to explain ship and outfit attributes in the shop panels and the ship info panel.
    Made the saved data for the dynamic economy skip systems with no name.
    Buying lots of cargo no longer drives prices up, so you can't buy and then sell at a huge profit a day later.
    Code cleanup.
    Added a relatively simple but robust dynamic trade implementation.
    Merged the functionality of BlurShader into SpriteShader, and DotShader into RingShader.
    Added support for special commodity classes, just to be used for random cargo in missions that is not one of the basic commodity types.
    Errors are now logged to "errors.txt" in the config directory, in addition to being printed to STDERR.
    Added warning messages whenever a line of a data file or saved game is unrecognized.
    Changed how landscape preloading is done to hopefully fix a bug where one of the landscapes was not loaded.
    Made it possible for plugins to supply new sounds.
    Added support for unique "persons" who can show up in any system.
    Switched to only storing 20 landscapes in memory at once, to avoid using huge amounts of RAM. (With the high-DPI textures, this cuts the maximum memory use down from 1.5 GB to 450 MB.)
    Added support for "@2x" image files to supply double-resolution graphics.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Removed some TODOs that have already been fixed.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Fixed the display of "weapons" with reload = 0.
    Added numeric IDs for each government so the hostility matrix can use vector indices instead of string->Government mapping.
    Did some significant optimization (at least 2x faster calculation times in big battles) by switching weapon attributes from a string to double map to a fixed set of values accessed by inlined functions, instead.
    Added an experimental sprite shader that can render motion blur. This makes everything less choppy, but more blurry, and takes a lot more GPU power.
    Fixed a bug where unnamed missions or interfaces could cause a segmentation fault.
    Added the ability to define the starting conditions (credits, mortgages, location, salaries, licenses, etc.) in the data files, to support "total conversion" mods.
    Added support for plugins, placed either in the "resources" directory or the "config" directory.
    Added a "status overlay" preference option where rings representing shield and hull strength are overlaid on all "escorts" and enemies.
    Added convenience functions to Planet and Government to simplify the syntax for querying political state. Also fixed a few busgs in my recent Command and AI changes.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Added a "Preferences" class to parse the preferences file, and made the load display and auto-aim controlled by preferences. Also added an auto-fire AI option.
    Renamed "ShipName" to "Phrase" since it is also used for random hail messages.
    Added support for game events modifying planets. Now, events are fully functional (except that missions are not yet able to trigger them).
    Made it possible for game events to alter one government's attitude toward another.
    Added support for game events modifying the composition of fleets.
    Added support (in a kludgy way) for game events that modify what ships or outfits are available in a given sale set.
    Added support for game events changing any of the contents of systems (stellar objects, asteroids, owner, fleets, trade prices, etc.).
    Added the capability for game events to create or destroy hyperspace links.
    Began adding support for "Game Events" that alter the galaxy at a certain point in time. (So far all they do is modify condition flags, to test that they are indeed triggering on the proper day.)
    Gave Outfit some new convenience functions for getting weapon info that takes submunitions into account.
    Reduced missile damage a bit to balance them better, and also added a "--weapons" command line option to print statistics about all weapons.
    Added a "galaxy" data type for placing the background images in the map panel.
    Added support for premultiplied alpha PNGs, which must be marked by ending their file names (prior to any frame number) with '='.
    Got basic audio support working. I do need to track down better sounds, or at least balance the audio levels better between them.
    Added a Politics class that can handle governments coming to the aid of allies, tracking the player's reputation in response to different actions, etc.
    Fixed a bug in how I used and displayed the "cooling" value.
    Added support for basic "special missions," offered in the Spaceport on certain planets.
    Added a "heat dissipation" attribute that varies from ship to ship, so that big ships will have more trouble radiating away heat.
    Added more fields to the "--table" output.
    Added new ship names for military ships.
    Added deferred loading of the landscape images, which reduces the startup time and also reduces the initial memory usage from about 380 MB to 150 MB.
    Made GameData::Colors() publicly accessible instead of only sharing them with Interface.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Added Planet::GetSystem() so you can map any planet to the system containing it.
    Added support for named "variants" of a given ship, so that for example a Pirate Argosy can have different equipment than a Merchant Argosy.
    Added individual "fleet" descriptions for each system, so that the local ships vary depending on where in the galaxy you are and how populous the system is.
    Added a "Files" class which abstracts out filesystem operations (including finding the resource and config path for each OS). That allows me to remove the boost dependency, which will make porting easier.
    Added a "--table" command line option that prints a table of ship characteristics, to be used for balancing.
    Modified GameData so that if no data path is given, it uses the current directory.
    Added a "Fleet" class, representing a set of ships that might appear in a given system plus the logic for placing them (taking off from a planet or entering via hyperspace).
    Added GPL statements to all source code files and added a license.txt file.
    Switched to using boost::filesystem instead of Unix filesystem commands, for cross-platform compatibility.
    Added saving of the game (every time you leave a planet, or if you quit while on a planet).
    Fixed some shaders that used "\t" in place of "\n".
    Added a scrolling list of credits in the main menu.
    Added a preferences panel for customizing the key controls. (They are not yet used, though.)
    Added a "color" field for governments, and modified the map panel to allow coloring systems by government.
    Added support for "shipyard" and "outfitter" attributes on planets.
    Uploaded all the files from my local repository to Google Code.
    Removed dead code, these buttons are handled by the interface class. (#4401)
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Using float v. double in some cases of -Wdouble-promotion
    
     - Add some <algorithm> headers for uses of std::min or std::max
    Made it so that when the map automatically shifts to center on a selected system, the motion animates rather than happening instantly.
    Number formatting is now limited to one decimal place, which is enough for all current attributes. Also added a separate formatting function for numbers of credits.
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    More help for confused new players.
    User-defined colors & deprecated function (#3431)
    
    * Remove deprecated function declaration
    
     - Function was removed in https://github.com/endless-sky/endless-sky/commit/cdb1cb881d04b246feee03dff4ec0028f34f6327#diff-e0a59618d76b767cb62fa83a9f007c59L295
    
    * Switch to colors in GameData, add some method comments
    
    * Deprecate "close" and "far" colors for "medium" and "dim"
    
    * Show a button for the Find dialog
    
    * Revert "Show a button for the Find dialog"
    
    This reverts commit 14901ad25707f8fd05251d54e45e053a7c3209bd.
    Refactor MapPanel's Draw___ methods (#3379)
    
    * Refactor MapPanel's Draw___ methods
    
     - Improve mod coloring support via expanded use of interfaces.txt:
       - Switch the minimap from a hardcoded position to an Interface
       - Use travel plan colors from interfaces.txt
       - Use System name, link colors from interfaces.txt
     - Move the increment of `step` from MissionPanel to the base MapPanel
     - Add comments to DrawMiniMap, DrawTravelPlan, and DrawWormholes
     - Used and updated MapPanel constants
     - Draw the Travel Plan after wormholes, since wormholes by default have non-zero alpha.
       - This removes the small, dark purple centerline from drawn travel plan routes that use wormholes
     - Adds function to Planet class to export all systems in which it can be found
     - Do not show the "planet description" box if the planet in question is a wormhole.
     - Change DrawWormholes iteration scheme from "every StellarObject in every System" to "check only planets"
       - Fixes bug in DrawWormholes caused when two wormholes reference the same system (i.e. Cardea), which cause the wormhole link to be drawn over a previous directional arrow
    
    * Move the mini-map position specifier into the "hud" interface
    Tweaked the "orbits" UI widget so there's space for a much longer system or planet name.
    Fixed a reference to the wrong sprite in one of my recent commits.
    In the map detail panel, moved the orbits and the key to the top left so there's space on the right for three planets even on small monitors.
    Changign the color scaling for the orbit map to make the yellow for "restricted" less similar to the grey for "uninhabited."
    Merged the functions for getting a stellar object's color in the radar and in the orbits map.
    Sorting out the distinction between System::IsInhabited() and ::HasFuelFor().
    Fixed the logic for deciding when to show commodity prices for a system.
    Made System's list of links and neighbors a set instead of a vector, to simplify adding and removing items and checking if a given system is in the set.
    Made it so certain planets will only show up as something you can land on if your ship has certain attributes.
    Switched from Planet::GetSystem() to Planet::IsInSystem() wherever possible, to support wormholes (which exist in more than one system).
    Simplified the code in some places where map::count(key) or map::erase(key) could be used alone without calling map::find() first.
    Clear the selected planet if the player toggles the jump destination in the map with the JUMP key.
    If you're in an uninhabited system, in the commodities map show absolute values for other systems instead of comparing to this one.
    Cleaned up how the player's destination planet is stored, and added a message telling you if you have any mission destinations in each system you jump to.
    You can now select a planet in the map in your destination system, and the autopilot will land on that planet once you reach that system.
    Made it possible for the shipyard and outfitter maps to filter the list to only show items sold in the selected system.
    Typo fix (missing parentheses).
    Made it so the map zoom level is remembered when you close the map. Also cleaned up some of the map code.
    Added a bit more space for the system or planet name in the planet orbits map.
    Made Panel::Click() able to distinguish double-clicks, so that the info panel can switch to a ship only if it is double-clicked, not just clicked twice in a row.
    Fixed some variables that don't need to be mutable now that Panel::Draw() is not expected to be const.
    Display "----" in the ports map for commodities that the selected system does not sell.
    Don't show wormholes in the list of ports in the map.
    Made it so the currently selected commodity or map coloring is remembered in the player info and is carried over to the trading panel if it is a commodity.
    When pressing TAB in the map to toggle between links, modified the logic to correctly handle collinear link vectors.
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    0.9.2 updates
    The navigation buttons are now in the same place for all four map panels. Also made the UI panel corner highlights a bit brighter.
    Route planning in the map using the jump key is now restricted to paths you know about.
    Switched to opaque blending for the orbit display in the map to avoid bright spots where orbital lines intersect.
    In the map detail panel, pressing "jump" now cycles the last jump on your path; Shift + "jump" locks in the last path and adds another, and delete removes one jump.
    Moved the code for the "target" color of a stellar object out of MapDetailPanel and into StellarObject itself.
    Code cleanup.
    Merged the functionality of BlurShader into SpriteShader, and DotShader into RingShader.
    Fixed a glitch that a recent change introduced in the map key for reputations.
    Selecting a commodity in the map now selects it in the trading panel, if that's where the map was opened from.
    A system now shows up as dominated only if every inhabited planet in the system has been dominated. If some planets have been dominated, it shows up as friendly even if its government is hostile, to show that there is a friendly port there where you can refuel.
    One "planet" can now appear multiple times in a system, to simulate a ringworld or other massive object with many places where you can land.
    In the map detail panel, planet descriptions are now only shown for planets you have visited, so you can't cheat and view the description of a planet you cannot land on.
    The "ports" map now shows whether each planet has been visited.
    Added a key for the sales maps.
    Added a map key for the missions panel.
    Added a map key to the details ("Ports") map panel.
    Wormholes now always return "???" as their name, to simplify all the code that displays planet names.
    Fixed a few things in the map zooming code.
    Fixed click distances, zoom buttons now disable when at min or max zoom.
    I think everything is working, testing.
    Switched the Escape key to closing dialogs, like people expect it to, instead of always going to the main menu.
    Switched the map detail panel to showing commodity prices relative to the current system, rather than absolute.
    Added Control+W (or Command+W on the Mac) as a universal shortcut for "close current window."
    Modified the outfit and ship lists for each planet to only pop up if the planet has at least one item in the list.
    Added two new map views, showing all ships and outfits that you know can be bought, and where they are sold.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Removed superfluous std:: prefixes.
    Took out most of the overloaded operators for Command, because it is not at all clear how they should handle the turn field, and ignoring it was causing problems.
    Code cleanup: always referring to the player's ship as "flagship."
    Added more keyboard shortcuts for viewing the mission panel.
    Modified the solar system map to show "hostile" planets in red.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Modified the map's shipyard and outfitter display to color systems based on the number of ships and outfits, and added a pop-up dialog listing what is available.
    Modified the map display to show the name of any unexplored system that is a destination of a current or available mission (but no further information).
    Added a "find" dialog to the map panel (accessible by pressing "F").
    Spell-checked the comments.
    Added a panel to the map display, showing the description of the currently selected planet (if any). It disappears when no planet is selected, to avoid using up so much screen real estate.
    Added keyboard shortcuts to toggle between commodities in the map view.
    Added a key shortcut in the map panel to toggle between available hyperspace paths (ony if you don't have a multi-step path selected already).
    Switched System::GetGovernment() to returning a pointer instead of a reference, to match how I refer to GameData objects everywhere else.
    Fixed a few glitches, including a segfault when clicking the "new pilot" button.
    Added a way to toggle between the missions map and the system details map.
    Gave the conversation panel an option to pop up a map showing a system highlighted, if the conversation is the introduction to a mission.
    Updated the UI to use the same three "named" colors everywhere for three different levels of text brightness, for consistency.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Refactored to consistently call the PlayerInfo, "player", and the player's flagship, "flagship".
    Refactored MapPanel and MissionPanel to share the underlying code for drawing the map.
    Added support for passenger-carrying missions.
    Simplified DistanceMap: it does not need a set of all systems, since a map can be generated branching out from a single given system.
    Added a "DistanceMap" class that calculates routes and distances between stars, using either the hyperdrive or the jump drive.
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Added a "done" button to the map panel, and also tweaked the commodity gradient to something a bit prettier and cleaned up the galaxy image.
    Switched the map to a yellow / blue gradient instead of red / blue because red could be mistaken as a "hostile star system."
    Fixed a bug in Map where pathfinding would include links between two seen but unvisited systems.
    Added an option to toggle fullscreen mode. It's still a little buggy on Linux.
    Fixed a few bugs in the orbit display in the map view.
    Switched to always using the Color class instead of passing around RGBA float arrays.
    Added GPL statements to all source code files and added a license.txt file.
    Added a "New Pilot" dialog (which doesn't yet move you straight to the shipyard, though).
    Updated how the UI panels are handled to allow the main menu to be called up regardless of what the game state is.
    Got the code to build without warnings when -Wall is defined.
    Set the government for every system. Also updated the map panel to not show information or hyperspace routes for unvisited systems.
    Added a "color" field for governments, and modified the map panel to allow coloring systems by government.
    Modified the map display to allow coloring systems based on whether they provide shipyards or outfitters.
    Added some spaceport descriptions. Also switched the map to coloring "uninhabited" systems grey.
    Uploaded all the files from my local repository to Google Code.
    feat(layout): Moved the outfitter and shipyard "detail information" into a sidebar (#5233)
    Add an article "the" when selling a ship at a shipyard (#4190)
    Number formatting is now limited to one decimal place, which is enough for all current attributes. Also added a separate formatting function for numbers of credits.
    Made it so the "install" keyboard shortcut in the outfitter will only take outfits from cargo.
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    The "flight checks" now show up as warning icons and only block you if you try to take off with an unusable ship.
    Press R or U in Outfitter to uninstall selected outfit directly to cargo. (#2806)
    
    * Add 'Remove Outfit' shortcut to Outfitter shops
    
    Pressing 'r' will remove the selected outfit into your cargo hold if there is sufficient room.
    Excess ammunition that needed to be removed but cannot fit in the remaining space will be sold.
    
    * Remove -> Uninstall
    
    * Refactor common code, fix logic errors
    
     - Moved code for selecting the ships that will gain/lose the selected outfit from those that are already selected into a separate function.
     - When calculating if the cargo space for ammo exists in CanUninstall, use a copy of the ship's attributes to obtain the exact amount
     - Since b5ecaaec1afc66da8f9c7d430686c73efcd77d94 removed the ability of an outfit to reduce energy generation below zero, rephrased now-invalid explanatory comment.
     - Fix some logic errors in CanUninstall's return paths.
    
    * Replace while loop with exact quantity transfer
    
    * Replace *Uninstall() functions with *Sell(true)
    
     - Add boolean argument to *Sell functions to specify if the outfit is to be moved into cargo space. Default behavior is to sell to Outfitter
     - Uninstall / remove actions transfer the selected outfit (+ammo) into the player's cargo hold, if it has capacity. Any that cannot be held in cargo are sold.
    
    * Additional cleanup
    A few more code cleanup changes.
    Truncate displayed ship names to prevent overflowing containers (#2631)
    
    * Apply truncation to the front of ship names if selling more than one
    
    Avoids awkward-looking line wraps caused by long ship names when coupled with list-style confirmation dialog.
    Refs #2249
    
    * Extend truncation to other appearances of ship names
    
    Adds front or end truncation to the following locations:
     - Hailing screen: no overflow off right edge for combinations of long ship names and/or long government names.
     - Targeting reticle: no overflow off left edge of ship name
     - Ship detail screen: no overlap of "ship:" and the ship name
     - Shipyard/Outfitter ship details screen: no/minimal overflow out of rounded square border
     - Player Info fleet list: no overflow of ship name across category
    
    Front truncation used where possible, to preserve possible identifying numbers on the tail of the ship name, e.g. the "1" in 'My Ship 1'
    
    * Remove all overlap from Shipyard/Outfitter shared panel
    
    * Font::TruncateMiddle
    
    Allow truncation of strings from the middle out. No special handling to cut in "pretty" locations to do things such as prefer whole-word removal, 2nd-letter starting, etc.
    Changes in border characters from "..." to alphanumerics, plus the slightly reduced width precision of TruncateMiddle vs Truncate(Front) made adjusting some targeted widths necessary.
    Made it possible for outfits to require licenses to buy them.
    If buying multiple ships, you can now leave the name blank to give each one a different randomly generated "civilian" name.
    Added a button to propose a random ship name when you're buying a new ship.
    The player info now remembers what categories are collapsed in the shipyard and outfitter and the corresponding map panels.
    Fixed some variables that don't need to be mutable now that Panel::Draw() is not expected to be const.
    Fixed some places in the shipyard where depreciation was not accounted for.
    The sale price of ships and outfits now depreciates over time. If you sell "used" outfits to an outfitter, they remain in stock to buy back (at the reduced price) until you leave the planet.
    added a credit total to the ship selling confirmation dialogue
    Added "tooltips" that pop up to explain ship and outfit attributes in the shop panels and the ship info panel.
    0.9.2 updates
    Fix "Member 'XXX' was not initialized in this constructor " compiler
    warnings for WrappedText, ShipyardPanel, Interface, and Font.
    Add parentheses around condition in main.cpp per compiler warning
    suggestion.
    Cargo capacity is now updated whenever you buy or sell ships or outfits. Also, cargo space is now checked when trying to buy an outfit into cargo.
    Categories in the shipyard and outfitter are now "collapsable."
    Refactored the shop panels to use the same ClickZone class as the other panels do (but, extended to contain some extra information).
    The shipyard now shows the stats for your currently selected ship.
    ShipInfoDisplay no longer needs to know what system you are in (which used to control what licenses are required).
    Allow planets to have a government defined.
    
    Still uses the system's government as the default value for planets that
    do not define "government", which is still all of them (and should
    continue to be almost all of them in the future).
    Regularizing the shipyard and outfitter maps code to make them easier to merge.
    Instead of "Unnamed Ship", new ships with no name specified are now named "<first>'s <model name>".
    Optimized the shipyard and outfitter panel display code, so they won't spike the CPU.
    Added a "Medium Warship" category, and moved some ships into it.
    Added a helpful explanation message if you cannot sell an outfit, e.g. because it is a generator and you have shield regenerators installed that depend on it for energy.
    Put a limit on the number of ship names shown in the sell confirmation dialog.
    Made the multiplier keys no longer apply to the "sell ship" button.
    Fixed some inconsistencies that can occur when selling your flagship if the next ship is parked or in another system.
    Added the ability to purchase ships in bulk.
    Ship licenses are no longer government specific and no longer saved in the player info (because they now only control what you can buy, not what you can own).
    Fixed a bug in the shipyard where selling a ship immediately after buying it would hang up the program.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Removed some TODOs that have already been fixed.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Various small fixes to things I found during testing.
    Fixed a bug where when you buy your first ship it doesn't show up in the shipyard panel until you exit and return.
    Added support for selecting and selling multiple ships at once in the shipyard.
    Modified hol the scrolling changes when you click an item in the shop panel, so that that item stays where it is (if possible).
    For each possible reason that you cannot buy a ship or outift, added an explanatory dialog that appears if you click "buy."
    Updated the XCode project and fixed a few issues it complained about.
    Modified the shipyard so that if you need licenses to operate a ship and they can be purchased, you do so automatically when buying a ship (instead of just blocking you from buying it).
    Added Republic "licenses" for each ship, and added a fine that is assessed if you are scanned by the Republic and are flying an unlicensed ship.
    Fixed a bug in the Shipyard panel where I was unintentionally making copies of ship models.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Fixed a bug in DIalog where it was calling the callback on a copy of the given object instead of the original. Added confirmation dialogs to the delete buttons in the Load Game panel. Also tweaked the starting mortgage.
    Added ship characteristics to go with all the new images I just uploaded. There are now 20 different models of ships in the game.
    Added a new ShopPanel class that includes all the code that was shared between the Shipyard and Outfitter.
    Did some balancing of the ship attributes, speeds, and prices.
    Modified the shipyard and outfitter to draw the ships in the player's colors.
    Added an option to toggle fullscreen mode. It's still a little buggy on Linux.
    Shipyard: switched to sorting ships by category. Also now hides empty categories in the shipyard and outfitter.
    Added handling of scroll wheel events in the shipyard and outfitter panels.
    Added keyboard shortcuts to the shipyard and outfitter, added a ship naming dialog, and fixed selection of your ships by clicking in the side panel.
    Fixed some shipyard bugs: sell not giving you money, big ships overflowing their boxes, and buy working even if it results in you having negative credits.
    Switched to always using the Color class instead of passing around RGBA float arrays.
    Added GPL statements to all source code files and added a license.txt file.
    Got "New Pilot" working, including visiting the shipyard and picking out an initial ship.
    Added a "New Pilot" dialog (which doesn't yet move you straight to the shipyard, though).
    Updated how the UI panels are handled to allow the main menu to be called up regardless of what the game state is.
    Switched to storing shared_ptrs to ships in PlayerInfo, so that if your ship is destroyed it can still remember where it was.
    Uploaded all the files from my local repository to Google Code.
    feat(layout): Moved the outfitter and shipyard "detail information" into a sidebar (#5233)
    fix(visuals): don't immediately start dragging on click
    
     - no need to draw the sprite / outline under the cursor unless the player is actually dragging
    
    style: add `explicit` to ctors
    style: rename/constify a variable in ShopPanel::Click
    feat(preferences): Allow the "fancy" sobel filters in ShopPanels to be replaced with "fast" sprite images (#5179)
    fix(mechanics): Fix bug where the player could buy license-restricted outfits into cargo. (#5066)
    
    * Disallow buying license restricted outfits into cargo.
    
    * Update comment
    fix(mechanics): Count all ships which cannot depart the system
    
    ...even if they have a different warning displayed.
    
    While Ship::FlightCheck now reports all warnings, only the first warning is displayed in the Shipyard / Outfitter.
    (Before displaying e.g. up to 3 warning tooltips, we must determine their relative priorities and verify the checked condition parameters make sense due to the branching changes)
    
    Closes endless-sky#4949
    fix: Check proper ship when using keyboard in Shipyard
    
    
    Fixes a copy-paste error of my own from 2ac2482
    feat: If not carried, fighters and drones are launched instead of sold (#4388)
    
    Co-authored-by: tehhowch
    fix: avoid possible divide-by-zero in Shipyard & Outfitter
    
    If the user wants to shrink things really far, it shouldn't crash the game.
    Buy, Sell, Leave button size fix (#4351)
    
    * Adjusted Buy, Sell, Leave buttons clickable and hover area in outfit and shipyard shop to match the displayed button size.
    
    * Removed unneeded lines/comments
    
    * Fixed tab/space.
    
    * formatting.
    
    * Made buttons clickable one pixel wider to the right.
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Using float v. double in some cases of -Wdouble-promotion
    
     - Add some <algorithm> headers for uses of std::min or std::max
    Fixed one place where an amount in credits was being formatted as a number.
    Made it so the "install" keyboard shortcut in the outfitter will only take outfits from cargo.
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Added support for shipyard "thumbnail" images for ships.
    Don't try to match the top when scrolling down a big selected item.
    
    If the height of the selected item was a bit bigger than the main height,
    the auto-scroll would go up and down repeatedly and never stop.
    Add gl_header include for uses of glClear
    In the shops, made it so when you hover the buy or sell button, the ships that the buy or sell will apply to are highlighted.
    The shop buttons are now highlighted if you hover over them (like all the other buttons in the game).
    Define additional filled colors in interfaces.txt (#3425)
    
    * Define additional filled colors in interfaces.txt
    
     - Further support for modified interfaces / reskinning.
    
    * Added comments to color definitions
    
    * Reflect name change in code too
    Truncate long player / player flagship names, and plugin names (#3395)
    
    * Truncate long player / player flagship names, and plugin names
    
    * Restored proper RHS margin for plugin text
    Fixed the outfitter's auto-scroll when toggling outfits for sale or in cargo via the "key" buttons. Aslo reverted the behavior for click-and-drag scrolling so it won't clear the current selection.
    Use selected ship/outfit as scroll reference. (#3044)
    
    * Use selected item as reference in ShopPanel.
    
    In the outfitter, when you have an outfit selected and choose a different
    ship it will keep the outfit in the same screen height.
    This is needed because when a new ship is selected it can add or remove
    outfits before the selected outfit, causing the selected outfit to be
    placed in a different position.
    
    It is also able to auto-scroll down and tries to make the image visible.
    
    * Deselect selected item when you click on other areas of the main panel.
    
    This allows you to cancel auto-scroll by clicking somewhere else in the
    main panel.
    
    * Clarify main top and bottom coordinates.
    For flight check tooltips, check for mouse hover right when drawing the flight check icon so there's no need to scan through all the click zones later.
    Fix ships selected by number keys in Shipyard/Outfitter
    
     - Ensure only ships which can appear in the Shipyard/Outfitter are selected.
     - If the currently selected ship is not in the new selection of ships, update it.
    The "flight checks" now show up as warning icons and only block you if you try to take off with an unusable ship.
    Press R or U in Outfitter to uninstall selected outfit directly to cargo. (#2806)
    
    * Add 'Remove Outfit' shortcut to Outfitter shops
    
    Pressing 'r' will remove the selected outfit into your cargo hold if there is sufficient room.
    Excess ammunition that needed to be removed but cannot fit in the remaining space will be sold.
    
    * Remove -> Uninstall
    
    * Refactor common code, fix logic errors
    
     - Moved code for selecting the ships that will gain/lose the selected outfit from those that are already selected into a separate function.
     - When calculating if the cargo space for ammo exists in CanUninstall, use a copy of the ship's attributes to obtain the exact amount
     - Since b5ecaaec1afc66da8f9c7d430686c73efcd77d94 removed the ability of an outfit to reduce energy generation below zero, rephrased now-invalid explanatory comment.
     - Fix some logic errors in CanUninstall's return paths.
    
    * Replace while loop with exact quantity transfer
    
    * Replace *Uninstall() functions with *Sell(true)
    
     - Add boolean argument to *Sell functions to specify if the outfit is to be moved into cargo space. Default behavior is to sell to Outfitter
     - Uninstall / remove actions transfer the selected outfit (+ammo) into the player's cargo hold, if it has capacity. Any that cannot be held in cargo are sold.
    
    * Additional cleanup
    Arrow keys should not select disabled, in-system ships
    A few more code cleanup changes.
    Skip disabled ships when shift-clicking a range
    Ship group hotkeys now work in the shops.
    Truncate displayed ship names to prevent overflowing containers (#2631)
    
    * Apply truncation to the front of ship names if selling more than one
    
    Avoids awkward-looking line wraps caused by long ship names when coupled with list-style confirmation dialog.
    Refs #2249
    
    * Extend truncation to other appearances of ship names
    
    Adds front or end truncation to the following locations:
     - Hailing screen: no overflow off right edge for combinations of long ship names and/or long government names.
     - Targeting reticle: no overflow off left edge of ship name
     - Ship detail screen: no overlap of "ship:" and the ship name
     - Shipyard/Outfitter ship details screen: no/minimal overflow out of rounded square border
     - Player Info fleet list: no overflow of ship name across category
    
    Front truncation used where possible, to preserve possible identifying numbers on the tail of the ship name, e.g. the "1" in 'My Ship 1'
    
    * Remove all overlap from Shipyard/Outfitter shared panel
    
    * Font::TruncateMiddle
    
    Allow truncation of strings from the middle out. No special handling to cut in "pretty" locations to do things such as prefer whole-word removal, 2nd-letter starting, etc.
    Changes in border characters from "..." to alphanumerics, plus the slightly reduced width precision of TruncateMiddle vs Truncate(Front) made adjusting some targeted widths necessary.
    Ships can have a custom "swizzle" property (#2629)
    
    * Ships can have a custom "swizzle" property
    
    The nomenclature is the word "swizzle" (quotes unnecessary) followed by
    a number between 0 and 8, at the same level of indentation as sprite or
    attributes. Use 0 for no swizzling of the original sprite.
    
    * Defined key in Ship::Load
    
    * Custom swizzle corrections
    
    Invalid ship swizzle values will be ignored. Also fixed a missing
    if(government) check in Ship::Place, introduced in previous commit.
    Fixed a bug where you couldn't transfer an outfit between ships or install it from cargo if buying it requires a license.
    In the shop panels, only let the "i" keyboard shortcut ("Install") work if you are actually installing an outfit from cargo.
    Made it possible for outfits to require licenses to buy them.
    Added a help message explaining how to set which escort is your flagship that is shown in the player info panel, the outfitter, or the shipyard the first time the player has multiple ships in their fleet.
    In the outfitter, you can now toggle whether outfits you do not own are shown, and whether you're buying and selling cargo or ship outfits.
    Fixed a problem in my previous commit.
    Simplified the code in some places where map::count(key) or map::erase(key) could be used alone without calling map::find() first.
    When min() or max() takes mismatching types as inputs, where possible, switched to specifying the output type directly rather than casting both inputs to match.
    The player info now remembers what categories are collapsed in the shipyard and outfitter and the corresponding map panels.
    Made Panel::Click() able to distinguish double-clicks, so that the info panel can switch to a ship only if it is double-clicked, not just clicked twice in a row.
    Added expand / collapse arrows for the category names in the shipyard and outfitter (and the shipyard and outfitter maps).
    Fixed some variables that don't need to be mutable now that Panel::Draw() is not expected to be const.
    Added a setting to adjust the scroll speed.
    The sale price of ships and outfits now depreciates over time. If you sell "used" outfits to an outfitter, they remain in stock to buy back (at the reduced price) until you leave the planet.
    Tripled the scroll speed in the shops and in the sales maps.
    Made Shift+click on category names work in the shop panels, in addition to the shop maps.
    Fixed some places where an escort with no sprite can cause crashes.
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    Tooltips no longer show up if you hover the buttons in the corner of the shop panels.
    Added a common base class for Ships, Projectiles, Asteroids, Effects, Flotsam, StellarObjects, etc. This is the first step in creating a generic collision detection framework that can deal with different object types.
    Added "tooltips" that pop up to explain ship and outfit attributes in the shop panels and the ship info panel.
    Made the ship icons appear even if you only have one, so you can always deselect all ships to buy into cargo.
    0.9.2 updates
    Cargo capacity is now updated whenever you buy or sell ships or outfits. Also, cargo space is now checked when trying to buy an outfit into cargo.
    Fixed the size of the click box around the ship icons in the shops.
    Fixed the handling of control-clicking a ship icon that is selected but not the primary selection.
    You can now buy outfits directly into cargo by deselecting all your ships (control + click).
    Categories in the shipyard and outfitter are now "collapsable."
    Refactored the shop panels to use the same ClickZone class as the other panels do (but, extended to contain some extra information).
    Made "D" another shortcut for "Leave" in the shop panels, because that's what it does in other pop-up panels.
    Refactoring: switching to using "!set.count(...)" instead of "set.find(...) == set.end()" because it's more concise, just as efficient, and seems clearer.
    Fixed formatting in the auto-scroll shop code, and limited it so it will never scroll farther than necessary.
    Add autoscroll to ShopPanel to bring item details into view
    Changed Panel::Drag and Panel::Scroll to take double dx/dy
    
    Fixes endless-sky/endless-sky#805
    Fixed a crash in the shop panel if a ship has no sprite.
    Fixed the handling of underlines in Font::Width().
    Added 'i' ("install") as an alternative hotkey for the "buy" button in the shops.
    Added a helpful explanation message if you cannot sell an outfit, e.g. because it is a generator and you have shield regenerators installed that depend on it for energy.
    Realized that ShopPanel uses same label logic, moved underscores directly into strings. Now these scale nicely too.
    Added underscores to I think every location in the game where hotkeys are defined.
    The modifier multiplier no longer appears under "Sell" in the shipyard.
    Switched the Escape key to closing dialogs, like people expect it to, instead of always going to the main menu.
    Made the multiplier keys no longer apply to the "sell ship" button.
    Added a 500x multiplier (alt / option key), mainly for players with enormous cargo fleets.
    Fixed the bug where an outfit that changes a ship's hull amount can cause that ship to become disabled.
    Added Control+W (or Command+W on the Mac) as a universal shortcut for "close current window."
    Added the ability to purchase ships in bulk.
    Fixed a bug in the handling of arrow keys for selecting items in the shops.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Fixed a place where I was using point.x instead of .X().
    Code cleanup: always referring to the player's ship as "flagship."
    Added support for reordering ships in your fleet in the shop side panel.
    Added support for selecting and selling multiple ships at once in the shipyard.
    First step in the sales panel upgrade: your fleet now displays as a set of small icons so it all fits on screen even if you have many ships.
    Changed how scroll-on-click works for the side panel of the shops, too.
    Modified hol the scrolling changes when you click an item in the shop panel, so that that item stays where it is (if possible).
    Modified the shop panel to scroll whatever panel the mouse is hovering over, not where you last clicked.
    For each possible reason that you cannot buy a ship or outift, added an explanatory dialog that appears if you click "buy."
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Added scroll arrows to the shop panels to make it clear when there is more you can scroll to see.
    Switched to just letting events change the swizzle color of the "Escort" government, instead of setting a special "swizzle" variable in the player info.
    Spell-checked the comments.
    Added a "swizzle" condition that controls the color of your ships (and that is saved even if it is zero).
    Updated the UI to use the same three "named" colors everywhere for three different levels of text brightness, for consistency.
    Added two new classes, Format (for formatting numbers) and Table (for formatting tables).
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Fixed a few small bugs.
    Implemented a placeholder version of boarding and plundering (without a dialog yet to choose what items you steal).
    Added a CargoHold class to handle everything pertaining to cargo (including determining when you have the capacity for it).
    Added individual "fleet" descriptions for each system, so that the local ships vary depending on where in the galaxy you are and how populous the system is.
    Added keyboard shortcuts to the ShopPanel to use the arrow keys to select items.
    Added a new ShopPanel class that includes all the code that was shared between the Shipyard and Outfitter.
    Did some balancing of the ship attributes, speeds, and prices.
    Modified the shipyard and outfitter to draw the ships in the player's colors.
    Added an option to toggle fullscreen mode. It's still a little buggy on Linux.
    Shipyard: switched to sorting ships by category. Also now hides empty categories in the shipyard and outfitter.
    Added handling of scroll wheel events in the shipyard and outfitter panels.
    Added keyboard shortcuts to the shipyard and outfitter, added a ship naming dialog, and fixed selection of your ships by clicking in the side panel.
    Fixed some shipyard bugs: sell not giving you money, big ships overflowing their boxes, and buy working even if it results in you having negative credits.
    Switched to always using the Color class instead of passing around RGBA float arrays.
    Added GPL statements to all source code files and added a license.txt file.
    Got "New Pilot" working, including visiting the shipyard and picking out an initial ship.
    Added a "New Pilot" dialog (which doesn't yet move you straight to the shipyard, though).
    Updated how the UI panels are handled to allow the main menu to be called up regardless of what the game state is.
    Switched to storing shared_ptrs to ships in PlayerInfo, so that if your ship is destroyed it can still remember where it was.
    Uploaded all the files from my local repository to Google Code.
    Reorganized the icons so the .iconset only contains the files that Mac OS X expects.
    Icon for the windows binary (#2018)
    
    * WinApp.ico
    
    Add windows application iconset "WinApp.ico" to folder
    "endless-sky.iconset".
    
    * WinApp.rc
    
    Add windows application resource file "WinApp.rc" to the source folder.
    
    * Update EndlessSky.cbp
    
    Add the resource file "WinApp.rc" to the Code::Blocks project.
    feat(mechanics): Basic support for custom hardpoint angles, non-converging weapons (#4801)
    
    * Add gun-port angles and convergence setting.
    Allows content-creators to create ships with non-forward facing gun-ports.
    Also allows content-creators to set convergence for guns.
    
    * Allow some weapons to be non-parallel / non-converged.
    * Update source/Armament.cpp
    Simplify the code by providing booleans directly to hardpoints.emplace. (As suggested by Amazinite and tehhowch.)
    
    * Process review comments
    * Processed review comments
    Explicitly check for the "gun ports" attribute
    
    Otherwise installing outfits with `weapon` nodes would result in equipping them as a gun
    
    Refs endless-sky#4251
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Fixed a bug where the stream reload counter reset whenever a weapon of a given type was removed, causing all nuclear missiles to fire at once.
    Added a new "Visual" class that represents just the information we need to track for an Effect once it's instantiated. Using it in place of Effect saves a string copy and a good deal of memory for each active visual effect.
    Switched to using a vector for Projectiles and Effects, to reduce memory allocations and improve cache performance.
    Fixed some missing #includes and one unnecessary check that would mess up other compilers.
    Fixed daily weapon reloads also resetting turret angles.
    Added support for independent turret tracking (and, limited turret turn rates) for everything but anti-missiles.
    Starting to go through the code to add more comments and refactor things that are unclear or could cause errors down the road.
    Made it possible to construct an Angle from a Point and to query an angle's measure in degrees.
    Added support for anti-missiles to create effects at the turret and at the projectile, in addition to the beam connecting the two.
    Fixed a bug in stream-mode weapons firing burst shots.
    Added support for fractional reload times, to allow beam weapons with a duty cycle that isn't an integer fraction.
    Added some sanity checks for weapon attributes that could cause bugs if they are outside the expected range.
    Cleaned up some of the weapon streaming code.
    Added support for "burst" weapons that fire multiple shots and then need a longer reload time.
    Code cleanup.
    Added a "stream" weapon attribute that has it fire streamed rather than clustered even if it is vulnerable to anti-missile.
    Modified the audio source coalescing code to add source volumes instead of averaging, and also took out the doppler effect.
    Tweaked the "long range missile boat" AI to stop running away once it's out of ammo.
    Added safeguards against the AI firing on a ship it is boarding.
    Added "firing" animations for some of the missile weapons.
    Removed some TODOs that have already been fixed.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Removed superfluous std:: prefixes.
    Did some significant optimization (at least 2x faster calculation times in big battles) by switching weapon attributes from a string to double map to a fixed set of values accessed by inlined functions, instead.
    Renaming some functions in preparation for moving the weapon attributes out of Outfit and into a separate class.
    Fixed some bugs in reordering ships or weapons in the info panel.
    Added a pi.h file defining a PI constant for operating systems that do not have M_PI defined in cmath.
    Gave Outfit some new convenience functions for getting weapon info that takes submunitions into account.
    Fixed a bug where turrets were tracking targets that were not in-system.
    Made it possible to request assistance from friendly ships and have them repair or refuel you.
    Got basic audio support working. I do need to track down better sounds, or at least balance the audio levels better between them.
    Added the ability to re-assign weapons to different hardpoints (but only when landed on a planet).
    Added a Random::Real() function, and refactored to use Random everywhere (because old-fashioned rand() is considered deprecated now.)
    If the ship specification file says to put certain weapons in certain hardpoints, got Ship to honor that instead of reassigning them whenever the file is loaded.
    Added a "personality" class representing whether a fleet of ships does things like plundering opponents (which pirates now do).
    Changed the turret firing code to also have some "confusion" instead of being perfectly precise.
    Fixed the rotations, unit vectors, and hardpoint locations so that up is always negative y and always 0 degrees.
    Fixed a bug where the gun and turret count for a ship increases every time the pilot file is saved.
    Added GPL statements to all source code files and added a license.txt file.
    Added saving capability to the Ship class.
    Got the code to build without warnings when -Wall is defined.
    Updated the AI to fire each individual weapon on a ship only if it can hit something.
    Added an Armament clas for tracking weapon logic (mounting points, reloading, streaming, etc.).
    Moved all the source code files into a "source" folder to clean up the root folder.
    Switched to always using the Color class instead of passing around RGBA float arrays.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    Removing some unnecessary std:: prefixes.
    Switched to using the new ImageSet class for batch-loading of sprites. (But still with each frame going into separate textures.)
    Added functions for bulk-uploading sprites. (But, they're not in use yet.)
    Added an ImageSet class, which will store all data that must be loaded for a given sprite and all functions for parsing sprite paths.
    Added support in ImageBuffer for loading multiple frames of an animation into one buffer.
    Increased the number of image decoding threads and the number of images uploaded to the GPU at a time, to make the game load faster.
    Switched to only storing 20 landscapes in memory at once, to avoid using huge amounts of RAM. (With the high-DPI textures, this cuts the maximum memory use down from 1.5 GB to 450 MB.)
    Added support for "@2x" image files to supply double-resolution graphics.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added deferred loading of the landscape images, which reduces the startup time and also reduces the initial memory usage from about 380 MB to 150 MB.
    Eliminated SDL_image in order to allow reading images in multiple threads simultaneously.
    Ported to Mac OS X.
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Added GPL statements to all source code files and added a license.txt file.
    Got the code to build without warnings when -Wall is defined.
    Mocked up the main menu interface (but it is not functional yet).
    Uploaded all the files from my local repository to Google Code.
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Added a new "Visual" class that represents just the information we need to track for an Effect once it's instantiated. Using it in place of Effect saves a string copy and a good deal of memory for each active visual effect.
    Fixed minor code style issues (#4428)
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added GPL statements to all source code files and added a license.txt file.
    Got "New Pilot" working, including visiting the shipyard and picking out an initial ship.
    Uploaded all the files from my local repository to Google Code.
    Fixed a bug where the file the music is streaming from could get "closed" twice.
    Made it possible to load MP3s from plugins.
    Fixed a bug where stopped music started again when you entered the next system.
    Added support for streaming MP3s from disk (currently only tested on Linux) for music or ambient sounds.
    Using float v. double in some cases of -Wdouble-promotion
    
     - Add some <algorithm> headers for uses of std::min or std::max
    Propagate the "WAIT" command down to escorts of escorts, to synchronize jumping.
    Remove use of static inside anonymous namespace
    Made it possible to customize the position and size of the ammo, escorts, and message lists in the heads-up display.
    Made it possible to customize the colors used in the radar (which are also used for target crosshairs).
    Mission NPCs added to the escort display are drawn with hostile colors as appropriate. (#2725)
    
    * Mission NPCs added to the escort display are drawn with hostile colors
    
    If a mission adds a hostile ship to the escort display so that the player can track its whereabouts, this ship will appear under the player's colors (green) on the radar and in the target reticle.
    
    This commit prevents drawing hostile escorts as assumed friendlies.
    
    * Display escort icon as Radar::HOSTILE color
    
    Also, do not merge it with friendly escort icons.
    
    * Restore colors in radar display
    Use user-defined colors for status overlays and escort attributes
    
    Status overlays (shields, hull, scanning progress) were previously fixed
     - New colors are added to data/interfaces.txt to allow custom colors
    
    Escort attributes (shields, hull, fuel, heat, energy) were previously hard-coded to the default values assigned to the flagship.
     - Colors now reflect the custom values given to the user's flagship's attributes.
     - Existing "overlapping" bar behavior for displaying attributes that differ between like-model escorts is preserved.
    Refactoring to avoid any places in the code that make assumptions about how much fuel is used by various jump modes.
    Made it possible to customize the colors used in the escort status icons.
    Fixed a bug where the escort click zones weren't being reset each frame.
    Escort icons are now colored green if selected, yellow if preparing to jump but not ready, and red if unable to jump.
    Made it possible to click escort icons to select them.
    Added a common base class for Ships, Projectiles, Asteroids, Effects, Flotsam, StellarObjects, etc. This is the first step in creating a generic collision detection framework that can deal with different object types.
    Fixed permissions on three files.
    0.9.2 updates
    Fixed a possible memory access error in escort icon merging.
    Refactoring: switching to using "!set.count(...)" instead of "set.find(...) == set.end()" because it's more concise, just as efficient, and seems clearer.
    Update my master (#1)
    Fixed the escort icons so they don't turn red in mid-jump when out of fuel.
    Escort icons now turn red if you are about to strand them by jumping away when they cannot follow.
    Icons for escorts in other systems will now merge together properly.
    Fixed a bug where escort icons do not fold properly if ships of the same type have different costs.
    Formatting fix.
    color escort icon green if it is ready to jump
    
    When some of your escorts are off screen (particularly on a small monitor) it's
    hard to know when they're all ready to jump. I think this also adds a nice
    feeling of waiting for your escorts to signal that they're ready.
    Fixes to the escort display: the status bars cannot go negative, and absent / disabled / dead ships are no longer merged with live ships.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    An initial attempt at getting the escort HUD to "stack" ships so that there's enough space to show them all.
    Remove unused `step` parameter from AF::Collide
    
    `step` is now used in AsteroidField::Step, to configure the CollisionSets with the proper frame mask.
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Took out AsteroidField::Asteroid::Collide(), which is no longer used.
    Switched to using CollisionSet for asteroids and minables, and cleaned up some of the code related to them.
    Added a new "Visual" class that represents just the information we need to track for an Effect once it's instantiated. Using it in place of Effect saves a string copy and a good deal of memory for each active visual effect.
    Switched to using a vector for Projectiles and Effects, to reduce memory allocations and improve cache performance.
    The "add" and "remove" syntax now work for shanges to a system, too. Also allowed "add variant" in events that change fleets.
    Made it possible to zoom the view in or out (via the scroll wheel or the +/- keys) without changing the UI zoom.
    Added NPC AI support for harvesting flotsam. (For miners, or for distracting pirates by dumping cargo.)
    Added a "mining" personality that circles around searching for minable asteroids, then destroys them. (It doesn't know how to harvest the flotsam yet, though.)
    Systems can now define "minables" in addition to normal asteroids.
    Continuing to comment and clean up the code. Asteroids will now display properly on monitors wider than 4096 pixels.
    Added a common base class for Ships, Projectiles, Asteroids, Effects, Flotsam, StellarObjects, etc. This is the first step in creating a generic collision detection framework that can deal with different object types.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added an experimental sprite shader that can render motion blur. This makes everything less choppy, but more blurry, and takes a lot more GPU power.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Took out some unneeded references to GameData in the headers.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Modified effects (weapon impacts, etc.) to take the target's velocity into account so they still look correct if the target is moving.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    The player will now remember minable types they have targeted in a system even if they didn't harvest anything from them.
    Switched to using CollisionSet for asteroids and minables, and cleaned up some of the code related to them.
    Added a new "Visual" class that represents just the information we need to track for an Effect once it's instantiated. Using it in place of Effect saves a string copy and a good deal of memory for each active visual effect.
    Switched to using a vector for Projectiles and Effects, to reduce memory allocations and improve cache performance.
    Extend reference-checking in GameData::CheckReferences (#3116)
    
    * Extend reference-checking in GameData::CheckReferences
    
     - Add Name() to Minable & Phrase
     - Add IsDefined() to GameEvent
    
    * Enable reference-checking for GameEvents and Missions
    
    * IsDefined->Name and other feedback
    Fix missing jettisoned commodities (#2962)
    
    * Fix missing jettisoned commodities
    
    The last box of commodities was not being jettisoned unless it was a
    multiple of 5, which is the maximum number of commodities per box.
    
    * Adjust commodity flotsam lifetime based on tonnage.
    
    Commonity flotsam lifetime has a square root progression that remains
    unchanged when it has the expected tonnage per box.
    Fixed some missing #includes and one unnecessary check that would mess up other compilers.
    Added NPC AI support for harvesting flotsam. (For miners, or for distracting pirates by dumping cargo.)
    Spiffing up the harvestable asteroid explosions a bit.
    Added lists of minable asteroids to all the systems in the map.
    Systems can now define "minables" in addition to normal asteroids.
    Added a "Minable" class, representing a minable asteroid in an elliptical orbit.
    fix(mechanics): Avoid stale click & hover zones when changing the displayed ship
    
    If the player was rapidly cycling through ship, and simultaneously moving the mouse, the game could both change the displayed ship (invalidating the existing zones) and attmept to hover the zones, resulting in a segfault
    
    closes endless-sky#5176
    feat(ui): Provide default values for certain dialogs (#4822)
    
    * feat: Fill the default value in the save and ship rename dialogs
    
    * Implement review feedback.
    
    * Implement further review feedback.
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Using float v. double in some cases of -Wdouble-promotion
    
     - Add some <algorithm> headers for uses of std::min or std::max
    Improve UX for PlayerInfo / ShipInfo panels (#4012)
    
    * Fix handling of "INFO" command in PlayerInfoPanel
     - Default SDL keycode associated with Command::INFO is `i`
     - Issuing INFO from other panels shows the PlayerInfoPanel
     - While PlayerInfoPanel / ShipInfoPanel is active, the key `i` is bound to the "tab" that selects the Player info
       - If the Player info is already open, close it when receiving the INFO / `i` key.
    
    Fixes issue where pressing `i` when viewing PlayerInfoPanel would open the Map to Missions, but pressing `i` when viewing ShipInfoPanel would switch to PlayerInfoPanel
    
    * Allow keyboard to park/unpark from PlayerInfoPanel
     - Interface key is `P`, which is not emitted by keyboards
       - Check instead for `p` and either left or right Shift
       - Not checking for Caps Lock (since it may simply be on for fast-forward mode).
    
    * Allow keyboard to rename and park from ShipInfoPanel
     - Check shift status before navigating to previous
    
    * Follow existing convention
     - `shift` used in other TUs instead of `hasShift`
    Number formatting is now limited to one decimal place, which is enough for all current attributes. Also added a separate formatting function for numbers of credits.
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Several related changes to fighters: they can now run their own systems when being carried (to generate energy, repair, etc.). Their heat level is now indepenedent of the ship carrying them. Fighters now retreat for repairs if badly damaged, and launch only when mostly repaired. And, repair priority is given to the least damaged fighter.
    Avoid pixelation in the ship info panel by never drawing the ship outline at more than 100% zoom.
    Using the new fancy "outline" rendering in the ship info panel, too.
    In the ship info panel's cargo list, outfits now show count and total mass instead of just count.
    Code cleanup: "static" is redundant inside a C++11 anonymous namespace.
    Made it so the jettison confirmation message won't refer to harvested resources as "outfits."
    Fixed a crash when disowning ships, caused by switching to storing the player's ships in a vector instead of a list.
    Added support for "special" log entries, containing whatever you know about a particular person, faction, etc.
    Truncate displayed ship names to prevent overflowing containers (#2631)
    
    * Apply truncation to the front of ship names if selling more than one
    
    Avoids awkward-looking line wraps caused by long ship names when coupled with list-style confirmation dialog.
    Refs #2249
    
    * Extend truncation to other appearances of ship names
    
    Adds front or end truncation to the following locations:
     - Hailing screen: no overflow off right edge for combinations of long ship names and/or long government names.
     - Targeting reticle: no overflow off left edge of ship name
     - Ship detail screen: no overlap of "ship:" and the ship name
     - Shipyard/Outfitter ship details screen: no/minimal overflow out of rounded square border
     - Player Info fleet list: no overflow of ship name across category
    
    Front truncation used where possible, to preserve possible identifying numbers on the tail of the ship name, e.g. the "1" in 'My Ship 1'
    
    * Remove all overlap from Shipyard/Outfitter shared panel
    
    * Font::TruncateMiddle
    
    Allow truncation of strings from the middle out. No special handling to cut in "pretty" locations to do things such as prefer whole-word removal, 2nd-letter starting, etc.
    Changes in border characters from "..." to alphanumerics, plus the slightly reduced width precision of TruncateMiddle vs Truncate(Front) made adjusting some targeted widths necessary.
    Added a "logbook": mission actions can now have "log" entries that automatically get added to the logbook, to remind the player of where they are in the story and what quests they have completed.
    Info panel: avoid crashing if the player has no flagship.
    Handle interface specs that leave no room for the cargo list due to complete overlap with the outfit list overflow.
    Made it possible for a ship's list of outfits in the Ship Info panel to spill over into a third column, reducing the space available for the cargo list.
    Split InfoPanel into separate classes for the fleet listing page and the individual ship page.
    Don't allow reordering weapon hardpoints while a ship is in flight.
    Made the info panel show the true crew count, not the required crew, for any escorts with less than their full crew complement.
    Made it so the amount the fleet lists scrolls on page up / down is independent of the scroll speed setting.
    Raised the maximum combat rating to 21, and capped it there to avoid overflow.
    Made Panel::Click() able to distinguish double-clicks, so that the info panel can switch to a ship only if it is double-clicked, not just clicked twice in a row.
    Added the ability to specify plural forms of outfit and ship model names.
    Fixed some variables that don't need to be mutable now that Panel::Draw() is not expected to be const.
    Added a setting to adjust the scroll speed.
    The sale price of ships and outfits now depreciates over time. If you sell "used" outfits to an outfitter, they remain in stock to buy back (at the reduced price) until you leave the planet.
    Fixed some places where an escort with no sprite can cause crashes.
    Starting to clean up the info panel. Fixed overlapping text and redesigned it to be able to display more weapon hardpoints (12 on each side of the ship).
    Fixed the crash when disowning a ship.
    When dumping commodities, made it possible to specify how many tons to dump.
    Added a "disown" button when viewing ship details while landed on a planet, for the rare cases where you want to disown a ship that you are unable to sell.
    Clicking on your flagship in the info panel will no longer "target" it.
    Little fixes, bank pay all, info panel targeting (#1421)
    
    * add qualify update to Pay All button at bank
    
    The loan total you qualify for wasn't being updated with Pay All
    
    * add viewing a ship in the infopanel in space will target that ship
    
    this is for general convenience and specifically to make selecting wounded ships simpler if you want to board a ship and get out of a system fast
    Now that Interface can handle inactive overlapping buttons, fixed the key shortcuts for Park / Unpark All in the info panel.
    Fixed a bug I recently introduced in the "dump cargo" button.
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    Continuing to work on code cleanup and commenting.
    Starting to go through the code to add more comments and refactor things that are unclear or could cause errors down the road.
    Added a common base class for Ships, Projectiles, Asteroids, Effects, Flotsam, StellarObjects, etc. This is the first step in creating a generic collision detection framework that can deal with different object types.
    allowed dump all cargo on the info screen to dump outfits if theres no commodities
    add check for park button visiblity, off for flagship and disabled ships
    Added "tooltips" that pop up to explain ship and outfit attributes in the shop panels and the ship info panel.
    fix value of dumped outfits missing message
    
    Dumping a specific number of outfits from cargo wasn't displaying the credit value of the dump because DumpPlunder is called which doesn't do that.
    Made it possible to use shift or control to select multiple ships in the fleet listing and then park or unpark them all.
    Cargo dumped by ships can now be picked up by others. Also, destroyed ships sometimes leave cargo behind.
    In the ship info, if you hover over a weapon slot, the line marking that slot is now always drawn on top.
    Added a line to the ship info display that shows the energy cost of repairing shields and hull.
    Formatting fix.
    Fixed segfaults on end() iterator dereference
    Fix whitespace in InfoPanel.cpp
    Changed Panel::Drag and Panel::Scroll to take double dx/dy
    
    Fixes endless-sky/endless-sky#805
    Made it impossible to park a disabled ship.
    Fixed a spot in InfoPanel that was assuming the first ship in the list was the flagship.
    When you dump cargo, your cost basis is now adjusted properly and your loss is reported.
    Added a "cargo box" effect that is shown when you dump cargo.
    Added the ability to jettison plundered outfits to make room for new ones. Also made the ship info panel show current ship mass, cargo, etc.
    When you are not landed, the ship info panel will now allow you to jettison cargo. Also, the boarding panel now lets you call up the info panel.
    Small fix to avoid out of bounds memory access in InfoPanel::DrawList (happens if maxCount = 0 and list.size() = 1).
    More flagship fixes, to handle fighters higher in the list than your flagship.
    Fixed some more bugs that can occur when the first ship in your list is unsuitable to be your flagship.
    Fixed a bug in the handling of the info panel scroll.
    Added support for scrolling the ship list in the player info panel.
    Switched the Escape key to closing dialogs, like people expect it to, instead of always going to the main menu.
    Made it impossible to "park" a ship that is disabled.
    Fixed some inconsistencies that can occur when selling your flagship if the next ship is parked or in another system.
    Modified the info panel to show the minimum crew for all ships except the flagship (since that's all you get charged salaries for).
    Fixed a bug where reassigning weapons to different slots was not working.
    Fixed a bug where if a ship had zero cargo space, it was treated as infinite space. Also fixed a cargo display bug where some lines showed "0 T" of cargo.
    Added Control+W (or Command+W on the Mac) as a universal shortcut for "close current window."
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Switched to using drag & drop to reorder ships or weapons in the info panel, because that's more intuitive than clicking once to pick them up and again to place them.
    Took out most of the overloaded operators for Command, because it is not at all clear how they should handle the turn field, and ignoring it was causing problems.
    Reordering the functions in PlayerInfo and Ship and renaming some of the poorly named ones.
    Added support for "parking" ships (to avoid paying salaries for them), and for renaming ships.
    Added more keyboard shortcuts for viewing the mission panel.
    Fixed a bug where the Info panel was intercepting "toggle full-screen" events.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Fixed some bugs in reordering ships or weapons in the info panel.
    Fixed the ship outlines in the info panel to be pure black; they changed when I reused that swizzle index for cloaked ships.
    Fixed a bug where if you captured and sold an NPC, it would continue to follow you as a free escort until the mission ended.
    Switched the UI code over to using the generic "ClickZone" class in a few more places.
    Updated the info panel to display any player conditions starting with "salary:", "license:", or "tribute:".
    Added combat ratings, which are updated whenever you disable a ship (because that is the hard part) rather than when you kill it.
    Abbreviating the player's net worth with "M", "B", etc.
    Added tracking of "condition" flags that missions can use to determine whether their requirements are satisfied. Used those flags to ensure that each mission is only offered once. (Eventually, there may be some that are allowed to repeat, though).
    Added code to assign new parent ships to "orphaned" drones and fighters.
    Fixed a bug in the info panel where the click zones from the other tab were staying active.
    Updated the UI to use the same three "named" colors everywhere for three different levels of text brightness, for consistency.
    Fixed a crash when trying to display ship info if a weapon slot was empty.
    Added a DrawBackdrop() function to Panel so that individual panels don't have to duplicate that functionality.
    Added a player / fleet panel to the player info display. This includes the capability of reordering ships, including changing your flagship.
    Broke up the info panel into separate sprites with different tabs and buttons active.
    Added the ability to re-assign weapons to different hardpoints (but only when landed on a planet).
    Added a rudimentary ship info panel.
    Reorder some includes to match style (#4430)
    Using float v. double in some cases of -Wdouble-promotion
    
     - Add some <algorithm> headers for uses of std::min or std::max
    Made it possible for an engine flare or afterburner to be integrated in a ship chassis.
    Switched to using 2D "texture arrays" for sprites, so all the frames fit into a single texture.
    Fighters that are launched should not be marked for removal
    Added a new "Visual" class that represents just the information we need to track for an Effect once it's instantiated. Using it in place of Effect saves a string copy and a good deal of memory for each active visual effect.
    Refactored Engine::CalculateStep(), splitting each set of calculations into a separate function to improve clarity and to open a path for possibly multi-threading the most expensive calculations.
    A ship's animation now "pauses" if it is disabled or destroyed.
    Made it so if a ship's sprite is animated, so is the target and flagship outline for it.
    Made it possible to zoom the view in or out (via the scroll wheel or the +/- keys) without changing the UI zoom.
    Continuing to add explanatory comments and clean up messy code.
    Continuing to comment and clean up the code. Asteroids will now display properly on monitors wider than 4096 pixels.
    Added a common base class for Ships, Projectiles, Asteroids, Effects, Flotsam, StellarObjects, etc. This is the first step in creating a generic collision detection framework that can deal with different object types.
    feat(government): Allow customization of the government's displayed name (#4768)
    
    * Support an optional "display name" key for Governments
     - Allow setting a customized display name for a government, rather always displaying the name used to define the government
    
    * Set the display name for existing pseudo-governments
    Allow restriction of scanning / fining by governments (#3187)
    
    * Governments store a filter describing where they enforce laws
    
      - The player can be fined or scanned in any system or planet that matches one of the enforcement zones.
      - If no zones are defined, then the government has universal jurisdiction
    
    * Only ships or planets with enforcement authority perform scans
    Moving the check for negative crew attack and defense to where the values are loaded, since they're loaded once but queried many times.
    Allow modders to override default crew attack/defense values per government (#2708)
    
    * Allow modders to override default crew attack/defense values per government (#40)
    
    * Resolve a type mismatch (#41)
    
    * Move government definition (#42)
    
    * Resolve some style issues (#43)
    
    * Do not allow attack/defense values to be negative (#46)
    Code cleanup: "static" is redundant inside a C++11 anonymous namespace.
    friendlyDisabledHail
    Added facility for a hostile disabled hail
    
    Each government can define a "hostile disabled hail" like a "friendly
    hail" or "hostile hail". If one if missing, the game will default the
    "hostile disabled" phrases, i.e., Shakespearean insults.
    Added checks for references to undefined data (systems, outfits, etc.).
    Pirate raids are now tied to a system's government, so there will not be human pirate raids in alien star systems.
    Added warning messages whenever a line of a data file or saved game is unrecognized.
    A species can now be marked as speaking a different, possibly unknown language.
    Non-heroic ships no longer go out of their way to attack other ships that have them severely outgunned.
    Fixed a bug where fines for illegal cargo or outfits could be assessed for ships other than the one that is scanned or for ships that are not even in-system.
    Fixed a mistake in my previous commit.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added numeric IDs for each government so the hostility matrix can use vector indices instead of string->Government mapping.
    Switched to having the hail messages be a property of each government rather than individual ships or fleets (so that mission-related ships will use them, too, to add a bit of flavor in battles).
    Added convenience functions to Planet and Government to simplify the syntax for querying political state. Also fixed a few busgs in my recent Command and AI changes.
    Added support for illegal cargo and outfit checks when you are scanned or when you land on a planet.
    Made it possible for game events to alter one government's attitude toward another.
    Made it possible to bribe hostile ships to leave you alone. More principled captains will refuse your money, however.
    Got permanent reputation changes working, with Ship::TakeDamage now returning a combination of PROVOKE, DISABLE, and DESTROY depending on the projectile's effect.
    Added a Politics class that can handle governments coming to the aid of allies, tracking the player's reputation in response to different actions, etc.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Added a "flamethrower" weapon, as a test of weapons using fuel as ammunition.
    Modified provocation to fade over time, e.g. if you accidentally shot an allied ship but then don't fire on them again, eventually they will "cool down" and stop attacking you.
    Added GPL statements to all source code files and added a license.txt file.
    Updated the AI to fire each individual weapon on a ship only if it can hit something.
    Engine: updated so that any ship that is hit directly by a projectile is "provoked" against the ship that fired it (even if it was not previously an enemy).
    Fixed blast radii so that they also affect friendly ships, including the ship that fired the weapon in the first place.
    Added a "color" field for governments, and modified the map panel to allow coloring systems by government.
    Uploaded all the files from my local repository to Google Code.
    Apply all feedbacks.
    Support data files encoded by UTF-8.
    Support data files encoded by UTF-8.
    Fixed minor code style issues (#4428)
    More updates to the code comments.
    Code cleanup.
    Added functions to DataWriter for writing a variable number of tokens on a single line.
    Moved all file IO into the Files class, so it will be easy to add support for UTF16 paths under Windows.
    Added brackets and indentation for every BeginChild()...EndChild() pair to improve the code readability (compared to indentation with no brackets, or no indentation at all).
    Moved all the source code files into a "source" folder to clean up the root folder.
    Removed superfluous std:: prefixes.
    Removed some extraneous executable bits.
    Added a "never" keyword to mark conditions (e.g. for completing a mission) that are never satisfied.
    Added the capability for DataFile tokens to be quoted with backticks, so that regular quotation marks can be included within the strings.
    DataWriter: added a function to write a DataNode to a file.
    DataWriter: increased the output precision to avoid scientific notation until it is really needed.
    Added a "DataWriter" class for writing data files safely.
    test: Support test case execution, locally and in CICD (#4998)
    
    * Extend CI environment with graphical testframework
    Adds CI workflow for Ubuntu 16.
    Adds minimal code to main.cpp to run hardcoded empty testcase.
    Changes script for headless testing to run hardcoded testcase.
    
    * Fix coding style issue.
    
    * Updated step names to differentiate between tests
    Renamed existing tests to parsetest_*.
    Renamed the new test to autotest_*
    Re-ordered tests so that all parse-tests are together.
    
    * Changed GameData::Progress check to (menuPanels UI)->IsInitialized.
    As based on review-feedback. Using the same pattern as isDone.
    Removed the isReady variable in the anonymous namespace of MenuPanel.
    Also replaced explicit default constructor for UI by implicit constructor.
    Tested:
    - Quit from main menu
    - Exit during flight (by closing window)
    - Ran the automated test
    
    * refactor: move "are we loaded?" from UI to GameData
     - Add "const" accessor GameData::IsLoaded & backing boolean
     - Remove UI->IsInitialized & associated branching
     - Update class comments / method names to distinguish simple accessors & identify future refactoring opportunities
        Audio::Progress -> Audio::GetProgress, as it is already a simple accessor
     - Disable moving/copying the SpriteQueue class, given that it manages threads
    
    * docs: update --help and man entries
    
    * scripts: exit early if not on a supported headless platform
    
    * chore: Update GameLoop params
    Preloaded conversation data, test, or debug mode are not modified.
    
    Co-authored-by: tehhowch <tehhowch@users.noreply.github.com>
    Added support for streaming MP3s from disk (currently only tested on Linux) for music or ambient sounds.
    Continuing to comment and clean up the code. Asteroids will now display properly on monitors wider than 4096 pixels.
    Disabled pausing on window minimizing, because some people encounter problems getting it to unpause after that, and it's easy to just pause by bringing up the menu instead.
    Modified the audio source coalescing code to add source volumes instead of averaging, and also took out the doppler effect.
    The game is now muted and paused if you minimize the window.
    Made it possible for plugins to supply new sounds.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Added a volume control, and a preferences file that saves the volume and window size in between runs.
    Got basic audio support working. I do need to track down better sounds, or at least balance the audio levels better between them.
    Cleanup & add comment
    
     - If `zone.Value()` is one zoom setting, it is not the other.
     - Restored trimmed tab
     - Update changelog
    Improve dynamic zooming (#3727)
    
    * Improve dynamic zooming
    
    Behavior changes:
    
    - Fixes the view zoom setting getting reset if the window is initially
      created at a smaller size (a likely occurrence when using tiling
      window managers)
    
    - Makes the view zoom restriction dynamic, updating the zoom level as
      necessary in real time as the window size changes, up to the user
      preference
    
    - Updates the view restriction bounds, taking into account both the
      window width and height, to ensure that at least the main menu and
      preferences panel are fully visible and accessible
    
    Code changes:
    
    - Split the "view zoom" value into two logical values:
    
      - User zoom, the setting that exists in the configuration file and
        is visible in the configuration panel
    
      - Effective zoom, used to actually scale the UI - a function of user
        zoom and window size
    
    - Update the code to use the user zoom or effective zoom values as
      appropriate
    
    - Consolidate all view zoom restricting code (from main.cpp and
      PreferencesPanel.cpp) into one place (Screen.cpp)
    
    * Revert Zoom->EffectiveZoom renaming
    & remove duplicated zoom reset
    Updated the "interface" syntax to allow buttons to change color on hover and to simplify the syntax.
    Added support for "@2x" image files to supply double-resolution graphics.
    Simplified the logic for changing the zoom level of the screen, by moving more of it into the Screen class.
    Added support for changing the global zoom factor (for large monitors and for testing high-DPI rendering on normal monitors).
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added some helpful extra location functions to Sprite and Screen (e.g. TopLeft()).
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    feat(graphics): Add comment with shader name (#4995)
    
    This makes it easier to debug compilation errors
    Using float v. double in some cases of -Wdouble-promotion
    
     - Add some <algorithm> headers for uses of std::min or std::max
    Switched to using 2D "texture arrays" for sprites, so all the frames fit into a single texture.
    Code cleanup: "static" is redundant inside a C++11 anonymous namespace.
    When min() or max() takes mismatching types as inputs, where possible, switched to specifying the output type directly rather than casting both inputs to match.
    Fixed a possible memory leak in the "fog" images in the map.
    Made sure the "fog" in the map is redrawn each time you open the map panel, in case you bought a map or explored new territory since the last time you opened it.
    Switched to using the red channel for the fog image, because on the Mac it doesn't seem to support alpha-only textures.
    Added "fog of war" obscuring parts of the map backdrop that are not yet visited.
    Fix non-installed outfits showing depreciated plunder value.
    
    Ref: 88eed52
    Closes endless-sky#4317
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Number formatting is now limited to one decimal place, which is enough for all current attributes. Also added a separate formatting function for numbers of credits.
    NPC "completion" / MissionAction conversations can kill the player and/or NPC (#3376)
    
    * Call ConversationPanel with a pointer to the relevant ship
    
     - Allows destroying the pointed ship depending on the conversation outcome.
     - If the player is killed, the pointed ship should survive, and no BoardingPanel should be displayed.
     - Supply the ship from NPC::Do, to enable destroying the NPC via LAUNCH, DEPART, and FLEE conversation endings.
     - Include a boarding check to prevent an NPC block with a non-boarding completion requirement (e.g. `npc evade`) from displaying a BoardingPanel after the conversation ends.
    
    * Add response handling for non-"on offer" conversations
    
     - Updated PlayerInfo::BasicCallback:
       - attached it to:
         - all NPC completion conversations
           - If actually boarding the NPC, set it as the boarding ship.
       - The player is perhaps not landed: in-flight death implies:
         - capture of the flagship by the ship it was boarding (`die` when boarding)
         - crew mutiny and defection (`die` when not boarding)
         - the destruction of the ship. (`explode`)
     - Added the Conversation::EXPLODE response, based on the keyword `explode`
     - Updated the Ship::WasCaptured code to not over-transfer crew, for the case where the player dies to a conversation offered in-flight and has plenty of crew already.
    
    * Rework PlayerInfo::Die
    
     - Remove need for a private Die() method
     - Update callers of Die(bool) to use Die(int) and achieve the intended result
    
    * Eliminate need for BoardingShip()
    
     - Moved player death handling into ConversationPanel::Exit, where the relevant ship pointer is easily accessed
     - Added pointers to the ship responsible for the boarding mission / npc event into relevant Mission and MissionAction methods, to eliminate need for PlayerInfo::BoardingShip
    
    * Showing BoardingPanel requires a disabled-yet-not-destroyed ship
    
    * Add check for capture / bribery of a boarding ShipEvent's target via a mission NPC's completion conversation
    
     - A more robust method to only offer the BoardingPanel resulting from ConversationPanel::Exit (i.e. no display of sequential BoardingPanels, and obeying the conversation's exit node) should be pursued separately
    Replace most gov->IsPlayer with ship->IsYours (#3600)
    
    * Use IsYours() when possible, rather than querying politics
    
    * Update "isYours" through Ship::WasCaptured
    
    * Set "personality escort" even if an NPC is using government "Escort"
    
     - Ensured all NPCs using the player government have it defined (i.e. always declare the government of the NPC)
     - Use government "Free Worlds" for Free Worlds ships
       - Parole missions / missions involving escorts when only the player has safety continue to use government "Escort"
    Several related changes to fighters: they can now run their own systems when being carried (to generate energy, repair, etc.). Their heat level is now indepenedent of the ship carrying them. Fighters now retreat for repairs if badly damaged, and launch only when mostly repaired. And, repair priority is given to the least damaged fighter.
    Define additional filled colors in interfaces.txt (#3425)
    
    * Define additional filled colors in interfaces.txt
    
     - Further support for modified interfaces / reskinning.
    
    * Added comments to color definitions
    
    * Reflect name change in code too
    Made it so pirates won't steal passengers when plundering. Also cleaned up and simplified the CargoHold transfer code.
    Capturing ships should affect reputation
    
    Previously, capturing a ship didn't actually change your reputation with
    the ship's government. The event never went into the eventQueue, so
    wasn't processed by AI::UpdateEvents and didn't flow into Offend. This
    fix directly runs Offend when you capture a ship.
    Fixing the boarding bug, which was not actually fixed by my previous commit. (Thanks to @EndrosG and @tehhowch for tracking this down.)
    Fixed a bug in my code to add outfits in cargo to the boarding panel.
    Made it possible to plunder outfits from a ship's cargo hold.
    Don't show commodities with a quantity of 0 (due to dumping) in the list of plunder.
    smart refuelling (#2367)
    
    * smart refuelling
    
    * smart refuelling
    
    * smart refuelling
    
    * smart refuelling
    
    * remove compiler warning @endless-sky
    
    * fix > to >=
    
    bug fix for the case of fuel capacity = JumpFuel(), thx @endless-sky
    Split InfoPanel into separate classes for the fleet listing page and the individual ship page.
    Handle the very unlikely case where a carrier is captured when it still has fighters aboard.
    When min() or max() takes mismatching types as inputs, where possible, switched to specifying the output type directly rather than casting both inputs to match.
    Removed death benefits. Depreciation is a better way of balancing ship capture, and death benefits make it less profitable to fight stronger ships than to pick on easy targets, which is backwards.
    Made Panel::Click() able to distinguish double-clicks, so that the info panel can switch to a ship only if it is double-clicked, not just clicked twice in a row.
    Added a setting to adjust the scroll speed.
    Modified the boarding panel to reflect the fact that all plunder is fully depreciated.
    Took out the code in BoardingPanel for assigning fighters to carriers, which is no longer needed since fighters reassign themselves automatically.
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    The boarding panel now takes self destruct into account when showing capture odds (which is unrealistic, but less annoying than having no idea what the odds are).
    Continuing to work on code cleanup and commenting.
    Continuing code cleanup and commenting.
    Continuing to add explanatory comments and clean up messy code.
    change boarding screen to show fractional mass outfits
    Starting to go through the code to add more comments and refactor things that are unclear or could cause errors down the road.
    Made ti so you can capture ships with zero crew required even if you have only one crew.
    0.9.2 updates
    Made it possible to capture fighters whether or not you can carry them.
    You can now cancel "capture ship" without fighting by clicking "defend" as your first action.
    Fixed the scroll direction of the plunder list.
    Added an "uncapturable" ship attribute, and modified the boarding panel to handle it.
    Marked all hand-to-hand weapons as unplunderable so there does not need to be a special case to handle them.
    Add support for "unplunderable" attribute.
    Added support for fighter bays where the fighter it is carrying is visible, drawn either below or above the ship.
    Fix inverted drag motion in BoardingPanel
    Changed Panel::Drag and Panel::Scroll to take double dx/dy
    
    Fixes endless-sky/endless-sky#805
    Made "self destruct" allowed to have a probability between 0 and 1. It is checked once before you are allowed to plunder, and again before you are allowed to capture.
    Fixed the bug where you retain control of your flagship after it is captured.
    When plundering ammo, it is loaded into your weapons if you have the capacity for it.
    When you are not landed, the ship info panel will now allow you to jettison cargo. Also, the boarding panel now lets you call up the info panel.
    Added support for arrow key and page up / down in the boarding panel, for selecting which item to plunder without using the mouse.
    Fixed some more bugs that can occur when the first ship in your list is unsuitable to be your flagship.
    Switched the Escape key to closing dialogs, like people expect it to, instead of always going to the main menu.
    My previous change to support losiong your ship through boarding combat broke the handling of having your ship die normally. Fixed that.
    Fixed a bug where if your ship is captured, you retain control of it.
    Added Control+W (or Command+W on the Mac) as a universal shortcut for "close current window."
    Made it so that if, somehow, your ship has negative cargo space free, the boarding panel will not let you take anything.
    Fixed the direction of the BoardingPanel's list scrolling (when the scroll wheel is used).
    Modified the boarding panel to only offer to let you capture a fighter or drone if a ship in your fleet has a bay free for it.
    Fixed the issue where the boarding panel capture text is not properly limited to 5 lines of text.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Removed some TODOs that have already been fixed.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Reordering the functions in PlayerInfo and Ship and renaming some of the poorly named ones.
    Code cleanup: always referring to the player's ship as "flagship."
    Updating the behavior of fighters so they pick a new carrier if their parent is full, and so that when you capture a fighter it will be assigned to any ship in your fleet that can hold it (starting with your flagship).
    Cleaned up the AI considerably, especially the logic for when a ship acts independently vs. as an escort. Also made various player commands (depoly, cloak, fight, gather, hold) apply only to ships owned by the player, not all escorts.
    Switched to another equation for crew bonuses: captain gets two shares, families of dead crew members each get one.
    Switched the "crew bonus" for capturing a ship to be based on the percent of your crew that died in the fight, so the bonuses do not eat up all your profits when you're in a larger ship.
    Modified the boarding panel so it will not let you attack if you have only yourself left as crew.
    Added convenience functions to Planet and Government to simplify the syntax for querying political state. Also fixed a few busgs in my recent Command and AI changes.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Fixed a bug where if you captured and sold an NPC, it would continue to follow you as a free escort until the mission ended.
    Spell-checked the comments.
    For capturing ships, added a "death benefit" that must be paid based on how many of your crew members died, which reduces your profit margin.
    Added proper handling for a dead player (through conversations, combat, or a failed attempt to capture a ship).
    Reduced the crew's "share" of the bonus for capturing a ship, and eliminated their bonus for plundering it, to make plundering a more viable alternative to missions for a mid-level captain.
    Modified the ship capturing logic to also make sure the newly captured ship has at least one jump of fuel, if you can spare any.
    Added "bonus" payments that must be made to your crew if your ship has more than one crew member and you plunder or capture an enemy ship. This is to make plundering less ridiculously lucrative.
    Modified the boarding dialog to not allow plundering while you are in hand to hand combat.
    Switched Engine to using the new ShipEvent class to report when a ship is boarded.
    Added a Politics class that can handle governments coming to the aid of allies, tracking the player's reputation in response to different actions, etc.
    Updated the UI to use the same three "named" colors everywhere for three different levels of text brightness, for consistency.
    Added a DrawBackdrop() function to Panel so that individual panels don't have to duplicate that functionality.
    Fixed some glitches in the handling of capturing, and added the capability to "repair" damaged ships of your own by boarding them. Also tweaked the escort AI to not engage enemies if badly damaged.
    Added Player::GetGovernment() so its name doesn't have to be hard-coded in many separate classes.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Added a Random::Real() function, and refactored to use Random everywhere (because old-fashioned rand() is considered deprecated now.)
    Fixing a typo in the code.
    Made it impossible to plunder hand-to-hand weapons from a ship.
    Added support for target ship outlines to be colored based on friendly / hostile status.
    Got capturing working, at least for your flagship. Other ships can't capture other ships yet.
    Added calculation of capture odds and casualties to the boarding dialog.
    Added a "boarding" dialog that lets you choose what commodities or equipment to plunder from a disabled ship. (Capture is not yet implemented.)
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Added a "news" system for displaying messages from local inhabitants you meet in the spaceport.
    Made sure that all "landing" missions have been offered before you take off from a planet.
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    Switched to a more generic solution for multiple key presses where one opens or closes a new UI panel.
    Fixed a PlanetPanel glitch with simultaneous key presses closing the panel while popping up another.
    Added a confirmation dialog if you take off with drones, fighters, or plunder that you do not have space for.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Modified the new mission implementation so that missions can also be offered as soon as you land (e.g. to handle continuation of existing missions), and used that to create a "first contact" conversation that is shown the first time you land on any Quarg world.
    Switched over to the new Mission implementation. There are still some aspects that are not working yet (like, the job board).
    Replaced the old, very limited "callback" class with function pointers that can be given any method name.
    Added support for basic "special missions," offered in the Spaceport on certain planets.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Added a "mission panel" that lets you select missions from a job board. It doesn't support scrolling or mouse clicks, yet.
    Added a panel to the planet dialog for hiring and firing extra crew.
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Switched the outfitter to only selling outfits available on this planet or that you sold them. That required moving the flight check into the outfitter, so you don't sell your engines on a planet with none for you to buy.
    Added a "pre-flight check" that makes sure you have thrusters and steering installed and enough energy to drive them, and warns you otherwise rather than letting you take off.
    Got the Load / Save panel working.
    Added GPL statements to all source code files and added a license.txt file.
    Got "New Pilot" working, including visiting the shipyard and picking out an initial ship.
    Added saving of the game (every time you leave a planet, or if you quit while on a planet).
    Updated how the UI panels are handled to allow the main menu to be called up regardless of what the game state is.
    Uploaded all the files from my local repository to Google Code.
    NPC "completion" / MissionAction conversations can kill the player and/or NPC (#3376)
    
    * Call ConversationPanel with a pointer to the relevant ship
    
     - Allows destroying the pointed ship depending on the conversation outcome.
     - If the player is killed, the pointed ship should survive, and no BoardingPanel should be displayed.
     - Supply the ship from NPC::Do, to enable destroying the NPC via LAUNCH, DEPART, and FLEE conversation endings.
     - Include a boarding check to prevent an NPC block with a non-boarding completion requirement (e.g. `npc evade`) from displaying a BoardingPanel after the conversation ends.
    
    * Add response handling for non-"on offer" conversations
    
     - Updated PlayerInfo::BasicCallback:
       - attached it to:
         - all NPC completion conversations
           - If actually boarding the NPC, set it as the boarding ship.
       - The player is perhaps not landed: in-flight death implies:
         - capture of the flagship by the ship it was boarding (`die` when boarding)
         - crew mutiny and defection (`die` when not boarding)
         - the destruction of the ship. (`explode`)
     - Added the Conversation::EXPLODE response, based on the keyword `explode`
     - Updated the Ship::WasCaptured code to not over-transfer crew, for the case where the player dies to a conversation offered in-flight and has plenty of crew already.
    
    * Rework PlayerInfo::Die
    
     - Remove need for a private Die() method
     - Update callers of Die(bool) to use Die(int) and achieve the intended result
    
    * Eliminate need for BoardingShip()
    
     - Moved player death handling into ConversationPanel::Exit, where the relevant ship pointer is easily accessed
     - Added pointers to the ship responsible for the boarding mission / npc event into relevant Mission and MissionAction methods, to eliminate need for PlayerInfo::BoardingShip
    
    * Showing BoardingPanel requires a disabled-yet-not-destroyed ship
    
    * Add check for capture / bribery of a boarding ShipEvent's target via a mission NPC's completion conversation
    
     - A more robust method to only offer the BoardingPanel resulting from ConversationPanel::Exit (i.e. no display of sequential BoardingPanels, and obeying the conversation's exit node) should be pursued separately
    Fixed some things that Google's cpplint warns about (mostly, constructors that should be marked explicit).
    Continuing code cleanup and commenting.
    Fix strange "launched on Remembrance Day" bug.
    
    There must be somewhere I haven't found where a conversation result is
    hard-coded. Missions with no result (like Remembrance Day) were causing
    LeaveImmediately() to be true.  Changing the order of the conversation
    enum values back fixes it.
    Add "depart"="defer+leave" and allow "on defer" callbacks.
    Errors in conversations will now print a full "trace" of the error location.
    Removed some TODOs that have already been fixed.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added a "flee" conversation option, meaning: launch + decline.
    Modified the Conversation class so that a "scene" image can be inserted at any point, and modified one of the Free Worlds missions to test that.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Gave conversation the ability to modify conditions or to branch based on existing conditions.
    Got planetary defense missions working (three different templates for the Core, North, and South).
    Got serialization of conversations working (without bothering to preserve the original node label strings).
    Added support for basic "special missions," offered in the Spaceport on certain planets.
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Added GPL statements to all source code files and added a license.txt file.
    Updated Conversation to allow typing in your name (for the intro text). Also added an option for a "scene" picture, and a better UI panel.
    Uploaded all the files from my local repository to Google Code.
    fix(visuals): Only show selected ship names if dragging/reordering
    
    The player doesn't need to see an overlay with the ships they have selected when they simply click one of the ships in the ship list
    fix: Add override to AllowFastForward() where appropriate to remove compiler warnings (#5194)
    feat: Switch off fast-forward if the player is not in flight (#5148)
    
    This is so that the behavior of fast-forward is consistent between panels (#5038). This also gives the player extra time to react when coming out of a boarding panel or on enter conversation by turning fast-forward off if it was on when entering the panel.
    
    The map panel and player info panel are exceptions to this, as they are panels that are commonly accessed and can be accessed at any time while in flight.
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    In the fleet list, made it possible to click and drag all the selected ships as a block, instead of having to reorder ships one by one.
    Added a help message explaining how to set which escort is your flagship that is shown in the player info panel, the outfitter, or the shipyard the first time the player has multiple ships in their fleet.
    Split InfoPanel into separate classes for the fleet listing page and the individual ship page.
    Added constructors that call Load() on a data element, so construction and Load() don't have to be done in two separate steps.
    Made it possible for the start conditions to include the player owning one or more ships.
    Extended the error reporting to also handle nodes that can contain arbitrary condition expressions.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added the ability to define the starting conditions (credits, mortgages, location, salaries, licenses, etc.) in the data files, to support "total conversion" mods.
    fix(bug): Save the variant name of gifted ships (#5403)
    feat(mechanics): Save collections in order by element name (#5333)
    
    * feat(saves): write collections in deterministic order when saving
    
    * refactor: simply methods via capture lambdas
    
     - No need to pass DW instance around
     - use more "using" declarations to simply method declarations
    
    * pr feedback + lambda styling
    
     - applied a more uniform style to lambda expressions
    feat(mechanics): Save ship outfits in alphabetic order (#5319)
    
    * Save ship outfits in alphabetic order to savegame.
    
    As requested in https://github.com/endless-sky/endless-sky/issues/5171
    
    * Process review comments.
    feat(mechanics): Basic support for custom hardpoint angles, non-converging weapons (#4801)
    
    * Add gun-port angles and convergence setting.
    Allows content-creators to create ships with non-forward facing gun-ports.
    Also allows content-creators to set convergence for guns.
    
    * Allow some weapons to be non-parallel / non-converged.
    * Update source/Armament.cpp
    Simplify the code by providing booleans directly to hardpoints.emplace. (As suggested by Amazinite and tehhowch.)
    
    * Process review comments
    * Processed review comments
    docs: File comment improvements (#5255)
    
    Improved some ambiguous text about threads and thread safety.
    Fixed some spelling issue.
    feat(mechanics): The sounds and effects of a drive can now be customized (#5044)
    fix(mechanics): Avoid division by zero in IdleHeat
    
     - add missing "heat dissipation" to Timer Ship
    feat(mechanics): player can deploy/recall individual carried ships (#4719)
    
    * Deploy and recall only selected by the player instead of all ships.
    
    Implemented by a deploy variable per (carried) ship instead of a single global variable.
    
    Tested (OK):
    - Deploy and recall for flagship
    - Deploy of only subset of ships
    - Deploy and recall for escort
    - Deploy of only subset of ships (together with escort)
    - Deploy and recall of AI controlled ships
    - Return (and not deploying) damaged fighters
    - Recall of fighters (to escort) if player is out of system
    
    * Process review comment.
    
    * Remove some unneeded whitespace
    
    * Process review comments.
    
    - Issue deploy commands to the fleet when no deployable ships are selected.
    - Removed never displayed message.
    - Renamed IsLaunching to HasDeployments for clarity.
    - Renamed fighter to "carried ship" for consistency.
    
    Tested that deploy with non-deployable ships selected will deploy for the full fleet.
    
    * refactor: Update methods
    
     - rename & reoder Ship class methods
       - apply only to Player ships, but "IsDeploying" sounds applicable to all ships
     - update `IssueDeploy`
       - move conditions into shared lambda
       - group ships to deploy and ships to recall, to limit iteration passes
       - restore silent behavior of pressing D when no ships can deploy/recall
    feat(mechanics): Allow arbitrary bay facing angles (#4749)
    
    * Allow bays under any angle
    
    Bay is now internally using an angle instead of a facing (index) variable.
    Standard angles like 90 degrees and 180 degrees are still written out as right and back.
    Non-standard angles are read and written using the angle child keyword.
    
    * Added tag-reading as discussed for format as shared with endless-sky#4539.
    
    * Apply suggestions from code review
    
    Apply suggested review-changes.
    
    * Processed review comments
    
    - Simplified Save by just saving the angle if it is non-zero instead of converting back to keywords left/right/under.
    - Write out bay.side on separate line according to spec as discussed with Amazinite.
    
    * Update to ES whitespace style.
    refactor(mechanics): Change bay type identification to categories (#4391)
    
    * Change bay type identification to categories
    
    Change the ways bay types are identified from boolean to the category of
    the ship that is to be carried in the bay.
    
    This will make it easier to add new bay types in the future and/or to
    load bay types from data files instead of having them hardcoded.
    
    Signed-off-by: Peter van der Meer <peter.vd.meer@gmail.com>
    
    * Fixed some style issues
    
    * Processed review comments
    
    * Update code merged from master to categories.
    
    * Process first set of review comments
    
    - Renamed forCategory variable to category.
    - Added function to Ship to get total number of bays for a category.
    - Use total instead of free bays for display in-flight.
    - Changed launch-speed-check to use automation attribute of carried ship.
    - Added check if bay is a known type during loading.
    - Restored the Engine::Place per-category carrier selection for NPCs.
    
    Retest after rework:
    - Performed minimal load / flight / reload test with carriers, fighters and drones.
    
    * Processed review comments
    
    - Added use of const string references
    - Fixed some style issues
    - Use continue instead of intending a large block
    - Update code to make automated ships launch faster than crewed ships again
    
    * style: minor touchups
    fix: Reverse engines always set their angle to 180, not only if an angle is specified
    feat(mechanics): New enginepoint types and support for over/under and angled engine flares (#4539)
    feat(mechanics): Piercing resistance attribute for reducing the effect of incoming piercing projectiles (#4521)
    feat(mechanics): "Protection" attributes that mitigate a fraction of incoming damage (#4519)
    feat(mechanics): Support multipliers for shield generation and hull repair related stats (#4525)
    
    * Added multiplier attributes for shield generation and hull repair related attributes
    
    * Display multiplier attributes as percentages
    
    * Fixed tooltips
    
    * ShipInfoDisplay now takes multipliers into account
    
    * Don't show shield/hull repair stats if the multiplier is <= 0
    
    * Fixed accuracy of various calculations and updated hasShieldRegen and hasHullRepair
    
    * Hard coded a whitelist for the multipliers to allow them to be negative
    
    * Code simplification
    
    * Error fixes
    
    * Revert whitelist changes
    
    Let whitelist changes occur in a separate PR
    
    * Updated hasShieldRegen and hasHullRepair
    
    Negative costs no longer block repairs
    
    * Removed now unnecessary fuel calculations in ShipInfoDisplay
    
    * Update ShipInfoDisplay.cpp
    
    * Update ShipInfoDisplay.cpp
    
    * Moved variables back to their previous locations (as they're no longer needed to computer hasShieldRegen or hasHullRepair)
    
    * Use conditional operators instead of multiplying by a boolean
    
    * Change the wording in the tooltips
    
    * Added multiplier attributes to the whitelist
    
    Values down to -1 are allowed. This means that at their lowest value, multipliers will have a -100% effect on the specified stat. They can not go lower then this, because then they would be flipping the sign on whatever the stat is, e.g. causing a shield generator to go from consuming energy to producing it.
    fix(graphics): Avoid velocity-based "sliding" of Visuals
    
    Ref 8a13777ad8ca580e34e01e8129ba61232fcaafbf
    
     - Only projectiles are drawn with a + .5*velocity shift
       - This should be removed in the future pending custom Sprite drawing positions
     - Remove unused DrawList method
     - Avoid creating afterburner visuals based on non-final Ship::velocity value
    
    Closes endless-sky#4261
    fix(mechanics): Count all ships which cannot depart the system
    
    ...even if they have a different warning displayed.
    
    While Ship::FlightCheck now reports all warnings, only the first warning is displayed in the Shipyard / Outfitter.
    (Before displaying e.g. up to 3 warning tooltips, we must determine their relative priorities and verify the checked condition parameters make sense due to the branching changes)
    
    Closes endless-sky#4949
    feat: Negative repair costs no longer block repairing (#4932)
    
    Installing outfits with a negative repair cost is not yet possible though.
    feat: Solar heat mechanic for increased heat generation the closer you are to the system center (#4894)
    feat(escorts): Allow "next fuel cost" calculation to use parent's destination (#4417)
    
    Escorts with more than one hyperdrive type can now determine if they have the necessary amount of fuel before their parent begins leaving the system, meaning:
     - their escort icons will not display red unless they actually need more fuel
     - they will no longer engage hostiles while the player is holding J
    feat(weapons): Support variable ammo quantity consumption (#4514)
    
    * Added an "ammo usage" weapon attribute that determines how many units of ammo are consumed on fire
    
    * Ammo usage now shows in the outfitter
    
    * Syntax change
    
    * Spacing
    
    * Spacing
    
    * Tidying up the code
    
    Removed the IsWeapon check from the display because any outfit with a >1 ammo usage is guaranteed to be a weapon.
    
    Used a conditional operator in Weapon.ccp to cut down on code.
    
    * Allow an ammo usage of 0
    
    The outfit must still be installed in order to fire.
    
    * Renamed ammoPair to just ammo and left a comment explaining what it is
    
    * Added another comment for clarification
    
    * #include <utility> in Weapon.h for the ammo pair
    Save thumbnails, just as we save sprites. (#4527)
    
    * Save thumbnails, just as we save sprites.
    
    This will allow variants with different thumbnails to have their thumbnails be preserved through a save/load cycle. Fixes #4503.
    
    * Update changelog.
    Add an article "the" before ship names when appropriate (#4147)
    
    * Add an article "the" before ship names in bounty hunting missions
    
    * Add extra article "the" and other minor changes to improve consistency
    
    * Add the article "The" where appropriate to ship names
    
    * Make the references to <ship> consistent with an article "the"
    Add a "battery too small to fire weapon" flight check warning (#4177)
    
    that triggers if at least one weapon can't be fired because the ship's maximum available energy is too low
    Ships depart from their previously-specified planet (#4111)
    
    * Allow special ships to define a planet to depart from
    * Parked ships remember the planet they were parked on
       - As in `TakeOff` code, parked == disabled: no cargo transfer, and no need to recharge.
         (Parking can only be done when landed, so this will have already been done for any parked ships.)
       - When loading the player's save, only supply a planet for in-system ships that do not have one.
    
    * Only set a ship's planet if it doesn't have one
     - PlayerInfo::Land is called as a part of game startup
       - Ships unparked will not jump between in-system planets due to save reloading
    
    * Use Fleet::Place for generic in-space positioning
     - Remove effectively duplicated code from Engine
     - Any ship that is spawned in flight in the player's system is not over the reference planet unless it is taking off
    Introduce new fuel-based Outfit attributes (#3870)
    
    Implements new reserved Outfit attributes `"fuel consumption"`, `"fuel generation"`, `"hull fuel"`, and `"shields fuel"`, and provides errors / warnings for poorly equipped ships using fuel for energy.
    Using float v. double in some cases of -Wdouble-promotion
    
     - Add some <algorithm> headers for uses of std::min or std::max
    Add last-chance fleeing opportunity to docked ships
    
     - Ships still docked to a destructing carrier have a good chance of departing before its death
     - Any ships that "eject" may be destroyed themselves, if they were not healthy
     - Ejecting ships have no time to resupply on ammo or fuel
    Destroy any still-docked carried ships
    
     - Emit ShipEvent::DESTROY events, for missions that need to know
    
    Refs https://github.com/endless-sky/endless-sky/issues/4130
    Use class member function to express intent
    
    Rather than the underlying (albeit simple) code.
    Increase warning visibility on Windows systems
    
     - Windows console / stderr / stdout output is hampered for GUI applications
     - Replace usage of cerr for logging errors with Files::LogError, which
       will echo to cerr and also to a file.
    Build portable binary in CI tools
    Remove ammo restocking
    
    (pending decision on arm-from-cargo vs arm-from-installed)
    Increase the cached carried mass when resupplying fighters with ammo
    
     - Fighters that resupply with ammo are heavier upon departure than they
    were on arrival
     - Fuel is weightless (for now) so no compensation is necessary.
    Split reboarding logic to own method
    
     - Avoid attempting to board a disabled parent (lest one attract enemy attention to it)
     - Avoid stranding the carrier when dispensing fuel
     - Ammo outfits should come from the carrier's installed outfits
       - Prevents "infinite resupply" if the carrier is picking up ammo as flotsam
       - Similar to ability to restock launchers when plundering disabled enemies
     - Add reboarding logic for harvesting fighters
    Fighters return to the carrier for ammo and fuel
    
     - Rearm and refuel when launching
    Carried ships unload collected cargo into carrier's cargo bay
    
     - Unless the carrier is a player ship
       (since cargo is loaded into player escorts before the flagship, launch + recall could transfer items from escorts into the flagship's hold, preventing the player from plundering without first jettisoning outfits that were originally stored without issue.)
    Print warnings for ships with negative space
    
     - Scans for the "big 4": outfit, weapon, engine, and cargo
     - If one or more is negative, prints the outfits & attributes to stderr, along with the model name (and ship name, if defined)
     - Most useful for checking stock variants for issues following changes to outfit attributes.
    Use a preference to control fighter repair strategy
    
     - The player can choose between least need (series) and most need (parallel). Maintains the default strategy of least need for AI ships and players who have not set the preference.
    Issue deprecation warnings & simplify some code (#4000)
    
    * Fix osx compile warning
    
    * Emit warnings for deprecated turret specs and homing w/o tracking
    
    * Require ranges / radii to be non-negative
    
    * Replace implicit defaults with explicit values
    
    * Handle deprecated "cargo scan" and "outfit scan"
    
    * Replace locally repeated code with local lambda
    Support launch effects for carried ships when departing from their carrier (#3602)
    
    * Support "launch effect" child node for carrier bays
    
     - Allows specifying multiple effects, and a count of how many of each, e.g.
        "launch effect" "door sparks" 5
        "launch effect" "decompression"
    
    * Provide a fallback effect for certain bay types
    
    For non-automaton ships, any internal (i.e. pressurized) bays will use a default effect if none were specified
    
    * Remove unnecessary includes
    
     - Angle & Point includes were needed before `Visual` took the responsibility for placement of effects
    Ships without fuel to jump display a "no fuel?" warning in Shipyard
    
    https://github.com/endless-sky/endless-sky/pull/3843
    * Add `no fuel?` warning
    
    * Add `no fuel?` tooltip
    
    * check against jump fuel
    
    * updated tooltip
    
    * `!canBeCarried` order
    
    * combined lines
    
    * improved no fuel tooltip
    
    * changed to "insufficient fuel"
    
    * JumpFuel()
    
    * fuelCapacity
    Ships cannot have negative outfit counts
    
    This is a core assumption of ShopPanel code, attribute combination, and so on.
    Adds support for weapons that use heat as a resource rather than a cost.
    
     - Simply prevents a weapon from firing if it would reduce your heat below 0
     - To make use of this, create weapons with negative heat costs
    Remove compiler warnings issued by clang-902.0.39.2
    
     - Prefer auto for small-scope vars with long type names
    Made the disabled hull cutoff always be a whole number so a ship's disabled state won't be changed by rounding when saving and reloading.
    Shifted the disabled hull percent range from 20-50% to 15-45%, with a more gradual transition between them.
    Modified the HUD to show the hull level at which a ship will be disabled.
    Switched the "hit force" calculation to be 70% based on mass instead of 50%, to reduce the effect on large ships while still avoiding having tiny ones rocket off at absurd velocities.
    Consider target's heat level when picking targets (#3493)
    
    * Allow Ship::Heat() to exceed 1.
    
    * Deprioritize highly overheated targets
    
    * Display excess heat as a segmented overlay bar
    NPC "completion" / MissionAction conversations can kill the player and/or NPC (#3376)
    
    * Call ConversationPanel with a pointer to the relevant ship
    
     - Allows destroying the pointed ship depending on the conversation outcome.
     - If the player is killed, the pointed ship should survive, and no BoardingPanel should be displayed.
     - Supply the ship from NPC::Do, to enable destroying the NPC via LAUNCH, DEPART, and FLEE conversation endings.
     - Include a boarding check to prevent an NPC block with a non-boarding completion requirement (e.g. `npc evade`) from displaying a BoardingPanel after the conversation ends.
    
    * Add response handling for non-"on offer" conversations
    
     - Updated PlayerInfo::BasicCallback:
       - attached it to:
         - all NPC completion conversations
           - If actually boarding the NPC, set it as the boarding ship.
       - The player is perhaps not landed: in-flight death implies:
         - capture of the flagship by the ship it was boarding (`die` when boarding)
         - crew mutiny and defection (`die` when not boarding)
         - the destruction of the ship. (`explode`)
     - Added the Conversation::EXPLODE response, based on the keyword `explode`
     - Updated the Ship::WasCaptured code to not over-transfer crew, for the case where the player dies to a conversation offered in-flight and has plenty of crew already.
    
    * Rework PlayerInfo::Die
    
     - Remove need for a private Die() method
     - Update callers of Die(bool) to use Die(int) and achieve the intended result
    
    * Eliminate need for BoardingShip()
    
     - Moved player death handling into ConversationPanel::Exit, where the relevant ship pointer is easily accessed
     - Added pointers to the ship responsible for the boarding mission / npc event into relevant Mission and MissionAction methods, to eliminate need for PlayerInfo::BoardingShip
    
    * Showing BoardingPanel requires a disabled-yet-not-destroyed ship
    
    * Add check for capture / bribery of a boarding ShipEvent's target via a mission NPC's completion conversation
    
     - A more robust method to only offer the BoardingPanel resulting from ConversationPanel::Exit (i.e. no display of sequential BoardingPanels, and obeying the conversation's exit node) should be pursued separately
    Made it possible for an engine flare or afterburner to be integrated in a ship chassis.
    Added support for hull "leak" effects, when a dying ship is venting atmosphere / flames / blood / whatever.
    Update Ship::Health calculation
    
     - function can return <0 (e.g. hull damaged beyond minimum hull) so updated comments
     - considers both "pooled" health (hull + shields) and hull-only health
     - pooled health considers disruption damage to shields
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Added support for shipyard "thumbnail" images for ships.
    Enabled text replacements in ship hails (#3716). (#3728)
    
    * Enabled text replacements in ship hails (#3716).
    
    This change allows these text replacements to be used in ship hail strings:
    - <first>, <last>
    - <ship>
    - <system>
    - <npc>
    - <date>, <day>
    
    * Fixed variable name.
    Add a "no hyperdrive" flight check.
    Replace most gov->IsPlayer with ship->IsYours (#3600)
    
    * Use IsYours() when possible, rather than querying politics
    
    * Update "isYours" through Ship::WasCaptured
    
    * Set "personality escort" even if an NPC is using government "Escort"
    
     - Ensured all NPCs using the player government have it defined (i.e. always declare the government of the NPC)
     - Use government "Free Worlds" for Free Worlds ships
       - Parole missions / missions involving escorts when only the player has safety continue to use government "Escort"
    Renamed "isCarried" to "canBeCarried" for clarity.
    Refactor some AI functions (#3531)
    
    * Refactor strength-updating code into private method
    
    * Use roster to limit scope of strength update loop
    
    * Split swarming behavior to own method
    
     - Extended logic checks to ensure swarmCount entries get decremented when the targeting ship lands
     - Increased "rendezvous velocity" from 0 to .5 max speed, in the direction of the target
    
    * Bugfix for swarming behavior
    
     - Reordering of personality behaviors after autofiring meant that swarming ships (which have no or a non-hostile target) would always get their target cleared, outside of a code block that knows to manage swarmCount
     - Only ships which entered the player's system would get swarmed, and only for a short period of time (before swarmCount could "fill up" the new ships' quota of swarming assistants).
     - Restores effectively pacifist behavior of `personality swarming` that was observed from v0.9.1 to v0.9.7
    
    * Move Hyperspacing condition check
    
     - FindTarget and Autofire make no sense for hyperspacing ships as they cannot fire - Ship::Fire requires the ship to not be hyperspacing.
       - Ships can still aim turrets at other ships
     - Ships which are launching or landing similarly do not need to decide how to move
       - Updated the DoSwarm exit check so that a landing ship does not ever take a new target
       (a ship decides to land on one frame, and then begins decreasing zoom on the next, so Swarming ships that choose to land will still release their target)
     - Remove "IsTargetable" from checks that should be available to ships which are not in the player's system (such as assisting).
       - IsTargetable references the `forget` parameter, which is only 0 if the ship is in the player's system.
    
    * Cache a ship's carried status during FinishLoading
    
    * Update carried ship handling block
    
     - Rescope is drone/is fighter check to only carried ships
     - If a fighter had to choose a bayless parent (because none of its allies could carry it), only check for a new parent every ~5s rather than every step.
     - Removed duplicated BaysFree check (CanCarry performs it too).
    
    * Retreating applies to fighters and other NPCs at the same "health"
    
    * Update FindTarget
    
     - Changed ambiguous 'isPlayerEscort' to 'isYours' since it is referring only to a player-owned ship and not also NPCs with personality escort
     - Used existing variables if they had already been defined (person, system)
     - Rescoped attribute.Get calls to only be done if they are relevant, rather than for every ship.
     - If an NPC isn't targeting a hostile ship (e.g. it is going to scan its target), then it doesn't need to consider retreating.
    
    * Remove duplicated FindTarget call
    
     - FindTarget is called prior to entering DoSurveillance, so if the ship has no combat target, seeking one again on the same frame will not yield different results
    
    * Update DoSurveillance
    
     - Rescope attribute calls into only the branches which need them
     - Performing an "atmosphere scan" of a station was probably unintended
     - Drop unnecessary "hyperdrive" check
       - JumpsRemaining is 0 if the ship has no hyperspace ability, thus only checking for a jump drive is sufficient
    Reverting the patch for the short-lived ship mass bug. Also replaced Outfit::Reset() and Outfit::Add() with a single Set() function.
    When unloading bays, update cached carried mass
    Added constructors that call Load() on a data element, so construction and Load() don't have to be done in two separate steps.
    Further fixes to the repair heat code. (@tehhowch)
    Fix divide-by-zero in the repair heat calculation.
    Weapon blast strength decreases with distance from blast (#3276)
    
    * Weapon blast strength decreases with distance from blast
    
     - To mitigate the damage falloff for weapons with a trigger radius, a multiplier based on the ratio of trigger and blast radius is used.
     - For a weapon with 0 trigger radius, the damage will range from 100% at the center, to 25% at the edge of the blast radius.
    
    * Use worst-case distance estimate rather than exact computation
    Save a ship's base mass. (#3481)
    
    * Save a ship's base mass.
    
    * Manipulate the "mass" attribute the same way as other attributes.
    
    * Use the chassis mass of the ship's model.
    
    Fix broken save files of issue #3480
    Tweaked the mechanics of hit / firing force to increase its effect on large ships and decrease the effect on small ships, so large ships can't shrug it off completely and small ships aren't sent flying quite as far by every ship explosion. Also increased hit force for most missile weapons.
    Several related changes to fighters: they can now run their own systems when being carried (to generate energy, repair, etc.). Their heat level is now indepenedent of the ship carrying them. Fighters now retreat for repairs if badly damaged, and launch only when mostly repaired. And, repair priority is given to the least damaged fighter.
    Revert automatic assertion in FinishLoading that a ship is not disabled
    
     - 2633668c9f9c5933cbf8f0a98c855ab7b9345d20 made it so that every ship that FinishLoading is called for considers itself not disabled - even if its current hull and shields value mean it should be disabled.
    Carried ships forget their target system/object when reboarding
    
     - Directly clear the carried ship's target system and target StellarObject upon boarding its parent.
     - Add a nullptr check for `currentSystem` in Ship::IsReadyToJump.
     - Add a nullptr check for `currentSystem` in Ship::JumpFuel
    Adding back in one defensive check and fixing some formatting.
    Change Outfit * to Weapon *, warn on incorrect armament specifications
    
     - Swapped the Outfit pointers to Weapon pointers for the associated ship firing methods
     - Print warning messages for incorrect armament specifications:
       - guns positioned in turret hardpoints
       - turrets positioned in gun hardpoints
       - non-weapons positioned in any hardpoint.
    Fixing a bug where FinishLoading() is called more than once if an NPC ship is copied from a stock ship.
    Allow non-player ships to emit ShipEvent::ASSIST when repairing ships
    
     - Also adds ShipEvent::BOARD and ShipEvent::ASSIST to the list of ShipEvents that only count toward NPC completion when performed by the player
    Propagate the "WAIT" command down to escorts of escorts, to synchronize jumping.
    Fixed a situation where, if a hardpoint specified a weapon outfit that the ship didn't have and that outfit hadn't been loaded yet, it wouldn't be properly removed.
    Made solar collection and ramscoop rates vary from system to system depending on the star(s).
    Added support for special "persons" with multiple ships. The "person" can regenerate all its ships unless you kill the flagship.
    Made it so pirates won't steal passengers when plundering. Also cleaned up and simplified the CargoHold transfer code.
    Fix misspelling of deceleration (#3222)
    
    * Fix misspelling of deceleration
    
    * Update Ship.cpp
    Suspend the boarding approach when too far away or too fast.
    
    The boarding approach changes the ship angle, velocity, and position
    artificially (no engines). It is activated when you are close enough
    and slow enough.
    
    After activating it, you can become too far away by selecting another
    target and you can become too fast by getting hit. With this commit
    the boarding approach will be temporarily suspended until you get
    close enough and slow enough again.
    Fighters that are launched should not be marked for removal
    Fix Outfitter Attribute display bug (#3150)
    
    * Update OutfitInfoDisplay
    
     - Change `auto` to the type `pair<string, double>` to avoid adding char
     - push_back to emplace_back
     - Simplify display of per-second values
     - Omit per-second values if reload = 60 (i.e. per second = per shot)
     - Separate non per shot / per second values from values which should be printed as per shot / per second
        - Addition of new damage types no longer requires updating the `isContinuous` offset
    
    * Keep printing per-second values for weapons which fire once per second
    
    * Iterate over the natural type pair<const char *, double>
    Switching to just using a Weapon pointer in places where that's all that is needed instead of a full Outfit pointer.
    Added a "Dictionary" class that works like an STL map<string, double> but allows faster lookup and no string allocations.
    Added a new "Visual" class that represents just the information we need to track for an Effect once it's instantiated. Using it in place of Effect saves a string copy and a good deal of memory for each active visual effect.
    Switched to using a vector for Projectiles and Effects, to reduce memory allocations and improve cache performance.
    Refactored Engine::CalculateStep(), splitting each set of calculations into a separate function to improve clarity and to open a path for possibly multi-threading the most expensive calculations.
    Ship Variant definitions can add attributes without needing to fully specify all other base attributes (#2959)
    
    * Ship variants can add individual attributes
    
    via the "add attributes" node. All base attributes can still be overridden by specifying the "attributes" node.
    
    * Store "add attributes" values in baseAttributes
    
    Ship::Save() only writes out baseAttributes.Attributes(), i.e. the values from "add attributes" were being lost when loading instantiated missions from a save file.
    
    * NPCs created from a partial node description use the desired name
    
    * Use same "add" key/value syntax as other classes
    
     - The only key currently supported is "attributes"
    
    * Revert key-value-valueIndex changes
    
    * Use supported ship specification method in Syndicate Target Practice
    
    * NPC::Load prints warning, skips invalid use of ship specification
    
     - individual ships should not be fully specified in a mission's NPC definition - only `ship "model/variant" "name"`, or use of custom fleets.
    
    * Fix typo and touch up warning message
    Add cloaking heat attribute (#2844)
    
    * Add cloaking heat attribute (#116)
    
    * Add cloaking heat tooltip (#117)
    
    * Cloaking should now be possible :P (#120)
    
    * Don't decloak just because heat is high.
    
    Otherwise, even a cloaking device with no "cloaking heat" would not work on a ship with 90% heat. Plus, if you overheat while cloaked, it's your own darn fault.
    Simple logic to determine if missile boat AI will reverse or turn around
    
    Use reverse thrust if its capability exceeds:
     - the target's ability to close the distance
     - the current closing rate of the target
     - our forward thrust capability
    
    Otherwise, turn around to use the better thrusters.
    Added "fuel damage" as a damage type.
    minor enhancement: soft warning for more than 32 hardpoints (#2474)
    
    * Add a soft warning when ships have 33+ hardpoints
    
    Show a soft warning if a ship (either in the savegame or in a base definition file) has more than 32 hardpoints.
    Reason: Command.cpp uses a 32bit mask for weapons.
    
    * Added a comment regarding 32+ weapons.
    
    Added a small reference comment to Ship.cpp -> Ship::Load()
    In case this should be changed somewhen in the future to allow for more than 32 active weapons, the warning in Ship::Load should be adjusted.
    
    * changed the soft warning text (33+ hardpoints)
    
    Changed the text to respect situations with over 64 hardpoints.
    Hardpoint #65 is internally dealt (when it comes about firing) as hardpoint #1, because of an overflow in the bitwise shifting of a 64bit int.
    
    * changed the warning upon MZ's wish
    
    - print only one warning per ship, not per each hardpoint beyond 32
    - changed text to the one desired by MZ
    
    * Formatting fix.
    The "flight checks" now show up as warning icons and only block you if you try to take off with an unusable ship.
    Use a wormhole's actual position instead of the previous day's position (#3085)
    
    * Use a wormhole's actual position instead of the previous day's position
    
     - Ship::Place accepts optional 4th argument, bool default = true
       - if true, perform full initialization of the ship
       - if false, only alter the ship's position, velocity, and angle
     - Updated Engine::EnterSystem to determine exactly when the player travels via wormhole and set the flagship position accordingly.
       - Fixed invalid travel plan checks when the next system is in Neighbors() but the flagship has no jump drive.
    
    * Revert Ship::Place changes to use new function, Ship::SetPosition
    Update Afterburner Logic (#3063)
    
    * Update Afterburner Logic
    
     - In addition to fuel usage, NPCs should consider its energy usage and heat output before deciding to use it (endless-sky#1819).
     - Consider afterburner usage whenever MoveToAttack is used (ships, asteroids)
     - Consider afterburner usage if harvesting flotsam.
    
    * Support afterburner-only AI movement control
    
     - Compute the displayed MaxVelocity and Acceleration values with afterburner thrust if no forward thrusters are present.
     - Adds afterburner heat, energy to the ShipInfoDisplay for "Moving:"
     - If the ship has the FORWARD command, but no thrust, the afterburner is attempted.
     - Update Ship::Acceleration and Ship::MaxVelocity to reflect the mode of operation to avoid divide-by-zero AI::StoppingPoint calculation.
    
    * Cache thrust attribute reads
    Fix missing jettisoned commodities (#2962)
    
    * Fix missing jettisoned commodities
    
    The last box of commodities was not being jettisoned unless it was a
    multiple of 5, which is the maximum number of commodities per box.
    
    * Adjust commodity flotsam lifetime based on tonnage.
    
    Commonity flotsam lifetime has a square root progression that remains
    unchanged when it has the expected tonnage per box.
    Avoid travelling backwards after exiting hyperspace
    If a ship is under-powered, allow it to turn or thrust at a fraction of its maximum rate.
    Code cleanup: "static" is redundant inside a C++11 anonymous namespace.
    Fixed some issues found by Clang's static analyzer.
    Derelict ships are now able to repair, once you have boarded them to reactivate them.
    Fix automatic crew transfer to automatons when short on crew
    
    Found by @kyzentun
    Switched resistance to using @Elyssaen's proposed mechanics (with no heat or piercing resistance, for now).
    Added support for ship attributes that confer resistance to heat, ion, disruption, or slowing damage.
    Do not allow scanning of cloaked ships
    
    When a ship cloaks, any "scan circles" will be removed
    If your targeted ship is cloaked, you cannot attempt to scan it.
    If a ship is captured, make its escorts independent.
    Moved the chack for invalid swizzle values directly into SpriteShader, so that no code outside of SpriteShader would need to be changed in the future if new swizzle options are added. (Also made it possible for DrawList to use swizzle 8.)
    Ships can have a custom "swizzle" property (#2629)
    
    * Ships can have a custom "swizzle" property
    
    The nomenclature is the word "swizzle" (quotes unnecessary) followed by
    a number between 0 and 8, at the same level of indentation as sprite or
    attributes. Use 0 for no swizzling of the original sprite.
    
    * Defined key in Ship::Load
    
    * Custom swizzle corrections
    
    Invalid ship swizzle values will be ignored. Also fixed a missing
    if(government) check in Ship::Place, introduced in previous commit.
    A ship's animation now "pauses" if it is disabled or destroyed.
    Made it so a ship that is forced to decloak by running out of fuel or energy can't initiate cloaking again until it has decloaked fully. (Also laying the groundwork for cloak-disrupting weapons in the future.)
    Added support for independent turret tracking (and, limited turret turn rates) for everything but anti-missiles.
    Made it possible for outfits to require licenses to buy them.
    Added facility for a hostile disabled hail
    
    Each government can define a "hostile disabled hail" like a "friendly
    hail" or "hostile hail". If one if missing, the game will default the
    "hostile disabled" phrases, i.e., Shakespearean insults.
    Fixed the wrong sound playing when your flagship uses the jump drive.
    Add Ammunition outfits to explosion flotsam
    
    When a ship dies, in addition to items in its cargo hold, any ammunition it is using may also be jettisoned as flotsam (5% probability vs 25% for cargo).
    Fixed ships with only jump drives using the hyperspace animation along hyperspace routes.
    Added an indicator that shows the progress of your cargo and outfit scans of a ship.
    Solar power + regenerator compatibility (operational energy) (Ref #1879) (#1896)
    
    * Replaced negative energy generation with operational energy
    
    Shield regenerators now have positive 'operational energy' instead of
    negative energy generation, to avoid a problem where solar collection
    wasn't compatible with them.
    
    * Operational energy revisions
    
    1. Idle energy now considers operational energy.
    2. Flight check now considers operational energy, and returns a new
    conversation if you have negative energy even before checking thrusters.
    
    * Revisions to flight check for solar collection
    
    Added solar collection into flight checking, and added a new
    conversation if your ship runs the risk of becoming derelict too far
    from the system centre. Also fixed a <= that should be an <.
    
    * Changed 'centre' to 'center'
    
    * Tweaked conversation wording
    
    Replaced "system center" with "center of a system", and "steering" with
    "steering systems".
    
    * Renamed operational energy to energy consumption
    
    * Fixed a stray tab in tooltips.txt
    Switched from constant arrays to constant vectors in a few places to avoid ugly sizeof() code.
    Made it possible to specify how much "jump fuel" a drive consumes.
    Refactoring to avoid any places in the code that make assumptions about how much fuel is used by various jump modes.
    Made System's list of links and neighbors a set instead of a vector, to simplify adding and removing items and checking if a given system is in the set.
    Made it possible to specify a ship's "noun," so the game can refer to it as a "creature" instead of a "ship." Also added an "inscrutable" attribute that makes it impossible for you to scan a ship's outfits.
    smart refuelling (#2367)
    
    * smart refuelling
    
    * smart refuelling
    
    * smart refuelling
    
    * smart refuelling
    
    * remove compiler warning @endless-sky
    
    * fix > to >=
    
    bug fix for the case of fuel capacity = JumpFuel(), thx @endless-sky
    Solution for issue #2434 : Removed scanning messages if you scan your own ships (#2436)
    
    * Solution for issue #2434
    
    Removed scanning messages if you scanned one of your own ships.
    
    * partial revert upon M.Z.'s wish
    
    removed the ` && !target->GetGovernment()->IsPlayer()` in line 1442 , and thus could also remove the ` && !government->IsPlayer()` in line 1444 since that was only needed after adding the first one
    Typo.
    Handle the very unlikely case where a carrier is captured when it still has fighters aboard.
    Renamed Ship::GetTargetPlanet() to GetTargetStellar() to make it clear that it refers to a StellarObject, not a Planet.
    Switched from Planet::GetSystem() to Planet::IsInSystem() wherever possible, to support wormholes (which exist in more than one system).
    Made it so ships never exit hyperspace adjacent to a wormhole unless that wormhole is marked as one that AI ships can travel through (by giving it a dummy "spaceport").
    Made it so fighters won't try to board their parent if it is disabled (and will launch to escape a disabled ship if told to do so).
    Fixed code that assumed that the "heat dissipation" of a ship is never altered.
    Replaced the "Mass Expansion" with an "Outfit Expansion" that adds the same outfit space but also interferes with your ship's cooling if you install a lot of them.
    Made it so fighters and drones can't repair or refuel other ships (and will tell you so if you ask them to help you).
    Changed the completed scan message from "succeeded in scanning" to "completed its scan," because the scan may not succeed if you have interference plating, even if it was completed.
    When min() or max() takes mismatching types as inputs, where possible, switched to specifying the output type directly rather than casting both inputs to match.
    Fixed derelict ships that had been destroyed or captured going back to being derelicts.
    Fixed a possible null pointer error if a ship's destination planet is not one you can land on.
    Made it so escorts look to their parent's target planet when entering a system if they don't have their own target.
    Made "drag" apply to acceleration from weapons as well as engines, so you can't get going infinitely fast using a weapon with a firing force.
    Cleaned up how the player's destination planet is stored, and added a message telling you if you have any mission destinations in each system you jump to.
    Fixed a bug where surveillance ships never succeeded in scanning because they kept switching targets.
    Made the scanning warnings "unimportant," so they only pop up to the top of your messages list if they aren't already in the list somewhere.
    You can now select a planet in the map in your destination system, and the autopilot will land on that planet once you reach that system.
    Made it so ships remember their destination system, so "entering" ships still enter their target system if the game is reloaded.
    Added NPC AI support for harvesting flotsam. (For miners, or for distracting pirates by dumping cargo.)
    Added a "mining" personality that circles around searching for minable asteroids, then destroys them. (It doesn't know how to harvest the flotsam yet, though.)
    Replacing asserts with reasonable fall-back behavior.
    Fix to reported government of ship scanning you (#1925)
    
    Changed government to be the government of the ship scanning you, so it
    doesn't always show "Escort" (the player government).
    Added a warning message if you try to board a ship while cloaked. But, made it possible to go through the whole boarding sequence (including locking on to the ship) before uncloaking.
    Don't play the scanning sound if a ship actually does not have a scanner.
    Scanning a ship now takes time. How long it takes, and how far away the scanner works from, now depend on "speed" and "power" attributes.
    Added the ability to specify plural forms of outfit and ship model names.
    Fixed a bug where the escort AI stopped pathfinding after stopping to refuel.
    Switched the outfitter's flight check to using the ship's official idle heat calculation that accounts for active cooling.
    Added tooltips for active cooling, and fixed some corner cases in the math.
    Added "active cooling" support. Also fixed a typo in the Coalition ship hardpoints.
    Added a Chip::ChassisCost() convenience function.
    Made it possible to adjust the zoom factor of each engine hardpoint.
    Allow cloaking while landing or taking off.
    Made it so cloaking and uncloaking don't "pause" while jumping.
    My previous fix to the stopping code wasn't quite correct.
    Fixed the AI code for coming to a complete stop so that it won't be applied at incorrect times (e.g. sometimes when stopping for a hyperspace jump).
    Made it impossible to jump or land while disabled.
    Jettisoning cargo no longer causes your ship's temperature to increase.
    Fighters now take their share of the mothership's heat with them when they launch (so, the mothership won't get hotter each time it loses mass by launching a fighter).
    ammo and flotsam (#1454)
    
    * change Flosam::UnitSize() to use double
    
    This change allows UnitSize to accurately describe the size of what it contains since some items have fractional masses.
    
    This fixes ships trying to pick up flotsam they don't have room for, typically ammo
    
    * change Ship::Jettison outfit to allow non-full flotsam boxes
    
    This is to stop fractional mass items from disappearing if they don't completely fill a flotsam box.
    
    removed static keyword to allow box sizes to be appropriate for each item
    add !isInvisible to Ship::IsTargetable (#1350)
    fix variant sprites being reset in FinishLoading (#1335)
    
    Variant sprites were being reset to base. Changed Ship::FinishLoading to use GetSprite instead of HasSprite so it's not checking for something that won't be loaded yet.
    Continuing to work on code cleanup and commenting.
    Made the check for weapons named in hardpoints only apply if the ship lists outfits (so it won't apply to variants that don't override the base ship's outfit list).
    Starting to go through the code to add more comments and refactor things that are unclear or could cause errors down the road.
    Fixed afterburner effect placement (broken by the previous commit).
    Made it possible for fighter bays to specify both a facing direction, and a side (over or under). Also made it possible for bays to face backward.
    Added a common base class for Ships, Projectiles, Asteroids, Effects, Flotsam, StellarObjects, etc. This is the first step in creating a generic collision detection framework that can deal with different object types.
    Fighters can now assist ships other than their motherships. Also, surveillance ships now tell you they don't have time to help instead of promising to help and doing nothing.
    Removed some superfluous namespace qualifiers.
    0.9.2 updates
    Ships now recharge whatever they are able to recharge on their own, if they land on an uninhabited planet.
    Made it so disabled ships don't show the "moving erratically" message.
    Put a limit on the number of "sparks" shown over a ship affected by ionization, etc.
    Switched to a way of optimizing the cloaking lookup that will still allow invisible ships to fire weapons.
    Added an initial range check to speed up the anti-missile code.
    Trying to fix the problem where AI turrets fire wildly for one frame after their target is destroyed.
    Ships with no sprite now always have "cloak" set to 1 so they don't need to keep checking if a sprite exists every time the cloaking value is queried.
    A ship's targeting "confusion" now decreases over time when it is firing weapons continuously. This fixes the issue where a laser turrent might miss small, fast drones entirely due to confusion.
    Ships can no longer pick up "flotsam" when unable to "act" (cloaked, landing, etc.) or in other systems.
    Fixed a bug where NPC fighters forget what system they're in and teleport to your system.
    Dying carriers now release any fighters they are carrying (if they have time to do so).
    Made ships non-targetable for the first half second after they leave hyperspace.
    Added "shield heat" and "hull heat" attributes, and made it so a carrier can repair hull of its fighters in addition to recharging shields.
    Added a check to make sure a ship disabled at the very moment it begins landing does not complete the landing.
    Escorts with jump drives no longer stay green while jumping.
    Cargo dumped by ships can now be picked up by others. Also, destroyed ships sometimes leave cargo behind.
    Made a few tweaks to the appearance of fleets taking off from planets or waiting in orbit around them.
    Fixed two places where spaces had been added in place of tabs.
    Fixed a possible divide by zero if a weapon's shield damage is zero and rounding errors cause a ship's shields to be below zero.
    Capturing an NPC now counts as "evading" it.
    Fixed a crash that happened if the player tricked the game into letting them take off in an automaton (by converting it back into one right before taking off).
    Refactoring: switching to using "!set.count(...)" instead of "set.find(...) == set.end()" because it's more concise, just as efficient, and seems clearer.
    Fixed handling of ships with fewer bunks than required crew, and modified the "moving erratically" message to show the ship name for ships other than your flagship.
    Added an "uncapturable" ship attribute, and modified the boarding panel to handle it.
    Update my master (#1)
    Ships no longer try to board other ships if they're cloaked.
    A ship's shields now drop to zero when it is destroyed (e.g. if it is killed by piercing weapons).
    Fixed a bug in my optimization of the disabled ship check.
    Trying to speed up the fleet strength calculations.
    Ship::IsThrusting() now reports whether thrust is actually being applied, not just whether the thrust command is set.
    Fixed misplaced parentheses that were making buil-in ramscoops much more effective than I intended.
    Fixed handling of reverse thrust for the new STOP command.
    Made it possible for AI ships to "stop" almost completely, by having ships apply fractional thrust if they know they are trying to stop.
    Made it possible for fighter bays to launch sideways, and added a retrofitted Bulk Freighter carrying a dozen drones.
    enable solar collection attribute
    Gave all ships a tiny amount of ramscoop production, which is negligible unless very close to the system center. This is to keep the player from getting stranded in completely unfriendly or unpopulated systems.
    Outfits that repair shields or hull must now specify how much energy the repair takes.
    Fixed the handling of drones that were bought before the "automaton" attribute existed.
    Switched to a more organic-looking aim "confusion" effect.
    Added two new damage types: disruption (which makes shields porous) and slowing.
    Fuel beyond 100 units is now expended at an even pace rather than in one sudden drop when your ship completes a jump.
    Added support for fighter bays where the fighter it is carrying is visible, drawn either below or above the ship.
    Added a "final explode" ship attribute for effects that are created in the ship's final explosion.
    Ramscoops now operate at double efficiency when very close to the system's star(s) and at much reduced efficiency when far away, so a ship that wants to recharge quickly is forced to stay in the populated part of the system.
    Fixed one place where a ship with zero hull was being counted as destroyed (not targetable).
    Optimized the IsDisabled() check, because it's called so frequently that it's responsible for 70% or more of the ship attribute queries during combat.
    If a ship variant defines any nonzero coordinates for any gun or turret, its set of hardpoint definitions now completely replaces the old ones.
    Made "automaton" ships never require crew, even if they have turrets.
    Shield recharge now takes lower energy priority than movement, so you won't get stuck unable to maneuver while taking heavy damage.
    Made "self destruct" allowed to have a probability between 0 and 1. It is checked once before you are allowed to plunder, and again before you are allowed to capture.
    Typo fix.
    Added piercing for weapons
    Added piercing for weapons
    
    I haven't been able to test this, and the piercing attribute hasn't been added to any weapons (yet). However, it should work.
    Ships with no sprite are now never targetable or visible on radar (but can still shoot at you).
    Added an "automaton" ship attribute that allows it to not require any crew to pilot it. Also updated the Wanderer automaton to have some cargo space, so there's some legitimate reason for the player to want one.
    Regularizing the shipyard and outfitter maps code to make them easier to merge.
    Code cleanup.
    Avoid having a ship's "target" system equal the current system, which confuses the AI (it thinks the ship is planning to jump somewhere).
    Reset a ship's target when it is "placed" so it won't keep a newly parked escort as a target.
    A ship that is captured while going to assist another ship will no longer continue to board that ship after being captured.
    The ship's target is now cleared properly when the target dies, even if the target is a mission NPC.
    Clear the hyperspace jump status when a ship is "placed," in case it was mid-jump when you landed.
    Added warning messages whenever a line of a data file or saved game is unrecognized.
    "Weapons" that now heal damage instead of inflicting it will no longer provoke the target to hostility.
    Escorts that cannot jump (or are out of fuel) will no longer try to jump with you.
    Made it possible for some shield generators to cost more per unit repaired than others (to offset them being more space efficient).
    Fixed in-system disabled escorts using the take-off animation when you depart.
    Added a "cargo box" effect that is shown when you dump cargo.
    Fixed a bug where the player's velocity could become NaN if dragAcceleration was exactly zero.
    Ship variants can now inherit descriptions and outfits, as well as the other attributes.
    The "drag" effect is now scaled so that applying a less powerful thruster (e.g. normal engines vs. afterburner) will not slow you down to the slower engine's speed if you are thrusting in the same direction you are going in.
    Added a "self destruct" attribute that has ships explode if an enemy tries to board them, and also made it so a ship with no explosions listed dies immediately.
    Fixed some more bugs that can occur when the first ship in your list is unsuitable to be your flagship.
    Disabled pirates stealing outfits, because it's way too confusing for beginning players.
    Fixed a change that made fighter bays stop working.
    Made it possible to selectively override sections of a ship definition.
    Made it so pirates never steal your hyperdrive, since you're likely to notice missing steering or thrusters, but less likely to notice a missing hyperdrive.
    Modified the plundering behavior so it take effect immediately, rather than you not noticing that your thrusters are missing until you reload from a saved game.
    Fixed some possible sources of inconsistencies in boarding.
    Added messages when you get plundered, saying what was stolen.
    Made it impossible to "provoke" the asteroid in the terraforming mission, so you can never capture it instead of "repairing" it.
    Fixed a bug where a ship could continue trying to board and assist an ally that has already been repaired by another ship.
    Fixed a bug where ion sparks could be shown for a ship that is not in-system.
    Fixed some issues with the handling of the "hull repair rate".
    Fixed the bug where if you have both a jump drive and a hyperdrive, it won't let you make a hyperspace jump if you have enough fuel for that but not for a jump drive jump.
    Fixed the bug where an outfit that changes a ship's hull amount can cause that ship to become disabled.
    Fixed a bug in the weapon hardpoint placement for ship "variants."
    Added support for unique "persons" who can show up in any system.
    More small tweaks to the debris cloud's appearance.
    Created a new debris effect that is prettier than the old one.
    Added brackets and indentation for every BeginChild()...EndChild() pair to improve the code readability (compared to indentation with no brackets, or no indentation at all).
    Ship licenses are no longer government specific and no longer saved in the player info (because they now only control what you can buy, not what you can own).
    When a ship's velocity changes due to an impact, no longer limiting it to its maximum velocity (which was making afterburners *much* less useful).
    Taking damage no longer causes a ship that is in the boarding process to stop.
    Added a new mission type, "assisting," so that missions that appear when boarding a hostile ship can be distinguished from missions that appear when repairing a friendly one.
    Made it possible for engine flares and afterburner effects to "stack," so that if you have multiple engines both their flares will be shown instead of only a random one of them.
    Added a two-second delay when repairing a disabled ally, so you can't do it in the heat of battle.
    Added a "never disabled" attribute for ships that should be impossible to board or capture.
    Added an "ion cannon" weapon. I'll need a lot of testing to make sure it's balanced - it makes defeating a single isolated foe too easy, but also does much less damage than other weapons of comparable size.
    Added "firing" animations for some of the missile weapons.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Removed some TODOs that have already been fixed.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Various small fixes to things I found during testing.
    Added some small "debris" particles from exploding ships.
    Eliminated, as much as possible, interface code that uses weak_ptr instead of shared_ptr.
    Reordering the functions in PlayerInfo and Ship and renaming some of the poorly named ones.
    Updating the behavior of fighters so they pick a new carrier if their parent is full, and so that when you capture a fighter it will be assigned to any ship in your fleet that can hold it (starting with your flagship).
    Fixing some glitches in the escort AI.
    Cleaned up the AI considerably, especially the logic for when a ship acts independently vs. as an escort. Also made various player commands (depoly, cloak, fight, gather, hold) apply only to ships owned by the player, not all escorts.
    Switched to hard-coded fuel amounts for hyper, scram, and jump drives. Also made handling of ships with multiple drives work correctly, e.g. a ship with both a hyper and a jump drive will use its hyperdrive when possible to save fuel.
    Switched afterburners to using a distinct "afterburner effect" field in the outfit spec instead of using the "die effect" in the weapon section.
    Modified the ship explosions to spread outward, so they look more explosive.
    Did some significant optimization (at least 2x faster calculation times in big battles) by switching weapon attributes from a string to double map to a fixed set of values accessed by inlined functions, instead.
    Switched to another equation for crew bonuses: captain gets two shares, families of dead crew members each get one.
    Fixed a bug in the new code for handling inheritance for ship variants.
    Bug fix: a ship should not reference itself as an "explosion weapon" unless it is one of the persistent ships stored in GameData.
    Added support for specifying a ship variant by only specifying what has changed from the original and cannot be inferred, i.e. the list of outfits, plus the order of the guns and turrets if it matters.
    Switched to having the hail messages be a property of each government rather than individual ships or fleets (so that mission-related ships will use them, too, to add a bit of flavor in battles).
    Made escorts take off slightly after their "parent" ship. This is so that if the player is escorting a large fleet of the same ship they are flying, it's not confusing which ship is the player's.
    Switched to a bigger, brighter jump drive sprite so I can get a similar effect with 1/8 the number of sprites, putting less stress on the GPU when a whole fleet is jumping.
    Adjusted the velocity at which ships leave hyperspace so it is always low enough to stop at the planet, instead of always being their max velocity.
    Fixed the bug where you could travel along links that had disappeared since you set your travel plan.
    New feature: you can hold down the jump key to prepare for hyperspace but not jump yet (so that you can wait until your whole fleet is ready to jump, too).
    Modified the jump drive code so that you always appear near the planet you're most likely to land on (just as the hyperdrive lines you up with that same planet).
    Added support for mission actions to be performed when you enter a system (showing a dialog or conversation, setting flags, etc.).
    Made a few small fixes to things that turned up in testing.
    Fixed a bug where "surveillance" ships keep their old target even if that target is destroyed.
    Tweaked the handling of sub-munitions. In particular, they are now only created if the projectile does not hit something, and if it does hit something, it does all the damage its submunitions would have done.
    Added convenience functions to Planet and Government to simplify the syntax for querying political state. Also fixed a few busgs in my recent Command and AI changes.
    Eliminated the Controllable class by using Command for its command bitfield, and moving its target functions into Ship. This means there is now just a single representation of commands, instead of three different ones for different purposes.
    Fixed various small issues I found during testing.
    Added some more side missions.
    Switched to just letting events change the swizzle color of the "Escort" government, instead of setting a special "swizzle" variable in the player info.
    Added a cloaking AI, and also fixed a bug where a disabled ship could cloak.
    Added a cloaking device. Have not yet written the AI strategy for when to engage it, though.
    Added a "Flamethrower" weapon that uses hyperspace fuel as ammo, and updated the AI so it will not fire off its last jump worth of fuel.
    Added a new afterburner outfit, the Ionic Afterburner, which is much more fuel efficient but also consumes a considerable amount of energy.
    Changed ship capture so the ship's color does not change until you land.
    Added the third and final set of Free Worlds intro missions, along with the "derelict" personality type to support them.
    Fixed a bug where if you captured and sold an NPC, it would continue to follow you as a free escort until the mission ended.
    Made several improvements to NPCs: an "uninterested" personality that does not follow the player's flagship, and improved handling of carriers. Also modified the outfit scanner to also tell you what fighters a ship is carrying.
    Fixed an uninitialized variable bug in Ship.
    Switch the disbled hull percent to 20% minimum, to make disabling big ships without destroying them a bit easier.
    Fixed some small bugs I found while playtesting.
    Your fleet now responds to "hold position," "gather at my ship," and "fight my target" commands.
    Renamed "ShipName" to "Phrase" since it is also used for random hail messages.
    Spell-checked the comments.
    Ship: fixed a bug when hit with a projectile that does zero damage.
    Modified the "scram drive" to work even if you are traveling at a high speed, as long as it is in the right direction.
    Fixed a few glitches in the afterburner effects and AI.
    Implemented wormholes. (Any planet that shows up in multiple systems is a wormhole.)
    Added Republic "licenses" for each ship, and added a fine that is assessed if you are scanned by the Republic and are flying an unlicensed ship.
    Added a "swizzle" condition that controls the color of your ships (and that is saved even if it is zero).
    Modified hyperspacing so that escorts keep the same position they have relative to their parent unless the distance is higher than 1000 pixels.
    Fixed a few small mistakes I found during play-testing.
    Added an afterburner outfit. It'll probably take some balancing work to make sure it's not too powerful.
    Got planetary defense missions working (three different templates for the Core, North, and South).
    Added support for NPCs "entering" or "staying" in a system, and added a sample "pirate attack" mission (currently always offered).
    Made shield recharging take energy (2 energy per 1 shield unit) and also tweaked the landing animation to make sure the ship ends up landing well within the planet.
    Got NPC support working. I've tested NPCs you must "save" or "kill", but a few kinks are left to work out (like having NPCs start at a different location than yours).
    Captured ship might not have below-minimum hull (e.g. radiation weapons).
    Planets no longer allow you to land if you have a negative reputation with their government.
    Made it possible to request assistance from friendly ships and have them repair or refuel you.
    Made it possible to bribe hostile ships to leave you alone. More principled captains will refuse your money, however.
    Also, got the jump drive implemented (although without its own outfit sprite).
    Fixed a few quirks in the "hails" from other ships.
    Added occasional "hail" messages that other ships send to you, with some sort of "flavor" text that gives you a sense of what their government is like.
    Modified the AI to have it scan any other ships in system, if the ship has a scanner equipped. If one of the player's ships is scanned, a message is displayed.
    Added a "Scram Drive", a hyperdrive that does not require you to come to a complete stop before entering hyperspace.
    Modified the player AI so that if you have a mission in the system you are hyperspacing to, you always exit hyperspace pointed at that planet, and the "land" key takes you to that planet first.
    Don’t magically refuel stranded escorts on save and reload. (So, save fuel for each ship; shift-TARGET to target an escort, allow boarding a non-disabled escort, equalize fuel on boarding an ally)
    Ship recharge heat should account for cooling.
    Modified boarding to add a two-second delay (as if the ship is taking some time to steal your cargo).
    Got permanent reputation changes working, with Ship::TakeDamage now returning a combination of PROVOKE, DISABLE, and DESTROY depending on the projectile's effect.
    Switched to having the AI track which ships have boarded which, so Ship doesn't have to (since only AI cared about knowing that, anyways).
    Switched Engine to using the new ShipEvent class to report when a ship is boarded.
    Added a Politics class that can handle governments coming to the aid of allies, tracking the player's reputation in response to different actions, etc.
    Modified cooling systems to use a separate "cooling" value instead of making "heat generation" negative, because previously you couldn't sell them if that would cause your ship's "heat generation" to go negative.
    Added sprites for the scanners and cooling systems. Also fixed a glitch where the cooling systems were taking up negative space.
    Added a "heat dissipation" attribute that varies from ship to ship, so that big ships will have more trouble radiating away heat.
    Switched ships loaded from a saved game to referencing the explosion defined in the ship model, not that particular instance of it.
    Fixed a bug where your ship explosion was being applied to your own ship, resulting in infinite velocity.
    Added a player / fleet panel to the player info display. This includes the capability of reordering ships, including changing your flagship.
    Added a rudimentary ship info panel.
    Fixed a corner case bug: if an escort is in another system and has unlaunched fighters, they have no system of origin, so set their system to the same as their parent so they will not get "lost" when saving and reloading the game. This still will not quite work properly until the code to "reparent" fighters who have no parent is implemented.
    Fixed some glitches in the handling of capturing, and added the capability to "repair" damaged ships of your own by boarding them. Also tweaked the escort AI to not engage enemies if badly damaged.
    Added a display of the current status of all your escorts (shields, hull, heat, energy, fuel).
    Made a parent ship's shield generator recharge fighters it is carrying if the parent is fully recharged.
    Modified the AI so that once it has boarded and plundered a ship, it will destroy that ship (or go off and fight any live targets nearby, then come back and destroy it later) rather than just hanging up forever repeatedly boarding it.
    Updated all the functions that save data to use the new DataWriter class (to ensure proper indentation, quoting, etc.).
    Modified exiting from hyperspace so ships always exit at their maximum velocity.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Added a Random::Real() function, and refactored to use Random everywhere (because old-fashioned rand() is considered deprecated now.)
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Added the mass of ships it is carrying in your bays to the mass of a ship (so, carriers will move much more slowly before unloading their fighters).
    Got fighters to dock with their carriers again once they are recalled.
    Got fighters in fleets working.
    Got carrying and launching of fighters working (but not buying or recalling them, yet).
    If the ship specification file says to put certain weapons in certain hardpoints, got Ship to honor that instead of reassigning them whenever the file is loaded.
    Added a "Messages" class to allow any thread to safely add a message to the display.
    refactoring: for clarity, replaced Ship::IsDisabled() and IsFullyDisabled() with IsOverheated() and IsDisabled().
    Modified the boarding process to take time, and to rotate the boarding ship to line up with its victim, so that it looks more "realistic" when other ships do it.
    Modified ship explosions to not appear if the ship is in a different system.
    Added a "personality" class representing whether a fleet of ships does things like plundering opponents (which pirates now do).
    Got capturing working, at least for your flagship. Other ships can't capture other ships yet.
    Added some hand-to-hand weapons (with no outfit graphics for them, yet).
    Got crews and salaries working (including erratic ship behavior if missing crew).
    Added a "boarding" dialog that lets you choose what commodities or equipment to plunder from a disabled ship. (Capture is not yet implemented.)
    Fixed a few small bugs.
    Added a rudimentary ship-boarding AI.
    Implemented a placeholder version of boarding and plundering (without a dialog yet to choose what items you steal).
    Added a CargoHold class to handle everything pertaining to cargo (including determining when you have the capacity for it).
    Added individual "fleet" descriptions for each system, so that the local ships vary depending on where in the galaxy you are and how populous the system is.
    Added random ships occupying a system when you first enter it. Also disabled refueling on uninhabited planets (i.e. no spaceport).
    Added a distinction between "fully disabled" ships (hull below the minimum), and others (i.e. temporarily disabled due to overheating). Modified the AI to ignore fully disabled ships.
    Switched to storing cargo in PlayerInfo when landed, then divvying it up among your ships when taking off. This makes it possible to use the cargo capacity of all your ships, and avoids needing to sell cargo when selling ships.
    Fixed the segfault-on-explode bug (for real, this time).
    Added "shipyard" specifications to planets throughout the galaxy that seem likely places for a shipyard.
    Added several new options for the fleets that can enter the system.
    Modified the ramscoop to never increase the fuel above the maximum.
    Fixed the rotations, unit vectors, and hardpoint locations so that up is always negative y and always 0 degrees.
    Worked around a bug where the mask limiting explosions to within your ship was rotated 180 degrees. For a real fix I'll need to change how Angle works, though.
    Added the capability for ship explosions to damage and move nearby ships.
    Modified the shipyard and outfitter to draw the ships in the player's colors.
    Got outfit buying and selling working.
    Fixed a bug where the gun and turret count for a ship increases every time the pilot file is saved.
    Added two "drone" ships (tiny, pilot-less fighters that would be carried by other ships).
    Added a "flash" when entering hyperspace. Also increased the minimum speed for engaging the hyperdrive, so it will be easier to slow down to that speed.
    Added GPL statements to all source code files and added a license.txt file.
    Got "New Pilot" working, including visiting the shipyard and picking out an initial ship.
    Added saving of the game (every time you leave a planet, or if you quit while on a planet).
    Updated how the UI panels are handled to allow the main menu to be called up regardless of what the game state is.
    Added saving capability to the Ship class.
    Got the code to build without warnings when -Wall is defined.
    Switched to storing shared_ptrs to ships in PlayerInfo, so that if your ship is destroyed it can still remember where it was.
    Limited the maximum velocity a ship can attain from impacts.
    Updated the AI to fire each individual weapon on a ship only if it can hit something.
    Added an Armament clas for tracking weapon logic (mounting points, reloading, streaming, etc.).
    Modified projectiles hitting ships or missiles to be handled by Engine, rather than by Ship or Projectile itself.
    Added a very rudimentary combat AI.
    Fixed blast radii so that they also affect friendly ships, including the ship that fired the weapon in the first place.
    Added a "color" field for governments, and modified the map panel to allow coloring systems by government.
    Added support for "shipyard" and "outfitter" attributes on planets.
    Uploaded all the files from my local repository to Google Code.
    fix(mortgages): avoid floating point exceptions for user-supplied mortgage terms
    
     - terms of 0 -> term 1
     - hedge Mortgage::Payment on zero-term payments
     - add missing default initialization for term, principal, and interest
     - more uses of `lround` over `round`
    
    closes endless-sky#5268
    Added constructors that call Load() on a data element, so construction and Load() don't have to be done in two separate steps.
    Code cleanup: using lround() for more accurate rounding of double to integer.
    The minimum mortgage payment is now 1 credit. Also, credit score now goes up each day if you're debt-free.
    Removed death benefits. Depreciation is a better way of balancing ship capture, and death benefits make it less profitable to fight stronger ships than to pick on easy targets, which is backwards.
    Fixed fines being shown as "Mortgage" rather than "Fine" in the bank and in the daily payment message.
    Added brackets and indentation for every BeginChild()...EndChild() pair to improve the code readability (compared to indentation with no brackets, or no indentation at all).
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added a "Pay All" button in the bank. It will pay whatever mortgages, fines, etc. you can afford to pay.
    Increased interest rates and ship prices to make the start of the game a bit more difficult, as well as to increase the range between mid-level and high-level ships.
    Added "bonus" payments that must be made to your crew if your ship has more than one crew member and you plunder or capture an enemy ship. This is to make plundering less ridiculously lucrative.
    Switched to 64-bit values for storing credit amounts (to avoid rolling over if you get 2 billion credits).
    Updated the mortgage application code to take into account your current mortgage payments due.
    Fixed a bug where you could prequalify for very large mortgages if your annual revenue was negative.
    Updated all the functions that save data to use the new DataWriter class (to ensure proper indentation, quoting, etc.).
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Added GPL statements to all source code files and added a license.txt file.
    Added saving of the game (every time you leave a planet, or if you quit while on a planet).
    Uploaded all the files from my local repository to Google Code.
    test: Support test case execution, locally and in CICD (#4998)
    
    * Extend CI environment with graphical testframework
    Adds CI workflow for Ubuntu 16.
    Adds minimal code to main.cpp to run hardcoded empty testcase.
    Changes script for headless testing to run hardcoded testcase.
    
    * Fix coding style issue.
    
    * Updated step names to differentiate between tests
    Renamed existing tests to parsetest_*.
    Renamed the new test to autotest_*
    Re-ordered tests so that all parse-tests are together.
    
    * Changed GameData::Progress check to (menuPanels UI)->IsInitialized.
    As based on review-feedback. Using the same pattern as isDone.
    Removed the isReady variable in the anonymous namespace of MenuPanel.
    Also replaced explicit default constructor for UI by implicit constructor.
    Tested:
    - Quit from main menu
    - Exit during flight (by closing window)
    - Ran the automated test
    
    * refactor: move "are we loaded?" from UI to GameData
     - Add "const" accessor GameData::IsLoaded & backing boolean
     - Remove UI->IsInitialized & associated branching
     - Update class comments / method names to distinguish simple accessors & identify future refactoring opportunities
        Audio::Progress -> Audio::GetProgress, as it is already a simple accessor
     - Disable moving/copying the SpriteQueue class, given that it manages threads
    
    * docs: update --help and man entries
    
    * scripts: exit early if not on a supported headless platform
    
    * chore: Update GameLoop params
    Preloaded conversation data, test, or debug mode are not modified.
    
    Co-authored-by: tehhowch <tehhowch@users.noreply.github.com>
    feat(preferences): Add a preference for the fast-foward interrupt introduced by #5148
    feat: Switch off fast-forward if the player is not in flight (#5148)
    
    This is so that the behavior of fast-forward is consistent between panels (#5038). This also gives the player extra time to react when coming out of a boarding panel or on enter conversation by turning fast-forward off if it was on when entering the panel.
    
    The map panel and player info panel are exceptions to this, as they are panels that are commonly accessed and can be accessed at any time while in flight.
    chore: set alpha version
    Bumping the version number to 0.9.12.
    fix: Restore behavior for showing error alerts
    
    Prior to f23745bdfc0ffe298c291ef2b303a2993ec42883 an alert would be shown for runtime errors during game initialization (e.g. various file read errors, shader link/compile errors).
    
    This commit restores that behavior, to avoid situations where the game simply crashes without a visible report (since errors.txt / stderr may not be visible).
    fix(input-handling): Allow the UI to handle keys before checking FastForward, Fullscreen (#4882)
    
    Changing the order so that UI takes priority makes it so that fullscreen and fast-forward toggles are only activated if there is no active dialog taking input instead. You can think of it as making main() the root panel in the stack.
    style: Remove unexpected trailing whitespace
    
    The only trailing whitespace should be "continuation tabs"
    style: whoops :)
    fix(ci): Call CheckReferences even when no save exists
    
    Otherwise, deferred / referenced content would not have been checked. Such content includes government / system / planet names in LocationFilters.
    Updating the version number to 0.9.11.
    fix(mechanics): Restore cursor-hiding in fullscreen
    
    The refactor in #4472 flipped the conditional statement
    
    Closes #4825
    refactor(main): Extract SDL window initialization & management into separate class (#4472)
    
    * Move SDL_Window setup from main in to a standalone class
    
    Tested, working. Only behavior change so far is moving the window loading up in the load order in an attempt to get visual to the user as quickly as possible.
    I modeled the new class after how the Audio class is handled.
    
    * Update GameWindow.cpp
    
    Added comments. Moved code to more logical order of operations. Removed the Win32 exception on cleanup operations. Added explicit call to hardware acceleration.
    
    * Update project.pbxproj
    
    Thanks to @Fzzr for testing on Mac and providing an updated XCode project file.
    
    * Cleanup unused MonitorHz
    
    Minor edits. Ignore the .gitignore
    
    * Make it unchanged.
    
    Remove my edit.
    
    * Comment editing for readability
    
    This makes more sense to a noob.
    
    * Update in response to feedback
    
    * Resolve issues introduced with that last patch
    
    Missing (), and missing ;
    Forgot to update my .h file
    
    * New module missing
    
    You will need these if compiliing on Windows.
    
    * Fix fullscreen regression
    
    Move comment to own line
    Remove old comment
    Add missing whitespace
    
    * Remove commented code
    
    * style: reorder methods, includes
    feat(controls): Make fast-forward key configurable (#4741)
    
    * Make fast-forward key configurable
    * Do not toggle fast-forward on repeat input events
    * Rename "Menus" to "Interface" in Preferences, resize column slightly
    
    Closes endless-sky#2738
    Updating the version number.
    Really minor code comment tweaks (#4400)
    
    * Minor code comment improvements
    
    Minor improvements to code comments.
    
    * Made some comments more clear
    
    Signed-off-by: Peter van der Meer <peter.vd.meer@gmail.com>
    Updating the version number.
    Attach to / allocate a console output on Windows (#4249)
    
    * Add windows console output
    * Perform stream redirections even when allocating a console
     - Otherwise the "stream > /dev/null" behavior persists
    Improve dynamic zooming (#3727)
    
    * Improve dynamic zooming
    
    Behavior changes:
    
    - Fixes the view zoom setting getting reset if the window is initially
      created at a smaller size (a likely occurrence when using tiling
      window managers)
    
    - Makes the view zoom restriction dynamic, updating the zoom level as
      necessary in real time as the window size changes, up to the user
      preference
    
    - Updates the view restriction bounds, taking into account both the
      window width and height, to ensure that at least the main menu and
      preferences panel are fully visible and accessible
    
    Code changes:
    
    - Split the "view zoom" value into two logical values:
    
      - User zoom, the setting that exists in the configuration file and
        is visible in the configuration panel
    
      - Effective zoom, used to actually scale the UI - a function of user
        zoom and window size
    
    - Update the code to use the user zoom or effective zoom values as
      appropriate
    
    - Consolidate all view zoom restricting code (from main.cpp and
      PreferencesPanel.cpp) into one place (Screen.cpp)
    
    * Revert Zoom->EffectiveZoom renaming
    & remove duplicated zoom reset
    Increase warning visibility on Windows systems
    
     - Windows console / stderr / stdout output is hampered for GUI applications
     - Replace usage of cerr for logging errors with Files::LogError, which
       will echo to cerr and also to a file.
    Made "fast-forward" only apply when the player is in flight, not in any of the UI panels.
    Enable save-aware data parsing without modifying the save
    
    https://github.com/endless-sky/endless-sky/pull/3994
    
    * Allow parsing game data for content errors
    
     - Specify the `-p` or `--parse-save` command-line option to load the most recent save and allow the game to perform reference-checking.
     This option exits before initializing SDL (e.g. headless operation), and does not save the file before exiting.
     - Updated the man page and help text as well
    
    * Include whitespace warnings in DataFile::Load
    
     - Print warnings to stderr and errors.txt when spaces and tabs are mixed
     - Provides a warning if a line starts with a space, and then tabs are later used in the file for indenting
     - Provides a line-specific warning if spaces and tabs are intermixed on the same line.
     - Fix existing mixed whitespace indentation
    
    * Extend CI tooling with data parsing test
    
     - add bash script for Travis CI
     - add PS script for AppVeyor CI
    
    The scripts invoke the new `-p` command-line flag and test whether the `errors.txt` file was created.
    If so, this is taken to mean that a parsing error occurred. The scripts can be executed locally by passing the appropriate executable as the argument to the script.
    
    * Add OSX build environment
    
     - Homebrew installations of the developer dependencies (per the developer readme).
       (This will eventually result in a broken build when a core dependency publishes a new point release, at which point the XCode project will need to be updated.)
    
    * Avoid automatically saving upon game load
    
     - Closes https://github.com/endless-sky/endless-sky/issues/3510
     - Only allow saving after the player has explicitly "entered" their savegame
       Players explicitly 'enter' their savegame via the keypress / button:
       - 'Enter Ship' (after first launching the game)
       - 'Load Game' (after pressing Load/Save and then selecting a different save)
    
    In other words, if you tell the game, "Yes, this is the save I want to play," its save file will be updated when you close the game.
    If you didn't explicitly tell the game that, then the save file will not be modified.
    Quit after displaying tables (#3899)
    
    * Quit after displaying tables
    
    * Update man page with launch prevention of -s and -w options
    Another attempt at fixing double fullscreen toggling.
    Added a check to screen out multiple simultaneous fullscreen key events.
    Added support in ImageBuffer for loading multiple frames of an animation into one buffer.
    Updating the changelog, etc. to prep for a release on Monday or Tuesday.
    Moved the actions that have to be done each time player.New() or player.Load() is called (resetting messages, reverting the game data, and then applying any changes) directly into those functions so they don't have to be called separately. (There was previously a bug where messages didn't reset if New() was called from the main menu.)
    Only hide the cursor when the player is flying around in space, not when any user interface panel is active.
    In fullscreen mode, the game will now hide the cursor if it does not move for ten seconds.
    Getting ready for a release on Friday unless some other high-priority change comes up.
    Backing out my changes to try to fix icons on KDE, because they didn't work.
    Typo in my previous commit.
    Wrapping the Linux-specific aspects for the previous commit inside ifdef guards.
    Possible fix for low-resolution window icons on KDE.
    Made it so caps lock fast-forwards the game (when not in debug mode).
    Final updates preparing for 0.9.6 tomorrow (unless any last-minute bugs come up).
    Don't set the window icon on Mac OS X. The built-in icon looks much better.
    Getting ready to release 0.9.5 tomorrow (assuming no high-priority bugs come up).
    Added code to set the window icon.
    Updated the window resizing code so that odd window dimensions will not cause a blurry display.
    Fixing the viewport setting for high DPI displays.
    Updating the changelog and version number. Planning to release 0.9.4 on Tuesday if no new bugs crop up.
    Changing how window resizing is handled to hopefully fix a hang on Windows when maximizing.
    Getting ready for the 0.9.3 release.
    Fixed an issue where the window dimensions could end up odd if resizing by a single pixel at a time.
    Updated the changelog and version info, preparing for a release a week from now.
    0.9.2 updates
    Fix "Member 'XXX' was not initialized in this constructor " compiler
    warnings for WrappedText, ShipyardPanel, Interface, and Font.
    Add parentheses around condition in main.cpp per compiler warning
    suggestion.
    Another changelog update, plus version number updates.
    Final update to the changelog and version number.
    Added code to (hopefully) avoid the screen resizing race condition on Unity.
    Updated the changelog and version numbers for release 0.8.11.
    Changed the version number to 0.8.10 to get ready for the next release.
    Preparing for release 0.8.9.
    The fullscreen button now works regardless of what UI panels are being displayed.
    Made the keyboard shortcut underlines only display when you hold down Alt, to avoid cluttering the interface the rest of the time.
    Disabled pausing on window minimizing, because some people encounter problems getting it to unpause after that, and it's easy to just pause by bringing up the menu instead.
    Preparing for the 0.8.8 bug fix release.
    The zoom will now reset to 100% if it is set too high for the full UI to fit on screen.
    Increasing the timer resolution on Windows to avoid irregular frame rates.
    Prepping a second point release with some thigns the first one did not fix.
    Getting ready for a point release 0.8.6 to fix a critical bug in 0.8.5.
    Updated the version number to 0.8.5.
    The game is now muted and paused if you minimize the window.
    Switched the Escape key to closing dialogs, like people expect it to, instead of always going to the main menu.
    Suppressing the SDL message if it is an empty string, to avoid making all errors look like SDL errors.
    Updated the version number and changelog for the next release.
    Incremented the version number.
    Updated the changelog and version number in preparation for a new release tomorrow.
    Changed how window resizing is done to avoid extra resize commands (which may be what is causing the freeze on Windows).
    Made it possible for plugins to supply new sounds.
    Updated the version number and the credits list in preparation for a new release.
    Added the output of SDL_GetError() to the error messages.
    Added a "pause" button (backquote; only accessible in debug mode) for freezing the game so you can take a screenshot.
    Made the slow-motion key (caps lock) only work if a command line option is given to activate "debug" mode, so players won't trigger it by accident.
    Updated the version number to 0.8.0 in anticipation of a stable release one week from now (unless further bugs are found).
    Updated the version number, for the "release candidate" 0.7.12 release.
    Added support for "@2x" image files to supply double-resolution graphics.
    Simplified the logic for changing the zoom level of the screen, by moving more of it into the Screen class.
    Added support for changing the global zoom factor (for large monitors and for testing high-DPI rendering on normal monitors).
    Updated the version number to 0.7.11, and added a list of beta testers.
    Made failure to query the GLSL version return a more helpful error message (including the OpenGL version, in case the failure is because you're in an OpenGL 1.1 context).
    Switched to only specifying the OpenGL version on Windows, so that on Linux it will instead give the more helpful message that says what your OpenGL version is and what version is required.
    Updated the startup code to display errors in message boxes instead of just the command line, and also to only require OpenGL 3.0 instead of 3.3.
    Added Alt+Enter as a shortcut for "toggle full screen."
    Added proper cleanup code in all the places where the program can bail out when starting up, so it will quit cleanly instead of crashing.
    Added a #include that was needed on Windows.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Switched all URLs to HTTPS (where supported) as requested by Paul.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added a check for the OpenGL version, reporting an error if it is less than 3.0 (GLSL version 1.3).
    Updated the version number to 0.7.10 in anticipation of a second beta release soon.
    Explicitly disabling the depth buffer, just in case it is somehow getting turned on in some cases.
    Updated the version number to 0.7.9.
    Took out most of the overloaded operators for Command, because it is not at all clear how they should handle the turn field, and ignoring it was causing problems.
    Added code to support high-DPI (i.e. "retina display") graphics.
    Updated the website to point to github, and also updated the version number to 0.7.8 (which is my intended tag for the next release).
    Fix swizzle check on Mac.
    Added a -t/--talk command line option to test-drive a conversation read from STDIN (including text substitution).
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Added a Code::Blocks project for building the code on Windows (and made a few changes to support it).
    Made some changes to support Windows porting, assuming MinGW will be used to provide basic POSIX functionality.
    Added a "Preferences" class to parse the preferences file, and made the load display and auto-aim controlled by preferences. Also added an auto-fire AI option.
    Reduced missile damage a bit to balance them better, and also added a "--weapons" command line option to print statistics about all weapons.
    Geot the caps lock key for slow-motion working again.
    Added a volume control, and a preferences file that saves the volume and window size in between runs.
    Got basic audio support working. I do need to track down better sounds, or at least balance the audio levels better between them.
    Made some fixes to get the Mac build working.
    Added a Politics class that can handle governments coming to the aid of allies, tracking the player's reputation in response to different actions, etc.
    Added a warning message if running on a computer that does not support texture swizzling.
    Moved the "report bugs to" and "home page" lines from the --version output into the --help output.
    Added --help and --version messages.
    The program now auto-detects the proper GLSL version number so it does not have to be set via conditional flags for each OS.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Refactored to consistently call the PlayerInfo, "player", and the player's flagship, "flagship".
    Had to roll back to OpenGL version 3.0 instead of 3.3 on Linux, but left the Mac port at 3.3.
    Ported to Mac OS X.
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Added a "Files" class which abstracts out filesystem operations (including finding the resource and config path for each OS). That allows me to remove the boost dependency, which will make porting easier.
    Added video vsync in full-screen mode. It seems to cut down on the stuttering I've been seeing on Linux.
    Added an option to toggle fullscreen mode. It's still a little buggy on Linux.
    Limited the window resizing to even sizes, because the display gets blurry when it is odd (graphics being drawn with a half-pixel offset).
    Fixed a few final issues in the load / save / new mechanics. It all seems to be working correctly, now.
    Got the Load / Save panel working.
    Added GPL statements to all source code files and added a license.txt file.
    Got "New Pilot" working, including visiting the shipyard and picking out an initial ship.
    Added saving of the game (every time you leave a planet, or if you quit while on a planet).
    Updated how the UI panels are handled to allow the main menu to be called up regardless of what the game state is.
    Added saving capability to the Ship class.
    Added display of the current pilot's information in the main menu.
    Added a preferences panel for customizing the key controls. (They are not yet used, though.)
    Uploaded all the files from my local repository to Google Code.
    Unify refueling and routing code (#3123)
    
    * Unify refueling and routing code
    
     - Extends advanced refueling logic to ships moving independently & following orders
     - Extends advanced refueling logic to in-system escorts
     - Chooses the best route for a ship to reach its destination system
    
    * Ships without fuel capacity should not refuel
    
    * Update ShouldRefuel logic
    
     - Implement DistanceMap::End() function, to obtain the desired destination system for a given DistanceMap
     - If no fuel depot systems are on the route between the ship and its destination system, do not refuel unless necessary.
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Update allowed travel plan creation conditions (#2938)
    
    * Update allowed travel plan creation conditions
    
     - Remove incorrect MapPanel error message when the player's flagship has no hyperdrive/jump drive installed.
     - Wormhole-only travel plan creation is possible for the player when no hyperdrive/jump drive is installed.
    
    * HasSeen->HasVisited, to prevent incorrect errors
    
    * Alls ship without hyperspace ability can plot wormhole-only travel plans
    
    Rather than check that DistanceMap was initialized for the player, check
    if the calling ship's system has a wormhole available.
    
    * Create strings only once
    Enhancement: Consider next refuel stop when traveling to parent ship's system (#2997)
    
    * Convenience function to know if a planet has fuel for a ship
    
    * Consider the next refuel system when an escort is traveling to the parent.
    
    An escort was only checking if it had enough fuel to reach the next
    system, so it could get stuck when it had to travel through two
    consecutive systems where it couldn't refuel.
    
    Now it checks how much fuel is required to reach the next refuel system
    on the travel route to decide if it should refuel in the current system.
    
    * Clarify code and stop checking when we go over fuel capacity
    
    * Clarify comment.
    
    * Rework required fuel check.
    
    DistanceMap is already tallying fuel so choose the best route.
    Pathfind via accessible objects only
    
    Escorts will not attempt to pathfind via wormholes that are inaccessible to them but are accessible to the player.
    Closes #2490
    Refactoring to avoid any places in the code that make assumptions about how much fuel is used by various jump modes.
    DistanceMap now takes total fuel cost into account (hyperdrive vs. scram drive) instead of assuming jump cost is always twice the hyperspace cost.
    Made it so certain planets will only show up as something you can land on if your ship has certain attributes.
    For multi-stop wormholes, only display a wormhole path if both endpoint systems have been visited.
    Simplified the code in some places where map::count(key) or map::erase(key) could be used alone without calling map::find() first.
    If you bring up the map while entering hyperspace, your current jump trajectory will now be "locked" in place.
    0.9.2 updates
    In distance mapping, wormhole jumps now count as 1 distance instead of 0 (because they use up time, even though they don't use up fuel).
    In jump drive route planning, you can only plan a jump between two unknown systems if you know that a link exists due to them being within the jump distance of each other.
    Map pathfinding now prefers less "dangerous" systems if multiple routes exist with the same fuel cost and number of jumps.
    Fixed some pathfinding issues with wormholes with more than two exits.
    Pathfinding now checks whether you have "visited" wormholes before routing through them.
    Added support for wormhole travel in pathfinding (including stranded escorts).
    Added basic support for random missions that get offered when you board a ship.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Modified the pathfinding when using the jump drive so that you don't have to have explored either endpoint, as long as you know it's there.
    Various small fixes to things I found during testing.
    Fixed a few bugs in my reimplementation of DistanceMap.
    Code cleanup: always referring to the player's ship as "flagship."
    Switched DistanceMap to using a full implementation of Dijkstra's algorithm (for the rare case where a ship has both a jump drive and a hyperdrive).
    Switched DistanceMap to use one generic Init() function instead of five separate ones, and also to be able to handle ships with a jump drive and a hyperdrive.
    Added the ability to shift-click to add to your travel plan instead of replacing it.
    Spell-checked the comments.
    Rather than cheating and traveling directly to the system its parent is in, the escort AI now uses proper pathfinding, and also refuels if necessary along the way.
    Added support for job "templates" in the mission data. To start out with, added a variety of passenger missions, some of which only happen if you are on certain kinds of planets.
    Added a map outfit that is equivalent to "visiting" the twelve nearest systems.
    Fixed a bug where pathfinding could take a route between two unvisited systems if it was at least as short as the shortest "known" route.
    Simplified DistanceMap: it does not need a set of all systems, since a map can be generated branching out from a single given system.
    Added a "DistanceMap" class that calculates routes and distances between stars, using either the hyperdrive or the jump drive.
    Added the view zoom to the preferences panel, and made it possible to adjust settings that have a range of values using the scroll wheel (hovering over the setting) instead of clicking to cycle the values.
    Made it possible to zoom the view in or out (via the scroll wheel or the +/- keys) without changing the UI zoom.
    Added a setting to adjust the scroll speed.
    Added a key command to toggle escort ammo usage on the fly.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added a "Preferences" class to parse the preferences file, and made the load display and auto-aim controlled by preferences. Also added an auto-fire AI option.
    Renamed "ShipName" to "Phrase" since it is also used for random hail messages.
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Added planet and spaceport descriptions for 35 more planets.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Added support for "special" log entries, containing whatever you know about a particular person, faction, etc.
    Added a "logbook": mission actions can now have "log" entries that automatically get added to the logbook, to remind the player of where they are in the story and what quests they have completed.
    test: Support test case execution, locally and in CICD (#4998)
    
    * Extend CI environment with graphical testframework
    Adds CI workflow for Ubuntu 16.
    Adds minimal code to main.cpp to run hardcoded empty testcase.
    Changes script for headless testing to run hardcoded testcase.
    
    * Fix coding style issue.
    
    * Updated step names to differentiate between tests
    Renamed existing tests to parsetest_*.
    Renamed the new test to autotest_*
    Re-ordered tests so that all parse-tests are together.
    
    * Changed GameData::Progress check to (menuPanels UI)->IsInitialized.
    As based on review-feedback. Using the same pattern as isDone.
    Removed the isReady variable in the anonymous namespace of MenuPanel.
    Also replaced explicit default constructor for UI by implicit constructor.
    Tested:
    - Quit from main menu
    - Exit during flight (by closing window)
    - Ran the automated test
    
    * refactor: move "are we loaded?" from UI to GameData
     - Add "const" accessor GameData::IsLoaded & backing boolean
     - Remove UI->IsInitialized & associated branching
     - Update class comments / method names to distinguish simple accessors & identify future refactoring opportunities
        Audio::Progress -> Audio::GetProgress, as it is already a simple accessor
     - Disable moving/copying the SpriteQueue class, given that it manages threads
    
    * docs: update --help and man entries
    
    * scripts: exit early if not on a supported headless platform
    
    * chore: Update GameLoop params
    Preloaded conversation data, test, or debug mode are not modified.
    
    Co-authored-by: tehhowch <tehhowch@users.noreply.github.com>
    Enable save-aware data parsing without modifying the save
    
    https://github.com/endless-sky/endless-sky/pull/3994
    
    * Allow parsing game data for content errors
    
     - Specify the `-p` or `--parse-save` command-line option to load the most recent save and allow the game to perform reference-checking.
     This option exits before initializing SDL (e.g. headless operation), and does not save the file before exiting.
     - Updated the man page and help text as well
    
    * Include whitespace warnings in DataFile::Load
    
     - Print warnings to stderr and errors.txt when spaces and tabs are mixed
     - Provides a warning if a line starts with a space, and then tabs are later used in the file for indenting
     - Provides a line-specific warning if spaces and tabs are intermixed on the same line.
     - Fix existing mixed whitespace indentation
    
    * Extend CI tooling with data parsing test
    
     - add bash script for Travis CI
     - add PS script for AppVeyor CI
    
    The scripts invoke the new `-p` command-line flag and test whether the `errors.txt` file was created.
    If so, this is taken to mean that a parsing error occurred. The scripts can be executed locally by passing the appropriate executable as the argument to the script.
    
    * Add OSX build environment
    
     - Homebrew installations of the developer dependencies (per the developer readme).
       (This will eventually result in a broken build when a core dependency publishes a new point release, at which point the XCode project will need to be updated.)
    
    * Avoid automatically saving upon game load
    
     - Closes https://github.com/endless-sky/endless-sky/issues/3510
     - Only allow saving after the player has explicitly "entered" their savegame
       Players explicitly 'enter' their savegame via the keypress / button:
       - 'Enter Ship' (after first launching the game)
       - 'Load Game' (after pressing Load/Save and then selecting a different save)
    
    In other words, if you tell the game, "Yes, this is the save I want to play," its save file will be updated when you close the game.
    If you didn't explicitly tell the game that, then the save file will not be modified.
    Implement a ShipEvent queue to allow delayed ShipEvent handling (#3371)
    
    * Implement a ShipEvent queue to allow delayed ShipEvent handling
    
     - Handling ShipEvents can result in new UI elements.
     - Only one UI element should be created and displayed to the player at a time (i.e. do not display a dialog and the BoardingPanel simultaneously).
     - Callbacks from one UI element from a given ShipEvent may result in status changes that should influence other UI elements created from the same ShipEvent (e.g. if a mission conversation offered upon boarding an NPC results in that NPC's destruction, the player should not be able to plunder said NPC).
     - Fixes a preexisting issue where the boarding panel would be offered if the player dies in a conversation.
    
    * Switch from GetUI()->IsTop(this) to GetUI()->Top().get() == this
    
     - IsTop() checks only drawn panels, not panels that are requested but not yet drawn.
    Switched to a more generic solution for multiple key presses where one opens or closes a new UI panel.
    The map can now be zoomed with the scroll wheel in addition to with buttons / keys.
    Switched the Escape key to closing dialogs, like people expect it to, instead of always going to the main menu.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Spell-checked the comments.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Modified the darkened "backdrop" for dialogs so that it is only drawn for the topmost panel, so that if multiple dialogs are up it does not completely blacken the screen behind them.
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Added GPL statements to all source code files and added a license.txt file.
    Got "New Pilot" working, including visiting the shipyard and picking out an initial ship.
    Added a "New Pilot" dialog (which doesn't yet move you straight to the shipyard, though).
    Updated how the UI panels are handled to allow the main menu to be called up regardless of what the game state is.
    Support data files encoded by UTF-8.
    feat: Print line numbers in DataNode traces
    
    DataNode stack traces are not always unique (e.g. Phrase definitions), so additional information may be helpful.
    feat: Support algebra in ConditionSet expressions (#3128)
    
    * Handle assignment operations inside ConditionSet::Test
    
     - Add boolean test/apply indicator to each expression
       - Determine if a ConditionSet performs tests or assignments in the expression constructor
     - If the ConditionSet is not pure (mixes assignments and tests), use the assignment operators to alter an initally-empty map)
       - When obtaining the value from strings (e.g. conditions), first check the created map, then fall back to the player's conditions.
     - Warns when loading if an and/or node uses assignment operators
    
    * Create classes to manage complex condition expressions
    
     - SubExpressions represent each side of an expression, with methods to allow serialization and evaluation
     - SE::Operation class manages the details of math within a given side, by tracking the location of operands and operator
    
    * Implement sequence generator algorithm based on Dijkstra's shunting yard
    
    * Alter Add methods to use SubExpressions and Operations
    
     - Add SubExpression and Expression constructors for simple conditions
       - Simple conditions have only one token per side, so vector constructs are unnecessary.
    
    * Simplify adding operators, reduce code duplication
    
     - Add modulus to supported simple operations
        e.g.        `year % 7 == 1`
          will be true for years 1, 8, 15, ...
     - Moved the precedence map to an anonymous function
       - Simplify the process of updating supported simple operators, as all maps/sets are now in the same region of the file.
     - Reduce duplication with 'AddOperation' private method
    
    * Extend DataNode with static methods for string parsing
    
    * Simplify FW:Intro offer checks
    
    * Use stdlib to simplify, update initializations
    
    * Maintain support for legacy `never`
    
    * Simplify warnings & check for leading adjacent (
    
    * Tweaks
    
     - Avoid taking reference to `map::find` iterator (as find is return-by-value)
     - Add missing `vector::reserve()` call
     - Reduce number of different `vector::emplace_back` overloads used
     - Reduce calls to `DataNode::IsNumber` by checking for `"random"` first
    
    * Simplify "deep convoy" checks
    
    * Add bounds-checking for user-input condition values
    
     - No bounds checks done for the results of computations
    
    * Update some comments
    
    * revert accidental "has" -> "not" change
    DataNode::PrintTrace() now prints the full trace even in copied nodes, and prints the file name if called on a child node of a DataFile.
    Avoiding parsing error messages in ConditionSet from trying to parse non-numeric values as numbers. Also did some code cleanup.
    Fixed some things that Google's cpplint warns about (mostly, constructors that should be marked explicit).
    More updates to the code comments.
    Added support for printing a "trace" of a faulty DataNode.
    Did some optimizing of the file parsing code, so that startup will not bog down as the game data grows in size.
    Got rid of the "raw" string in DataNode, since it is never used.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Got serialization of conversations working (without bothering to preserve the original node label strings).
    Updated all the functions that save data to use the new DataWriter class (to ensure proper indentation, quoting, etc.).
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Added specific named trade goods for each commodity, to be used as mission cargo.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    Fixed minor code style issues (#4428)
    Using float v. double in some cases of -Wdouble-promotion
    
     - Add some <algorithm> headers for uses of std::min or std::max
    Table: added a function to get the bounding rectangle of the current row.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Removed superfluous std:: prefixes.
    Updated the bank panel to handle more than 8 line items (by combining some together into an "Other" line).
    Started updating the code to use the new Format and Table classes.
    Added two new classes, Format (for formatting numbers) and Table (for formatting tables).
    Free Dominated Planet
    Fixed a bug where fines for illegal cargo or outfits could be assessed for ships other than the one that is scanned or for ships that are not even in-system.
    Added support for planetary domination. (But, it won't do anything until defense fleets have been set for each planet.)
    Fixed a mistake in my previous commit.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added convenience functions to Planet and Government to simplify the syntax for querying political state. Also fixed a few busgs in my recent Command and AI changes.
    Added a new "infiltrating" mission mode where you can land on a planet, but cannot access any services there or refuel your ship.
    Added support for illegal cargo and outfit checks when you are scanned or when you land on a planet.
    Made it possible for game events to alter one government's attitude toward another.
    Got "security levels" specified for each planet. So far the only crime you can be caught committing is having an unlicensed ship.
    Added Republic "licenses" for each ship, and added a fine that is assessed if you are scanned by the Republic and are flying an unlicensed ship.
    Modified missions to not randomly be placed on planets you do not have permission to land on.
    Planets no longer allow you to land if you have a negative reputation with their government.
    Made it possible to bribe hostile ships to leave you alone. More principled captains will refuse your money, however.
    Got permanent reputation changes working, with Ship::TakeDamage now returning a combination of PROVOKE, DISABLE, and DESTROY depending on the projectile's effect.
    Added a Politics class that can handle governments coming to the aid of allies, tracking the player's reputation in response to different actions, etc.
    The player will now remember minable types they have targeted in a system even if they didn't harvest anything from them.
    Switched to using CollisionSet for asteroids and minables, and cleaned up some of the code related to them.
    Added a new "Visual" class that represents just the information we need to track for an Effect once it's instantiated. Using it in place of Effect saves a string copy and a good deal of memory for each active visual effect.
    Switched to using a vector for Projectiles and Effects, to reduce memory allocations and improve cache performance.
    Extend reference-checking in GameData::CheckReferences (#3116)
    
    * Extend reference-checking in GameData::CheckReferences
    
     - Add Name() to Minable & Phrase
     - Add IsDefined() to GameEvent
    
    * Enable reference-checking for GameEvents and Missions
    
    * IsDefined->Name and other feedback
    Added NPC AI support for harvesting flotsam. (For miners, or for distracting pirates by dumping cargo.)
    Added a "Minable" class, representing a minable asteroid in an elliptical orbit.
    fix: Add override to AllowFastForward() where appropriate to remove compiler warnings (#5194)
    feat: Switch off fast-forward if the player is not in flight (#5148)
    
    This is so that the behavior of fast-forward is consistent between panels (#5038). This also gives the player extra time to react when coming out of a boarding panel or on enter conversation by turning fast-forward off if it was on when entering the panel.
    
    The map panel and player info panel are exceptions to this, as they are panels that are commonly accessed and can be accessed at any time while in flight.
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Using float v. double in some cases of -Wdouble-promotion
    
     - Add some <algorithm> headers for uses of std::min or std::max
    Made it so that when the map automatically shifts to center on a selected system, the motion animates rather than happening instantly.
    Display a map tooltip for escorts in a given system (#3587)
    
    * Basic Hover() support
    
    * Basic tooltip display
    
    * Tooltip displays active and parked escort counts
    
     - Tooltip shifts to remain on-screen if near screen edges
     - Special tooltip message for hovering over a system with just the flagship in it
    
    * Rework tooltip trigger to activate after 1s of dwell time
    
     - hoverSystem is guaranteed to be in escortSystems
     - Set the hover criteria on mouse move (i.e. the hover event)
     - Track dwelling time every step (i.e. the mouse doesn't have to keep moving)
     - Eliminate unused code / checks.
    Update the map cache when selecting a new outfit or ship.
    Caching the map layout so it doesn't need to be re-calculated every frame. This makes map drawing use about 25% less CPU time.
    Fixed map search centering at non-default zoom. (#3708)
    
    * Fixed map search centering at non-default zoom.
    
    * Made map centering after search and mission selection more consistent.
    Show location of player escorts on the map (#3576)
    
    * Identify escort systems with a center dot
    
     - Inside the system ring, show a grey dot if there are player-owned escorts in that system
     - Does not apply to the player's system
    
    * Use preference to control displaying the pip
    
    * Differentiate parked and unparked escorts via pip brightness
    
     - Also, show the pip for the flagship system (to help teach what the pip means).
    
    * Default display of escort system pips to "on"
    Refactor MapPanel's Draw___ methods (#3379)
    
    * Refactor MapPanel's Draw___ methods
    
     - Improve mod coloring support via expanded use of interfaces.txt:
       - Switch the minimap from a hardcoded position to an Interface
       - Use travel plan colors from interfaces.txt
       - Use System name, link colors from interfaces.txt
     - Move the increment of `step` from MissionPanel to the base MapPanel
     - Add comments to DrawMiniMap, DrawTravelPlan, and DrawWormholes
     - Used and updated MapPanel constants
     - Draw the Travel Plan after wormholes, since wormholes by default have non-zero alpha.
       - This removes the small, dark purple centerline from drawn travel plan routes that use wormholes
     - Adds function to Planet class to export all systems in which it can be found
     - Do not show the "planet description" box if the planet in question is a wormhole.
     - Change DrawWormholes iteration scheme from "every StellarObject in every System" to "check only planets"
       - Fixes bug in DrawWormholes caused when two wormholes reference the same system (i.e. Cardea), which cause the wormhole link to be drawn over a previous directional arrow
    
    * Move the mini-map position specifier into the "hud" interface
    Fixed some things that Google's cpplint warns about (mostly, constructors that should be marked explicit).
    Made it so the map zoom level is remembered when you close the map. Also cleaned up some of the map code.
    Made Panel::Click() able to distinguish double-clicks, so that the info panel can switch to a ship only if it is double-clicked, not just clicked twice in a row.
    Fixed some variables that don't need to be mutable now that Panel::Draw() is not expected to be const.
    Made it so the currently selected commodity or map coloring is remembered in the player info and is carried over to the trading panel if it is a commodity.
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    0.9.2 updates
    Made the active mission pointers a bit bigger and the blocked mission pointers a bit darker to better differentiate between them.
    Moved the "mini map" code into MapPanel, and added pointers for missions and waypoints.
    The find function in the map panels now prefers names that start with the given string.
    Changed Panel::Drag and Panel::Scroll to take double dx/dy
    
    Fixes endless-sky/endless-sky#805
    Added a find function to the maps of where ships and outfits are sold.
    The map panel shown from the conversation panel now has the systems correctly colored (by reputation).
    Selecting a commodity in the map now selects it in the trading panel, if that's where the map was opened from.
    Added support for "stopover" planets specified by a mission.
    The "ports" map now shows whether each planet has been visited.
    Added a map key to the details ("Ports") map panel.
    Merged wormhole-links with new way of traversing wormholes that avoids links. Created function specifically for drawing wormholes, this way the wormholes can be guaranteed to be drawn under all other links. To appear as a wormhole link on the map, the wormhole *must* have a planet entry.
    The map can now be zoomed with the scroll wheel in addition to with buttons / keys.
    Fixed a few things in the map zooming code.
    Fixed click distances, zoom buttons now disable when at min or max zoom.
    I think everything is working, testing.
    Missions that are waiting on an NPC condition or visiting a waypoint are now "greyed out" in the mission list as well as in the pointers.
    Added two new map views, showing all ships and outfits that you know can be bought, and where they are sold.
    Made mission pointers blink for missions with deadlines, to draw your attention to them as a priority.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Modified the pathfinding when using the jump drive so that you don't have to have explored either endpoint, as long as you know it's there.
    Code regluarization: making sure the PlayerInfo object is always referred to as "player" instead of "info."
    Added a "find" dialog to the map panel (accessible by pressing "F").
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Gave the conversation panel an option to pop up a map showing a system highlighted, if the conversation is the introduction to a mission.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Refactored MapPanel and MissionPanel to share the underlying code for drawing the map.
    Added support for passenger-carrying missions.
    Added a "DistanceMap" class that calculates routes and distances between stars, using either the hyperdrive or the jump drive.
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Added GPL statements to all source code files and added a license.txt file.
    Updated how the UI panels are handled to allow the main menu to be called up regardless of what the game state is.
    Added a "color" field for governments, and modified the map panel to allow coloring systems by government.
    Uploaded all the files from my local repository to Google Code.
    Fixed some things that Google's cpplint warns about (mostly, constructors that should be marked explicit).
    Switched back to the old way of doing frame timing, but with an extra check to make sure it never waits for longer than a frame.
    Changed the frame timer to what will hopefully be a more robust implementation.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Switched to using the "chrono" library instead of the Unix-specific time functions.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    feat(mechanics): Save collections in order by element name (#5333)
    
    * feat(saves): write collections in deterministic order when saving
    
    * refactor: simply methods via capture lambdas
    
     - No need to pass DW instance around
     - use more "using" declarations to simply method declarations
    
    * pr feedback + lambda styling
    
     - applied a more uniform style to lambda expressions
    feat(mechanics): The sounds and effects of a drive can now be customized (#5044)
    style: rename a variable, fix spaces indentation
    feat(mechanics): New enginepoint types and support for over/under and angled engine flares (#4539)
    feat(mechanics): "Protection" attributes that mitigate a fraction of incoming damage (#4519)
    feat(mechanics): Support multipliers for shield generation and hull repair related stats (#4525)
    
    * Added multiplier attributes for shield generation and hull repair related attributes
    
    * Display multiplier attributes as percentages
    
    * Fixed tooltips
    
    * ShipInfoDisplay now takes multipliers into account
    
    * Don't show shield/hull repair stats if the multiplier is <= 0
    
    * Fixed accuracy of various calculations and updated hasShieldRegen and hasHullRepair
    
    * Hard coded a whitelist for the multipliers to allow them to be negative
    
    * Code simplification
    
    * Error fixes
    
    * Revert whitelist changes
    
    Let whitelist changes occur in a separate PR
    
    * Updated hasShieldRegen and hasHullRepair
    
    Negative costs no longer block repairs
    
    * Removed now unnecessary fuel calculations in ShipInfoDisplay
    
    * Update ShipInfoDisplay.cpp
    
    * Update ShipInfoDisplay.cpp
    
    * Moved variables back to their previous locations (as they're no longer needed to computer hasShieldRegen or hasHullRepair)
    
    * Use conditional operators instead of multiplying by a boolean
    
    * Change the wording in the tooltips
    
    * Added multiplier attributes to the whitelist
    
    Values down to -1 are allowed. This means that at their lowest value, multipliers will have a -100% effect on the specified stat. They can not go lower then this, because then they would be flipping the sign on whatever the stat is, e.g. causing a shield generator to go from consuming energy to producing it.
    feat: Attribute whitelist that allows negative attributes (#4942)
    feat(weapons): Support variable ammo quantity consumption (#4514)
    
    * Added an "ammo usage" weapon attribute that determines how many units of ammo are consumed on fire
    
    * Ammo usage now shows in the outfitter
    
    * Syntax change
    
    * Spacing
    
    * Spacing
    
    * Tidying up the code
    
    Removed the IsWeapon check from the display because any outfit with a >1 ammo usage is guaranteed to be a weapon.
    
    Used a conditional operator in Weapon.ccp to cut down on code.
    
    * Allow an ammo usage of 0
    
    The outfit must still be installed in order to fire.
    
    * Renamed ammoPair to just ammo and left a comment explaining what it is
    
    * Added another comment for clarification
    
    * #include <utility> in Weapon.h for the ammo pair
    Issue deprecation warnings & simplify some code (#4000)
    
    * Fix osx compile warning
    
    * Emit warnings for deprecated turret specs and homing w/o tracking
    
    * Require ranges / radii to be non-negative
    
    * Replace implicit defaults with explicit values
    
    * Handle deprecated "cargo scan" and "outfit scan"
    
    * Replace locally repeated code with local lambda
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Reverting the patch for the short-lived ship mass bug. Also replaced Outfit::Reset() and Outfit::Add() with a single Set() function.
    Save a ship's base mass. (#3481)
    
    * Save a ship's base mass.
    
    * Manipulate the "mass" attribute the same way as other attributes.
    
    * Use the chassis mass of the ship's model.
    
    Fix broken save files of issue #3480
    Several related changes to fighters: they can now run their own systems when being carried (to generate energy, repair, etc.). Their heat level is now indepenedent of the ship carrying them. Fighters now retreat for repairs if badly damaged, and launch only when mostly repaired. And, repair priority is given to the least damaged fighter.
    Removing some unnecessary std:: prefixes.
    Added a "Dictionary" class that works like an STL map<string, double> but allows faster lookup and no string allocations.
    Code cleanup: "static" is redundant inside a C++11 anonymous namespace.
    Added support for independent turret tracking (and, limited turret turn rates) for everything but anti-missiles.
    Made it possible for outfits to require licenses to buy them.
    Added the ability to specify plural forms of outfit and ship model names.
    Fix not autoselling ammo when selling storage item.
    
    Exposed ammo to be loaded by all outfits not just weapons.
    Outfits can now explicitly define a "flotsam sprite" instead of repurposing the weapon icon for that.
    Added a common base class for Ships, Projectiles, Asteroids, Effects, Flotsam, StellarObjects, etc. This is the first step in creating a generic collision detection framework that can deal with different object types.
    Trying to speed up the fleet strength calculations.
    Regularizing the shipyard and outfitter maps code to make them easier to merge.
    Added warning messages whenever a line of a data file or saved game is unrecognized.
    Made it possible to selectively override sections of a ship definition.
    Made it possible for engine flares and afterburner effects to "stack," so that if you have multiple engines both their flares will be shown instead of only a random one of them.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Switched afterburners to using a distinct "afterburner effect" field in the outfit spec instead of using the "die effect" in the weapon section.
    Did some significant optimization (at least 2x faster calculation times in big battles) by switching weapon attributes from a string to double map to a fixed set of values accessed by inlined functions, instead.
    Renaming some functions in preparation for moving the weapon attributes out of Outfit and into a separate class.
    Modified Outfit to handle rounding errors, and to automatically sell ammo if you sell the launcher.
    Tweaked the handling of sub-munitions. In particular, they are now only created if the projectile does not hit something, and if it does hit something, it does all the damage its submunitions would have done.
    Gave Outfit some new convenience functions for getting weapon info that takes submunitions into account.
    Switched to 64-bit values for storing credit amounts (to avoid rolling over if you get 2 billion credits).
    Got basic audio support working. I do need to track down better sounds, or at least balance the audio levels better between them.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Added the outfitter UI. You can browse all outfits, but buying is not yet enabled.
    Fixed a bug where the gun and turret count for a ship increases every time the pilot file is saved.
    Added GPL statements to all source code files and added a license.txt file.
    Added saving capability to the Ship class.
    Added a secondary trigger key for weapons that use up ammo, and a display of ammo remaining for each.
    Uploaded all the files from my local repository to Google Code.
    Added support for system attributes, to be used when picking systems for waypoints, NPCs, or persons.
    Made solar collection and ramscoop rates vary from system to system depending on the star(s).
    Potential error fixes from @AskePit.
    Made it so an autopilot travel destination works even if the destination is a wormhole.
    Made System's list of links and neighbors a set instead of a vector, to simplify adding and removing items and checking if a given system is in the set.
    Made it so certain planets will only show up as something you can land on if your ship has certain attributes.
    Made it possible to specify the background haze image for each star system.
    Made it possible for each planet and system to specify the "music" to play when you are there.
    The trade panel is now only accessible is a system has commodity prices. Also added a "not for sale" label if some commodities are for sale but not others.
    Systems can now define "minables" in addition to normal asteroids.
    Map pathfinding now prefers less "dangerous" systems if multiple routes exist with the same fuel cost and number of jumps.
    Update my master (#1)
    Fixed escort refueling in systems that have fuel but not for you. Also fixed a problem where multiple ships could request assistance from the same ship at the same time.
    Added a missing #include in System.cpp. Also made the neighbor distance constant public so it can be referred to by the map.
    Added a relatively simple but robust dynamic trade implementation.
    A few small fixes I found while working on creating a map editor.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Added support for game events modifying the composition of fleets.
    Added support for game events changing any of the contents of systems (stellar objects, asteroids, owner, fleets, trade prices, etc.).
    Added the capability for game events to create or destroy hyperspace links.
    Switched System::GetGovernment() to returning a pointer instead of a reference, to match how I refer to GameData objects everywhere else.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Added Planet::GetSystem() so you can map any planet to the system containing it.
    Added individual "fleet" descriptions for each system, so that the local ships vary depending on where in the galaxy you are and how populous the system is.
    Added GPL statements to all source code files and added a license.txt file.
    Added a "color" field for governments, and modified the map panel to allow coloring systems by government.
    Modified the map display to allow coloring systems based on whether they provide shipyards or outfitters.
    Uploaded all the files from my local repository to Google Code.
    feat(graphics): Add comment with shader name (#4995)
    
    This makes it easier to debug compilation errors
    Typo in SpriteShader commet
    Switched to using 2D "texture arrays" for sprites, so all the frames fit into a single texture.
    Using the new fancy "outline" rendering in the ship info panel, too.
    Code cleanup: "static" is redundant inside a C++11 anonymous namespace.
    Moved the chack for invalid swizzle values directly into SpriteShader, so that no code outside of SpriteShader would need to be changed in the future if new swizzle options are added. (Also made it possible for DrawList to use swizzle 8.)
    Replacing "NULL" with "nullptr".
    Merged the functionality of BlurShader into SpriteShader, and DotShader into RingShader.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added an experimental sprite shader that can render motion blur. This makes everything less choppy, but more blurry, and takes a lot more GPU power.
    Fixed the ship outlines in the info panel to be pure black; they changed when I reused that swizzle index for cloaked ships.
    Added a cloaking device. Have not yet written the AI strategy for when to engage it, though.
    Added an option to draw a sprite filled with black (for the ship info display).
    The program now auto-detects the proper GLSL version number so it does not have to be set via conditional flags for each OS.
    Had to roll back to OpenGL version 3.0 instead of 3.3 on Linux, but left the Mac port at 3.3.
    Ported to Mac OS X.
    Fixed a bug where only the first texture was getting the proper swizzle applied to it.
    Modified the shipyard and outfitter to draw the ships in the player's colors.
    Added GPL statements to all source code files and added a license.txt file.
    Fixed some shaders that used "\t" in place of "\n".
    Added a secondary trigger key for weapons that use up ammo, and a display of ammo remaining for each.
    Uploaded all the files from my local repository to Google Code.
    Made it possible for an engine flare or afterburner to be integrated in a ship chassis.
    Changed how the path to a sound is converted to a "name" (to handle sub-directories that are also named "sounds/"). Also added an error message that is logged if loading a .wav file fails.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Got basic audio support working. I do need to track down better sounds, or at least balance the audio levels better between them.
    Added two new classes, Format (for formatting numbers) and Table (for formatting tables).
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    Continuing to work on code cleanup and commenting.
    Moved the "mini map" code into MapPanel, and added pointers for missions and waypoints.
    Code cleanup.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Made all dots in the radar opaque (so blue objects don't stack to become white).
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    fix(build): Remove unused member variable. (#5350)
    
    Nothing more to add. `ShipInfoPanel::selectedIndex` was unused and clang generated a warning which failed the build due to `-Werror`.
    fix(mechanics): Avoid stale click & hover zones when changing the displayed ship
    
    If the player was rapidly cycling through ship, and simultaneously moving the mouse, the game could both change the displayed ship (invalidating the existing zones) and attmept to hover the zones, resulting in a segfault
    
    closes endless-sky#5176
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Made it possible for a ship's list of outfits in the Ship Info panel to spill over into a third column, reducing the space available for the cargo list.
    Split InfoPanel into separate classes for the fleet listing page and the individual ship page.
    Fixed some things that Google's cpplint warns about (mostly, constructors that should be marked explicit).
    Made Panel::Click() able to distinguish double-clicks, so that the info panel can switch to a ship only if it is double-clicked, not just clicked twice in a row.
    Fixed some variables that don't need to be mutable now that Panel::Draw() is not expected to be const.
    Starting to clean up the info panel. Fixed overlapping text and redesigned it to be able to display more weapon hardpoints (12 on each side of the ship).
    When dumping commodities, made it possible to specify how many tons to dump.
    Added a "disown" button when viewing ship details while landed on a planet, for the rare cases where you want to disown a ship that you are unable to sell.
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    Made it possible to use shift or control to select multiple ships in the fleet listing and then park or unpark them all.
    Changed Panel::Drag and Panel::Scroll to take double dx/dy
    
    Fixes endless-sky/endless-sky#805
    Added the ability to jettison plundered outfits to make room for new ones. Also made the ship info panel show current ship mass, cargo, etc.
    When you are not landed, the ship info panel will now allow you to jettison cargo. Also, the boarding panel now lets you call up the info panel.
    Added support for scrolling the ship list in the player info panel.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Switched to using drag & drop to reorder ships or weapons in the info panel, because that's more intuitive than clicking once to pick them up and again to place them.
    Added support for "parking" ships (to avoid paying salaries for them), and for renaming ships.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Switched the UI code over to using the generic "ClickZone" class in a few more places.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Added a player / fleet panel to the player info display. This includes the capability of reordering ships, including changing your flagship.
    Added the ability to re-assign weapons to different hardpoints (but only when landed on a planet).
    Added a rudimentary ship info panel.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Refactored MapPanel and MissionPanel to share the underlying code for drawing the map.
    Added support for passenger-carrying missions.
    Added a "DistanceMap" class that calculates routes and distances between stars, using either the hyperdrive or the jump drive.
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Added GPL statements to all source code files and added a license.txt file.
    Updated how the UI panels are handled to allow the main menu to be called up regardless of what the game state is.
    Added a "color" field for governments, and modified the map panel to allow coloring systems by government.
    Uploaded all the files from my local repository to Google Code.
    fix(news): avoid picking empty News items
    feat(phrases): Support nested phrase interpolation via ${phrase name} syntax (#4538)
    
    * Add phrase expansion and replacement functions to the phrase node.
    
    Example use:
    ```
    phrase "something"
      word
        `Hello you! Do you listen to "${band}"?`
        "Hello there, I'm ${pirate} and I'm here to steal your ship!"
      replace
        "llo" "y"
        "Hey there," "Surprise!"
    ```
    
    Here, "pirate" is the name of a Phrase that will be invoked and substituted into the rest of the text.
    Additionally, the output will be reprocessed to replace all occurrences of "llo" with a "y", and then to replace all occurrences of "Hey there," with "Surprise!".
    
    * style: Fix typos, reorder to match declaration, update comments
      - Remove unneeded "friend" declaration (since Sentence never modifies Phrase)
    
    * feat: Add a forwarding constructor for Sentence
      - Remove "contains" indirection by privately extending vector
      - Add removal of and warning about wholly-empty Sentences
    
    * feat: Use a once-through, in-place "replace all" method
      - avoids reallocations of `result` and the target->result initial copy
    
    * fix: Place some restrictions on phrase names
      - The game cannot determine which phrases actually exist until loading is completed, so ambiguities in parsing phrase names cannot be resolved when loading `word` choices.
    (An alternative would be to perform the parsing of `word` child nodes in a new `Phrase::FinishLoading` method.)
    
    * refactor: Reimplement "Option" as "Choice"
      - privately extend vector with "Option" signature
      - provide constructor for use with `emplace`
    
    * fix: Explicitly allow creation of an empty Choice
    
    e.g.
    ```
    word
      ""
    ```
    
    These can be used to pad "fluff" parts of a sentence, so only sometimes the extra information is added.
    
    * refactor: Move ReplaceAll to Format, store replacement pair
      - No other replacement strategies are supported, so store only the arguments
    
    
    Co-authored-by: tehhowch <tehhowch@users.noreply.github.com>
    Added a "news" system for displaying messages from local inhabitants you meet in the spaceport.
    Extend reference-checking in GameData::CheckReferences (#3116)
    
    * Extend reference-checking in GameData::CheckReferences
    
     - Add Name() to Minable & Phrase
     - Add IsDefined() to GameEvent
    
    * Enable reference-checking for GameEvents and Missions
    
    * IsDefined->Name and other feedback
    Changed how sub-phrases work in names and hails, so you can specify multiple sub-phrases to choose between.
    Removed some superfluous namespace qualifiers.
    Formatting cleanup, and fixed a place where the recursive phrase check would fail (if recursion happens with anything but the first "phrase" reference).
    squash! Limit recursion of Phrase::Get().
    
    Detect and disallow recursive phrases.
    Limit recursion of Phrase::Get().
    
    Prevents a possible crash when a phrase references itself directly or
    indirectly.
    Allow subphrases within phrases.
    
    The motivation here is an INN-like system. There are already some
    appropriate phrases, like sports team names or Syndicate advertisements,
    that would be nice to thread through both systems.
    Added warning messages whenever a line of a data file or saved game is unrecognized.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Fixed a bug in my renamed "Phrase" class that was keeping the phrases from being read from the data file.
    Renamed "ShipName" to "Phrase" since it is also used for random hail messages.
    Added new ship names for military ships.
    Added a Random::Real() function, and refactored to use Random everywhere (because old-fashioned rand() is considered deprecated now.)
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    feat: Implement maintenance and operating cost attributes  (#4596)
    
    * Added a maintenance cost outfit attribute
    
    * Maintenance costs will now show in the bank panel
    
    * Allow overdue maintenance to be paid off
    
    * Properly size the max rows if you have overdue charges but no crew or maintenance
    
    * Simplified output
    
    * Added an operating costs attributes
    
    * Overdue maintenance costs now impact credit score
    
    * Pay maintenance costs after crew salaries
    
    * Include the maintenance costs of in cargo outfits
    
    * Comment correction
    
    * Clean up
    
    * Code simplification
    
    * Check for > 0 credits instead of non-zero credits for the two crazy people who give themselves negative credits
    
    * Check in cargo outfits when landed and prevent net negative maintenance costs
    
    * Prevent negative costs for each ship and each outfit in cargo instead of preventing a total net negative.
    Use singular or plural credit amount
    
     - Always include credit/credits for simplicity
    
    e.g. "You paid 100 credits in crew salaries, 1 credit in mortgage payments, and 1,234 credits in fines."
    Remove trailing whitespace in payment failure message
    
    Refs https://github.com/endless-sky/endless-sky/issues/4132
    Number formatting is now limited to one decimal place, which is enough for all current attributes. Also added a separate formatting function for numbers of credits.
    Added constructors that call Load() on a data element, so construction and Load() don't have to be done in two separate steps.
    Switched to a more readable way of querying the player's debt amounts.
    Create player conditions for mortgages, fines, back pay, and credit score (#3164)
    
    * Add summary methods to Account and update Account-based autoconditions
    
     - Return a count of mortgages and fines in the account.
     - Return the total owed, broken into mortgages and fines.
    
    Update account-based autoconditions
    
     New conditions for
      - # of active mortgages
      - # of active fines
      - value of active mortgages
      - value of active fines
      - value of unpaid salaries
      - player's credit score
    
    * Remove autoconditions of the number of fines/mortgages
     - The total amount is a much more useful metric than the number of each
    Code cleanup: "static" is redundant inside a C++11 anonymous namespace.
    Prettify more credits displays with Format::Number (#2672)
    
    * Prettify more credits displays with Format::Number
    
    * Remove unnecessary variables in Account.cpp
    Back salaries are now shown in the bank and taken into account when calculating net worth.
    The minimum mortgage payment is now 1 credit. Also, credit score now goes up each day if you're debt-free.
    When min() or max() takes mismatching types as inputs, where possible, switched to specifying the output type directly rather than casting both inputs to match.
    Removed death benefits. Depreciation is a better way of balancing ship capture, and death benefits make it less profitable to fight stronger ships than to pick on easy targets, which is backwards.
    Put a cap on how much debt the player can take on at once, as a fraction of their net worth, to prevent absurd mortgages from being offered.
    Loading a different "account" no longer carries over mortgages from the previous data.
    Starting to go through the code to add more comments and refactor things that are unclear or could cause errors down the road.
    Fixed a bug where net worth was cropped to a 32-bit int when being saved.
    Fixed a bug where paying a bribe could result in the player having negative credits remaining.
    Added brackets and indentation for every BeginChild()...EndChild() pair to improve the code readability (compared to indentation with no brackets, or no indentation at all).
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Fixed a few bugs I found while testing.
    Fix a few bugs found while testing tutorial missions.
    Added "bonus" payments that must be made to your crew if your ship has more than one crew member and you plunder or capture an enemy ship. This is to make plundering less ridiculously lucrative.
    Switched to 64-bit values for storing credit amounts (to avoid rolling over if you get 2 billion credits).
    Updated the mortgage application code to take into account your current mortgage payments due.
    Fixed a bug where you could prequalify for very large mortgages if your annual revenue was negative.
    Updated all the functions that save data to use the new DataWriter class (to ensure proper indentation, quoting, etc.).
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Fixed a bug in how owed salaries are accumulated. Also added net worth history to the saved file.
    Got crews and salaries working (including erratic ship behavior if missing crew).
    Modified the "net worth" tracking to include the cost of your ship and cargo.
    Added GPL statements to all source code files and added a license.txt file.
    Added saving of the game (every time you leave a planet, or if you quit while on a planet).
    Got the code to build without warnings when -Wall is defined.
    Uploaded all the files from my local repository to Google Code.
    feat(mechanics): Basic support for custom hardpoint angles, non-converging weapons (#4801)
    
    * Add gun-port angles and convergence setting.
    Allows content-creators to create ships with non-forward facing gun-ports.
    Also allows content-creators to set convergence for guns.
    
    * Allow some weapons to be non-parallel / non-converged.
    * Update source/Armament.cpp
    Simplify the code by providing booleans directly to hardpoints.emplace. (As suggested by Amazinite and tehhowch.)
    
    * Process review comments
    * Processed review comments
    Added a new "Visual" class that represents just the information we need to track for an Effect once it's instantiated. Using it in place of Effect saves a string copy and a good deal of memory for each active visual effect.
    Switched to using a vector for Projectiles and Effects, to reduce memory allocations and improve cache performance.
    Fixed daily weapon reloads also resetting turret angles.
    Added support for independent turret tracking (and, limited turret turn rates) for everything but anti-missiles.
    Starting to go through the code to add more comments and refactor things that are unclear or could cause errors down the road.
    Added support for fractional reload times, to allow beam weapons with a duty cycle that isn't an integer fraction.
    Added support for "burst" weapons that fire multiple shots and then need a longer reload time.
    Tweaked the "long range missile boat" AI to stop running away once it's out of ammo.
    Added "firing" animations for some of the missile weapons.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Added the ability to re-assign weapons to different hardpoints (but only when landed on a planet).
    Added a rudimentary ship info panel.
    If the ship specification file says to put certain weapons in certain hardpoints, got Ship to honor that instead of reassigning them whenever the file is loaded.
    Fixed a bug where the gun and turret count for a ship increases every time the pilot file is saved.
    Added GPL statements to all source code files and added a license.txt file.
    Added saving capability to the Ship class.
    Updated the AI to fire each individual weapon on a ship only if it can hit something.
    Added an Armament clas for tracking weapon logic (mounting points, reloading, streaming, etc.).
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Using float v. double in some cases of -Wdouble-promotion
    
     - Add some <algorithm> headers for uses of std::min or std::max
    Display a map tooltip for escorts in a given system (#3587)
    
    * Basic Hover() support
    
    * Basic tooltip display
    
    * Tooltip displays active and parked escort counts
    
     - Tooltip shifts to remain on-screen if near screen edges
     - Special tooltip message for hovering over a system with just the flagship in it
    
    * Rework tooltip trigger to activate after 1s of dwell time
    
     - hoverSystem is guaranteed to be in escortSystems
     - Set the hover criteria on mouse move (i.e. the hover event)
     - Track dwelling time every step (i.e. the mouse doesn't have to keep moving)
     - Eliminate unused code / checks.
    Remove unneeded declarations
    Define additional filled colors in interfaces.txt (#3425)
    
    * Define additional filled colors in interfaces.txt
    
     - Further support for modified interfaces / reskinning.
    
    * Added comments to color definitions
    
    * Reflect name change in code too
    Adjusted the layout of the "compare" boxes in the shipyards and outfitters map panels to work better on wide, short monitors.
    scale wide sprites properly
    
    Takes sprite->Width() into account when scaling a sprite
    Made it possible for the shipyard and outfitter maps to filter the list to only show items sold in the selected system.
    Made it so the map zoom level is remembered when you close the map. Also cleaned up some of the map code.
    The player info now remembers what categories are collapsed in the shipyard and outfitter and the corresponding map panels.
    Made Panel::Click() able to distinguish double-clicks, so that the info panel can switch to a ship only if it is double-clicked, not just clicked twice in a row.
    Added expand / collapse arrows for the category names in the shipyard and outfitter (and the shipyard and outfitter maps).
    Added a setting to adjust the scroll speed.
    Tripled the scroll speed in the shops and in the sales maps.
    Switched over to the new, cleaner clickable zone syntax in a few places where it was easy to do so.
    Took out a few unnecessary leftover lines of code.
    Made it so the currently selected commodity or map coloring is remembered in the player info and is carried over to the trading panel if it is a commodity.
    The map of outfit locations now also shows what resources you have mined in each system.
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    Added a "Rectangle" class to make dealing with rectangular regions simpler.
    Removed some superfluous namespace qualifiers.
    Fixed the swizzle of ships shown in the shipyards map.
    Changed Panel::Drag and Panel::Scroll to take double dx/dy
    
    Fixes endless-sky/endless-sky#805
    Added a find function to the maps of where ships and outfits are sold.
    Simplified the code for up and down arrows in the sales map.
    Added a new base class that combines the common code from the outfitter and shipyard maps.
    Regularizing the shipyard and outfitter maps code to make them easier to merge.
    Merged the functionality of BlurShader into SpriteShader, and DotShader into RingShader.
    Made it possible to click category names in the maps of shipyards and outfitters to collapse or expand that category. Shift + click expands or collapses all.
    The "ports" map now shows whether each planet has been visited.
    Added a key for the sales maps.
    Fixed a few things in the map zooming code.
    +/- buttons/hotkeys now work on all map panels
    You can now hold Shift to select a second item to compare to, in the maps of the shipyards and outfitters.
    Added a "Medium Warship" category, and moved some ships into it.
    Fixed alphabetization of the lists in the maps of shipyards and outfitters.
    Added arrow key and page up/down support for the lists in the shipyards and outfitters maps.
    Switched the Escape key to closing dialogs, like people expect it to, instead of always going to the main menu.
    Fixed a bug in the shipyards map where if a ship variant is for sale, the base model is shown instead.
    Added a display of the currently selected item's attributes to the shipyars and outfitters map views.
    The shipyardas and outfitters maps now also show you the full set of items for sale in the selected system by dimming out the others.
    In the shipyards and outfitters maps, added more subtle coloring to show which systems have any ships or outfits for sale, even if not the selected one.
    Added Control+W (or Command+W on the Mac) as a universal shortcut for "close current window."
    Added another line to the shipyard and outfitter map listings, showing shields / hull and required space, respectively.
    Added more space in between categories in the shipyard and outfitter maps.
    Fixed a bug in the display of the shipyard and outfitter maps.
    Modified the "shipyards" map to color the ship icons based on the player's government.
    Added two new map views, showing all ships and outfits that you know can be bought, and where they are sold.
    Fix bug where music mp3s could not have extension ".MP3"
    Code cleanup: "static" is redundant inside a C++11 anonymous namespace.
    Fixed some missing #includes and one unnecessary check that would mess up other compilers.
    Fixing a bug I just introduced in music streaming.
    Fixed a bug where the file the music is streaming from could get "closed" twice.
    Made it possible to load MP3s from plugins.
    Fixed some possible race conditions in the Music code.
    Cleaned up some unnecessary namespace prefixes.
    Fixed a bug where stopped music started again when you entered the next system.
    Added support for streaming MP3s from disk (currently only tested on Linux) for music or ambient sounds.
    fix: remove "pessimizing-move" warning
    feat(mechanics): the game now prompts before overwriting a save snapshot
    
     - removed unused variable `wasSelected`
     - updated snapshot prompt's default value to reflect the in-game date of the source file, not the current in-game date
     - added confirmation when overwriting existing snapshots
    feat(ui): Provide default values for certain dialogs (#4822)
    
    * feat: Fill the default value in the save and ship rename dialogs
    
    * Implement review feedback.
    
    * Implement further review feedback.
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Enable save-aware data parsing without modifying the save
    
    https://github.com/endless-sky/endless-sky/pull/3994
    
    * Allow parsing game data for content errors
    
     - Specify the `-p` or `--parse-save` command-line option to load the most recent save and allow the game to perform reference-checking.
     This option exits before initializing SDL (e.g. headless operation), and does not save the file before exiting.
     - Updated the man page and help text as well
    
    * Include whitespace warnings in DataFile::Load
    
     - Print warnings to stderr and errors.txt when spaces and tabs are mixed
     - Provides a warning if a line starts with a space, and then tabs are later used in the file for indenting
     - Provides a line-specific warning if spaces and tabs are intermixed on the same line.
     - Fix existing mixed whitespace indentation
    
    * Extend CI tooling with data parsing test
    
     - add bash script for Travis CI
     - add PS script for AppVeyor CI
    
    The scripts invoke the new `-p` command-line flag and test whether the `errors.txt` file was created.
    If so, this is taken to mean that a parsing error occurred. The scripts can be executed locally by passing the appropriate executable as the argument to the script.
    
    * Add OSX build environment
    
     - Homebrew installations of the developer dependencies (per the developer readme).
       (This will eventually result in a broken build when a core dependency publishes a new point release, at which point the XCode project will need to be updated.)
    
    * Avoid automatically saving upon game load
    
     - Closes https://github.com/endless-sky/endless-sky/issues/3510
     - Only allow saving after the player has explicitly "entered" their savegame
       Players explicitly 'enter' their savegame via the keypress / button:
       - 'Enter Ship' (after first launching the game)
       - 'Load Game' (after pressing Load/Save and then selecting a different save)
    
    In other words, if you tell the game, "Yes, this is the save I want to play," its save file will be updated when you close the game.
    If you didn't explicitly tell the game that, then the save file will not be modified.
    Add gl_header include for uses of glClear
    Define additional filled colors in interfaces.txt (#3425)
    
    * Define additional filled colors in interfaces.txt
    
     - Further support for modified interfaces / reskinning.
    
    * Added comments to color definitions
    
    * Reflect name change in code too
    Truncate long player / player flagship names, and plugin names (#3395)
    
    * Truncate long player / player flagship names, and plugin names
    
    * Restored proper RHS margin for plugin text
    Remove use of static inside anonymous namespace
    Made it possible for the start conditions to include the player owning one or more ships.
    Made the saved game date tooltips only appear if you hover over the same item for a full second.
    Moved the actions that have to be done each time player.New() or player.Load() is called (resetting messages, reverting the game data, and then applying any changes) directly into those functions so they don't have to be called separately. (There was previously a bug where messages didn't reset if New() was called from the main menu.)
    Added double-click support for loading a saved game snapshot.
    When deleting snapshots, keep the "focus" in the snapshot list unless no files are left for the pilot.
    In the load panel, don't show the file timestamp tooltip for snapshots below the bottom of the visible list.
    In the Load / Save panel, snapshots are now sorted by when the file was saved (in user time, not game time).
    Made it harder to accidentally delete a snapshot or a pilot, by removing the keyboard shortcuts for those buttons.
    Simplified the code in some places where map::count(key) or map::erase(key) could be used alone without calling map::find() first.
    Revert "Made it so that all mission actions can display conversations or dialogs."
    
    This reverts commit 181603905497b28c403864258d4bd2935b0fba90.
    Made it so that all mission actions can display conversations or dialogs.
    Made Panel::Click() able to distinguish double-clicks, so that the info panel can switch to a ship only if it is double-clicked, not just clicked twice in a row.
    Added a setting to adjust the scroll speed.
    Strings in the load panel or dialogs that are too long are now truncated.
    Added warnings if unable to create or delete files (e.g. because of bad characters in the name, or because antivirus has the file locked).
    Separated the elements of the main menu into different "interface" objects to avoid duplication.
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    disabled saving after death
    removed the ability to save a snapshot after you die and also fixed being able to load a game when no save files exist
    removed ability to delete main save file as is suggested by the greying of the ui
    Fixed the "flicker" when you first enter ship and the planet panel does not pop up immediately.
    Refactoring: switching to using "!set.count(...)" instead of "set.find(...) == set.end()" because it's more concise, just as efficient, and seems clearer.
    Fix endless-sky/endless-sky#795
    Changed Panel::Drag and Panel::Scroll to take double dx/dy
    
    Fixes endless-sky/endless-sky#805
    Code cleanup.
    Added a warning before loading a snapshot, that it will overwrite your current game.
    Restored "E" as a "Load Game" shortcut (i.e. "enter ship") in the Load / Save... panel.
    Made the keyboard shortcut underlines only display when you hold down Alt, to avoid cluttering the interface the rest of the time.
    Added the ability to name the saved game "snapshot" files.
    Modified the load panel so that the scroll wheel affects whatever list the cursor hovers over.
    Added Control+W (or Command+W on the Mac) as a universal shortcut for "close current window."
    Widened the panels in the menu screen by 20 pixels, so the credits won't be so scrunched.
    Made some changes to improve thread safety.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Fixed #4, the bug where clicking in the "snapshots" list of the load / save panel causes a segmentation fault if no pilots exist yet.
    Fixed the remaining two times where I rely on the length of Files::Saves().
    Fixed a bug on Windows where the path separator was changing to Unix mode when listing saved games.
    Took out most of the overloaded operators for Command, because it is not at all clear how they should handle the turn field, and ignoring it was causing problems.
    Fixed a bug where the load panel was not handling selection properly when the list was scrolled.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Fixed some small bugs I found while playtesting.
    Added a SavedGame class to be used in the load game panel rather than loading the full PlayerInfo for each game that is selected.
    Modified the load panel to handle file lists longer than the panel has space for.
    Modified the new mission implementation so that missions can also be offered as soon as you land (e.g. to handle continuation of existing missions), and used that to create a "first contact" conversation that is shown the first time you land on any Quarg world.
    Fixed a segfault if you create a new pilot and then return to the "Load Pilot" screen before that pilot is saved.
    Replaced the old, very limited "callback" class with function pointers that can be given any method name.
    When you press Save/Load, keep the same pilot selected.
    Clear messages on new game (like on load).
    Got audio working on Mac OS X (by just writing my own basic WAV reader, rather than trying to get ALUT working).
    Added a Politics class that can handle governments coming to the aid of allies, tracking the player's reputation in response to different actions, etc.
    Updated the UI to use the same three "named" colors everywhere for three different levels of text brightness, for consistency.
    Added two new classes, Format (for formatting numbers) and Table (for formatting tables).
    Updated all the functions that save data to use the new DataWriter class (to ensure proper indentation, quoting, etc.).
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Fixed a bug where the messages were not getting reset when loading a different game.
    Added arrow key shortcuts for the load panel.
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Fixed a bug in DIalog where it was calling the callback on a copy of the given object instead of the original. Added confirmation dialogs to the delete buttons in the Load Game panel. Also tweaked the starting mortgage.
    Added a "Files" class which abstracts out filesystem operations (including finding the resource and config path for each OS). That allows me to remove the boost dependency, which will make porting easier.
    Added an option to toggle fullscreen mode. It's still a little buggy on Linux.
    Made some changes to get the code to compile on Ubuntu 14.04.
    Switched to always using the Color class instead of passing around RGBA float arrays.
    Fixed a few final issues in the load / save / new mechanics. It all seems to be working correctly, now.
    Got the Load / Save panel working.
    Added GPL statements to all source code files and added a license.txt file.
    Got "New Pilot" working, including visiting the shipyard and picking out an initial ship.
    Added a "New Pilot" dialog (which doesn't yet move you straight to the shipyard, though).
    Added a Load / Save panel (not yet functional).
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Fix to string definition of token in Sales.h
    Made shipyard and outfitter definitions also work with the "add" and "remove" keywords. (But, "add" is the default, anyway, so using it is necessary only for clarity.)
    Selective Clearing
    
    Allow items to be removed individually from Sale.
    Refactoring: switching to using "!set.count(...)" instead of "set.find(...) == set.end()" because it's more concise, just as efficient, and seems clearer.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Modified the sales, shipyards, and outfitters to append new items by default instead of resetting each time Load() is called. To reset you must use a "clear" keyword. This allows different events to add items for sale without each having to know what all the others have added.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Added support (in a kludgy way) for game events that modify what ships or outfits are available in a given sale set.
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Switched the outfitter to only selling outfits available on this planet or that you sold them. That required moving the flight check into the outfitter, so you don't sell your engines on a planet with none for you to buy.
    Made some changes to get the code to compile on Ubuntu 14.04.
    Added GPL statements to all source code files and added a license.txt file.
    Added support for "shipyard" and "outfitter" attributes on planets.
    Made it so the viewport corner markers on the radar will be "square" even if the window is much wider than it is tall. Also added a separate, customizable color for the markers.
    Draw viewport boundaries on radar
    Allow mission target blink color to be set independently of ships the player is targeting (#2825)
    
    * Add "radar blink" color
    
    * Set default radar blink color
    Added a common base class for Ships, Projectiles, Asteroids, Effects, Flotsam, StellarObjects, etc. This is the first step in creating a generic collision detection framework that can deal with different object types.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Implemented wormholes. (Any planet that shows up in multiple systems is a wormhole.)
    Switched to always using the Color class instead of passing around RGBA float arrays.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    Sprites now store their own names (so the animation referring to the sprite does not have to).
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    feat(layout): Moved the outfitter and shipyard "detail information" into a sidebar (#5233)
    Define additional filled colors in interfaces.txt (#3425)
    
    * Define additional filled colors in interfaces.txt
    
     - Further support for modified interfaces / reskinning.
    
    * Added comments to color definitions
    
    * Reflect name change in code too
    Code cleanup: "static" is redundant inside a C++11 anonymous namespace.
    Made it possible for outfits to require licenses to buy them.
    Tooltips no longer show up if you hover the buttons in the corner of the shop panels.
    Restored the old height reported by wrapped text (including a paragraph break after) because taking that out messed up conversation formatting.
    Tooltip implementation fixes. (@Alkallid, @MarcelineVQ)
    Added "tooltips" that pop up to explain ship and outfit attributes in the shop panels and the ship info panel.
    Cleaned up my previous commit.
    Merged the common code from the two info display classes into one common base class.
    Fixed minor code style issues (#4428)
    Added a check for a (0, 0) vector in Point::Unit().
    Fixed some compile issues on OS X.
    Added min(), max(), and abs() overloads for Point.
    Inlined Point::X() and Point::Y(), for speed, since those are called so often.
    Revert: Fix ambiguous initialization
    Fix ambiguous initialization
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added a non-SSE implementation of Point for systems with no SSE 3 support.
    Switched Point's private constructor to explicitly be inlined - this fixes an apparent compatibility issue with g++ 4.9.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    Switched back to the old way of doing frame timing, but with an extra check to make sure it never waits for longer than a frame.
    Added the header needed for the min() operator.
    Changed the frame timer to what will hopefully be a more robust implementation.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Switched to using the "chrono" library instead of the Unix-specific time functions.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    feat(mechanics): Update random planet selection criteria (#4867)
    
    * feat(mechanics): Update random planet selection criteria
    
     - allow stopovers picked from a location filter to include non-spaceport planets
     - if explicitly providing planet names, randomly picked planets can now be wormholes, planets without spaceports, or planets for which the player does not have clearance
       - This applies even for mission/job destinations
    
    e.g.
    ```
    destination
        system "Civil War"
        planet "Friendly With Player" "Hostile With Player"
    ```
    can now pick "Hostile With Player" and not just "Friendly With Player", while
    ```
    destination
        system "Civil War"
    ```
    can only pick "Friendly With Player", because there was not an explicit override.
    
    (Previously, a mission had to provide `clearance` in order to pick a hostile destination randomly.)
    
    * chore(missions): require a spaceport where the stopover / mission text suggests "inhabited"
    
    * feat(content): remove stations from Han Sizer stopovers
    
    as it is a tour of worlds, e.g. planets & moons, not stations
    
    * pr feedback
    
    exclude Carbuncle, Arachne Station from corporate retreat job
    feat(government): Allow customization of the government's displayed name (#4768)
    
    * Support an optional "display name" key for Governments
     - Allow setting a customized display name for a government, rather always displaying the name used to define the government
    
    * Set the display name for existing pseudo-governments
    refactor: Remove copies identified by OSX CI build
    Extend LocationFilter's supported criteria
    
      Missions that trigger on boarding or assisting can now reference the ship's
        - category
          - 'and'ing a category is not possible (since multi-category ships are not possible).
          - e.g. `category "Heavy Warship" "Medium Warship"` matches any ship that is either a Heavy Warship or a Medium Warship
        - outfits
          - 'and'ing outfits is supported
          - e.g. `outfits "Electron Beam" "Electron Turret"` matches any ship that has at least an electron beam or an electron turret installed (or in cargo)
        - attributes
          - 'and'ing attributes is supported
          - e.g. `attributes "cloaking fuel"` matches any ship that has a positive "cloaking fuel" attribute, after all its installed outfits' effects are applied
    
      - Outfit and attribute references return true if the ship has a positive value for the provided token - a ship with a negative or zero-valued attribute/outfit count will not match that attribute or outfit.
    
      - Outfits can also be used for planets to restrict by the items available in its outfitter.
        e.g. `outfits "Stack Core"` would match planets Solace, Wayfarer, and Zug, after the Stack Core is available for purchase
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Move PickSystem, PickPlanet from Mission to LocationFilter
    
     - Support choosing a random system or planet from a given LocationFilter outside of just mission instantiation
    Added constructors that call Load() on a data element, so construction and Load() don't have to be done in two separate steps.
    Mission "on enter" can define a LocationFilter to pick the system(s) (#3141)
    
    * "on enter" actions can define a LocationFilter to pick the system
    
     - Example:
        on enter
          "system filter"
            government "Syndicate"
          dialog "You're now in Syndicate space!"
    
     - Without a system filter, any `on enter` actions that do not name a system will apply as soon as the player takes off (current behavior).
     - Each mission only supports a single `on enter` action without a named system (current behavior).
    
    * Use a function to convert a distance filter into a near filter
    
      - This avoids needing to save the mission origin in the MissionAction
      - Use of both "near <system>" and "distance" filters in the same `on enter` action is not supported - only the "near" filter will be kept.
      - Fixed an extra indentation level with the saved LocationFilter.
    
    * Forward compatibility for changes to LocationFilter class variables
    
    * Support multiple "generic" on enter MissionActions instead of only one
    
     - "specific" on enter: explicitly identifies the system
     - "generic" on enter: uses a LocationFilter to match a set of systems (offering in the first one that matches), or has no filter and offers immediately on launch
     - All "specific" on enter actions are checked before any "generic" on enter actions for a given system
     - Only one on enter action will be triggered per jump.
     - Each "generic" on enter is checked in the order of definition in the mission datafile
    
    * Update SetOrigin() usage
    
     - Reformat checks to avoid copying if nothing is to be done
     - Pass a system to MissionAction::Instantiate to guarantee a System * is available, even for assisting/boarding missions.
    
    * Use didEnter to track both generic and specific "on enter" actions
    Allow LocationFilter to specify attributes of a neighboring system (#3173)
    
    * Allow LocationFilter to specify attributes of a neighboring system
    
     - Neighboring systems are those that are linked, and not those that are linked or within jump drive distance, to prevent matching to possibly inaccessible systems.
    
    * Disallow in-line not & neighbor usage
    
    * Reduce duplicated code
    
    * Only check NeighborFilter matches when checking systems
    
    * Perform simpler checks first
    Added support for system attributes, to be used when picking systems for waypoints, NPCs, or persons.
    If a LocationFilter is called on a Planet, compare the filter's government list to the government of the planet, not the government of the system.
    Added "not" operators to location filter, letting you specify a filter or filters that the location must not match.
    Fixed some issues found by Clang's static analyzer.
    DistanceMap now takes total fuel cost into account (hyperdrive vs. scram drive) instead of assuming jump cost is always twice the hyperspace cost.
    Refactoring: switching to using "!set.count(...)" instead of "set.find(...) == set.end()" because it's more concise, just as efficient, and seems clearer.
    Fixed a bug in my checks for undefined systems.
    Added some checks for planets which are defined but not placed in any system. Previously, these were crashing the game.
    Added brackets and indentation for every BeginChild()...EndChild() pair to improve the code readability (compared to indentation with no brackets, or no indentation at all).
    Added mutex protection for the LocationFilter cache, just in case it is ever called from multiple threads. (If not, the performance penalty for using a mutex will be negligible.)
    Added caching of the most recent distance map in LocationFilter to significantly speed up choosing random nearby destinations for missions.
    Added basic support for random missions that get offered when you board a ship.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Various small fixes to things I found during testing.
    Added some new one-time special missions, and also fixed a bug in the "near" location filter.
    Modified the mission's "cearance" tag to allow specifying a location filter, same as the "source" and "destination" tags.
    Got NPC support working. I've tested NPCs you must "save" or "kill", but a few kinks are left to work out (like having NPCs start at a different location than yours).
    Added support for job "templates" in the mission data. To start out with, added a variety of passenger missions, some of which only happen if you are on certain kinds of planets.
    Fixed a few small bugs for handling the new mission implementation.
    Added LocationFilter, which stores a set of criteria that a planet or system must match to be used in a mission.
    feat(mechanics): Support "random lifetime" for effects (#5055)
    Added a new "Visual" class that represents just the information we need to track for an Effect once it's instantiated. Using it in place of Effect saves a string copy and a good deal of memory for each active visual effect.
    Refactored Engine::CalculateStep(), splitting each set of calculations into a separate function to improve clarity and to open a path for possibly multi-threading the most expensive calculations.
    Added a common base class for Ships, Projectiles, Asteroids, Effects, Flotsam, StellarObjects, etc. This is the first step in creating a generic collision detection framework that can deal with different object types.
    Added warning messages whenever a line of a data file or saved game is unrecognized.
    Modified the audio source coalescing code to add source volumes instead of averaging, and also took out the doppler effect.
    Added a small random factor to the explosion frame rates, so when a ship explodes the animations will not all die out at exactly the same time.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Removed superfluous std:: prefixes.
    Added an experimental sprite shader that can render motion blur. This makes everything less choppy, but more blurry, and takes a lot more GPU power.
    Got basic audio support working. I do need to track down better sounds, or at least balance the audio levels better between them.
    Added a Random::Real() function, and refactored to use Random everywhere (because old-fashioned rand() is considered deprecated now.)
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Modified effects (weapon impacts, etc.) to take the target's velocity into account so they still look correct if the target is moving.
    Added GPL statements to all source code files and added a license.txt file.
    Added saving capability to the Ship class.
    Uploaded all the files from my local repository to Google Code.
    test: Support test case execution, locally and in CICD (#4998)
    
    * Extend CI environment with graphical testframework
    Adds CI workflow for Ubuntu 16.
    Adds minimal code to main.cpp to run hardcoded empty testcase.
    Changes script for headless testing to run hardcoded testcase.
    
    * Fix coding style issue.
    
    * Updated step names to differentiate between tests
    Renamed existing tests to parsetest_*.
    Renamed the new test to autotest_*
    Re-ordered tests so that all parse-tests are together.
    
    * Changed GameData::Progress check to (menuPanels UI)->IsInitialized.
    As based on review-feedback. Using the same pattern as isDone.
    Removed the isReady variable in the anonymous namespace of MenuPanel.
    Also replaced explicit default constructor for UI by implicit constructor.
    Tested:
    - Quit from main menu
    - Exit during flight (by closing window)
    - Ran the automated test
    
    * refactor: move "are we loaded?" from UI to GameData
     - Add "const" accessor GameData::IsLoaded & backing boolean
     - Remove UI->IsInitialized & associated branching
     - Update class comments / method names to distinguish simple accessors & identify future refactoring opportunities
        Audio::Progress -> Audio::GetProgress, as it is already a simple accessor
     - Disable moving/copying the SpriteQueue class, given that it manages threads
    
    * docs: update --help and man entries
    
    * scripts: exit early if not on a supported headless platform
    
    * chore: Update GameLoop params
    Preloaded conversation data, test, or debug mode are not modified.
    
    Co-authored-by: tehhowch <tehhowch@users.noreply.github.com>
    fix(graphics): Avoid enabling adaptive VSync by default
    
     - Not supported on a number of drivers, and likely the cause of crash-on-launch in some bug reports
     - Refs:
        - endless-sky#4845
        - endless-sky#4971
    Made it possible for an engine flare or afterburner to be integrated in a ship chassis.
    Increase maximum volume back to 100%
    
    This increases the upper limit on what the volume can be set to back
    to 100% (as before 006238e85b7c9647e011c1d6bebcee40216c81ee).
    
    The default volume remains unchanged (now 12.5% of maximum).
    
    Volume in existing configurations remains unchanged. In the
    configuration file, the volume value now has the range from 0 to
    4 (instead of 0 to 1).
    Adjusting the volume scale so the default level roughly matches FTL's default volume.
    Code cleanup: "static" is redundant inside a C++11 anonymous namespace.
    Fixed a recent bug where sounds from the main thread were not being played if the Engine was not active.
    Added checks that disable audio functions if initializing OpenAL failed, to avoid crashes.
    Removed an unused function declaration.
    Took out a variable that's no longer needed.
    Changed how the path to a sound is converted to a "name" (to handle sub-directories that are also named "sounds/"). Also added an error message that is logged if loading a .wav file fails.
    Made it possible to load MP3s from plugins.
    Fixed some possible race conditions in the Music code.
    MP3 streaming is now supported on all platforms, through libmad.
    Cleaned up some unnecessary namespace prefixes.
    Simplified the Audio code by deciding there was no reason to treat sounds differently depending on which thread requested them.
    Added libmad MP3 streaming support to the XCode project.
    Added support for streaming MP3s from disk (currently only tested on Linux) for music or ambient sounds.
    Continuing to comment and clean up the code. Asteroids will now display properly on monitors wider than 4096 pixels.
    Refactoring: switching to using "!set.count(...)" instead of "set.find(...) == set.end()" because it's more concise, just as efficient, and seems clearer.
    Reduced the range of random pitch for playing sounds.
    Double the audio volume, and also made all OpenAL parameters explicitly specified in case the defaults vary from one OS to another.
    Added random pitch variation for all sound effects, to avoid phasing when many of the same sound are overlapping.
    Disabled pausing on window minimizing, because some people encounter problems getting it to unpause after that, and it's easy to just pause by bringing up the menu instead.
    Modified the audio source coalescing code to add source volumes instead of averaging, and also took out the doppler effect.
    Tweaked the audio loudness so 100% is closer to how loud other programs are at 100%.
    Looping sounds now fade out instead of continuing to the end of the loop and then stopping abruptly.
    A fresh install now defaults to 50% volume instead of 100%.
    Tweaked the audio left / right balance, and also fixed the bug where sounds in plugins do not override sounds in the main game data.
    The game is now muted and paused if you minimize the window.
    If audio initialization fails, the game will now start with no sound instead of not starting.
    Added a work-around to avoid pops and clicks when looping sounds stop or start.
    FIxed a hang / crash that could occur if quitting before the sound files have all been loaded.
    Made it possible for plugins to supply new sounds.
    Fixed a bug where the first sound file was being skipped instead of being loaded.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Removed superfluous std:: prefixes.
    Added a "Preferences" class to parse the preferences file, and made the load display and auto-aim controlled by preferences. Also added an auto-fire AI option.
    Switched the Linux build away from using ALUT, since my hard-coded WAV reader is good enough for now.
    Got audio working on Mac OS X (by just writing my own basic WAV reader, rather than trying to get ALUT working).
    Added a volume control, and a preferences file that saves the volume and window size in between runs.
    Got basic audio support working. I do need to track down better sounds, or at least balance the audio levels better between them.
    feat(mechanics): Allow mission NPCs to spawn or despawn based off of ConditionSets (#5161)
    Reorder some includes to match style (#4430)
    Specify an initial planet for mission NPCs
    
    e.g.
    npc
        system "Sol"
        planet "Luna"
    Allow phrase-based randomized dialog (#4164)
    
    * Allow `MissionAction` dialog text randomization via the `Phrase` class. Traditional "directly specified" text is still supported.
    
    Supported syntax:
    ```
    dialog phrase <stock phrase name>
    
    dialog
        phrase
            {phrase specification...}
    ```
    e.g.
    ```
    dialog phrase "hostile disabled"
    
    dialog
        phrase
            word
                "Please excuse my dear "
            word
                "Aunt Sally"
                "Uncle Mark"
            word
                ` for saying, "`
            phrase
                "hostile disabled"
                "friendly disabled"
            word
                `" yesterday.`
    ```
    
    * Move `dialogText` parsing to `Dialog` static method
    
    * Allow `NPC` "completion" dialog text randomization using the same phrase-based syntax as `MissionAction` dialog
    
    * Use phrases to encapsulate generic/repeated dialog
    
    For similar messages, combined clauses to diversify the generated text.
    
    * Remove duplicated space
    
    * Typo fix ( @Pointedstick )
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Added constructors that call Load() on a data element, so construction and Load() don't have to be done in two separate steps.
    Made it possible for NPCs to specify that they start in the mission's destination system.
    Fixed a few places where invisible missions could display messages when they "fail."
    Mission "stopovers" now fail if there is an NPC you must accompany and it is not present.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added "evade" and "accompany" requirements for NPCs.
    Added support for NPCs "entering" or "staying" in a system, and added a sample "pirate attack" mission (currently always offered).
    Got NPC support working. I've tested NPCs you must "save" or "kill", but a few kinks are left to work out (like having NPCs start at a different location than yours).
    feat(graphics): Add comment with shader name (#4995)
    
    This makes it easier to debug compilation errors
    Replacing "NULL" with "nullptr".
    Moved all the source code files into a "source" folder to clean up the root folder.
    The program now auto-detects the proper GLSL version number so it does not have to be set via conditional flags for each OS.
    Had to roll back to OpenGL version 3.0 instead of 3.3 on Linux, but left the Mac port at 3.3.
    Ported to Mac OS X.
    Switched to always using the Color class instead of passing around RGBA float arrays.
    Added GPL statements to all source code files and added a license.txt file.
    Fixed some shaders that used "\t" in place of "\n".
    Uploaded all the files from my local repository to Google Code.
    Added warning messages whenever a line of a data file or saved game is unrecognized.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added a "galaxy" data type for placing the background images in the map panel.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    fix: Call fclose on the error log
    Fixed some things that Google's cpplint warns about (mostly, constructors that should be marked explicit).
    Code cleanup.
    Moved the File wrapper from ImageBuffer into a separate class.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Got basic audio support working. I do need to track down better sounds, or at least balance the audio levels better between them.
    Added two new classes, Format (for formatting numbers) and Table (for formatting tables).
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    Suppress libpng warning for interlaced PNGs
    
    If using `png_read_set_info` and `png_read_image`, any interlaced PNG would generate the warning:
    
    > libpng warning: Interlace handling should be turned on when using `png_read_image`
    Added functions for bulk-uploading sprites. (But, they're not in use yet.)
    Added support in ImageBuffer for loading multiple frames of an animation into one buffer.
    Fix memory leak. (#2983)
    
    * Fix memory leak.
    
    * Merged in 'Load grayscale pngs properly'.
    
    * Removing the goto.
    Formatting fix.
    Load grayscale pngs properly.
    Added a null check in ImageBuffer::Read(). It's not strictly necessary, but it makes it clearer and might avoid future errors.
    Merge remote-tracking branch 'endless-sky/master' into HaiOutfitRebalance
    
    # Conflicts:
    #       data/hai ships.txt
    For users with only 256 MB of VRAM, added a "Reduce large graphics" option which shrinks very large sprites to take up only 1/4 as much memory.
    Made it possible for JPEG images to use additive blending mode.
    Moved the File wrapper from ImageBuffer into a separate class.
    Moved all file IO into the Files class, so it will be easy to add support for UTF16 paths under Windows.
    Changed the jpeglib.h include path for OS X to support other install locations for the library.
    Fixed a bug where additive blending was not working for @2x sprites.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added support for premultiplied alpha PNGs, which must be marked by ending their file names (prior to any frame number) with '='.
    Got the new code without SDL_image building on Mac OS X.
    Added the ImageBuffer class, which is my replacement for SDL_image.
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Remove some -Wuseless-cast warnings
    Added a help message explaining how to set which escort is your flagship that is shown in the player info panel, the outfitter, or the shipyard the first time the player has multiple ships in their fleet.
    Moved the beginner help messages out into a data file.
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    fix, negative bunk space allowed hires
    Crew from parked ships are no longer listed in the hiring panel.
    Added a 500x multiplier (alt / option key), mainly for players with enormous cargo fleets.
    Fixed a bug where if you have fewer crew members than required, the "Fire" button is active in the hiring panel, and clicking it actually *adds* the required number of crew.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Code cleanup: always referring to the player's ship as "flagship."
    Made it possible to accept a mission if you don't have bunks or cargo space free, but can make it free by firing crew or selling ordinary trade goods. (This is to reduce the chance of a mission string being cut off because the player has no space for the next mission.)
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Added help messages that pop up the first time you click on a certain panel (and the first time you end up stranded or dead).
    Fixed a bug where the player's passenger capacity was not getting updated immediately when hiring or firing crew.
    Updated the UI to use the same three "named" colors everywhere for three different levels of text brightness, for consistency.
    Tweaked the hiring panel format to match the bank and trading panels.
    Got the hiring panel to correctly handle and display passengers.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Added some hand-to-hand weapons (with no outfit graphics for them, yet).
    Got crews and salaries working (including erratic ship behavior if missing crew).
    Added a panel to the planet dialog for hiring and firing extra crew.
    More updates to the code comments.
    Made mission pointers blink for missions with deadlines, to draw your attention to them as a priority.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Made all of Date's comparison operators explicitly defined to avoid bugs in the implicit ones.
    Modified Date to use a custom implementation, using days since epoch instead of seconds since epoch, in order to avoid fractional days and to work on systems where time_t is only 32 bits.
    Added an operator to Date to check if it has been set to a valid value.
    Finished up the intro missions for all three ship types. Also fixed a few bugs I found in the process, and added some new text substitutions.
    Implemented mission deadlines, and added various cargo missions (normal, bulk, and rush).
    Made some small changes to support the new mission model, including having the "complete" MissionAction set the payment substitution string, and adding an operator+ to Date for setting deadlines.
    Added a default constructor to Date.
    Added GPL statements to all source code files and added a license.txt file.
    Added saving of the game (every time you leave a planet, or if you quit while on a planet).
    Uploaded all the files from my local repository to Google Code.
    Switched to using 2D "texture arrays" for sprites, so all the frames fit into a single texture.
    Merged the functionality of BlurShader into SpriteShader, and DotShader into RingShader.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Modified the shipyard and outfitter to draw the ships in the player's colors.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    feat(mechanics): the game now prompts before overwriting a save snapshot
    
     - removed unused variable `wasSelected`
     - updated snapshot prompt's default value to reflect the in-game date of the source file, not the current in-game date
     - added confirmation when overwriting existing snapshots
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    In the Load / Save panel, snapshots are now sorted by when the file was saved (in user time, not game time).
    Revert "Made it so that all mission actions can display conversations or dialogs."
    
    This reverts commit 181603905497b28c403864258d4bd2935b0fba90.
    Made it so that all mission actions can display conversations or dialogs.
    Made Panel::Click() able to distinguish double-clicks, so that the info panel can switch to a ship only if it is double-clicked, not just clicked twice in a row.
    Added warnings if unable to create or delete files (e.g. because of bad characters in the name, or because antivirus has the file locked).
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    Changed Panel::Drag and Panel::Scroll to take double dx/dy
    
    Fixes endless-sky/endless-sky#805
    Added a warning before loading a snapshot, that it will overwrite your current game.
    Added the ability to name the saved game "snapshot" files.
    Modified the load panel so that the scroll wheel affects whatever list the cursor hovers over.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Fixed an uninitialized variable.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Added a SavedGame class to be used in the load game panel rather than loading the full PlayerInfo for each game that is selected.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Modified the load panel to handle file lists longer than the panel has space for.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Added arrow key shortcuts for the load panel.
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Fixed a bug in DIalog where it was calling the callback on a copy of the given object instead of the original. Added confirmation dialogs to the delete buttons in the Load Game panel. Also tweaked the starting mortgage.
    Fixed some missing #includes.
    Got the Load / Save panel working.
    Added GPL statements to all source code files and added a license.txt file.
    Got "New Pilot" working, including visiting the shipyard and picking out an initial ship.
    Added a "New Pilot" dialog (which doesn't yet move you straight to the shipyard, though).
    Added a Load / Save panel (not yet functional).
    Added a new "Visual" class that represents just the information we need to track for an Effect once it's instantiated. Using it in place of Effect saves a string copy and a good deal of memory for each active visual effect.
    Switched to using a vector for Projectiles and Effects, to reduce memory allocations and improve cache performance.
    Refactored Engine::CalculateStep(), splitting each set of calculations into a separate function to improve clarity and to open a path for possibly multi-threading the most expensive calculations.
    Keep partially collected flotsam (#2955)
    
    * Keep partially collected flotsam
    
    The leftover units would vanish when only part of the flotsam fits the
    cargo hold. This means that you can lose cargo just by transfering it
    to another ship of your fleet (jettison cargo, then guide other ships to
    the flotsam).
    
    This commit changes that behaviour, only removing the flotsam when there
    are no more units. Only 1 ship can collect from the flotsam on each step.
    
    * Jettison partially collected flotsam from the collector ship
    
    Place the flotsam as if it was collected, partially stripped,
    and then thrown back out.
    
    * Replace placement of partial flotsam with an adjustment in velocity.
    
    Flotsam transfer logic is moved to Flotsam::TransferTo and the flotsam
    velocity is stabilized in proportion to the amount being transferred.
    
    * Cast to double with static_cast.
    Fix missing jettisoned commodities (#2962)
    
    * Fix missing jettisoned commodities
    
    The last box of commodities was not being jettisoned unless it was a
    multiple of 5, which is the maximum number of commodities per box.
    
    * Adjust commodity flotsam lifetime based on tonnage.
    
    Commonity flotsam lifetime has a square root progression that remains
    unchanged when it has the expected tonnage per box.
    Made materials from destroyed asteroids have a lot less random velocity than dumped cargo, so collecting them is less annoying.
    ammo and flotsam (#1454)
    
    * change Flosam::UnitSize() to use double
    
    This change allows UnitSize to accurately describe the size of what it contains since some items have fractional masses.
    
    This fixes ships trying to pick up flotsam they don't have room for, typically ammo
    
    * change Ship::Jettison outfit to allow non-full flotsam boxes
    
    This is to stop fractional mass items from disappearing if they don't completely fill a flotsam box.
    
    removed static keyword to allow box sizes to be appropriate for each item
    Added a "Minable" class, representing a minable asteroid in an elliptical orbit.
    Added a common base class for Ships, Projectiles, Asteroids, Effects, Flotsam, StellarObjects, etc. This is the first step in creating a generic collision detection framework that can deal with different object types.
    Cargo dumped by ships can now be picked up by others. Also, destroyed ships sometimes leave cargo behind.
    Tweaked the star field rendering to reduce the "sparkle" at low zoom levels.
    Made it possible to specify the background haze image for each star system.
    Made it possible to zoom the view in or out (via the scroll wheel or the +/- keys) without changing the UI zoom.
    Added a common base class for Ships, Projectiles, Asteroids, Effects, Flotsam, StellarObjects, etc. This is the first step in creating a generic collision detection framework that can deal with different object types.
    0.9.2 updates
    Added a subtle "haze" effect in the background to make it look less flat and regular.
    Switched to a much more efficient way of drawing the star field.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Made some changes to support Windows porting, assuming MinGW will be used to provide basic POSIX functionality.
    Spell-checked the comments.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Ported to Mac OS X.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    Use a Point to allow asymmetric "hardpoint offset" specification
    
    Syntax assumes default specification is a symmetric hardpoint sprite, i.e. only the y-offset is needed. Specify 2 values to indicate the (x, y) offset, where (0, 1) points up and (1, 0) points right.
    
    `"hardpoint offset" [<x#>] <y#>`
    e.g:
      "hardpoint offset" 2
      "hardpoint offset" 0 2
    are equivalent.
    Fixed some things that Google's cpplint warns about (mostly, constructors that should be marked explicit).
    Added min(), max(), and abs() overloads for Point.
    Inlined Point::X() and Point::Y(), for speed, since those are called so often.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added a non-SSE implementation of Point for systems with no SSE 3 support.
    Switched Point's private constructor to explicitly be inlined - this fixes an apparent compatibility issue with g++ 4.9.
    Spell-checked the comments.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    Added support for hull "leak" effects, when a dying ship is venting atmosphere / flames / blood / whatever.
    Weapon blast strength decreases with distance from blast (#3276)
    
    * Weapon blast strength decreases with distance from blast
    
     - To mitigate the damage falloff for weapons with a trigger radius, a multiplier based on the ratio of trigger and blast radius is used.
     - For a weapon with 0 trigger radius, the damage will range from 100% at the center, to 25% at the edge of the blast radius.
    
    * Use worst-case distance estimate rather than exact computation
    Added functions for bulk-uploading sprites. (But, they're not in use yet.)
    Made mouse click targeting much more accurate, using the actual ship outlines and the draw order to determine which ship you are trying to click on.
    Cleaned up some unused sprites and functions, and fixed a few comment typos as well.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Spell-checked the comments.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Eliminated SDL_image in order to allow reading images in multiple threads simultaneously.
    Added GPL statements to all source code files and added a license.txt file.
    Mask: refactored to eliminate duplicated code.
    Uploaded all the files from my local repository to Google Code.
    Switched to using 2D "texture arrays" for sprites, so all the frames fit into a single texture.
    Switched to using the new ImageSet class for batch-loading of sprites. (But still with each frame going into separate textures.)
    Added functions for bulk-uploading sprites. (But, they're not in use yet.)
    Made it possible to zoom the view in or out (via the scroll wheel or the +/- keys) without changing the UI zoom.
    Fixed some things that Google's cpplint warns about (mostly, constructors that should be marked explicit).
    Sprites now store their own names (so the animation referring to the sprite does not have to).
    Switched to only storing 20 landscapes in memory at once, to avoid using huge amounts of RAM. (With the high-DPI textures, this cuts the maximum memory use down from 1.5 GB to 450 MB.)
    Added support for "@2x" image files to supply double-resolution graphics.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Eliminated SDL_image in order to allow reading images in multiple threads simultaneously.
    Added some helpful extra location functions to Sprite and Screen (e.g. TopLeft()).
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    fix: ensure move construct/assign closes own file
    
    An initialized `File` was never assigned to another initialized `File`, but if it had been done, would have leaked a file.
    
     - Rename the path variables in `Files` to avoid ambiguity introduced in C++17 with `std::data`
    fix: Call fclose on the error log
    Moved the File wrapper from ImageBuffer into a separate class.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    feat(preferences): Add a preference for the fast-foward interrupt introduced by #5148
    feat(preferences): Allow the "fancy" sobel filters in ShopPanels to be replaced with "fast" sprite images (#5179)
    Add a preference to toggle the starfield
    
    #4537
    Improve dynamic zooming (#3727)
    
    * Improve dynamic zooming
    
    Behavior changes:
    
    - Fixes the view zoom setting getting reset if the window is initially
      created at a smaller size (a likely occurrence when using tiling
      window managers)
    
    - Makes the view zoom restriction dynamic, updating the zoom level as
      necessary in real time as the window size changes, up to the user
      preference
    
    - Updates the view restriction bounds, taking into account both the
      window width and height, to ensure that at least the main menu and
      preferences panel are fully visible and accessible
    
    Code changes:
    
    - Split the "view zoom" value into two logical values:
    
      - User zoom, the setting that exists in the configuration file and
        is visible in the configuration panel
    
      - Effective zoom, used to actually scale the UI - a function of user
        zoom and window size
    
    - Update the code to use the user zoom or effective zoom values as
      appropriate
    
    - Consolidate all view zoom restricting code (from main.cpp and
      PreferencesPanel.cpp) into one place (Screen.cpp)
    
    * Revert Zoom->EffectiveZoom renaming
    & remove duplicated zoom reset
    Use a preference to control fighter repair strategy
    
     - The player can choose between least need (series) and most need (parallel). Maintains the default strategy of least need for AI ships and players who have not set the preference.
    Increase maximum volume back to 100%
    
    This increases the upper limit on what the volume can be set to back
    to 100% (as before 006238e85b7c9647e011c1d6bebcee40216c81ee).
    
    The default volume remains unchanged (now 12.5% of maximum).
    
    Volume in existing configurations remains unchanged. In the
    configuration file, the volume value now has the range from 0 to
    4 (instead of 0 to 1).
    Show location of player escorts on the map (#3576)
    
    * Identify escort systems with a center dot
    
     - Inside the system ring, show a grey dot if there are player-owned escorts in that system
     - Does not apply to the player's system
    
    * Use preference to control displaying the pip
    
    * Differentiate parked and unparked escorts via pip brightness
    
     - Also, show the pip for the flagship system (to help teach what the pip means).
    
    * Default display of escort system pips to "on"
    Several related changes to fighters: they can now run their own systems when being carried (to generate energy, repair, etc.). Their heat level is now indepenedent of the ship carrying them. Fighters now retreat for repairs if badly damaged, and launch only when mostly repaired. And, repair priority is given to the least damaged fighter.
    Code cleanup: "static" is redundant inside a C++11 anonymous namespace.
    In "focused fire" mode, turrets now face forward if no targets are present (e.g. for mining asteroids). That mode is now the default.
    Added the view zoom to the preferences panel, and made it possible to adjust settings that have a range of values using the scroll wheel (hovering over the setting) instead of clicking to cycle the values.
    Made it possible to zoom the view in or out (via the scroll wheel or the +/- keys) without changing the UI zoom.
    Added a setting to adjust the scroll speed.
    Added a key command to toggle escort ammo usage on the fly.
    Added "fog of war" obscuring parts of the map backdrop that are not yet visited.
    Merge remote-tracking branch 'endless-sky/master' into HaiOutfitRebalance
    
    # Conflicts:
    #       data/hai ships.txt
    For users with only 256 MB of VRAM, added a "Reduce large graphics" option which shrinks very large sprites to take up only 1/4 as much memory.
    0.9.2 updates
    Added a subtle "haze" effect in the background to make it look less flat and regular.
    Added a setting to disable the hyperspace flash.
    Added preferences to disable the warning siren, the mini-map, and the planet labels.
    Added a preference for whether escorts expend ammo always, frugally, or never.
    Simplified the logic for changing the zoom level of the screen, by moving more of it into the Screen class.
    Added support for changing the global zoom factor (for large monitors and for testing high-DPI rendering on normal monitors).
    Moved all the source code files into a "source" folder to clean up the root folder.
    Switched back to running in windowed mode by default, to make crashes, etc. easier to deal with.
    Removed superfluous std:: prefixes.
    Turned on motion blur and fullscreen by default, since those are settings I want to be sure are included in the beta testing.
    Added a "Preferences" class to parse the preferences file, and made the load display and auto-aim controlled by preferences. Also added an auto-fire AI option.
    Switched to using the new ImageSet class for batch-loading of sprites. (But still with each frame going into separate textures.)
    Added functions for bulk-uploading sprites. (But, they're not in use yet.)
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    Fixed an out-of-bounds iterator reference in the depreciation code, which is probably what was causing wildly random prices.
    The sale price of ships and outfits now depreciates over time. If you sell "used" outfits to an outfitter, they remain in stock to buy back (at the reduced price) until you leave the planet.
    Support data files encoded by UTF-8.
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Fixed some things that Google's cpplint warns about (mostly, constructors that should be marked explicit).
    More updates to the code comments.
    Did some optimizing of the file parsing code, so that startup will not bog down as the game data grows in size.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    Reorder some includes to match style (#4430)
    Cast pre-multiplication & increase variable size
    
    else computed results may overflow available bits resulting in UB.
    
     - Defer to `auto` for results of bitwise &
       - `(int)A & (uint)B` will be unsigned int/long per usual arithmetic conversions, and positive even for A < 0
     - Change from `int` to `unsigned` where negative values would result in unexpected behavior
     - When checking multiple grid cells only `diff` may be negative, so only `diff` need be signed
    Remove unused `step` parameter from AF::Collide
    
    `step` is now used in AsteroidField::Step, to configure the CollisionSets with the proper frame mask.
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Missing <algorithm> include
    Took out AsteroidField::Asteroid::Collide(), which is no longer used.
    Switched to using CollisionSet for asteroids and minables, and cleaned up some of the code related to them.
    Added a new "Visual" class that represents just the information we need to track for an Effect once it's instantiated. Using it in place of Effect saves a string copy and a good deal of memory for each active visual effect.
    Switched to using a vector for Projectiles and Effects, to reduce memory allocations and improve cache performance.
    Code cleanup: "static" is redundant inside a C++11 anonymous namespace.
    Fixed a crash that happens if a system contains an undefined minable object type.
    Made it possible to zoom the view in or out (via the scroll wheel or the +/- keys) without changing the UI zoom.
    Added NPC AI support for harvesting flotsam. (For miners, or for distracting pirates by dumping cargo.)
    Added a "mining" personality that circles around searching for minable asteroids, then destroys them. (It doesn't know how to harvest the flotsam yet, though.)
    Fixed a bug where the minable asteroids were persisting when you jumped to a new system.
    Systems can now define "minables" in addition to normal asteroids.
    Continuing to comment and clean up the code. Asteroids will now display properly on monitors wider than 4096 pixels.
    Added a common base class for Ships, Projectiles, Asteroids, Effects, Flotsam, StellarObjects, etc. This is the first step in creating a generic collision detection framework that can deal with different object types.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added an experimental sprite shader that can render motion blur. This makes everything less choppy, but more blurry, and takes a lot more GPU power.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Added a Random::Real() function, and refactored to use Random everywhere (because old-fashioned rand() is considered deprecated now.)
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Modified effects (weapon impacts, etc.) to take the target's velocity into account so they still look correct if the target is moving.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    fix(mechanics): Shipyard/Outfitter map view no longer shows "Has ___" for unvisited systems
    
    Only once the player has visited a system (via travel or a purchasing a map) should the player know if the system has any outfitters or shipyards
    
    Closes endless-sky#5364
    feat(mechanics): Save collections in order by element name (#5333)
    
    * feat(saves): write collections in deterministic order when saving
    
    * refactor: simply methods via capture lambdas
    
     - No need to pass DW instance around
     - use more "using" declarations to simply method declarations
    
    * pr feedback + lambda styling
    
     - applied a more uniform style to lambda expressions
    Update system colors when switching between Shipyard and Outfitter map panels (#4425)
    
    The cached map state wasn't being updated.
    Number formatting is now limited to one decimal place, which is enough for all current attributes. Also added a separate formatting function for numbers of credits.
    Update the map cache when selecting a new outfit or ship.
    Made it so certain planets will only show up as something you can land on if your ship has certain attributes.
    Don't show shipyard and outfitter contents in the map for systems that have not been visited.
    Made it possible for the shipyard and outfitter maps to filter the list to only show items sold in the selected system.
    The sale price of ships and outfits now depreciates over time. If you sell "used" outfits to an outfitter, they remain in stock to buy back (at the reduced price) until you leave the planet.
    Switched over to the new, cleaner clickable zone syntax in a few places where it was easy to do so.
    The outfitter map will now correctly show the presence of minables even in uninhabited systems.
    The map of outfit locations now also shows what resources you have mined in each system.
    Removed some superfluous namespace qualifiers.
    Refactoring: switching to using "!set.count(...)" instead of "set.find(...) == set.end()" because it's more concise, just as efficient, and seems clearer.
    The find function in the map panels now prefers names that start with the given string.
    Added a find function to the maps of where ships and outfits are sold.
    Modified the outfitter and sales maps to use the new common MapSales panel rather than duplicating code.
    Regularizing the shipyard and outfitter maps code to make them easier to merge.
    Merged the functionality of BlurShader into SpriteShader, and DotShader into RingShader.
    Made it possible to click category names in the maps of shipyards and outfitters to collapse or expand that category. Shift + click expands or collapses all.
    The "ports" map now shows whether each planet has been visited.
    Added a key for the sales maps.
    Fixed a few things in the map zooming code.
    +/- buttons/hotkeys now work on all map panels
    You can now hold Shift to select a second item to compare to, in the maps of the shipyards and outfitters.
    Fixed alphabetization of the lists in the maps of shipyards and outfitters.
    Added arrow key and page up/down support for the lists in the shipyards and outfitters maps.
    Switched the Escape key to closing dialogs, like people expect it to, instead of always going to the main menu.
    Fixed a bug in the shipyards map where if a ship variant is for sale, the base model is shown instead.
    Added a display of the currently selected item's attributes to the shipyars and outfitters map views.
    The shipyardas and outfitters maps now also show you the full set of items for sale in the selected system by dimming out the others.
    In the shipyards and outfitters maps, added more subtle coloring to show which systems have any ships or outfits for sale, even if not the selected one.
    Added Control+W (or Command+W on the Mac) as a universal shortcut for "close current window."
    Added another line to the shipyard and outfitter map listings, showing shields / hull and required space, respectively.
    Added more space in between categories in the shipyard and outfitter maps.
    Fixed a bug in the display of the shipyard and outfitter maps.
    Added two new map views, showing all ships and outfits that you know can be bought, and where they are sold.
    Fixed minor code style issues (#4428)
    Made the scanning warnings "unimportant," so they only pop up to the top of your messages list if they aren't already in the list somewhere.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Fixed a bug where the messages were not getting reset when loading a different game.
    Added a "Messages" class to allow any thread to safely add a message to the display.
    Starting to go through the code to add more comments and refactor things that are unclear or could cause errors down the road.
    Made it possible to construct an Angle from a Point and to query an angle's measure in degrees.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Added a Random::Real() function, and refactored to use Random everywhere (because old-fashioned rand() is considered deprecated now.)
    Changed the turret firing code to also have some "confusion" instead of being perfectly precise.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    Added functions for bulk-uploading sprites. (But, they're not in use yet.)
    Added support in ImageBuffer for loading multiple frames of an animation into one buffer.
    Merge remote-tracking branch 'endless-sky/master' into HaiOutfitRebalance
    
    # Conflicts:
    #       data/hai ships.txt
    For users with only 256 MB of VRAM, added a "Reduce large graphics" option which shrinks very large sprites to take up only 1/4 as much memory.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Spell-checked the comments.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Added the ImageBuffer class, which is my replacement for SDL_image.
    Added GPL statements to all source code files and added a license.txt file.
    Added saving of the game (every time you leave a planet, or if you quit while on a planet).
    Uploaded all the files from my local repository to Google Code.
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Truncate long player / player flagship names, and plugin names (#3395)
    
    * Truncate long player / player flagship names, and plugin names
    
    * Restored proper RHS margin for plugin text
    Adding "override" in two places where it was missing. (@Isaacssv552)
    Made it possible for the shipyard and outfitter maps to filter the list to only show items sold in the selected system.
    Made it so the map zoom level is remembered when you close the map. Also cleaned up some of the map code.
    The player info now remembers what categories are collapsed in the shipyard and outfitter and the corresponding map panels.
    Made Panel::Click() able to distinguish double-clicks, so that the info panel can switch to a ship only if it is double-clicked, not just clicked twice in a row.
    Fixed some variables that don't need to be mutable now that Panel::Draw() is not expected to be const.
    Switched over to the new, cleaner clickable zone syntax in a few places where it was easy to do so.
    The map of outfit locations now also shows what resources you have mined in each system.
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    Changed Panel::Drag and Panel::Scroll to take double dx/dy
    
    Fixes endless-sky/endless-sky#805
    Added a find function to the maps of where ships and outfits are sold.
    Added a new base class that combines the common code from the outfitter and shipyard maps.
    feat(graphics): Add comment with shader name (#4995)
    
    This makes it easier to debug compilation errors
    Replacing "NULL" with "nullptr".
    Tweaked the pointer shader to draw a teardrop shape instead of a triangle.
    Moved all the source code files into a "source" folder to clean up the root folder.
    The program now auto-detects the proper GLSL version number so it does not have to be set via conditional flags for each OS.
    Had to roll back to OpenGL version 3.0 instead of 3.3 on Linux, but left the Mac port at 3.3.
    Ported to Mac OS X.
    Switched to always using the Color class instead of passing around RGBA float arrays.
    Added GPL statements to all source code files and added a license.txt file.
    Fixed some shaders that used "\t" in place of "\n".
    Uploaded all the files from my local repository to Google Code.
    feat: Always check that you share a language with a ship before it hails you (#5431)
    feat(mechanics): draw hardpoint sprites on cloaked player ships
    
    closes endless-sky#5323
    feat(mechanics): Enable creating Commands from datafile text (#4997)
    
    Doesn't add the bindings for actually reading in & then using the commands, but is one step in that direction.
    
    * Add command loading and sending it to the Engine
    This is part of the automatic-testing PR endless-sky#4370 and could also be used for endless-sky#4720.
    
    * Replaced if/else chain in Command loading by lookup map.
    Also fixed a bug that caused commands to be skipped during loading.
    
    * Add command forwarding through MainPanel.
    
    * Apply suggestions from code review
    Print the relevant token when an unrecognized command is found.
    docs: File comment improvements (#5255)
    
    Improved some ambiguous text about threads and thread safety.
    Fixed some spelling issue.
    feat(mechanics): The sounds and effects of a drive can now be customized (#5044)
    feat(mechanics): Allow mission NPCs to spawn or despawn based off of ConditionSets (#5161)
    refactor(mechanics): Change bay type identification to categories (#4391)
    
    * Change bay type identification to categories
    
    Change the ways bay types are identified from boolean to the category of
    the ship that is to be carried in the bay.
    
    This will make it easier to add new bay types in the future and/or to
    load bay types from data files instead of having them hardcoded.
    
    Signed-off-by: Peter van der Meer <peter.vd.meer@gmail.com>
    
    * Fixed some style issues
    
    * Processed review comments
    
    * Update code merged from master to categories.
    
    * Process first set of review comments
    
    - Renamed forCategory variable to category.
    - Added function to Ship to get total number of bays for a category.
    - Use total instead of free bays for display in-flight.
    - Changed launch-speed-check to use automation attribute of carried ship.
    - Added check if bay is a known type during loading.
    - Restored the Engine::Place per-category carrier selection for NPCs.
    
    Retest after rework:
    - Performed minimal load / flight / reload test with carriers, fighters and drones.
    
    * Processed review comments
    
    - Added use of const string references
    - Fixed some style issues
    - Use continue instead of intending a large block
    - Update code to make automated ships launch faster than crewed ships again
    
    * style: minor touchups
    feat(mechanics): New enginepoint types and support for over/under and angled engine flares (#4539)
    fix(graphics): Avoid velocity-based "sliding" of Visuals
    
    Ref 8a13777ad8ca580e34e01e8129ba61232fcaafbf
    
     - Only projectiles are drawn with a + .5*velocity shift
       - This should be removed in the future pending custom Sprite drawing positions
     - Remove unused DrawList method
     - Avoid creating afterburner visuals based on non-final Ship::velocity value
    
    Closes endless-sky#4261
    fix(input-handling): Only handle inputs given when the engine is fully active (#4857)
    
    * Clear ghost commands due to keypresses seen as new when they are not
    
    The engine is only reading commands while it is active, but any key that
    was pressed before the engine became active (and that is still pressed
    when activating the engine) should not be seen as a new keypress.
    
    This commit fixes that by discarding the very first commands read when
    the engine becomes active.
    
    * style: update comment
    
    Co-authored-by: tehhowch <tehhowch@users.noreply.github.com>
    feat(mechanics): Added a command that will bring the flagship to a stop (#4745)
    
    * Move reading of Shift modifier from AI.cpp to Command.cpp.
    
    This places reading of the Shift key state together with regular input key reads.
    
    Tested (and no issues seen):
    - N       -> cycle through ships
    - Shift-N -> cycle through escorts
    - T       -> talk to selected ship
    - shift-T -> talk to selected planet
    - B       -> board enemy ship
    - shift-B -> board escort
    - R       -> select nearest enemy
    - shift-R -> select nearest ship
    
    * Add stop command to stop all movement of players flagship
    
    Used Shift+H as key to perform full stop of flagship.
    
    * Remove no longer needed SDL include from AI.cpp
    
    * "stop command" is shift-down instead of shift-hold
    
    * Bug fix for this problem:
    
    1. user presses and holds SHIFT
    2. user presses and holds BACK
    3. ship engages reverse thrusters (BACK) for one step
    4. ship disengages reverse thrusters and then activates STOP
    
    * Process review comments
    
    Removed duplicate code.
    Minor text improvement.
    
    * Cleaned up HandleKeyboardInputs section.
    
    * Use local shift variable.
    
    * Fix comments
    
    * Add message informing the player that the flagship is stopping.
    
    * Updated message to indicate one-time action.
    
    * style: update Stop command's feedback message
    
    Co-authored-by: NomadicVolcano <60122264+NomadicVolcano@users.noreply.github.com>
    fix(input-handling): Only update AI with player commands when actively in-flight (#4797)
    
    * Only handle Engine keyboard inputs when the game is not paused
    
    Added isActive check around keyboard reading to prevent reading of
    keyboard inputs for the engine while the game is paused.
    
    * move isActive check fully to Engine.
    
    Nearly all of the isActive checking was already done in the Engine.
    This commit moves the isActive check from UpdateKeys also there.
    fix(input-handling): allow jump/board/land autopilot to resume while held (#4756)
    
    
    Resolves bug described in endless-sky#4755 and endless-sky#4744, where a held autopilot command key would be ignored if you pressed a movement key.
    
    Current behavior:
    1. Press J, B, or L to begin an autopilot action. (Or whatever you've assigned jump, board, and land.)
    2. Hold down the button; do not release
    3. Use movement keys. This cancels autopilot, as expected.
    4. Stop using movement keys.
    5. Autopilot resumes its action because J, B, or L are still pressed.
    refactor(input-handling): Move kb/m reads from AI & Engine to only Engine (#4715)
    
    * Add an "And" function to the Command class.
    
    * Move keyboard inputs from AI to Engine
    Combine mouse and keyboard inputs into single activeCommands variable
    
    Tested (OK, no issues seen):
    MENU
    MAP
    INFO
    FORWARD, LEFT, RIGHT, BACK, PRIMARY, AFTERBURNER
    SCAN
    DEPLOY
    HAIL
    BOARD
    CLOAK
    LAND (autopilot)
    LAND (switch landing targets)
    LAND (landing based on mouseclick)
    JUMP (autopilot)
    JUMP (insufficient fuel warning)
    JUMP (WAIT, fleet waiting for jump)
    TARGET (cycle through enemy ships)
    NEAREST (cycle through friendly ships)
    SELECT (switch secondary weapon)
    SECONDARY (fire secondary weapon)
    DEPLOY
    FIGHT
    GATHER (looks the same as before the change)
    HOLD (looks the same as before the change)
    AMMO
    
    Signed-off-by: Peter van der Meer <peter.vd.meer@gmail.com>
    
    * Add comments on Command and made comments full sentences.
    
    - Documented the use of the WAIT command.
    - Made all comments full sentences, included full stops.
    
    * Fixed clearing commands from the wrong variable.
    
    * Remove duplicate audio-repeat-avoidance construct
    
    Repeatedly playing audio was already resolved by forwarding autoPilot
    commands only 1 single frame through activeCommands and by clearing
    the autoPilot at the same time as giving the error-message and playing
    the fail sound.
    
    * Fix an issue where JUMP is cleared before out-of-fuel error-message.
    
    The targetSystem gets set during emergency jumps (without a travel plan).
    If such situation happens and there is insufficient fuel or no jump or
    hyperdrive, then we still want the warning to be sent on the first time
    the jump command is given.
    fix: Scanning rings properly scale to the ship again (#4731)
    The status overlay now shows the disabled threshold
    
    #4513
    Restrict reparenting of mission-affiliated carried ships to the same missison (#4468)
    
    * Restrict reparenting of mission-affiliated carried ships to same-mission ships
    * Avoid nullptr dereference
     - Carried ships should properly inherit their parent's system, but on the off chance one doesn't, default it into the players system
    * Replace std::find_if with a Mission class method
     - explicitly declare the lambda captures for `reparentWith`
    * Log the issuance of a fallback system
    
    Fixes #4307
    Some more style fixes. (#4429)
    
    No big changes, just some spaces removed.
    Reorder some includes to match style (#4430)
    Improve interpolation between game zoom levels (#3828)
    
    * Make `log(zoom)` lerp to `log(targetZoom)`
    * Only compute zoom change when needed
    Cast pre-multiplication & increase variable size
    
    else computed results may overflow available bits resulting in UB.
    
     - Defer to `auto` for results of bitwise &
       - `(int)A & (uint)B` will be unsigned int/long per usual arithmetic conversions, and positive even for A < 0
     - Change from `int` to `unsigned` where negative values would result in unexpected behavior
     - When checking multiple grid cells only `diff` may be negative, so only `diff` need be signed
    Fix a bug for carriers to get lost. (#4200)
    Ships depart from their previously-specified planet (#4111)
    
    * Allow special ships to define a planet to depart from
    * Parked ships remember the planet they were parked on
       - As in `TakeOff` code, parked == disabled: no cargo transfer, and no need to recharge.
         (Parking can only be done when landed, so this will have already been done for any parked ships.)
       - When loading the player's save, only supply a planet for in-system ships that do not have one.
    
    * Only set a ship's planet if it doesn't have one
     - PlayerInfo::Land is called as a part of game startup
       - Ships unparked will not jump between in-system planets due to save reloading
    
    * Use Fleet::Place for generic in-space positioning
     - Remove effectively duplicated code from Engine
     - Any ship that is spawned in flight in the player's system is not over the reference planet unless it is taking off
    Using float v. double in some cases of -Wdouble-promotion
    
     - Add some <algorithm> headers for uses of std::min or std::max
    Remove unused `step` parameter from AF::Collide
    
    `step` is now used in AsteroidField::Step, to configure the CollisionSets with the proper frame mask.
    Destroy any still-docked carried ships
    
     - Emit ShipEvent::DESTROY events, for missions that need to know
    
    Refs https://github.com/endless-sky/endless-sky/issues/4130
    Place NPCs from boarding missions while in-flight
    
     - Expose a pointer to the recently-accepted boarding mission
     - Move "Place" code for NPCs to public method
     - Check for an active boarding mission in SpawnFleets
    Support launch effects for carried ships when departing from their carrier (#3602)
    
    * Support "launch effect" child node for carrier bays
    
     - Allows specifying multiple effects, and a count of how many of each, e.g.
        "launch effect" "door sparks" 5
        "launch effect" "decompression"
    
    * Provide a fallback effect for certain bay types
    
    For non-automaton ships, any internal (i.e. pressurized) bays will use a default effect if none were specified
    
    * Remove unnecessary includes
    
     - Angle & Point includes were needed before `Visual` took the responsibility for placement of effects
    Remove compiler warnings issued by clang-902.0.39.2
    
     - Prefer auto for small-scope vars with long type names
    Number formatting is now limited to one decimal place, which is enough for all current attributes. Also added a separate formatting function for numbers of credits.
    Modified the HUD to show the hull level at which a ship will be disabled.
    Made it so the viewport corner markers on the radar will be "square" even if the window is much wider than it is tall. Also added a separate, customizable color for the markers.
    Draw viewport boundaries on radar
    The heat bar now blinks to indicate that your ship is overheated. Also, changed the "extra heat" overlay color and capped it at 200%, instead of "segmenting" it.
    Consider target's heat level when picking targets (#3493)
    
    * Allow Ship::Heat() to exceed 1.
    
    * Deprioritize highly overheated targets
    
    * Display excess heat as a segmented overlay bar
    Fixed some AI records that weren't cleared when they should be.
    Remove unnecessary iterator from Engine::Place
    
     - Since Engine::EnterSystem now uses `newShips` when spawning random NPCs, all ships in the `ships` list are ones that were just added by Engine::Place (i.e. player ships and mission NPCs).
     - The player's flagship is now always the first ship in `ships`, no matter how many random NPCs or raidfleet ships are spawned when entering a system.
    Use "newShips" list for EnterSystem()'s new NPCs
    
     - Previously, they were directly added to the `ships` list
     - `newShips` was added in ef0a6043001928244214fcf89e51c745c4c2c7e8, but only applied to CalculateStep, MoveShip, SpawnFleets, and SpawnPersons
     - Behavior on `master` is such that any ship created by Engine::Place() is available when Engine::CalculateStep calls AI::Step. If the randomly-spawned fleets are not spliced at the end of Place(), they would not be available for this call.
     - The treatment of ships created by calls to EnterSystem() from CalculateStep() is not affected by the `ships` -> `newShips` change.
    Add a "launching" personality, a counterpart to "waiting"
    
     - Mission NPCs with the "launching" personality will always take off with the player, even if their government (or other attributes) would normally prevent them from landing.
     - "launching" has precedence over "waiting" and "staying"
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Enabled text replacements in ship hails (#3716). (#3728)
    
    * Enabled text replacements in ship hails (#3716).
    
    This change allows these text replacements to be used in ship hail strings:
    - <first>, <last>
    - <ship>
    - <system>
    - <npc>
    - <date>, <day>
    
    * Fixed variable name.
    Fix missing parentheses and remove redundant check
    Cloaked ships can now be hit by projectiles (but still can't be seen, targeted, or tracked, and still don't pick up flotsam or trigger projectiles with a trigger radius).
    Freshly-instantiated, uninterested NPC flagships should have no parent
    Replace most gov->IsPlayer with ship->IsYours (#3600)
    
    * Use IsYours() when possible, rather than querying politics
    
    * Update "isYours" through Ship::WasCaptured
    
    * Set "personality escort" even if an NPC is using government "Escort"
    
     - Ensured all NPCs using the player government have it defined (i.e. always declare the government of the NPC)
     - Use government "Free Worlds" for Free Worlds ships
       - Parole missions / missions involving escorts when only the player has safety continue to use government "Escort"
    Player-owned ships are always "in-range" for the Tactical Scanner
    Update "Grudge" messaging
    
     - Use an anonymous function to determine if the given ship is capable of sending a hail (e.g not mute or out-of-system or uncrewed)
     - Unify "author" formatting for message printing
    Inscrutable targets are impervious to tactical scans too
    Whether a function parameter that is passed by value is const or not is an implementation detail, not something that needs to be defined in the class interface.
    Implement a ShipEvent queue to allow delayed ShipEvent handling (#3371)
    
    * Implement a ShipEvent queue to allow delayed ShipEvent handling
    
     - Handling ShipEvents can result in new UI elements.
     - Only one UI element should be created and displayed to the player at a time (i.e. do not display a dialog and the BoardingPanel simultaneously).
     - Callbacks from one UI element from a given ShipEvent may result in status changes that should influence other UI elements created from the same ShipEvent (e.g. if a mission conversation offered upon boarding an NPC results in that NPC's destruction, the player should not be able to plunder said NPC).
     - Fixes a preexisting issue where the boarding panel would be offered if the player dies in a conversation.
    
    * Switch from GetUI()->IsTop(this) to GetUI()->Top().get() == this
    
     - IsTop() checks only drawn panels, not panels that are requested but not yet drawn.
    Made the target pointer also show up for target asteroids.
    Modified the "ammo" HUD element to center the ammo icon boxes instead of left-aligning them within the given rectangle.
    Wrap messages when drawing them to prevent overflow (#3313)
    
    * Wrap messages when drawing them to prevent overflow
    
    * Increase padding on right edge to avoid overlap of ammo icon
    Don't highlight minables while jumping.
    The player will now remember minable types they have targeted in a system even if they didn't harvest anything from them.
    Batching the draw commands for projectiles and effects.
    Switched to using 2D "texture arrays" for sprites, so all the frames fit into a single texture.
    Added a "tactical scanner" that shows additional information about your target.
    Fixed a bug where the asteroid target color would be whatever color was used for the previous ship.
    Added an "asteroid scanner" outfit. Also made it possible for turrets to track minable asteroids and for target "crosshairs" to have something other than 4 points.
    Added support for special "persons" with multiple ships. The "person" can regenerate all its ships unless you kill the flagship.
    Made it possible to customize the position and size of the ammo, escorts, and message lists in the heads-up display.
    Combined the heads-up-display into a single "hud" interface specification.
    Made it possible to anchor different elements in an Interface to different corners or edges of the screen.
    For the faction icons, make sure they're always aligned with a pixel so they aren't blurry.
    Switched to using CollisionSet for asteroids and minables, and cleaned up some of the code related to them.
    Switched back to using generic Body in CollisionSet, rather than Ship.
    Do not draw the flagship if it is destroyed (#3142)
    
    * Do not draw the flagship if it is destroyed
    
     - Only send ShipEvent::DESTROY when the ship is destroyed (e.g. landing and forget removals do not generated events).
     - Use cached variables where sensible or already defined.
    
    * Merging with my latest changes.
    Since CollisionSet is only used with Ships right now, switched it to using Ship pointers instead of generic Body pointers.
    Make sure a ship's destruction generates an event even if it self-destructed.
    Added a new "Visual" class that represents just the information we need to track for an Effect once it's instantiated. Using it in place of Effect saves a string copy and a good deal of memory for each active visual effect.
    Switched to using a vector for Projectiles and Effects, to reduce memory allocations and improve cache performance.
    Refactored Engine::CalculateStep(), splitting each set of calculations into a separate function to improve clarity and to open a path for possibly multi-threading the most expensive calculations.
    Clarify "Landing on:" navigation mode. (#3112)
    
    * Clarify "Landing on:" navigation mode.
    
    It can display "Landing on", "Can land", and "Cannot land".
    It adds "(mission)" when it is the destination of a mission.
    
    * Remove "(mission)" from "Landing on" navigation mode.
    
    * "Can land on: Planet" makes more sense than "Can land: planet."
    Added colored "faction markers" to the targeting display.
    Keep partially collected flotsam (#2955)
    
    * Keep partially collected flotsam
    
    The leftover units would vanish when only part of the flotsam fits the
    cargo hold. This means that you can lose cargo just by transfering it
    to another ship of your fleet (jettison cargo, then guide other ships to
    the flotsam).
    
    This commit changes that behaviour, only removing the flotsam when there
    are no more units. Only 1 ship can collect from the flotsam on each step.
    
    * Jettison partially collected flotsam from the collector ship
    
    Place the flotsam as if it was collected, partially stripped,
    and then thrown back out.
    
    * Replace placement of partial flotsam with an adjustment in velocity.
    
    Flotsam transfer logic is moved to Flotsam::TransferTo and the flotsam
    velocity is stabilized in proportion to the amount being transferred.
    
    * Cast to double with static_cast.
    Left- and right-clicking the Radar display issues appropriate click commands (#2679)
    
    * Right-clicking the Radar display will issue a scaled MOVE_TO order
    
    Current behavior is to allow clicking "behind" or through the radar display, e.g. a right-click acts as though the radar display is not present.
    
    With this PR, right-clicking the radar display will send a MOVE_TO order to your selected escorts, with the scaled target position.
    This allows ordering your escorts up to 128 / 0.025 = 5120 units away from your flagship's current position in the system, without requiring you to zoom out.
    
    * Read radar position and size from interfaces.txt
    
    * Radar display clicking works for left-click actions and also drag-select
    
    * Radar clicking obeys an opt-in preference setting
    
    * Change 'static const <T>' to 'const <T> &' for GameData references
    
     - Forward compatibility
     - 'Interactive' -> 'Clickable', to indicate how to interact with the radar display.
    
    * Formatting fix.
    Mission NPCs use fleet movement behavior to travel in groups (#3052)
    
    * Mission NPCs use fleet movement behavior to travel in groups
    
     - The current fleet movement behavior is for an escort to wait until its parent is ready to jump before jumping, and parents will jump whenever they are able.
     - Each individual NPC block in a mission will have its own flagship, just like NPC fleets spawned randomly. This flagship is set each time the player departs from a planet.
       - The NPC flagship is the most expensive (e.g. strongest) ship of all non-destroyed ships in the NPC block.
     - When the NPC flagship is destroyed, its escorts revert to the previous follow-the-player behavior (until the player lands).
    
    * Use order of definition rather than cost to ID the NPC flagship
    
    * Clarify NPC reparenting behavior upon parent death
    
     Upon parent's death, attempt to follow the parent's parent:
     - Regular NPCs & mission NPCs with "uninterested" become independent
     - Other mission NPCs will track the player
    Also show minimap while preparing to jump. (#3097)
    
    * Also show minimap while preparing to jump.
    
    I can see when all jumps are done (minimap disappears).
    It is easier to cancel a wrong jump (minimap is visible longer).
    
    * Simplified the condition check.
    Convey raid fleet spawn likelihood via Player Info menu (#3087)
    
    * Move raid fleet attraction to PlayerInfo
    
    * Display raid fleet threat in PlayerInfoPanel
    
     - Roughly log-spaced tiers. The displayed number indicates the expected number of raid fleets per jump (if the system has a raid fleet).
     - If any raid fleets are spawned, a message is sent to the screen.
    
    * Display both cargo and strength components, textualize threat level
    
     - Shows each component of raid fleet attraction to the player
     - Gives a categorical rating of the number of raid fleets expected
    
    * Use likelihood of at least one raid as the threat indicator
    Use a wormhole's actual position instead of the previous day's position (#3085)
    
    * Use a wormhole's actual position instead of the previous day's position
    
     - Ship::Place accepts optional 4th argument, bool default = true
       - if true, perform full initialization of the ship
       - if false, only alter the ship's position, velocity, and angle
     - Updated Engine::EnterSystem to determine exactly when the player travels via wormhole and set the flagship position accordingly.
       - Fixed invalid travel plan checks when the next system is in Neighbors() but the flagship has no jump drive.
    
    * Revert Ship::Place changes to use new function, Ship::SetPosition
    Prevent players from switching landing targets if they are already landing on a planet (#3090)
    
    * Players cannot switch targets if they are landing
    
    * Store object.GetPlanet() result
    A few more code cleanup changes.
    Code cleanup: using lround() for more accurate rounding of double to integer.
    Fixing a build error in the previous commit.
    Fixed ton displayed incorrectly
    Sped up the zoom animation so you're less likely to overshoot when trying to set it back to 100%.
    Fix bugs in two recent commits
    Allow landing on planets or wormholes that are not in the TravelPlan (#2845)
    
    * Allow landing on planets or wormholes that are not in the TravelPlan
    
     - If the player selects a landable object that is not part of the travel plan, it will have priority over the automatic landing target needed for completing the TravelPlan.
    
    * Clear invalid travel plans caused by "unplanned" wormhole travel
    Cleaning up an unneeded check and some extra parentheses.
    Ships that flash no longer repeatedly trigger the warning siren (#118)
    Help messages no longer assume a fixed start date (#119)
    Merged the functions for getting a stellar object's color in the radar and in the orbits map.
    Make restricted planets a separate color (#111)
    Allow mission target blink color to be set independently of ships the player is targeting (#2825)
    
    * Add "radar blink" color
    
    * Set default radar blink color
    Mission NPCs added to the escort display are drawn with hostile colors as appropriate. (#2725)
    
    * Mission NPCs added to the escort display are drawn with hostile colors
    
    If a mission adds a hostile ship to the escort display so that the player can track its whereabouts, this ship will appear under the player's colors (green) on the radar and in the target reticle.
    
    This commit prevents drawing hostile escorts as assumed friendlies.
    
    * Display escort icon as Radar::HOSTILE color
    
    Also, do not merge it with friendly escort icons.
    
    * Restore colors in radar display
    Made "raids" on poorly defended player fleets only happen if the raid's government is hostile to the player.
    Added a "target" personality that marks a ship by making it flash in the radar and the targeting display.
    Added two weapon modifiers: "safe," meaning the blast radius only hits hostile ships, and "phasing," meaning the projectile is not blocked by asteroids or other ships.
    Do not allow scanning of cloaked ships
    
    When a ship cloaks, any "scan circles" will be removed
    If your targeted ship is cloaked, you cannot attempt to scan it.
    Use user-defined colors for status overlays and escort attributes
    
    Status overlays (shields, hull, scanning progress) were previously fixed
     - New colors are added to data/interfaces.txt to allow custom colors
    
    Escort attributes (shields, hull, fuel, heat, energy) were previously hard-coded to the default values assigned to the flagship.
     - Colors now reflect the custom values given to the user's flagship's attributes.
     - Existing "overlapping" bar behavior for displaying attributes that differ between like-model escorts is preserved.
    Truncate displayed ship names to prevent overflowing containers (#2631)
    
    * Apply truncation to the front of ship names if selling more than one
    
    Avoids awkward-looking line wraps caused by long ship names when coupled with list-style confirmation dialog.
    Refs #2249
    
    * Extend truncation to other appearances of ship names
    
    Adds front or end truncation to the following locations:
     - Hailing screen: no overflow off right edge for combinations of long ship names and/or long government names.
     - Targeting reticle: no overflow off left edge of ship name
     - Ship detail screen: no overlap of "ship:" and the ship name
     - Shipyard/Outfitter ship details screen: no/minimal overflow out of rounded square border
     - Player Info fleet list: no overflow of ship name across category
    
    Front truncation used where possible, to preserve possible identifying numbers on the tail of the ship name, e.g. the "1" in 'My Ship 1'
    
    * Remove all overlap from Shipyard/Outfitter shared panel
    
    * Font::TruncateMiddle
    
    Allow truncation of strings from the middle out. No special handling to cut in "pretty" locations to do things such as prefer whole-word removal, 2nd-letter starting, etc.
    Changes in border characters from "..." to alphanumerics, plus the slightly reduced width precision of TruncateMiddle vs Truncate(Front) made adjusting some targeted widths necessary.
    bugfix: MOVE_TO orders refer to a specific System (#2589)
    
    * MOVE_TO orders refer to a specific System
    
    Issuing MOVE_TO orders now includes a target system, allowing selected escorts to navigate across system boundaries to the specified position, instead of navigating to that point in their current system.
    
    Ref #2584, Closes #2580, Closes #2382
    
    * Improve readability+clarity
    Fix to changing a system's music in an event
    
    At the moment, Engine::EnterSystem plays music before IncrementDate is
    run (which manages event handling). This means that if an event changes
    the music of the system you're in, you won't get the change until a day
    later. This fixes that by reordering the code. Should also fix the same
    issue with haze, if an event changes that.
    Fix to scanned ships that jump to other systems still having scan circles visible
    Don't let the player click to try to land on inaccessible planets.
    Added an indicator that shows the progress of your cargo and outfit scans of a ship.
    Refactoring to avoid any places in the code that make assumptions about how much fuel is used by various jump modes.
    Made System's list of links and neighbors a set instead of a vector, to simplify adding and removing items and checking if a given system is in the set.
    The flagship highlight, if drawn, will now be animated to match the ship.
    Allow fleets with no government to be instantiated. That is, the caller of Fleet::Enter() or Fleet::Place() is responsible for checking that the fleet has a government or assigning one if it does not (e.g. mission NPCs).
    Made it so certain planets will only show up as something you can land on if your ship has certain attributes.
    Made it possible to specify a ship's "noun," so the game can refer to it as a "creature" instead of a "ship." Also added an "inscrutable" attribute that makes it impossible for you to scan a ship's outfits.
    Made it so if a ship's sprite is animated, so is the target and flagship outline for it.
    Changed z index of bays "under"
    
    Fighters and drones "under" should be under any engine flares.
    Made the flagship highlight turn off if the flagship is destroyed.
    respect user preference
    rotate player sprite according to facing
    Added support for sprites drawn on top of turret hardpoints to show what kind of weapon is installed and what direction it's pointing in.
    Renamed Ship::GetTargetPlanet() to GetTargetStellar() to make it clear that it refers to a StellarObject, not a Planet.
    Fixed a crash that was introduced by my previous commit.
    Never show a destination planet if the flagship is under orders to jump or is already entering hyperspace (even if the jump orders have been cleared by that point).
    Pirate raids are now more powerful, but only come if the attraction of your cargo outweights the weapons you have to deter them.
    Made the flagship highlight color customizable.
    Fixed the "hyperspace in" noise playing when ships came through a wormhole.
    Fixed the flagship highlight not zooming.
    Added a preference to highlight the flagship (so it can be distinguished from other identical ships).
    Escort targeting brackets no longer show up for ships that haven't taken off yet.
    Moved the basic new player help messages that are shown each day into a data file.
    Pause view zooming when the main view is not active (i.e. a planet panel or dialog is up).
    Only respond to mouse clicks if the player's flagship is not dead.
    Made it so automatic mission clearance, if granted, applies to stopovers as well as the destination.
    Made it possible to specify the background haze image for each star system.
    Don't show the target crosshairs for your escorts that have been destroyed, even if they are "selected."
    Made it possible to right click a ship or location to tell your escorts to follow a friendly ship, attack a hostile ship, or move to a location.
    Fixed a typo in the previous commit.
    Fixed a bug in the new collision code where the blast radius was always being measured from the projectile's "start" position.
    Escort icons are now colored green if selected, yellow if preparing to jump but not ready, and red if unable to jump.
    Made it possible to assign number keys 0-9 to groups of escorts. (But, it's not possible to command them yet.)
    Made it possible to click escort icons to select them.
    Made it possible to zoom the view in or out (via the scroll wheel or the +/- keys) without changing the UI zoom.
    Now that the AI class stores a reference to the list of ships, it doesn't need to pass the list around everywhere.
    Fixed a bug in the new collision detection, when handling cloked ships.
    Added NPC AI support for harvesting flotsam. (For miners, or for distracting pirates by dumping cargo.)
    Added a "mining" personality that circles around searching for minable asteroids, then destroys them. (It doesn't know how to harvest the flotsam yet, though.)
    Implemented a much more efficient collision detection algorithm, to speed up large battles.
    Fixed some things that Google's cpplint warns about (mostly, constructors that should be marked explicit).
    Added the ability to specify plural forms of outfit and ship model names.
    Made it possible for each planet and system to specify the "music" to play when you are there.
    Made overheated targets blink grey instead of being solid grey, to distinguish them from truly disabled ships.
    NPC crews now replenish whenever you take off, to avoid the exploit where you wear down the crew little by little day after day.
    Made it possible to adjust the zoom factor of each engine hardpoint.
    Cloaked ships no longer broadcast hail messages.
    Made it so projectiles can't hit a ship before it's done taking off from a planet.
    Fixed a recent change that made ship explosions no longer hit anything.
    Fixed a bug where the pointer to whatever ship is hit by a projectile was not cleared if an asteroid was closer.
    Added a message when you pick up flotsam saying how much free space you have left.
    The map of outfit locations now also shows what resources you have mined in each system.
    Little fixes, hails, volume, fighters and drones (#1417)
    
    * change hails to only occur for living players
    
    * fix volume bar offset due to recent interface changes
    
    * fix carryable ships in other system were being dumped into space when you landed
    
    * fix carryable ships no longer mass select one parent
    
    this was causing issues with carryables being left behind because their potential parent would leave the system before being asked to wait for them
    
    * fix boarding panel oddities from interface update
    
    * revert UnloadBays condition
    
    this will eventually be an issue when players get annoyed that they have to keep waiting for fighters/drones to reload, but the parenting fix is the important part
    Systems can now define "minables" in addition to normal asteroids.
    Allowing the game engine to check every turn if any landscapes are ready to be uploaded to the GPU, so the backlog of landscapes to load won't grow too long.
    Updated the "interface" syntax to allow buttons to change color on hover and to simplify the syntax.
    Made it impossible to click-select a ship you can't target through other means.
    Ships that "disappear" for reasons other than being destroyed (i.e. because they leave the system and are "forgotten," or because they dock with their mothership) no longer count as destroyed.
    Continuing to work on code cleanup and commenting.
    Made it possible for fighter bays to specify both a facing direction, and a side (over or under). Also made it possible for bays to face backward.
    Added a common base class for Ships, Projectiles, Asteroids, Effects, Flotsam, StellarObjects, etc. This is the first step in creating a generic collision detection framework that can deal with different object types.
    NPCs that self-destruct now count as destroyed as soon as they explode, rather than needing to wait until you land.
    0.9.2 updates
    Ships now recharge whatever they are able to recharge on their own, if they land on an uninhabited planet.
    Added a setting to disable the hyperspace flash.
    Added preferences to disable the warning siren, the mini-map, and the planet labels.
    Fixed a crash if you hold down "jump" while jumping.
    Moved the "mini map" code into MapPanel, and added pointers for missions and waypoints.
    syntax correction
    Ships no longer ask you for help if they do not speak your language.
    Ships can no longer pick up "flotsam" when unable to "act" (cloaked, landing, etc.) or in other systems.
    Limited the alarm sound to playing once every 3 seconds.
    Disabled NPCs now start out at zero velocity.
    Limited help messages from other ships to one every two seconds, so they don't flood the screen when lots of ships are under attack.
    The mini-map now comes up while you are holding the jump key to prepare for a jump.
    In the jump minimap, added an arrow showing direction and dashed lines for jump drive jumps. Also fixed a bug where systems that were linked to both endpoints were drawn brighter.
    As an experiment, added  pop-up map that shows where you're going each time you jump. (If people play with it and don't find it useful, it'll be easy to take out again.)
    Added a message when one of your ships picks up flotsam.
    Cargo dumped by ships can now be picked up by others. Also, destroyed ships sometimes leave cargo behind.
    Weapons with blast radii now affect invisible ships (like the nanobots).
    Made a few tweaks to the appearance of fleets taking off from planets or waiting in orbit around them.
    Made the targeting pointers a tiny bit bigger so they're easier to see in a crowded scene.
    Fixed placement of planet labels when you first enter your ship.
    Don't have special persons "enter" systems with no links to them.
    Adjusted the planet label fade-out so it depends on the planet radius.
    Added a warning siren when hostile ships first appear.
    In the map detail panel, pressing "jump" now cycles the last jump on your path; Shift + "jump" locks in the last path and adds another, and delete removes one jump.
    Refactoring: switching to using "!set.count(...)" instead of "set.find(...) == set.end()" because it's more concise, just as efficient, and seems clearer.
    Made planet labels shift to a different side if they are hidden underneat another planet.
    You are no longer able to hail a ship while you or they are cloaked, and your target display no longer shows the facing angle of cloaked ships.
    Fixed a bug where blast radius was being calculated relative to a projectile's "start" point rather than where it hit its target.
    Made it possible for fighter bays to launch sideways, and added a retrofitted Bulk Freighter carrying a dozen drones.
    Added "barbs" on the ring labels for planets you can't land on, to make their status clearer.
    Planet labels are now colored by government.
    Added support for fighter bays where the fighter it is carrying is visible, drawn either below or above the ship.
    Added "labels" for planets you can land on, which show up when you get near them.
    Escort icons now turn red if you are about to strand them by jumping away when they cannot follow.
    Added support for "on enter" mission conditions that trigger the moment you leave the current planet.
    The "on enter" mission event now also triggers if you enter a system via a wormhole, instead of via hyperspace.
    Added a relatively simple but robust dynamic trade implementation.
    Other ships now make sounds when entering or leaving hyperspace.
    Pirate raids are now tied to a system's government, so there will not be human pirate raids in alien star systems.
    One "planet" can now appear multiple times in a system, to simulate a ringworld or other massive object with many places where you can land.
    Added Wanderer hails (random untranslated gibberish).
    Made thruster noise from other ships audible.
    The target outline will now rotate to represent what direction the target is facing in.
    Fixed a new bug where your flagship was drawn even after it died.
    Switched back to the old order of ships, so the player's escorts will respond properly. But, added a special case in the drawing code to draw the flagship last.
    Fixed in-system disabled escorts using the take-off animation when you depart.
    Cleaned up the code for "placing" ships when the player takes off, and made the flagship always appear on top.
    Wormholes now always return "???" as their name, to simplify all the code that displays planet names.
    Actually, "else if" required, otherwise ship disappears upon entering wormhole.
    Had accidentally reverted some Engine.cpp changes made in master, merged properly now.
    Merged wormhole-links with new way of traversing wormholes that avoids links. Created function specifically for drawing wormholes, this way the wormholes can be guaranteed to be drawn under all other links. To appear as a wormhole link on the map, the wormhole *must* have a planet entry.
    Added support for wormhole travel in pathfinding (including stranded escorts).
    Having thousands of messages to display will no longer slow down the game to a crawl.
    Added the ability to double-click a ship to board it, or a planet to land on it.
    The "drag" effect is now scaled so that applying a less powerful thruster (e.g. normal engines vs. afterburner) will not slow you down to the slower engine's speed if you are thrusting in the same direction you are going in.
    Switched back to "planet" as a generic name for space objects you can land on, because "inhabited objects" is likely to confuse people.
    Modified the audio source coalescing code to add source volumes instead of averaging, and also took out the doppler effect.
    Added function to return a "noun" for a "planet" object, by default this is the word "planet," but can be either "station" or "moon" if the attributes include one of those two terms.
    Cleaning up some unused sounds, and regularizing the names of others to use spaces instead of underscores.
    "Friendly" missiles are now dimmed out on the radar so it's clear which ones you need to worry about.
    Made mouse click targeting much more accurate, using the actual ship outlines and the draw order to determine which ship you are trying to click on.
    The correct jump sound is now played for ships with both a jump drive and a hyperdrive.
    Fixed some more bugs that can occur when the first ship in your list is unsuitable to be your flagship.
    Fixed a crash when you lose boarding combat and your flagship is captured.
    selected target colored Radar::SPECIAL on radar instead of their normal color
    Fixed a bug I just introduced.
    Fixed a bug where "pirate raids" happen even if all your freighters are parked.
    My previous change to support losiong your ship through boarding combat broke the handling of having your ship die normally. Fixed that.
    Hide the target direction indicator if the target is very close (so it won't jitter around randomly, e.g. when you are boarding).
    Added a pointer that shows what direction your target is in (relative to your ship).
    The radar pointers now include "neighbor" system sif you have a jump drive installed.
    Switched to using the presence of an icon to indicate that a weapon is secondary, so that there can be secondary weapons that have no fuel or ammo cost.
    Took out the need for Information and Interface to know about Radar (replacing it with generic named points, to be handled separately, instead).
    Modified radar to display correctly when the game is first loaded, and to show dominated planets in green.
    Added support for planetary domination. (But, it won't do anything until defense fleets have been set for each planet.)
    Added support for unique "persons" who can show up in any system.
    Fixed a bug where GetSystem() would return null for a newly bought fighter.
    Disabled escorts no longer get "stolen" if you abandon them and land on a planet. Also, disabled NPCs will no longer heal when you land.
    Added support for clicking on ships and planets to select them.
    Made some changes to improve thread safety.
    Made it possible for engine flares and afterburner effects to "stack," so that if you have multiple engines both their flares will be shown instead of only a random one of them.
    Added "firing" animations for some of the missile weapons.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Fixed a bunch of spelling errors found by the codespell tool.
    Made it so boarding happens even in other systems than the one you're in, and a ship of yours can ask for assistance while in a different system.
    Removed superfluous std:: prefixes.
    Various small fixes to things I found during testing.
    Reordering the functions in PlayerInfo and Ship and renaming some of the poorly named ones.
    Code cleanup: always referring to the player's ship as "flagship."
    Code regluarization: making sure the PlayerInfo object is always referred to as "player" instead of "info."
    Fixing some glitches in the escort AI.
    Added support for "parking" ships (to avoid paying salaries for them), and for renaming ships.
    Continuing to tweak the motion blur.
    Fleet strength needs to be an int64_t.
    Fixed the motion blur for the plasma cannon (and anything else where the sprite is "stretched" to more than one frame's velocity length).
    Did some significant optimization (at least 2x faster calculation times in big battles) by switching weapon attributes from a string to double map to a fixed set of values accessed by inlined functions, instead.
    Fixed the bug where the radar flickers under heavy load.
    An initial attempt at getting the escort HUD to "stack" ships so that there's enough space to show them all.
    Modified the escort HUD so that disabled ships are greyed out.
    Updated handling of "escort" ships in the radar and targeting.
    Reduced the rate of pirate "raids" on fleets of merchant ships.
    Added display of what system your "absent" escorts are in, including all non-fighter ships that are marked as escorts by their government or personality, even those you do not own.
    Made some changes to optimize the motion blur rendering, including turning it off from effects (which are either sparkly or big and blurry, so they don't suffer from lack of motion blur).
    Added an experimental sprite shader that can render motion blur. This makes everything less choppy, but more blurry, and takes a lot more GPU power.
    Fixed a bug where "staying" and "waiting" npcs might not have the right swizzle color set.
    Modified weapons with a "blast radius" to not damage ships that are landing or taking off (to avoid having ships be destroyed when they are not at full zoom).
    Switched to drawing the status overlay underneath the UI and the other marks, instead of over them.
    Slight code simplification in Engine.
    Made the status overlays half-additive for better visibility.
    Updated the status rings to scale with the ship size (and to not be shown when the ship is cloaked).
    Updated the ring shader to support dashed lines, so I can use it for the main display of your ship's shields and hull.
    Added a "status overlay" preference option where rings representing shield and hull strength are overlaid on all "escorts" and enemies.
    Switched to having the hail messages be a property of each government rather than individual ships or fleets (so that mission-related ships will use them, too, to add a bit of flavor in battles).
    Fixed a bug where NPCs can "take off" from the planet you have landed on, even if they are not authorized to land there. Now, instead, they wait in orbit for you to take off.
    Made some tweaks, in particular to make plundering pirates a little easier early on.
    Added the nuke, and tweaked the AI to be a bit more cautious about firing it when the target is nearby.
    Added support for mission actions to be performed when you enter a system (showing a dialog or conversation, setting flags, etc.).
    Modified PlayerInfo to have saved games remember if you have "clearance" on the current planet, so that you won't suddenly lose access to a planet's services when you reload.
    Fixed some places where a Random::Int() call might result in a divide by zero.
    Tweaked the handling of sub-munitions. In particular, they are now only created if the projectile does not hit something, and if it does hit something, it does all the damage its submunitions would have done.
    Added convenience functions to Planet and Government to simplify the syntax for querying political state. Also fixed a few busgs in my recent Command and AI changes.
    Eliminated the Controllable class by using Command for its command bitfield, and moving its target functions into Ship. This means there is now just a single representation of commands, instead of three different ones for different purposes.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Added some more side missions.
    Modified Date to use a custom implementation, using days since epoch instead of seconds since epoch, in order to avoid fractional days and to work on systems where time_t is only 32 bits.
    Added a new "infiltrating" mission mode where you can land on a planet, but cannot access any services there or refuel your ship.
    Switched to a more elegant way of drawing cloaked ships, and made all non-player cloaked ships not show up on radar.
    Added a cloaking device. Have not yet written the AI strategy for when to engage it, though.
    Fixed a bug where if you captured and sold an NPC, it would continue to follow you as a free escort until the mission ended.
    Added some new Free Worlds missions, and fixed a few issues I found while developing them.
    Modified stellar objects so that the object at the center of a system rotates from one day to the next at the speed given as its orbital time, rather than staying always at the same orientation.
    Made several improvements to NPCs: an "uninterested" personality that does not follow the player's flagship, and improved handling of carriers. Also modified the outfit scanner to also tell you what fighters a ship is carrying.
    Fixed the handling of NPC fighters and drones, so they will be saved even if contained within another ship rather than launched.
    Fixed a few more bugs I found while beginning work on the Free Worlds story line.
    Fixed a few glitches I found while testing the "illegal cargo" modifications.
    Added a "Preferences" class to parse the preferences file, and made the load display and auto-aim controlled by preferences. Also added an auto-fire AI option.
    Spell-checked the comments.
    Added support for game events modifying the composition of fleets.
    Began adding support for "Game Events" that alter the galaxy at a certain point in time. (So far all they do is modify condition flags, to test that they are indeed triggering on the proper day.)
    Fixed a few glitches in the handling of wormholes.
    Implemented wormholes. (Any planet that shows up in multiple systems is a wormhole.)
    Added a sound for the jump drive.
    Made the "pirate raid" on players with lots of freighters more powerful, and added a personality type for attacking only the player's ships.
    Got "security levels" specified for each planet. So far the only crime you can be caught committing is having an unlicensed ship.
    Modified hyperspacing so that escorts keep the same position they have relative to their parent unless the distance is higher than 1000 pixels.
    Implemented mission "clearance" for planets you can't otherwise land on. Also added "<mission>: active" condition flags.
    Added support for NPCs "entering" or "staying" in a system, and added a sample "pirate attack" mission (currently always offered).
    Got NPC support working. I've tested NPCs you must "save" or "kill", but a few kinks are left to work out (like having NPCs start at a different location than yours).
    Switched to the "hostile" red color for planets you cannot land on, because yellow looks too much like the white for stars.
    Fixed a few places where the proper color wasn't being used for "unfriendly" planets.
    Modified missions to not randomly be placed on planets you do not have permission to land on.
    Planets no longer allow you to land if you have a negative reputation with their government.
    Made it possible to request assistance from friendly ships and have them repair or refuel you.
    Added a "hailing" panel, which displays communications with a ship or planet. (But, I have not implemented the actual messages yet.)
    Fixed a few quirks in the "hails" from other ships.
    Added occasional "hail" messages that other ships send to you, with some sort of "flavor" text that gives you a sense of what their government is like.
    Modified the AI to have it scan any other ships in system, if the ship has a scanner equipped. If one of the player's ships is scanned, a message is displayed.
    Friendly ships now ask you for help if they are under attack by an enemy of yours and thank you if you respond by attacking that enemy.
    Show hyperspace target in preference to planet if you are setting up for a jump.
    Fixed a potential crash if a mission involving both cargo and passengers fails (it would get canceled twice).
    Fixed a few glitches, including a segfault when clicking the "new pilot" button.
    Fixed a compiler warning in the "pirate raid" code, and the empty messages getting displayed from Player::IncrementDate().
    Got audio working on Mac OS X (by just writing my own basic WAV reader, rather than trying to get ALUT working).
    Fixing a few glitches I found while playtesting.
    Got basic audio support working. I do need to track down better sounds, or at least balance the audio levels better between them.
    Added a help message when a new pilot is just starting out telling them what keys to use for landing or hyperspace.
    Got permanent reputation changes working, with Ship::TakeDamage now returning a combination of PROVOKE, DISABLE, and DESTROY depending on the projectile's effect.
    Switched to having the AI track which ships have boarded which, so Ship doesn't have to (since only AI cared about knowing that, anyways).
    Switched Engine to using the new ShipEvent class to report when a ship is boarded.
    Added a Politics class that can handle governments coming to the aid of allies, tracking the player's reputation in response to different actions, etc.
    Added pirate "raiders" whose frequency depends on how many freighters are in the player's fleet.
    Updated the UI to use the same three "named" colors everywhere for three different levels of text brightness, for consistency.
    Added two new classes, Format (for formatting numbers) and Table (for formatting tables).
    Added deferred loading of the landscape images, which reduces the startup time and also reduces the initial memory usage from about 380 MB to 150 MB.
    Modified the AI to only respond to key down transitions if the game is not paused to show a dialog panel.
    Added a display of the current status of all your escorts (shields, hull, heat, energy, fuel).
    Added Player::GetGovernment() so its name doesn't have to be hard-coded in many separate classes.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Added a Random::Real() function, and refactored to use Random everywhere (because old-fashioned rand() is considered deprecated now.)
    Refactored to consistently call the PlayerInfo, "player", and the player's flagship, "flagship".
    Fixed a race condition that was causing jittery frame rates and misaligned target crosshairs.
    Added a message that gets displayed if your ship overheats.
    Added a "Messages" class to allow any thread to safely add a message to the display.
    refactoring: for clarity, replaced Ship::IsDisabled() and IsFullyDisabled() with IsOverheated() and IsDisabled().
    Added support for target ship outlines to be colored based on friendly / hostile status.
    Added a "boarding" dialog that lets you choose what commodities or equipment to plunder from a disabled ship. (Capture is not yet implemented.)
    Added a rudimentary ship-boarding AI.
    Added a CargoHold class to handle everything pertaining to cargo (including determining when you have the capacity for it).
    Added a "flamethrower" weapon, as a test of weapons using fuel as ammunition.
    Added individual "fleet" descriptions for each system, so that the local ships vary depending on where in the galaxy you are and how populous the system is.
    Fixed some missing #includes.
    Added random ships occupying a system when you first enter it. Also disabled refueling on uninhabited planets (i.e. no spaceport).
    Added a distinction between "fully disabled" ships (hull below the minimum), and others (i.e. temporarily disabled due to overheating). Modified the AI to ignore fully disabled ships.
    Modified provocation to fade over time, e.g. if you accidentally shot an allied ship but then don't fire on them again, eventually they will "cool down" and stop attacking you.
    Switched to storing cargo in PlayerInfo when landed, then divvying it up among your ships when taking off. This makes it possible to use the cargo capacity of all your ships, and avoids needing to sell cargo when selling ships.
    Added several new options for the fleets that can enter the system.
    Added the capability for ship explosions to damage and move nearby ships.
    Split up the fuel bar to show the number of jumps remaining.
    Added some occasional pirates, to spice things up.
    Modified effects (weapon impacts, etc.) to take the target's velocity into account so they still look correct if the target is moving.
    Fixed a few bugs in the orbit display in the map view.
    Added a "flash" when entering hyperspace. Also increased the minimum speed for engaging the hyperdrive, so it will be easier to slow down to that speed.
    Added a "Fleet" class, representing a set of ships that might appear in a given system plus the logic for placing them (taking off from a planet or entering via hyperspace).
    Switched to always using the Color class instead of passing around RGBA float arrays.
    Fixed a few final issues in the load / save / new mechanics. It all seems to be working correctly, now.
    Added GPL statements to all source code files and added a license.txt file.
    Got "New Pilot" working, including visiting the shipyard and picking out an initial ship.
    Added a "New Pilot" dialog (which doesn't yet move you straight to the shipyard, though).
    Added saving of the game (every time you leave a planet, or if you quit while on a planet).
    Updated how the UI panels are handled to allow the main menu to be called up regardless of what the game state is.
    Got the code to build without warnings when -Wall is defined.
    Added display of the current pilot's information in the main menu.
    Switched to using the key mappings loaded from the preferences (so, they are user customizable).
    Mocked up the main menu interface (but it is not functional yet).
    Set the government for every system. Also updated the map panel to not show information or hyperspace routes for unvisited systems.
    Added another ship image.
    Switched to storing shared_ptrs to ships in PlayerInfo, so that if your ship is destroyed it can still remember where it was.
    Added a new ship, the Hawk.
    Added a secondary trigger key for weapons that use up ammo, and a display of ammo remaining for each.
    Updated the AI to fire each individual weapon on a ship only if it can hit something.
    Modified projectiles hitting ships or missiles to be handled by Engine, rather than by Ship or Projectile itself.
    Added a very rudimentary combat AI.
    Engine: updated so that any ship that is hit directly by a projectile is "provoked" against the ship that fired it (even if it was not previously an enemy).
    Fixed blast radii so that they also affect friendly ships, including the ship that fired the weapon in the first place.
    Uploaded all the files from my local repository to Google Code.
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Using float v. double in some cases of -Wdouble-promotion
    
     - Add some <algorithm> headers for uses of std::min or std::max
    Number formatting is now limited to one decimal place, which is enough for all current attributes. Also added a separate formatting function for numbers of credits.
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Enabled text replacements in ship hails (#3716). (#3728)
    
    * Enabled text replacements in ship hails (#3716).
    
    This change allows these text replacements to be used in ship hail strings:
    - <first>, <last>
    - <ship>
    - <system>
    - <npc>
    - <date>, <day>
    
    * Fixed variable name.
    More feedback in HailPanel (#3096)
    
    * Gray out the help button when the hailed ship is assisting you.
    
    * Inform that it is assisting the player in the initial hail.
    Truncate displayed ship names to prevent overflowing containers (#2631)
    
    * Apply truncation to the front of ship names if selling more than one
    
    Avoids awkward-looking line wraps caused by long ship names when coupled with list-style confirmation dialog.
    Refs #2249
    
    * Extend truncation to other appearances of ship names
    
    Adds front or end truncation to the following locations:
     - Hailing screen: no overflow off right edge for combinations of long ship names and/or long government names.
     - Targeting reticle: no overflow off left edge of ship name
     - Ship detail screen: no overlap of "ship:" and the ship name
     - Shipyard/Outfitter ship details screen: no/minimal overflow out of rounded square border
     - Player Info fleet list: no overflow of ship name across category
    
    Front truncation used where possible, to preserve possible identifying numbers on the tail of the ship name, e.g. the "1" in 'My Ship 1'
    
    * Remove all overlap from Shipyard/Outfitter shared panel
    
    * Font::TruncateMiddle
    
    Allow truncation of strings from the middle out. No special handling to cut in "pretty" locations to do things such as prefer whole-word removal, 2nd-letter starting, etc.
    Changes in border characters from "..." to alphanumerics, plus the slightly reduced width precision of TruncateMiddle vs Truncate(Front) made adjusting some targeted widths necessary.
    Removed an unnecessary check
    Address corner case when hailing hostiles.
    
    If the selected hostile ship is disabled, and the player flagship needs fuel/repairs, the "assistance" hail panel would be shown instead of a hostile hail.
    Also adds a comment regarding the default hail messages.
    friendlyDisabledHail
    Added facility for a hostile disabled hail
    
    Each government can define a "hostile disabled hail" like a "friendly
    hail" or "hostile hail". If one if missing, the game will default the
    "hostile disabled" phrases, i.e., Shakespearean insults.
    Fixed the wrong message being shown if you ask for help from a disabled ship.
    Made it possible to specify a ship's "noun," so the game can refer to it as a "creature" instead of a "ship." Also added an "inscrutable" attribute that makes it impossible for you to scan a ship's outfits.
    The hail panel now properly displays a ship's turret sprites.
    Made it so fighters and drones can't repair or refuel other ships (and will tell you so if you ask them to help you).
    Added a "mute" personality marking ships that never say anything in response to a hail.
    Free Dominated Planet
    Updated the "interface" syntax to allow buttons to change color on hover and to simplify the syntax.
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    Added a missing #include for Windows builds.
    Support for very large bribes, just in case it ever becomes relevant.
    fix overflow of fleet cost in bribe panel (#1347)
    
    the actual bribe calc/value should be fine as int for now as you'd need a fleet cost of 10T to overflow the result
    Added a common base class for Ships, Projectiles, Asteroids, Effects, Flotsam, StellarObjects, etc. This is the first step in creating a generic collision detection framework that can deal with different object types.
    Fighters can now assist ships other than their motherships. Also, surveillance ships now tell you they don't have time to help instead of promising to help and doing nothing.
    reverted bribe null-check, a crash due to it is better than silently being wrong
    nullptr checks
    fixed being able to repeat bribe payments
    Allow planets to have a government defined.
    
    Still uses the system's government as the default value for planets that
    do not define "government", which is still all of them (and should
    continue to be almost all of them in the future).
    A species can now be marked as speaking a different, possibly unknown language.
    Typo fix.
    disable conversations with rocks (and derelict ships)
    Disabled enemies will now insult you instead of demanding bribes from you.
    Added function to return a "noun" for a "planet" object, by default this is the word "planet," but can be either "station" or "moon" if the attributes include one of those two terms.
    Fixed some more bugs that can occur when the first ship in your list is unsuitable to be your flagship.
    Switched the Escape key to closing dialogs, like people expect it to, instead of always going to the main menu.
    Modified the hail panel so disabled ships will not offer to help you, and will instead ask for help if you are able to offer it.
    Added support for planetary domination. (But, it won't do anything until defense fleets have been set for each planet.)
    Added support for unique "persons" who can show up in any system.
    Fixed a bug where paying a bribe could result in the player having negative credits remaining.
    Added Control+W (or Command+W on the Mac) as a universal shortcut for "close current window."
    Switched to having ships with no fuel at all say, "sorry, I have no fuel" if you ask them to refuel you. THis makes more sense than the previous message.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Removed some TODOs that have already been fixed.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Modified the surveillance personality behavior so that it is willing to assist the player if asked.
    Added a help message explaining what to do if you get disabled. Also made it so a ship you just bribed will refuse to repair you immediately after that.
    Removed superfluous std:: prefixes.
    Reordering the functions in PlayerInfo and Ship and renaming some of the poorly named ones.
    Code cleanup: always referring to the player's ship as "flagship."
    Minor changes to support running the clang static analyzer on the code.
    Switched to having the hail messages be a property of each government rather than individual ships or fleets (so that mission-related ships will use them, too, to add a bit of flavor in battles).
    Small fixes I found during testing.
    Added convenience functions to Planet and Government to simplify the syntax for querying political state. Also fixed a few busgs in my recent Command and AI changes.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Added a new "infiltrating" mission mode where you can land on a planet, but cannot access any services there or refuel your ship.
    Added a "surveillance" personality type that flies around scanning whatever objects its sensors can scan, and that also launches drones and then leaves them behind in the system to do their own reconaissance.
    Modified the mission's "cearance" tag to allow specifying a location filter, same as the "source" and "destination" tags.
    Implemented mission "clearance" for planets you can't otherwise land on. Also added "<mission>: active" condition flags.
    Switched System::GetGovernment() to returning a pointer instead of a reference, to match how I refer to GameData objects everywhere else.
    Modified missions to not randomly be placed on planets you do not have permission to land on.
    Planets no longer allow you to land if you have a negative reputation with their government.
    Made it possible to request assistance from friendly ships and have them repair or refuel you.
    Made it possible to bribe hostile ships to leave you alone. More principled captains will refuse your money, however.
    Added a "hailing" panel, which displays communications with a ship or planet. (But, I have not implemented the actual messages yet.)
    feat: Added new outfitter help dialogs describing purchasing outfits into cargo (#5126)
    Made it so the "install" keyboard shortcut in the outfitter will only take outfits from cargo.
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    In the shops, made it so when you hover the buy or sell button, the ships that the buy or sell will apply to are highlighted.
    Fixed the outfitter's auto-scroll when toggling outfits for sale or in cargo via the "key" buttons. Aslo reverted the behavior for click-and-drag scrolling so it won't clear the current selection.
    Adding "override" in two places where it was missing. (@Isaacssv552)
    The "flight checks" now show up as warning icons and only block you if you try to take off with an unusable ship.
    Press R or U in Outfitter to uninstall selected outfit directly to cargo. (#2806)
    
    * Add 'Remove Outfit' shortcut to Outfitter shops
    
    Pressing 'r' will remove the selected outfit into your cargo hold if there is sufficient room.
    Excess ammunition that needed to be removed but cannot fit in the remaining space will be sold.
    
    * Remove -> Uninstall
    
    * Refactor common code, fix logic errors
    
     - Moved code for selecting the ships that will gain/lose the selected outfit from those that are already selected into a separate function.
     - When calculating if the cargo space for ammo exists in CanUninstall, use a copy of the ship's attributes to obtain the exact amount
     - Since b5ecaaec1afc66da8f9c7d430686c73efcd77d94 removed the ability of an outfit to reduce energy generation below zero, rephrased now-invalid explanatory comment.
     - Fix some logic errors in CanUninstall's return paths.
    
    * Replace while loop with exact quantity transfer
    
    * Replace *Uninstall() functions with *Sell(true)
    
     - Add boolean argument to *Sell functions to specify if the outfit is to be moved into cargo space. Default behavior is to sell to Outfitter
     - Uninstall / remove actions transfer the selected outfit (+ammo) into the player's cargo hold, if it has capacity. Any that cannot be held in cargo are sold.
    
    * Additional cleanup
    In the outfitter, you can now toggle whether outfits you do not own are shown, and whether you're buying and selling cargo or ship outfits.
    Fixed some things that Google's cpplint warns about (mostly, constructors that should be marked explicit).
    Fixed some variables that don't need to be mutable now that Panel::Draw() is not expected to be const.
    The sale price of ships and outfits now depreciates over time. If you sell "used" outfits to an outfitter, they remain in stock to buy back (at the reduced price) until you leave the planet.
    Categories in the shipyard and outfitter are now "collapsable."
    Optimized the shipyard and outfitter panel display code, so they won't spike the CPU.
    Added a helpful explanation message if you cannot sell an outfit, e.g. because it is a generator and you have shield regenerators installed that depend on it for energy.
    Fix warnings about member function overrides by adding override specifiers
    Added the ability to purchase ships in bulk.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Modified the outfitter panel to allow selecting multiple ships and outfitting them simultaneously.
    Modified hol the scrolling changes when you click an item in the shop panel, so that that item stays where it is (if possible).
    Added a feature to the outfitter where it can automatically refill all your ammo if you want.
    For each possible reason that you cannot buy a ship or outift, added an explanatory dialog that appears if you click "buy."
    Outfits that you sell (including all outfits of any ship that you sell) now remain available for purchase until you leave the planet. This makes it easy to transfer a jump drive to a new ship for example.
    Added help messages that pop up the first time you click on a certain panel (and the first time you end up stranded or dead).
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Fixed the outfitter's handling of maps and licenses so that "buy" is disabled if you have one, and so that the map shows up with a count of 1 if you have mapped the entire area it covers.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Added a new ShopPanel class that includes all the code that was shared between the Shipyard and Outfitter.
    Added a modifier to the outfitter to buy multiple copies of an outfit at once (if possible).
    Switched the outfitter to only selling outfits available on this planet or that you sold them. That required moving the flight check into the outfitter, so you don't sell your engines on a planet with none for you to buy.
    Added handling of scroll wheel events in the shipyard and outfitter panels.
    Got outfit buying and selling working.
    Added the outfitter UI. You can browse all outfits, but buying is not yet enabled.
    Added GPL statements to all source code files and added a license.txt file.
    Updated how the UI panels are handled to allow the main menu to be called up regardless of what the game state is.
    Uploaded all the files from my local repository to Google Code.
    Fixed some things that Google's cpplint warns about (mostly, constructors that should be marked explicit).
    0.9.2 updates
    Added backup saves in case the primary save is corrupted. New backups are saved only when the date changes.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Spell-checked the comments.
    Added a SavedGame class to be used in the load game panel rather than loading the full PlayerInfo for each game that is selected.
    Using float v. double in some cases of -Wdouble-promotion
    
     - Add some <algorithm> headers for uses of std::min or std::max
    Cleaning up a leftover debugging #include.
    Code cleanup: "static" is redundant inside a C++11 anonymous namespace.
    Made planet labels use the government color even for planets you can't land on.
    Made it so certain planets will only show up as something you can land on if your ship has certain attributes.
    Made it possible to zoom the view in or out (via the scroll wheel or the +/- keys) without changing the UI zoom.
    Adjusted the planet label fade-out so it depends on the planet radius.
    Made planet labels shift to a different side if they are hidden underneat another planet.
    Added support in ImageBuffer for loading multiple frames of an animation into one buffer.
    Truncate displayed ship names to prevent overflowing containers (#2631)
    
    * Apply truncation to the front of ship names if selling more than one
    
    Avoids awkward-looking line wraps caused by long ship names when coupled with list-style confirmation dialog.
    Refs #2249
    
    * Extend truncation to other appearances of ship names
    
    Adds front or end truncation to the following locations:
     - Hailing screen: no overflow off right edge for combinations of long ship names and/or long government names.
     - Targeting reticle: no overflow off left edge of ship name
     - Ship detail screen: no overlap of "ship:" and the ship name
     - Shipyard/Outfitter ship details screen: no/minimal overflow out of rounded square border
     - Player Info fleet list: no overflow of ship name across category
    
    Front truncation used where possible, to preserve possible identifying numbers on the tail of the ship name, e.g. the "1" in 'My Ship 1'
    
    * Remove all overlap from Shipyard/Outfitter shared panel
    
    * Font::TruncateMiddle
    
    Allow truncation of strings from the middle out. No special handling to cut in "pretty" locations to do things such as prefer whole-word removal, 2nd-letter starting, etc.
    Changes in border characters from "..." to alphanumerics, plus the slightly reduced width precision of TruncateMiddle vs Truncate(Front) made adjusting some targeted widths necessary.
    Fixed some things that Google's cpplint warns about (mostly, constructors that should be marked explicit).
    Strings in the load panel or dialogs that are too long are now truncated.
    Font: added support for truncating a string to fit in a given width (addin ellipses if necessary).
    Straight quotation marks are now replaced with curly ones when rendering text.
    Added "labels" for planets you can land on, which show up when you get near them.
    Optimized text drawing by caching the shader's variable indices.
    Made the keyboard shortcut underlines only display when you hold down Alt, to avoid cluttering the interface the rest of the time.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Made some changes to support Windows porting, assuming MinGW will be used to provide basic POSIX functionality.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Eliminated SDL_image in order to allow reading images in multiple threads simultaneously.
    Ported to Mac OS X.
    Switched to always using the Color class instead of passing around RGBA float arrays.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Made it possible for outfits to require licenses to buy them.
    The sale price of ships and outfits now depreciates over time. If you sell "used" outfits to an outfitter, they remain in stock to buy back (at the reduced price) until you leave the planet.
    ShipInfoDisplay no longer needs to know what system you are in (which used to control what licenses are required).
    Merged the common code from the two info display classes into one common base class.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added Republic "licenses" for each ship, and added a fine that is assessed if you are scanned by the Republic and are flying an unlicensed ship.
    Added a new ShopPanel class that includes all the code that was shared between the Shipyard and Outfitter.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    fix(mechanics): Use ship names when provided for a Person's fleet
    
     - the flagship of a Person's fleet will always take the name of the Person
     - if a Person has a fleet of ships, and any of the Person's escorts are named, they will now use that name
    
    There are still other issues with multi-ship Persons (such as all ships using the same set of hails), but that is not obviously incorrect to the casual observer.
    Fix erroneous warning about unrecognized attribute
    Added support for special "persons" with multiple ships. The "person" can regenerate all its ships unless you kill the flagship.
    Since special "persons" always enter via hyperlinks, don't spawn them in systems with no links.
    Special "Persons" now count as having been destroyed if they are captured, in addition to if they are destroyed outright.
    Added warning messages whenever a line of a data file or saved game is unrecognized.
    Added support for unique "persons" who can show up in any system.
    feat(graphics): Add comment with shader name (#4995)
    
    This makes it easier to debug compilation errors
    Add a preference to toggle the starfield
    
    #4537
    Using float v. double in some cases of -Wdouble-promotion
    
     - Add some <algorithm> headers for uses of std::min or std::max
    Tweaked the star field rendering to reduce the "sparkle" at low zoom levels.
    Code cleanup: "static" is redundant inside a C++11 anonymous namespace.
    Made it possible to specify the background haze image for each star system.
    Made it possible to zoom the view in or out (via the scroll wheel or the +/- keys) without changing the UI zoom.
    Fixed some things that Google's cpplint warns about (mostly, constructors that should be marked explicit).
    Replacing asserts with reasonable fall-back behavior.
    Changed how the star field "haze" is drawn so it can handle very large views.
    Added a common base class for Ships, Projectiles, Asteroids, Effects, Flotsam, StellarObjects, etc. This is the first step in creating a generic collision detection framework that can deal with different object types.
    0.9.2 updates
    Added a subtle "haze" effect in the background to make it look less flat and regular.
    Modified the new StarField code to compile on OS X.
    Switched to a much more efficient way of drawing the star field.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    The program now auto-detects the proper GLSL version number so it does not have to be set via conditional flags for each OS.
    Added a Random::Real() function, and refactored to use Random everywhere (because old-fashioned rand() is considered deprecated now.)
    Had to roll back to OpenGL version 3.0 instead of 3.3 on Linux, but left the Mac port at 3.3.
    Ported to Mac OS X.
    Added GPL statements to all source code files and added a license.txt file.
    Got the code to build without warnings when -Wall is defined.
    Uploaded all the files from my local repository to Google Code.
    feat(mechanics): Spaceport news can now be triggered based on the player's conditions (#5334)
    feat(content): Removed portrait images from spaceport news (#5187)
    
    Spaceport portraits of people were an experimental idea that has received generally negative feedback. See #4325 or the comments on #3389 after the news system was added.
    This PR removes the use of the portraits, but keeps the portrait mechanic in game, as we may find a use for it later that doesn't involve images of people, or plugins may still want to make use of the portraits of people.
    Remember the name used for a news portrait
    Added a "news" system for displaying messages from local inhabitants you meet in the spaceport.
    Fixed some things that Google's cpplint warns about (mostly, constructors that should be marked explicit).
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Modified the new mission implementation so that missions can also be offered as soon as you land (e.g. to handle continuation of existing missions), and used that to create a "first contact" conversation that is shown the first time you land on any Quarg world.
    Switched over to the new Mission implementation. There are still some aspects that are not working yet (like, the job board).
    Added GPL statements to all source code files and added a license.txt file.
    Updated how the UI panels are handled to allow the main menu to be called up regardless of what the game state is.
    Uploaded all the files from my local repository to Google Code.
    feat: If not carried, fighters and drones are launched instead of sold (#4388)
    
    Co-authored-by: tehhowch
    Enforce required attributes for in-flight spawns
    
    Otherwise, normally specified "system fleets" could take off from a planet even when they do not have the capability to land on it.
    Ships depart from their previously-specified planet (#4111)
    
    * Allow special ships to define a planet to depart from
    * Parked ships remember the planet they were parked on
       - As in `TakeOff` code, parked == disabled: no cargo transfer, and no need to recharge.
         (Parking can only be done when landed, so this will have already been done for any parked ships.)
       - When loading the player's save, only supply a planet for in-system ships that do not have one.
    
    * Only set a ship's planet if it doesn't have one
     - PlayerInfo::Land is called as a part of game startup
       - Ships unparked will not jump between in-system planets due to save reloading
    
    * Use Fleet::Place for generic in-space positioning
     - Remove effectively duplicated code from Engine
     - Any ship that is spawned in flight in the player's system is not over the reference planet unless it is taking off
    'outfitters' specifies possible carried outfits
    
    ... just as "commodities" specifies possible carried commodities.
    Rather than rewriting the same list of outfits multiple times for similar fleets, name an `outfitter` that has the desired possible outfit cargo.
    e.g.
    fleet "My Fleet"
      outfitters "Ammo South" "Ammo North"
    Added constructors that call Load() on a data element, so construction and Load() don't have to be done in two separate steps.
    Added support for special "persons" with multiple ships. The "person" can regenerate all its ships unless you kill the flagship.
    Added checks for references to undefined data (systems, outfits, etc.).
    Fixed some things that Google's cpplint warns about (mostly, constructors that should be marked explicit).
    Made it possible to limit what commodities a fleet can carry, and put limits on the Korath drone cargo.
    Cleaned up the Fleet class and fixed a bug where NPCs don't use fighter names.
    Added an error message if a fleet definition references an unknown ship name.
    Map pathfinding now prefers less "dangerous" systems if multiple routes exist with the same fuel cost and number of jumps.
    Added support for planetary domination. (But, it won't do anything until defense fleets have been set for each planet.)
    Moved all the source code files into a "source" folder to clean up the root folder.
    Switched to having the hail messages be a property of each government rather than individual ships or fleets (so that mission-related ships will use them, too, to add a bit of flavor in battles).
    Made some tweaks, in particular to make plundering pirates a little easier early on.
    Fixed the handling of NPC fighters and drones, so they will be saved even if contained within another ship rather than launched.
    Renamed "ShipName" to "Phrase" since it is also used for random hail messages.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Added support for game events modifying the composition of fleets.
    Added support for NPCs "entering" or "staying" in a system, and added a sample "pirate attack" mission (currently always offered).
    Added occasional "hail" messages that other ships send to you, with some sort of "flavor" text that gives you a sense of what their government is like.
    Took out some unneeded references to GameData in the headers.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Got fighters in fleets working.
    Added a "personality" class representing whether a fleet of ships does things like plundering opponents (which pirates now do).
    Added random ships occupying a system when you first enter it. Also disabled refueling on uninhabited planets (i.e. no spaceport).
    Modified Fleet to fill each newly created ship with random cargo. Also got the ship scanner working so I can test that the cargo is really there.
    Added a "Fleet" class, representing a set of ships that might appear in a given system plus the logic for placing them (taking off from a planet or entering via hyperspace).
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    Fixed minor code style issues (#4428)
    Number formatting is now limited to one decimal place, which is enough for all current attributes. Also added a separate formatting function for numbers of credits.
    Removed some superfluous namespace qualifiers.
    0.9.2 updates
    Added backup saves in case the primary save is corrupted. New backups are saved only when the date changes.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added a SavedGame class to be used in the load game panel rather than loading the full PlayerInfo for each game that is selected.
    Apply all feedbacks.
    Support data files encoded by UTF-8.
    feat: Print line numbers in DataNode traces
    
    DataNode stack traces are not always unique (e.g. Phrase definitions), so additional information may be helpful.
    Enable save-aware data parsing without modifying the save
    
    https://github.com/endless-sky/endless-sky/pull/3994
    
    * Allow parsing game data for content errors
    
     - Specify the `-p` or `--parse-save` command-line option to load the most recent save and allow the game to perform reference-checking.
     This option exits before initializing SDL (e.g. headless operation), and does not save the file before exiting.
     - Updated the man page and help text as well
    
    * Include whitespace warnings in DataFile::Load
    
     - Print warnings to stderr and errors.txt when spaces and tabs are mixed
     - Provides a warning if a line starts with a space, and then tabs are later used in the file for indenting
     - Provides a line-specific warning if spaces and tabs are intermixed on the same line.
     - Fix existing mixed whitespace indentation
    
    * Extend CI tooling with data parsing test
    
     - add bash script for Travis CI
     - add PS script for AppVeyor CI
    
    The scripts invoke the new `-p` command-line flag and test whether the `errors.txt` file was created.
    If so, this is taken to mean that a parsing error occurred. The scripts can be executed locally by passing the appropriate executable as the argument to the script.
    
    * Add OSX build environment
    
     - Homebrew installations of the developer dependencies (per the developer readme).
       (This will eventually result in a broken build when a core dependency publishes a new point release, at which point the XCode project will need to be updated.)
    
    * Avoid automatically saving upon game load
    
     - Closes https://github.com/endless-sky/endless-sky/issues/3510
     - Only allow saving after the player has explicitly "entered" their savegame
       Players explicitly 'enter' their savegame via the keypress / button:
       - 'Enter Ship' (after first launching the game)
       - 'Load Game' (after pressing Load/Save and then selecting a different save)
    
    In other words, if you tell the game, "Yes, this is the save I want to play," its save file will be updated when you close the game.
    If you didn't explicitly tell the game that, then the save file will not be modified.
    DataNode::PrintTrace() now prints the full trace even in copied nodes, and prints the file name if called on a child node of a DataFile.
    More updates to the code comments.
    Fixed a possible bug in the handling of empty files.
    Added error reporting for unmatched quotation marks.
    Extended the error reporting to also handle nodes that can contain arbitrary condition expressions.
    Added support for printing a "trace" of a faulty DataNode.
    Moved all file IO into the Files class, so it will be easy to add support for UTF16 paths under Windows.
    Added a fix for buggy libraries where constructing a string from an empty iterator range causes trouble.
    Fixed two missing close-quotes, and also switched to reading data files in binary mode in case line ending translation on Windows is messing things up.
    Fixed a bug where DataFile could segfault if asked to open a non-existent file.
    Did some optimizing of the file parsing code, so that startup will not bog down as the game data grows in size.
    Got rid of the "raw" string in DataNode, since it is never used.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added the capability for DataFile tokens to be quoted with backticks, so that regular quotation marks can be included within the strings.
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Added GPL statements to all source code files and added a license.txt file.
    Got the code to build without warnings when -Wall is defined.
    Uploaded all the files from my local repository to Google Code.
    Remove some -Wuseless-cast warnings
    More updates to the code comments.
    Made mission pointers blink for missions with deadlines, to draw your attention to them as a priority.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Made all of Date's comparison operators explicitly defined to avoid bugs in the implicit ones.
    Modified Date to use a custom implementation, using days since epoch instead of seconds since epoch, in order to avoid fractional days and to work on systems where time_t is only 32 bits.
    Fixed some uninitialized variable warnings in Date compiled with MinGW.
    Added a Code::Blocks project for building the code on Windows (and made a few changes to support it).
    Added an operator to Date to check if it has been set to a valid value.
    Finished up the intro missions for all three ship types. Also fixed a few bugs I found in the process, and added some new text substitutions.
    Implemented mission deadlines, and added various cargo missions (normal, bulk, and rush).
    Fixed a few small bugs for handling the new mission implementation.
    Made some small changes to support the new mission model, including having the "complete" MissionAction set the payment substitution string, and adding an operator+ to Date for setting deadlines.
    Added a default constructor to Date.
    Added GPL statements to all source code files and added a license.txt file.
    Added saving of the game (every time you leave a planet, or if you quit while on a planet).
    Got the code to build without warnings when -Wall is defined.
    Uploaded all the files from my local repository to Google Code.
    Fixed some more bugs that can occur when the first ship in your list is unsuitable to be your flagship.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added support for mission actions to be performed when you enter a system (showing a dialog or conversation, setting flags, etc.).
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Got permanent reputation changes working, with Ship::TakeDamage now returning a combination of PROVOKE, DISABLE, and DESTROY depending on the projectile's effect.
    Switched Engine to using the new ShipEvent class to report when a ship is boarded.
    Added a Politics class that can handle governments coming to the aid of allies, tracking the player's reputation in response to different actions, etc.
    Minor spelling fixes (#4504)
    
    Fixes minor spelling error in datafile and in comment.
    Typo on data/hails.txt was reported by Hyugat on discord in endless-sky-chat.
    Increase warning visibility on Windows systems
    
     - Windows console / stderr / stdout output is hampered for GUI applications
     - Replace usage of cerr for logging errors with Files::LogError, which
       will echo to cerr and also to a file.
    Switched to using the new ImageSet class for batch-loading of sprites. (But still with each frame going into separate textures.)
    Added functions for bulk-uploading sprites. (But, they're not in use yet.)
    Added an ImageSet class, which will store all data that must be loaded for a given sprite and all functions for parsing sprite paths.
    Removing some unnecessary std:: prefixes.
    Switched to using 2D "texture arrays" for sprites, so all the frames fit into a single texture.
    Switched to using the new ImageSet class for batch-loading of sprites. (But still with each frame going into separate textures.)
    Added functions for bulk-uploading sprites. (But, they're not in use yet.)
    When min() or max() takes mismatching types as inputs, where possible, switched to specifying the output type directly rather than casting both inputs to match.
    Made it possible to zoom the view in or out (via the scroll wheel or the +/- keys) without changing the UI zoom.
    Sprites now store their own names (so the animation referring to the sprite does not have to).
    Merge remote-tracking branch 'endless-sky/master' into HaiOutfitRebalance
    
    # Conflicts:
    #       data/hai ships.txt
    For users with only 256 MB of VRAM, added a "Reduce large graphics" option which shrinks very large sprites to take up only 1/4 as much memory.
    Switched to only storing 20 landscapes in memory at once, to avoid using huge amounts of RAM. (With the high-DPI textures, this cuts the maximum memory use down from 1.5 GB to 450 MB.)
    Added support for "@2x" image files to supply double-resolution graphics.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Made some changes to support Windows porting, assuming MinGW will be used to provide basic POSIX functionality.
    Eliminated SDL_image in order to allow reading images in multiple threads simultaneously.
    Had to roll back to OpenGL version 3.0 instead of 3.3 on Linux, but left the Mac port at 3.3.
    Ported to Mac OS X.
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Added some helpful extra location functions to Sprite and Screen (e.g. TopLeft()).
    Added GPL statements to all source code files and added a license.txt file.
    Switched to using boost::filesystem instead of Unix filesystem commands, for cross-platform compatibility.
    Got the code to build without warnings when -Wall is defined.
    Uploaded all the files from my local repository to Google Code.
    Reorder some includes to match style (#4430)
    Made it possible for an engine flare or afterburner to be integrated in a ship chassis.
    Changed how the path to a sound is converted to a "name" (to handle sub-directories that are also named "sounds/"). Also added an error message that is logged if loading a .wav file fails.
    Moved the File wrapper from ImageBuffer into a separate class.
    Tweaked the audio left / right balance, and also fixed the bug where sounds in plugins do not override sounds in the main game data.
    Fixed some places where fclose() can be called on a null file pointer.
    Added some missing calls to fclose().
    Moved all file IO into the Files class, so it will be easy to add support for UTF16 paths under Windows.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Switched the Linux build away from using ALUT, since my hard-coded WAV reader is good enough for now.
    Got audio working on Mac OS X (by just writing my own basic WAV reader, rather than trying to get ALUT working).
    Got basic audio support working. I do need to track down better sounds, or at least balance the audio levels better between them.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    feat(mechanics): Added two new NPC mission objectives to capture or provoke an NPC (#5414)
    feat(mechanics): Allow mission NPCs to spawn or despawn based off of ConditionSets (#5161)
    feat(government): Allow customization of the government's displayed name (#4768)
    
    * Support an optional "display name" key for Governments
     - Allow setting a customized display name for a government, rather always displaying the name used to define the government
    
    * Set the display name for existing pseudo-governments
    Add nullptr check for 87981a4
    check carried ship's parent system in NPC::HasSucceeded
    
    refs: https://github.com/endless-sky/endless-sky/issues/4281
    Specify an initial planet for mission NPCs
    
    e.g.
    npc
        system "Sol"
        planet "Luna"
    Allow phrase-based randomized dialog (#4164)
    
    * Allow `MissionAction` dialog text randomization via the `Phrase` class. Traditional "directly specified" text is still supported.
    
    Supported syntax:
    ```
    dialog phrase <stock phrase name>
    
    dialog
        phrase
            {phrase specification...}
    ```
    e.g.
    ```
    dialog phrase "hostile disabled"
    
    dialog
        phrase
            word
                "Please excuse my dear "
            word
                "Aunt Sally"
                "Uncle Mark"
            word
                ` for saying, "`
            phrase
                "hostile disabled"
                "friendly disabled"
            word
                `" yesterday.`
    ```
    
    * Move `dialogText` parsing to `Dialog` static method
    
    * Allow `NPC` "completion" dialog text randomization using the same phrase-based syntax as `MissionAction` dialog
    
    * Use phrases to encapsulate generic/repeated dialog
    
    For similar messages, combined clauses to diversify the generated text.
    
    * Remove duplicated space
    
    * Typo fix ( @Pointedstick )
    NPC "completion" / MissionAction conversations can kill the player and/or NPC (#3376)
    
    * Call ConversationPanel with a pointer to the relevant ship
    
     - Allows destroying the pointed ship depending on the conversation outcome.
     - If the player is killed, the pointed ship should survive, and no BoardingPanel should be displayed.
     - Supply the ship from NPC::Do, to enable destroying the NPC via LAUNCH, DEPART, and FLEE conversation endings.
     - Include a boarding check to prevent an NPC block with a non-boarding completion requirement (e.g. `npc evade`) from displaying a BoardingPanel after the conversation ends.
    
    * Add response handling for non-"on offer" conversations
    
     - Updated PlayerInfo::BasicCallback:
       - attached it to:
         - all NPC completion conversations
           - If actually boarding the NPC, set it as the boarding ship.
       - The player is perhaps not landed: in-flight death implies:
         - capture of the flagship by the ship it was boarding (`die` when boarding)
         - crew mutiny and defection (`die` when not boarding)
         - the destruction of the ship. (`explode`)
     - Added the Conversation::EXPLODE response, based on the keyword `explode`
     - Updated the Ship::WasCaptured code to not over-transfer crew, for the case where the player dies to a conversation offered in-flight and has plenty of crew already.
    
    * Rework PlayerInfo::Die
    
     - Remove need for a private Die() method
     - Update callers of Die(bool) to use Die(int) and achieve the intended result
    
    * Eliminate need for BoardingShip()
    
     - Moved player death handling into ConversationPanel::Exit, where the relevant ship pointer is easily accessed
     - Added pointers to the ship responsible for the boarding mission / npc event into relevant Mission and MissionAction methods, to eliminate need for PlayerInfo::BoardingShip
    
    * Showing BoardingPanel requires a disabled-yet-not-destroyed ship
    
    * Add check for capture / bribery of a boarding ShipEvent's target via a mission NPC's completion conversation
    
     - A more robust method to only offer the BoardingPanel resulting from ConversationPanel::Exit (i.e. no display of sequential BoardingPanels, and obeying the conversation's exit node) should be pursued separately
    Move PickSystem, PickPlanet from Mission to LocationFilter
    
     - Support choosing a random system or planet from a given LocationFilter outside of just mission instantiation
    Added constructors that call Load() on a data element, so construction and Load() don't have to be done in two separate steps.
    Fixing a bug where FinishLoading() is called more than once if an NPC ship is copied from a stock ship.
    Allow non-player ships to emit ShipEvent::ASSIST when repairing ships
    
     - Also adds ShipEvent::BOARD and ShipEvent::ASSIST to the list of ShipEvents that only count toward NPC completion when performed by the player
    Ship Variant definitions can add attributes without needing to fully specify all other base attributes (#2959)
    
    * Ship variants can add individual attributes
    
    via the "add attributes" node. All base attributes can still be overridden by specifying the "attributes" node.
    
    * Store "add attributes" values in baseAttributes
    
    Ship::Save() only writes out baseAttributes.Attributes(), i.e. the values from "add attributes" were being lost when loading instantiated missions from a save file.
    
    * NPCs created from a partial node description use the desired name
    
    * Use same "add" key/value syntax as other classes
    
     - The only key currently supported is "attributes"
    
    * Revert key-value-valueIndex changes
    
    * Use supported ship specification method in Syndicate Target Practice
    
    * NPC::Load prints warning, skips invalid use of ship specification
    
     - individual ships should not be fully specified in a mission's NPC definition - only `ship "model/variant" "name"`, or use of custom fleets.
    
    * Fix typo and touch up warning message
    NPC "accompany" requires failIf value
    
     - With no 'failIf' value, a mission with NPCs that are listed as "accompany" will not fail if it becomes impossible to complete (e.g. one of the ships is destroyed)
     - With a 'failIf' value, the player is immediately shown the "Mission failed" message and the mission will be removed upon landing.
    Fix NPC HasSucceeded() to use only recorded ShipEvent information (#2859)
    
    * Fix NPC HasSucceeded() to use only recorded ShipEvent information
    
    NPC::Do calculates whether a given ShipEvent causes success or failure by comparing the value of HasSucceeded before and after recording the ShipEvent.
     - Previous implementation inherited knowledge about the ship's Disabled status from the ship itself, and not from the recorded information.
     This meant that `evade` missions could never determine that the incoming ShipEvent::DISABLE was the one that allowed for success criteria.
     - Learning of a new ShipEvent::ASSIST will appropriately remove a ship's known ShipEvent::DISABLE flag.
    
    * Derelict ships require a recorded assist event
    Simplifying NPC::HasFailed by cutting mustLiveFor
    NPC & Personality error reporting & fixes, for jobs & missions (#3000)
    
    * Add error output for NPC::Load to help content creators
    
    * Fix Pirate Job NPC definitions
    
     - `distance` is not a valid NPC node - it needs to be a child node of a `system` node.
     - More explicitly stagger the NPC arrival times
     - Replace `Bounty` with Pirate and `marked`.
     - Use `entering` with `system destination` when multiple NPCs that are not `staying` are started in the destination, to force one to arrive after the other.
    
    * Escort NPC fixes & updates
    
     - Fixed erroneous `distance` nodes when used directly under `npc`.
     - Removed unneeded `waiting` personality use (if an NPC is hostile to the planet, it will not take off from the planet).
     - Added non-default confusion values to Tiny, Small, and Medium escort opponents, to ease the player into combat, rather than immediately pit them against highly accurate, skilled Pirate pilots.
     - Escort mission pirates are now able to be distracted via cargo jettisoning.
     - The smallest "Escort to ..." missions phase out as the player becomes stronger.
     - High-value Marauder missions are now rarer.
     - The strongest Marauder mission will pursue the player beyond the boundary, as will the Marauder hunters
     - Ordered NPC definitions: npc -> gov -> personality -> location -> fleet(s).
    
    * Add error output for invalid Personality values
    
    * Missed offer changes
    NPC nodes accept numeric argument to create multiples of the same fleet
    If an NPC must be scanned, only count scans performed by the player.
    Fix new FinishLoading bug
    
    Appeared in ee9d339f: when multiple ships are present in an NPC specification, only the last one would get FinishLoading() called while instantiating the parent mission.
    Derelict ships are now able to repair, once you have boarded them to reactivate them.
    Added a helper function for the common task of splitting a string into paragraphs.
    Made a mission fail if it becomes impossible to complete
    
    If you need to board or scan a ship, and that ship is destroyed before
    you do so, the mission will now fail.
    Fixed a bug where capturing an NPC you're supposed to evade makes it momentarily "present" and thus re-triggers the completion dialog.
    Made it possible for NPCs to specify that they start in the mission's destination system.
    Capturing an NPC now counts as "evading" it.
    Added support for fighter bays where the fighter it is carrying is visible, drawn either below or above the ship.
    Fixed a few places where invisible missions could display messages when they "fail."
    Mission "stopovers" now fail if there is an NPC you must accompany and it is not present.
    Added brackets and indentation for every BeginChild()...EndChild() pair to improve the code readability (compared to indentation with no brackets, or no indentation at all).
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Fixed a bug where derelict NPCs were getting marked as destroyed when you reloaded the game.
    Made disabling a ship an acceptable way to "evade" it, and also made disabled ships not count as "accompanied" unless you repair them.
    Added some more side missions.
    Added the third and final set of Free Worlds intro missions, along with the "derelict" personality type to support them.
    Fixed a bug where if you captured and sold an NPC, it would continue to follow you as a free escort until the mission ended.
    Made several improvements to NPCs: an "uninterested" personality that does not follow the player's flagship, and improved handling of carriers. Also modified the outfit scanner to also tell you what fighters a ship is carrying.
    Fixed the handling of NPC fighters and drones, so they will be saved even if contained within another ship rather than launched.
    Added "evade" and "accompany" requirements for NPCs.
    Added support for NPCs "entering" or "staying" in a system, and added a sample "pirate attack" mission (currently always offered).
    Added support for missions altering your reputation. Also set the default government of NPCs to "Escort", because ships with no government may behave strangely.
    Got NPC support working. I've tested NPCs you must "save" or "kill", but a few kinks are left to work out (like having NPCs start at a different location than yours).
    Table: added a function to get the bounding rectangle of the current row.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Updated the bank panel to handle more than 8 line items (by combining some together into an "Other" line).
    Started updating the code to use the new Format and Table classes.
    Added two new classes, Format (for formatting numbers) and Table (for formatting tables).
    Add scrolling to MissionPanel job/mission panes (#4424)
    
    * Add some additional comments to MissionPanel
    
    * Add preliminary automatic scroll updating when handling keyboard input
    
    * Improve autoscroll behavior
    
    * Scroll the respective mission list when clicking names or systems
    
    * Draw mission lists before the map legend and selected system info
    so that a list overflowing the available area will always be "behind" other UI elements
    
    * Switch from paginated scrolling to "smart" scrolling
    i.e. scroll only the minimum necessary, and only when necessary.
    
    * Use a snap-to scroll instead of interpolated
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Show visited mission systems (#3567)
    
    * Expose Visited<T> for use by the map
    
     - Const set<T> references to Waypoints() & Stopovers()
    
    * Draw a "faint" ring around visited waypoints
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Fixed some things that Google's cpplint warns about (mostly, constructors that should be marked explicit).
    Made it so the map zoom level is remembered when you close the map. Also cleaned up some of the map code.
    Made Panel::Click() able to distinguish double-clicks, so that the info panel can switch to a ship only if it is double-clicked, not just clicked twice in a row.
    Fixed some variables that don't need to be mutable now that Panel::Draw() is not expected to be const.
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    Formatting and const-correctness fixes.
    Autoselect mission in selected system or along travel plan.
    Changed Panel::Drag and Panel::Scroll to take double dx/dy
    
    Fixes endless-sky/endless-sky#805
    Added support for "stopover" planets specified by a mission.
    Added a map key for the missions panel.
    Added scroll wheel support for the mission lists.
    Made it possible once more to accept jobs if you can make room for them by selling ordinary cargo or firing non-essential crew, but now it pops up a dialog asking if you want to do that rather than assuming you do and letting your cargo "capacity" go negative.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Added help messages that pop up the first time you click on a certain panel (and the first time you end up stranded or dead).
    Added a "find" dialog to the map panel (accessible by pressing "F").
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Got "invisible" missions working: being accepted automatically, and not showing up in any mission lists or displays.
    Switched over to the new Mission implementation. There are still some aspects that are not working yet (like, the job board).
    Added a way to toggle between the missions map and the system details map.
    Fixing a few glitches I found while playtesting.
    Added special missions to the map and the mission panel.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Fixed several glitches in the handling of missions (duplicates when reloading pilot, not moving passengers into your ship, allowing infinite passengers, formatting / display issues).
    Refactored MapPanel and MissionPanel to share the underlying code for drawing the map.
    Added support for passenger-carrying missions.
    Added a "mission panel" that lets you select missions from a job board. It doesn't support scrolling or mouse clicks, yet.
    Added a "DistanceMap" class that calculates routes and distances between stars, using either the hyperdrive or the jump drive.
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Added GPL statements to all source code files and added a license.txt file.
    Updated how the UI panels are handled to allow the main menu to be called up regardless of what the game state is.
    Added a "color" field for governments, and modified the map panel to allow coloring systems by government.
    Uploaded all the files from my local repository to Google Code.
    feat(enhancement): Created an on waypoint mission action (#5413)
    feat(mechanics): Aborting is now a separate mission trigger from failing (#5426)
    feat(mechanics): Allow mission NPCs to spawn or despawn based off of ConditionSets (#5161)
    fix: Illegal stealth missions can no longer be fined for multiple times (#4526)
    
    feat: Fines for illegal mission cargo are now added together instead of only the worst being applied.
    feat: You are now told about how many missions you failed for being scanned.
    style: Remove unexpected trailing whitespace
    
    The only trailing whitespace should be "continuation tabs"
    feat(ux): Limit pop-ups when multiple missions have "on visit" dialogs (#4592)
    
    * Have on visit dialogs be handled by PlayerInfo instead of by MissionAction so that players won't be swamped by on visit dialogs if they hoard jobs
    * Show separate dialogs for unique missions and remind the player of deadlines
    * Simplified code and changed GetActions() to GetAction(Trigger)
    * Changed the wording for the deadline reminder
    * Count missions even if they don't have an on visit dialog, but still only display a dialog if one of the counted missions has one
    * Simplified code.
    * Ignore invisible missions.
    * Don't care about deadlines. (The player should already know that information.)
    * Don't show extra dialog if you only have one on visit.
    * Changed the wording of the extra dialog to mention other unfinished missions, not the total.
    Restrict reparenting of mission-affiliated carried ships to the same missison (#4468)
    
    * Restrict reparenting of mission-affiliated carried ships to same-mission ships
    * Avoid nullptr dereference
     - Carried ships should properly inherit their parent's system, but on the off chance one doesn't, default it into the players system
    * Replace std::find_if with a Mission class method
     - explicitly declare the lambda captures for `reparentWith`
    * Log the issuance of a fallback system
    
    Fixes #4307
    Check if the picked boarding/assisting mission has space before offering
    
     - Use Mission::HasSpace(ship) rather than check in MainPanel::StepEvents
     - Update blocked mission handling to use the proper mission list
     - Use correct cargo / bunk numbers for "Blocked" messages if boarding
     - Set proper autoconditions when boarding
    NPC "completion" / MissionAction conversations can kill the player and/or NPC (#3376)
    
    * Call ConversationPanel with a pointer to the relevant ship
    
     - Allows destroying the pointed ship depending on the conversation outcome.
     - If the player is killed, the pointed ship should survive, and no BoardingPanel should be displayed.
     - Supply the ship from NPC::Do, to enable destroying the NPC via LAUNCH, DEPART, and FLEE conversation endings.
     - Include a boarding check to prevent an NPC block with a non-boarding completion requirement (e.g. `npc evade`) from displaying a BoardingPanel after the conversation ends.
    
    * Add response handling for non-"on offer" conversations
    
     - Updated PlayerInfo::BasicCallback:
       - attached it to:
         - all NPC completion conversations
           - If actually boarding the NPC, set it as the boarding ship.
       - The player is perhaps not landed: in-flight death implies:
         - capture of the flagship by the ship it was boarding (`die` when boarding)
         - crew mutiny and defection (`die` when not boarding)
         - the destruction of the ship. (`explode`)
     - Added the Conversation::EXPLODE response, based on the keyword `explode`
     - Updated the Ship::WasCaptured code to not over-transfer crew, for the case where the player dies to a conversation offered in-flight and has plenty of crew already.
    
    * Rework PlayerInfo::Die
    
     - Remove need for a private Die() method
     - Update callers of Die(bool) to use Die(int) and achieve the intended result
    
    * Eliminate need for BoardingShip()
    
     - Moved player death handling into ConversationPanel::Exit, where the relevant ship pointer is easily accessed
     - Added pointers to the ship responsible for the boarding mission / npc event into relevant Mission and MissionAction methods, to eliminate need for PlayerInfo::BoardingShip
    
    * Showing BoardingPanel requires a disabled-yet-not-destroyed ship
    
    * Add check for capture / bribery of a boarding ShipEvent's target via a mission NPC's completion conversation
    
     - A more robust method to only offer the BoardingPanel resulting from ConversationPanel::Exit (i.e. no display of sequential BoardingPanels, and obeying the conversation's exit node) should be pursued separately
    Show visited mission systems (#3567)
    
    * Expose Visited<T> for use by the map
    
     - Const set<T> references to Waypoints() & Stopovers()
    
    * Draw a "faint" ring around visited waypoints
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Move PickSystem, PickPlanet from Mission to LocationFilter
    
     - Support choosing a random system or planet from a given LocationFilter outside of just mission instantiation
    Added constructors that call Load() on a data element, so construction and Load() don't have to be done in two separate steps.
    Mission "on enter" can define a LocationFilter to pick the system(s) (#3141)
    
    * "on enter" actions can define a LocationFilter to pick the system
    
     - Example:
        on enter
          "system filter"
            government "Syndicate"
          dialog "You're now in Syndicate space!"
    
     - Without a system filter, any `on enter` actions that do not name a system will apply as soon as the player takes off (current behavior).
     - Each mission only supports a single `on enter` action without a named system (current behavior).
    
    * Use a function to convert a distance filter into a near filter
    
      - This avoids needing to save the mission origin in the MissionAction
      - Use of both "near <system>" and "distance" filters in the same `on enter` action is not supported - only the "near" filter will be kept.
      - Fixed an extra indentation level with the saved LocationFilter.
    
    * Forward compatibility for changes to LocationFilter class variables
    
    * Support multiple "generic" on enter MissionActions instead of only one
    
     - "specific" on enter: explicitly identifies the system
     - "generic" on enter: uses a LocationFilter to match a set of systems (offering in the first one that matches), or has no filter and offers immediately on launch
     - All "specific" on enter actions are checked before any "generic" on enter actions for a given system
     - Only one on enter action will be triggered per jump.
     - Each "generic" on enter is checked in the order of definition in the mission datafile
    
    * Update SetOrigin() usage
    
     - Reformat checks to avoid copying if nothing is to be done
     - Pass a system to MissionAction::Instantiate to guarantee a System * is available, even for assisting/boarding missions.
    
    * Use didEnter to track both generic and specific "on enter" actions
    Refactor PlayerInfo::Land (#3208)
    
    * Refactor on-land mission checks and fining into own functions
    
     - Mission updates based on landing are now in StepMissions()
     - Planets for which mission clearance has been given (or if infiltrating) will not fine the player
    
    * Track visited waypoints & stopovers
    
     - This enables remembering that a mission gave clearance to a particular planet
     - This enables remembering which systems needed to be visited for a mission
    
    * Remove deprecated government assignment in PlayerInfo::Load
    
     - ships.back()->SetGovernment was added to PlayerInfo::Load() in 0783cd49ea5204bab9f126723a61833d25c5118f
     - Ship::Load() sets the ship's government to be the player's government as of ef41ef02021bd43954ba25631922dae6c928a8a9
     - ApplyChanges() (called at the end of PlayerInfo::Load()) performs ship->SetGovernment for all the player's ships, in case the player's swizzle has been altered in an event
    
    * Use a better format for serializing visited stopovers and waypoints
    
    * Fix bug related to handling of the player's death
    
     - If killed due to an atrocity outfit while landed, the player's ship list needs to be cleared (otherwise the player can simply press 'D' and take off again).
    Made it so illegality and stealth is an attribute of the mission as a whole (applying to both cargo and passengers) rather than just an attribute of the cargo.
    enhancement: Visual feedback for outfit transfer missions while in-flight (#3075)
    
    * Remove deprecated declaration
    
     - 'SetDefaultPayment' was removed in f9d82bd3e1a3f0bbe0b5346a20f30bb09795393c
    
    * Provide visual feedback of ready-to-complete missions with gifts
    
     - Update the MapPanel::IsSatisfied function to use a new Mission::IsSatisfied function that checks whether or not the mission's requirements for completion are met.
     - Restore the "are required gifts in present ships cargo?" check, with guards that prevent counting cargo that is out-of-system (e.g. would not be present if the player landed immediately).
    
    * Simplify return expression
    Code cleanup: fixing some function parameters that have the wrong name in the header file.
    Revert "Made it so that all mission actions can display conversations or dialogs."
    
    This reverts commit 181603905497b28c403864258d4bd2935b0fba90.
    Made it so that all mission actions can display conversations or dialogs.
    Getting scanned can now optionally fail any mission with illegal cargo (#1584)
    
    * Getting scanned now fails any mission that has you carrying illegal cargo
    
    * Made the new "fail if scanned" behavior optional, triggered by a new "stealth" attribute you can set in a mission
    
    * Removed debugging code that sneaked into the last commit
    
    * Now the "illegal" mission attribute can include a string that will get displayed when you're scanned
    
    * Tweaked the standard fine message to be less verbose when overridden with a custom message
    
    * Write out the illegal cargo fine message correctly
    
    * Added a tab to the message so the illegal cargo messages don't all need to start with a tab in order to get the paragraphs formatted correctly
    Made it possible to use location filters to pick random waypoint systems.
    Fixed a crash when a "fail" action removed the next mission after it from the player's mission list.
    Fixed a bug when a conversation is shown in response to an "enter" event.
    Added support for "stopover" planets specified by a mission.
    It's now possible to specify deadlines in (base + multiplier * jumps) form.
    "Unique" missions now get added to the start of your mission list, instead of the end.
    Added the ability to flag missions as "minor," meaning they are only offered if no other missions are being offered. This is for "flavor" missions that have no impact on the plot, like the courier and transport missions.
    Added a "fail" keyword in mission actions that can be used to immediately fail the current mission or any other.
    Added a new mission type, "assisting," so that missions that appear when boarding a hostile ship can be distinguished from missions that appear when repairing a friendly one.
    Added basic support for random missions that get offered when you board a ship.
    Added an "autosave" mission option, that saves an "autosave" file when the mission is accepted. This flag should be set only for missions that are in the main story line and represent a "safe" place to revert to if the player gets stuck or fails a mission.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added a new capability for missions: a "blocked" message, which is displayed in a dialog if all other requirements are met but you do not have enough bunks or cargo space free to take on a special mission. Fixes #5.
    Added support for mission actions to be performed when you enter a system (showing a dialog or conversation, setting flags, etc.).
    Added a "priority" mission flag that blocks others from being offered if that one is available. (For example, to keep side missions from being offered while you are on the intro thread.)
    Added a new "infiltrating" mission mode where you can land on a planet, but cannot access any services there or refuel your ship.
    Added a "waypoint" mission tag that can be used to mark any number of systems that you must visit (but not requiring that you land on any planets in those systems).
    Added a "to fail" condition for missions. It specifies the conditions under which a mission will fail if active. Missions are not offered if they fail any of the "to fail" conditions, so those conditions need not be duplicated in "to offer".
    Added support for illegal cargo and outfit checks when you are scanned or when you land on a planet.
    Added an "on visit" mission action that is triggered when you reach the destination and the mission conditions are not satisfied.
    Modified the mission's "cearance" tag to allow specifying a location filter, same as the "source" and "destination" tags.
    Implemented mission "clearance" for planets you can't otherwise land on. Also added "<mission>: active" condition flags.
    Started working on intro missions, and also fixed the handling of "defer" and of the special ship type flags.
    Got planetary defense missions working (three different templates for the Core, North, and South).
    Got NPC support working. I've tested NPCs you must "save" or "kill", but a few kinks are left to work out (like having NPCs start at a different location than yours).
    Implemented mission deadlines, and added various cargo missions (normal, bulk, and rush).
    Modified the new mission implementation so that missions can also be offered as soon as you land (e.g. to handle continuation of existing missions), and used that to create a "first contact" conversation that is shown the first time you land on any Quarg world.
    Switched over to the new Mission implementation. There are still some aspects that are not working yet (like, the job board).
    Added a "probability" for special missions, so they are not always offered.
    Added tracking of "condition" flags that missions can use to determine whether their requirements are satisfied. Used those flags to ensure that each mission is only offered once. (Eventually, there may be some that are allowed to repeat, though).
    Added support for basic "special missions," offered in the Spaceport on certain planets.
    Updated all the functions that save data to use the new DataWriter class (to ensure proper indentation, quoting, etc.).
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Got CargoHold to support mission-specific cargo.
    Added a "mission panel" that lets you select missions from a job board. It doesn't support scrolling or mouse clicks, yet.
    Added a basic Mission class, with functions to generate cargo and passenger missions.
    fix(graphics): Avoid velocity-based "sliding" of Visuals
    
    Ref 8a13777ad8ca580e34e01e8129ba61232fcaafbf
    
     - Only projectiles are drawn with a + .5*velocity shift
       - This should be removed in the future pending custom Sprite drawing positions
     - Remove unused DrawList method
     - Avoid creating afterburner visuals based on non-final Ship::velocity value
    
    Closes endless-sky#4261
    refactor: Remove copies identified by OSX CI build
    Fixed minor code style issues (#4428)
    Using float v. double in some cases of -Wdouble-promotion
    
     - Add some <algorithm> headers for uses of std::min or std::max
    Batching the draw commands for projectiles and effects.
    Fixed minor code style issues (#4428)
    Moving the check for negative crew attack and defense to where the values are loaded, since they're loaded once but queried many times.
    Allow modders to override default crew attack/defense values per government (#2708)
    
    * Allow modders to override default crew attack/defense values per government (#40)
    
    * Resolve a type mismatch (#41)
    
    * Move government definition (#42)
    
    * Resolve some style issues (#43)
    
    * Do not allow attack/defense values to be negative (#46)
    Fixed some missing #includes and one unnecessary check that would mess up other compilers.
    Continuing code cleanup and commenting.
    Modified the boarding panel to only offer to let you capture a fighter or drone if a ship in your fleet has a bay free for it.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Changing spaces to tabs.
    If you have more weapons than crew, use the most powerful ones.
    Added some new Free Worlds missions, and fixed a few issues I found while developing them.
    Got capturing working, at least for your flagship. Other ships can't capture other ships yet.
    Added calculation of capture odds and casualties to the boarding dialog.
    Batching the draw commands for projectiles and effects.
    Switched to using 2D "texture arrays" for sprites, so all the frames fit into a single texture.
    Made it so if a ship's sprite is animated, so is the target and flagship outline for it.
    The target outline will now rotate to represent what direction the target is facing in.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added support for target ship outlines to be colored based on friendly / hostile status.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    NPC "completion" / MissionAction conversations can kill the player and/or NPC (#3376)
    
    * Call ConversationPanel with a pointer to the relevant ship
    
     - Allows destroying the pointed ship depending on the conversation outcome.
     - If the player is killed, the pointed ship should survive, and no BoardingPanel should be displayed.
     - Supply the ship from NPC::Do, to enable destroying the NPC via LAUNCH, DEPART, and FLEE conversation endings.
     - Include a boarding check to prevent an NPC block with a non-boarding completion requirement (e.g. `npc evade`) from displaying a BoardingPanel after the conversation ends.
    
    * Add response handling for non-"on offer" conversations
    
     - Updated PlayerInfo::BasicCallback:
       - attached it to:
         - all NPC completion conversations
           - If actually boarding the NPC, set it as the boarding ship.
       - The player is perhaps not landed: in-flight death implies:
         - capture of the flagship by the ship it was boarding (`die` when boarding)
         - crew mutiny and defection (`die` when not boarding)
         - the destruction of the ship. (`explode`)
     - Added the Conversation::EXPLODE response, based on the keyword `explode`
     - Updated the Ship::WasCaptured code to not over-transfer crew, for the case where the player dies to a conversation offered in-flight and has plenty of crew already.
    
    * Rework PlayerInfo::Die
    
     - Remove need for a private Die() method
     - Update callers of Die(bool) to use Die(int) and achieve the intended result
    
    * Eliminate need for BoardingShip()
    
     - Moved player death handling into ConversationPanel::Exit, where the relevant ship pointer is easily accessed
     - Added pointers to the ship responsible for the boarding mission / npc event into relevant Mission and MissionAction methods, to eliminate need for PlayerInfo::BoardingShip
    
    * Showing BoardingPanel requires a disabled-yet-not-destroyed ship
    
    * Add check for capture / bribery of a boarding ShipEvent's target via a mission NPC's completion conversation
    
     - A more robust method to only offer the BoardingPanel resulting from ConversationPanel::Exit (i.e. no display of sequential BoardingPanels, and obeying the conversation's exit node) should be pursued separately
    Implement a ShipEvent queue to allow delayed ShipEvent handling (#3371)
    
    * Implement a ShipEvent queue to allow delayed ShipEvent handling
    
     - Handling ShipEvents can result in new UI elements.
     - Only one UI element should be created and displayed to the player at a time (i.e. do not display a dialog and the BoardingPanel simultaneously).
     - Callbacks from one UI element from a given ShipEvent may result in status changes that should influence other UI elements created from the same ShipEvent (e.g. if a mission conversation offered upon boarding an NPC results in that NPC's destruction, the player should not be able to plunder said NPC).
     - Fixes a preexisting issue where the boarding panel would be offered if the player dies in a conversation.
    
    * Switch from GetUI()->IsTop(this) to GetUI()->Top().get() == this
    
     - IsTop() checks only drawn panels, not panels that are requested but not yet drawn.
    When min() or max() takes mismatching types as inputs, where possible, switched to specifying the output type directly rather than casting both inputs to match.
    Revert "Made it so that all mission actions can display conversations or dialogs."
    
    This reverts commit 181603905497b28c403864258d4bd2935b0fba90.
    Fixed some things that Google's cpplint warns about (mostly, constructors that should be marked explicit).
    Made it so that all mission actions can display conversations or dialogs.
    Fixed some variables that don't need to be mutable now that Panel::Draw() is not expected to be const.
    Switched over to the new, cleaner clickable zone syntax in a few places where it was easy to do so.
    Added the ship name to the flight check, so if you have many ships it's clear which one needs fixing.
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    Continuing code cleanup and commenting.
    Constrain scroll in ConversationPanel so that last line is always visible
    Changed Panel::Drag and Panel::Scroll to take double dx/dy
    
    Fixes endless-sky/endless-sky#805
    Conversation panel now behaves the same when clicking as when pressing enter.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Fixed a bug in the conversation panel where the wrong choice was displayed if multiple choices led to the same node.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Modified the Conversation class so that a "scene" image can be inserted at any point, and modified one of the Free Worlds missions to test that.
    Switched the UI code over to using the generic "ClickZone" class in a few more places.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Added scroll wheel support to the conversation panel.
    Moved the wildcard replacing code from ConversationPanel into Format so that other classes can share it.
    Replaced the old, very limited "callback" class with function pointers that can be given any method name.
    Added text substitution for <first> and <last> to the conversation panel. Eventually I'll add destination planet and system, and maybe other things as well.
    Gave the conversation panel an option to pop up a map showing a system highlighted, if the conversation is the introduction to a mission.
    Added mouse click support to the conversation panel.
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Added GPL statements to all source code files and added a license.txt file.
    Got "New Pilot" working, including visiting the shipyard and picking out an initial ship.
    Added a "New Pilot" dialog (which doesn't yet move you straight to the shipyard, though).
    Updated Conversation to allow typing in your name (for the intro text). Also added an option for a "scene" picture, and a better UI panel.
    Uploaded all the files from my local repository to Google Code.
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Code cleanup: fixing some function parameters that have the wrong name in the header file.
    Revert "Made it so that all mission actions can display conversations or dialogs."
    
    This reverts commit 181603905497b28c403864258d4bd2935b0fba90.
    Made it so that all mission actions can display conversations or dialogs.
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    Fixed a recently introduced bug where the view would be cleared if you returned to the main menu.
    The main menu no longer hangs if you "enter ship" just as it finishes loading.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Modified the new mission implementation so that missions can also be offered as soon as you land (e.g. to handle continuation of existing missions), and used that to create a "first contact" conversation that is shown the first time you land on any Quarg world.
    Took out some unneeded references to GameData in the headers.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Refactored to consistently call the PlayerInfo, "player", and the player's flagship, "flagship".
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Added GPL statements to all source code files and added a license.txt file.
    Got "New Pilot" working, including visiting the shipyard and picking out an initial ship.
    Added a "New Pilot" dialog (which doesn't yet move you straight to the shipyard, though).
    Updated how the UI panels are handled to allow the main menu to be called up regardless of what the game state is.
    Got the code to build without warnings when -Wall is defined.
    Added a scrolling list of credits in the main menu.
    Added display of the current pilot's information in the main menu.
    Added a preferences panel for customizing the key controls. (They are not yet used, though.)
    Uploaded all the files from my local repository to Google Code.
    fix(bug): Multiple ships of the same model can now be gifted in a single mission action
    fix(bug): Save the variant name of gifted ships (#5403)
    fix(save): Gifted ships now properly save out using `give ship` syntax
    feat(mechanics): Add a MissionAction node that enables giving the player a ship (#5302)
    
    * Allow ships to be gifted by missions
    
    * Change > to >=
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    
    * Commit for comment suggestions
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    
    * Fix bug and adjust comments
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    
    * Change code to have only one function `BuyShip`
    
    * Remove useless bool
    
    * Housekeeping
    
    * More housekeeping
    
    * Don't gift nonexistent ship models
    
    * Housekeeping
    
    * Fixed a double space
    
    * Changed syntax to `give ship <model> [<name>]`
    
    * Fixed missing semicolon
    
    * Whitespace fix
    
    * Change dialog to include the model of the ship
    
    * Change it so message appears only in log
    
    * Remove `A/An <noun>` for better english
    
    * Punctuation changes
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    feat(ux): Limit pop-ups when multiple missions have "on visit" dialogs (#4592)
    
    * Have on visit dialogs be handled by PlayerInfo instead of by MissionAction so that players won't be swamped by on visit dialogs if they hoard jobs
    * Show separate dialogs for unique missions and remind the player of deadlines
    * Simplified code and changed GetActions() to GetAction(Trigger)
    * Changed the wording for the deadline reminder
    * Count missions even if they don't have an on visit dialog, but still only display a dialog if one of the counted missions has one
    * Simplified code.
    * Ignore invisible missions.
    * Don't care about deadlines. (The player should already know that information.)
    * Don't show extra dialog if you only have one on visit.
    * Changed the wording of the extra dialog to mention other unfinished missions, not the total.
    Copy requiredOutfits in MissionAction::Instantiate()
    
    #4555
    Fixed minor code style issues (#4428)
    Allow phrase-based randomized dialog (#4164)
    
    * Allow `MissionAction` dialog text randomization via the `Phrase` class. Traditional "directly specified" text is still supported.
    
    Supported syntax:
    ```
    dialog phrase <stock phrase name>
    
    dialog
        phrase
            {phrase specification...}
    ```
    e.g.
    ```
    dialog phrase "hostile disabled"
    
    dialog
        phrase
            word
                "Please excuse my dear "
            word
                "Aunt Sally"
                "Uncle Mark"
            word
                ` for saying, "`
            phrase
                "hostile disabled"
                "friendly disabled"
            word
                `" yesterday.`
    ```
    
    * Move `dialogText` parsing to `Dialog` static method
    
    * Allow `NPC` "completion" dialog text randomization using the same phrase-based syntax as `MissionAction` dialog
    
    * Use phrases to encapsulate generic/repeated dialog
    
    For similar messages, combined clauses to diversify the generated text.
    
    * Remove duplicated space
    
    * Typo fix ( @Pointedstick )
    Remove unneeded check
    Handle "outfit <outfit> 0" while loading
    Update "require <outfit> n" handling of out-of-system escorts
    
     - Addresses the issues raised in endless-sky#3034, endless-sky#3036 and endless-sky#3075 w.r.t. outfits to be transferred
    Add mission cargo from boarding/assisting missions only to the flagship
    
     - Missions that add or remove outfits use the proper CargoHold.
    Number formatting is now limited to one decimal place, which is enough for all current attributes. Also added a separate formatting function for numbers of credits.
    NPC "completion" / MissionAction conversations can kill the player and/or NPC (#3376)
    
    * Call ConversationPanel with a pointer to the relevant ship
    
     - Allows destroying the pointed ship depending on the conversation outcome.
     - If the player is killed, the pointed ship should survive, and no BoardingPanel should be displayed.
     - Supply the ship from NPC::Do, to enable destroying the NPC via LAUNCH, DEPART, and FLEE conversation endings.
     - Include a boarding check to prevent an NPC block with a non-boarding completion requirement (e.g. `npc evade`) from displaying a BoardingPanel after the conversation ends.
    
    * Add response handling for non-"on offer" conversations
    
     - Updated PlayerInfo::BasicCallback:
       - attached it to:
         - all NPC completion conversations
           - If actually boarding the NPC, set it as the boarding ship.
       - The player is perhaps not landed: in-flight death implies:
         - capture of the flagship by the ship it was boarding (`die` when boarding)
         - crew mutiny and defection (`die` when not boarding)
         - the destruction of the ship. (`explode`)
     - Added the Conversation::EXPLODE response, based on the keyword `explode`
     - Updated the Ship::WasCaptured code to not over-transfer crew, for the case where the player dies to a conversation offered in-flight and has plenty of crew already.
    
    * Rework PlayerInfo::Die
    
     - Remove need for a private Die() method
     - Update callers of Die(bool) to use Die(int) and achieve the intended result
    
    * Eliminate need for BoardingShip()
    
     - Moved player death handling into ConversationPanel::Exit, where the relevant ship pointer is easily accessed
     - Added pointers to the ship responsible for the boarding mission / npc event into relevant Mission and MissionAction methods, to eliminate need for PlayerInfo::BoardingShip
    
    * Showing BoardingPanel requires a disabled-yet-not-destroyed ship
    
    * Add check for capture / bribery of a boarding ShipEvent's target via a mission NPC's completion conversation
    
     - A more robust method to only offer the BoardingPanel resulting from ConversationPanel::Exit (i.e. no display of sequential BoardingPanels, and obeying the conversation's exit node) should be pursued separately
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Added constructors that call Load() on a data element, so construction and Load() don't have to be done in two separate steps.
    Mission "on enter" can define a LocationFilter to pick the system(s) (#3141)
    
    * "on enter" actions can define a LocationFilter to pick the system
    
     - Example:
        on enter
          "system filter"
            government "Syndicate"
          dialog "You're now in Syndicate space!"
    
     - Without a system filter, any `on enter` actions that do not name a system will apply as soon as the player takes off (current behavior).
     - Each mission only supports a single `on enter` action without a named system (current behavior).
    
    * Use a function to convert a distance filter into a near filter
    
      - This avoids needing to save the mission origin in the MissionAction
      - Use of both "near <system>" and "distance" filters in the same `on enter` action is not supported - only the "near" filter will be kept.
      - Fixed an extra indentation level with the saved LocationFilter.
    
    * Forward compatibility for changes to LocationFilter class variables
    
    * Support multiple "generic" on enter MissionActions instead of only one
    
     - "specific" on enter: explicitly identifies the system
     - "generic" on enter: uses a LocationFilter to match a set of systems (offering in the first one that matches), or has no filter and offers immediately on launch
     - All "specific" on enter actions are checked before any "generic" on enter actions for a given system
     - Only one on enter action will be triggered per jump.
     - Each "generic" on enter is checked in the order of definition in the mission datafile
    
    * Update SetOrigin() usage
    
     - Reformat checks to avoid copying if nothing is to be done
     - Pass a system to MissionAction::Instantiate to guarantee a System * is available, even for assisting/boarding missions.
    
    * Use didEnter to track both generic and specific "on enter" actions
    Enable any mission conversation to require the player to launch
    
     - Adds a "BasicCallback" to enable conversations that come from non "on offer" conversations to force the player to depart the planet.
     - Guards setting "shouldLaunch" to true while in flight, as a boarding/assisting mission could otherwise set this and cause odd behavior on the next landing.
    Typo fix in the previous PR.
    require <outfit> can require a specific number, or specifically zero
    Potential error fixes from @AskePit.
    Extend reference-checking in GameData::CheckReferences (#3116)
    
    * Extend reference-checking in GameData::CheckReferences
    
     - Add Name() to Minable & Phrase
     - Add IsDefined() to GameEvent
    
    * Enable reference-checking for GameEvents and Missions
    
    * IsDefined->Name and other feedback
    enhancement: Visual feedback for outfit transfer missions while in-flight (#3075)
    
    * Remove deprecated declaration
    
     - 'SetDefaultPayment' was removed in f9d82bd3e1a3f0bbe0b5346a20f30bb09795393c
    
    * Provide visual feedback of ready-to-complete missions with gifts
    
     - Update the MapPanel::IsSatisfied function to use a new Mission::IsSatisfied function that checks whether or not the mission's requirements for completion are met.
     - Restore the "are required gifts in present ships cargo?" check, with guards that prevent counting cargo that is out-of-system (e.g. would not be present if the player landed immediately).
    
    * Simplify return expression
    Made it so the conditions for a mission won't be updated by a mission action that cannot be performed. Also added an explanatory comment in CanBeDone().
    Missions can only be completed if available cargo is present in the system
    Always display a mission's <payment> substitution as a positive number
    
    Otherwise "you are fined <payment>" becomes "you are fined -200,000"
    Made it so that within a mission action that defines a payment, the "<payment>" substitution is that payment value, not the "on complete" value.
    Made it so the "<payment>" substitution in mission text always shows the "on complete" payment.
    Made it possible for missions to trigger events on a random day within a range rather than always on a specific day.
    Added support for "special" log entries, containing whatever you know about a particular person, faction, etc.
    Added a helper function for the common task of splitting a string into paragraphs.
    Added a "logbook": mission actions can now have "log" entries that automatically get added to the logbook, to remind the player of where they are in the story and what quests they have completed.
    Revert "Made it so that all mission actions can display conversations or dialogs."
    
    This reverts commit 181603905497b28c403864258d4bd2935b0fba90.
    Made it so that all mission actions can display conversations or dialogs.
    Added the ability to specify plural forms of outfit and ship model names.
    Fixed a crash when a "fail" action removed the next mission after it from the player's mission list.
    Continuing to work on code cleanup and commenting.
    Made it possible for any mission action, including "on enter", to change the player's reputation with a government.
    Refactoring: switching to using "!set.count(...)" instead of "set.find(...) == set.end()" because it's more concise, just as efficient, and seems clearer.
    Changed the outfit "gift" code in missions so if one outfit is being given and another taken, the outfit being taken always happens first to free up more space for the one being given.
    Made it possible to change the "multiplier" for payment calculations.
    Fixed a crash that could occur if missions that failed during take-off due to lack of space tried to display a dialog.
    Fixed a bug where "gifts" from missions won't be given if you have no outfit space *and* no cargo space.
    Added support for missions that are only offered if you have an outfit of a given type.
    Added a "fail" keyword in mission actions that can be used to immediately fail the current mission or any other.
    Added brackets and indentation for every BeginChild()...EndChild() pair to improve the code readability (compared to indentation with no brackets, or no indentation at all).
    Added a warning dialog if a mission is trying to add an outfit to your ship but there is no room for it.
    Fixed a bug in how the <payment> substitution works when the payment is given at a time other than mission completion.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Removed some TODOs that have already been fixed.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Code cleanup: always referring to the player's ship as "flagship."
    Mission dialogs now allow you to bring up a map, the same as conversation panels. Also made the arrow marking the destination system larger, so it stands out on the map.
    Fixed the formatting of the message that is shown when an outfit is added to your ship or removed from it.
    Added support for mission actions to be performed when you enter a system (showing a dialog or conversation, setting flags, etc.).
    Got mission dialogs to support player and ship name substitutions, the same as conversations.
    Added some new Free Worlds missions, and fixed a few issues I found while developing them.
    Added support for the "event" tag in a mission's "on <trigger>" section.
    Fixed a bug where accepting a job in the job board was calling the "accept mission" callback.
    Got "invisible" missions working: being accepted automatically, and not showing up in any mission lists or displays.
    Switched so "job" missions do not automatically have unlimited repeats. Also tweaked some of the job descriptions.
    Switched over to the new Mission implementation. There are still some aspects that are not working yet (like, the job board).
    Made some small changes to support the new mission model, including having the "complete" MissionAction set the payment substitution string, and adding an operator+ to Date for setting deadlines.
    Added the MissionAction class, representing what happens when a mission is offered, accepted, etc.
    Made it possible for a ship's list of outfits in the Ship Info panel to spill over into a third column, reducing the space available for the cargo list.
    Added a function to check if one rectangle is fully contained within another.
    Added a "Rectangle" class to make dealing with rectangular regions simpler.
    Fixed some things that Google's cpplint warns about (mostly, constructors that should be marked explicit).
    Added a "Rectangle" class to make dealing with rectangular regions simpler.
    Continuing to work on code cleanup and commenting.
    Added arrow key and page up/down support for the lists in the shipyards and outfitters maps.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added the cmath header to ClickZone in case a class making use of it does not include it.
    Updated the preferences panel to include escort command keys (and to have space for additional preferences).
    Cast pre-multiplication & increase variable size
    
    else computed results may overflow available bits resulting in UB.
    
     - Defer to `auto` for results of bitwise &
       - `(int)A & (uint)B` will be unsigned int/long per usual arithmetic conversions, and positive even for A < 0
     - Change from `int` to `unsigned` where negative values would result in unexpected behavior
     - When checking multiple grid cells only `diff` may be negative, so only `diff` need be signed
    Added a new CollisionSet function that checks collisions along a line defined by a start and end instead of by a Projectile object.
    Switched back to using generic Body in CollisionSet, rather than Ship.
    Since CollisionSet is only used with Ships right now, switched it to using Ship pointers instead of generic Body pointers.
    Implemented a much more efficient collision detection algorithm, to speed up large battles.
    feat: Uninhabited planets do not fine by default (#4512)
    
    * Uninhabited planets now never fine the player
    
    * Error fix
    
    * Removed security 0 from Ruin
    
    * Added a flag to check if the security of an uninhabited planet was changed
    
    * Spacing
    
    * Name changes
    
    * Improved readability
    Refactor the check for planet accessibility
    
     - Pre-strip the "requires: " prefix from required attributes
     - Simplify test for "do we even need to look at the ship's attributes?"
    Treat "shipyard" and "outfitter" as other game data
    
     - Add reference checking to "shipyard" and "outfitter" items
        - Warn if "seen" (e.g. in a planet definition or as outfit cargo) but not given any initial items
     - Export Shipyards collection from GameData (to match Outfitters)
     - Update Planet::Load to use Shipyards() and Outfitters() in lieu of passed parameters
    Support multiple fleet types in planet tributes
    
     - Use an vector of stock fleet definitions to allow customized tribute fights
     - Increase difficulty of all tribute fleets by changing the personality from "staying heroic nemesis" to "staying heroic marked unconstrained"
       - Tribute fleets will now only target the player's ships, and will be ignored by all other ships even if they would be "natural" enemies.
     - Increase visibility of tribute fleets in busy systems by applying the "target" personality
     - Fix a bug in bounds checking on "fleet" nodes in the specification syntax
    Planet: Precalculate IsInhabited
    
    This is called very frequently from the map screen, so calculate it in
    advance.
    Refactor MapPanel's Draw___ methods (#3379)
    
    * Refactor MapPanel's Draw___ methods
    
     - Improve mod coloring support via expanded use of interfaces.txt:
       - Switch the minimap from a hardcoded position to an Interface
       - Use travel plan colors from interfaces.txt
       - Use System name, link colors from interfaces.txt
     - Move the increment of `step` from MissionPanel to the base MapPanel
     - Add comments to DrawMiniMap, DrawTravelPlan, and DrawWormholes
     - Used and updated MapPanel constants
     - Draw the Travel Plan after wormholes, since wormholes by default have non-zero alpha.
       - This removes the small, dark purple centerline from drawn travel plan routes that use wormholes
     - Adds function to Planet class to export all systems in which it can be found
     - Do not show the "planet description" box if the planet in question is a wormhole.
     - Change DrawWormholes iteration scheme from "every StellarObject in every System" to "check only planets"
       - Fixes bug in DrawWormholes caused when two wormholes reference the same system (i.e. Cardea), which cause the wormhole link to be drawn over a previous directional arrow
    
    * Move the mini-map position specifier into the "hud" interface
    Enhancement: Consider next refuel stop when traveling to parent ship's system (#2997)
    
    * Convenience function to know if a planet has fuel for a ship
    
    * Consider the next refuel system when an escort is traveling to the parent.
    
    An escort was only checking if it had enough fuel to reach the next
    system, so it could get stuck when it had to travel through two
    consecutive systems where it couldn't refuel.
    
    Now it checks how much fuel is required to reach the next refuel system
    on the travel route to decide if it should refuel in the current system.
    
    * Clarify code and stop checking when we go over fuel capacity
    
    * Clarify comment.
    
    * Rework required fuel check.
    
    DistanceMap is already tallying fuel so choose the best route.
    Code cleanup: fixing some function parameters that have the wrong name in the header file.
    For planet attributes, shipyards, and outfitters, made it possible to remove a single item or to add an item without clearing the previous value.
    Made it so certain planets will only show up as something you can land on if your ship has certain attributes.
    Fixed a case where escorts wouldn't pathfind through wormholes.
    Made it possible for each planet and system to specify the "music" to play when you are there.
    Allow planets to have a government defined.
    
    Still uses the system's government as the default value for planets that
    do not define "government", which is still all of them (and should
    continue to be almost all of them in the future).
    Fixed a bug where visiting wormholes was not remembered, and also where wormhole arrows could be drawn under the route.
    Fixed some pathfinding issues with wormholes with more than two exits.
    Added support for a "wormhole" planet type.
    Added function to return a "noun" for a "planet" object, by default this is the word "planet," but can be either "station" or "moon" if the attributes include one of those two terms.
    Added support for planetary domination. (But, it won't do anything until defense fleets have been set for each planet.)
    Made it so that planets marked with the "uninhabited" attribute will not offer trading, jobs, or a bank.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added convenience functions to Planet and Government to simplify the syntax for querying political state. Also fixed a few busgs in my recent Command and AI changes.
    Got game events to correctly handle updating each planet's record of what systems it is in, so that game events can create or destroy wormhole entrances in addition to normal planets.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Implemented wormholes. (Any planet that shows up in multiple systems is a wormhole.)
    Got "security levels" specified for each planet. So far the only crime you can be caught committing is having an unlicensed ship.
    Modified Planet to parse the "attributes" list.
    Planets no longer allow you to land if you have a negative reputation with their government.
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Added Planet::GetSystem() so you can map any planet to the system containing it.
    Switched the outfitter to only selling outfits available on this planet or that you sold them. That required moving the flight check into the outfitter, so you don't sell your engines on a planet with none for you to buy.
    Added GPL statements to all source code files and added a license.txt file.
    Added support for "shipyard" and "outfitter" attributes on planets.
    Uploaded all the files from my local repository to Google Code.
    fix(mechanics): Count all ships which cannot depart the system
    
    ...even if they have a different warning displayed.
    
    While Ship::FlightCheck now reports all warnings, only the first warning is displayed in the Shipyard / Outfitter.
    (Before displaying e.g. up to 3 warning tooltips, we must determine their relative priorities and verify the checked condition parameters make sense due to the branching changes)
    
    Closes endless-sky#4949
    feat: If not carried, fighters and drones are launched instead of sold (#4388)
    
    Co-authored-by: tehhowch
    Fix extra restriction on bank accessibility (#4509)
    
    Fixes #4508
    Reorder some includes to match style (#4430)
    (Re)Allow multiple news items per landing
    
    but require pressing the key again to get additional news.
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Show a single news item per day
    Reorder PlanetPanel::KeyDown checks
    
    to better highlight the shared required characteristics for UI menus
    
     - Use the private variable `system` instead of requerying the player's system
    Reduce duplicated checks in PlanetPanel::Draw
    NPC "completion" / MissionAction conversations can kill the player and/or NPC (#3376)
    
    * Call ConversationPanel with a pointer to the relevant ship
    
     - Allows destroying the pointed ship depending on the conversation outcome.
     - If the player is killed, the pointed ship should survive, and no BoardingPanel should be displayed.
     - Supply the ship from NPC::Do, to enable destroying the NPC via LAUNCH, DEPART, and FLEE conversation endings.
     - Include a boarding check to prevent an NPC block with a non-boarding completion requirement (e.g. `npc evade`) from displaying a BoardingPanel after the conversation ends.
    
    * Add response handling for non-"on offer" conversations
    
     - Updated PlayerInfo::BasicCallback:
       - attached it to:
         - all NPC completion conversations
           - If actually boarding the NPC, set it as the boarding ship.
       - The player is perhaps not landed: in-flight death implies:
         - capture of the flagship by the ship it was boarding (`die` when boarding)
         - crew mutiny and defection (`die` when not boarding)
         - the destruction of the ship. (`explode`)
     - Added the Conversation::EXPLODE response, based on the keyword `explode`
     - Updated the Ship::WasCaptured code to not over-transfer crew, for the case where the player dies to a conversation offered in-flight and has plenty of crew already.
    
    * Rework PlayerInfo::Die
    
     - Remove need for a private Die() method
     - Update callers of Die(bool) to use Die(int) and achieve the intended result
    
    * Eliminate need for BoardingShip()
    
     - Moved player death handling into ConversationPanel::Exit, where the relevant ship pointer is easily accessed
     - Added pointers to the ship responsible for the boarding mission / npc event into relevant Mission and MissionAction methods, to eliminate need for PlayerInfo::BoardingShip
    
    * Showing BoardingPanel requires a disabled-yet-not-destroyed ship
    
    * Add check for capture / bribery of a boarding ShipEvent's target via a mission NPC's completion conversation
    
     - A more robust method to only offer the BoardingPanel resulting from ConversationPanel::Exit (i.e. no display of sequential BoardingPanels, and obeying the conversation's exit node) should be pursued separately
    Added a "news" system for displaying messages from local inhabitants you meet in the spaceport.
    Made it so pirates won't steal passengers when plundering. Also cleaned up and simplified the CargoHold transfer code.
    The "flight checks" now show up as warning icons and only block you if you try to take off with an unusable ship.
    Split InfoPanel into separate classes for the fleet listing page and the individual ship page.
    Made it so that if the launch confirmation dialog is shown, the "request to launch" is canceled after that.
    Made sure that all "landing" missions have been offered before you take off from a planet.
    Typo fix (@retrue).
    The "not enough passenger space" message will no longer be shown if you have a ship whose required crew exceeds its crew, but do not have any passenger missions.
    The trade panel is now only accessible is a system has commodity prices. Also added a "not for sale" label if some commodities are for sale but not others.
    Fixed the mission cargo warning to only show if mission cargo is actually going to be sold (not if regular cargo will be sold instead).
    Fixed a case where the intro tutorial is never shown (if you exit the shipyard and click the bank tab before buying a ship).
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    Switched to a more generic solution for multiple key presses where one opens or closes a new UI panel.
    Fixed a PlanetPanel glitch with simultaneous key presses closing the panel while popping up another.
    Fix for planet sub-panels remaining up if you depart and are shown a confirmation dialog asking if you want to sell extra stuff. (Fix contributed by @MarcelineVQ)
    add passenger space check, fix panel popping
    
    departure from the planet panel will now check whether missions will fail due to insufficient cargo space or bunks
    
    additionally panels weren't being popped correctly, causing you to become stuck on a planet if you got a confirmation dialogue while a panel like trade/bank/hire was selected
    Added a confirmation dialog if you take off with drones, fighters, or plunder that you do not have space for.
    Fixed a crash that happened if the player tricked the game into letting them take off in an automaton (by converting it back into one right before taking off).
    Fixed a crash that could occur if missions that failed during take-off due to lack of space tried to display a dialog.
    Added an extra preload of the planet's landscape when you land, just in case there's any way it would not be loaded.
    Made it so that if you somehow make a fighter your flagship (e.g. by selling or moving the previous flagship) you cannot take off from the planet.
    Made it so that planets marked with the "uninhabited" attribute will not offer trading, jobs, or a bank.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added a new capability for missions: a "blocked" message, which is displayed in a dialog if all other requirements are met but you do not have enough bunks or cargo space free to take on a special mission. Fixes #5.
    Took out most of the overloaded operators for Command, because it is not at all clear how they should handle the turn field, and ignoring it was causing problems.
    Code cleanup: always referring to the player's ship as "flagship."
    Added convenience functions to Planet and Government to simplify the syntax for querying political state. Also fixed a few busgs in my recent Command and AI changes.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Added a new "infiltrating" mission mode where you can land on a planet, but cannot access any services there or refuel your ship.
    Fixed a few bugs I found while testing.
    Added proper handling for a dead player (through conversations, combat, or a failed attempt to capture a ship).
    Switched to always saving the game when taking off from a planet, even if it had no spaceport, because now that you can ask other ships to refuel you it's not the end of the world if you save a game with no fuel.
    Got planetary defense missions working (three different templates for the Core, North, and South).
    Modified the new mission implementation so that missions can also be offered as soon as you land (e.g. to handle continuation of existing missions), and used that to create a "first contact" conversation that is shown the first time you land on any Quarg world.
    Switched over to the new Mission implementation. There are still some aspects that are not working yet (like, the job board).
    Replaced the old, very limited "callback" class with function pointers that can be given any method name.
    Made the bank active even if the player has no ship, to handle the case where you sell your old ship, then get a loan, then buy a new ship.
    Gave the conversation panel an option to pop up a map showing a system highlighted, if the conversation is the introduction to a mission.
    Added support for basic "special missions," offered in the Spaceport on certain planets.
    Updated the UI to use the same three "named" colors everywhere for three different levels of text brightness, for consistency.
    Added deferred loading of the landscape images, which reduces the startup time and also reduces the initial memory usage from about 380 MB to 150 MB.
    Added a rudimentary ship info panel.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Refactored MapPanel and MissionPanel to share the underlying code for drawing the map.
    Added a "mission panel" that lets you select missions from a job board. It doesn't support scrolling or mouse clicks, yet.
    Modified the planet panel to always let you sell (or install) outfits if you have them as cargo.
    Got carrying and launching of fighters working (but not buying or recalling them, yet).
    Added a panel to the planet dialog for hiring and firing extra crew.
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Added an option to toggle fullscreen mode. It's still a little buggy on Linux.
    Switched the outfitter to only selling outfits available on this planet or that you sold them. That required moving the flight check into the outfitter, so you don't sell your engines on a planet with none for you to buy.
    Added an option to go back to the main planet description in the planet panel (by clicking the landscape image).
    Added the outfitter UI. You can browse all outfits, but buying is not yet enabled.
    Added a "pre-flight check" that makes sure you have thrusters and steering installed and enough energy to drive them, and warns you otherwise rather than letting you take off.
    Got the Load / Save panel working.
    Added GPL statements to all source code files and added a license.txt file.
    Got "New Pilot" working, including visiting the shipyard and picking out an initial ship.
    Added a "New Pilot" dialog (which doesn't yet move you straight to the shipyard, though).
    Updated Conversation to allow typing in your name (for the intro text). Also added an option for a "scene" picture, and a better UI panel.
    Added saving of the game (every time you leave a planet, or if you quit while on a planet).
    Updated how the UI panels are handled to allow the main menu to be called up regardless of what the game state is.
    Added support for "shipyard" and "outfitter" attributes on planets.
    Uploaded all the files from my local repository to Google Code.
    feat(mechanics): Enable creating Commands from datafile text (#4997)
    
    Doesn't add the bindings for actually reading in & then using the commands, but is one step in that direction.
    
    * Add command loading and sending it to the Engine
    This is part of the automatic-testing PR endless-sky#4370 and could also be used for endless-sky#4720.
    
    * Replaced if/else chain in Command loading by lookup map.
    Also fixed a bug that caused commands to be skipped during loading.
    
    * Add command forwarding through MainPanel.
    
    * Apply suggestions from code review
    Print the relevant token when an unrecognized command is found.
    feat(mechanics): Added a command that will bring the flagship to a stop (#4745)
    
    * Move reading of Shift modifier from AI.cpp to Command.cpp.
    
    This places reading of the Shift key state together with regular input key reads.
    
    Tested (and no issues seen):
    - N       -> cycle through ships
    - Shift-N -> cycle through escorts
    - T       -> talk to selected ship
    - shift-T -> talk to selected planet
    - B       -> board enemy ship
    - shift-B -> board escort
    - R       -> select nearest enemy
    - shift-R -> select nearest ship
    
    * Add stop command to stop all movement of players flagship
    
    Used Shift+H as key to perform full stop of flagship.
    
    * Remove no longer needed SDL include from AI.cpp
    
    * "stop command" is shift-down instead of shift-hold
    
    * Bug fix for this problem:
    
    1. user presses and holds SHIFT
    2. user presses and holds BACK
    3. ship engages reverse thrusters (BACK) for one step
    4. ship disengages reverse thrusters and then activates STOP
    
    * Process review comments
    
    Removed duplicate code.
    Minor text improvement.
    
    * Cleaned up HandleKeyboardInputs section.
    
    * Use local shift variable.
    
    * Fix comments
    
    * Add message informing the player that the flagship is stopping.
    
    * Updated message to indicate one-time action.
    
    * style: update Stop command's feedback message
    
    Co-authored-by: NomadicVolcano <60122264+NomadicVolcano@users.noreply.github.com>
    feat(controls): Make fast-forward key configurable (#4741)
    
    * Make fast-forward key configurable
    * Do not toggle fast-forward on repeat input events
    * Rename "Menus" to "Interface" in Preferences, resize column slightly
    
    Closes endless-sky#2738
    refactor(input-handling): Move kb/m reads from AI & Engine to only Engine (#4715)
    
    * Add an "And" function to the Command class.
    
    * Move keyboard inputs from AI to Engine
    Combine mouse and keyboard inputs into single activeCommands variable
    
    Tested (OK, no issues seen):
    MENU
    MAP
    INFO
    FORWARD, LEFT, RIGHT, BACK, PRIMARY, AFTERBURNER
    SCAN
    DEPLOY
    HAIL
    BOARD
    CLOAK
    LAND (autopilot)
    LAND (switch landing targets)
    LAND (landing based on mouseclick)
    JUMP (autopilot)
    JUMP (insufficient fuel warning)
    JUMP (WAIT, fleet waiting for jump)
    TARGET (cycle through enemy ships)
    NEAREST (cycle through friendly ships)
    SELECT (switch secondary weapon)
    SECONDARY (fire secondary weapon)
    DEPLOY
    FIGHT
    GATHER (looks the same as before the change)
    HOLD (looks the same as before the change)
    AMMO
    
    Signed-off-by: Peter van der Meer <peter.vd.meer@gmail.com>
    
    * Add comments on Command and made comments full sentences.
    
    - Documented the use of the WAIT command.
    - Made all comments full sentences, included full stops.
    
    * Fixed clearing commands from the wrong variable.
    
    * Remove duplicate audio-repeat-avoidance construct
    
    Repeatedly playing audio was already resolved by forwarding autoPilot
    commands only 1 single frame through activeCommands and by clearing
    the autoPilot at the same time as giving the error-message and playing
    the fail sound.
    
    * Fix an issue where JUMP is cleared before out-of-fuel error-message.
    
    The targetSystem gets set during emergency jumps (without a travel plan).
    If such situation happens and there is insufficient fuel or no jump or
    hyperdrive, then we still want the warning to be sent on the first time
    the jump command is given.
    A few other small code cleanup changes.
    Added support for independent turret tracking (and, limited turret turn rates) for everything but anti-missiles.
    Fixed an issue introduced in the previous commit.
    Added a key command to toggle escort ammo usage on the fly.
    Moved the beginner help messages out into a data file.
    Continuing to work on code cleanup and commenting.
    0.9.2 updates
    A ship's targeting "confusion" now decreases over time when it is firing weapons continuously. This fixes the issue where a laser turrent might miss small, fast drones entirely due to confusion.
    Made it possible for AI ships to "stop" almost completely, by having ships apply fractional thrust if they know they are trying to stop.
    Keeping the name of the landing command what it was previously, so players with customized key layouts won't lose that command.
    Added function to return a "noun" for a "planet" object, by default this is the word "planet," but can be either "station" or "moon" if the attributes include one of those two terms.
    Moved all file IO into the Files class, so it will be easy to add support for UTF16 paths under Windows.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Fixed a bug in Command when building in 32-bit mode.
    Took out most of the overloaded operators for Command, because it is not at all clear how they should handle the turn field, and ignoring it was causing problems.
    Fixed a bug where Command::operator& was returning true if the turn was nonzero even if the two commands had nothing in common.
    Fixed some bugs in how the preferences panel was displaying as a result of my new Command class.
    New feature: you can hold down the jump key to prepare for hyperspace but not jump yet (so that you can wait until your whole fleet is ready to jump, too).
    Added the new Command class to the XCode project.
    Eliminated the Controllable class by using Command for its command bitfield, and moving its target functions into Ship. This means there is now just a single representation of commands, instead of three different ones for different purposes.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    feat(mechanics): Improve AI for afterburners, reverse thrusters (#5352)
    
    * AI improvements for afterburners and reverse thrusters.
    
    * Avoid unnecessary calculations.
    feat(ai): Player ships no longer autofire at disabled ships they've boarded (#5387)
    
    Tested:
    - Navy ships still fire at disabled ships.
    - Free world ships don't fire at disabled ships.
    - Player ships no longer autofire at disabled ships after boarding.
    feat(mechanics): Save collections in order by element name (#5333)
    
    * feat(saves): write collections in deterministic order when saving
    
    * refactor: simply methods via capture lambdas
    
     - No need to pass DW instance around
     - use more "using" declarations to simply method declarations
    
    * pr feedback + lambda styling
    
     - applied a more uniform style to lambda expressions
    fix: Also consider "moving to position held" as HOLD position (#5040)
    feat(mechanics): player can deploy/recall individual carried ships (#4719)
    
    * Deploy and recall only selected by the player instead of all ships.
    
    Implemented by a deploy variable per (carried) ship instead of a single global variable.
    
    Tested (OK):
    - Deploy and recall for flagship
    - Deploy of only subset of ships
    - Deploy and recall for escort
    - Deploy of only subset of ships (together with escort)
    - Deploy and recall of AI controlled ships
    - Return (and not deploying) damaged fighters
    - Recall of fighters (to escort) if player is out of system
    
    * Process review comment.
    
    * Remove some unneeded whitespace
    
    * Process review comments.
    
    - Issue deploy commands to the fleet when no deployable ships are selected.
    - Removed never displayed message.
    - Renamed IsLaunching to HasDeployments for clarity.
    - Renamed fighter to "carried ship" for consistency.
    
    Tested that deploy with non-deployable ships selected will deploy for the full fleet.
    
    * refactor: Update methods
    
     - rename & reoder Ship class methods
       - apply only to Player ships, but "IsDeploying" sounds applicable to all ships
     - update `IssueDeploy`
       - move conditions into shared lambda
       - group ships to deploy and ships to recall, to limit iteration passes
       - restore silent behavior of pressing D when no ships can deploy/recall
    refactor(mechanics): Change bay type identification to categories (#4391)
    
    * Change bay type identification to categories
    
    Change the ways bay types are identified from boolean to the category of
    the ship that is to be carried in the bay.
    
    This will make it easier to add new bay types in the future and/or to
    load bay types from data files instead of having them hardcoded.
    
    Signed-off-by: Peter van der Meer <peter.vd.meer@gmail.com>
    
    * Fixed some style issues
    
    * Processed review comments
    
    * Update code merged from master to categories.
    
    * Process first set of review comments
    
    - Renamed forCategory variable to category.
    - Added function to Ship to get total number of bays for a category.
    - Use total instead of free bays for display in-flight.
    - Changed launch-speed-check to use automation attribute of carried ship.
    - Added check if bay is a known type during loading.
    - Restored the Engine::Place per-category carrier selection for NPCs.
    
    Retest after rework:
    - Performed minimal load / flight / reload test with carriers, fighters and drones.
    
    * Processed review comments
    
    - Added use of const string references
    - Fixed some style issues
    - Use continue instead of intending a large block
    - Update code to make automated ships launch faster than crewed ships again
    
    * style: minor touchups
    feat: Added velocity and range override attributes for weapons (#4522)
    refactor: Swap target parameter type of some AI methods from `Ship` to `Body` (#4865)
    
    Those methods only use properties which are already available in the Body base-class, and allow the methods to be used in future changes, e.g. to circle around planets, keep station with asteroids, or swarm flotsam.
    feat(mechanics): Added a command that will bring the flagship to a stop (#4745)
    
    * Move reading of Shift modifier from AI.cpp to Command.cpp.
    
    This places reading of the Shift key state together with regular input key reads.
    
    Tested (and no issues seen):
    - N       -> cycle through ships
    - Shift-N -> cycle through escorts
    - T       -> talk to selected ship
    - shift-T -> talk to selected planet
    - B       -> board enemy ship
    - shift-B -> board escort
    - R       -> select nearest enemy
    - shift-R -> select nearest ship
    
    * Add stop command to stop all movement of players flagship
    
    Used Shift+H as key to perform full stop of flagship.
    
    * Remove no longer needed SDL include from AI.cpp
    
    * "stop command" is shift-down instead of shift-hold
    
    * Bug fix for this problem:
    
    1. user presses and holds SHIFT
    2. user presses and holds BACK
    3. ship engages reverse thrusters (BACK) for one step
    4. ship disengages reverse thrusters and then activates STOP
    
    * Process review comments
    
    Removed duplicate code.
    Minor text improvement.
    
    * Cleaned up HandleKeyboardInputs section.
    
    * Use local shift variable.
    
    * Fix comments
    
    * Add message informing the player that the flagship is stopping.
    
    * Updated message to indicate one-time action.
    
    * style: update Stop command's feedback message
    
    Co-authored-by: NomadicVolcano <60122264+NomadicVolcano@users.noreply.github.com>
    fix(input-handling): Only update AI with player commands when actively in-flight (#4797)
    
    * Only handle Engine keyboard inputs when the game is not paused
    
    Added isActive check around keyboard reading to prevent reading of
    keyboard inputs for the engine while the game is paused.
    
    * move isActive check fully to Engine.
    
    Nearly all of the isActive checking was already done in the Engine.
    This commit moves the isActive check from UpdateKeys also there.
    feat(escorts): Injured, player-owned escorts regroup with the player's flagship (#3369)
    
    If critically injured, escorts should not be lured away by enemy ships until they have repaired somewhat.
    feat(escorts): Allow "next fuel cost" calculation to use parent's destination (#4417)
    
    Escorts with more than one hyperdrive type can now determine if they have the necessary amount of fuel before their parent begins leaving the system, meaning:
     - their escort icons will not display red unless they actually need more fuel
     - they will no longer engage hostiles while the player is holding J
    feat: If not carried, fighters and drones are launched instead of sold (#4388)
    
    Co-authored-by: tehhowch
    refactor(input-handling): Move kb/m reads from AI & Engine to only Engine (#4715)
    
    * Add an "And" function to the Command class.
    
    * Move keyboard inputs from AI to Engine
    Combine mouse and keyboard inputs into single activeCommands variable
    
    Tested (OK, no issues seen):
    MENU
    MAP
    INFO
    FORWARD, LEFT, RIGHT, BACK, PRIMARY, AFTERBURNER
    SCAN
    DEPLOY
    HAIL
    BOARD
    CLOAK
    LAND (autopilot)
    LAND (switch landing targets)
    LAND (landing based on mouseclick)
    JUMP (autopilot)
    JUMP (insufficient fuel warning)
    JUMP (WAIT, fleet waiting for jump)
    TARGET (cycle through enemy ships)
    NEAREST (cycle through friendly ships)
    SELECT (switch secondary weapon)
    SECONDARY (fire secondary weapon)
    DEPLOY
    FIGHT
    GATHER (looks the same as before the change)
    HOLD (looks the same as before the change)
    AMMO
    
    Signed-off-by: Peter van der Meer <peter.vd.meer@gmail.com>
    
    * Add comments on Command and made comments full sentences.
    
    - Documented the use of the WAIT command.
    - Made all comments full sentences, included full stops.
    
    * Fixed clearing commands from the wrong variable.
    
    * Remove duplicate audio-repeat-avoidance construct
    
    Repeatedly playing audio was already resolved by forwarding autoPilot
    commands only 1 single frame through activeCommands and by clearing
    the autoPilot at the same time as giving the error-message and playing
    the fail sound.
    
    * Fix an issue where JUMP is cleared before out-of-fuel error-message.
    
    The targetSystem gets set during emergency jumps (without a travel plan).
    If such situation happens and there is insufficient fuel or no jump or
    hyperdrive, then we still want the warning to be sent on the first time
    the jump command is given.
    refactor(AI): Improve reparenting of carried ships
    
    If starting out-of-system, or if the parent ship had no free bays, player-owned fighters could still behave as independent ships rather than escorts.
    Refactored the existing "find a parent" block to simplify the logic.
    fix: Jump-capable carried ships no longer behave independently if the player leaves them alone in a system
    
     - Also fixes an issue where a carried ship would think it could dock with its parent even if the parent was in a different system
    style: Rename auto-pilot variables to make their function more clear (#4485)
    
    * Rename cancel commands to cancel commands
    
    The AI class lists a number of commands which will cancel the autopilot.
    Those commands can be given by keyboard, but also by mouse (for example the land and board commands).
    Renamed AutopilotCancelKeys to AutopilotCancelCommands to reflect that this is not only keys.
    
    * Rename keyStuck to autopilotCommand
    
    The keyStuck variable is exclusively used to perform auto-pilot commands (triggered by keyboard and mouse actions).
    Renamed the variable to make the function more clear.
    
    * Renamed autopilotCommand to autoPilot.
    refactor: Remove copies identified by OSX CI build
    Fix std::out-of-range when checking scan permissions
    
     - Compute scan permissions for each government, even if they aren't in the player's system yet
    Allow restriction of scanning / fining by governments (#3187)
    
    * Governments store a filter describing where they enforce laws
    
      - The player can be fined or scanned in any system or planet that matches one of the enforcement zones.
      - If no zones are defined, then the government has universal jurisdiction
    
    * Only ships or planets with enforcement authority perform scans
    Restrict reparenting of mission-affiliated carried ships to the same missison (#4468)
    
    * Restrict reparenting of mission-affiliated carried ships to same-mission ships
    * Avoid nullptr dereference
     - Carried ships should properly inherit their parent's system, but on the off chance one doesn't, default it into the players system
    * Replace std::find_if with a Mission class method
     - explicitly declare the lambda captures for `reparentWith`
    * Log the issuance of a fallback system
    
    Fixes #4307
    Some more style fixes. (#4429)
    
    No big changes, just some spaces removed.
    Escorts refuel more reasonably when they have both a hyperdrive and a jumpdrive. (#4288)
    
    * Escorts refuel more reasonably when they have both a hyperdrive and a jumpdrive.
    
    * Add additional comments
    Ensure that hostile escorts are treated by `n` appropriately
    Add additional comments to AI class
    Improve landing message handling in AI::MovePlayer
    
     - Once the player starts hyperspacing, do not print landing messages (since they will be for the to-be-departed system)
     - Require that the player's StellarObject target is in the player's current system (instead of possibly being in the destination system)
    "Fail" audio no longer plays on loop
    
     - if you have no manner of jumping
     - if you cannot reach your target system
    
    Behavior is now consistent with having insufficient fuel to jump.
    
    Refs endless-sky#3633
    Refs 65b70c02db61f7c835eb8ed4e3b67383ea0339f8
    Fix std::out_of_range for out-of-system cloaking NPCs
    Cache friend/foe list for each government to limit ship iteration (#2788)
    
    * Preserve the roster of ships for use by other methods
    
     - Ships and governments are added to a roster to speed up strength-checking, so remembering these arrangements for other loops is useful.
     - Iterate this roster to find hostile or friendly governments, instead of needing to check every ship to determine its government again.
    - Updated targeting/aiming, firing, swarming, surveillance, and cloaking logic to use this new function.
    
    * Cache ally/enemy lists for each government
    Introduce new fuel-based Outfit attributes (#3870)
    
    Implements new reserved Outfit attributes `"fuel consumption"`, `"fuel generation"`, `"hull fuel"`, and `"shields fuel"`, and provides errors / warnings for poorly equipped ships using fuel for energy.
    Fix "turn jitter" in escort AI when following a ship (#4131)
    
    * KeepStation: avoid "turn jitter"
    
    Rather than allowing the ship to set a turn of +1 the frame after setting it to -1, increase the turn magnitude over several frames.
     - If already at max turn, max turn is fine.
    
    * Use the smaller of the increment or the actual turn
    
     - If the requested `targetAngle / turn rate` value is less than damped increment, use it.
     - Decreased damping strength to limit excessive spread when maneuvering.
    
    * Simplify calculation by working with only magnitudes
    
     - Sign only needed for initial directional comparison and issuing of the command
    Retain helper-helpee link across jumps
    
    ... since the ships still exist. Only remove the links when repopulating everything (i.e. departing a planet)
    Allow asking for help when near harmless enemies
    
    Refs https://github.com/endless-sky/endless-sky/issues/3777
    Remove ammo restocking
    
    (pending decision on arm-from-cargo vs arm-from-installed)
    Split reboarding logic to own method
    
     - Avoid attempting to board a disabled parent (lest one attract enemy attention to it)
     - Avoid stranding the carrier when dispensing fuel
     - Ammo outfits should come from the carrier's installed outfits
       - Prevents "infinite resupply" if the carrier is picking up ammo as flotsam
       - Similar to ability to restock launchers when plundering disabled enemies
     - Add reboarding logic for harvesting fighters
    Fighters return to the carrier for ammo and fuel
    
     - Rearm and refuel when launching
    Surveillance personality also do not scan hostiles
    
     - Any hostile ships will be appropriately targeted per AI::FindTarget rules prior to the ship following its personality-specific behaviors
    
    Refs endless-sky#4109
    Avoid attempting to scan a hostile target
    
     - all hostile ships had to fail normal targeting rules to reach scan code (e.g. `marked`)
     - AI code assumes hostile target == can attack
    
    Refs endless-sky#4109
    Issue deprecation warnings & simplify some code (#4000)
    
    * Fix osx compile warning
    
    * Emit warnings for deprecated turret specs and homing w/o tracking
    
    * Require ranges / radii to be non-negative
    
    * Replace implicit defaults with explicit values
    
    * Handle deprecated "cargo scan" and "outfit scan"
    
    * Replace locally repeated code with local lambda
    Consider target's heat level when picking targets (#3493)
    
    * Allow Ship::Heat() to exceed 1.
    
    * Deprioritize highly overheated targets
    
    * Display excess heat as a segmented overlay bar
    Unify refueling and routing code (#3123)
    
    * Unify refueling and routing code
    
     - Extends advanced refueling logic to ships moving independently & following orders
     - Extends advanced refueling logic to in-system escorts
     - Chooses the best route for a ship to reach its destination system
    
    * Ships without fuel capacity should not refuel
    
    * Update ShouldRefuel logic
    
     - Implement DistanceMap::End() function, to obtain the desired destination system for a given DistanceMap
     - If no fuel depot systems are on the route between the ship and its destination system, do not refuel unless necessary.
    Fixed some AI records that weren't cleared when they should be.
    Fixed a bug where ships told to "hold position" while hyperspacing would fly off toward the other end of the map instead.
    Give instructions to return to the system center for certain NPCs
    
     - Constrained NPCs moving independently may end up beyond the "fence" and become unable to target other ships (i.e. also not `heroic` so the distance is too great).
     - Any constrained NPC with no target will return to the system boundaries (where they will then happily target enemies).
    Hostile escorts consider parent position before using "follow" behavior
    
     - "Constrained" ships should not KeepStation with a hostile parent just because both ships are beyond the "invisible fence."
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Always track a target, even if out-of-range (#3630)
    
    * Always track a target, even if out-of-range
    
    * Add NaN handling in AimTurrets
    
    * Add scope to "isnan()" usage
    Improve likelihood that "plunders" fleets can plunder (#3610)
    
    * Improve likelihood that "plunders" fleets can plunder
    
     - Default fleet cargo tries is 3, which results in mostly-filled cargo holds (and therefore an inability to plunder)
     - Added `harvests` to the Korath Raid fleet so that it will care about the jettisoned cargo from injured Remnant and Merchant fleets
    
    * Plundering ships with full cargoholds no longer act as though they should plunder
    Improvements to the Cloaking AI (#3585)
    
    * Cloaked ships will decloak to repair or refuel allies
    
     - Ships can ask cloaked ships for help, provided they share a government
    
    * Cloaking enemies flee from hostile ships if they can repair
    
     - While within the "fence", move away from the nearest enemy and the center
     - If beyond the fence, move back towards the center
     - Do not start/continue cloaking if you cannot fully cloak before using all your free fuel (i.e. cloaking would simply waste your time when you could decloak and fight back)
    
    * AI fleets with cloak will cloak in unison
    Replace most gov->IsPlayer with ship->IsYours (#3600)
    
    * Use IsYours() when possible, rather than querying politics
    
    * Update "isYours" through Ship::WasCaptured
    
    * Set "personality escort" even if an NPC is using government "Escort"
    
     - Ensured all NPCs using the player government have it defined (i.e. always declare the government of the NPC)
     - Use government "Free Worlds" for Free Worlds ships
       - Parole missions / missions involving escorts when only the player has safety continue to use government "Escort"
    Revert use of aggressive scanning check for non-surveillance ships
    Refactor some AI functions (#3531)
    
    * Refactor strength-updating code into private method
    
    * Use roster to limit scope of strength update loop
    
    * Split swarming behavior to own method
    
     - Extended logic checks to ensure swarmCount entries get decremented when the targeting ship lands
     - Increased "rendezvous velocity" from 0 to .5 max speed, in the direction of the target
    
    * Bugfix for swarming behavior
    
     - Reordering of personality behaviors after autofiring meant that swarming ships (which have no or a non-hostile target) would always get their target cleared, outside of a code block that knows to manage swarmCount
     - Only ships which entered the player's system would get swarmed, and only for a short period of time (before swarmCount could "fill up" the new ships' quota of swarming assistants).
     - Restores effectively pacifist behavior of `personality swarming` that was observed from v0.9.1 to v0.9.7
    
    * Move Hyperspacing condition check
    
     - FindTarget and Autofire make no sense for hyperspacing ships as they cannot fire - Ship::Fire requires the ship to not be hyperspacing.
       - Ships can still aim turrets at other ships
     - Ships which are launching or landing similarly do not need to decide how to move
       - Updated the DoSwarm exit check so that a landing ship does not ever take a new target
       (a ship decides to land on one frame, and then begins decreasing zoom on the next, so Swarming ships that choose to land will still release their target)
     - Remove "IsTargetable" from checks that should be available to ships which are not in the player's system (such as assisting).
       - IsTargetable references the `forget` parameter, which is only 0 if the ship is in the player's system.
    
    * Cache a ship's carried status during FinishLoading
    
    * Update carried ship handling block
    
     - Rescope is drone/is fighter check to only carried ships
     - If a fighter had to choose a bayless parent (because none of its allies could carry it), only check for a new parent every ~5s rather than every step.
     - Removed duplicated BaysFree check (CanCarry performs it too).
    
    * Retreating applies to fighters and other NPCs at the same "health"
    
    * Update FindTarget
    
     - Changed ambiguous 'isPlayerEscort' to 'isYours' since it is referring only to a player-owned ship and not also NPCs with personality escort
     - Used existing variables if they had already been defined (person, system)
     - Rescoped attribute.Get calls to only be done if they are relevant, rather than for every ship.
     - If an NPC isn't targeting a hostile ship (e.g. it is going to scan its target), then it doesn't need to consider retreating.
    
    * Remove duplicated FindTarget call
    
     - FindTarget is called prior to entering DoSurveillance, so if the ship has no combat target, seeking one again on the same frame will not yield different results
    
    * Update DoSurveillance
    
     - Rescope attribute calls into only the branches which need them
     - Performing an "atmosphere scan" of a station was probably unintended
     - Drop unnecessary "hyperdrive" check
       - JumpsRemaining is 0 if the ship has no hyperspace ability, thus only checking for a jump drive is sufficient
    Do not auto-land on destinations for missions with incomplete travel
    
     - Even if a mission has a deadline, its destination should not be recommended if there are still waypoints or stopovers that need to be visited
    Appeasing ships do not overdump commodities
    Add 'notoriety' tracking, for tracking ShipEvents vs. entire factions
    
     - If a hostile ship boards a member of a faction, that faction is more likely to target that ship than a hostile ship that has not boarded their ally
    Several related changes to fighters: they can now run their own systems when being carried (to generate energy, repair, etc.). Their heat level is now indepenedent of the ship carrying them. Fighters now retreat for repairs if badly damaged, and launch only when mostly repaired. And, repair priority is given to the least damaged fighter.
    Fix not being able to take back orders that require a target
    
    To take back an order like "gather" or "focus fire" you issue it again.
    
    When one of your ships is unparked in another system it will first
    travel to your system. While it is traveling, orders that require a
    target could be given but not taken back.
    Update AI::DoScatter to ignore out-of-system ships
    AI does not autofire weapons with firing force if preparing to jump
    
     - Switched Outfit * to Weapon * and updated variable names
     - Updated the includes to reflect the used classes.
    Certain ships should not auto-assist their disabled parent (#3370)
    
    * Carried ships should not auto-assist their disabled parent
    
    * Derelict ships should not auto-repair their parents either
    Ships with non-safe blast radius weaponry do not follow the projectile
    
     Instead, they attempt to keep the minimum safe distance (blast radius + trigger radius) between them and their target ship.
     - Behavior change at 125% M.S.D.
     - Included consideration of relative velocity
    Consider both trigger and blast radius when firing all weapon types
    
     - Previous behaviors did not consider blast radius for non-homing weapons (such as Heavy Rockets), or trigger radius at all.
    Automatic aiming now works with asteroids if you have an asteroid scanner.
    Propagate the "WAIT" command down to escorts of escorts, to synchronize jumping.
    Removing some unnecessary std:: prefixes.
    Overheated/Hyperspacing ships don't need to decide on actions (#3247)
    
    * Overheated/Hyperspacing ships don't need to decide on actions
     - Hyperspacing ships can still (de)cloak and autofire weapons, but have no ability to change their movement strategies.
     - Overheated ships are effectively disabled, but IsDisabled explicitly does not return true for a ship which is solely overheated (so the radar can blink their pointer properly)
     - Stranded/Disabled ships shouldn't ask overheated or hyperspacing ships for help since that help may be a long time coming.
    
    * Overheated but in need of help asks for help
    
    * Feedback
    Added an "asteroid scanner" outfit. Also made it possible for turrets to track minable asteroids and for target "crosshairs" to have something other than 4 points.
    Potential error fixes from @AskePit.
    Suspend the boarding approach when too far away or too fast.
    
    The boarding approach changes the ship angle, velocity, and position
    artificially (no engines). It is activated when you are close enough
    and slow enough.
    
    After activating it, you can become too far away by selecting another
    target and you can become too fast by getting hit. With this commit
    the boarding approach will be temporarily suspended until you get
    close enough and slow enough again.
    Refactored Engine::CalculateStep(), splitting each set of calculations into a separate function to improve clarity and to open a path for possibly multi-threading the most expensive calculations.
    Mission NPCs ignore mining time/count limits
    Simple logic to determine if missile boat AI will reverse or turn around
    
    Use reverse thrust if its capability exceeds:
     - the target's ability to close the distance
     - the current closing rate of the target
     - our forward thrust capability
    
    Otherwise, turn around to use the better thrusters.
    Convert between MOVE and HOLD orders to hold a given position
    
     - Ships that reach the designated MOVE_TO target change the order to HOLD_POSITION
     - Ships that are told to "hold position" compute the position they should hold (via StoppingPoint)
       - If knocked away from this position, they will now return to it.
    "Follow" order uses station-keeping rather than circle-around
    Mission NPCs use fleet movement behavior to travel in groups (#3052)
    
    * Mission NPCs use fleet movement behavior to travel in groups
    
     - The current fleet movement behavior is for an escort to wait until its parent is ready to jump before jumping, and parents will jump whenever they are able.
     - Each individual NPC block in a mission will have its own flagship, just like NPC fleets spawned randomly. This flagship is set each time the player departs from a planet.
       - The NPC flagship is the most expensive (e.g. strongest) ship of all non-destroyed ships in the NPC block.
     - When the NPC flagship is destroyed, its escorts revert to the previous follow-the-player behavior (until the player lands).
    
    * Use order of definition rather than cost to ID the NPC flagship
    
    * Clarify NPC reparenting behavior upon parent death
    
     Upon parent's death, attempt to follow the parent's parent:
     - Regular NPCs & mission NPCs with "uninterested" become independent
     - Other mission NPCs will track the player
    Enhancement: Consider next refuel stop when traveling to parent ship's system (#2997)
    
    * Convenience function to know if a planet has fuel for a ship
    
    * Consider the next refuel system when an escort is traveling to the parent.
    
    An escort was only checking if it had enough fuel to reach the next
    system, so it could get stuck when it had to travel through two
    consecutive systems where it couldn't refuel.
    
    Now it checks how much fuel is required to reach the next refuel system
    on the travel route to decide if it should refuel in the current system.
    
    * Clarify code and stop checking when we go over fuel capacity
    
    * Clarify comment.
    
    * Rework required fuel check.
    
    DistanceMap is already tallying fuel so choose the best route.
    Use IsAccessible rather than CanLand to ID unalterably unlandables
    
    CanLand also checks politics, and the player may be able to bribe for clearance.
    Independent ships with escorts wait for escorts to be ready to jump (#3065)
    
    * Independent ships with escorts wait for escorts to be ready to jump
    
     - Also fixes bug where an independent carrier that has unfilled bays (i.e. capacity 6 but only 4 carryable escorts) refuses to jump, due to a duplicated "mustWait" check in MoveIndependent.
       - This check was made obsolete in 7936ebc9508787569e365d497af27528e7f20ec5
    
    * Ships in MoveEscort will also wait for their escorts before jumping
    Refactor Mining Logic (#3064)
    
    * Refactor Mining Logic
    
     - If the target asteroid is sufficiently out-of-reach, the mining ship selects a new minable rather than embarking on a hopeless chase.
       - either double the engagement range away (1600.)
       - or moving faster than the ship can
     - Mining ships utilize turrets to mine, if they do not have a ship to aim their turrets at.
    
    * Restructure mining condition block
    
     - "Primary" miners, i.e. those with free space, have the same entry conditions for mining.
     - "Assistant" miners, i.e. carried fighters/drones with no space, only target asteroids nearer to their parent.
     - No "parent has free space" check is needed as once the parent does not have free space it will not pursue its target asteroid. Once the separation is great enough, its fighters will stop attacking the asteroid and will appropriately be recalled.
    
    * Unarmed miners (e.g. carried Boxwings) do not independently mine
    
     - Rather than rush off and simply circle a random minable with no way to destroy it, Boxwings and any other unarmed mining ships only circle around their parent's targeted asteroid.
    
    * Limit turret aiming to readily-harvestable asteroids
    
    * Remove turret-based mining for AI ships
    Prevent players from switching landing targets if they are already landing on a planet (#3090)
    
    * Players cannot switch targets if they are landing
    
    * Store object.GetPlanet() result
    Update Afterburner Logic (#3063)
    
    * Update Afterburner Logic
    
     - In addition to fuel usage, NPCs should consider its energy usage and heat output before deciding to use it (endless-sky#1819).
     - Consider afterburner usage whenever MoveToAttack is used (ships, asteroids)
     - Consider afterburner usage if harvesting flotsam.
    
    * Support afterburner-only AI movement control
    
     - Compute the displayed MaxVelocity and Acceleration values with afterburner thrust if no forward thrusters are present.
     - Adds afterburner heat, energy to the ShipInfoDisplay for "Moving:"
     - If the ship has the FORWARD command, but no thrust, the afterburner is attempted.
     - Update Ship::Acceleration and Ship::MaxVelocity to reflect the mode of operation to avoid divide-by-zero AI::StoppingPoint calculation.
    
    * Cache thrust attribute reads
    Refactor DoSurveillance (#3062)
    
    * Refactor DoSurveillance
    
    * Ensure invalid target ship is cleared
    Flagship should not autofire at cloaked/untargetable targets
    Request help when all enemies remaining are disabled
    Don't auto-land on a mission destination or stopover that is not accessible.
    Clear escorts' target system if landing instead
    Fix near death escorts doing nothing.
    
    With no enemies around the escort behavior defaults to KeepStation.
    If they were near death mid-battle they would lose their target,
    defaulting to KeepStation and resulting in them just sitting there
    taking damage. Since they are prime targets, that behavior is suicide.
    
    Now escorts no longer lose their target when near death.
    
    Reference: #3004
    Escorts better utilize ramscoops to refuel when stranded
    
    Ensure the ship can actually make a jump before telling it to PrepareForHyperspace. Ships that cannot make a jump but have a target system (e.g. can jump in general, just not right now) will move to the system center to speed up refueling.
    Reverse Thrust while turning. (#2982)
    
    * Reverse Thrust while turning.
    
    Key Press   Command
    [Up]        Engage Forward Thrust (and disable Reverse Thrust).
    [Left]      Turn Left.
    [Right]     Turn Right.
    [Down]      If Reverse Thrust installed and not engaging Forward Thrust,
                engage Reverse Thrust,
                else if not turning Left nor Right,
                turn to the reverse direction the ship is moving to.
    
    Behavior Changes:
    - Can no longer engage both Forward and Reverse Thrust
      at the same time.
    - Turning Left or Right, will no longer disable Reverse Thust.
    - Can Reverse Thrust while turning Left or Right.
    - Engaging Forward Thrust will always behave
      as if Reverse Thrust is noy installed.
    
    * Not using Forward and Reverse Thrust together.
    
    * Style fix.
    Ships which plunder do not act as such unless they have free cargo space
    
    Otherwise they would end up circling endlessly around a disabled target ship they had not boarded (until new hostiles appeared in system).
    A few more code cleanup changes.
    Code cleanup: fixing some incorrect loop variable types.
    Code cleanup: replacing container::size() in if statements with !container::empty().
    Code cleanup: "static" is redundant inside a C++11 anonymous namespace.
    Made it so auto-aim won't activate if all you have is anti-missiles.
    Derelict ships are now able to repair, once you have boarded them to reactivate them.
    Fixed a bug I just introduced into automatic aiming.
    Fixed a crash when your flagship is captured, and a possible situation where an escort could get stuck.
    Made it so auto-aim won't activate if all your ship has is turrets.
    Made it so ships that aren't "unconstrained" won't target a ship that has been outside the "invisible fence" for more than 10 seconds.
    Fix bugs in two recent commits
    Allow landing on planets or wormholes that are not in the TravelPlan (#2845)
    
    * Allow landing on planets or wormholes that are not in the TravelPlan
    
     - If the player selects a landable object that is not part of the travel plan, it will have priority over the automatic landing target needed for completing the TravelPlan.
    
    * Clear invalid travel plans caused by "unplanned" wormhole travel
    Refactor AI::Step's "Find someone to assist me" section (#2861)
    
    * Refactor "Find someone to assist me"
     - Move into into separate function
     - Use std::vector to store possible choices
     - Randomly choose a possible helper
     - Reduce frequency of calls to avg. 2 per second
    
    Comparing shared_ptr is an automatic stored pointer comparison, e.g. implicit .get()
    
    * Add CanHelp/HasHelper functions
    
     - Enable a ship to remember who it asked to help between AI::Step calls, if any, to avoid re-evaluating find-helper logic.
     - Separate logical decision-making (should help) from physical decision making (can help).
     - Prefer asking faster ships for help.
    Ships which cloak to repair should fully decloak after repairing
    Fix MoveEscort bugs when using wormholes or unreachable destinations
    
     - Escorts that are routing through wormholes to reach their parent will not set both a target planet (wormhole) to land on, and a target system to jump to.
       - This fixes a bug causing Ship::JumpsRemaining() to erroneously return 0 when the ship's targetSystem is its current system instead of nullptr.
     - Escorts that cannot jump to their flagship's target system will not attempt to refuel until the flagship leaves their system, and after attempting to refuel, will wait at the system center until a route to the parent's system exists.
       -No more "landing dance" while the player holds the jump key.
    Update Stranded / Assisting ship behavior (#2828)
    
    * Stranded ships stop to be refueled
    
     - Add checks during AI::Step to require that ships which have asked for refueling assistance come to a stop, even if the ships in
     question have specialized action personalities.
     - Ships which are entering hyperspace do not ask to be refueled mid-jump.
     - If a ship resets its assistance target, it should still conduct "normal" AI::Step actions instead of skipping its turn.
    
    * Prioritize assisting if assisting
    
     - Reordered AI::Step such that if a ship has been selected to assist another ship, this action has priority over personality traits such as swarming, surveillance, harvesting, or mining.
     - Ensured that all ships will autofire weapons or perform low-health actions, if appropriate.
    Added a new "marked" personality, that only attacks the player and will not be attacked by non-player ships. This is a replacement for what I was trying to do with the "skybound" personality.
    NPCs which cannot land on a stellar object will not get stuck trying to.
    Carriers should only wait if they have bays free
    bugfix: Restore follow-parent behavior for hostile NPCs which began patrolling (#2722)
    
    * Restore follow-parent behavior for hostile NPCs which began patrolling
    
    In 4ab74b5bc8 hostile, non-staying NPCs which could not target any ships in a system were instructed to patrol it instead of jump away and then jump back. However, if the player left the system while remaining untargetable, the NPCs would get stuck landing if they were targeting a non-planet at the time of your jump.
    This commit resolves the logic bug in MoveEscort that assumed the ship's stellar target was a landable planet by verifying that it is indeed a landable planet. If it is not, the ship will clear the target and resume tracking down the player.
    
    * Remove redundant check
    Vindictive ships only remember targetable targets
    
    Prevent vindictive personality ships from thinking they have someone to attack or assist when that ship is no longer available to target, yet still exists (i.e. carried ships).
    Fixed the condition checks for which weapons are included in the "maximum range" check in AutoFire().
    Carried ships assist in NPC mining operations
    
    The mining personality will now deploy any carried ships while actively mining.
    These carried ships inherit the mining personality, so if they have cargo space free, they will mine independently.
    After filling their cargo space, carried ships will assist their parent ship in destroying its target asteroid.
    Made it so homing weapons that don't consume ammo can auto-fire in "dumb" mode (i.e. with no target).
    Carried Ships find parents
    
    Commit 11774348c22 broke the assignment of fighters to a member of their government if they did not have a free bay to belong to.
    This commit randomizes the assigned parent to one of the fellow members of the same government in the same system that is also not a fighter.
    Added a "skybound" personality that keeps a ship from landing on planets. (Useful for creating a bounty ship that will flee to other systems but will not land even if it's technically in friendly territory.)
    Added two weapon modifiers: "safe," meaning the blast radius only hits hostile ships, and "phasing," meaning the projectile is not blocked by asteroids or other ships.
    Ships no longer mine if they have offered assistance
    MOVE_TO orders should not stack ships on the same position
    
    When cross-system MOVE_TO was implemented, the check to space out ships that were in the player's system did not get updated.
    Nemesis target selection now considers NPCs escorted by the player
    
     - Added a check of the target's personality for the "escort" tag, which indicates a ship important enough to the player that it appears in the HUD.
    
    Ref #2586
    Hostile NPCs should not KeepStation with cloaked parents (#2641)
    
    * Hostile NPCs should not KeepStation with cloaked parents
    
    * Hostile mission NPCs without targets in player system avoid jumping
    
    MoveIndependent will instead instruct them to patrol the system you are in until a target becomes available.
    Typo in my previous commit.
    The AI no longer gets "stuck" if a ship is an escort, its parent is disabled, and it has no target to fight.
    AI TravelPlan actions should not target inaccessible StellarObjects
    
    These steps prevent the player from toggling LAND in an otherwise "uninhabited" system with a StellarObject already targeted, which will generate a segfault at AI.cpp:2472.
    Fix to AimTurret to use TotalLifetime instead of Lifetime
    Carried fighters/drones no longer clear orders needing a target.
    
    This commit fixes an issue where issued fleet orders that require a target (such as GATHER or FIGHT/FINISH_OFF) would not "toggle" if the selected group of escorts included carried fighters.
    This has the added benefit of being able to set a combat target prior to deploying fighters/drones and not needing to re-issue that target after deploying fighters/drones.
    
    Closes #2608
    bugfix: MOVE_TO orders refer to a specific System (#2589)
    
    * MOVE_TO orders refer to a specific System
    
    Issuing MOVE_TO orders now includes a target system, allowing selected escorts to navigate across system boundaries to the specified position, instead of navigating to that point in their current system.
    
    Ref #2584, Closes #2580, Closes #2382
    
    * Improve readability+clarity
    Return the default landing message for inaccessible planets.
    bugfix: Turrets only track targetable ships
    
    The previous fix to #2331 was 3cf5f95 and 525c6196, but the latest update to targeting removed this check for player-defined targets. This commit restores this check, preventing turrets from tracking cloaked ships.
    In "focused fire" mode, turrets now face forward if no targets are present (e.g. for mining asteroids). That mode is now the default.
    Added control of turret tracking (focused on your selected target, or opportunistic) in the preferences panel.
    Added support for independent turret tracking (and, limited turret turn rates) for everything but anti-missiles.
    Made it so an autopilot travel destination works even if the destination is a wormhole.
    Reactivate Autopilot Landing Sequence
    
    Closes endless-sky/endless-sky#2503
    Make AI "Stop" include turning times when considering reverse thrusters (#2346)
    
    * Add optional final facing direction to AI Stop command
    
    * Make the hyperspace autopilot use reverse thrusters to stop when faster
    
    * Modify hyperspace AI to only stop and turn with regular hyperdrives
    
    * Update AI.cpp
    
    * Replace null pointer with falsy default constructor
    
    Fix formatting
    
    * More spaces to tabs
    Fixed one more case where the AI could pathfind through unknown wormholes.
    Refactoring to avoid any places in the code that make assumptions about how much fuel is used by various jump modes.
    Made System's list of links and neighbors a set instead of a vector, to simplify adding and removing items and checking if a given system is in the set.
    Ignore any orders telling an escort to target itself.
    Escorts with orders to move to a location will not follow you now if you leave the system.
    Made it possible for ships to take off or land on uninhabited planets if they have no other option.
    Made it so certain planets will only show up as something you can land on if your ship has certain attributes.
    Intercept (dock with moving targets) (#2386)
    
    * +Intercept +AdjustPoint
    
    * +Intercept +AdjustPoint
    
    I know that these functions are pretty similar now. I suggest skipping StoppingPoint in favor of AdjustPoint and replace the StoppingPoint calls with AdjustPoint(... targetVelocity = Zero)
    
    * cleanup
    
    * cleanup
    
    * back to StoppingPoint; Point velocity; +empty line
    
    * back to StoppingPoint
    Whitespace fix.
    ignore harvesting when cargo space is full (#2388)
    
    * ignore harvesting when cargo space is full
    
    * replaced code by !ship.Cargo().Free()
    
    I was not aware of the Free() function in the first place.
    
    * made the code smarter
    
    now: only pick a target if *that* target fits into hold.
    That is, take the size [UnitSize()] of flotsam into account.
    - First condition: If the ship has a TargetFlotsam, then check if it still can fit into cargo - that is, if the ship did not pickup other stuff inbetween.
    - Second condition: If the potential new target is small enough to fit into...
    
    * moved check on top of the loop
    
    suggested by @endless-sky
    Renamed Ship::GetTargetPlanet() to GetTargetStellar() to make it clear that it refers to a StellarObject, not a Planet.
    Avoid having "appeasing" ships dump cargo as soon as they're repaired from being disabled.
    Switched from Planet::GetSystem() to Planet::IsInSystem() wherever possible, to support wormholes (which exist in more than one system).
    Have surveillance ships hold position if they have nothing to do.
    Fixed the recent change that caused escorts holding position to not turn to track targets.
    AI: holding position to collect fighters or be refueled now takes priority over fleet orders.
    Made it so fighters won't try to board their parent if it is disabled (and will launch to escape a disabled ship if told to do so).
    Made auto-aiming only work if the target is "targetable" (not cloaked, landing, dead, etc.).
    Made it so fighters and drones can't repair or refuel other ships (and will tell you so if you ask them to help you).
    Made the autopilot's "stuck" key automatically clear if the action cannot be performed.
    Added an extra check to make sure an escort isn't trying to jump to a system it can't reach.
    Fixed a case where escorts wouldn't pathfind through wormholes.
    Avoid a situation where an escort's parent lands somewhere where the escort cannot, and the escort is stuck trying to land there to refuel.
    Fixed the "fail" noise playing on repeat if you held "jump" when out of fuel.
    Escorts will now ignore orders if you are jumping or in another system and have not told them to hold position.
    If clicking to issue a move command, made sure that if the ships are too spread out or if some are in another system, they will gather closer to the selected target position.
    Take "random velocity" into account for turrets and auto-aiming. This improves the accuracy of the Bombardment Turret a bit.
    Fixed the mission destinations note showing up just because you've selected a travel destination planet.
    Typo fix in the previous commit.
    Don't include invisible missions in the reminder of what planets you need to land on.
    Avoid settng the "LAND" key to "stuck" when you autopilot through a wormhole.
    Cleaned up how the player's destination planet is stored, and added a message telling you if you have any mission destinations in each system you jump to.
    You can now select a planet in the map in your destination system, and the autopilot will land on that planet once you reach that system.
    Made AI orders persist even when you go to different systems.
    Added a message informing you when the autopilot is engaged or disengaged.
    Made plundering personalities a bit less biased against attacking unarmed targets, but still biased against it.
    Made it so the target-picking AI ignored ships with no weapons if there are armed enemies nearby.
    Made it so ships only pick up flotsam that they are facing toward or very close to, to make it a bit less distracting.
    Made it possible to right click a ship or location to tell your escorts to follow a friendly ship, attack a hostile ship, or move to a location.
    Fleet commands now apply only to the escorts that are selected (if any).
    Now that the AI class stores a reference to the list of ships, it doesn't need to pass the list around everywhere.
    Mining and harvesting ships will now fight hostile targets if necessary.
    Added an "appeasing" personality that dumps cargo when attacked to distract its attackers.
    Added NPC AI support for harvesting flotsam. (For miners, or for distracting pirates by dumping cargo.)
    Added a "mining" personality that circles around searching for minable asteroids, then destroys them. (It doesn't know how to harvest the flotsam yet, though.)
    Scanning a ship now takes time. How long it takes, and how far away the scanner works from, now depend on "speed" and "power" attributes.
    Have stranded escorts remember where they're going so they don't have to recalculate the route every frame.
    Don't have ships try to land on wormholes to refuel.
    Fixed a bug where ships with fuel but no hyperdrive could think they were stranded and end up asking themselves for help (causing them to try to board themselves, which results in NaN (x, y) positions).
    Fixed bugs in the behavior of a stranded fighter when the player also has parked fighters.
    A "nemesis" ship will now seek other targets if no player ships are available to fight.
    Further tweaks to the cloaking AI.
    Tweaked the cloaking behavior to keep it from getting stuck right on the border of what triggers cloaking.
    Fixed a bug in my previous change to the AI stopping code.
    Fixed the AI code for coming to a complete stop so that it won't be applied at incorrect times (e.g. sometimes when stopping for a hyperspace jump).
    Fixed a bug where the station keeping AI thought it was staying close when using reverse thrusters but was not, due to an inaccurate drag estimate.
    Fixed some cases where an escort can try to land on its parent's planet even if that is in another system.
    Little fixes, hails, volume, fighters and drones (#1417)
    
    * change hails to only occur for living players
    
    * fix volume bar offset due to recent interface changes
    
    * fix carryable ships in other system were being dumped into space when you landed
    
    * fix carryable ships no longer mass select one parent
    
    this was causing issues with carryables being left behind because their potential parent would leave the system before being asked to wait for them
    
    * fix boarding panel oddities from interface update
    
    * revert UnloadBays condition
    
    this will eventually be an issue when players get annoyed that they have to keep waiting for fighters/drones to reload, but the parenting fix is the important part
    Avoid having orphaned enemy NPC drones try to dock with you.
    Starting to go through the code to add more comments and refactor things that are unclear or could cause errors down the road.
    Added a common base class for Ships, Projectiles, Asteroids, Effects, Flotsam, StellarObjects, etc. This is the first step in creating a generic collision detection framework that can deal with different object types.
    0.9.2 updates
    Fixed a crash if you press the "land" key in a system with no planets to land on.
    Fixed escorts traveling through wormholes to work even though that no longer counts as distance 0.
    Fixed double-clicking on a planet when it is not the "first" landing target that would be selected.
    A ship's "ship to assist" is now reset if the target provokes a fight with this ship (e.g. the player asks for help and then attacks).
    Tweaked the "fleeing" threshold so a ship with 50% hull will flee even if its shields are at 100%.
    Your fleet now clears their target if it lands or enters hyperspace.
    Trying to fix the problem where AI turrets fire wildly for one frame after their target is destroyed.
    When escorts are told to "gather," they now revert to the old "gather" behavior. For the new station-keeping behavior they must be under no orders.
    Escorts will now repair each other when not under orders to gather or hold position and not threatened by enemies.
    Added an "unconstrained" personality type that ignores the "invisible fence" that keeps other ships from flying too far from the system center.
    Added a new personality type, "swarming," that hovers near friendly ships (if any).
    Updated the "station keeping" AI of your escorts to better match your speed and heading.
    Have the "deploy" command only apply to escorts in the current system. Also, don't have carriers wait behind for fighters that are disabled.
    Added a "fail" sound for if you cannot perform an action (like landing or jumping).
    Refactoring: switching to using "!set.count(...)" instead of "set.find(...) == set.end()" because it's more concise, just as efficient, and seems clearer.
    Fixed handling of non-heroic enemy NPCs so they don't go inactive when low on HP.
    Update my master (#1)
    Provoking the same ship twice now makes it hostile both times. Also, an unprovoked attack now clears your bribe status with any ally of the ship you attacked.
    Fixed escort refueling in systems that have fuel but not for you. Also fixed a problem where multiple ships could request assistance from the same ship at the same time.
    Trying to speed up the fleet strength calculations.
    Adjusted the missile boat AI to only apply to fixed guns if their range is more than 2000.
    Fixed handling of reverse thrust for the new STOP command.
    Made it possible for AI ships to "stop" almost completely, by having ships apply fractional thrust if they know they are trying to stop.
    FIxed an AI bug where a ship's parent could be changed without changing a local copy of the parent pointer.
    Made afterburner cancel autopilot.
    AI ships no longer "wait" for fighters or drones that they have no space for.
    If you have a travel route planned through a wormhole, you now only automatically fly to the wormhole if jumping autopilot is engaged.
    Orphaned fighters no longer get stuck in a landing loop. They will also now follow any non-fighter of their government if there is no carrier to follow.
    Fixed a typo in the AI's ship strength calculation.
    Added support for fighter bays where the fighter it is carrying is visible, drawn either below or above the ship.
    Added a "vindictive" personality, which will keep shooting at a ship that is already dead if it has nothing better to do.
    The "fight current target" key can now override the default escort behavior of not attacking disabled enemies.
    Ships that have nowhere to flee to will now fight to the death.
    Added a "coward" NPC personality that will flee once it takes hull damage.
    Auto-aiming weights now work properly for healing weapons as well as damaging ones.
    Added support for "stopover" planets specified by a mission.
    Disable all automatic firing (even non-tracking weapons) if the selected target is friendly.
    Surveillance ships will no longer try to jump if they have no fuel left.
    Escorts that cannot jump (or are out of fuel) will no longer try to jump with you.
    Fixed a bug in my previous change to make ships not start hopeless fights.
    Non-heroic ships no longer go out of their way to attack other ships that have them severely outgunned.
    Switched back to the old order of ships, so the player's escorts will respond properly. But, added a special case in the drawing code to draw the flagship last.
    Non-surveillance ships that have scanners will now only scan ships that no ships from their government have scanned today.
    The escort AI should now jump at the same time as your flagship even though the flagship moves "after" the escorts.
    Added a preference for whether escorts expend ammo always, frugally, or never.
    Shift+B now preferentially selects disabled escorts. (Ordinary B now consistently prefers enemies.)
    Escorts with one jump remaining will now refuel before entering an uninhabited system even if it means getting left behind by your flagship.
    Wormholes now always return "???" as their name, to simplify all the code that displays planet names.
    Added support for wormhole travel in pathfinding (including stranded escorts).
    Added the ability to double-click a ship to board it, or a planet to land on it.
    Escorts that need to refuel will now only try to land on planets that will let them land.
    Tweaked the AI behavior near the "invisible fence." Also made timid ships not engage disabled targets at a distance greater than 1000.
    Auto-aiming no longer points you toward where your target used to be if the target is destroyed.
    Added support for a "wormhole" planet type.
    Added function to return a "noun" for a "planet" object, by default this is the word "planet," but can be either "station" or "moon" if the attributes include one of those two terms.
    Grammar change.
    Converted spaces to tabs
    Added additional log message when switching landing targets in a multi-object system.
    Added a "frugal" personality type that tells certain ships (including escorts) to refrain from expending ammunition unless they are outgunned.
    Add period to "Deploying fighters"
    The AI will now use reverse thrusters for landing, boarding, and hyperspace jumps.
    If you go too far from the system center, enemy ships will now ignore you rather than repeatedly bouncing against the limit of how far from the center they are willing to travel.
    The "Land" key now only toggles between multiple landing options if you press it more than once per second.
    Fixed some possible sources of inconsistencies in boarding.
    Made it impossible to "provoke" the asteroid in the terraforming mission, so you can never capture it instead of "repairing" it.
    Your escorts can no longer be ordered to attack themselves.
    Fixed a bug where if the player lands on an uninhabited planet, their escorts who are out of fuel will try to "refuel" there instead of on any inhabited planet.
    Fixed a bug where a ship could continue trying to board and assist an ally that has already been repaired by another ship.
    Fixed a bug where if your ship is captured, you retain control of it.
    The AI will no longer fire on ships entering or leaving hyperspace once they start moving quickly. This avoids having ships fire random shots when a target first appears jumping into a system at very high speed.
    Made it possible to board an escort or ally that is out of fuel to refuel it.
    Tweaked the "long range missile boat" AI to stop running away once it's out of ammo.
    Switched to using the presence of an icon to indicate that a weapon is secondary, so that there can be secondary weapons that have no fuel or ammo cost.
    Made your fleet's "shared target" (set with the 'F' key) reset if the ship is disabled, so if you capture a ship you had been targeting, your fleet will not suddenly attack it.
    Modified the AI to not switch to targeting a ship that is disabled and that is not the current target (to avoid "stealing" plunder from the player).
    Tweaked the "staying" AI to spread out to better fill the system when your ship is not present.
    Fixed a remaining bug that was allowing your ship to "board" a dead mission NPC.
    Fixed a bug where pressing the board key if no ships in system are disabled and you currently have a destroyed mission NPC selected, causes you to try to "board" that NPC at the location where it was destroyed.
    Fixed a bug where auto-fire would fire on your target even if it is in a different system.
    Derelict ships will no longer ask other ships to assist them (since they are usually NPCs that the player is supposed to help).
    Fixed a bug where the "automatic firing" preference interferes with boarding ships (because it causes automatic steering, which interrupts boarding).
    Added an experimental "reverse thruster" outfit. It's somewhat awkward to use, but it lets you slow down without facing backward, or fight while running away.
    Modified the AI to intentionally try to "scatter" ships with identical movement profiles that tend to get clumped together.
    Tweaked the AI behaviors for calling for help and abandoning the parent ship.
    Modified the landing / boarding AI. Previously it had tried not to keep jiggling the controls if the ship's heading was close enough, but that occasionally leads to your ship drifting over a planet you're trying to land on without actually landing.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Made it so boarding happens even in other systems than the one you're in, and a ship of yours can ask for assistance while in a different system.
    Modifed the ship AI to ask for help if "stranded" (i.e. out of fuel) in addition to if disabled.
    Modified the auto-aim to include non-homing secondary weapons, to help with aiming rockets.
    Tweaked the "timid" personality to be willing to fight if it's within 500 pixels of its parent.
    Various small fixes to things I found during testing.
    Modified the AI so ships won't try to plunder if there is a "live" enemy nearby.
    Took out most of the overloaded operators for Command, because it is not at all clear how they should handle the turn field, and ignoring it was causing problems.
    Eliminated, as much as possible, interface code that uses weak_ptr instead of shared_ptr.
    Reordering the functions in PlayerInfo and Ship and renaming some of the poorly named ones.
    Code cleanup: always referring to the player's ship as "flagship."
    Code regluarization: making sure the PlayerInfo object is always referred to as "player" instead of "info."
    Updating the behavior of fighters so they pick a new carrier if their parent is full, and so that when you capture a fighter it will be assigned to any ship in your fleet that can hold it (starting with your flagship).
    Fixing some glitches in the escort AI.
    Continuing to tweak the AI. Added the capability for non-player disabled ships to ask other ships of the same government for help, if there are no enemy ships in system.
    Modified the AI so fighters will not return to their mothership if it is disabled.
    Cleaned up the AI considerably, especially the logic for when a ship acts independently vs. as an escort. Also made various player commands (depoly, cloak, fight, gather, hold) apply only to ships owned by the player, not all escorts.
    Added proper error messages for if you have no hyperdrive or if your selected destination is inaccessible.
    Switched to hard-coded fuel amounts for hyper, scram, and jump drives. Also made handling of ships with multiple drives work correctly, e.g. a ship with both a hyper and a jump drive will use its hyperdrive when possible to save fuel.
    Did some significant optimization (at least 2x faster calculation times in big battles) by switching weapon attributes from a string to double map to a fixed set of values accessed by inlined functions, instead.
    Renaming some functions in preparation for moving the weapon attributes out of Outfit and into a separate class.
    Fixed a bug I introduced in auto-fire while modifying it to allow commanding your escorts to attack friendly targets.
    Modified the AI to allow the "fight my target" command to apply to non-hostile ships.
    Modified the escort AI to not abandon the parent ship unless it is destroyed, not just disabled.
    Updated handling of "escort" ships in the radar and targeting.
    Tweaked the AI for ships with only long-range weapons so they won't run away once they succeed in reaching optimal bombardment range, even if it's beyond 3000 pixels.
    Modified the escort AI to not try to "refuel" in an uninhabited system.
    Fixed a bug where ships with the "plunders" personality were destroying their targets before they could plunder them.
    Added a safety check in AI to perform no actions with a ships whose system is null, e.g. a fighter being carried inside another ship.
    Made some tweaks, in particular to make plundering pirates a little easier early on.
    Fixed the message for landing on a wormhole or unnamed planet, and also modified the jump key to include "neighbors" if you have a jump drive and have no destination selected.
    New feature: you can hold down the jump key to prepare for hyperspace but not jump yet (so that you can wait until your whole fleet is ready to jump, too).
    Fixed a possible segfault when escort pathfinding returns no normal hyperspace routes (because the parent is traveling via jump drive).
    Fixed the AI's behavior when a ship with the "staying" personality is in a different system than the ship it is supposed to attack.
    Added the nuke, and tweaked the AI to be a bit more cautious about firing it when the target is nearby.
    Another minor AI tweak: now escorts that are neither "heroic" nor "timid" are more likely to try to fight.
    Added support for mission actions to be performed when you enter a system (showing a dialog or conversation, setting flags, etc.).
    Fixed an issue where your escorts stay behind fighting even after you jump out of a system.
    Tweaked the attack AI to try to avoid the issue where a ship hovers just outside of its weapons range without moving in.
    Tweaked the landing AI to work a bit better with fast ships. It's still not quite optimal, though.
    Made a few small fixes to things that turned up in testing.
    Fixed a bug where "surveillance" ships keep their old target even if that target is destroyed.
    Fixed a bug where your reputation would change every time you boarded a ship (even if it's a ship you have boarded before), allowing the player to rack up quick reputation changes by repeatedly boarding a single ship.
    Tweaked the AI a bit more and fixed a bug I had introduced in fighter behavior.
    Made a few more tweaks to the AI.
    Fixed some places where a Random::Int() call might result in a divide by zero.
    Added convenience functions to Planet and Government to simplify the syntax for querying political state. Also fixed a few busgs in my recent Command and AI changes.
    Eliminated the Controllable class by using Command for its command bitfield, and moving its target functions into Ship. This means there is now just a single representation of commands, instead of three different ones for different purposes.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Tweaked the AI so that escorts always follow you if you are not in the same system.
    Tweaked the AI to avoid some annoying behaviors (ships running very far away, or circling each other endlessly).
    Fixed various small issues I found during testing.
    Added a pi.h file defining a PI constant for operating systems that do not have M_PI defined in cmath.
    Added a cloaking AI, and also fixed a bug where a disabled ship could cloak.
    Added a cloaking device. Have not yet written the AI strategy for when to engage it, though.
    Added a "Flamethrower" weapon that uses hyperspace fuel as ammo, and updated the AI so it will not fire off its last jump worth of fuel.
    Scram drive autopilot that's slightly more optimal and doesn't go oscillatory for fast ships (e.g. Blackbird with A3 engines)
    Added a "fleeing" personality type that will not pick targets (best combined with "timid" and "uninterested" to make it actually run away).
    Fixed a bug where if you captured and sold an NPC, it would continue to follow you as a free escort until the mission ended.
    Made several improvements to NPCs: an "uninterested" personality that does not follow the player's flagship, and improved handling of carriers. Also modified the outfit scanner to also tell you what fighters a ship is carrying.
    Fixed a few more bugs I found while beginning work on the Free Worlds story line.
    Fixed some small bugs I found while playtesting.
    Your fleet now responds to "hold position," "gather at my ship," and "fight my target" commands.
    Added a "Preferences" class to parse the preferences file, and made the load display and auto-aim controlled by preferences. Also added an auto-fire AI option.
    Made the player's auto-targeting AI not include weapons that use ammo.
    Added a "surveillance" personality type that flies around scanning whatever objects its sensors can scan, and that also launches drones and then leaves them behind in the system to do their own reconaissance.
    Fixed a typo in my previous change.
    Made sure the AI will not auto-fire missiles if it has no target selected.
    Fixed a few AI glitches, and added proper handling for weapons with submunitions.
    Modified the "scram drive" to work even if you are traveling at a high speed, as long as it is in the right direction.
    Fixed a bug in my modifications to the landing code.
    Modified the AI so that if a ship has only long-range weapons, it will try to keep its distance instead of closing with its enemies.
    Smoothed out the landing / boarding AI slightly, for moving fast ships.
    Modified auto-aim to only work if you're roughly aimed at your target already, wo it doesn't kick in when you're trying to maneuver or to shoot a non-targeted ship.
    Fixed a few glitches in the afterburner effects and AI.
    Added basic AI support for the afterburner (and added one ship variant with an afterburner, to test it).
    Fixed a few glitches in the handling of wormholes.
    Implemented wormholes. (Any planet that shows up in multiple systems is a wormhole.)
    Modified the "you are being scanned" message to not mention your ship name, so it will not appear dozens of times if you have a large fleet.
    Rather than cheating and traveling directly to the system its parent is in, the escort AI now uses proper pathfinding, and also refuels if necessary along the way.
    Modified the autopilot to persist even if you call up another dialog (e.g. the map or the hailing panel).
    Modified the AI to preferentially target its parent's target or its most recent target.
    Made the "pirate raid" on players with lots of freighters more powerful, and added a personality type for attacking only the player's ships.
    Tweaked the landing AI to be smoother and to (hopefully) avoid the bug where it does not steer until you pass the planet.
    Fixed a few small mistakes I found during play-testing.
    AI: modified the turning AI to allow turning by a fraction of a step (for smoother movement when a large fast ship is tracking a target).
    Added an afterburner outfit. It'll probably take some balancing work to make sure it's not too powerful.
    Added support for NPCs "entering" or "staying" in a system, and added a sample "pirate attack" mission (currently always offered).
    AI: made ships that are not in the current system unable to pick targets or fire. This might be why stray missiles were sometimes fired when you first entered a system.
    Switched over to the new Mission implementation. There are still some aspects that are not working yet (like, the job board).
    Fixed a bug where pressing "land" would toggle between the available planets even if you're over the planet you have selected and therefore are clearly trying to land.
    Fixed a bug where fighters were not re-docking properly.
    Fixed a bug where auto-aiming was active even if you had no target selected or the target was not in-system.
    If you have no hyperspace path chosen, made the hyperspace key select the system you're pointed at. This might be useful as a quick getaway button.
    Modified missions to not randomly be placed on planets you do not have permission to land on.
    Planets no longer allow you to land if you have a negative reputation with their government.
    Made it possible to request assistance from friendly ships and have them repair or refuel you.
    Fixed a few quirks in the "hails" from other ships.
    Modified the AI to have it scan any other ships in system, if the ship has a scanner equipped. If one of the player's ships is scanned, a message is displayed.
    Added a "Scram Drive", a hyperdrive that does not require you to come to a complete stop before entering hyperspace.
    Modified the player AI so that if you have a mission in the system you are hyperspacing to, you always exit hyperspace pointed at that planet, and the "land" key takes you to that planet first.
    AI improvements: autopilot-assisted aiming, and escorts no longer get distracted fighting enemies if you are landing or hyperspacing.
    If the "land" key is pressed repeatedly and there are multiple planets in this system you can land on, toggle between them.
    Ships with the "timid" personality trait (e.g. merchants) now only attack ships that are already attacking them; they will not step into other people's fights.
    Don’t autofire turrets except against your target.
    Don’t magically refuel stranded escorts on save and reload. (So, save fuel for each ship; shift-TARGET to target an escort, allow boarding a non-disabled escort, equalize fuel on boarding an ally)
    Fix bug where having your escort selected (because you just captured it) disabled the “target” key.
    Allow targetting, firing, etc. during autopilot navigation.
    Added a message when you press "land" that tells you if there are multiple planets to choose from.
    Modified boarding to add a two-second delay (as if the ship is taking some time to steal your cargo).
    Got permanent reputation changes working, with Ship::TakeDamage now returning a combination of PROVOKE, DISABLE, and DESTROY depending on the projectile's effect.
    Switched to having the AI track which ships have boarded which, so Ship doesn't have to (since only AI cared about knowing that, anyways).
    Added code to assign new parent ships to "orphaned" drones and fighters.
    Midified the AI to not "run away" from disabled ships, even if it is badly damaged.
    Added a warning message if you try to enter hyperspace with no fuel.
    Modified the AI to only respond to key down transitions if the game is not paused to show a dialog panel.
    Fixed some glitches in the handling of capturing, and added the capability to "repair" damaged ships of your own by boarding them. Also tweaked the escort AI to not engage enemies if badly damaged.
    Modified the AI so that once it has boarded and plundered a ship, it will destroy that ship (or go off and fight any live targets nearby, then come back and destroy it later) rather than just hanging up forever repeatedly boarding it.
    Added a Random::Real() function, and refactored to use Random everywhere (because old-fashioned rand() is considered deprecated now.)
    Got fighters to dock with their carriers again once they are recalled.
    Got fighters in fleets working.
    Got carrying and launching of fighters working (but not buying or recalling them, yet).
    Added a "Messages" class to allow any thread to safely add a message to the display.
    refactoring: for clarity, replaced Ship::IsDisabled() and IsFullyDisabled() with IsOverheated() and IsDisabled().
    Modified the boarding process to take time, and to rotate the boarding ship to line up with its victim, so that it looks more "realistic" when other ships do it.
    Added a "personality" class representing whether a fleet of ships does things like plundering opponents (which pirates now do).
    Added a rudimentary ship-boarding AI.
    Implemented a placeholder version of boarding and plundering (without a dialog yet to choose what items you steal).
    Added a distinction between "fully disabled" ships (hull below the minimum), and others (i.e. temporarily disabled due to overheating). Modified the AI to ignore fully disabled ships.
    Modified provocation to fade over time, e.g. if you accidentally shot an allied ship but then don't fire on them again, eventually they will "cool down" and stop attacking you.
    Added an experimental, tunable "confusion" value to adjust the skill level of individual ship AIs.
    Made some more tweaks to the target-choosing AI.
    Updated the target-choosing AI to immediately pick a new target if the old one is disabled.
    Fixed a math error in the targeting AI.
    Added cycling through all targets, and modified "target nearest" to include disabled enemies only if no non-disabled enemies are present.
    AI: modified to ignore disabled enemies unless there are no other enemies nearby.
    Tweaked the auto-hyperspace AI to work better with slow turn rates.
    Updated the AI to not try to fight if it has no weapons to fight with.
    Modified the escort AI to move to intercept any hostile target that comes close, instead of continuing to just stay near the parent ship.
    Added a "flash" when entering hyperspace. Also increased the minimum speed for engaging the hyperdrive, so it will be easier to slow down to that speed.
    Added GPL statements to all source code files and added a license.txt file.
    Updated how the UI panels are handled to allow the main menu to be called up regardless of what the game state is.
    Switched to using the key mappings loaded from the preferences (so, they are user customizable).
    Added a new ship, the Hawk.
    Added a secondary trigger key for weapons that use up ammo, and a display of ammo remaining for each.
    Limited the maximum velocity a ship can attain from impacts.
    Updated the AI to fire each individual weapon on a ship only if it can hit something.
    Added an Armament clas for tracking weapon logic (mounting points, reloading, streaming, etc.).
    Added a very rudimentary combat AI.
    Uploaded all the files from my local repository to Google Code.
    fix: Also consider "moving to position held" as HOLD position (#5040)
    feat(mechanics): player can deploy/recall individual carried ships (#4719)
    
    * Deploy and recall only selected by the player instead of all ships.
    
    Implemented by a deploy variable per (carried) ship instead of a single global variable.
    
    Tested (OK):
    - Deploy and recall for flagship
    - Deploy of only subset of ships
    - Deploy and recall for escort
    - Deploy of only subset of ships (together with escort)
    - Deploy and recall of AI controlled ships
    - Return (and not deploying) damaged fighters
    - Recall of fighters (to escort) if player is out of system
    
    * Process review comment.
    
    * Remove some unneeded whitespace
    
    * Process review comments.
    
    - Issue deploy commands to the fleet when no deployable ships are selected.
    - Removed never displayed message.
    - Renamed IsLaunching to HasDeployments for clarity.
    - Renamed fighter to "carried ship" for consistency.
    
    Tested that deploy with non-deployable ships selected will deploy for the full fleet.
    
    * refactor: Update methods
    
     - rename & reoder Ship class methods
       - apply only to Player ships, but "IsDeploying" sounds applicable to all ships
     - update `IssueDeploy`
       - move conditions into shared lambda
       - group ships to deploy and ships to recall, to limit iteration passes
       - restore silent behavior of pressing D when no ships can deploy/recall
    refactor: Swap target parameter type of some AI methods from `Ship` to `Body` (#4865)
    
    Those methods only use properties which are already available in the Body base-class, and allow the methods to be used in future changes, e.g. to circle around planets, keep station with asteroids, or swarm flotsam.
    feat(mechanics): Added a command that will bring the flagship to a stop (#4745)
    
    * Move reading of Shift modifier from AI.cpp to Command.cpp.
    
    This places reading of the Shift key state together with regular input key reads.
    
    Tested (and no issues seen):
    - N       -> cycle through ships
    - Shift-N -> cycle through escorts
    - T       -> talk to selected ship
    - shift-T -> talk to selected planet
    - B       -> board enemy ship
    - shift-B -> board escort
    - R       -> select nearest enemy
    - shift-R -> select nearest ship
    
    * Add stop command to stop all movement of players flagship
    
    Used Shift+H as key to perform full stop of flagship.
    
    * Remove no longer needed SDL include from AI.cpp
    
    * "stop command" is shift-down instead of shift-hold
    
    * Bug fix for this problem:
    
    1. user presses and holds SHIFT
    2. user presses and holds BACK
    3. ship engages reverse thrusters (BACK) for one step
    4. ship disengages reverse thrusters and then activates STOP
    
    * Process review comments
    
    Removed duplicate code.
    Minor text improvement.
    
    * Cleaned up HandleKeyboardInputs section.
    
    * Use local shift variable.
    
    * Fix comments
    
    * Add message informing the player that the flagship is stopping.
    
    * Updated message to indicate one-time action.
    
    * style: update Stop command's feedback message
    
    Co-authored-by: NomadicVolcano <60122264+NomadicVolcano@users.noreply.github.com>
    fix(input-handling): Only update AI with player commands when actively in-flight (#4797)
    
    * Only handle Engine keyboard inputs when the game is not paused
    
    Added isActive check around keyboard reading to prevent reading of
    keyboard inputs for the engine while the game is paused.
    
    * move isActive check fully to Engine.
    
    Nearly all of the isActive checking was already done in the Engine.
    This commit moves the isActive check from UpdateKeys also there.
    refactor(input-handling): Move kb/m reads from AI & Engine to only Engine (#4715)
    
    * Add an "And" function to the Command class.
    
    * Move keyboard inputs from AI to Engine
    Combine mouse and keyboard inputs into single activeCommands variable
    
    Tested (OK, no issues seen):
    MENU
    MAP
    INFO
    FORWARD, LEFT, RIGHT, BACK, PRIMARY, AFTERBURNER
    SCAN
    DEPLOY
    HAIL
    BOARD
    CLOAK
    LAND (autopilot)
    LAND (switch landing targets)
    LAND (landing based on mouseclick)
    JUMP (autopilot)
    JUMP (insufficient fuel warning)
    JUMP (WAIT, fleet waiting for jump)
    TARGET (cycle through enemy ships)
    NEAREST (cycle through friendly ships)
    SELECT (switch secondary weapon)
    SECONDARY (fire secondary weapon)
    DEPLOY
    FIGHT
    GATHER (looks the same as before the change)
    HOLD (looks the same as before the change)
    AMMO
    
    Signed-off-by: Peter van der Meer <peter.vd.meer@gmail.com>
    
    * Add comments on Command and made comments full sentences.
    
    - Documented the use of the WAIT command.
    - Made all comments full sentences, included full stops.
    
    * Fixed clearing commands from the wrong variable.
    
    * Remove duplicate audio-repeat-avoidance construct
    
    Repeatedly playing audio was already resolved by forwarding autoPilot
    commands only 1 single frame through activeCommands and by clearing
    the autoPilot at the same time as giving the error-message and playing
    the fail sound.
    
    * Fix an issue where JUMP is cleared before out-of-fuel error-message.
    
    The targetSystem gets set during emergency jumps (without a travel plan).
    If such situation happens and there is insufficient fuel or no jump or
    hyperdrive, then we still want the warning to be sent on the first time
    the jump command is given.
    style: Rename auto-pilot variables to make their function more clear (#4485)
    
    * Rename cancel commands to cancel commands
    
    The AI class lists a number of commands which will cancel the autopilot.
    Those commands can be given by keyboard, but also by mouse (for example the land and board commands).
    Renamed AutopilotCancelKeys to AutopilotCancelCommands to reflect that this is not only keys.
    
    * Rename keyStuck to autopilotCommand
    
    The keyStuck variable is exclusively used to perform auto-pilot commands (triggered by keyboard and mouse actions).
    Renamed the variable to make the function more clear.
    
    * Renamed autopilotCommand to autoPilot.
    Allow restriction of scanning / fining by governments (#3187)
    
    * Governments store a filter describing where they enforce laws
    
      - The player can be fined or scanned in any system or planet that matches one of the enforcement zones.
      - If no zones are defined, then the government has universal jurisdiction
    
    * Only ships or planets with enforcement authority perform scans
    Add additional comments to AI class
    Improve landing message handling in AI::MovePlayer
    
     - Once the player starts hyperspacing, do not print landing messages (since they will be for the to-be-departed system)
     - Require that the player's StellarObject target is in the player's current system (instead of possibly being in the destination system)
    Cache friend/foe list for each government to limit ship iteration (#2788)
    
    * Preserve the roster of ships for use by other methods
    
     - Ships and governments are added to a roster to speed up strength-checking, so remembering these arrangements for other loops is useful.
     - Iterate this roster to find hostile or friendly governments, instead of needing to check every ship to determine its government again.
    - Updated targeting/aiming, firing, swarming, surveillance, and cloaking logic to use this new function.
    
    * Cache ally/enemy lists for each government
    Split reboarding logic to own method
    
     - Avoid attempting to board a disabled parent (lest one attract enemy attention to it)
     - Avoid stranding the carrier when dispensing fuel
     - Ammo outfits should come from the carrier's installed outfits
       - Prevents "infinite resupply" if the carrier is picking up ammo as flotsam
       - Similar to ability to restock launchers when plundering disabled enemies
     - Add reboarding logic for harvesting fighters
    Fixed some AI records that weren't cleared when they should be.
    Hostile escorts consider parent position before using "follow" behavior
    
     - "Constrained" ships should not KeepStation with a hostile parent just because both ships are beyond the "invisible fence."
    Improvements to the Cloaking AI (#3585)
    
    * Cloaked ships will decloak to repair or refuel allies
    
     - Ships can ask cloaked ships for help, provided they share a government
    
    * Cloaking enemies flee from hostile ships if they can repair
    
     - While within the "fence", move away from the nearest enemy and the center
     - If beyond the fence, move back towards the center
     - Do not start/continue cloaking if you cannot fully cloak before using all your free fuel (i.e. cloaking would simply waste your time when you could decloak and fight back)
    
    * AI fleets with cloak will cloak in unison
    Refactor some AI functions (#3531)
    
    * Refactor strength-updating code into private method
    
    * Use roster to limit scope of strength update loop
    
    * Split swarming behavior to own method
    
     - Extended logic checks to ensure swarmCount entries get decremented when the targeting ship lands
     - Increased "rendezvous velocity" from 0 to .5 max speed, in the direction of the target
    
    * Bugfix for swarming behavior
    
     - Reordering of personality behaviors after autofiring meant that swarming ships (which have no or a non-hostile target) would always get their target cleared, outside of a code block that knows to manage swarmCount
     - Only ships which entered the player's system would get swarmed, and only for a short period of time (before swarmCount could "fill up" the new ships' quota of swarming assistants).
     - Restores effectively pacifist behavior of `personality swarming` that was observed from v0.9.1 to v0.9.7
    
    * Move Hyperspacing condition check
    
     - FindTarget and Autofire make no sense for hyperspacing ships as they cannot fire - Ship::Fire requires the ship to not be hyperspacing.
       - Ships can still aim turrets at other ships
     - Ships which are launching or landing similarly do not need to decide how to move
       - Updated the DoSwarm exit check so that a landing ship does not ever take a new target
       (a ship decides to land on one frame, and then begins decreasing zoom on the next, so Swarming ships that choose to land will still release their target)
     - Remove "IsTargetable" from checks that should be available to ships which are not in the player's system (such as assisting).
       - IsTargetable references the `forget` parameter, which is only 0 if the ship is in the player's system.
    
    * Cache a ship's carried status during FinishLoading
    
    * Update carried ship handling block
    
     - Rescope is drone/is fighter check to only carried ships
     - If a fighter had to choose a bayless parent (because none of its allies could carry it), only check for a new parent every ~5s rather than every step.
     - Removed duplicated BaysFree check (CanCarry performs it too).
    
    * Retreating applies to fighters and other NPCs at the same "health"
    
    * Update FindTarget
    
     - Changed ambiguous 'isPlayerEscort' to 'isYours' since it is referring only to a player-owned ship and not also NPCs with personality escort
     - Used existing variables if they had already been defined (person, system)
     - Rescoped attribute.Get calls to only be done if they are relevant, rather than for every ship.
     - If an NPC isn't targeting a hostile ship (e.g. it is going to scan its target), then it doesn't need to consider retreating.
    
    * Remove duplicated FindTarget call
    
     - FindTarget is called prior to entering DoSurveillance, so if the ship has no combat target, seeking one again on the same frame will not yield different results
    
    * Update DoSurveillance
    
     - Rescope attribute calls into only the branches which need them
     - Performing an "atmosphere scan" of a station was probably unintended
     - Drop unnecessary "hyperdrive" check
       - JumpsRemaining is 0 if the ship has no hyperspace ability, thus only checking for a jump drive is sufficient
    Add 'notoriety' tracking, for tracking ShipEvents vs. entire factions
    
     - If a hostile ship boards a member of a faction, that faction is more likely to target that ship than a hostile ship that has not boarded their ally
    Potential error fixes from @AskePit.
    Refactored Engine::CalculateStep(), splitting each set of calculations into a separate function to improve clarity and to open a path for possibly multi-threading the most expensive calculations.
    Convert between MOVE and HOLD orders to hold a given position
    
     - Ships that reach the designated MOVE_TO target change the order to HOLD_POSITION
     - Ships that are told to "hold position" compute the position they should hold (via StoppingPoint)
       - If knocked away from this position, they will now return to it.
    Update Afterburner Logic (#3063)
    
    * Update Afterburner Logic
    
     - In addition to fuel usage, NPCs should consider its energy usage and heat output before deciding to use it (endless-sky#1819).
     - Consider afterburner usage whenever MoveToAttack is used (ships, asteroids)
     - Consider afterburner usage if harvesting flotsam.
    
    * Support afterburner-only AI movement control
    
     - Compute the displayed MaxVelocity and Acceleration values with afterburner thrust if no forward thrusters are present.
     - Adds afterburner heat, energy to the ShipInfoDisplay for "Moving:"
     - If the ship has the FORWARD command, but no thrust, the afterburner is attempted.
     - Update Ship::Acceleration and Ship::MaxVelocity to reflect the mode of operation to avoid divide-by-zero AI::StoppingPoint calculation.
    
    * Cache thrust attribute reads
    Made it so ships that aren't "unconstrained" won't target a ship that has been outside the "invisible fence" for more than 10 seconds.
    Refactor AI::Step's "Find someone to assist me" section (#2861)
    
    * Refactor "Find someone to assist me"
     - Move into into separate function
     - Use std::vector to store possible choices
     - Randomly choose a possible helper
     - Reduce frequency of calls to avg. 2 per second
    
    Comparing shared_ptr is an automatic stored pointer comparison, e.g. implicit .get()
    
    * Add CanHelp/HasHelper functions
    
     - Enable a ship to remember who it asked to help between AI::Step calls, if any, to avoid re-evaluating find-helper logic.
     - Separate logical decision-making (should help) from physical decision making (can help).
     - Prefer asking faster ships for help.
    bugfix: MOVE_TO orders refer to a specific System (#2589)
    
    * MOVE_TO orders refer to a specific System
    
    Issuing MOVE_TO orders now includes a target system, allowing selected escorts to navigate across system boundaries to the specified position, instead of navigating to that point in their current system.
    
    Ref #2584, Closes #2580, Closes #2382
    
    * Improve readability+clarity
    Added support for independent turret tracking (and, limited turret turn rates) for everything but anti-missiles.
    Make AI "Stop" include turning times when considering reverse thrusters (#2346)
    
    * Add optional final facing direction to AI Stop command
    
    * Make the hyperspace autopilot use reverse thrusters to stop when faster
    
    * Modify hyperspace AI to only stop and turn with regular hyperdrives
    
    * Update AI.cpp
    
    * Replace null pointer with falsy default constructor
    
    Fix formatting
    
    * More spaces to tabs
    Intercept (dock with moving targets) (#2386)
    
    * +Intercept +AdjustPoint
    
    * +Intercept +AdjustPoint
    
    I know that these functions are pretty similar now. I suggest skipping StoppingPoint in favor of AdjustPoint and replace the StoppingPoint calls with AdjustPoint(... targetVelocity = Zero)
    
    * cleanup
    
    * cleanup
    
    * back to StoppingPoint; Point velocity; +empty line
    
    * back to StoppingPoint
    Avoid a situation where an escort's parent lands somewhere where the escort cannot, and the escort is stuck trying to land there to refuel.
    Cleaned up how the player's destination planet is stored, and added a message telling you if you have any mission destinations in each system you jump to.
    Made it possible to right click a ship or location to tell your escorts to follow a friendly ship, attack a hostile ship, or move to a location.
    Fleet commands now apply only to the escorts that are selected (if any).
    Now that the AI class stores a reference to the list of ships, it doesn't need to pass the list around everywhere.
    Added an "appeasing" personality that dumps cargo when attacked to distract its attackers.
    Added NPC AI support for harvesting flotsam. (For miners, or for distracting pirates by dumping cargo.)
    Added a "mining" personality that circles around searching for minable asteroids, then destroys them. (It doesn't know how to harvest the flotsam yet, though.)
    Fixed a bug in my previous change to the AI stopping code.
    Fixed the AI code for coming to a complete stop so that it won't be applied at incorrect times (e.g. sometimes when stopping for a hyperspace jump).
    0.9.2 updates
    When escorts are told to "gather," they now revert to the old "gather" behavior. For the new station-keeping behavior they must be under no orders.
    Added a new personality type, "swarming," that hovers near friendly ships (if any).
    Updated the "station keeping" AI of your escorts to better match your speed and heading.
    The "fight current target" key can now override the default escort behavior of not attacking disabled enemies.
    Non-heroic ships no longer go out of their way to attack other ships that have them severely outgunned.
    Non-surveillance ships that have scanners will now only scan ships that no ships from their government have scanned today.
    Added a preference for whether escorts expend ammo always, frugally, or never.
    Added the ability to double-click a ship to board it, or a planet to land on it.
    Added a "frugal" personality type that tells certain ships (including escorts) to refrain from expending ammunition unless they are outgunned.
    The AI will now use reverse thrusters for landing, boarding, and hyperspace jumps.
    The "Land" key now only toggles between multiple landing options if you press it more than once per second.
    Modified the AI to intentionally try to "scatter" ships with identical movement profiles that tend to get clumped together.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Removed some TODOs that have already been fixed.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Eliminated, as much as possible, interface code that uses weak_ptr instead of shared_ptr.
    Code regluarization: making sure the PlayerInfo object is always referred to as "player" instead of "info."
    Cleaned up the AI considerably, especially the logic for when a ship acts independently vs. as an escort. Also made various player commands (depoly, cloak, fight, gather, hold) apply only to ships owned by the player, not all escorts.
    Fixed a bug where your reputation would change every time you boarded a ship (even if it's a ship you have boarded before), allowing the player to rack up quick reputation changes by repeatedly boarding a single ship.
    Eliminated the Controllable class by using Command for its command bitfield, and moving its target functions into Ship. This means there is now just a single representation of commands, instead of three different ones for different purposes.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Added a cloaking device. Have not yet written the AI strategy for when to engage it, though.
    Made several improvements to NPCs: an "uninterested" personality that does not follow the player's flagship, and improved handling of carriers. Also modified the outfit scanner to also tell you what fighters a ship is carrying.
    Your fleet now responds to "hold position," "gather at my ship," and "fight my target" commands.
    Added a "Preferences" class to parse the preferences file, and made the load display and auto-aim controlled by preferences. Also added an auto-fire AI option.
    Added a "surveillance" personality type that flies around scanning whatever objects its sensors can scan, and that also launches drones and then leaves them behind in the system to do their own reconaissance.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Rather than cheating and traveling directly to the system its parent is in, the escort AI now uses proper pathfinding, and also refuels if necessary along the way.
    Made it possible to request assistance from friendly ships and have them repair or refuel you.
    Added a "Scram Drive", a hyperdrive that does not require you to come to a complete stop before entering hyperspace.
    Don’t magically refuel stranded escorts on save and reload. (So, save fuel for each ship; shift-TARGET to target an escort, allow boarding a non-disabled escort, equalize fuel on boarding an ally)
    Allow targetting, firing, etc. during autopilot navigation.
    Got permanent reputation changes working, with Ship::TakeDamage now returning a combination of PROVOKE, DISABLE, and DESTROY depending on the projectile's effect.
    Switched to having the AI track which ships have boarded which, so Ship doesn't have to (since only AI cared about knowing that, anyways).
    Modified the AI to only respond to key down transitions if the game is not paused to show a dialog panel.
    Got carrying and launching of fighters working (but not buying or recalling them, yet).
    Added a "Messages" class to allow any thread to safely add a message to the display.
    Added a rudimentary ship-boarding AI.
    Added GPL statements to all source code files and added a license.txt file.
    Switched to using the key mappings loaded from the preferences (so, they are user customizable).
    Added a secondary trigger key for weapons that use up ammo, and a display of ammo remaining for each.
    Updated the AI to fire each individual weapon on a ship only if it can hit something.
    Added a very rudimentary combat AI.
    Uploaded all the files from my local repository to Google Code.
    feat(mechanics): Spaceport news can now be triggered based on the player's conditions (#5334)
    fix(news): avoid picking empty News items
    feat(News): Add support for add/remove syntax
    
     - Phrases and LocationFilters support "add" syntax by default
     - "remove" applied to a location, message, or name removes all respective values
     - Can "remove" all portraits or specific portraits "remove" case
    Added a "news" system for displaying messages from local inhabitants you meet in the spaceport.
    fix(graphics): Avoid velocity-based "sliding" of Visuals
    
    Ref 8a13777ad8ca580e34e01e8129ba61232fcaafbf
    
     - Only projectiles are drawn with a + .5*velocity shift
       - This should be removed in the future pending custom Sprite drawing positions
     - Remove unused DrawList method
     - Avoid creating afterburner visuals based on non-final Ship::velocity value
    
    Closes endless-sky#4261
    Switched to using 2D "texture arrays" for sprites, so all the frames fit into a single texture.
    Made it possible to zoom the view in or out (via the scroll wheel or the +/- keys) without changing the UI zoom.
    Added a common base class for Ships, Projectiles, Asteroids, Effects, Flotsam, StellarObjects, etc. This is the first step in creating a generic collision detection framework that can deal with different object types.
    Cull sprites outside the screen, to reduce the number of draw calls.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added an experimental sprite shader that can render motion blur. This makes everything less choppy, but more blurry, and takes a lot more GPU power.
    Added a cloaking device. Have not yet written the AI strategy for when to engage it, though.
    Spell-checked the comments.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Added GPL statements to all source code files and added a license.txt file.
    Updated DrawList with a way to draw a Sprite instead of an Animation.
    Uploaded all the files from my local repository to Google Code.
    feat(mechanics): Spaceport news can now be triggered based on the player's conditions (#5334)
    test: Support test case execution, locally and in CICD (#4998)
    
    * Extend CI environment with graphical testframework
    Adds CI workflow for Ubuntu 16.
    Adds minimal code to main.cpp to run hardcoded empty testcase.
    Changes script for headless testing to run hardcoded testcase.
    
    * Fix coding style issue.
    
    * Updated step names to differentiate between tests
    Renamed existing tests to parsetest_*.
    Renamed the new test to autotest_*
    Re-ordered tests so that all parse-tests are together.
    
    * Changed GameData::Progress check to (menuPanels UI)->IsInitialized.
    As based on review-feedback. Using the same pattern as isDone.
    Removed the isReady variable in the anonymous namespace of MenuPanel.
    Also replaced explicit default constructor for UI by implicit constructor.
    Tested:
    - Quit from main menu
    - Exit during flight (by closing window)
    - Ran the automated test
    
    * refactor: move "are we loaded?" from UI to GameData
     - Add "const" accessor GameData::IsLoaded & backing boolean
     - Remove UI->IsInitialized & associated branching
     - Update class comments / method names to distinguish simple accessors & identify future refactoring opportunities
        Audio::Progress -> Audio::GetProgress, as it is already a simple accessor
     - Disable moving/copying the SpriteQueue class, given that it manages threads
    
    * docs: update --help and man entries
    
    * scripts: exit early if not on a supported headless platform
    
    * chore: Update GameLoop params
    Preloaded conversation data, test, or debug mode are not modified.
    
    Co-authored-by: tehhowch <tehhowch@users.noreply.github.com>
    Treat "shipyard" and "outfitter" as other game data
    
     - Add reference checking to "shipyard" and "outfitter" items
        - Warn if "seen" (e.g. in a planet definition or as outfit cargo) but not given any initial items
     - Export Shipyards collection from GameData (to match Outfitters)
     - Update Planet::Load to use Shipyards() and Outfitters() in lieu of passed parameters
    'outfitters' specifies possible carried outfits
    
    ... just as "commodities" specifies possible carried commodities.
    Rather than rewriting the same list of outfits multiple times for similar fleets, name an `outfitter` that has the desired possible outfit cargo.
    e.g.
    fleet "My Fleet"
      outfitters "Ammo South" "Ammo North"
    Quit after displaying tables (#3899)
    
    * Quit after displaying tables
    
    * Update man page with launch prevention of -s and -w options
    Added a "news" system for displaying messages from local inhabitants you meet in the spaceport.
    Switched to using the new ImageSet class for batch-loading of sprites. (But still with each frame going into separate textures.)
    Added an ImageSet class, which will store all data that must be loaded for a given sprite and all functions for parsing sprite paths.
    Made solar collection and ramscoop rates vary from system to system depending on the star(s).
    Added support for special "persons" with multiple ships. The "person" can regenerate all its ships unless you kill the flagship.
    Moved all ratings scales into a common "rating" data type to simplify the code for handling them. Also made it so the same rating level is shown in the text and the numbers for pirate raids, so the text changes at the same time as the number does.
    Convey raid fleet spawn likelihood via Player Info menu (#3087)
    
    * Move raid fleet attraction to PlayerInfo
    
    * Display raid fleet threat in PlayerInfoPanel
    
     - Roughly log-spaced tiers. The displayed number indicates the expected number of raid fleets per jump (if the system has a raid fleet).
     - If any raid fleets are spawned, a message is sent to the screen.
    
    * Display both cargo and strength components, textualize threat level
    
     - Shows each component of raid fleet attraction to the player
     - Gives a categorical rating of the number of raid fleets expected
    
    * Use likelihood of at least one raid as the threat indicator
    Added checks for references to undefined data (systems, outfits, etc.).
    Moved the combat rating names to a data file.
    Added support for showing a list of all installed plugins, plus the icon and about text for each (if any).
    Made it possible to specify the background haze image for each star system.
    Split the preferences into multiple pages (controls, settings, and plugins) to make space to display all the "hidden" settings and for new key controls to be added if needed.
    Moved the beginner help messages out into a data file.
    Added custom messages for when you try to land on certain unusual stellar objects (like a lava world, or a nascent wormhole).
    Update each system's list of its visible neighbors whenever a change to the game data alters the map.
    Systems can now define "minables" in addition to normal asteroids.
    Added "tooltips" that pop up to explain ship and outfit attributes in the shop panels and the ship info panel.
    Added a relatively simple but robust dynamic trade implementation.
    Added support for special commodity classes, just to be used for random cargo in missions that is not one of the basic commodity types.
    Added warning messages whenever a line of a data file or saved game is unrecognized.
    Made it possible for plugins to supply new sounds.
    Added support for unique "persons" who can show up in any system.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added the ability to define the starting conditions (credits, mortgages, location, salaries, licenses, etc.) in the data files, to support "total conversion" mods.
    Added support for plugins, placed either in the "resources" directory or the "config" directory.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Added a "Preferences" class to parse the preferences file, and made the load display and auto-aim controlled by preferences. Also added an auto-fire AI option.
    Renamed "ShipName" to "Phrase" since it is also used for random hail messages.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Began adding support for "Game Events" that alter the galaxy at a certain point in time. (So far all they do is modify condition flags, to test that they are indeed triggering on the proper day.)
    Added a "galaxy" data type for placing the background images in the map panel.
    Added a Politics class that can handle governments coming to the aid of allies, tracking the player's reputation in response to different actions, etc.
    Added support for basic "special missions," offered in the Spaceport on certain planets.
    Added deferred loading of the landscape images, which reduces the startup time and also reduces the initial memory usage from about 380 MB to 150 MB.
    Made GameData::Colors() publicly accessible instead of only sharing them with Interface.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Added a "Files" class which abstracts out filesystem operations (including finding the resource and config path for each OS). That allows me to remove the boost dependency, which will make porting easier.
    Added a "Fleet" class, representing a set of ships that might appear in a given system plus the logic for placing them (taking off from a planet or entering via hyperspace).
    Added GPL statements to all source code files and added a license.txt file.
    Added a scrolling list of credits in the main menu.
    Added a preferences panel for customizing the key controls. (They are not yet used, though.)
    Added support for "shipyard" and "outfitter" attributes on planets.
    Uploaded all the files from my local repository to Google Code.
    Fixed minor code style issues (#4428)
    Added a "Dictionary" class that works like an STL map<string, double> but allows faster lookup and no string allocations.
    test: Support test case execution, locally and in CICD (#4998)
    
    * Extend CI environment with graphical testframework
    Adds CI workflow for Ubuntu 16.
    Adds minimal code to main.cpp to run hardcoded empty testcase.
    Changes script for headless testing to run hardcoded testcase.
    
    * Fix coding style issue.
    
    * Updated step names to differentiate between tests
    Renamed existing tests to parsetest_*.
    Renamed the new test to autotest_*
    Re-ordered tests so that all parse-tests are together.
    
    * Changed GameData::Progress check to (menuPanels UI)->IsInitialized.
    As based on review-feedback. Using the same pattern as isDone.
    Removed the isReady variable in the anonymous namespace of MenuPanel.
    Also replaced explicit default constructor for UI by implicit constructor.
    Tested:
    - Quit from main menu
    - Exit during flight (by closing window)
    - Ran the automated test
    
    * refactor: move "are we loaded?" from UI to GameData
     - Add "const" accessor GameData::IsLoaded & backing boolean
     - Remove UI->IsInitialized & associated branching
     - Update class comments / method names to distinguish simple accessors & identify future refactoring opportunities
        Audio::Progress -> Audio::GetProgress, as it is already a simple accessor
     - Disable moving/copying the SpriteQueue class, given that it manages threads
    
    * docs: update --help and man entries
    
    * scripts: exit early if not on a supported headless platform
    
    * chore: Update GameLoop params
    Preloaded conversation data, test, or debug mode are not modified.
    
    Co-authored-by: tehhowch <tehhowch@users.noreply.github.com>
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Using float v. double in some cases of -Wdouble-promotion
    
     - Add some <algorithm> headers for uses of std::min or std::max
    Enable save-aware data parsing without modifying the save
    
    https://github.com/endless-sky/endless-sky/pull/3994
    
    * Allow parsing game data for content errors
    
     - Specify the `-p` or `--parse-save` command-line option to load the most recent save and allow the game to perform reference-checking.
     This option exits before initializing SDL (e.g. headless operation), and does not save the file before exiting.
     - Updated the man page and help text as well
    
    * Include whitespace warnings in DataFile::Load
    
     - Print warnings to stderr and errors.txt when spaces and tabs are mixed
     - Provides a warning if a line starts with a space, and then tabs are later used in the file for indenting
     - Provides a line-specific warning if spaces and tabs are intermixed on the same line.
     - Fix existing mixed whitespace indentation
    
    * Extend CI tooling with data parsing test
    
     - add bash script for Travis CI
     - add PS script for AppVeyor CI
    
    The scripts invoke the new `-p` command-line flag and test whether the `errors.txt` file was created.
    If so, this is taken to mean that a parsing error occurred. The scripts can be executed locally by passing the appropriate executable as the argument to the script.
    
    * Add OSX build environment
    
     - Homebrew installations of the developer dependencies (per the developer readme).
       (This will eventually result in a broken build when a core dependency publishes a new point release, at which point the XCode project will need to be updated.)
    
    * Avoid automatically saving upon game load
    
     - Closes https://github.com/endless-sky/endless-sky/issues/3510
     - Only allow saving after the player has explicitly "entered" their savegame
       Players explicitly 'enter' their savegame via the keypress / button:
       - 'Enter Ship' (after first launching the game)
       - 'Load Game' (after pressing Load/Save and then selecting a different save)
    
    In other words, if you tell the game, "Yes, this is the save I want to play," its save file will be updated when you close the game.
    If you didn't explicitly tell the game that, then the save file will not be modified.
    Number formatting is now limited to one decimal place, which is enough for all current attributes. Also added a separate formatting function for numbers of credits.
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Add gl_header include for uses of glClear
    Truncate long player / player flagship names, and plugin names (#3395)
    
    * Truncate long player / player flagship names, and plugin names
    
    * Restored proper RHS margin for plugin text
    Made it possible for the start conditions to include the player owning one or more ships.
    Code cleanup: "static" is redundant inside a C++11 anonymous namespace.
    Moved the actions that have to be done each time player.New() or player.Load() is called (resetting messages, reverting the game data, and then applying any changes) directly into those functions so they don't have to be called separately. (There was previously a bug where messages didn't reset if New() was called from the main menu.)
    Added a helper function for the common task of splitting a string into paragraphs.
    Made the "New Pilot" button work if a pilot is loaded but the pilot is dead.
    Made the "New Pilot" kepboard shortcut only work in the main menu if no pilot is loaded.
    Revert "Made it so that all mission actions can display conversations or dialogs."
    
    This reverts commit 181603905497b28c403864258d4bd2935b0fba90.
    Made it so that all mission actions can display conversations or dialogs.
    Separated the elements of the main menu into different "interface" objects to avoid duplication.
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    Added a common base class for Ships, Projectiles, Asteroids, Effects, Flotsam, StellarObjects, etc. This is the first step in creating a generic collision detection framework that can deal with different object types.
    Fixed the "flicker" when you first enter ship and the planet panel does not pop up immediately.
    Fixed a recently introduced bug where the view would be cleared if you returned to the main menu.
    The main menu no longer hangs if you "enter ship" just as it finishes loading.
    Moved all file IO into the Files class, so it will be easy to add support for UTF16 paths under Windows.
    Tweaked the pointer shader to draw a teardrop shape instead of a triangle.
    Widened the panels in the menu screen by 20 pixels, so the credits won't be so scrunched.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Took out most of the overloaded operators for Command, because it is not at all clear how they should handle the turn field, and ignoring it was causing problems.
    Code cleanup: always referring to the player's ship as "flagship."
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Added proper handling for a dead player (through conversations, combat, or a failed attempt to capture a ship).
    Modified the new mission implementation so that missions can also be offered as soon as you land (e.g. to handle continuation of existing missions), and used that to create a "first contact" conversation that is shown the first time you land on any Quarg world.
    Replaced the old, very limited "callback" class with function pointers that can be given any method name.
    Fixed a few glitches, including a segfault when clicking the "new pilot" button.
    Fixed a crash when clicking "New Pilot" in the main menu.
    Added two new classes, Format (for formatting numbers) and Table (for formatting tables).
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Refactored to consistently call the PlayerInfo, "player", and the player's flagship, "flagship".
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Added a "Files" class which abstracts out filesystem operations (including finding the resource and config path for each OS). That allows me to remove the boost dependency, which will make porting easier.
    Added an option to toggle fullscreen mode. It's still a little buggy on Linux.
    Switched to always using the Color class instead of passing around RGBA float arrays.
    Fixed a few final issues in the load / save / new mechanics. It all seems to be working correctly, now.
    Added GPL statements to all source code files and added a license.txt file.
    Got "New Pilot" working, including visiting the shipyard and picking out an initial ship.
    Added a "New Pilot" dialog (which doesn't yet move you straight to the shipyard, though).
    Added a Load / Save panel (not yet functional).
    Updated how the UI panels are handled to allow the main menu to be called up regardless of what the game state is.
    Tweaked the credits a bit to be less obtrusive.
    Added a scrolling list of credits in the main menu.
    Added background graphics for the preferences panel.
    Added display of the current pilot's information in the main menu.
    Added a preferences panel for customizing the key controls. (They are not yet used, though.)
    Mocked up the main menu interface (but it is not functional yet).
    Uploaded all the files from my local repository to Google Code.
    Made it so "visited," "harvested," "tribute," and "travel" tags left over in saved games from systems or planets that don't exist in the game data (e.g. because they were part of a plugin that was removed) are ignored rather than creating phantom objects.
    Fixed a possible memory error in Set::Revert().
    Changed how the game data Revert() works so that it will clean out any extra items, like governments left over from plugins or systems added by events.
    Refactoring: switching to using "!set.count(...)" instead of "set.find(...) == set.end()" because it's more concise, just as efficient, and seems clearer.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added GPL statements to all source code files and added a license.txt file.
    Got the code to build without warnings when -Wall is defined.
    Uploaded all the files from my local repository to Google Code.
    Several related changes to fighters: they can now run their own systems when being carried (to generate energy, repair, etc.). Their heat level is now indepenedent of the ship carrying them. Fighters now retreat for repairs if badly damaged, and launch only when mostly repaired. And, repair priority is given to the least damaged fighter.
    Added a new "Visual" class that represents just the information we need to track for an Effect once it's instantiated. Using it in place of Effect saves a string copy and a good deal of memory for each active visual effect.
    Switched to using a vector for Projectiles and Effects, to reduce memory allocations and improve cache performance.
    Refactored Engine::CalculateStep(), splitting each set of calculations into a separate function to improve clarity and to open a path for possibly multi-threading the most expensive calculations.
    Keep partially collected flotsam (#2955)
    
    * Keep partially collected flotsam
    
    The leftover units would vanish when only part of the flotsam fits the
    cargo hold. This means that you can lose cargo just by transfering it
    to another ship of your fleet (jettison cargo, then guide other ships to
    the flotsam).
    
    This commit changes that behaviour, only removing the flotsam when there
    are no more units. Only 1 ship can collect from the flotsam on each step.
    
    * Jettison partially collected flotsam from the collector ship
    
    Place the flotsam as if it was collected, partially stripped,
    and then thrown back out.
    
    * Replace placement of partial flotsam with an adjustment in velocity.
    
    Flotsam transfer logic is moved to Flotsam::TransferTo and the flotsam
    velocity is stabilized in proportion to the amount being transferred.
    
    * Cast to double with static_cast.
    Fix partial commodity flotsam lifetime.
    Fix missing jettisoned commodities (#2962)
    
    * Fix missing jettisoned commodities
    
    The last box of commodities was not being jettisoned unless it was a
    multiple of 5, which is the maximum number of commodities per box.
    
    * Adjust commodity flotsam lifetime based on tonnage.
    
    Commonity flotsam lifetime has a square root progression that remains
    unchanged when it has the expected tonnage per box.
    Made materials from destroyed asteroids have a lot less random velocity than dumped cargo, so collecting them is less annoying.
    ammo and flotsam (#1454)
    
    * change Flosam::UnitSize() to use double
    
    This change allows UnitSize to accurately describe the size of what it contains since some items have fractional masses.
    
    This fixes ships trying to pick up flotsam they don't have room for, typically ammo
    
    * change Ship::Jettison outfit to allow non-full flotsam boxes
    
    This is to stop fractional mass items from disappearing if they don't completely fill a flotsam box.
    
    removed static keyword to allow box sizes to be appropriate for each item
    Outfits can now explicitly define a "flotsam sprite" instead of repurposing the weapon icon for that.
    Made the flotsam death animation a bit bigger so it doesn't just look like they disappear.
    Added a "Minable" class, representing a minable asteroid in an elliptical orbit.
    Added a common base class for Ships, Projectiles, Asteroids, Effects, Flotsam, StellarObjects, etc. This is the first step in creating a generic collision detection framework that can deal with different object types.
    Cargo dumped by ships can now be picked up by others. Also, destroyed ships sometimes leave cargo behind.
    feat(graphics): Add comment with shader name (#4995)
    
    This makes it easier to debug compilation errors
    Replacing "NULL" with "nullptr".
    Moved all the source code files into a "source" folder to clean up the root folder.
    The program now auto-detects the proper GLSL version number so it does not have to be set via conditional flags for each OS.
    Had to roll back to OpenGL version 3.0 instead of 3.3 on Linux, but left the Mac port at 3.3.
    Ported to Mac OS X.
    Switched to always using the Color class instead of passing around RGBA float arrays.
    Added GPL statements to all source code files and added a license.txt file.
    Fixed some shaders that used "\t" in place of "\n".
    Uploaded all the files from my local repository to Google Code.
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Merged the functions for getting a stellar object's color in the radar and in the orbits map.
    Made it so certain planets will only show up as something you can land on if your ship has certain attributes.
    Added a common base class for Ships, Projectiles, Asteroids, Effects, Flotsam, StellarObjects, etc. This is the first step in creating a generic collision detection framework that can deal with different object types.
    Moved the code for the "target" color of a stellar object out of MapDetailPanel and into StellarObject itself.
    Added "IsStation" and "IsMoon" to StellarObject so that non-landable objects can also generate the appropriate nouns to refer to them.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Modified stellar objects so that the object at the center of a system rotates from one day to the next at the speed given as its orbital time, rather than staying always at the same orientation.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    Fixed minor code style issues (#4428)
    Using float v. double in some cases of -Wdouble-promotion
    
     - Add some <algorithm> headers for uses of std::min or std::max
    Made it possible for an engine flare or afterburner to be integrated in a ship chassis.
    Switched to using 2D "texture arrays" for sprites, so all the frames fit into a single texture.
    Fighters that are launched should not be marked for removal
    Added a new "Visual" class that represents just the information we need to track for an Effect once it's instantiated. Using it in place of Effect saves a string copy and a good deal of memory for each active visual effect.
    Refactored Engine::CalculateStep(), splitting each set of calculations into a separate function to improve clarity and to open a path for possibly multi-threading the most expensive calculations.
    A ship's animation now "pauses" if it is disabled or destroyed.
    Fixed a crash that happens if a system contains an undefined minable object type.
    Made it so if a ship's sprite is animated, so is the target and flagship outline for it.
    Made it possible to specify the background haze image for each star system.
    Made it possible to zoom the view in or out (via the scroll wheel or the +/- keys) without changing the UI zoom.
    Continuing to add explanatory comments and clean up messy code.
    Continuing to comment and clean up the code. Asteroids will now display properly on monitors wider than 4096 pixels.
    Made it possible to have a frame rate of 0 (e.g. for projectiles that pick a random frame of the animation but then keep that same appearance).
    Added a common base class for Ships, Projectiles, Asteroids, Effects, Flotsam, StellarObjects, etc. This is the first step in creating a generic collision detection framework that can deal with different object types.
    Fixed saving of the new animation attributes, plus some old ones that were not saved. Also updated the changelog.
    New animation attributes: "frame time" (as an alternative for "frame rate") and "delay" (in between cycles).
    Made animation default to 2 FPS instead of 60 FPS, so that if I add running-light graphics for ships it will look reasonable even for ships from old saved games where ships have no frame rate specified.
    Added a small random factor to the explosion frame rates, so when a ship explodes the animations will not all die out at exactly the same time.
    Added brackets and indentation for every BeginChild()...EndChild() pair to improve the code readability (compared to indentation with no brackets, or no indentation at all).
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added some small "debris" particles from exploding ships.
    Updated all the functions that save data to use the new DataWriter class (to ensure proper indentation, quoting, etc.).
    Added a Random::Real() function, and refactored to use Random everywhere (because old-fashioned rand() is considered deprecated now.)
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Added GPL statements to all source code files and added a license.txt file.
    Added saving capability to the Ship class.
    Uploaded all the files from my local repository to Google Code.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    feat(mechanics): Enable creating Commands from datafile text (#4997)
    
    Doesn't add the bindings for actually reading in & then using the commands, but is one step in that direction.
    
    * Add command loading and sending it to the Engine
    This is part of the automatic-testing PR endless-sky#4370 and could also be used for endless-sky#4720.
    
    * Replaced if/else chain in Command loading by lookup map.
    Also fixed a bug that caused commands to be skipped during loading.
    
    * Add command forwarding through MainPanel.
    
    * Apply suggestions from code review
    Print the relevant token when an unrecognized command is found.
    feat: Switch off fast-forward if the player is not in flight (#5148)
    
    This is so that the behavior of fast-forward is consistent between panels (#5038). This also gives the player extra time to react when coming out of a boarding panel or on enter conversation by turning fast-forward off if it was on when entering the panel.
    
    The map panel and player info panel are exceptions to this, as they are panels that are commonly accessed and can be accessed at any time while in flight.
    style: Remove unexpected trailing whitespace
    
    The only trailing whitespace should be "continuation tabs"
    Add missing ship reference for offered assisting/boarding missions
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Using float v. double in some cases of -Wdouble-promotion
    
     - Add some <algorithm> headers for uses of std::min or std::max
    Check if the picked boarding/assisting mission has space before offering
    
     - Use Mission::HasSpace(ship) rather than check in MainPanel::StepEvents
     - Update blocked mission handling to use the proper mission list
     - Use correct cargo / bunk numbers for "Blocked" messages if boarding
     - Set proper autoconditions when boarding
    Show disabled help message only when not not destroyed
    NPC "completion" / MissionAction conversations can kill the player and/or NPC (#3376)
    
    * Call ConversationPanel with a pointer to the relevant ship
    
     - Allows destroying the pointed ship depending on the conversation outcome.
     - If the player is killed, the pointed ship should survive, and no BoardingPanel should be displayed.
     - Supply the ship from NPC::Do, to enable destroying the NPC via LAUNCH, DEPART, and FLEE conversation endings.
     - Include a boarding check to prevent an NPC block with a non-boarding completion requirement (e.g. `npc evade`) from displaying a BoardingPanel after the conversation ends.
    
    * Add response handling for non-"on offer" conversations
    
     - Updated PlayerInfo::BasicCallback:
       - attached it to:
         - all NPC completion conversations
           - If actually boarding the NPC, set it as the boarding ship.
       - The player is perhaps not landed: in-flight death implies:
         - capture of the flagship by the ship it was boarding (`die` when boarding)
         - crew mutiny and defection (`die` when not boarding)
         - the destruction of the ship. (`explode`)
     - Added the Conversation::EXPLODE response, based on the keyword `explode`
     - Updated the Ship::WasCaptured code to not over-transfer crew, for the case where the player dies to a conversation offered in-flight and has plenty of crew already.
    
    * Rework PlayerInfo::Die
    
     - Remove need for a private Die() method
     - Update callers of Die(bool) to use Die(int) and achieve the intended result
    
    * Eliminate need for BoardingShip()
    
     - Moved player death handling into ConversationPanel::Exit, where the relevant ship pointer is easily accessed
     - Added pointers to the ship responsible for the boarding mission / npc event into relevant Mission and MissionAction methods, to eliminate need for PlayerInfo::BoardingShip
    
    * Showing BoardingPanel requires a disabled-yet-not-destroyed ship
    
    * Add check for capture / bribery of a boarding ShipEvent's target via a mission NPC's completion conversation
    
     - A more robust method to only offer the BoardingPanel resulting from ConversationPanel::Exit (i.e. no display of sequential BoardingPanels, and obeying the conversation's exit node) should be pursued separately
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Making sure the "friendly disabled" message is only shown when no popup dialogs are present.
    Expanded on Disabled Hails (Fixed) (#3719)
    
    * Update hails.txt
    
    * Update hails.txt
    
    * Update hails.txt
    
    * Update hails.txt
    
    * Update hails.txt
    
    * Update hails.txt
    
    * Update hails.txt
    
    * Add help text for boarding friendlies to repair them
    
    * Added Hot Showers
    
    * Added Hot Showers
    
    * Delete hot shower.png
    
    * Update outfits.txt
    
    * Update hails.txt
    
    * Removed the shakespearean insult lists
    
    * Update hails.txt
    
    * Added some needed spacing
    
    * Update hails.txt
    Add gl_header include for uses of glClear
    "Lost" help should not appear while hyperspacing
    More help for confused new players.
    Several related changes to fighters: they can now run their own systems when being carried (to generate energy, repair, etc.). Their heat level is now indepenedent of the ship carrying them. Fighters now retreat for repairs if badly damaged, and launch only when mostly repaired. And, repair priority is given to the least damaged fighter.
    Boarding mission cargo should go into the player's flagship, not the PlayerInfo cargo hold.
    Implement a ShipEvent queue to allow delayed ShipEvent handling (#3371)
    
    * Implement a ShipEvent queue to allow delayed ShipEvent handling
    
     - Handling ShipEvents can result in new UI elements.
     - Only one UI element should be created and displayed to the player at a time (i.e. do not display a dialog and the BoardingPanel simultaneously).
     - Callbacks from one UI element from a given ShipEvent may result in status changes that should influence other UI elements created from the same ShipEvent (e.g. if a mission conversation offered upon boarding an NPC results in that NPC's destruction, the player should not be able to plunder said NPC).
     - Fixes a preexisting issue where the boarding panel would be offered if the player dies in a conversation.
    
    * Switch from GetUI()->IsTop(this) to GetUI()->Top().get() == this
    
     - IsTop() checks only drawn panels, not panels that are requested but not yet drawn.
    Pop-ups cancel drag actions (#3094)
    
    * Cancel drag actions if prompted
    
     - If a conversation, dialog, or other panel is generated while dragging, stop drawing the drag box and reset the drag status.
    
    * static const Color to const Color &
    Code cleanup: using lround() for more accurate rounding of double to integer.
    Fixed some issues found by Clang's static analyzer.
    Add missing newline to scan dialog for uninstallable outfits in cargo.
    
    image courtesy @Kryes-Omega
    Fixed how harvested materials are shown when scanning a ship's cargo.
    Typo fix.
    enhancement: Allow mods to change wormhole hail messages (#2706)
    
    * Allow mods to change wormhole hail messages
    
    * Drop leftover, unneeded commas
    Sorting out the distinction between System::IsInhabited() and ::HasFuelFor().
    Made the group binding keys (0 to 9) and zoom keys (- and +) only work if no command is bound to those keys.
    Outfits in cargo can be scanned
    
    Previously, an NPC with an outfit in cargo would not show that cargo
    when scanned. This makes an outfit in
    cargo behave like ordinary cargo for scanning.
    Added a help message explaining how to set which escort is your flagship that is shown in the player info panel, the outfitter, or the shipyard the first time the player has multiple ships in their fleet.
    Made it so certain planets will only show up as something you can land on if your ship has certain attributes.
    Made it possible to specify a ship's "noun," so the game can refer to it as a "creature" instead of a "ship." Also added an "inscrutable" attribute that makes it impossible for you to scan a ship's outfits.
    Split InfoPanel into separate classes for the fleet listing page and the individual ship page.
    Renamed Ship::GetTargetPlanet() to GetTargetStellar() to make it clear that it refers to a StellarObject, not a Planet.
    Added a wider variety of wormhole hails messages.
    Made it so you can't hail wormholes.
    Only respond to drag selection if the click that started it occurred when no other panel was active.
    Fixed the flicker when taking off from a planet.
    Made it possible to right click a ship or location to tell your escorts to follow a friendly ship, attack a hostile ship, or move to a location.
    Made it possible to assign number keys 0-9 to groups of escorts. (But, it's not possible to command them yet.)
    Made it possible to click escort icons to select them.
    Made it possible to zoom the view in or out (via the scroll wheel or the +/- keys) without changing the UI zoom.
    Made Panel::Click() able to distinguish double-clicks, so that the info panel can switch to a ship only if it is double-clicked, not just clicked twice in a row.
    Added the ability to specify plural forms of outfit and ship model names.
    Added a key command to toggle escort ammo usage on the fly.
    Dis-allowed hailing of ships that are landing or have landed.
    Moved the beginner help messages out into a data file.
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    Added an extra check to make sure only your flagship triggers boarding events.
    You are no longer able to hail a ship while you or they are cloaked, and your target display no longer shows the facing angle of cloaked ships.
    Added support for fighter bays where the fighter it is carrying is visible, drawn either below or above the ship.
    Added support for "stopover" planets specified by a mission.
    You can no longer hail other ships while entering hyperspace.
    Fixed the flicker of the previous day's game state when you first take off.
    Switched back to "planet" as a generic name for space objects you can land on, because "inhabited objects" is likely to confuse people.
    Added function to return a "noun" for a "planet" object, by default this is the word "planet," but can be either "station" or "moon" if the attributes include one of those two terms.
    Fixed a bug where fines for illegal cargo or outfits could be assessed for ships other than the one that is scanned or for ships that are not even in-system.
    Made it impossible to hail uninhabited planets, even if it's a planet you can land on.
    Added support for clicking on ships and planets to select them.
    Made some changes to improve thread safety.
    Added basic support for random missions that get offered when you board a ship.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Removed some TODOs that have already been fixed.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added a help message explaining what to do if you get disabled. Also made it so a ship you just bribed will refuse to repair you immediately after that.
    Took out most of the overloaded operators for Command, because it is not at all clear how they should handle the turn field, and ignoring it was causing problems.
    Code cleanup: always referring to the player's ship as "flagship."
    Added a message in the navigation popup help mentioning the trick of holding down the jump key to synchronize with your escorts.
    Modified the navigation help message to not show up until your ship is done taking off from the planet.
    Added a new keyboard shortcut: Shift + <HAIL> hails the selected planet even if you have a ship selected too.
    Added support for mission actions to be performed when you enter a system (showing a dialog or conversation, setting flags, etc.).
    Fixed a bug where the boarding panel pops up twice, one under the other, in some circumstances.
    Added convenience functions to Planet and Government to simplify the syntax for querying political state. Also fixed a few busgs in my recent Command and AI changes.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Fixed a bug in how handoff of outfits in missions is done, and added a few more Free Worlds missions.
    Updated the initial help message for navigation to include a note about asteroids.
    Added some smuggling missions.
    Added help messages that pop up the first time you click on a certain panel (and the first time you end up stranded or dead).
    Added a "to fail" condition for missions. It specifies the conditions under which a mission will fail if active. Missions are not offered if they fail any of the "to fail" conditions, so those conditions need not be duplicated in "to offer".
    Fixed a bug where if you captured and sold an NPC, it would continue to follow you as a free escort until the mission ended.
    Made several improvements to NPCs: an "uninterested" personality that does not follow the player's flagship, and improved handling of carriers. Also modified the outfit scanner to also tell you what fighters a ship is carrying.
    Added support for illegal cargo and outfit checks when you are scanned or when you land on a planet.
    Added a "Preferences" class to parse the preferences file, and made the load display and auto-aim controlled by preferences. Also added an auto-fire AI option.
    Added an "on visit" mission action that is triggered when you reach the destination and the mission conditions are not satisfied.
    Implemented wormholes. (Any planet that shows up in multiple systems is a wormhole.)
    Got "security levels" specified for each planet. So far the only crime you can be caught committing is having an unlicensed ship.
    Added Republic "licenses" for each ship, and added a fine that is assessed if you are scanned by the Republic and are flying an unlicensed ship.
    Finished up the intro missions for all three ship types. Also fixed a few bugs I found in the process, and added some new text substitutions.
    Got NPC support working. I've tested NPCs you must "save" or "kill", but a few kinks are left to work out (like having NPCs start at a different location than yours).
    Modified the new mission implementation so that missions can also be offered as soon as you land (e.g. to handle continuation of existing missions), and used that to create a "first contact" conversation that is shown the first time you land on any Quarg world.
    Switched over to the new Mission implementation. There are still some aspects that are not working yet (like, the job board).
    Replaced the old, very limited "callback" class with function pointers that can be given any method name.
    Made hailing not work on ships that are entering hyperspace.
    Made it possible to request assistance from friendly ships and have them repair or refuel you.
    Made it possible to bribe hostile ships to leave you alone. More principled captains will refuse your money, however.
    Added a "hailing" panel, which displays communications with a ship or planet. (But, I have not implemented the actual messages yet.)
    Modified the AI to have it scan any other ships in system, if the ship has a scanner equipped. If one of the player's ships is scanned, a message is displayed.
    Fixed a potential crash if a mission involving both cargo and passengers fails (it would get canceled twice).
    Got missions to properly handle stranded or destroyed ships causing the mission to be unable to finish.
    Gave the conversation panel an option to pop up a map showing a system highlighted, if the conversation is the introduction to a mission.
    Got permanent reputation changes working, with Ship::TakeDamage now returning a combination of PROVOKE, DISABLE, and DESTROY depending on the projectile's effect.
    Switched Engine to using the new ShipEvent class to report when a ship is boarded.
    Added support for basic "special missions," offered in the Spaceport on certain planets.
    Updated the UI to use the same three "named" colors everywhere for three different levels of text brightness, for consistency.
    Added a rudimentary ship info panel.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Fixed several glitches in the handling of missions (duplicates when reloading pilot, not moving passengers into your ship, allowing infinite passengers, formatting / display issues).
    Refactored to consistently call the PlayerInfo, "player", and the player's flagship, "flagship".
    Refactored MapPanel and MissionPanel to share the underlying code for drawing the map.
    Added mission completion messages and payment (still only for cargo, not passengers).
    Added a "Messages" class to allow any thread to safely add a message to the display.
    Got capturing working, at least for your flagship. Other ships can't capture other ships yet.
    Added a "boarding" dialog that lets you choose what commodities or equipment to plunder from a disabled ship. (Capture is not yet implemented.)
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Added a rudimentary ship-boarding AI.
    Implemented a placeholder version of boarding and plundering (without a dialog yet to choose what items you steal).
    Added a CargoHold class to handle everything pertaining to cargo (including determining when you have the capacity for it).
    Added cargo scanner and outfit scanner outfits, and modified the scanning code to only work if you are close enough to your target and have a scanner.
    Modified Fleet to fill each newly created ship with random cargo. Also got the ship scanner working so I can test that the cargo is really there.
    Switched to storing cargo in PlayerInfo when landed, then divvying it up among your ships when taking off. This makes it possible to use the cargo capacity of all your ships, and avoids needing to sell cargo when selling ships.
    Added an option to toggle fullscreen mode. It's still a little buggy on Linux.
    Switched to always using the Color class instead of passing around RGBA float arrays.
    Fixed a few final issues in the load / save / new mechanics. It all seems to be working correctly, now.
    Added GPL statements to all source code files and added a license.txt file.
    Got "New Pilot" working, including visiting the shipyard and picking out an initial ship.
    Added a "New Pilot" dialog (which doesn't yet move you straight to the shipyard, though).
    Updated how the UI panels are handled to allow the main menu to be called up regardless of what the game state is.
    Added a scrolling list of credits in the main menu.
    Added display of the current pilot's information in the main menu.
    Switched the MainPanel KeyDown handler to use the user-specified keys, too.
    Added a preferences panel for customizing the key controls. (They are not yet used, though.)
    Uploaded all the files from my local repository to Google Code.
    feat(preferences): Add a preference for the fast-foward interrupt introduced by #5148
    feat(preferences): Allow the "fancy" sobel filters in ShopPanels to be replaced with "fast" sprite images (#5179)
    feat(controls): Make fast-forward key configurable (#4741)
    
    * Make fast-forward key configurable
    * Do not toggle fast-forward on repeat input events
    * Rename "Menus" to "Interface" in Preferences, resize column slightly
    
    Closes endless-sky#2738
    Add a preference to toggle the starfield
    
    #4537
    refactor: Remove copies identified by OSX CI build
    Some more style fixes. (#4429)
    
    No big changes, just some spaces removed.
    Cleanup & add comment
    
     - If `zone.Value()` is one zoom setting, it is not the other.
     - Restored trimmed tab
     - Update changelog
    Improve dynamic zooming (#3727)
    
    * Improve dynamic zooming
    
    Behavior changes:
    
    - Fixes the view zoom setting getting reset if the window is initially
      created at a smaller size (a likely occurrence when using tiling
      window managers)
    
    - Makes the view zoom restriction dynamic, updating the zoom level as
      necessary in real time as the window size changes, up to the user
      preference
    
    - Updates the view restriction bounds, taking into account both the
      window width and height, to ensure that at least the main menu and
      preferences panel are fully visible and accessible
    
    Code changes:
    
    - Split the "view zoom" value into two logical values:
    
      - User zoom, the setting that exists in the configuration file and
        is visible in the configuration panel
    
      - Effective zoom, used to actually scale the UI - a function of user
        zoom and window size
    
    - Update the code to use the user zoom or effective zoom values as
      appropriate
    
    - Consolidate all view zoom restricting code (from main.cpp and
      PreferencesPanel.cpp) into one place (Screen.cpp)
    
    * Revert Zoom->EffectiveZoom renaming
    & remove duplicated zoom reset
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Using float v. double in some cases of -Wdouble-promotion
    
     - Add some <algorithm> headers for uses of std::min or std::max
    Use a preference to control fighter repair strategy
    
     - The player can choose between least need (series) and most need (parallel). Maintains the default strategy of least need for AI ships and players who have not set the preference.
    Made it so the count of help messages to reactivate (in the settings preferences) doesn't count the "lost" messages.
    Show location of player escorts on the map (#3576)
    
    * Identify escort systems with a center dot
    
     - Inside the system ring, show a grey dot if there are player-owned escorts in that system
     - Does not apply to the player's system
    
    * Use preference to control displaying the pip
    
    * Differentiate parked and unparked escorts via pip brightness
    
     - Also, show the pip for the flagship system (to help teach what the pip means).
    
    * Default display of escort system pips to "on"
    Truncate long player / player flagship names, and plugin names (#3395)
    
    * Truncate long player / player flagship names, and plugin names
    
    * Restored proper RHS margin for plugin text
    Left- and right-clicking the Radar display issues appropriate click commands (#2679)
    
    * Right-clicking the Radar display will issue a scaled MOVE_TO order
    
    Current behavior is to allow clicking "behind" or through the radar display, e.g. a right-click acts as though the radar display is not present.
    
    With this PR, right-clicking the radar display will send a MOVE_TO order to your selected escorts, with the scaled target position.
    This allows ordering your escorts up to 128 / 0.025 = 5120 units away from your flagship's current position in the system, without requiring you to zoom out.
    
    * Read radar position and size from interfaces.txt
    
    * Radar display clicking works for left-click actions and also drag-select
    
    * Radar clicking obeys an opt-in preference setting
    
    * Change 'static const <T>' to 'const <T> &' for GameData references
    
     - Forward compatibility
     - 'Interactive' -> 'Clickable', to indicate how to interact with the radar display.
    
    * Formatting fix.
    Store the flagship's desired crew level and try to recrew when landing (#3089)
    
    * Store the flagship's desired crew level and try to recrew when landing
    
    * Use file-only preference to control flagship rehiring
    
    * Add preference to panel, with clearer name
    
    * Alter setting of desired crew level
    
     - Set the desired crew level upon launching, rather than in HiringPanel
       - Ensures the player does not hire extra crew when landing after changing to a flagship with lower crew capacity.
     - Altered the displayed message as the rehired crew may be due to bunks once used in an automatically accepted mission.
    Add intermediate UI overlay zooms
    Code cleanup: "static" is redundant inside a C++11 anonymous namespace.
    Fixed some missing #includes and one unnecessary check that would mess up other compilers.
    Added control of turret tracking (focused on your selected target, or opportunistic) in the preferences panel.
    introduce preference setting
    Made the zoom level warning for small screens only show up if it's impossible to zoom in at all, not if the screen is large enough to toggle between 100% and 150%.
    Notify the user why higher zoom levels sometimes aren't allowed (#1906)
    
    * Added a message to notify the user why higher zoom levels sometimes aren't allowed
    
    * Improved the wording of the message to reinforce that zoom level availability is dependent on screen resolution
    
    * Reverted my change to put the cursor zooming in an else block; it was in the right place all along
    Added a preference to highlight the flagship (so it can be distinguished from other identical ships).
    Don't count the basic help messages in the total of how many can be shown.
    Added support for showing a list of all installed plugins, plus the icon and about text for each (if any).
    Added the view zoom to the preferences panel, and made it possible to adjust settings that have a range of values using the scroll wheel (hovering over the setting) instead of clicking to cycle the values.
    Made Panel::Click() able to distinguish double-clicks, so that the info panel can switch to a ship only if it is double-clicked, not just clicked twice in a row.
    Added a setting to adjust the scroll speed.
    Added a key command to toggle escort ammo usage on the fly.
    Split the preferences into multiple pages (controls, settings, and plugins) to make space to display all the "hidden" settings and for new key controls to be added if needed.
    Fixed a bug in the preferences panel where clicking "Back to Menu" while editing a key binding was interpreted as changing that key binding to "B".
    Separated the elements of the main menu into different "interface" objects to avoid duplication.
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    Added a click as audio feedback when you change the volume level.
    Added a preference for whether escorts expend ammo always, frugally, or never.
    Shift+B now preferentially selects disabled escorts. (Ordinary B now consistently prefers enemies.)
    The zoom will now reset to 100% if it is set too high for the full UI to fit on screen.
    Added Control+W (or Command+W on the Mac) as a universal shortcut for "close current window."
    Modified the PreferencePanel to adjust the mouse position when the zoom level changes.
    Simplified the logic for changing the zoom level of the screen, by moving more of it into the Screen class.
    Added support for changing the global zoom factor (for large monitors and for testing high-DPI rendering on normal monitors).
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added the board command to the preferences panel (bumping the scan command to the "menus" section because that's where there was space for it).
    Added a side panel to the preferences describing the behavior of Shift + <key> for the targeting keys.
    Modified the preferences panel to highlight whatever line your mouse hovers over, to make it more obvious that you can click to edit.
    Removed a getenv() call that was crashing the program on Windows.
    Took out most of the overloaded operators for Command, because it is not at all clear how they should handle the turn field, and ignoring it was causing problems.
    Added an experimental sprite shader that can render motion blur. This makes everything less choppy, but more blurry, and takes a lot more GPU power.
    Added a "status overlay" preference option where rings representing shield and hull strength are overlaid on all "escorts" and enemies.
    Fixed some bugs in how the preferences panel was displaying as a result of my new Command class.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Made some changes to support Windows porting, assuming MinGW will be used to provide basic POSIX functionality.
    Added a "Preferences" class to parse the preferences file, and made the load display and auto-aim controlled by preferences. Also added an auto-fire AI option.
    Updated the preferences panel to include escort command keys (and to have space for additional preferences).
    Added a volume control, and a preferences file that saves the volume and window size in between runs.
    Started updating the code to use the new Format and Table classes.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Ported to Mac OS X.
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Added an option to toggle fullscreen mode. It's still a little buggy on Linux.
    Switched to always using the Color class instead of passing around RGBA float arrays.
    Added GPL statements to all source code files and added a license.txt file.
    Added a "New Pilot" dialog (which doesn't yet move you straight to the shipyard, though).
    Added a Load / Save panel (not yet functional).
    Updated how the UI panels are handled to allow the main menu to be called up regardless of what the game state is.
    Added background graphics for the preferences panel.
    Added a preferences panel for customizing the key controls. (They are not yet used, though.)
    feat(mechanics): the game now prompts before overwriting a save snapshot
    
     - removed unused variable `wasSelected`
     - updated snapshot prompt's default value to reflect the in-game date of the source file, not the current in-game date
     - added confirmation when overwriting existing snapshots
    feat(ui): Provide default values for certain dialogs (#4822)
    
    * feat: Fill the default value in the save and ship rename dialogs
    
    * Implement review feedback.
    
    * Implement further review feedback.
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Allow phrase-based randomized dialog (#4164)
    
    * Allow `MissionAction` dialog text randomization via the `Phrase` class. Traditional "directly specified" text is still supported.
    
    Supported syntax:
    ```
    dialog phrase <stock phrase name>
    
    dialog
        phrase
            {phrase specification...}
    ```
    e.g.
    ```
    dialog phrase "hostile disabled"
    
    dialog
        phrase
            word
                "Please excuse my dear "
            word
                "Aunt Sally"
                "Uncle Mark"
            word
                ` for saying, "`
            phrase
                "hostile disabled"
                "friendly disabled"
            word
                `" yesterday.`
    ```
    
    * Move `dialogText` parsing to `Dialog` static method
    
    * Allow `NPC` "completion" dialog text randomization using the same phrase-based syntax as `MissionAction` dialog
    
    * Use phrases to encapsulate generic/repeated dialog
    
    For similar messages, combined clauses to diversify the generated text.
    
    * Remove duplicated space
    
    * Typo fix ( @Pointedstick )
    Added a button to propose a random ship name when you're buying a new ship.
    Fixed some things that Google's cpplint warns about (mostly, constructors that should be marked explicit).
    Made Panel::Click() able to distinguish double-clicks, so that the info panel can switch to a ship only if it is double-clicked, not just clicked twice in a row.
    Fixed some variables that don't need to be mutable now that Panel::Draw() is not expected to be const.
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    Added the ability to jettison plundered outfits to make room for new ones. Also made the ship info panel show current ship mass, cargo, etc.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Mission dialogs now allow you to bring up a map, the same as conversation panels. Also made the arrow marking the destination system larger, so it stands out on the map.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Updated the Dialog class to allow "accept / decline mission" dialogs.
    Ported to Mac OS X.
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Fixed a bug in DIalog where it was calling the callback on a copy of the given object instead of the original. Added confirmation dialogs to the delete buttons in the Load Game panel. Also tweaked the starting mortgage.
    Modified WrappedText so its default copy and assignment are valid (by avoiding manual memory allocation).
    Added a new generic dialog class to replace specific dialogs like the "how many credits?" one.
    feat: Switch off fast-forward if the player is not in flight (#5148)
    
    This is so that the behavior of fast-forward is consistent between panels (#5038). This also gives the player extra time to react when coming out of a boarding panel or on enter conversation by turning fast-forward off if it was on when entering the panel.
    
    The map panel and player info panel are exceptions to this, as they are panels that are commonly accessed and can be accessed at any time while in flight.
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Define additional filled colors in interfaces.txt (#3425)
    
    * Define additional filled colors in interfaces.txt
    
     - Further support for modified interfaces / reskinning.
    
    * Added comments to color definitions
    
    * Reflect name change in code too
    Added a help message explaining how to set which escort is your flagship that is shown in the player info panel, the outfitter, or the shipyard the first time the player has multiple ships in their fleet.
    Made Panel::Click() able to distinguish double-clicks, so that the info panel can switch to a ship only if it is double-clicked, not just clicked twice in a row.
    Fixed a bug in the preferences panel where clicking "Back to Menu" while editing a key binding was interpreted as changing that key binding to "B".
    Fixed some compile issues on OS X.
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    Changed Panel::Drag and Panel::Scroll to take double dx/dy
    
    Fixes endless-sky/endless-sky#805
    Switched the Escape key to closing dialogs, like people expect it to, instead of always going to the main menu.
    Added a 500x multiplier (alt / option key), mainly for players with enormous cargo fleets.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added support for reordering ships in your fleet in the shop side panel.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Modified the new mission implementation so that missions can also be offered as soon as you land (e.g. to handle continuation of existing missions), and used that to create a "first contact" conversation that is shown the first time you land on any Quarg world.
    Modified the darkened "backdrop" for dialogs so that it is only drawn for the topmost panel, so that if multiple dialogs are up it does not completely blacken the screen behind them.
    Added a DrawBackdrop() function to Panel so that individual panels don't have to duplicate that functionality.
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Added handling of scroll wheel events in the shipyard and outfitter panels.
    Added GPL statements to all source code files and added a license.txt file.
    Added a "New Pilot" dialog (which doesn't yet move you straight to the shipyard, though).
    Updated how the UI panels are handled to allow the main menu to be called up regardless of what the game state is.
    Added a preferences panel for customizing the key controls. (They are not yet used, though.)
    Uploaded all the files from my local repository to Google Code.
    Made it possible for the start conditions to include the player owning one or more ships.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added the ability to define the starting conditions (credits, mortgages, location, salaries, licenses, etc.) in the data files, to support "total conversion" mods.
    Renamed "ShipName" to "Phrase" since it is also used for random hail messages.
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Added planet and spaceport descriptions for 35 more planets.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Merged the functions for getting a stellar object's color in the radar and in the orbits map.
    In StellarObject::LandingMessage(), don't bother to check if the object has a "planet," because LandingMessage() is only called for objects that the game already knows you can't land on.
    Made it so certain planets will only show up as something you can land on if your ship has certain attributes.
    Added custom messages for when you try to land on certain unusual stellar objects (like a lava world, or a nascent wormhole).
    Added a common base class for Ships, Projectiles, Asteroids, Effects, Flotsam, StellarObjects, etc. This is the first step in creating a generic collision detection framework that can deal with different object types.
    Moved the code for the "target" color of a stellar object out of MapDetailPanel and into StellarObject itself.
    Stars with a big cloud around them are no longer treated as if they have a huge radius.
    Wormholes now always return "???" as their name, to simplify all the code that displays planet names.
    Added support for a "wormhole" planet type.
    Added "IsStation" and "IsMoon" to StellarObject so that non-landable objects can also generate the appropriate nouns to refer to them.
    A few small fixes I found while working on creating a map editor.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Modified stellar objects so that the object at the center of a system rotates from one day to the next at the speed given as its orbital time, rather than staying always at the same orientation.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    feat(mechanics): Basic support for custom hardpoint angles, non-converging weapons (#4801)
    
    * Add gun-port angles and convergence setting.
    Allows content-creators to create ships with non-forward facing gun-ports.
    Also allows content-creators to set convergence for guns.
    
    * Allow some weapons to be non-parallel / non-converged.
    * Update source/Armament.cpp
    Simplify the code by providing booleans directly to hardpoints.emplace. (As suggested by Amazinite and tehhowch.)
    
    * Process review comments
    * Processed review comments
    Use a Point to allow asymmetric "hardpoint offset" specification
    
    Syntax assumes default specification is a symmetric hardpoint sprite, i.e. only the y-offset is needed. Specify 2 values to indicate the (x, y) offset, where (0, 1) points up and (1, 0) points right.
    
    `"hardpoint offset" [<x#>] <y#>`
    e.g:
      "hardpoint offset" 2
      "hardpoint offset" 0 2
    are equivalent.
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Added a new "Visual" class that represents just the information we need to track for an Effect once it's instantiated. Using it in place of Effect saves a string copy and a good deal of memory for each active visual effect.
    Switched to using a vector for Projectiles and Effects, to reduce memory allocations and improve cache performance.
    Fixed daily weapon reloads also resetting turret angles.
    In "focused fire" mode, turrets now face forward if no targets are present (e.g. for mining asteroids). That mode is now the default.
    Added support for independent turret tracking (and, limited turret turn rates) for everything but anti-missiles.
    Made it so turrets won't track a cloaked target.
    Added support for sprites drawn on top of turret hardpoints to show what kind of weapon is installed and what direction it's pointing in.
    Take "random velocity" into account for turrets and auto-aiming. This improves the accuracy of the Bombardment Turret a bit.
    Made ammo expenditure the very last thing that happens when firing a weapon, in case the weapon is its own ammunition.
    Starting to go through the code to add more comments and refactor things that are unclear or could cause errors down the road.
    Made sure the "fog" in the map is redrawn each time you open the map panel, in case you bought a map or explored new territory since the last time you opened it.
    Added "fog of war" obscuring parts of the map backdrop that are not yet visited.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added a "Preferences" class to parse the preferences file, and made the load display and auto-aim controlled by preferences. Also added an auto-fire AI option.
    Renamed "ShipName" to "Phrase" since it is also used for random hail messages.
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Added planet and spaceport descriptions for 35 more planets.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    feat(mechanics): Support "random lifetime" for effects (#5055)
    Support launch effects for carried ships when departing from their carrier (#3602)
    
    * Support "launch effect" child node for carrier bays
    
     - Allows specifying multiple effects, and a count of how many of each, e.g.
        "launch effect" "door sparks" 5
        "launch effect" "decompression"
    
    * Provide a fallback effect for certain bay types
    
    For non-automaton ships, any internal (i.e. pressurized) bays will use a default effect if none were specified
    
    * Remove unnecessary includes
    
     - Angle & Point includes were needed before `Visual` took the responsibility for placement of effects
    Added a new "Visual" class that represents just the information we need to track for an Effect once it's instantiated. Using it in place of Effect saves a string copy and a good deal of memory for each active visual effect.
    Refactored Engine::CalculateStep(), splitting each set of calculations into a separate function to improve clarity and to open a path for possibly multi-threading the most expensive calculations.
    Added a common base class for Ships, Projectiles, Asteroids, Effects, Flotsam, StellarObjects, etc. This is the first step in creating a generic collision detection framework that can deal with different object types.
    Added a small random factor to the explosion frame rates, so when a ship explodes the animations will not all die out at exactly the same time.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added an experimental sprite shader that can render motion blur. This makes everything less choppy, but more blurry, and takes a lot more GPU power.
    Got basic audio support working. I do need to track down better sounds, or at least balance the audio levels better between them.
    Added a Random::Real() function, and refactored to use Random everywhere (because old-fashioned rand() is considered deprecated now.)
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Modified effects (weapon impacts, etc.) to take the target's velocity into account so they still look correct if the target is moving.
    Added GPL statements to all source code files and added a license.txt file.
    Added saving capability to the Ship class.
    Uploaded all the files from my local repository to Google Code.
    refactor(mechanics): Change bay type identification to categories (#4391)
    
    * Change bay type identification to categories
    
    Change the ways bay types are identified from boolean to the category of
    the ship that is to be carried in the bay.
    
    This will make it easier to add new bay types in the future and/or to
    load bay types from data files instead of having them hardcoded.
    
    Signed-off-by: Peter van der Meer <peter.vd.meer@gmail.com>
    
    * Fixed some style issues
    
    * Processed review comments
    
    * Update code merged from master to categories.
    
    * Process first set of review comments
    
    - Renamed forCategory variable to category.
    - Added function to Ship to get total number of bays for a category.
    - Use total instead of free bays for display in-flight.
    - Changed launch-speed-check to use automation attribute of carried ship.
    - Added check if bay is a known type during loading.
    - Restored the Engine::Place per-category carrier selection for NPCs.
    
    Retest after rework:
    - Performed minimal load / flight / reload test with carriers, fighters and drones.
    
    * Processed review comments
    
    - Added use of const string references
    - Fixed some style issues
    - Use continue instead of intending a large block
    - Update code to make automated ships launch faster than crewed ships again
    
    * style: minor touchups
    feat(mechanics): Support multipliers for shield generation and hull repair related stats (#4525)
    
    * Added multiplier attributes for shield generation and hull repair related attributes
    
    * Display multiplier attributes as percentages
    
    * Fixed tooltips
    
    * ShipInfoDisplay now takes multipliers into account
    
    * Don't show shield/hull repair stats if the multiplier is <= 0
    
    * Fixed accuracy of various calculations and updated hasShieldRegen and hasHullRepair
    
    * Hard coded a whitelist for the multipliers to allow them to be negative
    
    * Code simplification
    
    * Error fixes
    
    * Revert whitelist changes
    
    Let whitelist changes occur in a separate PR
    
    * Updated hasShieldRegen and hasHullRepair
    
    Negative costs no longer block repairs
    
    * Removed now unnecessary fuel calculations in ShipInfoDisplay
    
    * Update ShipInfoDisplay.cpp
    
    * Update ShipInfoDisplay.cpp
    
    * Moved variables back to their previous locations (as they're no longer needed to computer hasShieldRegen or hasHullRepair)
    
    * Use conditional operators instead of multiplying by a boolean
    
    * Change the wording in the tooltips
    
    * Added multiplier attributes to the whitelist
    
    Values down to -1 are allowed. This means that at their lowest value, multipliers will have a -100% effect on the specified stat. They can not go lower then this, because then they would be flipping the sign on whatever the stat is, e.g. causing a shield generator to go from consuming energy to producing it.
    fix(ShipInfoPanel): Show fighter/drone bays while in-flight
    
     - BaysFree computation is only correct when landed, as the bays are empty.
    feat: Solar heat mechanic for increased heat generation the closer you are to the system center (#4894)
    feat: The display for a ship's total outfit space will now scale with installed outfits expansions
    
    Fixes: #4445
    Introduce new fuel-based Outfit attributes (#3870)
    
    Implements new reserved Outfit attributes `"fuel consumption"`, `"fuel generation"`, `"hull fuel"`, and `"shields fuel"`, and provides errors / warnings for poorly equipped ships using fuel for energy.
    Number formatting is now limited to one decimal place, which is enough for all current attributes. Also added a separate formatting function for numbers of credits.
    Several related changes to fighters: they can now run their own systems when being carried (to generate energy, repair, etc.). Their heat level is now indepenedent of the ship carrying them. Fighters now retreat for repairs if badly damaged, and launch only when mostly repaired. And, repair priority is given to the least damaged fighter.
    Define additional filled colors in interfaces.txt (#3425)
    
    * Define additional filled colors in interfaces.txt
    
     - Further support for modified interfaces / reskinning.
    
    * Added comments to color definitions
    
    * Reflect name change in code too
    Update Afterburner Logic (#3063)
    
    * Update Afterburner Logic
    
     - In addition to fuel usage, NPCs should consider its energy usage and heat output before deciding to use it (endless-sky#1819).
     - Consider afterburner usage whenever MoveToAttack is used (ships, asteroids)
     - Consider afterburner usage if harvesting flotsam.
    
    * Support afterburner-only AI movement control
    
     - Compute the displayed MaxVelocity and Acceleration values with afterburner thrust if no forward thrusters are present.
     - Adds afterburner heat, energy to the ShipInfoDisplay for "Moving:"
     - If the ship has the FORWARD command, but no thrust, the afterburner is attempted.
     - Update Ship::Acceleration and Ship::MaxVelocity to reflect the mode of operation to avoid divide-by-zero AI::StoppingPoint calculation.
    
    * Cache thrust attribute reads
    Reverse Thrust while turning. (#2982)
    
    * Reverse Thrust while turning.
    
    Key Press   Command
    [Up]        Engage Forward Thrust (and disable Reverse Thrust).
    [Left]      Turn Left.
    [Right]     Turn Right.
    [Down]      If Reverse Thrust installed and not engaging Forward Thrust,
                engage Reverse Thrust,
                else if not turning Left nor Right,
                turn to the reverse direction the ship is moving to.
    
    Behavior Changes:
    - Can no longer engage both Forward and Reverse Thrust
      at the same time.
    - Turning Left or Right, will no longer disable Reverse Thust.
    - Can Reverse Thrust while turning Left or Right.
    - Engaging Forward Thrust will always behave
      as if Reverse Thrust is noy installed.
    
    * Not using Forward and Reverse Thrust together.
    
    * Style fix.
    Made it possible for outfits to require licenses to buy them.
    Solar power + regenerator compatibility (operational energy) (Ref #1879) (#1896)
    
    * Replaced negative energy generation with operational energy
    
    Shield regenerators now have positive 'operational energy' instead of
    negative energy generation, to avoid a problem where solar collection
    wasn't compatible with them.
    
    * Operational energy revisions
    
    1. Idle energy now considers operational energy.
    2. Flight check now considers operational energy, and returns a new
    conversation if you have negative energy even before checking thrusters.
    
    * Revisions to flight check for solar collection
    
    Added solar collection into flight checking, and added a new
    conversation if your ship runs the risk of becoming derelict too far
    from the system centre. Also fixed a <= that should be an <.
    
    * Changed 'centre' to 'center'
    
    * Tweaked conversation wording
    
    Replaced "system center" with "center of a system", and "steering" with
    "steering systems".
    
    * Renamed operational energy to energy consumption
    
    * Fixed a stray tab in tooltips.txt
    Switched from constant arrays to constant vectors in a few places to avoid ugly sizeof() code.
    Replaced the "Mass Expansion" with an "Outfit Expansion" that adds the same outfit space but also interferes with your ship's cooling if you install a lot of them.
    Added "active cooling" support. Also fixed a typo in the Coalition ship hardpoints.
    The sale price of ships and outfits now depreciates over time. If you sell "used" outfits to an outfitter, they remain in stock to buy back (at the reduced price) until you leave the planet.
    Added a Chip::ChassisCost() convenience function.
    not convinced there's more soft h words in common use than hard h, ditto for the various sounds y makes
    not enough utility to warrant a helper function
    allowed ship license purchase text to be grammatically correct
    Added "tooltips" that pop up to explain ship and outfit attributes in the shop panels and the ship info panel.
    0.9.2 updates
    Typo fix ("guns ports").
    The shipyard now shows the stats for your currently selected ship.
    Added hull and shield repair heat to the outfit and ship info displays.
    Changed the "repairing" ship info label to "charging shields" if the ship has no hull repair energy cost.
    include typical solar collection rate in energy generation calculation
    display solar collection attribute on ship info panels
    Added a line to the ship info display that shows the energy cost of repairing shields and hull.
    Added support for fighter bays where the fighter it is carrying is visible, drawn either below or above the ship.
    ShipInfoDisplay no longer needs to know what system you are in (which used to control what licenses are required).
    Added reverse thrusting energy / heat to the ship's movement energy and heat display.
    Merged the common code from the two info display classes into one common base class.
    Regularizing the shipyard and outfitter maps code to make them easier to merge.
    When landed, your ships now show both their empty and full ship info, instead of only the number for full cargo.
    Switched the ship info display back to showing required crew even for the player's ships, because actual crew is only valid for the flagship.
    Added the ability to jettison plundered outfits to make room for new ones. Also made the ship info panel show current ship mass, cargo, etc.
    Added a display of the currently selected item's attributes to the shipyars and outfitters map views.
    Switched the ship info display to showing required crew rather than total crew.
    Ship licenses are no longer government specific and no longer saved in the player info (because they now only control what you can buy, not what you can own).
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Removed some TODOs that have already been fixed.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Typo corrections and cosmetic changes
    First step in the sales panel upgrade: your fleet now displays as a set of small icons so it all fits on screen even if you have many ships.
    Fixed the display of "weapons" with reload = 0.
    Did some significant optimization (at least 2x faster calculation times in big battles) by switching weapon attributes from a string to double map to a fixed set of values accessed by inlined functions, instead.
    Added Republic "licenses" for each ship, and added a fine that is assessed if you are scanned by the Republic and are flying an unlicensed ship.
    Added a "Scram Drive", a hyperdrive that does not require you to come to a complete stop before entering hyperspace.
    Modified the ship info display to show the actual crew, not required crew, for a ship that you own.
    Fixed a bug in how I used and displayed the "cooling" value.
    Added a "heat dissipation" attribute that varies from ship to ship, so that big ships will have more trouble radiating away heat.
    Started updating the code to use the new Format and Table classes.
    Fixed some glitches in display of drone and fighter data.
    Added a new ShopPanel class that includes all the code that was shared between the Shipyard and Outfitter.
    Fixed a bug in the ship info display of turrets.
    Did some balancing of the ship attributes, speeds, and prices.
    Changed some labels in the ship info display to be clearer.
    Switched to always using the Color class instead of passing around RGBA float arrays.
    Added GPL statements to all source code files and added a license.txt file.
    Added support for "shipyard" and "outfitter" attributes on planets.
    Added empty mass to the ship info display, and also corrected acceleration to be per second.
    Uploaded all the files from my local repository to Google Code.
    Merged the functionality of BlurShader into SpriteShader, and DotShader into RingShader.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Made some changes to support Windows porting, assuming MinGW will be used to provide basic POSIX functionality.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Ported to Mac OS X.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    Fixed some more bugs that can occur when the first ship in your list is unsuitable to be your flagship.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Got permanent reputation changes working, with Ship::TakeDamage now returning a combination of PROVOKE, DISABLE, and DESTROY depending on the projectile's effect.
    Switched Engine to using the new ShipEvent class to report when a ship is boarded.
    Added a Politics class that can handle governments coming to the aid of allies, tracking the player's reputation in response to different actions, etc.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Added support for showing a list of all installed plugins, plus the icon and about text for each (if any).
    Added the view zoom to the preferences panel, and made it possible to adjust settings that have a range of values using the scroll wheel (hovering over the setting) instead of clicking to cycle the values.
    Made Panel::Click() able to distinguish double-clicks, so that the info panel can switch to a ship only if it is double-clicked, not just clicked twice in a row.
    Split the preferences into multiple pages (controls, settings, and plugins) to make space to display all the "hidden" settings and for new key controls to be added if needed.
    Fixed a bug in the preferences panel where clicking "Back to Menu" while editing a key binding was interpreted as changing that key binding to "B".
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Modified the preferences panel to highlight whatever line your mouse hovers over, to make it more obvious that you can click to edit.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Added a "Preferences" class to parse the preferences file, and made the load display and auto-aim controlled by preferences. Also added an auto-fire AI option.
    Updated the preferences panel to include escort command keys (and to have space for additional preferences).
    Took out some unneeded references to GameData in the headers.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Added GPL statements to all source code files and added a license.txt file.
    Updated how the UI panels are handled to allow the main menu to be called up regardless of what the game state is.
    Got the code to build without warnings when -Wall is defined.
    Added a preferences panel for customizing the key controls. (They are not yet used, though.)
    Parse GameEvents for additional definitions (#4238)
    
    * Parse events for additional defines
    * Simplify deferred definition loading
      - Use const & for `key`
      - Remove need for if-else if chain.
    
    This allows GameEvents to be the sole source of certain game object definitions without generating spurious warning messages.
    Fix bug where GameEvents could not alter News
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Added constructors that call Load() on a data element, so construction and Load() don't have to be done in two separate steps.
    Add missing reputation serialization to conversation ConditionSets
    
     - Fixes issue where changes to the stored government reputations were not reflected in the current political landscape when the changes were performed via conversation `apply` node.
    Extend reference-checking in GameData::CheckReferences (#3116)
    
    * Extend reference-checking in GameData::CheckReferences
    
     - Add Name() to Minable & Phrase
     - Add IsDefined() to GameEvent
    
    * Enable reference-checking for GameEvents and Missions
    
    * IsDefined->Name and other feedback
    Support 'visit' & 'visit planet' in events
    
     - Adds ability for a game event to give the player knowledge of a system or planet.
     - Visit actions occur after any 'unvisit' actions in the same event
     - Update the structure of GameEvent::Load
    Added map labels that appear when you discover Wanderer, Hai, Korath, and Coalition space.
    Made it possible for an event to mark a planet as unvisited without making the whole system unvisited.
    Extended the error reporting to also handle nodes that can contain arbitrary condition expressions.
    Added brackets and indentation for every BeginChild()...EndChild() pair to improve the code readability (compared to indentation with no brackets, or no indentation at all).
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Fixed the handling of reputation changes in GameEvent so it can handle assignment to an absolute value, in addition to adding or subtracting a certain amount.
    Added a way for a game event to "unvisit" a system - i.e. remove any knowledge you have of what is there, because it has changed in ways that you have no knowledge of.
    Added convenience functions to Planet and Government to simplify the syntax for querying political state. Also fixed a few busgs in my recent Command and AI changes.
    Added support for game events modifying your reputation.
    Added the capability for game events to create or destroy hyperspace links.
    Began adding support for "Game Events" that alter the galaxy at a certain point in time. (So far all they do is modify condition flags, to test that they are indeed triggering on the proper day.)
    Use a Point to allow asymmetric "hardpoint offset" specification
    
    Syntax assumes default specification is a symmetric hardpoint sprite, i.e. only the y-offset is needed. Specify 2 values to indicate the (x, y) offset, where (0, 1) points up and (1, 0) points right.
    
    `"hardpoint offset" [<x#>] <y#>`
    e.g:
      "hardpoint offset" 2
      "hardpoint offset" 0 2
    are equivalent.
    Made it possible for a ship's list of outfits in the Ship Info panel to spill over into a third column, reducing the space available for the cargo list.
    Added a function to check if one rectangle is fully contained within another.
    Fixed some compile issues on OS X.
    Added a "Rectangle" class to make dealing with rectangular regions simpler.
    fix(mechanics): Avoid routing through not-yet-defined systems (#5142)
    
    * Fixed pathing through undefined systems.
    
    The pathfinder could still choose to path through a system that has not
    yet been defined (for example, when it is created by a mission).  The
    rest of the game ignores these systems with similar checks to these.
    
    * Update source/GameData.cpp
    
    * Update source/System.cpp
    Some more style fixes. (#4429)
    
    No big changes, just some spaces removed.
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Update erase usage
    
     - Variant toRemove only needs to be initialized once
     - set.erase first performs a count, and erase(<key>) returns 1 if <key> was erased
     - System.links & System.neighbor used to be vectors, but were made sets in 4fa19f67a4f4e559f08b769bf7596ff52005eff2, and set supports erase(<key>)
    Added support for system attributes, to be used when picking systems for waypoints, NPCs, or persons.
    Made solar collection and ramscoop rates vary from system to system depending on the star(s).
    Enhancement: Consider next refuel stop when traveling to parent ship's system (#2997)
    
    * Convenience function to know if a planet has fuel for a ship
    
    * Consider the next refuel system when an escort is traveling to the parent.
    
    An escort was only checking if it had enough fuel to reach the next
    system, so it could get stuck when it had to travel through two
    consecutive systems where it couldn't refuel.
    
    Now it checks how much fuel is required to reach the next refuel system
    on the travel route to decide if it should refuel in the current system.
    
    * Clarify code and stop checking when we go over fuel capacity
    
    * Clarify comment.
    
    * Rework required fuel check.
    
    DistanceMap is already tallying fuel so choose the best route.
    Code cleanup: "static" is redundant inside a C++11 anonymous namespace.
    Fixed the handling of "add object <name>" in events that change system definitions.
    Sorting out the distinction between System::IsInhabited() and ::HasFuelFor().
    Fixed an issue with events changing system fleets
    
    When an event should replace the fleet presence in a system, it was
    instead always adding. This is due to a typo, where the haze is cleared
    instead. Best way to see this is, in a post-Free Worlds save, going to
    Altair and watching the Pug show up.
    The "add" and "remove" syntax now work for shanges to a system, too. Also allowed "add variant" in events that change fleets.
    Made it so an autopilot travel destination works even if the destination is a wormhole.
    Made System's list of links and neighbors a set instead of a vector, to simplify adding and removing items and checking if a given system is in the set.
    Made it so certain planets will only show up as something you can land on if your ship has certain attributes.
    Made it possible to specify the background haze image for each star system.
    Made it possible for each planet and system to specify the "music" to play when you are there.
    A system with nothing but a wormhole in it should not count as inhabited, even if the wormhole has a "spaceport" to get NPCs to land there.
    The trade panel is now only accessible is a system has commodity prices. Also added a "not for sale" label if some commodities are for sale but not others.
    Don't have ships try to land on wormholes to refuel.
    Systems can now define "minables" in addition to normal asteroids.
    Added a common base class for Ships, Projectiles, Asteroids, Effects, Flotsam, StellarObjects, etc. This is the first step in creating a generic collision detection framework that can deal with different object types.
    Map pathfinding now prefers less "dangerous" systems if multiple routes exist with the same fuel cost and number of jumps.
    Update my master (#1)
    Fixed a bug where the dynamic economy was affecting trade goods with no price defined in the system.
    Fixed escort refueling in systems that have fuel but not for you. Also fixed a problem where multiple ships could request assistance from the same ship at the same time.
    Stars with a big cloud around them are no longer treated as if they have a huge radius.
    Added a missing #include in System.cpp. Also made the neighbor distance constant public so it can be referred to by the map.
    Added a relatively simple but robust dynamic trade implementation.
    Added warning messages whenever a line of a data file or saved game is unrecognized.
    Added "IsStation" and "IsMoon" to StellarObject so that non-landable objects can also generate the appropriate nouns to refer to them.
    Added support for planetary domination. (But, it won't do anything until defense fleets have been set for each planet.)
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Modified stellar objects so that the object at the center of a system rotates from one day to the next at the speed given as its orbital time, rather than staying always at the same orientation.
    Got game events to correctly handle updating each planet's record of what systems it is in, so that game events can create or destroy wormhole entrances in addition to normal planets.
    Added support for game events modifying the composition of fleets.
    Added support for game events changing any of the contents of systems (stellar objects, asteroids, owner, fleets, trade prices, etc.).
    Added the capability for game events to create or destroy hyperspace links.
    Switched System::GetGovernment() to returning a pointer instead of a reference, to match how I refer to GameData objects everywhere else.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Added Planet::GetSystem() so you can map any planet to the system containing it.
    Added individual "fleet" descriptions for each system, so that the local ships vary depending on where in the galaxy you are and how populous the system is.
    Added GPL statements to all source code files and added a license.txt file.
    Added a "color" field for governments, and modified the map panel to allow coloring systems by government.
    Modified the map display to allow coloring systems based on whether they provide shipyards or outfitters.
    Uploaded all the files from my local repository to Google Code.
    Support data files encoded by UTF-8.
    feat: Print line numbers in DataNode traces
    
    DataNode stack traces are not always unique (e.g. Phrase definitions), so additional information may be helpful.
    feat: Support algebra in ConditionSet expressions (#3128)
    
    * Handle assignment operations inside ConditionSet::Test
    
     - Add boolean test/apply indicator to each expression
       - Determine if a ConditionSet performs tests or assignments in the expression constructor
     - If the ConditionSet is not pure (mixes assignments and tests), use the assignment operators to alter an initally-empty map)
       - When obtaining the value from strings (e.g. conditions), first check the created map, then fall back to the player's conditions.
     - Warns when loading if an and/or node uses assignment operators
    
    * Create classes to manage complex condition expressions
    
     - SubExpressions represent each side of an expression, with methods to allow serialization and evaluation
     - SE::Operation class manages the details of math within a given side, by tracking the location of operands and operator
    
    * Implement sequence generator algorithm based on Dijkstra's shunting yard
    
    * Alter Add methods to use SubExpressions and Operations
    
     - Add SubExpression and Expression constructors for simple conditions
       - Simple conditions have only one token per side, so vector constructs are unnecessary.
    
    * Simplify adding operators, reduce code duplication
    
     - Add modulus to supported simple operations
        e.g.        `year % 7 == 1`
          will be true for years 1, 8, 15, ...
     - Moved the precedence map to an anonymous function
       - Simplify the process of updating supported simple operators, as all maps/sets are now in the same region of the file.
     - Reduce duplication with 'AddOperation' private method
    
    * Extend DataNode with static methods for string parsing
    
    * Simplify FW:Intro offer checks
    
    * Use stdlib to simplify, update initializations
    
    * Maintain support for legacy `never`
    
    * Simplify warnings & check for leading adjacent (
    
    * Tweaks
    
     - Avoid taking reference to `map::find` iterator (as find is return-by-value)
     - Add missing `vector::reserve()` call
     - Reduce number of different `vector::emplace_back` overloads used
     - Reduce calls to `DataNode::IsNumber` by checking for `"random"` first
    
    * Simplify "deep convoy" checks
    
    * Add bounds-checking for user-input condition values
    
     - No bounds checks done for the results of computations
    
    * Update some comments
    
    * revert accidental "has" -> "not" change
    Fixed minor code style issues (#4428)
    DataNode::PrintTrace() now prints the full trace even in copied nodes, and prints the file name if called on a child node of a DataFile.
    Avoiding parsing error messages in ConditionSet from trying to parse non-numeric values as numbers. Also did some code cleanup.
    More updates to the code comments.
    Code cleanup.
    Added error reporting for unmatched quotation marks.
    Errors are now logged to "errors.txt" in the config directory, in addition to being printed to STDERR.
    Added an error message if number parsing fails. Also, it now returns 0 instead of NaN, to avoid having the NaN propagate and cause all sorts of errors.
    Added support for printing a "trace" of a faulty DataNode.
    Switched to 64-bit integers when parsing data file numbers to avoid overflow errors with numbers of credits above 2 billion.
    Did some optimizing of the file parsing code, so that startup will not bog down as the game data grows in size.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Got serialization of conversations working (without bothering to preserve the original node label strings).
    Updated all the functions that save data to use the new DataWriter class (to ensure proper indentation, quoting, etc.).
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Fixed some things that Google's cpplint warns about (mostly, constructors that should be marked explicit).
    Continuing to work on code cleanup and commenting.
    Moved the "mini map" code into MapPanel, and added pointers for missions and waypoints.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Made all dots in the radar opaque (so blue objects don't stack to become white).
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Made it possible to plunder outfits from a ship's cargo hold.
    Removed death benefits. Depreciation is a better way of balancing ship capture, and death benefits make it less profitable to fight stronger ships than to pick on easy targets, which is backwards.
    Made Panel::Click() able to distinguish double-clicks, so that the info panel can switch to a ship only if it is double-clicked, not just clicked twice in a row.
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    Continuing to add explanatory comments and clean up messy code.
    Starting to go through the code to add more comments and refactor things that are unclear or could cause errors down the road.
    You can now cancel "capture ship" without fighting by clicking "defend" as your first action.
    Changed Panel::Drag and Panel::Scroll to take double dx/dy
    
    Fixes endless-sky/endless-sky#805
    Fixed a bug where if your ship is captured, you retain control of it.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Switched to another equation for crew bonuses: captain gets two shares, families of dead crew members each get one.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Spell-checked the comments.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    For capturing ships, added a "death benefit" that must be paid based on how many of your crew members died, which reduces your profit margin.
    Added "bonus" payments that must be made to your crew if your ship has more than one crew member and you plunder or capture an enemy ship. This is to make plundering less ridiculously lucrative.
    Took out some unneeded references to GameData in the headers.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Got capturing working, at least for your flagship. Other ships can't capture other ships yet.
    Added calculation of capture odds and casualties to the boarding dialog.
    Added a "boarding" dialog that lets you choose what commodities or equipment to plunder from a disabled ship. (Capture is not yet implemented.)
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Added support for special commodity classes, just to be used for random cargo in missions that is not one of the basic commodity types.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Added specific named trade goods for each commodity, to be used as mission cargo.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    Continuing code cleanup and commenting.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Added calculation of capture odds and casualties to the boarding dialog.
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Fixed some things that Google's cpplint warns about (mostly, constructors that should be marked explicit).
    Made Panel::Click() able to distinguish double-clicks, so that the info panel can switch to a ship only if it is double-clicked, not just clicked twice in a row.
    Added a line in the bank for your salary and tribute income.
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    Continuing to add explanatory comments and clean up messy code.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Made it possible to enter numbers like "800K" or "4.38m" in the bank panel.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Added help messages that pop up the first time you click on a certain panel (and the first time you end up stranded or dead).
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Updated the bank panel to handle more than 8 line items (by combining some together into an "Other" line).
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Added a new generic dialog class to replace specific dialogs like the "how many credits?" one.
    Added GPL statements to all source code files and added a license.txt file.
    Updated how the UI panels are handled to allow the main menu to be called up regardless of what the game state is.
    Uploaded all the files from my local repository to Google Code.
    Added "labels" for planets you can land on, which show up when you get near them.
    Merged the functionality of BlurShader into SpriteShader, and DotShader into RingShader.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Updated the ring shader to support dashed lines, so I can use it for the main display of your ship's shields and hull.
    Added a "status overlay" preference option where rings representing shield and hull strength are overlaid on all "escorts" and enemies.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Switched to always using the Color class instead of passing around RGBA float arrays.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    feat(graphics): Report shader linking error details (#4994)
    
    * feat: Log shader link errors
    
    * Apply suggestions from code review
    Increase warning visibility on Windows systems
    
     - Windows console / stderr / stdout output is hampered for GUI applications
     - Replace usage of cerr for logging errors with Files::LogError, which
       will echo to cerr and also to a file.
    One more missing #include.
    Replacing "NULL" with "nullptr".
    Moved all the source code files into a "source" folder to clean up the root folder.
    Fixed a memory leak in my new Shader upload code.
    The program now auto-detects the proper GLSL version number so it does not have to be set via conditional flags for each OS.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    feat(mechanics): Aborting is now a separate mission trigger from failing (#5426)
    feat(mechanics): Save collections in order by element name (#5333)
    
    * feat(saves): write collections in deterministic order when saving
    
    * refactor: simply methods via capture lambdas
    
     - No need to pass DW instance around
     - use more "using" declarations to simply method declarations
    
    * pr feedback + lambda styling
    
     - applied a more uniform style to lambda expressions
    refactor(map): use single bind+unbind when drawing mission system rings
    
     - use explicit bind() - add() x N - unbind() sequence rather than (bind() - add() - unbind()) x N
     - if a system is both a waypoint and contains a stopover planet, don't double-draw a given ring color around it.
    Add scrolling to MissionPanel job/mission panes (#4424)
    
    * Add some additional comments to MissionPanel
    
    * Add preliminary automatic scroll updating when handling keyboard input
    
    * Improve autoscroll behavior
    
    * Scroll the respective mission list when clicking names or systems
    
    * Draw mission lists before the map legend and selected system info
    so that a list overflowing the available area will always be "behind" other UI elements
    
    * Switch from paginated scrolling to "smart" scrolling
    i.e. scroll only the minimum necessary, and only when necessary.
    
    * Use a snap-to scroll instead of interpolated
    Reordered drawing on map mission panel so rings are behind UI elements. (#4416)
    
    Fixes endless-sky#4415
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Using float v. double in some cases of -Wdouble-promotion
    
     - Add some <algorithm> headers for uses of std::min or std::max
    Made it so that when the map automatically shifts to center on a selected system, the motion animates rather than happening instantly.
    Display a map tooltip for escorts in a given system (#3587)
    
    * Basic Hover() support
    
    * Basic tooltip display
    
    * Tooltip displays active and parked escort counts
    
     - Tooltip shifts to remain on-screen if near screen edges
     - Special tooltip message for hovering over a system with just the flagship in it
    
    * Rework tooltip trigger to activate after 1s of dwell time
    
     - hoverSystem is guaranteed to be in escortSystems
     - Set the hover criteria on mouse move (i.e. the hover event)
     - Track dwelling time every step (i.e. the mouse doesn't have to keep moving)
     - Eliminate unused code / checks.
    Show visited mission systems (#3567)
    
    * Expose Visited<T> for use by the map
    
     - Const set<T> references to Waypoints() & Stopovers()
    
    * Draw a "faint" ring around visited waypoints
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Fixed map search centering at non-default zoom. (#3708)
    
    * Fixed map search centering at non-default zoom.
    
    * Made map centering after search and mission selection more consistent.
    When you click a system in the map mission view, iterate through all missions that involve the system. (#3162)
    
    * Show all missions that involve the system.
    
    This allows you to know which of the missions has the system as a
    waypoint or has a system planet to land on.
    
    * Comment and code style.
    Define additional filled colors in interfaces.txt (#3425)
    
    * Define additional filled colors in interfaces.txt
    
     - Further support for modified interfaces / reskinning.
    
    * Added comments to color definitions
    
    * Reflect name change in code too
    Made it so pirates won't steal passengers when plundering. Also cleaned up and simplified the CargoHold transfer code.
    Code cleanup: "static" is redundant inside a C++11 anonymous namespace.
    DistanceMap now takes total fuel cost into account (hyperdrive vs. scram drive) instead of assuming jump cost is always twice the hyperspace cost.
    Added a help message explaining how to set which escort is your flagship that is shown in the player info panel, the outfitter, or the shipyard the first time the player has multiple ships in their fleet.
    Fixed extra, "hidden" crew members being counted on escorts in PlayerInfo::UpdateCargoCapacities().
    Switched from Planet::GetSystem() to Planet::IsInSystem() wherever possible, to support wormholes (which exist in more than one system).
    Fixed some Job Board cases where an invisible mission could end up selected.
    Made it so the map zoom level is remembered when you close the map. Also cleaned up some of the map code.
    Made Panel::Click() able to distinguish double-clicks, so that the info panel can switch to a ship only if it is double-clicked, not just clicked twice in a row.
    Added a setting to adjust the scroll speed.
    Moved the beginner help messages out into a data file.
    Made it so the currently selected commodity or map coloring is remembered in the player info and is carried over to the trading panel if it is a commodity.
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    Continuing to work on code cleanup and commenting.
    0.9.2 updates
    Fixed some places where the mission panel might not check if an accepted mission is visible.
    The navigation buttons are now in the same place for all four map panels. Also made the UI panel corner highlights a bit brighter.
    Formatting and const-correctness fixes.
    Autoselect mission in selected system or along travel plan.
    Fixed the "bunks free" display in the mission panel to not count extra "crew" on escorts.
    Changed Panel::Drag and Panel::Scroll to take double dx/dy
    
    Fixes endless-sky/endless-sky#805
    Merged the functionality of BlurShader into SpriteShader, and DotShader into RingShader.
    For systems on your current route, the mission panel now shows the correct number of jumps. Also, jump drive jumps are now counted as one jump rather than two.
    The mission panel now colors the map by player reputation, by default.
    Added support for "stopover" planets specified by a mission.
    The "ports" map now shows whether each planet has been visited.
    If a job is accepted and other jobs are available in the same system, prefer selecting one that has the exact same destination planet.
    When you accept a job, if any other available jobs have the same destination system one of them will be selected next.
    A job's "on accept" dialog, if any, will now be shown when you accept it.
    Fixed two places where the zoom factor was not taken into account in the map.
    Fixed a bug where clicking a system to select missions stops working if you abort your last mission.
    Added a key for the sales maps.
    Adjusted the scroll ranges of the sidebars in the mission panel to allow them to clear the new UI elements on the bottom of the screen.
    Added a map key for the missions panel.
    The map can now be zoomed with the scroll wheel in addition to with buttons / keys.
    Fixed a few things in the map zooming code.
    +/- buttons/hotkeys now work on all map panels
    Switched the Escape key to closing dialogs, like people expect it to, instead of always going to the main menu.
    Fixed the bug where the mission panel's display of cargo and bunk space free includes parked or disabled ships and ships in other systems.
    Added scroll wheel support for the mission lists.
    In the map panel, added a fainter line that shows the path to the currently selected system, so you can see how you would get there even if it is not the player's current travel destination.
    Fixed a few places in MissionPanel where a key press could still change your jump path.
    Selecting a mission in the jobs panel no longer changes your travel plan to go to that mission's destination.
    Missions that are waiting on an NPC condition or visiting a waypoint are now "greyed out" in the mission list as well as in the pointers.
    Made the mission pointer colors customizable in the data files, to allow experimenting with other color schemes.
    "Dimming out" the mission pointer for missions that have unmet NPC conditions or waypoints (to make it clear that you cannot complete them yet).
    Modified the mission panel warnings for negative crew or cargo space to only appear when accepting a mission that actually requires that space.
    Added Control+W (or Command+W on the Mac) as a universal shortcut for "close current window."
    Added two new map views, showing all ships and outfits that you know can be bought, and where they are sold.
    Made it possible once more to accept jobs if you can make room for them by selling ordinary cargo or firing non-essential crew, but now it pops up a dialog asking if you want to do that rather than assuming you do and letting your cargo "capacity" go negative.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Removed superfluous std:: prefixes.
    Modified the pathfinding when using the jump drive so that you don't have to have explored either endpoint, as long as you know it's there.
    Took out most of the overloaded operators for Command, because it is not at all clear how they should handle the turn field, and ignoring it was causing problems.
    Made it possible to accept a mission if you don't have bunks or cargo space free, but can make it free by firing crew or selling ordinary trade goods. (This is to reduce the chance of a mission string being cut off because the player has no space for the next mission.)
    Bug fix: the "bunks free" was not subtracting passengers.
    Fixed a bug where the mission panel wasn't showing your free cargo and bunk space unless you were landed on a planet.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Added help messages that pop up the first time you click on a certain panel (and the first time you end up stranded or dead).
    Modified the map display to show the name of any unexplored system that is a destination of a current or available mission (but no further information).
    Increased the space for the mission description in the mission panel, to allow up to five lines of text without looking cramped.
    Added a "find" dialog to the map panel (accessible by pressing "F").
    Added an extra circle around the selected mission's system, in the mission / job panel.
    Fixed a bug where accepting a job in the job board was calling the "accept mission" callback.
    Got "invisible" missions working: being accepted automatically, and not showing up in any mission lists or displays.
    Added a button in the mission panel to go to the map detail ("ports") panel; page up and page down also work to toggle between them.
    Switched over to the new Mission implementation. There are still some aspects that are not working yet (like, the job board).
    Added a way to toggle between the missions map and the system details map.
    Fixing a few glitches I found while playtesting.
    Fixed a few glitches in the mission panel: selecting invisible systems, and the map shifting when you accept a mission.
    Made some fixes to get the Mac build working.
    Added special missions to the map and the mission panel.
    Modified the mission panel to not change the player's travel plan until they click on a system or mission.
    Updated the UI to use the same three "named" colors everywhere for three different levels of text brightness, for consistency.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Fixed several glitches in the handling of missions (duplicates when reloading pilot, not moving passengers into your ship, allowing infinite passengers, formatting / display issues).
    Updated the Mac OS X project. THat required a workaround because XCode apparently does not support thread_local static variables yet.
    Refactored MapPanel and MissionPanel to share the underlying code for drawing the map.
    Added support for passenger-carrying missions.
    Added mission completion messages and payment (still only for cargo, not passengers).
    Added mouse click support to the mission panel.
    Added a "mission panel" that lets you select missions from a job board. It doesn't support scrolling or mouse clicks, yet.
    feat(mechanics): Enable creating Commands from datafile text (#4997)
    
    Doesn't add the bindings for actually reading in & then using the commands, but is one step in that direction.
    
    * Add command loading and sending it to the Engine
    This is part of the automatic-testing PR endless-sky#4370 and could also be used for endless-sky#4720.
    
    * Replaced if/else chain in Command loading by lookup map.
    Also fixed a bug that caused commands to be skipped during loading.
    
    * Add command forwarding through MainPanel.
    
    * Apply suggestions from code review
    Print the relevant token when an unrecognized command is found.
    refactor(input-handling): Move kb/m reads from AI & Engine to only Engine (#4715)
    
    * Add an "And" function to the Command class.
    
    * Move keyboard inputs from AI to Engine
    Combine mouse and keyboard inputs into single activeCommands variable
    
    Tested (OK, no issues seen):
    MENU
    MAP
    INFO
    FORWARD, LEFT, RIGHT, BACK, PRIMARY, AFTERBURNER
    SCAN
    DEPLOY
    HAIL
    BOARD
    CLOAK
    LAND (autopilot)
    LAND (switch landing targets)
    LAND (landing based on mouseclick)
    JUMP (autopilot)
    JUMP (insufficient fuel warning)
    JUMP (WAIT, fleet waiting for jump)
    TARGET (cycle through enemy ships)
    NEAREST (cycle through friendly ships)
    SELECT (switch secondary weapon)
    SECONDARY (fire secondary weapon)
    DEPLOY
    FIGHT
    GATHER (looks the same as before the change)
    HOLD (looks the same as before the change)
    AMMO
    
    Signed-off-by: Peter van der Meer <peter.vd.meer@gmail.com>
    
    * Add comments on Command and made comments full sentences.
    
    - Documented the use of the WAIT command.
    - Made all comments full sentences, included full stops.
    
    * Fixed clearing commands from the wrong variable.
    
    * Remove duplicate audio-repeat-avoidance construct
    
    Repeatedly playing audio was already resolved by forwarding autoPilot
    commands only 1 single frame through activeCommands and by clearing
    the autoPilot at the same time as giving the error-message and playing
    the fail sound.
    
    * Fix an issue where JUMP is cleared before out-of-fuel error-message.
    
    The targetSystem gets set during emergency jumps (without a travel plan).
    If such situation happens and there is insufficient fuel or no jump or
    hyperdrive, then we still want the warning to be sent on the first time
    the jump command is given.
    The status overlay now shows the disabled threshold
    
    #4513
    Place NPCs from boarding missions while in-flight
    
     - Expose a pointer to the recently-accepted boarding mission
     - Move "Place" code for NPCs to public method
     - Check for an active boarding mission in SpawnFleets
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Cloaked ships can now be hit by projectiles (but still can't be seen, targeted, or tracked, and still don't pick up flotsam or trigger projectiles with a trigger radius).
    Whether a function parameter that is passed by value is const or not is an implementation detail, not something that needs to be defined in the class interface.
    Implement a ShipEvent queue to allow delayed ShipEvent handling (#3371)
    
    * Implement a ShipEvent queue to allow delayed ShipEvent handling
    
     - Handling ShipEvents can result in new UI elements.
     - Only one UI element should be created and displayed to the player at a time (i.e. do not display a dialog and the BoardingPanel simultaneously).
     - Callbacks from one UI element from a given ShipEvent may result in status changes that should influence other UI elements created from the same ShipEvent (e.g. if a mission conversation offered upon boarding an NPC results in that NPC's destruction, the player should not be able to plunder said NPC).
     - Fixes a preexisting issue where the boarding panel would be offered if the player dies in a conversation.
    
    * Switch from GetUI()->IsTop(this) to GetUI()->Top().get() == this
    
     - IsTop() checks only drawn panels, not panels that are requested but not yet drawn.
    Made the target pointer also show up for target asteroids.
    Batching the draw commands for projectiles and effects.
    Switched to using 2D "texture arrays" for sprites, so all the frames fit into a single texture.
    Added an "asteroid scanner" outfit. Also made it possible for turrets to track minable asteroids and for target "crosshairs" to have something other than 4 points.
    Added a new "Visual" class that represents just the information we need to track for an Effect once it's instantiated. Using it in place of Effect saves a string copy and a good deal of memory for each active visual effect.
    Switched to using a vector for Projectiles and Effects, to reduce memory allocations and improve cache performance.
    Refactored Engine::CalculateStep(), splitting each set of calculations into a separate function to improve clarity and to open a path for possibly multi-threading the most expensive calculations.
    Added colored "faction markers" to the targeting display.
    Left- and right-clicking the Radar display issues appropriate click commands (#2679)
    
    * Right-clicking the Radar display will issue a scaled MOVE_TO order
    
    Current behavior is to allow clicking "behind" or through the radar display, e.g. a right-click acts as though the radar display is not present.
    
    With this PR, right-clicking the radar display will send a MOVE_TO order to your selected escorts, with the scaled target position.
    This allows ordering your escorts up to 128 / 0.025 = 5120 units away from your flagship's current position in the system, without requiring you to zoom out.
    
    * Read radar position and size from interfaces.txt
    
    * Radar display clicking works for left-click actions and also drag-select
    
    * Radar clicking obeys an opt-in preference setting
    
    * Change 'static const <T>' to 'const <T> &' for GameData references
    
     - Forward compatibility
     - 'Interactive' -> 'Clickable', to indicate how to interact with the radar display.
    
    * Formatting fix.
    A few other small code cleanup changes.
    Remove Unused 'forget' defintion
    
    Ship 'forget' tracking is done internally within the Ship class.
    Added an indicator that shows the progress of your cargo and outfit scans of a ship.
    The flagship highlight, if drawn, will now be animated to match the ship.
    Added a preference to highlight the flagship (so it can be distinguished from other identical ships).
    Made it possible to right click a ship or location to tell your escorts to follow a friendly ship, attack a hostile ship, or move to a location.
    Made it possible to assign number keys 0-9 to groups of escorts. (But, it's not possible to command them yet.)
    Made it possible to click escort icons to select them.
    Made it possible to zoom the view in or out (via the scroll wheel or the +/- keys) without changing the UI zoom.
    Added NPC AI support for harvesting flotsam. (For miners, or for distracting pirates by dumping cargo.)
    Implemented a much more efficient collision detection algorithm, to speed up large battles.
    Fixed some things that Google's cpplint warns about (mostly, constructors that should be marked explicit).
    Added a common base class for Ships, Projectiles, Asteroids, Effects, Flotsam, StellarObjects, etc. This is the first step in creating a generic collision detection framework that can deal with different object types.
    Moved the "mini map" code into MapPanel, and added pointers for missions and waypoints.
    Limited the alarm sound to playing once every 3 seconds.
    Limited help messages from other ships to one every two seconds, so they don't flood the screen when lots of ships are under attack.
    As an experiment, added  pop-up map that shows where you're going each time you jump. (If people play with it and don't find it useful, it'll be easy to take out again.)
    Cargo dumped by ships can now be picked up by others. Also, destroyed ships sometimes leave cargo behind.
    Fixed placement of planet labels when you first enter your ship.
    Added a warning siren when hostile ships first appear.
    Made planet labels shift to a different side if they are hidden underneat another planet.
    Added "barbs" on the ring labels for planets you can't land on, to make their status clearer.
    Planet labels are now colored by government.
    Added support for fighter bays where the fighter it is carrying is visible, drawn either below or above the ship.
    Added "labels" for planets you can land on, which show up when you get near them.
    The "on enter" mission event now also triggers if you enter a system via a wormhole, instead of via hyperspace.
    The target outline will now rotate to represent what direction the target is facing in.
    Switched back to the old order of ships, so the player's escorts will respond properly. But, added a special case in the drawing code to draw the flagship last.
    Added the ability to double-click a ship to board it, or a planet to land on it.
    My previous change to support losiong your ship through boarding combat broke the handling of having your ship die normally. Fixed that.
    Added a pointer that shows what direction your target is in (relative to your ship).
    Took out the need for Information and Interface to know about Radar (replacing it with generic named points, to be handled separately, instead).
    Modified radar to display correctly when the game is first loaded, and to show dominated planets in green.
    Added support for clicking on ships and planets to select them.
    Made some changes to improve thread safety.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    An initial attempt at getting the escort HUD to "stack" ships so that there's enough space to show them all.
    Added display of what system your "absent" escorts are in, including all non-fighter ships that are marked as escorts by their government or personality, even those you do not own.
    Updated the status rings to scale with the ship size (and to not be shown when the ship is cloaked).
    Added a "status overlay" preference option where rings representing shield and hull strength are overlaid on all "escorts" and enemies.
    Added support for mission actions to be performed when you enter a system (showing a dialog or conversation, setting flags, etc.).
    Added convenience functions to Planet and Government to simplify the syntax for querying political state. Also fixed a few busgs in my recent Command and AI changes.
    Switched to a more elegant way of drawing cloaked ships, and made all non-player cloaked ships not show up on radar.
    Added a cloaking device. Have not yet written the AI strategy for when to engage it, though.
    Spell-checked the comments.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Modified hyperspacing so that escorts keep the same position they have relative to their parent unless the distance is higher than 1000 pixels.
    Added a "hailing" panel, which displays communications with a ship or planet. (But, I have not implemented the actual messages yet.)
    Friendly ships now ask you for help if they are under attack by an enemy of yours and thank you if you respond by attacking that enemy.
    Switched Engine to using the new ShipEvent class to report when a ship is boarded.
    Added a display of the current status of all your escorts (shields, hull, heat, energy, fuel).
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Refactored to consistently call the PlayerInfo, "player", and the player's flagship, "flagship".
    Added a "Messages" class to allow any thread to safely add a message to the display.
    Added a rudimentary ship-boarding AI.
    Switched to storing cargo in PlayerInfo when landed, then divvying it up among your ships when taking off. This makes it possible to use the cargo capacity of all your ships, and avoids needing to sell cargo when selling ships.
    Added a "flash" when entering hyperspace. Also increased the minimum speed for engaging the hyperdrive, so it will be easier to slow down to that speed.
    Fixed a few final issues in the load / save / new mechanics. It all seems to be working correctly, now.
    Added GPL statements to all source code files and added a license.txt file.
    Got "New Pilot" working, including visiting the shipyard and picking out an initial ship.
    Added a "New Pilot" dialog (which doesn't yet move you straight to the shipyard, though).
    Added saving of the game (every time you leave a planet, or if you quit while on a planet).
    Added display of the current pilot's information in the main menu.
    Added a secondary trigger key for weapons that use up ammo, and a display of ammo remaining for each.
    Uploaded all the files from my local repository to Google Code.
    feat(mechanics): Piercing resistance attribute for reducing the effect of incoming piercing projectiles (#4521)
    feat(mechanics): "Protection" attributes that mitigate a fraction of incoming damage (#4519)
    feat(mechanics): Support multipliers for shield generation and hull repair related stats (#4525)
    
    * Added multiplier attributes for shield generation and hull repair related attributes
    
    * Display multiplier attributes as percentages
    
    * Fixed tooltips
    
    * ShipInfoDisplay now takes multipliers into account
    
    * Don't show shield/hull repair stats if the multiplier is <= 0
    
    * Fixed accuracy of various calculations and updated hasShieldRegen and hasHullRepair
    
    * Hard coded a whitelist for the multipliers to allow them to be negative
    
    * Code simplification
    
    * Error fixes
    
    * Revert whitelist changes
    
    Let whitelist changes occur in a separate PR
    
    * Updated hasShieldRegen and hasHullRepair
    
    Negative costs no longer block repairs
    
    * Removed now unnecessary fuel calculations in ShipInfoDisplay
    
    * Update ShipInfoDisplay.cpp
    
    * Update ShipInfoDisplay.cpp
    
    * Moved variables back to their previous locations (as they're no longer needed to computer hasShieldRegen or hasHullRepair)
    
    * Use conditional operators instead of multiplying by a boolean
    
    * Change the wording in the tooltips
    
    * Added multiplier attributes to the whitelist
    
    Values down to -1 are allowed. This means that at their lowest value, multipliers will have a -100% effect on the specified stat. They can not go lower then this, because then they would be flipping the sign on whatever the stat is, e.g. causing a shield generator to go from consuming energy to producing it.
    feat: Solar heat mechanic for increased heat generation the closer you are to the system center (#4894)
    feat(weapons): Support variable ammo quantity consumption (#4514)
    
    * Added an "ammo usage" weapon attribute that determines how many units of ammo are consumed on fire
    
    * Ammo usage now shows in the outfitter
    
    * Syntax change
    
    * Spacing
    
    * Spacing
    
    * Tidying up the code
    
    Removed the IsWeapon check from the display because any outfit with a >1 ammo usage is guaranteed to be a weapon.
    
    Used a conditional operator in Weapon.ccp to cut down on code.
    
    * Allow an ammo usage of 0
    
    The outfit must still be installed in order to fire.
    
    * Renamed ammoPair to just ammo and left a comment explaining what it is
    
    * Added another comment for clarification
    
    * #include <utility> in Weapon.h for the ammo pair
    Scram drive is now displayed as a per second value just like jump speed
    Updated OutfitInfoDisplay to support units for attributes
    Introduce new fuel-based Outfit attributes (#3870)
    
    Implements new reserved Outfit attributes `"fuel consumption"`, `"fuel generation"`, `"hull fuel"`, and `"shields fuel"`, and provides errors / warnings for poorly equipped ships using fuel for energy.
    correct jump speed displayed
    
    Jump speed is a velocity and should thus be displayed in its per second value, as is done for similar stats.
    Scaling the display of "heat dissipation" by 60, since its units are heat per heat per frame.
    Number formatting is now limited to one decimal place, which is enough for all current attributes. Also added a separate formatting function for numbers of credits.
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Fixed the "mass:" outfit info label and made the capacity lines and hardpoint lines group together.
    Display an outfit's mass (if nonzero) right after the cost. Also, fixed the spacing of the attributes list for weapons with no non-weapon attributes.
    Fix Outfitter Attribute display bug (#3150)
    
    * Update OutfitInfoDisplay
    
     - Change `auto` to the type `pair<string, double>` to avoid adding char
     - push_back to emplace_back
     - Simplify display of per-second values
     - Omit per-second values if reload = 60 (i.e. per second = per shot)
     - Separate non per shot / per second values from values which should be printed as per shot / per second
        - Addition of new damage types no longer requires updating the `isContinuous` offset
    
    * Keep printing per-second values for weapons which fire once per second
    
    * Iterate over the natural type pair<const char *, double>
    Added a "Dictionary" class that works like an STL map<string, double> but allows faster lookup and no string allocations.
    Add cloaking heat attribute (#2844)
    
    * Add cloaking heat attribute (#116)
    
    * Add cloaking heat tooltip (#117)
    
    * Cloaking should now be possible :P (#120)
    
    * Don't decloak just because heat is high.
    
    Otherwise, even a cloaking device with no "cloaking heat" would not work on a ship with 90% heat. Plus, if you overheat while cloaked, it's your own darn fault.
    Added "fuel damage" as a damage type.
    Code cleanup: using lround() for more accurate rounding of double to integer.
    Code cleanup: "static" is redundant inside a C++11 anonymous namespace.
    Switched resistance to using @Elyssaen's proposed mechanics (with no heat or piercing resistance, for now).
    Added turret turn rate to the outfit info displays.
    Made it possible for outfits to require licenses to buy them.
    Solar power + regenerator compatibility (operational energy) (Ref #1879) (#1896)
    
    * Replaced negative energy generation with operational energy
    
    Shield regenerators now have positive 'operational energy' instead of
    negative energy generation, to avoid a problem where solar collection
    wasn't compatible with them.
    
    * Operational energy revisions
    
    1. Idle energy now considers operational energy.
    2. Flight check now considers operational energy, and returns a new
    conversation if you have negative energy even before checking thrusters.
    
    * Revisions to flight check for solar collection
    
    Added solar collection into flight checking, and added a new
    conversation if your ship runs the risk of becoming derelict too far
    from the system centre. Also fixed a <= that should be an <.
    
    * Changed 'centre' to 'center'
    
    * Tweaked conversation wording
    
    Replaced "system center" with "center of a system", and "steering" with
    "steering systems".
    
    * Renamed operational energy to energy consumption
    
    * Fixed a stray tab in tooltips.txt
    Switched from constant arrays to constant vectors in a few places to avoid ugly sizeof() code.
    Made it possible to specify how much "jump fuel" a drive consumes.
    Made non-installable outfits show "This is not an installable item" in the outfit info.
    Made solar collection scale by 60 in Outfitting
    
    Scaled solar collection to 'per second' to be consistent with energy
    generation and how it appears in the idle energy bar once installed.
    Added "active cooling" support. Also fixed a typo in the Coalition ship hardpoints.
    In the outfitter, only show the "sells for" line if it's possible to sell this outfit (i.e. the Sell button is active).
    The sale price of ships and outfits now depreciates over time. If you sell "used" outfits to an outfitter, they remain in stock to buy back (at the reduced price) until you leave the planet.
    Added hull and shield repair heat to the outfit and ship info displays.
    Homing weapons can now have different tracking modes: better against big ships (optical), against hot ships (infrared) or against ships with no radar jamming.
    Refactoring: switching to using "!set.count(...)" instead of "set.find(...) == set.end()" because it's more concise, just as efficient, and seems clearer.
    Update my master (#1)
    Suppress the last two "per shot" weapon attributes for continuous weapons.
    fix turret info display error and gun info spelling mistake
    Added slowing, disruption, and piercing to the weapon info display in the outfitter.
    Made the "This outfit is unplunderable" message dim so it doesn't look so out of place.
    Trying to speed up the fleet strength calculations.
    Marked all hand-to-hand weapons as unplunderable so there does not need to be a special case to handle them.
    In outfitter, don't display a number next to boolean attributes.
    Merged the common code from the two info display classes into one common base class.
    Regularizing the shipyard and outfitter maps code to make them easier to merge.
    Made the "shield energy" and "hull energy" display in units per second.
    Outfit attributes are now shown in units per second instead of per frame. Also, weapons now display their heat and ion damage and their fuel cost (if any).
    Added a display of the currently selected item's attributes to the shipyars and outfitters map views.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Typo corrections and cosmetic changes
    Fixed the display of "weapons" with reload = 0.
    Did some significant optimization (at least 2x faster calculation times in big battles) by switching weapon attributes from a string to double map to a fixed set of values accessed by inlined functions, instead.
    Added a new torpedo launcher, and updated the projectile sprites for several other weapons.
    Gave Outfit some new convenience functions for getting weapon info that takes submunitions into account.
    Added "license" outfits that can be purchased as a special item to give the pilot a license for a given ship type. (Ships don't yet specify what licenses they require, however.)
    Started updating the code to use the new Format and Table classes.
    Added some hand-to-hand weapons (with no outfit graphics for them, yet).
    Added individual "fleet" descriptions for each system, so that the local ships vary depending on where in the galaxy you are and how populous the system is.
    Added a new ShopPanel class that includes all the code that was shared between the Shipyard and Outfitter.
    Added the outfitter UI. You can browse all outfits, but buying is not yet enabled.
    feat(mechanics): Save collections in order by element name (#5333)
    
    * feat(saves): write collections in deterministic order when saving
    
    * refactor: simply methods via capture lambdas
    
     - No need to pass DW instance around
     - use more "using" declarations to simply method declarations
    
    * pr feedback + lambda styling
    
     - applied a more uniform style to lambda expressions
    Add more eligibility criteria to NPC-carried outfits
    
    While it's possible for Outfits Expansions, Bunk Rooms, and similar to be carried in cargo, it does look strange.
    This commit prevents NPCs from carrying randomly picked outfit cargo that
     - modifies "bunks"
     - increases outfit space
     - increases cargo space
    
    Refs endless-sky#4321
    Refactor the check for planet accessibility
    
     - Pre-strip the "requires: " prefix from required attributes
     - Simplify test for "do we even need to look at the ship's attributes?"
    Enforce required attributes for in-flight spawns
    
    Otherwise, normally specified "system fleets" could take off from a planet even when they do not have the capability to land on it.
    Ships depart from their previously-specified planet (#4111)
    
    * Allow special ships to define a planet to depart from
    * Parked ships remember the planet they were parked on
       - As in `TakeOff` code, parked == disabled: no cargo transfer, and no need to recharge.
         (Parking can only be done when landed, so this will have already been done for any parked ships.)
       - When loading the player's save, only supply a planet for in-system ships that do not have one.
    
    * Only set a ship's planet if it doesn't have one
     - PlayerInfo::Land is called as a part of game startup
       - Ships unparked will not jump between in-system planets due to save reloading
    
    * Use Fleet::Place for generic in-space positioning
     - Remove effectively duplicated code from Engine
     - Any ship that is spawned in flight in the player's system is not over the reference planet unless it is taking off
    Fleet cargo chooses commodity, outfit, or both
    
    Choice is dependent on the fleet definition:
     - A fleet with only "commodities" identified never carries outfits
     - A fleet with only "outfitters" identified never carries commodities
     - A fleet with neither or both identified carries both, with the chosen type picked at random.
       The choice is skewed towards carrying commodities.
    
    When picking an outfit, the choice is done fairly: each outfit with >0 mass, >0 cost that can fit in the ship's free space has an equal chance of being picked
    'outfitters' specifies possible carried outfits
    
    ... just as "commodities" specifies possible carried commodities.
    Rather than rewriting the same list of outfits multiple times for similar fleets, name an `outfitter` that has the desired possible outfit cargo.
    e.g.
    fleet "My Fleet"
      outfitters "Ammo South" "Ammo North"
    Update erase usage
    
     - Variant toRemove only needs to be initialized once
     - set.erase first performs a count, and erase(<key>) returns 1 if <key> was erased
     - System.links & System.neighbor used to be vectors, but were made sets in 4fa19f67a4f4e559f08b769bf7596ff52005eff2, and set supports erase(<key>)
    Added constructors that call Load() on a data element, so construction and Load() don't have to be done in two separate steps.
    Added support for special "persons" with multiple ships. The "person" can regenerate all its ships unless you kill the flagship.
    Made it possible to "add" or "remove" personalities from a fleet (based on @Hadron1776's PR).
    Code cleanup: replacing container::size() in if statements with !container::empty().
    Fixing a compile error (and regularizing the style, as well).
    enhancement: Remove variants from Fleet definitions (#2577)
    
    * Implement method to remove variants from Fleet definitions
    
    In a fleet definition, using the node `remove variant` and then supplying a valid existing variant for that fleet will result in the removal of that variant from the instantiated fleet definition.
     - A valid existing variant is one which contains the same ship specifications (in any order).
     - `remove variant` ignores the supplied weight value and always removes the variant if a matching variant is found.
     - If no match is found, a stack trace is printed to aid in debugging content.
    
    * Removing unneeded weight check
    The "add" and "remove" syntax now work for shanges to a system, too. Also allowed "add variant" in events that change fleets.
    Adjusted the rate at which ships enter a system from the direction of a system that is hostile to them.
    Made System's list of links and neighbors a set instead of a vector, to simplify adding and removing items and checking if a given system is in the set.
    Made it possible for ships to take off or land on uninhabited planets if they have no other option.
    Allow fleets with no government to be instantiated. That is, the caller of Fleet::Enter() or Fleet::Place() is responsible for checking that the fleet has a government or assigning one if it does not (e.g. mission NPCs).
    Added checks for references to undefined data (systems, outfits, etc.).
    Fixed a bug where Fleet::Enter() was picking a random entry point and destination even when given a source planet (which only happens when placing a defense fleet).
    Made it so that fleets with no jump capabilities will never spawn in a neighboring system.
    Made it possible to limit what commodities a fleet can carry, and put limits on the Korath drone cargo.
    Made random hostile fleets entering a system more likely to enter from the direction of a system that is friendly to them, to make "fronts" between two species look more realistic.
    Continuing to work on code cleanup and commenting.
    Starting to go through the code to add more comments and refactor things that are unclear or could cause errors down the road.
    Cleaned up the Fleet class and fixed a bug where NPCs don't use fighter names.
    Added an error message if a fleet definition references an unknown ship name.
    Map pathfinding now prefers less "dangerous" systems if multiple routes exist with the same fuel cost and number of jumps.
    Made a few tweaks to the appearance of fleets taking off from planets or waiting in orbit around them.
    Added support for fighter bays where the fighter it is carrying is visible, drawn either below or above the ship.
    Avoid having a ship's "target" system equal the current system, which confuses the AI (it thinks the ship is planning to jump somewhere).
    Added warning messages whenever a line of a data file or saved game is unrecognized.
    Added support for planetary domination. (But, it won't do anything until defense fleets have been set for each planet.)
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Removed superfluous std:: prefixes.
    Reordering the functions in PlayerInfo and Ship and renaming some of the poorly named ones.
    Fixed (I think) the intermittent bug where ships appear in a system they could not have jumped to.
    Switched to having the hail messages be a property of each government rather than individual ships or fleets (so that mission-related ships will use them, too, to add a bit of flavor in battles).
    Made some tweaks, in particular to make plundering pirates a little easier early on.
    Fixed some places where a Random::Int() call might result in a divide by zero.
    Added a pi.h file defining a PI constant for operating systems that do not have M_PI defined in cmath.
    Fixed the handling of NPC fighters and drones, so they will be saved even if contained within another ship rather than launched.
    A few changes to get the code to compile on OS X correctly.
    Modified Fleet so that ships entering a system via hyperspace are created such that they can hyperspace jump in immediately.
    Added a "surveillance" personality type that flies around scanning whatever objects its sensors can scan, and that also launches drones and then leaves them behind in the system to do their own reconaissance.
    Renamed "ShipName" to "Phrase" since it is also used for random hail messages.
    Added support for game events modifying the composition of fleets.
    Added support for NPCs "entering" or "staying" in a system, and added a sample "pirate attack" mission (currently always offered).
    Switched System::GetGovernment() to returning a pointer instead of a reference, to match how I refer to GameData objects everywhere else.
    Fixed a few quirks in the "hails" from other ships.
    Added occasional "hail" messages that other ships send to you, with some sort of "flavor" text that gives you a sense of what their government is like.
    Retuned the required crews, and also modified Fleet so that other ships will have random numbers of extra crew.
    Added new ship names for military ships.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Added a Random::Real() function, and refactored to use Random everywhere (because old-fashioned rand() is considered deprecated now.)
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Got fighters to dock with their carriers again once they are recalled.
    Got fighters in fleets working.
    Added a "personality" class representing whether a fleet of ships does things like plundering opponents (which pirates now do).
    Added a CargoHold class to handle everything pertaining to cargo (including determining when you have the capacity for it).
    Added random ships occupying a system when you first enter it. Also disabled refueling on uninhabited planets (i.e. no spaceport).
    Modified Fleet to fill each newly created ship with random cargo. Also got the ship scanner working so I can test that the cargo is really there.
    Added some occasional pirates, to spice things up.
    Added a "Fleet" class, representing a set of ships that might appear in a given system plus the logic for placing them (taking off from a planet or entering via hyperspace).
    feat(mechanics): Basic support for custom hardpoint angles, non-converging weapons (#4801)
    
    * Add gun-port angles and convergence setting.
    Allows content-creators to create ships with non-forward facing gun-ports.
    Also allows content-creators to set convergence for guns.
    
    * Allow some weapons to be non-parallel / non-converged.
    * Update source/Armament.cpp
    Simplify the code by providing booleans directly to hardpoints.emplace. (As suggested by Amazinite and tehhowch.)
    
    * Process review comments
    * Processed review comments
    feat: Added velocity and range override attributes for weapons (#4522)
    feat(weapons): Support variable ammo quantity consumption (#4514)
    
    * Added an "ammo usage" weapon attribute that determines how many units of ammo are consumed on fire
    
    * Ammo usage now shows in the outfitter
    
    * Syntax change
    
    * Spacing
    
    * Spacing
    
    * Tidying up the code
    
    Removed the IsWeapon check from the display because any outfit with a >1 ammo usage is guaranteed to be a weapon.
    
    Used a conditional operator in Weapon.ccp to cut down on code.
    
    * Allow an ammo usage of 0
    
    The outfit must still be installed in order to fire.
    
    * Renamed ammoPair to just ammo and left a comment explaining what it is
    
    * Added another comment for clarification
    
    * #include <utility> in Weapon.h for the ammo pair
    Use a Point to allow asymmetric "hardpoint offset" specification
    
    Syntax assumes default specification is a symmetric hardpoint sprite, i.e. only the y-offset is needed. Specify 2 values to indicate the (x, y) offset, where (0, 1) points up and (1, 0) points right.
    
    `"hardpoint offset" [<x#>] <y#>`
    e.g:
      "hardpoint offset" 2
      "hardpoint offset" 0 2
    are equivalent.
    Hit force is now "inherited" from submunitions, like all the damage types.
    Weapon blast strength decreases with distance from blast (#3276)
    
    * Weapon blast strength decreases with distance from blast
    
     - To mitigate the damage falloff for weapons with a trigger radius, a multiplier based on the ratio of trigger and blast radius is used.
     - For a weapon with 0 trigger radius, the damage will range from 100% at the center, to 25% at the edge of the blast radius.
    
    * Use worst-case distance estimate rather than exact computation
    Added "fuel damage" as a damage type.
    Added two weapon modifiers: "safe," meaning the blast radius only hits hostile ships, and "phasing," meaning the projectile is not blocked by asteroids or other ships.
    Added support for independent turret tracking (and, limited turret turn rates) for everything but anti-missiles.
    Added support for sprites drawn on top of turret hardpoints to show what kind of weapon is installed and what direction it's pointing in.
    Fix not autoselling ammo when selling storage item.
    
    Exposed ammo to be loaded by all outfits not just weapons.
    Added a common base class for Ships, Projectiles, Asteroids, Effects, Flotsam, StellarObjects, etc. This is the first step in creating a generic collision detection framework that can deal with different object types.
    0.9.2 updates
    Added a "random lifetime" attribute for weapons.
    Homing weapons can now have different tracking modes: better against big ships (optical), against hot ships (infrared) or against ships with no radar jamming.
    Added support for projectiles with a "random velocity" added to their base velocity.
    Added two new damage types: disruption (which makes shields porous) and slowing.
    Added support for fractional reload times, to allow beam weapons with a duty cycle that isn't an integer fraction.
    Added some sanity checks for weapon attributes that could cause bugs if they are outside the expected range.
    Added support for "burst" weapons that fire multiple shots and then need a longer reload time.
    Update Weapon.h
    Added piercing for weapons
    Added a "stream" weapon attribute that has it fire streamed rather than clustered even if it is vulnerable to anti-missile.
    Added projectile "live" effects: effects created while the projectile is "alive" and in flight. This can be used to create trails behind missiles, etc.
    Added support for weapons that split into submunitions when they get close to their target.
    Added an "ion cannon" weapon. I'll need a lot of testing to make sure it's balanced - it makes defeating a single isolated foe too easy, but also does much less damage than other weapons of comparable size.
    Added "firing" animations for some of the missile weapons.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Did some significant optimization (at least 2x faster calculation times in big battles) by switching weapon attributes from a string to double map to a fixed set of values accessed by inlined functions, instead.
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Fixed some things that Google's cpplint warns about (mostly, constructors that should be marked explicit).
    Made Panel::Click() able to distinguish double-clicks, so that the info panel can switch to a ship only if it is double-clicked, not just clicked twice in a row.
    Made it so the currently selected commodity or map coloring is remembered in the player info and is carried over to the trading panel if it is a commodity.
    The "Sell All" button in the trading panel now changes to "Sell Outfits" if you only have outfits left in cargo, and will not sell outfits otherwise.
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    Added a 500x multiplier (alt / option key), mainly for players with enormous cargo fleets.
    Cleaned up some unused sprites and functions, and fixed a few comment typos as well.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added tracking of your "cost basis" for commodities, so the trading panel can display the profit you will earn for selling them.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Added help messages that pop up the first time you click on a certain panel (and the first time you end up stranded or dead).
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Switched to 64-bit values for storing credit amounts (to avoid rolling over if you get 2 billion credits).
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Added a CargoHold class to handle everything pertaining to cargo (including determining when you have the capacity for it).
    Added GPL statements to all source code files and added a license.txt file.
    Updated how the UI panels are handled to allow the main menu to be called up regardless of what the game state is.
    Uploaded all the files from my local repository to Google Code.
    feat(graphics): Add comment with shader name (#4995)
    
    This makes it easier to debug compilation errors
    Made the outline shader use the 2x image when available and appropriate.
    Fixing a variable that should be const in the outline shader.
    Simplified the OutlineShader, and modified how tweening is done so it will look better with animated sprites.
    Fix binding of sampler tex.
    
    For samplers, Mesa3D expects the argument to be int.
    It was being sent as uint.
    Switched to using 2D "texture arrays" for sprites, so all the frames fit into a single texture.
    Cleaning up the code for the outline shader.
    Modified the outline shader to show some detail inside the ship, instead of just the silhouette.
    Made it so if a ship's sprite is animated, so is the target and flagship outline for it.
    Replacing "NULL" with "nullptr".
    Switched to a much smoother way of rendering the outlines. It takes more GPU time, but that's okay because there are usually not many outlines on screen.
    The target outline will now rotate to represent what direction the target is facing in.
    Moved all the source code files into a "source" folder to clean up the root folder.
    The program now auto-detects the proper GLSL version number so it does not have to be set via conditional flags for each OS.
    Added support for target ship outlines to be colored based on friendly / hostile status.
    Had to roll back to OpenGL version 3.0 instead of 3.3 on Linux, but left the Mac port at 3.3.
    Ported to Mac OS X.
    Added GPL statements to all source code files and added a license.txt file.
    Fixed some shaders that used "\t" in place of "\n".
    Uploaded all the files from my local repository to Google Code.
    Add a "launching" personality, a counterpart to "waiting"
    
     - Mission NPCs with the "launching" personality will always take off with the player, even if their government (or other attributes) would normally prevent them from landing.
     - "launching" has precedence over "waiting" and "staying"
    Made it possible to "add" or "remove" personalities from a fleet (based on @Hadron1776's PR).
    Switched to showing a full trace if an invalid personality name is encountered, so it's easier to track down.
    Removed Skybound declaration (#96)
    
    It was removed from the cpp, but not from the .h file.
    Added a new "marked" personality, that only attacks the player and will not be attacked by non-player ships. This is a replacement for what I was trying to do with the "skybound" personality.
    Added a "skybound" personality that keeps a ship from landing on planets. (Useful for creating a bounty ship that will flee to other systems but will not land even if it's technically in friendly territory.)
    Added a "target" personality that marks a ship by making it flash in the radar and the targeting display.
    Added support for independent turret tracking (and, limited turret turn rates) for everything but anti-missiles.
    Reordered the Personality class's functions to group them in ways that make more sense.
    Added a "mute" personality marking ships that never say anything in response to a hail.
    Added an "appeasing" personality that dumps cargo when attacked to distract its attackers.
    Added NPC AI support for harvesting flotsam. (For miners, or for distracting pirates by dumping cargo.)
    Added a "mining" personality that circles around searching for minable asteroids, then destroys them. (It doesn't know how to harvest the flotsam yet, though.)
    Adjusted the aim "confusion" to better simulate someone attempting to aim and to avoid having it get stuck for a second or more far from the right aim.
    0.9.2 updates
    A ship's targeting "confusion" now decreases over time when it is firing weapons continuously. This fixes the issue where a laser turrent might miss small, fast drones entirely due to confusion.
    Added an "unconstrained" personality type that ignores the "invisible fence" that keeps other ships from flying too far from the system center.
    Added a new personality type, "swarming," that hovers near friendly ships (if any).
    Switched to a more organic-looking aim "confusion" effect.
    Added a "vindictive" personality, which will keep shooting at a ship that is already dead if it has nothing better to do.
    Added a "coward" NPC personality that will flee once it takes hull damage.
    Added a "frugal" personality type that tells certain ships (including escorts) to refrain from expending ammunition unless they are outgunned.
    Added support for planetary domination. (But, it won't do anything until defense fleets have been set for each planet.)
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added display of what system your "absent" escorts are in, including all non-fighter ships that are marked as escorts by their government or personality, even those you do not own.
    Added a "fleeing" personality type that will not pick targets (best combined with "timid" and "uninterested" to make it actually run away).
    Added the third and final set of Free Worlds intro missions, along with the "derelict" personality type to support them.
    Added some new Free Worlds missions, and fixed a few issues I found while developing them.
    Made several improvements to NPCs: an "uninterested" personality that does not follow the player's flagship, and improved handling of carriers. Also modified the outfit scanner to also tell you what fighters a ship is carrying.
    Added a "surveillance" personality type that flies around scanning whatever objects its sensors can scan, and that also launches drones and then leaves them behind in the system to do their own reconaissance.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Made the "pirate raid" on players with lots of freighters more powerful, and added a personality type for attacking only the player's ships.
    Added support for NPCs "entering" or "staying" in a system, and added a sample "pirate attack" mission (currently always offered).
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Added a "personality" class representing whether a fleet of ships does things like plundering opponents (which pirates now do).
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    Made it so the "install" keyboard shortcut in the outfitter will only take outfits from cargo.
    The "flight checks" now show up as warning icons and only block you if you try to take off with an unusable ship.
    Press R or U in Outfitter to uninstall selected outfit directly to cargo. (#2806)
    
    * Add 'Remove Outfit' shortcut to Outfitter shops
    
    Pressing 'r' will remove the selected outfit into your cargo hold if there is sufficient room.
    Excess ammunition that needed to be removed but cannot fit in the remaining space will be sold.
    
    * Remove -> Uninstall
    
    * Refactor common code, fix logic errors
    
     - Moved code for selecting the ships that will gain/lose the selected outfit from those that are already selected into a separate function.
     - When calculating if the cargo space for ammo exists in CanUninstall, use a copy of the ship's attributes to obtain the exact amount
     - Since b5ecaaec1afc66da8f9c7d430686c73efcd77d94 removed the ability of an outfit to reduce energy generation below zero, rephrased now-invalid explanatory comment.
     - Fix some logic errors in CanUninstall's return paths.
    
    * Replace while loop with exact quantity transfer
    
    * Replace *Uninstall() functions with *Sell(true)
    
     - Add boolean argument to *Sell functions to specify if the outfit is to be moved into cargo space. Default behavior is to sell to Outfitter
     - Uninstall / remove actions transfer the selected outfit (+ammo) into the player's cargo hold, if it has capacity. Any that cannot be held in cargo are sold.
    
    * Additional cleanup
    Made it possible for outfits to require licenses to buy them.
    Fixed some things that Google's cpplint warns about (mostly, constructors that should be marked explicit).
    Fixed some variables that don't need to be mutable now that Panel::Draw() is not expected to be const.
    Categories in the shipyard and outfitter are now "collapsable."
    Optimized the shipyard and outfitter panel display code, so they won't spike the CPU.
    Added a helpful explanation message if you cannot sell an outfit, e.g. because it is a generator and you have shield regenerators installed that depend on it for energy.
    Fix warnings about member function overrides by adding override specifiers
    Made the multiplier keys no longer apply to the "sell ship" button.
    Added the ability to purchase ships in bulk.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Modified hol the scrolling changes when you click an item in the shop panel, so that that item stays where it is (if possible).
    For each possible reason that you cannot buy a ship or outift, added an explanatory dialog that appears if you click "buy."
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Updated the XCode project and fixed a few issues it complained about.
    Modified the shipyard so that if you need licenses to operate a ship and they can be purchased, you do so automatically when buying a ship (instead of just blocking you from buying it).
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Added a new ShopPanel class that includes all the code that was shared between the Shipyard and Outfitter.
    Shipyard: switched to sorting ships by category. Also now hides empty categories in the shipyard and outfitter.
    Added handling of scroll wheel events in the shipyard and outfitter panels.
    Added keyboard shortcuts to the shipyard and outfitter, added a ship naming dialog, and fixed selection of your ships by clicking in the side panel.
    Added GPL statements to all source code files and added a license.txt file.
    Updated how the UI panels are handled to allow the main menu to be called up regardless of what the game state is.
    Uploaded all the files from my local repository to Google Code.
    feat(mechanics): The sounds and effects of a drive can now be customized (#5044)
    feat(mechanics): New enginepoint types and support for over/under and angled engine flares (#4539)
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Reverting the patch for the short-lived ship mass bug. Also replaced Outfit::Reset() and Outfit::Add() with a single Set() function.
    Several related changes to fighters: they can now run their own systems when being carried (to generate energy, repair, etc.). Their heat level is now indepenedent of the ship carrying them. Fighters now retreat for repairs if badly damaged, and launch only when mostly repaired. And, repair priority is given to the least damaged fighter.
    Added a "Dictionary" class that works like an STL map<string, double> but allows faster lookup and no string allocations.
    Made it possible for outfits to require licenses to buy them.
    Added the ability to specify plural forms of outfit and ship model names.
    Outfits can now explicitly define a "flotsam sprite" instead of repurposing the weapon icon for that.
    Added a common base class for Ships, Projectiles, Asteroids, Effects, Flotsam, StellarObjects, etc. This is the first step in creating a generic collision detection framework that can deal with different object types.
    Trying to speed up the fleet strength calculations.
    Regularizing the shipyard and outfitter maps code to make them easier to merge.
    Made it possible for engine flares and afterburner effects to "stack," so that if you have multiple engines both their flares will be shown instead of only a random one of them.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Switched afterburners to using a distinct "afterburner effect" field in the outfit spec instead of using the "die effect" in the weapon section.
    Did some significant optimization (at least 2x faster calculation times in big battles) by switching weapon attributes from a string to double map to a fixed set of values accessed by inlined functions, instead.
    Renaming some functions in preparation for moving the weapon attributes out of Outfit and into a separate class.
    Tweaked the handling of sub-munitions. In particular, they are now only created if the projectile does not hit something, and if it does hit something, it does all the damage its submunitions would have done.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Gave Outfit some new convenience functions for getting weapon info that takes submunitions into account.
    Switched to 64-bit values for storing credit amounts (to avoid rolling over if you get 2 billion credits).
    Got basic audio support working. I do need to track down better sounds, or at least balance the audio levels better between them.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Added the outfitter UI. You can browse all outfits, but buying is not yet enabled.
    Fixed a bug where the gun and turret count for a ship increases every time the pilot file is saved.
    Added GPL statements to all source code files and added a license.txt file.
    Added saving capability to the Ship class.
    Added a secondary trigger key for weapons that use up ammo, and a display of ammo remaining for each.
    Uploaded all the files from my local repository to Google Code.
    fix(bug): Multiple ships of the same model can now be gifted in a single mission action
    feat(mechanics): Add a MissionAction node that enables giving the player a ship (#5302)
    
    * Allow ships to be gifted by missions
    
    * Change > to >=
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    
    * Commit for comment suggestions
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    
    * Fix bug and adjust comments
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    
    * Change code to have only one function `BuyShip`
    
    * Remove useless bool
    
    * Housekeeping
    
    * More housekeeping
    
    * Don't gift nonexistent ship models
    
    * Housekeeping
    
    * Fixed a double space
    
    * Changed syntax to `give ship <model> [<name>]`
    
    * Fixed missing semicolon
    
    * Whitespace fix
    
    * Change dialog to include the model of the ship
    
    * Change it so message appears only in log
    
    * Remove `A/An <noun>` for better english
    
    * Punctuation changes
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    feat(ux): Limit pop-ups when multiple missions have "on visit" dialogs (#4592)
    
    * Have on visit dialogs be handled by PlayerInfo instead of by MissionAction so that players won't be swamped by on visit dialogs if they hoard jobs
    * Show separate dialogs for unique missions and remind the player of deadlines
    * Simplified code and changed GetActions() to GetAction(Trigger)
    * Changed the wording for the deadline reminder
    * Count missions even if they don't have an on visit dialog, but still only display a dialog if one of the counted missions has one
    * Simplified code.
    * Ignore invisible missions.
    * Don't care about deadlines. (The player should already know that information.)
    * Don't show extra dialog if you only have one on visit.
    * Changed the wording of the extra dialog to mention other unfinished missions, not the total.
    Allow phrase-based randomized dialog (#4164)
    
    * Allow `MissionAction` dialog text randomization via the `Phrase` class. Traditional "directly specified" text is still supported.
    
    Supported syntax:
    ```
    dialog phrase <stock phrase name>
    
    dialog
        phrase
            {phrase specification...}
    ```
    e.g.
    ```
    dialog phrase "hostile disabled"
    
    dialog
        phrase
            word
                "Please excuse my dear "
            word
                "Aunt Sally"
                "Uncle Mark"
            word
                ` for saying, "`
            phrase
                "hostile disabled"
                "friendly disabled"
            word
                `" yesterday.`
    ```
    
    * Move `dialogText` parsing to `Dialog` static method
    
    * Allow `NPC` "completion" dialog text randomization using the same phrase-based syntax as `MissionAction` dialog
    
    * Use phrases to encapsulate generic/repeated dialog
    
    For similar messages, combined clauses to diversify the generated text.
    
    * Remove duplicated space
    
    * Typo fix ( @Pointedstick )
    Add mission cargo from boarding/assisting missions only to the flagship
    
     - Missions that add or remove outfits use the proper CargoHold.
    NPC "completion" / MissionAction conversations can kill the player and/or NPC (#3376)
    
    * Call ConversationPanel with a pointer to the relevant ship
    
     - Allows destroying the pointed ship depending on the conversation outcome.
     - If the player is killed, the pointed ship should survive, and no BoardingPanel should be displayed.
     - Supply the ship from NPC::Do, to enable destroying the NPC via LAUNCH, DEPART, and FLEE conversation endings.
     - Include a boarding check to prevent an NPC block with a non-boarding completion requirement (e.g. `npc evade`) from displaying a BoardingPanel after the conversation ends.
    
    * Add response handling for non-"on offer" conversations
    
     - Updated PlayerInfo::BasicCallback:
       - attached it to:
         - all NPC completion conversations
           - If actually boarding the NPC, set it as the boarding ship.
       - The player is perhaps not landed: in-flight death implies:
         - capture of the flagship by the ship it was boarding (`die` when boarding)
         - crew mutiny and defection (`die` when not boarding)
         - the destruction of the ship. (`explode`)
     - Added the Conversation::EXPLODE response, based on the keyword `explode`
     - Updated the Ship::WasCaptured code to not over-transfer crew, for the case where the player dies to a conversation offered in-flight and has plenty of crew already.
    
    * Rework PlayerInfo::Die
    
     - Remove need for a private Die() method
     - Update callers of Die(bool) to use Die(int) and achieve the intended result
    
    * Eliminate need for BoardingShip()
    
     - Moved player death handling into ConversationPanel::Exit, where the relevant ship pointer is easily accessed
     - Added pointers to the ship responsible for the boarding mission / npc event into relevant Mission and MissionAction methods, to eliminate need for PlayerInfo::BoardingShip
    
    * Showing BoardingPanel requires a disabled-yet-not-destroyed ship
    
    * Add check for capture / bribery of a boarding ShipEvent's target via a mission NPC's completion conversation
    
     - A more robust method to only offer the BoardingPanel resulting from ConversationPanel::Exit (i.e. no display of sequential BoardingPanels, and obeying the conversation's exit node) should be pursued separately
    Added constructors that call Load() on a data element, so construction and Load() don't have to be done in two separate steps.
    Mission "on enter" can define a LocationFilter to pick the system(s) (#3141)
    
    * "on enter" actions can define a LocationFilter to pick the system
    
     - Example:
        on enter
          "system filter"
            government "Syndicate"
          dialog "You're now in Syndicate space!"
    
     - Without a system filter, any `on enter` actions that do not name a system will apply as soon as the player takes off (current behavior).
     - Each mission only supports a single `on enter` action without a named system (current behavior).
    
    * Use a function to convert a distance filter into a near filter
    
      - This avoids needing to save the mission origin in the MissionAction
      - Use of both "near <system>" and "distance" filters in the same `on enter` action is not supported - only the "near" filter will be kept.
      - Fixed an extra indentation level with the saved LocationFilter.
    
    * Forward compatibility for changes to LocationFilter class variables
    
    * Support multiple "generic" on enter MissionActions instead of only one
    
     - "specific" on enter: explicitly identifies the system
     - "generic" on enter: uses a LocationFilter to match a set of systems (offering in the first one that matches), or has no filter and offers immediately on launch
     - All "specific" on enter actions are checked before any "generic" on enter actions for a given system
     - Only one on enter action will be triggered per jump.
     - Each "generic" on enter is checked in the order of definition in the mission datafile
    
    * Update SetOrigin() usage
    
     - Reformat checks to avoid copying if nothing is to be done
     - Pass a system to MissionAction::Instantiate to guarantee a System * is available, even for assisting/boarding missions.
    
    * Use didEnter to track both generic and specific "on enter" actions
    require <outfit> can require a specific number, or specifically zero
    Extend reference-checking in GameData::CheckReferences (#3116)
    
    * Extend reference-checking in GameData::CheckReferences
    
     - Add Name() to Minable & Phrase
     - Add IsDefined() to GameEvent
    
    * Enable reference-checking for GameEvents and Missions
    
    * IsDefined->Name and other feedback
    enhancement: Visual feedback for outfit transfer missions while in-flight (#3075)
    
    * Remove deprecated declaration
    
     - 'SetDefaultPayment' was removed in f9d82bd3e1a3f0bbe0b5346a20f30bb09795393c
    
    * Provide visual feedback of ready-to-complete missions with gifts
    
     - Update the MapPanel::IsSatisfied function to use a new Mission::IsSatisfied function that checks whether or not the mission's requirements for completion are met.
     - Restore the "are required gifts in present ships cargo?" check, with guards that prevent counting cargo that is out-of-system (e.g. would not be present if the player landed immediately).
    
    * Simplify return expression
    Made it possible for missions to trigger events on a random day within a range rather than always on a specific day.
    Added support for "special" log entries, containing whatever you know about a particular person, faction, etc.
    Added a "logbook": mission actions can now have "log" entries that automatically get added to the logbook, to remind the player of where they are in the story and what quests they have completed.
    Made mission payments use 64-bit values so they can handle numbers as big as your account can.
    Made it possible to change the "multiplier" for payment calculations.
    Added a "fail" keyword in mission actions that can be used to immediately fail the current mission or any other.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added support for mission actions to be performed when you enter a system (showing a dialog or conversation, setting flags, etc.).
    Added support for the "event" tag in a mission's "on <trigger>" section.
    Switched over to the new Mission implementation. There are still some aspects that are not working yet (like, the job board).
    Made some small changes to support the new mission model, including having the "complete" MissionAction set the payment substitution string, and adding an operator+ to Date for setting deadlines.
    Added the MissionAction class, representing what happens when a mission is offered, accepted, etc.
    refactor(main): Extract SDL window initialization & management into separate class (#4472)
    
    * Move SDL_Window setup from main in to a standalone class
    
    Tested, working. Only behavior change so far is moving the window loading up in the load order in an attempt to get visual to the user as quickly as possible.
    I modeled the new class after how the Audio class is handled.
    
    * Update GameWindow.cpp
    
    Added comments. Moved code to more logical order of operations. Removed the Win32 exception on cleanup operations. Added explicit call to hardware acceleration.
    
    * Update project.pbxproj
    
    Thanks to @Fzzr for testing on Mac and providing an updated XCode project file.
    
    * Cleanup unused MonitorHz
    
    Minor edits. Ignore the .gitignore
    
    * Make it unchanged.
    
    Remove my edit.
    
    * Comment editing for readability
    
    This makes more sense to a noob.
    
    * Update in response to feedback
    
    * Resolve issues introduced with that last patch
    
    Missing (), and missing ;
    Forgot to update my .h file
    
    * New module missing
    
    You will need these if compiliing on Windows.
    
    * Fix fullscreen regression
    
    Move comment to own line
    Remove old comment
    Add missing whitespace
    
    * Remove commented code
    
    * style: reorder methods, includes
    Fixed some things that Google's cpplint warns about (mostly, constructors that should be marked explicit).
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Modified WrappedText so its default copy and assignment are valid (by avoiding manual memory allocation).
    Switched to always using the Color class instead of passing around RGBA float arrays.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    feat(graphics): Add comment with shader name (#4995)
    
    This makes it easier to debug compilation errors
    Replacing "NULL" with "nullptr".
    Added "labels" for planets you can land on, which show up when you get near them.
    Merged the functionality of BlurShader into SpriteShader, and DotShader into RingShader.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Updated the ring shader to support dashed lines, so I can use it for the main display of your ship's shields and hull.
    Added a "status overlay" preference option where rings representing shield and hull strength are overlaid on all "escorts" and enemies.
    The program now auto-detects the proper GLSL version number so it does not have to be set via conditional flags for each OS.
    Had to roll back to OpenGL version 3.0 instead of 3.3 on Linux, but left the Mac port at 3.3.
    Ported to Mac OS X.
    Switched to always using the Color class instead of passing around RGBA float arrays.
    Added GPL statements to all source code files and added a license.txt file.
    Fixed some shaders that used "\t" in place of "\n".
    Uploaded all the files from my local repository to Google Code.
    feat(mechanics): Basic support for custom hardpoint angles, non-converging weapons (#4801)
    
    * Add gun-port angles and convergence setting.
    Allows content-creators to create ships with non-forward facing gun-ports.
    Also allows content-creators to set convergence for guns.
    
    * Allow some weapons to be non-parallel / non-converged.
    * Update source/Armament.cpp
    Simplify the code by providing booleans directly to hardpoints.emplace. (As suggested by Amazinite and tehhowch.)
    
    * Process review comments
    * Processed review comments
    fix(mechanics): Avoid recomputing damage totals for already-seen submunitions (#5079)
    
    * Add recursion detection and abort to avoid a stack overflow.
    
    * Simplify code.
    feat(mechanics): Piercing resistance attribute for reducing the effect of incoming piercing projectiles (#4521)
    feat: Added velocity and range override attributes for weapons (#4522)
    feat(weapons): Support variable ammo quantity consumption (#4514)
    
    * Added an "ammo usage" weapon attribute that determines how many units of ammo are consumed on fire
    
    * Ammo usage now shows in the outfitter
    
    * Syntax change
    
    * Spacing
    
    * Spacing
    
    * Tidying up the code
    
    Removed the IsWeapon check from the display because any outfit with a >1 ammo usage is guaranteed to be a weapon.
    
    Used a conditional operator in Weapon.ccp to cut down on code.
    
    * Allow an ammo usage of 0
    
    The outfit must still be installed in order to fire.
    
    * Renamed ammoPair to just ammo and left a comment explaining what it is
    
    * Added another comment for clarification
    
    * #include <utility> in Weapon.h for the ammo pair
    Use a Point to allow asymmetric "hardpoint offset" specification
    
    Syntax assumes default specification is a symmetric hardpoint sprite, i.e. only the y-offset is needed. Specify 2 values to indicate the (x, y) offset, where (0, 1) points up and (1, 0) points right.
    
    `"hardpoint offset" [<x#>] <y#>`
    e.g:
      "hardpoint offset" 2
      "hardpoint offset" 0 2
    are equivalent.
    Issue deprecation warnings & simplify some code (#4000)
    
    * Fix osx compile warning
    
    * Emit warnings for deprecated turret specs and homing w/o tracking
    
    * Require ranges / radii to be non-negative
    
    * Replace implicit defaults with explicit values
    
    * Handle deprecated "cargo scan" and "outfit scan"
    
    * Replace locally repeated code with local lambda
    Hit force is now "inherited" from submunitions, like all the damage types.
    Weapon blast strength decreases with distance from blast (#3276)
    
    * Weapon blast strength decreases with distance from blast
    
     - To mitigate the damage falloff for weapons with a trigger radius, a multiplier based on the ratio of trigger and blast radius is used.
     - For a weapon with 0 trigger radius, the damage will range from 100% at the center, to 25% at the edge of the blast radius.
    
    * Use worst-case distance estimate rather than exact computation
    Allow using fuel damage (fix from @Nechochwen-D)
    Added "fuel damage" as a damage type.
    Fixed some missing #includes and one unnecessary check that would mess up other compilers.
    Added two weapon modifiers: "safe," meaning the blast radius only hits hostile ships, and "phasing," meaning the projectile is not blocked by asteroids or other ships.
    Added support for independent turret tracking (and, limited turret turn rates) for everything but anti-missiles.
    Added support for sprites drawn on top of turret hardpoints to show what kind of weapon is installed and what direction it's pointing in.
    Added a common base class for Ships, Projectiles, Asteroids, Effects, Flotsam, StellarObjects, etc. This is the first step in creating a generic collision detection framework that can deal with different object types.
    0.9.2 updates
    Added a "random lifetime" attribute for weapons.
    Homing weapons can now have different tracking modes: better against big ships (optical), against hot ships (infrared) or against ships with no radar jamming.
    Added support for projectiles with a "random velocity" added to their base velocity.
    Added two new damage types: disruption (which makes shields porous) and slowing.
    Added some sanity checks for weapon attributes that could cause bugs if they are outside the expected range.
    Added support for "burst" weapons that fire multiple shots and then need a longer reload time.
    Added piercing for weapons
    Added a "cluster" tag to make a weapon always fire clustered (a counterpart for the new "stream" tag).
    Added a "stream" weapon attribute that has it fire streamed rather than clustered even if it is vulnerable to anti-missile.
    Added projectile "live" effects: effects created while the projectile is "alive" and in flight. This can be used to create trails behind missiles, etc.
    Errors are now logged to "errors.txt" in the config directory, in addition to being printed to STDERR.
    Added support for weapons that split into submunitions when they get close to their target.
    Fixed a bug where the "shield damage" value for weapons was being used in place of "heat damage".
    Added an "ion cannon" weapon. I'll need a lot of testing to make sure it's balanced - it makes defeating a single isolated foe too easy, but also does much less damage than other weapons of comparable size.
    Added "firing" animations for some of the missile weapons.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Did some significant optimization (at least 2x faster calculation times in big battles) by switching weapon attributes from a string to double map to a fixed set of values accessed by inlined functions, instead.
    Using float v. double in some cases of -Wdouble-promotion
    
     - Add some <algorithm> headers for uses of std::min or std::max
    Made it so the viewport corner markers on the radar will be "square" even if the window is much wider than it is tall. Also added a separate, customizable color for the markers.
    Draw viewport boundaries on radar
    Allow mission target blink color to be set independently of ships the player is targeting (#2825)
    
    * Add "radar blink" color
    
    * Set default radar blink color
    Made it possible to customize the colors used in the radar (which are also used for target crosshairs).
    Added a common base class for Ships, Projectiles, Asteroids, Effects, Flotsam, StellarObjects, etc. This is the first step in creating a generic collision detection framework that can deal with different object types.
    Merged the functionality of BlurShader into SpriteShader, and DotShader into RingShader.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Made all dots in the radar opaque (so blue objects don't stack to become white).
    Implemented wormholes. (Any planet that shows up in multiple systems is a wormhole.)
    Switched to always using the Color class instead of passing around RGBA float arrays.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    fix(mechanics): Shipyard/Outfitter map view no longer shows "Has ___" for unvisited systems
    
    Only once the player has visited a system (via travel or a purchasing a map) should the player know if the system has any outfitters or shipyards
    
    Closes endless-sky#5364
    feat(mechanics): Save collections in order by element name (#5333)
    
    * feat(saves): write collections in deterministic order when saving
    
    * refactor: simply methods via capture lambdas
    
     - No need to pass DW instance around
     - use more "using" declarations to simply method declarations
    
    * pr feedback + lambda styling
    
     - applied a more uniform style to lambda expressions
    Update system colors when switching between Shipyard and Outfitter map panels (#4425)
    
    The cached map state wasn't being updated.
    Number formatting is now limited to one decimal place, which is enough for all current attributes. Also added a separate formatting function for numbers of credits.
    Added support for shipyard "thumbnail" images for ships.
    Update the map cache when selecting a new outfit or ship.
    Made it so certain planets will only show up as something you can land on if your ship has certain attributes.
    Don't show shipyard and outfitter contents in the map for systems that have not been visited.
    Made it possible for the shipyard and outfitter maps to filter the list to only show items sold in the selected system.
    The sale price of ships and outfits now depreciates over time. If you sell "used" outfits to an outfitter, they remain in stock to buy back (at the reduced price) until you leave the planet.
    Switched over to the new, cleaner clickable zone syntax in a few places where it was easy to do so.
    The outfitter map will now correctly show the presence of minables even in uninhabited systems.
    The map of outfit locations now also shows what resources you have mined in each system.
    Added a common base class for Ships, Projectiles, Asteroids, Effects, Flotsam, StellarObjects, etc. This is the first step in creating a generic collision detection framework that can deal with different object types.
    Removed some superfluous namespace qualifiers.
    Refactoring: switching to using "!set.count(...)" instead of "set.find(...) == set.end()" because it's more concise, just as efficient, and seems clearer.
    The find function in the map panels now prefers names that start with the given string.
    Added a find function to the maps of where ships and outfits are sold.
    Modified the outfitter and sales maps to use the new common MapSales panel rather than duplicating code.
    Regularizing the shipyard and outfitter maps code to make them easier to merge.
    Merged the functionality of BlurShader into SpriteShader, and DotShader into RingShader.
    Made it possible to click category names in the maps of shipyards and outfitters to collapse or expand that category. Shift + click expands or collapses all.
    The "ports" map now shows whether each planet has been visited.
    Added a key for the sales maps.
    Fixed a few things in the map zooming code.
    +/- buttons/hotkeys now work on all map panels
    You can now hold Shift to select a second item to compare to, in the maps of the shipyards and outfitters.
    Added a "Medium Warship" category, and moved some ships into it.
    Fixed alphabetization of the lists in the maps of shipyards and outfitters.
    Added arrow key and page up/down support for the lists in the shipyards and outfitters maps.
    Switched the Escape key to closing dialogs, like people expect it to, instead of always going to the main menu.
    Fixed a bug in the shipyards map where if a ship variant is for sale, the base model is shown instead.
    Added a display of the currently selected item's attributes to the shipyars and outfitters map views.
    The shipyardas and outfitters maps now also show you the full set of items for sale in the selected system by dimming out the others.
    In the shipyards and outfitters maps, added more subtle coloring to show which systems have any ships or outfits for sale, even if not the selected one.
    Added Control+W (or Command+W on the Mac) as a universal shortcut for "close current window."
    Added another line to the shipyard and outfitter map listings, showing shields / hull and required space, respectively.
    Added more space in between categories in the shipyard and outfitter maps.
    Fixed a bug in the display of the shipyard and outfitter maps.
    Modified the "shipyards" map to color the ship icons based on the player's government.
    Added two new map views, showing all ships and outfits that you know can be bought, and where they are sold.
    fix(graphics): Avoid velocity-based "sliding" of Visuals
    
    Ref 8a13777ad8ca580e34e01e8129ba61232fcaafbf
    
     - Only projectiles are drawn with a + .5*velocity shift
       - This should be removed in the future pending custom Sprite drawing positions
     - Remove unused DrawList method
     - Avoid creating afterburner visuals based on non-final Ship::velocity value
    
    Closes endless-sky#4261
    Switched to using 2D "texture arrays" for sprites, so all the frames fit into a single texture.
    Moved the chack for invalid swizzle values directly into SpriteShader, so that no code outside of SpriteShader would need to be changed in the future if new swizzle options are added. (Also made it possible for DrawList to use swizzle 8.)
    Made it possible to zoom the view in or out (via the scroll wheel or the +/- keys) without changing the UI zoom.
    add cloak call to fix stark cloak fade
    
    Added call instead of moving the logic from, and removing, DrawList::Item::Cloak function despite only being used one place in case it finds use elsewhere
    Added a common base class for Ships, Projectiles, Asteroids, Effects, Flotsam, StellarObjects, etc. This is the first step in creating a generic collision detection framework that can deal with different object types.
    Merged the functionality of BlurShader into SpriteShader, and DotShader into RingShader.
    Cull sprites outside the screen, to reduce the number of draw calls.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Modified how motion blur is calculated so that it takes into account the "zoom" of the sprite (100% for planets, 50% for ships, etc.).
    Added an experimental sprite shader that can render motion blur. This makes everything less choppy, but more blurry, and takes a lot more GPU power.
    Added a cloaking device. Have not yet written the AI strategy for when to engage it, though.
    Added GPL statements to all source code files and added a license.txt file.
    Updated DrawList with a way to draw a Sprite instead of an Animation.
    Uploaded all the files from my local repository to Google Code.
    Reorder some includes to match style (#4430)
    Fixed minor code style issues (#4428)
    Made it possible for outfits to require licenses to buy them.
    Tooltips no longer show up if you hover the buttons in the corner of the shop panels.
    Added "tooltips" that pop up to explain ship and outfit attributes in the shop panels and the ship info panel.
    Merged the common code from the two info display classes into one common base class.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added a new ShopPanel class that includes all the code that was shared between the Shipyard and Outfitter.
    Added the outfitter UI. You can browse all outfits, but buying is not yet enabled.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    feat(layout): Moved the outfitter and shipyard "detail information" into a sidebar (#5233)
    feat: Added new outfitter help dialogs describing purchasing outfits into cargo (#5126)
    Add additional sanity check when refilling ammo
    Add missing `min` when autorefilling ammunition (#4365)
    
    Don't install from stock more copies of the outfit than the ship can
    receive.
    
    Closes endless-sky#4364
    Use 64-bit int for PlayerInfo::conditions
    
    thus allowing rather large conditions to be serialized.
    
    This is particularly useful for financial conditions. No change to the combat rating limit of 2b is planned.
    Number formatting is now limited to one decimal place, which is enough for all current attributes. Also added a separate formatting function for numbers of credits.
    Made it so the "install" keyboard shortcut in the outfitter will only take outfits from cargo.
    Fix typos
    Remove unneeded declarations
    In the shops, made it so when you hover the buy or sell button, the ships that the buy or sell will apply to are highlighted.
    Several related changes to fighters: they can now run their own systems when being carried (to generate energy, repair, etc.). Their heat level is now indepenedent of the ship carrying them. Fighters now retreat for repairs if badly damaged, and launch only when mostly repaired. And, repair priority is given to the least damaged fighter.
    Show licenses in outfitter (#3068)
    
    * Show owned licenses in the outfitter.
    
    The license will only show if there is an outfit with the correct name.
    Player condition "license: NAME" is mapped to outfit "NAME License".
    
    * Add outfit "Militia Carrier License".
    
    * Add outfit "Coalition License" and a matching log entry.
    
    * Add outfit "Wanderer Outfits License".
    
    * Add outfit "Wanderer License".
    
    * Add outfit "Wanderer Military License".
    
    * Add outfit "Remnant License" and a matching log entry.
    Fix Outfitter Attribute display bug (#3150)
    
    * Update OutfitInfoDisplay
    
     - Change `auto` to the type `pair<string, double>` to avoid adding char
     - push_back to emplace_back
     - Simplify display of per-second values
     - Omit per-second values if reload = 60 (i.e. per second = per shot)
     - Separate non per shot / per second values from values which should be printed as per shot / per second
        - Addition of new damage types no longer requires updating the `isContinuous` offset
    
    * Keep printing per-second values for weapons which fire once per second
    
    * Iterate over the natural type pair<const char *, double>
    Fixed the outfitter's auto-scroll when toggling outfits for sale or in cargo via the "key" buttons. Aslo reverted the behavior for click-and-drag scrolling so it won't clear the current selection.
    Fix bug in OutfitterPanel::Refill if the player has no stock of ammo
    
     found by @comnom
    The "flight checks" now show up as warning icons and only block you if you try to take off with an unusable ship.
    Press R or U in Outfitter to uninstall selected outfit directly to cargo. (#2806)
    
    * Add 'Remove Outfit' shortcut to Outfitter shops
    
    Pressing 'r' will remove the selected outfit into your cargo hold if there is sufficient room.
    Excess ammunition that needed to be removed but cannot fit in the remaining space will be sold.
    
    * Remove -> Uninstall
    
    * Refactor common code, fix logic errors
    
     - Moved code for selecting the ships that will gain/lose the selected outfit from those that are already selected into a separate function.
     - When calculating if the cargo space for ammo exists in CanUninstall, use a copy of the ship's attributes to obtain the exact amount
     - Since b5ecaaec1afc66da8f9c7d430686c73efcd77d94 removed the ability of an outfit to reduce energy generation below zero, rephrased now-invalid explanatory comment.
     - Fix some logic errors in CanUninstall's return paths.
    
    * Replace while loop with exact quantity transfer
    
    * Replace *Uninstall() functions with *Sell(true)
    
     - Add boolean argument to *Sell functions to specify if the outfit is to be moved into cargo space. Default behavior is to sell to Outfitter
     - Uninstall / remove actions transfer the selected outfit (+ammo) into the player's cargo hold, if it has capacity. Any that cannot be held in cargo are sold.
    
    * Additional cleanup
    Code cleanup: fixing some incorrect loop variable types.
    Fixed some issues found by Clang's static analyzer.
    Made it so you don't have to switch to the cargo view to sell items in cargo. Also, if items are both in cargo and in stock, the two separate numbers are shown.
    Fixed the "unable to buy outfit" messages not showing up if buying into cargo.
    Made it possible for outfits to require licenses to buy them.
    Solar power + regenerator compatibility (operational energy) (Ref #1879) (#1896)
    
    * Replaced negative energy generation with operational energy
    
    Shield regenerators now have positive 'operational energy' instead of
    negative energy generation, to avoid a problem where solar collection
    wasn't compatible with them.
    
    * Operational energy revisions
    
    1. Idle energy now considers operational energy.
    2. Flight check now considers operational energy, and returns a new
    conversation if you have negative energy even before checking thrusters.
    
    * Revisions to flight check for solar collection
    
    Added solar collection into flight checking, and added a new
    conversation if your ship runs the risk of becoming derelict too far
    from the system centre. Also fixed a <= that should be an <.
    
    * Changed 'centre' to 'center'
    
    * Tweaked conversation wording
    
    Replaced "system center" with "center of a system", and "steering" with
    "steering systems".
    
    * Renamed operational energy to energy consumption
    
    * Fixed a stray tab in tooltips.txt
    DistanceMap now takes total fuel cost into account (hyperdrive vs. scram drive) instead of assuming jump cost is always twice the hyperspace cost.
    Added a help message explaining how to set which escort is your flagship that is shown in the player info panel, the outfitter, or the shipyard the first time the player has multiple ships in their fleet.
    In the outfitter, you can now toggle whether outfits you do not own are shown, and whether you're buying and selling cargo or ship outfits.
    Always allow buying zero-mass outfits into cargo (e.g. buying a map when no ship is selected).
    Fixed a hang in the auto-refill if a ship has more than its maximum amount of ammo.
    When min() or max() takes mismatching types as inputs, where possible, switched to specifying the output type directly rather than casting both inputs to match.
    The player info now remembers what categories are collapsed in the shipyard and outfitter and the corresponding map panels.
    Fixed some variables that don't need to be mutable now that Panel::Draw() is not expected to be const.
    In the flight check, don't include disabled ships because they don't show up in the list of ships you can outfit.
    Switched the outfitter's flight check to using the ship's official idle heat calculation that accounts for active cooling.
    Fixed some places where the outfitter was not taking depreciation into account when checking if you could buy something.
    In the outfitter, only show the "sells for" line if it's possible to sell this outfit (i.e. the Sell button is active).
    The sale price of ships and outfits now depreciates over time. If you sell "used" outfits to an outfitter, they remain in stock to buy back (at the reduced price) until you leave the planet.
    Moved the beginner help messages out into a data file.
    Added the ship name to the flight check, so if you have many ships it's clear which one needs fixing.
    Continuing to work on code cleanup and commenting.
    change CheckRefill use a more limited check
    fix unlimited outfits due to negative CanAdd
    fix crash due to negative CanAdd result
    fixed ammo dialogue popping up regardless of availability
    The outfitter's ammo auto-refill dialog now takes into account the fact that you can install ammo from cargo for free.
    Removed some superfluous namespace qualifiers.
    Added "tooltips" that pop up to explain ship and outfit attributes in the shop panels and the ship info panel.
    0.9.2 updates
    Ships now recharge whatever they are able to recharge on their own, if they land on an uninhabited planet.
    Cargo capacity is now updated whenever you buy or sell ships or outfits. Also, cargo space is now checked when trying to buy an outfit into cargo.
    You can now buy outfits directly into cargo by deselecting all your ships (control + click).
    Categories in the shipyard and outfitter are now "collapsable."
    Refactored the shop panels to use the same ClickZone class as the other panels do (but, extended to contain some extra information).
    Made it possible (although it's not advisable) to leave the outfitter with a ship whose only thruster is an afterburner or a reverse thruster.
    Added support for an "installable" outfit attribute: if less than zero, the outfit cannot be installed in a ship, and is displayed as "harvested materials" rather than "plundered outfits" in the trading panel.
    Made the "in stock:" message not show up if infinite numbers of an outfit are available.
    display 'in stock' message when items are temporarily available at outfitter
    Formatting cleanup.
    Add autoscroll to ShopPanel to bring item details into view
    error message for installing outfits in cargo
    last instance of 'copy' removed from outfitter
    Regularizing the shipyard and outfitter maps code to make them easier to merge.
    less correct but less confusing outfits copy
    
    "can't by more copies of an outfit" -> "can't buy more of an outfit"
    Ships now "recharge" again when you buy or sell outfits, in particular so that the fuel amount will update.
    The outfitter now displays an outfit that is not for sale if any selected ship has it, not just the first selected ship.
    Optimized the shipyard and outfitter panel display code, so they won't spike the CPU.
    Adding an outfit that requires crew can no longer give your ship more crew than it can hold.
    Check for stores running out when buying or selling outfits in bulk.
    Added a helpful explanation message if you cannot sell an outfit, e.g. because it is a generator and you have shield regenerators installed that depend on it for energy.
    In the outfitter, adding or removing outfits that require crew now adjusts your crew count automatically.
    Added function to return a "noun" for a "planet" object, by default this is the word "planet," but can be either "station" or "moon" if the attributes include one of those two terms.
    Typo fixes.
    Do not offer to reload ammunition for disabled ships.
    Fixed a bug where the outfitter would offer to reload ammunition for escorts that are not in system.
    Fixed a bug in figuring out which outfit has been clicked on in the outfitter panel.
    Fixed a bug where selling plundered outfits does not earn you anything.
    Added the ability to purchase ships in bulk.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Removed some TODOs that have already been fixed.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Code cleanup: always referring to the player's ship as "flagship."
    Modified the outfitter panel to allow selecting multiple ships and outfitting them simultaneously.
    Modified hol the scrolling changes when you click an item in the shop panel, so that that item stays where it is (if possible).
    Added a feature to the outfitter where it can automatically refill all your ammo if you want.
    Fixed a bug where the overheat warning in the outfitter wasn't taking into account your cooling or heat dissipation amounts.
    Changed the wording on a message to avoid awkward word spacing.
    For each possible reason that you cannot buy a ship or outift, added an explanatory dialog that appears if you click "buy."
    Added "not sold here" messages under all outfits that are being shown only because your ship has one, but that you cannot buy here.
    Split ammunition and missile lunchers into two separate categories, mainly so it's clearer to new players that "ammunition" is not something you can install by itself.
    Outfits that you sell (including all outfits of any ship that you sell) now remain available for purchase until you leave the planet. This makes it easy to transfer a jump drive to a new ship for example.
    Modified Outfit to handle rounding errors, and to automatically sell ammo if you sell the launcher.
    Added help messages that pop up the first time you click on a certain panel (and the first time you end up stranded or dead).
    Made the counts of installed items more obvious, so the outfits you have stand out.
    Fixed the outfitter's handling of maps and licenses so that "buy" is disabled if you have one, and so that the map shows up with a count of 1 if you have mapped the entire area it covers.
    Added "license" outfits that can be purchased as a special item to give the pilot a license for a given ship type. (Ships don't yet specify what licenses they require, however.)
    Added a map outfit that is equivalent to "visiting" the twelve nearest systems.
    Updated the UI to use the same three "named" colors everywhere for three different levels of text brightness, for consistency.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Added some hand-to-hand weapons (with no outfit graphics for them, yet).
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Implemented a placeholder version of boarding and plundering (without a dialog yet to choose what items you steal).
    Added a new ShopPanel class that includes all the code that was shared between the Shipyard and Outfitter.
    Modified the shipyard and outfitter to draw the ships in the player's colors.
    Added a modifier to the outfitter to buy multiple copies of an outfit at once (if possible).
    Added an option to toggle fullscreen mode. It's still a little buggy on Linux.
    Added images for the reactors.
    Shipyard: switched to sorting ships by category. Also now hides empty categories in the shipyard and outfitter.
    Switched the outfitter to only selling outfits available on this planet or that you sold them. That required moving the flight check into the outfitter, so you don't sell your engines on a planet with none for you to buy.
    Added handling of scroll wheel events in the shipyard and outfitter panels.
    Added keyboard shortcuts to the shipyard and outfitter, added a ship naming dialog, and fixed selection of your ships by clicking in the side panel.
    Got outfit buying and selling working.
    Added the outfitter UI. You can browse all outfits, but buying is not yet enabled.
    Fixed some shipyard bugs: sell not giving you money, big ships overflowing their boxes, and buy working even if it results in you having negative credits.
    Switched to always using the Color class instead of passing around RGBA float arrays.
    Added GPL statements to all source code files and added a license.txt file.
    Got "New Pilot" working, including visiting the shipyard and picking out an initial ship.
    Added a "New Pilot" dialog (which doesn't yet move you straight to the shipyard, though).
    Updated how the UI panels are handled to allow the main menu to be called up regardless of what the game state is.
    Switched to storing shared_ptrs to ships in PlayerInfo, so that if your ship is destroyed it can still remember where it was.
    Uploaded all the files from my local repository to Google Code.
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Allow phrase-based randomized dialog (#4164)
    
    * Allow `MissionAction` dialog text randomization via the `Phrase` class. Traditional "directly specified" text is still supported.
    
    Supported syntax:
    ```
    dialog phrase <stock phrase name>
    
    dialog
        phrase
            {phrase specification...}
    ```
    e.g.
    ```
    dialog phrase "hostile disabled"
    
    dialog
        phrase
            word
                "Please excuse my dear "
            word
                "Aunt Sally"
                "Uncle Mark"
            word
                ` for saying, "`
            phrase
                "hostile disabled"
                "friendly disabled"
            word
                `" yesterday.`
    ```
    
    * Move `dialogText` parsing to `Dialog` static method
    
    * Allow `NPC` "completion" dialog text randomization using the same phrase-based syntax as `MissionAction` dialog
    
    * Use phrases to encapsulate generic/repeated dialog
    
    For similar messages, combined clauses to diversify the generated text.
    
    * Remove duplicated space
    
    * Typo fix ( @Pointedstick )
    Using float v. double in some cases of -Wdouble-promotion
    
     - Add some <algorithm> headers for uses of std::min or std::max
    Handling invalid input to the dialog int callback.
    Define additional filled colors in interfaces.txt (#3425)
    
    * Define additional filled colors in interfaces.txt
    
     - Further support for modified interfaces / reskinning.
    
    * Added comments to color definitions
    
    * Reflect name change in code too
    Dialogs can respond to Esc or Ctrl+W
    
     - If Esc is not the "Show Main Menu" key, it will close the dialog
     - Closed dialogs
      - Choose "Cancel" or "Decline", if possible
      - Choose "OK" for information-only dialogs.
     - If Esc is the "Show Main Menu" key, that functionality has priority (e.g. the player can save when being offered a mission dialog).
    Code cleanup: "static" is redundant inside a C++11 anonymous namespace.
    When entering text, caps lock should shift letters but not any other keys.
    Made it harder to accidentally delete a snapshot or a pilot, by removing the keyboard shortcuts for those buttons.
    Revert "Made it so that all mission actions can display conversations or dialogs."
    
    This reverts commit 181603905497b28c403864258d4bd2935b0fba90.
    Made it so that all mission actions can display conversations or dialogs.
    Made Panel::Click() able to distinguish double-clicks, so that the info panel can switch to a ship only if it is double-clicked, not just clicked twice in a row.
    Strings in the load panel or dialogs that are too long are now truncated.
    Made it so the currently selected commodity or map coloring is remembered in the player info and is carried over to the trading panel if it is a commodity.
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    Fixed the dialog height calculation for dialogs that are offering a mission.
    Made Caps Lock work when entering text.
    Tweaked the dialog display to not overestimate how much padding is needed.
    Switched the Escape key to closing dialogs, like people expect it to, instead of always going to the main menu.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added mapping of numeric keypad keys to ASCII values for text input in dialogs.
    Removed superfluous std:: prefixes.
    Took out most of the overloaded operators for Command, because it is not at all clear how they should handle the turn field, and ignoring it was causing problems.
    Mission dialogs now allow you to bring up a map, the same as conversation panels. Also made the arrow marking the destination system larger, so it stands out on the map.
    Added keyboard shortcuts for accepting or declining a mission dialog ('A' and 'D').
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Updated the Dialog class to allow "accept / decline mission" dialogs.
    Updated the UI to use the same three "named" colors everywhere for three different levels of text brightness, for consistency.
    Added a DrawBackdrop() function to Panel so that individual panels don't have to duplicate that functionality.
    Added a "boarding" dialog that lets you choose what commodities or equipment to plunder from a disabled ship. (Capture is not yet implemented.)
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Fixed some missing #includes.
    Added a new generic dialog class to replace specific dialogs like the "how many credits?" one.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added a pi.h file defining a PI constant for operating systems that do not have M_PI defined in cmath.
    Made some changes to support Windows porting, assuming MinGW will be used to provide basic POSIX functionality.
    Added a "Preferences" class to parse the preferences file, and made the load display and auto-aim controlled by preferences. Also added an auto-fire AI option.
    Renamed "ShipName" to "Phrase" since it is also used for random hail messages.
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Added planet and spaceport descriptions for 35 more planets.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Fixed some things that Google's cpplint warns about (mostly, constructors that should be marked explicit).
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    Added a 500x multiplier (alt / option key), mainly for players with enormous cargo fleets.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Added help messages that pop up the first time you click on a certain panel (and the first time you end up stranded or dead).
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Added some hand-to-hand weapons (with no outfit graphics for them, yet).
    Added a panel to the planet dialog for hiring and firing extra crew.
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Added a new generic dialog class to replace specific dialogs like the "how many credits?" one.
    Added GPL statements to all source code files and added a license.txt file.
    Updated how the UI panels are handled to allow the main menu to be called up regardless of what the game state is.
    Uploaded all the files from my local repository to Google Code.
    Made it possible to anchor different elements in an Interface to different corners or edges of the screen.
    Added support for named "boxes" in interfaces, in addition to "points."
    Updated the "interface" syntax to allow buttons to change color on hover and to simplify the syntax.
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    THe Interface class now stores pointers to the colors, so if later data changes them the interface will change.
    Took out the need for Information and Interface to know about Radar (replacing it with generic named points, to be handled separately, instead).
    Added two new map views, showing all ships and outfits that you know can be bought, and where they are sold.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Made GameData::Colors() publicly accessible instead of only sharing them with Interface.
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Added support for target ship outlines to be colored based on friendly / hostile status.
    Added a "boarding" dialog that lets you choose what commodities or equipment to plunder from a disabled ship. (Capture is not yet implemented.)
    Switched to always using the Color class instead of passing around RGBA float arrays.
    Fixed a few final issues in the load / save / new mechanics. It all seems to be working correctly, now.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    Replacing asserts with reasonable fall-back behavior.
    Added support for special commodity classes, just to be used for random cargo in missions that is not one of the basic commodity types.
    Added warning messages whenever a line of a data file or saved game is unrecognized.
    Made it possible to override the existing commodities (to support total conversion mods).
    Moved all the source code files into a "source" folder to clean up the root folder.
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Added specific named trade goods for each commodity, to be used as mission cargo.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    feat(government): Allow customization of the government's displayed name (#4768)
    
    * Support an optional "display name" key for Governments
     - Allow setting a customized display name for a government, rather always displaying the name used to define the government
    
    * Set the display name for existing pseudo-governments
    Allow restriction of scanning / fining by governments (#3187)
    
    * Governments store a filter describing where they enforce laws
    
      - The player can be fined or scanned in any system or planet that matches one of the enforcement zones.
      - If no zones are defined, then the government has universal jurisdiction
    
    * Only ships or planets with enforcement authority perform scans
    Allow modders to override default crew attack/defense values per government (#2708)
    
    * Allow modders to override default crew attack/defense values per government (#40)
    
    * Resolve a type mismatch (#41)
    
    * Move government definition (#42)
    
    * Resolve some style issues (#43)
    
    * Do not allow attack/defense values to be negative (#46)
    friendlyDisabledHail
    Added facility for a hostile disabled hail
    
    Each government can define a "hostile disabled hail" like a "friendly
    hail" or "hostile hail". If one if missing, the game will default the
    "hostile disabled" phrases, i.e., Shakespearean insults.
    Pirate raids are now tied to a system's government, so there will not be human pirate raids in alien star systems.
    A species can now be marked as speaking a different, possibly unknown language.
    Fixed a bug where fines for illegal cargo or outfits could be assessed for ships other than the one that is scanned or for ships that are not even in-system.
    Fixed a mistake in my previous commit.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added numeric IDs for each government so the hostility matrix can use vector indices instead of string->Government mapping.
    Switched to having the hail messages be a property of each government rather than individual ships or fleets (so that mission-related ships will use them, too, to add a bit of flavor in battles).
    Added convenience functions to Planet and Government to simplify the syntax for querying political state. Also fixed a few busgs in my recent Command and AI changes.
    Added support for illegal cargo and outfit checks when you are scanned or when you land on a planet.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Made it possible for game events to alter one government's attitude toward another.
    Made it possible to bribe hostile ships to leave you alone. More principled captains will refuse your money, however.
    Got permanent reputation changes working, with Ship::TakeDamage now returning a combination of PROVOKE, DISABLE, and DESTROY depending on the projectile's effect.
    Added a Politics class that can handle governments coming to the aid of allies, tracking the player's reputation in response to different actions, etc.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Modified provocation to fade over time, e.g. if you accidentally shot an allied ship but then don't fire on them again, eventually they will "cool down" and stop attacking you.
    Added GPL statements to all source code files and added a license.txt file.
    Engine: updated so that any ship that is hit directly by a projectile is "provoked" against the ship that fired it (even if it was not previously an enemy).
    Added a "color" field for governments, and modified the map panel to allow coloring systems by government.
    Uploaded all the files from my local repository to Google Code.
    Improve dynamic zooming (#3727)
    
    * Improve dynamic zooming
    
    Behavior changes:
    
    - Fixes the view zoom setting getting reset if the window is initially
      created at a smaller size (a likely occurrence when using tiling
      window managers)
    
    - Makes the view zoom restriction dynamic, updating the zoom level as
      necessary in real time as the window size changes, up to the user
      preference
    
    - Updates the view restriction bounds, taking into account both the
      window width and height, to ensure that at least the main menu and
      preferences panel are fully visible and accessible
    
    Code changes:
    
    - Split the "view zoom" value into two logical values:
    
      - User zoom, the setting that exists in the configuration file and
        is visible in the configuration panel
    
      - Effective zoom, used to actually scale the UI - a function of user
        zoom and window size
    
    - Update the code to use the user zoom or effective zoom values as
      appropriate
    
    - Consolidate all view zoom restricting code (from main.cpp and
      PreferencesPanel.cpp) into one place (Screen.cpp)
    
    * Revert Zoom->EffectiveZoom renaming
    & remove duplicated zoom reset
    Code cleanup: "static" is redundant inside a C++11 anonymous namespace.
    Updated the "interface" syntax to allow buttons to change color on hover and to simplify the syntax.
    Added support for "@2x" image files to supply double-resolution graphics.
    Simplified the logic for changing the zoom level of the screen, by moving more of it into the Screen class.
    Added support for changing the global zoom factor (for large monitors and for testing high-DPI rendering on normal monitors).
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added a volume control, and a preferences file that saves the volume and window size in between runs.
    Added some helpful extra location functions to Sprite and Screen (e.g. TopLeft()).
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    feat(mechanics): Save collections in order by element name (#5333)
    
    * feat(saves): write collections in deterministic order when saving
    
    * refactor: simply methods via capture lambdas
    
     - No need to pass DW instance around
     - use more "using" declarations to simply method declarations
    
    * pr feedback + lambda styling
    
     - applied a more uniform style to lambda expressions
    fix(style): Fixed an instance of spaces being used instead of tabs (#4754)
    feat: Support algebra in ConditionSet expressions (#3128)
    
    * Handle assignment operations inside ConditionSet::Test
    
     - Add boolean test/apply indicator to each expression
       - Determine if a ConditionSet performs tests or assignments in the expression constructor
     - If the ConditionSet is not pure (mixes assignments and tests), use the assignment operators to alter an initally-empty map)
       - When obtaining the value from strings (e.g. conditions), first check the created map, then fall back to the player's conditions.
     - Warns when loading if an and/or node uses assignment operators
    
    * Create classes to manage complex condition expressions
    
     - SubExpressions represent each side of an expression, with methods to allow serialization and evaluation
     - SE::Operation class manages the details of math within a given side, by tracking the location of operands and operator
    
    * Implement sequence generator algorithm based on Dijkstra's shunting yard
    
    * Alter Add methods to use SubExpressions and Operations
    
     - Add SubExpression and Expression constructors for simple conditions
       - Simple conditions have only one token per side, so vector constructs are unnecessary.
    
    * Simplify adding operators, reduce code duplication
    
     - Add modulus to supported simple operations
        e.g.        `year % 7 == 1`
          will be true for years 1, 8, 15, ...
     - Moved the precedence map to an anonymous function
       - Simplify the process of updating supported simple operators, as all maps/sets are now in the same region of the file.
     - Reduce duplication with 'AddOperation' private method
    
    * Extend DataNode with static methods for string parsing
    
    * Simplify FW:Intro offer checks
    
    * Use stdlib to simplify, update initializations
    
    * Maintain support for legacy `never`
    
    * Simplify warnings & check for leading adjacent (
    
    * Tweaks
    
     - Avoid taking reference to `map::find` iterator (as find is return-by-value)
     - Add missing `vector::reserve()` call
     - Reduce number of different `vector::emplace_back` overloads used
     - Reduce calls to `DataNode::IsNumber` by checking for `"random"` first
    
    * Simplify "deep convoy" checks
    
    * Add bounds-checking for user-input condition values
    
     - No bounds checks done for the results of computations
    
    * Update some comments
    
    * revert accidental "has" -> "not" change
    Reorder some includes to match style (#4430)
    Fixed some things that Google's cpplint warns about (mostly, constructors that should be marked explicit).
    More updates to the code comments.
    Added functions to DataWriter for writing a variable number of tokens on a single line.
    Moved all file IO into the Files class, so it will be easy to add support for UTF16 paths under Windows.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Removed some extraneous executable bits.
    DataWriter: added a function to write a DataNode to a file.
    Added a "DataWriter" class for writing data files safely.
    feat: Support algebra in ConditionSet expressions (#3128)
    
    * Handle assignment operations inside ConditionSet::Test
    
     - Add boolean test/apply indicator to each expression
       - Determine if a ConditionSet performs tests or assignments in the expression constructor
     - If the ConditionSet is not pure (mixes assignments and tests), use the assignment operators to alter an initally-empty map)
       - When obtaining the value from strings (e.g. conditions), first check the created map, then fall back to the player's conditions.
     - Warns when loading if an and/or node uses assignment operators
    
    * Create classes to manage complex condition expressions
    
     - SubExpressions represent each side of an expression, with methods to allow serialization and evaluation
     - SE::Operation class manages the details of math within a given side, by tracking the location of operands and operator
    
    * Implement sequence generator algorithm based on Dijkstra's shunting yard
    
    * Alter Add methods to use SubExpressions and Operations
    
     - Add SubExpression and Expression constructors for simple conditions
       - Simple conditions have only one token per side, so vector constructs are unnecessary.
    
    * Simplify adding operators, reduce code duplication
    
     - Add modulus to supported simple operations
        e.g.        `year % 7 == 1`
          will be true for years 1, 8, 15, ...
     - Moved the precedence map to an anonymous function
       - Simplify the process of updating supported simple operators, as all maps/sets are now in the same region of the file.
     - Reduce duplication with 'AddOperation' private method
    
    * Extend DataNode with static methods for string parsing
    
    * Simplify FW:Intro offer checks
    
    * Use stdlib to simplify, update initializations
    
    * Maintain support for legacy `never`
    
    * Simplify warnings & check for leading adjacent (
    
    * Tweaks
    
     - Avoid taking reference to `map::find` iterator (as find is return-by-value)
     - Add missing `vector::reserve()` call
     - Reduce number of different `vector::emplace_back` overloads used
     - Reduce calls to `DataNode::IsNumber` by checking for `"random"` first
    
    * Simplify "deep convoy" checks
    
    * Add bounds-checking for user-input condition values
    
     - No bounds checks done for the results of computations
    
    * Update some comments
    
    * revert accidental "has" -> "not" change
    Use 64-bit int for ConditionSet
    
    thus allowing modders to safely use rather large values in conditions
    Added constructors that call Load() on a data element, so construction and Load() don't have to be done in two separate steps.
    Avoiding parsing error messages in ConditionSet from trying to parse non-numeric values as numbers. Also did some code cleanup.
    introduce "random" to the right side of conditions (#2383)
    
    * "random" on the right side of conditions
    
    Introduce "random" and playerConditions to the right side of conditions, allowing for:
    "random var" = random
    "CoalitionJobsOld" = "CoalitionJobs"
    
    * "random" on the right side of conditions
    
    * Add multiplication as operation
    
    Division would need a div by zero check, leaving that one to others. @endless-sky
    
    * modified ::Save
    
    save the string-value if no value is set (or zero) and if some string value is set (not empty)
    
    * clean up (duplicate code -> function)
    
    * clean up (duplicate code -> function)
    Continuing code cleanup and commenting.
    Extended the error reporting to also handle nodes that can contain arbitrary condition expressions.
    Added support for "and" and "or" clauses within condition sets, allowing arbitrary trees of logical operators (e.g. and(or(a, b), c)).
    Moved all the source code files into a "source" folder to clean up the root folder.
    Made some small changes to support the new mission model, including having the "complete" MissionAction set the payment substitution string, and adding an operator+ to Date for setting deadlines.
    Added the ConditionSet class, which stores a set of tests or modifications to make on the "condition" flags.
    test: Support test case execution, locally and in CICD (#4998)
    
    * Extend CI environment with graphical testframework
    Adds CI workflow for Ubuntu 16.
    Adds minimal code to main.cpp to run hardcoded empty testcase.
    Changes script for headless testing to run hardcoded testcase.
    
    * Fix coding style issue.
    
    * Updated step names to differentiate between tests
    Renamed existing tests to parsetest_*.
    Renamed the new test to autotest_*
    Re-ordered tests so that all parse-tests are together.
    
    * Changed GameData::Progress check to (menuPanels UI)->IsInitialized.
    As based on review-feedback. Using the same pattern as isDone.
    Removed the isReady variable in the anonymous namespace of MenuPanel.
    Also replaced explicit default constructor for UI by implicit constructor.
    Tested:
    - Quit from main menu
    - Exit during flight (by closing window)
    - Ran the automated test
    
    * refactor: move "are we loaded?" from UI to GameData
     - Add "const" accessor GameData::IsLoaded & backing boolean
     - Remove UI->IsInitialized & associated branching
     - Update class comments / method names to distinguish simple accessors & identify future refactoring opportunities
        Audio::Progress -> Audio::GetProgress, as it is already a simple accessor
     - Disable moving/copying the SpriteQueue class, given that it manages threads
    
    * docs: update --help and man entries
    
    * scripts: exit early if not on a supported headless platform
    
    * chore: Update GameLoop params
    Preloaded conversation data, test, or debug mode are not modified.
    
    Co-authored-by: tehhowch <tehhowch@users.noreply.github.com>
    Really minor code comment tweaks (#4400)
    
    * Minor code comment improvements
    
    Minor improvements to code comments.
    
    * Made some comments more clear
    
    Signed-off-by: Peter van der Meer <peter.vd.meer@gmail.com>
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Enable save-aware data parsing without modifying the save
    
    https://github.com/endless-sky/endless-sky/pull/3994
    
    * Allow parsing game data for content errors
    
     - Specify the `-p` or `--parse-save` command-line option to load the most recent save and allow the game to perform reference-checking.
     This option exits before initializing SDL (e.g. headless operation), and does not save the file before exiting.
     - Updated the man page and help text as well
    
    * Include whitespace warnings in DataFile::Load
    
     - Print warnings to stderr and errors.txt when spaces and tabs are mixed
     - Provides a warning if a line starts with a space, and then tabs are later used in the file for indenting
     - Provides a line-specific warning if spaces and tabs are intermixed on the same line.
     - Fix existing mixed whitespace indentation
    
    * Extend CI tooling with data parsing test
    
     - add bash script for Travis CI
     - add PS script for AppVeyor CI
    
    The scripts invoke the new `-p` command-line flag and test whether the `errors.txt` file was created.
    If so, this is taken to mean that a parsing error occurred. The scripts can be executed locally by passing the appropriate executable as the argument to the script.
    
    * Add OSX build environment
    
     - Homebrew installations of the developer dependencies (per the developer readme).
       (This will eventually result in a broken build when a core dependency publishes a new point release, at which point the XCode project will need to be updated.)
    
    * Avoid automatically saving upon game load
    
     - Closes https://github.com/endless-sky/endless-sky/issues/3510
     - Only allow saving after the player has explicitly "entered" their savegame
       Players explicitly 'enter' their savegame via the keypress / button:
       - 'Enter Ship' (after first launching the game)
       - 'Load Game' (after pressing Load/Save and then selecting a different save)
    
    In other words, if you tell the game, "Yes, this is the save I want to play," its save file will be updated when you close the game.
    If you didn't explicitly tell the game that, then the save file will not be modified.
    Implement a ShipEvent queue to allow delayed ShipEvent handling (#3371)
    
    * Implement a ShipEvent queue to allow delayed ShipEvent handling
    
     - Handling ShipEvents can result in new UI elements.
     - Only one UI element should be created and displayed to the player at a time (i.e. do not display a dialog and the BoardingPanel simultaneously).
     - Callbacks from one UI element from a given ShipEvent may result in status changes that should influence other UI elements created from the same ShipEvent (e.g. if a mission conversation offered upon boarding an NPC results in that NPC's destruction, the player should not be able to plunder said NPC).
     - Fixes a preexisting issue where the boarding panel would be offered if the player dies in a conversation.
    
    * Switch from GetUI()->IsTop(this) to GetUI()->Top().get() == this
    
     - IsTop() checks only drawn panels, not panels that are requested but not yet drawn.
    Made Panel::Click() able to distinguish double-clicks, so that the info panel can switch to a ship only if it is double-clicked, not just clicked twice in a row.
    Updated the "interface" syntax to allow buttons to change color on hover and to simplify the syntax.
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    Switched to a more generic solution for multiple key presses where one opens or closes a new UI panel.
    Changed Panel::Drag and Panel::Scroll to take double dx/dy
    
    Fixes endless-sky/endless-sky#805
    The map can now be zoomed with the scroll wheel in addition to with buttons / keys.
    Switched the Escape key to closing dialogs, like people expect it to, instead of always going to the main menu.
    Added support for changing the global zoom factor (for large monitors and for testing high-DPI rendering on normal monitors).
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added support for reordering ships in your fleet in the shop side panel.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Modified the new mission implementation so that missions can also be offered as soon as you land (e.g. to handle continuation of existing missions), and used that to create a "first contact" conversation that is shown the first time you land on any Quarg world.
    Modified the darkened "backdrop" for dialogs so that it is only drawn for the topmost panel, so that if multiple dialogs are up it does not completely blacken the screen behind them.
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Added an option to toggle fullscreen mode. It's still a little buggy on Linux.
    Added handling of scroll wheel events in the shipyard and outfitter panels.
    Added GPL statements to all source code files and added a license.txt file.
    Got "New Pilot" working, including visiting the shipyard and picking out an initial ship.
    Added a "New Pilot" dialog (which doesn't yet move you straight to the shipyard, though).
    Updated how the UI panels are handled to allow the main menu to be called up regardless of what the game state is.
    Switched to using the new ImageSet class for batch-loading of sprites. (But still with each frame going into separate textures.)
    Added functions for bulk-uploading sprites. (But, they're not in use yet.)
    Added an ImageSet class, which will store all data that must be loaded for a given sprite and all functions for parsing sprite paths.
    feat(mechanics): Save collections in order by element name (#5333)
    
    * feat(saves): write collections in deterministic order when saving
    
    * refactor: simply methods via capture lambdas
    
     - No need to pass DW instance around
     - use more "using" declarations to simply method declarations
    
    * pr feedback + lambda styling
    
     - applied a more uniform style to lambda expressions
    fix: Illegal stealth missions can no longer be fined for multiple times (#4526)
    
    feat: Fines for illegal mission cargo are now added together instead of only the worst being applied.
    feat: You are now told about how many missions you failed for being scanned.
    Fixed minor code style issues (#4428)
    Bugfix: Limit CargoHold::Transfer when size = 0
    
    Fixes endless-sky#4305
    
    A non-negative CargoHold::size means the hold has a limited capacity that should be respected.
    Carried ships unload collected cargo into carrier's cargo bay
    
     - Unless the carrier is a player ship
       (since cargo is loaded into player escorts before the flagship, launch + recall could transfer items from escorts into the flagship's hold, preventing the player from plundering without first jettisoning outfits that were originally stored without issue.)
    Several related changes to fighters: they can now run their own systems when being carried (to generate energy, repair, etc.). Their heat level is now indepenedent of the ship carrying them. Fighters now retreat for repairs if badly damaged, and launch only when mostly repaired. And, repair priority is given to the least damaged fighter.
    Avoid creating a passenger reference when 0 passengers are transferred (#3367)
    
    * Outfit, Commodity, and Passenger transfers require a non-zero amount
    
     - Otherwise a reference to the item is created, even though the quantity is 0.
       - This reference would cause mission failure for destroyed ships even if they were not carrying mission cargo/passengers.
    
    * Sanity check for non-zero passenger count
    Removing some unnecessary std:: prefixes.
    Made it so illegality and stealth is an attribute of the mission as a whole (applying to both cargo and passengers) rather than just an attribute of the cargo.
    Made it so pirates won't steal passengers when plundering. Also cleaned up and simplified the CargoHold transfer code.
    Renaming GetOutfitOrder() to something a bit clearer, and hiding the function in the .cpp file since no other class needs to know about it.
    Transfer outfits in reverse size order (#2757)
    
    * Transfer outfits in reverse size order
    
    * Remove unneeded sort comparison
    Simplified the code in some places where map::count(key) or map::erase(key) could be used alone without calling map::find() first.
    When min() or max() takes mismatching types as inputs, where possible, switched to specifying the output type directly rather than casting both inputs to match.
    Modified the boarding panel to reflect the fact that all plunder is fully depreciated.
    The sale price of ships and outfits now depreciates over time. If you sell "used" outfits to an outfitter, they remain in stock to buy back (at the reduced price) until you leave the planet.
    Continuing to work on code cleanup and commenting.
    allow Cargo::Transfer to deal with fractional mass
    
    fixes issue of ammo not being accounted for during TakeOff
    Fixed a bug where if a ship had zero cargo space, it was treated as infinite space. Also fixed a cargo display bug where some lines showed "0 T" of cargo.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Made it possible to accept a mission if you don't have bunks or cargo space free, but can make it free by firing crew or selling ordinary trade goods. (This is to reduce the chance of a mission string being cut off because the player has no space for the next mission.)
    Added support for illegal cargo and outfit checks when you are scanned or when you land on a planet.
    Fix bug that allowed negative free cargo space and thus having negative counts of commodities or outfits in cargo.
    Got CargoHold to handle zero-sized mission cargo correctly (putting it in your flagship, but not the other ships).
    Added tracking of "condition" flags that missions can use to determine whether their requirements are satisfied. Used those flags to ensure that each mission is only offered once. (Eventually, there may be some that are allowed to repeat, though).
    Added support for basic "special missions," offered in the Spaceport on certain planets.
    Fixed a bug where "passengers" from a previously loaded game were remaining in the cargo hold when loading a different game.
    Updated all the functions that save data to use the new DataWriter class (to ensure proper indentation, quoting, etc.).
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Fixed several glitches in the handling of missions (duplicates when reloading pilot, not moving passengers into your ship, allowing infinite passengers, formatting / display issues).
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Added support for passenger-carrying missions.
    Got CargoHold to support mission-specific cargo.
    Modified the planet panel to always let you sell (or install) outfits if you have them as cargo.
    Fixed a bug that was allowing infinite cargo capacity.
    Added a line to the trading panel showing if some cargo space is taken up by plundered outfits.
    Implemented a placeholder version of boarding and plundering (without a dialog yet to choose what items you steal).
    Added a CargoHold class to handle everything pertaining to cargo (including determining when you have the capacity for it).
    feat: Support algebra in ConditionSet expressions (#3128)
    
    * Handle assignment operations inside ConditionSet::Test
    
     - Add boolean test/apply indicator to each expression
       - Determine if a ConditionSet performs tests or assignments in the expression constructor
     - If the ConditionSet is not pure (mixes assignments and tests), use the assignment operators to alter an initally-empty map)
       - When obtaining the value from strings (e.g. conditions), first check the created map, then fall back to the player's conditions.
     - Warns when loading if an and/or node uses assignment operators
    
    * Create classes to manage complex condition expressions
    
     - SubExpressions represent each side of an expression, with methods to allow serialization and evaluation
     - SE::Operation class manages the details of math within a given side, by tracking the location of operands and operator
    
    * Implement sequence generator algorithm based on Dijkstra's shunting yard
    
    * Alter Add methods to use SubExpressions and Operations
    
     - Add SubExpression and Expression constructors for simple conditions
       - Simple conditions have only one token per side, so vector constructs are unnecessary.
    
    * Simplify adding operators, reduce code duplication
    
     - Add modulus to supported simple operations
        e.g.        `year % 7 == 1`
          will be true for years 1, 8, 15, ...
     - Moved the precedence map to an anonymous function
       - Simplify the process of updating supported simple operators, as all maps/sets are now in the same region of the file.
     - Reduce duplication with 'AddOperation' private method
    
    * Extend DataNode with static methods for string parsing
    
    * Simplify FW:Intro offer checks
    
    * Use stdlib to simplify, update initializations
    
    * Maintain support for legacy `never`
    
    * Simplify warnings & check for leading adjacent (
    
    * Tweaks
    
     - Avoid taking reference to `map::find` iterator (as find is return-by-value)
     - Add missing `vector::reserve()` call
     - Reduce number of different `vector::emplace_back` overloads used
     - Reduce calls to `DataNode::IsNumber` by checking for `"random"` first
    
    * Simplify "deep convoy" checks
    
    * Add bounds-checking for user-input condition values
    
     - No bounds checks done for the results of computations
    
    * Update some comments
    
    * revert accidental "has" -> "not" change
    Use 64-bit int for ConditionSet
    
    thus allowing modders to safely use rather large values in conditions
    Check for user-supplied unrepresentable values
    
    Current allowed condition values are those of signed int (generally -2'147'483'648 to 2'147'483'647)
    Added constructors that call Load() on a data element, so construction and Load() don't have to be done in two separate steps.
    Fixed some missing #includes and one unnecessary check that would mess up other compilers.
    Avoiding parsing error messages in ConditionSet from trying to parse non-numeric values as numbers. Also did some code cleanup.
    introduce "random" to the right side of conditions (#2383)
    
    * "random" on the right side of conditions
    
    Introduce "random" and playerConditions to the right side of conditions, allowing for:
    "random var" = random
    "CoalitionJobsOld" = "CoalitionJobs"
    
    * "random" on the right side of conditions
    
    * Add multiplication as operation
    
    Division would need a div by zero check, leaving that one to others. @endless-sky
    
    * modified ::Save
    
    save the string-value if no value is set (or zero) and if some string value is set (not empty)
    
    * clean up (duplicate code -> function)
    
    * clean up (duplicate code -> function)
    Made the "random" condition change every time it is tested, so it can be used in places other than "to offer" checks and can be used multiple times in one conversation with different results.
    Continuing code cleanup and commenting.
    Extended the error reporting to also handle nodes that can contain arbitrary condition expressions.
    Added support for <?= and >?= condition operators (assign minimum and assign maximum).
    Fixed a bug where a set of conditions would not be saved if all the conditions were inside of "or" or "and" nodes rather than any of them being at the root level.
    Added support for "and" and "or" clauses within condition sets, allowing arbitrary trees of logical operators (e.g. and(or(a, b), c)).
    Moved all the source code files into a "source" folder to clean up the root folder.
    Removed superfluous std:: prefixes.
    Added a "never" keyword to mark conditions (e.g. for completing a mission) that are never satisfied.
    Fixed a few small bugs for handling the new mission implementation.
    Made some small changes to support the new mission model, including having the "complete" MissionAction set the payment substitution string, and adding an operator+ to Date for setting deadlines.
    Added the ConditionSet class, which stores a set of tests or modifications to make on the "condition" flags.
    feat(mechanics): Add a MissionAction node that enables giving the player a ship (#5302)
    
    * Allow ships to be gifted by missions
    
    * Change > to >=
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    
    * Commit for comment suggestions
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    
    * Fix bug and adjust comments
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    
    * Change code to have only one function `BuyShip`
    
    * Remove useless bool
    
    * Housekeeping
    
    * More housekeeping
    
    * Don't gift nonexistent ship models
    
    * Housekeeping
    
    * Fixed a double space
    
    * Changed syntax to `give ship <model> [<name>]`
    
    * Fixed missing semicolon
    
    * Whitespace fix
    
    * Change dialog to include the model of the ship
    
    * Change it so message appears only in log
    
    * Remove `A/An <noun>` for better english
    
    * Punctuation changes
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    feat(mechanics): Allow mission NPCs to spawn or despawn based off of ConditionSets (#5161)
    fix(mechanics): Count all ships which cannot depart the system
    
    ...even if they have a different warning displayed.
    
    While Ship::FlightCheck now reports all warnings, only the first warning is displayed in the Shipyard / Outfitter.
    (Before displaying e.g. up to 3 warning tooltips, we must determine their relative priorities and verify the checked condition parameters make sense due to the branching changes)
    
    Closes endless-sky#4949
    fix(ci): Call CheckReferences even when no save exists
    
    Otherwise, deferred / referenced content would not have been checked. Such content includes government / system / planet names in LocationFilters.
    feat: If not carried, fighters and drones are launched instead of sold (#4388)
    
    Co-authored-by: tehhowch
    feat: Implement maintenance and operating cost attributes  (#4596)
    
    * Added a maintenance cost outfit attribute
    
    * Maintenance costs will now show in the bank panel
    
    * Allow overdue maintenance to be paid off
    
    * Properly size the max rows if you have overdue charges but no crew or maintenance
    
    * Simplified output
    
    * Added an operating costs attributes
    
    * Overdue maintenance costs now impact credit score
    
    * Pay maintenance costs after crew salaries
    
    * Include the maintenance costs of in cargo outfits
    
    * Comment correction
    
    * Clean up
    
    * Code simplification
    
    * Check for > 0 credits instead of non-zero credits for the two crazy people who give themselves negative credits
    
    * Check in cargo outfits when landed and prevent net negative maintenance costs
    
    * Prevent negative costs for each ship and each outfit in cargo instead of preventing a total net negative.
    Use 64-bit int for PlayerInfo::conditions
    
    thus allowing rather large conditions to be serialized.
    
    This is particularly useful for financial conditions. No change to the combat rating limit of 2b is planned.
    Place NPCs from boarding missions while in-flight
    
     - Expose a pointer to the recently-accepted boarding mission
     - Move "Place" code for NPCs to public method
     - Check for an active boarding mission in SpawnFleets
    NPC "completion" / MissionAction conversations can kill the player and/or NPC (#3376)
    
    * Call ConversationPanel with a pointer to the relevant ship
    
     - Allows destroying the pointed ship depending on the conversation outcome.
     - If the player is killed, the pointed ship should survive, and no BoardingPanel should be displayed.
     - Supply the ship from NPC::Do, to enable destroying the NPC via LAUNCH, DEPART, and FLEE conversation endings.
     - Include a boarding check to prevent an NPC block with a non-boarding completion requirement (e.g. `npc evade`) from displaying a BoardingPanel after the conversation ends.
    
    * Add response handling for non-"on offer" conversations
    
     - Updated PlayerInfo::BasicCallback:
       - attached it to:
         - all NPC completion conversations
           - If actually boarding the NPC, set it as the boarding ship.
       - The player is perhaps not landed: in-flight death implies:
         - capture of the flagship by the ship it was boarding (`die` when boarding)
         - crew mutiny and defection (`die` when not boarding)
         - the destruction of the ship. (`explode`)
     - Added the Conversation::EXPLODE response, based on the keyword `explode`
     - Updated the Ship::WasCaptured code to not over-transfer crew, for the case where the player dies to a conversation offered in-flight and has plenty of crew already.
    
    * Rework PlayerInfo::Die
    
     - Remove need for a private Die() method
     - Update callers of Die(bool) to use Die(int) and achieve the intended result
    
    * Eliminate need for BoardingShip()
    
     - Moved player death handling into ConversationPanel::Exit, where the relevant ship pointer is easily accessed
     - Added pointers to the ship responsible for the boarding mission / npc event into relevant Mission and MissionAction methods, to eliminate need for PlayerInfo::BoardingShip
    
    * Showing BoardingPanel requires a disabled-yet-not-destroyed ship
    
    * Add check for capture / bribery of a boarding ShipEvent's target via a mission NPC's completion conversation
    
     - A more robust method to only offer the BoardingPanel resulting from ConversationPanel::Exit (i.e. no display of sequential BoardingPanels, and obeying the conversation's exit node) should be pursued separately
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Enable any mission conversation to require the player to launch
    
     - Adds a "BasicCallback" to enable conversations that come from non "on offer" conversations to force the player to depart the planet.
     - Guards setting "shouldLaunch" to true while in flight, as a boarding/assisting mission could otherwise set this and cause odd behavior on the next landing.
    Add missing reputation serialization to conversation ConditionSets
    
     - Fixes issue where changes to the stored government reputations were not reflected in the current political landscape when the changes were performed via conversation `apply` node.
    Refactor PlayerInfo::Land (#3208)
    
    * Refactor on-land mission checks and fining into own functions
    
     - Mission updates based on landing are now in StepMissions()
     - Planets for which mission clearance has been given (or if infiltrating) will not fine the player
    
    * Track visited waypoints & stopovers
    
     - This enables remembering that a mission gave clearance to a particular planet
     - This enables remembering which systems needed to be visited for a mission
    
    * Remove deprecated government assignment in PlayerInfo::Load
    
     - ships.back()->SetGovernment was added to PlayerInfo::Load() in 0783cd49ea5204bab9f126723a61833d25c5118f
     - Ship::Load() sets the ship's government to be the player's government as of ef41ef02021bd43954ba25631922dae6c928a8a9
     - ApplyChanges() (called at the end of PlayerInfo::Load()) performs ship->SetGovernment for all the player's ships, in case the player's swizzle has been altered in an event
    
    * Use a better format for serializing visited stopovers and waypoints
    
    * Fix bug related to handling of the player's death
    
     - If killed due to an atrocity outfit while landed, the player's ship list needs to be cleared (otherwise the player can simply press 'D' and take off again).
    Added support for special "persons" with multiple ships. The "person" can regenerate all its ships unless you kill the flagship.
    If you quit while in the new pilot conversation, a blank pilot is no longer created.
    Store the flagship's desired crew level and try to recrew when landing (#3089)
    
    * Store the flagship's desired crew level and try to recrew when landing
    
    * Use file-only preference to control flagship rehiring
    
    * Add preference to panel, with clearer name
    
    * Alter setting of desired crew level
    
     - Set the desired crew level upon launching, rather than in HiringPanel
       - Ensures the player does not hire extra crew when landing after changing to a flagship with lower crew capacity.
     - Altered the displayed message as the rehired crew may be due to bunks once used in an automatically accepted mission.
    Convey raid fleet spawn likelihood via Player Info menu (#3087)
    
    * Move raid fleet attraction to PlayerInfo
    
    * Display raid fleet threat in PlayerInfoPanel
    
     - Roughly log-spaced tiers. The displayed number indicates the expected number of raid fleets per jump (if the system has a raid fleet).
     - If any raid fleets are spawned, a message is sent to the screen.
    
    * Display both cargo and strength components, textualize threat level
    
     - Shows each component of raid fleet attraction to the player
     - Gives a categorical rating of the number of raid fleets expected
    
    * Use likelihood of at least one raid as the threat indicator
    Moved the actions that have to be done each time player.New() or player.Load() is called (resetting messages, reverting the game data, and then applying any changes) directly into those functions so they don't have to be called separately. (There was previously a bug where messages didn't reset if New() was called from the main menu.)
    In the fleet list, made it possible to click and drag all the selected ships as a block, instead of having to reorder ships one by one.
    Ship group hotkeys now work in the shops.
    Added support for "special" log entries, containing whatever you know about a particular person, faction, etc.
    Added a "logbook": mission actions can now have "log" entries that automatically get added to the logbook, to remind the player of where they are in the story and what quests they have completed.
    Handle the very unlikely case where a carrier is captured when it still has fighters aboard.
    Cleaned up how the player's destination planet is stored, and added a message telling you if you have any mission destinations in each system you jump to.
    Made it possible for an event to mark a planet as unvisited without making the whole system unvisited.
    Made it possible to assign number keys 0-9 to groups of escorts. (But, it's not possible to command them yet.)
    Made it possible to click escort icons to select them.
    Revert "Made it so that all mission actions can display conversations or dialogs."
    
    This reverts commit 181603905497b28c403864258d4bd2935b0fba90.
    Made it so that all mission actions can display conversations or dialogs.
    Made it so the map zoom level is remembered when you close the map. Also cleaned up some of the map code.
    The player info now remembers what categories are collapsed in the shipyard and outfitter and the corresponding map panels.
    The sale price of ships and outfits now depreciates over time. If you sell "used" outfits to an outfitter, they remain in stock to buy back (at the reduced price) until you leave the planet.
    Added a "disown" button when viewing ship details while landed on a planet, for the rare cases where you want to disown a ship that you are unable to sell.
    Made it so the currently selected commodity or map coloring is remembered in the player info and is carried over to the trading panel if it is a commodity.
    Fixed a crash when a "fail" action removed the next mission after it from the player's mission list.
    The map of outfit locations now also shows what resources you have mined in each system.
    Made it possible for any mission action, including "on enter", to change the player's reputation with a government.
    Fixed placement of planet labels when you first enter your ship.
    In the map detail panel, pressing "jump" now cycles the last jump on your path; Shift + "jump" locks in the last path and adds another, and delete removes one jump.
    Fixed a crash that happened if the player tricked the game into letting them take off in an automaton (by converting it back into one right before taking off).
    Added a relatively simple but robust dynamic trade implementation.
    A job's "on accept" dialog, if any, will now be shown when you accept it.
    Merged wormhole-links with new way of traversing wormholes that avoids links. Created function specifically for drawing wormholes, this way the wormholes can be guaranteed to be drawn under all other links. To appear as a wormhole link on the map, the wormhole *must* have a planet entry.
    Fixed a crash that could occur if missions that failed during take-off due to lack of space tried to display a dialog.
    Fixed some more bugs that can occur when the first ship in your list is unsuitable to be your flagship.
    My previous change to support losiong your ship through boarding combat broke the handling of having your ship die normally. Fixed that.
    Added support for unique "persons" who can show up in any system.
    Added basic support for random missions that get offered when you board a ship.
    Added an "autosave" mission option, that saves an "autosave" file when the mission is accepted. This flag should be set only for missions that are in the main story line and represent a "safe" place to revert to if the player gets stuck or fails a mission.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Did some code cleanup in PlayerInfo, and added a lot more comments, too.
    Added tracking of your "cost basis" for commodities, so the trading panel can display the profit you will earn for selling them.
    Added a new capability for missions: a "blocked" message, which is displayed in a dialog if all other requirements are met but you do not have enough bunks or cargo space free to take on a special mission. Fixes #5.
    Reordering the functions in PlayerInfo and Ship and renaming some of the poorly named ones.
    Code cleanup: always referring to the player's ship as "flagship."
    Added support for "parking" ships (to avoid paying salaries for them), and for renaming ships.
    Cleaned up the AI considerably, especially the logic for when a ship acts independently vs. as an escort. Also made various player commands (depoly, cloak, fight, gather, hold) apply only to ships owned by the player, not all escorts.
    Outfits that you sell (including all outfits of any ship that you sell) now remain available for purchase until you leave the planet. This makes it easy to transfer a jump drive to a new ship for example.
    Added a way for a game event to "unvisit" a system - i.e. remove any knowledge you have of what is there, because it has changed in ways that you have no knowledge of.
    Modified PlayerInfo to have saved games remember if you have "clearance" on the current planet, so that you won't suddenly lose access to a planet's services when you reload.
    Fixed a bug in how handoff of outfits in missions is done, and added a few more Free Worlds missions.
    Modified the map display to show the name of any unexplored system that is a destination of a current or available mission (but no further information).
    Switched to just letting events change the swizzle color of the "Escort" government, instead of setting a special "swizzle" variable in the player info.
    Spell-checked the comments.
    Added a SavedGame class to be used in the load game panel rather than loading the full PlayerInfo for each game that is selected.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Began adding support for "Game Events" that alter the galaxy at a certain point in time. (So far all they do is modify condition flags, to test that they are indeed triggering on the proper day.)
    Added Republic "licenses" for each ship, and added a fine that is assessed if you are scanned by the Republic and are flying an unlicensed ship.
    Added a "swizzle" condition that controls the color of your ships (and that is saved even if it is zero).
    Added proper handling for a dead player (through conversations, combat, or a failed attempt to capture a ship).
    Added some more intro missions.
    Got planetary defense missions working (three different templates for the Core, North, and South).
    Got NPC support working. I've tested NPCs you must "save" or "kill", but a few kinks are left to work out (like having NPCs start at a different location than yours).
    Modified the new mission implementation so that missions can also be offered as soon as you land (e.g. to handle continuation of existing missions), and used that to create a "first contact" conversation that is shown the first time you land on any Quarg world.
    Switched over to the new Mission implementation. There are still some aspects that are not working yet (like, the job board).
    Added a function to PlayerInfo to access the conditions map.
    Updated the Dialog class to allow "accept / decline mission" dialogs.
    Switched to 64-bit values for storing credit amounts (to avoid rolling over if you get 2 billion credits).
    Got audio working on Mac OS X (by just writing my own basic WAV reader, rather than trying to get ALUT working).
    Added tracking of "condition" flags that missions can use to determine whether their requirements are satisfied. Used those flags to ensure that each mission is only offered once. (Eventually, there may be some that are allowed to repeat, though).
    Added special missions to the map and the mission panel.
    Added code to save the player's reputations and apply them to the game data when reloading a saved game.
    Added a Politics class that can handle governments coming to the aid of allies, tracking the player's reputation in response to different actions, etc.
    Added support for basic "special missions," offered in the Spaceport on certain planets.
    Added a player / fleet panel to the player info display. This includes the capability of reordering ships, including changing your flagship.
    Added Player::GetGovernment() so its name doesn't have to be hard-coded in many separate classes.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Fixed several glitches in the handling of missions (duplicates when reloading pilot, not moving passengers into your ship, allowing infinite passengers, formatting / display issues).
    Added mission completion messages and payment (still only for cargo, not passengers).
    Added a "mission panel" that lets you select missions from a job board. It doesn't support scrolling or mouse clicks, yet.
    Added a "Messages" class to allow any thread to safely add a message to the display.
    Got capturing working, at least for your flagship. Other ships can't capture other ships yet.
    Got crews and salaries working (including erratic ship behavior if missing crew).
    Added a CargoHold class to handle everything pertaining to cargo (including determining when you have the capacity for it).
    Fixed a bug in DIalog where it was calling the callback on a copy of the given object instead of the original. Added confirmation dialogs to the delete buttons in the Load Game panel. Also tweaked the starting mortgage.
    Switched to storing cargo in PlayerInfo when landed, then divvying it up among your ships when taking off. This makes it possible to use the cargo capacity of all your ships, and avoids needing to sell cargo when selling ships.
    Modified the "net worth" tracking to include the cost of your ship and cargo.
    Added keyboard shortcuts to the shipyard and outfitter, added a ship naming dialog, and fixed selection of your ships by clicking in the side panel.
    Added GPL statements to all source code files and added a license.txt file.
    Got "New Pilot" working, including visiting the shipyard and picking out an initial ship.
    Added a "New Pilot" dialog (which doesn't yet move you straight to the shipyard, though).
    Added saving of the game (every time you leave a planet, or if you quit while on a planet).
    Added display of the current pilot's information in the main menu.
    Switched to storing shared_ptrs to ships in PlayerInfo, so that if your ship is destroyed it can still remember where it was.
    Added a secondary trigger key for weapons that use up ammo, and a display of ammo remaining for each.
    Uploaded all the files from my local repository to Google Code.
    Parse GameEvents for additional definitions (#4238)
    
    * Parse events for additional defines
    * Simplify deferred definition loading
      - Use const & for `key`
      - Remove need for if-else if chain.
    
    This allows GameEvents to be the sole source of certain game object definitions without generating spurious warning messages.
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Added constructors that call Load() on a data element, so construction and Load() don't have to be done in two separate steps.
    Extend reference-checking in GameData::CheckReferences (#3116)
    
    * Extend reference-checking in GameData::CheckReferences
    
     - Add Name() to Minable & Phrase
     - Add IsDefined() to GameEvent
    
    * Enable reference-checking for GameEvents and Missions
    
    * IsDefined->Name and other feedback
    Support 'visit' & 'visit planet' in events
    
     - Adds ability for a game event to give the player knowledge of a system or planet.
     - Visit actions occur after any 'unvisit' actions in the same event
     - Update the structure of GameEvent::Load
    Made it possible for an event to mark a planet as unvisited without making the whole system unvisited.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added a way for a game event to "unvisit" a system - i.e. remove any knowledge you have of what is there, because it has changed in ways that you have no knowledge of.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Began adding support for "Game Events" that alter the galaxy at a certain point in time. (So far all they do is modify condition flags, to test that they are indeed triggering on the proper day.)
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Added specific named trade goods for each commodity, to be used as mission cargo.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Using float v. double in some cases of -Wdouble-promotion
    
     - Add some <algorithm> headers for uses of std::min or std::max
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Define additional filled colors in interfaces.txt (#3425)
    
    * Define additional filled colors in interfaces.txt
    
     - Further support for modified interfaces / reskinning.
    
    * Added comments to color definitions
    
    * Reflect name change in code too
    Logbook scroll/selection now wraps
    
    Pressing Up while at the top entry will select the bottommost entry.
    Pressing Down while at the bottom entry will select the topmost entry.
    Code cleanup: "static" is redundant inside a C++11 anonymous namespace.
    In the logbook, don't allow moving the selection up if you're already at the top. Also, if you click a different year, select the first month in that year, not the last one.
    Added support for "special" log entries, containing whatever you know about a particular person, faction, etc.
    Added LogbookPanel to the XCode project (and fixed one compile warning).
    Added a "logbook": mission actions can now have "log" entries that automatically get added to the logbook, to remind the player of where they are in the story and what quests they have completed.
    Made it possible to customize the position and size of the ammo, escorts, and message lists in the heads-up display.
    Mission NPCs added to the escort display are drawn with hostile colors as appropriate. (#2725)
    
    * Mission NPCs added to the escort display are drawn with hostile colors
    
    If a mission adds a hostile ship to the escort display so that the player can track its whereabouts, this ship will appear under the player's colors (green) on the radar and in the target reticle.
    
    This commit prevents drawing hostile escorts as assumed friendlies.
    
    * Display escort icon as Radar::HOSTILE color
    
    Also, do not merge it with friendly escort icons.
    
    * Restore colors in radar display
    Use user-defined colors for status overlays and escort attributes
    
    Status overlays (shields, hull, scanning progress) were previously fixed
     - New colors are added to data/interfaces.txt to allow custom colors
    
    Escort attributes (shields, hull, fuel, heat, energy) were previously hard-coded to the default values assigned to the flagship.
     - Colors now reflect the custom values given to the user's flagship's attributes.
     - Existing "overlapping" bar behavior for displaying attributes that differ between like-model escorts is preserved.
    Escort icons are now colored green if selected, yellow if preparing to jump but not ready, and red if unable to jump.
    Made it possible to click escort icons to select them.
    Fixed permissions on three files.
    Escort icons now turn red if you are about to strand them by jumping away when they cannot follow.
    Fixed a bug where escort icons do not fold properly if ships of the same type have different costs.
    color escort icon green if it is ready to jump
    
    When some of your escorts are off screen (particularly on a small monitor) it's
    hard to know when they're all ready to jump. I think this also adds a nice
    feeling of waiting for your escorts to signal that they're ready.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    An initial attempt at getting the escort HUD to "stack" ships so that there's enough space to show them all.
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    The hail panel now properly displays a ship's turret sprites.
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    Support for very large bribes, just in case it ever becomes relevant.
    A species can now be marked as speaking a different, possibly unknown language.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added convenience functions to Planet and Government to simplify the syntax for querying political state. Also fixed a few busgs in my recent Command and AI changes.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Planets no longer allow you to land if you have a negative reputation with their government.
    Made it possible to request assistance from friendly ships and have them repair or refuel you.
    Made it possible to bribe hostile ships to leave you alone. More principled captains will refuse your money, however.
    Added a "hailing" panel, which displays communications with a ship or planet. (But, I have not implemented the actual messages yet.)
    Switched to 64-bit values for storing credit amounts (to avoid rolling over if you get 2 billion credits).
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Added a CargoHold class to handle everything pertaining to cargo (including determining when you have the capacity for it).
    Added GPL statements to all source code files and added a license.txt file.
    Updated how the UI panels are handled to allow the main menu to be called up regardless of what the game state is.
    Uploaded all the files from my local repository to Google Code.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Switched to always using the Color class instead of passing around RGBA float arrays.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    Made the "previous" snapshots update by moving the files, not copying them, so their timestamps will not be changed.
    In the Load / Save panel, snapshots are now sorted by when the file was saved (in user time, not game time).
    Errors are now logged to "errors.txt" in the config directory, in addition to being printed to STDERR.
    Paths with non-ASCII characters should now be working on Windows.
    Moved all file IO into the Files class, so it will be easy to add support for UTF16 paths under Windows.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added Files::Name() for getting the filename from a path (with Unix or Windows separators).
    Added support for plugins, placed either in the "resources" directory or the "config" directory.
    Spell-checked the comments.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Got basic audio support working. I do need to track down better sounds, or at least balance the audio levels better between them.
    Fixed the auto-generated copyright statements in the new "Files" class.
    Added a "Files" class which abstracts out filesystem operations (including finding the resource and config path for each OS). That allows me to remove the boost dependency, which will make porting easier.
    test: Support test case execution, locally and in CICD (#4998)
    
    * Extend CI environment with graphical testframework
    Adds CI workflow for Ubuntu 16.
    Adds minimal code to main.cpp to run hardcoded empty testcase.
    Changes script for headless testing to run hardcoded testcase.
    
    * Fix coding style issue.
    
    * Updated step names to differentiate between tests
    Renamed existing tests to parsetest_*.
    Renamed the new test to autotest_*
    Re-ordered tests so that all parse-tests are together.
    
    * Changed GameData::Progress check to (menuPanels UI)->IsInitialized.
    As based on review-feedback. Using the same pattern as isDone.
    Removed the isReady variable in the anonymous namespace of MenuPanel.
    Also replaced explicit default constructor for UI by implicit constructor.
    Tested:
    - Quit from main menu
    - Exit during flight (by closing window)
    - Ran the automated test
    
    * refactor: move "are we loaded?" from UI to GameData
     - Add "const" accessor GameData::IsLoaded & backing boolean
     - Remove UI->IsInitialized & associated branching
     - Update class comments / method names to distinguish simple accessors & identify future refactoring opportunities
        Audio::Progress -> Audio::GetProgress, as it is already a simple accessor
     - Disable moving/copying the SpriteQueue class, given that it manages threads
    
    * docs: update --help and man entries
    
    * scripts: exit early if not on a supported headless platform
    
    * chore: Update GameLoop params
    Preloaded conversation data, test, or debug mode are not modified.
    
    Co-authored-by: tehhowch <tehhowch@users.noreply.github.com>
    Switched to using the new ImageSet class for batch-loading of sprites. (But still with each frame going into separate textures.)
    Switched to only storing 20 landscapes in memory at once, to avoid using huge amounts of RAM. (With the high-DPI textures, this cuts the maximum memory use down from 1.5 GB to 450 MB.)
    Added support for "@2x" image files to supply double-resolution graphics.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Eliminated SDL_image in order to allow reading images in multiple threads simultaneously.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    feat(layout): Moved the outfitter and shipyard "detail information" into a sidebar (#5233)
    fix(visuals): don't immediately start dragging on click
    
     - no need to draw the sprite / outline under the cursor unless the player is actually dragging
    
    style: add `explicit` to ctors
    style: rename/constify a variable in ShopPanel::Click
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Made it so the "install" keyboard shortcut in the outfitter will only take outfits from cargo.
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    In the shops, made it so when you hover the buy or sell button, the ships that the buy or sell will apply to are highlighted.
    The shop buttons are now highlighted if you hover over them (like all the other buttons in the game).
    Fixed the outfitter's auto-scroll when toggling outfits for sale or in cargo via the "key" buttons. Aslo reverted the behavior for click-and-drag scrolling so it won't clear the current selection.
    Use selected ship/outfit as scroll reference. (#3044)
    
    * Use selected item as reference in ShopPanel.
    
    In the outfitter, when you have an outfit selected and choose a different
    ship it will keep the outfit in the same screen height.
    This is needed because when a new ship is selected it can add or remove
    outfits before the selected outfit, causing the selected outfit to be
    placed in a different position.
    
    It is also able to auto-scroll down and tries to make the image visible.
    
    * Deselect selected item when you click on other areas of the main panel.
    
    This allows you to cancel auto-scroll by clicking somewhere else in the
    main panel.
    
    * Clarify main top and bottom coordinates.
    For flight check tooltips, check for mouse hover right when drawing the flight check icon so there's no need to scan through all the click zones later.
    The "flight checks" now show up as warning icons and only block you if you try to take off with an unusable ship.
    Press R or U in Outfitter to uninstall selected outfit directly to cargo. (#2806)
    
    * Add 'Remove Outfit' shortcut to Outfitter shops
    
    Pressing 'r' will remove the selected outfit into your cargo hold if there is sufficient room.
    Excess ammunition that needed to be removed but cannot fit in the remaining space will be sold.
    
    * Remove -> Uninstall
    
    * Refactor common code, fix logic errors
    
     - Moved code for selecting the ships that will gain/lose the selected outfit from those that are already selected into a separate function.
     - When calculating if the cargo space for ammo exists in CanUninstall, use a copy of the ship's attributes to obtain the exact amount
     - Since b5ecaaec1afc66da8f9c7d430686c73efcd77d94 removed the ability of an outfit to reduce energy generation below zero, rephrased now-invalid explanatory comment.
     - Fix some logic errors in CanUninstall's return paths.
    
    * Replace while loop with exact quantity transfer
    
    * Replace *Uninstall() functions with *Sell(true)
    
     - Add boolean argument to *Sell functions to specify if the outfit is to be moved into cargo space. Default behavior is to sell to Outfitter
     - Uninstall / remove actions transfer the selected outfit (+ammo) into the player's cargo hold, if it has capacity. Any that cannot be held in cargo are sold.
    
    * Additional cleanup
    Made it possible for outfits to require licenses to buy them.
    In the outfitter, you can now toggle whether outfits you do not own are shown, and whether you're buying and selling cargo or ship outfits.
    When min() or max() takes mismatching types as inputs, where possible, switched to specifying the output type directly rather than casting both inputs to match.
    The player info now remembers what categories are collapsed in the shipyard and outfitter and the corresponding map panels.
    Made Panel::Click() able to distinguish double-clicks, so that the info panel can switch to a ship only if it is double-clicked, not just clicked twice in a row.
    Fixed some variables that don't need to be mutable now that Panel::Draw() is not expected to be const.
    The sale price of ships and outfits now depreciates over time. If you sell "used" outfits to an outfitter, they remain in stock to buy back (at the reduced price) until you leave the planet.
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    Tooltips no longer show up if you hover the buttons in the corner of the shop panels.
    Added "tooltips" that pop up to explain ship and outfit attributes in the shop panels and the ship info panel.
    Categories in the shipyard and outfitter are now "collapsable."
    Refactored the shop panels to use the same ClickZone class as the other panels do (but, extended to contain some extra information).
    Add autoscroll to ShopPanel to bring item details into view
    Changed Panel::Drag and Panel::Scroll to take double dx/dy
    
    Fixes endless-sky/endless-sky#805
    Added a helpful explanation message if you cannot sell an outfit, e.g. because it is a generator and you have shield regenerators installed that depend on it for energy.
    Made the multiplier keys no longer apply to the "sell ship" button.
    Added a 500x multiplier (alt / option key), mainly for players with enormous cargo fleets.
    Added the ability to purchase ships in bulk.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added support for reordering ships in your fleet in the shop side panel.
    Added support for selecting and selling multiple ships at once in the shipyard.
    Modified hol the scrolling changes when you click an item in the shop panel, so that that item stays where it is (if possible).
    Modified the shop panel to scroll whatever panel the mouse is hovering over, not where you last clicked.
    For each possible reason that you cannot buy a ship or outift, added an explanatory dialog that appears if you click "buy."
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Added a "swizzle" condition that controls the color of your ships (and that is saved even if it is zero).
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Added keyboard shortcuts to the ShopPanel to use the arrow keys to select items.
    Added a new ShopPanel class that includes all the code that was shared between the Shipyard and Outfitter.
    Added a modifier to the outfitter to buy multiple copies of an outfit at once (if possible).
    Switched the outfitter to only selling outfits available on this planet or that you sold them. That required moving the flight check into the outfitter, so you don't sell your engines on a planet with none for you to buy.
    Added handling of scroll wheel events in the shipyard and outfitter panels.
    Got outfit buying and selling working.
    Added the outfitter UI. You can browse all outfits, but buying is not yet enabled.
    Added GPL statements to all source code files and added a license.txt file.
    Updated how the UI panels are handled to allow the main menu to be called up regardless of what the game state is.
    Uploaded all the files from my local repository to Google Code.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Added a "galaxy" data type for placing the background images in the map panel.
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Added planet and spaceport descriptions for 35 more planets.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    feat(mechanics): Save collections in order by element name (#5333)
    
    * feat(saves): write collections in deterministic order when saving
    
    * refactor: simply methods via capture lambdas
    
     - No need to pass DW instance around
     - use more "using" declarations to simply method declarations
    
    * pr feedback + lambda styling
    
     - applied a more uniform style to lambda expressions
    fix(mechanics): Account for the depreciation grace period in the max age of an outfit or ship (#4914)
    
    * fix: Account for the depreciation grace period in the max age of an outfit or ship
    
    * Missed a spot
    
    * Made depreciation parameters compile-time constants
    Made depreciation happen about 3 times slower (for real this time) and added a 7 day grace period before it begins
    
    Ref: 1d0fe94
    #4372
    Made depreciation happen about 3 times slower so it's less debilitating when you're trying to build up wealth.
    Typo in my previous commit.
    Fixed an out-of-bounds iterator reference in the depreciation code, which is probably what was causing wildly random prices.
    Made sure depreciation properly handles any case where an outfit's age is somehow negative.
    Fixed a bug where the saved game was not storing depreciation for fully depreciated items in stock on the planet.
    Typo fixes (@Bladewood).
    Made it so that non-installable outfits (i.e. harvested materials) do not depreciate.
    The sale price of ships and outfits now depreciates over time. If you sell "used" outfits to an outfitter, they remain in stock to buy back (at the reduced price) until you leave the planet.
    feat: Removed the random chance for the split range of a projectile to trigger
    
    The reason for this being a thing is not listed anywhere, on the wiki or as a comment in this file. Feedback has been to remove it. If we want to readd this in the future, it should be as a weapon attribute, e.g. "split accuracy".
    Use class member function to express intent
    
    Rather than the underlying (albeit simple) code.
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Switching to just using a Weapon pointer in places where that's all that is needed instead of a full Outfit pointer.
    Added a new "Visual" class that represents just the information we need to track for an Effect once it's instantiated. Using it in place of Effect saves a string copy and a good deal of memory for each active visual effect.
    Switched to using a vector for Projectiles and Effects, to reduce memory allocations and improve cache performance.
    Refactored Engine::CalculateStep(), splitting each set of calculations into a separate function to improve clarity and to open a path for possibly multi-threading the most expensive calculations.
    Added two weapon modifiers: "safe," meaning the blast radius only hits hostile ships, and "phasing," meaning the projectile is not blocked by asteroids or other ships.
    Fixing projectile steady state speed
    
    The Wiki describes the steady state of projectiles as being
    acceleration/drag, but it's currently acceleration/drag - acceleration.
    This fixes that by tweaking the order of adding acceleration and scaling
    by drag.
    At homing level 4, missiles no longer "run away" when the target is moving toward them quickly.
    Implemented a much more efficient collision detection algorithm, to speed up large battles.
    Fixed some things that Google's cpplint warns about (mostly, constructors that should be marked explicit).
    Added a common base class for Ships, Projectiles, Asteroids, Effects, Flotsam, StellarObjects, etc. This is the first step in creating a generic collision detection framework that can deal with different object types.
    0.9.2 updates
    Added a "random lifetime" attribute for weapons.
    Weapons with blast radii now affect invisible ships (like the nanobots).
    Homing weapons can now have different tracking modes: better against big ships (optical), against hot ships (infrared) or against ships with no radar jamming.
    Fixed a bug where blast radius was being calculated relative to a projectile's "start" point rather than where it hit its target.
    Added support for projectiles with a "random velocity" added to their base velocity.
    Added projectile "live" effects: effects created while the projectile is "alive" and in flight. This can be used to create trails behind missiles, etc.
    Added support for weapons that split into submunitions when they get close to their target.
    Projectiles will now clear their target if the target is captured by a different government.
    Added safeguards against the AI firing on a ship it is boarding.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Did some significant optimization (at least 2x faster calculation times in big battles) by switching weapon attributes from a string to double map to a fixed set of values accessed by inlined functions, instead.
    Tweaked the handling of sub-munitions. In particular, they are now only created if the projectile does not hit something, and if it does hit something, it does all the damage its submunitions would have done.
    Added a pi.h file defining a PI constant for operating systems that do not have M_PI defined in cmath.
    Added a new torpedo launcher, and updated the projectile sprites for several other weapons.
    Added a "velocity scale" entry for projectile sub-munitions.
    Fixed a possible segfault bug in how I was handling ship explosions.
    Added the capability for ship explosions to damage and move nearby ships.
    Modified effects (weapon impacts, etc.) to take the target's velocity into account so they still look correct if the target is moving.
    Added GPL statements to all source code files and added a license.txt file.
    Modified projectiles hitting ships or missiles to be handled by Engine, rather than by Ship or Projectile itself.
    Fixed blast radii so that they also affect friendly ships, including the ship that fired the weapon in the first place.
    Uploaded all the files from my local repository to Google Code.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Made some changes to support Windows porting, assuming MinGW will be used to provide basic POSIX functionality.
    Added a "Preferences" class to parse the preferences file, and made the load display and auto-aim controlled by preferences. Also added an auto-fire AI option.
    Renamed "ShipName" to "Phrase" since it is also used for random hail messages.
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Added planet and spaceport descriptions for 35 more planets.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    Refactoring: switching to using "!set.count(...)" instead of "set.find(...) == set.end()" because it's more concise, just as efficient, and seems clearer.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    Switched to using 2D "texture arrays" for sprites, so all the frames fit into a single texture.
    Made it so if a ship's sprite is animated, so is the target and flagship outline for it.
    The target outline will now rotate to represent what direction the target is facing in.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added support for target ship outlines to be colored based on friendly / hostile status.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    More help for confused new players.
    User-defined colors & deprecated function (#3431)
    
    * Remove deprecated function declaration
    
     - Function was removed in https://github.com/endless-sky/endless-sky/commit/cdb1cb881d04b246feee03dff4ec0028f34f6327#diff-e0a59618d76b767cb62fa83a9f007c59L295
    
    * Switch to colors in GameData, add some method comments
    
    * Deprecate "close" and "far" colors for "medium" and "dim"
    
    * Show a button for the Find dialog
    
    * Revert "Show a button for the Find dialog"
    
    This reverts commit 14901ad25707f8fd05251d54e45e053a7c3209bd.
    Fixed some things that Google's cpplint warns about (mostly, constructors that should be marked explicit).
    Made it so the map zoom level is remembered when you close the map. Also cleaned up some of the map code.
    Made Panel::Click() able to distinguish double-clicks, so that the info panel can switch to a ship only if it is double-clicked, not just clicked twice in a row.
    Fixed some variables that don't need to be mutable now that Panel::Draw() is not expected to be const.
    Made it so the currently selected commodity or map coloring is remembered in the player info and is carried over to the trading panel if it is a commodity.
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    Selecting a commodity in the map now selects it in the trading panel, if that's where the map was opened from.
    The "ports" map now shows whether each planet has been visited.
    Added a map key to the details ("Ports") map panel.
    Fixed a few things in the map zooming code.
    I think everything is working, testing.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Code regluarization: making sure the PlayerInfo object is always referred to as "player" instead of "info."
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Modified the map's shipyard and outfitter display to color systems based on the number of ships and outfits, and added a pop-up dialog listing what is available.
    Added a "find" dialog to the map panel (accessible by pressing "F").
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Added a way to toggle between the missions map and the system details map.
    Gave the conversation panel an option to pop up a map showing a system highlighted, if the conversation is the introduction to a mission.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Refactored MapPanel and MissionPanel to share the underlying code for drawing the map.
    Added support for passenger-carrying missions.
    Added a "DistanceMap" class that calculates routes and distances between stars, using either the hyperdrive or the jump drive.
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Added GPL statements to all source code files and added a license.txt file.
    Updated how the UI panels are handled to allow the main menu to be called up regardless of what the game state is.
    Added a "color" field for governments, and modified the map panel to allow coloring systems by government.
    Uploaded all the files from my local repository to Google Code.
    feat(mechanics): Spaceport news can now be triggered based on the player's conditions (#5334)
    fix(news): avoid picking empty News items
    Added a "news" system for displaying messages from local inhabitants you meet in the spaceport.
    feat(map): Visited planet map key now includes uninhabited systems with landable objects (#5402)
    feat(map): Ctrl-click a system to preview it without updating the travel plan (#5223)
    
    * Support selecting systems without planning route
    * Updated bracket placement
    * Omitted Brackets
    * refactor: store mod state rather than read it twice
    
    Co-authored-by: mmccarthy10 <mmccarthy10@aurora.edu>
    Co-authored-by: tehhowch <tehhowch@users.noreply.github.com>
    feat: Switch off fast-forward if the player is not in flight (#5148)
    
    This is so that the behavior of fast-forward is consistent between panels (#5038). This also gives the player extra time to react when coming out of a boarding panel or on enter conversation by turning fast-forward off if it was on when entering the panel.
    
    The map panel and player info panel are exceptions to this, as they are panels that are commonly accessed and can be accessed at any time while in flight.
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Using float v. double in some cases of -Wdouble-promotion
    
     - Add some <algorithm> headers for uses of std::min or std::max
    Made it so that when the map automatically shifts to center on a selected system, the motion animates rather than happening instantly.
    Number formatting is now limited to one decimal place, which is enough for all current attributes. Also added a separate formatting function for numbers of credits.
    Government names for systems that have not been visited or that are "Uninhabited" no longer show up in the map key.
    prevent jumpy zoom in
    Made the escort tooltips aligned left instead of centered, and adjusted the code a bit.
    Display a map tooltip for escorts in a given system (#3587)
    
    * Basic Hover() support
    
    * Basic tooltip display
    
    * Tooltip displays active and parked escort counts
    
     - Tooltip shifts to remain on-screen if near screen edges
     - Special tooltip message for hovering over a system with just the flagship in it
    
    * Rework tooltip trigger to activate after 1s of dwell time
    
     - hoverSystem is guaranteed to be in escortSystems
     - Set the hover criteria on mouse move (i.e. the hover event)
     - Track dwelling time every step (i.e. the mouse doesn't have to keep moving)
     - Eliminate unused code / checks.
    Update the map cache when selecting a new outfit or ship.
    Caching the map layout so it doesn't need to be re-calculated every frame. This makes map drawing use about 25% less CPU time.
    Fixed map search centering at non-default zoom. (#3708)
    
    * Fixed map search centering at non-default zoom.
    
    * Made map centering after search and mission selection more consistent.
    Show location of player escorts on the map (#3576)
    
    * Identify escort systems with a center dot
    
     - Inside the system ring, show a grey dot if there are player-owned escorts in that system
     - Does not apply to the player's system
    
    * Use preference to control displaying the pip
    
    * Differentiate parked and unparked escorts via pip brightness
    
     - Also, show the pip for the flagship system (to help teach what the pip means).
    
    * Default display of escort system pips to "on"
    Add gl_header include for uses of glClear
    Simplifying the wormhole-drawing code.
    Refactor MapPanel's Draw___ methods (#3379)
    
    * Refactor MapPanel's Draw___ methods
    
     - Improve mod coloring support via expanded use of interfaces.txt:
       - Switch the minimap from a hardcoded position to an Interface
       - Use travel plan colors from interfaces.txt
       - Use System name, link colors from interfaces.txt
     - Move the increment of `step` from MissionPanel to the base MapPanel
     - Add comments to DrawMiniMap, DrawTravelPlan, and DrawWormholes
     - Used and updated MapPanel constants
     - Draw the Travel Plan after wormholes, since wormholes by default have non-zero alpha.
       - This removes the small, dark purple centerline from drawn travel plan routes that use wormholes
     - Adds function to Planet class to export all systems in which it can be found
     - Do not show the "planet description" box if the planet in question is a wormhole.
     - Change DrawWormholes iteration scheme from "every StellarObject in every System" to "check only planets"
       - Fixes bug in DrawWormholes caused when two wormholes reference the same system (i.e. Cardea), which cause the wormhole link to be drawn over a previous directional arrow
    
    * Move the mini-map position specifier into the "hud" interface
    Made it so that wormhole links are only drawn if the planet has a description. (This makes it possible to create wormholes that NPCs land on but that don't have links drawn.)
    Update allowed travel plan creation conditions (#2938)
    
    * Update allowed travel plan creation conditions
    
     - Remove incorrect MapPanel error message when the player's flagship has no hyperdrive/jump drive installed.
     - Wormhole-only travel plan creation is possible for the player when no hyperdrive/jump drive is installed.
    
    * HasSeen->HasVisited, to prevent incorrect errors
    
    * Alls ship without hyperspace ability can plot wormhole-only travel plans
    
    Rather than check that DistanceMap was initialized for the player, check
    if the calling ship's system has a wormhole available.
    
    * Create strings only once
    enhancement: Visual feedback for outfit transfer missions while in-flight (#3075)
    
    * Remove deprecated declaration
    
     - 'SetDefaultPayment' was removed in f9d82bd3e1a3f0bbe0b5346a20f30bb09795393c
    
    * Provide visual feedback of ready-to-complete missions with gifts
    
     - Update the MapPanel::IsSatisfied function to use a new Mission::IsSatisfied function that checks whether or not the mission's requirements for completion are met.
     - Restore the "are required gifts in present ships cargo?" check, with guards that prevent counting cargo that is out-of-system (e.g. would not be present if the player landed immediately).
    
    * Simplify return expression
    Fail missions if mission cargo/passengers are stolen from the player
    
     - While in-flight, any failed missions are no longer colored as though they are able to be completed.
    Fix travel plan drawing error when no suitable flagship exists.
    Made it so systems that are "inhabited" but have no spaceports in them show up as uninhabited when the map is colored by reputation.
    Sorting out the distinction between System::IsInhabited() and ::HasFuelFor().
    When drawing wormholes in the travel plan, also check that this particular wormhole segment is known.
    Only show known wormhole links in the travel plan.
    Refactoring to avoid any places in the code that make assumptions about how much fuel is used by various jump modes.
    Made System's list of links and neighbors a set instead of a vector, to simplify adding and removing items and checking if a given system is in the set.
    DistanceMap now takes total fuel cost into account (hyperdrive vs. scram drive) instead of assuming jump cost is always twice the hyperspace cost.
    Made it so certain planets will only show up as something you can land on if your ship has certain attributes.
    For multi-stop wormholes, only display a wormhole path if both endpoint systems have been visited.
    Switched from Planet::GetSystem() to Planet::IsInSystem() wherever possible, to support wormholes (which exist in more than one system).
    Fixed the map panel centering when the zoom level is not 100% to start out with.
    Made it so the map zoom level is remembered when you close the map. Also cleaned up some of the map code.
    Made Panel::Click() able to distinguish double-clicks, so that the info panel can switch to a ship only if it is double-clicked, not just clicked twice in a row.
    Fixed some variables that don't need to be mutable now that Panel::Draw() is not expected to be const.
    If you bring up the map while entering hyperspace, your current jump trajectory will now be "locked" in place.
    Made sure the "fog" in the map is redrawn each time you open the map panel, in case you bought a map or explored new territory since the last time you opened it.
    Added a missing #include for isnan().
    The outfitter map will now correctly show the presence of minables even in uninhabited systems.
    Made it so the currently selected commodity or map coloring is remembered in the player info and is carried over to the trading panel if it is a commodity.
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    Added "fog of war" obscuring parts of the map backdrop that are not yet visited.
    Made wormholes not count when determining whether all planets in a star system have been visited.
    fix flagship system target sticking on map
    
    Engine.cpp sets the travel plan to the flagship's target if there isn't one so you couldn't truly clear your travel plan
    
    clearing the travel plan in MapPanel::Select now clears the flagship target system as well
    0.9.2 updates
    Made the active mission pointers a bit bigger and the blocked mission pointers a bit darker to better differentiate between them.
    Fixed a bug where selecting "Food" in the map didn't result in it being selected in the Trade panel.
    Moved the "mini map" code into MapPanel, and added pointers for missions and waypoints.
    THe map coloring of "dominated" systems now properly handles planets that have no spaceport but can be dominated.
    As an experiment, added  pop-up map that shows where you're going each time you jump. (If people play with it and don't find it useful, it'll be easy to take out again.)
    Fixed two places where spaces had been added in place of tabs.
    In the map detail panel, pressing "jump" now cycles the last jump on your path; Shift + "jump" locks in the last path and adds another, and delete removes one jump.
    Made the trade map grey out systems that don't trade a particular commodity.
    The find function in the map panels now prefers names that start with the given string.
    Changed Panel::Drag and Panel::Scroll to take double dx/dy
    
    Fixes endless-sky/endless-sky#805
    Systems with "uninhabited" worlds with spaceports no longer show up as dominated in the map.
    Added a find function to the maps of where ships and outfits are sold.
    Added a missing #include in System.cpp. Also made the neighbor distance constant public so it can be referred to by the map.
    Merged the functionality of BlurShader into SpriteShader, and DotShader into RingShader.
    Fixed a hang that happens if you shift-click an unreachable system.
    Selecting a commodity in the map now selects it in the trading panel, if that's where the map was opened from.
    A system now shows up as dominated only if every inhabited planet in the system has been dominated. If some planets have been dominated, it shows up as friendly even if its government is hostile, to show that there is a friendly port there where you can refuel.
    Added support for "stopover" planets specified by a mission.
    It's now possible to specify deadlines in (base + multiplier * jumps) form.
    The "ports" map now shows whether each planet has been visited.
    Fixed two places where the zoom factor was not taken into account in the map.
    Allowing shift + click to set a travel path back to where you started.
    Fixed a bug where visiting wormholes was not remembered, and also where wormhole arrows could be drawn under the route.
    Added a map key to the details ("Ports") map panel.
    Fixed some pathfinding issues with wormholes with more than two exits.
    Meant break, not continue.
    Code simplified slightly.
    Merged wormhole-links with new way of traversing wormholes that avoids links. Created function specifically for drawing wormholes, this way the wormholes can be guaranteed to be drawn under all other links. To appear as a wormhole link on the map, the wormhole *must* have a planet entry.
    Added support for wormhole travel in pathfinding (including stranded escorts).
    The map can now be zoomed with the scroll wheel in addition to with buttons / keys.
    Fixed a few things in the map zooming code.
    System names now are positioned correctly at all zoom levels.
    Fixed click distances, zoom buttons now disable when at min or max zoom.
    I think everything is working, testing.
    Fixeed a bug in my previous change to the route selection.
    Clicking the system you are in will now clear your jump route (unless it's a shift-click).
    Fixed a crash in the map panel if the player has no flagship.
    In the display of how far your fleet can reach, added support for ships with both jump drives and hyperdrives, and for fighters.
    bug fix for fleet fuel length off by one
    one more color tweak
    tweak colors
    fix bug counting parked ships
    add blue-line for fleet fuel range, yellow-line for flagship fuel range, and red-line for out of flagship fuel range
    correct tabbing one last time
    correct spaces to be tabs
    correct spacing?
    Change the travel plan draw color to a more orange-ish color when distance exceeds jumps remaining
    Switched the Escape key to closing dialogs, like people expect it to, instead of always going to the main menu.
    Unexplored systems are now a dimmer grey than known uninhabited systems.
    Added support for planetary domination. (But, it won't do anything until defense fleets have been set for each planet.)
    Missions that are waiting on an NPC condition or visiting a waypoint are now "greyed out" in the mission list as well as in the pointers.
    Made the mission pointer colors customizable in the data files, to allow experimenting with other color schemes.
    "Dimming out" the mission pointer for missions that have unmet NPC conditions or waypoints (to make it clear that you cannot complete them yet).
    Modified the map panel to not show your entire "travel plan" if the end of it has become impossible due to changes to the links between systems.
    Fixed a divide-by-zero error in the "rush delivery" pointer blinking.
    Added two new map views, showing all ships and outfits that you know can be bought, and where they are sold.
    Made mission pointers blink for missions with deadlines, to draw your attention to them as a priority.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Removed superfluous std:: prefixes.
    Modified the pathfinding when using the jump drive so that you don't have to have explored either endpoint, as long as you know it's there.
    Code cleanup: always referring to the player's ship as "flagship."
    Mission dialogs now allow you to bring up a map, the same as conversation panels. Also made the arrow marking the destination system larger, so it stands out on the map.
    Added the ability to shift-click to add to your travel plan instead of replacing it.
    Added convenience functions to Planet and Government to simplify the syntax for querying political state. Also fixed a few busgs in my recent Command and AI changes.
    Modified the map display to show "friendly" systems that will not allow you to land in yellow, so you do not plan on refueling there.
    Modified the map's shipyard and outfitter display to color systems based on the number of ships and outfits, and added a pop-up dialog listing what is available.
    Fixed a bug due to a wrong system name in some missions.
    Modified the map display to show the name of any unexplored system that is a destination of a current or available mission (but no further information).
    Added a message that pops up in the map if you have a system selected with no known route to it (to explain why no path is selected).
    Added a "waypoint" mission tag that can be used to mark any number of systems that you must visit (but not requiring that you land on any planets in those systems).
    Added a "find" dialog to the map panel (accessible by pressing "F").
    Spell-checked the comments.
    Added a "galaxy" data type for placing the background images in the map panel.
    Got "invisible" missions working: being accepted automatically, and not showing up in any mission lists or displays.
    Switched over to the new Mission implementation. There are still some aspects that are not working yet (like, the job board).
    Switched System::GetGovernment() to returning a pointer instead of a reference, to match how I refer to GameData objects everywhere else.
    Adjusted the colors used for displaying reputation in the map.
    Made the friendly / hostile map use different shades of blue and red depending on how bad your reputation is with a given government.
    Fixed a few glitches in the mission panel: selecting invisible systems, and the map shifting when you accept a mission.
    Gave the conversation panel an option to pop up a map showing a system highlighted, if the conversation is the introduction to a mission.
    Added special missions to the map and the mission panel.
    Added a Politics class that can handle governments coming to the aid of allies, tracking the player's reputation in response to different actions, etc.
    Added Player::GetGovernment() so its name doesn't have to be hard-coded in many separate classes.
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Fixed several glitches in the handling of missions (duplicates when reloading pilot, not moving passengers into your ship, allowing infinite passengers, formatting / display issues).
    Refactored MapPanel and MissionPanel to share the underlying code for drawing the map.
    Added support for passenger-carrying missions.
    Simplified DistanceMap: it does not need a set of all systems, since a map can be generated branching out from a single given system.
    Added a "DistanceMap" class that calculates routes and distances between stars, using either the hyperdrive or the jump drive.
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Added a "done" button to the map panel, and also tweaked the commodity gradient to something a bit prettier and cleaned up the galaxy image.
    Switched the map to a yellow / blue gradient instead of red / blue because red could be mistaken as a "hostile star system."
    Fixed a bug in Map where pathfinding would include links between two seen but unvisited systems.
    Added an option to toggle fullscreen mode. It's still a little buggy on Linux.
    Fixed a few bugs in the orbit display in the map view.
    Switched to always using the Color class instead of passing around RGBA float arrays.
    Added GPL statements to all source code files and added a license.txt file.
    Added a "New Pilot" dialog (which doesn't yet move you straight to the shipyard, though).
    Updated how the UI panels are handled to allow the main menu to be called up regardless of what the game state is.
    Got the code to build without warnings when -Wall is defined.
    Set the government for every system. Also updated the map panel to not show information or hyperspace routes for unvisited systems.
    Added a "color" field for governments, and modified the map panel to allow coloring systems by government.
    Modified the map display to allow coloring systems based on whether they provide shipyards or outfitters.
    Added some spaceport descriptions. Also switched the map to coloring "uninhabited" systems grey.
    Uploaded all the files from my local repository to Google Code.
    style: Remove unexpected trailing whitespace
    
    The only trailing whitespace should be "continuation tabs"
    feat: Implement maintenance and operating cost attributes  (#4596)
    
    * Added a maintenance cost outfit attribute
    
    * Maintenance costs will now show in the bank panel
    
    * Allow overdue maintenance to be paid off
    
    * Properly size the max rows if you have overdue charges but no crew or maintenance
    
    * Simplified output
    
    * Added an operating costs attributes
    
    * Overdue maintenance costs now impact credit score
    
    * Pay maintenance costs after crew salaries
    
    * Include the maintenance costs of in cargo outfits
    
    * Comment correction
    
    * Clean up
    
    * Code simplification
    
    * Check for > 0 credits instead of non-zero credits for the two crazy people who give themselves negative credits
    
    * Check in cargo outfits when landed and prevent net negative maintenance costs
    
    * Prevent negative costs for each ship and each outfit in cargo instead of preventing a total net negative.
    Switched to a more readable way of querying the player's debt amounts.
    Create player conditions for mortgages, fines, back pay, and credit score (#3164)
    
    * Add summary methods to Account and update Account-based autoconditions
    
     - Return a count of mortgages and fines in the account.
     - Return the total owed, broken into mortgages and fines.
    
    Update account-based autoconditions
    
     New conditions for
      - # of active mortgages
      - # of active fines
      - value of active mortgages
      - value of active fines
      - value of unpaid salaries
      - player's credit score
    
    * Remove autoconditions of the number of fines/mortgages
     - The total amount is a much more useful metric than the number of each
    Back salaries are now shown in the bank and taken into account when calculating net worth.
    Removed death benefits. Depreciation is a better way of balancing ship capture, and death benefits make it less profitable to fight stronger ships than to pick on easy targets, which is backwards.
    Starting to go through the code to add more comments and refactor things that are unclear or could cause errors down the road.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added "bonus" payments that must be made to your crew if your ship has more than one crew member and you plunder or capture an enemy ship. This is to make plundering less ridiculously lucrative.
    Switched to 64-bit values for storing credit amounts (to avoid rolling over if you get 2 billion credits).
    Updated all the functions that save data to use the new DataWriter class (to ensure proper indentation, quoting, etc.).
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Got crews and salaries working (including erratic ship behavior if missing crew).
    Modified the "net worth" tracking to include the cost of your ship and cargo.
    Added GPL statements to all source code files and added a license.txt file.
    Added saving of the game (every time you leave a planet, or if you quit while on a planet).
    Got the code to build without warnings when -Wall is defined.
    Uploaded all the files from my local repository to Google Code.
    feat(phrases): Support nested phrase interpolation via ${phrase name} syntax (#4538)
    
    * Add phrase expansion and replacement functions to the phrase node.
    
    Example use:
    ```
    phrase "something"
      word
        `Hello you! Do you listen to "${band}"?`
        "Hello there, I'm ${pirate} and I'm here to steal your ship!"
      replace
        "llo" "y"
        "Hey there," "Surprise!"
    ```
    
    Here, "pirate" is the name of a Phrase that will be invoked and substituted into the rest of the text.
    Additionally, the output will be reprocessed to replace all occurrences of "llo" with a "y", and then to replace all occurrences of "Hey there," with "Surprise!".
    
    * style: Fix typos, reorder to match declaration, update comments
      - Remove unneeded "friend" declaration (since Sentence never modifies Phrase)
    
    * feat: Add a forwarding constructor for Sentence
      - Remove "contains" indirection by privately extending vector
      - Add removal of and warning about wholly-empty Sentences
    
    * feat: Use a once-through, in-place "replace all" method
      - avoids reallocations of `result` and the target->result initial copy
    
    * fix: Place some restrictions on phrase names
      - The game cannot determine which phrases actually exist until loading is completed, so ambiguities in parsing phrase names cannot be resolved when loading `word` choices.
    (An alternative would be to perform the parsing of `word` child nodes in a new `Phrase::FinishLoading` method.)
    
    * refactor: Reimplement "Option" as "Choice"
      - privately extend vector with "Option" signature
      - provide constructor for use with `emplace`
    
    * fix: Explicitly allow creation of an empty Choice
    
    e.g.
    ```
    word
      ""
    ```
    
    These can be used to pad "fluff" parts of a sentence, so only sometimes the extra information is added.
    
    * refactor: Move ReplaceAll to Format, store replacement pair
      - No other replacement strategies are supported, so store only the arguments
    
    
    Co-authored-by: tehhowch <tehhowch@users.noreply.github.com>
    Number formatting is now limited to one decimal place, which is enough for all current attributes. Also added a separate formatting function for numbers of credits.
    Moved all ratings scales into a common "rating" data type to simplify the code for handling them. Also made it so the same rating level is shown in the text and the numbers for pirate raids, so the text changes at the same time as the number does.
    Added a helper function for the common task of splitting a string into paragraphs.
    When you are not landed, the ship info panel will now allow you to jettison cargo. Also, the boarding panel now lets you call up the info panel.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Made it possible to enter numbers like "800K" or "4.38m" in the bank panel.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Moved the wildcard replacing code from ConversationPanel into Format so that other classes can share it.
    Added two new classes, Format (for formatting numbers) and Table (for formatting tables).
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    feat(phrases): Support nested phrase interpolation via ${phrase name} syntax (#4538)
    
    * Add phrase expansion and replacement functions to the phrase node.
    
    Example use:
    ```
    phrase "something"
      word
        `Hello you! Do you listen to "${band}"?`
        "Hello there, I'm ${pirate} and I'm here to steal your ship!"
      replace
        "llo" "y"
        "Hey there," "Surprise!"
    ```
    
    Here, "pirate" is the name of a Phrase that will be invoked and substituted into the rest of the text.
    Additionally, the output will be reprocessed to replace all occurrences of "llo" with a "y", and then to replace all occurrences of "Hey there," with "Surprise!".
    
    * style: Fix typos, reorder to match declaration, update comments
      - Remove unneeded "friend" declaration (since Sentence never modifies Phrase)
    
    * feat: Add a forwarding constructor for Sentence
      - Remove "contains" indirection by privately extending vector
      - Add removal of and warning about wholly-empty Sentences
    
    * feat: Use a once-through, in-place "replace all" method
      - avoids reallocations of `result` and the target->result initial copy
    
    * fix: Place some restrictions on phrase names
      - The game cannot determine which phrases actually exist until loading is completed, so ambiguities in parsing phrase names cannot be resolved when loading `word` choices.
    (An alternative would be to perform the parsing of `word` child nodes in a new `Phrase::FinishLoading` method.)
    
    * refactor: Reimplement "Option" as "Choice"
      - privately extend vector with "Option" signature
      - provide constructor for use with `emplace`
    
    * fix: Explicitly allow creation of an empty Choice
    
    e.g.
    ```
    word
      ""
    ```
    
    These can be used to pad "fluff" parts of a sentence, so only sometimes the extra information is added.
    
    * refactor: Move ReplaceAll to Format, store replacement pair
      - No other replacement strategies are supported, so store only the arguments
    
    
    Co-authored-by: tehhowch <tehhowch@users.noreply.github.com>
    Fixed minor code style issues (#4428)
    Number formatting is now limited to one decimal place, which is enough for all current attributes. Also added a separate formatting function for numbers of credits.
    Always put a digit to left of the decimal separator. (#3613)
    
    * Always put a digit to left of the decimal separator.
    
    Show 0.7 instead of .7.
    Natural languages always have at least 1 digit to the left
    of the decimal separator; unlike some computer languages like C/C++.
    Fix issue #3611
    
    * Fix coding style.
    Potential error fixes from @AskePit.
    Moved all ratings scales into a common "rating" data type to simplify the code for handling them. Also made it so the same rating level is shown in the text and the numbers for pirate raids, so the text changes at the same time as the number does.
    A few other small code cleanup changes.
    Added a helper function for the common task of splitting a string into paragraphs.
    Numbers very close to 1B will now either round up to 1.000B, or down to 999.99M, never to 1000.00M.
    Capitalization now correctly handles parentheses and other punctuation.
    When you are not landed, the ship info panel will now allow you to jettison cargo. Also, the boarding panel now lets you call up the info panel.
    Convert spaces to tabs and fix spelling error
    Add comma delimiter between thousands in formated number output
    Moved all the source code files into a "source" folder to clean up the root folder.
    Made it possible to enter numbers like "800K" or "4.38m" in the bank panel.
    Moved the wildcard replacing code from ConversationPanel into Format so that other classes can share it.
    Added two new classes, Format (for formatting numbers) and Table (for formatting tables).
    Unify refueling and routing code (#3123)
    
    * Unify refueling and routing code
    
     - Extends advanced refueling logic to ships moving independently & following orders
     - Extends advanced refueling logic to in-system escorts
     - Chooses the best route for a ship to reach its destination system
    
    * Ships without fuel capacity should not refuel
    
    * Update ShouldRefuel logic
    
     - Implement DistanceMap::End() function, to obtain the desired destination system for a given DistanceMap
     - If no fuel depot systems are on the route between the ship and its destination system, do not refuel unless necessary.
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Enhancement: Consider next refuel stop when traveling to parent ship's system (#2997)
    
    * Convenience function to know if a planet has fuel for a ship
    
    * Consider the next refuel system when an escort is traveling to the parent.
    
    An escort was only checking if it had enough fuel to reach the next
    system, so it could get stuck when it had to travel through two
    consecutive systems where it couldn't refuel.
    
    Now it checks how much fuel is required to reach the next refuel system
    on the travel route to decide if it should refuel in the current system.
    
    * Clarify code and stop checking when we go over fuel capacity
    
    * Clarify comment.
    
    * Rework required fuel check.
    
    DistanceMap is already tallying fuel so choose the best route.
    DistanceMap now takes total fuel cost into account (hyperdrive vs. scram drive) instead of assuming jump cost is always twice the hyperspace cost.
    Fixed some things that Google's cpplint warns about (mostly, constructors that should be marked explicit).
    Map pathfinding now prefers less "dangerous" systems if multiple routes exist with the same fuel cost and number of jumps.
    Fixed some pathfinding issues with wormholes with more than two exits.
    Added support for wormhole travel in pathfinding (including stranded escorts).
    Moved all the source code files into a "source" folder to clean up the root folder.
    Modified the pathfinding when using the jump drive so that you don't have to have explored either endpoint, as long as you know it's there.
    Various small fixes to things I found during testing.
    Fixed a few bugs in my reimplementation of DistanceMap.
    Switched DistanceMap to using a full implementation of Dijkstra's algorithm (for the rare case where a ship has both a jump drive and a hyperdrive).
    Switched DistanceMap to use one generic Init() function instead of five separate ones, and also to be able to handle ships with a jump drive and a hyperdrive.
    Added the ability to shift-click to add to your travel plan instead of replacing it.
    Spell-checked the comments.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Rather than cheating and traveling directly to the system its parent is in, the escort AI now uses proper pathfinding, and also refuels if necessary along the way.
    Added support for job "templates" in the mission data. To start out with, added a variety of passenger missions, some of which only happen if you are on certain kinds of planets.
    Added a map outfit that is equivalent to "visiting" the twelve nearest systems.
    Fixed a bug where pathfinding could take a route between two unvisited systems if it was at least as short as the shortest "known" route.
    Simplified DistanceMap: it does not need a set of all systems, since a map can be generated branching out from a single given system.
    Added a "DistanceMap" class that calculates routes and distances between stars, using either the hyperdrive or the jump drive.
    fix(mortgages): avoid floating point exceptions for user-supplied mortgage terms
    
     - terms of 0 -> term 1
     - hedge Mortgage::Payment on zero-term payments
     - add missing default initialization for term, principal, and interest
     - more uses of `lround` over `round`
    
    closes endless-sky#5268
    Added constructors that call Load() on a data element, so construction and Load() don't have to be done in two separate steps.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Switched to 64-bit values for storing credit amounts (to avoid rolling over if you get 2 billion credits).
    Updated the mortgage application code to take into account your current mortgage payments due.
    Updated all the functions that save data to use the new DataWriter class (to ensure proper indentation, quoting, etc.).
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Added GPL statements to all source code files and added a license.txt file.
    Added saving of the game (every time you leave a planet, or if you quit while on a planet).
    Uploaded all the files from my local repository to Google Code.
    feat: Switch off fast-forward if the player is not in flight (#5148)
    
    This is so that the behavior of fast-forward is consistent between panels (#5038). This also gives the player extra time to react when coming out of a boarding panel or on enter conversation by turning fast-forward off if it was on when entering the panel.
    
    The map panel and player info panel are exceptions to this, as they are panels that are commonly accessed and can be accessed at any time while in flight.
    fix: Add missing string include.
    
    closes endless-sky#5075
    Specify whether KeyDown event was a repeat or not
    
     - Cast the `repeat` Uint8 field of SDL_KeyboardEvent to bool
       https://wiki.libsdl.org/SDL_KeyboardEvent
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Added a help message explaining how to set which escort is your flagship that is shown in the player info panel, the outfitter, or the shipyard the first time the player has multiple ships in their fleet.
    Fixed some things that Google's cpplint warns about (mostly, constructors that should be marked explicit).
    Made Panel::Click() able to distinguish double-clicks, so that the info panel can switch to a ship only if it is double-clicked, not just clicked twice in a row.
    Fixed a bug in the preferences panel where clicking "Back to Menu" while editing a key binding was interpreted as changing that key binding to "B".
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    Changed Panel::Drag and Panel::Scroll to take double dx/dy
    
    Fixes endless-sky/endless-sky#805
    Switched the Escape key to closing dialogs, like people expect it to, instead of always going to the main menu.
    Added a 500x multiplier (alt / option key), mainly for players with enormous cargo fleets.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added support for reordering ships in your fleet in the shop side panel.
    Replaced the "Key" class with a "Command" class that makes the syntax for keyboard mappings less ugly (and paves the way for eliminating the Controllable class, too.)
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Modified the new mission implementation so that missions can also be offered as soon as you land (e.g. to handle continuation of existing missions), and used that to create a "first contact" conversation that is shown the first time you land on any Quarg world.
    Modified the darkened "backdrop" for dialogs so that it is only drawn for the topmost panel, so that if multiple dialogs are up it does not completely blacken the screen behind them.
    Added a DrawBackdrop() function to Panel so that individual panels don't have to duplicate that functionality.
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Added handling of scroll wheel events in the shipyard and outfitter panels.
    Added GPL statements to all source code files and added a license.txt file.
    Added a "New Pilot" dialog (which doesn't yet move you straight to the shipyard, though).
    Updated how the UI panels are handled to allow the main menu to be called up regardless of what the game state is.
    Added a preferences panel for customizing the key controls. (They are not yet used, though.)
    Uploaded all the files from my local repository to Google Code.
    fix: Illegal stealth missions can no longer be fined for multiple times (#4526)
    
    feat: Fines for illegal mission cargo are now added together instead of only the worst being applied.
    feat: You are now told about how many missions you failed for being scanned.
    Made it so pirates won't steal passengers when plundering. Also cleaned up and simplified the CargoHold transfer code.
    Renaming GetOutfitOrder() to something a bit clearer, and hiding the function in the .cpp file since no other class needs to know about it.
    Transfer outfits in reverse size order (#2757)
    
    * Transfer outfits in reverse size order
    
    * Remove unneeded sort comparison
    The sale price of ships and outfits now depreciates over time. If you sell "used" outfits to an outfitter, they remain in stock to buy back (at the reduced price) until you leave the planet.
    Continuing to work on code cleanup and commenting.
    Fixed a bug where if a ship had zero cargo space, it was treated as infinite space. Also fixed a cargo display bug where some lines showed "0 T" of cargo.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added support for illegal cargo and outfit checks when you are scanned or when you land on a planet.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Added tracking of "condition" flags that missions can use to determine whether their requirements are satisfied. Used those flags to ensure that each mission is only offered once. (Eventually, there may be some that are allowed to repeat, though).
    Added support for basic "special missions," offered in the Spaceport on certain planets.
    Updated all the functions that save data to use the new DataWriter class (to ensure proper indentation, quoting, etc.).
    Big refactoring: made GameData a singleton so references to it don't have to be passed around between all the classes.
    Fixed several glitches in the handling of missions (duplicates when reloading pilot, not moving passengers into your ship, allowing infinite passengers, formatting / display issues).
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Added support for passenger-carrying missions.
    Got CargoHold to support mission-specific cargo.
    Modified the planet panel to always let you sell (or install) outfits if you have them as cargo.
    Added a line to the trading panel showing if some cargo space is taken up by plundered outfits.
    Added a CargoHold class to handle everything pertaining to cargo (including determining when you have the capacity for it).
    Fixed minor code style issues (#4428)
    Cap projectile velocities to 450000
    
     - Including when fired from very fast ships, or through accelerating submunitions, etc.
     - Prints a one-time (per session) warning about the speed violation
    Cast pre-multiplication & increase variable size
    
    else computed results may overflow available bits resulting in UB.
    
     - Defer to `auto` for results of bitwise &
       - `(int)A & (uint)B` will be unsigned int/long per usual arithmetic conversions, and positive even for A < 0
     - Change from `int` to `unsigned` where negative values would result in unexpected behavior
     - When checking multiple grid cells only `diff` may be negative, so only `diff` need be signed
    Switched to using CollisionSet for asteroids and minables, and cleaned up some of the code related to them.
    Added a new CollisionSet function that checks collisions along a line defined by a start and end instead of by a Projectile object.
    Switched back to using generic Body in CollisionSet, rather than Ship.
    Since CollisionSet is only used with Ships right now, switched it to using Ship pointers instead of generic Body pointers.
    Include <cstdlib> for abs()
    Fixed a bug that was keeping the "Sad Archie" timer ship from triggering.
    Added the header for partial_sum.
    Implemented a much more efficient collision detection algorithm, to speed up large battles.
    fix: avoid out-of-order initialization
    feat(mechanics): Basic support for custom hardpoint angles, non-converging weapons (#4801)
    
    * Add gun-port angles and convergence setting.
    Allows content-creators to create ships with non-forward facing gun-ports.
    Also allows content-creators to set convergence for guns.
    
    * Allow some weapons to be non-parallel / non-converged.
    * Update source/Armament.cpp
    Simplify the code by providing booleans directly to hardpoints.emplace. (As suggested by Amazinite and tehhowch.)
    
    * Process review comments
    * Processed review comments
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    Adding back in one defensive check and fixing some formatting.
    Added a new "Visual" class that represents just the information we need to track for an Effect once it's instantiated. Using it in place of Effect saves a string copy and a good deal of memory for each active visual effect.
    Switched to using a vector for Projectiles and Effects, to reduce memory allocations and improve cache performance.
    Fixed daily weapon reloads also resetting turret angles.
    In "focused fire" mode, turrets now face forward if no targets are present (e.g. for mining asteroids). That mode is now the default.
    Added support for independent turret tracking (and, limited turret turn rates) for everything but anti-missiles.
    Starting to go through the code to add more comments and refactor things that are unclear or could cause errors down the road.
    Remove some -Wuseless-cast warnings
    Switched to using 2D "texture arrays" for sprites, so all the frames fit into a single texture.
    Added a "tactical scanner" that shows additional information about your target.
    Made it so if a ship's sprite is animated, so is the target and flagship outline for it.
    Refactoring: switching to using "!set.count(...)" instead of "set.find(...) == set.end()" because it's more concise, just as efficient, and seems clearer.
    Code cleanup.
    The target outline will now rotate to represent what direction the target is facing in.
    Took out the need for Information and Interface to know about Radar (replacing it with generic named points, to be handled separately, instead).
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added new syntax to the interface definitions: "!condition" is now true whenever "condition" is not true.
    Added support for target ship outlines to be colored based on friendly / hostile status.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    Update includes & forward declarations (#3622)
    
    * Update includes & forward declarations
    
     - Removed some legacy includes
     - Swapped includes to forward declarations for shared_ptr<Type> if possible
    
    * More #include to forward declarations
    In the outfitter, only show the "sells for" line if it's possible to sell this outfit (i.e. the Sell button is active).
    The sale price of ships and outfits now depreciates over time. If you sell "used" outfits to an outfitter, they remain in stock to buy back (at the reduced price) until you leave the planet.
    Merged the common code from the two info display classes into one common base class.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added a new ShopPanel class that includes all the code that was shared between the Shipyard and Outfitter.
    Added the outfitter UI. You can browse all outfits, but buying is not yet enabled.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    Added support for hull "leak" effects, when a dying ship is venting atmosphere / flames / blood / whatever.
    Weapon blast strength decreases with distance from blast (#3276)
    
    * Weapon blast strength decreases with distance from blast
    
     - To mitigate the damage falloff for weapons with a trigger radius, a multiplier based on the ratio of trigger and blast radius is used.
     - For a weapon with 0 trigger radius, the damage will range from 100% at the center, to 25% at the edge of the blast radius.
    
    * Use worst-case distance estimate rather than exact computation
    Added functions for bulk-uploading sprites. (But, they're not in use yet.)
    Create masks properly even for sprites where one whole side of the image is blank.
    Added a check for empty masks in Mask::Range().
    Made mouse click targeting much more accurate, using the actual ship outlines and the draw order to determine which ship you are trying to click on.
    Cleaned up some unused sprites and functions, and fixed a few comment typos as well.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Eliminated SDL_image in order to allow reading images in multiple threads simultaneously.
    Ported to SDL 2. Everything seems to work except for multithreaded image loading, which I had to turn off for now.
    Fixed the rotations, unit vectors, and hardpoint locations so that up is always negative y and always 0 degrees.
    Added the capability for ship explosions to damage and move nearby ships.
    Added GPL statements to all source code files and added a license.txt file.
    Got the code to build without warnings when -Wall is defined.
    Mask: refactored to eliminate duplicated code.
    Uploaded all the files from my local repository to Google Code.
    Made it possible to zoom the view in or out (via the scroll wheel or the +/- keys) without changing the UI zoom.
    Made planet labels shift to a different side if they are hidden underneat another planet.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Added summary comments to every class that did not have them, and expanded the summaries for other classes. This is to help make the code more understandable by people other than myself.
    Got basic audio support working. I do need to track down better sounds, or at least balance the audio levels better between them.
    Added two new classes, Format (for formatting numbers) and Table (for formatting tables).
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    Using float v. double in some cases of -Wdouble-promotion
    
     - Add some <algorithm> headers for uses of std::min or std::max
    Removing some unnecessary std:: prefixes.
    Switched to using 2D "texture arrays" for sprites, so all the frames fit into a single texture.
    Made it possible to anchor different elements in an Interface to different corners or edges of the screen.
    Made it so if a ship's sprite is animated, so is the target and flagship outline for it.
    Cleaned up some unnecessary namespace prefixes.
    Added support for named "boxes" in interfaces, in addition to "points."
    Updated the "interface" syntax to allow buttons to change color on hover and to simplify the syntax.
    Eliminated a ton of duplicated code by having each Panel remember all buttons that an Interface draws in it, so it can handle mouse clicks on those buttons automatically.
    THe Interface class now stores pointers to the colors, so if later data changes them the interface will change.
    0.9.2 updates
    Fix "Member 'XXX' was not initialized in this constructor " compiler
    warnings for WrappedText, ShipyardPanel, Interface, and Font.
    Add parentheses around condition in main.cpp per compiler warning
    suggestion.
    Refactoring: switching to using "!set.count(...)" instead of "set.find(...) == set.end()" because it's more concise, just as efficient, and seems clearer.
    Code cleanup.
    Added warning messages whenever a line of a data file or saved game is unrecognized.
    The target outline will now rotate to represent what direction the target is facing in.
    Took out the need for Information and Interface to know about Radar (replacing it with generic named points, to be handled separately, instead).
    Added two new map views, showing all ships and outfits that you know can be bought, and where they are sold.
    Removing unneccessary #includes using the advice of the include-what-you-use tool.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Updated the ring shader to support dashed lines, so I can use it for the main display of your ship's shields and hull.
    Added a "hailing" panel, which displays communications with a ship or planet. (But, I have not implemented the actual messages yet.)
    Made GameData::Colors() publicly accessible instead of only sharing them with Interface.
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Added support for target ship outlines to be colored based on friendly / hostile status.
    Added a "boarding" dialog that lets you choose what commodities or equipment to plunder from a disabled ship. (Capture is not yet implemented.)
    Fixed some missing #includes.
    Switched to always using the Color class instead of passing around RGBA float arrays.
    Fixed a few final issues in the load / save / new mechanics. It all seems to be working correctly, now.
    Added GPL statements to all source code files and added a license.txt file.
    Got the code to build without warnings when -Wall is defined.
    Uploaded all the files from my local repository to Google Code.
    feat(mechanics): Support "random lifetime" for effects (#5055)
    Added a new "Visual" class that represents just the information we need to track for an Effect once it's instantiated. Using it in place of Effect saves a string copy and a good deal of memory for each active visual effect.
    style: Remove unexpected trailing whitespace
    
    The only trailing whitespace should be "continuation tabs"
    Added functions to Random for getting normally distributed random numbers.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Made some changes to support Windows porting, assuming MinGW will be used to provide basic POSIX functionality.
    Updated the Mac OS X project. THat required a workaround because XCode apparently does not support thread_local static variables yet.
    Added a Random::Real() function, and refactored to use Random everywhere (because old-fashioned rand() is considered deprecated now.)
    Added new functions to Random to set the seed and to get a binomial distribution.
    Added a "Random" class, for encapsulating thread-safe random number generation.
    fix(news): avoid picking empty News items
    feat(phrases): Support nested phrase interpolation via ${phrase name} syntax (#4538)
    
    * Add phrase expansion and replacement functions to the phrase node.
    
    Example use:
    ```
    phrase "something"
      word
        `Hello you! Do you listen to "${band}"?`
        "Hello there, I'm ${pirate} and I'm here to steal your ship!"
      replace
        "llo" "y"
        "Hey there," "Surprise!"
    ```
    
    Here, "pirate" is the name of a Phrase that will be invoked and substituted into the rest of the text.
    Additionally, the output will be reprocessed to replace all occurrences of "llo" with a "y", and then to replace all occurrences of "Hey there," with "Surprise!".
    
    * style: Fix typos, reorder to match declaration, update comments
      - Remove unneeded "friend" declaration (since Sentence never modifies Phrase)
    
    * feat: Add a forwarding constructor for Sentence
      - Remove "contains" indirection by privately extending vector
      - Add removal of and warning about wholly-empty Sentences
    
    * feat: Use a once-through, in-place "replace all" method
      - avoids reallocations of `result` and the target->result initial copy
    
    * fix: Place some restrictions on phrase names
      - The game cannot determine which phrases actually exist until loading is completed, so ambiguities in parsing phrase names cannot be resolved when loading `word` choices.
    (An alternative would be to perform the parsing of `word` child nodes in a new `Phrase::FinishLoading` method.)
    
    * refactor: Reimplement "Option" as "Choice"
      - privately extend vector with "Option" signature
      - provide constructor for use with `emplace`
    
    * fix: Explicitly allow creation of an empty Choice
    
    e.g.
    ```
    word
      ""
    ```
    
    These can be used to pad "fluff" parts of a sentence, so only sometimes the extra information is added.
    
    * refactor: Move ReplaceAll to Format, store replacement pair
      - No other replacement strategies are supported, so store only the arguments
    
    
    Co-authored-by: tehhowch <tehhowch@users.noreply.github.com>
    Allow phrase-based randomized dialog (#4164)
    
    * Allow `MissionAction` dialog text randomization via the `Phrase` class. Traditional "directly specified" text is still supported.
    
    Supported syntax:
    ```
    dialog phrase <stock phrase name>
    
    dialog
        phrase
            {phrase specification...}
    ```
    e.g.
    ```
    dialog phrase "hostile disabled"
    
    dialog
        phrase
            word
                "Please excuse my dear "
            word
                "Aunt Sally"
                "Uncle Mark"
            word
                ` for saying, "`
            phrase
                "hostile disabled"
                "friendly disabled"
            word
                `" yesterday.`
    ```
    
    * Move `dialogText` parsing to `Dialog` static method
    
    * Allow `NPC` "completion" dialog text randomization using the same phrase-based syntax as `MissionAction` dialog
    
    * Use phrases to encapsulate generic/repeated dialog
    
    For similar messages, combined clauses to diversify the generated text.
    
    * Remove duplicated space
    
    * Typo fix ( @Pointedstick )
    Extend reference-checking in GameData::CheckReferences (#3116)
    
    * Extend reference-checking in GameData::CheckReferences
    
     - Add Name() to Minable & Phrase
     - Add IsDefined() to GameEvent
    
    * Enable reference-checking for GameEvents and Missions
    
    * IsDefined->Name and other feedback
    Changed how sub-phrases work in names and hails, so you can specify multiple sub-phrases to choose between.
    Formatting cleanup, and fixed a place where the recursive phrase check would fail (if recursion happens with anything but the first "phrase" reference).
    squash! Limit recursion of Phrase::Get().
    
    Detect and disallow recursive phrases.
    Limit recursion of Phrase::Get().
    
    Prevents a possible crash when a phrase references itself directly or
    indirectly.
    Allow subphrases within phrases.
    
    The motivation here is an INN-like system. There are already some
    appropriate phrases, like sports team names or Syndicate advertisements,
    that would be nice to thread through both systems.
    Moved all the source code files into a "source" folder to clean up the root folder.
    Renamed "ShipName" to "Phrase" since it is also used for random hail messages.
    Refactored DataFile::Node into a separate class, DataNode, to reduce dependencies and simplify the code.
    Added planet and spaceport descriptions for 35 more planets.
    Added GPL statements to all source code files and added a license.txt file.
    Uploaded all the files from my local repository to Google Code.
    fix(content): Renamed Membulem to Meblumem to match the name of Corral of Meblumem (#5328)
    fix(typo): Missing possessive "'s" in planet description  (#5272)
    feat(content): Created "hot Jupiter" graphics (#5229)
    fix: Patching errors and typos in the new Cognizance missions (#5236)
    fix(typo): Corrected errors in Pincian's description (#5238)
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    feat: The background haze (for regions outside of the Ember Waste) now changes in intensity according to where you are in the galaxy (#4986)
    feat(content): Added a new Builder station to the Graveyard (#5198)
    fix(typo): Update a planet description (#5197)
    fix: Typo fix in Relic's description
    feat: Added a new nova system near Coalition space to improve the odds of discovering the Yottrite missions (#5169)
    feat(organization): Combined all map data into a single file (#5163)
    
    The map editor is currently only capable of reading one file at a time. Because of this, having all map data in the same file makes it easier to work with.
    feat: Added system attributes to the Ember Waste and other systems for future use (#5164)
    feat: Added log entries for various characters that lacked them (#5122)
    
    Plus some other minor changes.
    feat: New Navy logistics ships (#5108)
    feat: Removed the Quarg ringworld in the Graveyard (#4921)
    fix(typo): map and intro missions (#5103)
    fix(typo): Replace relies with rely (#5091)
    Revert "Merge branch 'RemnantGraphics' into Remnant-Puffin-Rename"
    
    This reverts commit 70f79e4505022a228b5dc6ce79a2f96780b8b500, reversing
    changes made to 048d210c723dacbf6008e9b05026c294e1000a4d.
    fix: Typo fix in Relic's description (#5043)
    fix: Typos (#4988)
    feat: Added brown dwarves to various Ember Waste systems (#4960)
    fix: The fleets in Pug Iyik now match the government of the system
    fix: Typo in Kaeyin description (@Mr. Doom) (#4966)
    fix: Typo in Relic's description (#4958)
    feat: Increase rate of fleets in Waypoint that will refuel the player (#4946)
    feat: Hai surveillance fleets now patrol Hai space (#4823)
    
    Hai planets now have varying security levels as well.
    fix: Typo in map.txt (@Proont) (#4866)
    
    closes endless-sky#4863
    feat: The Pug that watch over the Wanderers are now a distinct government from the Pug that invade human space
    
    * This means that the player can visit the Pug by the Wanderers during the main plot and not be hostile with them, showing how the two groups are distinct from one another.
    * The Arfecta spawn for farming these Pug will now only occur after the main plot. In-universe wise, the Pug (Wanderer) don't really want to kill off the player lest it mess with the plans of the Pug that invade human space. (The player is an important character in the ending of the war.) Balance wise, it locks gaining an Arfecta to a post-main plot achievement.
    fix: Typo and grammar fixes
    feat: Added a new, extremely rare minable asteroid (#4856)
    fix: Typo in Station Cian spaceport text (#4850)
    fix: Typo in map.txt (#4828)
    
    it's -> it's
    earth -> Earth
    feat: Unique sprites for every human station (#4787)
    feat: Swapped the Ring of Power and Ring of Wisdom graphics to reflect that the Kimek have had the hypderdrive for longer than the Arachi (#4781)
    fix(typo): Update a planet description (#4773)
    
    `attemps` -> `attempts`
    feat: Improved Calda's description (#4747)
    feat: Wormhole Alpha can now be used by NPCs, excluding the Hai (#4738)
    
    * Also reduced the frequency of larger Hai fleets in Waypoint, as they have no reason to be there.
    * Created a dummy " Hai " government to be used by Hai escorts that require access through the wormhole.
    feat(aliens)!: new alien factions: the Builders and the Ka'het (#4716)
    feat: Improved Relic's description (#4739)
    
    Ref: the help wanted page's "fixing boring or badly written parts of the planet descriptions or mission text" entry.
    feat: Ember Waste wormholes can now be used by Remnant NPCS (#4737)
    feat(missions): New mission line in Hai space that gives a large reputation boost (#4664)
    
    The large reputation boost helps gain permanent access to Hai-home post 6c58d68
    Added Coalition space stations
    
    #4643
    Tweak Hai attitudes to soft-lock the Shield Beetle beyond just credits
    
    #4649
    Hai-home can no longer be bribed, meaning the player must become trusted by the Hai before being able to buy Shield Beetles whenever they want.
    Hai-home now takes more reputation to land on.
    Gain less Hai reputation from Unfettered ships so that you need to spend more than just a few minutes above Cloudfire to have the necessary rep to land on Hai-home.
    The Hai will now fine the player for having illegal goods, e.g. Nerve Gas.
    Fixed a mission that didn't give clearance to Hai-home and tweaked a mission to give more Hai rep when completed.
    Added a new Remnant carrier along with a fighter and drone
    
    #4546
    feat: Uninhabited planets do not fine by default (#4512)
    
    * Uninhabited planets now never fine the player
    
    * Error fix
    
    * Removed security 0 from Ruin
    
    * Added a flag to check if the security of an uninhabited planet was changed
    
    * Spacing
    
    * Name changes
    
    * Improved readability
    Enabling the player to demand tribute from the Remnant
    
    #4273
    Added advanced pirate shipyards
    
    #4578
    Typo fix
    
    #4590
    Creating the Tern
    
    This PR adds the Tern, a durable drone initially designed for mining/harvesting from gas giants and frequently utilized to fill the "screening" role that most empires use fightercraft for. Given the Remnant don't have the population to spend lives in screening roles, they use these drones instead. At least, in their home systems.
    
    Graphics courtesy of BeccaBunny
    Added missing attributes to Bloodsea
    
    #4479
    Generic jobs can now offer from independent worlds
    
    #4328
    Tefkar Ret station no longer fines the player
    
    #4265
    Adding the Tern
    
    Technically a Remnant Drone, currently implemented as an interceptor.
    Update map.txt
    Update map.txt
    New space flora sprites
    
    - changed the previous "space flora" and "large space flora" into "stealth space flora" and "large stealth space flora respectively (as their sprite is transparent and hard to see.
    - Add new sprite for the both space flora and large space flora (these are the ones where the flora sticks out from the asteroid
    Space Flora Asteroids
    
    Adding the Space Flora asteroid (large and normal)
    Adding large sizes
    
    The large asteroids are simply the 2x images of the regular ones, but their stats are bigger (1000 more hull, double the payload. These are rough numbers.
    Fixing image names
    Adding three plant type asteroids
    
    Adding three Plant type asteroids:
    - Plant
    - Plant2
    - Plant Cluster
    
    All three drop the "Void Orchid" harvested material.
    These will be found in Nenia and a variety of Ember Waste periphereal systems
    Remnant Content - Jump Drive (Broken)
    
    #4154
    Update "human tourism" news
    
     - Remove "research" from the qualifying attribute list
     - Exclude any stations from offering this news
     - Add "tourism" attribute to Alexandria
    Added new Remnant missions and content (@Zitchas @Brick63)
    
    #3761
    Remove large merchant fleets from uninhabited dead ends (#4041)
    Merchant fleet corrections
    
    #4038
    Quargs → Quarg
    
    #4036
    Made Ember Wormhole require quantum keystone
    
    #4024
    Added more regional flavor jobs
    
    #3220
    Add a high-tech image for Lagrange
    
    #3897
    Replaced duplicate landscape images with unused images (#3906)
    
    * Replaced duplicate landscape images with unused images
    
    * Update map.txt
    
    * Reverted questionable landscapes
    Typos in Planet Descriptions (#3443)
    
    * Typos in Planet Descriptions
    
    * Update map.txt
    Revert to the original language.
    Avoid the word "thing".
    Fix typos
    Add security 0 to gas giants in Nenia
    
    … to prevent players from being fined.
    Hopefully it's a temporary solution before either all planets without security attribute default to 0, or all uninhabited planets / planets in uninhabited systems default to security 0.
    planet sprites (#3458)
    
    New planet sprites from @comnom
    Added a black hole in the center of the galaxy.
    Fancier ships in paradise (#3386)
    
    * Added some more fancy and passenger-oriented ships to the fleets that
    hang around Paradise planets
    
    * Corrected a formatting error
    Typo fix. (@themightygrunt)
    Split the Deep fleets into a Merchant component and a Deep Security component.
    Added new "landscape" images from @sivael for human space station interiors.
    Modified description of Sek Alarfarat (#3209)
    
    * Modified description of Sek Alarfarat
    
    Appart from fixing a mistake, the description misleadingly lead to
    believe that the mantle of a planet is liquid, which is not the case.
    
    * rechanged to a more simple explanation
    Made it so that wormhole links are only drawn if the planet has a description. (This makes it possible to create wormholes that NPCs land on but that don't have links drawn.)
    Capitalized "Paradise Planets" in Follower's description (#3135)
    
    * Capitalized "Paradise Planets" in Follower's description
    
    * ; -> :
    Typo fixes
    Marking a few uninhabited worlds as such
    Capitalize 'New Greenland' in map.txt
    
    'new Greenland' to 'New Greenland'
    Typo in map.txt
    
    Proposing change of typo in line 26712 from "The Stronghold of Flugbu was used a military base during the War of Independence." to "The Stronghold of Flugbu was used as a military base during the War of Independence."
    Replace "spaceflight" and "space travel" with "interstellar travel" where appropriate (#2963)
    
    * Improve description of planet Freedom
    
    * "spaceflight" -> "interstellar travel"
    
    * "spaceflight" -> "interstellar travel"
    
    * interstellar travel->invention of the hyperdrive
    
    * "spaceflight" -> "interstellar travel"
    
    * "spaceflight" -> "interstellar travel"
    
    * "space travel" -> "interstellar travel"
    
    * "space travel" -> "interstellar travel"
    
    * Revert ""spaceflight" -> "interstellar travel""
    
    This reverts commit 7c4f3a9ec6e80e3334cdbe7c2951340841808e4c.
    
    I stand corrected. Wiki says that the first spacecraft using an ion
    engine was launched in 1964. https://en.wikipedia.org/wiki/SERT-1
    
    * Revert ""spaceflight" -> "interstellar travel""
    
    This reverts commit 41cb8fc966f9371b345da90ed5d090ce38b4ee9d.
    
    * Revert ""spaceflight" -> "interstellar travel""
    
    This reverts commit 07f7a64f5e69f383190bc39666d8381348e01b2a.
    
    * Revert ""spaceflight" -> "interstellar travel""
    
    This reverts commit 41bc7e2de6ff5ff30921824bcdc178106a266214.
    fixed typo in trove
    Added a wormhole path to the rest of the Ember Waste, for players who don't manage to snag a jump drive from the Korath raid.
    Preventing Far Monad from fining the player
    Replacing duplicate landscape images
    Typo fix. (@SolraBizna)
    Pirate jobs (#2646)
    
    * Pirate jobs
    
    * Removed reputation condition from normal jobs
    
    They aren't relavent to this PR anymore. Will be included in slavery PR.
    
    * Bounty hunters less likely to come after player...
    
    but will come after the player even if they only land on pirate worlds.
    
    * Changing pirate defense missions to offer in spaceports
    
    * Minor changes
    
    Not as likely to get the hardest stolen vessel to transport
    Wording changes in descriptions
    Removed redundant numbering on elminating law enforcement jobs
    
    * Illegal cargo related hail
    
    * New illegal cargo names (@comnom)
    
    * A bunch of changes
    
    Changed the `to offer` conditions on most of the jobs.
    * Only the smaller cargo jobs and the smallest passenger job offer with
    either a not-too-low pirate rep or a high combat rating.
    * Required combat ratings for jobs now correspond to levels, the lowest
    combat level requirement being ~5 (150) and the highest being ~8 (3000).
    
    Removed all mentions of "your crew" in `illegal` messages. Highly wanted
    passenger jobs now mention the cargo you must carry.
    
    Renamed slave transport jobs and reworked the descriptions. They now
    require a combat rating and positive pirate rep. Changed cargo name from
    "shackles and grub" to "slave food."
    
    Large law enforcement jobs now mention their size.
    Lowercased all instances of "militia" in descriptions and dialog.
    
    Reworded the description of large "Eliminating Competition" jobs.
    
    Raiding merchant jobs now require you to have a positive pirate
    reputation so your escorts don't attack you.
    
    Removed the ransom jobs.
    
    Fixed a typo. "Convoy at <system>" -> "Convoy near <system>"
    
    * Created highly illegal substance and cargo categories
    
    It doesn't make sense for jobs to sometimes consider a commodity illegal
    and sometimes highly illegal, so I've moved some of th commodities over
    into a highly illegal category.
    
    Yes, stolen silver spoons are highly illegal. You never know what
    pirates could do with those things.
    
    * Lowered the payment for each job, in some cases drastically
    
    Pirate jobs should be good, but not THAT good.
    
    * Replacing all "target" governments with the new target personality
    Added a secong Remnant intro mission.
    Fixed the description and attributes of Trove.
    Spelling corrections noted on Steam (Rhendox)
    
    As per:
    http://steamcommunity.com/app/404410/discussions/1/2333276539613621549/
    Fix typo in Deep Treasure's spaceport
    Added a label for the Ember Waste, which shows up once you make contact with the Remnant.
    Added occasional Korath raids into Remnant space, via a second entrance to the Waste.
    Cleaning up the map file to match the attribute ordering and formatting used by the latest version of the map editor (so that future edits to the map will leave not introduce spurious changes).
    Add licenses to Wanderer and Coalition outfits (#2560)
    
    Licenses for Wanderer and Coalition technology (@Disiuze and @Elyssaen)
    Made the Remnant ships and outfits require a license.
    Added the Remnant territory (the Ember Waste) to the map.
    Forgot to specify the government for those new systems.
    Added a very lucrative mining system on the outskirts of human space.
    Added separate "Deep Military" fleets for planetary defense. Also fixed the "Small Deep" fleet not specifying fighter names.
    Added map labels that appear when you discover Wanderer, Hai, Korath, and Coalition space.
    Replaced a small number of stars, mostly in uninhabited systems, with their "old" variant.
    +station tag to heliarch ringworlds ; +moon tags
    
    added "station" attribute to heliarch ringworlds - since all quarg ringworlds have it too - and to Smuggler's Den
    added "moon" attribute where it was missing ; performed fulltext search for "moon" and afterwards performed a full search for nested named objects (`           object `)
    Made it impossible to bribe the Heliarch ringworlds, so you can't land on them before getting the first contact mission.
    Typo fixes
    
    My inaugural Git contribution, hope to contribute to the writing. Thanks, Peter.
    Hai specific jobs (#1928)
    
    * Hai jobs
    
    * Reduced frequency of to Hai space jobs
    
    * Error fix + escort job changes
    
    * Vacation jobs now mention passenger number
    
    * Rare chance of Hai variants in northern merchants
    
    To go along with the escort jobs of Hai variants going to human space.
    
    * Wording fix
    
    * Another wording fix
    
    Also renamed escort missions to special escort missions so they pop more
    in the job board
    
    * Name change
    
    * Delivery jobs set between 2-10 cargo
    
    so that you don't get big jobs that don't make sense for the set payment
    
    * Name change
    
    * Payment tweak
    
    * Lowering the special delivery payment a bit more
    
    * Removing to Hai space jobs and changing supplies jobs
    
    * Hai specific cargo and passenger jobs
    
    Just copy/pasted human jobs right now.
    
    * Changing attribute name
    
    * Made Hai jobs slightly bigger than human jobs
    
    I think
    
    * Increased job sizes a bit
    
    Now that I have more understanding of what the numbers do
    Fixing places where two spaces are used instead of one.
    Place new landscapes (#2170)
    
    * Placed new images and corrected the copyright in credits.txt
    Adjusted the habitable zone in Dokdobaru to match where the ringworld is.
    Set the security to 0 in all the Korath exile worlds.
    Typo fixes.
    Fixing some line endings and a curly quote.
    Swapped some over-used landscapes with some unused ones.
    Added more asteroids for the Mereti to mine.
    Added occasional mining ships throughout human space.
    Added a "Model 8" Kor Mereti mining drone.
    Typo in Delve of Bloptab spaceport description.
    
    Changed 'feat' in '...due to the feat that the Resistance might...' to 'fear'.
    Human Hai Fleets (#1922)
    
    * Human fleets with Hai outfits
    
    * Variants
    
    * Map fleet update
    More typo fixes. (@Bladewood)
    Typo fix (@Bladewood).
    Typo fix from @jafdy, and updates to some Coalition world descriptions.
    Fix typos in the coalition in maps.txt (#1919)
    
    Changes "to dump off and sand that accumulates on them" for "to dump off any sand that accumulates on them" in Ceaseless Toil.
    Adds a missing uppercase in Fourth Shadow spaceport.
    Adds a missing comma in Shadow of Leaves description.
    Deletes an attribute urban for being duplicated in Warm Slope.
    Changes 'the' for 'they' in Warm Slope spaceport.
    Deletes a duplicated 'island' in Weir of Glubatub spaceport
    Added the Coalition systems and planets to the map.
    Added an ambient sound for space stations, just as a test that it's working.
    Sestri -> Sestor.
    Added a red giant star sprite.
    Fixed some fleet definitions.
    Tiny typo fix (trailing space).
    Typo fixes (@Bladewood).
    Made Far'en Lai uninhabited.
    Fixed the Earth description's statement of how its population compares to other planets.
    Typo fix.
    fix some typos
    Typo fix.
    Kraken Spaceport typo
    Fixed a planet description that referred to "dreadnoughts."
    Fixed a grammar error in Haven's description
    Changed miles to kilometers in some areas.
    Fixed some "southern pirates" fleets in northern Core space.
    Added lists of minable asteroids to all the systems in the map.
    Added commodity prices for all of Korath space (even the systems that will never be inhabited).
    Small expression improvements for Snowfeather
    Quarg in Korath space now travel in packs, for safety.
    rare Earth -> rare earth (@Alkallid)
    
    Thanks!
    Capitalization
    
    earth -> Earth
    
    Funny, Earth is one of those words that look really weird after looking at it for a minute.
    0.9.2 updates
    After the main plot is completed, the shipyard at Geminus is rebuilt.
    Update map.txt
    Small typo
    
    truck - trucks
    Added the next few missions in the Wanderer thread.
    Update map.txt
    Spelling fix.
    Set security to zero on all the uninhbited Korath worlds.
    Fixed a missing landscape image (on a planet you can't land on without cheating, anyway).
    Added commodity prices for the inhabited Korath systems.
    Update my master (#1)
    Added fleets for all the Korath systems.
    refer to Reunion 'local legislature' and Republic 'Parliament'
    Added some Korath outfitters and fleets, and adjusted their colors.
    Added Quarg fleets in the abandoned Korath territory.
    Fixed a Korath system with no government defined.
    fixed typo
    
    "was effort" - "war effort"
    Added Korath territory to the map.
    Add "government Quarg" to Echo outpost.
    Minor grammar error in Dustmaker's description
    Made Korath raids more common in the Durax system, so it's possible to hunt them without save-scumming.
    Added a Wanderer mission string that gives you access to most of their ships.
    s/earth-like/Earth-like/g
    Remove impossible Korath fleet (Korath Home) from Kor Ak'Mari
    
    Illogical placement of Korath Home in Kor Ak'Mari (it has no hyperlinks, therefore no way for worldships to get to the system. Home ships that spawn here glitch when their hull is damaged and basically give up on life
    Fixed capitalization error in Reunion's description
    Made it possible to bribe Alexandria, in order to complete the Hai translator mission if you're not well-liked by the Republic.
    Added a Pug system in Wanderer space.
    Added more to the Wanderer mission string. Nearly done with the initial diplomacy missions.
    Added a Quarg system in Hai space.
    Continuing to develop the Hai / Unfettered / Wanderer plot line.
    Fixed a Typo
    
    "The result are..." -> "The results are..."
    Added the first of the Wanderer missions.
    All Wanderer worlds but one are now initially off-limits.
    Added the Wanderer shipyards and outfitters.
    Added the Wanderer fleet definitions for all their systems.
    Added the Wanderer territory to the map.
    Added a new space station.
    Fixed a planet description that was too long.
    Fixed Typo
    
    #405
    Merged wormhole-links with new way of traversing wormholes that avoids links. Created function specifically for drawing wormholes, this way the wormholes can be guaranteed to be drawn under all other links. To appear as a wormhole link on the map, the wormhole *must* have a planet entry.
    Switched Caph to using Syndicate defense fleets.
    Added function to return a "noun" for a "planet" object, by default this is the word "planet," but can be either "station" or "moon" if the attributes include one of those two terms.
    Corrected misspellings in multiple txt files
    vender->vendor
    Some grammar/style edits to Gemstone's description.
    Miscellaneous typo fixes.
    minor typo
    You can now demand tribute from any human world (aside from a few pacifists who will refuse your demands).
    Reassigned some landscape images so that fewer of them are reused multiple times.
    Updated more of the landscape images.
    Updating some of the landscape images.
    Made it so that planets marked with the "uninhabited" attribute will not offer trading, jobs, or a bank.
    Took out any chance of pirates appearing in the starting system, to avoid having new players destroyed while they are busy learning how to fly.
    Did some optimizing of the file parsing code, so that startup will not bog down as the game data grows in size.
    Spell-checked the planet descriptions for Hai space.
    Added planets, etc. for the three Hai Unfettered systems.
    Continuing to populate Hai space. Only a few more systems remain undefined.
    Added a new section of space for the Hai. Some of the systems are not populated yet, though.
    Regularized the map file format (by loading and saving it in the new editor). Also cleaned up formatting in a few other places.
    A boatload of typo fixes.
    
    These come from siccing "ispell" on the data dir.
    A typo.
    
    The text exists in two copies, both had the same typo.
    Typo fixes
    Fixed a bunch of spelling errors found by the codespell tool.
    Added the first part of the Pug plot line to the Free Worlds "checkmate" story arc.
    Added some Creative Commons BY-SA-3.0 photos from Wikimedia, and updated the credits and copyright file accordingly.
    Wrapped up the Pug segment of the Free Worlds endgame.
    Continuing to develop the Free Worlds "endgame."
    Bagan work on the "reconciliation" endgame for the Free Worlds story line.
    Wrapped up the middle "chapter" of the Free Worlds plot line. Only the two possible "endgame" plot lines remain to be implemented.
    Made a few small fixes to things that turned up in testing.
    Fixed an uninhabited planet that was using a city planet sprite.
    Added data for the Pug outfits and ships, and for their "home" system.
    Fixed a few typos I found while testing.
    Wrapped up the terraforming mission, and added some humanitarian missions to pirate worlds.
    Added some more side missions.
    Added some new one-time special missions, and also fixed a bug in the "near" location filter.
    Added text labels to the map for each named sector of human space (dirt belt, rim, core, etc.).
    Scram drive autopilot that's slightly more optimal and doesn't go oscillatory for fast ships (e.g. Blackbird with A3 engines)
    Added another Free Worlds mission set.
    Added the first mission in the second thread of Free Worlds intro missions.
    Added the Korath territory to the map (near the galactic core).
    Updated the Wolf-Rayet star sprite, and added two more of them to the map.
    Added an image for a Wolf-Rayet star.
    Fixed a few misspellings in the map.
    Added the event that will "start" the war, and modified the starting map so that the "Free Worlds" do not exist yet.
    Added a planet that will serve as the purported "test site" that the Republic raids early in the war.
    Added a "galaxy" data type for placing the background images in the map panel.
    Implemented wormholes. (Any planet that shows up in multiple systems is a wormhole.)
    Got "security levels" specified for each planet. So far the only crime you can be caught committing is having an unlicensed ship.
    Switched from using quotes to delimit planet descriptions to using backticks, so that I could then also switch to using real double-quotes in the text.
    Started working on intro missions, and also fixed the handling of "defer" and of the special ship type flags.
    Fix a few glitches in my planet and spaceport descriptions.
    Added "frontier" attributes to some planets.
    Replaced spaces with tabs for properly indenting some planet descriptions.
    Fixed a planet description that was too long for the window.
    Modified the new mission implementation so that missions can also be offered as soon as you land (e.g. to handle continuation of existing missions), and used that to create a "first contact" conversation that is shown the first time you land on any Quarg world.
    Added "attributes" tags to all the planets, which specify what part of the galaxy they are in and what sort of settlements exist there (rich, urban, mining, farming, etc.).
    Adding color to some of the planet descriptions.
    Added bribe amounts and required reputations for landing on some of the more interesting planets.
    Fixed a few glitches, including a segfault when clicking the "new pilot" button.
    Fixing a few glitches I found while playtesting.
    Fixed some typos and formatting in the planet descriptions.
    Added license statements to all the data files.
    Added 30 "empty" systems to the map, so that the galaxy feels a little less populated, particularly in the Dirt Belt and the far north.
    Made sure every system with a shipyard also has an outfitter.
    Added individual "fleet" descriptions for each system, so that the local ships vary depending on where in the galaxy you are and how populous the system is.
    Added the "modified blaster," a more powerful and power-hungry Energy Blaster mostly used by pirates.
    Modified the map to specify what outfits are for sale in each star system.
    Added "shipyard" specifications to planets throughout the galaxy that seem likely places for a shipyard.
    Updated the mass, cost, and thumbnail for all outfits, and shortened some of their names.
    Added some space stations throughout the galaxy, and also added "landscape" pictures for them.
    Finished the planet descriptions. Also changed the starting planet for new pilots.
    Map: fixed a typo, and also a planet sprite that looked inhabited but was not supposed to be.
    Added more planet descriptions. Less than 20 left to go!
    Added eight more planet descriptions.
    Added new planets and descriptions to the map; less than 40 more to go.
    Added planet and spaceport descriptions for 35 more planets.
    Added planet and spaceport definitions for all the core Syndicate worlds.
    Set the government for every system. Also updated the map panel to not show information or hyperspace routes for unvisited systems.
    Added more Free Worlds star systems.
    Added a "color" field for governments, and modified the map panel to allow coloring systems by government.
    Modified the map display to allow coloring systems based on whether they provide shipyards or outfitters.
    Data updates: added some basic "sale" sets, and costs for some more of the outfits.
    Added some more planet descriptions.
    Added some spaceport descriptions. Also switched the map to coloring "uninhabited" systems grey.
    Added planet descriptions for the pirate and Quarg systems.
    Uploaded all the files from my local repository to Google Code.
    feat(governments): Added fine 0 and bribe 0 for governments that shouldn't fine or accept bribes (#5432)
    feat(balance): Increased the crew strength of the Alpha government (#5270)
    
    It's expected that ship of the "Alpha" government are not actually stocked full of Alphas, so the crew strength will not be exceptionally high, but this at least suggests that an Alpha ship is more difficult to take down than a Republic Navy one.
    feat(content): Wrote friendly and hostile hails for the Remnant (#4728)
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    feat: Added Ka'het hails (#4911)
    fix: The Pug Arfecta will now defend the Wanderers from the player
    
    Compatibility for old pilots:
    * Readded a negative attitude toward the normal Pug government for the Unfettered.
    * Both Pug governments defend the Wanderers.
    fix: Another reference change to the proper Pug government
    fix(governments): Other factions treat "Hai" and " Hai " equivalently (#4902)
    feat: Gave the Beagle science drone a more fitting "Derelict" government
    feat: The Pug that watch over the Wanderers are now a distinct government from the Pug that invade human space
    
    * This means that the player can visit the Pug by the Wanderers during the main plot and not be hostile with them, showing how the two groups are distinct from one another.
    * The Arfecta spawn for farming these Pug will now only occur after the main plot. In-universe wise, the Pug (Wanderer) don't really want to kill off the player lest it mess with the plans of the Pug that invade human space. (The player is an important character in the ending of the war.) Balance wise, it locks gaining an Arfecta to a post-main plot achievement.
    feat: Changed Remnant reputation behavior (#4838)
    
    * Attacking Korath now causes an increase in reputation.
    * Attacking Void Sprites now causes a decrease in reputation.
    * Remnant now hate the Alpha government.
    * Remnant now care more about assisting, capturing, and destroying than the default.
    feat: Created an " Independent " government that allows the player to destroy the Oxyrhynchus to evade it without negative consequences
    
    Fixes: #4449
    feat(government): Allow customization of the government's displayed name (#4768)
    
    * Support an optional "display name" key for Governments
     - Allow setting a customized display name for a government, rather always displaying the name used to define the government
    
    * Set the display name for existing pseudo-governments
    feat: Wormhole Alpha can now be used by NPCs, excluding the Hai (#4738)
    
    * Also reduced the frequency of larger Hai fleets in Waypoint, as they have no reason to be there.
    * Created a dummy " Hai " government to be used by Hai escorts that require access through the wormhole.
    feat(aliens)!: new alien factions: the Builders and the Ka'het (#4716)
    Tweak Hai attitudes to soft-lock the Shield Beetle beyond just credits
    
    #4649
    Hai-home can no longer be bribed, meaning the player must become trusted by the Hai before being able to buy Shield Beetles whenever they want.
    Hai-home now takes more reputation to land on.
    Gain less Hai reputation from Unfettered ships so that you need to spend more than just a few minutes above Cloudfire to have the necessary rep to land on Hai-home.
    The Hai will now fine the player for having illegal goods, e.g. Nerve Gas.
    Fixed a mission that didn't give clearance to Hai-home and tweaked a mission to give more Hai rep when completed.
    Added Heliarch H2H weapons
    
    #4564
    Added missing hails to alien governments
    
    #4553
    Altered the base attack and defense of Coalition and Heliarch crew
    
    #4168
    Updated Marauding Max
    
    #4448
    Slightly improve h2h capabilities of trained crews
    
    #4170
    Added new Remnant missions and content (@Zitchas @Brick63)
    
    #3761
    Government names for systems that have not been visited or that are "Uninhabited" no longer show up in the map key.
    Set Heliarch's hostile hail
    Made it so your behavior toward other factions won't affect the Pug's attitude toward you.
    Added some unique hails for the Deep Security forces.
    Your escorts in the "Syndicate Capture" mission will now help you fight the Syndicate ships.
    Update Pirate, Hai relationships
    Syndicate Target Practice fixes (#2902)
    
    * Made the syndicate target ships self-destructing automata and imposed a
    penalty for failure, thereby resolving the following issues:
    - https://github.com/endless-sky/endless-sky/issues/2268
    - https://github.com/endless-sky/endless-sky/issues/2890
    
    * Added appropriate hostile and disabled hails for the robotic Syndicate test dummy ships, which resolves https://github.com/endless-sky/endless-sky/issues/2151
    
    * Removed unnecessary boilerplate (thanks @lifeyouristhis) and fixed a
    typo in the new hail definition
    
    * Typo fix (thanks @Bladewood and @tehhowch)
    
    * Corrected a Bender quote
    
    * Fixing the formatting again
    
    * Added penalty payments in exchange for more leniency about
    offering you subsequent jobs if you blow up the target ships
    
    * Typo/in-progress testing fix
    
    * Added some Hitchhikers' Guide to the Galaxy robot quotes
    
    * Gave the new hails a lowercase name for consistency
    
    * ...You know, all of them
    
    * Super duper duper actually all of them
    Made it so the only way to get pirates to be friendly toward you is to attack merchants.
    Added occasional Korath raids into Remnant space, via a second entrance to the Waste.
    More Wanderer hails. (#2556)
    
    * More Wanderer hails.
    
    Added hostile wanderer hails, and hostile disabled wanderer hails as per
    #2526.
    
    * @Amazinite's suggested revisions in #2556
    
    * @endless-sky's suggested revisions in #2556
    Added the Remnant territory (the Ember Waste) to the map.
    Added a space-dwelling organism, the Void Sprite (not currently on the map anywhere).
    Pirate raids are now more powerful, but only come if the attraction of your cargo outweights the weapons you have to deter them.
    Added a "mute" personality marking ships that never say anything in response to a hail.
    More hails (#2129)
    
    * New bounty hails
    
    Gave the ships designated as "bounty" it's own dialogue, for more
    diversity.
    
    * New friendly unfettered hai hails
    
    Because sometimes, they are friendly, I gave the unfetered hai some
    friendly hails
    
    * Corrections
    
    * Fixed double spacing issues
    
    in theory
    
    * Fixed the latest mistakes. Again.
    Friendly pirate hails (#2073)
    
    * Friendly pirate hails
    
    * Forgot to actually make them use the hails
    
    * Fixing odd wording and typos
    
    * Wording change
    Added the second half of the middle portion of the Wanderers plot line.
    Made it so attacking "Navy Intelligence" ships angers the Republic and the Oathkeepers.
    Moved the Coalition governments into the main government list, and made non-Heliarch ships speak an unknown language.
    Militia Hails (#1907)
    
    * Militia hails
    
    Plus some "hostile free worlds" hails
    
    * Update governments.txt
    
    * Typo fix and hail change
    
    * Typo fix
    Made it so if a government has an "attitude toward" another government of less than +-5%, it has no permanent effects on your reputation. (This is so two governments can be at war without making it so that if you attack one, eventually the other will like you.)
    The Korath Nanobots now have their own, always-hostile government.
    The unfettered will now attack human merchants.
    Made the "Navy Intelligence" government (currently only used in missions) an enemy of the pirates.
    Made it so killing Navy ships won't make you friendly with the Alphas.
    Swapped the government colors for the Hai and the Unfettered, to better match their ship colors.
    Continuing to develop the new Wanderer story line.
    Added the next few missions in the Wanderer thread.
    Adjusting the Korath government colors again, this time to avoid confusion with the Hai and the Republic.
    Added one of the Kor Sestor carrier variants.
    Added some Korath outfitters and fleets, and adjusted their colors.
    Added Korath territory to the map.
    Added the Korath government factions.
    "Neutral" government respects merchants.
    Filled in some missing relationships between governments. Killing an Oathkeeper ship now angers the Republic (but not vice versa).
    Added a Drak ship, with various weapons.
    Moved all the government definitions into one file and alphabetized them, so it's easier to locate one of them.
    Pirate raids are now tied to a system's government, so there will not be human pirate raids in alien star systems.
    Fixed whitespace for new content (spaces -> tabs) and changed the research data mission around a bit to turn it into a Syndicate corporate espionage mission
    Added several new repeatable jobs available at various places throughout the galaxy, as well as a new "Bounty Hunter" faction in support of one of the missions (and future ones).
    Hostile Syndicate hails
    
    Added hostile Syndicate hails for hostile Syndicate and Extremist
    Fighting the Korath will now only increase your reputation with the Syndicate and Merchants.
    Other ships no longer attack your bounty hunting targets. Also, increased the frequency of the Free Worlds intro missions slightly.
    Added a new special person, Cap'n Pester, who encourages the player to get involved in the open source development of the game universe.
    Added support for unique "persons" who can show up in any system.
    Updating all the missions to make use of the new "escort" personality.
    Switched to having the hail messages be a property of each government rather than individual ships or fleets (so that mission-related ships will use them, too, to add a bit of flavor in battles).
    Wrapped up the Pug segment of the Free Worlds endgame.
    Added another few missions in the Free Worlds endgame.
    Added data for the Pug outfits and ships, and for their "home" system.
    Added more Free Worlds missions, with one possible ending to the second chapter. (Another thread still has to be wrapped up, though.)
    Added some more side missions.
    Added a few more "beginner" missions.
    Added a Free Worlds side mission that gives you access to the Flamethrower weapon.
    Added several new missions to the Free Worlds plot line, branching based on whether you want to subjugate the pirates or negotiate with them.
    Added a Free Worlds diplomatic mission that gives you access to Tarazed.
    Added the Korath territory to the map (near the galactic core).
    Added a new species, the Korath, and one of their ships, the Raider, along with several weapons and outfits for it.
    Added support for illegal cargo and outfit checks when you are scanned or when you land on a planet.
    Added "events" representing the gradual deployment of fleets and development of a front between the Republic and the Free Worlds, including several new Republic Navy bases in the region. Made the two sides start out not actually shooting at each other yet.
    Made it possible to bribe hostile ships to leave you alone. More principled captains will refuse your money, however.
    Added code to save the player's reputations and apply them to the game data when reloading a saved game.
    Added a Politics class that can handle governments coming to the aid of allies, tracking the player's reputation in response to different actions, etc.
    Added license statements to all the data files.
    Updated the government colors to a most pleasant and less jarring palette.
    Set the government for every system. Also updated the map panel to not show information or hyperspace routes for unvisited systems.
    Added a "color" field for governments, and modified the map panel to allow coloring systems by government.
    Uploaded all the files from my local repository to Google Code.
    feat(person): Created a person fleet for Zitchas (#5406)
    feat(person): Local God's Gridfires will no accidentally longer damage himself or the player (#5416)
    feat(graphics): Added new details to Tarazed ships (#5368)
    fix(typo): Univeral -> Universal
    
    @fulmerw
    feat(person): Created a person ship for MCOfficer (#5295)
    feat(person): Created a person ship for BeccaBunny (#5306)
    feat: Added fighter bays to the Kestrel (#4981)
    Revert "Merge branch 'RemnantGraphics' into Remnant-Puffin-Rename"
    
    This reverts commit 70f79e4505022a228b5dc6ce79a2f96780b8b500, reversing
    changes made to 048d210c723dacbf6008e9b05026c294e1000a4d.
    fix(deprecation): Remove use of deprecated outfits
    
    Replaced with equivalent cooling (0955883b0c476c37bf8ca620daa68670538cfb9c) and the associated explosion name (24db09fa5fd1226388df849b75f9be7cdae37e5f)
    Creating a person ship
    
    Using the Diomedea to build a person ship.
    fix: use correct government name
    feat(person): The Subsidurial, a spacefaring organism (#4785)
    fix: typo in personality token
    Added a person for Local God
    
    #4692
    Improved the descriptions of the Marauder ships
    
    #4572
    Fix invalid Phrase token
    Updated Marauding Max
    
    #4448
    Added shipyard thumbnails for the remaining ships that didn't have them yet
    
    #4377
    Address some negative outfit spaces in person ships
    Center Pointedstick's Vanguard
    
    Ref: #3954
    
    * Delete pointedstick_vanguard.png
    
    * Add files via upload
    
    * Update persons.txt
    Moved M. Fury to persons (#3574)
    
    * Replaced M. Fury's Intrusion Countermeasures
    
    Although I understand the Marauder Fury's need to defend itself, I think having it equipped with three Quarg Intrusion Countermeasures is hard to explain, lore-wise. This proposal replaces them with ordinary human laser rifles. There is no space (0/240) for security stations.
    
    * Added M. Fury
    
    * Removed M. Fury
    
    * put M. Fury below M. Max K
    Fixed two ships with negative outfit space.
    Make Power of the People never disabled (#3580)
    
    2f5b760
    Fixing "persons" whose death explosions won't work because they don't have a permanent base model ship.
    Per request (#3416)
    
    * Create "Power of the People", a modified Osprey warship
    
    * Use common "friendly author" phrase
    
    * Add Phrases
    
     - Amalgamation of various pop culture references, mostly
       - Han Solo
       - Ernest
       - Starship Troopers
       - The Fifth Element
       - Die Hard
    
    * Update copyright file
    
     - Removed duplicated Vanguard entry
    
    * Adding "friendly author" to Captain Nate (by request)
    Typo fix.
    A small tribute, celebrating the 15th anniversary of the first episode of Firefly airing.
    Reordered some more hardpoints
    MMK tuned Captain Nate's Vanguard, apparently
    Captain Nate says: Ram them! (#1979)
    
    * At the community's request, created an in-game Person for myself (Nate Graham/Po
    intedstick). Thanks for the good vibes, everyone!
    
    * we Should capiTalize betteR
    Re-Fit Marauder Fury (#1718)
    
    * Re-Fit Marauder Fury
    
    so that M.M.K. is more combat worthy, and uses more outfits created by
    the artist he pays homage to.
    
    * limit MMK to Human/Hai space
    
    also fixed hard points from an experimental build that didn’t fit,
    clarified the non-existence of MMK’s shop.
    
    * removed extra ammo from Marauder Fury
    Regularizing the names for size progressions to always be tiny < small < medium < large < huge. (Replacing "big" with "large" in some places.)
    Fixed the OTHER Kestrel's coords (#1373)
    
    * Fixed the OTHER Kestrel's coords
    
    Missed this one. I thought it was a variant...
    
    * Fixed MZ's Kestrel coordinates
    Gave ramscoops to the other two special persons.
    Removed misunderstood lines
    
    Seems like most players didn't jump on the train for content creation, but saw it as help in the grind.
    Fixed non-ASCII characters in a comment.
    One Commit
    
    carefully inserted each segment of ships to be added, being careful not
    to delete anything - not sure why github displays the changes that way.
    
    jobs too, but it’s less confusing.
    Added a new special person, Cap'n Pester, who encourages the player to get involved in the open source development of the game universe.
    Added support for unique "persons" who can show up in any system.
    feat(content): Added alternative jump drive sounds and effects (#5042)
    
    Currently unused, but with the previous commit, these can be used by plugins, the vanilla JD can be edited, or they may be used in the future.
    Revert "Merge branch 'RemnantGraphics' into Remnant-Puffin-Rename"
    
    This reverts commit 70f79e4505022a228b5dc6ce79a2f96780b8b500, reversing
    changes made to 048d210c723dacbf6008e9b05026c294e1000a4d.
    Fixes
    
    Correcting some minor errors.
    feat: Created unique leak effects for Remnant ships (#4792)
    Adding the Quantum Tear
    
    Adding the Quantum Tear
    - Designed to be a one-off anti-capital superweapon.
    - This will NEVER be purchaseable. Only given by a specific end-game mission
    Organized ship, outfit, and effect attributes to be consistent
    
    #3868
    Support launch effects for carried ships when departing from their carrier (#3602)
    
    * Support "launch effect" child node for carrier bays
    
     - Allows specifying multiple effects, and a count of how many of each, e.g.
        "launch effect" "door sparks" 5
        "launch effect" "decompression"
    
    * Provide a fallback effect for certain bay types
    
    For non-automaton ships, any internal (i.e. pressurized) bays will use a default effect if none were specified
    
    * Remove unnecessary includes
    
     - Angle & Point includes were needed before `Visual` took the responsibility for placement of effects
    Added unique explosions for Pug ships
    
    #3957
    Improve some missile launch and explosion sounds (#3869)
    
    * Improve some missile launch and explosion sounds
    
    * Correct license name formatting
    Fixed swapped names for the hull leaks, which were left over form testing.
    Added support for hull "leak" effects, when a dying ship is venting atmosphere / flames / blood / whatever.
    Reorganizing the human, Hai, and Pug data so that weapon effects are always defined right after the weapon, instead of in a separate "effects.txt" file.
    Better explosion sounds (#1526)
    
    Includes a new huge explosion sound and a new heavy rocket explosion sound.
    Regularizing the names for size progressions to always be tiny < small < medium < large < huge. (Replacing "big" with "large" in some places.)
    Made the flotsam death animation a bit bigger so it doesn't just look like they disappear.
    Spiffing up the harvestable asteroid explosions a bit.
    Fixed a few things in the new Hai weapon data.
    hai carriers + gatling gun +rail gun (#1284)
    
    Added the Hai carriers, Gatling guns, and railguns (@Amazinite, @LocalGod79, @mdsmestad, @Wrzlprnft).
    Added "final explosion" sounds.
    Moved the Quarg effect definitions to put them right next to their corresponding weapon data.
    Added two new damage types: disruption (which makes shields porous) and slowing.
    When you dump cargo, your cost basis is now adjusted properly and your loss is reported.
    Added a "cargo box" effect that is shown when you dump cargo.
    Updated the flamethrower effect and sounds.
    Added some impact sounds, and updated the hyperjump sounds.
    Added sounds for the afterburners.
    Added some explosion sounds that are more muted so they won't be way too loud when overlapping.
    Added sounds for various anti-missile weapons, with the volume better balanced to the other sound effects.
    Added a small random factor to the explosion frame rates, so when a ship explodes the animations will not all die out at exactly the same time.
    Updating some of the weapon effects to be more detailed.
    Created a new debris effect that is prettier than the old one.
    Added another new weapon for the Hai: the Tracker, a fast, long-range missile that is not very effective up close due to its large turning radius.
    Added a new weapon for the Hai, the Pulse Cannon / Turret. Also added an icon to use for outfits (especially of alien origin) that have no thumbnail yet.
    Added an "ion cannon" weapon. I'll need a lot of testing to make sure it's balanced - it makes defeating a single isolated foe too easy, but also does much less damage than other weapons of comparable size.
    Added "firing" animations for some of the missile weapons.
    Added some small "debris" particles from exploding ships.
    Added the nuke, and tweaked the AI to be a bit more cautious about firing it when the target is nearby.
    Added a new weapon, the electron turret (basically an upgrade to the heavy laser).
    Added a new afterburner outfit, the Ionic Afterburner, which is much more fuel efficient but also consumes a considerable amount of energy.
    Added an impact sprite for the particle beam.
    Added an impact animation for the proton gun.
    Added an afterburner outfit. It'll probably take some balancing work to make sure it's not too powerful.
    Got basic audio support working. I do need to track down better sounds, or at least balance the audio levels better between them.
    Added license statements to all the data files.
    Added a "plasma cannon," another option for a relatively heavy, fixed gun.
    Uploaded all the files from my local repository to Google Code.
    Added the ability to define the starting conditions (credits, mortgages, location, salaries, licenses, etc.) in the data files, to support "total conversion" mods.
    Add an article "the" before ship names when appropriate (#4147)
    
    * Add an article "the" before ship names in bounty hunting missions
    
    * Add extra article "the" and other minor changes to improve consistency
    
    * Add the article "The" where appropriate to ship names
    
    * Make the references to <ship> consistent with an article "the"
    Update Pirate planetary defense missions (#3482)
    
    * Update pirate "planetary defense" missions
    
     - Fix incorrect opposition references in UI text
     - Add unpaid variants (25% chance) that are slightly easier than the paid variants
       - Same overall chance of triggering a defense mission
    
    * Add reference checking of stock conversations
    
    * Co-locate mission conversations and mission definitions
    Typo fix.
    Small change in the intro conversation
    The "flight checks" now show up as warning icons and only block you if you try to take off with an unusable ship.
    Solar power + regenerator compatibility (operational energy) (Ref #1879) (#1896)
    
    * Replaced negative energy generation with operational energy
    
    Shield regenerators now have positive 'operational energy' instead of
    negative energy generation, to avoid a problem where solar collection
    wasn't compatible with them.
    
    * Operational energy revisions
    
    1. Idle energy now considers operational energy.
    2. Flight check now considers operational energy, and returns a new
    conversation if you have negative energy even before checking thrusters.
    
    * Revisions to flight check for solar collection
    
    Added solar collection into flight checking, and added a new
    conversation if your ship runs the risk of becoming derelict too far
    from the system centre. Also fixed a <= that should be an <.
    
    * Changed 'centre' to 'center'
    
    * Tweaked conversation wording
    
    Replaced "system center" with "center of a system", and "steering" with
    "steering systems".
    
    * Renamed operational energy to energy consumption
    
    * Fixed a stray tab in tooltips.txt
    Added the ship name to the flight check, so if you have many ships it's clear which one needs fixing.
    A boatload of typo fixes.
    
    These come from siccing "ispell" on the data dir.
    Fixed some quotation marks in conversations I made before the backtick syntax was supported.
    Increased interest rates and ship prices to make the start of the game a bit more difficult, as well as to increase the range between mid-level and high-level ships.
    Slightly increased the damage done by the Blaster. Also removed the turrets from the Clipper and tweaked the intro text.
    Added the capability for DataFile tokens to be quoted with backticks, so that regular quotation marks can be included within the strings.
    Added license statements to all the data files.
    Fixed a bug in DIalog where it was calling the callback on a copy of the given object instead of the original. Added confirmation dialogs to the delete buttons in the Load Game panel. Also tweaked the starting mortgage.
    Added a "pre-flight check" that makes sure you have thrusters and steering installed and enough energy to drive them, and warns you otherwise rather than letting you take off.
    Updated Conversation to allow typing in your name (for the intro text). Also added an option for a "scene" picture, and a better UI panel.
    Uploaded all the files from my local repository to Google Code.
    feat(layout): Moved the outfitter and shipyard "detail information" into a sidebar (#5233)
    feat(content): Removed portrait images from spaceport news (#5187)
    
    Spaceport portraits of people were an experimental idea that has received generally negative feedback. See #4325 or the comments on #3389 after the news system was added.
    This PR removes the use of the portraits, but keeps the portrait mechanic in game, as we may find a use for it later that doesn't involve images of people, or plugins may still want to make use of the portraits of people.
    The status overlay now shows the disabled threshold
    
    #4513
    Moved done button on map to far right, adjusted button sizes. (#4402)
    
    * Moved done button to far right on map screen, click areas match button visible areas.
    
    * Added 14 extra pixel separation between done button and other buttons (24 total).
    Modified the HUD to show the hull level at which a ship will be disabled.
    Made it so the viewport corner markers on the radar will be "square" even if the window is much wider than it is tall. Also added a separate, customizable color for the markers.
    The heat bar now blinks to indicate that your ship is overheated. Also, changed the "extra heat" overlay color and capped it at 200%, instead of "segmenting" it.
    Consider target's heat level when picking targets (#3493)
    
    * Allow Ship::Heat() to exceed 1.
    
    * Deprioritize highly overheated targets
    
    * Display excess heat as a segmented overlay bar
    Remove commas from color specifications
    Added a "news" system for displaying messages from local inhabitants you meet in the spaceport.
    User-defined colors & deprecated function (#3431)
    
    * Remove deprecated function declaration
    
     - Function was removed in https://github.com/endless-sky/endless-sky/commit/cdb1cb881d04b246feee03dff4ec0028f34f6327#diff-e0a59618d76b767cb62fa83a9f007c59L295
    
    * Switch to colors in GameData, add some method comments
    
    * Deprecate "close" and "far" colors for "medium" and "dim"
    
    * Show a button for the Find dialog
    
    * Revert "Show a button for the Find dialog"
    
    This reverts commit 14901ad25707f8fd05251d54e45e053a7c3209bd.
    Define additional filled colors in interfaces.txt (#3425)
    
    * Define additional filled colors in interfaces.txt
    
     - Further support for modified interfaces / reskinning.
    
    * Added comments to color definitions
    
    * Reflect name change in code too
    Moving the mini-map back up where it was, to be less intrusive on small screens (e.g. 1366x768).
    Simplifying the wormhole-drawing code.
    Refactor MapPanel's Draw___ methods (#3379)
    
    * Refactor MapPanel's Draw___ methods
    
     - Improve mod coloring support via expanded use of interfaces.txt:
       - Switch the minimap from a hardcoded position to an Interface
       - Use travel plan colors from interfaces.txt
       - Use System name, link colors from interfaces.txt
     - Move the increment of `step` from MissionPanel to the base MapPanel
     - Add comments to DrawMiniMap, DrawTravelPlan, and DrawWormholes
     - Used and updated MapPanel constants
     - Draw the Travel Plan after wormholes, since wormholes by default have non-zero alpha.
       - This removes the small, dark purple centerline from drawn travel plan routes that use wormholes
     - Adds function to Planet class to export all systems in which it can be found
     - Do not show the "planet description" box if the planet in question is a wormhole.
     - Change DrawWormholes iteration scheme from "every StellarObject in every System" to "check only planets"
       - Fixes bug in DrawWormholes caused when two wormholes reference the same system (i.e. Cardea), which cause the wormhole link to be drawn over a previous directional arrow
    
    * Move the mini-map position specifier into the "hud" interface
    Modified the "ammo" HUD element to center the ammo icon boxes instead of left-aligning them within the given rectangle.
    Wrap messages when drawing them to prevent overflow (#3313)
    
    * Wrap messages when drawing them to prevent overflow
    
    * Increase padding on right edge to avoid overlap of ammo icon
    Added a "tactical scanner" that shows additional information about your target.
    Made it possible to customize the position and size of the ammo, escorts, and message lists in the heads-up display.
    Combined the heads-up-display into a single "hud" interface specification.
    Made it possible to anchor different elements in an Interface to different corners or edges of the screen.
    Added colored "faction markers" to the targeting display.
    The "flight checks" now show up as warning icons and only block you if you try to take off with an unusable ship.
    Pop-ups cancel drag actions (#3094)
    
    * Cancel drag actions if prompted
    
     - If a conversation, dialog, or other panel is generated while dragging, stop drawing the drag box and reset the drag status.
    
    * static const Color to const Color &
    Allow mission target blink color to be set independently of ships the player is targeting (#2825)
    
    * Add "radar blink" color
    
    * Set default radar blink color
    Made it possible to customize the colors used in the radar (which are also used for target crosshairs).
    Mission NPCs added to the escort display are drawn with hostile colors as appropriate. (#2725)
    
    * Mission NPCs added to the escort display are drawn with hostile colors
    
    If a mission adds a hostile ship to the escort display so that the player can track its whereabouts, this ship will appear under the player's colors (green) on the radar and in the target reticle.
    
    This commit prevents drawing hostile escorts as assumed friendlies.
    
    * Display escort icon as Radar::HOSTILE color
    
    Also, do not merge it with friendly escort icons.
    
    * Restore colors in radar display
    Added a "target" personality that marks a ship by making it flash in the radar and the targeting display.
    Switched "Spaceport" to always being one word (even the button in the planet panel).
    Use user-defined colors for status overlays and escort attributes
    
    Status overlays (shields, hull, scanning progress) were previously fixed
     - New colors are added to data/interfaces.txt to allow custom colors
    
    Escort attributes (shields, hull, fuel, heat, energy) were previously hard-coded to the default values assigned to the flagship.
     - Colors now reflect the custom values given to the user's flagship's attributes.
     - Existing "overlapping" bar behavior for displaying attributes that differ between like-model escorts is preserved.
    Fix to 'inactive' Next/Previous buttons when you have no Log entries
    
    Adding the Logbook button, and the condition for when it's active has
    incidentally attached that condition to the Next and Previous buttons in
    Ship Info. This means they're greyed out unless you have log entries.
    
    This fix just adds the line "active" so that Next/Previous are always
    active.
    Added a "logbook": mission actions can now have "log" entries that automatically get added to the logbook, to remind the player of where they are in the story and what quests they have completed.
    Made it possible for a ship's list of outfits in the Ship Info panel to spill over into a third column, reducing the space available for the cargo list.
    Made it possible to customize the colors used in the escort status icons.
    Made it harder to accidentally delete a snapshot or a pilot, by removing the keyboard shortcuts for those buttons.
    Made the flagship highlight color customizable.
    Fixing the accelerator hints in the info panel.
    Free Dominated Planet
    Split the preferences into multiple pages (controls, settings, and plugins) to make space to display all the "hidden" settings and for new key controls to be added if needed.
    The trade panel is now only accessible is a system has commodity prices. Also added a "not for sale" label if some commodities are for sale but not others.
    Starting to clean up the info panel. Fixed overlapping text and redesigned it to be able to display more weapon hardpoints (12 on each side of the ship).
    Added a "disown" button when viewing ship details while landed on a planet, for the rare cases where you want to disown a ship that you are unable to sell.
    The "Sell All" button in the trading panel now changes to "Sell Outfits" if you only have outfits left in cargo, and will not sell outfits otherwise.
    Now that Interface can handle inactive overlapping buttons, fixed the key shortcuts for Park / Unpark All in the info panel.
    Little fixes, hails, volume, fighters and drones (#1417)
    
    * change hails to only occur for living players
    
    * fix volume bar offset due to recent interface changes
    
    * fix carryable ships in other system were being dumped into space when you landed
    
    * fix carryable ships no longer mass select one parent
    
    this was causing issues with carryables being left behind because their potential parent would leave the system before being asked to wait for them
    
    * fix boarding panel oddities from interface update
    
    * revert UnloadBays condition
    
    this will eventually be an issue when players get annoyed that they have to keep waiting for fighters/drones to reload, but the parenting fix is the important part
    Fixed a bug I recently introduced in the "dump cargo" button.
    Separated the elements of the main menu into different "interface" objects to avoid duplication.
    Updated the "interface" syntax to allow buttons to change color on hover and to simplify the syntax.
    disabled saving after death
    removed the ability to save a snapshot after you die and also fixed being able to load a game when no save files exist
    removed ability to delete main save file as is suggested by the greying of the ui
    0.9.2 updates
    Made the active mission pointers a bit bigger and the blocked mission pointers a bit darker to better differentiate between them.
    The navigation buttons are now in the same place for all four map panels. Also made the UI panel corner highlights a bit brighter.
    Added a line to the ship info display that shows the energy cost of repairing shields and hull.
    Added support for "stopover" planets specified by a mission.
    Shift+B now preferentially selects disabled escorts. (Ordinary B now consistently prefers enemies.)
    When you are not landed, the ship info panel will now allow you to jettison cargo. Also, the boarding panel now lets you call up the info panel.
    Added new zoom button sprite, made +/- use size 18 font to appear slightly bigger.
    Fixed click distances, zoom buttons now disable when at min or max zoom.
    I think everything is working, testing.
    Made the keyboard shortcut underlines only display when you hold down Alt, to avoid cluttering the interface the rest of the time.
    Fixed "Demand Tribute" hotkey label to be t instead of d.
    Added underscores to I think every location in the game where hotkeys are defined.
    Added syntax to underline individual characters if the label string contains an underscore character preceding a character.
    Added a "buy all" button in the trading panel.
    Changed "Enter Ship" to "Load Game" in the Load / Save panel, to make it clear that if you click that you will be reloading your game.
    Added a 500x multiplier (alt / option key), mainly for players with enormous cargo fleets.
    Added a pointer that shows what direction your target is in (relative to your ship).
    Took out the need for Information and Interface to know about Radar (replacing it with generic named points, to be handled separately, instead).
    Switched the waypoint and mission pointers to a color palette that should allow both red-green and blue-yellow color blind people to distinguish the three hues from each other, while still looking harmonious for those with full color vision.
    Made the mission pointer colors customizable in the data files, to allow experimenting with other color schemes.
    Made it so that planets marked with the "uninhabited" attribute will not offer trading, jobs, or a bank.
    Widened the panels in the menu screen by 20 pixels, so the credits won't be so scrunched.
    Added two new map views, showing all ships and outfits that you know can be bought, and where they are sold.
    Added a side panel to the preferences describing the behavior of Shift + <key> for the targeting keys.
    Added support for "parking" ships (to avoid paying salaries for them), and for renaming ships.
    Added a "Pay All" button in the bank. It will pay whatever mortgages, fines, etc. you can afford to pay.
    Modified the boarding panel so it will not let you attack if you have only yourself left as crew.
    Updated the ring shader to support dashed lines, so I can use it for the main display of your ship's shields and hull.
    Made a few small fixes to things that turned up in testing.
    Added a new "infiltrating" mission mode where you can land on a planet, but cannot access any services there or refuel your ship.
    Updated the preferences panel to include escort command keys (and to have space for additional preferences).
    Updated the hiring panel and trading panel extra buttons to have brighter labels when active.
    Added a "sell all" button to the trade panel, which also sells any plunder you have (rather than needing to select each outfit in the outfitter panel and sell it individually).
    Made it possible to bribe hostile ships to leave you alone. More principled captains will refuse your money, however.
    Added a "hailing" panel, which displays communications with a ship or planet. (But, I have not implemented the actual messages yet.)
    Tweaked the crew hiring dialog so the "hire" and "fire" buttons are separate buttons instead of just text in the table.
    Made the bank active even if the player has no ship, to handle the case where you sell your old ship, then get a loan, then buy a new ship.
    Added a volume control, and a preferences file that saves the volume and window size in between runs.
    Added license statements to all the data files.
    Updated the UI to use the same three "named" colors everywhere for three different levels of text brightness, for consistency.
    Added new syntax to the interface definitions: "!condition" is now true whenever "condition" is not true.
    Started updating the code to use the new Format and Table classes.
    Added a player / fleet panel to the player info display. This includes the capability of reordering ships, including changing your flagship.
    Broke up the info panel into separate sprites with different tabs and buttons active.
    Added a rudimentary ship info panel.
    Tweaked the hiring panel format to match the bank and trading panels.
    Added mouse click support to the mission panel.
    Added a "mission panel" that lets you select missions from a job board. It doesn't support scrolling or mouse clicks, yet.
    Added support for target ship outlines to be colored based on friendly / hostile status.
    Got capturing working, at least for your flagship. Other ships can't capture other ships yet.
    Added a panel to the planet dialog for hiring and firing extra crew.
    Added a "boarding" dialog that lets you choose what commodities or equipment to plunder from a disabled ship. (Capture is not yet implemented.)
    Added the background image for the ship-boarding dialog.
    Added an option to toggle fullscreen mode. It's still a little buggy on Linux.
    Renamed some of the data files, for clarity.
    Changed the price range for plastic.
    Got the Load / Save panel working.
    Got "New Pilot" working, including visiting the shipyard and picking out an initial ship.
    Added a Load / Save panel (not yet functional).
    Added background graphics for the preferences panel.
    Added display of the current pilot's information in the main menu.
    Added a preferences panel for customizing the key controls. (They are not yet used, though.)
    Updated the main menu to use a generic panel graphic rather than a pre-rendered one.
    Mocked up the main menu interface (but it is not functional yet).
    Uploaded all the files from my local repository to Google Code.
    feat: Added brown dwarves to various Ember Waste systems (#4960)
    Added the file that specifies the star attributes.
    fix: Patching errors and typos in the new Cognizance missions (#5236)
    Fixed a typo that was preventing cargo text replacements in some pirate jobs
    Typos
    Normalized spelling of gases
    Remove the "endangered planets" easter egg
    Pirate jobs (#2646)
    
    * Pirate jobs
    
    * Removed reputation condition from normal jobs
    
    They aren't relavent to this PR anymore. Will be included in slavery PR.
    
    * Bounty hunters less likely to come after player...
    
    but will come after the player even if they only land on pirate worlds.
    
    * Changing pirate defense missions to offer in spaceports
    
    * Minor changes
    
    Not as likely to get the hardest stolen vessel to transport
    Wording changes in descriptions
    Removed redundant numbering on elminating law enforcement jobs
    
    * Illegal cargo related hail
    
    * New illegal cargo names (@comnom)
    
    * A bunch of changes
    
    Changed the `to offer` conditions on most of the jobs.
    * Only the smaller cargo jobs and the smallest passenger job offer with
    either a not-too-low pirate rep or a high combat rating.
    * Required combat ratings for jobs now correspond to levels, the lowest
    combat level requirement being ~5 (150) and the highest being ~8 (3000).
    
    Removed all mentions of "your crew" in `illegal` messages. Highly wanted
    passenger jobs now mention the cargo you must carry.
    
    Renamed slave transport jobs and reworked the descriptions. They now
    require a combat rating and positive pirate rep. Changed cargo name from
    "shackles and grub" to "slave food."
    
    Large law enforcement jobs now mention their size.
    Lowercased all instances of "militia" in descriptions and dialog.
    
    Reworded the description of large "Eliminating Competition" jobs.
    
    Raiding merchant jobs now require you to have a positive pirate
    reputation so your escorts don't attack you.
    
    Removed the ransom jobs.
    
    Fixed a typo. "Convoy at <system>" -> "Convoy near <system>"
    
    * Created highly illegal substance and cargo categories
    
    It doesn't make sense for jobs to sometimes consider a commodity illegal
    and sometimes highly illegal, so I've moved some of th commodities over
    into a highly illegal category.
    
    Yes, stolen silver spoons are highly illegal. You never know what
    pirates could do with those things.
    
    * Lowered the payment for each job, in some cases drastically
    
    Pirate jobs should be good, but not THAT good.
    
    * Replacing all "target" governments with the new target personality
    Added a first contact mission and jobs for Coalition space.
    Added more commodities, as usual
    Added a few commodities
    
    i also reorganized some of them to remain in alphabetical order (mostly in the garbage section).
    Fixed an educated asterisk and a missing newline.
    Added some more garbage materials
    Added support for special commodity classes, just to be used for random cargo in missions that is not one of the basic commodity types.
    Added a few commodities
    Added a few commodities
    Fixed a typo in hails.txt, and also some more electronics commodities
    More ship names, hails, and commodities.
    Spelling fix
    Merged @pointedstick and @anonybosch's commodity lists, also alphabetized the lists.
    Manually merged in the new commodity names from @Pointedstick.
    Oops, accidentally branched from the commodity branch instead of master
    Added a whole bunch more specific goods to the commodities list
    Added license statements to all the data files.
    Added specific named trade goods for each commodity, to be used as mission cargo.
    Renamed some of the data files, for clarity.
    feat(mechanics): Piercing resistance attribute for reducing the effect of incoming piercing projectiles (#4521)
    feat(mechanics): "Protection" attributes that mitigate a fraction of incoming damage (#4519)
    feat(mechanics): Support multipliers for shield generation and hull repair related stats (#4525)
    
    * Added multiplier attributes for shield generation and hull repair related attributes
    
    * Display multiplier attributes as percentages
    
    * Fixed tooltips
    
    * ShipInfoDisplay now takes multipliers into account
    
    * Don't show shield/hull repair stats if the multiplier is <= 0
    
    * Fixed accuracy of various calculations and updated hasShieldRegen and hasHullRepair
    
    * Hard coded a whitelist for the multipliers to allow them to be negative
    
    * Code simplification
    
    * Error fixes
    
    * Revert whitelist changes
    
    Let whitelist changes occur in a separate PR
    
    * Updated hasShieldRegen and hasHullRepair
    
    Negative costs no longer block repairs
    
    * Removed now unnecessary fuel calculations in ShipInfoDisplay
    
    * Update ShipInfoDisplay.cpp
    
    * Update ShipInfoDisplay.cpp
    
    * Moved variables back to their previous locations (as they're no longer needed to computer hasShieldRegen or hasHullRepair)
    
    * Use conditional operators instead of multiplying by a boolean
    
    * Change the wording in the tooltips
    
    * Added multiplier attributes to the whitelist
    
    Values down to -1 are allowed. This means that at their lowest value, multipliers will have a -100% effect on the specified stat. They can not go lower then this, because then they would be flipping the sign on whatever the stat is, e.g. causing a shield generator to go from consuming energy to producing it.
    fix: Corrected the ion damage / shot tooltip.
    
    Ref: #4933
    feat: Solar heat mechanic for increased heat generation the closer you are to the system center (#4894)
    feat: If not carried, fighters and drones are launched instead of sold (#4388)
    
    Co-authored-by: tehhowch
    fix: Various grammatical and spelling errors (#4724)
    feat(weapons): Support variable ammo quantity consumption (#4514)
    
    * Added an "ammo usage" weapon attribute that determines how many units of ammo are consumed on fire
    
    * Ammo usage now shows in the outfitter
    
    * Syntax change
    
    * Spacing
    
    * Spacing
    
    * Tidying up the code
    
    Removed the IsWeapon check from the display because any outfit with a >1 ammo usage is guaranteed to be a weapon.
    
    Used a conditional operator in Weapon.ccp to cut down on code.
    
    * Allow an ammo usage of 0
    
    The outfit must still be installed in order to fire.
    
    * Renamed ammoPair to just ammo and left a comment explaining what it is
    
    * Added another comment for clarification
    
    * #include <utility> in Weapon.h for the ammo pair
    feat: Implement maintenance and operating cost attributes  (#4596)
    
    * Added a maintenance cost outfit attribute
    
    * Maintenance costs will now show in the bank panel
    
    * Allow overdue maintenance to be paid off
    
    * Properly size the max rows if you have overdue charges but no crew or maintenance
    
    * Simplified output
    
    * Added an operating costs attributes
    
    * Overdue maintenance costs now impact credit score
    
    * Pay maintenance costs after crew salaries
    
    * Include the maintenance costs of in cargo outfits
    
    * Comment correction
    
    * Clean up
    
    * Code simplification
    
    * Check for > 0 credits instead of non-zero credits for the two crazy people who give themselves negative credits
    
    * Check in cargo outfits when landed and prevent net negative maintenance costs
    
    * Prevent negative costs for each ship and each outfit in cargo instead of preventing a total net negative.
    fix: Add missing tooltip for "movement:" (#4621)
    Add a "battery too small to fire weapon" flight check warning (#4177)
    
    that triggers if at least one weapon can't be fired because the ship's maximum available energy is too low
    Introduce new fuel-based Outfit attributes (#3870)
    
    Implements new reserved Outfit attributes `"fuel consumption"`, `"fuel generation"`, `"hull fuel"`, and `"shields fuel"`, and provides errors / warnings for poorly equipped ships using fuel for energy.
    Ships without fuel to jump display a "no fuel?" warning in Shipyard
    
    https://github.com/endless-sky/endless-sky/pull/3843
    * Add `no fuel?` warning
    
    * Add `no fuel?` tooltip
    
    * check against jump fuel
    
    * updated tooltip
    
    * `!canBeCarried` order
    
    * combined lines
    
    * improved no fuel tooltip
    
    * changed to "insufficient fuel"
    
    * JumpFuel()
    
    * fuelCapacity
    update 'hull disabled at' tooltips
    Add a "no hyperdrive" flight check.
    Added a tooltip for tactical scan power.
    Added a tooltip for the asteroid scanner.
    Add cloaking heat attribute (#2844)
    
    * Add cloaking heat attribute (#116)
    
    * Add cloaking heat tooltip (#117)
    
    * Cloaking should now be possible :P (#120)
    
    * Don't decloak just because heat is high.
    
    Otherwise, even a cloaking device with no "cloaking heat" would not work on a ship with 90% heat. Plus, if you overheat while cloaked, it's your own darn fault.
    Typo fix. (@Bladewood)
    Added "fuel damage" as a damage type.
    The "flight checks" now show up as warning icons and only block you if you try to take off with an unusable ship.
    Added more explanation to the cooling inefficiency tooltip.
    Fixed a typo in the cooling inefficiency tooltip.
    Switched resistance to using @Elyssaen's proposed mechanics (with no heat or piercing resistance, for now).
    Cleaning out more tooltips that are no longer used.
    Typo fix.
    Updating the tooltips to include "cooling inefficiency."
    Added support for ship attributes that confer resistance to heat, ion, disruption, or slowing damage.
    Added a tooltip for turret turn rate.
    Made the "max heat" tooltip a bit clearer.
    Solar power + regenerator compatibility (operational energy) (Ref #1879) (#1896)
    
    * Replaced negative energy generation with operational energy
    
    Shield regenerators now have positive 'operational energy' instead of
    negative energy generation, to avoid a problem where solar collection
    wasn't compatible with them.
    
    * Operational energy revisions
    
    1. Idle energy now considers operational energy.
    2. Flight check now considers operational energy, and returns a new
    conversation if you have negative energy even before checking thrusters.
    
    * Revisions to flight check for solar collection
    
    Added solar collection into flight checking, and added a new
    conversation if your ship runs the risk of becoming derelict too far
    from the system centre. Also fixed a <= that should be an <.
    
    * Changed 'centre' to 'center'
    
    * Tweaked conversation wording
    
    Replaced "system center" with "center of a system", and "steering" with
    "steering systems".
    
    * Renamed operational energy to energy consumption
    
    * Fixed a stray tab in tooltips.txt
    Made it possible to specify how much "jump fuel" a drive consumes.
    Added tooltips for the new scanner properties.
    Added tooltips for active cooling, and fixed some corner cases in the math.
    Updated the tooltips for "cost:" and "sells for:".
    Made the max energy / heat tooltip a bit more explicit about how the mechanics work.
    Tooltip implementation fixes. (@Alkallid, @MarcelineVQ)
    Added "tooltips" that pop up to explain ship and outfit attributes in the shop panels and the ship info panel.
    feat: Added new outfitter help dialogs describing purchasing outfits into cargo (#5126)
    Expanded on Disabled Hails (Fixed) (#3719)
    
    * Update hails.txt
    
    * Update hails.txt
    
    * Update hails.txt
    
    * Update hails.txt
    
    * Update hails.txt
    
    * Update hails.txt
    
    * Update hails.txt
    
    * Add help text for boarding friendlies to repair them
    
    * Added Hot Showers
    
    * Added Hot Showers
    
    * Delete hot shower.png
    
    * Update outfits.txt
    
    * Update hails.txt
    
    * Removed the shakespearean insult lists
    
    * Update hails.txt
    
    * Added some needed spacing
    
    * Update hails.txt
    More help for confused new players.
    Switched "Spaceport" to always being one word (even the button in the planet panel).
    Added a help message explaining how to set which escort is your flagship that is shown in the player info panel, the outfitter, or the shipyard the first time the player has multiple ships in their fleet.
    Typo Fix, @alkalid
    
    Universe can a dangerous place > universe can be a dangerous place
    Moved the basic new player help messages that are shown each day into a data file.
    Moved the beginner help messages out into a data file.
    Moved all ratings scales into a common "rating" data type to simplify the code for handling them. Also made it so the same rating level is shown in the text and the numbers for pirate raids, so the text changes at the same time as the number does.
    Convey raid fleet spawn likelihood via Player Info menu (#3087)
    
    * Move raid fleet attraction to PlayerInfo
    
    * Display raid fleet threat in PlayerInfoPanel
    
     - Roughly log-spaced tiers. The displayed number indicates the expected number of raid fleets per jump (if the system has a raid fleet).
     - If any raid fleets are spawned, a message is sent to the screen.
    
    * Display both cargo and strength components, textualize threat level
    
     - Shows each component of raid fleet attraction to the player
     - Gives a categorical rating of the number of raid fleets expected
    
    * Use likelihood of at least one raid as the threat indicator
    Moved the combat rating names to a data file.
    Revert "Merge branch 'RemnantGraphics' into Remnant-Puffin-Rename"
    
    This reverts commit 70f79e4505022a228b5dc6ce79a2f96780b8b500, reversing
    changes made to 048d210c723dacbf6008e9b05026c294e1000a4d.
    feat: Added a new, extremely rare minable asteroid (#4856)
    Spelling & Grammar Fixes
    
    #4255
    New space flora sprites
    
    - changed the previous "space flora" and "large space flora" into "stealth space flora" and "large stealth space flora respectively (as their sprite is transparent and hard to see.
    - Add new sprite for the both space flora and large space flora (these are the ones where the flora sticks out from the asteroid
    Space Flora Asteroids
    
    Adding the Space Flora asteroid (large and normal)
    Adding large sizes
    
    The large asteroids are simply the 2x images of the regular ones, but their stats are bigger (1000 more hull, double the payload. These are rough numbers.
    Fixing image names
    Adding three plant type asteroids
    
    Adding three Plant type asteroids:
    - Plant
    - Plant2
    - Plant Cluster
    
    All three drop the "Void Orchid" harvested material.
    These will be found in Nenia and a variety of Ember Waste periphereal systems
    Change Lead's description to be scientifically accurate
    
    #4221
    Fixed how harvested materials are shown when scanning a ship's cargo.
    Outfits can now explicitly define a "flotsam sprite" instead of repurposing the weapon icon for that.
    Added explosion sounds for the minable asteroids.
    Spiffing up the harvestable asteroid explosions a bit.
    Added images for each of the flotsam types that minable asteroids can create.
    Added "minable" definitions for asteroids for each minable resource type.
    Added outfit images for twelve different materials you'll be able to mine from asteroids.
    refactor(organization): Added subfolders to data (#4895)
    fix(organization): Moved Quarg/Pug names, hails, and fleets into their respective files
    refactor(organization): Added subfolders to data (#4895)
    feat: Hai surveillance fleets now patrol Hai space (#4823)
    
    Hai planets now have varying security levels as well.
    Added missing hails to alien governments
    
    #4553
    Luxury Accommodations and high-class passenger jobs (#3359)
    
    * Luxury Accomodations and high-class passenger jobs
    
    * Revert change to require Luxury Accommodations for Deep scientists;
    they're probably as strapped for cash 1000 years in the future as they
    are today
    
    * Match existing style for dashes used instead of commas
    
    * Update image to have a nice wooden bed and a patterned bedspread
    
    * - Gave Luxury Accommodations to the Blackbird by default, to match its description
    - Added luxury variants for the Arrow, Bounder, and Flivver
    - Added a few fleet options for luxury ships in the Core and the North
    
    * Reduced the number of passenger jobs that are gated behind owning Luxury
    Accomodations
    
    * Restored original formatting for Hai tourist jobs' payment syntax
    
    * Typo
    
    * Adjust Quantum Keystone description to hint at the jobs it helps unlock
    
    * Bring some of the variants up-to-date with recent missile changes
    Added three new Hai ships
    
    #3314
    Improve likelihood that "plunders" fleets can plunder (#3610)
    
    * Improve likelihood that "plunders" fleets can plunder
    
     - Default fleet cargo tries is 3, which results in mostly-filled cargo holds (and therefore an inability to plunder)
     - Added `harvests` to the Korath Raid fleet so that it will care about the jettisoned cargo from injured Remnant and Merchant fleets
    
    * Plundering ships with full cargoholds no longer act as though they should plunder
    add a new Hai Hand to hand weapon  (#3529)
    
    * add rifle sprite
    
    * added base stats
    
    * add rifle to base hai ships
    
    * add rifle to outfitters
    
    * basic description
    
    * better description
    
    * Update copyright
    
    * description fix
    
    * different rifles per ship
    
    * make the description sound more professional
    
    * change beings to species
    
    * feedback fix
    
    * adjusted number of rifles to better match ships purpose
    
    ships used to invade wanderer space fully loaded
    adjusted base ships to have available ones empty
    
    * number adjustment
    Made fuel pods for sale in Hai space.
    Made some of the more militaristic fleets have "opportunistic" turret gunners.
    Reducing the frequency and payout of some Hai jobs, because the small map area already makes them much more lucrative. Also added some "hidden" jobs that require you to install a seemingly useless item on your ship in order to be offered them.
    Added bunk rroms to the "Hai Advanced" outfitter.
    Made bunk rooms available for sale in Wanderer and Hai space.
    Replaced the "Mass Expansion" with an "Outfit Expansion" that adds the same outfit space but also interferes with your ship's cooling if you install a lot of them.
    More hails (#2129)
    
    * New bounty hails
    
    Gave the ships designated as "bounty" it's own dialogue, for more
    diversity.
    
    * New friendly unfettered hai hails
    
    Because sometimes, they are friendly, I gave the unfetered hai some
    friendly hails
    
    * Corrections
    
    * Fixed double spacing issues
    
    in theory
    
    * Fixed the latest mistakes. Again.
    Ammo storage (#1852)
    
    * Add files via upload
    
    * Capacity increasing outfits
    
    * Boundary change
    More Wanderer missions.
    0.9.2 updates
    Added a Shield Beetle variant with lots of pulse cannons.
    re-added " Turrets" to "Pulse"
    
    oops
    re-balance anti-missiles, batteries
    ships and sales
    
    with new engine nomenclature
    new pebble core and nomenclature
    regenerators spec'd
    
    to be about 1.4x their Syndicate counterparts, but creating slightly
    more heat, only when recharging…
    Defined final explosion sounds for all ships, and also cleaned up the ships.txt definitions a bit.
    copyright date update
    sales
    re-equipped ships
    
    fixed a couple of sales issues
    shortened A5 engine names to avoid collision
    gorge battery description grammar fix
    nomenclature
    Moved hai ships and variants into a extra file
    Added hai-outfits, added them to outfitters, added them to ships
    Moved all the government definitions into one file and alphabetized them, so it's easier to locate one of them.
    Added a Wanderer mission string that gives you access to most of their ships.
    Typo fix.
    Grammar fixes.
    Replaced space at end of phrase with full stop.
    Added the Wanderer fleet definitions for all their systems.
    Grammar correction
    correction
    Hostile Hai/Hai (Unfettered) hail
    
    Added hostile hails for both types of Hai
    Fixed the negative outfit space for the Lightning Bug with pulse turrets.
    The Water Bug had the wrong type of anti-missile turret specified for its hardpoints.
    Added another Wanderer ship.
    Increased the explosion counts for the Hai ships.
    Increased the cost of the Shield Beetle ship.
    Switched the Hai Unfettered to having the "plunders" behavior, like other pirates.
    Added some more outfits to the Hai outfitters.
    Added shipyard and outfitter descriptors for the Hai.
    Added fleet descriptors for the Hai (Unfettered).
    Added one more Hai ship, the Shield Beetle.
    Added another ship for the Hai.
    Added another ship for the Hai - the "Aphid" light freighter.
    Added another new weapon for the Hai: the Tracker, a fast, long-range missile that is not very effective up close due to its large turning radius.
    Added a new weapon for the Hai, the Pulse Cannon / Turret. Also added an icon to use for outfits (especially of alien origin) that have no thumbnail yet.
    Added a ship for the Hai aliens, along with ship names and friendly hail messages.
    feat(balance): Further tweaked the Archon vs Puffin experience (#5321)
    fix(content): Gave a velocity override to the Drak Draining Field so that Archons properly use it
    feat(content): Added a description to the Archon (#5274)
    feat: Updated the Drak Draining Field (#4977)
    
    The Draining Field now acts more like an aura and pushes away any nearby ships, which can help during the Void Sprite missions.
    refactor(organization): Added subfolders to data (#4895)
    feat: Added variant Archon images (#4687)
    Added shipyard thumbnails for the remaining ships that didn't have them yet
    
    #4377
    Organized ship, outfit, and effect attributes to be consistent
    
    #3868
    Issue deprecation warnings & simplify some code (#4000)
    
    * Fix osx compile warning
    
    * Emit warnings for deprecated turret specs and homing w/o tracking
    
    * Require ranges / radii to be non-negative
    
    * Replace implicit defaults with explicit values
    
    * Handle deprecated "cargo scan" and "outfit scan"
    
    * Replace locally repeated code with local lambda
    Use add attributes (#3483)
    
    * Use "add attributes" to simplify Kestrel definition
    
    * Use "add attributes" to simplify Marauder variant definitions
    
    * Simplify "Archon (Cloaked)" definition
    
    * Simplify "Deep River <N>" definitions
    
    * Avoid variant definition using a variant as its base
    
     - Without dependency checking in FinishLoading, if a variant references another variant as its base model, there is no guarantee the base variant is fully defined yet
    Restore Archon (Cloaked) turret assignments
    Added two weapon modifiers: "safe," meaning the blast radius only hits hostile ships, and "phasing," meaning the projectile is not blocked by asteroids or other ships.
    Added a defender for the Void Sprites.
    Made it possible to specify a ship's "noun," so the game can refer to it as a "creature" instead of a "ship." Also added an "inscrutable" attribute that makes it impossible for you to scan a ship's outfits.
    Defined final explosion sounds for all ships, and also cleaned up the ships.txt definitions a bit.
    Outfits that repair shields or hull must now specify how much energy the repair takes.
    Added a Drak ship, with various weapons.
    fix(typo): Update the infant void sprite description (#5249)
    
    Referenced in https://discordapp.com/channels/251118043411775489/536900466655887360/746482315663900692 on the ES discord
    feat(content): Add Remnant Cognizance missions (#4871)
    
    Summary
    
    A new mission set continuing the story of the Remnant and void sprites, in which the Remnant conduct more research, discover a hostile presence hunting the void sprites, and the Remnant embark on a means of preserving them. Meanwhile, something strange appears in the Ember Waste.
    
    Adds:
    
        14 visible missions (and 1 invisible mission)
        1 new ship (the ember waste node - not acquirable)
        6 new systems (5 are present from the start, 1 appears via event)
        1 new visit-able station (found in the system that appears via event)
        3 new wormholes (1 are present from the start, 2 appear via event)
        Makes all the remaining planets in the Remnant trio of systems visitable gas-giants.
    
    Lore implications:
    
        The Remnant know how to lure and capture void sprites
        The ability to create quasi-cloaking effects on a station-sized scale is fairly old Remnant tech. (quasi-cloak as in making the subject ghost-like, insubstantial, and virtually invisible to sensors)
        The Remnant know how to build space stations in gas-giants (at least, in the upper atmosphere, but deep enough to require gaslining)
        There is another entity that seems particularly interested in the Void Sprites, but is unknown, aside from demonstration hints at telepathy (nowhere near as coherent or refined as the Archons, though).
        There was a hidden system in the Ember Waste.
    
    
    Co-authored-by: Amazinite <jsteck2000@gmail.com>
    Co-authored-by: Anarchist2 <60202690+Anarchist2@users.noreply.github.com>
    Co-authored-by: Arrow2thekn33 <33186717+Arrow2thekn33@users.noreply.github.com>
    Co-authored-by: Nate Graham <pointedstick@zoho.com>
    Co-authored-by: Wizrad <jbw3636@gmail.com>
    Co-authored-by: Becca Tommaso <tommasobecca03@gmail.com>
    feat: Gave the void sprite "mouthparts?" a sprite (#5170)
    fix: The Subsidurial can now spawn in systems without a planet to launch from (#5104)
    Revert "Merge branch 'RemnantGraphics' into Remnant-Puffin-Rename"
    
    This reverts commit 70f79e4505022a228b5dc6ce79a2f96780b8b500, reversing
    changes made to 048d210c723dacbf6008e9b05026c294e1000a4d.
    refactor(organization): Added subfolders to data (#4895)
    feat(person): The Subsidurial, a spacefaring organism (#4785)
    Update indigenous.txt
    Void Sprite Elder Thumbnail.
    
    Adding a Shipyard thumbnail for the Void Sprite Elder. (No, not planning on ever having it for sale - but just so that it fits in for all-ship plugins or whatnot)
    Improving the VSE
    Original Sprites
    
    Making them better! (faster frame rate, and original size pictures. These things are now *huge*
    Void Sprite Elder
    
    Trying out the Void Sprite Elder at 38% of originally provided size.
    Added death effects for Void Sprites.
    NPC & Personality error reporting & fixes, for jobs & missions (#3000)
    
    * Add error output for NPC::Load to help content creators
    
    * Fix Pirate Job NPC definitions
    
     - `distance` is not a valid NPC node - it needs to be a child node of a `system` node.
     - More explicitly stagger the NPC arrival times
     - Replace `Bounty` with Pirate and `marked`.
     - Use `entering` with `system destination` when multiple NPCs that are not `staying` are started in the destination, to force one to arrive after the other.
    
    * Escort NPC fixes & updates
    
     - Fixed erroneous `distance` nodes when used directly under `npc`.
     - Removed unneeded `waiting` personality use (if an NPC is hostile to the planet, it will not take off from the planet).
     - Added non-default confusion values to Tiny, Small, and Medium escort opponents, to ease the player into combat, rather than immediately pit them against highly accurate, skilled Pirate pilots.
     - Escort mission pirates are now able to be distracted via cargo jettisoning.
     - The smallest "Escort to ..." missions phase out as the player becomes stronger.
     - High-value Marauder missions are now rarer.
     - The strongest Marauder mission will pursue the player beyond the boundary, as will the Marauder hunters
     - Ordered NPC definitions: npc -> gov -> personality -> location -> fleet(s).
    
    * Add error output for invalid Personality values
    
    * Missed offer changes
    Made it so certain planets will only show up as something you can land on if your ship has certain attributes.
    Added a sound effect for Void Sprites chewing on things.
    Made it possible to specify a ship's "noun," so the game can refer to it as a "creature" instead of a "ship." Also added an "inscrutable" attribute that makes it impossible for you to scan a ship's outfits.
    Added checks for references to undefined data (systems, outfits, etc.).
    Added a space-dwelling organism, the Void Sprite (not currently on the map anywhere).
    refactor(organization): Added subfolders to data (#4895)
    Organized ship, outfit, and effect attributes to be consistent
    
    #3868
    The Korath Nanobots now have their own, always-hostile government.
    Added an effect for systems infested with nanobots that try to "digest" your ship.
    refactor(organization): Added subfolders to data (#4895)
    Added the hyperdrive to Efreti outfitters
    
    #4619
    Remnant Content - Jump Drive (Broken)
    
    #4154
    Add Korath Fuel Processor (#3570)
    
    * Add Korath Fuel Processor
    
    * Removed redundant empty lines
    
    * Buff the Korath Fuel Processor a little
    
    to make it more expensive and more compact and to give it the new description
    
    * Give the Korath Fuel Processor to World-Ships and Raiders
    
    * Add Korath Fuel Processor to variants
    
    * Add Korath Fuel Processor to Korath Basics outfitter
    
    * Korath Basics cleanup
    
    Took out the Fuel Pod since it's outdated tech.
    
    * Removed "Korath" from the "Fuel Processor"
    
    * Remove "Korath" from the "Fuel Processor"
    
    * Remove "Korath" from the "Fuel Processor"
    
    * Adjusted the price back to 400k
    
    * Reorder according to tehhowch's suggestion
    
    As per https://github.com/endless-sky/endless-sky/pull/3570/files/b92d30adcc35f7cf49ec9023b2d9da43fcf179fe#r161937635
    
    * Change description, replace spaces with tabs
    
    * Change "pod" to "storage" in the description
    
    to give more freedom in creating graphics
    
    * Upload Brick63's outfit image
    
    for the fuel processor
    
    * Give Brick63 credit for the fuel processor image in the copyright.txt
    
    * Give the fuel processor its new sprite
    Improve likelihood that "plunders" fleets can plunder (#3610)
    
    * Improve likelihood that "plunders" fleets can plunder
    
     - Default fleet cargo tries is 3, which results in mostly-filled cargo holds (and therefore an inability to plunder)
     - Added `harvests` to the Korath Raid fleet so that it will care about the jettisoned cargo from injured Remnant and Merchant fleets
    
    * Plundering ships with full cargoholds no longer act as though they should plunder
    Made the Korath automata non-heroic so they're less likely to form enormous mobs.
    Made some of the more militaristic fleets have "opportunistic" turret gunners.
    Shortening events with add variant (#2571)
    
    * first 3 fleets done
    
    * finshed with human events
    
    * wanderer/hai/korath events
    
    * adding a space I missed
    
    * corected the frequency of world ships
    
    * Revert "corected the frequency of world ships"
    
    This reverts commit 92fab0b55ec2b8a773bd3f7be6dfcfe5fad7629e.
    
    * "corrected" the correct fleet
    
    changed kor efret home in the last change
    Replaced the "Mass Expansion" with an "Outfit Expansion" that adds the same outfit space but also interferes with your ship's cooling if you install a lot of them.
    Added a "Model 8" Kor Mereti mining drone.
    Ammo storage (#1852)
    
    * Add files via upload
    
    * Capacity increasing outfits
    
    * Boundary change
    Made it possible to limit what commodities a fleet can carry, and put limits on the Korath drone cargo.
    Changed how sub-phrases work in names and hails, so you can specify multiple sub-phrases to choose between.
    Tweaking the Kor Sestor fleets a bit for better balance.
    0.9.2 updates
    Made the Tek Far 109 a bit more common.
    Adjusted the Kor Mereti fleets so on average they have the same value as the Kor Sestor fleets.
    Update my master (#1)
    Made the Kor Mereti fleets a bit less powerful so they won't always beat the Kor Sestor.
    Added the Kor Mereti fleet definitions.
    Added a final Kor Sestor ship.
    Added definitions for large Kor Sestor fleets.
    Added the third Kor Sestor carrier.
    Added another Kor Sestor carrier.
    Added one of the Kor Sestor carrier variants.
    Added some Korath outfitters and fleets, and adjusted their colors.
    Moved some Korath data into a separate "korath.txt" file.
    feat(content): Added jobs, spaceport missions, and more news to Kor Efreti worlds (#5219)
    feat: Planets that are being actively evacuated during Wanderer Start no longer have jobs as the source or destination
    
    It was a little odd bringing a bunch of younglings *to* a planet that is being evacuated.
    refactor(organization): Added subfolders to data (#4895)
    Implemented the Riptide into the Wanderer campaign
    
    #4626
    Added missing hails to alien governments
    
    #4553
    typo fix: ecoystems -> ecosystems
    Typo fixes (#3471)
    
    * Travelled -> Traveled
    
    * Travelled -> Traveled
    
    * Traveller -> Traveler
    Wanderer hail diversification (#3284)
    
    * Wanderer hail diversification
    
    Added a bit of diversity to the wanderer hails, that could otherwise get
    very repetitive late-game
    
    * fixed inconsistency
    
    * Syntax fixes
    
    * More fixes, and additions
    
    added variety, and removed a wrong comma on one of the possibilities
    
    * Addtions
    
    * Fixed a gramar issue
    Use <waypoints> substitution (and quote a few user-customizable tokens)
    Made it so that wormhole links are only drawn if the planet has a description. (This makes it possible to create wormholes that NPCs land on but that don't have links drawn.)
    Implement add/remove syntax for the Wanderers campaign (#2779)
    
    * Add/Remove for system fleet definitions in wanderers.txt
    
    * Add/Remove for system fleet definitions in wanderers start
    
    * Add/Remove for system fleet definitions in wanderers middle
    Shortening events with add variant (Wanderer Defense + Mk2 Republic) (#2593)
    
    * 'Add/Remove Variant' applied to fleet "Wanderer Defense"
    
    Refs #2571
    
    * 'Add/Remove Variant' applied to fleets "Small/Large Republic".
    
    Rather than declare the entire fleet anew, use the new dynamic syntax to avoid squashing possible content from plugins.
    Refs #2571
    
    * Drop unused weight specifier from "remove variant" syntax
    
    * Limit needed "remove variant" uses
    Made some of the more militaristic fleets have "opportunistic" turret gunners.
    More Wanderer hails. (#2556)
    
    * More Wanderer hails.
    
    Added hostile wanderer hails, and hostile disabled wanderer hails as per
    #2526.
    
    * @Amazinite's suggested revisions in #2556
    
    * @endless-sky's suggested revisions in #2556
    Made bunk rooms available for sale in Wanderer and Hai space.
    Replaced the "Mass Expansion" with an "Outfit Expansion" that adds the same outfit space but also interferes with your ship's cooling if you install a lot of them.
    Added the next segment of the Wanderer story line.
    Ammo storage (#1852)
    
    * Add files via upload
    
    * Capacity increasing outfits
    
    * Boundary change
    Made it so if a government has an "attitude toward" another government of less than +-5%, it has no permanent effects on your reputation. (This is so two governments can be at war without making it so that if you attack one, eventually the other will like you.)
    Made it so Wanderer ships will travel through the Eye.
    Fixed part of the "wanderers: more systems lost" event
    The Unfettered attacks on Ap'arak now die down once they realize they can't stand up to the Pug.
    Also made the wanderer heat sink available when the Derecho goes on sale.
    Made the Blue Sun reactor available along with the Derecho.
    Another typo.
    Typo fix.
    Added a planet definition for "The Eye" so it can be marked as visited when you travel through it.
    Finally got the darn wormhole open. The first section of the Wanderer story line is now complete.
    More Wanderer missions.
    Adding more Wanderer missions.
    Fixed a few mission typos.
    Typo fix. (@toilethinges)
    The Unfettered invasion now changes the description of Varu K'est and blocks the Unfettered jump drive missions.
    0.9.2 updates
    Patched the Unfettered invasion event, which was incomplete previously.
    Fixed a typo that was keeping the Wanderer Anti-Missile from being offered for sale.
    Finished up the intro Wanderers plot line.
    Added a Wanderer ramscoop.
    Added a new Wanderer ship, the Flycatcher (an autonomous anti-missile drone).
    Added a new Wanderer ship and several new weapons to go along with it. (These will be unlocked by missions.)
    Made all weapons except for missiles deal 1/3 less hull damage, to fix the balance where hull seems way too weak compared to shields.
    Outfits that repair shields or hull must now specify how much energy the repair takes.
    Fixed Typo
    
    "...are... that splits" -> "...are...that split"
    Added an event for when the Wanderer wormhole opens.
    Added an "automaton" ship attribute that allows it to not require any crew to pilot it. Also updated the Wanderer automaton to have some cargo space, so there's some legitimate reason for the player to want one.
    Moved all the government definitions into one file and alphabetized them, so it's easier to locate one of them.
    Added a Wanderer mission string that gives you access to most of their ships.
    Upped the cargo and outfit space of the Summer Leaf to make it a bit more versatile.
    Made local maps available in the Wanderer outfitters.
    Fixed the price of the Wanderer type 4 thruster.
    Fixed the mass of the White Sun reactor to match the outfit space.
    Added more to the Wanderer mission string. Nearly done with the initial diplomacy missions.
    Added Wanderer hails (random untranslated gibberish).
    Added images for the remainder of the Wanderer outfits.
    A species can now be marked as speaking a different, possibly unknown language.
    Added the Wanderer shipyards and outfitters.
    Added the Wanderer fleet definitions for all their systems.
    Added the Wanderer territory to the map.
    Added images for the Wanderer biochemical reactors.
    Fixed some other ships with negative space.
    Added two more Wanderer outfit images.
    Added images for the Wanderer reactor cores.
    Added sounds for some alien weapons, and made the landing sound less loud.
    Added another Wanderer ship.
    Switched the Wanderers to using all their own unique technologies for engines, generators, and shields. (None of them have outfit images yet, though.)
    Added another Wanderer ship.
    Fixed the hardpoints for one of the Wanderer ships.
    Working on a new alien species, the Wanderers.
    feat(organization): Moved the Pug systems to their own file by the current map file
    feat(mechanics): New enginepoint types and support for over/under and angled engine flares (#4539)
    fix: The fleets in Pug Iyik now match the government of the system
    refactor(organization): Added subfolders to data (#4895)
    fix(organization): Moved Quarg/Pug names, hails, and fleets into their respective files
    revert: Changed part of the previous commit; the Arfecta can now spawn at any time
    
    The only reason there use to be a restriction stopping it from spawning during the main campaign was because the two Pug governments were the same. With the governments being distinct now, the Wanderer Pug would be free to send an Arfecta at the player at any time.
    feat: The Pug that watch over the Wanderers are now a distinct government from the Pug that invade human space
    
    * This means that the player can visit the Pug by the Wanderers during the main plot and not be hostile with them, showing how the two groups are distinct from one another.
    * The Arfecta spawn for farming these Pug will now only occur after the main plot. In-universe wise, the Pug (Wanderer) don't really want to kill off the player lest it mess with the plans of the Pug that invade human space. (The player is an important character in the ending of the war.) Balance wise, it locks gaining an Arfecta to a post-main plot achievement.
    feat: Uninhabited planets do not fine by default (#4512)
    
    * Uninhabited planets now never fine the player
    
    * Error fix
    
    * Removed security 0 from Ruin
    
    * Added a flag to check if the security of an uninhabited planet was changed
    
    * Spacing
    
    * Name changes
    
    * Improved readability
    Added an offensive Pug H2H weapon
    
    #4563
    New Pug Gridfire Turret and T3 anti missile image (#4196)
    
    * Update pug.txt
    
    * Update copyright
    
    * Add files via upload
    
    * Add files via upload
    
    * Update pug.txt
    
    * Delete pug gridfire turret.png
    
    * Add files via upload
    
    * changed description for the turret (thanks jafdy)
    
    * Added T3 AMT
    
    * Add files via upload
    
    * Delete pug gridfire turret.png
    
    * Uploaded image to fit 2x
    
    * Update pug.txt
    
    * Delete pug gridfire turret.png
    
    * Add files via upload
    
    * Update copyright
    
    * Description correction
    
    * Delete T3 anti missile.png
    
    * Updated image for better resolution
    
    * Update data/pug.txt
    
    Co-Authored-By: beccabunny <45330165+beccabunny@users.noreply.github.com>
    
    * Update copyright
    
    Co-Authored-By: beccabunny <45330165+beccabunny@users.noreply.github.com>
    
    * Update copyright
    
    Co-Authored-By: beccabunny <45330165+beccabunny@users.noreply.github.com>
    
    * Update copyright
    
    Co-Authored-By: beccabunny <45330165+beccabunny@users.noreply.github.com>
    
    * Update copyright
    
    Co-Authored-By: beccabunny <45330165+beccabunny@users.noreply.github.com>
    
    * Update data/pug.txt
    
    Co-Authored-By: beccabunny <45330165+beccabunny@users.noreply.github.com>
    
    * Update copyright
    
    * Delete T3 anti missile.png
    
    * Delete pug gridfire turret.png
    
    * Better hardpoints
    
    * Update pug.txt
    
    * Delete T3 anti missile.png
    
    * Removed capitalization
    
    * Delete T3 anti missile.png
    
    * Add files via upload
    
    * Update pug.txt
    
    * Update copyright
    
    * Update copyright
    
    * modified description
    
    * Update pug.txt
    
    * Update pug.txt
    
    * Update pug.txt
    
    * Update pug.txt
    Added shipyard thumbnails for Pug ships
    
    #4180
    Attacking mission Arfectas is not unnoticed (#3583)
    
    * Improve combat effectiveness of Pug Arfecta
    
     - dropping "heroic" and adding "unconstrained" allows the ship to retreat and cloak to repair, or pursue a "lesser species" that has invoked the wrath of the Pug
     - Gridfire "firing force" and innate Lohmar-quality reverse thrusters help the Arfecta better keep its distance from swarms of enemies
    
     - Attacking an Arfecta will provoke the Wanderers, but not necessarily set the reputation negative
     - Capturing / killing both mission Arfectas will significantly damage player rep with the Wanderers.
    
    * Add a dialog when the two mission Arfectas are destroyed (@temtemy)
    
     - Make it clear to the player that they are now an enemy of the Wanderers
    
    * Alter conversation to allow for Arfecta capture case
    
    * Wanderers will assist the Pug in battles
    (including against the player)
    
    * Typo fix (@Bladewood)
    Organized ship, outfit, and effect attributes to be consistent
    
    #3868
    Added unique explosions for Pug ships
    
    #3957
    Reduced the turn rates of most turrets, making it so the heaviest ones have trouble tracking fast ships.
    Add "Pug Wormhole" planet definition (#3138)
    
    * Do not warn for wormholes that are finished via GameEvent
    
     - Wormhole "planets" are given a system, but unless also defined with a `planet` entry, would not pass GameData::CheckReferences until the wormhole was linked to another system
    
    * Add empty planet definition for the Pug Wormhole
    
     - Revert change from previous commit that extended GameData::CheckReferences for planets to check for a lack of system too.
    Reorganizing the human, Hai, and Pug data so that weapon effects are always defined right after the weapon, instead of in a separate "effects.txt" file.
    Reduced the top speeds of some missiles to compensate for the 10% speed boost provided by #2592.
    Added two weapon modifiers: "safe," meaning the blast radius only hits hostile ships, and "phasing," meaning the projectile is not blocked by asteroids or other ships.
    Added turn rates for all the turrets in the game. Smaller turrets track faster, in general.
    Added hardpoint sprites for all the turrets that didn't have one yet and that did have an outfit sprite already.
    Added the ability to specify plural forms of outfit and ship model names.
    pug outfit sprites (#1837)
    
    * pug zapper sprites
    
    * filename spacing
    
    * pug akfar sprites
    
    * pug cormet sprites
    
    * pug biodefenses sprites
    
    * pug anti-missile sprites
    
    * filename typo
    
    * pug lohmar sprites
    
    * cleanup
    
    cleaned up sloppy painting, made the red more subtle, reduced red in
    most outfits, brightness work on the various textures for a more
    consistent final color across outfits, fixed off-center spikes in akfar
    steering
    
    * pug seeker sprites
    Made the flicker in the pug zapper be part of the animation, rather than a reload of 2, so the sound effect will play correctly.
    Made the "Pug Cease Hostilities" mission invisible.
    Fixed misplaced engines on the Pug Maboro.
    Tweaked the appearance of gridfire slightly.
    Regularizing the names for size progressions to always be tiny < small < medium < large < huge. (Replacing "big" with "large" in some places.)
    Starting to work on the next series of Wanderer missions.
    Defined final explosion sounds for all ships, and also cleaned up the ships.txt definitions a bit.
    Adjusting some weapon prices for better balance (e.g. so laser turrets cost more than blaster).
    Homing weapons can now have different tracking modes: better against big ships (optical), against hot ships (infrared) or against ships with no radar jamming.
    Made the gridfire effect a bit more impressive, to better match the damage it does.
    The Pug in Wanderer space now react to being farmed.
    Added support for anti-missiles to create effects at the turret and at the projectile, in addition to the beam connecting the two.
    Marked all hand-to-hand weapons as unplunderable so there does not need to be a special case to handle them.
    Made all weapons except for missiles deal 1/3 less hull damage, to fix the balance where hull seems way too weak compared to shields.
    Outfits that repair shields or hull must now specify how much energy the repair takes.
    Fixed a bug in the "source" for the new Pug landing mission.
    Added a Pug system in Wanderer space.
    Added a "Medium Warship" category, and moved some ships into it.
    Added various alien sounds.
    Cleaning up some unused sounds, and regularizing the names of others to use spaces instead of underscores.
    Set the "security" for Ruin to 0 so you never get fined there.
    Updating some of the weapon effects to be more detailed.
    Made it so that planets marked with the "uninhabited" attribute will not offer trading, jobs, or a bank.
    Made turret weapons (aside from anti-missiles) increase your required crew by 1. (This gives you the option to have cheap freighters if you don't care about giving them weapons.)
    Added a new weapon for the Hai, the Pulse Cannon / Turret. Also added an icon to use for outfits (especially of alien origin) that have no thumbnail yet.
    Typo fix.
    Added descriptions for all the Pug outfits, and fixed a few other problems with them (incorrect categories, prices, etc.).
    A boatload of typo fixes.
    
    These come from siccing "ispell" on the data dir.
    Wrapped up the Pug segment of the Free Worlds endgame.
    Adjusted the Pug ship prices so that they are equivalent in price to the human ships that are equal to them in battle. (So that if you capture a pug ship, the crew bonus is not too exorbitant.)
    Added the first Pug battle (and also made the Pug ships a bit stronger).
    Added data for the Pug outfits and ships, and for their "home" system.
    feat(content): Added fuel pods and bunk rooms to Coalition outfitters (#5410)
    add variants to fleets
    feat: New Heliarch turret (#4948)
    refactor(organization): Added subfolders to data (#4895)
    Fix formatting on one of the new Heliarch hails
    Added missing hails to alien governments
    
    #4553
    Added a Heliarch scanning module
    
    #3893
    add newline to the end of coalition.txt (#4175)
    Luxury Accommodations and high-class passenger jobs (#3359)
    
    * Luxury Accomodations and high-class passenger jobs
    
    * Revert change to require Luxury Accommodations for Deep scientists;
    they're probably as strapped for cash 1000 years in the future as they
    are today
    
    * Match existing style for dashes used instead of commas
    
    * Update image to have a nice wooden bed and a patterned bedspread
    
    * - Gave Luxury Accommodations to the Blackbird by default, to match its description
    - Added luxury variants for the Arrow, Bounder, and Flivver
    - Added a few fleet options for luxury ships in the Core and the North
    
    * Reduced the number of passenger jobs that are gated behind owning Luxury
    Accomodations
    
    * Restored original formatting for Hai tourist jobs' payment syntax
    
    * Typo
    
    * Adjust Quantum Keystone description to hint at the jobs it helps unlock
    
    * Bring some of the variants up-to-date with recent missile changes
    Another space moved
    Specifically the space after "Heliarch" in the second hostile hail
    Moved spaces, periods, and ! to their own words
    As KiLEdEnNis suggested. Changed too the friendly hails for consistency.
    Undo one unintended change
    I accidentally made "the capacity have" to "capacity have"
    Suggested fixes by tehhowch
    Moved some parts to its own place to solve the problem of duplication
    Added 3 hostile Heliarch hails
    Made some of the more militaristic fleets have "opportunistic" turret gunners.
    added Local Map to coalition & heliarch outfitters
    
    Note: the heliarch outfitter is not used in v0.9.6 at all, but I changed it as well for consistency. Currently, every planet outside coalition space which has an outfitter, sells the Local Map
    Replaced the "Mass Expansion" with an "Outfit Expansion" that adds the same outfit space but also interferes with your ship's cooling if you install a lot of them.
    Moved the Coalition governments into the main government list, and made non-Heliarch ships speak an unknown language.
    Added names for all the Coalition ships.
    Added friendly hails for the Heliarchs.
    Made it possible to get access to Coalition shipyards and outfitters, once you have completed enough jobs in their space.
    Took out the previous colors I tried for the Heliarch and Coalition.
    Added variants for all the Heliarch ships.
    Added civilian fleet definitions for the Coalition.
    Added the Heliarch warships.
    fix: Gave the Auxiliary the correct license requirements and made available in Navy shipyards (#5137)
    refactor(organization): Added subfolders to data (#4895)
    Added advanced pirate shipyards
    
    #4578
    Brig and prisoner transport jobs (#3347)
    
    * Bounty hunter and prisoner transport jobs, and a new outfit to unlock them
    
    * Copyright info
    
    * Quote government and attribute tokens
    
    * Moved the prisoner transport jobs with the rest of the passenger jobs
    
    * Relocated all bounty hunting jobs (including the new ones) to the end,
    with the other bounty hunting jobs; now they're all in the same place
    
    * For all new and relocated bounty hunting jobs, quoted tokens and made
    them available on independent worlds
    
    * Adding Brigs to a few variants
    
    * Adjusted the outfit's description
    
    * Removed an accidental double Brig on one of the variants
    
    * Address review comment by quoting "Pirate"
    
    * Address review comments
    
    * Address review comments
    
    * ++Supercapacitor  --Small Radar Jammer
    Luxury Accommodations and high-class passenger jobs (#3359)
    
    * Luxury Accomodations and high-class passenger jobs
    
    * Revert change to require Luxury Accommodations for Deep scientists;
    they're probably as strapped for cash 1000 years in the future as they
    are today
    
    * Match existing style for dashes used instead of commas
    
    * Update image to have a nice wooden bed and a patterned bedspread
    
    * - Gave Luxury Accommodations to the Blackbird by default, to match its description
    - Added luxury variants for the Arrow, Bounder, and Flivver
    - Added a few fleet options for luxury ships in the Core and the North
    
    * Reduced the number of passenger jobs that are gated behind owning Luxury
    Accomodations
    
    * Restored original formatting for Hai tourist jobs' payment syntax
    
    * Typo
    
    * Adjust Quantum Keystone description to hint at the jobs it helps unlock
    
    * Bring some of the variants up-to-date with recent missile changes
    Proton Turret (#3316)
    
    * Proton Turret
    
    * Corrected mass to match space taken up
    
    * Made sure that the new (Proton) variants appear in alphabetical order
    
    * Review feedback
    
    * Reduced to 34 tons (giving it effectively a 6-ton base and mount), which
    should hopefully make it a bit more attractive
    
    * Added copyright info
    
    * Updated hardpopint image (drop shadow, correct lighting)
    Added a "tactical scanner" that shows additional information about your target.
    Added an "asteroid scanner" outfit. Also made it possible for turrets to track minable asteroids and for target "crosshairs" to have something other than 4 points.
    Replaced the "Mass Expansion" with an "Outfit Expansion" that adds the same outfit space but also interferes with your ship's cooling if you install a lot of them.
    Removed the lists of special outfits and alien ships. The all-content plugin is the preferred method for getting those, and this avoids having to keep two lists up to date.
    Ammo storage (#1852)
    
    * Add files via upload
    
    * Capacity increasing outfits
    
    * Boundary change
    Added two Wanderer heavy warship models.
    hai carriers + gatling gun +rail gun (#1284)
    
    Added the Hai carriers, Gatling guns, and railguns (@Amazinite, @LocalGod79, @mdsmestad, @Wrzlprnft).
    0.9.2 updates
    Androids are no longer sold anywhere; they're just way too unbalanced.
    Added two radar jammer outfits.
    Added a new Wanderer ship, the Flycatcher (an autonomous anti-missile drone).
    Made the Slicer available in non-turret form, and added outfit images for it.
    Update my master (#1)
    Added the Kor Mereti ships (6 sizes).
    Added a final Kor Sestor ship.
    Fixed the category of the Sunbeam turrets.
    Added the last new Korath weapon, the Slicer turret.
    Added another Korath weapon, the Disruptor.
    Added the largest Kor Sestor warship.
    Added support for anti-missiles to create effects at the turret and at the projectile, in addition to the beam connecting the two.
    Added the third Kor Sestor carrier.
    Added another Kor Sestor carrier.
    Added one of the Kor Sestor carrier variants.
    Added another Korath weapon, the Minelayer.
    Added another Korath weapon, the Detainer.
    moved sales to after there's a Free Worlds to request the carrier solution
    
    added ‘feeder and ‘snest to a couple of Southern Merchant fleet variants
    Added Type F Hauler II and III "Birdsnest" and "Birdhouse"
    
    touched ‘Finch’ balance
    fixed “fighter bay”
    touched “Birdfeeder” sprite
    added “Birdsnest” and “Birdhouse” sprites, ships
    added four new ships to sales at Southbound and Tarazed shipyards
    Revert "Added Type F Hauler II and II "Birdsnest" and "Birdhouse""
    
    This reverts commit 599e255d96d3e1a049dcb8823d21d81d797d74f0.
    Added Type F Hauler II and II "Birdsnest" and "Birdhouse"
    
    added ships to sales at Southbound and Tarazed
    
    retouched birdfeeder.png
    update tiny photovoltaic image, add small photovoltaic
    add small photovoltaic generator
    Added an "android" outfit that replaces one required crew member.
    Made water cooling a common outfit, rather than limiting it to Syndicate space.
    New Syndicate heavy warship: the Vanguard
    Gave the Reverse Thruster a less generic name, since other reverse thrusters may be added in the future.
    Added two new ships, the Headhunter and the Modified Argosy.
    Added a new line of freighter with three different sizes, to provide more medium-price freighter options.
    Added two new small ships, to add a bit more variety.
    Added an experimental "reverse thruster" outfit. It's somewhat awkward to use, but it lets you slow down without facing backward, or fight while running away.
    Added an "interference plating" item that gives you a chance of evading detection when your ship is scanned and you are carrying illegal cargo or equipment.
    Added one more Hai ship, the Shield Beetle.
    Added another ship for the Hai.
    Added another ship for the Hai - the "Aphid" light freighter.
    Added another new weapon for the Hai: the Tracker, a fast, long-range missile that is not very effective up close due to its large turning radius.
    Added a new weapon for the Hai, the Pulse Cannon / Turret. Also added an icon to use for outfits (especially of alien origin) that have no thumbnail yet.
    Added descriptions for all the Pug outfits, and fixed a few other problems with them (incorrect categories, prices, etc.).
    Added a ship for the Hai aliens, along with ship names and friendly hail messages.
    Added an "ion cannon" weapon. I'll need a lot of testing to make sure it's balanced - it makes defeating a single isolated foe too easy, but also does much less damage than other weapons of comparable size.
    Continuing to build the Free Worlds "checkmate" story arc ending.
    Began work on the Free Worlds "checkmate" ending.
    Made some tweaks, in particular to make plundering pirates a little easier early on.
    Added the nuke, and tweaked the AI to be a bit more cautious about firing it when the target is nearby.
    Added the Free Worlds side plot for developing the Stack Core.
    Fixed some places where a Random::Int() call might result in a divide by zero.
    Added a new outfit, the Free Worlds "stack core" reactor.
    Added a new weapon, the electron turret (basically an upgrade to the heavy laser).
    Added a cloaking device. Have not yet written the AI strategy for when to engage it, though.
    Added a new "Shield Regenerator" outfit that gives you a higher recharge rate in exchange for a constant drain on energy and addition of heat.
    Added a "Flamethrower" weapon that uses hyperspace fuel as ammo, and updated the AI so it will not fire off its last jump worth of fuel.
    Added a "Catalytic Ramscoop," a more effective ramscoop that the Free Worlds develop so they can travel through system where they are not welcome to land and refuel.
    Added a new heavy weapon, the Proton Gun.
    Added a new luxury ship, the "Star Queen."
    Added a new ship, the Syndicate Arrow, intended as a luxury ship rather than something the player will find practical.
    Added a "supercapacitor": a tiny, low-cost battery just for allowing you to store enough energy to fire non-beam weapons.
    Added a new outfit, the "Dwarf Core," a compact and efficient reactor.
    Added the low-level atomic thrusters to the Deep Sky advanced outfit set.
    Added new "atomic" engines, compact but very expensive.
    Added a "small bunk room" outfit.
    Added Republic "licenses" for each ship, and added a fine that is assessed if you are scanned by the Republic and are flying an unlicensed ship.
    Added "license" outfits that can be purchased as a special item to give the pilot a license for a given ship type. (Ships don't yet specify what licenses they require, however.)
    Added an afterburner outfit. It'll probably take some balancing work to make sure it's not too powerful.
    Added a "bunk room" outfit for adding more bunk space to your ship.
    Added one more Syndicate ship. I've now got at least the bare minimum number of ships that I wanted to have (five or more per each of seven ship manufacturers).
    Added two more Megaparsec ships.
    Added two more Lionheart ships, the Mule and the Bactrian.
    Added a new ship, the Lionheart Raven.
    Added a new ship, the Tarazed Osprey.
    Added a new Navy ship, the Gunboat (which also serves for recon and scanning).
    Modified the AI to have it scan any other ships in system, if the ship has a scanner equipped. If one of the player's ships is scanned, a message is displayed.
    Added a "Scram Drive", a hyperdrive that does not require you to come to a complete stop before entering hyperspace.
    Added a map outfit that is equivalent to "visiting" the twelve nearest systems.
    Added cargo, outfit space, and fuel expansions.
    Added images for the hand-to-hand weapons.
    Added license statements to all the data files.
    Added a new ship, the Protector.
    Added three new ship types, to be used mostly in the Deep.
    Added drone bays to the republic cruiser.
    Finished adding descriptions to the ship outfits. Also took out some of the generators because previously they had covered too wide a power range.
    Added a new heavy freighter, the Behemoth. Also updated the fleets and shipyards with the new ships I've added recently.
    Added a "plasma cannon," another option for a relatively heavy, fixed gun.
    Added the "modified blaster," a more powerful and power-hungry Energy Blaster mostly used by pirates.
    Added cargo scanner and outfit scanner outfits, and modified the scanning code to only work if you are close enough to your target and have a scanner.
    Modified the map to specify what outfits are for sale in each star system.
    Added "shipyard" specifications to planets throughout the galaxy that seem likely places for a shipyard.
    Added images for the laser and blaster.
    Added images for the reactors.
    Data updates: added some basic "sale" sets, and costs for some more of the outfits.
    feat(mechanics): New enginepoint types and support for over/under and angled engine flares (#4539)
    refactor(organization): Added subfolders to data (#4895)
    Organized ship, outfit, and effect attributes to be consistent
    
    #3868
    Avoid 'it. It is'.
    Fix typos
    Corrected X5200 description (#3542)
    
    * Corrected X5200 description
    
    * changed X5200 description
    
    * Improved X5200 description
    
    * typo
    Reorganizing the human, Hai, and Pug data so that weapon effects are always defined right after the weapon, instead of in a separate "effects.txt" file.
    Fixed a repeated sentence in the tiny plasma thruster description. (@strollcata)
    Regularizing the names for size progressions to always be tiny < small < medium < large < huge. (Replacing "big" with "large" in some places.)
    Moved hai outfits into one file, by local god
    Added hai-outfits, added them to outfitters, added them to ships
    Update my master (#1)
    grammar/wording fixes
    updated barb
    
    • new sprite
    • new specs
    • new outfit w/ sprite
    • cleaned up double-space after “.” in ships and plot conversations
    • license/availability missions now autofail
    Typo fix. (@allixu211 from Steam)
    Reorganized the data files to put the Korath into separate files and to deprecate the old Korath equipment.
    Gave the Reverse Thruster a less generic name, since other reverse thrusters may be added in the future.
    Added new engine noises that vary depending on engine size and are better balanced with the other audio.
    data/engines: fix typo for X3200
    Added text to the engine descriptions making the distinction between ion and plasma engines clearer. Also reduced the heat output of ion engines by 10% to make them more competitive with plasma.
    Added an experimental "reverse thruster" outfit. It's somewhat awkward to use, but it lets you slow down without facing backward, or fight while running away.
    A boatload of typo fixes.
    
    These come from siccing "ispell" on the data dir.
    Switched afterburners to using a distinct "afterburner effect" field in the outfit spec instead of using the "die effect" in the weapon section.
    Typo fix.
    Added a new afterburner outfit, the Ionic Afterburner, which is much more fuel efficient but also consumes a considerable amount of energy.
    Fixed an incorrect price for one of the plasma thrusters.
    Fixed a few more bugs I found while beginning work on the Free Worlds story line.
    Added new "atomic" engines, compact but very expensive.
    Added an afterburner outfit. It'll probably take some balancing work to make sure it's not too powerful.
    Got basic audio support working. I do need to track down better sounds, or at least balance the audio levels better between them.
    Added outfit images for all the ion engines. Now every outfit you can buy has its own thumbnail image!
    First attempt at rebalancing ships, by adjusting the engine capabilities and various ship outfits.
    Added license statements to all the data files.
    Added images for all the plasma engines.
    Added descriptions for all the engine outfits.
    Added a new ship, and adjusted the balance of the engine attributes and sizes.
    Updated the mass, cost, and thumbnail for all outfits, and shortened some of their names.
    Created some new engines and engine flares.
    feat(graphics): Added new details to Tarazed ships (#5368)
    fix(typo): data/human/* (#5099)
    fix: Removed mention of a non-existent third engine on the Marauder Arrow (Engines) (#4972)
    refactor(organization): Added subfolders to data (#4895)
    fix: Revert extra buff to Marauder Firebird hull
    fix: Apply Firebird shield/hull ratio change to Marauder Firebird (#4677)
    
    Changes in endless-sky#3411 were not propagated to the Marauder version. This update resolves the inconsistency in the Marauder Firebird description.
    Improved the descriptions of the Marauder ships
    
    #4572
    Tweaks to some human transport ship stats to make them more viable choices
    
    #4569
    Corrections to Betelgeuse ships
    
    #4501
    Fixed the Marauder Firebird (Weapons)'s hardpoints
    
    #4500
    Redesigned Betelgeuse Ships
    
    #4458
    Added shipyard thumbnails for the remaining ships that didn't have them yet
    
    #4377
    Reduced the required crew of the Marauder Splinter to better match the base Splinter
    
    #4373
    
    Ref: 7eb953a
    Increased the cost of the Raven
    
    #4187
    Tweaked the Headhunter and Raven
    
    #4014
    Moved M. Fury to persons (#3574)
    
    * Replaced M. Fury's Intrusion Countermeasures
    
    Although I understand the Marauder Fury's need to defend itself, I think having it equipped with three Quarg Intrusion Countermeasures is hard to explain, lore-wise. This proposal replaces them with ordinary human laser rifles. There is no space (0/240) for security stations.
    
    * Added M. Fury
    
    * Removed M. Fury
    
    * put M. Fury below M. Max K
    Use add attributes (#3483)
    
    * Use "add attributes" to simplify Kestrel definition
    
    * Use "add attributes" to simplify Marauder variant definitions
    
    * Simplify "Archon (Cloaked)" definition
    
    * Simplify "Deep River <N>" definitions
    
    * Avoid variant definition using a variant as its base
    
     - Without dependency checking in FinishLoading, if a variant references another variant as its base model, there is no guarantee the base variant is fully defined yet
    edit marauder manta's armament to match its outfits
    fixed hardpoints from Marauder reshades
    
    some hardpoints were already a bit off, but some were even more off since I reshaded them
    Reordered some more hardpoints
    Cleaning up ship variants that had costs different from their base class or that defined their own death weapon (which would be ignored).
    Replaced the "Mass Expansion" with an "Outfit Expansion" that adds the same outfit space but also interferes with your ship's cooling if you install a lot of them.
    Fixing places where two spaces are used instead of one.
    Added the ability to specify plural forms of outfit and ship model names.
    Moved the Marauder ships to a separate data file to make it easier to find the stock human ship variants in the file.
    refactor(organization): Added subfolders to data (#4895)
    feat: Gave solar panels to some human ships and tweaked the recent changes to solar panel space
    
    * Added solar panels to many stock Tarazed and Lionheart ships where space allowed.
    * Replaced the Star Queen's energy generation entirely with solar panels and added a mention of this in the description.
    * Increased the outfit space of solar panels as to be more than the recent change but still less than the mass.
    * Reduced the cost of human solar panels to roughly match the reduction in mass.
    feat(balance): Reduced the outfit space of solar panels to make them more attractive (#4886)
    Lowered the Armageddon Core's heat generation by 6.67%
    
    #3990
    Fixing places where two spaces are used instead of one.
    nix spurious changes
    Made a few tweaks to balance the generator prices.
    Moved hai outfits into one file, by local god
    Added hai-outfits, added them to outfitters, added them to ships
    Made fuel cells much more heat efficient, to make them a bit less useless.
    update tiny photovoltaic image, add small photovoltaic
    change small photovoltaic to tiny photovoltaic
    add small photovoltaic generator
    Fixed a scientific inaccuracy in the Breeder Reactor description.
    Typo fix.
    Improved the stats on the Stack Core slightly to make it a better power option.
    Typo corrections and cosmetic changes
    Increased the fuel cell energy output a bit to keep fighters and drones from running out of power so easily.
    Fixed a mistake in the masses of the mid-tier generators.
    Added a new outfit, the Free Worlds "stack core" reactor.
    Added a "supercapacitor": a tiny, low-cost battery just for allowing you to store enough energy to fire non-beam weapons.
    Added a new outfit, the "Dwarf Core," a compact and efficient reactor.
    Increased interest rates and ship prices to make the start of the game a bit more difficult, as well as to increase the range between mid-level and high-level ships.
    Updated the power output for the second-tier generators, too.
    Increased the generator outputs slightly to compensate for the change that shield recharging costs energy.
    First attempt at rebalancing ships, by adjusting the engine capabilities and various ship outfits.
    Added license statements to all the data files.
    Finished adding descriptions to the ship outfits. Also took out some of the generators because previously they had covered too wide a power range.
    Added images for the laser and blaster.
    Added images for the reactors.
    feat(content): Readded the Hunted mission, now with DPS/fleet size scaling and a warning of its existence (#5232)
    fix(content): Corrected the government for the Marauder X job
    feat(content): Turned the Marauder Hunted mission into another Marauder job
    
    The nature of being thrust into combat with no backup (as no one attacks bounty hunters but the player) at random times goes against the rest of the game where combat is engaged in by choice, either through accepting a combat mission or through not running from random pirates. Randomly having extra enemies show up can also distract from any missions that you are currently engaged in, and requires that you always be ready for tough combat while in human space just because you reached an arbitrary level of combat rating, even though a player may want to simply fly around human space in a smaller, non-combat ship.
    refactor(organization): Added subfolders to data (#4895)
    feat(jobs): A couple more Bulk Passenger jobs for balance and diversity (#4854)
    Fix typo in bounty missions (#4593)
    Changed bounty names and descriptions to better highlight difficulty differences
    
    #4507
    Generic jobs can now offer from independent worlds
    
    #4328
    Added on visit dialogs for nearly all missions that can trigger them
    
    #4342
    Player will now receive on visit dialog for cargo and passenger jobs
    
    #4315
    Spelling & Grammar Fixes
    
    #4255
    Allow phrase-based randomized dialog (#4164)
    
    * Allow `MissionAction` dialog text randomization via the `Phrase` class. Traditional "directly specified" text is still supported.
    
    Supported syntax:
    ```
    dialog phrase <stock phrase name>
    
    dialog
        phrase
            {phrase specification...}
    ```
    e.g.
    ```
    dialog phrase "hostile disabled"
    
    dialog
        phrase
            word
                "Please excuse my dear "
            word
                "Aunt Sally"
                "Uncle Mark"
            word
                ` for saying, "`
            phrase
                "hostile disabled"
                "friendly disabled"
            word
                `" yesterday.`
    ```
    
    * Move `dialogText` parsing to `Dialog` static method
    
    * Allow `NPC` "completion" dialog text randomization using the same phrase-based syntax as `MissionAction` dialog
    
    * Use phrases to encapsulate generic/repeated dialog
    
    For similar messages, combined clauses to diversify the generated text.
    
    * Remove duplicated space
    
    * Typo fix ( @Pointedstick )
    Add an article "the" before ship names when appropriate (#4147)
    
    * Add an article "the" before ship names in bounty hunting missions
    
    * Add extra article "the" and other minor changes to improve consistency
    
    * Add the article "The" where appropriate to ship names
    
    * Make the references to <ship> consistent with an article "the"
    Quoting user-supplied values
    Fix bad indentations in mission "Released Prisoners."
    Add jobs to transport released prisoners home (#4084)
    
    * Add jobs to transport released prisoners home
    
    These are mirrors of the prisoner transport jobs, but pay less.
    
    * Reduce frequency of prisoner jobs per @Pointedstick
    
    * Shorten penal colony prisoner return job per feedback from @Bladewood
    
    * "Released prisoner" -> "Parolee" to save UI space
    
    * Put back extra newline
    Brig and prisoner transport jobs (#3347)
    
    * Bounty hunter and prisoner transport jobs, and a new outfit to unlock them
    
    * Copyright info
    
    * Quote government and attribute tokens
    
    * Moved the prisoner transport jobs with the rest of the passenger jobs
    
    * Relocated all bounty hunting jobs (including the new ones) to the end,
    with the other bounty hunting jobs; now they're all in the same place
    
    * For all new and relocated bounty hunting jobs, quoted tokens and made
    them available on independent worlds
    
    * Adding Brigs to a few variants
    
    * Adjusted the outfit's description
    
    * Removed an accidental double Brig on one of the variants
    
    * Address review comment by quoting "Pirate"
    
    * Address review comments
    
    * Address review comments
    
    * ++Supercapacitor  --Small Radar Jammer
    Luxury Accommodations and high-class passenger jobs (#3359)
    
    * Luxury Accomodations and high-class passenger jobs
    
    * Revert change to require Luxury Accommodations for Deep scientists;
    they're probably as strapped for cash 1000 years in the future as they
    are today
    
    * Match existing style for dashes used instead of commas
    
    * Update image to have a nice wooden bed and a patterned bedspread
    
    * - Gave Luxury Accommodations to the Blackbird by default, to match its description
    - Added luxury variants for the Arrow, Bounder, and Flivver
    - Added a few fleet options for luxury ships in the Core and the North
    
    * Reduced the number of passenger jobs that are gated behind owning Luxury
    Accomodations
    
    * Restored original formatting for Hai tourist jobs' payment syntax
    
    * Typo
    
    * Adjust Quantum Keystone description to hint at the jobs it helps unlock
    
    * Bring some of the variants up-to-date with recent missile changes
    Tweak default ship and variant loadouts to reflect missile changes
    
    #3922
    Use "join the defenses" rather than "join in the defenses" in defense jobs (#3468)
    
    * Use "defense" rather than "defenses" when referring to a single battle
    
    * Switch to "join the defenses" per feedback
    
    * Correct spaces to tabs
    
    * Use backticks instead of quotes to match #3482
    Added defense missions to the Core against Korath Attackers (#3325)
    
    * Added defense missions to the Core against Korath Attackers
    
    It seems logical that there should be core missions to defend against the Korath, so I wrote a few scaling from a few raiders, to battling World Ships.
    
    * Update jobs.txt
    
    * Update jobs.txt
    
    * Update jobs.txt
    
    * Update jobs.txt
    
    * Update jobs.txt
    
    * Update jobs.txt
    
    * Update jobs.txt
    
    * Update jobs.txt
    
    * Update jobs.txt
    
    * Update jobs.txt
    
    * Update jobs.txt
    
    * Update jobs.txt
    
    * Update jobs.txt
    
    * Update jobs.txt
    
    Fixed indents and backticks
    
    * Update jobs.txt
    
    * Fix whitespace and alignment
    
    * "Defenses" should be spelled "defense" when referring to a single battle
    NPC & Personality error reporting & fixes, for jobs & missions (#3000)
    
    * Add error output for NPC::Load to help content creators
    
    * Fix Pirate Job NPC definitions
    
     - `distance` is not a valid NPC node - it needs to be a child node of a `system` node.
     - More explicitly stagger the NPC arrival times
     - Replace `Bounty` with Pirate and `marked`.
     - Use `entering` with `system destination` when multiple NPCs that are not `staying` are started in the destination, to force one to arrive after the other.
    
    * Escort NPC fixes & updates
    
     - Fixed erroneous `distance` nodes when used directly under `npc`.
     - Removed unneeded `waiting` personality use (if an NPC is hostile to the planet, it will not take off from the planet).
     - Added non-default confusion values to Tiny, Small, and Medium escort opponents, to ease the player into combat, rather than immediately pit them against highly accurate, skilled Pirate pilots.
     - Escort mission pirates are now able to be distracted via cargo jettisoning.
     - The smallest "Escort to ..." missions phase out as the player becomes stronger.
     - High-value Marauder missions are now rarer.
     - The strongest Marauder mission will pursue the player beyond the boundary, as will the Marauder hunters
     - Ordered NPC definitions: npc -> gov -> personality -> location -> fleet(s).
    
    * Add error output for invalid Personality values
    
    * Missed offer changes
    Use fleet multiplier to simplify data/*txt files (#2993)
    
    * Fleet Multiplier: FW Checkmate
    
    * Fleet Multiplier: FW intro
    
    * Fleet Multiplier: FW middle
    
    * Fleet Multiplier: FW reconciliation
    
    * Fleet Multiplier: FW reconciliation
    
    * Fleet Multiplier: FW side plots
    
    * Fleet Multiplier: FW start
    
    * Fleet Multiplier: jobs
    
    * Fleet Multiplier: Remnant Missions
    
    * Fleet Multiplier: Wanderers
    The pirates in planetary defense missions are now marked as mission targets.
    Added a "target" personality that marks a ship by making it flash in the radar and the targeting display.
    Hai specific jobs (#1928)
    
    * Hai jobs
    
    * Reduced frequency of to Hai space jobs
    
    * Error fix + escort job changes
    
    * Vacation jobs now mention passenger number
    
    * Rare chance of Hai variants in northern merchants
    
    To go along with the escort jobs of Hai variants going to human space.
    
    * Wording fix
    
    * Another wording fix
    
    Also renamed escort missions to special escort missions so they pop more
    in the job board
    
    * Name change
    
    * Delivery jobs set between 2-10 cargo
    
    so that you don't get big jobs that don't make sense for the set payment
    
    * Name change
    
    * Payment tweak
    
    * Lowering the special delivery payment a bit more
    
    * Removing to Hai space jobs and changing supplies jobs
    
    * Hai specific cargo and passenger jobs
    
    Just copy/pasted human jobs right now.
    
    * Changing attribute name
    
    * Made Hai jobs slightly bigger than human jobs
    
    I think
    
    * Increased job sizes a bit
    
    Now that I have more understanding of what the numbers do
    Generic Wanderer jobs (#2046)
    
    * Generic Wanderer jobs
    
    * Typo fix
    
    * Typo fix
    
    * Making sure the destination is always Wanderer
    
    * Wording change
    
    * Increasing (?) the size of Wanderer missions
    
    I'm not entirely sure how the probability stuff works, but I believe
    that this is making job sizes bigger than in Coalition space.
    
    * Lowered the offer chances
    Fixed job: Escort (Medium, core, dangerous origin)
    
    Changed the pirate fleets so they are waiting at the origin system and 1 to 2 systems away instead of waiting/staying at the destination system and waiting 1 to 2 systems away from the destination
    Escort job description fix
    Added regional flavor jobs for the Paradise worlds, the Deep, and the Syndicate (#1854)
    
    * Added regional flavor jobs for the Paradise worlds, the Deep, and the Syndicate that should reinforce the culture and quirks of these distinct regions of space.
    
    * Fixed some grammar and punctuation issues that @Bladewood found
    
    * Fixed a typo in one of the Syndicate jobs
    Typo fix for the escort jobs change.
    Escort mission improvements (#1777)
    
    * Escort mission improvements
    
    * Misspelled "Berserker"
    
    * Added a missing distance token on one of the missions and ensured that you only get the tine escort missions if you're flying an interceptor
    Modified the Marauder bounty missions so that the lower-level ones are offered very seldom once you qualify for higher-level ones.
    Adjusted the frequency, payout, and visit messages for various special jobs. (Payments had to be modified now that payments take stopover distance into account.)
    Quarg planets are no longer the source or destination of ordinary jobs, to avoid jobs in between them and the Wanderers.
    0.9.2 updates
    Fixed repeated "source" statements in the Marauder missions, and also tweaked the mission descriptions to be clearer.
    For escort missions, pirates now attack you in the destination system in addition to the origin system.
    One Commit
    
    carefully inserted each segment of ships to be added, being careful not
    to delete anything - not sure why github displays the changes that way.
    
    jobs too, but it’s less confusing.
    Fixed the payments for the marauder bounty hunting missions.
    and hunted
    
    • only triggers in human space
    updated
    
    • combat rating requirements
    • jobs offered in human space only
    • hunted mission never-complete/destination feature updated
    Modified Falcon and Leviathan
    
    six ships in all, mild tweak.  “purchase” is in death benefits, and
    availability - only through high combat rating bounty hunting/hunted
    jobs/mission.  better variants spawn less frequently.
    Added distance specifications to some of the jobs that did not have them.
    Made fewer jobs available in Wanderer space, because it's such a small territory that they all end up clustered on a few worlds.
    Fixed a bunch of unmatched quotation marks.
    Removed the passenger requirement for the science vessel escort mission
    Switched the garbage missions to indicating the type of garbage you'd be carrying, now that this is supported
    Took out a leftover "ship:" condition that will no longer work, in one of the jobs.
    Changed to "Garbage" (capital G) to pick up the new "Garbage" commodity type
    Chaning the cargo for the garbage mission to be garbage (imagine that)
    A few tweaks to the new jobs based on community feedback
    Fixed whitespace for new content (spaces -> tabs) and changed the research data mission around a bit to turn it into a Syndicate corporate espionage mission
    Added several new repeatable jobs available at various places throughout the galaxy, as well as a new "Bounty Hunter" faction in support of one of the missions (and future ones).
    Added the Wanderer territory to the map.
    New mission available on rich worlds: Provide security for pleasure cruise
    Other ships no longer attack your bounty hunting targets. Also, increased the frequency of the Free Worlds intro missions slightly.
    New Syndicate heavy warship: the Vanguard
    Don't offer pirate hunting jobs near Earth; that fact that pirates never appear in these areas normally means that the Navy is probably doing a pretty job of this themselves!
    Made the "tiny" escort missions only get offered if you have killed something or are flying a ship with less cargo space than a shuttle (i.e. a Sparrow).
    Reduced the bonuses for the new jumbo missions, because they're already quite lucrative due to the large cargo sizes.
    Added baby-sized escort jobs so that people who choose the Sparrow can start these types of jobs right away
    Added some new, bigger jobs for fleets with a lot of passenger or cargo space.
    Marked the pirate attack missions as "minor" so they won't interrupt the story line.
    Tweaked wording and NPC settings for some of the missions.
    Switched some defense missions to only requiring you to "evade" the pirates (i.e. disable them or drive them off) instead of killing them.
    Added some medium-difficulty bounty hunting jobs, and also added messages telling you when you have succeeded in destroying a bounty.
    Fixed an improper substitution tag in the escort missions ("deadline" instead of "date").
    Made all basic jobs also be offered on Hai worlds.
    Added deadlines for all escort missions so you can't abuse them to get yourself a free fleet of escorts.
    Updating all the missions to make use of the new "escort" personality.
    For every mission involving escorts that must accompany you, added a message to be shown if you land on the destination planet before your escorts arrive, telling you you must go back to orbit and wait for them.
    Modified all the basic jobs to also be offered from "Neutral" systems.
    Fixed a bug where if you captured and sold an NPC, it would continue to follow you as a free escort until the mission ended.
    Added some new Free Worlds missions, and fixed a few issues I found while developing them.
    Fixed some small bugs I found while playtesting.
    Added some escort missions (only available if you have a good combat rating, and only in risky parts of the galaxy).
    Added a few bounty-hunting jobs which will show up in the job board once your combat rating is high enough.
    Took out a test mission I didn't mean to check in.
    Added a "never" keyword to mark conditions (e.g. for completing a mission) that are never satisfied.
    Reduced the bonuses for most missions (including the intro ones) to make the start of the game a bit harder.
    Got planetary defense missions working (three different templates for the Core, North, and South).
    Added support for NPCs "entering" or "staying" in a system, and added a sample "pirate attack" mission (currently always offered).
    Implemented mission deadlines, and added various cargo missions (normal, bulk, and rush).
    Increased the default mission payments, and also implemented "special" conditions reporting the number of ships of each type that you have, so a mission might only be offered, say, if you have a transport or a warship.
    Switched so "job" missions do not automatically have unlimited repeats. Also tweaked some of the job descriptions.
    Added a "name" tag to missions so that you can use unique IDs for each but still have them show up with the same name (e.g. for different templates of the same job).
    Added support for job "templates" in the mission data. To start out with, added a variety of passenger missions, some of which only happen if you are on certain kinds of planets.
    feat(graphics): Added new details to Tarazed ships (#5368)
    feat(balance): Reduced the base bunks on the Auxiliary while increasing them on the Emerald Sword
    
    These two ships were developed separately, but this change means that a min-maxed Emerald Sword is more of an upgrade over a min-maxed Auxiliary.
    feat: Added log entries for various characters that lacked them (#5122)
    
    Plus some other minor changes.
    fix: Gave the Auxiliary the correct license requirements and made available in Navy shipyards (#5137)
    fix(content): Correct the Auxiliary's license name (#5136)
    
    * Correct Auxiliary license name
    
    The Auxiliary license outfit wouldn't show up under Special in the outfitter because it was named differently than the license itself.
    
    * Conform to the standard
    
    Whoops, big thank you to pega3 on Discord who pointed out the standard and how I looked over it.
    feat: New Navy logistics ships (#5108)
    feat: Changed the license progression of the Navy ships to match other progressions (#4936)
    refactor(organization): Added subfolders to data (#4895)
    feat: Gave solar panels to some human ships and tweaked the recent changes to solar panel space
    
    * Added solar panels to many stock Tarazed and Lionheart ships where space allowed.
    * Replaced the Star Queen's energy generation entirely with solar panels and added a mention of this in the description.
    * Increased the outfit space of solar panels as to be more than the recent change but still less than the mass.
    * Reduced the cost of human solar panels to roughly match the reduction in mass.
    feat: Renamed the Militia Carrier License to the Militia License and added it to the Dreadnought (#4805)
    Various minor changes to the FW campaign
    
    #4671
    
    * Don't name the Pug before you're told their name (#2693)
    * Characters now react to your suspension from FW Start in FW Middle (#2687)
    * Rastaban and the surrounding system now return to FW ownership for bad karma Reconciliation runs, just much later (#2696)
    * In FWR, Tarazed now switches to Republic after the armistice just like Poisonwood, but joins the FW based off of karma
    * Flamethrowes now unlock for purchase regardless if you helped test them or not
    * Fixed some slight reputation issues in FWR (#2695)
    * Normalized capitalization of Navy ships (#2698)
    * Changed the Danforth epilogue to account for Checkmate players (#2663)
    * Have the Stack Core become available at the end of the campaign regardless of if the player helped escort the freighters
    * Added an extra bit to FW Albatross 2A for if the player says they're gay
    Fixed some Mule variants having negative weapon space due to the recent changes
    Better differentiate various human medium warships and knock the Mule down a peg (or two)
    
    #4581
    Heavy shuttle image fix
    
    #4573
    Tweaks to some human transport ship stats to make them more viable choices
    
    #4569
    Make "Southbound Shipyard's" plural in Fury description. (#4560)
    
    According to every other ship description, "Southbound Shipyards" is the correct name, and this was probably a transposition typo.
    Updating Protector Description
    
    #4542
    Corrections to Betelgeuse ships
    
    #4501
    Redesigned Betelgeuse Ships
    
    #4458
    Fixed the ordering of ship hardpoints after 2e2ab8c
    
    #4474
    Revert "Change Bactrian Classification (#4387)"
    
    This reverts commit 919e6b4597d05f3b6689520fe24a42637f2c6f99.
    Change Bactrian Classification (#4387)
    
    This PR is purely cosmetic, and is an effort to redirect the perception and fixation on the Bactrian by making one simple change.
    
    1) The Bactrian is reclassified as a Transport.
    New Southbound ship sprites (#4319)
    
    * Detailed sprites
    
    * updated copyright
    
    * better blur on the fury
    
    * Redid all the normal dpi scaling
    
    * Added the new Bastion with the new hardpoints position
    
    * Added Bastion to copyright and corrected an error
    
    Switched from " " to "?"
    Added missile storage outfits to ship missile variants and ships that largely use missiles
    
    #4371
    Gave Tactical and Asteroid scanners to ships where appropriate
    
    #4367
    Tweak and differentiate the starting ships (#4219)
    
    * Give the Star Barge an anti-missie turret by default and tweak it accordingly
    
    * Tweak the Shuttle, Sparrow, and Finch as well
    
    * Tweak the tweaks
    
    * Reduce the magnitude of some changes, and undo others
    
    * Revert Shuttle drag change
    Modify human warship H2H to better fit their roles
    
    #4216
    Increased the cost of the Raven
    
    #4187
    Add hand-to-hand to human Medium and Heavy Warships (#4161)
    
    * Add H2H to human medium and heavy warships
    
    * Also add H2H to FW warships
    
    * Add h2h to appropriate human variants.
    
    Uses pulse rifles for variants with Hai parts.
    Changes to missile balance and usage
    
    #4162
    Added a "mini-campaign" to unlock the Bactrian (@Amazinite @tehhowch)
    
    #3120
    Add hand-to-hand weapons to Republic Navy ships
    
    https://github.com/endless-sky/endless-sky/pull/4125
    
     - Add hand-to-hand for Mark II variants
     - Add hand-to-hand for other variants
     - Add one "Security Station" to base model Frigates, Cruisers, and Carriers
    Brig and prisoner transport jobs (#3347)
    
    * Bounty hunter and prisoner transport jobs, and a new outfit to unlock them
    
    * Copyright info
    
    * Quote government and attribute tokens
    
    * Moved the prisoner transport jobs with the rest of the passenger jobs
    
    * Relocated all bounty hunting jobs (including the new ones) to the end,
    with the other bounty hunting jobs; now they're all in the same place
    
    * For all new and relocated bounty hunting jobs, quoted tokens and made
    them available on independent worlds
    
    * Adding Brigs to a few variants
    
    * Adjusted the outfit's description
    
    * Removed an accidental double Brig on one of the variants
    
    * Address review comment by quoting "Pirate"
    
    * Address review comments
    
    * Address review comments
    
    * ++Supercapacitor  --Small Radar Jammer
    De-equip the Sidewinder removed in e8f1292
    Give more luxury ships Luxury Accommodations (#4043)
    Fixed the Raven's guns
    Tweaked the Headhunter and Raven
    
    #4014
    Re-order Carrier's HAM turret (#3992)
    Luxury Accommodations and high-class passenger jobs (#3359)
    
    * Luxury Accomodations and high-class passenger jobs
    
    * Revert change to require Luxury Accommodations for Deep scientists;
    they're probably as strapped for cash 1000 years in the future as they
    are today
    
    * Match existing style for dashes used instead of commas
    
    * Update image to have a nice wooden bed and a patterned bedspread
    
    * - Gave Luxury Accommodations to the Blackbird by default, to match its description
    - Added luxury variants for the Arrow, Bounder, and Flivver
    - Added a few fleet options for luxury ships in the Core and the North
    
    * Reduced the number of passenger jobs that are gated behind owning Luxury
    Accomodations
    
    * Restored original formatting for Hai tourist jobs' payment syntax
    
    * Typo
    
    * Adjust Quantum Keystone description to hint at the jobs it helps unlock
    
    * Bring some of the variants up-to-date with recent missile changes
    Organized ship, outfit, and effect attributes to be consistent
    
    #3868
    Capitalized "Wasp" in its description (@Nescio0)
    Altered the shield/hull balance of the Corvette and Firebird
    
    #3411
    Tweak default ship and variant loadouts to reflect missile changes
    
    #3922
    Added support for hull "leak" effects, when a dying ship is venting atmosphere / flames / blood / whatever.
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Re-ordered the Freighter hardpoint (#3712)
    
    * Re-ordered the Freighter hardpoint
    
    Noticed that I missed this one.
    ~there's always more~
    
    * Also re-ordered the Freighter variant hardpoints.
    Increased the heat dissipation of the two non-combat starting ships to make it a bit easier for them to evade missiles.
    Reduce Bastion and Splinter minimum crew complements to make them more
    attractive options
    Typo Fix
    
    "Fighter" --> "fighter"
    Shifting the Vanguard's turret slightly.
    Made it possible for outfits to require licenses to buy them.
    Readability fix for Bactrian description
    
    I noticed this issue while I was looking through the ships file for unrelated reasons. The original sentence is technically grammatically correct, but I believe this one is more readable.
    Re-ordered some human, Hai, Korath and Coalition ship hardpoints (#2086)
    
    * Re-ordered some human ship weapon hardpoints
    
    Made all (I think) the human ships' hardpoints more consistent with the 'front to back, left to right' standard of hardpoint ordering.
    
    * Re-ordered the hardpoints of some Hai ships
    
    Changed the Hai ships' hardpoints to be more consistent with the 'front to back, left to right' order.
    
    * Re-ordered Coalition ship hardpoints
    
    Moved the engine hardpoints above the gun and turret hardpoints and re-ordered the gun and turret hardpoints to be more consistent with the 'front to back, left to right' order.
    
    * Fixed some mistakes in my hardpoint reorders
    
    * Re-ordered some Korath ship hardpoints
    
    Changed the ordering of a few Korath ships' hardpoints to be more consistent with the 'front to back, left to right' standard.
    
    * Moved a turret back to its correct position. (@Bladewood)
    
    * Updated the Alpha carrier hardpoints (@Bladewood)
    
    * Re-ordered the relevant human variant hardpoints.
    Added the ability to specify plural forms of outfit and ship model names.
    Moved the Marauder ships to a separate data file to make it easier to find the stock human ship variants in the file.
    Fixed some hardpoints that were off on the Argosy.
    Marauder Engine Variants Scale 0.7 + 1 + 0.7; Changed the thruster flares scaling of certain Marauder Engine Variants (which have 3 close together engine hardpoints) to the  default threeway scaling of 0.7 + 1 + 0.7. MF and MQ were not changed on purpose, since they look better without.
    Updated Firebird description
    move guns out a bit
    fix to front most guns
    vanguard fix
    Re-Fit Marauder Fury (#1718)
    
    * Re-Fit Marauder Fury
    
    so that M.M.K. is more combat worthy, and uses more outfits created by
    the artist he pays homage to.
    
    * limit MMK to Human/Hai space
    
    also fixed hard points from an experimental build that didn’t fit,
    clarified the non-existence of MMK’s shop.
    
    * removed extra ammo from Marauder Fury
    Adjusting the prices of the Behemoth and the Mule to reflect the fact that they're much better than the Bulk Freighter and the Hauler III, respectively.
    Fixed some missing quotation marks.
    Prose and grammar improvements for many ship and weapon descriptions (#1546)
    
    * Reduced wordiness and increased clarity for many ship and weapon descriptions
    
    * Reverting my change to convert single-dashes to em-dashes; the space-separated single dashes are intentional
    Regularizing the names for size progressions to always be tiny < small < medium < large < huge. (Replacing "big" with "large" in some places.)
    Rebalancing some ship prices.
    Gave ramscoops to the other two special persons.
    Fixed saving of the new animation attributes, plus some old ones that were not saved. Also updated the changelog.
    Added a "delay" in the shuttle running light animation.
    not on the MFury
    
    removed self destruct from MMK’s ship
    minor adjustment
    Boxwing balance
    Fixed the Hauler III's cargo space, which was less than I intended it to be.
    lower self-destruct on rarer variants
    
    to reduce player frustration in collection building.
    added a modest "self destruct" attribute to Marauder ships
    
    after farming these from Winter in Yed Prior, i quickly got to 1B
    credits before completing my collection (which still isn’t done)…
    
    with the current stat, ~56% to engage in capture combat…
    smoothed Boxwing description
    Defined final explosion sounds for all ships, and also cleaned up the ships.txt definitions a bit.
    Gave radar jammers to various stock ships.
    boxwing flavour
    Update my master (#1)
    touch up
    sprite tuning
    double spaces after periods
    
    is a habit i’ll not likely break - keep reminding me to remove them
    description flavour
    Revert "more flavour in description"
    
    This reverts commit f0fb6936f83fcd02103a7d9593767193d5dec397.
    more flavour in description
    balancing
    
    mass now makes the fighter and carrier handle more like freighters.
    
    “fighter” can get zippy, but has a little trouble with heat when
    X1200/X1700s are equipped with the AA fuel cell (and no shield
    generator).
    flavour
    
    boxwing description touched up a little.
    rudimentary addition of "Boxwing"
    
    • sprite
    • malleable ship specs
    • sales at Southbound Basics with FWCarriers event
    Quotation mark fixes.
    remove extra bunk from proton barb
    grammar/wording fixes
    Barb (Proton)
    
    • new ship variant (sans-turret)
    • corresponding sprite
    • sales begin between basic Barb rollout, and Carrier/Finch rollout.
    sales restricted to Syndicate Basics (rather than also being available
    at Tarazed)
    • Backwards compatibility
    X1050 sales
    
    also touched up Barb port maps
    updated barb
    
    • new sprite
    • new specs
    • new outfit w/ sprite
    • cleaned up double-space after “.” in ships and plot conversations
    • license/availability missions now autofail
    Added 'Barb'
    
    • updated shadows for carrier sprites
    • sales with event: initial deployment 1
    • added to some Independent/Pirate/Northern Merchant fleets
    Corrected mistake
    
    #commitspam
    Get the Vanguard back in alphabetical order
    
    Moved the vanguard from behind the protector down before the wasp
    Deployment delayed
    
    …in fleets until after they’re actually available.
    
    price point of Finch balanced.
    Slightly boosted the strength of fighters and combat drones.
    all ports/mounts/engines/bays mapped
    
    for new sprites
    fixed port locations
    
    rest still to go
    Sprinkled around more in fleets.txt
    
    also, description touch up.
    replaced "F.S. Alder" and "F.S. Ironwood" {formerly Bastion (heavy)} with 'Skein's
    
    and 12 phonetic alphabet named Finches
    
    also
    ‘feeder -> nest
    ‘snest -> roost
    house -> skein
    properly mapped 'Finch' engines, weapons
    
    also tweaked carrier engine ports
    fixed 'Birdfeeder' shield gennies
    fixed turret mapping, licensing mission
    proper bay mapping
    
    *very* nice…shadows are clinch.
    galaxy balance
    
    swapped D94 shield generators out for more locally available gens.
    availability/canon/class/price fixes
    
    •availability event would fail to trigger because of “:”
    •Southbound has no interest in the sales of the Hauler.
    •all carriers now Medium Warships, in line with their specs
    •prices adjusted to balance
    Added Type F Hauler II and III "Birdsnest" and "Birdhouse"
    
    touched ‘Finch’ balance
    fixed “fighter bay”
    touched “Birdfeeder” sprite
    added “Birdsnest” and “Birdhouse” sprites, ships
    added four new ships to sales at Southbound and Tarazed shipyards
    Revert "Added Type F Hauler II and II "Birdsnest" and "Birdhouse""
    
    This reverts commit 599e255d96d3e1a049dcb8823d21d81d797d74f0.
    Added Type F Hauler II and II "Birdsnest" and "Birdhouse"
    
    added ships to sales at Southbound and Tarazed
    
    retouched birdfeeder.png
    Added Hauler I:Type F "Birdfeeder"
    
    sprite and ship description - outfit loadout requires update.
    Balanced Finch
    
    added some hull mass, drag to slow this beast down a little, reduced
    hull integrity.
    
    grammar fixes to description.
    added 'finch'
    
    a trimmed down Sparrow - falls somewhere between the Dagger and the
    Chaser.
    
    sprite actually proportioned to share body element sizes with Sparrow
    per description while coming in at about the same dimensions as the
    Lance.
    Made it possible for fighter bays to launch sideways, and added a retrofitted Bulk Freighter carrying a dozen drones.
    Fixed Windows-style line endings in ships.txt.
    Marauder Hardpoints had improperly assigned outfits
    
    also a couple of grammar fixes in the descriptions
    One Commit
    
    carefully inserted each segment of ships to be added, being careful not
    to delete anything - not sure why github displays the changes that way.
    
    jobs too, but it’s less confusing.
    Modified Falcon and Leviathan
    
    six ships in all, mild tweak.  “purchase” is in death benefits, and
    availability - only through high combat rating bounty hunting/hunted
    jobs/mission.  better variants spawn less frequently.
    Added an "automaton" ship attribute that allows it to not require any crew to pilot it. Also updated the Wanderer automaton to have some cargo space, so there's some legitimate reason for the player to want one.
    Fixed a Typo in ship description
    
    "in order to provide a large capital ships" -> "in order to provide a large capital ship"
    other option would be "in order to provide large capital ships"
    Fixed Typo in ship description
    
    "I can hold it own" -> "it can hold its own"
    Fixed typo in ship description.
    Fixed a bunch of unmatched quotation marks.
    Typo fix.
    Updated the Falcon description.
    Changed the Carrier description, which inaccurately stated that it's weaker than a Cruiser.
    New Syndicate heavy warship: the Vanguard
    Tweaking the speed balance between the Falcon and the Leviathan.
    Minor ship rebalancing.
    Increased the price of the Headhunter and the Bactrian.
    Added a "Medium Warship" category, and moved some ships into it.
    Corrected misspellings in multiple txt files
    Added two new ships, the Headhunter and the Modified Argosy.
    Made the Quicksilver a bit less overpriced.
    Reduced the speed and engine space of the Bactrian, to balance it better with the other warships.
    Standardise formatting
    
    * Quote some unquoted ship/sprite names
    * Unquote some quoted numeric values
    * Standardise float values <1 e.g. change 0.1 to .1
    Made a few small balance tweaks.
    Updated the Sparrow sprite to one that is 3D rendered.
    Updated the sprites for the Hawk and the Fury.
    Added a new line of freighter with three different sizes, to provide more medium-price freighter options.
    Added two new small ships, to add a bit more variety.
    Made turret weapons (aside from anti-missiles) increase your required crew by 1. (This gives you the option to have cheap freighters if you don't care about giving them weapons.)
    Ship licenses are no longer government specific and no longer saved in the player info (because they now only control what you can buy, not what you can own).
    Fixed a bunch of spelling errors found by the codespell tool.
    Typo corrections and cosmetic changes
    Gave the Freighter a Scram Drive by default so escorting them is less annoying.
    Increased the fuel cell energy output a bit to keep fighters and drones from running out of power so easily.
    Fixed a few small glitches I found while testing.
    Added quite a few new ship "variants," and modified all the fleet descriptors to include those variants.
    Realized the ships.txt file had no copyright statement, and added one.
    Fixed a ship that was listed out of alphabetical order in the data file.
    Made a better graphic for the Corvette, and made it appear more frequently (including outside the Deep).
    Adjusted the Pug ship prices so that they are equivalent in price to the human ships that are equal to them in battle. (So that if you capture a pug ship, the crew bonus is not too exorbitant.)
    Gave the Dreadnought a tiny bit more weapon space, to allow for more variety of armament (including an all-electron-beam option).
    Took out the "licenses" for transports, warships, etc. I meant for them to underscore how annoying Republic bureaucracy is, but they're a bit *too* annoying.
    Reduced the Clipper's outfit and weapon space, and also reduced its price.
    Cut the blast radii in half for most ship explosions (and made sure the damage amounts matched their latest shields and hull amounts).
    Added a Free Worlds side mission that gives you access to the Flamethrower weapon.
    Added a new Free Worlds capital ship, the Dreadnought.
    Added a new afterburner outfit, the Ionic Afterburner, which is much more fuel efficient but also consumes a considerable amount of energy.
    Updated the graphics for the combat and surveillance drones, and increased the size of the Arrow slightly.
    Added a new heavy weapon, the Proton Gun.
    Added a new luxury ship, the "Star Queen."
    Added a new ship, the Syndicate Arrow, intended as a luxury ship rather than something the player will find practical.
    Updated the image for the Argosy.
    Increased interest rates and ship prices to make the start of the game a bit more difficult, as well as to increase the range between mid-level and high-level ships.
    Added Republic "licenses" for each ship, and added a fine that is assessed if you are scanned by the Republic and are flying an unlicensed ship.
    Fixed a few small mistakes I found during play-testing.
    Got planetary defense missions working (three different templates for the Core, North, and South).
    Added one more Syndicate ship. I've now got at least the bare minimum number of ships that I wanted to have (five or more per each of seven ship manufacturers).
    Added two more Megaparsec ships.
    Added two more Lionheart ships, the Mule and the Bactrian.
    Added a new ship, the Lionheart Raven.
    Added a new ship, the Tarazed Osprey.
    Added a new Navy ship, the Gunboat (which also serves for recon and scanning).
    Added a "Scram Drive", a hyperdrive that does not require you to come to a complete stop before entering hyperspace.
    Slightly increased the damage done by the Blaster. Also removed the turrets from the Clipper and tweaked the intro text.
    Fixed an error in the gun placements on the Falcon.
    Added sprites for the scanners and cooling systems. Also fixed a glitch where the cooling systems were taking up negative space.
    Retuned the required crews, and also modified Fleet so that other ships will have random numbers of extra crew.
    Added a "heat dissipation" attribute that varies from ship to ship, so that big ships will have more trouble radiating away heat.
    First attempt at rebalancing ships, by adjusting the engine capabilities and various ship outfits.
    Added a new graphic for the Bulk Freighter.
    Added a new ship, the Protector.
    Added three new ship types, to be used mostly in the Deep.
    Added drone bays to the republic cruiser.
    Got carrying and launching of fighters working (but not buying or recalling them, yet).
    Added ship data for two drones and a fighter, so I can begin testing carriers.
    Added a new heavy freighter, the Behemoth. Also updated the fleets and shipyards with the new ships I've added recently.
    Added two new ship types, the Leviathan and the Heavy Shuttle.
    Added a "plasma cannon," another option for a relatively heavy, fixed gun.
    Gave javelins and rockets to some ships as default weapons, to test them out in action.
    Fixed a math error in the targeting AI.
    Cleaned up the ship definitions and reduced the damage most of them do when they explode.
    Added ship characteristics to go with all the new images I just uploaded. There are now 20 different models of ships in the game.
    Fixed the rotations, unit vectors, and hardpoint locations so that up is always negative y and always 0 degrees.
    Added a new ship, the Cruiser.
    Added the capability for ship explosions to damage and move nearby ships.
    Tweaked the freighter and also increased the power of the missile weapons.
    Added a new ship, and adjusted the balance of the engine attributes and sizes.
    Did some balancing of the ship attributes, speeds, and prices.
    Added two new ship types.
    Added outfit images for five sizes of shield generators.
    Added images for the remainder of the weapon systems you can buy.
    Added images for the laser and blaster.
    Added images for different sizes of batteries and fuel cells.
    Shipyard: switched to sorting ships by category. Also now hides empty categories in the shipyard and outfitter.
    Renamed some of the data files, for clarity.
    Got outfit buying and selling working.
    Updated the mass, cost, and thumbnail for all outfits, and shortened some of their names.
    Added two "drone" ships (tiny, pilot-less fighters that would be carried by other ships).
    Added a new "bulk freighter" ship.
    Added another ship image.
    Added a new ship, the Hawk.
    Added a secondary trigger key for weapons that use up ammo, and a display of ammo remaining for each.
    Updated the AI to fire each individual weapon on a ship only if it can hit something.
    Added a very rudimentary combat AI.
    Engine: updated so that any ship that is hit directly by a projectile is "provoked" against the ship that fired it (even if it was not previously an enemy).
    Fixed blast radii so that they also affect friendly ships, including the ship that fired the weapon in the first place.
    Data updates: added some basic "sale" sets, and costs for some more of the outfits.
    Uploaded all the files from my local repository to Google Code.
    refactor(organization): Added subfolders to data (#4895)
    Corrected the descriptions of the Sidewinder and Meteor missiles
    Spelling & Grammar Fixes
    
    #4255
    Changes to missile balance and usage
    
    #4162
    Fixed the laser turret hardpoint and projectile to match the outfit sprite
    
    #4145
    Increase blasters velocity 25%
    
    https://github.com/endless-sky/endless-sky/pull/3861
    * doubled blaster velocity, halved lifetime
    
    * Blasters reload and fire decreased by a third
    
    * reverted fire rate edit
    
    * blasters +50% velocity, −33% lifetime
    
    * blasters only +25% velocity, −20% lifetime
    
    * 46 lifetime because of range
    
    * blaster velocity to 10.625, per request
    Organized ship, outfit, and effect attributes to be consistent
    
    #3868
    Tweak default ship and variant loadouts to reflect missile changes
    
    #3922
    Improve the playability and tactical flexibility of human missile weapons (#3866)
    
    * Improve the playability and tactical flexibility of human missile weapons
    
    * Tweak the tweaks
    
    * Increase torpedo ranges to make them into the kind of standoff weapons
    that anti-capital-ship combat dictates
    
    * More playtesting tweaks; harmonize DPS improvement to +20%
    Corrected beam laser description (#3867)
    
    * Corrected beam laser description
    
    Changed the beam laser description, because:
    * 300 is not a "slightly" shorter range than 510
    * 60*(1+1.3)=138 is not "a comparable amount of damage" to 5*(9.6+6)=78.
    
    * removed last sentence from beam laser description
    Improve some missile launch and explosion sounds (#3869)
    
    * Improve some missile launch and explosion sounds
    
    * Correct license name formatting
    tweaked javelin reload time
    Halved all the missile hit force amounts that were recently increased.
    Fix typos
    Modified Blaster description correction
    
    Correcting now-inaccurate text which mentioned 'increased range'.
    Changed phrasing about energy requirements to match phrasing in the Modified Blaster Turret, because I feel that the terminology 'significant increase' is no longer accurate, as the blaster rebalance has made the increased energy consumption of the Modified Blaster rather minor compared to its prior difference from the Blaster.
    Making torpedoes less effective against small targets (based partly on @Pointedstick's suggestions).
    Tweaked the mechanics of hit / firing force to increase its effect on large ships and decrease the effect on small ships, so large ships can't shrug it off completely and small ships aren't sent flying quite as far by every ship explosion. Also increased hit force for most missile weapons.
    Adjusted the Meteor Missile's description  (#3270)
    
    * Adjusted the Meteor's description to provide some more hints about how
    best to use and defeat them
    
    * Improved the description according to @endless-sky's comments
    Reduced the turn rates of most turrets, making it so the heaviest ones have trouble tracking fast ships.
    Increased blaster speed and range so it's useful in different situations than a laser. Also reduced the electron beam damage significantly, and the heavy laser by a tiny amount.
    typo fix for @UnciaPrima (#3399)
    Fixes for the Proton Turret
    Typo fix.
    Proton Turret (#3316)
    
    * Proton Turret
    
    * Corrected mass to match space taken up
    
    * Made sure that the new (Proton) variants appear in alphabetical order
    
    * Review feedback
    
    * Reduced to 34 tons (giving it effectively a 6-ton base and mount), which
    should hopefully make it a bit more attractive
    
    * Added copyright info
    
    * Updated hardpopint image (drop shadow, correct lighting)
    Slightly buffed the Proton Gun in order for it to compete with the range and hit force of the Particle Cannon and the heat damage of the Plasma Cannon
    Update weapons.txt
    Reduced the lifetime for the particle beam impact sprite, because the animation is over after 15 frames.
    Reorganizing the human, Hai, and Pug data so that weapon effects are always defined right after the weapon, instead of in a separate "effects.txt" file.
    Slight change to the laser turret's description (#123)
    
    To account for the "limited turret turn rate" update
    Reduced the top speeds of some missiles to compensate for the 10% speed boost provided by #2592.
    Added turn rates for all the turrets in the game. Smaller turrets track faster, in general.
    Added hardpoint sprites for all the turrets that didn't have one yet and that did have an outfit sprite already.
    Added hardpoint sprites for most of the alien weapons.
    Gatling bullets no longer show up as missiles on radar or attract anti-missile fire.
    Changing ammo rack categories to "Ammunition"
    Added the ability to specify plural forms of outfit and ship model names.
    Took out the turret on the Violin spider. Also fixed an extra, unused sound spec.
    Replaced a non-ASCII character.
    Prose and grammar improvements for many ship and weapon descriptions (#1546)
    
    * Reduced wordiness and increased clarity for many ship and weapon descriptions
    
    * Reverting my change to convert single-dashes to em-dashes; the space-separated single dashes are intentional
    Better explosion sounds (#1526)
    
    Includes a new huge explosion sound and a new heavy rocket explosion sound.
    Regularizing the names for size progressions to always be tiny < small < medium < large < huge. (Replacing "big" with "large" in some places.)
    Fixed a few things in the new Hai weapon data.
    hai carriers + gatling gun +rail gun (#1284)
    
    Added the Hai carriers, Gatling guns, and railguns (@Amazinite, @LocalGod79, @mdsmestad, @Wrzlprnft).
    Gave all ammo mass (and reduced the mass of all launchers, to compensate) so that you can't store infinite ammo in cargo.
    Update weapons.txt
    re-removed hai weapons from weapons.txt
    
    after merging updated commits to remote tracking branch
    Adjusting some weapon prices for better balance (e.g. so laser turrets cost more than blaster).
    Homing weapons can now have different tracking modes: better against big ships (optical), against hot ships (infrared) or against ships with no radar jamming.
    And i thought i made no mistakes this time...
    Moved hai outfits into one file, by local god
    Added hai-outfits, added them to outfitters, added them to ships
    Added frame rates for a few projectiles that did not specify them.
    Made all weapons except for missiles deal 1/3 less hull damage, to fix the balance where hull seems way too weak compared to shields.
    Update weapons.txt
    Added a "stream" weapon attribute that has it fire streamed rather than clustered even if it is vulnerable to anti-missile.
    Increased the range of the small anti-missile, to make it less useless.
    Fixed typo in Sidewinder Launcher description
    Cleaning up some unused sounds, and regularizing the names of others to use spaces instead of underscores.
    Continuing to add and update sound effects.
    Updating more of the sounds.
    Updated the blaster and torpedo sounds.
    Updated the flamethrower effect and sounds.
    Added new sounds for the beam weapons.
    Added sounds for takeoff, landing, and firing the nuke.
    Added sounds for various anti-missile weapons, with the volume better balanced to the other sound effects.
    Fixed the Sidewinder's description of how many missiles you can hold per launcher.
    Switched to using the presence of an icon to indicate that a weapon is secondary, so that there can be secondary weapons that have no fuel or ammo cost.
    Removed extra 'the'
    Anti-missile desc typo fix
    Made a few small balance tweaks.
    Made turret weapons (aside from anti-missiles) increase your required crew by 1. (This gives you the option to have cheap freighters if you don't care about giving them weapons.)
    Made the explanatory note for the nukes more clear.
    Added a warning to the nukes mentioning that they're a one-shot weapon.
    Added outfit thumbnails for the other Hai weapons.
    Added outfit images for the pulse cannon and pulse turret.
    Added another new weapon for the Hai: the Tracker, a fast, long-range missile that is not very effective up close due to its large turning radius.
    Added a new weapon for the Hai, the Pulse Cannon / Turret. Also added an icon to use for outfits (especially of alien origin) that have no thumbnail yet.
    Added an "ion cannon" weapon. I'll need a lot of testing to make sure it's balanced - it makes defeating a single isolated foe too easy, but also does much less damage than other weapons of comparable size.
    Added "firing" animations for some of the missile weapons.
    Fixed a bunch of spelling errors found by the codespell tool.
    Fixed the display of "weapons" with reload = 0.
    Added an outfit image and icon for the nuke.
    Split ammunition and missile lunchers into two separate categories, mainly so it's clearer to new players that "ammunition" is not something you can install by itself.
    Reduced the energy requirements of the electron beam. It doesn't make sense for it to use so much more energy and do less damage, compared to plasma turrets.
    Added two more mission to the Free Worlds endgame.
    Added the nuke, and tweaked the AI to be a bit more cautious about firing it when the target is nearby.
    Tweaked the handling of sub-munitions. In particular, they are now only created if the projectile does not hit something, and if it does hit something, it does all the damage its submunitions would have done.
    Added "Mark II" upgraded variants of all the Navy ships.
    Added a new weapon, the electron turret (basically an upgrade to the heavy laser).
    Reduced the heat damage of the plasma turret, because it seems too powerful right now.
    Added a "Flamethrower" weapon that uses hyperspace fuel as ammo, and updated the AI so it will not fire off its last jump worth of fuel.
    Added a new torpedo launcher, and updated the projectile sprites for several other weapons.
    Added a new weapon, the Plasma Turret.
    Added an impact sprite for the particle beam.
    Added an impact animation for the proton gun.
    Added a new heavy weapon, the Proton Gun.
    Reduced missile damage a bit to balance them better, and also added a "--weapons" command line option to print statistics about all weapons.
    Added a new ship, the Syndicate Arrow, intended as a luxury ship rather than something the player will find practical.
    Increased the damage and decreased the cost of missiles, to make them more attractive as weapon choices.
    Adjusted the damage done by the plasma and particle cannons to better differentiate them from the heavy laser.
    Slightly increased the damage done by the Blaster. Also removed the turrets from the Clipper and tweaked the intro text.
    Got basic audio support working. I do need to track down better sounds, or at least balance the audio levels better between them.
    First attempt at rebalancing ships, by adjusting the engine capabilities and various ship outfits.
    Added license statements to all the data files.
    Added a new ship, the Protector.
    Added a "flamethrower" weapon, as a test of weapons using fuel as ammunition.
    Added a "plasma cannon," another option for a relatively heavy, fixed gun.
    Added the "modified blaster," a more powerful and power-hungry Energy Blaster mostly used by pirates.
    Added description text for all the weapons.
    Gave javelins and rockets to some ships as default weapons, to test them out in action.
    Tweaked the freighter and also increased the power of the missile weapons.
    Added two new ship types.
    Added outfit images for the ramscoop and hyperdrive.
    Added images for the remainder of the weapon systems you can buy.
    Added new outfit images for the javelin and meteor missiles.
    Added outfit images for the particle cannon and anti-missile.
    Added images for the "heavy laser."
    Added images for the laser and blaster.
    Updated the mass, cost, and thumbnail for all outfits, and shortened some of their names.
    Added an image for a new "Juggernaut" ship. Also made the individual laser beam sprites less bright, so I don't have to pulse them to make them dim enough.
    Added a secondary trigger key for weapons that use up ammo, and a display of ammo remaining for each.
    Updated the AI to fire each individual weapon on a ship only if it can hit something.
    Added a very rudimentary combat AI.
    Fixed blast radii so that they also affect friendly ships, including the ship that fired the weapon in the first place.
    Data updates: added some basic "sale" sets, and costs for some more of the outfits.
    Uploaded all the files from my local repository to Google Code.
    feat: New Navy logistics ships (#5108)
    refactor(organization): Added subfolders to data (#4895)
    fix(organization): Moved Quarg/Pug names, hails, and fleets into their respective files
    Added some ships to the respective pirate fleets of their region
    
    #4293
    Gave Tactical and Asteroid scanners to ships where appropriate
    
    #4367
    Changes to missile balance and usage
    
    #4162
    Added Wasp variants to Small Core Pirates fleet
    
    #3926
    Give more luxury ships Luxury Accommodations (#4043)
    Luxury Accommodations and high-class passenger jobs (#3359)
    
    * Luxury Accomodations and high-class passenger jobs
    
    * Revert change to require Luxury Accommodations for Deep scientists;
    they're probably as strapped for cash 1000 years in the future as they
    are today
    
    * Match existing style for dashes used instead of commas
    
    * Update image to have a nice wooden bed and a patterned bedspread
    
    * - Gave Luxury Accommodations to the Blackbird by default, to match its description
    - Added luxury variants for the Arrow, Bounder, and Flivver
    - Added a few fleet options for luxury ships in the Core and the North
    
    * Reduced the number of passenger jobs that are gated behind owning Luxury
    Accomodations
    
    * Restored original formatting for Hai tourist jobs' payment syntax
    
    * Typo
    
    * Adjust Quantum Keystone description to hint at the jobs it helps unlock
    
    * Bring some of the variants up-to-date with recent missile changes
    Tweak default ship and variant loadouts to reflect missile changes
    
    #3922
    Fancier ships in paradise (#3386)
    
    * Added some more fancy and passenger-oriented ships to the fleets that
    hang around Paradise planets
    
    * Corrected a formatting error
    Proton Turret (#3316)
    
    * Proton Turret
    
    * Corrected mass to match space taken up
    
    * Made sure that the new (Proton) variants appear in alphabetical order
    
    * Review feedback
    
    * Reduced to 34 tons (giving it effectively a 6-ton base and mount), which
    should hopefully make it a bit more attractive
    
    * Added copyright info
    
    * Updated hardpopint image (drop shadow, correct lighting)
    Split the Deep fleets into a Merchant component and a Deep Security component.
    Fixed improperly indented fleet ship
    Pirate jobs (#2646)
    
    * Pirate jobs
    
    * Removed reputation condition from normal jobs
    
    They aren't relavent to this PR anymore. Will be included in slavery PR.
    
    * Bounty hunters less likely to come after player...
    
    but will come after the player even if they only land on pirate worlds.
    
    * Changing pirate defense missions to offer in spaceports
    
    * Minor changes
    
    Not as likely to get the hardest stolen vessel to transport
    Wording changes in descriptions
    Removed redundant numbering on elminating law enforcement jobs
    
    * Illegal cargo related hail
    
    * New illegal cargo names (@comnom)
    
    * A bunch of changes
    
    Changed the `to offer` conditions on most of the jobs.
    * Only the smaller cargo jobs and the smallest passenger job offer with
    either a not-too-low pirate rep or a high combat rating.
    * Required combat ratings for jobs now correspond to levels, the lowest
    combat level requirement being ~5 (150) and the highest being ~8 (3000).
    
    Removed all mentions of "your crew" in `illegal` messages. Highly wanted
    passenger jobs now mention the cargo you must carry.
    
    Renamed slave transport jobs and reworked the descriptions. They now
    require a combat rating and positive pirate rep. Changed cargo name from
    "shackles and grub" to "slave food."
    
    Large law enforcement jobs now mention their size.
    Lowercased all instances of "militia" in descriptions and dialog.
    
    Reworded the description of large "Eliminating Competition" jobs.
    
    Raiding merchant jobs now require you to have a positive pirate
    reputation so your escorts don't attack you.
    
    Removed the ransom jobs.
    
    Fixed a typo. "Convoy at <system>" -> "Convoy near <system>"
    
    * Created highly illegal substance and cargo categories
    
    It doesn't make sense for jobs to sometimes consider a commodity illegal
    and sometimes highly illegal, so I've moved some of th commodities over
    into a highly illegal category.
    
    Yes, stolen silver spoons are highly illegal. You never know what
    pirates could do with those things.
    
    * Lowered the payment for each job, in some cases drastically
    
    Pirate jobs should be good, but not THAT good.
    
    * Replacing all "target" governments with the new target personality
    Made some of the more militaristic fleets have "opportunistic" turret gunners.
    fix: Water Bug (wrong: Waterbug)
    Added separate "Deep Military" fleets for planetary defense. Also fixed the "Small Deep" fleet not specifying fighter names.
    Pirate raids are now more powerful, but only come if the attraction of your cargo outweights the weapons you have to deter them.
    Hai specific jobs (#1928)
    
    * Hai jobs
    
    * Reduced frequency of to Hai space jobs
    
    * Error fix + escort job changes
    
    * Vacation jobs now mention passenger number
    
    * Rare chance of Hai variants in northern merchants
    
    To go along with the escort jobs of Hai variants going to human space.
    
    * Wording fix
    
    * Another wording fix
    
    Also renamed escort missions to special escort missions so they pop more
    in the job board
    
    * Name change
    
    * Delivery jobs set between 2-10 cargo
    
    so that you don't get big jobs that don't make sense for the set payment
    
    * Name change
    
    * Payment tweak
    
    * Lowering the special delivery payment a bit more
    
    * Removing to Hai space jobs and changing supplies jobs
    
    * Hai specific cargo and passenger jobs
    
    Just copy/pasted human jobs right now.
    
    * Changing attribute name
    
    * Made Hai jobs slightly bigger than human jobs
    
    I think
    
    * Increased job sizes a bit
    
    Now that I have more understanding of what the numbers do
    Added an "appeasing" personality that dumps cargo when attacked to distract its attackers.
    Added NPC AI support for harvesting flotsam. (For miners, or for distracting pirates by dumping cargo.)
    Added a "mining" personality that circles around searching for minable asteroids, then destroys them. (It doesn't know how to harvest the flotsam yet, though.)
    Human Hai Fleets (#1922)
    
    * Human fleets with Hai outfits
    
    * Variants
    
    * Map fleet update
    Added occasional Pirate Bactrians in the North.
    hai carriers + gatling gun +rail gun (#1284)
    
    Added the Hai carriers, Gatling guns, and railguns (@Amazinite, @LocalGod79, @mdsmestad, @Wrzlprnft).
    Quarg in Korath space now travel in packs, for safety.
    Removed from fleets.txt
    Sprinkled around more in fleets.txt
    
    also, description touch up.
    events and fleets
    
    updated with new carrier names
    and a couple of Free Worlds fleets
    
    these seem to be fairly balanced with the other fleets of that call
    moved sales to after there's a Free Worlds to request the carrier solution
    
    added ‘feeder and ‘snest to a couple of Southern Merchant fleet variants
    Moved some Korath data into a separate "korath.txt" file.
    Switched to a more organic-looking aim "confusion" effect.
    Fixed a typo in the Marauder fleets.
    Renamed the "Modified Argosy (Laser)" to reflect its actual weapons (Blaster).
    One Commit
    
    carefully inserted each segment of ships to be added, being careful not
    to delete anything - not sure why github displays the changes that way.
    
    jobs too, but it’s less confusing.
    Fixed the Korath fighter names.
    The "Heavy" behemoth is no longer part of stock fleets.
    Fixed whitespace for new content (spaces -> tabs) and changed the research data mission around a bit to turn it into a Syndicate corporate espionage mission
    Added several new repeatable jobs available at various places throughout the galaxy, as well as a new "Bounty Hunter" faction in support of one of the missions (and future ones).
    Switched the militia fleets to use the militia ship names.
    New Syndicate heavy warship: the Vanguard
    Added a third world-ship sprite.
    Added a second world-ship variant, and adjusted the color of the first one.
    Added a "frugal" personality type that tells certain ships (including escorts) to refrain from expending ammunition unless they are outgunned.
    Added two new ships, the Headhunter and the Modified Argosy.
    Added a new line of freighter with three different sizes, to provide more medium-price freighter options.
    Added two new small ships, to add a bit more variety.
    Made the Free Worlds fleets disable all their opponents, to match with their stated goals of not outright destroying Navy ships.
    Added quite a few new ship "variants," and modified all the fleet descriptors to include those variants.
    Switched to having the hail messages be a property of each government rather than individual ships or fleets (so that mission-related ships will use them, too, to add a bit of flavor in battles).
    Added ship names specific to the Pug and the Korath.
    Added new hail messages for the Pug, the Navy (hostile), and pirates (hostile).
    Made a better graphic for the Corvette, and made it appear more frequently (including outside the Deep).
    Added another few missions in the Free Worlds endgame.
    Added some Free Worlds events foreshadowing the Oathkeepers and the Alphas, so it will be less surprising when they show up later.
    Added data for the Pug outfits and ships, and for their "home" system.
    Added a few more missions to the main branch of the Free Worlds.
    Added some hostile hails from the Quarg.
    Added a new Korath ship, the "World-Ship."
    Added the Korath territory to the map (near the galactic core).
    Added a new Korath ship, the Chaser fighter.
    Added a new species, the Korath, and one of their ships, the Raider, along with several weapons and outfits for it.
    Added a "surveillance" personality type that flies around scanning whatever objects its sensors can scan, and that also launches drones and then leaves them behind in the system to do their own reconaissance.
    Added "events" representing the gradual deployment of fleets and development of a front between the Republic and the Free Worlds, including several new Republic Navy bases in the region. Made the two sides start out not actually shooting at each other yet.
    Added a new heavy weapon, the Proton Gun.
    Added a new luxury ship, the "Star Queen."
    Added a new ship, the Syndicate Arrow, intended as a luxury ship rather than something the player will find practical.
    Added basic AI support for the afterburner (and added one ship variant with an afterburner, to test it).
    Added some "hostile" hail messages from the pirates.
    Made the "pirate raid" on players with lots of freighters more powerful, and added a personality type for attacking only the player's ships.
    Modified the fleets to occasionally have ships from other regions of space.
    Got planetary defense missions working (three different templates for the Core, North, and South).
    Added a template for "hostile" messages for civilian ships to send if you attack them.
    Added one more Syndicate ship. I've now got at least the bare minimum number of ships that I wanted to have (five or more per each of seven ship manufacturers).
    Added two more Megaparsec ships.
    Added two more Lionheart ships, the Mule and the Bactrian.
    Added a new ship, the Lionheart Raven.
    Added a new Navy ship, the Gunboat (which also serves for recon and scanning).
    Added occasional "hail" messages that other ships send to you, with some sort of "flavor" text that gives you a sense of what their government is like.
    Modified the AI to have it scan any other ships in system, if the ship has a scanner equipped. If one of the player's ships is scanned, a message is displayed.
    Added pirate "raiders" whose frequency depends on how many freighters are in the player's fleet.
    Added ship names for each government that didn't have them yet.
    Added license statements to all the data files.
    Added new ship names for military ships.
    Added a new ship, the Protector.
    Added three new ship types, to be used mostly in the Deep.
    Added drone bays to the republic cruiser.
    Got fighters in fleets working.
    Added a new heavy freighter, the Behemoth. Also updated the fleets and shipyards with the new ships I've added recently.
    Added a new Quarg ship, the Wardragon.
    Added a "personality" class representing whether a fleet of ships does things like plundering opponents (which pirates now do).
    Added support for named "variants" of a given ship, so that for example a Pirate Argosy can have different equipment than a Merchant Argosy.
    Implemented a placeholder version of boarding and plundering (without a dialog yet to choose what items you steal).
    Added individual "fleet" descriptions for each system, so that the local ships vary depending on where in the galaxy you are and how populous the system is.
    Added a variety of fleet descriptions. Now I just need to assign them to each system.
    Switched to storing cargo in PlayerInfo when landed, then divvying it up among your ships when taking off. This makes it possible to use the cargo capacity of all your ships, and avoids needing to sell cargo when selling ships.
    Added an alien ship.
    Added "shipyard" specifications to planets throughout the galaxy that seem likely places for a shipyard.
    Added several new options for the fleets that can enter the system.
    Added some occasional pirates, to spice things up.
    Added a "Fleet" class, representing a set of ships that might appear in a given system plus the logic for placing them (taking off from a planet or entering via hyperspace).
    feat(content): The Kestrel Available mission now shows the Kestrel thumbnail instead of its sprite (#5398)
    fix(typo): Fixed missing or extraneous quotation marks (#5131)
    feat: Increased heat dissipation of Kestrel (More Shields) for additional survivability against heat damage (#4961)
    feat: Added fighter bays to the Kestrel (#4981)
    feat(balance): Reduced the Kestrel (Weapon)'s gun ports from 18 to 12 (#4906)
    
    Bring it in line with the author Kestrel and shrink the gap between the next closest obtainable ship in gun ports while keeping the ship novel.
    refactor(organization): Added subfolders to data (#4895)
    Increased Kestrel base cost
    
    #3433
    Some "Test Dummy" ships settle for disabling your ship
    
    Refs endless-sky#4115
    Added a thumbnail definition to the "Unknown Ship Type"
    
    #4042
    Adjust Kestrel customization outcomes
    
    https://github.com/endless-sky/endless-sky/pull/3976
    
    Base model:
     - Adds 2 Tactical scanners
     - Increases base shield and hull
     - Reduces required crew
     - Reduces drag and increases heat dissipation
     - minor bump to stock weapon capacity
    
    "More Engines"
     - Reduces drag further
     - More fuel capacity
     - +30 engine capacity (instead of +20)
    
    "More Shields"
     - +3000 shields (instead of +2700)
     - +1500 hull (instead of +1300)
    
    "More Weapons"
     - +40 weapon capacity (instead of +20)
     - +12 gun ports (18 total instead of 6)
    Added thumbnail images for all the human ships (except those that are never sold in shipyards).
    Use add attributes (#3483)
    
    * Use "add attributes" to simplify Kestrel definition
    
    * Use "add attributes" to simplify Marauder variant definitions
    
    * Simplify "Archon (Cloaked)" definition
    
    * Simplify "Deep River <N>" definitions
    
    * Avoid variant definition using a variant as its base
    
     - Without dependency checking in FinishLoading, if a variant references another variant as its base model, there is no guarantee the base variant is fully defined yet
    Use <waypoints> substitution (and quote a few user-customizable tokens)
    Regularized location filters to use "near <name> 100" to mean anything connected to <name>, including that system, and "near <name> 1 100" to mean anything connected, not including that system.
    Delay messages that may need hyperlinks
    
     - Also added "fuel capacity" to Rand's asteroid so it will "hit" and disappear (instead of circling).
     - Add near/distance filters to ensure a route exists for certain jobs
     - Typos in pirate planetary defense missions
    Cleaning up ship variants that had costs different from their base class or that defined their own death weapon (which would be ignored).
    Style Fix
    Regularizing the names for size progressions to always be tiny < small < medium < large < huge. (Replacing "big" with "large" in some places.)
    Fixed the OTHER Kestrel's coords (#1373)
    
    * Fixed the OTHER Kestrel's coords
    
    Missed this one. I thought it was a variant...
    
    * Fixed MZ's Kestrel coordinates
    Fixing Kestrel turret coordinates
    Defined final explosion sounds for all ships, and also cleaned up the ships.txt definitions a bit.
    Fixed an incorrect system name in the Kestrel mission.
    In the Kestrel mission, thefirst Kestrel you fight is now labeled an "Unknown Ship Type."
    Fix an event tag.
    Fixed a bunch of spelling errors found by the codespell tool.
    Added a special Tarazed Corp. mission to get access to the Kestrel.
    fix(typo): Missing space in a hail (#5394)
    feat(content): Added new civilian hails and news messages (#5351)
    fix(content): Adjusted out-of-place hail possibility (#5348)
    fix(style): Consistent capitalization of drives
    
    Somtimes drive names were capitalized and sometimes they weren't. Switched capitalized instances to all lowercased.
    
    Also fixed another instance of a ship name being in quotes where it shouldn't have been.
    feat(content): Added a new hail for merchants (#5213)
    Typo fix
    fix (typo): Goverment -> Government
    feat: New hails in humans space (#5012)
    fix: Typos (#4988)
    refactor(organization): Added subfolders to data (#4895)
    fix(organization): Moved Quarg/Pug names, hails, and fleets into their respective files
    feat(hails): Another media related friendly civilian hail (#4473)
    feat(hails): Providing more variety with hails related to media from friendly civilians (#4584)
    Added missing hails to alien governments
    
    #4553
    Separating a list of contraband into its own phrase to provide more variety in hail messages
    
    #4534
    Fixed some errors in one of the friendly pirate hails
    
    Some combinations could result in two words smashed together or double punctuation at the end.
    Minor spelling fixes (#4504)
    
    Fixes minor spelling error in datafile and in comment.
    Typo on data/hails.txt was reported by Hyugat on discord in endless-sky-chat.
    Add hostile militia retorts
    
    #3710
    typo
    Add missing space to hail
    Fix typo: milita -> militia
    Expanded on Disabled Hails (Fixed) (#3719)
    
    * Update hails.txt
    
    * Update hails.txt
    
    * Update hails.txt
    
    * Update hails.txt
    
    * Update hails.txt
    
    * Update hails.txt
    
    * Update hails.txt
    
    * Add help text for boarding friendlies to repair them
    
    * Added Hot Showers
    
    * Added Hot Showers
    
    * Delete hot shower.png
    
    * Update outfits.txt
    
    * Update hails.txt
    
    * Removed the shakespearean insult lists
    
    * Update hails.txt
    
    * Added some needed spacing
    
    * Update hails.txt
    Per request (#3416)
    
    * Create "Power of the People", a modified Osprey warship
    
    * Use common "friendly author" phrase
    
    * Add Phrases
    
     - Amalgamation of various pop culture references, mostly
       - Han Solo
       - Ernest
       - Starship Troopers
       - The Fifth Element
       - Die Hard
    
    * Update copyright file
    
     - Removed duplicated Vanguard entry
    
    * Adding "friendly author" to Captain Nate (by request)
    Fixed a phrase typo
    Added some unique hails for the Deep Security forces.
    Syndicate Target Practice fixes (#2902)
    
    * Made the syndicate target ships self-destructing automata and imposed a
    penalty for failure, thereby resolving the following issues:
    - https://github.com/endless-sky/endless-sky/issues/2268
    - https://github.com/endless-sky/endless-sky/issues/2890
    
    * Added appropriate hostile and disabled hails for the robotic Syndicate test dummy ships, which resolves https://github.com/endless-sky/endless-sky/issues/2151
    
    * Removed unnecessary boilerplate (thanks @lifeyouristhis) and fixed a
    typo in the new hail definition
    
    * Typo fix (thanks @Bladewood and @tehhowch)
    
    * Corrected a Bender quote
    
    * Fixing the formatting again
    
    * Added penalty payments in exchange for more leniency about
    offering you subsequent jobs if you blow up the target ships
    
    * Typo/in-progress testing fix
    
    * Added some Hitchhikers' Guide to the Galaxy robot quotes
    
    * Gave the new hails a lowercase name for consistency
    
    * ...You know, all of them
    
    * Super duper duper actually all of them
    enhancement: Allow mods to change wormhole hail messages (#2706)
    
    * Allow mods to change wormhole hail messages
    
    * Drop leftover, unneeded commas
    Black vegetable new hails (#2275)
    
    * Update hails.txt
    
    * Added more hails
    
    * Replace with contraction
    
    "there is" sounds a little stodgy.
    
    * Cleaned up spaces
    
    I accidentally tried to insert spaces where tabs were expected.
    
    * older generation --> oldsters
    
    I'm starting to wonder if I am actually part of the older generation...
    
    * fixup from reviews
    Pirate jobs (#2646)
    
    * Pirate jobs
    
    * Removed reputation condition from normal jobs
    
    They aren't relavent to this PR anymore. Will be included in slavery PR.
    
    * Bounty hunters less likely to come after player...
    
    but will come after the player even if they only land on pirate worlds.
    
    * Changing pirate defense missions to offer in spaceports
    
    * Minor changes
    
    Not as likely to get the hardest stolen vessel to transport
    Wording changes in descriptions
    Removed redundant numbering on elminating law enforcement jobs
    
    * Illegal cargo related hail
    
    * New illegal cargo names (@comnom)
    
    * A bunch of changes
    
    Changed the `to offer` conditions on most of the jobs.
    * Only the smaller cargo jobs and the smallest passenger job offer with
    either a not-too-low pirate rep or a high combat rating.
    * Required combat ratings for jobs now correspond to levels, the lowest
    combat level requirement being ~5 (150) and the highest being ~8 (3000).
    
    Removed all mentions of "your crew" in `illegal` messages. Highly wanted
    passenger jobs now mention the cargo you must carry.
    
    Renamed slave transport jobs and reworked the descriptions. They now
    require a combat rating and positive pirate rep. Changed cargo name from
    "shackles and grub" to "slave food."
    
    Large law enforcement jobs now mention their size.
    Lowercased all instances of "militia" in descriptions and dialog.
    
    Reworded the description of large "Eliminating Competition" jobs.
    
    Raiding merchant jobs now require you to have a positive pirate
    reputation so your escorts don't attack you.
    
    Removed the ransom jobs.
    
    Fixed a typo. "Convoy at <system>" -> "Convoy near <system>"
    
    * Created highly illegal substance and cargo categories
    
    It doesn't make sense for jobs to sometimes consider a commodity illegal
    and sometimes highly illegal, so I've moved some of th commodities over
    into a highly illegal category.
    
    Yes, stolen silver spoons are highly illegal. You never know what
    pirates could do with those things.
    
    * Lowered the payment for each job, in some cases drastically
    
    Pirate jobs should be good, but not THAT good.
    
    * Replacing all "target" governments with the new target personality
    Fix in pirate hail name
    Added the default friendly disabled hail to hails.txt
    Typo fix. (@Alkallid)
    can not -> cannot
    Hail typos
    
    though - thought
    
    payed - paid (yes, I know payed is a word, but paid is used everywhere else in the game.)
    More hails (#2129)
    
    * New bounty hails
    
    Gave the ships designated as "bounty" it's own dialogue, for more
    diversity.
    
    * New friendly unfettered hai hails
    
    Because sometimes, they are friendly, I gave the unfetered hai some
    friendly hails
    
    * Corrections
    
    * Fixed double spacing issues
    
    in theory
    
    * Fixed the latest mistakes. Again.
    Typo fix. (@Bladewood)
    Friendly pirate hails (#2073)
    
    * Friendly pirate hails
    
    * Forgot to actually make them use the hails
    
    * Fixing odd wording and typos
    
    * Wording change
    Re-did the songs and band names, as requested (#1754)
    
    * Re-did the songs and band names, as requested
    
    * TMBR was mistakenly listed twice; removed one instance
    Typo fix on hails
    Militia Hails (#1907)
    
    * Militia hails
    
    Plus some "hostile free worlds" hails
    
    * Update governments.txt
    
    * Typo fix and hail change
    
    * Typo fix
    fixed 2 typos (#1883)
    
    * fixed "Tarazed Stadium" not having Stadium capitalized
    
    first pull request so not sure if it works
    
    * Update hails.txt
    Typo fix.
    More variety in the hails (#1633)
    
    * Cleaning up the formatting based on the Don't Repeat Yourself principle, which should make it easier to add entries without introducing formatting errors (missing spaces, missing commas, etc)
    
    * Re-did the band name and song title sections, as requested. Also added more content elsewhere, and removed a few awkward phrasings
    
    * Removing TMBR's explicitly mentioned songs and adding a bunch more general songs
    
    * Removed the new band stuff, which was controversial; will re-work that stuff later.
    Changed how sub-phrases work in names and hails, so you can specify multiple sub-phrases to choose between.
    This hail was awkwardly worded with many of the preceeding options. Cleaned it up a bit.
    More hails and ship names for extra flavor
    Typo fix.
    Navy wasn't capitalized
    Fix awkward use of "world" in Navy hail
    Fixed the new hails that include fictional futuristic bands.
    Mistakes were made...
    Corrected one song name
    
    Sorry, i had to do this.
    I really want this to stay here, but we can cut out the 'Steam' to make it more general
    spacing
    More fictional Bands
    
    and added ' ' s around bandnames and songames
    implemented "musical venue" subphrase
    Fictional Bands and Songs
    
    Worked in some fictional Bands + Songs
    more alphabetization
    alphabetized
    cleaner
    spacing
    more variety in the use the song/band
    
    also fixed Queen’s dumb quote…
    made it easier to add other bands/songs to civilian hail
    
    and added a few favourites (a couple classic, one newer)
    Added a civilian phrase...
    
    ...referring to phrase 'There Might Be Riots'.
    Made a few wording changes in the hails.
    remove trailing whitespace
    hail typos
    Fixed a bunch of unmatched quotation marks.
    Made some changes to the "I'm not telling you my good trade routes!" hails to make a few of them sound less awkward
    Fixed spacing issue in hails.txt, and also took the opportunity to add a new one
    Fixed another punctuation error I just noticed
    Fixed lack of punctuation one of the hails, and changed periods to exclamation points because the Syndicate is so darn friendly!
    Shorten hails per Issue 572
    
    Shortening "The best way to be safe from pirates" hails that can run off the screen, per https://github.com/endless-sky/endless-sky/issues/572
    Fixed a few glitches in the game data.
    Fixed these hails so that there's a space where previously there was none
    More Syndicate hostile hails, and a few grammar corrections
    A few tweaks to the new jobs based on community feedback
    Removed the semicolon option in the last Bounty Hunter hail to make all variants grammatically correct
    Added several new repeatable jobs available at various places throughout the galaxy, as well as a new "Bounty Hunter" faction in support of one of the missions (and future ones).
    Noticed a typo in this hail; also, it was too long and would get cut off
    "as you're" doesn't work much of the time (see http://imgur.com/IyEmZag)
    Added garlic to list of commodities
    
    Garlic was added as a food option in my previous commit to 'commodities.txt'
    Minor typos; extra variations.
    correction
    Hostile Syndicate hails
    
    Added hostile Syndicate hails for hostile Syndicate and Extremist
    A few typo fixes.
    Correction
    Re-edit
    Hail increase
    
    Added new hails and developped some of the existing ones
    Toning down the hostile hails a bit (also, there was a typo).
    Also fixed capitalization here; this string was just fulla typos
    Fixed a typo in hails.txt, and also some more electronics commodities
    More ship names, hails, and commodities.
    Disabled enemies will now insult you instead of demanding bribes from you.
    Greatly expanded the variety of hails, particularly by civilian and Syndicate ships.
    data/hails: fix typo
    Added several new types of "friendly merchant" hails, to add more variety and to hint at some of the current troubles in the galaxy.
    Fixed a few typos.
    A boatload of typo fixes.
    
    These come from siccing "ispell" on the data dir.
    Switched to having the hail messages be a property of each government rather than individual ships or fleets (so that mission-related ships will use them, too, to add a bit of flavor in battles).
    Added new hail messages for the Pug, the Navy (hostile), and pirates (hostile).
    Added some hostile hails from the Quarg.
    Renamed "ShipName" to "Phrase" since it is also used for random hail messages.
    Fixed a typo in a hail message.
    Added some "hostile" hail messages from the pirates.
    Added a template for "hostile" messages for civilian ships to send if you attack them.
    Fixed an extra space in one of the hail messages.
    Added occasional "hail" messages that other ships send to you, with some sort of "flavor" text that gives you a sense of what their government is like.
    fix(content): restore existing tribute value from Tinker after Pug War (#5150)
    
    In the event "pug territory liberated", Tinker's tribute is not restored - unlike all the other planets and stations in the affected territories.
    
    Thanks to Pete-2004 for spotting this bug.
    fix(content): Typo in Auxiliary event (#5138)
    
    Reported on Discord by ESSC
    feat: New Navy logistics ships (#5108)
    refactor(organization): Added subfolders to data (#4895)
    Various minor changes to the FW campaign
    
    #4671
    
    * Don't name the Pug before you're told their name (#2693)
    * Characters now react to your suspension from FW Start in FW Middle (#2687)
    * Rastaban and the surrounding system now return to FW ownership for bad karma Reconciliation runs, just much later (#2696)
    * In FWR, Tarazed now switches to Republic after the armistice just like Poisonwood, but joins the FW based off of karma
    * Flamethrowes now unlock for purchase regardless if you helped test them or not
    * Fixed some slight reputation issues in FWR (#2695)
    * Normalized capitalization of Navy ships (#2698)
    * Changed the Danforth epilogue to account for Checkmate players (#2663)
    * Have the Stack Core become available at the end of the campaign regardless of if the player helped escort the freighters
    * Added an extra bit to FW Albatross 2A for if the player says they're gay
    Make stealing an electron beam more consistent and reasonable (#4636)
    Pug occupied planets now change their tribute fleets during the invasion
    
    #4340
    Pug and FW are now properly hostile during FWC Pug 3B
    
    #4309
    Add Mark II Oathkeeper fleets at the same time as the rest of the Navy
    
    #4126
    Do not trigger the remembrance day or war begins missions on uninhabited planets
    
    #4105
    Non-neutrality events for "Neutral" systems during the main plot
    
    #3618
    Terraforming Tundra
    
    #3216
    Prevent messing up the FW storyline (#3749)
    
    * Made Republic hostile to Korath exiles again
    
    It is the duty of the Republic Navy to protect the innocent people; the Korath exiles are attacking the latter. It really doesn't make sense for the Republic to ignore the exiles. And for messing the storyline, other commits will prevent that.
    
    * Prevent messing up the storyline
    
    Made the Republic super duper very very much a lot difficult to be friendly to the player by making them more hostile that it will take a lot of time to kill pirates to make them friendly again
    
    * Prevent messing up the storyline v2
    
    Adjusted the attitude of the Republic to all factions to (-) .1, instead of lowering the reputation to ridiculous amounts
    
    * Prevent messing up the storyline v2.1
    
    (-).01 instead of (-).1
    
    * Republic no longer hostile to Korath exiles
    
    Per https://github.com/endless-sky/endless-sky/pull/3749#issuecomment-393786167
    
    The Korath thing will be separated to another branch instead (and another PR)
    
    * Removed anything Korath
    
    The Republic is no longer hostile to Korath exiles
    Replace timer for "fw syndicate welcoming" with filter-restricted "on enter" (#3598)
    
    * Use an "on enter" to trigger "fw syndicate welcoming"
    
     - If the player uses a jump drive or faster transport, they could arrive in Syndicate space before the "fw syndicate welcoming" event offers
    
    * Switch from "Escort" government to "Free Worlds"
    Removed unnecessary Barb and X1050
    converted reputation adjustments to minimums
    
    per @tehhowch 's comments on #3322
    enable "start of hostilities" to trigger Republic rep penalty (#3322)
    
    * add reputation penalty to "start of hostilities"
    
    moves reputation penalty from mission into event, allows player to become hostile mid-mission.
    
    * rep penalty for "Defend Sabik" moved to event
    
    * start hostility timer increased by 1 day
    
    the mission deadline allows for completing the mission by the end of the final day, but the event was triggering at the beginning of that day.
    
    Moved the event timer out one day.
    
    * reputation change should take minimum
    
    changed per tehhowch.
    
    * made republic reputation penalty a 'minimum'
    
    changed = to <?= per tehhowch
    Added an event that "closes" the prison on Clink once the player makes peace with the Navy, if the player chose to create that prison.
    Added log entries for all the factions and species in the game. Some of them expand over time as you discover new information.
    Shortening events with add variant (Wanderer Defense + Mk2 Republic) (#2593)
    
    * 'Add/Remove Variant' applied to fleet "Wanderer Defense"
    
    Refs #2571
    
    * 'Add/Remove Variant' applied to fleets "Small/Large Republic".
    
    Rather than declare the entire fleet anew, use the new dynamic syntax to avoid squashing possible content from plugins.
    Refs #2571
    
    * Drop unused weight specifier from "remove variant" syntax
    
    * Limit needed "remove variant" uses
    Shortening events with add variant (#2571)
    
    * first 3 fleets done
    
    * finshed with human events
    
    * wanderer/hai/korath events
    
    * adding a space I missed
    
    * corected the frequency of world ships
    
    * Revert "corected the frequency of world ships"
    
    This reverts commit 92fab0b55ec2b8a773bd3f7be6dfcfe5fad7629e.
    
    * "corrected" the correct fleet
    
    changed kor efret home in the last change
    Disabled security on human worlds while the Pug control them.
    Made the Syndicate not bribable while you're fighting them in the FW story.
    Added occasional mining ships throughout human space.
    Ammo storage (#1852)
    
    * Add files via upload
    
    * Capacity increasing outfits
    
    * Boundary change
    Made it so if a government has an "attitude toward" another government of less than +-5%, it has no permanent effects on your reputation. (This is so two governments can be at war without making it so that if you attack one, eventually the other will like you.)
    bug fix (#1749)
    added Skeins to Dreadnought deployment (#1717)
    
    * added Skeins to Dreadnought deployment
    
    addressing #1711
    
    * remove Boxwings from Militia Patrols
    
    and loaded Finchs instead - more in line with the upper end of the
    combat rating of these fleets.
    Fixed the fleets in Nocte and Orvala after the Pug invasion begins and ends.
    refit Fury (Gatling) (#1370)
    
    * add Gatling variants
    
    * refit Fury (Gatling)
    
    also, switched Dagger back to Lance - more congruous for Pirates to be
    flying them, and fixes outfit space issue…
    In the Checkmate thread, Lesath now properly reverts to Free Worlds fleets.
    hai carriers + gatling gun +rail gun (#1284)
    
    Added the Hai carriers, Gatling guns, and railguns (@Amazinite, @LocalGod79, @mdsmestad, @Wrzlprnft).
    0.9.2 updates
    After the main plot is completed, the shipyard at Geminus is rebuilt.
    X1050 sprite
    
    also incorporated into new southern carriers rollout
    de-0.9.0
    Fixed the southern carrier fleet modifications so other ships are included too, and made them phase in more gradually so huge numbers of carriers don't just appear overnight.
    added to event "FWCarriers" fleets
    Update my master (#1)
    rudimentary addition of "Boxwing"
    
    • sprite
    • malleable ship specs
    • sales at Southbound Basics with FWCarriers event
    Barb (Proton)
    
    • new ship variant (sans-turret)
    • corresponding sprite
    • sales begin between basic Barb rollout, and Carrier/Finch rollout.
    sales restricted to Syndicate Basics (rather than also being available
    at Tarazed)
    • Backwards compatibility
    X1050 sales
    
    also touched up Barb port maps
    updated barb
    
    • new sprite
    • new specs
    • new outfit w/ sprite
    • cleaned up double-space after “.” in ships and plot conversations
    • license/availability missions now autofail
    backward compatibility
    
    Barb gets added to Syndicate Basics with Southern Carrier event.
    the Syndicate is influential
    
    Barb gets added into Tarazed Basics with Finch
    Added 'Barb'
    
    • updated shadows for carrier sprites
    • sales with event: initial deployment 1
    • added to some Independent/Pirate/Northern Merchant fleets
    balanced a merchant fleet using Daggers
    
    with the new Sidewinder carrier variant.
    more "free worlds fighters" names, fw campaign balance
    
    i know there’s an extra ’s’ on the new phrase - i’ve referenced both in
    different circumstances.
    
    Skein with Finches was not a balanced replacement for the Falcon
    (Plasma) - reverted
    Deployment delayed
    
    …in fleets until after they’re actually available.
    
    price point of Finch balanced.
    events and fleets
    
    updated with new carrier names
    added 3 months after initial deployment 3
    
    before FWCarriers become available in shipyards.
    whitespace correction
    availability/canon/class/price fixes
    
    •availability event would fail to trigger because of “:”
    •Southbound has no interest in the sales of the Hauler.
    •all carriers now Medium Warships, in line with their specs
    •prices adjusted to balance
    fixed new sales
    
    made destination somewhere likely to visit
    moved sales to after there's a Free Worlds to request the carrier solution
    
    added ‘feeder and ‘snest to a couple of Southern Merchant fleet variants
    Made sure the Syndicate Extremists will be hostile when you have a mission to fight them.
    Fixed some places where Nocte and Orvala don't revert to the proper owner.
    Orvala now reverts to Free Worlds control once you drive away the Pug.
    Extended the error reporting to also handle nodes that can contain arbitrary condition expressions.
    Fixed a few glitches in the game data.
    Increased your reputation slightly during the safe passage mission, so Earth will let you land.
    vender->vendor
    Switched to leaving the Pug wormhole open after they leave, so the player's escorts won't get trapped on the other side.
    Fixed some places where you might have positive reputation with the Republic before a battle mission.
    Made some tweaks to the Free Worlds endgame, mostly changing prose and also the behavior of some enemy ships.
    Tweaked and fixed a few things in the "checkmate" story line.
    A boatload of typo fixes.
    
    These come from siccing "ispell" on the data dir.
    Added some "breaks" to the main plot line (to give you time to earn money and upgrade your ship) and also tweaked the prose in a few places.
    Various small fixes to things I found during testing.
    Updating all the missions to make use of the new "escort" personality.
    Wrapped up the Free Worlds "checkmate" plot line.
    Nearly finished with the Free Worlds "checkmate" plot line.
    Added another major Pug battle to the Free Worlds endgame.
    Decided the Pug arc should be lengthened a bit for story pacing. Also made the Paradise worlds remain closed to you even after the ceasefire in the checkmate thread.
    Added the last major Pug battle to the Free Worlds "checkmate" plot line. Now only the last foe wrap-up missions remain.
    Added the first part of the Pug plot line to the Free Worlds "checkmate" story arc.
    Updated the events to make use of the fact that sales lists can be appended to instead of replacing them completely each time an event changes them.
    Added another "checkmate" mission, and fixed some cruisers that had fighters as escorts instead of drones.
    Added three more missions to the Free Worlds "checkmate" plot line.
    Continuing to build the Free Worlds "checkmate" story arc ending.
    Began work on the Free Worlds "checkmate" ending.
    Made some tweaks, in particular to make plundering pirates a little easier early on.
    Added the final mission for the Free Worlds "reconciliation" plot line.
    Added the final battle for the Free Worlds "reconciliation" plot line. Now all that remains to do is to write the closing text.
    Wrapped up the Pug segment of the Free Worlds endgame.
    Added a few more Pug missions. I'm now just a few missions away from completing the main Free Worlds plot line.
    Added one more mission.
    Added the first Pug battle (and also made the Pug ships a bit stronger).
    Added another few missions in the Free Worlds endgame.
    Added a way for a game event to "unvisit" a system - i.e. remove any knowledge you have of what is there, because it has changed in ways that you have no knowledge of.
    Beginning the Pug story arc in the Free Worlds endgame.
    Added the Free Worlds side plot for developing the Stack Core.
    Continuing to develop the Free Worlds "reconciliation" endgame plot.
    Bagan work on the "reconciliation" endgame for the Free Worlds story line.
    Modified the Free Worlds / Republic "armistice" so that the Paradise worlds initially don't welcome you.
    Wrapped up the middle "chapter" of the Free Worlds plot line. Only the two possible "endgame" plot lines remain to be implemented.
    Added another step to the Free Worlds story line.
    Added the Alpha missions back, but no longer occurring immediately after the battle of Rastaban (which seemed too rushed).
    Revamped the middle of the Free Worlds story line so that the major plot points will not happen in such a rush.
    Fixed the year for the "Remembrance Day" event.
    Added a "Remembrance Day" event, as a plot foreshadowing early on.
    Added some Free Worlds events foreshadowing the Oathkeepers and the Alphas, so it will be less surprising when they show up later.
    Added more Free Worlds missions, with one possible ending to the second chapter. (Another thread still has to be wrapped up, though.)
    Added another major battle to the Free Worlds plot line.
    Fixed a bug in how handoff of outfits in missions is done, and added a few more Free Worlds missions.
    Starting work on the middle "chapter" of the Free Worlds story line.
    Tweaked a few things I found during testing.
    Wrapped up the terraforming mission, and added some humanitarian missions to pirate worlds.
    Wrapped up the first "chapter" of the Free Worlds plot line. My plan is for the whole story arc to contain two more "chapters" of comparable length.
    Added a Free Worlds side mission that gives you access to the Flamethrower weapon.
    Added Free Worlds side missions for forming a public university for terraforming research.
    Added a few more missions to the main branch of the Free Worlds.
    Switched to just letting events change the swizzle color of the "Escort" government, instead of setting a special "swizzle" variable in the player info.
    Added a "waypoint" mission tag that can be used to mark any number of systems that you must visit (but not requiring that you land on any planets in those systems).
    Added a Free Worlds diplomatic mission that gives you access to Tarazed.
    Added yet another Free Worlds mission, involving a temporary ceasefire.
    Added another Free Worlds battle mission.
    Added the Free Worlds mission where you officially choose sides (and your fleet switches its colors to Free Worlds green).
    Added "events" representing the gradual deployment of fleets and development of a front between the Republic and the Free Worlds, including several new Republic Navy bases in the region. Made the two sides start out not actually shooting at each other yet.
    Added the event that will "start" the war, and modified the starting map so that the "Free Worlds" do not exist yet.
    refactor(organization): Added subfolders to data (#4895)
    feat: New Hai missions where the player guides a young Hai (#4685)
    
    Written by @Arachi-Lover, maintained by @Janaszar,
    Fixed some Mule variants having negative weapon space due to the recent changes
    Better differentiate various human medium warships and knock the Mule down a peg (or two)
    
    #4581
    Fitted the Mark II Frigate with atomic thrusters to match the other Navy ships
    
    #4577
    Changed the Quicksilver (Mark II)'s outfits as to not match the base model
    
    #4496
    Error fix
    Added missile storage outfits to ship missile variants and ships that largely use missiles
    
    #4371
    Gave Tactical and Asteroid scanners to ships where appropriate
    
    #4367
    Modify human warship H2H to better fit their roles
    
    #4216
    Add hand-to-hand to human Medium and Heavy Warships (#4161)
    
    * Add H2H to human medium and heavy warships
    
    * Also add H2H to FW warships
    
    * Add h2h to appropriate human variants.
    
    Uses pulse rifles for variants with Hai parts.
    Changes to missile balance and usage
    
    #4162
    Add hand-to-hand weapons to Republic Navy ships
    
    https://github.com/endless-sky/endless-sky/pull/4125
    
     - Add hand-to-hand for Mark II variants
     - Add hand-to-hand for other variants
     - Add one "Security Station" to base model Frigates, Cruisers, and Carriers
    Brig and prisoner transport jobs (#3347)
    
    * Bounty hunter and prisoner transport jobs, and a new outfit to unlock them
    
    * Copyright info
    
    * Quote government and attribute tokens
    
    * Moved the prisoner transport jobs with the rest of the passenger jobs
    
    * Relocated all bounty hunting jobs (including the new ones) to the end,
    with the other bounty hunting jobs; now they're all in the same place
    
    * For all new and relocated bounty hunting jobs, quoted tokens and made
    them available on independent worlds
    
    * Adding Brigs to a few variants
    
    * Adjusted the outfit's description
    
    * Removed an accidental double Brig on one of the variants
    
    * Address review comment by quoting "Pirate"
    
    * Address review comments
    
    * Address review comments
    
    * ++Supercapacitor  --Small Radar Jammer
    Added Wasp variants to Small Core Pirates fleet
    
    #3926
    Give more luxury ships Luxury Accommodations (#4043)
    Tweaked the Headhunter and Raven
    
    #4014
    Re-order Carrier's HAM turret (#3992)
    Handled negative outfit space on the Protector (laser) differently
    
    Reducing shielding instead of cooling so that the ship can still reasonably function
    Fix some variants that had negative outfit space
    Correct new luxury ship variant definitions
    Luxury Accommodations and high-class passenger jobs (#3359)
    
    * Luxury Accomodations and high-class passenger jobs
    
    * Revert change to require Luxury Accommodations for Deep scientists;
    they're probably as strapped for cash 1000 years in the future as they
    are today
    
    * Match existing style for dashes used instead of commas
    
    * Update image to have a nice wooden bed and a patterned bedspread
    
    * - Gave Luxury Accommodations to the Blackbird by default, to match its description
    - Added luxury variants for the Arrow, Bounder, and Flivver
    - Added a few fleet options for luxury ships in the Core and the North
    
    * Reduced the number of passenger jobs that are gated behind owning Luxury
    Accomodations
    
    * Restored original formatting for Hai tourist jobs' payment syntax
    
    * Typo
    
    * Adjust Quantum Keystone description to hint at the jobs it helps unlock
    
    * Bring some of the variants up-to-date with recent missile changes
    Alphabetize variant definitions
    
    https://github.com/endless-sky/endless-sky/pull/4008
    Tweak default ship and variant loadouts to reflect missile changes
    
    #3922
    Add a pirate mission to capture a rogue smuggler
    
    #3475
    Fixed two ships with negative outfit space.
    Re-ordered the Freighter hardpoint (#3712)
    
    * Re-ordered the Freighter hardpoint
    
    Noticed that I missed this one.
    ~there's always more~
    
    * Also re-ordered the Freighter variant hardpoints.
    Alphabetized variants.txt (#3439)
    
    * Reorder Argosies
    
    * Reorder Arrow
    
    * Reordered Bactrians
    
    * Reordered Barb
    
    * Reordered Bastions
    
    * Reorder Behemoths
    
    * Reorder Berserker
    
    * Reorder Bounder
    
    * Reorder Bulk Freighters
    
    * Reorder Carriers
    
    * Reorder Clippers
    
    * Reorder Corvettes
    
    * Reorder Cruisers
    
    * Reorder Dreadnought
    
    * Reorder Falcons
    
    * Reorder Firebirds
    
    * Reorder Flivvers
    
    * Reorder Freighters
    
    * Reorder Frigate
    
    * Reorder Furies
    
    * Reorder Gunboat
    
    * Reorder Haulers
    
    * Reorder Hawks
    
    * Reorder Headhunters
    
    * Reorder Heavy Shuttle
    
    * Reorder Lance
    
    * Reorder Leviathans
    
    * Reorder Mantas
    
    * Reorder Mod. Argosies
    
    * Reorder Mules
    
    * Reorder Nest
    
    * Reorder Ospreys
    
    * Reorder Protectors
    
    * Reorder Quicksilvers
    
    * Reorder Rainmaker
    
    * Reorder Ravens
    
    * Reorder Roost + Scout
    
    * Reorder Skein
    
    * Reorder Sparrows + Star Barge
    
    * Reorder Wasp
    
    * Reorder Vanguard
    
    * Reorder Splinters
    Proton Turret (#3316)
    
    * Proton Turret
    
    * Corrected mass to match space taken up
    
    * Made sure that the new (Proton) variants appear in alphabetical order
    
    * Review feedback
    
    * Reduced to 34 tons (giving it effectively a 6-ton base and mount), which
    should hopefully make it a bit more attractive
    
    * Added copyright info
    
    * Updated hardpopint image (drop shadow, correct lighting)
    fixed hired gun baccy
    Re-ordered the turret on the heavy cruiser variant (#2994)
    
    * Re-ordered the turret on the heavy cruiser variant
    
    In the old configuration, the turrets were arranged:
                  [heavy laser]
    [anti-missile]     [heavy laser]
                 [quad blaster]
    Which was inconsistent with the other cruiser variants.
    The new configuration puts the heavy laser turrets in the left and right positions, the quad blaster in the front and the anti-missile at the back:
              [quad blaster]
    [heavy laser] [heavy laser]
               [anti-missile]
    
    * Update variants.txt
    Reordered some more hardpoints
    Pirate jobs (#2646)
    
    * Pirate jobs
    
    * Removed reputation condition from normal jobs
    
    They aren't relavent to this PR anymore. Will be included in slavery PR.
    
    * Bounty hunters less likely to come after player...
    
    but will come after the player even if they only land on pirate worlds.
    
    * Changing pirate defense missions to offer in spaceports
    
    * Minor changes
    
    Not as likely to get the hardest stolen vessel to transport
    Wording changes in descriptions
    Removed redundant numbering on elminating law enforcement jobs
    
    * Illegal cargo related hail
    
    * New illegal cargo names (@comnom)
    
    * A bunch of changes
    
    Changed the `to offer` conditions on most of the jobs.
    * Only the smaller cargo jobs and the smallest passenger job offer with
    either a not-too-low pirate rep or a high combat rating.
    * Required combat ratings for jobs now correspond to levels, the lowest
    combat level requirement being ~5 (150) and the highest being ~8 (3000).
    
    Removed all mentions of "your crew" in `illegal` messages. Highly wanted
    passenger jobs now mention the cargo you must carry.
    
    Renamed slave transport jobs and reworked the descriptions. They now
    require a combat rating and positive pirate rep. Changed cargo name from
    "shackles and grub" to "slave food."
    
    Large law enforcement jobs now mention their size.
    Lowercased all instances of "militia" in descriptions and dialog.
    
    Reworded the description of large "Eliminating Competition" jobs.
    
    Raiding merchant jobs now require you to have a positive pirate
    reputation so your escorts don't attack you.
    
    Removed the ransom jobs.
    
    Fixed a typo. "Convoy at <system>" -> "Convoy near <system>"
    
    * Created highly illegal substance and cargo categories
    
    It doesn't make sense for jobs to sometimes consider a commodity illegal
    and sometimes highly illegal, so I've moved some of th commodities over
    into a highly illegal category.
    
    Yes, stolen silver spoons are highly illegal. You never know what
    pirates could do with those things.
    
    * Lowered the payment for each job, in some cases drastically
    
    Pirate jobs should be good, but not THAT good.
    
    * Replacing all "target" governments with the new target personality
    Fixed a ship variant with negative outfit space.
    Added a fuel pod to the cruisers to give them the extra range needed
    Reducing the frequency and payout of some Hai jobs, because the small map area already makes them much more lucrative. Also added some "hidden" jobs that require you to install a seemingly useless item on your ship in order to be offered them.
    Replaced the "Mass Expansion" with an "Outfit Expansion" that adds the same outfit space but also interferes with your ship's cooling if you install a lot of them.
    Re-ordered some human, Hai, Korath and Coalition ship hardpoints (#2086)
    
    * Re-ordered some human ship weapon hardpoints
    
    Made all (I think) the human ships' hardpoints more consistent with the 'front to back, left to right' standard of hardpoint ordering.
    
    * Re-ordered the hardpoints of some Hai ships
    
    Changed the Hai ships' hardpoints to be more consistent with the 'front to back, left to right' order.
    
    * Re-ordered Coalition ship hardpoints
    
    Moved the engine hardpoints above the gun and turret hardpoints and re-ordered the gun and turret hardpoints to be more consistent with the 'front to back, left to right' order.
    
    * Fixed some mistakes in my hardpoint reorders
    
    * Re-ordered some Korath ship hardpoints
    
    Changed the ordering of a few Korath ships' hardpoints to be more consistent with the 'front to back, left to right' standard.
    
    * Moved a turret back to its correct position. (@Bladewood)
    
    * Updated the Alpha carrier hardpoints (@Bladewood)
    
    * Re-ordered the relevant human variant hardpoints.
    Typo fixes in the new ship variants.
    Human Hai Fleets (#1922)
    
    * Human fleets with Hai outfits
    
    * Variants
    
    * Map fleet update
    Updated the outfits on the "alien weapons" Osprey variant, and fixed the spacing in the variants file as well.
    Fixed the gun hardpoints order on the Mark II Cruiser.
    refit Fury (Gatling) (#1370)
    
    * add Gatling variants
    
    * refit Fury (Gatling)
    
    also, switched Dagger back to Lance - more congruous for Pirates to be
    flying them, and fixes outfit space issue…
    add Gatling variants (#1365)
    Continuing to develop the new Wanderer story line.
    Gave radar jammers to various stock ships.
    Added an "uncapturable" ship attribute, and modified the boarding panel to handle it.
    Update my master (#1)
    Sidewinder Carrier Variants
    
    upgraded power and shield systems, atomic engines.
    Renamed the "Modified Argosy (Laser)" to reflect its actual weapons (Blaster).
    New Syndicate heavy warship: the Vanguard
    Added two new ships, the Headhunter and the Modified Argosy.
    Added a fourth, optional Free Worlds intro thread. This lets you fail one of the four threads and still get offered a job with them, so it is harder to miss out on the main story line.
    Added two new small ships, to add a bit more variety.
    Fixed a few more typos in the missions, and regularized dashes so that an en dash is always "-" and an em dash is "--" in the conversation text.
    Added quite a few new ship "variants," and modified all the fleet descriptors to include those variants.
    Added 17 new "variants" on existing ships. The idea is to have many more of these, to add more variety to the ships you encounter.
    Added support for specifying a ship variant by only specifying what has changed from the original and cannot be inferred, i.e. the list of outfits, plus the order of the guns and turrets if it matters.
    Added another "checkmate" mission, and fixed some cruisers that had fighters as escorts instead of drones.
    Added the final battle for the Free Worlds "reconciliation" plot line. Now all that remains to do is to write the closing text.
    Added ship variants that have jump drives (for the final anti-Pug missions).
    Added the nuke, and tweaked the AI to be a bit more cautious about firing it when the target is nearby.
    Took out the "licenses" for transports, warships, etc. I meant for them to underscore how annoying Republic bureaucracy is, but they're a bit *too* annoying.
    Wrapped up the middle "chapter" of the Free Worlds plot line. Only the two possible "endgame" plot lines remain to be implemented.
    Added another step to the Free Worlds story line.
    Added another major battle to the Free Worlds plot line.
    Added "Mark II" upgraded variants of all the Navy ships.
    Added a mission where you test out the new Plasma Turret.
    Added a new weapon, the Plasma Turret.
    Added a new Cruiser variant, equipped for heavy warfare.
    Added a new heavy weapon, the Proton Gun.
    Added basic AI support for the afterburner (and added one ship variant with an afterburner, to test it).
    Modified the AI to have it scan any other ships in system, if the ship has a scanner equipped. If one of the player's ships is scanned, a message is displayed.
    Added a "heat dissipation" attribute that varies from ship to ship, so that big ships will have more trouble radiating away heat.
    First attempt at rebalancing ships, by adjusting the engine capabilities and various ship outfits.
    Added license statements to all the data files.
    Added support for named "variants" of a given ship, so that for example a Pirate Argosy can have different equipment than a Merchant Argosy.
    fix(style): Removed quotation marks from spaceport graffiti news
    
    Quotation marks are for spoken word.
    feat(content): Add some creepy poetry to the spaceport news (#5362)
    
    Bonus points for getting the references.
    feat(content): Added new civilian hails and news messages (#5351)
    fix(typo): Typo fix in news message (#5340)
    fix(typo): Capitalize planet names (#5288)
    feat(content): Added spaceport graffiti poetry to spaceport news (#5279)
    fix(type): #5212
    fix(typo): Religeous -> Religious
    feat: Added new news to human space (#5196)
    feat: Quotation marks in news now come from the phrase instead of the source code
    feat(content): Removed portrait images from spaceport news (#5187)
    
    Spaceport portraits of people were an experimental idea that has received generally negative feedback. See #4325 or the comments on #3389 after the news system was added.
    This PR removes the use of the portraits, but keeps the portrait mechanic in game, as we may find a use for it later that doesn't involve images of people, or plugins may still want to make use of the portraits of people.
    feat: Oriental -> Exotic
    
    Ref: #5134
    feat: Spaceport news stories for Hai planets (#4947)
    refactor(organization): Added subfolders to data (#4895)
    fix: Correct a news item typo (#4864)
    
    Reported on Discord by user "DY1ANDOGG"
    fix: Various grammatical and spelling errors (#4724)
    Spelling & Grammar Fixes
    
    #4255
    News entries should not nest double-quotes
    
    as the text is already presented as a quotation from the person. Instead, use single quotes.
    Update "human tourism" news
    
     - Remove "research" from the qualifying attribute list
     - Exclude any stations from offering this news
     - Add "tourism" attribute to Alexandria
    Add assorted news strings (#4166)
    Added more portraits for an increased variety of what can be seen
    
    #3683
    Adding more "news" variants.
    Typo fix.
    Added a couple dozen news sources, so people you meet will have professions that aren't always tied to a planet's chief exports.
    Replaced some portraits that were blurry, contained 21st-century relics, or had inconsistent cropping, and adjusted the light curves on some others that were too dark or too washed out.
    More faces and more opinions (#3504)
    
    * More faces and more opinions
    
    * Missed making this guy smaller
    Added a "news" system for displaying messages from local inhabitants you meet in the spaceport.
    feat: Added the phrase "gender-neutral titles" to "plural nouns" for human ship names (#5158)
    feat: Added log entries for various characters that lacked them (#5122)
    
    Plus some other minor changes.
    refactor(organization): Added subfolders to data (#4895)
    fix(organization): Moved Quarg/Pug names, hails, and fleets into their respective files
    feat(names): More pirate names (#4657)
    Add an article "the" before ship names when appropriate (#4147)
    
    * Add an article "the" before ship names in bounty hunting missions
    
    * Add extra article "the" and other minor changes to improve consistency
    
    * Add the article "The" where appropriate to ship names
    
    * Make the references to <ship> consistent with an article "the"
    Add more ship names (#4063)
    Ship names: Make "Cancer" a pirate ship name, and replace with "Karkinos" (#4061)
    
    * Ship names: Change "Cancer" to "Karkinos"
    
    * Make it a pirate ship name
    Revert "Remove "Cancer" from the standalone ship names, because nobody would name their ship just that"
    
    This reverts commit ee8cc7185a10afbef2b24808a835eb62e2164c84.
    Remove "Cancer" from the standalone ship names, because nobody would name their ship just that
    Add more merchant and pirate ship name possibilities (#3836)
    
    * Add more merchant and pirate ship name possibilities
    
    * Order the planets correctly
    
    * Correct a problem and add even more names, including a new style
    reminescent of one of the originals from years ago
    
    * Removed "poetic female name constructions" because my poetry has always
    been terrible and these never worked very well
    
    * Add a few more names  ...and I'm done now
    
    * Spell Amelia Earhart's name correctly
    
    * Moved Polyphemus to the pirate ship list, so Odysseus can fight it :)
    
    * Add more names, and remove a now-redundant civilian name style
    
    * Tweak existing pirate ship names, and some more words and styles
    
    * Address review comments, add more words, tweak existing combinations
    
    * Let's add some more
    
    * More tweaking, including an improvement to the new Chinese name style
    
    * I'm just going to keep adding more
    Spell "grey" consistently in ship names per #3476
    More ship names! (#3451)
    
    * More ship names!
    
    * Replaced the controversial name
    
    * A couple more, because this is fun
    More ship names, and in particular more male and female names
    Reducing the frequency of cardinal directions in "...of the X" ship names, because there's only four directions vs. dozens of generic nouns.
    Even more ship names! (#3262)
    
    * Even more ship names!
    
    * A few last-minute additions
    
    * Correcting last commit
    More ship names (#3221)
    
    * More words for the civilian and pirate ship names, and higher frequency
    for the standalone list of civilian ship names
    
    * Messed up the syntax the first time; fixed now
    
    * @DrBlight insists that there must be ships with "Teacup" in the name
    Civilian and pirate ship name improvements (#1974)
    
    * Civilian and pirate ship name improvements
    
    * Incorporated feedback
    
    * Re-worked some of the pirate name lists to allow more combinations and reduce excessive length, and also added a few more words, of course :)
    Fixed an issue with male titles showing up too frequently in civilian ship names
    Many more ship name styles and words for civilians and pirates
    More ship names, particularly for pirates
    More variety in many of the word lists (#1631)
    
    * More variety in many of the word lists
    
    * Just saw "Horizon Horizon"
    
    * More pirate name styles and words
    
    * More civilian words, and a new civilian name style (word + title e.g. Sword Princess)
    More flexible and modular civilian ship names (#1543)
    
    * Modularized many of the civilian word lists so that they can be combined in more ways
    
    * Added a few more and incorporating a suggestion from another user
    
    * Moving "Space" to the adjectives list to prevent "... of the Space" names
    
    * Fixed extraneous space after "Bleeding" in one of the pirate word lists
    Changed how sub-phrases work in names and hails, so you can specify multiple sub-phrases to choose between.
    More hails and ship names for extra flavor
    Update my master (#1)
    whitespace correction
    more "free worlds fighters" names, fw campaign balance
    
    i know there’s an extra ’s’ on the new phrase - i’ve referenced both in
    different circumstances.
    
    Skein with Finches was not a balanced replacement for the Falcon
    (Plasma) - reverted
    Moved some Korath data into a separate "korath.txt" file.
    Break out common subphrases.
    Fixed a bunch of unmatched quotation marks.
    Forgot the actual string there
    More ship names!
    Added several new repeatable jobs available at various places throughout the galaxy, as well as a new "Bounty Hunter" faction in support of one of the missions (and future ones).
    Removed "Sierra " from republic fighter names
    
    It's not a Greek letter.
    Added a few ship names
    More ship names, hails, and commodities.
    Finishing touches
    Initial commit for new names
    Amarath -> Amaranth, Gilly -> Gillyflower, Columbina -> Columbine.
    Miscellaneous typo fixes.
    Further text fixes
    Added ship names specific to the Pug and the Korath.
    Renamed "ShipName" to "Phrase" since it is also used for random hail messages.
    Added ship names for each government that didn't have them yet.
    Added license statements to all the data files.
    Added new ship names for military ships.
    Got fighters in fleets working.
    Added an alien ship.
    Uploaded all the files from my local repository to Google Code.
    fix(style): Consistent capitalization of drives
    
    Somtimes drive names were capitalized and sometimes they weren't. Switched capitalized instances to all lowercased.
    
    Also fixed another instance of a ship name being in quotes where it shouldn't have been.
    fix: Gave a plural form to the broken jump drive
    feat(content): Updated the description of the PIlot's license to no longer mention being fined for unlicensed ships (#5256)
    
    This description is a relic of an older mechanic. Updated to reflect the current situation in game.
    feat(content): Updated the Militia License description and properly introduced it in the story (#5184)
    feat: Added missions to unlock the new Emerald Sword, an ancient Sheragi warship (#4786)
    fix: Gave the Auxiliary the correct license requirements and made available in Navy shipyards (#5137)
    fix(content): Correct the Auxiliary's license name (#5136)
    
    * Correct Auxiliary license name
    
    The Auxiliary license outfit wouldn't show up under Special in the outfitter because it was named differently than the license itself.
    
    * Conform to the standard
    
    Whoops, big thank you to pega3 on Discord who pointed out the standard and how I looked over it.
    feat: New Navy logistics ships (#5108)
    feat: Changed the license progression of the Navy ships to match other progressions (#4936)
    refactor(organization): Added subfolders to data (#4895)
    feat: Renamed the Militia Carrier License to the Militia License and added it to the Dreadnought (#4805)
    Reduced the price of the asteroid scanner to make it more appealing for new pilots
    
    A Sparrow start pilot who's just dropped off James can sell their shield generator and immediately buy an asteroid scanner at this price. After about a week of mining asteroids just above Hestia, they can pay off the asteroid scanner and begin making profit.
    Remnant Content - Jump Drive (Broken)
    
    #4154
    Changes to missile balance and usage
    
    #4162
    Added a "mini-campaign" to unlock the Bactrian (@Amazinite @tehhowch)
    
    #3120
    Brig and prisoner transport jobs (#3347)
    
    * Bounty hunter and prisoner transport jobs, and a new outfit to unlock them
    
    * Copyright info
    
    * Quote government and attribute tokens
    
    * Moved the prisoner transport jobs with the rest of the passenger jobs
    
    * Relocated all bounty hunting jobs (including the new ones) to the end,
    with the other bounty hunting jobs; now they're all in the same place
    
    * For all new and relocated bounty hunting jobs, quoted tokens and made
    them available on independent worlds
    
    * Adding Brigs to a few variants
    
    * Adjusted the outfit's description
    
    * Removed an accidental double Brig on one of the variants
    
    * Address review comment by quoting "Pirate"
    
    * Address review comments
    
    * Address review comments
    
    * ++Supercapacitor  --Small Radar Jammer
    Luxury Accommodations and high-class passenger jobs (#3359)
    
    * Luxury Accomodations and high-class passenger jobs
    
    * Revert change to require Luxury Accommodations for Deep scientists;
    they're probably as strapped for cash 1000 years in the future as they
    are today
    
    * Match existing style for dashes used instead of commas
    
    * Update image to have a nice wooden bed and a patterned bedspread
    
    * - Gave Luxury Accommodations to the Blackbird by default, to match its description
    - Added luxury variants for the Arrow, Bounder, and Flivver
    - Added a few fleet options for luxury ships in the Core and the North
    
    * Reduced the number of passenger jobs that are gated behind owning Luxury
    Accomodations
    
    * Restored original formatting for Hai tourist jobs' payment syntax
    
    * Typo
    
    * Adjust Quantum Keystone description to hint at the jobs it helps unlock
    
    * Bring some of the variants up-to-date with recent missile changes
    add a sprite for the Scram drive (#3492)
    
    * add scram drive sprite
    
    * Update outfits.txt
    
    * Update copyright
    
    * fix to indentation
    
    * small fix
    
    * delete old file
    
    * fixed name
    
    * Update copyright
    
    * Update outfits.txt
    Made the cloaking device unplunderable.
    Added images for the human licenses.
    Show licenses in outfitter (#3068)
    
    * Show owned licenses in the outfitter.
    
    The license will only show if there is an outfit with the correct name.
    Player condition "license: NAME" is mapped to outfit "NAME License".
    
    * Add outfit "Militia Carrier License".
    
    * Add outfit "Coalition License" and a matching log entry.
    
    * Add outfit "Wanderer Outfits License".
    
    * Add outfit "Wanderer License".
    
    * Add outfit "Wanderer Military License".
    
    * Add outfit "Remnant License" and a matching log entry.
    tactical scanner image (#3250)
    
    * uploaded tactical scanner image
    
    * changed tactical scanner image
    
    * fixed post-processing for image
    
    * fixed lighting for scanner
    
    * Update copyright
    Surveillance Pod has some tactical scan power
    Added a "tactical scanner" that shows additional information about your target.
    Added outfit images for the surveillance pod and asteroid scanner.
    Added an "asteroid scanner" outfit. Also made it possible for turrets to track minable asteroids and for target "crosshairs" to have something other than 4 points.
    Solar power + regenerator compatibility (operational energy) (Ref #1879) (#1896)
    
    * Replaced negative energy generation with operational energy
    
    Shield regenerators now have positive 'operational energy' instead of
    negative energy generation, to avoid a problem where solar collection
    wasn't compatible with them.
    
    * Operational energy revisions
    
    1. Idle energy now considers operational energy.
    2. Flight check now considers operational energy, and returns a new
    conversation if you have negative energy even before checking thrusters.
    
    * Revisions to flight check for solar collection
    
    Added solar collection into flight checking, and added a new
    conversation if your ship runs the risk of becoming derelict too far
    from the system centre. Also fixed a <= that should be an <.
    
    * Changed 'centre' to 'center'
    
    * Tweaked conversation wording
    
    Replaced "system center" with "center of a system", and "steering" with
    "steering systems".
    
    * Renamed operational energy to energy consumption
    
    * Fixed a stray tab in tooltips.txt
    Made it possible to specify how much "jump fuel" a drive consumes.
    Replaced the "Mass Expansion" with an "Outfit Expansion" that adds the same outfit space but also interferes with your ship's cooling if you install a lot of them.
    Scanners' descriptions mention the benefit of installing more than one
    Changing ammo rack categories to "Ammunition"
    Scanning a ship now takes time. How long it takes, and how far away the scanner works from, now depend on "speed" and "power" attributes.
    Added the ability to specify plural forms of outfit and ship model names.
    Fix not autoselling ammo when selling storage item.
    
    Exposed ammo to be loaded by all outfits not just weapons.
    Ammo storage (#1852)
    
    * Add files via upload
    
    * Capacity increasing outfits
    
    * Boundary change
    0.9.2 updates
    Androids are no longer sold anywhere; they're just way too unbalanced.
    nix spurious changes
    Added two radar jammer outfits.
    Price balancing for the Android, and made various expansion outfits unplunderable.
    Moved hai outfits into one file, by local god
    Added hai-outfits, added them to outfitters, added them to ships
    Marked all hand-to-hand weapons as unplunderable so there does not need to be a special case to handle them.
    Make mass expansion unplunderable.
    Updated the ramscoop description to reflect the fact that it works best when close to a star.
    Moved the Quarg effect definitions to put them right next to their corresponding weapon data.
    Added an "android" outfit that replaces one required crew member.
    Outfits that repair shields or hull must now specify how much energy the repair takes.
    Modified the Catalytic Ramscoop description to have less awkward line breaks.
    hyperdrive desc edits
    Shifted the font glyphs over one pixel to avoid bleed between glyphs when text is not aligned to pixel boundaries. (This required a few tweaks to the kerning code, too.)
    Added an "interference plating" item that gives you a chance of evading detection when your ship is scanned and you are carrying illegal cargo or equipment.
    A boatload of typo fixes.
    
    These come from siccing "ispell" on the data dir.
    Typo fixes
    Fixed a bunch of spelling errors found by the codespell tool.
    Typo corrections and cosmetic changes
    Switched to hard-coded fuel amounts for hyper, scram, and jump drives. Also made handling of ships with multiple drives work correctly, e.g. a ship with both a hyper and a jump drive will use its hyperdrive when possible to save fuel.
    Added quite a few new ship "variants," and modified all the fleet descriptors to include those variants.
    Fixed the price of the larger Syndicate regenerator being the same as the smaller one.
    Took out the "licenses" for transports, warships, etc. I meant for them to underscore how annoying Republic bureaucracy is, but they're a bit *too* annoying.
    Revamped the middle of the Free Worlds story line so that the major plot points will not happen in such a rush.
    Added a cloaking device. Have not yet written the AI strategy for when to engage it, though.
    Added a new "Shield Regenerator" outfit that gives you a higher recharge rate in exchange for a constant drain on energy and addition of heat.
    Added a "Catalytic Ramscoop," a more effective ramscoop that the Free Worlds develop so they can travel through system where they are not welcome to land and refuel.
    Added support for illegal cargo and outfit checks when you are scanned or when you land on a planet.
    Modified the "scram drive" to work even if you are traveling at a high speed, as long as it is in the right direction.
    Added a "small bunk room" outfit.
    Added Republic "licenses" for each ship, and added a fine that is assessed if you are scanned by the Republic and are flying an unlicensed ship.
    Added "license" outfits that can be purchased as a special item to give the pilot a license for a given ship type. (Ships don't yet specify what licenses they require, however.)
    Added a "bunk room" outfit for adding more bunk space to your ship.
    Added a "Scram Drive", a hyperdrive that does not require you to come to a complete stop before entering hyperspace.
    Added a map outfit that is equivalent to "visiting" the twelve nearest systems.
    Added cargo, outfit space, and fuel expansions.
    Fixed a bug in how I used and displayed the "cooling" value.
    Modified cooling systems to use a separate "cooling" value instead of making "heat generation" negative, because previously you couldn't sell them if that would cause your ship's "heat generation" to go negative.
    Added sprites for the scanners and cooling systems. Also fixed a glitch where the cooling systems were taking up negative space.
    Added images for the hand-to-hand weapons.
    Added license statements to all the data files.
    Added ship data for two drones and a fighter, so I can begin testing carriers.
    Finished adding descriptions to the ship outfits. Also took out some of the generators because previously they had covered too wide a power range.
    Added some hand-to-hand weapons (with no outfit graphics for them, yet).
    Added cargo scanner and outfit scanner outfits, and modified the scanning code to only work if you are close enough to your target and have a scanner.
    Modified the map to specify what outfits are for sale in each star system.
    Added outfit images for the ramscoop and hyperdrive.
    Added outfit images for five sizes of shield generators.
    Added images for the remainder of the weapon systems you can buy.
    Added images for the reactors.
    Added images for different sizes of batteries and fuel cells.
    Added a fusion reactor outfit thumbnail.
    Updated the mass, cost, and thumbnail for all outfits, and shortened some of their names.
    Added a very rudimentary combat AI.
    Data updates: added some basic "sale" sets, and costs for some more of the outfits.
    Uploaded all the files from my local repository to Google Code.
    fix(typo): Missing spaces in hails (#5275)
    feat(content): Wrote friendly and hostile hails for the Remnant (#4728)
    feat(content): Added a storage outfit for EMP torpedoes (#5241)
    Revert "Merge branch 'RemnantGraphics' into Remnant-Puffin-Rename"
    
    This reverts commit 70f79e4505022a228b5dc6ce79a2f96780b8b500, reversing
    changes made to 048d210c723dacbf6008e9b05026c294e1000a4d.
    Adding the Plasma Crystal Core
    
    Adding the Remnant Plasma Crystal Core, courtesy of Hobbit Tank
    Renaming the Gascraft to the Puffin
    
    Replaced all instances of "gascraft" with "puffin". Instances are located in: remnant missions.txt, remnant ships.txt, remnant.txt, as well as the sprite & thumbnail.
    
    Also relocated a copy of the gascraft description to the "deprecated outfits.txt" file and added a compatibility mission to give anyone with the gascraft event the appropriate puffin event.
    
    This also relocates the puffin ship info to be in proper alphabetical order according to its new name.
    Removing the "afterburner"
    
    Removing the old "Remnant Afterburner" and making the "Bellows-Class Afterburner" appear in the outfitter.
    Palpebrata
    
    Adding the temporary stats for the Palpebrata (aka Albatross Mk 2)
    refactor(organization): Added subfolders to data (#4895)
    Added a new Remnant carrier along with a fighter and drone
    
    #4546
    Enabling the player to demand tribute from the Remnant
    
    #4273
    Creating the Anvil Class Engine
    
    #4594
    Remnant Tweak: Giving Albatrosses and Pelicans Scram Drives
    
    #4580
    Adding the Quantum Tear
    
    Adding the Quantum Tear
    - Designed to be a one-off anti-capital superweapon.
    - This will NEVER be purchaseable. Only given by a specific end-game mission
    Adding the Phoenix
    
    The Phoenix is purely a testing platform for trying out stuff. No intention of it becoming a part of the base game. In terms of stats, it is a vulture with an extra several hundred tons of outfit and engine space.
    Updates and Additions
    
    Adding the Petrel
    Adjustments to the Ibis
    Tweaks to the Tern.
    
    Tern: Intended to be a tanking drone.
    Petrel: Intended to be a mid range stand-back fighter
    Ibis: Medium mining/support carrier (2 figher 4 drone)
    Adding the Ibis
    
    Adds the Ibis, a Remnant Carrier of similar vintage to the Albatross.
     - Adds Ship data (with rough data)
     - Unlocks with the Capital license
     - Adds sprite
     - Adds thumbnail
     - Adds to shipyard
    
    Todo list:
    - Adjusting stats,
    - adding to fleets.
    - Adding the Tern & Ibis to BeccaBunny's copyright section.
    
    Thanks to beccaBunny for the graphics.
    Creating the Tern
    
    This PR adds the Tern, a durable drone initially designed for mining/harvesting from gas giants and frequently utilized to fill the "screening" role that most empires use fightercraft for. Given the Remnant don't have the population to spend lives in screening roles, they use these drones instead. At least, in their home systems.
    
    Graphics courtesy of BeccaBunny
    Update remnant.txt
    Adding the Harrier
    Adding the Condor and Diomedea
    
    Note: The Diomedea is simply the 2x sprite of the Condor.
    
    As always, this is not intended for merging in its current form. All stats need to be adjusted.
    Adding the Tern
    
    Technically a Remnant Drone, currently implemented as an interceptor.
    Added the Remnant scanner to the outfitter
    
    #4263
    Added a Remnant scanning outfit
    
    #4211
    Remnant Afterburner
    
    Outfit + effect
    Adding Personal Cloaking System
    
    - Adding Personal Cloaking System
    - Adding cloak suit
    - resizing remnant ramscoop (smaller)
    - resizing ember waste ramscoop (larger)
    - resizing crystal grid (smaller)
    Adding stuff
    
    Adding
    - GASER turret beam
    - GASER turret hit effect
    - Remnant Ramscoop
    Fixes
    
    - Plasma Torch should now appear in the outfitter
    - fixed the slot lable for two turrets.
    - added minute energy consumption to the Void Rifle.
    Adding Peregrine Animations
    Adding Crystal grid and reactor
    
    Also adding everything to the Remnant Outfitter
    Remnant Artillery
    Condor and Remnant Flak Turret
    
    Tweaking the Remnant Flak Turret
    
    And the Condor testing ship. (The Condor is currently just a testing platform)
    Adding more Remnant Stuff
    
    Ember Waste Ramscoop
    Adding the Nullifier
    Remnant Graphics Holding Branch
    
    This is a branch intended for simply holding graphics that I am planning on merging into Vanilla once I get the story written up to the point that it makes sense.
    
    Everything in here is intended to be Tier 2=<, depending on where in the story it appears.
    Improving the VSE
    Update remnant.txt
    
    Finishing the removal of the Gull (Heavy)
    Added new Remnant missions and content (@Zitchas @Brick63)
    
    #3761
    Added a Remnant H2H weapon
    
    #3960
    Allow the player to purchase EMP Torpedoes.
    Improve likelihood that "plunders" fleets can plunder (#3610)
    
    * Improve likelihood that "plunders" fleets can plunder
    
     - Default fleet cargo tries is 3, which results in mostly-filled cargo holds (and therefore an inability to plunder)
     - Added `harvests` to the Korath Raid fleet so that it will care about the jettisoned cargo from injured Remnant and Merchant fleets
    
    * Plundering ships with full cargoholds no longer act as though they should plunder
    Added the first string of Remnant intro missions.
    Added some Remnant ship names.
    Added various "generic" outfits to the Remnant outfitter.
    Made the Remnant ships and outfits require a license.
    Added the Remnant territory (the Ember Waste) to the map.
    Improve some missile launch and explosion sounds (#3869)
    
    * Improve some missile launch and explosion sounds
    
    * Correct license name formatting
    Continuing to add and update sound effects.
    Got basic audio support working. I do need to track down better sounds, or at least balance the audio levels better between them.
    Added various alien sounds.
    Added sounds for the Korath weapons. They aren't perfect, but they'll at least work as placeholders for now.
    Added sounds for some alien weapons, and made the landing sound less loud.
    Modified the audio source coalescing code to add source volumes instead of averaging, and also took out the doppler effect.
    Added various alien sounds.
    Added sounds for all the Heliarch weapons.
    Replaced the Repeater sound with one that has a bit more presence (#3444)
    
    * Replaced the Repeater sound with one that has a bit more presence
    
    * Reduced length to 0.42 seconds
    Added sounds for the Korath weapons. They aren't perfect, but they'll at least work as placeholders for now.
    Added sounds for various anti-missile weapons, with the volume better balanced to the other sound effects.
    Got basic audio support working. I do need to track down better sounds, or at least balance the audio levels better between them.
    Added various alien sounds.
    Added sounds for takeoff, landing, and firing the nuke.
    Added sounds for the afterburners.
    Continuing to add and update sound effects.
    Got basic audio support working. I do need to track down better sounds, or at least balance the audio levels better between them.
    Lowered the scan sfx pitch by one octave
    
    #4252
    Scanning a ship now takes time. How long it takes, and how far away the scanner works from, now depend on "speed" and "power" attributes.
    feat: Added missions to unlock the new Emerald Sword, an ancient Sheragi warship (#4786)
    Better explosion sounds (#1526)
    
    Includes a new huge explosion sound and a new heavy rocket explosion sound.
    Updating more of the sounds.
    Got basic audio support working. I do need to track down better sounds, or at least balance the audio levels better between them.
    Boosted the volume a bit on the laser and heavy laser.
    Added new sounds for the beam weapons.
    Got basic audio support working. I do need to track down better sounds, or at least balance the audio levels better between them.
    Cleaning up some unused sounds, and regularizing the names of others to use spaces instead of underscores.
    Added some impact sounds, and updated the hyperjump sounds.
    Switched the Linux build away from using ALUT, since my hard-coded WAV reader is good enough for now.
    Got basic audio support working. I do need to track down better sounds, or at least balance the audio levels better between them.
    Added unique sounds for the Thrasher and Point Defense Turret
    
    #3991
    Added sounds for the Korath weapons. They aren't perfect, but they'll at least work as placeholders for now.
    feat: Added missions to unlock the new Emerald Sword, an ancient Sheragi warship (#4786)
    Added sounds for various anti-missile weapons, with the volume better balanced to the other sound effects.
    Got basic audio support working. I do need to track down better sounds, or at least balance the audio levels better between them.
    Added various alien sounds.
    Added sounds for the Korath weapons. They aren't perfect, but they'll at least work as placeholders for now.
    Continuing to add and update sound effects.
    Added sounds for the Korath weapons. They aren't perfect, but they'll at least work as placeholders for now.
    Added a "fail" sound for if you cannot perform an action (like landing or jumping).
    Improve some missile launch and explosion sounds (#3869)
    
    * Improve some missile launch and explosion sounds
    
    * Correct license name formatting
    Continuing to add and update sound effects.
    Got basic audio support working. I do need to track down better sounds, or at least balance the audio levels better between them.
    Add files via upload
    
    Edited the alarm.wav sound to remove that awful buzzing in the low end. Got almost all of it with a simple high pass filter.
    Added a warning siren when hostile ships first appear.
    Added sounds for takeoff, landing, and firing the nuke.
    Updated the blaster and torpedo sounds.
    Got basic audio support working. I do need to track down better sounds, or at least balance the audio levels better between them.
    Continuing to add and update sound effects.
    Got basic audio support working. I do need to track down better sounds, or at least balance the audio levels better between them.
    Added sounds for all the Heliarch weapons.
    Updated the blaster and torpedo sounds.
    Added sounds for the Korath weapons. They aren't perfect, but they'll at least work as placeholders for now.
    Updated the flamethrower effect and sounds.
    Added sounds for some alien weapons, and made the landing sound less loud.
    Added sounds for takeoff, landing, and firing the nuke.
    Added sounds for various anti-missile weapons, with the volume better balanced to the other sound effects.
    New Energy Blaster and Modified Blaster sounds (#3306)
    
    * Replaced the energy blaster and modified blaster sounds with ones that sound
    more like sci-fi space guns
    
    * Clipped the sounds to 0.3 seconds, matching the prior length
    Updated the blaster and torpedo sounds.
    Got basic audio support working. I do need to track down better sounds, or at least balance the audio levels better between them.
    Adding inhibitor.wav
    
    Adding an audio file for the Inhibitor Cannon, to replace its use of particle.wav
    
    With the rapid rate of fire and its typical use in large numbers, the particle sound is jarring on the Inhibitor Cannon.
    
    The intent of this replacement sound is not only to give it a unique audio, but also one that is less obtrusive when used rapid fire and in large numbers.
    
    This audio is derived from the Korath Detainer (the supposed source of Remnant Inhibitor technology), but sped up and pitch altered to fit a smaller weapon.
    Added sounds for some alien weapons, and made the landing sound less loud.
    Added various alien sounds.
    Added sounds for various anti-missile weapons, with the volume better balanced to the other sound effects.
    Added sounds for some alien weapons, and made the landing sound less loud.
    Added a sound effect for Void Sprites chewing on things.
    Updating more of the sounds.
    Continuing to add and update sound effects.
    Added an ambient sound for space stations, just as a test that it's working.
