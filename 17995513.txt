    Several minor consistency improvements.
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    Cleanup UIP_CONF_IPV6_RPL configuration
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Always compile verbose when running the CI
    Support setting the RELSTR
    To build identical binaries the RELSTR must be identical, too.
    Makefile.include: Assign git description variable once.
    
    By changing RELSTR= into RELSTR:= we force Make to evaluate the Git
    version string only during Makefile read, and not on every single build
    command execution.
    
    The reduction in file system I/O cut the time to build
    examples/er-rest-example on my development machine by a significant
    amount, see below.
    
    Core i7 notebook with ext4 file system on an SSD (building for TARGET=mulle):
    "RELSTR="  make  19.70s user 1.07s system 82% cpu 25.291 total
    "RELSTR:=" make  11.81s user 1.27s system 79% cpu 16.499 total
    
    Signed-off-by: Joakim Gebart <joakim.gebart@eistec.se>
    llsec: Added a layer in between NETSTACK_MAC and NETSTACK_NETWORK for implementing link layer security
    Makefile.include: Setting RELSTR based on git tags requires to be in
    the contiki directory
    CONTIKI_PROJECT is sometimes set to multiple files which caused distclean to fail.
    Removed all module makefiles. Instead, all .c files in a module directory are compiled.
    Removed the PLATFORMAPPS definition - this is now handled by the modules mechanism
    Removed old definitions of source files - thiis is now handled by the modules mechanism
    Don't include core/net/mac in the default modules
    introduced optional Makefile.customrules-$(TARGET), to contain custom platform make rules
    Moved the individual MODULE definitions from the top-level Makefile.include into the individual platforms' Makefiles
    Filter out multiple definitions of the same module
    Made core/lib into a module
    Include the top-level Contiki directory in the include file search path to make it possible for modules to include their header files via their module path
    core/net/rpl is a module, so don't include its file in the top-level Makefile.include
    Use the core/sys and core/dev modules by default
    Include a set of basic modules
    Added makefiles to make core/net/mac into a separate module
    Made the rime code into a separate module
    First stab at implementing the MODULES mechanism
    Removed the VNC/CTK server and the VNC viewer app
    Removed the experimental checkpointing code
    Removed old unused sys/ files
    Fix rpl-udp build failure on native target, reported on contiki mailing list
    
    http://sourceforge.net/mailarchive/forum.php?thread_name=a2b9cb98ac4a191867afc953113fabaa%40amnesiak.org&forum_name=contiki-developers
    Makefile.include (clean): ignore rm -f failing (e.g., on "core")
    
    rm -f can still fail, e.g., if trying to delete a directory.
    
    If there was, say, a directory called "core", a "make clean" would
    therefore only try to delete the files listed in the first command but
    not proceed with the rest of the cleanup.
    
    "make clean" itself failing may also affect any outside build process
    that invokes it.
    Be consistent with tab chars in Makefiles - yet again...
    Makefile.include: revised verbosity control
    
    This should be more friendly to legacy operating systems that
    don't support multiple shell commands per line. Note that
    architecture-specific overrides need to be adapted, if verbosity
    control is desired for them as well.
    Revert "Merge pull request #305 from frtos-wpan/pull-verbosity"
    
    This reverts commit 231e77211804af53c69c5321cdcd962d58389a3f, reversing
    changes made to e13d69cf41ee82e48a89ed530306cbd4991695ea.
    Makefile.include: add verbosity control (make V=1 for previous behaviour)
    
    This shortens $(CC) and $(AR) lines to a much more readable length,
    making warnings stick out clearly.
    
    The spaces after "CC" and "AR" are to reserve space for other operations
    that may use longer names, such as the communly found "BUILD" or
    "GENERATE".
    Added realclean and mostlyclean targets to Makefile.include
    Makefile.include: support make clean all
    
    Historically $(OBJECTDIR) was created when Makefile.include is read.  A
    consequence is that combining "clean" with "all" (or any other build
    target) results in an error because the clean removes the object
    directory that is required to exist when building dependencies.
    Creating $(OBJECTDIR) on-demand ensures it is present when needed.
    
    Removed creation of $(OBJECTDIR) on initial read, and added an order-only
    dependency forcing its creation all Makefile* rules where the target is
    explicitly or implicitly in $(OBJECTDIR).
    Makefile.include: support extending CLEAN with directories
    
    Use recursive remove for $(CLEAN) to support applications that extended it
    with directories that should be removed.
    Allow platform makefiles to specify APPS to be used, by defining a PLATFORMAPPS variable.
    Add a Trickle Timer Library (RFC 6206)
    core/lib/settings: Generalized Settings Manager to work on any platform
    
    This commit moves the Settings Manager from the AVR codebase
    into the Contiki core library. Any platform that implements
    the Contiki EEPROM API can now use the Settings Manager's
    key-value store for storing their persistent configuration info.
    
    The Settings Manager is a EEPROM-based key-value store. Keys
    are 16-bit integers and values may be up to 16,383 bytes long.
    It is intended to be used to store configuration-related information,
    like network settings, radio channels, etc.
    
     * Robust data format which requires no initialization.
     * Supports multiple values with the same key.
     * Data can be appended without erasing EEPROM.
     * Max size of settings data can be easily increased in the future,
       as long as it doesn't overlap with application data.
    
    The format was inspired by the [OLPC manufacturing data format][].
    
    Since the beginning of EEPROM often contains application-specific
    information, the best place to store settings is at the end of EEPROM
    (the "top"). Because we are starting at the end of EEPROM, it makes
    sense to grow the list of key-value pairs downward, toward the start of
    EEPROM.
    
    Each key-value pair is stored in memory in the following format:
    
    Order    | Size     | Name         | Description
    --------:|---------:|--------------|-------------------------------
           0 |        2 | `key`        | 16-bit key
          -2 |        1 | `size_check` | One's-complement of next byte
          -3 |   1 or 2 | `size`       | The size of `value`, in bytes
    -4 or -5 | variable | `value`      | Value associated with `key`
    
    The end of the key-value pairs is denoted by the first invalid entry.
    An invalid entry has any of the following attributes:
    
     * The `size_check` byte doesn't match the one's compliment of the
       `size` byte (or `size_low` byte).
     * The key has a value of 0x0000.
    
    [OLPC manufacturing data format]: http://wiki.laptop.org/go/Manufacturing_data
    Separated the uIP makefile from the top-level Makefile.include into a separate core/net/Makefile.uip makefile
    Restored build in cmd.exe environmet by re-applying change https://github.com/contiki-os/contiki/commit/f3cf57e41b277beebd353a4d76aba2359868b361 which was reverted recently.
    Be consistent with tab chars in Makefiles.
    Makefiles: Allow setting UIP_CONF_IPV6=0 to work as expected.
    
    Setting UIP_CONF_IPV6 to zero from the make build command line is
    something that seems like it should ensure that IPv6 is disabled, but in
    fact it actually *enables* IPv6. This seems counter intuitive, so this
    patch changes the behavior of the makefiles to handle this case
    properly.
    Add the uipv6 route function uip-ds6-route.c
    Fix hardcoded reference to nm(1)
    removed debug output (caused compiler warning dialog to open in COOJA)
    added %.ramprof and %.flashprof targets for easy memory profiling of linked binary (e.g. make hello-world.ramprof)
    Avoid including APPS twice. Thanks to David Kopf for reporting this.
    main makefile: also search TARGETDIRs when listing all available targets
    main makefile: remove unnecessary realpath because it breaks on cygwin
    add emacs mode hint to Makefile.include
    Provide a way to add additional TARGET search directories.
    
    E.g. in a makefile do:
    
    TARGETDIRS += ../targets
    
    This will search for targets in ../targets as well as
    $(CONTIKI)/platforms
    
    A error will occur if more than one targets with the same name are
    found.
    Provide a way to add additional APPS search directories.
    
        E.g. in a makefile do:
    
        APPDIRS += ${addprefix ../apps/, $(APPS)}
    Added TODO note regarding flavours of Windows.
    Simplified host OS platform detection in Makefiles
    simple-udp should be included in the IPv4 build as well.
    Added native-border-router and slip-radio
    A significantly simpler API for sending UDP packets
    Tag version commits and override CONTIKI_VERSION_STRING with git describe
    Don't create an object directory if target does not exist
    Somewhat surprisingly this is the only change necessary to make the Contiki build system in general compatible with make.exe from GnuWin32 and cmd.exe.
    add -nodefaultlibs
    
    pulling in from libc generally causes problems.
    Use the CS toolchain by default:
    
     http://www.codesourcery.com/sgpp/lite/arm/portal/release642
    Added uip-packetqueue.c
    Define the CONTIKI variable, and explicitly set the CONTIKI_TARGET_ variable to 1. (Patch by Robert Quattlebaum.)
    Fix a makefile dependency with libraries
    
    Using the implicit rules for libraries leads to problems if one of the
    objects fails to build, but the others are still OK.  Just make all
    library rules explicit to avoid this.
    Use a variable for all target objects
    
    Instead of specifying them individually.  This lets included makefiles
    (like my audio/Makefile.include) append objects.
    Support hardcoded dependencies, for generated files
    Add rule to disassemble .o files
    Force linker to treat "_start" as undefined, so it pulls it in from src.a.
    Fix typo, used wrong name for TARGETS_WITH_ROM_VARS.
    
    Also makes the pretty print output specify whether we're linking
    against romvars or not.
    Pretty-print the output by default.
    
    This makes it a lot easier to see what's going on, and let me find
    some problems.  Use "make Q=" or set Q= blank in your user Makefile
    to see the full commands.
    Fix typo -- no ROMVARS for normal targets.
    Makefile cleanup.
    
    This is an attempt to fix and cleanup all of the rules, and get rid of
    some of the recursion.  We still need to invoke make several times
    when we're building for more than one board, and some things can get a
    bit weird when that happens, but it should generally work.  A single
    BOARD=foo build should be fully correct, now.
    
    I attempted to keep things compatible, so existing Makefiles that
    include libmc1322x/Makefile.include should still work correctly.
    Allow parent makefile to override these variables
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Moved ctimer.[ch] from their old and illogical location in core/net/rime to a more appropriate place in core/sys
    added ContikiRPL - an implementation of IETF ROLL RPL
    removed obsolete IPv6 routing reference
    fix typo in the usage
    clean srecs
    clean ftditools
    don't bail on make if you can't do a submodule update.
    make sure any submodules are updated
    integration of new uip6 code from Mathilde and Julien - adds routing and improved interface handling
    fix board.a creation: only the first COBJ would get built and added to
    board.a.
    add PHONYs
    Workaround DEFAULT_GOAL so that you can use older versions of make.
    
    From Jim.
    Added generic modules for neighbor information.
    make it work when COBJS is defined.
    handle empty COBJS
    fix how board.a is created and linked
    make an empty board.a
    
    this fixes errors when trying to build board.a when COBJS is empty.
    correctly order the libs
    link objects in as archives so only what we need gets linked.
    
    Add an option to build objects without space resevered for rom calls.
    Now you can build targets with or without the reserved ROM var space.
    renamed libmc1322x to lib
    build lib with thumb
    auto-gen dependencies
    clean the current directory also (incase mc1322x is a submodule)
    update build system for board specific code that's 'local' to the
    program you are building.
    
    update tests to consolidate common code.
    working on nvm-read.
    
    fixed lib ordering on link command
    clean up default_vreg_init
    makefile hints
    now running just 'make' builds all the targets for all the boards.
    cleanup main makefile
    better variable defs.
    
    touch objdir to fix problem where board.h would try to get created
    after it's already been created.
    board.h works now
    set the default goal to be 'all'
    A null radio driver that does not do anything - useful in the native port and as a template for new radio drivers
    clean up more
    put object files in OBJDIR
    add new base makefile
    this is working kind of correctly.
    
    need to clean it up, get the different boards going and add in the lib
    build.
    getting there...
    Hi Mar.
    checkpoint
    checkpoint -- reorganizing and fixing errors
    starting libmc1322x.a
    clean up
    a few little cleanups to the makefile
    Sleep works now. Make sure to turn the radio off first.
    sleep tests.
    flash and burn
    
    completely untested.
    nvm write test
    better way to do irqs
    enabling thumb only enter user mode in tmr-ints.
    
    usermode breaks rftests.
    tmr imts works. I'm not thrilled with how the interrupts and modes are
    set... but I'm not sure what to do about it. The big problem is that I
    have to be in user mode to service irqs, but I can't enable and
    disable F and I in usermode. All I can do is an swi and then have
    handler which lets me enable or disable them (like a mini-syscall).
    preliminary interrupts. looks like it is entering the isr but isn't
    leaving correctly.
    added function sections and long-calls
    blink blue but with the timer.
    initial try at init entry execution
    startup code
    I think this dis. output is better.
    ok. I think this is right.
    This makefile seems to do better.
    lots of code. Still doesn't work though.
    
    Thanks Jim!
    multiple tests work now.
    
    added blink code for all the leds.
    checkpoint... working on multiple test objects.
    changed name over to test-blink.c
    
    removed hardcoded source name from the linker script
    new makefile should let me have multiple targets
    initial commit.
    
    includes test code that toggles pin 26 and a perl script that loads
    the code over UART1.
    Moved toplevel Makefile to secondary directory tree.
    initial creation of toplevel makefile
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    Adding a CONTRIBUTING file to use github feature
    
    https://github.com/blog/1184-contributing-guidelines
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Added the cc2538-bsl submodule to the tools dir
    Added mspsim as a submodule instead of as a binary mspsim.jar file
    Add cc26xx travis tests
    Re-enable ev-aducrf101mkxz travis tests
    Disable the ev-aducrf101mkxz compile tests as they currently break travis
    Add doxygen regression test to travis
    Always compile verbose when running the CI
    Support setting the RELSTR
    To build identical binaries the RELSTR must be identical, too.
    Only fail on real fails
    Added a simple regression test that uses the tests in examples/llsec/ccm-tests
    Add modern ARM compiler and ev-aducrf101mkxz to travis tests
    Rename travis "arm" BUILD_ARCH to "arm-apcs".
    
    These platforms are built with an old ARM compiler that supports the
    deprecated APCS standard.
    Add retries to commands that download from external servers.
    
    This helps reduce the chance of a build failure due to transient
    download error.  This also switches to consistent use of wget
    throughout, which reports download errors more cleanly in the travis
    build logs.
    Clean up script commands in .travis.yml.
    
    Besides general whitespace and quoting cleanup, commands that test
    variables were changed from:
      [ $B = a ] && command || true
    to
      if [ $B = a ] ; then command ; fi
    This form correctly returns the exit code of "command".
    Download the RL 78 toolchain from a different URL
    
    Fixes #720
    Improve travis RL78 tests
    
    * No longer apt-get install a bunch of packages which are not really needed
    * Only install gnurl78 if its download succeeded
    Fix Travis failure
    
    For travis tests, we host pre-built bundles of the arm-gcc and sdcc
    toolchains on github, and we download them with curl
    
    Apparently, the URL for those bundles has been changed and the
    HTTP response is a 301 redirect. curl doesn't follow it
    
    We change .travis.yml to pull the bundles form the new location
    Updated cc65 URL.
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    Travis test for slip-radio
    After travis updated to jdk 1.7.0_45 we have to run java -Xshare:dump before running the Cooja tests
    Reduce travis overhead for testing 6502 ports.
    
    - build cc65 libraries only for target supported by Contiki
    - instead of building all examples for all 6502 targets build
      - all examples for one target (c64)
      - the most demanding client example (webbrowser) for all 6502 targets
      - the most demanding server examples (webserver) for all 6502 targets
    Add 6502 tests to travis
    Disable the IPv4 travis job
    Don't try to tail *.testlog after non-sim tests
    
    Fixes #247
    Break travis compile tests into smaller builds
    
    * The previous 01-compile test has been renamed to compile-base. It
      now only tests {msp430, avr, native}-based platforms
    * New test builds for arm-based and 8051-based ports (one build per arch)
    * Only install arm-none-eabi, sdcc and srecord for the builds which need
      them. This will somewhat speed up all other tests
    * Test er-rest-example and webserver-ipv6 for the cc2538
    * An erroneous comment was fixed and another comment was somewhat
      clarified
    Switch to mspgcc 4.7.0
    Update travis to use a newer SDCC
    
    Due to SDCC bug #1986, we were previously stuck
    with SDCC revision #7100. The bug was fixed with
    rev #8719. Thus, we can now use newer versions
    
    More info: http://sourceforge.net/p/sdcc/bugs/1986/
    [ci] Remove pointless `$MAKE_TARGETS` -
    
    1. there was an odd error when this environment variable wasn't set
        (`[: =: unary operator expected`)
    2. this environment variable is not used anywhere else
    
    Removing it makes the logic look much simpler - do make `cooja.jar`
    if build type is any other then `compile`.
    Travis: disable the netperf test because it is flaky
    Travis: fix the download location for the arm/mc1322x toolchain
    Travis: Print out logs so that debugging travis is possible.
    Split the collect test into collect and collect-lossy to make each individual
    travis build complete faster.
    
    Also changed the armgcc download link to a github location.
    [ci] Travis needs 32-bit compatibility libraries
    Removed email notifications
    
    Added a notifications: clause to turn off email notifications, which are otherwise enabled by default.
    Explicitly count the number of failed tests, test equality with 0, and explicitly exit with a non-zero error status if there are non-zero failed tests
    Added rtests for 8051 ports
    travis integration of the Thingsquare Mist regression test framework
    Structured the Contiki tests according to what they are supposed to test and broke them out as multiple parallel jobs.
    have travis build TARGET=econotag instead of TARGET=redbee-econotag
    [ci] Fix failure detection when not all tests failed
    [ci] Build some examples for avr-raven and micaz
    [ci] Add avr toolchain for all build types
    [ci] Add Cooja tests
    [ci] Build some examples for sky
    [ci] Install mc1233x toolchain and build some examples for redbee-econotag
    [ci] Add framework for Travis integration
    Add CC26xx build artifacts to .gitignore
    Add initial EV-ADuCRF101MKxZ platform support
    Adding tunslip to gitignore
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    Adjustments for the switch from 'atari' to 'atarixl'.
    gitignore CC2538dk firmwares
    Travis-ci tweaks, added CPUREV to 01 regression test, needed by mbxxx platform
    Added *.testlog
    Added `*.orig`, `*~`, and `.DS_Store` to `.gitignore`.
    Added Apple II 3.5" floppy image.
    Added VC++ and cc65 file types.
    Added SDCC compile artifacts to gitignore
    ignore generated files from regresstion tests and more platforms
    ignore *.d
    ignore elfs created from targets
    ignore things generated by cooja build
    Fix: stm32w flasher for Ubuntu 12.04 and later
    cleaned up main
    add .gitignore and ignore generated files
    modified gitignore
    modified .gitignore
    updated .gitignore with _del/ and tools/
    Definition of Z1 Starter Platform in contiki/platforms + LEDs + Potentiometer
    .gitignore file added
    ignore generated files
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    Updated README with new website and shorter text
    Testing another commit
    Yet another test commit
    testing commit
    testing commit
    test commit
    Test commit
    small clarifications to the README.
    Add a readme to explain how to use this new build system and how to
    incorporate libmc1322x into your projects as a submodule.
    README
    example\webserver-ipv6-raven works!
    Contiki port for the Atmel AVR Raven board
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Moved mandatory low-level initialization into main file, moved all uIP and network initialization into int_net()
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add files needed for slip rpl-border-router build.
    Adding machine dependent SLIP routines for UART0.
    added some files for MSP430X I/O
    Made SLIP code coexist with ordinary serial code. If WITH_UIP=1, the SLIP code is used instead.
    Added energy estimation
    Removed clock_delay()
    Added clock_delay() between characters to avoid dropping them
    * General stuff for different baudrates:
    
        - ubr argument to slip_arch_int
    
        - macros for calculating ubr
    
        - argument -Bbaudrate to tools tunslip and scat
    * Bump speed over serial to 115200 (Tmote sky only).
    Use LPM4_EXIT to return from sleep on msp430.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add files needed for slip rpl-border-router build.
    avrdude and makefile changes suggested by Georg von Zengen
    Removed the deprecated COFFEE_DIR_CACHE_ENTRIES parameter.
    Add static coffee file system to webserver
    Optional complemented writes/reads and faster word reads
    Passed tests on Raven 1284p in 3 seconds  with 56KB program memory disk
    Cleanup UIP_CONF_IPV6_RPL configuration
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    ContikiMAC: Default to contikimac_framer when using Rime over ContikiMAC
    ContikiMAC: Create and parse ContikiMAC header in special framer; Expanded framer interface
    to allow for creating and securing frames in advance; Create and secure frames in advance when sending bursts; Do neither recreate nor resecure frames that come from phase
    Changed the name of the rimeaddr module to linkaddr
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Fix naming issues and includes in uip-ds6-nbr.h
    Removed now unused per-module neighbor table size configs. Use NEIGHBOR_CONF_MAX_NEIGHBORS instead.
    settings: Correct a problem where sometimes CC_INLINE is not defined properly.
    Rename RIMESTATS_CONF_ON to RIMESTATS_CONF_ENABLED
    core/lib/settings: Generalized Settings Manager to work on any platform
    
    This commit moves the Settings Manager from the AVR codebase
    into the Contiki core library. Any platform that implements
    the Contiki EEPROM API can now use the Settings Manager's
    key-value store for storing their persistent configuration info.
    
    The Settings Manager is a EEPROM-based key-value store. Keys
    are 16-bit integers and values may be up to 16,383 bytes long.
    It is intended to be used to store configuration-related information,
    like network settings, radio channels, etc.
    
     * Robust data format which requires no initialization.
     * Supports multiple values with the same key.
     * Data can be appended without erasing EEPROM.
     * Max size of settings data can be easily increased in the future,
       as long as it doesn't overlap with application data.
    
    The format was inspired by the [OLPC manufacturing data format][].
    
    Since the beginning of EEPROM often contains application-specific
    information, the best place to store settings is at the end of EEPROM
    (the "top"). Because we are starting at the end of EEPROM, it makes
    sense to grow the list of key-value pairs downward, toward the start of
    EEPROM.
    
    Each key-value pair is stored in memory in the following format:
    
    Order    | Size     | Name         | Description
    --------:|---------:|--------------|-------------------------------
           0 |        2 | `key`        | 16-bit key
          -2 |        1 | `size_check` | One's-complement of next byte
          -3 |   1 or 2 | `size`       | The size of `value`, in bytes
    -4 or -5 | variable | `value`      | Value associated with `key`
    
    The end of the key-value pairs is denoted by the first invalid entry.
    An invalid entry has any of the following attributes:
    
     * The `size_check` byte doesn't match the one's compliment of the
       `size` byte (or `size_low` byte).
     * The key has a value of 0x0000.
    
    [OLPC manufacturing data format]: http://wiki.laptop.org/go/Manufacturing_data
    Changed the name of the IPv6 number of route entries configuration from UIP_CONF_DS6_ROUTE_NBU to UIP_CONF_MAX_ROUTES.
    Cleaned up RF230BB, and refactored FRAME_RETRIES and CSMA_RETRIES
    #defines.
    Add clock_delay_us and clock_set_seconds to clock.h. Modify clock_wait to use clock_time_t.
    Remove the troublesome avr/dev/delay.* files.
    Add PLATFORM_NAME and combine the confusing *_REVISION defines into a single PLATFORM_TYPE
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    Add F_CPU=0x800000 option with phase lock to external 32768 Hz crystal
    Add MCU_CONF_LOW_WEAR option to avoid eeprom writes during development.
    Add params.c to Raven and sync with 128rfa1 contiki-conf.h
    Contikimac works with mcu sleep on both platforms.
    Add settings manager with program flash defaults, random routine, periodic prints with ENERGEST, node-id.
    Let RPL examples enable platform RPL
    Add changes needed for contikimac
    Change timer setups for arbitrary CLOCK_CONF_SECOND
    Change raven to 128 ticks and enable 32KHz crystal as default.
    Add explicit RADIOSTATS to platform contiki-conf.h
    Add project-conf.h to platform contiki-conf.h files.
    Fix jackdaw comments.
    Add comments, bugfixes, merge avr-atmega128rfa1 platform changes to avr-raven
    Test TortoiseGit commit from Vista laptop
    Test TortoiseGit commit from windows 7
    Test git commit
    Add working cx-mac configuration values.
    Refactor, tune, add SICSLOWPAN_CONF_ACK_ALL defines for testing radio acks
    Refactor contiki-conf files, remove obsolete defines.
    Hardware/software radio HAL patch from Roger Larsson.
    Use CHANNEL_802_15_4 define for RF channel on all AVR platforms, default 26.
    Remove hopefully unnecessary interrupt disable wrapper on eeprom reads and writes.
    Fixes to allow ipv4 (hello world) builds
    RSSI read fix (use ED register in AACK mode), add reduced power configuration for miniature mesh testing.
    Allow non-ipv6 build, e.g. Hello World
    Add Raven RPL build option
    Reduce RIME max time to fit in 16 bit timer
    Update for NETSTACK_CONF_FRAMER
    Change back to SICSLOWPAN_COMPRESSION_HC06 from  SICSLOWPAN_COMPRESSION_HC01
    Clean up, functional webserver for  further testing of  low power protocols
    Platform 0 was matching by default
    Use new HC06
    Allow build with original radio driver using $make RF230BB=0
    update to new driver format
    experimental cxmac code
    Specify mac driver in contiki-conf.h
    Clarify defines for RF230 and effect on program size
    Add conditional boot messages and file logging
    Defines for fragmentation handling
    Add rf230bb radio driver with conditional make on RF230BB=1
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    example\webserver-ipv6-raven works!
    Contiki port for the Atmel AVR Raven board
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Changed the Contiki Interface declaration macros from CCI/CLI to CCIF/CLIF because of already existing macros: Both CCI and CLI :-(
    Added defines for declaring functions/data which are part of the CCI (Contiki Core Interface) and CLI (Contiki Loadable Interface). Both defines are empty for all platforms but the upcoming Win32 port.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix unused variable warning
    Bugfixes and additional testing contributed by Mauro Greco. Still a probabe bug when coffee page size is  a multiple of physical page size and FLASH_COMPLEMENT_DATA=0
    Add static coffee file system to webserver
    Optional complemented writes/reads and faster word reads
    Passed tests on Raven 1284p in 3 seconds  with 56KB program memory disk
    Contiki port for the Atmel AVR Raven board
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Implement SLEEP and DOZE commands from the 3290p menu.
    Define serial commands the same as the 3290p for grepping.
    Moved raven-lcd.h file
    example\webserver-ipv6-raven works!
    Contiki port for the Atmel AVR Raven board
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Moved mandatory low-level initialization into main file, moved all uIP and network initialization into int_net()
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    llsec: Added a layer in between NETSTACK_MAC and NETSTACK_NETWORK for implementing link layer security
    Add the explicit list of modules, since we cannot do auto-dependency management of them
    Moved the individual MODULE definitions from the top-level Makefile.include into the individual platforms' Makefiles
    Define MODULES for the avr-raven and the avr-ravenusb platforms
    cpu/avr: Added "AVRDUDE_MCU" configuration parameter.
    Add params.c to Raven and sync with 128rfa1 contiki-conf.h
    Contikimac works with mcu sleep on both platforms.
    Add files needed for slip rpl-border-router build.
    avrdude and makefile changes suggested by Georg von Zengen
    added inclusion of radio Makefile for the raven platforms
    *** empty log message ***
    Add rf230bb radio driver with conditional make on RF230BB=1
    example\webserver-ipv6-raven works!
    Contiki port for the Atmel AVR Raven board
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Updated include paths for the moved files under net/
    Fix naming issues and includes in uip-ds6-nbr.h
    Port apps, examples, platforms and tools so they use the new neighbor and route API.
    Updated to the latest uip-ds6-route API
    Add F_CPU=0x800000 option with phase lock to external 32768 Hz crystal
    Add MCU_CONF_LOW_WEAR option to avoid eeprom writes during development.
    Better fix for hardware FCS error on JTAG reset
    Correct silly error introduced by trying to save two bytes.
    Add params.c to Raven and sync with 128rfa1 contiki-conf.h
    Contikimac works with mcu sleep on both platforms.
    Reverse node_id bytes, patch from Geog von Zengen
    Add settings manager with program flash defaults, random routine, periodic prints with ENERGEST, node-id.
    Get random seed from noisy ADC conversion at startup.
    Change timer setups for arbitrary CLOCK_CONF_SECOND
    Change raven to 128 ticks and enable 32KHz crystal as default.
    Replace WEBSERVER by AVR_WEBSERVER
    MAC address to EEMEM, not PROGMEM
    Sync atmega128rfa1 main routine to the raven (timed route prints, etc.)
    Add periodic print of stack monitor and neighbors/routes.
    Refactor PRINTFs.
    Add comments, bugfixes, merge avr-atmega128rfa1 platform changes to avr-raven
    Hardware/software radio HAL patch from Roger Larsson.
    Use CHANNEL_802_15_4 define for RF channel on all AVR platforms, default 26.
    Remove hopefully unnecessary interrupt disable wrapper on eeprom reads and writes.
    Allow non-ipv6 build, e.g. Hello World
    Add Raven RPL build option
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    Change RF channel to 26 for econotag compatibility
    Turn off radio DEBUGFLOW printing
    change for ds6 calls
    Update for NETSTACK_CONF_FRAMER
    Clean up, functional webserver for  further testing of  low power protocols
    Allow build with original radio driver using $make RF230BB=0
    update to new driver format
    experimental cxmac code
    Specify mac driver in contiki-conf.h
    Add conditional boot messages and file logging
    Allow hello-world to build, fix makefile ignoring rf230bb
    Add static coffee file system to webserver
    Add rf230bb radio driver with conditional make on RF230BB=1
    Renamed serial module to serial-line
    Changed copyright.
    Fix to allow building without LCD interface
    example\webserver-ipv6-raven works!
    Contiki port for the Atmel AVR Raven board
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Changed the name of the rimeaddr module to linkaddr
    PROGMEM changes needed for newer avr-gcc compiler
    Add params.c to Raven and sync with 128rfa1 contiki-conf.h
    Contikimac works with mcu sleep on both platforms.
    Refactor with params.c, h
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Add F_CPU=0x800000 option with phase lock to external 32768 Hz crystal
    Add MCU_CONF_LOW_WEAR option to avoid eeprom writes during development.
    Add params.c to Raven and sync with 128rfa1 contiki-conf.h
    Contikimac works with mcu sleep on both platforms.
    Refactor with params.c, h
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Renamed serial module to serial-line
    Contiki port for the Atmel AVR Raven board
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] avr-raven: Fix placement of description for ravenserial group
    
    Note: The raven-lcd-interface and raven-ipso modules in atmega128rfa1
    seem to be needles for this platform and might be there only because of
    copy&paste from the raven platform. Should be removed in a later patch.
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    Implement SLEEP and DOZE commands from the 3290p menu.
    Define serial commands the same as the 3290p for grepping.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    update to ds6 calls
    Remove frame.h include, expose raven_ping6 for  external calls
    added missing end bracket
    Changed to use tcpip_icmp6_event for ICMP notifications.
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    changed format of the temperature value to be compliant with new specification
    Added an application and example to run IPSo interoperability test using RAVEN boards
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Added an application and example to run IPSo interoperability test using RAVEN boards
    [doc] avr-raven: Fix placement of description for ravenserial group
    
    Note: The raven-lcd-interface and raven-ipso modules in atmega128rfa1
    seem to be needles for this platform and might be there only because of
    copy&paste from the raven platform. Should be removed in a later patch.
    Closing doxygen groups
    Add clock_delay_us and clock_set_seconds to clock.h. Modify clock_wait to use clock_time_t.
    Remove the troublesome avr/dev/delay.* files.
    Add PLATFORM_NAME and combine the confusing *_REVISION defines into a single PLATFORM_TYPE
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    Adjust sleep time by ticks instead of seconds, proposed by Ivan Delamer
    Add settings manager with program flash defaults, random routine, periodic prints with ENERGEST, node-id.
    Change timer setups for arbitrary CLOCK_CONF_SECOND
    Change raven to 128 ticks and enable 32KHz crystal as default.
    Replace WEBSERVER by AVR_WEBSERVER
    Fix unresolved references when built without webserver and/or tcp. Changes suggested by Harald Pichler.
    Add comments, bugfixes, merge avr-atmega128rfa1 platform changes to avr-raven
    Remove contitional on clock updating, it should always be done after a sleep!
    Resolve TIMER2 conflict between sleep and possible clock usage.
    Implement SLEEP and DOZE commands from the 3290p menu.
    Define serial commands the same as the 3290p for grepping.
    Add optional pings to google and cisco
    change for ds6 calls
    Clean up, functional webserver for  further testing of  low power protocols
    Add serial command to send voltage measurement to webserver
    added missing end bracket
    Changed to use tcpip_icmp6_event for ICMP notifications.
    Add rf230bb radio driver with conditional make on RF230BB=1
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    apps for raven LCD menu
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Fix to allow building without LCD interface
    apps for raven LCD menu
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Updated for Contiki 2.0
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Replaced '404.html' with 'notfound.html' as '404.html' is no valid filename for the Apple2 disk operating system ProDOS 8.
    Yet another PETSCII<->ASCII issue solved - this time it caused failure to send the right content type.
    Avoid file handle leaks.
    Avoid memory block leaks (and minor code style adjustment).
    Allow to configure the maximum number of simultaneous connections to the cfs webserver.
    Added PETSCII support.
    Increased number of simultanious connections from two to three, fixed / streamlined 404.html handling and added logging on tcp resets.
    Removed compiler warnings.
    Made the webserver cfs support build and run.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Patch from Landon Fuller adds const to PROGMEM, required for newer avr-gcc
    Send text following ? in GET to Raven LCD
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Add httpd_s* function layer and HTTPD_STRING_ATTR  for strings in different memory types
    Add static coffee file system to webserver
    All static strings to flash, add wildcard to file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Changes to raven-webserver by "David Kopf" <dak664@embarqmail.com>:
        *Fixed bug in the cgi script handling
        *Making a special check for index.html and treating it like index.shtml to
            allow a common header for all files.
        *adding robots.txt to keep google, msn, yahoo out
        *adding a nice icon through a <link rel="icon"... in the header
        *saying "not enabled" for temperature if it hasn't been initialized
    webserver app for RAVEN platform
    applications updates for uIPv6
    Allow to configure the maximum number of simultaneous connections to the cgi webserver.
    Optimzed PETSCII support.
    Include 'Referer:' in referer log message.
    Removed compiler warnings.
    Made the webserver logging follow the popular pattern of foo_???() being declared in foo.h and defined in foo.c.
    Fix for bug when script goes past the end of a file (thanks to Till Harbaum)
    Avoid compiler warnings.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix naming issues and includes in uip-ds6-nbr.h
    Port apps, examples, platforms and tools so they use the new neighbor and route API.
    Updated to the latest uip-ds6-route API
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    Use PROCESS_NAME_STRING macro to handle NO_PROCESS_NAMES
    Replace file, some problem with my local master line endings.
    Test web-based commit, see if it fixes the line endings.
    Keep track of sleeptime and display on status web page.
    Save  radio ontime  when webwser displays current  cpu ontime for later display of corresponding value  after possible TCP delays.
    Minor format and comment changes
    Add status page link, show correct rssi, fix indexing off array in  ipv4 builds
    Add address, neighbor, routes cgi's
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Enable radio stats in sensor cgi as default
    Add RADIOSTATS to sensors cgi
    Expose httpd-cgi  ipv6 address print to other modules
    Add httpd_s* function layer and HTTPD_STRING_ATTR  for strings in different memory types
    Add static coffee file system to webserver
    All static strings to flash, add wildcard to file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Changes to raven-webserver by "David Kopf" <dak664@embarqmail.com>:
        *Fixed bug in the cgi script handling
        *Making a special check for index.html and treating it like index.shtml to
            allow a common header for all files.
        *adding robots.txt to keep google, msn, yahoo out
        *adding a nice icon through a <link rel="icon"... in the header
        *saying "not enabled" for temperature if it hasn't been initialized
    webserver app for RAVEN platform
    applications updates for uIPv6
    Changed all sprintf() calls to snprintf() to make it useful for systems with very low buffer size
    Adjusted process display cgi to recent change in process states.
    Optimzed PETSCII support.
    Allow to find the scripts on PETSCII machines.
    Removed compiler warning.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Avoid usage of nameless unions as they are - surprisingly at least to me - not part of any C spec.
    Added center alignment to network statistic columns. Now it looks nicer and is consistent with the system processes columns.
    Updated processes script output to match HTML ;-)
    Ported processes cgi to Contiki 2.x.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    *-dsc.c files have been changed to remove forward reference for struct_icon variable, bacause it is strange that this variable is used wholly inside the C source file and declared extern for the forward reference.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Add RADIOSTATS to sensors cgi
    Expose httpd-cgi  ipv6 address print to other modules
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    applications updates for uIPv6
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Expose httpd-cgi  ipv6 address print to other modules
    All static strings to flash, add wildcard to file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Removed SELFSTART_PROCESS as AUTOSTART_ENABLE generally serves that purpose - and AUTOSTART_ENABLE gets already set as required :-)
    Made the webserver logging follow the popular pattern of foo_???() being declared in foo.h and defined in foo.c.
    Direct httpd logs to the Contiki log for non-CTK scenarios.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    applications updates for uIPv6
    Made the webserver logging follow the popular pattern of foo_???() being declared in foo.h and defined in foo.c.
    Import of the contiki-2.x development code from the SICS internal CVS server
    All static strings to flash, add wildcard to file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Updated for Contiki 2.0
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Made the webserver logging follow the popular pattern of foo_???() being declared in foo.h and defined in foo.c.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    Add httpd_s* function layer and HTTPD_STRING_ATTR  for strings in different memory types
    Add static coffee file system to webserver
    All static strings to flash, add wildcard to file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    applications updates for uIPv6
    Adjusted source formatting Mk II ;-)
    Adjusted source formatting.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Replace WEBSERVER by AVR_WEBSERVER
    Fix comment, add WEBDIR=default to force rebuild with default web content
    Allow hello-world to build, fix makefile ignoring rf230bb
    *** empty log message ***
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    example\webserver-ipv6-raven works!
    webserver app for RAVEN platform
    Removed unreferenced source from application makefile.
    Make lists of source files for each app available individually - i.e. for creation of dynamically loadable modules.
    Added comment in makefile on how to produce the http-strings.c file; having the actual rule in the makefile does not seem to work
    It simply doesn't make sense to link in both webserver.c and webserver-nogui.c. This raises the question if examples/webserver was tested at all ;-)
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    HTTP strings
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    All static strings to flash, add wildcard to file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Made the webserver cfs support build and run.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    Add static coffee file system to webserver
    All static strings to flash, add wildcard to file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    applications updates for uIPv6
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Removed SELFSTART_PROCESS as AUTOSTART_ENABLE generally serves that purpose - and AUTOSTART_ENABLE gets already set as required :-)
    Allow to optionally (triggered with SELFSTART_PROCESS) self start the application.
    Made the webserver logging follow the popular pattern of foo_???() being declared in foo.h and defined in foo.c.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Add httpd_s* function layer and HTTPD_STRING_ATTR  for strings in different memory types
    Add static coffee file system to webserver
    All static strings to flash, add wildcard to file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Avoid usage of nameless unions as they are - surprisingly at least to me - not part of any C spec.
    Made the webserver logging follow the popular pattern of foo_???() being declared in foo.h and defined in foo.c.
    Ported processes cgi to Contiki 2.x.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix html compliance, use wildcard in file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Updated processes HTML to match script output
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix html compliance, use wildcard in file-stats cgi
    Remove tab that was preventing cgi invokation
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Changes by "David Kopf" <dak664@embarqmail.com> to:
     -Add hit counter to index.html
     -Adding link to favicon.png
     -Fix serving of binary (image) files in avr-makefsdata file
    
    Changes by Colin O'Flynn:
     -Removed extra linebreak in tutorial-raven.txt
     -Fix to contiki-conf.h in avr-rcb platform
    Changes to raven-webserver by "David Kopf" <dak664@embarqmail.com>:
        *Fixed bug in the cgi script handling
        *Making a special check for index.html and treating it like index.shtml to
            allow a common header for all files.
        *adding robots.txt to keep google, msn, yahoo out
        *adding a nice icon through a <link rel="icon"... in the header
        *saying "not enabled" for temperature if it hasn't been initialized
    webserver app for RAVEN platform
    applications updates for uIPv6
    Updated with new Contiki website URL
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix html compliance, use wildcard in file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Changes to raven-webserver by "David Kopf" <dak664@embarqmail.com>:
        *Fixed bug in the cgi script handling
        *Making a special check for index.html and treating it like index.shtml to
            allow a common header for all files.
        *adding robots.txt to keep google, msn, yahoo out
        *adding a nice icon through a <link rel="icon"... in the header
        *saying "not enabled" for temperature if it hasn't been initialized
    Add status page link, show correct rssi, fix indexing off array in  ipv4 builds
    Fix html compliance, use wildcard in file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Changes by "David Kopf" <dak664@embarqmail.com> to:
     -Add hit counter to index.html
     -Adding link to favicon.png
     -Fix serving of binary (image) files in avr-makefsdata file
    
    Changes by Colin O'Flynn:
     -Removed extra linebreak in tutorial-raven.txt
     -Fix to contiki-conf.h in avr-rcb platform
    webserver app for RAVEN platform
    applications updates for uIPv6
    Updated with new Contiki website URL
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix html compliance, use wildcard in file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix html compliance, use wildcard in file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Changes by "David Kopf" <dak664@embarqmail.com> to:
     -Add hit counter to index.html
     -Adding link to favicon.png
     -Fix serving of binary (image) files in avr-makefsdata file
    
    Changes by Colin O'Flynn:
     -Removed extra linebreak in tutorial-raven.txt
     -Fix to contiki-conf.h in avr-rcb platform
    Changes to raven-webserver by "David Kopf" <dak664@embarqmail.com>:
        *Fixed bug in the cgi script handling
        *Making a special check for index.html and treating it like index.shtml to
            allow a common header for all files.
        *adding robots.txt to keep google, msn, yahoo out
        *adding a nice icon through a <link rel="icon"... in the header
        *saying "not enabled" for temperature if it hasn't been initialized
    webserver app for RAVEN platform
    Patch from Landon Fuller adds const to PROGMEM, required for newer avr-gcc
    Add settings manager with program flash defaults, random routine, periodic prints with ENERGEST, node-id.
    Add makefsdata.h, remove httpd-fsdata.c, make  now creates  with /tools/ makefsdata.
    Add Huginn and Muninn web content
    Fix html compliance, use wildcard in file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Changes by "David Kopf" <dak664@embarqmail.com> to:
     -Add hit counter to index.html
     -Adding link to favicon.png
     -Fix serving of binary (image) files in avr-makefsdata file
    
    Changes by Colin O'Flynn:
     -Removed extra linebreak in tutorial-raven.txt
     -Fix to contiki-conf.h in avr-rcb platform
    Changes to raven-webserver by "David Kopf" <dak664@embarqmail.com>:
        *Fixed bug in the cgi script handling
        *Making a special check for index.html and treating it like index.shtml to
            allow a common header for all files.
        *adding robots.txt to keep google, msn, yahoo out
        *adding a nice icon through a <link rel="icon"... in the header
        *saying "not enabled" for temperature if it hasn't been initialized
    webserver app for RAVEN platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix html compliance, use wildcard in file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix html compliance, use wildcard in file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Changes by "David Kopf" <dak664@embarqmail.com> to:
     -Add hit counter to index.html
     -Adding link to favicon.png
     -Fix serving of binary (image) files in avr-makefsdata file
    
    Changes by Colin O'Flynn:
     -Removed extra linebreak in tutorial-raven.txt
     -Fix to contiki-conf.h in avr-rcb platform
    webserver app for RAVEN platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add status page link, show correct rssi, fix indexing off array in  ipv4 builds
    Add status web page with addresses, neighbors, routes
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Changes to raven-webserver by "David Kopf" <dak664@embarqmail.com>:
        *Fixed bug in the cgi script handling
        *Making a special check for index.html and treating it like index.shtml to
            allow a common header for all files.
        *adding robots.txt to keep google, msn, yahoo out
        *adding a nice icon through a <link rel="icon"... in the header
        *saying "not enabled" for temperature if it hasn't been initialized
    Add platform LED driver
    Add initial ADuCRF101 CPU support
    Add ADuCRF101 library code from Analog Devices
    Add button sensor support (BOOT button)
    Add initial ADuCRF101 CPU support
    Add ADuCRF101 library code from Analog Devices
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Add IAR compiler support for ADuCRF101
    Implement rtimers for ADuCRF101
    Add platform LED driver
    Add button sensor support (BOOT button)
    Move RF RX into its own process
    Add ADuCRF101 radio driver
    Add initial EV-ADuCRF101MKxZ platform support
    Cleanup UIP_CONF_IPV6_RPL configuration
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    aducrf101: Adjust default buffer sizes to fit better in available RAM
    Add ADuCRF101 radio driver
    Add initial EV-ADuCRF101MKxZ platform support
    Fix radio hangups when trying to transmit with radio off.
    
    The border-router tries to transmit and do other stuff after turning
    the radio off, and the radio driver didn't handle that very well.
    With this fix, it's no longer necessary to reset the border router
    after starting tunslip6.
    Add Windows build instructions for ev-aducrf101mkxz platform
    Add README.md for ev-aducrf101mkxz platform
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    aducrf101mkxz: added llsec module
    Add platform LED driver
    Add button sensor support (BOOT button)
    Add initial EV-ADuCRF101MKxZ platform support
    Add platform LED driver
    Add button sensor support (BOOT button)
    Add initial EV-ADuCRF101MKxZ platform support
    Add initial ADuCRF101 CPU support
    Add ADuCRF101 library code from Analog Devices
    Code style fixes: cc2530dk
    cc253x: add putdec debug function
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Updated include paths for the moved files under net/
    cc2530dk and Sensinode: Local copy of uip-debug.c
    
    Copied this file to the platform directories and
    changed it to use putstring(), puthex() etc so
    that we can print addresses without linking in
    printf
    
    See Pull Request #20
    Add PRINTA so direct calls to debug routines will always print
    Several compiler warning fixes:
    
         * msp430: fix "implicit declaration of function" warnings in clock.c, by including watchdog.h;
         * sky: fix a couple pointer target signedness warnings;
         * core: fix several signed/unsigned comparison warnings;
         * framer-802154: "const static" -> "static const" to fix compiler warnings;
         * core: comment or remove unused variables and function definitions.
    
    Signed-off-by: Lionel Debroux <lionel_debroux@yahoo.fr>
    Signed-off-by: Mariano Alvira <mar@devl.org>
    added uip-debug utilities
    slip.c:
            char is signed but uip_buf is unsigned
    
    spi.h:
            casted unused values to void
    
    autostart.c:
    autostart.h:
            The array itself should be const but the processes pointed to
            should not.
    
    profile-aggregates.c:
            sizeof returns unsigned long on my platform
    Debug output
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    Port apps, examples, platforms and tools so they use the new neighbor and route API.
    Update to the new ds6_route API
    Code style fixes: cc2530dk
    We can now use SDCC's __nonbanked feature
    
    This allows us to reduce CODE footprint of SDCC projects
    built with --model-huge. Use carefully!
    
    * Added a facility which allows us to enable/disable the
      feature from the CPU dir (CC_CONF_NON_BANKED_OPTIMIZATION)
    * Added the CC_NON_BANKED keyword to some platform files
      (expands to __nonbanked)
    * Started using this for some examples
    Some uN_t had crept back in cc2530dk and sensinode.
    
    Changed to uintN_t plus a bit of code formatting
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Implement extended RF API for the CC2530 RF
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Code style fixes: cc2530dk
    cc2530dk: Fixed the startup text for dongle builds
    
    See Pull Request #21
    cc253x: Config to swap between UART and USB I/O
    
    See Pull Request #18
    cc253x: Renamed P2 interrupt-related files for better consistency
    
    See Pull Request #18
    cc253x: Add p2 interrupt handler
    
    The P2 Interrupt is shared across many periferal (I2C, USB, GPIO).
    This adds a generic interrupt handler on which the differents drivers
    can register a handler.
    
    See Pull Request #18
    Reworked the cc2530 stack debugging facilities:
    
    - Moved to their own file
      (so we can later copy the entire thing over to cc2430)
    - Renamed the functions
      (for naming convention reasons)
    - The entire thing can be enabled/disabled
    - Added a couple more macros
    - Hooked into main()
    cc2530: Added a method to maximise stack depth
    
    This was oringinally contributed/reported/discussed/patched by
    Philippe Retornaz (EPFL) but it's implemented
    in a more configurable fashion here.
    cc253x: Don't force __data usage
    
    SDCC optimize "r" and put it in a register.
    Don't force len to be in __data.
    cc253x: use a uint8_t for sleep_flag
    
    __bit variables must be located after the 0x20 address
    This force the stack to start after 0x20, thus decrease
    the stack size by a considerable amount.
    Adjust cc2x3x ports to the new clock API
    We can now use SDCC's __nonbanked feature
    
    This allows us to reduce CODE footprint of SDCC projects
    built with --model-huge. Use carefully!
    
    * Added a facility which allows us to enable/disable the
      feature from the CPU dir (CC_CONF_NON_BANKED_OPTIMIZATION)
    * Added the CC_NON_BANKED keyword to some platform files
      (expands to __nonbanked)
    * Started using this for some examples
    Added support for reading MAC from the cc253x flash
    
    We still use the primary location by default (Info Page) but
    this is now configurable. This change is useful for users who
    wish to specify their own MAC address. Since the Info Page is
    read-only, they need to be able to use the secondary location
    The cc253x Makefile specifies SoC flavor
    
    This will help us slowly add better support for smaller SoCs
    instead of just assuming that all cc253x SoCs are F256
    
    - We build for F256 by default but the project Makefile can override this
    - We currently ignore this when passing --code-size. This is a ToDo
    - The bank allocator always assumes 7 banks. Once we fix --code-size above this will be irrelevant
    Simplified the cc2530dk STARTUP_CONF_VERBOSE spaghetti and made it project-configurable
    Ported the stack-friendly clock ISR code over from cc243x to cc253x
    Removed obsolete #if config from cc2530dk's main
    
    Unlike cc2430, the cc2530 RF driver never generates interrupts.
    This configuration in main() was a remnant of the porting from
    the sensinode main, which does in fact need it.
    Also updated comments in contiki-conf to reflect that shortcuts
    don't influence the RF
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    - Upgraded the Sensinode platform to use sicslowmac.c
    - Improved the rime address setup, setting the RF driver addresses (byte order may not be correct)
    Initial commit of Sensinode platform files.
    Change CC2530DK default PAN ID to 0xABCD and make it configurable by project-conf.h
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Changed the name of the rimeaddr module to linkaddr
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Fix naming issues and includes in uip-ds6-nbr.h
    Removed now unused per-module neighbor table size configs. Use NEIGHBOR_CONF_MAX_NEIGHBORS instead.
    Change the way we switch between cc2530 models
    
    The switch is now performed through a configuration define,
    which has also been renamed to better match Contiki's naming
    conventions
    Increase 8051 plaform configurability
    Disable example-defined putchar for 8051 platforms
    Move SLIP interface define to project-conf
    Auto-enable SLIP for 8051-based platforms
    Use no metric container when having MRHOF with ETX, as specified in RFC6719. Renamed rpl-of-etx to rpl-mrhof.
    Fix 8051 port builds to play nicely with #173
    Changed the name of the IPv6 number of route entries configuration from UIP_CONF_DS6_ROUTE_NBU to UIP_CONF_MAX_ROUTES.
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    cc253x: Configurable linkage for the P2 ISR
    
    See Pull Request #18
    Reworked the cc2530 stack debugging facilities:
    
    - Moved to their own file
      (so we can later copy the entire thing over to cc2430)
    - Renamed the functions
      (for naming convention reasons)
    - The entire thing can be enabled/disabled
    - Added a couple more macros
    - Hooked into main()
    Fixed an SDCC compile error when UIP_CONF_ROUTER is 0. UIP_CONF_ROUTER can be configured in project-conf.h
    cc2x3x RPL/non-RPL handling:
    
    - Relevant examples explicitly request it in their Makefile
    - Removed the definition of UIP_CONF_IPV6_RPL from
      contiki-conf.h. If needed, it's defined through a -D
    Easily configure B2 on the cc2531 USB stick as a General-Purpose or Reset button
    Platform cc2530dk now uses models.h to configure differences between the SmartRF and the 2531 USB stick
    Redefined LEDS_ALL for cc2531s
    cc2531 LED support
    Added support for reading MAC from the cc253x flash
    
    We still use the primary location by default (Info Page) but
    this is now configurable. This change is useful for users who
    wish to specify their own MAC address. Since the Info Page is
    read-only, they need to be able to use the secondary location
    Simplified the cc2530dk STARTUP_CONF_VERBOSE spaghetti and made it project-configurable
    Ported the stack-friendly clock ISR code over from cc243x to cc253x
    Renamed a config define to better match contiki's naming philosophy
    Removed obsolete #if config from cc2530dk's main
    
    Unlike cc2430, the cc2530 RF driver never generates interrupts.
    This configuration in main() was a remnant of the porting from
    the sensinode main, which does in fact need it.
    Also updated comments in contiki-conf to reflect that shortcuts
    don't influence the RF
    For cc2x30, moved CLOCK_CONF_SENCOND to the cpu dir.
    
    The value is not really configurable by the platform so having it
    in contiki-conf.h didn't make huge sense.
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Initial commit of Sensinode platform files.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    cc253x: add putdec debug function
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    fixed documentation typos.
    Made headercompression work on external buffer
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    llsec: Added a layer in between NETSTACK_MAC and NETSTACK_NETWORK for implementing link layer security
    Add the explicit list of modules, since we cannot do auto-dependency management of them
    A set of default modules for the cc253x platform
    Don't specify -DUIP_CONF_IPV6 in platform makefiles
    
    Makefile.include has done it for us already, we no longer need to do so ourselves
    Remove leftover make targets
    
    The sensinode platform does not support .upload and .serialdump
    Their presence in the makefile has confused in the past confused
    some users. This commit removes them
    
    The commit also removes the $(OBJECTDIR)/%.rel: %.cS recipe which
    is not used by either 8051 platform and is probably broken anyway,
    since it has been unmaintained for years
    Fix 8051 port builds to play nicely with #173
    Makefiles: Allow setting UIP_CONF_IPV6=0 to work as expected.
    
    Setting UIP_CONF_IPV6 to zero from the make build command line is
    something that seems like it should ensure that IPv6 is disabled, but in
    fact it actually *enables* IPv6. This seems counter intuitive, so this
    patch changes the behavior of the makefiles to handle this case
    properly.
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    The cc2530dk Makefile was adding a source twice
    
    Also, removed an obsolete comment
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    cc253x: Config to swap between UART and USB I/O
    
    See Pull Request #18
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Change the way we switch between cc2530 models
    
    The switch is now performed through a configuration define,
    which has also been renamed to better match Contiki's naming
    conventions
    Change the cc2531 usb stick descriptor
    
    The CC2531 USB stick now identifies itself as a
    'Texas Instruments CC2531 USB Dongle' and uses a
    TI-assigmed VID:PID. The VID:PID is now configurable
    in contiki- or project-conf.h
    cc2530dk: Fixed the startup text for dongle builds
    
    See Pull Request #21
    cc253x: Configurable linkage for the P2 ISR
    
    See Pull Request #18
    cc253x: Add USB support to the compilation scripts
    
    See Pull Request #18
    Platform cc2530dk now uses models.h to configure differences between the SmartRF and the 2531 USB stick
    cc2531 LED support
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Fixed compiler warning (with IAR compiler)
    Added Sentilla USB platform. This platform is similar to the Sky platform but without the sensors and with 2 leds.
    Added Sentilla Jcreate platform. This platform is similar to the Sky platform but with other sensors and 8 leds.
    Moved ninimal-ppp into backyard as it depends on the uIP ppp support.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Put the cc253x custom makerules in its own customrules file
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Change the way we switch between cc2530 models
    
    The switch is now performed through a configuration define,
    which has also been renamed to better match Contiki's naming
    conventions
    The cc2530 button driver would fail to compile if the user disabled button support
    cc2531 Button 2 driver
    cc2531 B1 support. B2 to come
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Button sensor header
    Temporary deletion of files due to problems with the CVS repository
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Change the cc2531 usb stick descriptor
    
    The CC2531 USB stick now identifies itself as a
    'Texas Instruments CC2531 USB Dongle' and uses a
    TI-assigmed VID:PID. The VID:PID is now configurable
    in contiki- or project-conf.h
    Improve handling of CDC ACM line state
    
    - For the CC2538, simplify handling of USB_CDC_ACM_LINE_STATE
      events. Ignore the Carrier Control (RTS) bit when receiving
      a SET_CONTROL_LINE _STATE request, we are a full duplex device.
    - Improve behaviour of the CC2531 USB stick when there is no
      process on the host to read IN data. Basically, we adopt the
      CC2538 approach and we only send data when a DTE is present
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Change the way we switch between cc2530 models
    
    The switch is now performed through a configuration define,
    which has also been renamed to better match Contiki's naming
    conventions
    Code style fixes: cc2530dk
    cc2531 Button 2 driver
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Change the way we switch between cc2530 models
    
    The switch is now performed through a configuration define,
    which has also been renamed to better match Contiki's naming
    conventions
    Code style fixes: cc2530dk
    Platform cc2530dk now uses models.h to configure differences between the SmartRF and the 2531 USB stick
    cc2531 LED support
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Fixed compiler warning (with IAR compiler)
    Added Sentilla USB platform. This platform is similar to the Sky platform but without the sensors and with 2 leds.
    Added Sentilla Jcreate platform. This platform is similar to the Sky platform but with other sensors and 8 leds.
    Moved ninimal-ppp into backyard as it depends on the uIP ppp support.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Change the way we switch between cc2530 models
    
    The switch is now performed through a configuration define,
    which has also been renamed to better match Contiki's naming
    conventions
    Code style fixes: cc2530dk
    cc2530: Added a method to maximise stack depth
    
    This was oringinally contributed/reported/discussed/patched by
    Philippe Retornaz (EPFL) but it's implemented
    in a more configurable fashion here.
    Fixed typos and a stray printf. Adjusted comments
    Easily configure B2 on the cc2531 USB stick as a General-Purpose or Reset button
    cc2531 Button 2 driver
    cc2531 B1 support. B2 to come
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Cross compiler interrupt service routine compatibility definitions for MSP430 based platforms based on isr_compat.h by Steve Underwood.
    minor code style cleanup
    Updated to match the new sensors API
    Temporary deletion of files due to problems with the CVS repository
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    This is an initial commit of an implementation of the Chameleon
    architecture for the Rime stack for Contiki. The Chameleon
    architecture separates the header processing from the Rime protocol
    logic. Instead of having each protocol create its own part of the
    packet header, protocols use packet attributes. Before sending a
    packet, a special Chameleon header processing module creates a packet
    header from the packet attributes. The same Chameleon module parses
    incoming packets and creates packet attributes from the header.
    
    The details are in our SenSys 2007 paper:
    
    Adam Dunkels, Fredrik Osterlind, Zhitao He. An Adaptive Communication
    Architecture for Wireless Sensor Networks. In Proceedings of the Fifth
    ACM Conference on Networked Embedded Sensor Systems (SenSys 2007),
    Sydney, Australia, November 2007.
    
    http://www.sics.se/~adam/dunkels07adaptive.pdf
    
    This is a rewrite of the code that was developed for the paper.
    Turned rtimer_arch_now() from a (one line) function into a macro.
    Added rtimer_arch_now prototype
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    MSP430 definitions
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    Change the way we switch between cc2530 models
    
    The switch is now performed through a configuration define,
    which has also been renamed to better match Contiki's naming
    conventions
    cc253x: Config to swap between UART and USB I/O
    
    See Pull Request #18
    Renamed a cc253x SFRX to stop namespace conflicts
    
    The TR0 SFRX can not use the name TR0 because it
    conflicts with TCON.TR0 on the default 8051.
    
    See SDCC bug 3513300
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Initial commit of Sensinode platform files.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    cc253x: Config to swap between UART and USB I/O
    
    See Pull Request #18
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Improved support for the IAR compiler.
    
    io and signal have been moved into contiki include file.
    Contiki port to the TI EXP5438 MSP430x5438a experimenters board
    Updated SPI config for faster SPI, split msp430/clock/spi into separate versions for MSP430/MSP430X
    Fixed quick dco sync to also work with mspgcc
    Corrected timing for higher CPU speed
    Initial WiSMote port based on code from Arago Systems.
    Fixed splhigh/splx for the IAR compiler
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed Sky platform for IAR compiler
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    minor fixes of DMA uart code
    added initial uart1 DMA rx support and required LPM requirements api
    only include memcpy/set workaround when needed
    activated the new workaround...
    fixed workaround for memcpy/set to be memory efficient but slower
    added DCO-resync function and default config
    Initialize watchdog instead of stopping and starting it
    Added improvements suggested by Hardy Greich: define CPU speed in one place only (contiki-conf.h), added nop to XTAL settlement delay
    Updated to use the watchdog API
    * Use _end rather than nonstandard __bss_end.
    Moved uip_ipchksum() into a separate file to allow the Tmote Sky port to be compiled entirely without uIP
    * Workaround for bug in msp430-ld where __bss_end is sometimes
      misaligned.
    
    * Indent trailing brace properly.
    * Obob in cur_break initialisation.
    Make malloc machine independent by relying on dependent sbrk(2).
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the node-id.h files. The node-id.h file contains
    declarations of functions for setting and getting a node ID number, a
    functionality that exists on many platforms. Since this functionality
    was not considered part of the Contiki core, each platform defined its
    own node-id.h file. This commit attempts to clean this up by
    collecting the node-id.h into a core/sys/node-id.h file that replaces
    the old node-id.h files from the platform directories.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Contiki port to the TI EXP5438 MSP430x5438a experimenters board
    Node ID is stored in external flash and restored on bootup
    added Z1 platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix clock.h warnings caused by multiple, conflicting documentation blocks of clock functions
    Fix time accounting on TI EXP5438 MSP430x5438a experimenters board
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    The __delay_cycles() function in the latest mspgcc takes an unsigned long argument but does not allow it to be larger than 65536.
    Add clock_delay_us and clock_set_seconds to clock.h. Modify clock_wait to use clock_time_t.
    Remove the troublesome avr/dev/delay.* files.
    Add PLATFORM_NAME and combine the confusing *_REVISION defines into a single PLATFORM_TYPE
    Improved support for the IAR compiler.
    
    io and signal have been moved into contiki include file.
    Contiki port to the TI EXP5438 MSP430x5438a experimenters board
    * Added f2xxx for two series (for example z1)
    * f1xxx is baseline and always included
    * Cleaned up the names of uart and spi (no x in names)
    * Updated SPI configuration for WiSMote
    Updated SPI config for faster SPI, split msp430/clock/spi into separate versions for MSP430/MSP430X
    Changed clock_delay to use the nop instruction
    Initial WiSMote port based on code from Arago Systems.
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    msp430: fix "implicit declaration of function" warnings in clock.c, by including watchdog.h
    Turned up the rtimer resolution to 32678 Hz.
    Bugfix: the clock interrupt now flushes the energy estimator to avoid overflow of the LPM mode
    Turn off LPM mode for clock interrupts to avoid rtimer wrapping during extended LPM
    Increased the rtimer granularity: needed to make contikimac work
    Added support for 32-bit clock ticks: when reading the 32-bit value, make sure that it does not change between readouts to avoid reading right in the middle of it being updated
    Removed safeguards around the update code for the timer; turns out they weren't needed (but instead triggered a bug in MSPsim)
    Turn off Timer A before modifying its control registers to avoid problems when timer is updated frequently
    Increased the clock speed to 32768/4 from 32768/8 to provide better accuracy for power profiling of radio CCA checks
    Enable interrupts during the periodic clock processing to allow rtimers to execute on top of the clock
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    changed to use unsigned long for seconds counter
    bug fix, msp430 hw bug (undocumented):
    
    when in continuous/compare mode the interrupt handler may get called before CCR==TR.
    
    behavior observed when the timer is toggled between STOP/CONT in an external interrupt handler (serial input).
    
    possibly this problem may also affect watchdog timer/timer B
    Added a clock_seconds() function prototype to core/sys/clock.h, that returns seconds in 32 bit format. On platforms like the MSP430, which has a 16 bit native datatype, this cannot be implemented with an interrupt tick that increments a 32 bit value because access is not atomic. Instead, the MSP430 code increments 16 bit seconds value and converts this into a 32 bit value through an offset calculation. If the new value is smaller than the last check, the offset is incremented by 65536. This change also means that CLOCK_CONF_SECOND must be a power of two because a modulo operation is used inside the periodic tick interrupt handler.
    moved energest from lib/ to sys/
    Reformatting to comply with code style
    Added a hack function called clock_counter() to make the current prototype profiling code run on the MSP430 platform
    fixed some timer interrupt bugs and reimplemented clock_fine to avoid disabling interrupts
    support for delayed interrupts
    
    earlier TACCR1 could be set to already passed time if timer A interrupts was delayed
    removed redundant code - configuration of basic clock subsystem in clock and rtimer_arch
    Added energy estimation
    corrected comments
    Added experimental clock_fine() function
    Obob bug spotted by nfi.
    Use LPM4_EXIT to return from sleep on msp430.
    * Deal with numerical overflows.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Contiki port to the TI EXP5438 MSP430x5438a experimenters board
    Moved from examples/sky into generic platform/sky/apps so that all examples can use it
    Blinking LEDs
    Experimental energy estimation code
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Improved support for the IAR compiler.
    
    io and signal have been moved into contiki include file.
    Contiki port to the TI EXP5438 MSP430x5438a experimenters board
    Provide dummy implementations for the leds and minileds module in order
    to unbreak the build.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Contiki port to the TI EXP5438 MSP430x5438a experimenters board
    The __delay_cycles() function in the latest mspgcc takes an unsigned long argument but does not allow it to be larger than 65536.
    Improved support for the IAR compiler.
    
    io and signal have been moved into contiki include file.
    Contiki port to the TI EXP5438 MSP430x5438a experimenters board
    Cleanup UIP_CONF_IPV6_RPL configuration
    WITH_UIP6 -> NETSTACK_CONF_WITH_IPV6
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    ContikiMAC: Default to contikimac_framer when using Rime over ContikiMAC
    ContikiMAC: Create and parse ContikiMAC header in special framer; Expanded framer interface
    to allow for creating and securing frames in advance; Create and secure frames in advance when sending bursts; Do neither recreate nor resecure frames that come from phase
    Changed the name of the rimeaddr module to linkaddr
    Clean up setting channel and CCA-threshold for CC2420 based motes.
    The CCA-threshold now defaults to -46 which give better simulation
    results and typically also better experimental results.
    This adjustment is also needed due to commit 0a13f99 in mspsim. As
    promised in https://github.com/mspsim/mspsim/pull/18 it broke the
    regression tests.
    Fix naming issues and includes in uip-ds6-nbr.h
    Removed now unused per-module neighbor table size configs. Use NEIGHBOR_CONF_MAX_NEIGHBORS instead.
    Changed the name of the IPv6 number of route entries configuration from UIP_CONF_DS6_ROUTE_NBU to UIP_CONF_MAX_ROUTES.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Contiki port to the TI EXP5438 MSP430x5438a experimenters board
    Reduce size of the neighbor table entries to make RPL fit into the Tmote Sky RAM.
    Move compower configuration out of the non-IPv6 conditional clause.
    Made the sky and z1 platform handling of PROJECT_CONF_H the same as the other platforms: the makefile should define PROJECT_CONF_H to be the name of the header file to include. This header file should #undef everything it #defines, as it is included after all the other configuration options in contiki-conf.h
    Be a little more conservative in terms of what headers not to compress
    Use the SICSLOWPAN_CONF_COMPRESSION_THRESHOLD to avoid compressing IPv6 packets smaller than 60 bytes. This allows us to use ContikiMAC without its header, making it 802.15.4 compliant again.
    Made the platform config file configurable.
    removed modif. to sky files
    Made energest configuration configurable
    Modified contiki-conf.h and added sensys-scanner.
    Disable timesynch by default - it is not well-tested enough yet.
    Turn on timesynch by default
    #ifndef'd  elfloader's default memory usage
    Made uIPv6 packet queueuing configuration configurable
    configured tmote sky to use 5 retransmissions
    Made collect neighbors, queuebuf number, uip-ds6 configuration settable through project-conf.h
    fixed some config params to avoid re-defining if already defined
    Made a lot of things configurable via the (optional) project-conf.h
    Updated configuration options to reflect recent changes. Increased number of queuebufs. Corrected the name of the collection neighbors option.
    split hw config into platform-conf and adapted to new SPI and CC2420 naming
    moved cc2420 config to platform config
    Increase the size of the route and neighbor tables; remove the uIP packet buffer queue for every neighbor to save RAM
    removed RPL routing state struct from platform config file
    Added missing parts of the RPL configuration
    added rpl support for tmote sky - enabled by default
    Turned on broadcast announcements by default, turn on announcements for collect
    Replaced old framer (framer_get/framer_set) with new NETSTACK style configuration. Added nullrdc-framer that is a nullrdc with framer support.
    updated sky platform for new sicslowpan
    Enabled 32-bit clock ticks to allow longer timeouts; experimentally disabled polite announcements in favour of a non-announcement based collect protocol
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Enabled sicslowpan fragmentation and reassembly by default on the sky platform
    Made it possible to override the SICSLOWPAN_CONF_FRAG option. Increased the default uIP buffer size on IPv6 to provide some room for fragmented packets
    Use cxmac for IP, xmac for non-IP. Increased uIP buffer size for IPv6 to accomodate ICMP packets
    Added default configuration options for the cxmac driver
    Reduce the TCP MSS so that it runs nicely over IPv6/802.15.4
    Added the CSMA MAC mechanism on top of the default duty cycling
    mechanism X-MAC. The CSMA is configurable with a MAC_CSMA define, just
    like the MAC protocol is configurable with the MAC_DRIVER define.
    reverted accidental commit
    Updated to match the new sensors API
    fixed for updated sensors API
    macro renamed to SPI_IS_ENABLED() to avoid confusions
    added macro for checking whether SPI is ENABLED
    Rime polite announcements should be used when IPv6 is enabled, and not used otherwise
    Renamed SPI_WAITFOREOTxBUF to SPI_WAITFORTxREADY for clarity and generalized SPI transmission status checks to work with both AVR and MSP430
    Changed to monitor the UART transmitter buffer ready flag instead of the UART transmitter empty flag. This almost doubles the speed of transmitting data to CC2420. Patch by James Brown.
    allow UIP_CONF_ROUTER to be set as compilation flag
    configured routing to off for sky-IPv6
    use polite announcements when running Rime over UDP.
    added init function in MAC driver for easier configuration
    decreased default elfloader memory usage for sky platform
    Increased the default number of queue buffers: there usually is plenty of RAM left, so we should  be able to afford it
    Increase default CPU speed from 2.4576 MHz to 3.9 MHz. Communication works better, at a low power cost
    cc2420 checksums temporarily disabled, due to timing problems with the x-mac unicast optimization
    Added CC2420 checksums to non-ipv6 packets. Set a conservative TCP MSS
    Disable timestamp when using 802.15.4 frames (CC2420_CONF_TIMESTAMPS adds timestamp to radio packets).
    changed to use HC01 compression for uip6
    set rime addr size to 8 for uip6, restored clock resolution
    added configuration for panid
    enabled multihop routing, increased uip buffer size.
    added workaround for memcpy/memset bug in mspgcc
    Made tick resultion more fine-grained to support a shorter LPP listen time
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    sicslowpan Typo
    Enable communication power accounting for xmac by default
    Switched name to CFS_CONF_OFFSET_TYPE to emphasize that it is a configurable option.
    switched cfs offset type to signed long to allow backward movements with cfs_seek.
    use unsigned long as cfs offset type.
    Bugfix: reduced the size of the uIP buffer to account for MAC header space
    Enabled X-MAC announcements by default, disabled polite broadcast announcements by default
    added DCO/CPU speed re-synch each 30 seconds
    elfloader executing loaded programs from ram (not rom) by default on msp430 platforms.
    temporary fix to get sicslowpan.c working on the Sky platform:
    conventional MAC implementations require a call to the MAC driver's
    read function.
    map rime address to mac address for ipv6
    added IPV6 configuration.
    Changed name of simple-cc2420 to cc2420
    Changed filename of the CC2420 driver from simple-cc2420 to cc2420.
    Changed the name of UIP_CONF_TCP_FORWARD to UIP_CONF_IP_FORWARD since forwarding is done at the IP level
    This is an initial commit of an implementation of the Chameleon
    architecture for the Rime stack for Contiki. The Chameleon
    architecture separates the header processing from the Rime protocol
    logic. Instead of having each protocol create its own part of the
    packet header, protocols use packet attributes. Before sending a
    packet, a special Chameleon header processing module creates a packet
    header from the packet attributes. The same Chameleon module parses
    incoming packets and creates packet attributes from the header.
    
    The details are in our SenSys 2007 paper:
    
    Adam Dunkels, Fredrik Osterlind, Zhitao He. An Adaptive Communication
    Architecture for Wireless Sensor Networks. In Proceedings of the Fifth
    ACM Conference on Networked Embedded Sensor Systems (SenSys 2007),
    Sydney, Australia, November 2007.
    
    http://www.sics.se/~adam/dunkels07adaptive.pdf
    
    This is a rewrite of the code that was developed for the paper.
    Reduced uIP buffer size to allow for TCP data over Rime mesh routing protocol
    Added uIP destimation unreachable message, removed defailt XMAC timer definitions (for now), turned profiling off(for now), added process event number configuration, reduced data memory size for the ELF loader
    Added configuration for upcoming shell improvements, removed PROCESS_CONF_FASTPOLL
    Enabled support for CC2420 timestamps
    Turned on energy estimation and profiling by default
    #ifdef around RF_CHANNEL
    enabled inline functions
    * Include msp430def.h for standard defines.
    
    * Remove obsolete LPM_CONF_OFF definition.
    Added X-MAC configuration, reduced ELF loader text memory size
    Added signed 32 bit data type.
    * Bump maximum number of udp sockets to 16.
    
    * Remove unused stuff.
    * More routing and forwarding cache entries.
    Increased RAM for loadable modules
    added cfs xmem size
    Node IDs are stored in external memory and restored on bootup
    ELF loader memory size, CFS RAM memory size
    Added CFS xmem conf
    Added LPM and IRQ configuration to make Tmote Sky port build with the Contiki build system
    * General stuff for different baudrates:
    
        - ubr argument to slip_arch_int
    
        - macros for calculating ubr
    
        - argument -Bbaudrate to tools tunslip and scat
    * Tmote sky has a CC2420_RADIO.
    Changed the Contiki Interface declaration macros from CCI/CLI to CCIF/CLIF because of already existing macros: Both CCI and CLI :-(
    Added defines for declaring functions/data which are part of the CCI (Contiki Core Interface) and CLI (Contiki Loadable Interface). Both defines are empty for all platforms but the upcoming Win32 port.
    Make malloc machine independent by relying on dependent sbrk(2).
    Import of files for the Tmote sky platform.
    Contiki port to the TI EXP5438 MSP430x5438a experimenters board
    Added *experimental* module for sending raw (non-routed) packets from Contiki. The name of the module is likely to change.
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Improved support for the IAR compiler.
    
    io and signal have been moved into contiki include file.
    Contiki port to the TI EXP5438 MSP430x5438a experimenters board
    Updated SPI config for faster SPI, split msp430/clock/spi into separate versions for MSP430/MSP430X
    Initial WiSMote port based on code from Arago Systems.
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    fixed cpu/msp430 for compilation with IAR compiler
    added missing include
    Enable the watchdog for rtimers too. Removed the disabling of the TACTL - it should not be needed, and interferes with the timing behaviour of stable rtimers
    Added function rtimer_arch_now that makes sure that the timer value does not change between readouts to avoid reading while the timer is being updated.
    Turn off timer before updating - needed to avoid bugs in ContikiMAC - not 100% sure why
    Removed safeguards around the update code for the timer; turns out they weren't needed (but instead triggered a bug in MSPsim)
    Turn off Timer A before modifying its control registers to avoid problems when timer is updated frequently
    Remove the read from TAIV - this should not be done for TIMERA0 interrupts (in fact, doing so messes up the other timer a interrupts, like the clock tick...)
    Need to clear the interrupt flag register for Timer A
    bug fix: wake up MSP430 when leaving rtimer interrupt if the rtimer polled a process.
    thanks to Marco Vedovati for finding the bug
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    Moved energest from lib/ to sys/
    removed offset in rtimer_arch
    removed redundant code - configuration of basic clock subsystem in clock and rtimer_arch
    Added energy estimation, embryo for possible future drift configuration
    rtimer_arch_now() now returns the correct value
    Fixed description
    MSP430 real-time rtimer support using timerb1
    Added #include that #defines NULL
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    Added *experimental* module for sending raw (non-routed) packets from Contiki. The name of the module is likely to change.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Contiki port to the TI EXP5438 MSP430x5438a experimenters board
    add dummy node-id.h for econotag
    Node IDs are stored in external memory and restored on bootup
    Node IDs are stored in EEPROM and restored on bootup
    Import of the contiki-2.x development code from the SICS internal CVS server
    Contiki port to the TI EXP5438 MSP430x5438a experimenters board
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Moved the cc2420 driver into a separate dev/cc2420 module
    Updated include paths for the moved files under net/
    Removed old unused profile.h code
    Clean up setting channel and CCA-threshold for CC2420 based motes.
    The CCA-threshold now defaults to -46 which give better simulation
    results and typically also better experimental results.
    This adjustment is also needed due to commit 0a13f99 in mspsim. As
    promised in https://github.com/mspsim/mspsim/pull/18 it broke the
    regression tests.
    Fixed compilation problems on the micaz and exp5438 platforms due to the node-id change
    Cleanup of the node-id.h files. The node-id.h file contains
    declarations of functions for setting and getting a node ID number, a
    functionality that exists on many platforms. Since this functionality
    was not considered part of the Contiki core, each platform defined its
    own node-id.h file. This commit attempts to clean this up by
    collecting the node-id.h into a core/sys/node-id.h file that replaces
    the old node-id.h files from the platform directories.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Improved support for the IAR compiler.
    
    io and signal have been moved into contiki include file.
    Contiki port to the TI EXP5438 MSP430x5438a experimenters board
    * Added f2xxx for two series (for example z1)
    * f1xxx is baseline and always included
    * Cleaned up the names of uart and spi (no x in names)
    * Updated SPI configuration for WiSMote
    Updated SPI config for faster SPI, split msp430/clock/spi into separate versions for MSP430/MSP430X
    leds setup for WiSMote
    Set node_id, disabled watchdog for now
    Initial WiSMote port based on code from Arago Systems.
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed Sky platform for IAR compiler
    Changed the order in which io.h and signal.h is included. Some versions of mspgcc4 seem to have a problem when signal.h is included before io.h.
    support for tinyos style node ids, to simplify testbed experiments
    with automatic node ids
    Restart CC2420 SFD interrupt after DCO calibration only if it is enabled.
    added support for avoiding sleeping in LPM3 when DCO needs to be running - needed for uart DMA
    Hack: reenable cc2420 SFD interrupts after resyncing the DCO. The DCO code currently messes up the SFD interrupt settings.
    no aaaa address if configured for RPL
    made use of the new link-local address api in ds6
    added missing include
    Moved sensors setup to contiki-sky-platform.c and common make rules to Makefile.common for easier reuse in similar platforms
    removed initialization of RPL from platform main
    added rpl support for tmote sky - enabled by default
    added possibility to hard-code 7 bytes of the MAC address - last byte picked from nodeid
    Bugfix: turn on watchdog before starting processes to avoid a process hanging in its startup phase
    removed uip_router
    integration of new uip6 code from Mathilde and Julien - adds routing and improved interface handling
    Added configurable router module
    Replaced old framer (framer_get/framer_set) with new NETSTACK style configuration. Added nullrdc-framer that is a nullrdc with framer support.
    Fixed bootup printf() with 32-bit timer values
    added bootup print of NETSTACK_RDC name
    Fix bootup printf() with 32-bit timer values
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Correctly print out the aaaa: address, if enabled
    Turning of the MAC protocol in the IPv4-over-mesh actually made performance worse due to broadcasts being received multiple times, which interfered with SLIP I/O
    Do not activate the sensors by default: sensors should be activated by the applications that need them
    Disable (debugging-) initialiation of aaaa:: address; add CSMA MAC for IPv6/6lowpan
    Added the CSMA MAC mechanism on top of the default duty cycling
    mechanism X-MAC. The CSMA is configurable with a MAC_CSMA define, just
    like the MAC protocol is configurable with the MAC_DRIVER define.
    Remove the default list of sensors from the main() file to save space - those apps that need them can use them directly in any case
    Added light, sht11, battery sensors; restored light and battery activation since rtimers don't work without them (at present)
    fixed for updated sensors API
    fixed Sky platform for new sensor APIs
    moved rime initialization into rime router so it is easier to switch IPv6 routing module
    Print link-local IPv6 address when booting the node
    Added X-MAC support for IPv6/SICSlowpan nodes, added 802.15.4 default framing to X-MAC
    added init function in MAC driver for easier configuration
    Print out the gateway's IP address more prominently
    When a node is configured as an IP gateway, we switch off the power-saving MAC protocolto improve performance and to avoid problems with the serial communication that X-MACs use of rtimers can cause
    Hack to make DS2411 ID useable as an Ethernet MAC address (remove multicast bit)
    added setup for uip6 with 802.15.4 frames and routing using Rime
    added configuration for panid
    * show radio channel at startup
    * only initialize timesynch when timesynch is enabled
    Changed the name of the 'serial' module to 'serial-line' to signify that the module is about lines of data from the serial port, not individual bytes, and to make sdcc happy
    #include lib/random.h
    Reverted the recent change from random_rand() to rand(). It turned out that
    since libc rand() returns a signed int, there were frequently problems with
    timer values wrapping. By reverting to random_rand(), we can provide a
    random generator that returns an unsigned and the timer problems are solved.
    Seed rand() with the node ID + MAC address
    added DCO/CPU speed re-synch each 30 seconds
    fixed sky platform to use the new uart1_active api to avoid messing up last chars transmitted
    removed compilation warning due to unused is_gateway variable (outside uIP mode)
    added printout of MAC protocol name
    added log_message() implementation
    Moved the network gateway logic to the uip-over-mesh module.
    map rime address to mac address for ipv6
    added initialization for uip6
    fixed battery sensor for sky platform
    changed sleep to go into LPM3
    removed redundant sensor initialization, added comment
    Moved initialization of the SHT11 until after other initialization: this seems to fix a bug where the SHT11 temperature and humidity values started varying wildly.
    Changed order of initialization to make light sensors work again: a previous change to irq.c seems to have conflicted with light sensor initialization
    Changed name of the simple-cc2420 module to cc2420: changed all function names and variable names from simple_cc2420_* to cc2420_*.
    Changed filename of the CC2420 driver from simple-cc2420 to cc2420.
    Moved ctimer_init() so that MAC protocols can use ctimers in their initialization code
    Change order of initialization so that Rime is initialized before uIP-over-Rime. Send out a new gateway command if a spurious (erroneous) gateway command is received. (Note for the future: this will cause a ping-pong problem with two correct gateways in the network; need to come up with a better solution for this.)
    Detect if node is attached to a SLIP line to set node to become the network's gateway
    Initialize serial line with 115200 bps for SLIP
    Added code for routing IP packets over low-power radios using the Rime mesh module
    Updated for the new simple_cc2420 API
    Fixed buggy build
    Rewrote the timesynch code to use the Rime sniffer interface instead of the kludge of running timesynch as a MAC layer
    Moving timesynch.[ch] from sys/ to core/net/rime as they have more to do with Rime than with the kernel
    Added initalization of the serial library. Changed LPM3 to LPM2 since the current serial driver does not work with LPM3 yet (we need to add start edge detection interrupt support to fix that).
    Initialize Rime address from hardware MAC address if no node ID has been configured. Be more explicit on how Rime address is assigned from node ID. Set time synch authority level from Rime address rather than node ID. Fix bug that put CPU in LPM2 instead of LPM3.
    Added initialization of the time synchronization module
    Removed inclusion of unused file cxmac.h
    Moved energy estimation initialization before starting processes so that processes may turn things on and off without messing up the energy estimates
    changed to show Contiki version, node id, and autostarted processes at startup
    Added watchdog support
    Added better boot-up behaviour of the LEDs - they can now be used to determine where in the boot sequence the node hangs (if it hangs)
    Compile profiling support only if PROFILE_CONF_ON is defined
    Added profiling support, made rime/mac initialization nicer
    Set channel to RF_CHANNEL after simple_cc2420_init.
    Otherwise the init function would reset the channel to 11.
    Added initialization of MAC and Rime
    Added sht11, energy estimation, xmac, diabled uIP (for now)
    Changed Contiki File System (cfs) from a service to a plain library.
    
    This change means that one needs to select _ONE_ cfs implementation at Contiki library link time. But this doesn't appear to be an issue as all platforms have their "favorite" implementation anyway.
    Added initialization of rtimers
    Set Rime address on boot up, activate button sensor
    restore of node id + changed to use cfs xmem (external flash)
    Removed non-functional cfs-xmem, replaced with cfs-ram
    Added IP/SLIP support
    Added CFS xmem
    Files for incorporating the Tmote Sky port into the Contiki build system
    Contiki port to the TI EXP5438 MSP430x5438a experimenters board
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    llsec: Added a layer in between NETSTACK_MAC and NETSTACK_NETWORK for implementing link layer security
    Added flags to enable 20-bit support from msp430-gcc 4.7.x
    Add the explicit list of modules, since we cannot do auto-dependency management of them
    Add a sensible set of modules for the exp5438 platform
    Added mspgcc 4.7.x flags
    Makefiles: Allow setting UIP_CONF_IPV6=0 to work as expected.
    
    Setting UIP_CONF_IPV6 to zero from the make build command line is
    something that seems like it should ensure that IPv6 is disabled, but in
    fact it actually *enables* IPv6. This seems counter intuitive, so this
    patch changes the behavior of the makefiles to handle this case
    properly.
    Made the stack and heap size configurable when using the IAR compiler on the MSP430 platforms
    Added support for mspgcc 4.6+ that no longer supports generic MCU identifiers such as msp430x1611
    Improved support for the IAR compiler.
    
    io and signal have been moved into contiki include file.
    Contiki port to the TI EXP5438 MSP430x5438a experimenters board
    Turn off the LCD by default as it is somewhat flaky
    Contiki port to the TI EXP5438 MSP430x5438a experimenters board
    removed obsolete leds_[color]() functions, replaced by leds_{on,off}()
    allow LEDS_[COLOR] to be configured by platform-conf
    Minor code style fixes
    added energest on all parts of leds API and some cleanup
    Moved energest.{c,h} from core/lib to core/sys: power profiling is a system mechanism, not a library
    Experimental energy estimation code
    fixed leds invert
    Made LEDS not count
    Import of the contiki-2.x development code from the SICS internal CVS server
    Contiki port to the TI EXP5438 MSP430x5438a experimenters board
    Removed erroneous character from first line of file.
    Contiki port to the TI EXP5438 MSP430x5438a experimenters board
    A quick and dirty service registry daemon hack. The servreg-hack
    allows a program to register an 8-bit service ID that gets
    disseminated to the entire network, as long as a servreg-hack daemon
    is running on all neighbors. Other nodes can look up the service ID to
    figure out what nodes in the network offer this service.
    
    This is officially labeled as a "hack" so that we don't get too comfy
    with it; this hack is not the future of service discovery and
    advertisement in Contiki.
    Send to node 1.0 instead of 41.41, to make the example work better in Cooja.
    fixed compiler warning
    Updated the Rime channel numbers so that all examples can be run in the same network without channel clashes
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Changed the 'ibc' and 'uc' Rime modules into the more descriptive names 'broadcast' and 'unicast'
    Changed names of the Rime examples from test-* to example-* and added examples for ruc and uc
    Static should come first because it's a storage class.
    Added exithandlers so that the examples can be run as loadable (and unloadble) modules
    Message size should include ending zero byte
    Moved all Rime examples into examples/rime directory
    API change for Rime: *_setup() renamed to *_open()
    Simple Rime test code
    Renamed Rime output function
    A Rime driver for the simple-cc2420 driver
    Import of the contiki-2.x development code from the SICS internal CVS server
    Contiki port to the TI EXP5438 MSP430x5438a experimenters board
    Contiki port to the TI EXP5438 MSP430x5438a experimenters board
    Moved putchar into separate file to make it easier to override its implementation
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Improved support for the IAR compiler.
    
    io and signal have been moved into contiki include file.
    Contiki port to the TI EXP5438 MSP430x5438a experimenters board
    Initial WiSMote port based on code from Arago Systems.
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    Only include code for stack printouts when needed
    By default, don't print stack on reboot, since there are cases where this may hang the CPU (when the CPU is in LPM when the watchdog triggers). Must fix the code to set the UART and CU into correct modes before enabling stack printout on reboot.
    Made stack printout on reboot configurable.
    Added the ability to turn on watchdog multiple times - the watchdog
    registers are touched only when the watchdog goes from off to on state
    to avoid retriggering the watchdog when it shouldn't.
    added some files for MSP430X I/O
    Print out stack pointer when rebooting node
    Bugfix
    Print out a stack trace when a node reboots because of the watchdog
    Count the number of times the watchdog has been stopped to avoid starting it when someone else has stopped it
    Update the periodic watchdog only if it is not stopped
    Added a reboot function
    Fixed watchdog support for the MSP430. It now works as intended
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved the cc2420 driver into a separate dev/cc2420 module
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Improved support for the IAR compiler.
    
    io and signal have been moved into contiki include file.
    Contiki port to the TI EXP5438 MSP430x5438a experimenters board
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed Sky platform for IAR compiler
    Made configuration of CC2420 SFD timestamps easier
    fixed naming of SPI and CC2420 related code
    Made SFD timestamps configurable via external definition
    Bugfix: changed #ifdef to #if, otherwise the SFD code would be enabled anyway
    Disable SFD interrupt by default
    Broke out the CC2420 SFD interrupt into a separate file to allow easier overloading with project-specific files
    fixed variable names
    added initial set-up code SFD capture interrupts usable for exact packet timestamping
    Changed name of the simple-cc2420 module to cc2420: changed all function names and variable names from simple_cc2420_* to cc2420_*.
    Changed filename of the CC2420 driver from simple-cc2420 to cc2420.
    Architecture dependent code for the CC2420 driver
    Added energy estimation
    Use LPM4_EXIT to return from sleep on msp430.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Improved support for the IAR compiler.
    
    io and signal have been moved into contiki include file.
    Contiki port to the TI EXP5438 MSP430x5438a experimenters board
    * Added f2xxx for two series (for example z1)
    * f1xxx is baseline and always included
    * Cleaned up the names of uart and spi (no x in names)
    * Updated SPI configuration for WiSMote
    Updated SPI config for faster SPI, split msp430/clock/spi into separate versions for MSP430/MSP430X
    Initial WiSMote port based on code from Arago Systems.
    Added native-border-router and slip-radio
    added uip-driver (for both ivp4 and ipv6), setting WITH_UIP* compiler flags in Makefile
    Updated to match the new netstack api
    Added a new module called "framer" that creates MAC level frames to
    the packetbuf from packet attributes. Two framer modules are included,
    one that creates 802.15.4 frame headers, and one that creates a
    minimal "nullmac"-style header that only contains the link-local
    addresses.
    added multihop routing support through replaceable modules. first implementation
    uses rime's route discovery by translating between ipv6 and rime addresses.
    added experimental checkpointing functionality:
    currently only implemented on the sky platform
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Turn off the LCD by default as it is somewhat flaky
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Improved support for the IAR compiler.
    
    io and signal have been moved into contiki include file.
    Contiki port to the TI EXP5438 MSP430x5438a experimenters board
    Added resource definition for button and removed obsolete compiler setup (compiler setup is now handled by cpu/msp430/msp430def.h)
    Moved configuration of memcpy workaround to cpu (only needed for an older version of mspgcc)
    io, signal and IAR-GCC checks have been moved into contiki include file
    Definition of Z1 Starter Platform in contiki/platforms + LEDs + Potentiometer
    added Z1 platform
    split hw config into platform-conf and adapted to new SPI and CC2420 naming
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Improved support for the IAR compiler.
    
    io and signal have been moved into contiki include file.
    Contiki port to the TI EXP5438 MSP430x5438a experimenters board
    * Added f2xxx for two series (for example z1)
    * f1xxx is baseline and always included
    * Cleaned up the names of uart and spi (no x in names)
    * Updated SPI configuration for WiSMote
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    added some files for MSP430X I/O
    removed obsolete comments
    reverted previous patch: appears to create problems on hardware
    Ensure that the UART port is available before writing
    Added support for CPU speed 2.4576MHz and configuration to enable/disable interrupt driven TX
    Must check error flag before reading. Removed leds debug.
    Moved putchar into separate file to make it easier to override its implementation
    uart correction values for 3.9Mhz (default sky freq.)
    Initialize the transmit ringbuffer before enabling TX interrupt
    Always prod the watchdog on output to avoid spurious resets during long serial outputs
    Added optional interrupt-based transmission, based on the ringbuf library
    Minor code style fixes
    added handling function for checkin if uart is transmitting or receiving - patch by Klaus Stengel
    changed usart code to handle LPM3
    moved energest from lib/ to sys/
    Made SLIP code coexist with ordinary serial code. If WITH_UIP=1, the SLIP code is used instead.
    Changed the return value of the inpt handler function to int so that it can wake up the CPU from LPM
    Added support for configurable callbacks of uart1 input.
    Added energy estimation
    UART1 driver
    * General stuff for different baudrates:
    
        - ubr argument to slip_arch_int
    
        - macros for calculating ubr
    
        - argument -Bbaudrate to tools tunslip and scat
    * Bump speed over serial to 115200 (Tmote sky only).
    Use LPM4_EXIT to return from sleep on msp430.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Improved support for the IAR compiler.
    
    io and signal have been moved into contiki include file.
    Contiki port to the TI EXP5438 MSP430x5438a experimenters board
    Initial WiSMote port based on code from Arago Systems.
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    fixed cpu/msp430 for compilation with IAR compiler
    Fixed a bug found by Moritz Straube - writing to the internal flash would lock up contikimac. The problem was due to the IFG1 being reset to zero before writing to flash.
    Updated to use the watchdog API
    Import of the contiki-2.x development code from the SICS internal CVS server
    Correct several doxygen tags (\file)
    Removing trailing whitespaces
    Fix naming issues and includes in uip-ds6-nbr.h
    Port apps, examples, platforms and tools so they use the new neighbor and route API.
    avr-ravenusb/cdc_task: Fix compile issues.
    
    A lot more changes are in the pipeline, but compiling is a good start.
    Changes in RPL implementation :
    - Structural modification of RPL data storage.
    - Support multiple gateways (multiple DODAG-ID with a unique InstanceID)
    - Use Lollipop counters
    - Add leaf-only configuration option for RPL
    Bugfix :
    - Correctly send "Grounded" flag in DIO
    Add sneezer mode and tx power change
    Add configurable auto cca threshold and implement driver cca call.
    Show smallest rssi in jackdaw menu.
    Add stack monitor. Change internal uip address to 200 for RPL.
    Add rf230_listen_channel routine to force RX_ON state for sniffing and to read rssi for energy scan.
    Hardware/software radio HAL patch from Roger Larsson.
    Use CHANNEL_802_15_4 define for RF channel on all AVR platforms, default 26.
    Remove hopefully unnecessary interrupt disable wrapper on eeprom reads and writes.
    Get rssi correctly in either rx mode, clean up radio driver debugging
    RSSI read fix (use ED register in AACK mode), add reduced power configuration for miniature mesh testing.
    Add menu option to temporarily disable RS232 debug output for higher 6lowpan throughput.
    Functional rpl with RNDIS/Ubuntu (tested on Raven single hops)
    Fix printf_P error
    Add RPL neighbors and routes printout to Jackdaw menu
    Fix error when RS232 not enabled
    Allow simultaneous use of  RS232 and USB serial ports
    Fix compiler warnings
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    Report operating channel with either radio driver
    No sniffer yet for RF230BB
    Remove compiler warnings
    * Channel is saved in EEPROM
    * Allow serial port to work with more term emulators
    *Added ability to change channel Jackdaw (raven USB) operates on over serial menu
    Addition of USB files
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    Lots of changes / commits! This allows ravenusbstick example to build at least.
    Contiki port for the Atmel AVR Raven board
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Moved mandatory low-level initialization into main file, moved all uIP and network initialization into int_net()
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Fix naming issues and includes in uip-ds6-nbr.h
    Port apps, examples, platforms and tools so they use the new neighbor and route API.
    httpd-simple-avr: 'isused' seems to not be used anymore.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    PROGMEM changes needed for newer avr-gcc compiler
    Add status page link, show correct rssi, fix indexing off array in  ipv4 builds
    Hardware/software radio HAL patch from Roger Larsson.
    Use CHANNEL_802_15_4 define for RF channel on all AVR platforms, default 26.
    Remove hopefully unnecessary interrupt disable wrapper on eeprom reads and writes.
    Fixes to allow ipv4 (hello world) builds
    Enable RPL neighbor webserver page
    Allow non-ipv6 build (hello world)
    Fix compiler warnings
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Add simple webserver for RPL status
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    packetbuf: Use packetbuf_holds_broadcast() all-over
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Updated include paths for the moved files under net/
    Add sneezer mode and tx power change
    Minor format and comment changes
    Add status page link, show correct rssi, fix indexing off array in  ipv4 builds
    Refuse to play ping-pong with host interface
    Add menu option to temporarily disable RS232 debug output for higher 6lowpan throughput.
    Functional rpl with RNDIS/Ubuntu (tested on Raven single hops)
    Allow non-ipv6 build (hello world)
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    Add experimental RPL code
    Change RF channel to 26 for econotag compatibility
    Use siimple ethernet  address translation for RF230BB by default.
    That gets pings and webserver working again for Vista and W7.
    Hopefully it won't break something that already works...
    Update jackdaw to new radio driver interface
    Remove debug print
    Add optional  RF230BB radio driver
    Remove compiler warnings
    -Fix that can cause USB stick to freeze up
    -Add EEM Support
    New USB IPv6 address translation, works better with bridges. Enabled by a #define at start of sicslow_ethernet.c
    *** empty log message ***
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    *Support for Atmel 'Router Under Mac' (RUM) in Jackdaw
    Fixed serious bug which causes RNDIS task to end when non-data message are sent via RNDIS interface
    *** empty log message ***
    Lots of changes / commits! This allows ravenusbstick example to build at least.
    Cleanup UIP_CONF_IPV6_RPL configuration
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    ContikiMAC: Default to contikimac_framer when using Rime over ContikiMAC
    Changed the name of the rimeaddr module to linkaddr
    Moved the individual MODULE definitions from the top-level Makefile.include into the individual platforms' Makefiles
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Fix naming issues and includes in uip-ds6-nbr.h
    Removed now unused per-module neighbor table size configs. Use NEIGHBOR_CONF_MAX_NEIGHBORS instead.
    core/lib/settings: Generalized Settings Manager to work on any platform
    
    This commit moves the Settings Manager from the AVR codebase
    into the Contiki core library. Any platform that implements
    the Contiki EEPROM API can now use the Settings Manager's
    key-value store for storing their persistent configuration info.
    
    The Settings Manager is a EEPROM-based key-value store. Keys
    are 16-bit integers and values may be up to 16,383 bytes long.
    It is intended to be used to store configuration-related information,
    like network settings, radio channels, etc.
    
     * Robust data format which requires no initialization.
     * Supports multiple values with the same key.
     * Data can be appended without erasing EEPROM.
     * Max size of settings data can be easily increased in the future,
       as long as it doesn't overlap with application data.
    
    The format was inspired by the [OLPC manufacturing data format][].
    
    Since the beginning of EEPROM often contains application-specific
    information, the best place to store settings is at the end of EEPROM
    (the "top"). Because we are starting at the end of EEPROM, it makes
    sense to grow the list of key-value pairs downward, toward the start of
    EEPROM.
    
    Each key-value pair is stored in memory in the following format:
    
    Order    | Size     | Name         | Description
    --------:|---------:|--------------|-------------------------------
           0 |        2 | `key`        | 16-bit key
          -2 |        1 | `size_check` | One's-complement of next byte
          -3 |   1 or 2 | `size`       | The size of `value`, in bytes
    -4 or -5 | variable | `value`      | Value associated with `key`
    
    The end of the key-value pairs is denoted by the first invalid entry.
    An invalid entry has any of the following attributes:
    
     * The `size_check` byte doesn't match the one's compliment of the
       `size` byte (or `size_low` byte).
     * The key has a value of 0x0000.
    
    [OLPC manufacturing data format]: http://wiki.laptop.org/go/Manufacturing_data
    Changed the name of the IPv6 number of route entries configuration from UIP_CONF_DS6_ROUTE_NBU to UIP_CONF_MAX_ROUTES.
    Cleaned up RF230BB, and refactored FRAME_RETRIES and CSMA_RETRIES
    #defines.
    Add clock_delay_us and clock_set_seconds to clock.h. Modify clock_wait to use clock_time_t.
    Remove the troublesome avr/dev/delay.* files.
    Add PLATFORM_NAME and combine the confusing *_REVISION defines into a single PLATFORM_TYPE
    Eliminated RPL_CONF_ADJUST_LLH_LEN correction by using uip_l3_icmp_hdr_len instead of uip_l2_l3_icmp_hdr_len.
    Several bugfixes
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    Correct typo
    Let RPL examples enable platform RPL
    Add changes needed for contikimac
    Add project-conf.h to platform contiki-conf.h files.
    Fix jackdaw comments.
    Temporary fix for RNDIS enumeration before the mac address is set up.
    (Turn on RS232 debug to bypass the enumeration wait and let the mac address get set first)
    Add sneezer mode and tx power change
    Add configurable auto cca threshold and implement driver cca call.
    Show smallest rssi in jackdaw menu.
    Add stack monitor. Change internal uip address to 200 for RPL.
    Fix configuration for RPL build (no  packet queuing, default no TCP)
    Add working cx-max configuration values.
    Refactor, tune, add SICSLOWPAN_CONF_ACK_ALL defines for testing radio acks
    Refactor contiki-conf files, remove obsolete defines.
    Hardware/software radio HAL patch from Roger Larsson.
    Use CHANNEL_802_15_4 define for RF channel on all AVR platforms, default 26.
    Remove hopefully unnecessary interrupt disable wrapper on eeprom reads and writes.
    Fixes to allow ipv4 (hello world) builds
    Enable RPL neighbor webserver page
    Get rssi correctly in either rx mode, clean up radio driver debugging
    RSSI read fix (use ED register in AACK mode), add reduced power configuration for miniature mesh testing.
    Add menu option to temporarily disable RS232 debug output for higher 6lowpan throughput.
    Functional rpl with RNDIS/Ubuntu (tested on Raven single hops)
    Allow non-ipv6 build (hello world)
    Fix Windows XP RNDIS+CDC serial port enumeration
    Allow simultaneous use of  RS232 and USB serial ports
    Fix compiler warnings
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    Add rpl configuration and webserver options.
    Add experimental RPL code
    Change RF channel to 26 for econotag compatibility
    Add optional RS232 debugging
    Update for NETSTACK_CONF_FRAMER
    Change back to SICSLOWPAN_COMPRESSION_HC06 from  SICSLOWPAN_COMPRESSION_HC01
    Clean up, functional webserver for  further testing of  low power protocols
    Use new HC06
    Update jackdaw to new radio driver interface
    add experimental cxmac code
    Make sicslowmac the default!
    Add optional  RF230BB radio driver
    QUEUEBUF fragmentation defines
    *Support for Atmel 'Router Under Mac' (RUM) in Jackdaw
    * Addition of Meshnetics Zigbig platform by Frederic Thepaut <frederic.thepaut@inooi.com>
    
    * Changed default RavenUSB timeout to 3 seconds... seems to give most reliable transmissions
    Changed timeout to 1 second on fragmentation
    Contiki port for the Atmel AVR Raven board
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Changed the Contiki Interface declaration macros from CCI/CLI to CCIF/CLIF because of already existing macros: Both CCI and CLI :-(
    Added defines for declaring functions/data which are part of the CCI (Contiki Core Interface) and CLI (Contiki Loadable Interface). Both defines are empty for all platforms but the upcoming Win32 port.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Contiki port for the Atmel AVR Raven board
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    Add optional  RF230BB radio driver
    Lots of changes / commits! This allows ravenusbstick example to build at least.
    Contiki port for the Atmel AVR Raven board
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Moved mandatory low-level initialization into main file, moved all uIP and network initialization into int_net()
    Import of the contiki-2.x development code from the SICS internal CVS server
    Save 256 bytes of RAM by excluding floating point routine
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    Addition of USB files
    Lots of changes / commits! This allows ravenusbstick example to build at least.
    Moved unused malloc code to backyard directory
    Make malloc machine independent by relying on dependent sbrk(2).
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    llsec: Added a layer in between NETSTACK_MAC and NETSTACK_NETWORK for implementing link layer security
    Changed the name of the rimeaddr module to linkaddr
    Handle the CONTIKI_NO_NET case so that the ravenusbstick example builds
    Moved the individual MODULE definitions from the top-level Makefile.include into the individual platforms' Makefiles
    Define MODULES for the avr-raven and the avr-ravenusb platforms
    Use no metric container when having MRHOF with ETX, as specified in RFC6719. Renamed rpl-of-etx to rpl-mrhof.
    avr/bootloader.c: Now compatible with bootloaders which always run first.
    
    The boot loader now knows when to go into bootstrap mode by
    looking for a specific EEPROM value. Also updated code style
    to match Contiki code style guidelines.
    Force ipv6 when building with fakeuip
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    Add internal webserver option
    Add experimental RPL code
    Change RF channel to 26 for econotag compatibility
    Add explicit queuebuf and packetbuf to build
    added inclusion of radio Makefile for the raven platforms
    *** empty log message ***
    Lots of changes / commits! This allows ravenusbstick example to build at least.
    Contiki port for the Atmel AVR Raven board
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Changed the name of the rimeaddr module to linkaddr
    Fix naming issues and includes in uip-ds6-nbr.h
    Port apps, examples, platforms and tools so they use the new neighbor and route API.
    PROGMEM changes needed for newer avr-gcc compiler
    Fix typos and file endings
    Get random seed from noisy ADC conversion at startup.
    Add template for AUTOSTART_PROCESS
    Changes in RPL implementation :
    - Structural modification of RPL data storage.
    - Support multiple gateways (multiple DODAG-ID with a unique InstanceID)
    - Use Lollipop counters
    - Add leaf-only configuration option for RPL
    Bugfix :
    - Correctly send "Grounded" flag in DIO
    Refactor with settings manager and better usb enumeration for debug prints
    Add stack monitor. Change internal uip address to 200 for RPL.
    Give jackdaw fe80::0 address  and number webservers from fe80::1
    Hardware/software radio HAL patch from Roger Larsson.
    Use CHANNEL_802_15_4 define for RF channel on all AVR platforms, default 26.
    Remove hopefully unnecessary interrupt disable wrapper on eeprom reads and writes.
    Enable RPL neighbor webserver page
    Get rssi correctly in either rx mode, clean up radio driver debugging
    RSSI read fix (use ED register in AACK mode), add reduced power configuration for miniature mesh testing.
    Add menu option to temporarily disable RS232 debug output for higher 6lowpan throughput.
    Functional rpl with RNDIS/Ubuntu (tested on Raven single hops)
    Allow non-ipv6 build (hello world)
    Allow simultaneous use of  RS232 and USB serial ports
    Fix compiler warnings
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    Add rpl webserver option
    Add RPL border router process
    Add experimental RPL code
    Change RF channel to 26 for econotag compatibility
    update to uip-ds6.c
    Add optional RS232 debugging
    Update for NETSTACK_CONF_FRAMER
    Clean up, functional webserver for  further testing of  low power protocols
    Update jackdaw to new radio driver interface
    add experimental cxmac code
    Add optional  RF230BB radio driver
    Add static coffee file system to webserver
    Lots of changes / commits! This allows ravenusbstick example to build at least.
    Contiki port for the Atmel AVR Raven board
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add sneezer mode and tx power change
    Add menu option to temporarily disable RS232 debug output for higher 6lowpan throughput.
    Functional rpl with RNDIS/Ubuntu (tested on Raven single hops)
    Add optional  RF230BB radio driver
    Lots of changes / commits! This allows ravenusbstick example to build at least.
    Moved unused malloc code to backyard directory
    Make malloc machine independent by relying on dependent sbrk(2).
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    Lots of changes / commits! This allows ravenusbstick example to build at least.
    Contiki port for the Atmel AVR Raven board
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the node-id.h files. The node-id.h file contains
    declarations of functions for setting and getting a node ID number, a
    functionality that exists on many platforms. Since this functionality
    was not considered part of the Contiki core, each platform defined its
    own node-id.h file. This commit attempts to clean this up by
    collecting the node-id.h into a core/sys/node-id.h file that replaces
    the old node-id.h files from the platform directories.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Initial WiSMote port based on code from Arago Systems.
    Node IDs are stored in external memory and restored on bootup
    Node IDs are stored in EEPROM and restored on bootup
    Import of the contiki-2.x development code from the SICS internal CVS server
    leds setup for WiSMote
    Added Sentilla USB platform. This platform is similar to the Sky platform but without the sensors and with 2 leds.
    Added Sentilla Jcreate platform. This platform is similar to the Sky platform but with other sensors and 8 leds.
    Moved ninimal-ppp into backyard as it depends on the uIP ppp support.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Moved the cc2520 driver into its own dev/cc2520 module
    Updated include paths for the moved files under net/
    Removed old unused profile.h code
    Cleanup of the node-id.h files. The node-id.h file contains
    declarations of functions for setting and getting a node ID number, a
    functionality that exists on many platforms. Since this functionality
    was not considered part of the Contiki core, each platform defined its
    own node-id.h file. This commit attempts to clean this up by
    collecting the node-id.h into a core/sys/node-id.h file that replaces
    the old node-id.h files from the platform directories.
    Added delay at startup to let things stabilize before writing to the uart
    Allow node address to be set by COOJA when emulating.
    * Added f2xxx for two series (for example z1)
    * f1xxx is baseline and always included
    * Cleaned up the names of uart and spi (no x in names)
    * Updated SPI configuration for WiSMote
    Updated SPI config for faster SPI, split msp430/clock/spi into separate versions for MSP430/MSP430X
    leds setup for WiSMote
    Set node_id, disabled watchdog for now
    Initial WiSMote port based on code from Arago Systems.
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed Sky platform for IAR compiler
    Changed the order in which io.h and signal.h is included. Some versions of mspgcc4 seem to have a problem when signal.h is included before io.h.
    support for tinyos style node ids, to simplify testbed experiments
    with automatic node ids
    Restart CC2420 SFD interrupt after DCO calibration only if it is enabled.
    added support for avoiding sleeping in LPM3 when DCO needs to be running - needed for uart DMA
    Hack: reenable cc2420 SFD interrupts after resyncing the DCO. The DCO code currently messes up the SFD interrupt settings.
    no aaaa address if configured for RPL
    made use of the new link-local address api in ds6
    added missing include
    Moved sensors setup to contiki-sky-platform.c and common make rules to Makefile.common for easier reuse in similar platforms
    removed initialization of RPL from platform main
    added rpl support for tmote sky - enabled by default
    added possibility to hard-code 7 bytes of the MAC address - last byte picked from nodeid
    Bugfix: turn on watchdog before starting processes to avoid a process hanging in its startup phase
    removed uip_router
    integration of new uip6 code from Mathilde and Julien - adds routing and improved interface handling
    Added configurable router module
    Replaced old framer (framer_get/framer_set) with new NETSTACK style configuration. Added nullrdc-framer that is a nullrdc with framer support.
    Fixed bootup printf() with 32-bit timer values
    added bootup print of NETSTACK_RDC name
    Fix bootup printf() with 32-bit timer values
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Correctly print out the aaaa: address, if enabled
    Turning of the MAC protocol in the IPv4-over-mesh actually made performance worse due to broadcasts being received multiple times, which interfered with SLIP I/O
    Do not activate the sensors by default: sensors should be activated by the applications that need them
    Disable (debugging-) initialiation of aaaa:: address; add CSMA MAC for IPv6/6lowpan
    Added the CSMA MAC mechanism on top of the default duty cycling
    mechanism X-MAC. The CSMA is configurable with a MAC_CSMA define, just
    like the MAC protocol is configurable with the MAC_DRIVER define.
    Remove the default list of sensors from the main() file to save space - those apps that need them can use them directly in any case
    Added light, sht11, battery sensors; restored light and battery activation since rtimers don't work without them (at present)
    fixed for updated sensors API
    fixed Sky platform for new sensor APIs
    moved rime initialization into rime router so it is easier to switch IPv6 routing module
    Print link-local IPv6 address when booting the node
    Added X-MAC support for IPv6/SICSlowpan nodes, added 802.15.4 default framing to X-MAC
    added init function in MAC driver for easier configuration
    Print out the gateway's IP address more prominently
    When a node is configured as an IP gateway, we switch off the power-saving MAC protocolto improve performance and to avoid problems with the serial communication that X-MACs use of rtimers can cause
    Hack to make DS2411 ID useable as an Ethernet MAC address (remove multicast bit)
    added setup for uip6 with 802.15.4 frames and routing using Rime
    added configuration for panid
    * show radio channel at startup
    * only initialize timesynch when timesynch is enabled
    Changed the name of the 'serial' module to 'serial-line' to signify that the module is about lines of data from the serial port, not individual bytes, and to make sdcc happy
    #include lib/random.h
    Reverted the recent change from random_rand() to rand(). It turned out that
    since libc rand() returns a signed int, there were frequently problems with
    timer values wrapping. By reverting to random_rand(), we can provide a
    random generator that returns an unsigned and the timer problems are solved.
    Seed rand() with the node ID + MAC address
    added DCO/CPU speed re-synch each 30 seconds
    fixed sky platform to use the new uart1_active api to avoid messing up last chars transmitted
    removed compilation warning due to unused is_gateway variable (outside uIP mode)
    added printout of MAC protocol name
    added log_message() implementation
    Moved the network gateway logic to the uip-over-mesh module.
    map rime address to mac address for ipv6
    added initialization for uip6
    fixed battery sensor for sky platform
    changed sleep to go into LPM3
    removed redundant sensor initialization, added comment
    Moved initialization of the SHT11 until after other initialization: this seems to fix a bug where the SHT11 temperature and humidity values started varying wildly.
    Changed order of initialization to make light sensors work again: a previous change to irq.c seems to have conflicted with light sensor initialization
    Changed name of the simple-cc2420 module to cc2420: changed all function names and variable names from simple_cc2420_* to cc2420_*.
    Changed filename of the CC2420 driver from simple-cc2420 to cc2420.
    Moved ctimer_init() so that MAC protocols can use ctimers in their initialization code
    Change order of initialization so that Rime is initialized before uIP-over-Rime. Send out a new gateway command if a spurious (erroneous) gateway command is received. (Note for the future: this will cause a ping-pong problem with two correct gateways in the network; need to come up with a better solution for this.)
    Detect if node is attached to a SLIP line to set node to become the network's gateway
    Initialize serial line with 115200 bps for SLIP
    Added code for routing IP packets over low-power radios using the Rime mesh module
    Updated for the new simple_cc2420 API
    Fixed buggy build
    Rewrote the timesynch code to use the Rime sniffer interface instead of the kludge of running timesynch as a MAC layer
    Moving timesynch.[ch] from sys/ to core/net/rime as they have more to do with Rime than with the kernel
    Added initalization of the serial library. Changed LPM3 to LPM2 since the current serial driver does not work with LPM3 yet (we need to add start edge detection interrupt support to fix that).
    Initialize Rime address from hardware MAC address if no node ID has been configured. Be more explicit on how Rime address is assigned from node ID. Set time synch authority level from Rime address rather than node ID. Fix bug that put CPU in LPM2 instead of LPM3.
    Added initialization of the time synchronization module
    Removed inclusion of unused file cxmac.h
    Moved energy estimation initialization before starting processes so that processes may turn things on and off without messing up the energy estimates
    changed to show Contiki version, node id, and autostarted processes at startup
    Added watchdog support
    Added better boot-up behaviour of the LEDs - they can now be used to determine where in the boot sequence the node hangs (if it hangs)
    Compile profiling support only if PROFILE_CONF_ON is defined
    Added profiling support, made rime/mac initialization nicer
    Set channel to RF_CHANNEL after simple_cc2420_init.
    Otherwise the init function would reset the channel to 11.
    Added initialization of MAC and Rime
    Added sht11, energy estimation, xmac, diabled uIP (for now)
    Changed Contiki File System (cfs) from a service to a plain library.
    
    This change means that one needs to select _ONE_ cfs implementation at Contiki library link time. But this doesn't appear to be an issue as all platforms have their "favorite" implementation anyway.
    Added initialization of rtimers
    Set Rime address on boot up, activate button sensor
    restore of node id + changed to use cfs xmem (external flash)
    Removed non-functional cfs-xmem, replaced with cfs-ram
    Added IP/SLIP support
    Added CFS xmem
    Files for incorporating the Tmote Sky port into the Contiki build system
    Initial WiSMote port based on code from Arago Systems.
    Added bursts support in CSMA/ContikiMAC, and CFS-swapping in
    queuebuf. Exemplified in examples/udp-stream.
    Added a function for setting the I/O semantics on a Coffee file descriptor. Changed the configuration parameters slightly and updated the platform definitions to reflect this change.
    Removed header inclusion
    Removed watchdog calls from Coffee
    Added a macro for portable watchdog calls.
    make watchdog management slightly more abstract to simplify porting
    Removed deprecated dir cache macro.
    removed obsolete offset type definitions.
    Made the use of micro logs configurable to make file modifications
    more efficient on storage types that support inline updates.
    
    The sky platform uses logs, and the native platform uses no logs.
    A long refactoring session yielded the following.
    
    Technical changes:
    
    * Factored out file specific information from the file descriptor
      structure into a new file structure.
    
      - Useful file metadata can be stored after the file is closed.
      - File descriptors become much smaller.
      - Significantly reduces the need to scan for the file end.
    
    * Use correct types in all function signatures.
    * Removed the directory cache.
    
    Results:
    
    * Enormous speed increase when opening cached files (10x-20x.)
    * Multiple fd:s pointing to the same file have the correct semantics.
    * About 100 bytes smaller ROM size.
    * Slightly smaller static RAM size.
    reduced default sizes
    use abstract types for offsets and pages so that we can easily port it to
    very large or small memories.
    moved platform independent definitions
    moved platform independent code to the right place
    Configuration for the Sky platform.
    Node IDs are stored in external memory and restored on bootup
    Node IDs are stored in EEPROM and restored on bootup
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup UIP_CONF_IPV6_RPL configuration
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    ContikiMAC: Create and parse ContikiMAC header in special framer; Expanded framer interface
    to allow for creating and securing frames in advance; Create and secure frames in advance when sending bursts; Do neither recreate nor resecure frames that come from phase
    Changed the name of the rimeaddr module to linkaddr
    Fix naming issues and includes in uip-ds6-nbr.h
    Removed now unused per-module neighbor table size configs. Use NEIGHBOR_CONF_MAX_NEIGHBORS instead.
    Changed the name of the IPv6 number of route entries configuration from UIP_CONF_DS6_ROUTE_NBU to UIP_CONF_MAX_ROUTES.
    enabled nullrdc autoack support
    Initial WiSMote port based on code from Arago Systems.
    Move compower configuration out of the non-IPv6 conditional clause.
    Made the sky and z1 platform handling of PROJECT_CONF_H the same as the other platforms: the makefile should define PROJECT_CONF_H to be the name of the header file to include. This header file should #undef everything it #defines, as it is included after all the other configuration options in contiki-conf.h
    Be a little more conservative in terms of what headers not to compress
    Use the SICSLOWPAN_CONF_COMPRESSION_THRESHOLD to avoid compressing IPv6 packets smaller than 60 bytes. This allows us to use ContikiMAC without its header, making it 802.15.4 compliant again.
    Made the platform config file configurable.
    removed modif. to sky files
    Made energest configuration configurable
    Modified contiki-conf.h and added sensys-scanner.
    Disable timesynch by default - it is not well-tested enough yet.
    Turn on timesynch by default
    #ifndef'd  elfloader's default memory usage
    Made uIPv6 packet queueuing configuration configurable
    configured tmote sky to use 5 retransmissions
    Made collect neighbors, queuebuf number, uip-ds6 configuration settable through project-conf.h
    fixed some config params to avoid re-defining if already defined
    Made a lot of things configurable via the (optional) project-conf.h
    Updated configuration options to reflect recent changes. Increased number of queuebufs. Corrected the name of the collection neighbors option.
    split hw config into platform-conf and adapted to new SPI and CC2420 naming
    moved cc2420 config to platform config
    Increase the size of the route and neighbor tables; remove the uIP packet buffer queue for every neighbor to save RAM
    removed RPL routing state struct from platform config file
    Added missing parts of the RPL configuration
    added rpl support for tmote sky - enabled by default
    Turned on broadcast announcements by default, turn on announcements for collect
    Replaced old framer (framer_get/framer_set) with new NETSTACK style configuration. Added nullrdc-framer that is a nullrdc with framer support.
    updated sky platform for new sicslowpan
    Enabled 32-bit clock ticks to allow longer timeouts; experimentally disabled polite announcements in favour of a non-announcement based collect protocol
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Enabled sicslowpan fragmentation and reassembly by default on the sky platform
    Made it possible to override the SICSLOWPAN_CONF_FRAG option. Increased the default uIP buffer size on IPv6 to provide some room for fragmented packets
    Use cxmac for IP, xmac for non-IP. Increased uIP buffer size for IPv6 to accomodate ICMP packets
    Added default configuration options for the cxmac driver
    Reduce the TCP MSS so that it runs nicely over IPv6/802.15.4
    Added the CSMA MAC mechanism on top of the default duty cycling
    mechanism X-MAC. The CSMA is configurable with a MAC_CSMA define, just
    like the MAC protocol is configurable with the MAC_DRIVER define.
    reverted accidental commit
    Updated to match the new sensors API
    fixed for updated sensors API
    macro renamed to SPI_IS_ENABLED() to avoid confusions
    added macro for checking whether SPI is ENABLED
    Rime polite announcements should be used when IPv6 is enabled, and not used otherwise
    Renamed SPI_WAITFOREOTxBUF to SPI_WAITFORTxREADY for clarity and generalized SPI transmission status checks to work with both AVR and MSP430
    Changed to monitor the UART transmitter buffer ready flag instead of the UART transmitter empty flag. This almost doubles the speed of transmitting data to CC2420. Patch by James Brown.
    allow UIP_CONF_ROUTER to be set as compilation flag
    configured routing to off for sky-IPv6
    use polite announcements when running Rime over UDP.
    added init function in MAC driver for easier configuration
    decreased default elfloader memory usage for sky platform
    Increased the default number of queue buffers: there usually is plenty of RAM left, so we should  be able to afford it
    Increase default CPU speed from 2.4576 MHz to 3.9 MHz. Communication works better, at a low power cost
    cc2420 checksums temporarily disabled, due to timing problems with the x-mac unicast optimization
    Added CC2420 checksums to non-ipv6 packets. Set a conservative TCP MSS
    Disable timestamp when using 802.15.4 frames (CC2420_CONF_TIMESTAMPS adds timestamp to radio packets).
    changed to use HC01 compression for uip6
    set rime addr size to 8 for uip6, restored clock resolution
    added configuration for panid
    enabled multihop routing, increased uip buffer size.
    added workaround for memcpy/memset bug in mspgcc
    Made tick resultion more fine-grained to support a shorter LPP listen time
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    sicslowpan Typo
    Enable communication power accounting for xmac by default
    Switched name to CFS_CONF_OFFSET_TYPE to emphasize that it is a configurable option.
    switched cfs offset type to signed long to allow backward movements with cfs_seek.
    use unsigned long as cfs offset type.
    Bugfix: reduced the size of the uIP buffer to account for MAC header space
    Enabled X-MAC announcements by default, disabled polite broadcast announcements by default
    added DCO/CPU speed re-synch each 30 seconds
    elfloader executing loaded programs from ram (not rom) by default on msp430 platforms.
    temporary fix to get sicslowpan.c working on the Sky platform:
    conventional MAC implementations require a call to the MAC driver's
    read function.
    map rime address to mac address for ipv6
    added IPV6 configuration.
    Changed name of simple-cc2420 to cc2420
    Changed filename of the CC2420 driver from simple-cc2420 to cc2420.
    Changed the name of UIP_CONF_TCP_FORWARD to UIP_CONF_IP_FORWARD since forwarding is done at the IP level
    This is an initial commit of an implementation of the Chameleon
    architecture for the Rime stack for Contiki. The Chameleon
    architecture separates the header processing from the Rime protocol
    logic. Instead of having each protocol create its own part of the
    packet header, protocols use packet attributes. Before sending a
    packet, a special Chameleon header processing module creates a packet
    header from the packet attributes. The same Chameleon module parses
    incoming packets and creates packet attributes from the header.
    
    The details are in our SenSys 2007 paper:
    
    Adam Dunkels, Fredrik Osterlind, Zhitao He. An Adaptive Communication
    Architecture for Wireless Sensor Networks. In Proceedings of the Fifth
    ACM Conference on Networked Embedded Sensor Systems (SenSys 2007),
    Sydney, Australia, November 2007.
    
    http://www.sics.se/~adam/dunkels07adaptive.pdf
    
    This is a rewrite of the code that was developed for the paper.
    Reduced uIP buffer size to allow for TCP data over Rime mesh routing protocol
    Added uIP destimation unreachable message, removed defailt XMAC timer definitions (for now), turned profiling off(for now), added process event number configuration, reduced data memory size for the ELF loader
    Added configuration for upcoming shell improvements, removed PROCESS_CONF_FASTPOLL
    Enabled support for CC2420 timestamps
    Turned on energy estimation and profiling by default
    #ifdef around RF_CHANNEL
    enabled inline functions
    * Include msp430def.h for standard defines.
    
    * Remove obsolete LPM_CONF_OFF definition.
    Added X-MAC configuration, reduced ELF loader text memory size
    Added signed 32 bit data type.
    * Bump maximum number of udp sockets to 16.
    
    * Remove unused stuff.
    * More routing and forwarding cache entries.
    Increased RAM for loadable modules
    added cfs xmem size
    Node IDs are stored in external memory and restored on bootup
    ELF loader memory size, CFS RAM memory size
    Added CFS xmem conf
    Added LPM and IRQ configuration to make Tmote Sky port build with the Contiki build system
    * General stuff for different baudrates:
    
        - ubr argument to slip_arch_int
    
        - macros for calculating ubr
    
        - argument -Bbaudrate to tools tunslip and scat
    * Tmote sky has a CC2420_RADIO.
    Changed the Contiki Interface declaration macros from CCI/CLI to CCIF/CLIF because of already existing macros: Both CCI and CLI :-(
    Added defines for declaring functions/data which are part of the CCI (Contiki Core Interface) and CLI (Contiki Loadable Interface). Both defines are empty for all platforms but the upcoming Win32 port.
    Make malloc machine independent by relying on dependent sbrk(2).
    Import of files for the Tmote sky platform.
    Initial WiSMote port based on code from Arago Systems.
    Moved sensors setup to contiki-sky-platform.c and common make rules to Makefile.common for easier reuse in similar platforms
    Added IRC client example.
    Introduced web browser as new example using ctk fullscreen mode.
    Rime statistics gathering
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    * Added f2xxx for two series (for example z1)
    * f1xxx is baseline and always included
    * Cleaned up the names of uart and spi (no x in names)
    * Updated SPI configuration for WiSMote
    Updated SPI config for faster SPI, split msp430/clock/spi into separate versions for MSP430/MSP430X
    leds setup for WiSMote
    Corrected timing for higher CPU speed
    Initial WiSMote port based on code from Arago Systems.
    added compiler flags and macros for IAR and mspgcc 4.4.5 compilers
    Introduced PLATFORM_HAS_LIGHT, _BATTERY, and _SHT11.
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed Sky platform for IAR compiler
    Added resource definition for leds and button
    Enable DCO configuration override
    split hw config into platform-conf and adapted to new SPI and CC2420 naming
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    llsec: Added a layer in between NETSTACK_MAC and NETSTACK_NETWORK for implementing link layer security
    Added flags to enable 20-bit support from msp430-gcc 4.7.x
    Add the explicit list of modules, since we cannot do auto-dependency management of them
    Include driver modules
    Removed the experimental checkpointing code
    Added mspgcc 4.7.x flags to the Wismote makefile
    Makefiles: Allow setting UIP_CONF_IPV6=0 to work as expected.
    
    Setting UIP_CONF_IPV6 to zero from the make build command line is
    something that seems like it should ensure that IPv6 is disabled, but in
    fact it actually *enables* IPv6. This seems counter intuitive, so this
    patch changes the behavior of the makefiles to handle this case
    properly.
    Made the stack and heap size configurable when using the IAR compiler on the MSP430 platforms
    Added support for mspgcc 4.6+ that no longer supports generic MCU identifiers such as msp430x1611
    Improved support for the IAR compiler for the MSP430 platforms
    * Removed __MSP430X__ (already defined by newer mspgcc4)
    * Commented out pragma not supported by mspgcc
    * Added f2xxx for two series (for example z1)
    * f1xxx is baseline and always included
    * Cleaned up the names of uart and spi (no x in names)
    * Updated SPI configuration for WiSMote
    Removed explicit specification of data model small for IAR compiler. Data model small is default and this will allow projects to override the data model
    Initial WiSMote port based on code from Arago Systems.
    Initial WiSMote port based on code from Arago Systems.
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    fixed cpu/msp430 for compilation with IAR compiler
    Fixed a bug found by Moritz Straube - writing to the internal flash would lock up contikimac. The problem was due to the IFG1 being reset to zero before writing to flash.
    Updated to use the watchdog API
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Initial WiSMote port based on code from Arago Systems.
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed Sky platform for IAR compiler
    Several compiler warning fixes:
    
         * msp430: fix "implicit declaration of function" warnings in clock.c, by including watchdog.h;
         * sky: fix a couple pointer target signedness warnings;
         * core: fix several signed/unsigned comparison warnings;
         * framer-802154: "const static" -> "static const" to fix compiler warnings;
         * core: comment or remove unused variables and function definitions.
    
    Signed-off-by: Lionel Debroux <lionel_debroux@yahoo.fr>
    Signed-off-by: Mariano Alvira <mar@devl.org>
    Moved watchdog_periodic into the lowest level to avoid multiple redundant calls higher up
    Bug fix: put device in standby mode at startup in case it has previously been put in deep power-down mode; patch by Martin Bor
    split hw config into platform-conf and adapted to new SPI and CC2420 naming
    Renamed SPI_WAITFOREOTxBUF to SPI_WAITFORTxREADY for clarity and generalized SPI transmission status checks to work with both AVR and MSP430
    Changed to monitor the UART transmitter buffer ready flag instead of the UART transmitter empty flag. This almost doubles the speed of transmitting data to CC2420. Patch by James Brown.
    Added flash reads and writes to energest.
    Changed type from off_t (that potentially conflicts with existing types.h typedefs) to unsigned long
    Code style fix
    Disable the watchdog during the whole erase operation.
    Call watchdog_periodic before erasing each sector, because this operation
    takes approximately 1s.
    Added Doxygen documentation
    * Avoid using FASTSPI_TX to reduce size of object code.
    
    * Use off_t to avoid overflows.
    Import of files for the Tmote sky platform.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    minor code cleanup
    Initial WiSMote port based on code from Arago Systems.
    Added Sentilla Jcreate platform. This platform is similar to the Sky platform but with other sensors and 8 leds.
    fixed ext-sensor for jcreate
    ext-sensor: new driver for external sensors (e.g. Phidgets) on the Sentilla JCreate, developed by Marcus Lunden
    Driver for the acceleromenter sensors on the JCreate board
    Added battery sensor to the core interfaces
    Temporary deletion of files due to problems with the CVS repository
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Initial WiSMote port based on code from Arago Systems.
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    Import of files for the Tmote sky platform.
    minor code cleanup
    Initial WiSMote port based on code from Arago Systems.
    create iris directory
    removed execute flag of source files (avoids diff problems with egit)
    Adding battery sensor
    added missing include
    minor cleanup
    refactored some ADC code into sky-sensors and made it possible to turn off sensors to save energy
    Updated to match the new sensors API
    Updated to match the new sensors API
    fixed for updated sensors API
    fixed Sky platform for new sensor APIs
    changed sky sensors to new api
    fixed battery sensor for sky platform
    Preliminary untested code for the internal MSP430 battery sensor
    Returning the actual value rather than something read during an interrupt
    Temporary deletion of files due to problems with the CVS repository
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    minor code cleanup
    Initial WiSMote port based on code from Arago Systems.
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    Moved the ADC configuration to sky-sensors.c and sensors now only need to specify their sample channel. This helps to avoid conflicts when using multiple sensors.
    Added Sentilla Jcreate platform. This platform is similar to the Sky platform but with other sensors and 8 leds.
    fixed ext-sensor for jcreate
    Updated the ext-sensor to use the new sensor API; patch by Jesper Karlsson
    ext-sensor: new driver for external sensors (e.g. Phidgets) on the Sentilla JCreate, developed by Marcus Lunden
    added mcu-chip temperature to accelerometer sensor - value 3
    removed compiler warning by returning 0 at undefined value
    Driver for the acceleromenter sensors on the JCreate board
    fixed battery sensor for sky platform
    Preliminary untested code for the internal MSP430 battery sensor
    Returning the actual value rather than something read during an interrupt
    Temporary deletion of files due to problems with the CVS repository
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cross compiler interrupt service routine compatibility definitions for MSP430 based platforms based on isr_compat.h by Steve Underwood.
    minor code cleanup
    Initial WiSMote port based on code from Arago Systems.
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed Sky platform for IAR compiler
    Updated to match the new sensors API
    fixed for updated sensors API
    changed sky sensors to new api
    Button sensor driver
    Temporary deletion of files due to problems with the CVS repository
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Initial WiSMote port based on code from Arago Systems.
    Updated *-sensor.c files from the sky platform.
    Fixed battery-sensor plus added simple test (XXX)
    Moved the ADC configuration to sky-sensors.c and sensors now only need to specify their sample channel. This helps to avoid conflicts when using multiple sensors.
    refactored some ADC code into sky-sensors and made it possible to turn off sensors to save energy
    Added email client example.
    Added IRC client example.
    Introduced web browser as new example using ctk fullscreen mode.
    Rime statistics gathering
    Import of the contiki-2.x development code from the SICS internal CVS server
    Initial WiSMote port based on code from Arago Systems.
    * Change return type of i2c_start() to int.
    
    * Move macros I2C_ENABLE() and I2C_DISABLE() to header file.
    Bit-banging I2C master.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Initial WiSMote port based on code from Arago Systems.
    Import of files for the Tmote sky platform.
    A set of simple example programs for the ESB platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    minor code cleanup
    Initial WiSMote port based on code from Arago Systems.
    Added battery sensor to the core interfaces
    Temporary deletion of files due to problems with the CVS repository
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Initial WiSMote port based on code from Arago Systems.
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed Sky platform for IAR compiler
    Moved the ADC configuration to sky-sensors.c and sensors now only need to specify their sample channel. This helps to avoid conflicts when using multiple sensors.
    Corrected include path
    minor cleanup
    refactored some ADC code into sky-sensors and made it possible to turn off sensors to save energy
    Added constants for light sensor values
    fixed for updated sensors API
    changed sky sensors to new api
    Changed name of the simple-cc2420 module to cc2420: changed all function names and variable names from simple_cc2420_* to cc2420_*.
    Changed filename of the CC2420 driver from simple-cc2420 to cc2420.
    Radio sensor (RSSI) interface
    no initial signal strength by radio sensor
    added radio sensor for signal strength etc.
    Added radio signal strength simulation
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fixed sht11 driver, now ensures the i2c bus is disabled when initializing
    Initial WiSMote port based on code from Arago Systems.
    sht11 architecture support for Sky
    Made driver less platform-dependent and added support for msb-430.
    Make it possible to subscribe to DMA events.
    Improvement batch.
    dma transfer support.
    Platform-specific devices.
    cooja radio driver (uip + rime)
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    moved macros to implementation file, end-of-line normalization, code style
    Initial WiSMote port based on code from Arago Systems.
    Addition of USB files
    Lots of changes / commits! This allows ravenusbstick example to build at least.
    Moved unused malloc code to backyard directory
    Make malloc machine independent by relying on dependent sbrk(2).
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Initial WiSMote port based on code from Arago Systems.
    Updated to use the platform 'jcreate'
    added example of ext-sensor for Jcreate
    minor fix: removed superfluous etimer_reset
    transmit with random intervals: 2-4 seconds
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Bugfix: it is etimer_reset() that makes timer behavior stable, not etimer_restart()
    Use etimer_restart() to avoid synchronization effects from the abc_send() invocation taking time to complete
    printing message when packet sent
    
    + changed period to 2 seconds (can be run unchanged with x-mac)
    Changed names of the Rime examples from test-* to example-* and added examples for ruc and uc
    Static should come first because it's a storage class.
    Added exithandlers so that the examples can be run as loadable (and unloadble) modules
    Message size should include ending zero byte
    Moved all Rime examples into examples/rime directory
    API change for Rime: *_setup() renamed to *_open()
    Simple Rime test code
    Renamed Rime output function
    A Rime driver for the simple-cc2420 driver
    Import of the contiki-2.x development code from the SICS internal CVS server
    moved macros to implementation file, end-of-line normalization, code style
    * Removed __MSP430X__ (already defined by newer mspgcc4)
    * Commented out pragma not supported by mspgcc
    Initial WiSMote port based on code from Arago Systems.
    Moved the cc2520 driver into its own dev/cc2520 module
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Initial WiSMote port based on code from Arago Systems.
    Moved the ADC configuration to sky-sensors.c and sensors now only need to specify their sample channel. This helps to avoid conflicts when using multiple sensors.
    Updated to match the new sensors API
    fixed for updated sensors API
    changed sky sensors to new api
    Changed name of the simple-cc2420 module to cc2420: changed all function names and variable names from simple_cc2420_* to cc2420_*.
    Changed filename of the CC2420 driver from simple-cc2420 to cc2420.
    Radio sensor (RSSI) interface
    no initial signal strength by radio sensor
    added radio sensor for signal strength etc.
    Added radio signal strength simulation
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Initial WiSMote port based on code from Arago Systems.
    Added constants for light sensor values
    changed sky sensors to new api
    Import of the contiki-2.x development code from the SICS internal CVS server
    Initial WiSMote port based on code from Arago Systems.
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed Sky platform for IAR compiler
    * Change return type of i2c_start() to int.
    
    * Move macros I2C_ENABLE() and I2C_DISABLE() to header file.
    Bit-banging I2C master.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Initial WiSMote port based on code from Arago Systems.
    removed execute flag of source files (avoids diff problems with egit)
    Adding battery sensor
    added missing include
    minor cleanup
    refactored some ADC code into sky-sensors and made it possible to turn off sensors to save energy
    Updated to match the new sensors API
    Updated to match the new sensors API
    fixed for updated sensors API
    fixed Sky platform for new sensor APIs
    changed sky sensors to new api
    fixed battery sensor for sky platform
    Preliminary untested code for the internal MSP430 battery sensor
    Returning the actual value rather than something read during an interrupt
    Temporary deletion of files due to problems with the CVS repository
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Fixed mbxxx platform
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    Changes in RPL implementation :
    - Structural modification of RPL data storage.
    - Support multiple gateways (multiple DODAG-ID with a unique InstanceID)
    - Use Lollipop counters
    - Add leaf-only configuration option for RPL
    Bugfix :
    - Correctly send "Grounded" flag in DIO
    New Contiki port to STM32W108.
    Fix clock.h warnings caused by multiple, conflicting documentation blocks of clock functions
    Updated the path to uip-debug.h
    Readded clock.c file, deleted in pull request #266, fixing issue #440
    Travis-ci tweaks, added CPUREV to 01 regression test, needed by mbxxx platform
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Bugfix in clock_wait() declaration. Various style fixes.
    Add clock_delay_us and clock_set_seconds to clock.h. Modify clock_wait to use clock_time_t.
    Remove the troublesome avr/dev/delay.* files.
    Add PLATFORM_NAME and combine the confusing *_REVISION defines into a single PLATFORM_TYPE
    Added functions and example for deep sleep on mb851.
    
    The added function let a process to make the system go
    into deep sleep for maximum power saving.
    The udp-ipv6-example shows how to use these new functions.
    New Contiki port to STM32W108.
    ctimer moved from net/rime to sys/
    Added netstack init to native platform
    Initialize ctimers
    Changed the name of the 'serial' module to 'serial-line' to signify that the module is about lines of data from the serial port, not individual bytes, and to make sdcc happy
    Changed startup message
    Removed finally unnecessary cast.
    Added serial input from stdin, removed uIP initialization since uIP is not used anyway, made stdout unbuffered
    Reimplemented waiting with select() instead of nanosleep(). Let's see if Linux compiles this code now...
    Changed usleep() to nanosleep()
    Fixed compiler warnings
    Avoid compiler warnings.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Integrate I2C driver into board initializzation
    
    This patch add I2C initializzation for board with I2C devices.
    Signed-off-by: Maria Laura Stefanizzi <laura28582@gmail.com>
    Added support for STM32w boards MB950 and MB951 revision B.
    Fixed mbxxx platform
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    Added functions for deep sleep to mbxxx platform.
    Added weak symbols for STM32W exception handlers and other minor updates for the HAL.
    New HAL and SimpleMAC for STM32W108.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Added support for STM32w boards MB950 and MB951 revision B.
    Fixed mbxxx platform
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    Added weak symbols for STM32W exception handlers and other minor updates for the HAL.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Changed the name of the rimeaddr module to linkaddr
    Removed unused rime-udp code
    Moved net/rime.h to net/rime/rime.h
    Moved the rimeaddr.[ch] code from the core/net/rime module to the core/net module, as it is used not only by rime code
    Updated include paths for the moved files under net/
    Fixed mbxxx platform
    DOS EOL and indentation fixes (platform files)
    
    - Removed some DOS EOLs
    - Changed some tabs to spaces
    - Removed some trailing whitespaces
    
    Closes #6
    stm32w platforms: contikimac support in the Rime case, with EUI-64
    adding ducy cycling support to the stm32w-based platforms (patch by Chi-Anh La)
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    Files for platform mbxxx.
    
    MBXXX is a fake platform that actually include
    all the platforms based on STM32W108 microcontroller.
    Detection of the board is made at runtime, at the
    expense of code size.
    Added configuration in order to run Rime.
    New Contiki port to STM32W108.
    Cleanup UIP_CONF_IPV6_RPL configuration
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    ContikiMAC: Create and parse ContikiMAC header in special framer; Expanded framer interface
    to allow for creating and securing frames in advance; Create and secure frames in advance when sending bursts; Do neither recreate nor resecure frames that come from phase
    Changed the name of the rimeaddr module to linkaddr
    Don't use the sicslowmac code, use nullrdc instead
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Fix naming issues and includes in uip-ds6-nbr.h
    Removed now unused per-module neighbor table size configs. Use NEIGHBOR_CONF_MAX_NEIGHBORS instead.
    Fixed mbxxx platform
    Changed the name of the IPv6 number of route entries configuration from UIP_CONF_DS6_ROUTE_NBU to UIP_CONF_MAX_ROUTES.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    mb* pltforms: reduce RAM footprint
    Fixed mbxxx's contiki-conf.h (bug reported by Konstantin Klubnichkin and Michal Krol)
    stm32w platforms: contikimac support in the Rime case, with EUI-64
    stm32w platforms: contiki-conf cleanup and added platform-conf
    stm32w platforms: 64-bit rtimer causes a bug in arm-none-eabi-objcopy 2.18.50, use 32-bit rtimer instead
    stm32w platforms: use 2 cca and default contikimac guard time
    adding ducy cycling support to the stm32w-based platforms (patch by Chi-Anh La)
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    Files for platform mbxxx.
    
    MBXXX is a fake platform that actually include
    all the platforms based on STM32W108 microcontroller.
    Detection of the board is made at runtime, at the
    expense of code size.
    Set LED pins to output when MB851 is in sleep mode.
    
    This reduces power consumption.
    Reduced uip buffer size in order to compile all the examples.
    Added configuration in order to run Rime.
    New Contiki port to STM32W108.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Fixed mbxxx platform
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New Contiki port to STM32W108.
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Added minimal doxygen anchor for each platform currently available in Contiki
    
    Already existing label names and titles were retained
    [doc] Various fixes for doxygen grouping etc.
    Fix inconsistent usage of short/long integer type in mbxxx platform's configuration file.
    
    The type used to store rtimer ticks on this platform is 32-bit integer, but the macro uses 16-bit comparison.
    As a result, the output of the RTIMER_CLOCK_LT(a,b) macro was incorrect when used for comparisons between time values with sufficiently large difference.
    The code to repeat this problem on mbxxx platform:
    
      rtimer_clock_t a = 6 * RTIMER_ARCH_SECOND;
      rtimer_clock_t b = 0;
      printf("%d\n", RTIMER_CLOCK_LT(a,b)); // expected output: "0", actual: "1"
    mbxxx eeprom driver
    
    This patch adds the eeprom driver needed to access M24C64
    eeprom which is on some mbxxx boards.
    Signed-off-by: Maria Laura Stefanizzi <laura28582@gmail.com>
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Some little refactor
    Fixed mbxxx platform
    DOS EOL and indentation fixes (platform files)
    
    - Removed some DOS EOLs
    - Changed some tabs to spaces
    - Removed some trailing whitespaces
    
    Closes #6
    stm32w platforms: contiki-conf cleanup and added platform-conf
    New Contiki port to STM32W108.
    ctimer moved from net/rime to sys/
    Added netstack init to native platform
    Initialize ctimers
    Changed the name of the 'serial' module to 'serial-line' to signify that the module is about lines of data from the serial port, not individual bytes, and to make sdcc happy
    Changed startup message
    Removed finally unnecessary cast.
    Added serial input from stdin, removed uIP initialization since uIP is not used anyway, made stdout unbuffered
    Reimplemented waiting with select() instead of nanosleep(). Let's see if Linux compiles this code now...
    Changed usleep() to nanosleep()
    Fixed compiler warnings
    Avoid compiler warnings.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    llsec: Added a layer in between NETSTACK_MAC and NETSTACK_NETWORK for implementing link layer security
    Add the explicit list of modules, since we cannot do auto-dependency management of them
    Moved the individual MODULE definitions from the top-level Makefile.include into the individual platforms' Makefiles
    mbxxx eeprom driver
    
    This patch adds the eeprom driver needed to access M24C64
    eeprom which is on some mbxxx boards.
    Signed-off-by: Maria Laura Stefanizzi <laura28582@gmail.com>
    mbxxx I2C driver.
    
    This patch add the I2C driver for mbxxx platform to communicate with
    devices connected to the SC2 I2C bus.
    Signed-off-by: Maria Laura Stefanizzi <laura28582@gmail.com>
    Fixed mbxxx platform
    Makefiles: Allow setting UIP_CONF_IPV6=0 to work as expected.
    
    Setting UIP_CONF_IPV6 to zero from the make build command line is
    something that seems like it should ensure that IPv6 is disabled, but in
    fact it actually *enables* IPv6. This seems counter intuitive, so this
    patch changes the behavior of the makefiles to handle this case
    properly.
    Fixed login make target repeated in Makefile.mbxxx and Makefile.stm32w108
    Simplified host OS platform detection in Makefiles
    Added functions for deep sleep to mbxxx platform.
    Files for platform mbxxx.
    
    MBXXX is a fake platform that actually include
    all the platforms based on STM32W108 microcontroller.
    Detection of the board is made at runtime, at the
    expense of code size.
    Change from DEV to PORT in login command for mb851.
    
    DEV variable was already used in Makefile.include.
    New HAL and SimpleMAC for STM32W108.
    Added serialdump utility from sky folder to stm32w folder. It has one more option for limiting upload speed.
    New Contiki port to STM32W108.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Fixed mbxxx platform
    Files for platform mbxxx.
    
    MBXXX is a fake platform that actually include
    all the platforms based on STM32W108 microcontroller.
    Detection of the board is made at runtime, at the
    expense of code size.
    New Contiki port to STM32W108.
    MEMS I2C integration.
    
    This patch allows the MEMS driver to use the i2c driver.
    Signed-off-by: Maria Laura Stefanizzi <laura28582@gmail.com>
    Fixed mbxxx platform
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Add clock_delay_us and clock_set_seconds to clock.h. Modify clock_wait to use clock_time_t.
    Remove the troublesome avr/dev/delay.* files.
    Add PLATFORM_NAME and combine the confusing *_REVISION defines into a single PLATFORM_TYPE
    Files for platform mbxxx.
    
    MBXXX is a fake platform that actually include
    all the platforms based on STM32W108 microcontroller.
    Detection of the board is made at runtime, at the
    expense of code size.
    New Contiki port to STM32W108.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Fixed mbxxx platform
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Files for platform mbxxx.
    
    MBXXX is a fake platform that actually include
    all the platforms based on STM32W108 microcontroller.
    Detection of the board is made at runtime, at the
    expense of code size.
    New Contiki port to STM32W108.
    Added a dummy function instead of a NULL callback in the textentry widget because sdcc does not like NULL function pointers
    no message
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fixed mbxxx platform
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Files for platform mbxxx.
    
    MBXXX is a fake platform that actually include
    all the platforms based on STM32W108 microcontroller.
    Detection of the board is made at runtime, at the
    expense of code size.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    Fixed mbxxx platform
    Files for platform mbxxx.
    
    MBXXX is a fake platform that actually include
    all the platforms based on STM32W108 microcontroller.
    Detection of the board is made at runtime, at the
    expense of code size.
    New Contiki port to STM32W108.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Some little refactor
    Fixed mbxxx platform
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New Contiki port to STM32W108.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Correct several doxygen tags (\file)
    Removing trailing whitespaces
    mbxxx I2C driver.
    
    This patch add the I2C driver for mbxxx platform to communicate with
    devices connected to the SC2 I2C bus.
    Signed-off-by: Maria Laura Stefanizzi <laura28582@gmail.com>
    Initial WiSMote port based on code from Arago Systems.
    * Change return type of i2c_start() to int.
    
    * Move macros I2C_ENABLE() and I2C_DISABLE() to header file.
    Bit-banging I2C master.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Correct several doxygen tags (\file)
    Removing trailing whitespaces
    mbxxx eeprom driver
    
    This patch adds the eeprom driver needed to access M24C64
    eeprom which is on some mbxxx boards.
    Signed-off-by: Maria Laura Stefanizzi <laura28582@gmail.com>
    Fixed mbxxx platform
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Fixed temperature ADC conversion bug on mbxxx.
    
    The conversion was made from an incorrect source when
    the GPIO pin was not PB7.
    Added functions and macros used to select the correct
    ADC channel.
    Files for platform mbxxx.
    
    MBXXX is a fake platform that actually include
    all the platforms based on STM32W108 microcontroller.
    Detection of the board is made at runtime, at the
    expense of code size.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    ctimer moved from net/rime to sys/
    Added netstack init to native platform
    Initialize ctimers
    Changed the name of the 'serial' module to 'serial-line' to signify that the module is about lines of data from the serial port, not individual bytes, and to make sdcc happy
    Changed startup message
    Removed finally unnecessary cast.
    Added serial input from stdin, removed uIP initialization since uIP is not used anyway, made stdout unbuffered
    Reimplemented waiting with select() instead of nanosleep(). Let's see if Linux compiles this code now...
    Changed usleep() to nanosleep()
    Fixed compiler warnings
    Avoid compiler warnings.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    MEMS I2C integration.
    
    This patch allows the MEMS driver to use the i2c driver.
    Signed-off-by: Maria Laura Stefanizzi <laura28582@gmail.com>
    Travis-ci tweaks, added CPUREV to 01 regression test, needed by mbxxx platform
    Fixed mbxxx platform
    Files for platform mbxxx.
    
    MBXXX is a fake platform that actually include
    all the platforms based on STM32W108 microcontroller.
    Detection of the board is made at runtime, at the
    expense of code size.
    New Contiki port to STM32W108.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Fixed mbxxx platform
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Files for platform mbxxx.
    
    MBXXX is a fake platform that actually include
    all the platforms based on STM32W108 microcontroller.
    Detection of the board is made at runtime, at the
    expense of code size.
    New Contiki port to STM32W108.
    Moved ninimal-ppp into backyard as it depends on the uIP ppp support.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Some little refactor
    Fixed mbxxx platform
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    ctimer moved from net/rime to sys/
    Added netstack init to native platform
    Initialize ctimers
    Changed the name of the 'serial' module to 'serial-line' to signify that the module is about lines of data from the serial port, not individual bytes, and to make sdcc happy
    Changed startup message
    Removed finally unnecessary cast.
    Added serial input from stdin, removed uIP initialization since uIP is not used anyway, made stdout unbuffered
    Reimplemented waiting with select() instead of nanosleep(). Let's see if Linux compiles this code now...
    Changed usleep() to nanosleep()
    Fixed compiler warnings
    Avoid compiler warnings.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    MEMS I2C integration.
    
    This patch allows the MEMS driver to use the i2c driver.
    Signed-off-by: Maria Laura Stefanizzi <laura28582@gmail.com>
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Fixed mbxxx platform
    Files for platform mbxxx.
    
    MBXXX is a fake platform that actually include
    all the platforms based on STM32W108 microcontroller.
    Detection of the board is made at runtime, at the
    expense of code size.
    New Contiki port to STM32W108.
    Correct several doxygen tags (\file)
    Removing trailing whitespaces
    mbxxx I2C driver.
    
    This patch add the I2C driver for mbxxx platform to communicate with
    devices connected to the SC2 I2C bus.
    Signed-off-by: Maria Laura Stefanizzi <laura28582@gmail.com>
    Fixed mbxxx platform
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Files for platform mbxxx.
    
    MBXXX is a fake platform that actually include
    all the platforms based on STM32W108 microcontroller.
    Detection of the board is made at runtime, at the
    expense of code size.
    New Contiki port to STM32W108.
    A shell command for posting arbitrary messages to Twitter
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Changed names of the Rime examples from test-* to example-* and added examples for ruc and uc
    Static should come first because it's a storage class.
    Added exithandlers so that the examples can be run as loadable (and unloadble) modules
    Message size should include ending zero byte
    Moved all Rime examples into examples/rime directory
    API change for Rime: *_setup() renamed to *_open()
    Simple Rime test code
    Renamed Rime output function
    A Rime driver for the simple-cc2420 driver
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Fixed mbxxx platform
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Files for platform mbxxx.
    
    MBXXX is a fake platform that actually include
    all the platforms based on STM32W108 microcontroller.
    Detection of the board is made at runtime, at the
    expense of code size.
    New Contiki port to STM32W108.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    added missing modules in Makefile.avr-rcb, added netstack init functions (to start the at86rf230, modified macros to increase the buffersize)
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Changed the name of the rimeaddr module to linkaddr
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed now unused per-module neighbor table size configs. Use NEIGHBOR_CONF_MAX_NEIGHBORS instead.
    Add clock_delay_us and clock_set_seconds to clock.h. Modify clock_wait to use clock_time_t.
    Remove the troublesome avr/dev/delay.* files.
    Add PLATFORM_NAME and combine the confusing *_REVISION defines into a single PLATFORM_TYPE
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    Fixes to allow ipv4 (hello world) builds
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Changes by "David Kopf" <dak664@embarqmail.com> to:
     -Add hit counter to index.html
     -Adding link to favicon.png
     -Fix serving of binary (image) files in avr-makefsdata file
    
    Changes by Colin O'Flynn:
     -Removed extra linebreak in tutorial-raven.txt
     -Fix to contiki-conf.h in avr-rcb platform
    forgot these files for RCB...
    example\webserver-ipv6-raven works!
    Contiki port for the Atmel AVR Raven board
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Changed the Contiki Interface declaration macros from CCI/CLI to CCIF/CLIF because of already existing macros: Both CCI and CLI :-(
    Added defines for declaring functions/data which are part of the CCI (Contiki Core Interface) and CLI (Contiki Loadable Interface). Both defines are empty for all platforms but the upcoming Win32 port.
    Import of the contiki-2.x development code from the SICS internal CVS server
    corrected line - #if UIP_CONF_IPV6 - in contiki-rcb-main.c to - #if NETSTACK_CONF_WITH_IPV6 -
    added missing modules in Makefile.avr-rcb, added netstack init functions (to start the at86rf230, modified macros to increase the buffersize)
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Updated include paths for the moved files under net/
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    Fixes to allow ipv4 (hello world) builds
    Renamed serial module to serial-line
    forgot these files for RCB...
    Changed copyright.
    Fix to allow building without LCD interface
    example\webserver-ipv6-raven works!
    Contiki port for the Atmel AVR Raven board
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    forgot these files for RCB...
    Contiki port for the Atmel AVR Raven board
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    added missing modules in Makefile.avr-rcb, added netstack init functions (to start the at86rf230, modified macros to increase the buffersize)
    Fixes to allow ipv4 (hello world) builds
    forgot these files for RCB...
    example\webserver-ipv6-raven works!
    Contiki port for the Atmel AVR Raven board
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Renamed serial module to serial-line
    forgot these files for RCB...
    Contiki port for the Atmel AVR Raven board
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add polyphonic  ringtones for received messages.
    Add SLEEP and DOZE functions to the menu.
    Give serial commands the same defines as in the 1284p for grepping.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Contiki port for the Atmel AVR Raven board
    Contiki port for the Atmel AVR Raven board
    Add polyphonic  ringtones for received messages.
    Contiki port for the Atmel AVR Raven board
    Enable ADC2 for optional external supply voltage measurement
    Optionally measure ADC2 along with temperature
    Convert <CR><CR><LF> line endings to <LF>
    last version of the raven lcd user interface
    Contiki port for the Atmel AVR Raven board
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Add SLEEP and DOZE functions to the menu.
    Give serial commands the same defines as in the 1284p for grepping.
    Contiki port for the Atmel AVR Raven board
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Add SLEEP and DOZE functions to the menu.
    Give serial commands the same defines as in the 1284p for grepping.
    Add SEND_ADC2 command definition
    Contiki port for the Atmel AVR Raven board
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Add SLEEP and DOZE functions to the menu.
    Give serial commands the same defines as in the 1284p for grepping.
    Add option to measure external supply voltage on ADC2
    Convert <CR><CR><LF> line endings to <LF>
    last version of the raven lcd user interface
    Contiki port for the Atmel AVR Raven board
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Contiki port for the Atmel AVR Raven board
    Add polyphonic  ringtones for received messages.
    Contiki port for the Atmel AVR Raven board
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Contiki port for the Atmel AVR Raven board
    Contiki port for the Atmel AVR Raven board
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Add SLEEP and DOZE functions to the menu.
    Give serial commands the same defines as in the 1284p for grepping.
    Contiki port for the Atmel AVR Raven board
    Contiki port for the Atmel AVR Raven board
    Contiki port for the Atmel AVR Raven board
    Informative error when bogus platform  is used in a contiki build
    Contiki port for the Atmel AVR Raven board
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Contiki port for the Atmel AVR Raven board
    Allow cygwin remakes and cleans
    changed stabs to dwarf-2 for debugging.
    Contiki port for the Atmel AVR Raven board
    Add polyphonic  ringtones for received messages.
    Update documentation
    Add SLEEP and DOZE functions to the menu.
    Give serial commands the same defines as in the 1284p for grepping.
    Document temperature and voltage measurement features and/or bugs
    last version of the raven lcd user interface
    Changed the \mainpage doxygen tag to avoid confusion with the main Contiki \mainpage
    Contiki port for the Atmel AVR Raven board
    Add SLEEP and DOZE functions to the menu.
    Give serial commands the same defines as in the 1284p for grepping.
    Contiki port for the Atmel AVR Raven board
    Add SLEEP and DOZE functions to the menu.
    Give serial commands the same defines as in the 1284p for grepping.
    last version of the raven lcd user interface
    Contiki port for the Atmel AVR Raven board
    Send temperature and voltage to 1294p webserver on startup by default.
    Update documentation
    Add SLEEP and DOZE functions to the menu.
    Give serial commands the same defines as in the 1284p for grepping.
    Send optional ADC2 measurement to 1284p
    *** empty log message ***
    last version of the raven lcd user interface
    Contiki port for the Atmel AVR Raven board
    Contiki port for the Atmel AVR Raven board
    Contiki port for the Atmel AVR Raven board
    Added multi-threading example
    2.2 -> 2.2.1
    2.1 -> 2.2
    Contributions from Michael Baar.
    
    Source and documentation files are included
    automatically. Small fixes for Windows also.
    Documentation updates
    Removed removed file win32/doc/getting-started.txt
    Renamed tree -> collect
    Bumped version number to 2.1
    Removed ctk-textedit, added a bunch of Rime modules
    Finally moved service.[c|h] into backyard. The "only" user left in outside backyard is the CTK on GTK simulation layer - which needs to be updated to build / run again...
    Documentation fixes
    Added Rime examples
    Added Rime to doxygen documentation generation
    renamed elfloader-tmp.h to elfloader.h
    Added documentation of the Contiki build system
    Import of the contiki-2.x development code from the SICS internal CVS server
    Contiki port for the Atmel AVR Raven board
    Modify menu chart for sleep and doze, add raven picture for doxygen
    Contiki port for the Atmel AVR Raven board
    Modify menu chart for sleep and doze, add raven picture for doxygen
    Contiki port for the Atmel AVR Raven board
    native: Fix trailing whitespace
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Fixed compiler warnings
    Added clock_second() implementation to make th shell work
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    llsec: Added a layer in between NETSTACK_MAC and NETSTACK_NETWORK for implementing link layer security
    native: Add CTK to the module list
    
    It is needed for apps compiled WITH_GUI.
    Include the RPL module for the native platform
    Add the explicit list of modules, since we cannot do auto-dependency management of them
    Moved the individual MODULE definitions from the top-level Makefile.include into the individual platforms' Makefiles
    Use the MODULES mechanism for the native platform
    ctk-curses: make sure gcc finds ncurses headers on cygwin
    
    They are located in /usr/include/ncurses
    ctk-curses: add CURSES_LIB to TARGET_LIBFILES, not LDFLAGS
    
    It seems TARGET_LIBFILES is used at the end of the link command,
    unlike LDFLAGS, which should help when only a static curses lib is
    available, like on Haiku.
    ctk-curses: Introduce CURSES_LIB makefile variable
    
    This should allow overriding it depending on $(HOST_OS).
    ctk-curses: Cleanup
    Ncurses-based CTK backend for the native platform.
    Makefiles: Allow setting UIP_CONF_IPV6=0 to work as expected.
    
    Setting UIP_CONF_IPV6 to zero from the make build command line is
    something that seems like it should ensure that IPv6 is disabled, but in
    fact it actually *enables* IPv6. This seems counter intuitive, so this
    patch changes the behavior of the makefiles to handle this case
    properly.
    Fixed TARGET=native compilation issues on Darwin.
    Simplified host OS platform detection in Makefiles
    Add wpcap for cygwin/Windows native border router
    Added native-border-router and slip-radio
    Make sure that symbols.c is included in every native cpu build, not just the native target
    Changed the name of the 'serial' module to 'serial-line' to signify that the module is about lines of data from the serial port, not individual bytes, and to make sdcc happy
    Reverted recent change as there's now a general (and actually working) solution in Makefile.include.
    added #define for platform check
    xmem implementation for the native platform
    Added cfs-posix
    Added serial and cfs-posix-dir
    Factored out setup directory search path for source files into Makefile.include.
    
    - Search target specific directories before CPU specific directories.
    - Search CPU specific directories before generic directories.
    
    Note: I checked several builds but nevertheless one or the other might need some additional adjustsments. Sorry for the inconvenience.
    Removed reliance on x86 cpu
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    [platform/native] Add to doxygen tree
    Explicitly initialize queue buffer in the main startup routine only if uIP is used.
    
    The Rime stack already does this on its own, and there is no need to do it twice.
    Make native platform's main loop less noisy.
    Initialize the rtimer component on native platform's startup.
    
    Otherwise applications that use rtimers die when run as native code because of an unhandled signal.
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Updated include paths for the moved files under net/
    Ncurses-based CTK backend for the native platform.
    native: Fix trailing whitespace
    native: Use stderr for logging
    
    Since we will hopefully one day use stdout as a CTK display,
    use stderr instead for log output, which can be redirected to a file.
    quick fix for enabling native-border router to run under windows - need to cleanup the arguments
    Replaced SELECT_CALLBACK with an API that supports multiple select callbacks
    Add wpcap for cygwin/Windows native border router
    fixed so that it works for non IPv6 applications
    Made native main loop sleep a bit more
    Added native-border-router and slip-radio
    Print the error if select fails
    ctimer moved from net/rime to sys/
    Added netstack init to native platform
    Initialize ctimers
    Changed the name of the 'serial' module to 'serial-line' to signify that the module is about lines of data from the serial port, not individual bytes, and to make sdcc happy
    Changed startup message
    Removed finally unnecessary cast.
    Added serial input from stdin, removed uIP initialization since uIP is not used anyway, made stdout unbuffered
    Reimplemented waiting with select() instead of nanosleep(). Let's see if Linux compiles this code now...
    Changed usleep() to nanosleep()
    Fixed compiler warnings
    Avoid compiler warnings.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Added a function for setting the I/O semantics on a Coffee file descriptor. Changed the configuration parameters slightly and updated the platform definitions to reflect this change.
    Removed the deprecated COFFEE_DIR_CACHE_ENTRIES parameter.
    removed obsolete offset type definitions.
    Made the use of micro logs configurable to make file modifications
    more efficient on storage types that support inline updates.
    
    The sky platform uses logs, and the native platform uses no logs.
    removed redundant definitions.
    A long refactoring session yielded the following.
    
    Technical changes:
    
    * Factored out file specific information from the file descriptor
      structure into a new file structure.
    
      - Useful file metadata can be stored after the file is closed.
      - File descriptors become much smaller.
      - Significantly reduces the need to scan for the file end.
    
    * Use correct types in all function signatures.
    * Removed the directory cache.
    
    Results:
    
    * Enormous speed increase when opening cached files (10x-20x.)
    * Multiple fd:s pointing to the same file have the correct semantics.
    * About 100 bytes smaller ROM size.
    * Slightly smaller static RAM size.
    use abstract types for offsets and pages so that we can easily port it to
    very large or small memories.
    CFS Coffee arch file for the native platform
    Configuration for the Sky platform.
    Node IDs are stored in external memory and restored on bootup
    Node IDs are stored in EEPROM and restored on bootup
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup UIP_CONF_IPV6_RPL configuration
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Changed the name of the rimeaddr module to linkaddr
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Fix naming issues and includes in uip-ds6-nbr.h
    Removed now unused per-module neighbor table size configs. Use NEIGHBOR_CONF_MAX_NEIGHBORS instead.
    cpu/native: Add file-backed simulated EEPROM to native cpu.
    
    This patch removes a defunct EEPROM implementation from the native
    platform and provides a new EEPROM implementation for the native cpu.
    The previous implementation appears to be vestigal.
    
    This is useful for testing code which uses the EEPROM without running
    the code on the actual hardware.
    
    By default the code will create a new temporary file as the EEPROM
    backing, reinitializing each time. If you would like to preserve the
    EEPROM contents or specify a specific EEPROM file to use, you can set the
    `CONTIKI_EEPROM` environment variable to the name of the EEPROM file you
    wish to use instead. If it already exists, its contents will be used.
    If it does not already exist, it will be created and initialized by
    filling it with `0xFF`---just like a real EEPROM.
    
    A new example is also included, which was used to verify the correctness
    of the implementation. It can easily be used to verify the EEPROM
    implementations of other targets.
    ctk-curses: Introduce CTK-specific color names
    
    Since ncurses also defines COLOR_BLACK and friends, and we want
    to avoid including curses.h in contiki-conf.h, define CTK_COLOR_*
    constants and map them to curses colors in ctk-curses.c.
    ctk-curses: Cleanup
    ctk-curses: Add configuration for various apps
    ctk-curses: Enable screensaver
    Ncurses-based CTK backend for the native platform.
    Changed the name of the IPv6 number of route entries configuration from UIP_CONF_DS6_ROUTE_NBU to UIP_CONF_MAX_ROUTES.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    Replaced SELECT_CALLBACK with an API that supports multiple select callbacks
    Add wpcap for cygwin/Windows native border router
    fixed so that it works for non IPv6 applications
    Added native-border-router and slip-radio
    Fixed compiler warnings
    Define IPv6 options only if UIP_CONF_IPV6 is defined (which should be defined by the Makefile.include if IPv6 is enabled)
    new-ipv6 compiles on native cygwin
    ping-ipv6 example compiles on native cygwin
    Changed UIP_UDP -> UIP_CONF_UDP
    Declare strcasecmp here as it isn't part of C99.
    Fixed compiler warnings to make code compile with gcc's -pedantic switch
    Added signed 32 bit data type.
    Made endianess configuration actually work.
    Changed the Contiki Interface declaration macros from CCI/CLI to CCIF/CLIF because of already existing macros: Both CCI and CLI :-(
    Added defines for declaring functions/data which are part of the CCI (Contiki Core Interface) and CLI (Contiki Loadable Interface). Both defines are empty for all platforms but the upcoming Win32 port.
    Import of the contiki-2.x development code from the SICS internal CVS server
    ctk-curses: style fixes
    
    Thanks tools/contiki-indent
    ctk-curses: whitespace fixes
    ctk-curses: style fixes
    ctk-curses: remove unused code
    
    The setupterm() call is not needed when using curses.
    ctk-curses: cleanup
    ctk-curses: uncomment refresh() calls
    
    I'm not yet sure they are required there but it shouldn't hurt.
    ctk-curses: uncomment nonl() call and fix return key handling
    ctk-curses: add some comments for clarity
    ctk-curses: Introduce CTK-specific color names
    
    Since ncurses also defines COLOR_BLACK and friends, and we want
    to avoid including curses.h in contiki-conf.h, define CTK_COLOR_*
    constants and map them to curses colors in ctk-curses.c.
    ctk-curses: C89
    
    At least Haiku still uses gcc2 by default.
    ctk-curses: Guard ncurses-specific mouse function calls
    
    The mouse support is ncurses-specific so guard it with proper #ifdef.
    ctk-curses: Remove extra mouse events pumping loop
    
    It was added to avoid getting garbage keyboard input in some cases,
    however it seems not to happen very often and might be the cause
    of hang in OSX. If garbage input happens again we can always try
    to pump a single event each time instead of looping anyway.
    ctk-curses: Cleanup + fixes
    
    * Cleanup
    * Fix warnings
    * Fix indentation
    * Only wait 1ms for keyboard timeout
    * Hide text cursor
    * Pump mouse events just in case
    * Add F9 as menu key since F10 is used as menu trigger by Gnome
    ctk-curses: Add mouse support to the ncurses CTK backend.
    Ncurses-based CTK backend for the native platform.
    Use plain ASCII chars for lines on Win32 console CTK.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Fixed typos.
    - Switched from from a CTK draw service to a statically linked CTK draw implementation.
    
    - Workarounded the following CTK glitch:
    
    ctk.c calls ctk_arch_keyavail() and ctk_arch_getkey() and needs therefore appropriate declarations (or macros) but it doesn't include a ctk_arch.h or alike to bring those in. So it's necessary to bring those declarations in via contiki-conf.h.
    
    But ctk_arch_getkey() is supposed to return a ctk_arch_key_t - and this typedef'ed in ctk.h which means that ctk.h would need to be included in contiki-conf.h before declaring ctk_arch_getkey().
    
    This IS rather undesirable so the current workaround is to declare ctk_arch_getkey() as returning a char - this is btw done similiar in platform/gtk as well. See ctk/ctk-gtksim.h:
    
    guint ctk_arch_getkey(void);
    Initializing the console Just-In-Time on CTK startup and starting up the WinPcap before CTK allows WinPcap to print initialization errors (especially a missing command line arg) without clearing the shell output.
    Cygin (in opposite to VC++) doesn't call exit() - and thus our atexit function - on Ctrl-C. Therefore we install an explict ConsoleCtrlHandler which calls exit(). For the sake of simplicity it's not #ifdef'ed _CYGWIN_.
    Allow to build platform/win32 using Cygwin and the Contiki build system. The WinPcap driver is missing as it is about to be changed from dynamic to static loading anyway.
    Moved error_exit() to the Win32 Contiki Core.
    Replaced Win32 ctrl-c handler with C-library atexit handler (taking care of ctrl-c too) now that we have a Contiki Quit menu calling exit().
    Avoid temporary console window scroll on redraw due to writing to lower right screen cell.
    Removed obsolete header include.
    Added a Win32 Console Program based CTK (Contiki Tool Kit) conio low level library. Beside the core/lib/libconio.h interface it implements the CTK mouse interface.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    ctk-curses: Introduce CTK-specific color names
    
    Since ncurses also defines COLOR_BLACK and friends, and we want
    to avoid including curses.h in contiki-conf.h, define CTK_COLOR_*
    constants and map them to curses colors in ctk-curses.c.
    Ncurses-based CTK backend for the native platform.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    - Switched from from a CTK draw service to a statically linked CTK draw implementation.
    
    - Workarounded the following CTK glitch:
    
    ctk.c calls ctk_arch_keyavail() and ctk_arch_getkey() and needs therefore appropriate declarations (or macros) but it doesn't include a ctk_arch.h or alike to bring those in. So it's necessary to bring those declarations in via contiki-conf.h.
    
    But ctk_arch_getkey() is supposed to return a ctk_arch_key_t - and this typedef'ed in ctk.h which means that ctk.h would need to be included in contiki-conf.h before declaring ctk_arch_getkey().
    
    This IS rather undesirable so the current workaround is to declare ctk_arch_getkey() as returning a char - this is btw done similiar in platform/gtk as well. See ctk/ctk-gtksim.h:
    
    guint ctk_arch_getkey(void);
    Moved error_exit() to the Win32 Contiki Core.
    Added the CCIF (Contiki Core InterFace) declarations necessary for fatal error display on Win32.
    The *-arch.h files seem to be out of style in Contiki 2.x so removed the only Win32 one - most of the content will show up in the (one and only) Win32 conf header.
    Added a Win32 Console Program based CTK (Contiki Tool Kit) conio low level library. Beside the core/lib/libconio.h interface it implements the CTK mouse interface.
    Added a Win32 CFS (Contiki File System) service. The opendir() parameter "/" is mapped to the directory containing contiki.exe. That allows easy access to *.prg and *.dsc files which are supposed to reside in the same directory.
    Import of the contiki-2.x development code from the SICS internal CVS server
    native: Fix trailing whitespace
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Removed debug printout
    xmem implementation for the native platform
    Added const to constant arguments
    Fixed handling of CFS_WRITE and CFS_APPEND
    Set truncate flag to make sure that overwriting a existing file doesn't result in a mix of old and new content.
    Splitted POSIX based cfs implementation to avoid pulling in potentially large POSIX directory I/O functions without needing them at all.
    Made cfs implementation adhere to (new) cfs interface, streamlined implementation, reduced header dependencies and removed the 'cfs-root/' prefix. The reasoning behind the latter:
    - Productive embedded targets don't use the posix based variant anyway.
    - For testing purposes the prefix is a hurdle as the documentation doesn't mention it ;-))
    - The prefix is incompatible with posix implementations lacking directory support (like the C64).
    Removed used variable that caused compiler warning.
    Fixed compiler warnings to make code compile with gcc's -pedantic switch
    Changed Contiki File System (cfs) from a service to a plain library.
    
    This change means that one needs to select _ONE_ cfs implementation at Contiki library link time. But this doesn't appear to be an issue as all platforms have their "favorite" implementation anyway.
    Don't exit application on every _BUT_ exit messages ;-)
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Import of the contiki-2.x development code from the SICS internal CVS server
    [platform/native] Add to doxygen tree
    [doc] added faulty esb and msp430 references
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    removed unused constants (BEEP_ON/BEEP_OFF)
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added native-border-router and slip-radio
    Use new sensors API
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    Added native-border-router and slip-radio
    Updated to match the new sensors API
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Added native-border-router and slip-radio
    Updated to match the new sensors API
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added native-border-router and slip-radio
    Updated to match the new sensors API
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Import of the contiki-2.x development code from the SICS internal CVS server
    Generic STM32F103 platform
    Missing file
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    Generic STM32F103 platform
    Generic STM32F103 platform
    Simplified host OS platform detection in Makefiles
    Generic STM32F103 platform
    Use IP over Rime
    Forgot to add this file
    Generic STM32F103 platform
    Changed the parameter 'char * data' of process_start to the
    type process_data_t. This was an artifact when the choice was
    made to use the void * type for the data parameter in processes.
    
    Changed parameter 'void * data' of process_post_synch to
    process_data_t for consistency.
    
    Checked all the uses of process_start() in contiki and fixed casts
    of the data parameter.
    Copied 'contiki_arg[c|v]' from 'native' to the other desktop targets.
    
    - On the retro targets support for 'contiki_arg[c|v]' is optional as accesing arg[c|v] is rather expensive.
    Initialize tcpip process before resolver process.
    
    Since introduction of mDNS (https://github.com/contiki-os/contiki/commit/f145c17039b778cde1d53b6828757cd91dc8480a)
    the resolver process initialization depends on the tcpip process
    already being initialized (because of the call to udp_new()).
    Remove tab chars from retro C sources.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    Just always call process_run() and etimer_request_poll() in turn - like the "major" platforms do.
    There's no point in pulling in cfs-posix-dir.c if the POSIX functions it depends on are dummies anyway.
    Removed closing of stdin, stdout (and stderr on the Apple2). It was introduced in order to maximize the number of available file handles for the webserver. However none of the target machine DOSes allows to open a single file several times diminishing the intended effect very much. One the other hand not being able to "just printf() something" causes trouble over and again - i.e. hello-world seemingly not working...after all a typical case of german over-enigneering ;-)
    cc65 2.13. allows to explicitly set 80 column mode.
    Fixed comment (just to make sure that committing still works after all these months).
    Added lseek dummy.
    Free up unused file descriptors.
    Now that process initialization has been changed (back) to synchronous it needs to be called after reading the config file and setting the mouse sprite in order to preserve the existing logic.
    Removed finally unnecessary cast.
    Added C128 port. It runs the example webserver both in the cgi and cfs variant - although the latter only with a reduced MTU size due to memory constraints.
    Set sprite color.
    Implement cfs API on preprocessor level using POSIX functions..
    Made use of the new high-level config macros.
    Added target-specifc mouse support (sprite handling).
    Soe we're finally bak at reducing the memory footprint be avoiding to pull in large C-library enitities.
    Made use of config file read function.
    Use common log implementation for cc65 targets.
    Do consistently "first-log then operate".
    Switched to lowercase file name to allow for successful driver loading from C64 DOS file system.
    Added user feedback on Ethernet configuration.
    Added user feedback on IP configuration.
    Adjusted dummy return value to (new) cfs interface.
    Include dummies for posix functions missing in cc65 C-library.
    Made use of the generic Ethernet driver for cc65 targets.
    Shortened welcome message.
    Start out with minimal main().
    Added support for the cc65 target 'apple2enh' (Enhanced Apple //e).
    Moved error_exit() to the Win32 Contiki Core.
    Now that they assumed a shape ...
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Reorganized web page attribute data handling.
    
    - Up to now the web browser used several fixed size arrays to hold the various types attribute data of the web page. This turned out to be way to inflexible for any non-trivial web page. Therefore now all attribute data is stored in a single buffer one after the other as they arrive from the parser only occupying the memory actually needed. This allows for pages with many links with rather short URLs as well as pages with few link with long URLs as well as pages with several simple forms as well as pages with one form with many form inputs.
    
    - Using the actual web page buffer to hold the text buffers of text entry fields was in general a cool idea but in reality it  is often necessary to enter text longer than the size of the text entry field. Therefore the text buffer is now stored in the new unified attribute data buffer.
    
    - Splitting up the process of canonicalizing a link URL and actually navigating to the resulting URL allowed to get rid of the 'tmpurl' buffer used during form submit. Now the form action is canonicalized like a usual link, then the form input name/value pairs are written right into the 'url' buffer and afterwards the navigation is triggered.
    
    - Support for the 'render states' was completely removed. The only actually supported render state was centered output. The new unified attribute buffer would have complicated enumerating all widgets added to the page in order to adjust their position. Therefore I decided to drop the whole feature as the <center> tag is barely used anymore and newer center attributes are to hard to parse.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Implemented cfs_opendir() and friends for CBMs based on cc65's cbm_opendir() and friends.
    There's no point in pulling in cfs-posix-dir.c if the POSIX functions it depends on are dummies anyway.
    Added support for the FTP standalone client to the c128 target.
    Replaced "retro" color scheme with ergonomic color scheme.
    Reduced MTU size in order to allow for a reasonable (and full screen width) URL length.
    Configure maximum number of C128 web server connections indirectly via maximum number of TCP connections.
    Without forms, centering and history we can just squeeze in DNS.
    Removed closing of stdin, stdout (and stderr on the Apple2). It was introduced in order to maximize the number of available file handles for the webserver. However none of the target machine DOSes allows to open a single file several times diminishing the intended effect very much. One the other hand not being able to "just printf() something" causes trouble over and again - i.e. hello-world seemingly not working...after all a typical case of german over-enigneering ;-)
    - Added yet another PETSCII->ASCII conversion, this time for the file name in case of a 404.
    - Use all lowercase for the 404 message to avoid another PETSCII->ASCII conversion.
    - Write logfile entries for all 404s.
    - Adjust memory buffers on the C128 to accomodate for the items above.
    Reverted last change because the change making it necessary in the first place was reverted.
    Reduce number of memory block to accomodate for new directory listing code (which won't actually work due to missing directory I/O support).
    Optimized C128 color set for 80 column display.
    Added configuration values for the email client example.
    Added configuration values for the IRC client example.
    Activate uIP logging when "high level config" logging is enabled.
    cc65 2.13. features a default-per-target mouse driver so there's no need to deal with their names in Contiki anymore.
    Added C128 port. It runs the example webserver both in the cgi and cfs variant - although the latter only with a reduced MTU size due to memory constraints.
    Introduced yet another high-level config macro.
    Introduced some more high-level config macros.
    Introduced high-level macros to be set on the make command line. They allow easy configuration of Contiki for typical (cc65-)project scenarios.
    Added target-specifc mouse configuration values.
    Added target-specifc ctk (and www) configuration values.
    Limit the maximum number of simultaneous connections to the cfs webserver to the maximum number of open files.
    Set the maximum number of simultaneous connections to the cfs webserver to the maximum number of uIP connections.
    Set the maximum number of simultaneous connections to the cgi webserver to the maximum number of uIP connections.
    Renamed 6502-conf.h into 6502def.h to be in line with similiar files created in the meanwhile and added C99 names.
    Start out with minimal Contiki config.
    Reduced Contiki config to the minimum.
    Made endianess configuration actually work.
    Factored out settings specific more to architecture and/or toolchain rather than specific target.
    Added support for the cc65 target 'apple2enh' (Enhanced Apple //e).
    Several minor consistency improvements.
    Update README.md
    
    Minor markdown => md renaming
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    Minor wording change.
    Added Platform-specific File System (PFS) for the C128 contributed by Kajtar Zsolt.
    Changed ETH64 base address from $DE10 to $DE00 as this is the default base address according to the manufacturer.
    Just some minor reformatting.
    Added C128 port. It runs the example webserver both in the cgi and cfs variant - although the latter only with a reduced MTU size due to memory constraints.
    Clarify that the driver support RR-Net only on RR as other carts tend to differ in clockport activation.
    Added ETH64.
    Fixed typo.
    Added some info on the c64 plattform.
    Moved the 6502 custom rules into its own Makefile.customrules-6502 file
    Add somewhat more support to use different mouse drivers.
    
    - The default mouse driver is now always named 'contiki.mou'.
    - Alternative mouse drivers are present in the disk images.
    - Users can select their mouse driver by renaming the files.
    Have CBM DOS filetype of imported files match the one used by cc65.
    
    CFS_WRITE implies O_TRUNC which is implemented on CBM DOS by deleting an
    exsisting file. Hoewever this succeeds only if the CBM DOS filetype matches.
    
    We need a working O_TRUNC in order to be able to overwrite the contiki.cfg
    configuration file.
    
    Note: Now it has be clarified why overwriting the configuration file started to
    fail the CBM PFS (platform file system) can be activated for the recently added
    ethconfig program.
    Removed some more old RCS tags from the Contiki source tree.
    Moved from last cc65 release (2.13.3) to recent cc65 snapshot (2.13.9).
    
    Relevant cc65 changes...
    
    General:
    - The compiler generates "extended" dependency info (like gcc) so there's no need for postprocessing whatsoever :-)
    - The linker is very pernickety regarding the ordering of cmdline options so a custom linker rule is necessary :-(
    
    Apple2:
    - The various memory usage scenarios aren't specified anymore via separate linker configs but via defines overriding default values in the builtin linker config.
    
    Atari:
    - The builtin linker config allows to override the start addr so there no more need for a custom linker config.
    - The C library comes with POSIX directory access. So there's no more need for for a custom coding.
    
    CBM:
    - The C library comes with POSIX directory access. So there's no more need for for a custom coding.
    Implemented cfs_opendir() and friends for CBMs based on cc65's cbm_opendir() and friends.
    There's no point in pulling in cfs-posix-dir.c if the POSIX functions it depends on are dummies anyway.
    Made cfs-based webserver example compatible with 8.3 file systems.
    Made cfs-based webserver example compatible with 8.3 file systems.
    Just name the binary always 'contiki'.
    Added Platform-specific File System (PFS) for the C128 contributed by Kajtar Zsolt.
    Explicitly set CBM filetypes (PRG, USR).
    Minor wording change.
    Use only the base name of projects as program file name.
    Now that we have at least two examples working on the cc65 targets it is preferable to not name the program files all 'contiki'.
    cc65 2.13. allows to define all necessary paths through the single env var CC65_HOME.
    cc65 2.13. comes with builtin linker configs defining the __STACKSIZE__ symbol as weak. This allows to override the stacksize from the linker command line thus eliminating the need for linker configs maintained by Contiki.
    Replace non-fully-functional hack with the new gnumake variable CONTIKI_PROJECT.
    Added make target 'disk' for creating a .d71 disk image using c1541.
    Added C128 port. It runs the example webserver both in the cgi and cfs variant - although the latter only with a reduced MTU size due to memory constraints.
    No reason to not just compile petsciiconv.c for all cc65 targets.
    Activated PETSCII support on the C64.
    For now delegate all work to the 6502 makefile.
    Added support for the cc65 target 'apple2enh' (Enhanced Apple //e).
    Moved from last cc65 release (2.13.3) to recent cc65 snapshot (2.13.9).
    
    Relevant cc65 changes...
    
    General:
    - The compiler generates "extended" dependency info (like gcc) so there's no need for postprocessing whatsoever :-)
    - The linker is very pernickety regarding the ordering of cmdline options so a custom linker rule is necessary :-(
    
    Apple2:
    - The various memory usage scenarios aren't specified anymore via separate linker configs but via defines overriding default values in the builtin linker config.
    
    Atari:
    - The builtin linker config allows to override the start addr so there no more need for a custom linker config.
    - The C library comes with POSIX directory access. So there's no more need for for a custom coding.
    
    CBM:
    - The C library comes with POSIX directory access. So there's no more need for for a custom coding.
    Integrated latest enhancements contributed by Kajtar Zsolt:
    - Use cc65 C library _filetype for writing instead of fixed 'p'.
    - Support for fake O_TRUNC through SCRATCH.
    Integrated latest fix contributed by Kajtar Zsolt.
    Added Platform-specific File System (PFS) for the C128 contributed by Kajtar Zsolt.
    Added Platform-specific File System (PFS) for the C64 supporting IDE64 fast R/W contributed by Kajtar Zsolt.
    Added Platform-specific File System (PFS) for the C128 contributed by Kajtar Zsolt.
    Added Platform-specific File System (PFS) for the C64 supporting IDE64 fast R/W contributed by Kajtar Zsolt.
    Added the same disclaimer as used in the header file.
    Moved 6502-specific implementation of local continuations into a 'sys' folder in order to allow the
    
    #include "sys/lc.h"
    
    in core/sys/pt.h to find it.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Correct several doxygen tags (\file)
    Removing trailing whitespaces
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    added support for SEED-EYE board (http://rtn.sssup.it/index.php/hardware/seed-eye)
    create iris directory
    Now, all network related initialization code segments are in one file
    Adding ADC functions
    Platform-specific devices.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup UIP_CONF_IPV6_RPL configuration
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    ContikiMAC: Create and parse ContikiMAC header in special framer; Expanded framer interface
    to allow for creating and securing frames in advance; Create and secure frames in advance when sending bursts; Do neither recreate nor resecure frames that come from phase
    Correct several doxygen tags (\file)
    Removing trailing whitespaces
    Changed the name of the rimeaddr module to linkaddr
    Fix naming issues and includes in uip-ds6-nbr.h
    Removed now unused per-module neighbor table size configs. Use NEIGHBOR_CONF_MAX_NEIGHBORS instead.
    remote power switch example updated to use coap version 13
    added support for SEED-EYE board (http://rtn.sssup.it/index.php/hardware/seed-eye)
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Correct several doxygen tags (\file)
    Removing trailing whitespaces
    Changed the name of the rimeaddr module to linkaddr
    minor corrections to adhere contiki code style guidelines
    added support for SEED-EYE board (http://rtn.sssup.it/index.php/hardware/seed-eye)
    [doc] Various fixes for doxygen grouping etc.
    pic32 minor cleanups
    added support for SEED-EYE board (http://rtn.sssup.it/index.php/hardware/seed-eye)
    Correct several doxygen tags (\file)
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    pic32 minor cleanups
    added support for SEED-EYE board (http://rtn.sssup.it/index.php/hardware/seed-eye)
    added experimental checkpointing functionality:
    currently only implemented on the sky platform
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Remove unneeded module inclusion from avr and seedeye platforms
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Seedeye platform: add the explicit list of modules
    pic32 minor cleanups
    Makefiles: Allow setting UIP_CONF_IPV6=0 to work as expected.
    
    Setting UIP_CONF_IPV6 to zero from the make build command line is
    something that seems like it should ensure that IPv6 is disabled, but in
    fact it actually *enables* IPv6. This seems counter intuitive, so this
    patch changes the behavior of the makefiles to handle this case
    properly.
    added support for SEED-EYE board (http://rtn.sssup.it/index.php/hardware/seed-eye)
    Correct several doxygen tags (\file)
    Removing trailing whitespaces
    added support for SEED-EYE board (http://rtn.sssup.it/index.php/hardware/seed-eye)
    leds setup for WiSMote
    Added Sentilla USB platform. This platform is similar to the Sky platform but without the sensors and with 2 leds.
    Added Sentilla Jcreate platform. This platform is similar to the Sky platform but with other sensors and 8 leds.
    Moved ninimal-ppp into backyard as it depends on the uIP ppp support.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Correct several doxygen tags (\file)
    Removing trailing whitespaces
    minor corrections to adhere contiki code style guidelines
    added support for SEED-EYE board (http://rtn.sssup.it/index.php/hardware/seed-eye)
    Cross compiler interrupt service routine compatibility definitions for MSP430 based platforms based on isr_compat.h by Steve Underwood.
    minor code cleanup
    Initial WiSMote port based on code from Arago Systems.
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed Sky platform for IAR compiler
    Updated to match the new sensors API
    fixed for updated sensors API
    changed sky sensors to new api
    Button sensor driver
    Temporary deletion of files due to problems with the CVS repository
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Correct several doxygen tags (\file)
    Removing trailing whitespaces
    added support for SEED-EYE board (http://rtn.sssup.it/index.php/hardware/seed-eye)
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the ADC configuration to sky-sensors.c and sensors now only need to specify their sample channel. This helps to avoid conflicts when using multiple sensors.
    Updated to match the new sensors API
    fixed for updated sensors API
    changed sky sensors to new api
    Changed name of the simple-cc2420 module to cc2420: changed all function names and variable names from simple_cc2420_* to cc2420_*.
    Changed filename of the CC2420 driver from simple-cc2420 to cc2420.
    Radio sensor (RSSI) interface
    no initial signal strength by radio sensor
    added radio sensor for signal strength etc.
    Added radio signal strength simulation
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Correct several doxygen tags (\file)
    Removing trailing whitespaces
    minor corrections to adhere contiki code style guidelines
    added support for SEED-EYE board (http://rtn.sssup.it/index.php/hardware/seed-eye)
    Precision (printf("%.Ns", text1)) not supported by all compilers, for example some versions of avrgcc and mspgcc.
    Minor tweaks based on maniacbug commits.
    Bugfix: removed extreanous asterix character
    avr-libc %.*s workaround
    some trivial change
    Some Telnet server enhancements:
    - PETSCII sending support
    - Option to customize shell prompt and banner
    - Stop all running commands on shell close
    - New 'exit' and 'quit' commands to close shell
    Changed the name of the 'serial' module to 'serial-line' to signify that the module is about lines of data from the serial port, not individual bytes, and to make sdcc happy
    Minor documentation update
    Added cr/nl to end of prompt to make scripting easier
    Guard against NULL input, remove unguarded printf()
    Broke out serial-shell from the shell app into its own app. Project can use the serial-shell to get a shell running over the serial line, just like a project can use the telnetd to get a shell running over Telnet/TCP/IP.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Updated to new radio_driver API
    tr1001 init fix
    Added radio sniffer program
    More uip_ipaddr_t fixes.
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Various fixes for doxygen grouping etc.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    added support for SEED-EYE board (http://rtn.sssup.it/index.php/hardware/seed-eye)
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    added support for SEED-EYE board (http://rtn.sssup.it/index.php/hardware/seed-eye)
    Added stub for extended radio API for seedeye
    minor corrections to adhere contiki code style guidelines
    added support for SEED-EYE board (http://rtn.sssup.it/index.php/hardware/seed-eye)
    Add somewhat more support to use different mouse drivers.
    
    - The default mouse driver is now always named 'contiki.mou'.
    - Alternative mouse drivers are present in the disk images.
    - Users can select their mouse driver by renaming the files.
    Have CBM DOS filetype of imported files match the one used by cc65.
    
    CFS_WRITE implies O_TRUNC which is implemented on CBM DOS by deleting an
    exsisting file. Hoewever this succeeds only if the CBM DOS filetype matches.
    
    We need a working O_TRUNC in order to be able to overwrite the contiki.cfg
    configuration file.
    
    Note: Now it has be clarified why overwriting the configuration file started to
    fail the CBM PFS (platform file system) can be activated for the recently added
    ethconfig program.
    Removed some more old RCS tags from the Contiki source tree.
    Moved from last cc65 release (2.13.3) to recent cc65 snapshot (2.13.9).
    
    Relevant cc65 changes...
    
    General:
    - The compiler generates "extended" dependency info (like gcc) so there's no need for postprocessing whatsoever :-)
    - The linker is very pernickety regarding the ordering of cmdline options so a custom linker rule is necessary :-(
    
    Apple2:
    - The various memory usage scenarios aren't specified anymore via separate linker configs but via defines overriding default values in the builtin linker config.
    
    Atari:
    - The builtin linker config allows to override the start addr so there no more need for a custom linker config.
    - The C library comes with POSIX directory access. So there's no more need for for a custom coding.
    
    CBM:
    - The C library comes with POSIX directory access. So there's no more need for for a custom coding.
    Implemented cfs_opendir() and friends for CBMs based on cc65's cbm_opendir() and friends.
    There's no point in pulling in cfs-posix-dir.c if the POSIX functions it depends on are dummies anyway.
    Made cfs-based webserver example compatible with 8.3 file systems.
    Made cfs-based webserver example compatible with 8.3 file systems.
    Just name the binary always 'contiki'.
    Added Platform-specific File System (PFS) for the C64 supporting IDE64 fast R/W contributed by Kajtar Zsolt.
    Explicitly set CBM filetypes (PRG, USR).
    Minor wording change.
    Use only the base name of projects as program file name.
    Now that we have at least two examples working on the cc65 targets it is preferable to not name the program files all 'contiki'.
    cc65 2.13. allows to define all necessary paths through the single env var CC65_HOME.
    cc65 2.13. comes with builtin linker configs defining the __STACKSIZE__ symbol as weak. This allows to override the stacksize from the linker command line thus eliminating the need for linker configs maintained by Contiki.
    Replace non-fully-functional hack with the new gnumake variable CONTIKI_PROJECT.
    Added make target 'disk' for creating a .d64 disk image using c1541.
    No reason to not just compile petsciiconv.c for all cc65 targets.
    Activated PETSCII support on the C64.
    For now delegate all work to the 6502 makefile.
    Added support for the cc65 target 'apple2enh' (Enhanced Apple //e).
    Moved the 6502 custom rules into its own Makefile.customrules-6502 file
    Changed the parameter 'char * data' of process_start to the
    type process_data_t. This was an artifact when the choice was
    made to use the void * type for the data parameter in processes.
    
    Changed parameter 'void * data' of process_post_synch to
    process_data_t for consistency.
    
    Checked all the uses of process_start() in contiki and fixed casts
    of the data parameter.
    Copied 'contiki_arg[c|v]' from 'native' to the other desktop targets.
    
    - On the retro targets support for 'contiki_arg[c|v]' is optional as accesing arg[c|v] is rather expensive.
    Initialize tcpip process before resolver process.
    
    Since introduction of mDNS (https://github.com/contiki-os/contiki/commit/f145c17039b778cde1d53b6828757cd91dc8480a)
    the resolver process initialization depends on the tcpip process
    already being initialized (because of the call to udp_new()).
    Remove tab chars from retro C sources.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    Just always call process_run() and etimer_request_poll() in turn - like the "major" platforms do.
    There's no point in pulling in cfs-posix-dir.c if the POSIX functions it depends on are dummies anyway.
    Removed closing of stdin, stdout (and stderr on the Apple2). It was introduced in order to maximize the number of available file handles for the webserver. However none of the target machine DOSes allows to open a single file several times diminishing the intended effect very much. One the other hand not being able to "just printf() something" causes trouble over and again - i.e. hello-world seemingly not working...after all a typical case of german over-enigneering ;-)
    Fixed comment (just to make sure that committing still works after all these months).
    Dummies should rather return errors.
    Added lseek dummy.
    Free up unused file descriptors.
    Now that process initialization has been changed (back) to synchronous it needs to be called after reading the config file and setting the mouse sprite in order to preserve the existing logic.
    Removed finally unnecessary cast.
    Set sprite color.
    Implement cfs API on preprocessor level using POSIX functions..
    Made use of the new high-level config macros.
    Added target-specifc mouse support (sprite handling).
    Soe we're finally bak at reducing the memory footprint be avoiding to pull in large C-library enitities.
    Made use of config file read function.
    Use common log implementation for cc65 targets.
    Do consistently "first-log then operate".
    Switched to lowercase file name to allow for successful driver loading from C64 DOS file system.
    Added user feedback on Ethernet configuration.
    Added user feedback on IP configuration.
    Adjusted dummy return value to (new) cfs interface.
    Include dummies for posix functions missing in cc65 C-library.
    Made use of the generic Ethernet driver for cc65 targets.
    Shortened welcome message.
    Start out with minimal main().
    Added support for the cc65 target 'apple2enh' (Enhanced Apple //e).
    Moved error_exit() to the Win32 Contiki Core.
    Now that they assumed a shape ...
    Import of the contiki-2.x development code from the SICS internal CVS server
    Added more flexibility to webbrowser -> wget forwarding.
    
    - Up to now the CTK program handler was necessary to start wget and forward the URL. Now alternatively the webbrowser uses the underlying OS to exec wget.
    
    - Up to now windowed CTK was necessary to display the acknowledge dialog. Now alternatively the webbrowser displays the acknowledge text and buttons right in the webpage area.
    
    - For now the targets 'win32' and 'c64' make use of the new capabilities.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Reorganized web page attribute data handling.
    
    - Up to now the web browser used several fixed size arrays to hold the various types attribute data of the web page. This turned out to be way to inflexible for any non-trivial web page. Therefore now all attribute data is stored in a single buffer one after the other as they arrive from the parser only occupying the memory actually needed. This allows for pages with many links with rather short URLs as well as pages with few link with long URLs as well as pages with several simple forms as well as pages with one form with many form inputs.
    
    - Using the actual web page buffer to hold the text buffers of text entry fields was in general a cool idea but in reality it  is often necessary to enter text longer than the size of the text entry field. Therefore the text buffer is now stored in the new unified attribute data buffer.
    
    - Splitting up the process of canonicalizing a link URL and actually navigating to the resulting URL allowed to get rid of the 'tmpurl' buffer used during form submit. Now the form action is canonicalized like a usual link, then the form input name/value pairs are written right into the 'url' buffer and afterwards the navigation is triggered.
    
    - Support for the 'render states' was completely removed. The only actually supported render state was centered output. The new unified attribute buffer would have complicated enumerating all widgets added to the page in order to adjust their position. Therefore I decided to drop the whole feature as the <center> tag is barely used anymore and newer center attributes are to hard to parse.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Implemented cfs_opendir() and friends for CBMs based on cc65's cbm_opendir() and friends.
    There's no point in pulling in cfs-posix-dir.c if the POSIX functions it depends on are dummies anyway.
    Added support for the FTP standalone client to the c64 target.
    Replaced "retro" color scheme with ergonomic color scheme.
    The cc65 C64 memory layout offers enough memory for larger URLs so have a nice scrolling URL text entry field.
    The maximum number of C64 web server connections is now equal to the (new) default as the CBM PFS allows for 10 open files.
    Explicitly turn on forms and centering for consistency reasons.
    Removed closing of stdin, stdout (and stderr on the Apple2). It was introduced in order to maximize the number of available file handles for the webserver. However none of the target machine DOSes allows to open a single file several times diminishing the intended effect very much. One the other hand not being able to "just printf() something" causes trouble over and again - i.e. hello-world seemingly not working...after all a typical case of german over-enigneering ;-)
    Added configuration values for the email client example.
    Added configuration values for the IRC client example.
    Activate uIP logging when "high level config" logging is enabled.
    cc65 2.13. features a default-per-target mouse driver so there's no need to deal with their names in Contiki anymore.
    Introduced yet another high-level config macro.
    Introduced some more high-level config macros.
    Introduced high-level macros to be set on the make command line. They allow easy configuration of Contiki for typical (cc65-)project scenarios.
    Added target-specifc mouse configuration values.
    Added target-specifc ctk (and www) configuration values.
    Limit the maximum number of simultaneous connections to the cfs webserver to the maximum number of open files.
    Set the maximum number of simultaneous connections to the cfs webserver to the maximum number of uIP connections.
    Set the maximum number of simultaneous connections to the cgi webserver to the maximum number of uIP connections.
    Renamed 6502-conf.h into 6502def.h to be in line with similiar files created in the meanwhile and added C99 names.
    Start out with minimal Contiki config.
    Reduced Contiki config to the minimum.
    Made endianess configuration actually work.
    Factored out settings specific more to architecture and/or toolchain rather than specific target.
    Added support for the cc65 target 'apple2enh' (Enhanced Apple //e).
    Several minor consistency improvements.
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    Minor wording change.
    Added Platform-specific File System (PFS) for the C64 supporting IDE64 fast R/W contributed by Kajtar Zsolt.
    Changed ETH64 base address from $DE10 to $DE00 as this is the default base address according to the manufacturer.
    Just some minor reformatting.
    Clarify that the driver support RR-Net only on RR as other carts tend to differ in clockport activation.
    Added ETH64.
    Fixed typo.
    Added some info on the c64 plattform.
    Moved from last cc65 release (2.13.3) to recent cc65 snapshot (2.13.9).
    
    Relevant cc65 changes...
    
    General:
    - The compiler generates "extended" dependency info (like gcc) so there's no need for postprocessing whatsoever :-)
    - The linker is very pernickety regarding the ordering of cmdline options so a custom linker rule is necessary :-(
    
    Apple2:
    - The various memory usage scenarios aren't specified anymore via separate linker configs but via defines overriding default values in the builtin linker config.
    
    Atari:
    - The builtin linker config allows to override the start addr so there no more need for a custom linker config.
    - The C library comes with POSIX directory access. So there's no more need for for a custom coding.
    
    CBM:
    - The C library comes with POSIX directory access. So there's no more need for for a custom coding.
    Integrated latest enhancements contributed by Kajtar Zsolt:
    - Use cc65 C library _filetype for writing instead of fixed 'p'.
    - Support for fake O_TRUNC through SCRATCH.
    Integrated latest fix contributed by Kajtar Zsolt.
    Added Platform-specific File System (PFS) for the C64 supporting IDE64 fast R/W contributed by Kajtar Zsolt.
    Added Platform-specific File System (PFS) for the C64 supporting IDE64 fast R/W contributed by Kajtar Zsolt.
    Added the same disclaimer as used in the header file.
    Moved 6502-specific implementation of local continuations into a 'sys' folder in order to allow the
    
    #include "sys/lc.h"
    
    in core/sys/pt.h to find it.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Now, all network related initialization code segments are in one file
    Adding ADC functions
    Platform-specific devices.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fixed compilation problems on the micaz and exp5438 platforms due to the node-id change
    Cleanup of the node-id.h files. The node-id.h file contains
    declarations of functions for setting and getting a node ID number, a
    functionality that exists on many platforms. Since this functionality
    was not considered part of the Contiki core, each platform defined its
    own node-id.h file. This commit attempts to clean this up by
    collecting the node-id.h into a core/sys/node-id.h file that replaces
    the old node-id.h files from the platform directories.
    Added node id restoring and burning functions.
    Initial files of the MICAz port.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    llsec: Added a layer in between NETSTACK_MAC and NETSTACK_NETWORK for implementing link layer security
    Add the explicit list of modules, since we cannot do auto-dependency management of them
    Moved the individual MODULE definitions from the top-level Makefile.include into the individual platforms' Makefiles
    Add a sensible set of modules for the micaz platform
    Simplified host OS platform detection in Makefiles
    merge iris and micaz
    removed execute flag of source files (avoids diff problems with egit)
    Changing line ending to LF
    Added missing slip.c file to CONTIKI_TARGET_SOURCEFILES
    Adding machine dependent SLIP routines source file to the sources list
    Added new network initialization source file to the sources list.
    adapted to the new spi and cc2420 naming - and split config file
    Adding ADC sources and battery sensor source to CONTIKI_TARGET_SOURCEFILES.
    Added dummy watchdog functions for all AVR platforms
    Dummy watchdog implementation so that programs that use the watchdog compiles
    Adding device driver files for the Dallas Semiconductor DS2401 chip to the CONTIKI_TARGET_SOURCEFILES list.
    Initial files of the MICAz port.
    Cleanup UIP_CONF_IPV6_RPL configuration
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Get IPv6 to fit in micaz platform again
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Changed the name of the rimeaddr module to linkaddr
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Clean up setting channel and CCA-threshold for CC2420 based motes.
    The CCA-threshold now defaults to -46 which give better simulation
    results and typically also better experimental results.
    This adjustment is also needed due to commit 0a13f99 in mspsim. As
    promised in https://github.com/mspsim/mspsim/pull/18 it broke the
    regression tests.
    Fix naming issues and includes in uip-ds6-nbr.h
    Removed now unused per-module neighbor table size configs. Use NEIGHBOR_CONF_MAX_NEIGHBORS instead.
    Changed the name of the IPv6 number of route entries configuration from UIP_CONF_DS6_ROUTE_NBU to UIP_CONF_MAX_ROUTES.
    Avoid multiple definitions of NETSTACK_CONF_MAC. Turn on RPL by default.
    Add clock_delay_us and clock_set_seconds to clock.h. Modify clock_wait to use clock_time_t.
    Remove the troublesome avr/dev/delay.* files.
    Add PLATFORM_NAME and combine the confusing *_REVISION defines into a single PLATFORM_TYPE
    Removed the obsolete MAC_CONF_CHANNEL_CHECK_RATE (now replaced with NETSTACK_CONF_RDC_CHANNEL_CHECK_RATE)
    merge iris and micaz
    1. Added uIPv6 configuration options.
    2. Fine tuned some configuration options to save RAM.
    adapted to the new spi and cc2420 naming - and split config file
    moved config from cc2420 to micaz
    Added netstack config for CC2420 radio driver, and also for cxmac RDC layer (which is not confirmed if it runs on real hardware, only tested in simulation)
    Added the EEPROM starting address of node id.
    Initial files of the MICAz port.
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    frame802154: move inclusion of linkaddr.h from .h to .c file
    Changed the name of the rimeaddr module to linkaddr
    Moved the cc2420 driver into a separate dev/cc2420 module
    Updated include paths for the moved files under net/
    Clean up setting channel and CCA-threshold for CC2420 based motes.
    The CCA-threshold now defaults to -46 which give better simulation
    results and typically also better experimental results.
    This adjustment is also needed due to commit 0a13f99 in mspsim. As
    promised in https://github.com/mspsim/mspsim/pull/18 it broke the
    regression tests.
    Cleanup of the node-id.h files. The node-id.h file contains
    declarations of functions for setting and getting a node ID number, a
    functionality that exists on many platforms. Since this functionality
    was not considered part of the Contiki core, each platform defined its
    own node-id.h file. This commit attempts to clean this up by
    collecting the node-id.h into a core/sys/node-id.h file that replaces
    the old node-id.h files from the platform directories.
    merge iris and micaz
    Now, all network related initialization code segments are in one file
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Moved net/rime.h to net/rime/rime.h
    Cleanup of the node-id.h files. The node-id.h file contains
    declarations of functions for setting and getting a node ID number, a
    functionality that exists on many platforms. Since this functionality
    was not considered part of the Contiki core, each platform defined its
    own node-id.h file. This commit attempts to clean this up by
    collecting the node-id.h into a core/sys/node-id.h file that replaces
    the old node-id.h files from the platform directories.
    Add clock_delay_us and clock_set_seconds to clock.h. Modify clock_wait to use clock_time_t.
    Remove the troublesome avr/dev/delay.* files.
    Add PLATFORM_NAME and combine the confusing *_REVISION defines into a single PLATFORM_TYPE
    merge iris and micaz
    1. Initialized SLIP when uIPv4 or uIPv6 is used.
    2. Random number generator is initialized using both node id and unique hardware id
    3. Printing MAC address is moved to network initialization section.
    Two comment fixes
    Added node id restoring at the boot-up.
    1. Add MAC address displaying during the booting.
    2. Set LEDs to turn on at different stages of the booting process.
    Initial files of the MICAz port.
    Renamed serial module to serial-line
    * Addition of Meshnetics Zigbig platform by Frederic Thepaut <frederic.thepaut@inooi.com>
    
    * Changed default RavenUSB timeout to 3 seconds... seems to give most reliable transmissions
    Changed copyright.
    Fix to allow building without LCD interface
    example\webserver-ipv6-raven works!
    Contiki port for the Atmel AVR Raven board
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Add clock_delay_us and clock_set_seconds to clock.h. Modify clock_wait to use clock_time_t.
    Remove the troublesome avr/dev/delay.* files.
    Add PLATFORM_NAME and combine the confusing *_REVISION defines into a single PLATFORM_TYPE
    merge iris and micaz
    adapted to the new spi and cc2420 naming - and split config file
    Fix clock.h warnings caused by multiple, conflicting documentation blocks of clock functions
    Add clock_delay_us and clock_set_seconds to clock.h. Modify clock_wait to use clock_time_t.
    Remove the troublesome avr/dev/delay.* files.
    Add PLATFORM_NAME and combine the confusing *_REVISION defines into a single PLATFORM_TYPE
    Restore micaz/dev/clock.c, mysteriously renamed to iris/dev/sensors/battery-sensor.c
    removed obsolete leds_[color]() functions, replaced by leds_{on,off}()
    allow LEDS_[COLOR] to be configured by platform-conf
    Minor code style fixes
    added energest on all parts of leds API and some cleanup
    Moved energest.{c,h} from core/lib to core/sys: power profiling is a system mechanism, not a library
    Experimental energy estimation code
    fixed leds invert
    Made LEDS not count
    Import of the contiki-2.x development code from the SICS internal CVS server
    removed execute flag of source files (avoids diff problems with egit)
    Device driver for the Dallas Semiconductor DS2401 chip.
    Platform-specific devices.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Adding machine dependent SLIP routines for UART0.
    added some files for MSP430X I/O
    Made SLIP code coexist with ordinary serial code. If WITH_UIP=1, the SLIP code is used instead.
    Added energy estimation
    Removed clock_delay()
    Added clock_delay() between characters to avoid dropping them
    * General stuff for different baudrates:
    
        - ubr argument to slip_arch_int
    
        - macros for calculating ubr
    
        - argument -Bbaudrate to tools tunslip and scat
    * Bump speed over serial to 115200 (Tmote sky only).
    Use LPM4_EXIT to return from sleep on msp430.
    Import of the contiki-2.x development code from the SICS internal CVS server
    DOS EOL and indentation fixes (platform files)
    
    - Removed some DOS EOLs
    - Changed some tabs to spaces
    - Removed some trailing whitespaces
    
    Closes #6
    Initial files of the MICAz port.
    Import of the contiki-2.x development code from the SICS internal CVS server
    DOS EOL and indentation fixes (platform files)
    
    - Removed some DOS EOLs
    - Changed some tabs to spaces
    - Removed some trailing whitespaces
    
    Closes #6
    removed execute flag of source files (avoids diff problems with egit)
    Adding ADC functions
    Initial files of the MICAz port.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved the cc2420 driver into a separate dev/cc2420 module
    adapted to the new spi and cc2420 naming - and split config file
    Initial files of the MICAz port.
    Renamed serial module to serial-line
    removed duplicate inclusion of header, and sorted the entries.
    Do not include codeprop.h by default.
    only include sdspi.h if WITH_SDC is on.
    removed uncommented line.
    do not declare msp430_cpu_init here.
    cr->lf
    Scatterweb MSB430 port.
    Renamed tr1001-drv to tr1001-uip
    Added node-id.h
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    removed execute flag of source files (avoids diff problems with egit)
    Adding ADC functions
    Platform-specific devices.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    DOS EOL and indentation fixes (platform files)
    
    - Removed some DOS EOLs
    - Changed some tabs to spaces
    - Removed some trailing whitespaces
    
    Closes #6
    Device driver for the Dallas Semiconductor DS2401 chip.
    DOS EOL and indentation fixes (platform files)
    
    - Removed some DOS EOLs
    - Changed some tabs to spaces
    - Removed some trailing whitespaces
    
    Closes #6
    Initial files of the MICAz port.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    DOS EOL and indentation fixes (platform files)
    
    - Removed some DOS EOLs
    - Changed some tabs to spaces
    - Removed some trailing whitespaces
    
    Closes #6
    Initial files of the MICAz port.
    removed execute flag of source files (avoids diff problems with egit)
    Adding battery sensor
    added missing include
    minor cleanup
    refactored some ADC code into sky-sensors and made it possible to turn off sensors to save energy
    Updated to match the new sensors API
    Updated to match the new sensors API
    fixed for updated sensors API
    fixed Sky platform for new sensor APIs
    changed sky sensors to new api
    fixed battery sensor for sky platform
    Preliminary untested code for the internal MSP430 battery sensor
    Returning the actual value rather than something read during an interrupt
    Temporary deletion of files due to problems with the CVS repository
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    1. Changed fuse bits to preserve EEPROM through the chip erase when uploading a new OS image.
    2. Added a new make rule to erase EEPROM through the chip erase.
    Initial files of the MICAz port.
    Adding an example application for battery sensor
    removed execute flag of source files (avoids diff problems with egit)
    Adding a Makfile for example applications.
    Added a Contiki app basically combining apps/netconf and apps/dhcp. It's a 6502 specific app as it doesn't configure the running uIP instance but instead writes to the 'contiki.cfg' configuration file used by 6502 apps to configure uIP.
    Now that we started adding files to the CVS which are normally generated with a 'save...' make goal we can remove the DEFAULT_TARGET mechanism altogether and just add Makefile.target files.
    Many project Makefiles build just one Contiki binary. Up to now the name of this binary was only available to the 'all' goal as prerequisite. So it was possible to create a non-project-specific rule to i.e. load that binary into the target device.
    
    Therefore I introduced the make variable CONTIKI_PROJECT. Now a typical project Makefile starts with:
    
    CONTIKI_PROJECT = hello-world
    all: $(CONTIKI_PROJECT)
    replaced blink with blinker that uses more sensors
    ESB examples
    Added an example application to show the usage of the Contiki Multi-threading library.
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    removed execute flag of source files (avoids diff problems with egit)
    Initial files of the MICAz port.
    removed refences to printf2log.h
    cooja hello world (+ include printf2log.h)
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Initial files of the MICAz port.
    removed refences to printf2log.h
    cooja hello world (+ include printf2log.h)
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    removed execute flag of source files (avoids diff problems with egit)
    Initial files of the MICAz port.
    removed refences to printf2log.h
    cooja hello world (+ include printf2log.h)
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    removed execute flag of source files (avoids diff problems with egit)
    Initial files of the MICAz port.
    removed refences to printf2log.h
    cooja hello world (+ include printf2log.h)
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    removed execute flag of source files (avoids diff problems with egit)
    Initial files of the MICAz port.
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    llsec: Added a layer in between NETSTACK_MAC and NETSTACK_NETWORK for implementing link layer security
    Added the necessary modules to make the eval-adf7xxxmb4z port compile
    Add eval-adf7xxxmb4z platform makefile.
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    cc2538: Add adc driver and example
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Changed the name of the rimeaddr module to linkaddr
    Updated the include paths to point to the new places
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    Cleanup UIP_CONF_IPV6_RPL configuration
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    rl78: Change RIMEADDR_CONF_SIZE to LINKADDR_CONF_SIZE because the rimeaddr module has been renamed to linkaddr.
    eval-adf7xxxmb4z: Use the nullrdc driver instead of sicslowmac.
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Fix naming issues and includes in uip-ds6-nbr.h
    Removed now unused per-module neighbor table size configs. Use NEIGHBOR_CONF_MAX_NEIGHBORS instead.
    platform/econotag: Allow RPL and Router settings to be overridden.
    Changed the name of the IPv6 number of route entries configuration from UIP_CONF_DS6_ROUTE_NBU to UIP_CONF_MAX_ROUTES.
    Use the RTC only as the main timer.
    
    This is a major change to how the main tick interrupt is handled on
    the mc1322x platforms. Instead of using two timer resources, TMR0 and
    RTC, this patch unifies all the timers to use the RTC. This is enabled by
    implementing etimers as scheduled rtimers. The main advantage (aside
    from freeing TMR0 for general use) is have the Contiki timebase come
    from the same source that will be used for sleeping and wakeup.
    Newer and cleaner TARGET=econotag as well as robust mc13224v
    configuration system.
    
    (also deprecate TARGET=redbee-econotag)
    
    - mc13224v now automatically probes hardware config for buck converter
    and 32kHz crystal as well as automatically monitors battery voltage
    and manages the buck accordingly.
    
    - new flashed based config system for mc13224v parameters such has
      radio modes (demod, autoack), nvmtype, mac address, channel and
      power.
    
    - considerably cleaned up econotag platform code (suffered from severe
      case of bit-rot)
    replace MAC_CONF_CHANNEL_CHECK_RATE with
    NETSTACK_CONF_RDC_CHANNEL_CHECK_RATE for redbee-dev and econotag
    
    Removed the obsolete MAC_CONF_CHANNEL_CHECK_RATE (now replaced with
    NETSTACK_CONF_RDC_CHANNEL_CHECK_RATE)
    change mc1322x rtimers to 32-bit
    
    hardcode a close default value for the RTC
    mc1322x: build fixes for uart2
    Renamed nullrdc to nullrdc-noframer and nullrdc-framer to nullrdc.
    
    nullrdc (previously nullrdc-framer) is now a RDC implementation that
    does not do any radio duty cycling but supports link layer addresses
    and frame format via framer (for example 802.15.4). nullrdc can now be
    used in the same way as contikimac, xmac, etc.
    
    nullrdc-noframer (previously nullrdc) is a null RDC implementation
    that does not do any radio duty cycling, does not add any header of its
    own to the packets, and does not support link layer addresses.
    change maca_raw_mode to contiki_maca_raw_mode
    use the nullmac and nullrdc with framer layer.
    initial commit for the redbee-dev platform
    use sicslowmac_driver instead of contikimac_driver --- since contikimac
    power saving doesn't seem to be working.
    enable sicslowpan fragmentation
    increase UIP buffer size to 1300 to allow full size ipv6 packets
    don't need BLOCKING_TX anymore with the recent bugfixes
    bring econotag conf in-sync with sky.
    
    Increase the size of the route and neighbor tables; remove the uIP
    packet buffer queue for every neighbor to save RAM
    initial redbee-econotag commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    eval-adf7xxxmb4z: Corrections to the platform README, update URLs to point to the mainline Contiki.
    Increase the default baudrate to 38400 bps for RL78.
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Added mouse support for the Atari.
    Final adjustments for the switch from 'atari' to 'atarixl'.
    Finetuned Atari XL memory layout.
    
    The Telent server includes both uIP logging and uIP client functionality. Therefore uip.o is somewhat larger.
    Adjusted Makefile to the final 'atarixl' cc65 target.
    
    - Assign source files to the splitted shadow RAM areas.
    - Switched to dynamic Ethernet driver loading.
    Allow text screen memory to be aligned to 0x2000.
    Made use of Atari XL shadow RAM.
    
    The new Atari XL target allows cc65 programs to make use of
    the shadow RAM. This allows to turn aon all features of the
    web browser - and will allow for additional improvements to
    come :-)
    Removed some more old RCS tags from the Contiki source tree.
    Added platform 'Atari XL'.
    
    Don't be afraid, I'm not trying to have more retro platforms than "real" platforms ;-)
    The platform 'atarixl' will replace the platform 'atari'. However I need both for some
    transition period.
    Moved from last cc65 release (2.13.3) to recent cc65 snapshot (2.13.9).
    
    Relevant cc65 changes...
    
    General:
    - The compiler generates "extended" dependency info (like gcc) so there's no need for postprocessing whatsoever :-)
    - The linker is very pernickety regarding the ordering of cmdline options so a custom linker rule is necessary :-(
    
    Apple2:
    - The various memory usage scenarios aren't specified anymore via separate linker configs but via defines overriding default values in the builtin linker config.
    
    Atari:
    - The builtin linker config allows to override the start addr so there no more need for a custom linker config.
    - The C library comes with POSIX directory access. So there's no more need for for a custom coding.
    
    CBM:
    - The C library comes with POSIX directory access. So there's no more need for for a custom coding.
    Made Atari build compabile with make.exe from GnuWin32 and cmd.exe. cmd.exe comes with a builtin mkdir which doesn't understand -p. However -p  isn't necessary as long as the disk creation works - and therefore the directory is successfully deleted.
    Since a few days the cc65 trunk contains a POSIX dirent implementation for the Atari. Until a new cc65 release is available - and Contiki has switched to that release - I'll borrow the implementation from the cc65 trunk.
    Added cc65 target 'atari' for Atari 8-bit machines. This addition was triggered by exsistence of http://www.atari8ethernet.com/.
    Made cfs-based webserver example compatible with 8.3 file systems.
    Made cfs-based webserver example compatible with 8.3 file systems.
    Just name the binary always 'contiki'.
    Added Platform-specific File System (PFS) for the C128 contributed by Kajtar Zsolt.
    Explicitly set CBM filetypes (PRG, USR).
    Minor wording change.
    Use only the base name of projects as program file name.
    Now that we have at least two examples working on the cc65 targets it is preferable to not name the program files all 'contiki'.
    cc65 2.13. allows to define all necessary paths through the single env var CC65_HOME.
    cc65 2.13. comes with builtin linker configs defining the __STACKSIZE__ symbol as weak. This allows to override the stacksize from the linker command line thus eliminating the need for linker configs maintained by Contiki.
    Replace non-fully-functional hack with the new gnumake variable CONTIKI_PROJECT.
    Added make target 'disk' for creating a .d71 disk image using c1541.
    Added C128 port. It runs the example webserver both in the cgi and cfs variant - although the latter only with a reduced MTU size due to memory constraints.
    No reason to not just compile petsciiconv.c for all cc65 targets.
    Activated PETSCII support on the C64.
    For now delegate all work to the 6502 makefile.
    Added support for the cc65 target 'apple2enh' (Enhanced Apple //e).
    Moved the 6502 custom rules into its own Makefile.customrules-6502 file
    Changed the parameter 'char * data' of process_start to the
    type process_data_t. This was an artifact when the choice was
    made to use the void * type for the data parameter in processes.
    
    Changed parameter 'void * data' of process_post_synch to
    process_data_t for consistency.
    
    Checked all the uses of process_start() in contiki and fixed casts
    of the data parameter.
    Copied 'contiki_arg[c|v]' from 'native' to the other desktop targets.
    
    - On the retro targets support for 'contiki_arg[c|v]' is optional as accesing arg[c|v] is rather expensive.
    Initialize tcpip process before resolver process.
    
    Since introduction of mDNS (https://github.com/contiki-os/contiki/commit/f145c17039b778cde1d53b6828757cd91dc8480a)
    the resolver process initialization depends on the tcpip process
    already being initialized (because of the call to udp_new()).
    Added platform 'Atari XL'.
    
    Don't be afraid, I'm not trying to have more retro platforms than "real" platforms ;-)
    The platform 'atarixl' will replace the platform 'atari'. However I need both for some
    transition period.
    Remove tab chars from retro C sources.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Just always call process_run() and etimer_request_poll() in turn - like the "major" platforms do.
    There's no point in pulling in cfs-posix-dir.c if the POSIX functions it depends on are dummies anyway.
    Added support for the FTP standalone client to the atari target.
    On the Atari it seems reasonable to start on a clear b&w screen even for non-CTK apps.
    Added cc65 target 'atari' for Atari 8-bit machines. This addition was triggered by exsistence of http://www.atari8ethernet.com/.
    Up to now *all* Contiki apps for the Apple2 were built for maximal RAM - which means that they can't return to OS level but must reboot on exit. However many apps can get along well with 1kB less memory - which allows them to exit to the OS.
    Therefore now the default is 1kB less memory - and apps actually needing maximal RAM can get it by adding WITH_REBOOT to their DEFINES.
    Removed closing of stdin, stdout (and stderr on the Apple2). It was introduced in order to maximize the number of available file handles for the webserver. However none of the target machine DOSes allows to open a single file several times diminishing the intended effect very much. One the other hand not being able to "just printf() something" causes trouble over and again - i.e. hello-world seemingly not working...after all a typical case of german over-enigneering ;-)
    cc65 2.13. allows to
    - explicitly set 80 column mode
    - control exit behaviour from the program itself (instead of requiring a loader variant).
    Added lseek dummy.
    Free up unused file descriptors.
    Now that process initialization has been changed (back) to synchronous it needs to be called after reading the config file in order to preserve the existing logic.
    Removed finally unnecessary cast.
    Implement cfs API on preprocessor level using POSIX functions..
    Made use of the new high-level config macros.
    Soe we're finally back at reducing the memory footprint be avoiding to pull in large C-library enitities.
    Made use of config file read function.
    Use common log implementation for cc65 targets.
    Switched to lowercase file name and do consistently "first-log then operate".
    Added user feedback on Ethernet configuration.
    Added user feedback on IP configuration.
    Include dummy for posix function missing in cc65 C-library.
    Shortened welcome message.
    Made use of the generic Ethernet driver for cc65 targets.
    Added a naive clock implementation based on main loop counting for the Apple2 as it doesn't have a hardware clock.
    Removed clock stuff from main file.
    Added support for the cc65 target 'apple2enh' (Enhanced Apple //e).
    Moved error_exit() to the Win32 Contiki Core.
    Now that they assumed a shape ...
    Import of the contiki-2.x development code from the SICS internal CVS server
    Added mouse support for the Atari.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Made use of Atari XL shadow RAM.
    
    The new Atari XL target allows cc65 programs to make use of
    the shadow RAM. This allows to turn aon all features of the
    web browser - and will allow for additional improvements to
    come :-)
    Added platform 'Atari XL'.
    
    Don't be afraid, I'm not trying to have more retro platforms than "real" platforms ;-)
    The platform 'atarixl' will replace the platform 'atari'. However I need both for some
    transition period.
    Reorganized web page attribute data handling.
    
    - Up to now the web browser used several fixed size arrays to hold the various types attribute data of the web page. This turned out to be way to inflexible for any non-trivial web page. Therefore now all attribute data is stored in a single buffer one after the other as they arrive from the parser only occupying the memory actually needed. This allows for pages with many links with rather short URLs as well as pages with few link with long URLs as well as pages with several simple forms as well as pages with one form with many form inputs.
    
    - Using the actual web page buffer to hold the text buffers of text entry fields was in general a cool idea but in reality it  is often necessary to enter text longer than the size of the text entry field. Therefore the text buffer is now stored in the new unified attribute data buffer.
    
    - Splitting up the process of canonicalizing a link URL and actually navigating to the resulting URL allowed to get rid of the 'tmpurl' buffer used during form submit. Now the form action is canonicalized like a usual link, then the form input name/value pairs are written right into the 'url' buffer and afterwards the navigation is triggered.
    
    - Support for the 'render states' was completely removed. The only actually supported render state was centered output. The new unified attribute buffer would have complicated enumerating all widgets added to the page in order to adjust their position. Therefore I decided to drop the whole feature as the <center> tag is barely used anymore and newer center attributes are to hard to parse.
    Remove tab chars from retro C sources.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Since a few days the cc65 trunk contains a POSIX dirent implementation for the Atari. Until a new cc65 release is available - and Contiki has switched to that release - I'll borrow the implementation from the cc65 trunk.
    There's no point in pulling in cfs-posix-dir.c if the POSIX functions it depends on are dummies anyway.
    Added support for the FTP standalone client to the atari target.
    Now that I understand that the Atari is in fact monochrome using black & white seems the logical consequence.
    Added cc65 target 'atari' for Atari 8-bit machines. This addition was triggered by exsistence of http://www.atari8ethernet.com/.
    The cc65 C64 memory layout offers enough memory for larger URLs so have a nice scrolling URL text entry field.
    The maximum number of C64 web server connections is now equal to the (new) default as the CBM PFS allows for 10 open files.
    Explicitly turn on forms and centering for consistency reasons.
    Removed closing of stdin, stdout (and stderr on the Apple2). It was introduced in order to maximize the number of available file handles for the webserver. However none of the target machine DOSes allows to open a single file several times diminishing the intended effect very much. One the other hand not being able to "just printf() something" causes trouble over and again - i.e. hello-world seemingly not working...after all a typical case of german over-enigneering ;-)
    Added configuration values for the email client example.
    Added configuration values for the IRC client example.
    Activate uIP logging when "high level config" logging is enabled.
    cc65 2.13. features a default-per-target mouse driver so there's no need to deal with their names in Contiki anymore.
    Introduced yet another high-level config macro.
    Introduced some more high-level config macros.
    Introduced high-level macros to be set on the make command line. They allow easy configuration of Contiki for typical (cc65-)project scenarios.
    Added target-specifc mouse configuration values.
    Added target-specifc ctk (and www) configuration values.
    Limit the maximum number of simultaneous connections to the cfs webserver to the maximum number of open files.
    Set the maximum number of simultaneous connections to the cfs webserver to the maximum number of uIP connections.
    Set the maximum number of simultaneous connections to the cgi webserver to the maximum number of uIP connections.
    Renamed 6502-conf.h into 6502def.h to be in line with similiar files created in the meanwhile and added C99 names.
    Start out with minimal Contiki config.
    Reduced Contiki config to the minimum.
    Made endianess configuration actually work.
    Factored out settings specific more to architecture and/or toolchain rather than specific target.
    Added support for the cc65 target 'apple2enh' (Enhanced Apple //e).
    Several minor consistency improvements.
    Added platform 'Atari XL'.
    
    Don't be afraid, I'm not trying to have more retro platforms than "real" platforms ;-)
    The platform 'atarixl' will replace the platform 'atari'. However I need both for some
    transition period.
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    Added section on 'dir2atr' now that there's an "official" download.
    Added cc65 target 'atari' for Atari 8-bit machines. This addition was triggered by exsistence of http://www.atari8ethernet.com/.
    Only wait for a keypress if the user is told to press a key.
    Added platform 'Atari XL'.
    
    Don't be afraid, I'm not trying to have more retro platforms than "real" platforms ;-)
    The platform 'atarixl' will replace the platform 'atari'. However I need both for some
    transition period.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Soe we're finally back at reducing the memory footprint be avoiding to pull in large C-library enitities.
    Made error_exit() implementation target-specific.
    Made error_exit() globally available.
    Provided a meaningful clock_time() implementation - which btw. makes the Cygwin variant finally work :-)
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add CC26xx common platform files
    Improve wording
    Re-structure CC2538 doxygen module hierarchy
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Confine CC2538 WDT on/off conf inside the driver
    
    Instead of requiring all calls to `watchdog_start` to be
    wrapped inside `#if WATCHDOG_CONF_ENABLE` guards, we control
    things from within the WDT driver itself.
    
    This commit also includes some minor documentation and
    indentation cleanups
    CC2538: Add WATCHDOG_CONF_ENABLE to optionally disable the watchdog timer.
    Improve the CC2538 extended RF API implementation
    
    * Decouple 64-bit address from LINKADDR_SIZE
    * get and set object from/to the start/end of the src/dest buffer
    * We expect size == 8 (rather than size < 8) for both get_ and set_object. Error otherwise
    * The RF no longer sets parameters by itself. We let the platform do this, using the extended API.
    cc2538: uart: Make it possible to use several UARTs simultaneously
    
    This avoids the limitation of having a single UART available at runtime, without
    duplicating code.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    Changed the name of the rimeaddr module to linkaddr
    Updated include paths for the moved files under net/
    cc2538: sys_ctrl: Make it possible to use the 32-kHz crystal
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Add CC26xx common platform files
    Add CC26xx common platform files
    Add CC26xx common platform files
    Add Srf06EB + CC26xx EM files
    Add CC26xx CPU files
    Add MQTT demo for the cc2538dk platform
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add Srf06EB + CC26xx EM files
    Add CC26xx CPU files
    Add MQTT demo for the cc2538dk platform
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add Srf06EB + CC26xx EM files
    Add CC26xx CPU files
    Add MQTT demo for the cc2538dk platform
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add Srf06EB + CC26xx EM files
    Add Srf06EB + CC26xx EM files
    Add Srf06EB + CC26xx EM files
    Add Srf06EB + CC26xx EM files
    Add CC26xx CPU files
    Add MQTT demo for the cc2538dk platform
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add Srf06EB + CC26xx EM files
    Add SensorTag CC2650 files
    Add CC26xx CPU files
    Add MQTT demo for the cc2538dk platform
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add SensorTag CC2650 files
    Add Srf06EB + CC26xx EM files
    Add CC26xx CPU files
    Add MQTT demo for the cc2538dk platform
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add SensorTag CC2650 files
    Add Srf06EB + CC26xx EM files
    Add CC26xx CPU files
    Add MQTT demo for the cc2538dk platform
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add SensorTag CC2650 files
    Add CC26xx CPU files
    Add MQTT demo for the cc2538dk platform
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add SensorTag CC2650 files
    Add SensorTag CC2650 files
    Add Srf06EB + CC26xx EM files
    Add CC26xx CPU files
    Add MQTT demo for the cc2538dk platform
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add SensorTag CC2650 files
    Add SensorTag CC2650 files
    Add CC26xx CPU files
    Add MQTT demo for the cc2538dk platform
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add SensorTag CC2650 files
    Add SensorTag CC2650 files
    Add CC26xx CPU files
    Add MQTT demo for the cc2538dk platform
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add SensorTag CC2650 files
    Add Srf06EB + CC26xx EM files
    Add CC26xx CPU files
    Add MQTT demo for the cc2538dk platform
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add SensorTag CC2650 files
    Add Srf06EB + CC26xx EM files
    Add CC26xx CPU files
    Add MQTT demo for the cc2538dk platform
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add SensorTag CC2650 files
    Add SensorTag CC2650 files
    Add Srf06EB + CC26xx EM files
    Add SensorTag CC2650 files
    Add CC26xx CPU files
    Add MQTT demo for the cc2538dk platform
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add SensorTag CC2650 files
    Add Srf06EB + CC26xx EM files
    Add CC26xx CPU files
    Add MQTT demo for the cc2538dk platform
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add SensorTag CC2650 files
    Add Srf06EB + CC26xx EM files
    Add SensorTag CC2650 files
    Add Srf06EB + CC26xx EM files
    Add SensorTag CC2650 files
    Add SensorTag CC2650 files
    Add CC26xx CPU files
    Tidy-up multicast documentation
    
    * Create a doxygen group and add files to it, so that documents appear as modules rather than simply under files
    * Document plenty of functions, macros, constants, data types which were previously undocumented
    * Re-structure some doxygen comments to improve structure and readability
    Remove now unneeded UIP_CONF_IPV6 guards in net/ipv6 and net/rpl code
    Multicast routing table manipulation
    
    We store multicast routes in a separate table since we don't need
    as much information as we need for normal routes
    Add SensorTag CC2650 files
    Add SensorTag CC2650 files
    Add Srf06EB + CC26xx EM files
    Add CC26xx CPU files
    Add MQTT demo for the cc2538dk platform
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add SensorTag CC2650 files
    Add SensorTag CC2650 files
    Add SensorTag CC2650 files
    Add CC26xx CPU files
    Add MQTT demo for the cc2538dk platform
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add SensorTag CC2650 files
    Add CC26xx CPU files
    Add MQTT demo for the cc2538dk platform
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add SensorTag CC2650 files
    Add Srf06EB + CC26xx EM files
    Add CC26xx CPU files
    Add MQTT demo for the cc2538dk platform
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add SensorTag CC2650 files
    Add CC26xx CPU files
    Add MQTT demo for the cc2538dk platform
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add SensorTag CC2650 files
    Add CC26xx CPU files
    Add MQTT demo for the cc2538dk platform
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add SensorTag CC2650 files
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    llsec: Added a layer in between NETSTACK_MAC and NETSTACK_NETWORK for implementing link layer security
    Added bootloader backdoor configuration for cc2538DK in contiki-conf.h and selector in startup-gcc.c. Updated Makefile.cc2538dk to support direct uploading. Also updated the platform readme to include the workflow with cc2538-bsl.
    Add the explicit list of modules, since we cannot do auto-dependency management of them
    Moved the individual MODULE definitions from the top-level Makefile.include into the individual platforms' Makefiles
    cc2538: Add adc driver and example
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    Don't specify -DUIP_CONF_IPV6 in platform makefiles
    
    Makefile.include has done it for us already, we no longer need to do so ourselves
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Improve wording
    Re-structure CC2538 doxygen module hierarchy
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Confine CC2538 WDT on/off conf inside the driver
    
    Instead of requiring all calls to `watchdog_start` to be
    wrapped inside `#if WATCHDOG_CONF_ENABLE` guards, we control
    things from within the WDT driver itself.
    
    This commit also includes some minor documentation and
    indentation cleanups
    CC2538: Add WATCHDOG_CONF_ENABLE to optionally disable the watchdog timer.
    Improve the CC2538 extended RF API implementation
    
    * Decouple 64-bit address from LINKADDR_SIZE
    * get and set object from/to the start/end of the src/dest buffer
    * We expect size == 8 (rather than size < 8) for both get_ and set_object. Error otherwise
    * The RF no longer sets parameters by itself. We let the platform do this, using the extended API.
    cc2538: uart: Make it possible to use several UARTs simultaneously
    
    This avoids the limitation of having a single UART available at runtime, without
    duplicating code.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    Changed the name of the rimeaddr module to linkaddr
    Updated include paths for the moved files under net/
    cc2538: sys_ctrl: Make it possible to use the 32-kHz crystal
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Re-structure CC2538 doxygen module hierarchy
    Change default PAN ID for the CC2538DK platform to 0xABCD
    Cleanup UIP_CONF_IPV6_RPL configuration
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    ContikiMAC: Default to contikimac_framer when using Rime over ContikiMAC
    ContikiMAC: Create and parse ContikiMAC header in special framer; Expanded framer interface
    to allow for creating and securing frames in advance; Create and secure frames in advance when sending bursts; Do neither recreate nor resecure frames that come from phase
    Confine CC2538 WDT on/off conf inside the driver
    
    Instead of requiring all calls to `watchdog_start` to be
    wrapped inside `#if WATCHDOG_CONF_ENABLE` guards, we control
    things from within the WDT driver itself.
    
    This commit also includes some minor documentation and
    indentation cleanups
    CC2538: Add FLASH_CONF_ORIGIN and FLASH_CONF_SIZE config parameters.
    CC2538: Add WATCHDOG_CONF_ENABLE to optionally disable the watchdog timer.
    Changes suggested by @bthebaudeau.
    cc2538: uart: Make it possible to use several UARTs simultaneously
    
    This avoids the limitation of having a single UART available at runtime, without
    duplicating code.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    Rename FLASH_CCA_CONF_BOOTLDR_BACKDOOR_PIN to FLASH_CCA_CONF_BOOTLDR_BACKDOOR_PORT_A_PIN.
    CC2538: Add CONF parameters to select boot loader backdoor pin and logic level.
    Added bootloader backdoor configuration for cc2538DK in contiki-conf.h and selector in startup-gcc.c. Updated Makefile.cc2538dk to support direct uploading. Also updated the platform readme to include the workflow with cc2538-bsl.
    CC2538: add secondary location to ieee address
    
    The CC2538 currently has two addressing options: a hardcoded address set
    at compile time or the address stored in primary address section of the
    info page. This commit adds the option to choose the secondary location
    of the ieee address from the info page, or any memory address.
    
    To use, define `IEEE_ADDR_CONF_USE_SECONDARY_LOCATION` in `project-conf.h`
    or similar.
    
    For example:
    
        #define IEEE_ADDR_CONF_USE_SECONDARY_LOCATION 1
    Changed the name of the rimeaddr module to linkaddr
    cc2538dk: Make it possible to override SLIP_ARCH_CONF_ENABLED
    
    As the comment in contiki-conf.h says, the automatic definition of
    SLIP_ARCH_CONF_ENABLED works only if UIP_FALLBACK_INTERFACE is tied to SLIP. If
    UIP_FALLBACK_INTERFACE is set to another interface, SLIP_ARCH_CONF_ENABLED is
    still automatically set to 1, leading to unwanted SLIP_END characters from
    dbg.c:putchar() being printed on the UART.
    
    This change makes it possible to force the definition of SLIP_ARCH_CONF_ENABLED
    (e.g. from project-conf.h), so that it can be disabled if UIP_FALLBACK_INTERFACE
    is used with something else than SLIP.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538dk: Make it possible to override UIP_CONF_TCP_MSS
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    Add conf checks to CC2538dk conf file
    
    Allows for specific apps to control more settings of the platform.
    Fix naming issues and includes in uip-ds6-nbr.h
    Removed now unused per-module neighbor table size configs. Use NEIGHBOR_CONF_MAX_NEIGHBORS instead.
    Read IEEE address from InfoPage by default
    Adjust a config define to its new name
    Use no metric container when having MRHOF with ETX, as specified in RFC6719. Renamed rpl-of-etx to rpl-mrhof.
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Update README.md
    
    Adding new command for ftdi_sio which applies to Kernel>3.12 used by Ubuntu 14.04 LTS
    cc2538: uart: Make it possible to use several UARTs simultaneously
    
    This avoids the limitation of having a single UART available at runtime, without
    duplicating code.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    Add a note about "make cc2538-demo.lst" to the platform README.
    Eliminate UART_CONF_IBRD and UART_CONF_FBRD.
    Added bootloader backdoor configuration for cc2538DK in contiki-conf.h and selector in startup-gcc.c. Updated Makefile.cc2538dk to support direct uploading. Also updated the platform readme to include the workflow with cc2538-bsl.
    CC2538: add secondary location to ieee address
    
    The CC2538 currently has two addressing options: a hardcoded address set
    at compile time or the address stored in primary address section of the
    info page. This commit adds the option to choose the secondary location
    of the ieee address from the info page, or any memory address.
    
    To use, define `IEEE_ADDR_CONF_USE_SECONDARY_LOCATION` in `project-conf.h`
    or similar.
    
    For example:
    
        #define IEEE_ADDR_CONF_USE_SECONDARY_LOCATION 1
    Use -Os for CC2538 builds
    
    As discussed in #503, -Os was broken with one of the toolchains
    recommended in the platform's README and for that reason we were
    using -O2 by default.
    
    This commit sets the default to -Os and updates the README to no
    longer recommend the toolchain in question
    cc2538: Add adc driver and example
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    Remove LPP discussion from the cc2538 README
    cc2538: usb: Use the new LPM peripheral registration
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: lpm: Add registration mechanism for peripherals
    
    Some peripherals have their clocks automatically gated in PM1+ modes, so they
    cannot operate. This new mechanism gives peripherals a way to prohibit PM1+
    modes so that they can properly complete their current operations before
    entering PM1+.
    
    This mechanism is implemented with peripheral functions registered to the LPM
    module. These functions return whether the associated peripheral permits or not
    PM1+ modes. They are called by the LPM module each time PM1+ might be possible.
    If any of the peripherals wants to block PM1+, then the system is only dropped
    to PM0.
    
    Partly from: George Oikonomou
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    Document alternative toolchain for the CC2538DK
    Update readme references and tool download URLs
    CC2538 Documentation typo and grammar fixes
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Re-structure CC2538 doxygen module hierarchy
    Changes suggested by @bthebaudeau.
    cc2538: uart: Make it possible to use several UARTs simultaneously
    
    This avoids the limitation of having a single UART available at runtime, without
    duplicating code.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    Un-indent preprocessor directives.
    Rename FLASH_CCA_CONF_BOOTLDR_BACKDOOR_PIN to FLASH_CCA_CONF_BOOTLDR_BACKDOOR_PORT_A_PIN.
    CC2538: Add CONF parameters to select boot loader backdoor pin and logic level.
    Added bootloader backdoor configuration for cc2538DK in contiki-conf.h and selector in startup-gcc.c. Updated Makefile.cc2538dk to support direct uploading. Also updated the platform readme to include the workflow with cc2538-bsl.
    cc2538: Add header file for flash CCA page and use it
    
    Create a dedicated header file with all the definitions for the flash lock bit
    page and customer configuration area. This avoids duplicating those definitions
    in the startup-gcc.c files of all CC2538-based platforms, and this also allows
    to easily manipulate the CCA from outside startup-gcc.c (e.g. for on-the-air
    firmware update).
    
    The definitions are now complete contrary to what was in startup-gcc.c:
     - Definitions have been added to select the bootloader backdoor pin and active
       level if enabled.
     - Definitions have been added to access the page and debug lock bits. The debug
       lock bit can be used to prevent someone from reading back a programmed
       firmware through JTAG if the firmware binary image has to be confidential,
       which should be combined with a disabled bootloader backdoor.
     - The application entry point is now tied to the beginning of the .text section
       instead of to the beginning of the flash. This allows projects using custom
       linker scripts to place the application entry point anywhere in the flash,
       which can be useful e.g. for on-the-air firmware update.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538dk: startup-gcc: Do not redefine SYS_CTRL_EMUOVR
    
    SYS_CTRL_EMUOVR is already defined in sys-ctrl.h, so #include this header file
    instead of redefining SYS_CTRL_EMUOVR in startup-gcc.c.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    Make the CC2538 UART driver more configurable
    
    * We can now very easily switch between UART0 and UART1 through a define
    * We can also configure the UART RX and TX port/pin through defines
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    cc2538: Add adc driver and example
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    cc2538: gpio: Use accessor macros
    
    Use the GPIO accessor macros instead of copying raw register access code all
    over the place. This is cleaner and less error prone.
    
    This fixes the setting of the USB pull-up resistor that worked only by chance on
    the CC2538DK because it is controlled by the pin 0 of the used GPIO port.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    cc2531: Added a new USB demo project (CDC-ACM)
    
    See Pull Request #18
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Uncrustified platform/cc2538dk/dev/button-sensor.c
    cc2538: Clean up port and pin definitions
    
    Homogenize port and pin definitions naming:
     - PERIPHERAL_FUNCTION_PORT for the port ID,
     - PERIPHERAL_FUNCTION_PIN for the pin ID,
     - PERIPHERAL_FUNCTION_PORT_BASE for the port base,
     - PERIPHERAL_FUNCTION_PIN_MASK for the pin mask.
    
    Define only PERIPHERAL_FUNCTION_PORT and PERIPHERAL_FUNCTION_PIN in board.h, and
    deduce PERIPHERAL_FUNCTION_PORT_BASE and PERIPHERAL_FUNCTION_PIN_MASK in the
    driver from the former definitions.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    cc2538: Add adc driver and example
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Re-structure CC2538 doxygen module hierarchy
    Improve wording, fix warnigs in the SSI/SPI docs
    cc2538: uart: Make it possible to use several UARTs simultaneously
    
    This avoids the limitation of having a single UART available at runtime, without
    duplicating code.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    [CC2538-SPI] Implement SPI_FLUSH, spi mode, !CS
    
    Because the CC2538 has a multi-byte SPI RX FIFO, flushing the buffer
    requires more than just a single read. This adds a loop that empties the
    entire RX buffer on a FLUSH().
    
    Different SPI chips needs different SPI settings. This commit adds a
    function that allows chip drivers to configure the SPI peripheral before
    using it.
    
    The frame pin the driver was using as a chip select does not work as
    most devices expect it to. It toggles after every byte, and most chips
    interpret that as end of message. To make drivers more reliable, each
    chip driver should setup a GPIO and assert it as needed.
    cc2538: Add adc driver and example
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: Clean up port and pin definitions
    
    Homogenize port and pin definitions naming:
     - PERIPHERAL_FUNCTION_PORT for the port ID,
     - PERIPHERAL_FUNCTION_PIN for the pin ID,
     - PERIPHERAL_FUNCTION_PORT_BASE for the port base,
     - PERIPHERAL_FUNCTION_PIN_MASK for the pin mask.
    
    Define only PERIPHERAL_FUNCTION_PORT and PERIPHERAL_FUNCTION_PIN in board.h, and
    deduce PERIPHERAL_FUNCTION_PORT_BASE and PERIPHERAL_FUNCTION_PIN_MASK in the
    driver from the former definitions.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: gpio: Use accessor macros
    
    Use the GPIO accessor macros instead of copying raw register access code all
    over the place. This is cleaner and less error prone.
    
    This fixes the setting of the USB pull-up resistor that worked only by chance on
    the CC2538DK because it is controlled by the pin 0 of the used GPIO port.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    Added SPI driver for CC2538
    
    This uses the core/dev/spi.h header and implements the spi_init()
    function and the various macros for SPI operation. ssi.h contains all of
    the register locations and information.
    
    This implementation is not very versatile, mostly because I don't how to
    make it flexible in the contiki system. It supports pin muxing for the
    four spi pins, but other than that picks sensible defaults.
    
    The SPI macros (like SPI_READ()) are defined in
    cpu/cc2538/spi-arch.h. In order to use the SPI driver, add the following
    includes to your project:
    
        #include "spi-arch.h
        #include "dev/spi.h"
    Make the CC2538 UART driver more configurable
    
    * We can now very easily switch between UART0 and UART1 through a define
    * We can also configure the UART RX and TX port/pin through defines
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    cc2538: Add adc driver and example
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Reincarnate the sensinode/cc2430 port
    Code style fixes: sensinode
    Sensinode putdec() debugging
    Renamed sensinode-debug to debug
    Reincarnate the sensinode/cc2430 port
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Updated include paths for the moved files under net/
    cc2530dk and Sensinode: Local copy of uip-debug.c
    
    Copied this file to the platform directories and
    changed it to use putstring(), puthex() etc so
    that we can print addresses without linking in
    printf
    
    See Pull Request #20
    Add PRINTA so direct calls to debug routines will always print
    Several compiler warning fixes:
    
         * msp430: fix "implicit declaration of function" warnings in clock.c, by including watchdog.h;
         * sky: fix a couple pointer target signedness warnings;
         * core: fix several signed/unsigned comparison warnings;
         * framer-802154: "const static" -> "static const" to fix compiler warnings;
         * core: comment or remove unused variables and function definitions.
    
    Signed-off-by: Lionel Debroux <lionel_debroux@yahoo.fr>
    Signed-off-by: Mariano Alvira <mar@devl.org>
    added uip-debug utilities
    slip.c:
            char is signed but uip_buf is unsigned
    
    spi.h:
            casted unused values to void
    
    autostart.c:
    autostart.h:
            The array itself should be const but the processes pointed to
            should not.
    
    profile-aggregates.c:
            sizeof returns unsigned long on my platform
    Debug output
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    llsec: Added a layer in between NETSTACK_MAC and NETSTACK_NETWORK for implementing link layer security
    Fix MODULES for the Sensinode platform
    Add the explicit list of modules, since we cannot do auto-dependency management of them
    Add a sensible set of modules for the sensinode platform
    Don't specify -DUIP_CONF_IPV6 in platform makefiles
    
    Makefile.include has done it for us already, we no longer need to do so ourselves
    No longer build rpl-of0 for Sensinodes
    Fix 8051 port builds to play nicely with #173
    Makefiles: Allow setting UIP_CONF_IPV6=0 to work as expected.
    
    Setting UIP_CONF_IPV6 to zero from the make build command line is
    something that seems like it should ensure that IPv6 is disabled, but in
    fact it actually *enables* IPv6. This seems counter intuitive, so this
    patch changes the behavior of the makefiles to handle this case
    properly.
    Minor Sensinode build cleanup
    Renamed sensinode-debug to debug
    Reincarnate the sensinode/cc2430 port
    Fixed typo
    move RIME declaration from cpu/cc2430/Makefile.cc2430 .  (or at least what I recall, did this months ago!)
    Initial commit of Sensinode platform files.
    Updated include paths for the moved files under net/
    Port apps, examples, platforms and tools so they use the new neighbor and route API.
    Update to the new ds6_route API
    Code style fixes: sensinode
    We can now use SDCC's __nonbanked feature
    
    This allows us to reduce CODE footprint of SDCC projects
    built with --model-huge. Use carefully!
    
    * Added a facility which allows us to enable/disable the
      feature from the CPU dir (CC_CONF_NON_BANKED_OPTIMIZATION)
    * Added the CC_NON_BANKED keyword to some platform files
      (expands to __nonbanked)
    * Started using this for some examples
    Some uN_t had crept back in cc2530dk and sensinode.
    
    Changed to uintN_t plus a bit of code formatting
    Reincarnate the sensinode/cc2430 port
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Code style fixes: sensinode
    Copied cc2530 stack functions to the cc2430 port
    Sensinode/cc2430 stack depth optimisation
    
    This replicates the method used by the cc2530 port
    Sensinode main variable optimsations:
    
    r is now uint8_t, allocated to registers
    len is uint16_t for more efficent arithmetic
    
    (Changes replicated from the 253x port, originally
    contributed by Philippe Retornaz - EPFL)
    Changed the cc2430 sleep_flag to uint8_t
    Adjust cc2x3x ports to the new clock API
    We can now use SDCC's __nonbanked feature
    
    This allows us to reduce CODE footprint of SDCC projects
    built with --model-huge. Use carefully!
    
    * Added a facility which allows us to enable/disable the
      feature from the CPU dir (CC_CONF_NON_BANKED_OPTIMIZATION)
    * Added the CC_NON_BANKED keyword to some platform files
      (expands to __nonbanked)
    * Started using this for some examples
    Stack-friendly cc243x clock ISR enabled by default
    
    This new approach (CLOCK_CONF_ACCURATE=0) was not as inaccurate
    as originally thought. In fact, it has pretty much the same
    accuracy as the old, stack-hungry version.
    
    * Renamed the define from CLOCK_CONF_ACCURATE (1: old) to
      CLOCK_CONF_STACK_FRIENDLY (1: new) to stop implying
      that one is more accurate than the other.
    * Using CLOCK_CONF_STACK_FRIENDLY by default.
    Renamed a config define to better match contiki's naming philosophy
    Renamed sensinode-debug to debug
    Solved a text encoding issue
    Deleted the old Sensinode 'read mac from flash' routine.
    
    Since the introduction of a purpose-written routine, the old
    generic one (which was written in asm) was never being used.
    There was a configuration directive which allowed us to switch
    between the two. All references to this configuration directive
    have also been removed.
    Reincarnate the sensinode/cc2430 port
    - Upgraded the Sensinode platform to use sicslowmac.c
    - Improved the rime address setup, setting the RF driver addresses (byte order may not be correct)
    Initial commit of Sensinode platform files.
    Updated include paths for the moved files under net/
    Code style fixes: sensinode
    We can now use SDCC's __nonbanked feature
    
    This allows us to reduce CODE footprint of SDCC projects
    built with --model-huge. Use carefully!
    
    * Added a facility which allows us to enable/disable the
      feature from the CPU dir (CC_CONF_NON_BANKED_OPTIMIZATION)
    * Added the CC_NON_BANKED keyword to some platform files
      (expands to __nonbanked)
    * Started using this for some examples
    Reincarnate the sensinode/cc2430 port
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Changed the name of the rimeaddr module to linkaddr
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Fix naming issues and includes in uip-ds6-nbr.h
    Removed now unused per-module neighbor table size configs. Use NEIGHBOR_CONF_MAX_NEIGHBORS instead.
    Remove the second 6LoWPAN context from Sensinode
    
    This context was once used in an in-house testbed
    and is not required upstream
    Increase 8051 plaform configurability
    Disable example-defined putchar for 8051 platforms
    Move SLIP interface define to project-conf
    Auto-enable SLIP for 8051-based platforms
    Use no metric container when having MRHOF with ETX, as specified in RFC6719. Renamed rpl-of-etx to rpl-mrhof.
    Fix 8051 port builds to play nicely with #173
    Changed the name of the IPv6 number of route entries configuration from UIP_CONF_DS6_ROUTE_NBU to UIP_CONF_MAX_ROUTES.
    Code style fixes: sensinode
    Copied cc2530 stack functions to the cc2430 port
    Fixed an SDCC compile error when UIP_CONF_ROUTER is 0. UIP_CONF_ROUTER can be configured in project-conf.h
    cc2x3x RPL/non-RPL handling:
    
    - Relevant examples explicitly request it in their Makefile
    - Removed the definition of UIP_CONF_IPV6_RPL from
      contiki-conf.h. If needed, it's defined through a -D
    Comment rewording and formatting
    Stack-friendly cc243x clock ISR enabled by default
    
    This new approach (CLOCK_CONF_ACCURATE=0) was not as inaccurate
    as originally thought. In fact, it has pretty much the same
    accuracy as the old, stack-hungry version.
    
    * Renamed the define from CLOCK_CONF_ACCURATE (1: old) to
      CLOCK_CONF_STACK_FRIENDLY (1: new) to stop implying
      that one is more accurate than the other.
    * Using CLOCK_CONF_STACK_FRIENDLY by default.
    Renamed a config define to better match contiki's naming philosophy
    For cc2x30, moved CLOCK_CONF_SENCOND to the cpu dir.
    
    The value is not really configurable by the platform so having it
    in contiki-conf.h didn't make huge sense.
    Deleted the old Sensinode 'read mac from flash' routine.
    
    Since the introduction of a purpose-written routine, the old
    generic one (which was written in asm) was never being used.
    There was a configuration directive which allowed us to switch
    between the two. All references to this configuration directive
    have also been removed.
    Reincarnate the sensinode/cc2430 port
    Initial commit of Sensinode platform files.
    Sensinode putdec() debugging
    Renamed sensinode-debug to debug
    Reincarnate the sensinode/cc2430 port
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    fixed documentation typos.
    Made headercompression work on external buffer
    Import of the contiki-2.x development code from the SICS internal CVS server
    Reincarnate the sensinode/cc2430 port
    Reincarnate the sensinode/cc2430 port
    Split the cc2430 custom rules into its own file
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Reincarnate the sensinode/cc2430 port
    Button sensor header
    Temporary deletion of files due to problems with the CVS repository
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Code style fixes: sensinode
    Reincarnate the sensinode/cc2430 port
    remove bank macros which are now in banked.h
    Modifications to support banked code.  Interrupts and routines accessed through function pointers reside in independent files so they can be assigned to the HOME bank.  Init code can be placed in any bank.
    Also add adc init code and bank header files.
    Initial commit of cc2430 cpu port files. Currently used by /platform/sensinode.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Reincarnate the sensinode/cc2430 port
    Initial commit of Sensinode platform files.
    Reincarnate the sensinode/cc2430 port
    Code style fixes: sensinode
    Sensinode/cc2430 stack depth optimisation
    
    This replicates the method used by the cc2530 port
    Reincarnate the sensinode/cc2430 port
    Initial commit of Sensinode platform files.
    Button sensor driver
    Temporary deletion of files due to problems with the CVS repository
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Code style fixes: sensinode
    Reincarnate the sensinode/cc2430 port
    Code style fixes: sensinode
    Reincarnate the sensinode/cc2430 port
    Updated to match the new sensors API
    Experimental energy estimation code
    Code imported from the SICS CVS server
    Architecture specific code for the LEDs API
    Import of the contiki-2.x development code from the SICS internal CVS server
    Code style fixes: sensinode
    Reincarnate the sensinode/cc2430 port
    Initial commit of Sensinode platform files.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Code style fixes: sensinode
    We can now use SDCC's __nonbanked feature
    
    This allows us to reduce CODE footprint of SDCC projects
    built with --model-huge. Use carefully!
    
    * Added a facility which allows us to enable/disable the
      feature from the CPU dir (CC_CONF_NON_BANKED_OPTIMIZATION)
    * Added the CC_NON_BANKED keyword to some platform files
      (expands to __nonbanked)
    * Started using this for some examples
    Reincarnate the sensinode/cc2430 port
    Reincarnate the sensinode/cc2430 port
    Remove compiler warnings
    There were many bugs in the rtimer code, particularly one that made only one rtimer at a time work. We have a new rtimer system that we're testing, but in the meantime, I rewrote the rtimer code to explicitly support only one rtimer. Makes the code significantly simpler (and fixes a bug that was very hard to track down).
    Made rtimer callback a typedefed type to make function prototypes nicer
    Documentation fix. Number of rtimers configurable with contiki-conf.h
    Bugfix: should not invoke timer if timer list is empty.
    Fixed API to be consistent between .h and .c file
    Renamed rt module to rtimer
    Initial code for a Contiki real-time scheduler
    Sensinode/cc2430 stack depth optimisation
    
    This replicates the method used by the cc2530 port
    Reincarnate the sensinode/cc2430 port
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Reincarnate the sensinode/cc2430 port
    Initial commit of Sensinode platform files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Reincarnate the sensinode/cc2430 port
    Import of the contiki-2.x development code from the SICS internal CVS server
    Reincarnate the sensinode/cc2430 port
    Code style fixes: sensinode
    We can now use SDCC's __nonbanked feature
    
    This allows us to reduce CODE footprint of SDCC projects
    built with --model-huge. Use carefully!
    
    * Added a facility which allows us to enable/disable the
      feature from the CPU dir (CC_CONF_NON_BANKED_OPTIMIZATION)
    * Added the CC_NON_BANKED keyword to some platform files
      (expands to __nonbanked)
    * Started using this for some examples
    Reincarnate the sensinode/cc2430 port
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Enabled 2nd button on platform econotag
    Changed the name of the rimeaddr module to linkaddr
    Moved the rimeaddr.[ch] code from the core/net/rime module to the core/net module, as it is used not only by rime code
    Updated include paths for the moved files under net/
    set the pin defaults properly to reduce current consumption on
    sleeping M12s.
    Newer and cleaner TARGET=econotag as well as robust mc13224v
    configuration system.
    
    (also deprecate TARGET=redbee-econotag)
    
    - mc13224v now automatically probes hardware config for buck converter
    and 32kHz crystal as well as automatically monitors battery voltage
    and manages the buck accordingly.
    
    - new flashed based config system for mc13224v parameters such has
      radio modes (demod, autoack), nvmtype, mac address, channel and
      power.
    
    - considerably cleaned up econotag platform code (suffered from severe
      case of bit-rot)
    Enabled 2nd button on platform econotag
    Newer and cleaner TARGET=econotag as well as robust mc13224v
    configuration system.
    
    (also deprecate TARGET=redbee-econotag)
    
    - mc13224v now automatically probes hardware config for buck converter
    and 32kHz crystal as well as automatically monitors battery voltage
    and manages the buck accordingly.
    
    - new flashed based config system for mc13224v parameters such has
      radio modes (demod, autoack), nvmtype, mac address, channel and
      power.
    
    - considerably cleaned up econotag platform code (suffered from severe
      case of bit-rot)
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    change mc13224v button-sensor to use gpio structs
    initial redbee-econotag commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    Turn off timer before updating - needed to avoid bugs in ContikiMAC - not 100% sure why
    Removed safeguards around the update code for the timer; turns out they weren't needed (but instead triggered a bug in MSPsim)
    Turn off Timer A before modifying its control registers to avoid problems when timer is updated frequently
    Remove the read from TAIV - this should not be done for TIMERA0 interrupts (in fact, doing so messes up the other timer a interrupts, like the clock tick...)
    Need to clear the interrupt flag register for Timer A
    bug fix: wake up MSP430 when leaving rtimer interrupt if the rtimer polled a process.
    thanks to Marco Vedovati for finding the bug
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    Moved energest from lib/ to sys/
    removed offset in rtimer_arch
    removed redundant code - configuration of basic clock subsystem in clock and rtimer_arch
    Added energy estimation, embryo for possible future drift configuration
    rtimer_arch_now() now returns the correct value
    Fixed description
    MSP430 real-time rtimer support using timerb1
    Added #include that #defines NULL
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    Added *experimental* module for sending raw (non-routed) packets from Contiki. The name of the module is likely to change.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup UIP_CONF_IPV6_RPL configuration
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Changed the name of the rimeaddr module to linkaddr
    Don't use the sicslowmac code, use nullrdc instead
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Fix naming issues and includes in uip-ds6-nbr.h
    Removed now unused per-module neighbor table size configs. Use NEIGHBOR_CONF_MAX_NEIGHBORS instead.
    platform/econotag: Allow RPL and Router settings to be overridden.
    Changed the name of the IPv6 number of route entries configuration from UIP_CONF_DS6_ROUTE_NBU to UIP_CONF_MAX_ROUTES.
    Use the RTC only as the main timer.
    
    This is a major change to how the main tick interrupt is handled on
    the mc1322x platforms. Instead of using two timer resources, TMR0 and
    RTC, this patch unifies all the timers to use the RTC. This is enabled by
    implementing etimers as scheduled rtimers. The main advantage (aside
    from freeing TMR0 for general use) is have the Contiki timebase come
    from the same source that will be used for sleeping and wakeup.
    Newer and cleaner TARGET=econotag as well as robust mc13224v
    configuration system.
    
    (also deprecate TARGET=redbee-econotag)
    
    - mc13224v now automatically probes hardware config for buck converter
    and 32kHz crystal as well as automatically monitors battery voltage
    and manages the buck accordingly.
    
    - new flashed based config system for mc13224v parameters such has
      radio modes (demod, autoack), nvmtype, mac address, channel and
      power.
    
    - considerably cleaned up econotag platform code (suffered from severe
      case of bit-rot)
    replace MAC_CONF_CHANNEL_CHECK_RATE with
    NETSTACK_CONF_RDC_CHANNEL_CHECK_RATE for redbee-dev and econotag
    
    Removed the obsolete MAC_CONF_CHANNEL_CHECK_RATE (now replaced with
    NETSTACK_CONF_RDC_CHANNEL_CHECK_RATE)
    change mc1322x rtimers to 32-bit
    
    hardcode a close default value for the RTC
    mc1322x: build fixes for uart2
    Renamed nullrdc to nullrdc-noframer and nullrdc-framer to nullrdc.
    
    nullrdc (previously nullrdc-framer) is now a RDC implementation that
    does not do any radio duty cycling but supports link layer addresses
    and frame format via framer (for example 802.15.4). nullrdc can now be
    used in the same way as contikimac, xmac, etc.
    
    nullrdc-noframer (previously nullrdc) is a null RDC implementation
    that does not do any radio duty cycling, does not add any header of its
    own to the packets, and does not support link layer addresses.
    change maca_raw_mode to contiki_maca_raw_mode
    use the nullmac and nullrdc with framer layer.
    initial commit for the redbee-dev platform
    use sicslowmac_driver instead of contikimac_driver --- since contikimac
    power saving doesn't seem to be working.
    enable sicslowpan fragmentation
    increase UIP buffer size to 1300 to allow full size ipv6 packets
    don't need BLOCKING_TX anymore with the recent bugfixes
    bring econotag conf in-sync with sky.
    
    Increase the size of the route and neighbor tables; remove the uIP
    packet buffer queue for every neighbor to save RAM
    initial redbee-econotag commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    Updated include paths for the moved files under net/
    Newer and cleaner TARGET=econotag as well as robust mc13224v
    configuration system.
    
    (also deprecate TARGET=redbee-econotag)
    
    - mc13224v now automatically probes hardware config for buck converter
    and 32kHz crystal as well as automatically monitors battery voltage
    and manages the buck accordingly.
    
    - new flashed based config system for mc13224v parameters such has
      radio modes (demod, autoack), nvmtype, mac address, channel and
      power.
    
    - considerably cleaned up econotag platform code (suffered from severe
      case of bit-rot)
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    llsec: Added a layer in between NETSTACK_MAC and NETSTACK_NETWORK for implementing link layer security
    Enabled 2nd button on platform econotag
    Add the explicit list of modules, since we cannot do auto-dependency management of them
    Moved the individual MODULE definitions from the top-level Makefile.include into the individual platforms' Makefiles
    Makefiles: Allow setting UIP_CONF_IPV6=0 to work as expected.
    
    Setting UIP_CONF_IPV6 to zero from the make build command line is
    something that seems like it should ensure that IPv6 is disabled, but in
    fact it actually *enables* IPv6. This seems counter intuitive, so this
    patch changes the behavior of the makefiles to handle this case
    properly.
    Newer and cleaner TARGET=econotag as well as robust mc13224v
    configuration system.
    
    (also deprecate TARGET=redbee-econotag)
    
    - mc13224v now automatically probes hardware config for buck converter
    and 32kHz crystal as well as automatically monitors battery voltage
    and manages the buck accordingly.
    
    - new flashed based config system for mc13224v parameters such has
      radio modes (demod, autoack), nvmtype, mac address, channel and
      power.
    
    - considerably cleaned up econotag platform code (suffered from severe
      case of bit-rot)
    initial commit for the redbee-dev platform
    initial redbee-econotag commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    Newer and cleaner TARGET=econotag as well as robust mc13224v
    configuration system.
    
    (also deprecate TARGET=redbee-econotag)
    
    - mc13224v now automatically probes hardware config for buck converter
    and 32kHz crystal as well as automatically monitors battery voltage
    and manages the buck accordingly.
    
    - new flashed based config system for mc13224v parameters such has
      radio modes (demod, autoack), nvmtype, mac address, channel and
      power.
    
    - considerably cleaned up econotag platform code (suffered from severe
      case of bit-rot)
    Enabled 2nd button on platform econotag
    Newer and cleaner TARGET=econotag as well as robust mc13224v
    configuration system.
    
    (also deprecate TARGET=redbee-econotag)
    
    - mc13224v now automatically probes hardware config for buck converter
    and 32kHz crystal as well as automatically monitors battery voltage
    and manages the buck accordingly.
    
    - new flashed based config system for mc13224v parameters such has
      radio modes (demod, autoack), nvmtype, mac address, channel and
      power.
    
    - considerably cleaned up econotag platform code (suffered from severe
      case of bit-rot)
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    change mc13224v button-sensor to use gpio structs
    initial redbee-econotag commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    Turn off timer before updating - needed to avoid bugs in ContikiMAC - not 100% sure why
    Removed safeguards around the update code for the timer; turns out they weren't needed (but instead triggered a bug in MSPsim)
    Turn off Timer A before modifying its control registers to avoid problems when timer is updated frequently
    Remove the read from TAIV - this should not be done for TIMERA0 interrupts (in fact, doing so messes up the other timer a interrupts, like the clock tick...)
    Need to clear the interrupt flag register for Timer A
    bug fix: wake up MSP430 when leaving rtimer interrupt if the rtimer polled a process.
    thanks to Marco Vedovati for finding the bug
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    Moved energest from lib/ to sys/
    removed offset in rtimer_arch
    removed redundant code - configuration of basic clock subsystem in clock and rtimer_arch
    Added energy estimation, embryo for possible future drift configuration
    rtimer_arch_now() now returns the correct value
    Fixed description
    MSP430 real-time rtimer support using timerb1
    Added #include that #defines NULL
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    Added *experimental* module for sending raw (non-routed) packets from Contiki. The name of the module is likely to change.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added clock_seconds implementation to win32 port
    Provided a meaningful clock_time() implementation - which btw. makes the Cygwin variant finally work :-)
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Copied 'contiki_arg[c|v]' from 'native' to the other desktop targets.
    
    - On the retro targets support for 'contiki_arg[c|v]' is optional as accesing arg[c|v] is rather expensive.
    There's no point in ctk_restore() for standalone GUI builds.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Allow ipv6 builds on win32 platform. (webserver6 builds with cygwin, needs changes for VC++ compiler)
    Allow for non-GUI win32 apps.
    Just always call process_run() and etimer_request_poll() in turn - like the "major" platforms do.
    The recent global change regarding htons allowed to remove this hack :-)
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Made default IP config identical to minimal-net and log the IP config similar to minimal-net.
    Removed finally unnecessary cast.
    Now that process initialization has been changed (back) to synchronous it needs to be called after adding program handler menu items in order to preserve the the existing program handler logic.
    Replaced (now obsolete) PROCESS_LOADABLE with AUTOSTART_ENABLE (and use it now in the platform build to start the program handler).
    Don't depend on program handler for project builds.
    Allow Cygwin based Win32 platform to be used for 'project builds' (in the sense of the Contiki 2.x build system) beside the exsisting 'platform build'.
    Removed explicit shut down of network driver as it easily results in endless recursions on errors while network driver initialisation.
    Changed packet drivers from services to plain processes.
    
    Now tcpip_output() is a function pointer that is supposed to be set via the macro tcpip_set_outputfunc(). Packet drivers do so on process startup.
    
    Thus if there are several packet drivers in a Contiki system the one started last is the one actually used. This behaviour is especially useful for the 'IP forwarding' "meta" packet driver.
    Changed Contiki File System (cfs) from a service to a plain library.
    
    This change means that one needs to select _ONE_ cfs implementation at Contiki library link time. But this doesn't appear to be an issue as all platforms have their "favorite" implementation anyway.
    - Switched from from a CTK draw service to a statically linked CTK draw implementation.
    
    - Workarounded the following CTK glitch:
    
    ctk.c calls ctk_arch_keyavail() and ctk_arch_getkey() and needs therefore appropriate declarations (or macros) but it doesn't include a ctk_arch.h or alike to bring those in. So it's necessary to bring those declarations in via contiki-conf.h.
    
    But ctk_arch_getkey() is supposed to return a ctk_arch_key_t - and this typedef'ed in ctk.h which means that ctk.h would need to be included in contiki-conf.h before declaring ctk_arch_getkey().
    
    This IS rather undesirable so the current workaround is to declare ctk_arch_getkey() as returning a char - this is btw done similiar in platform/gtk as well. See ctk/ctk-gtksim.h:
    
    guint ctk_arch_getkey(void);
    Provided a meaningful clock_time() implementation - which btw. makes the Cygwin variant finally work :-)
    Initializing the console Just-In-Time on CTK startup and starting up the WinPcap before CTK allows WinPcap to print initialization errors (especially a missing command line arg) without clearing the shell output.
    Use the cpu/native/net WinPcap driver for platform/win32 as well.
    Link WinPcap packet driver statically into the main binary in preparation of removing the services.
    Allow to build platform/win32 using Cygwin and the Contiki build system. The WinPcap driver is missing as it is about to be changed from dynamic to static loading anyway.
    Autoload the WinPcap driver now that I consider it fully functional.
    Moved error_exit() to the Win32 Contiki Core.
    Now that they assumed a shape ...
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Fixed win32 broken by recent changes.
    Added more flexibility to webbrowser -> wget forwarding.
    
    - Up to now the CTK program handler was necessary to start wget and forward the URL. Now alternatively the webbrowser uses the underlying OS to exec wget.
    
    - Up to now windowed CTK was necessary to display the acknowledge dialog. Now alternatively the webbrowser displays the acknowledge text and buttons right in the webpage area.
    
    - For now the targets 'win32' and 'c64' make use of the new capabilities.
    Added UIP_CONF_LLH_LEN.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Fix naming issues and includes in uip-ds6-nbr.h
    Removed now unused per-module neighbor table size configs. Use NEIGHBOR_CONF_MAX_NEIGHBORS instead.
    win32: Fix cygwin build
    
    size_t is declared in sys/types.h
    win32: Prefix color names with CTK_
    
    For consistency with ctk-curses, prefix CTK colors with CTK_.
    
    Also introduce COLOR_BG to make it easier to change the widgets
    background at once.
    Changed the name of the IPv6 number of route entries configuration from UIP_CONF_DS6_ROUTE_NBU to UIP_CONF_MAX_ROUTES.
    Added configurations of the new resolver.
    Added support for strncasecmp() which is now used in resolv.c.
    Use plain ASCII chars for lines on Win32 console CTK.
    Allow ipv6 builds on win32 platform. (webserver6 builds with cygwin, needs changes for VC++ compiler)
    Activate Telnet-server GUI-support only for project builds.
    Allow standalone win32 programs to exit the Contiki process by calling LOAD_UNLOAD().
    Adjusted typdefs to Cygwin 1.7 (now not compatible anymore with Cygwin 1.5).
    Added support for non-window CTK email client example.
    Activate uIP forwarding support.
    Adjusted to the new shell.
    Accomodate for the now more complex shell output.
    Minimal reformatting.
    Don't override www defaults for project builds.
    Activate mouse support for fullscreen mode.
    Removed CTK_CONF_HYPERLINK from shared code as its use is still unclear (and the implementation was incomplete anyway).
    Allow Cygwin based Win32 platform to be used for 'project builds' (in the sense of the Contiki 2.x build system) beside the exsisting 'platform build'.
    Several minor changes and reformatting.
    Added CTK_CONF_HYPERLINK in order to keep them ;-))
    Source reformatting only.
    Removed compiler warnings.
    Declare strcasecmp here as it isn't part of C99.
    Introduced C99 sized int types.
    Added signed 32 bit data type.
    Make use of __inline (just as making use of __fastcall) in order to check that CC_CONF_INLINE (just as CC_CONF_FASTCALL) are used in a syntactically correct manner.
    - Switched from from a CTK draw service to a statically linked CTK draw implementation.
    
    - Workarounded the following CTK glitch:
    
    ctk.c calls ctk_arch_keyavail() and ctk_arch_getkey() and needs therefore appropriate declarations (or macros) but it doesn't include a ctk_arch.h or alike to bring those in. So it's necessary to bring those declarations in via contiki-conf.h.
    
    But ctk_arch_getkey() is supposed to return a ctk_arch_key_t - and this typedef'ed in ctk.h which means that ctk.h would need to be included in contiki-conf.h before declaring ctk_arch_getkey().
    
    This IS rather undesirable so the current workaround is to declare ctk_arch_getkey() as returning a char - this is btw done similiar in platform/gtk as well. See ctk/ctk-gtksim.h:
    
    guint ctk_arch_getkey(void);
    Provided a meaningful clock_time() implementation - which btw. makes the Cygwin variant finally work :-)
    Added the shell server to the Win32 platform.
    Providing a dummy program_handler_load() made made the telnet server work without program-handler but on the other hand incompatible with an exsistng program handler :-(
    Therefore I replaced that hack with a clean CONF macro, which by the way really removes the run() and exec() functionality instead of just implementing it empty.
    Use the cpu/native/net WinPcap driver for platform/win32 as well.
    Allow to build platform/win32 using Cygwin and the Contiki build system. The WinPcap driver is missing as it is about to be changed from dynamic to static loading anyway.
    Moved error_exit() to the Win32 Contiki Core.
    Added the CCIF (Contiki Core InterFace) declarations necessary for logging from loadable code on Win32.
    Activated quit menu option.
    Move the strcasecmp macro out of the diretory app context now that it is used in the shell app too.
    Some object files made from *_dsc.c files get linked both into the Contiki core (for desktop icons) as well as into *.dsc files. So make sure that the *_dsc symbol gets exported regardless in which context the object files are made.
    Changed the Contiki Interface declaration macros from CCI/CLI to CCIF/CLIF because of already existing macros: Both CCI and CLI :-(
    Now that they assumed a shape ...
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Fixed win32 broken by recent changes.
    Support the recently added verbosity control.
    Makefile.include: support make clean all
    
    Historically $(OBJECTDIR) was created when Makefile.include is read.  A
    consequence is that combining "clean" with "all" (or any other build
    target) results in an error because the clean removes the object
    directory that is required to exist when building dependencies.
    Creating $(OBJECTDIR) on-demand ensures it is present when needed.
    
    Removed creation of $(OBJECTDIR) on initial read, and added an order-only
    dependency forcing its creation all Makefile* rules where the target is
    explicitly or implicitly in $(OBJECTDIR).
    Removed some more old RCS tags from the Contiki source tree.
    Fixed Win32 'platform build'.
    Added dependency handling and README.VC
    Allow VC++ to be used as alternative to GCC for building in the WIN32 target.
    TODOs:
    - Update README
    - Add dependency handling
    - Add rtimersupport
    Allow standalone win32 programs to exit the Contiki process by calling LOAD_UNLOAD().
    Added a gnumake 'target-specfic variable' to add the C preprocessor define necessary for clean DLL linkage.
    Adjusted the win32 'platform build' (which creates an old-school Contiki OS) to the changed dependency handling.
    
    The special module-compile rule didn't work anymore now that the make doesn't create the .d beforehand. However the ordinary compile rule in Makefile.include turns out to create object files linkable as DLLs - although with warnings. The downside of these warnings seems to be outweight by the benefit of a simpler Makefile.
    Minor formatting change.
    Leverage split of cfs-posix and cfs-posix-dir by reusing cfs-posix for win32 and replacing only cfs-posix-dir with cfs-win32-dir.
    Removed check already done in Makefile.include.
    For the Win32 platform build we need to define AUTOSTART_ENABLE even for the Contiki library files to be able to autostart the program handler.
    
    Note: For this to work the program handler needs to be the first autostart enabled application in the Contiki library. As the GNU archiver guarantees to preserve the order of the object files in a library this can be accomplished by having the program handler the first item in APPS.
    Removed SELFSTART_PROCESS as AUTOSTART_ENABLE generally serves that purpose - and AUTOSTART_ENABLE gets already set as required :-)
    Replaced (now obsolete) PROCESS_LOADABLE with SELFSTART_PROCESS.
    Allow Cygwin based Win32 platform to be used for 'project builds' (in the sense of the Contiki 2.x build system) beside the exsisting 'platform build'.
    Changed packet drivers from services to plain processes.
    
    Now tcpip_output() is a function pointer that is supposed to be set via the macro tcpip_set_outputfunc(). Packet drivers do so on process startup.
    
    Thus if there are several packet drivers in a Contiki system the one started last is the one actually used. This behaviour is especially useful for the 'IP forwarding' "meta" packet driver.
    Changed Contiki File System (cfs) from a service to a plain library.
    
    This change means that one needs to select _ONE_ cfs implementation at Contiki library link time. But this doesn't appear to be an issue as all platforms have their "favorite" implementation anyway.
    Factored out setup directory search path for source files into Makefile.include.
    
    - Search target specific directories before CPU specific directories.
    - Search CPU specific directories before generic directories.
    
    Note: I checked several builds but nevertheless one or the other might need some additional adjustsments. Sorry for the inconvenience.
    Very minor beautification.
    Use generally lowercase names for functin variables.
    - Switched from from a CTK draw service to a statically linked CTK draw implementation.
    
    - Workarounded the following CTK glitch:
    
    ctk.c calls ctk_arch_keyavail() and ctk_arch_getkey() and needs therefore appropriate declarations (or macros) but it doesn't include a ctk_arch.h or alike to bring those in. So it's necessary to bring those declarations in via contiki-conf.h.
    
    But ctk_arch_getkey() is supposed to return a ctk_arch_key_t - and this typedef'ed in ctk.h which means that ctk.h would need to be included in contiki-conf.h before declaring ctk_arch_getkey().
    
    This IS rather undesirable so the current workaround is to declare ctk_arch_getkey() as returning a char - this is btw done similiar in platform/gtk as well. See ctk/ctk-gtksim.h:
    
    guint ctk_arch_getkey(void);
    Provided a meaningful clock_time() implementation - which btw. makes the Cygwin variant finally work :-)
    Added copyright notice.
    Integrated WinPcap driver into platform/win32 Cygwin build.
    Allow to build platform/win32 using Cygwin and the Contiki build system. The WinPcap driver is missing as it is about to be changed from dynamic to static loading anyway.
    - Switched from from a CTK draw service to a statically linked CTK draw implementation.
    
    - Workarounded the following CTK glitch:
    
    ctk.c calls ctk_arch_keyavail() and ctk_arch_getkey() and needs therefore appropriate declarations (or macros) but it doesn't include a ctk_arch.h or alike to bring those in. So it's necessary to bring those declarations in via contiki-conf.h.
    
    But ctk_arch_getkey() is supposed to return a ctk_arch_key_t - and this typedef'ed in ctk.h which means that ctk.h would need to be included in contiki-conf.h before declaring ctk_arch_getkey().
    
    This IS rather undesirable so the current workaround is to declare ctk_arch_getkey() as returning a char - this is btw done similiar in platform/gtk as well. See ctk/ctk-gtksim.h:
    
    guint ctk_arch_getkey(void);
    Allow to build platform/win32 using Cygwin and the Contiki build system. The WinPcap driver is missing as it is about to be changed from dynamic to static loading anyway.
    Several minor consistency improvements.
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    Renamed README to README.1X
    Removed section about (recently deleted) VC solution file.
    Minor docu update.
    Added some info on the win32 platform.
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    Added dependency handling and README.VC
    Fixed win32 broken by recent changes.
    Fixed win32 broken by recent changes.
    Be consistent with tab chars in Makefiles.
    Removed some more old RCS tags from the Contiki source tree.
    Include wget shell command in "standard" shell environments.
    Adjusted to the new shell.
    Allow Cygwin based Win32 platform to be used for 'project builds' (in the sense of the Contiki 2.x build system) beside the exsisting 'platform build'.
    Removed reference to logically empty file.
    Very minor beautification.
    Use generally lowercase names for functin variables.
    Added the shell server to the Win32 platform.
    Build the web server with CTK support.
    Allow to build platform/win32 using Cygwin and the Contiki build system. The WinPcap driver is missing as it is about to be changed from dynamic to static loading anyway.
    Added about, vnc, cmdd to apps
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved Win32 cfs directory functions from cfs-win32.c to cfs-win32-dir.c.
    Added 'const'.
    Added "usual" comments.
    Made cfs implementation adhere to (new) cfs interface and streamlined implementation.
    Removed compiler warnings.
    Changed Contiki File System (cfs) from a service to a plain library.
    
    This change means that one needs to select _ONE_ cfs implementation at Contiki library link time. But this doesn't appear to be an issue as all platforms have their "favorite" implementation anyway.
    Added a Win32 CFS (Contiki File System) service. The opendir() parameter "/" is mapped to the directory containing contiki.exe. That allows easy access to *.prg and *.dsc files which are supposed to reside in the same directory.
    Don't exit application on every _BUT_ exit messages ;-)
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    - Switched from from a CTK draw service to a statically linked CTK draw implementation.
    
    - Workarounded the following CTK glitch:
    
    ctk.c calls ctk_arch_keyavail() and ctk_arch_getkey() and needs therefore appropriate declarations (or macros) but it doesn't include a ctk_arch.h or alike to bring those in. So it's necessary to bring those declarations in via contiki-conf.h.
    
    But ctk_arch_getkey() is supposed to return a ctk_arch_key_t - and this typedef'ed in ctk.h which means that ctk.h would need to be included in contiki-conf.h before declaring ctk_arch_getkey().
    
    This IS rather undesirable so the current workaround is to declare ctk_arch_getkey() as returning a char - this is btw done similiar in platform/gtk as well. See ctk/ctk-gtksim.h:
    
    guint ctk_arch_getkey(void);
    Moved error_exit() to the Win32 Contiki Core.
    Added the CCIF (Contiki Core InterFace) declarations necessary for fatal error display on Win32.
    The *-arch.h files seem to be out of style in Contiki 2.x so removed the only Win32 one - most of the content will show up in the (one and only) Win32 conf header.
    Added a Win32 Console Program based CTK (Contiki Tool Kit) conio low level library. Beside the core/lib/libconio.h interface it implements the CTK mouse interface.
    Added a Win32 CFS (Contiki File System) service. The opendir() parameter "/" is mapped to the directory containing contiki.exe. That allows easy access to *.prg and *.dsc files which are supposed to reside in the same directory.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Use plain ASCII chars for lines on Win32 console CTK.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Fixed typos.
    - Switched from from a CTK draw service to a statically linked CTK draw implementation.
    
    - Workarounded the following CTK glitch:
    
    ctk.c calls ctk_arch_keyavail() and ctk_arch_getkey() and needs therefore appropriate declarations (or macros) but it doesn't include a ctk_arch.h or alike to bring those in. So it's necessary to bring those declarations in via contiki-conf.h.
    
    But ctk_arch_getkey() is supposed to return a ctk_arch_key_t - and this typedef'ed in ctk.h which means that ctk.h would need to be included in contiki-conf.h before declaring ctk_arch_getkey().
    
    This IS rather undesirable so the current workaround is to declare ctk_arch_getkey() as returning a char - this is btw done similiar in platform/gtk as well. See ctk/ctk-gtksim.h:
    
    guint ctk_arch_getkey(void);
    Initializing the console Just-In-Time on CTK startup and starting up the WinPcap before CTK allows WinPcap to print initialization errors (especially a missing command line arg) without clearing the shell output.
    Cygin (in opposite to VC++) doesn't call exit() - and thus our atexit function - on Ctrl-C. Therefore we install an explict ConsoleCtrlHandler which calls exit(). For the sake of simplicity it's not #ifdef'ed _CYGWIN_.
    Allow to build platform/win32 using Cygwin and the Contiki build system. The WinPcap driver is missing as it is about to be changed from dynamic to static loading anyway.
    Moved error_exit() to the Win32 Contiki Core.
    Replaced Win32 ctrl-c handler with C-library atexit handler (taking care of ctrl-c too) now that we have a Contiki Quit menu calling exit().
    Avoid temporary console window scroll on redraw due to writing to lower right screen cell.
    Removed obsolete header include.
    Added a Win32 Console Program based CTK (Contiki Tool Kit) conio low level library. Beside the core/lib/libconio.h interface it implements the CTK mouse interface.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Removed unnecessary include.
    Allow standalone win32 programs to exit the Contiki process by calling LOAD_UNLOAD().
    Allow 6502 ctk programs (all running in non-window mode) to exit the Contiki process by calling LOAD_UNLOAD().
    Make the "empty" error_exit implementation the default to be optionally overridden.
    Made error_exit() implementation target-specific.
    Made error_exit() globally available.
    Provided a meaningful clock_time() implementation - which btw. makes the Cygwin variant finally work :-)
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Allow standalone win32 programs to exit the Contiki process by calling LOAD_UNLOAD().
    Allow 6502 ctk programs (all running in non-window mode) to exit the Contiki process by calling LOAD_UNLOAD().
    Made error_exit() globally available.
    CPU agnostic implementation of the platform specific part of the multi-threading library. Uses fibers on Windows and the ucontext functions on other platforms.
    Moved wpcap*.[ch] from platform/minimal-net/net to cpu/native/net.
    Added Cygwin networking support using WinPcap.
    Added a Win32 CFS (Contiki File System) service. The opendir() parameter "/" is mapped to the directory containing contiki.exe. That allows easy access to *.prg and *.dsc files which are supposed to reside in the same directory.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the parameter 'char * data' of process_start to the
    type process_data_t. This was an artifact when the choice was
    made to use the void * type for the data parameter in processes.
    
    Changed parameter 'void * data' of process_post_synch to
    process_data_t for consistency.
    
    Checked all the uses of process_start() in contiki and fixed casts
    of the data parameter.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Switched from (now obsolete) 'process_load' to 'autostart_processes'.
    Source reformatting only.
    Removed compiler warnings.
    Added a Win32 dll loader for loading/unloading *.prg and *.dsc files. It requires at least WinXP as it uses GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS flag for unloading. The "self-unloading" via LOADER_UNLOAD() is implemented by defering the actual unload until back in the main loop using a user-mode APC (Asynchronous Procedure Call).
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Removed superfluous semicolon.
    Switched from (now obsolete) 'process_load' to 'autostart_processes'.
    Changed the Contiki Interface declaration macros from CCI/CLI to CCIF/CLIF because of already existing macros: Both CCI and CLI :-(
    Improved code clarity by moving the API macros definitions to the support function declarations.
    Added a Win32 dll loader for loading/unloading *.prg and *.dsc files. It requires at least WinXP as it uses GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS flag for unloading. The "self-unloading" via LOADER_UNLOAD() is implemented by defering the actual unload until back in the main loop using a user-mode APC (Asynchronous Procedure Call).
    Added a Win32 CFS (Contiki File System) service. The opendir() parameter "/" is mapped to the directory containing contiki.exe. That allows easy access to *.prg and *.dsc files which are supposed to reside in the same directory.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the parameter 'char * data' of process_start to the
    type process_data_t. This was an artifact when the choice was
    made to use the void * type for the data parameter in processes.
    
    Changed parameter 'void * data' of process_post_synch to
    process_data_t for consistency.
    
    Checked all the uses of process_start() in contiki and fixed casts
    of the data parameter.
    Copied 'contiki_arg[c|v]' from 'native' to the other desktop targets.
    
    - On the retro targets support for 'contiki_arg[c|v]' is optional as accesing arg[c|v] is rather expensive.
    Initialize tcpip process before resolver process.
    
    Since introduction of mDNS (https://github.com/contiki-os/contiki/commit/f145c17039b778cde1d53b6828757cd91dc8480a)
    the resolver process initialization depends on the tcpip process
    already being initialized (because of the call to udp_new()).
    Remove tab chars from retro C sources.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Just always call process_run() and etimer_request_poll() in turn - like the "major" platforms do.
    There's no point in pulling in cfs-posix-dir.c if the POSIX functions it depends on are dummies anyway.
    Up to now *all* Contiki apps for the Apple2 were built for maximal RAM - which means that they can't return to OS level but must reboot on exit. However many apps can get along well with 1kB less memory - which allows them to exit to the OS.
    Therefore now the default is 1kB less memory - and apps actually needing maximal RAM can get it by adding WITH_REBOOT to their DEFINES.
    Removed closing of stdin, stdout (and stderr on the Apple2). It was introduced in order to maximize the number of available file handles for the webserver. However none of the target machine DOSes allows to open a single file several times diminishing the intended effect very much. One the other hand not being able to "just printf() something" causes trouble over and again - i.e. hello-world seemingly not working...after all a typical case of german over-enigneering ;-)
    cc65 2.13. allows to
    - explicitly set 80 column mode
    - control exit behaviour from the program itself (instead of requiring a loader variant).
    Added lseek dummy.
    Free up unused file descriptors.
    Now that process initialization has been changed (back) to synchronous it needs to be called after reading the config file in order to preserve the existing logic.
    Removed finally unnecessary cast.
    Implement cfs API on preprocessor level using POSIX functions..
    Made use of the new high-level config macros.
    Soe we're finally back at reducing the memory footprint be avoiding to pull in large C-library enitities.
    Made use of config file read function.
    Use common log implementation for cc65 targets.
    Switched to lowercase file name and do consistently "first-log then operate".
    Added user feedback on Ethernet configuration.
    Added user feedback on IP configuration.
    Include dummy for posix function missing in cc65 C-library.
    Shortened welcome message.
    Made use of the generic Ethernet driver for cc65 targets.
    Added a naive clock implementation based on main loop counting for the Apple2 as it doesn't have a hardware clock.
    Removed clock stuff from main file.
    Added support for the cc65 target 'apple2enh' (Enhanced Apple //e).
    Moved error_exit() to the Win32 Contiki Core.
    Now that they assumed a shape ...
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved the 6502 custom rules into its own Makefile.customrules-6502 file
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Reorganized web page attribute data handling.
    
    - Up to now the web browser used several fixed size arrays to hold the various types attribute data of the web page. This turned out to be way to inflexible for any non-trivial web page. Therefore now all attribute data is stored in a single buffer one after the other as they arrive from the parser only occupying the memory actually needed. This allows for pages with many links with rather short URLs as well as pages with few link with long URLs as well as pages with several simple forms as well as pages with one form with many form inputs.
    
    - Using the actual web page buffer to hold the text buffers of text entry fields was in general a cool idea but in reality it  is often necessary to enter text longer than the size of the text entry field. Therefore the text buffer is now stored in the new unified attribute data buffer.
    
    - Splitting up the process of canonicalizing a link URL and actually navigating to the resulting URL allowed to get rid of the 'tmpurl' buffer used during form submit. Now the form action is canonicalized like a usual link, then the form input name/value pairs are written right into the 'url' buffer and afterwards the navigation is triggered.
    
    - Support for the 'render states' was completely removed. The only actually supported render state was centered output. The new unified attribute buffer would have complicated enumerating all widgets added to the page in order to adjust their position. Therefore I decided to drop the whole feature as the <center> tag is barely used anymore and newer center attributes are to hard to parse.
    Remove tab chars from retro C sources.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added support for the FTP standalone client to the apple2enh target.
    Configure maximum number of Apple2 web server connections indirectly via maximum number of TCP connections.
    Moved PFS header from Apple2 directory to 6502 directory as we're going to have other PFS implementations.
    Explicitly turn on forms and centering for consistency reasons.
    Removed closing of stdin, stdout (and stderr on the Apple2). It was introduced in order to maximize the number of available file handles for the webserver. However none of the target machine DOSes allows to open a single file several times diminishing the intended effect very much. One the other hand not being able to "just printf() something" causes trouble over and again - i.e. hello-world seemingly not working...after all a typical case of german over-enigneering ;-)
    Added configuration values for the email client example.
    Added configuration values for the IRC client example.
    Activate uIP logging when "high level config" logging is enabled.
    cc65 2.13. features a default-per-target mouse driver so there's no need to deal with their names in Contiki anymore.
    The recent optimizations (usage of language card bank2 through new C-library, logging through ROM routine, removal of unused IP forwarding code) allowed to increase the number of concurrent HTTP conntections from 3 to 7 :-)
    Introduced yet another high-level config macro.
    Introduced very lightweight pfs implementation based on Apple ProDOS.
    
    ProDOS requires for each opened file a user-supplied page-aligned 1024 byte i/o buffer. This makes the generic POSIX file i/o library contained in the cc65 C-library quite heavyweight.
    
    In contrast the lightweight pfs implementation uses the uIP packet buffer as ProDOS i/o buffer. Therefore:
    - Only one file may be open at any time.
    - That file may not be open while the uIP packet buffer is used by uIP. The open()/read()/close() sequence should be completed before Contiki event scheduling or inside handling a single Contiki event.
    - The uIP packet buffer must be large enough to hold the ProDOS I/O buffer. Depending on the position of the uIP buffer in memory this means between 1024 and 1024 + 256 bytes. Therefore in an Ethernet environment setting the MTU_SIZE to at least 1266 is safe (So the default of 1500 is just fine).
    Introduced some more high-level config macros.
    Introduced high-level macros to be set on the make command line. They allow easy configuration of Contiki for typical (cc65-)project scenarios.
    Added target-specifc mouse configuration values.
    Added target-specifc ctk (and www) configuration values.
    Limit the maximum number of simultaneous connections to the cfs webserver to three because there's not enough memory left on the heap for more open files anyway - ProDOS 8 needs 1kB of page-aligned heap per open file :-(
    Set the maximum number of simultaneous connections to the cgi webserver to the maximum number of uIP connections.
    Renamed 6502-conf.h into 6502def.h to be in line with similiar files created in the meanwhile and added C99 names.
    Reduced Contiki config to the minimum.
    Made endianess configuration actually work.
    Factored out settings specific more to architecture and/or toolchain rather than specific target.
    Added support for the cc65 target 'apple2enh' (Enhanced Apple //e).
    Added info on W5100 driver.
    Several minor consistency improvements.
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    Minor README updates.
    Minor wording change.
    Added some info on the Apple2 PFS (and AppleCommander).
    Added LANceGS.
    Added some info on the apple2enh plattform.
    Add somewhat more support to use different mouse drivers.
    
    - The default mouse driver is now always named 'contiki.mou'.
    - Alternative mouse drivers are present in the disk images.
    - Users can select their mouse driver by renaming the files.
    Added 6502 driver for WIZnet W5100 in MACRAW mode.
    Removed some more old RCS tags from the Contiki source tree.
    Finetuned Language Card usage.
    
    Both the source code and the cc65 compiler have changed. So it made sense to review which object files are to be compiled for placement in the Language Card.
    loader.system is now official part of the cc65 Apple II support.
    Moved from last cc65 release (2.13.3) to recent cc65 snapshot (2.13.9).
    
    Relevant cc65 changes...
    
    General:
    - The compiler generates "extended" dependency info (like gcc) so there's no need for postprocessing whatsoever :-)
    - The linker is very pernickety regarding the ordering of cmdline options so a custom linker rule is necessary :-(
    
    Apple2:
    - The various memory usage scenarios aren't specified anymore via separate linker configs but via defines overriding default values in the builtin linker config.
    
    Atari:
    - The builtin linker config allows to override the start addr so there no more need for a custom linker config.
    - The C library comes with POSIX directory access. So there's no more need for for a custom coding.
    
    CBM:
    - The C library comes with POSIX directory access. So there's no more need for for a custom coding.
    There's no point in pulling in cfs-posix-dir.c if the POSIX functions it depends on are dummies anyway.
    Made cfs-based webserver example compatible with 8.3 file systems.
    Made cfs-based webserver example compatible with 8.3 file systems.
    Just name the binary always 'contiki'.
    Up to now *all* Contiki apps for the Apple2 were built for maximal RAM - which means that they can't return to OS level but must reboot on exit. However many apps can get along well with 1kB less memory - which allows them to exit to the OS.
    Therefore now the default is 1kB less memory - and apps actually needing maximal RAM can get it by adding WITH_REBOOT to their DEFINES.
    Reverting to the "old" plain uip_buf allows the Apple2 to revert to the previous memory layout.
    The recent change turning uip_buf from an array to a pointer increases the code generated by cc65 significantly :-(
    This change modifies the set of modules placed in the Apple2 Language Card to again make maximum use of that memory without overflow.
    Removed closing of stdin, stdout (and stderr on the Apple2). It was introduced in order to maximize the number of available file handles for the webserver. However none of the target machine DOSes allows to open a single file several times diminishing the intended effect very much. One the other hand not being able to "just printf() something" causes trouble over and again - i.e. hello-world seemingly not working...after all a typical case of german over-enigneering ;-)
    Use only the base name of projects as program file name.
    Now that we have at least two examples working on the cc65 targets it is preferable to not name the program files all 'contiki'.
    cc65 2.13. allows to define all necessary paths through the single env var CC65_HOME.
    cc65 2.13. comes with secondary linker configs. The 'apple2enh-reboot.cfg' is more or less what was previously engineered as part of Contiki for the Apple2 - now moved into the cc65 distro.
    The feature set of gnumake is really frightening: This time I discovered 'target-specific variable values'...
    Replace non-fully-functional hack with the new gnumake variable CONTIKI_PROJECT.
    Added make target 'disk' for creating a .dsk disk image using AppleCommander.
    Starting with the cc65-snapshot-2.11.9.20080316 the Apple2 C-library supports placing code in the Apple2 Language Card by choosing the code segment 'HIGHCODE'. By default the memory area 0xD400 - 0xE000 is used for HIGHCODE. If the application doesn't need the ProDOS 8 QUIT code then the memory area used for HIGHCODE may be extended to 0xD000 - 0xE000.
    Contiki now leverages that feature to place process.o, etimer.o and uip_arp.o in HIGHCODE. These files were carefully chosen as:
    - they are necessary for all Ethernet apps
    - their size doesn't depend on configuration macros
    - they fill the available space nicely (with a little reserve for changes in the source or the compiler)
    Introduced very lightweight pfs implementation based on Apple ProDOS.
    
    ProDOS requires for each opened file a user-supplied page-aligned 1024 byte i/o buffer. This makes the generic POSIX file i/o library contained in the cc65 C-library quite heavyweight.
    
    In contrast the lightweight pfs implementation uses the uIP packet buffer as ProDOS i/o buffer. Therefore:
    - Only one file may be open at any time.
    - That file may not be open while the uIP packet buffer is used by uIP. The open()/read()/close() sequence should be completed before Contiki event scheduling or inside handling a single Contiki event.
    - The uIP packet buffer must be large enough to hold the ProDOS I/O buffer. Depending on the position of the uIP buffer in memory this means between 1024 and 1024 + 256 bytes. Therefore in an Ethernet environment setting the MTU_SIZE to at least 1266 is safe (So the default of 1500 is just fine).
    Introduced very lightweight log implementation not depending on any file I/O library.
    Added support for the cc65 target 'apple2enh' (Enhanced Apple //e).
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added clock_seconds() implementation.
    Soe we're finally back at reducing the memory footprint be avoiding to pull in large C-library enitities.
    Moved stuff into sys subdir to clean up the apple2enh dir (and because the corresponding shared res. cpu stuff is in the sys dir as well).
    Added speed detection user feedback and adjusted soft clock to ethernet polling.
    Added a naive clock implementation based on main loop counting for the Apple2 as it doesn't have a hardware clock.
    Provided a meaningful clock_time() implementation - which btw. makes the Cygwin variant finally work :-)
    Import of the contiki-2.x development code from the SICS internal CVS server
    Only wait for a keypress if the user is told to press a key.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Soe we're finally back at reducing the memory footprint be avoiding to pull in large C-library enitities.
    Made error_exit() implementation target-specific.
    Made error_exit() globally available.
    Provided a meaningful clock_time() implementation - which btw. makes the Cygwin variant finally work :-)
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed some more old RCS tags from the Contiki source tree.
    Adjusted assembler to reference uip_aligned_buf instead of uip_buf.
    Introduced very lightweight pfs implementation based on Apple ProDOS.
    
    ProDOS requires for each opened file a user-supplied page-aligned 1024 byte i/o buffer. This makes the generic POSIX file i/o library contained in the cc65 C-library quite heavyweight.
    
    In contrast the lightweight pfs implementation uses the uIP packet buffer as ProDOS i/o buffer. Therefore:
    - Only one file may be open at any time.
    - That file may not be open while the uIP packet buffer is used by uIP. The open()/read()/close() sequence should be completed before Contiki event scheduling or inside handling a single Contiki event.
    - The uIP packet buffer must be large enough to hold the ProDOS I/O buffer. Depending on the position of the uIP buffer in memory this means between 1024 and 1024 + 256 bytes. Therefore in an Ethernet environment setting the MTU_SIZE to at least 1266 is safe (So the default of 1500 is just fine).
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved sensors setup to contiki-sky-platform.c and common make rules to Makefile.common for easier reuse in similar platforms
    Added IRC client example.
    Introduced web browser as new example using ctk fullscreen mode.
    Rime statistics gathering
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the node-id.h files. The node-id.h file contains
    declarations of functions for setting and getting a node ID number, a
    functionality that exists on many platforms. Since this functionality
    was not considered part of the Contiki core, each platform defined its
    own node-id.h file. This commit attempts to clean this up by
    collecting the node-id.h into a core/sys/node-id.h file that replaces
    the old node-id.h files from the platform directories.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Node IDs are stored in external memory and restored on bootup
    Node IDs are stored in EEPROM and restored on bootup
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    llsec: Noncompromise-resilient 802.15.4 security
    llsec: Added a layer in between NETSTACK_MAC and NETSTACK_NETWORK for implementing link layer security
    Add the explicit list of modules, since we cannot do auto-dependency management of them
    Add cxmac module to the sky platform
    Include driver modules
    Include a basic set of modules
    Default to SMALL unless otherwise specified, to get size of binaries smaller so that Contiki with RPL/IPv6 fits on the Tmote Sky again.
    Moved sensors setup to contiki-sky-platform.c and common make rules to Makefile.common for easier reuse in similar platforms
    Makefile target for uploading precompiled firmware, example:
    make upload-ihex FILE=myfile.ihex
    fixed ext-sensor for jcreate
    refactored some ADC code into sky-sensors and made it possible to turn off sensors to save energy
    reverted accidental commit
    Added SHT11 sensor API for Tmote Sky
    Updated to match the new sensors API
    fixed for updated sensors API
    fixed Sky platform for new sensor APIs
    Broke out the CC2420 SFD interrupt into a separate file to allow easier overloading with project-specific files
    Allow reprogramming invidual nodes with 'make file.upload MOTE=x' where x is the mote number just like with make login
    ext-sensor: new driver for external sensors (e.g. Phidgets) on the Sentilla JCreate, developed by Marcus Lunden
    fixed IPV6 flags for sky
    When the tmote-bsl binary is found, program only one mote at once (parallel programming with tmote-bsl doesn't seem to work)
    Check for tmote-bsl-linux binary under linux, and use it is available
    changed upload rules due to problems on linux platforms
    changed the Makefile rules for uploading to sky-nodes.
    
    the earlier approach caused problems sometimes, resulting in command succeeding without all nodes being reprogrammed
    checkpointing library implemented for the sky platform (cfs interface is currently not optimized)
    Updated to make use of the tmote-bsl instead of msp430-bsl (needed for the Sentilla JCreate) if it exists
    Added acc-sensor.c, dDriver for the acceleromenter sensors on the Sentilla JCreate board
    removed energest-arch from sky and esb platforms
    Added cc2420-aes.c (functions for interfacing the build-in AES support of the CC2420)
    Changed filename of the CC2420 driver from simple-cc2420 to cc2420.
    Moved sky-specific make targets from the tools/sky/Makefile to the more natural platform/sky/Makefile.sky. Added a number of convenient targets for accessing the serial port.
    Removed ENERGEST_CONF_ON which is present in contiki-conf.h anyway
    Removed unused file rom.c
    Removed buggy button.c that is and should not be used
    Added battery-sensor.c
    Added inclusion of Tmote Sky bulk upload makefile
    Added CC2420 driver
    Added energy estimation, leds instead of minileds to be able to do energy estimation on leds
    Added sht11 driver, energy estimation. Removed IP/SLIP support for now
    Removed loader/ subdirectory
    changed to use msp430-bsl to upload programs
    added radio-sensor
    Added IP/SLIP support
    Added CFS xmem module
    Files for incorporating the Tmote Sky port into the Contiki build system
    Added bursts support in CSMA/ContikiMAC, and CFS-swapping in
    queuebuf. Exemplified in examples/udp-stream.
    Added a function for setting the I/O semantics on a Coffee file descriptor. Changed the configuration parameters slightly and updated the platform definitions to reflect this change.
    Removed header inclusion
    Removed watchdog calls from Coffee
    Added a macro for portable watchdog calls.
    make watchdog management slightly more abstract to simplify porting
    Removed deprecated dir cache macro.
    removed obsolete offset type definitions.
    Made the use of micro logs configurable to make file modifications
    more efficient on storage types that support inline updates.
    
    The sky platform uses logs, and the native platform uses no logs.
    A long refactoring session yielded the following.
    
    Technical changes:
    
    * Factored out file specific information from the file descriptor
      structure into a new file structure.
    
      - Useful file metadata can be stored after the file is closed.
      - File descriptors become much smaller.
      - Significantly reduces the need to scan for the file end.
    
    * Use correct types in all function signatures.
    * Removed the directory cache.
    
    Results:
    
    * Enormous speed increase when opening cached files (10x-20x.)
    * Multiple fd:s pointing to the same file have the correct semantics.
    * About 100 bytes smaller ROM size.
    * Slightly smaller static RAM size.
    reduced default sizes
    use abstract types for offsets and pages so that we can easily port it to
    very large or small memories.
    moved platform independent definitions
    moved platform independent code to the right place
    Configuration for the Sky platform.
    Node IDs are stored in external memory and restored on bootup
    Node IDs are stored in EEPROM and restored on bootup
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup UIP_CONF_IPV6_RPL configuration
    WITH_UIP6 -> NETSTACK_CONF_WITH_IPV6
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    ContikiMAC: Default to contikimac_framer when using Rime over ContikiMAC
    ContikiMAC: Create and parse ContikiMAC header in special framer; Expanded framer interface
    to allow for creating and securing frames in advance; Create and secure frames in advance when sending bursts; Do neither recreate nor resecure frames that come from phase
    Sky: Use the cc2420_aes_128_driver by default
    Disable IPv6 Neighbor Discovery Protocol by default on the sky platform
    Changed the name of the rimeaddr module to linkaddr
    Clean up setting channel and CCA-threshold for CC2420 based motes.
    The CCA-threshold now defaults to -46 which give better simulation
    results and typically also better experimental results.
    This adjustment is also needed due to commit 0a13f99 in mspsim. As
    promised in https://github.com/mspsim/mspsim/pull/18 it broke the
    regression tests.
    Fix naming issues and includes in uip-ds6-nbr.h
    Removed now unused per-module neighbor table size configs. Use NEIGHBOR_CONF_MAX_NEIGHBORS instead.
    Changed the name of the IPv6 number of route entries configuration from UIP_CONF_DS6_ROUTE_NBU to UIP_CONF_MAX_ROUTES.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Reduce size of the neighbor table entries to make RPL fit into the Tmote Sky RAM.
    Move compower configuration out of the non-IPv6 conditional clause.
    Made the sky and z1 platform handling of PROJECT_CONF_H the same as the other platforms: the makefile should define PROJECT_CONF_H to be the name of the header file to include. This header file should #undef everything it #defines, as it is included after all the other configuration options in contiki-conf.h
    Be a little more conservative in terms of what headers not to compress
    Use the SICSLOWPAN_CONF_COMPRESSION_THRESHOLD to avoid compressing IPv6 packets smaller than 60 bytes. This allows us to use ContikiMAC without its header, making it 802.15.4 compliant again.
    Made the platform config file configurable.
    removed modif. to sky files
    Made energest configuration configurable
    Modified contiki-conf.h and added sensys-scanner.
    Disable timesynch by default - it is not well-tested enough yet.
    Turn on timesynch by default
    #ifndef'd  elfloader's default memory usage
    Made uIPv6 packet queueuing configuration configurable
    configured tmote sky to use 5 retransmissions
    Made collect neighbors, queuebuf number, uip-ds6 configuration settable through project-conf.h
    fixed some config params to avoid re-defining if already defined
    Made a lot of things configurable via the (optional) project-conf.h
    Updated configuration options to reflect recent changes. Increased number of queuebufs. Corrected the name of the collection neighbors option.
    split hw config into platform-conf and adapted to new SPI and CC2420 naming
    moved cc2420 config to platform config
    Increase the size of the route and neighbor tables; remove the uIP packet buffer queue for every neighbor to save RAM
    removed RPL routing state struct from platform config file
    Added missing parts of the RPL configuration
    added rpl support for tmote sky - enabled by default
    Turned on broadcast announcements by default, turn on announcements for collect
    Replaced old framer (framer_get/framer_set) with new NETSTACK style configuration. Added nullrdc-framer that is a nullrdc with framer support.
    updated sky platform for new sicslowpan
    Enabled 32-bit clock ticks to allow longer timeouts; experimentally disabled polite announcements in favour of a non-announcement based collect protocol
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Enabled sicslowpan fragmentation and reassembly by default on the sky platform
    Made it possible to override the SICSLOWPAN_CONF_FRAG option. Increased the default uIP buffer size on IPv6 to provide some room for fragmented packets
    Use cxmac for IP, xmac for non-IP. Increased uIP buffer size for IPv6 to accomodate ICMP packets
    Added default configuration options for the cxmac driver
    Reduce the TCP MSS so that it runs nicely over IPv6/802.15.4
    Added the CSMA MAC mechanism on top of the default duty cycling
    mechanism X-MAC. The CSMA is configurable with a MAC_CSMA define, just
    like the MAC protocol is configurable with the MAC_DRIVER define.
    reverted accidental commit
    Updated to match the new sensors API
    fixed for updated sensors API
    macro renamed to SPI_IS_ENABLED() to avoid confusions
    added macro for checking whether SPI is ENABLED
    Rime polite announcements should be used when IPv6 is enabled, and not used otherwise
    Renamed SPI_WAITFOREOTxBUF to SPI_WAITFORTxREADY for clarity and generalized SPI transmission status checks to work with both AVR and MSP430
    Changed to monitor the UART transmitter buffer ready flag instead of the UART transmitter empty flag. This almost doubles the speed of transmitting data to CC2420. Patch by James Brown.
    allow UIP_CONF_ROUTER to be set as compilation flag
    configured routing to off for sky-IPv6
    use polite announcements when running Rime over UDP.
    added init function in MAC driver for easier configuration
    decreased default elfloader memory usage for sky platform
    Increased the default number of queue buffers: there usually is plenty of RAM left, so we should  be able to afford it
    Increase default CPU speed from 2.4576 MHz to 3.9 MHz. Communication works better, at a low power cost
    cc2420 checksums temporarily disabled, due to timing problems with the x-mac unicast optimization
    Added CC2420 checksums to non-ipv6 packets. Set a conservative TCP MSS
    Disable timestamp when using 802.15.4 frames (CC2420_CONF_TIMESTAMPS adds timestamp to radio packets).
    changed to use HC01 compression for uip6
    set rime addr size to 8 for uip6, restored clock resolution
    added configuration for panid
    enabled multihop routing, increased uip buffer size.
    added workaround for memcpy/memset bug in mspgcc
    Made tick resultion more fine-grained to support a shorter LPP listen time
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    sicslowpan Typo
    Enable communication power accounting for xmac by default
    Switched name to CFS_CONF_OFFSET_TYPE to emphasize that it is a configurable option.
    switched cfs offset type to signed long to allow backward movements with cfs_seek.
    use unsigned long as cfs offset type.
    Bugfix: reduced the size of the uIP buffer to account for MAC header space
    Enabled X-MAC announcements by default, disabled polite broadcast announcements by default
    added DCO/CPU speed re-synch each 30 seconds
    elfloader executing loaded programs from ram (not rom) by default on msp430 platforms.
    temporary fix to get sicslowpan.c working on the Sky platform:
    conventional MAC implementations require a call to the MAC driver's
    read function.
    map rime address to mac address for ipv6
    added IPV6 configuration.
    Changed name of simple-cc2420 to cc2420
    Changed filename of the CC2420 driver from simple-cc2420 to cc2420.
    Changed the name of UIP_CONF_TCP_FORWARD to UIP_CONF_IP_FORWARD since forwarding is done at the IP level
    This is an initial commit of an implementation of the Chameleon
    architecture for the Rime stack for Contiki. The Chameleon
    architecture separates the header processing from the Rime protocol
    logic. Instead of having each protocol create its own part of the
    packet header, protocols use packet attributes. Before sending a
    packet, a special Chameleon header processing module creates a packet
    header from the packet attributes. The same Chameleon module parses
    incoming packets and creates packet attributes from the header.
    
    The details are in our SenSys 2007 paper:
    
    Adam Dunkels, Fredrik Osterlind, Zhitao He. An Adaptive Communication
    Architecture for Wireless Sensor Networks. In Proceedings of the Fifth
    ACM Conference on Networked Embedded Sensor Systems (SenSys 2007),
    Sydney, Australia, November 2007.
    
    http://www.sics.se/~adam/dunkels07adaptive.pdf
    
    This is a rewrite of the code that was developed for the paper.
    Reduced uIP buffer size to allow for TCP data over Rime mesh routing protocol
    Added uIP destimation unreachable message, removed defailt XMAC timer definitions (for now), turned profiling off(for now), added process event number configuration, reduced data memory size for the ELF loader
    Added configuration for upcoming shell improvements, removed PROCESS_CONF_FASTPOLL
    Enabled support for CC2420 timestamps
    Turned on energy estimation and profiling by default
    #ifdef around RF_CHANNEL
    enabled inline functions
    * Include msp430def.h for standard defines.
    
    * Remove obsolete LPM_CONF_OFF definition.
    Added X-MAC configuration, reduced ELF loader text memory size
    Added signed 32 bit data type.
    * Bump maximum number of udp sockets to 16.
    
    * Remove unused stuff.
    * More routing and forwarding cache entries.
    Increased RAM for loadable modules
    added cfs xmem size
    Node IDs are stored in external memory and restored on bootup
    ELF loader memory size, CFS RAM memory size
    Added CFS xmem conf
    Added LPM and IRQ configuration to make Tmote Sky port build with the Contiki build system
    * General stuff for different baudrates:
    
        - ubr argument to slip_arch_int
    
        - macros for calculating ubr
    
        - argument -Bbaudrate to tools tunslip and scat
    * Tmote sky has a CC2420_RADIO.
    Changed the Contiki Interface declaration macros from CCI/CLI to CCIF/CLIF because of already existing macros: Both CCI and CLI :-(
    Added defines for declaring functions/data which are part of the CCI (Contiki Core Interface) and CLI (Contiki Loadable Interface). Both defines are empty for all platforms but the upcoming Win32 port.
    Make malloc machine independent by relying on dependent sbrk(2).
    Import of files for the Tmote sky platform.
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    sky: Initialize energest as early as possible
    
    If energest is initialized too late, the radio is not accounted
    until the first switch. This is a problem when the radio is always
    listening.
    Sky: DEBUG on/off switch
    Sky: Calling NETSTACK_LLSEC.bootstrap from contiki-sky-main.c
    Fixed typo to correctly print the radio channel at startup
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Moved the ds2411 driver into a dev/ds2411 module
    Moved the cc2420 driver into a separate dev/cc2420 module
    Include the core/net and core/net/ip modules in the core/net/ipv4 module
    Updated include paths for the moved files under net/
    Removed old unused profile.h code
    Clean up setting channel and CCA-threshold for CC2420 based motes.
    The CCA-threshold now defaults to -46 which give better simulation
    results and typically also better experimental results.
    This adjustment is also needed due to commit 0a13f99 in mspsim. As
    promised in https://github.com/mspsim/mspsim/pull/18 it broke the
    regression tests.
    Cleanup of the node-id.h files. The node-id.h file contains
    declarations of functions for setting and getting a node ID number, a
    functionality that exists on many platforms. Since this functionality
    was not considered part of the Contiki core, each platform defined its
    own node-id.h file. This commit attempts to clean this up by
    collecting the node-id.h into a core/sys/node-id.h file that replaces
    the old node-id.h files from the platform directories.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    bugfix: slip must be initialized after ctimer, as it uses ctimers
    minor bugfix: did not compile with PROCESS_CONF_NO_PROCESS_NAMES=1
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed Sky platform for IAR compiler
    Changed the order in which io.h and signal.h is included. Some versions of mspgcc4 seem to have a problem when signal.h is included before io.h.
    support for tinyos style node ids, to simplify testbed experiments
    with automatic node ids
    Restart CC2420 SFD interrupt after DCO calibration only if it is enabled.
    added support for avoiding sleeping in LPM3 when DCO needs to be running - needed for uart DMA
    Hack: reenable cc2420 SFD interrupts after resyncing the DCO. The DCO code currently messes up the SFD interrupt settings.
    no aaaa address if configured for RPL
    made use of the new link-local address api in ds6
    added missing include
    Moved sensors setup to contiki-sky-platform.c and common make rules to Makefile.common for easier reuse in similar platforms
    removed initialization of RPL from platform main
    added rpl support for tmote sky - enabled by default
    added possibility to hard-code 7 bytes of the MAC address - last byte picked from nodeid
    Bugfix: turn on watchdog before starting processes to avoid a process hanging in its startup phase
    removed uip_router
    integration of new uip6 code from Mathilde and Julien - adds routing and improved interface handling
    Added configurable router module
    Replaced old framer (framer_get/framer_set) with new NETSTACK style configuration. Added nullrdc-framer that is a nullrdc with framer support.
    Fixed bootup printf() with 32-bit timer values
    added bootup print of NETSTACK_RDC name
    Fix bootup printf() with 32-bit timer values
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Correctly print out the aaaa: address, if enabled
    Turning of the MAC protocol in the IPv4-over-mesh actually made performance worse due to broadcasts being received multiple times, which interfered with SLIP I/O
    Do not activate the sensors by default: sensors should be activated by the applications that need them
    Disable (debugging-) initialiation of aaaa:: address; add CSMA MAC for IPv6/6lowpan
    Added the CSMA MAC mechanism on top of the default duty cycling
    mechanism X-MAC. The CSMA is configurable with a MAC_CSMA define, just
    like the MAC protocol is configurable with the MAC_DRIVER define.
    Remove the default list of sensors from the main() file to save space - those apps that need them can use them directly in any case
    Added light, sht11, battery sensors; restored light and battery activation since rtimers don't work without them (at present)
    fixed for updated sensors API
    fixed Sky platform for new sensor APIs
    moved rime initialization into rime router so it is easier to switch IPv6 routing module
    Print link-local IPv6 address when booting the node
    Added X-MAC support for IPv6/SICSlowpan nodes, added 802.15.4 default framing to X-MAC
    added init function in MAC driver for easier configuration
    Print out the gateway's IP address more prominently
    When a node is configured as an IP gateway, we switch off the power-saving MAC protocolto improve performance and to avoid problems with the serial communication that X-MACs use of rtimers can cause
    Hack to make DS2411 ID useable as an Ethernet MAC address (remove multicast bit)
    added setup for uip6 with 802.15.4 frames and routing using Rime
    added configuration for panid
    * show radio channel at startup
    * only initialize timesynch when timesynch is enabled
    Changed the name of the 'serial' module to 'serial-line' to signify that the module is about lines of data from the serial port, not individual bytes, and to make sdcc happy
    #include lib/random.h
    Reverted the recent change from random_rand() to rand(). It turned out that
    since libc rand() returns a signed int, there were frequently problems with
    timer values wrapping. By reverting to random_rand(), we can provide a
    random generator that returns an unsigned and the timer problems are solved.
    Seed rand() with the node ID + MAC address
    added DCO/CPU speed re-synch each 30 seconds
    fixed sky platform to use the new uart1_active api to avoid messing up last chars transmitted
    removed compilation warning due to unused is_gateway variable (outside uIP mode)
    added printout of MAC protocol name
    added log_message() implementation
    Moved the network gateway logic to the uip-over-mesh module.
    map rime address to mac address for ipv6
    added initialization for uip6
    fixed battery sensor for sky platform
    changed sleep to go into LPM3
    removed redundant sensor initialization, added comment
    Moved initialization of the SHT11 until after other initialization: this seems to fix a bug where the SHT11 temperature and humidity values started varying wildly.
    Changed order of initialization to make light sensors work again: a previous change to irq.c seems to have conflicted with light sensor initialization
    Changed name of the simple-cc2420 module to cc2420: changed all function names and variable names from simple_cc2420_* to cc2420_*.
    Changed filename of the CC2420 driver from simple-cc2420 to cc2420.
    Moved ctimer_init() so that MAC protocols can use ctimers in their initialization code
    Change order of initialization so that Rime is initialized before uIP-over-Rime. Send out a new gateway command if a spurious (erroneous) gateway command is received. (Note for the future: this will cause a ping-pong problem with two correct gateways in the network; need to come up with a better solution for this.)
    Detect if node is attached to a SLIP line to set node to become the network's gateway
    Initialize serial line with 115200 bps for SLIP
    Added code for routing IP packets over low-power radios using the Rime mesh module
    Updated for the new simple_cc2420 API
    Fixed buggy build
    Rewrote the timesynch code to use the Rime sniffer interface instead of the kludge of running timesynch as a MAC layer
    Moving timesynch.[ch] from sys/ to core/net/rime as they have more to do with Rime than with the kernel
    Added initalization of the serial library. Changed LPM3 to LPM2 since the current serial driver does not work with LPM3 yet (we need to add start edge detection interrupt support to fix that).
    Initialize Rime address from hardware MAC address if no node ID has been configured. Be more explicit on how Rime address is assigned from node ID. Set time synch authority level from Rime address rather than node ID. Fix bug that put CPU in LPM2 instead of LPM3.
    Added initialization of the time synchronization module
    Removed inclusion of unused file cxmac.h
    Moved energy estimation initialization before starting processes so that processes may turn things on and off without messing up the energy estimates
    changed to show Contiki version, node id, and autostarted processes at startup
    Added watchdog support
    Added better boot-up behaviour of the LEDs - they can now be used to determine where in the boot sequence the node hangs (if it hangs)
    Compile profiling support only if PROFILE_CONF_ON is defined
    Added profiling support, made rime/mac initialization nicer
    Set channel to RF_CHANNEL after simple_cc2420_init.
    Otherwise the init function would reset the channel to 11.
    Added initialization of MAC and Rime
    Added sht11, energy estimation, xmac, diabled uIP (for now)
    Changed Contiki File System (cfs) from a service to a plain library.
    
    This change means that one needs to select _ONE_ cfs implementation at Contiki library link time. But this doesn't appear to be an issue as all platforms have their "favorite" implementation anyway.
    Added initialization of rtimers
    Set Rime address on boot up, activate button sensor
    restore of node id + changed to use cfs xmem (external flash)
    Removed non-functional cfs-xmem, replaced with cfs-ram
    Added IP/SLIP support
    Added CFS xmem
    Files for incorporating the Tmote Sky port into the Contiki build system
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    CC2420: Turned SPI macros to functions and removed redundant AES API
    Removed the experimental checkpointing code
    Add missing brace in sky Makefile
    Makefiles: Allow setting UIP_CONF_IPV6=0 to work as expected.
    
    Setting UIP_CONF_IPV6 to zero from the make build command line is
    something that seems like it should ensure that IPv6 is disabled, but in
    fact it actually *enables* IPv6. This seems counter intuitive, so this
    patch changes the behavior of the makefiles to handle this case
    properly.
    Get rid of generc ihex-file to allow parallel uploads
    Support MOTEIDS for flashing, etc
    Made the stack and heap size configurable when using the IAR compiler on the MSP430 platforms
    Support for serialdump on MacOS X. Patch by Laurent Deru.
    Sky motelist support for MacOS X
    Added support for mspgcc 4.6+ that no longer supports generic MCU identifiers such as msp430x1611
    Improved support for the IAR compiler for the MSP430 platforms
    contiki-sky-platform is added by Makefile.sky
    Missed `ifeq ...`
    Simplified host OS platform detection in Makefiles
    Initial WiSMote port based on code from Arago Systems.
    added compiler flags and macros for IAR and mspgcc 4.4.5 compilers
    fixed Sky platform for IAR compiler
    Added a motelist target that is the same on both sky and z1
    minor fix for making the msp430 makefile work for msp430X arch
    Added make variable with command name to show in warning
    Moved sensors setup to contiki-sky-platform.c and common make rules to Makefile.common for easier reuse in similar platforms
    Makefile target for uploading precompiled firmware, example:
    make upload-ihex FILE=myfile.ihex
    fixed ext-sensor for jcreate
    refactored some ADC code into sky-sensors and made it possible to turn off sensors to save energy
    reverted accidental commit
    Added SHT11 sensor API for Tmote Sky
    Updated to match the new sensors API
    fixed for updated sensors API
    fixed Sky platform for new sensor APIs
    Broke out the CC2420 SFD interrupt into a separate file to allow easier overloading with project-specific files
    Allow reprogramming invidual nodes with 'make file.upload MOTE=x' where x is the mote number just like with make login
    ext-sensor: new driver for external sensors (e.g. Phidgets) on the Sentilla JCreate, developed by Marcus Lunden
    fixed IPV6 flags for sky
    When the tmote-bsl binary is found, program only one mote at once (parallel programming with tmote-bsl doesn't seem to work)
    Check for tmote-bsl-linux binary under linux, and use it is available
    changed upload rules due to problems on linux platforms
    changed the Makefile rules for uploading to sky-nodes.
    
    the earlier approach caused problems sometimes, resulting in command succeeding without all nodes being reprogrammed
    checkpointing library implemented for the sky platform (cfs interface is currently not optimized)
    Updated to make use of the tmote-bsl instead of msp430-bsl (needed for the Sentilla JCreate) if it exists
    Added acc-sensor.c, dDriver for the acceleromenter sensors on the Sentilla JCreate board
    removed energest-arch from sky and esb platforms
    Added cc2420-aes.c (functions for interfacing the build-in AES support of the CC2420)
    Changed filename of the CC2420 driver from simple-cc2420 to cc2420.
    Moved sky-specific make targets from the tools/sky/Makefile to the more natural platform/sky/Makefile.sky. Added a number of convenient targets for accessing the serial port.
    Removed ENERGEST_CONF_ON which is present in contiki-conf.h anyway
    Removed unused file rom.c
    Removed buggy button.c that is and should not be used
    Added battery-sensor.c
    Added inclusion of Tmote Sky bulk upload makefile
    Added CC2420 driver
    Added energy estimation, leds instead of minileds to be able to do energy estimation on leds
    Added sht11 driver, energy estimation. Removed IP/SLIP support for now
    Removed loader/ subdirectory
    changed to use msp430-bsl to upload programs
    added radio-sensor
    Added IP/SLIP support
    Added CFS xmem module
    Files for incorporating the Tmote Sky port into the Contiki build system
    Add PLATFORM_HAS_RADIO in Sky Platform
    
    In order to use the er-server-example Radio resource it is required that the platform defines that it has a radio. This line might be required in other platforms.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added compiler flags and macros for IAR and mspgcc 4.4.5 compilers
    Introduced PLATFORM_HAS_LIGHT, _BATTERY, and _SHT11.
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed Sky platform for IAR compiler
    Added resource definition for leds and button
    Enable DCO configuration override
    split hw config into platform-conf and adapted to new SPI and CC2420 naming
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed Sky platform for IAR compiler
    Several compiler warning fixes:
    
         * msp430: fix "implicit declaration of function" warnings in clock.c, by including watchdog.h;
         * sky: fix a couple pointer target signedness warnings;
         * core: fix several signed/unsigned comparison warnings;
         * framer-802154: "const static" -> "static const" to fix compiler warnings;
         * core: comment or remove unused variables and function definitions.
    
    Signed-off-by: Lionel Debroux <lionel_debroux@yahoo.fr>
    Signed-off-by: Mariano Alvira <mar@devl.org>
    Moved watchdog_periodic into the lowest level to avoid multiple redundant calls higher up
    Bug fix: put device in standby mode at startup in case it has previously been put in deep power-down mode; patch by Martin Bor
    split hw config into platform-conf and adapted to new SPI and CC2420 naming
    Renamed SPI_WAITFOREOTxBUF to SPI_WAITFORTxREADY for clarity and generalized SPI transmission status checks to work with both AVR and MSP430
    Changed to monitor the UART transmitter buffer ready flag instead of the UART transmitter empty flag. This almost doubles the speed of transmitting data to CC2420. Patch by James Brown.
    Added flash reads and writes to energest.
    Changed type from off_t (that potentially conflicts with existing types.h typedefs) to unsigned long
    Code style fix
    Disable the watchdog during the whole erase operation.
    Call watchdog_periodic before erasing each sector, because this operation
    takes approximately 1s.
    Added Doxygen documentation
    * Avoid using FASTSPI_TX to reduce size of object code.
    
    * Use off_t to avoid overflows.
    Import of files for the Tmote sky platform.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    Import of files for the Tmote sky platform.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added temperature sensor for the builtin temperature sensor in MSP430
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Cross compiler interrupt service routine compatibility definitions for MSP430 based platforms based on isr_compat.h by Steve Underwood.
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed Sky platform for IAR compiler
    Updated to match the new sensors API
    fixed for updated sensors API
    changed sky sensors to new api
    Button sensor driver
    Temporary deletion of files due to problems with the CVS repository
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the ADC configuration to sky-sensors.c and sensors now only need to specify their sample channel. This helps to avoid conflicts when using multiple sensors.
    refactored some ADC code into sky-sensors and made it possible to turn off sensors to save energy
    Added email client example.
    Added IRC client example.
    Introduced web browser as new example using ctk fullscreen mode.
    Rime statistics gathering
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    * Change return type of i2c_start() to int.
    
    * Move macros I2C_ENABLE() and I2C_DISABLE() to header file.
    Bit-banging I2C master.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    Added temperature sensor for the builtin temperature sensor in MSP430
    Added Sentilla Jcreate platform. This platform is similar to the Sky platform but with other sensors and 8 leds.
    Moved ninimal-ppp into backyard as it depends on the uIP ppp support.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of files for the Tmote sky platform.
    A set of simple example programs for the ESB platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed Sky platform for IAR compiler
    Moved the ADC configuration to sky-sensors.c and sensors now only need to specify their sample channel. This helps to avoid conflicts when using multiple sensors.
    Corrected include path
    minor cleanup
    refactored some ADC code into sky-sensors and made it possible to turn off sensors to save energy
    Added constants for light sensor values
    fixed for updated sensors API
    changed sky sensors to new api
    Changed name of the simple-cc2420 module to cc2420: changed all function names and variable names from simple_cc2420_* to cc2420_*.
    Changed filename of the CC2420 driver from simple-cc2420 to cc2420.
    Radio sensor (RSSI) interface
    no initial signal strength by radio sensor
    added radio sensor for signal strength etc.
    Added radio signal strength simulation
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    sht11 architecture support for Sky
    Made driver less platform-dependent and added support for msb-430.
    Make it possible to subscribe to DMA events.
    Improvement batch.
    dma transfer support.
    Platform-specific devices.
    cooja radio driver (uip + rime)
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed Sky platform for IAR compiler
    Moved the ADC configuration to sky-sensors.c and sensors now only need to specify their sample channel. This helps to avoid conflicts when using multiple sensors.
    convert registers upto 9 instead of upto 4
    refactored some ADC code into sky-sensors and made it possible to turn off sensors to save energy
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved the cc2420 driver into a separate dev/cc2420 module
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the ADC configuration to sky-sensors.c and sensors now only need to specify their sample channel. This helps to avoid conflicts when using multiple sensors.
    Updated to match the new sensors API
    fixed for updated sensors API
    changed sky sensors to new api
    Changed name of the simple-cc2420 module to cc2420: changed all function names and variable names from simple_cc2420_* to cc2420_*.
    Changed filename of the CC2420 driver from simple-cc2420 to cc2420.
    Radio sensor (RSSI) interface
    no initial signal strength by radio sensor
    added radio sensor for signal strength etc.
    Added radio signal strength simulation
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added constants for light sensor values
    changed sky sensors to new api
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed Sky platform for IAR compiler
    * Change return type of i2c_start() to int.
    
    * Move macros I2C_ENABLE() and I2C_DISABLE() to header file.
    Bit-banging I2C master.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed Sky platform for IAR compiler
    Moved the ADC configuration to sky-sensors.c and sensors now only need to specify their sample channel. This helps to avoid conflicts when using multiple sensors.
    added missing include
    minor cleanup
    refactored some ADC code into sky-sensors and made it possible to turn off sensors to save energy
    Updated to match the new sensors API
    Updated to match the new sensors API
    fixed for updated sensors API
    fixed Sky platform for new sensor APIs
    changed sky sensors to new api
    fixed battery sensor for sky platform
    Preliminary untested code for the internal MSP430 battery sensor
    Returning the actual value rather than something read during an interrupt
    Temporary deletion of files due to problems with the CVS repository
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Short description of the Tmote Sky platform
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved from examples/sky into generic platform/sky/apps so that all examples can use it
    Blinking LEDs
    Experimental energy estimation code
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Fading LEDs
    A set of simple example programs for the ESB platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the node-id.h files. The node-id.h file contains
    declarations of functions for setting and getting a node ID number, a
    functionality that exists on many platforms. Since this functionality
    was not considered part of the Contiki core, each platform defined its
    own node-id.h file. This commit attempts to clean this up by
    collecting the node-id.h into a core/sys/node-id.h file that replaces
    the old node-id.h files from the platform directories.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added 5 second delay before actually burning the node id (may otherwise cause problems with the .upload script)
    Disable watchdog while burning node ID
    Added LEDs notification. THe program won't compile without a nodeid=XXX now
    Program for 'permanently' burning a node ID to external flash
    fixed includes
    Program for 'permanently' burning a node ID to EEPROM
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Include stdlib.h for the NULL macro
    Clock seconds since startup on minimal-net
    Added clock_seconds implementation to minimal-net port
    Import of the contiki-2.x development code from the SICS internal CVS server
    platform/minimal-net: Print out pseudo LED status.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Architecture specific code for the LEDs API
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Moved the individual MODULE definitions from the top-level Makefile.include into the individual platforms' Makefiles
    native/net/tapdev: Fix for new `UIP_CONF_IPV6` handling.
    Makefiles: Allow setting UIP_CONF_IPV6=0 to work as expected.
    
    Setting UIP_CONF_IPV6 to zero from the make build command line is
    something that seems like it should ensure that IPv6 is disabled, but in
    fact it actually *enables* IPv6. This seems counter intuitive, so this
    patch changes the behavior of the makefiles to handle this case
    properly.
    Fixed TARGET=minimal-net compilation issues on Darwin.
    Simplified host OS platform detection in Makefiles
    Removed serial.c, which is obsoleted by serial-line.c, which in turn now resides in Makefile.include
    Added support for serial data input
    Modifs to minimal-net for IPv6 support
    Splitted POSIX based cfs implementation to avoid pulling in potentially large POSIX directory I/O functions without needing them at all.
    Changed packet drivers from services to plain processes.
    
    Now tcpip_output() is a function pointer that is supposed to be set via the macro tcpip_set_outputfunc(). Packet drivers do so on process startup.
    
    Thus if there are several packet drivers in a Contiki system the one started last is the one actually used. This behaviour is especially useful for the 'IP forwarding' "meta" packet driver.
    Factored out setup directory search path for source files into Makefile.include.
    
    - Search target specific directories before CPU specific directories.
    - Search CPU specific directories before generic directories.
    
    Note: I checked several builds but nevertheless one or the other might need some additional adjustsments. Sorry for the inconvenience.
    Link in and start the POSIX file system to make the telnet-server example 'ls' command generally work. Typically it will complain about not finding 'cfs-root/.'
    Removed unnecessary directory reference.
    Removed stuff that was already in cpu/native/Makefile.native, and included it
    Added Cygwin networking support using WinPcap.
    Updated LD=gcc
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Updated include paths for the moved files under net/
    Copied 'contiki_arg[c|v]' from 'native' to the other desktop targets.
    
    - On the retro targets support for 'contiki_arg[c|v]' is optional as accesing arg[c|v] is rather expensive.
    Fixing minimal-net for Cygwin.
    platform/minimal-net: Better, more seamless support for OS X.
    
    This patch enables automatic route setup and cleanup when
    starting and stopping the minimal-net target on OS X.
    
    Both IPv4 and IPv6 are supported.
    
    Using the minimal-net target on OS X was absolute hell
    before I came up with this patch. Now it is painless.
    platform/minimal-net: Implement better idle behavior.
    
    The minimal-net target, as currently written, wakes up the
    CPU every millisecond to check for packets, and will only
    react in real-time to input from stdin. If you are running
    this on a laptop battery, your battery will quickly drain.
    
    This change allows the CPU to idle when there is literally
    nothing to do while still being responsive to input from
    stein and/or incoming packets. This fix should significantly
    improve performance while significantly improving power
    usage. Win-win.
    
    Also added `_xassert()` implementation so that the contiki-
    provided `assert()` macro will work properly when used
    on this platform.
    Fixed bug in IPv6 address print function.
    Move address initialization to after proce_init. Something in that now wiping the address array.
    small code style fixes; removed left-over function call
    Increased wait time between main loop polls; cleaned up the code to Contiki code style standards; moved process autostart code to after network setup
    Assign aaaa:: prefix if HARD_CODED_ADDRESS not defined
    Clock seconds since startup on minimal-net
    Change ctimer startup order, add multihop to wpcap and minimal-net platform.
    Add RPL nodes and border router to minimal-net platform (cygwin only)
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Update minimal net to new ds6  interface
    Allow ip4 address override, show ip6 address
    Minor adjustment to predominant coding style.
    Change ip4 addresses to agree with wiki
    Initialize ctimer, add IPv6 address configuration for the aaaa prefix
    Changed the name of the 'serial' module to 'serial-line' to signify that the module is about lines of data from the serial port, not individual bytes, and to make sdcc happy
    Added support for serial data input
    Changed the default IP address to match the default setting in tapdev
    Modifs to minimal-net for IPv6 support
    Removed finally unnecessary cast (and reverted unintentionally commited change).
    Added "usual" comments.
    Added missing sys/select.h include
    Reimplemented waiting with select() instead of nanosleep(). Let's see if Linux compiles this code now...
    Changed usleep() to nanosleep()
    Added user feedback on IP configuration.
    Removed compiler warning.
    Removed explicit shut down of network driver as it easily results in endless recursions on errors while network driver initialisation.
    Explicitly shut down network driver.
    Changed packet drivers from services to plain processes.
    
    Now tcpip_output() is a function pointer that is supposed to be set via the macro tcpip_set_outputfunc(). Packet drivers do so on process startup.
    
    Thus if there are several packet drivers in a Contiki system the one started last is the one actually used. This behaviour is especially useful for the 'IP forwarding' "meta" packet driver.
    Changed Contiki File System (cfs) from a service to a plain library.
    
    This change means that one needs to select _ONE_ cfs implementation at Contiki library link time. But this doesn't appear to be an issue as all platforms have their "favorite" implementation anyway.
    Link in and start the POSIX file system to make the telnet-server example 'ls' command generally work. Typically it will complain about not finding 'cfs-root/.'
    Added Cygwin networking support using WinPcap.
    More uip_ipaddr_t fixes.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup UIP_CONF_IPV6_RPL configuration
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Added UIP_CONF_LLH_LEN.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Fix naming issues and includes in uip-ds6-nbr.h
    Removed now unused per-module neighbor table size configs. Use NEIGHBOR_CONF_MAX_NEIGHBORS instead.
    cpu/native: Add file-backed simulated EEPROM to native cpu.
    
    This patch removes a defunct EEPROM implementation from the native
    platform and provides a new EEPROM implementation for the native cpu.
    The previous implementation appears to be vestigal.
    
    This is useful for testing code which uses the EEPROM without running
    the code on the actual hardware.
    
    By default the code will create a new temporary file as the EEPROM
    backing, reinitializing each time. If you would like to preserve the
    EEPROM contents or specify a specific EEPROM file to use, you can set the
    `CONTIKI_EEPROM` environment variable to the name of the EEPROM file you
    wish to use instead. If it already exists, its contents will be used.
    If it does not already exist, it will be created and initialized by
    filling it with `0xFF`---just like a real EEPROM.
    
    A new example is also included, which was used to verify the correctness
    of the implementation. It can easily be used to verify the EEPROM
    implementations of other targets.
    Changed the name of the IPv6 number of route entries configuration from UIP_CONF_DS6_ROUTE_NBU to UIP_CONF_MAX_ROUTES.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Eliminated RPL_CONF_ADJUST_LLH_LEN correction by using uip_l3_icmp_hdr_len instead of uip_l2_l3_icmp_hdr_len.
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    Enabled UDP checksums for minimal-net
    Let RPL examples enable platform RPL
    Change ctimer startup order, add multihop to wpcap and minimal-net platform.
    Add RPL nodes and border router to minimal-net platform (cygwin only)
    Update minimal net to new ds6  interface
    Define IPv6 options only if UIP_CONF_IPV6 is defined (which should be defined by the Makefile.include if IPv6 is enabled)
    Debugged autoconf for ethernet
    Modifs to minimal-net for IPv6 support
    Declare strcasecmp here as it isn't part of C99.
    Added signed 32 bit data type.
    Made endianess configuration actually work.
    Changed the Contiki Interface declaration macros from CCI/CLI to CCIF/CLIF because of already existing macros: Both CCI and CLI :-(
    Added defines for declaring functions/data which are part of the CCI (Contiki Core Interface) and CLI (Contiki Loadable Interface). Both defines are empty for all platforms but the upcoming Win32 port.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Renamed serial module to serial-line
    * Addition of Meshnetics Zigbig platform by Frederic Thepaut <frederic.thepaut@inooi.com>
    
    * Changed default RavenUSB timeout to 3 seconds... seems to give most reliable transmissions
    forgot these files for RCB...
    Contiki port for the Atmel AVR Raven board
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix: Misconfigurations to compile for avr-zigbit platform
    Use RF230BB for compilation - untested!
    * Addition of Meshnetics Zigbig platform by Frederic Thepaut <frederic.thepaut@inooi.com>
    
    * Changed default RavenUSB timeout to 3 seconds... seems to give most reliable transmissions
    forgot these files for RCB...
    example\webserver-ipv6-raven works!
    Contiki port for the Atmel AVR Raven board
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Changed the name of the rimeaddr module to linkaddr
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed now unused per-module neighbor table size configs. Use NEIGHBOR_CONF_MAX_NEIGHBORS instead.
    settings: Correct a problem where sometimes CC_INLINE is not defined properly.
    core/lib/settings: Generalized Settings Manager to work on any platform
    
    This commit moves the Settings Manager from the AVR codebase
    into the Contiki core library. Any platform that implements
    the Contiki EEPROM API can now use the Settings Manager's
    key-value store for storing their persistent configuration info.
    
    The Settings Manager is a EEPROM-based key-value store. Keys
    are 16-bit integers and values may be up to 16,383 bytes long.
    It is intended to be used to store configuration-related information,
    like network settings, radio channels, etc.
    
     * Robust data format which requires no initialization.
     * Supports multiple values with the same key.
     * Data can be appended without erasing EEPROM.
     * Max size of settings data can be easily increased in the future,
       as long as it doesn't overlap with application data.
    
    The format was inspired by the [OLPC manufacturing data format][].
    
    Since the beginning of EEPROM often contains application-specific
    information, the best place to store settings is at the end of EEPROM
    (the "top"). Because we are starting at the end of EEPROM, it makes
    sense to grow the list of key-value pairs downward, toward the start of
    EEPROM.
    
    Each key-value pair is stored in memory in the following format:
    
    Order    | Size     | Name         | Description
    --------:|---------:|--------------|-------------------------------
           0 |        2 | `key`        | 16-bit key
          -2 |        1 | `size_check` | One's-complement of next byte
          -3 |   1 or 2 | `size`       | The size of `value`, in bytes
    -4 or -5 | variable | `value`      | Value associated with `key`
    
    The end of the key-value pairs is denoted by the first invalid entry.
    An invalid entry has any of the following attributes:
    
     * The `size_check` byte doesn't match the one's compliment of the
       `size` byte (or `size_low` byte).
     * The key has a value of 0x0000.
    
    [OLPC manufacturing data format]: http://wiki.laptop.org/go/Manufacturing_data
    Cleaned up RF230BB, and refactored FRAME_RETRIES and CSMA_RETRIES
    #defines.
    Add clock_delay_us and clock_set_seconds to clock.h. Modify clock_wait to use clock_time_t.
    Remove the troublesome avr/dev/delay.* files.
    Add PLATFORM_NAME and combine the confusing *_REVISION defines into a single PLATFORM_TYPE
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    Hardware/software radio HAL patch from Roger Larsson.
    Use CHANNEL_802_15_4 define for RF channel on all AVR platforms, default 26.
    Remove hopefully unnecessary interrupt disable wrapper on eeprom reads and writes.
    Allow non-ipv6 build, e.g. Hello World
    Rerevert to misspelled HARWARE_REVISION
    Revert mistaken hardware name change!
    Change RIME max time to fit in 16 bit timer
    Use RF230BB for compilation - untested!
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    * Addition of Meshnetics Zigbig platform by Frederic Thepaut <frederic.thepaut@inooi.com>
    
    * Changed default RavenUSB timeout to 3 seconds... seems to give most reliable transmissions
    example\webserver-ipv6-raven works!
    Contiki port for the Atmel AVR Raven board
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Changed the Contiki Interface declaration macros from CCI/CLI to CCIF/CLIF because of already existing macros: Both CCI and CLI :-(
    Added defines for declaring functions/data which are part of the CCI (Contiki Core Interface) and CLI (Contiki Loadable Interface). Both defines are empty for all platforms but the upcoming Win32 port.
    Import of the contiki-2.x development code from the SICS internal CVS server
    * Addition of Meshnetics Zigbig platform by Frederic Thepaut <frederic.thepaut@inooi.com>
    
    * Changed default RavenUSB timeout to 3 seconds... seems to give most reliable transmissions
    Contiki port for the Atmel AVR Raven board
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix: Misconfigurations to compile for avr-zigbit platform
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Changed the name of the rimeaddr module to linkaddr
    Updated include paths for the moved files under net/
    Hardware/software radio HAL patch from Roger Larsson.
    Use CHANNEL_802_15_4 define for RF channel on all AVR platforms, default 26.
    Remove hopefully unnecessary interrupt disable wrapper on eeprom reads and writes.
    Do clock init before any RS232 output
    Allow non-ipv6 build, e.g. Hello World
    Use RF230BB for compilation - untested!
    Renamed serial module to serial-line
    * Addition of Meshnetics Zigbig platform by Frederic Thepaut <frederic.thepaut@inooi.com>
    
    * Changed default RavenUSB timeout to 3 seconds... seems to give most reliable transmissions
    Changed copyright.
    Fix to allow building without LCD interface
    example\webserver-ipv6-raven works!
    Contiki port for the Atmel AVR Raven board
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    introduced optional Makefile.customrules-$(TARGET), to contain custom platform make rules
    Cleanup UIP_CONF_IPV6_RPL configuration
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    [cooja-platform] Fixes for slip-bridge compatibility
    
    * Added dev/uart1.h header file to cooja platform
    * Added slip arch stub
    * Suppress examples putchar definition as cooja platform provides its own
    
    Note that the uart1.h file should only be an intermediate solution.
    A generic contiki-wide definition for uart handling is required as each
    platform defines its own varying set of uart functions.
    Changed the name of the rimeaddr module to linkaddr
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Fix naming issues and includes in uip-ds6-nbr.h
    Removed now unused per-module neighbor table size configs. Use NEIGHBOR_CONF_MAX_NEIGHBORS instead.
    removed rpl configuration, instead using contiki default values
    link-layer acks support for cooja motes
    cooja motes rimestats
    cpu/native: Add file-backed simulated EEPROM to native cpu.
    
    This patch removes a defunct EEPROM implementation from the native
    platform and provides a new EEPROM implementation for the native cpu.
    The previous implementation appears to be vestigal.
    
    This is useful for testing code which uses the EEPROM without running
    the code on the actual hardware.
    
    By default the code will create a new temporary file as the EEPROM
    backing, reinitializing each time. If you would like to preserve the
    EEPROM contents or specify a specific EEPROM file to use, you can set the
    `CONTIKI_EEPROM` environment variable to the name of the EEPROM file you
    wish to use instead. If it already exists, its contents will be used.
    If it does not already exist, it will be created and initialized by
    filling it with `0xFF`---just like a real EEPROM.
    
    A new example is also included, which was used to verify the correctness
    of the implementation. It can easily be used to verify the EEPROM
    implementations of other targets.
    Changed the name of the IPv6 number of route entries configuration from UIP_CONF_DS6_ROUTE_NBU to UIP_CONF_MAX_ROUTES.
    Cooja platform changes to get IPv6/RPL to work better
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    ip forwarding only for ipv4
    changed cooja platform default uip4 configuration to use uip_over_mesh with a slip gateway
    defining rtimer_clock_t to the same as clock_time_t
    added ipv4 and ipv6 default configuration
    cooja-platform netstack conf example
    net stack update: currently fixed to null* and rime.
    augmented CFS compliance for a RAM-based, one-file-only file system in Cooja.
    copied uipv6 configuration from native platform
    added queuebuf conf
    removed unused old stuff
    
    + introduced COOJA definition
    defining uip cache size
    aodv setting
    Added signed 32 bit data type.
    Made endianess configuration actually work.
    Added interface config (earlier added by Oliver)
    lowered uIP settings for smaller memory requirements during simulations
    added cooja; 'The Contiki OS Java Simulator'
    Changed the Contiki Interface declaration macros from CCI/CLI to CCIF/CLIF because of already existing macros: Both CCI and CLI :-(
    Added defines for declaring functions/data which are part of the CCI (Contiki Core Interface) and CLI (Contiki Loadable Interface). Both defines are empty for all platforms but the upcoming Win32 port.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    implemented rtimer library for simulated contiki motes
    + clock stub functions
    updated bad file info
    added empty rtimer files to remove compilation errors
    
    OBS: not implemented yet; rtimer does not work with COOJA
    Added #include that #defines NULL
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    Added *experimental* module for sending raw (non-routed) packets from Contiki. The name of the module is likely to change.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    dummy mtarch
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    implemented rtimer library for simulated contiki motes
    + clock stub functions
    added empty rtimer files to remove compilation errors
    
    OBS: not implemented yet; rtimer does not work with COOJA
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    MSP430 definitions
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup UIP_CONF_IPV6_RPL configuration
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cooja platform: do not include the rime module by default
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    [cooja-platform] Fixes for slip-bridge compatibility
    
    * Added dev/uart1.h header file to cooja platform
    * Added slip arch stub
    * Suppress examples putchar definition as cooja platform provides its own
    
    Note that the uart1.h file should only be an intermediate solution.
    A generic contiki-wide definition for uart handling is required as each
    platform defines its own varying set of uart functions.
    llsec: Added a layer in between NETSTACK_MAC and NETSTACK_NETWORK for implementing link layer security
    Added EEPROM support for Cooja with a rudimentary hexdump -C like viewer in the mote interface view
    Add the explicit list of modules, since we cannot do auto-dependency management of them
    introduced optional Makefile.customrules-$(TARGET), to contain custom platform make rules
    cooja motes rimestats
    Makefile.include: support make clean all
    
    Historically $(OBJECTDIR) was created when Makefile.include is read.  A
    consequence is that combining "clean" with "all" (or any other build
    target) results in an error because the clean removes the object
    directory that is required to exist when building dependencies.
    Creating $(OBJECTDIR) on-demand ensures it is present when needed.
    
    Removed creation of $(OBJECTDIR) on initial read, and added an order-only
    dependency forcing its creation all Makefile* rules where the target is
    explicitly or implicitly in $(OBJECTDIR).
    Makefiles: Allow setting UIP_CONF_IPV6=0 to work as expected.
    
    Setting UIP_CONF_IPV6 to zero from the make build command line is
    something that seems like it should ensure that IPv6 is disabled, but in
    fact it actually *enables* IPv6. This seems counter intuitive, so this
    patch changes the behavior of the makefiles to handle this case
    properly.
    Cooja platform changes to get IPv6/RPL to work better
    reverted previous patch that broke compiling on Instant Contiki
    new experimental feature: possibility to change mote types when loading a simulation
    
    made compile dialogs only select mote interfaces specified in the loaded configuration
    added objcopy external tools configuration
    changed nm command to sort numerically, and changed regexpressions to accept output from newer gcc versions
    added more debugging info under help menu
    bug fix: rpl was not included correctly
    Simplified host OS platform detection in Makefiles
    Removed quickstart rule for target 'clean' to avoid make warnings
    Replaced make-empty-symbols with empty-symbols.[c|h]
    The symbol generation shell scripts cause CRLF issues on Windows/Cygwin again and again. Instead of fixing this yet again I opted to remove the symbol generation script at least for the "no symbols" scenario with two C source files to be copied.
    reimplemented initial support for referencing contiki source files in cooja projects
    using OBJECTDIR instead of "obj_cooja" + bugfix: allow for externally defined CC
    Dummy watchdog implementation for cooja nodes
    contiki-cooja-main.c requires CLASSNAME
    added uip-driver (for both ivp4 and ipv6), setting WITH_UIP* compiler flags in Makefile
    removed radio "sensor" (only used for signal strengths, also available in radio driver)
    Removed references to irq, which is not used with the new sensor APIs
    Fixed COOJA quickstart to run COOJA from current directory
    added experimental slip support for contiki motes
    icnlude packet radio by default
    + clock stub functions
    start cooja with more memory to avoid outofmemory problems when running mspsim-based simulations
    Changed the name of the 'serial' module to 'serial-line' to signify that the module is about lines of data from the serial port, not individual bytes, and to make sdcc happy
    make all quickstart target phony
    make quickstart goal precious
    cooja quickstart should be started from normal cooja working directory, otherwise config relative paths won't work
    +
    cygwin path fix for quickstart
    + contiki app object
    reimplemented quickstart functionality
    added rule for .cooja target.
    
    compiling for cooja is now similar to other platforms, for example:
    make hello-world.cooja TARGET=cooja
    renaming printf/putchar/puts symbols to avoid jni library loading overriding our custom implementations
    
    experimental: directly references objcopy (tested on win32+linux)
    removed the symbols dummy target
    minor fix for SYMBOLS
    enabled config of entire ar command, not only arguments
    changed link argument sent to makefile:
    instead of using linker, user may specify linker line including tools
    removed old cfs.c
    Factored out setup directory search path for source files into Makefile.include.
    
    - All compilers used support the -I option for setting an include search directory.
    
    - The Contiki source tree follows the (common) approach of placing declarations (in headerf iles) in the same directory as definitions (in source files).
    
    As a result it makes sense to use the -I compiler option for just the same set of directories used for the vpath gnumake directive.
    
    Note: I checked several builds but nevertheless one or the other might need some additional adjustsments. Sorry for the inconvenience.
    removed radio sources from makefile
    
    (thrown during compilation instead)
    Factored out setup directory search path for source files into Makefile.include.
    
    - Search target specific directories before CPU specific directories.
    - Search CPU specific directories before generic directories.
    
    Note: I checked several builds but nevertheless one or the other might need some additional adjustsments. Sorry for the inconvenience.
    added source file check before launching cooja
    automatically generating cooja.jar
    added quickstart shortcut
    
    "make TARGET=cooja"
    don't define symbols as phone target on windows platforms
    remade the use of symbols.[c,h].
    symbols will now always be included in compilation
    added:
    - include contiki system symbols option (no need for the missing elf-loader files)
    
    (including symbols not working without a few additional files)
    moved cooja cfs files from /dev to /cfs
    added Contiki Filesystem (CFS) support in COOJA
    added radio sensor for signal strength etc.
    added support for busy-waits in simulated contiki processes
    (the entire process_run()-loop is inside a Contiki multi-thread)
    added multithreading sources to makefile
    removed old unused makefile-quickstart code
    +
    tidied up makefile
    compile contiki library update:
    
    * including selected Contiki process source files automatically at compilation time.
    -> removes the need for manually adding all source files in the cooja.config:s
    -> only selected source files are compiled
    added cooja; 'The Contiki OS Java Simulator'
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    cooja-platform netstack conf example
    strcasecmp is moved to lib directory
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Whitespace, added includes
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    [cooja-platform] Add cast to linkaddr_t to avoid warning
    [cooja-platform] Remove unused variable 'shortaddr'
    
    This variable was set but never used in the code
    [cooja-platform] Include eeprom.h to avoid implicit declaration warning
    Added EEPROM support for Cooja with a rudimentary hexdump -C like viewer in the mote interface view
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Updated include paths for the moved files under net/
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Cooja platform changes to get IPv6/RPL to work better
    Cleanup of the node-id.h files. The node-id.h file contains
    declarations of functions for setting and getting a node ID number, a
    functionality that exists on many platforms. Since this functionality
    was not considered part of the Contiki core, each platform defined its
    own node-id.h file. This commit attempts to clean this up by
    collecting the node-id.h into a core/sys/node-id.h file that replaces
    the old node-id.h files from the platform directories.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    example of adding cooja-platform mote interface manually
    moved contiki-specific initialization to separate function
    fixed random seed for cooja motes
    changed cooja platform default uip4 configuration to use uip_over_mesh with a slip gateway
    changed to ds6 module, instead of obsolete netif module
    removed bad uip-netif.h include
    fixed next timer variable types
    added simulated interrupt thread, currently only used to implement rtimer functionality
    Print out MAC and RDC when booting cooja nodes
    removed the use of a template source file when compiling for the cooja platform, instead compiling against contiki-cooja-main.c.
    
    this change simplifies access to the contiki main source, and makes the cooja platform more similar to other contiki targets
    added ipv4 and ipv6 default configuration
    simplified code, netstack init without relying on external net_init() functions
    minor etimer code cleanup
    allow contiki motes to handle several contiki events each tick + corrected variables types
    added serial line init
    bugfix: sensor process should be started by default
    removed autostart processes from contiki template: these are now instead defined in the contiki application
    printing contiki version and address at startup, similar to other Contiki platforms such as the sky
    function should return void
    towards adding support for 64-bit architectures: registering relative memory addresses with contiki instead of fetching absolute addresses to java
    Removed finally unnecessary cast.
    removed warning
    moved init routines to be executed on node specific basis
    reimplemented receiver calls (earlier tcpip_input) from inside multithreaded environment
    removed cfs ref in template
    removed comm stack specifics from template
    renamed contiki code template
    Added Rime support to Cooja
    moved cooja cfs files from /dev to /cfs
    added Contiki Filesystem (CFS) support in COOJA
    added special fix for new direct udp packet transmissions via tcpip_input()
    
    delaying tcpip_input call until yieldable
    changed to explicit no yield allowed flag
    added flags for checking if we are inside process_run()
    Removed busy-wait while receiving radio data (just stay awake)
    minor change, risk that simulation stalls if busywait counter is set to negative
    busy-wait before process_run()
    allows glue drivers to force system to wait
    added support for busy-waits in simulated contiki processes
    (the entire process_run()-loop is inside a Contiki multi-thread)
    added copyright header
    performance improvement when fetching memory (throwing pointer to array instead of creating new one)
    added cooja; 'The Contiki OS Java Simulator'
    [cooja-platform] Fixes for slip-bridge compatibility
    
    * Added dev/uart1.h header file to cooja platform
    * Added slip arch stub
    * Suppress examples putchar definition as cooja platform provides its own
    
    Note that the uart1.h file should only be an intermediate solution.
    A generic contiki-wide definition for uart handling is required as each
    platform defines its own varying set of uart functions.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    introduced simple MotePlugin interface, to be used by all mote plugins
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    dummy mtarch
    CPU agnostic implementation of the platform specific part of the multi-threading library. Uses fibers on Windows and the ucontext functions on other platforms.
    Moved wpcap*.[ch] from platform/minimal-net/net to cpu/native/net.
    Added Cygwin networking support using WinPcap.
    Added a Win32 CFS (Contiki File System) service. The opendir() parameter "/" is mapped to the directory containing contiki.exe. That allows easy access to *.prg and *.dsc files which are supposed to reside in the same directory.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updated to match the new sensors API
    removed refences to printf2log.h
    moved test applications from platform root to separate directory
    minor changes
    renamed test processes
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    removed refences to printf2log.h
    moved test applications from platform root to separate directory
    renamed 'user platform' to 'project directories'
    added cooja; 'The Contiki OS Java Simulator'
    Temporary deletion of files due to problems with the CVS repository
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    removed refences to printf2log.h
    cooja hello world (+ include printf2log.h)
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    radio sensor was removed
    Updated to match the new sensors API
    removed refences to printf2log.h
    moved test applications from platform root to separate directory
    minor changes
    renamed test processes
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    ctimer moved from net/rime to sys/
    removed refences to printf2log.h
    moved test applications from platform root to separate directory
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    cfs example updated
    removed refences to printf2log.h
    moved test applications from platform root to separate directory
    added Contiki Filesystem (CFS) support in COOJA: test process
    added cooja; 'The Contiki OS Java Simulator'
    A set of simple example programs for the ESB platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    no need to initialize serial line
    minor serial test application update
    Renamed serial module to serial-line
    Changed the name of the 'serial' module to 'serial-line' to signify that the module is about lines of data from the serial port, not individual bytes, and to make sdcc happy
    removed refences to printf2log.h
    moved test applications from platform root to separate directory
    minor changes
    added cooja; 'The Contiki OS Java Simulator'
    A set of simple example programs for the ESB platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updated to match the new sensors API
    test app update: print sensor type
    removed refences to printf2log.h
    moved test applications from platform root to separate directory
    renamed test processes
    added cooja; 'The Contiki OS Java Simulator'
    A set of simple example programs for the ESB platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Updated to match the new sensors API
    removed refences to printf2log.h
    moved test applications from platform root to separate directory
    renamed test processes
    added cooja; 'The Contiki OS Java Simulator'
    A set of simple example programs for the ESB platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Increased the default Cooja CFS size to 4000 bytes so that examples work (found by Roger Larsson)
    decreased default cooja CFS size
    augmented CFS compliance for a RAM-based, one-file-only file system in Cooja.
    cfs updated
    updating cooja cfs stubs according to recent commits
    updated cfs_write arguments
    updated interface
    Fixed dereference of void * pointer
    Fixed compiler warnings to make code compile with gcc's -pedantic switch
    minor updates in cooja cfs_ram
    Changed Contiki File System (cfs) from a service to a plain library.
    
    This change means that one needs to select _ONE_ cfs implementation at Contiki library link time. But this doesn't appear to be an issue as all platforms have their "favorite" implementation anyway.
    moved cooja cfs files from /dev to /cfs
    added Contiki Filesystem (CFS) support in COOJA: core interface, glue driver
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    cooja's init-net for uip and rime
    added empty rtimer files to remove compilation errors
    
    OBS: not implemented yet; rtimer does not work with COOJA
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    MSP430 definitions
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added uip-driver (for both ivp4 and ipv6), setting WITH_UIP* compiler flags in Makefile
    Updated to match the new netstack api
    Added a new module called "framer" that creates MAC level frames to
    the packetbuf from packet attributes. Two framer modules are included,
    one that creates 802.15.4 frame headers, and one that creates a
    minimal "nullmac"-style header that only contains the link-local
    addresses.
    added multihop routing support through replaceable modules. first implementation
    uses rime's route discovery by translating between ipv6 and rime addresses.
    added experimental checkpointing functionality:
    currently only implemented on the sky platform
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    uIP over uAODV simple radio driver
    cooja radio driver (uip + rime)
    cooja's init-net for uip and rime
    CFS implementation over the xmem module
    A set of simple example programs for the ESB platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    llsec: Added a layer in between NETSTACK_MAC and NETSTACK_NETWORK for implementing link layer security
    Updated include paths for the moved files under net/
    Removed the old unused hc.[ch] code
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    added uip-driver (for both ivp4 and ipv6), setting WITH_UIP* compiler flags in Makefile
    Updated to match the new netstack api
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Added a field to the struct mac interface:
    channel_check_interval(). This function returns the interval by which
    the duty cycling mechanism checks the radio channel for activity. It
    is used by higher layer mechanisms to determine suitable timeouts for
    retransmissions.
    Code style fix
    generic return values for sent packet
    added init function in MAC driver for easier configuration
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    added name to mac structure
    Added parameter to the mac off() method that specifies whether or not the radio should be turned off when the MAC layer is turned off
    Avoid usage of POSIX function names even for static functions as some indirectly included system header might declare them.
    Ensure that receiver_callback is set before calling it
    Made initialization function return a pointer to the MAC driver structure, to make initialization nicer
    Modified to use the new MAC layer API
    Avoid function pointer mismatch in set_receive_function().
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    Removed the old unused hc.[ch] code
    Port apps, examples, platforms and tools so they use the new neighbor and route API.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    not using mempcy for ack crc
    removed warnings
    removed bad memcpy:s
    added missing function declarations
    random ack time
    updated uip uaodv radio driver
    storing ack destination + removed header compression
    unicast packets being acknowledged
    uIP over uAODV simple radio driver
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    minor 64 bit fix: divide by sizeof(unsigned long) instead of constant 4
    support for contiki-node simulation on 64-bit architectures (contributed by Jesper Karlsson and David Gustafsson)
    new mulithreading switch function.
    
    should work on both linux and win32 platforms
    restored old post-link names (_cooja_sw -> cooja_sw)
    test: use pre-link asm names (earlier didn't work with some gcc ex. typical cygwin)
    rewrote switch-procedure in asm
    (solves problems with different gcc versions)
    added support for busy-waits in simulated contiki processes
    (the entire process_run()-loop is inside a Contiki multi-thread)
    Added a function for measuring stack usage
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    use CLOCK_CONF_SECOND.
    return the amount of seconds elapsed in clock_seconds()
    + clock stub functions
    added cooja; 'The Contiki OS Java Simulator'
    Code imported from the SICS CVS server
    Architecture specific code for the LEDs API
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    removed unused state codes and unused printf statements
    added support for busy-waits in simulated contiki processes
    (the entire process_run()-loop is inside a Contiki multi-thread)
    Added a hack for setting a text label on each simulated node
    * More uip_ipaddr_t fixes.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    rewrote switch-procedure in asm
    (solves problems with different gcc versions)
    added support for busy-waits in simulated contiki processes
    (the entire process_run()-loop is inside a Contiki multi-thread)
    Added a function for measuring stack usage
    Made stacksize configurable via external definition
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Cooja platform changes to get IPv6/RPL to work better
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    bugfix: puts() should append newline character + min buffer size 1024 also with uIP
    increased log buffer size with uIP SLIP
    not implementing putc(..FILE*) function, only stdout
    printf implementation towards cooja
    removed warnings
    removed compiler warning
    added buffer overflow check
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added support for busy-waits in simulated contiki processes
    (the entire process_run()-loop is inside a Contiki multi-thread)
    Commented out unused functionality: the ability to create a process running a thread was never used. With the new code, only running 'bare' threads is supported. If support for creating processes with a thread is needed, it may be reneabled later but currently there doesn't seem to be a need for it
    #if 0:ed out unused code
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Cleanup of the node-id.h files. The node-id.h file contains
    declarations of functions for setting and getting a node ID number, a
    functionality that exists on many platforms. Since this functionality
    was not considered part of the Contiki core, each platform defined its
    own node-id.h file. This commit attempts to clean this up by
    collecting the node-id.h into a core/sys/node-id.h file that replaces
    the old node-id.h files from the platform directories.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    updated bad file info
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added lib/sensors.h include
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Updated include paths for the moved files under net/
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    disabled writing IP addresses from inside COOJA, since the these should rather be determined by Contiki
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix warnings caused by incorrect param names / undocumented params
    [doc] added faulty esb and msp430 references
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added cooja; 'The Contiki OS Java Simulator'
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    implemented slip_arch_writeb() function
    removed unused variables + writing serial data in timeevent
    Changed the name of the 'serial' module to 'serial-line' to signify that the module is about lines of data from the serial port, not individual bytes, and to make sdcc happy
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    updated vibration sensor name to Contiki standard
    Updated to match the new sensors API
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updated to match the new sensors API
    adapted for new sensor APIs
    always consuming button events
    
    (bug fix: mote falls asleep during fast button clicks)
    decreased debounce timer
    added debounce timer to button sensor
    
    OBS removed sensor changed notification when button released!
    added cooja; 'The Contiki OS Java Simulator'
    Temporary deletion of files due to problems with the CVS repository
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    fixed random seed for cooja motes
    not limiting random seed to 99
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    [cooja-platform] Fixes for slip-bridge compatibility
    
    * Added dev/uart1.h header file to cooja platform
    * Added slip arch stub
    * Suppress examples putchar definition as cooja platform provides its own
    
    Note that the uart1.h file should only be an intermediate solution.
    A generic contiki-wide definition for uart handling is required as each
    platform defines its own varying set of uart functions.
    Include file needed for slip rpl-border-router build
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updated to match the new sensors API
    added cooja; 'The Contiki OS Java Simulator'
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Added stub for extended radio API for Cooja
    Add access to LQI and RSSI to Contiki motes
    link-layer acks support for cooja motes
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    removed debugging output, code style
    simulating 1 ms turnaround time (before transmissions) by default, and no transmissions on channel busy
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Bugfix: data that has been prepared with the prepare() method must be possible to send multiple times
    Bugfix: the return values from the cca method were switched
    temporarily turning on radio for sending a packet
    updated radio driver, simplified code
    bugfix by Wolf-Bastian Pttner: check buffer size at incoming radio data
    renamed radio driver
    set default radio channel: 26
    
    same as sky platform
    changed ss values + added configurable csma mac
    updated interface
    reimplemented receiver calls (earlier tcpip_input) from inside multithreaded environment
    added check that outgoing packet was not discarded from simulator
    make sure mote doesn't fall asleep while radio is transmitting/receiving
    radio_sstrength returns last received packet instead of current value
    
    radio_current_sstrength returns current value
    added support for several contiki comm stacks (uip + rime)
    radio_sstrength returns the signal strength of last packet received (instead of uninteresting current value)
    support for sending several packets fast
    Added Rime support to Cooja
    separated send-to-simulator.function from uIP
    minor adjustment.
    changed simulated MAC to wait for clear channel on surrounding -80 dB or larger (instead of -150)
    bug fix causing several quick resends to be destroyed
    added experimental radio channel support
    changed simulated mac protocol;
    waiting for both hw and ether at the same time
    added special fix for new direct udp packet transmissions via tcpip_input()
    
    delaying tcpip_input call until yieldable
    added simple surrounding signal strength checking before transmitting
    make sure we are inside process_run() before yielding
    added signal strength and output power (non-core) functions
    
    + bug fix
    Removed busy-wait while receiving radio data (just stay awake)
    bug fix: busy-waiting before checking data length
    radio driver with busy-wait support
    added cooja; 'The Contiki OS Java Simulator'
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updated to match the new sensors API
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Added EEPROM support for Cooja with a rudimentary hexdump -C like viewer in the mote interface view
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    use CLOCK_CONF_SECOND.
    return the amount of seconds elapsed in clock_seconds()
    + clock stub functions
    added cooja; 'The Contiki OS Java Simulator'
    Code imported from the SICS CVS server
    Architecture specific code for the LEDs API
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Add access to LQI and RSSI to Contiki motes
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    updated radio driver, simplified code
    renamed radio driver
    updated interface
    reimplemented receiver calls (earlier tcpip_input) from inside multithreaded environment
    radio_sstrength returns last received packet instead of current value
    
    radio_current_sstrength returns current value
    added support for several contiki comm stacks (uip + rime)
    Moved a much code as possible away from interrupt handler; main thread code now do not need to disable interrupts. Added energy estimation code. Added radio driver structure.
    Exported RSSI values
    A very simple CC2420 driver that can only send and receive raw packets. No extra CC2420 functionality is enabled or used.
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Dummy watchdog implementation for cooja nodes
    Added dummy watchdog functions for all AVR platforms
    Dummy watchdog implementation so that programs that use the watchdog compiles
    Passed tests on Raven 1284p in 3 seconds  with 56KB program memory disk
    removed unnecessary inclusion
    Added dummy watchdog.c to allow compiling and running code that calls the watchdog functions
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updated to match the new sensors API
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    removed no longer used cooja/contiki synchronization variables
    allow contiki motes to handle several contiki events each tick + corrected variables types
    reimplemented receiver calls (earlier tcpip_input) from inside multithreaded environment
    added special fix for new direct udp packet transmissions via tcpip_input()
    
    delaying tcpip_input call until yieldable
    changed to explicit no yield allowed flag
    added flags for checking if we are inside process_run()
    Removed busy-wait while receiving radio data (just stay awake)
    added busy-wait global variable
    added cooja; 'The Contiki OS Java Simulator'
    A set of simple example programs for the ESB platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    removed no longer used cooja/contiki synchronization variables
    allow contiki motes to handle several contiki events each tick + corrected variables types
    reimplemented receiver calls (earlier tcpip_input) from inside multithreaded environment
    added special fix for new direct udp packet transmissions via tcpip_input()
    
    delaying tcpip_input call until yieldable
    changed to explicit no yield allowed flag
    added flags for checking if we are inside process_run()
    Removed busy-wait while receiving radio data (just stay awake)
    added busy-wait global variable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Allow selection of slip port
    Add files needed for slip rpl-border-router build.
    Adding machine dependent SLIP routines for UART0.
    added some files for MSP430X I/O
    Made SLIP code coexist with ordinary serial code. If WITH_UIP=1, the SLIP code is used instead.
    Added energy estimation
    Removed clock_delay()
    Added clock_delay() between characters to avoid dropping them
    * General stuff for different baudrates:
    
        - ubr argument to slip_arch_int
    
        - macros for calculating ubr
    
        - argument -Bbaudrate to tools tunslip and scat
    * Bump speed over serial to 115200 (Tmote sky only).
    Use LPM4_EXIT to return from sleep on msp430.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add files needed for slip rpl-border-router build.
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Updated include paths for the moved files under net/
    Fix naming issues and includes in uip-ds6-nbr.h
    Port apps, examples, platforms and tools so they use the new neighbor and route API.
    Updated to the latest uip-ds6-route API
    Prefer UART0 for stdout; move DEBUFGLOW macro below definition of uint8_t
    Get better random seed on startup
    Refactor with params.c, h
    Allow selection of slip port
    Move LEDONPORTE1 define to contiki-conf.h, fixing typo.
    Free rtimer for contikimac, add print-stats option
    Get random seed from noisy ADC conversion at startup.
    Replace WEBSERVER by AVR_WEBSERVER
    Fix ip4 hello-world build
    Use uip-debug.h defines and print routines
    Add print to show cause of startup
    Defines need to be above their use in a conditional test
    MAC address to EEMEM, not PROGMEM
    Sync atmega128rfa1 main routine to the raven (timed route prints, etc.)
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Hardware/software radio HAL patch from Roger Larsson.
    Use CHANNEL_802_15_4 define for RF channel on all AVR platforms, default 26.
    Remove hopefully unnecessary interrupt disable wrapper on eeprom reads and writes.
    Allow non-ipv6 build, e.g. Hello World
    Add Raven RPL build option
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    Change RF channel to 26 for econotag compatibility
    Turn off radio DEBUGFLOW printing
    change for ds6 calls
    Update for NETSTACK_CONF_FRAMER
    Clean up, functional webserver for  further testing of  low power protocols
    Allow build with original radio driver using $make RF230BB=0
    update to new driver format
    experimental cxmac code
    Specify mac driver in contiki-conf.h
    Add conditional boot messages and file logging
    Allow hello-world to build, fix makefile ignoring rf230bb
    Add static coffee file system to webserver
    Add rf230bb radio driver with conditional make on RF230BB=1
    Renamed serial module to serial-line
    Changed copyright.
    Fix to allow building without LCD interface
    example\webserver-ipv6-raven works!
    Contiki port for the Atmel AVR Raven board
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    ContikiMAC: Default to contikimac_framer when using Rime over ContikiMAC
    ContikiMAC: Create and parse ContikiMAC header in special framer; Expanded framer interface
    to allow for creating and securing frames in advance; Create and secure frames in advance when sending bursts; Do neither recreate nor resecure frames that come from phase
    Changed the name of the rimeaddr module to linkaddr
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Fix naming issues and includes in uip-ds6-nbr.h
    Removed now unused per-module neighbor table size configs. Use NEIGHBOR_CONF_MAX_NEIGHBORS instead.
    settings: Correct a problem where sometimes CC_INLINE is not defined properly.
    Rename RIMESTATS_CONF_ON to RIMESTATS_CONF_ENABLED
    Changed the name of the IPv6 number of route entries configuration from UIP_CONF_DS6_ROUTE_NBU to UIP_CONF_MAX_ROUTES.
    Cleaned up RF230BB, and refactored FRAME_RETRIES and CSMA_RETRIES
    #defines.
    Add clock_delay_us and clock_set_seconds to clock.h. Modify clock_wait to use clock_time_t.
    Remove the troublesome avr/dev/delay.* files.
    Add PLATFORM_NAME and combine the confusing *_REVISION defines into a single PLATFORM_TYPE
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    Add params.c to Raven and sync with 128rfa1 contiki-conf.h
    Contikimac works with mcu sleep on both platforms.
    Allow selection of slip port
    Move LEDONPORTE1 define to contiki-conf.h, fixing typo.
    Let RPL examples enable platform RPL
    Add changes needed for contikimac
    Add explicit RADIOSTATS to platform contiki-conf.h
    Add project-conf.h to platform contiki-conf.h files.
    Fix jackdaw comments.
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Test TortoiseGit commit from Vista laptop
    Test TortoiseGit commit from windows 7
    Test git commit
    Add working cx-mac configuration values.
    Refactor, tune, add SICSLOWPAN_CONF_ACK_ALL defines for testing radio acks
    Refactor contiki-conf files, remove obsolete defines.
    Hardware/software radio HAL patch from Roger Larsson.
    Use CHANNEL_802_15_4 define for RF channel on all AVR platforms, default 26.
    Remove hopefully unnecessary interrupt disable wrapper on eeprom reads and writes.
    Fixes to allow ipv4 (hello world) builds
    RSSI read fix (use ED register in AACK mode), add reduced power configuration for miniature mesh testing.
    Allow non-ipv6 build, e.g. Hello World
    Add Raven RPL build option
    Reduce RIME max time to fit in 16 bit timer
    Update for NETSTACK_CONF_FRAMER
    Change back to SICSLOWPAN_COMPRESSION_HC06 from  SICSLOWPAN_COMPRESSION_HC01
    Clean up, functional webserver for  further testing of  low power protocols
    Platform 0 was matching by default
    Use new HC06
    Allow build with original radio driver using $make RF230BB=0
    update to new driver format
    experimental cxmac code
    Specify mac driver in contiki-conf.h
    Clarify defines for RF230 and effect on program size
    Add conditional boot messages and file logging
    Defines for fragmentation handling
    Add rf230bb radio driver with conditional make on RF230BB=1
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    example\webserver-ipv6-raven works!
    Contiki port for the Atmel AVR Raven board
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Changed the Contiki Interface declaration macros from CCI/CLI to CCIF/CLIF because of already existing macros: Both CCI and CLI :-(
    Added defines for declaring functions/data which are part of the CCI (Contiki Core Interface) and CLI (Contiki Loadable Interface). Both defines are empty for all platforms but the upcoming Win32 port.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Implement SLEEP and DOZE commands from the 3290p menu.
    Define serial commands the same as the 3290p for grepping.
    Moved raven-lcd.h file
    Remove unneeded module inclusion from avr and seedeye platforms
    atmega128rfa1: Fix the default build error
    
    Fixing from http://sourceforge.net/p/contiki/mailman/message/32494852/
    
    Signed-off-by: Weichuan Yan <yan.weichuan@gmail.com>
    cpu/avr: Added "AVRDUDE_MCU" configuration parameter.
    Refactor with params.c, h
    Include objects needed for slip rpl border router build
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    added inclusion of radio Makefile for the raven platforms
    *** empty log message ***
    Add rf230bb radio driver with conditional make on RF230BB=1
    example\webserver-ipv6-raven works!
    Contiki port for the Atmel AVR Raven board
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Changed the name of the rimeaddr module to linkaddr
    PROGMEM changes needed for newer avr-gcc compiler
    Refactor with params.c, h
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Refactor with params.c, h
    [doc] avr-raven: Fix placement of description for ravenserial group
    
    Note: The raven-lcd-interface and raven-ipso modules in atmega128rfa1
    seem to be needles for this platform and might be there only because of
    copy&paste from the raven platform. Should be removed in a later patch.
    [doc] avr-atmega128rfa1: add to parent platform group
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Implement SLEEP and DOZE commands from the 3290p menu.
    Define serial commands the same as the 3290p for grepping.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    update to ds6 calls
    Remove frame.h include, expose raven_ping6 for  external calls
    added missing end bracket
    Changed to use tcpip_icmp6_event for ICMP notifications.
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    changed format of the temperature value to be compliant with new specification
    Added an application and example to run IPSo interoperability test using RAVEN boards
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Added an application and example to run IPSo interoperability test using RAVEN boards
    [doc] avr-raven: Fix placement of description for ravenserial group
    
    Note: The raven-lcd-interface and raven-ipso modules in atmega128rfa1
    seem to be needles for this platform and might be there only because of
    copy&paste from the raven platform. Should be removed in a later patch.
    Closing doxygen groups
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    Adjust sleep time by ticks instead of seconds, proposed by Ivan Delamer
    flash led on tcp get, fix pingbacks on rpl build, patch web data for params
    Move LEDONPORTE1 define to contiki-conf.h, fixing typo.
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Remove contitional on clock updating, it should always be done after a sleep!
    Resolve TIMER2 conflict between sleep and possible clock usage.
    Implement SLEEP and DOZE commands from the 3290p menu.
    Define serial commands the same as the 3290p for grepping.
    Add optional pings to google and cisco
    change for ds6 calls
    Clean up, functional webserver for  further testing of  low power protocols
    Add serial command to send voltage measurement to webserver
    added missing end bracket
    Changed to use tcpip_icmp6_event for ICMP notifications.
    Add rf230bb radio driver with conditional make on RF230BB=1
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    apps for raven LCD menu
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Fix to allow building without LCD interface
    apps for raven LCD menu
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Updated for Contiki 2.0
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Replaced '404.html' with 'notfound.html' as '404.html' is no valid filename for the Apple2 disk operating system ProDOS 8.
    Yet another PETSCII<->ASCII issue solved - this time it caused failure to send the right content type.
    Avoid file handle leaks.
    Avoid memory block leaks (and minor code style adjustment).
    Allow to configure the maximum number of simultaneous connections to the cfs webserver.
    Added PETSCII support.
    Increased number of simultanious connections from two to three, fixed / streamlined 404.html handling and added logging on tcp resets.
    Removed compiler warnings.
    Made the webserver cfs support build and run.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    flash led on tcp get, fix pingbacks on rpl build, patch web data for params
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Send text following ? in GET to Raven LCD
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Add httpd_s* function layer and HTTPD_STRING_ATTR  for strings in different memory types
    Add static coffee file system to webserver
    All static strings to flash, add wildcard to file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Changes to raven-webserver by "David Kopf" <dak664@embarqmail.com>:
        *Fixed bug in the cgi script handling
        *Making a special check for index.html and treating it like index.shtml to
            allow a common header for all files.
        *adding robots.txt to keep google, msn, yahoo out
        *adding a nice icon through a <link rel="icon"... in the header
        *saying "not enabled" for temperature if it hasn't been initialized
    webserver app for RAVEN platform
    applications updates for uIPv6
    Allow to configure the maximum number of simultaneous connections to the cgi webserver.
    Optimzed PETSCII support.
    Include 'Referer:' in referer log message.
    Removed compiler warnings.
    Made the webserver logging follow the popular pattern of foo_???() being declared in foo.h and defined in foo.c.
    Fix for bug when script goes past the end of a file (thanks to Till Harbaum)
    Avoid compiler warnings.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix naming issues and includes in uip-ds6-nbr.h
    Port apps, examples, platforms and tools so they use the new neighbor and route API.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    Use PROCESS_NAME_STRING macro to handle NO_PROCESS_NAMES
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Keep track of sleeptime and display on status web page.
    Save  radio ontime  when webwser displays current  cpu ontime for later display of corresponding value  after possible TCP delays.
    Minor format and comment changes
    Add status page link, show correct rssi, fix indexing off array in  ipv4 builds
    Add address, neighbor, routes cgi's
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Enable radio stats in sensor cgi as default
    Add RADIOSTATS to sensors cgi
    Expose httpd-cgi  ipv6 address print to other modules
    Add httpd_s* function layer and HTTPD_STRING_ATTR  for strings in different memory types
    Add static coffee file system to webserver
    All static strings to flash, add wildcard to file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Changes to raven-webserver by "David Kopf" <dak664@embarqmail.com>:
        *Fixed bug in the cgi script handling
        *Making a special check for index.html and treating it like index.shtml to
            allow a common header for all files.
        *adding robots.txt to keep google, msn, yahoo out
        *adding a nice icon through a <link rel="icon"... in the header
        *saying "not enabled" for temperature if it hasn't been initialized
    webserver app for RAVEN platform
    applications updates for uIPv6
    Changed all sprintf() calls to snprintf() to make it useful for systems with very low buffer size
    Adjusted process display cgi to recent change in process states.
    Optimzed PETSCII support.
    Allow to find the scripts on PETSCII machines.
    Removed compiler warning.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Avoid usage of nameless unions as they are - surprisingly at least to me - not part of any C spec.
    Added center alignment to network statistic columns. Now it looks nicer and is consistent with the system processes columns.
    Updated processes script output to match HTML ;-)
    Ported processes cgi to Contiki 2.x.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    *-dsc.c files have been changed to remove forward reference for struct_icon variable, bacause it is strange that this variable is used wholly inside the C source file and declared extern for the forward reference.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Add RADIOSTATS to sensors cgi
    Expose httpd-cgi  ipv6 address print to other modules
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    applications updates for uIPv6
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Expose httpd-cgi  ipv6 address print to other modules
    All static strings to flash, add wildcard to file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Removed SELFSTART_PROCESS as AUTOSTART_ENABLE generally serves that purpose - and AUTOSTART_ENABLE gets already set as required :-)
    Made the webserver logging follow the popular pattern of foo_???() being declared in foo.h and defined in foo.c.
    Direct httpd logs to the Contiki log for non-CTK scenarios.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    applications updates for uIPv6
    Made the webserver logging follow the popular pattern of foo_???() being declared in foo.h and defined in foo.c.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    All static strings to flash, add wildcard to file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Updated for Contiki 2.0
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Made the webserver logging follow the popular pattern of foo_???() being declared in foo.h and defined in foo.c.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Add httpd_s* function layer and HTTPD_STRING_ATTR  for strings in different memory types
    Add static coffee file system to webserver
    All static strings to flash, add wildcard to file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    applications updates for uIPv6
    Adjusted source formatting Mk II ;-)
    Adjusted source formatting.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Update to proper webserver define
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Fix comment, add WEBDIR=default to force rebuild with default web content
    Allow hello-world to build, fix makefile ignoring rf230bb
    *** empty log message ***
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    example\webserver-ipv6-raven works!
    webserver app for RAVEN platform
    Removed unreferenced source from application makefile.
    Make lists of source files for each app available individually - i.e. for creation of dynamically loadable modules.
    Added comment in makefile on how to produce the http-strings.c file; having the actual rule in the makefile does not seem to work
    It simply doesn't make sense to link in both webserver.c and webserver-nogui.c. This raises the question if examples/webserver was tested at all ;-)
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    HTTP strings
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    All static strings to flash, add wildcard to file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Made the webserver cfs support build and run.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Patch from Landon Fuller adds const to PROGMEM, required for newer avr-gcc
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    flash led on tcp get, fix pingbacks on rpl build, patch web data for params
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Add static coffee file system to webserver
    All static strings to flash, add wildcard to file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    applications updates for uIPv6
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Removed SELFSTART_PROCESS as AUTOSTART_ENABLE generally serves that purpose - and AUTOSTART_ENABLE gets already set as required :-)
    Allow to optionally (triggered with SELFSTART_PROCESS) self start the application.
    Made the webserver logging follow the popular pattern of foo_???() being declared in foo.h and defined in foo.c.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Add httpd_s* function layer and HTTPD_STRING_ATTR  for strings in different memory types
    Add static coffee file system to webserver
    All static strings to flash, add wildcard to file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Avoid usage of nameless unions as they are - surprisingly at least to me - not part of any C spec.
    Made the webserver logging follow the popular pattern of foo_???() being declared in foo.h and defined in foo.c.
    Ported processes cgi to Contiki 2.x.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Fix html compliance, use wildcard in file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Updated processes HTML to match script output
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Fix html compliance, use wildcard in file-stats cgi
    Remove tab that was preventing cgi invokation
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Changes by "David Kopf" <dak664@embarqmail.com> to:
     -Add hit counter to index.html
     -Adding link to favicon.png
     -Fix serving of binary (image) files in avr-makefsdata file
    
    Changes by Colin O'Flynn:
     -Removed extra linebreak in tutorial-raven.txt
     -Fix to contiki-conf.h in avr-rcb platform
    Changes to raven-webserver by "David Kopf" <dak664@embarqmail.com>:
        *Fixed bug in the cgi script handling
        *Making a special check for index.html and treating it like index.shtml to
            allow a common header for all files.
        *adding robots.txt to keep google, msn, yahoo out
        *adding a nice icon through a <link rel="icon"... in the header
        *saying "not enabled" for temperature if it hasn't been initialized
    webserver app for RAVEN platform
    applications updates for uIPv6
    Updated with new Contiki website URL
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Fix html compliance, use wildcard in file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Add Huginn and Muninn web content
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Changes to raven-webserver by "David Kopf" <dak664@embarqmail.com>:
        *Fixed bug in the cgi script handling
        *Making a special check for index.html and treating it like index.shtml to
            allow a common header for all files.
        *adding robots.txt to keep google, msn, yahoo out
        *adding a nice icon through a <link rel="icon"... in the header
        *saying "not enabled" for temperature if it hasn't been initialized
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Add status page link, show correct rssi, fix indexing off array in  ipv4 builds
    Fix html compliance, use wildcard in file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Changes by "David Kopf" <dak664@embarqmail.com> to:
     -Add hit counter to index.html
     -Adding link to favicon.png
     -Fix serving of binary (image) files in avr-makefsdata file
    
    Changes by Colin O'Flynn:
     -Removed extra linebreak in tutorial-raven.txt
     -Fix to contiki-conf.h in avr-rcb platform
    webserver app for RAVEN platform
    applications updates for uIPv6
    Updated with new Contiki website URL
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Add Huginn and Muninn web content
    Fix html compliance, use wildcard in file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Add Huginn and Muninn web content
    Fix html compliance, use wildcard in file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Changes by "David Kopf" <dak664@embarqmail.com> to:
     -Add hit counter to index.html
     -Adding link to favicon.png
     -Fix serving of binary (image) files in avr-makefsdata file
    
    Changes by Colin O'Flynn:
     -Removed extra linebreak in tutorial-raven.txt
     -Fix to contiki-conf.h in avr-rcb platform
    Changes to raven-webserver by "David Kopf" <dak664@embarqmail.com>:
        *Fixed bug in the cgi script handling
        *Making a special check for index.html and treating it like index.shtml to
            allow a common header for all files.
        *adding robots.txt to keep google, msn, yahoo out
        *adding a nice icon through a <link rel="icon"... in the header
        *saying "not enabled" for temperature if it hasn't been initialized
    webserver app for RAVEN platform
    Patch from Landon Fuller adds const to PROGMEM, required for newer avr-gcc
    Refactor with params.c, h
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Add makefsdata.h, remove httpd-fsdata.c, make  now creates  with /tools/ makefsdata.
    Add Huginn and Muninn web content
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Add Huginn and Muninn web content
    Fix html compliance, use wildcard in file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Changes by "David Kopf" <dak664@embarqmail.com> to:
     -Add hit counter to index.html
     -Adding link to favicon.png
     -Fix serving of binary (image) files in avr-makefsdata file
    
    Changes by Colin O'Flynn:
     -Removed extra linebreak in tutorial-raven.txt
     -Fix to contiki-conf.h in avr-rcb platform
    Changes to raven-webserver by "David Kopf" <dak664@embarqmail.com>:
        *Fixed bug in the cgi script handling
        *Making a special check for index.html and treating it like index.shtml to
            allow a common header for all files.
        *adding robots.txt to keep google, msn, yahoo out
        *adding a nice icon through a <link rel="icon"... in the header
        *saying "not enabled" for temperature if it hasn't been initialized
    webserver app for RAVEN platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Add Huginn and Muninn web content
    Fix html compliance, use wildcard in file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Add Huginn and Muninn web content
    Fix html compliance, use wildcard in file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Add Huginn and Muninn web content
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Changes by "David Kopf" <dak664@embarqmail.com> to:
     -Add hit counter to index.html
     -Adding link to favicon.png
     -Fix serving of binary (image) files in avr-makefsdata file
    
    Changes by Colin O'Flynn:
     -Removed extra linebreak in tutorial-raven.txt
     -Fix to contiki-conf.h in avr-rcb platform
    webserver app for RAVEN platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Add status page link, show correct rssi, fix indexing off array in  ipv4 builds
    Add status web page with addresses, neighbors, routes
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Add Huginn and Muninn web content
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Changes to raven-webserver by "David Kopf" <dak664@embarqmail.com>:
        *Fixed bug in the cgi script handling
        *Making a special check for index.html and treating it like index.shtml to
            allow a common header for all files.
        *adding robots.txt to keep google, msn, yahoo out
        *adding a nice icon through a <link rel="icon"... in the header
        *saying "not enabled" for temperature if it hasn't been initialized
    Use the Z1 product ID as MAC/Node ID if no value is found in the XMEM
    Cleanup of the node-id.h files. The node-id.h file contains
    declarations of functions for setting and getting a node ID number, a
    functionality that exists on many platforms. Since this functionality
    was not considered part of the Contiki core, each platform defined its
    own node-id.h file. This commit attempts to clean this up by
    collecting the node-id.h into a core/sys/node-id.h file that replaces
    the old node-id.h files from the platform directories.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Node ID is stored in external flash and restored on bootup
    added Z1 platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Use the Z1 product ID as MAC/Node ID if no value is found in the XMEM
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Moved the sht11 driver to its own module
    Moved the cc2420 driver into a separate dev/cc2420 module
    Updated include paths for the moved files under net/
    Removed old unused profile.h code
    Clean up setting channel and CCA-threshold for CC2420 based motes.
    The CCA-threshold now defaults to -46 which give better simulation
    results and typically also better experimental results.
    This adjustment is also needed due to commit 0a13f99 in mspsim. As
    promised in https://github.com/mspsim/mspsim/pull/18 it broke the
    regression tests.
    Cleanup of the node-id.h files. The node-id.h file contains
    declarations of functions for setting and getting a node ID number, a
    functionality that exists on many platforms. Since this functionality
    was not considered part of the Contiki core, each platform defined its
    own node-id.h file. This commit attempts to clean this up by
    collecting the node-id.h into a core/sys/node-id.h file that replaces
    the old node-id.h files from the platform directories.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Bug fix: setup MAC address based on node id if no MAC address was restored from external flash
    Add clock_delay_us and clock_set_seconds to clock.h. Modify clock_wait to use clock_time_t.
    Remove the troublesome avr/dev/delay.* files.
    Add PLATFORM_NAME and combine the confusing *_REVISION defines into a single PLATFORM_TYPE
    fixed compiler warning
    fixed compiler warnings
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    If no MAC is defined, create one from the node ID
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    cleaned up main
    fixed so that accelerometer is initialized and the isr vector is included
    Definition of Z1 Starter Platform in contiki/platforms + LEDs + Potentiometer
    Added MAC overwriting/burning capability to the Z1
    
    Added compilation parameter "nodemac=1234" that can be used
    to overwrite the MAC at compilation time, and that combined
    with the burn-nodeid app can record a prestablished MAC on ext. mem.
    Added MAC overwriting/burning capability to the Z1
    
    Added compilation parameter "nodemac=1234" that can be used
    to overwrite the MAC at compilation time, and that combined
    with the burn-nodeid app can record a prestablished MAC on ext. mem.
    Node ID is stored in external flash and restored on bootup
    fixed configuration  of button sensor
    added init of xmem for z1 platform
    added Z1 platform
    no aaaa address if configured for RPL
    made use of the new link-local address api in ds6
    added missing include
    Moved sensors setup to contiki-sky-platform.c and common make rules to Makefile.common for easier reuse in similar platforms
    removed initialization of RPL from platform main
    added rpl support for tmote sky - enabled by default
    added possibility to hard-code 7 bytes of the MAC address - last byte picked from nodeid
    Bugfix: turn on watchdog before starting processes to avoid a process hanging in its startup phase
    removed uip_router
    integration of new uip6 code from Mathilde and Julien - adds routing and improved interface handling
    Added configurable router module
    Replaced old framer (framer_get/framer_set) with new NETSTACK style configuration. Added nullrdc-framer that is a nullrdc with framer support.
    Fixed bootup printf() with 32-bit timer values
    added bootup print of NETSTACK_RDC name
    Fix bootup printf() with 32-bit timer values
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Correctly print out the aaaa: address, if enabled
    Turning of the MAC protocol in the IPv4-over-mesh actually made performance worse due to broadcasts being received multiple times, which interfered with SLIP I/O
    Do not activate the sensors by default: sensors should be activated by the applications that need them
    Disable (debugging-) initialiation of aaaa:: address; add CSMA MAC for IPv6/6lowpan
    Added the CSMA MAC mechanism on top of the default duty cycling
    mechanism X-MAC. The CSMA is configurable with a MAC_CSMA define, just
    like the MAC protocol is configurable with the MAC_DRIVER define.
    Remove the default list of sensors from the main() file to save space - those apps that need them can use them directly in any case
    Added light, sht11, battery sensors; restored light and battery activation since rtimers don't work without them (at present)
    fixed for updated sensors API
    fixed Sky platform for new sensor APIs
    moved rime initialization into rime router so it is easier to switch IPv6 routing module
    Print link-local IPv6 address when booting the node
    Added X-MAC support for IPv6/SICSlowpan nodes, added 802.15.4 default framing to X-MAC
    added init function in MAC driver for easier configuration
    Print out the gateway's IP address more prominently
    When a node is configured as an IP gateway, we switch off the power-saving MAC protocolto improve performance and to avoid problems with the serial communication that X-MACs use of rtimers can cause
    Hack to make DS2411 ID useable as an Ethernet MAC address (remove multicast bit)
    added setup for uip6 with 802.15.4 frames and routing using Rime
    added configuration for panid
    * show radio channel at startup
    * only initialize timesynch when timesynch is enabled
    Changed the name of the 'serial' module to 'serial-line' to signify that the module is about lines of data from the serial port, not individual bytes, and to make sdcc happy
    #include lib/random.h
    Reverted the recent change from random_rand() to rand(). It turned out that
    since libc rand() returns a signed int, there were frequently problems with
    timer values wrapping. By reverting to random_rand(), we can provide a
    random generator that returns an unsigned and the timer problems are solved.
    Seed rand() with the node ID + MAC address
    added DCO/CPU speed re-synch each 30 seconds
    fixed sky platform to use the new uart1_active api to avoid messing up last chars transmitted
    removed compilation warning due to unused is_gateway variable (outside uIP mode)
    added printout of MAC protocol name
    added log_message() implementation
    Moved the network gateway logic to the uip-over-mesh module.
    map rime address to mac address for ipv6
    added initialization for uip6
    fixed battery sensor for sky platform
    changed sleep to go into LPM3
    removed redundant sensor initialization, added comment
    Moved initialization of the SHT11 until after other initialization: this seems to fix a bug where the SHT11 temperature and humidity values started varying wildly.
    Changed order of initialization to make light sensors work again: a previous change to irq.c seems to have conflicted with light sensor initialization
    Changed name of the simple-cc2420 module to cc2420: changed all function names and variable names from simple_cc2420_* to cc2420_*.
    Changed filename of the CC2420 driver from simple-cc2420 to cc2420.
    Moved ctimer_init() so that MAC protocols can use ctimers in their initialization code
    Change order of initialization so that Rime is initialized before uIP-over-Rime. Send out a new gateway command if a spurious (erroneous) gateway command is received. (Note for the future: this will cause a ping-pong problem with two correct gateways in the network; need to come up with a better solution for this.)
    Detect if node is attached to a SLIP line to set node to become the network's gateway
    Initialize serial line with 115200 bps for SLIP
    Added code for routing IP packets over low-power radios using the Rime mesh module
    Updated for the new simple_cc2420 API
    Fixed buggy build
    Rewrote the timesynch code to use the Rime sniffer interface instead of the kludge of running timesynch as a MAC layer
    Moving timesynch.[ch] from sys/ to core/net/rime as they have more to do with Rime than with the kernel
    Added initalization of the serial library. Changed LPM3 to LPM2 since the current serial driver does not work with LPM3 yet (we need to add start edge detection interrupt support to fix that).
    Initialize Rime address from hardware MAC address if no node ID has been configured. Be more explicit on how Rime address is assigned from node ID. Set time synch authority level from Rime address rather than node ID. Fix bug that put CPU in LPM2 instead of LPM3.
    Added initialization of the time synchronization module
    Removed inclusion of unused file cxmac.h
    Moved energy estimation initialization before starting processes so that processes may turn things on and off without messing up the energy estimates
    changed to show Contiki version, node id, and autostarted processes at startup
    Added watchdog support
    Added better boot-up behaviour of the LEDs - they can now be used to determine where in the boot sequence the node hangs (if it hangs)
    Compile profiling support only if PROFILE_CONF_ON is defined
    Added profiling support, made rime/mac initialization nicer
    Set channel to RF_CHANNEL after simple_cc2420_init.
    Otherwise the init function would reset the channel to 11.
    Added initialization of MAC and Rime
    Added sht11, energy estimation, xmac, diabled uIP (for now)
    Changed Contiki File System (cfs) from a service to a plain library.
    
    This change means that one needs to select _ONE_ cfs implementation at Contiki library link time. But this doesn't appear to be an issue as all platforms have their "favorite" implementation anyway.
    Added initialization of rtimers
    Set Rime address on boot up, activate button sensor
    restore of node id + changed to use cfs xmem (external flash)
    Removed non-functional cfs-xmem, replaced with cfs-ram
    Added IP/SLIP support
    Added CFS xmem
    Files for incorporating the Tmote Sky port into the Contiki build system
    Coffee no longer uses watchdog calls
    added Z1 xmem + coffee driver
    added Z1 platform
    make watchdog management slightly more abstract to simplify porting
    Removed deprecated dir cache macro.
    removed obsolete offset type definitions.
    Made the use of micro logs configurable to make file modifications
    more efficient on storage types that support inline updates.
    
    The sky platform uses logs, and the native platform uses no logs.
    A long refactoring session yielded the following.
    
    Technical changes:
    
    * Factored out file specific information from the file descriptor
      structure into a new file structure.
    
      - Useful file metadata can be stored after the file is closed.
      - File descriptors become much smaller.
      - Significantly reduces the need to scan for the file end.
    
    * Use correct types in all function signatures.
    * Removed the directory cache.
    
    Results:
    
    * Enormous speed increase when opening cached files (10x-20x.)
    * Multiple fd:s pointing to the same file have the correct semantics.
    * About 100 bytes smaller ROM size.
    * Slightly smaller static RAM size.
    reduced default sizes
    use abstract types for offsets and pages so that we can easily port it to
    very large or small memories.
    moved platform independent definitions
    moved platform independent code to the right place
    Configuration for the Sky platform.
    Node IDs are stored in external memory and restored on bootup
    Node IDs are stored in EEPROM and restored on bootup
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup UIP_CONF_IPV6_RPL configuration
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    ContikiMAC: Default to contikimac_framer when using Rime over ContikiMAC
    ContikiMAC: Create and parse ContikiMAC header in special framer; Expanded framer interface
    to allow for creating and securing frames in advance; Create and secure frames in advance when sending bursts; Do neither recreate nor resecure frames that come from phase
    Changed the name of the rimeaddr module to linkaddr
    Clean up setting channel and CCA-threshold for CC2420 based motes.
    The CCA-threshold now defaults to -46 which give better simulation
    results and typically also better experimental results.
    This adjustment is also needed due to commit 0a13f99 in mspsim. As
    promised in https://github.com/mspsim/mspsim/pull/18 it broke the
    regression tests.
    Fix naming issues and includes in uip-ds6-nbr.h
    Removed now unused per-module neighbor table size configs. Use NEIGHBOR_CONF_MAX_NEIGHBORS instead.
    Changed the name of the IPv6 number of route entries configuration from UIP_CONF_DS6_ROUTE_NBU to UIP_CONF_MAX_ROUTES.
    Removed the obsolete MAC_CONF_CHANNEL_CHECK_RATE (now replaced with NETSTACK_CONF_RDC_CHANNEL_CHECK_RATE)
    Made the sky and z1 platform handling of PROJECT_CONF_H the same as the other platforms: the makefile should define PROJECT_CONF_H to be the name of the header file to include. This header file should #undef everything it #defines, as it is included after all the other configuration options in contiki-conf.h
    Be a little more conservative in terms of what headers not to compress
    Use the SICSLOWPAN_CONF_COMPRESSION_THRESHOLD to avoid compressing IPv6 packets smaller than 60 bytes. This allows us to use ContikiMAC without its header, making it 802.15.4 compliant again.
    Made ContikiMAC/8 default on z1 platform; enabled power profiling by default
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    Modified contiki-conf.h and added sensys-scanner.
    Corrected contiki-conf.h to include project-conf.h
    Set QUEUEBUF_CONF_NUM to 4 to avoid .data overflow
    Fixed radio and contiki conf to get RIME working
    
    cc2420 isr handled at cc2420-arch, disabled accel. interrupts and modified
    platform/z1/contiki-conf.h to use same mac as sky.
    Added example-broadcast-button, sends packets every second or when button pushed.
    Works with other Z1s and Sky
    Changed the RDC rate configuration name to the new configuration name
    added Z1 platform
    split hw config into platform-conf and adapted to new SPI and CC2420 naming
    moved cc2420 config to platform config
    Increase the size of the route and neighbor tables; remove the uIP packet buffer queue for every neighbor to save RAM
    removed RPL routing state struct from platform config file
    Added missing parts of the RPL configuration
    added rpl support for tmote sky - enabled by default
    Turned on broadcast announcements by default, turn on announcements for collect
    Replaced old framer (framer_get/framer_set) with new NETSTACK style configuration. Added nullrdc-framer that is a nullrdc with framer support.
    updated sky platform for new sicslowpan
    Enabled 32-bit clock ticks to allow longer timeouts; experimentally disabled polite announcements in favour of a non-announcement based collect protocol
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Enabled sicslowpan fragmentation and reassembly by default on the sky platform
    Made it possible to override the SICSLOWPAN_CONF_FRAG option. Increased the default uIP buffer size on IPv6 to provide some room for fragmented packets
    Use cxmac for IP, xmac for non-IP. Increased uIP buffer size for IPv6 to accomodate ICMP packets
    Added default configuration options for the cxmac driver
    Reduce the TCP MSS so that it runs nicely over IPv6/802.15.4
    Added the CSMA MAC mechanism on top of the default duty cycling
    mechanism X-MAC. The CSMA is configurable with a MAC_CSMA define, just
    like the MAC protocol is configurable with the MAC_DRIVER define.
    reverted accidental commit
    Updated to match the new sensors API
    fixed for updated sensors API
    macro renamed to SPI_IS_ENABLED() to avoid confusions
    added macro for checking whether SPI is ENABLED
    Rime polite announcements should be used when IPv6 is enabled, and not used otherwise
    Renamed SPI_WAITFOREOTxBUF to SPI_WAITFORTxREADY for clarity and generalized SPI transmission status checks to work with both AVR and MSP430
    Changed to monitor the UART transmitter buffer ready flag instead of the UART transmitter empty flag. This almost doubles the speed of transmitting data to CC2420. Patch by James Brown.
    allow UIP_CONF_ROUTER to be set as compilation flag
    configured routing to off for sky-IPv6
    use polite announcements when running Rime over UDP.
    added init function in MAC driver for easier configuration
    decreased default elfloader memory usage for sky platform
    Increased the default number of queue buffers: there usually is plenty of RAM left, so we should  be able to afford it
    Increase default CPU speed from 2.4576 MHz to 3.9 MHz. Communication works better, at a low power cost
    cc2420 checksums temporarily disabled, due to timing problems with the x-mac unicast optimization
    Added CC2420 checksums to non-ipv6 packets. Set a conservative TCP MSS
    Disable timestamp when using 802.15.4 frames (CC2420_CONF_TIMESTAMPS adds timestamp to radio packets).
    changed to use HC01 compression for uip6
    set rime addr size to 8 for uip6, restored clock resolution
    added configuration for panid
    enabled multihop routing, increased uip buffer size.
    added workaround for memcpy/memset bug in mspgcc
    Made tick resultion more fine-grained to support a shorter LPP listen time
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    sicslowpan Typo
    Enable communication power accounting for xmac by default
    Switched name to CFS_CONF_OFFSET_TYPE to emphasize that it is a configurable option.
    switched cfs offset type to signed long to allow backward movements with cfs_seek.
    use unsigned long as cfs offset type.
    Bugfix: reduced the size of the uIP buffer to account for MAC header space
    Enabled X-MAC announcements by default, disabled polite broadcast announcements by default
    added DCO/CPU speed re-synch each 30 seconds
    elfloader executing loaded programs from ram (not rom) by default on msp430 platforms.
    temporary fix to get sicslowpan.c working on the Sky platform:
    conventional MAC implementations require a call to the MAC driver's
    read function.
    map rime address to mac address for ipv6
    added IPV6 configuration.
    Changed name of simple-cc2420 to cc2420
    Changed filename of the CC2420 driver from simple-cc2420 to cc2420.
    Changed the name of UIP_CONF_TCP_FORWARD to UIP_CONF_IP_FORWARD since forwarding is done at the IP level
    This is an initial commit of an implementation of the Chameleon
    architecture for the Rime stack for Contiki. The Chameleon
    architecture separates the header processing from the Rime protocol
    logic. Instead of having each protocol create its own part of the
    packet header, protocols use packet attributes. Before sending a
    packet, a special Chameleon header processing module creates a packet
    header from the packet attributes. The same Chameleon module parses
    incoming packets and creates packet attributes from the header.
    
    The details are in our SenSys 2007 paper:
    
    Adam Dunkels, Fredrik Osterlind, Zhitao He. An Adaptive Communication
    Architecture for Wireless Sensor Networks. In Proceedings of the Fifth
    ACM Conference on Networked Embedded Sensor Systems (SenSys 2007),
    Sydney, Australia, November 2007.
    
    http://www.sics.se/~adam/dunkels07adaptive.pdf
    
    This is a rewrite of the code that was developed for the paper.
    Reduced uIP buffer size to allow for TCP data over Rime mesh routing protocol
    Added uIP destimation unreachable message, removed defailt XMAC timer definitions (for now), turned profiling off(for now), added process event number configuration, reduced data memory size for the ELF loader
    Added configuration for upcoming shell improvements, removed PROCESS_CONF_FASTPOLL
    Enabled support for CC2420 timestamps
    Turned on energy estimation and profiling by default
    #ifdef around RF_CHANNEL
    enabled inline functions
    * Include msp430def.h for standard defines.
    
    * Remove obsolete LPM_CONF_OFF definition.
    Added X-MAC configuration, reduced ELF loader text memory size
    Added signed 32 bit data type.
    * Bump maximum number of udp sockets to 16.
    
    * Remove unused stuff.
    * More routing and forwarding cache entries.
    Increased RAM for loadable modules
    added cfs xmem size
    Node IDs are stored in external memory and restored on bootup
    ELF loader memory size, CFS RAM memory size
    Added CFS xmem conf
    Added LPM and IRQ configuration to make Tmote Sky port build with the Contiki build system
    * General stuff for different baudrates:
    
        - ubr argument to slip_arch_int
    
        - macros for calculating ubr
    
        - argument -Bbaudrate to tools tunslip and scat
    * Tmote sky has a CC2420_RADIO.
    Changed the Contiki Interface declaration macros from CCI/CLI to CCIF/CLIF because of already existing macros: Both CCI and CLI :-(
    Added defines for declaring functions/data which are part of the CCI (Contiki Core Interface) and CLI (Contiki Loadable Interface). Both defines are empty for all platforms but the upcoming Win32 port.
    Make malloc machine independent by relying on dependent sbrk(2).
    Import of files for the Tmote sky platform.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Definition of Z1 Starter Platform in contiki/platforms + LEDs + Potentiometer
    Moved sensors setup to contiki-sky-platform.c and common make rules to Makefile.common for easier reuse in similar platforms
    Added IRC client example.
    Introduced web browser as new example using ctk fullscreen mode.
    Rime statistics gathering
    Import of the contiki-2.x development code from the SICS internal CVS server
    Merges Z1SP into Z1 platform
    Added SHT25 sensor
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Remove leading zeros from node id
    Use the Z1 product ID as MAC/Node ID if no value is found in the XMEM
    CC2420: Turned SPI macros to functions and removed redundant AES API
    Merges Z1SP into Z1 platform
    Added flags to enable 20-bit support from msp430-gcc 4.7.x
    Removed the experimental checkpointing code
    contiki code style changes and copyright update + added source to ARCH instead of SOURCEFILES in platform Makefile
    first implementation for tlc59116 on z1
    removed  tag from z1 Makefile.common
    Added support for motelist and uploading to Z1 motes under Mac OSX
    Makefiles: Allow setting UIP_CONF_IPV6=0 to work as expected.
    
    Setting UIP_CONF_IPV6 to zero from the make build command line is
    something that seems like it should ensure that IPv6 is disabled, but in
    fact it actually *enables* IPv6. This seems counter intuitive, so this
    patch changes the behavior of the makefiles to handle this case
    properly.
    Made the stack and heap size configurable when using the IAR compiler on the MSP430 platforms
    Simple phidget-like relay driver for the Z1 mote with basic functionalities
    Zolertia's light sensor ziglet
    Added support for mspgcc 4.6+ that no longer supports generic MCU identifiers such as msp430x1611
    Improved support for the IAR compiler for the MSP430 platforms
    contiki-z1-platform is added by Makefile.z1
    Moved i2cmaster and adxl345 to contiki target source files
    The definitions for PxSEL2 are missing in some versions of mspgcc
    Added resource definition for button and removed obsolete compiler setup (compiler setup is now handled by cpu/msp430/msp430def.h)
    * Added f2xxx for two series (for example z1)
    * f1xxx is baseline and always included
    * Cleaned up the names of uart and spi (no x in names)
    * Updated SPI configuration for WiSMote
    Removed explicit specification of data model small for IAR compiler. Data model small is default and this will allow projects to override the data model
    Added a motelist target that is the same on both sky and z1
    improved support for IAR compiler for z1
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    added temperature-sensor to Makefile.common
    M Makefile.common to add tmp102 sensor by default
    Added dummy light driver. Now skywebsense likes Z1
    
    The light sensor driver is mapped to the same pin as the potentiometer
    in Z1 Starter Platform. sky-websense is untouched, though.
    Sky-websense compiles for Z1 (testing)
    XXX Interrupts by cc2420 & adxl345 compatible now
    
    Still remains to be seen why i2cmaster.c and adxl345.c need to be added
    in the Makefile.common at the very beginnig with the env. var.
    PROJECT_SOURCEFILES += i2cmaster.c adxl345.c
    optional lines in Makefile.common
    Definition of Z1 Starter Platform in contiki/platforms + LEDs + Potentiometer
    Added MAC overwriting/burning capability to the Z1
    
    Added compilation parameter "nodemac=1234" that can be used
    to overwrite the MAC at compilation time, and that combined
    with the burn-nodeid app can record a prestablished MAC on ext. mem.
    Added MAC overwriting/burning capability to the Z1
    
    Added compilation parameter "nodemac=1234" that can be used
    to overwrite the MAC at compilation time, and that combined
    with the burn-nodeid app can record a prestablished MAC on ext. mem.
    Slight modification to clean properly
    added basic phidget support for the Z1
    added Z1 xmem + coffee driver
    added Z1 platform
    minor fix for making the msp430 makefile work for msp430X arch
    Added make variable with command name to show in warning
    Moved sensors setup to contiki-sky-platform.c and common make rules to Makefile.common for easier reuse in similar platforms
    Makefile target for uploading precompiled firmware, example:
    make upload-ihex FILE=myfile.ihex
    fixed ext-sensor for jcreate
    refactored some ADC code into sky-sensors and made it possible to turn off sensors to save energy
    reverted accidental commit
    Added SHT11 sensor API for Tmote Sky
    Updated to match the new sensors API
    fixed for updated sensors API
    fixed Sky platform for new sensor APIs
    Broke out the CC2420 SFD interrupt into a separate file to allow easier overloading with project-specific files
    Allow reprogramming invidual nodes with 'make file.upload MOTE=x' where x is the mote number just like with make login
    ext-sensor: new driver for external sensors (e.g. Phidgets) on the Sentilla JCreate, developed by Marcus Lunden
    fixed IPV6 flags for sky
    When the tmote-bsl binary is found, program only one mote at once (parallel programming with tmote-bsl doesn't seem to work)
    Check for tmote-bsl-linux binary under linux, and use it is available
    changed upload rules due to problems on linux platforms
    changed the Makefile rules for uploading to sky-nodes.
    
    the earlier approach caused problems sometimes, resulting in command succeeding without all nodes being reprogrammed
    checkpointing library implemented for the sky platform (cfs interface is currently not optimized)
    Updated to make use of the tmote-bsl instead of msp430-bsl (needed for the Sentilla JCreate) if it exists
    Added acc-sensor.c, dDriver for the acceleromenter sensors on the Sentilla JCreate board
    removed energest-arch from sky and esb platforms
    Added cc2420-aes.c (functions for interfacing the build-in AES support of the CC2420)
    Changed filename of the CC2420 driver from simple-cc2420 to cc2420.
    Moved sky-specific make targets from the tools/sky/Makefile to the more natural platform/sky/Makefile.sky. Added a number of convenient targets for accessing the serial port.
    Removed ENERGEST_CONF_ON which is present in contiki-conf.h anyway
    Removed unused file rom.c
    Removed buggy button.c that is and should not be used
    Added battery-sensor.c
    Added inclusion of Tmote Sky bulk upload makefile
    Added CC2420 driver
    Added energy estimation, leds instead of minileds to be able to do energy estimation on leds
    Added sht11 driver, energy estimation. Removed IP/SLIP support for now
    Removed loader/ subdirectory
    changed to use msp430-bsl to upload programs
    added radio-sensor
    Added IP/SLIP support
    Added CFS xmem module
    Files for incorporating the Tmote Sky port into the Contiki build system
    Add function to change I2C baudrate and push relevant configuration values to platform config
    Added battery capability to Z1 platform
    Added missing radio capability define to Z1 platform config
    Merges Z1SP into Z1 platform
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Added resource definition for button and removed obsolete compiler setup (compiler setup is now handled by cpu/msp430/msp430def.h)
    Moved configuration of memcpy workaround to cpu (only needed for an older version of mspgcc)
    io, signal and IAR-GCC checks have been moved into contiki include file
    The Z1 platform has LEDs
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    added Z1 platform
    split hw config into platform-conf and adapted to new SPI and CC2420 naming
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    llsec: Added a layer in between NETSTACK_MAC and NETSTACK_NETWORK for implementing link layer security
    Merges Z1SP into Z1 platform
    Add the explicit list of modules, since we cannot do auto-dependency management of them
    Add the sht11 device driver module to the z1 platform
    Include a basic set of modules
    fixed so that accelerometer is initialized and the isr vector is included
    Definition of Z1 Starter Platform in contiki/platforms + LEDs + Potentiometer
    Added MAC overwriting/burning capability to the Z1
    
    Added compilation parameter "nodemac=1234" that can be used
    to overwrite the MAC at compilation time, and that combined
    with the burn-nodeid app can record a prestablished MAC on ext. mem.
    Added MAC overwriting/burning capability to the Z1
    
    Added compilation parameter "nodemac=1234" that can be used
    to overwrite the MAC at compilation time, and that combined
    with the burn-nodeid app can record a prestablished MAC on ext. mem.
    Slight modification to clean properly
    added basic phidget support for the Z1
    added Z1 xmem + coffee driver
    added Z1 platform
    minor fix for making the msp430 makefile work for msp430X arch
    Added make variable with command name to show in warning
    Moved sensors setup to contiki-sky-platform.c and common make rules to Makefile.common for easier reuse in similar platforms
    Makefile target for uploading precompiled firmware, example:
    make upload-ihex FILE=myfile.ihex
    fixed ext-sensor for jcreate
    refactored some ADC code into sky-sensors and made it possible to turn off sensors to save energy
    reverted accidental commit
    Added SHT11 sensor API for Tmote Sky
    Updated to match the new sensors API
    fixed for updated sensors API
    fixed Sky platform for new sensor APIs
    Broke out the CC2420 SFD interrupt into a separate file to allow easier overloading with project-specific files
    Allow reprogramming invidual nodes with 'make file.upload MOTE=x' where x is the mote number just like with make login
    ext-sensor: new driver for external sensors (e.g. Phidgets) on the Sentilla JCreate, developed by Marcus Lunden
    fixed IPV6 flags for sky
    When the tmote-bsl binary is found, program only one mote at once (parallel programming with tmote-bsl doesn't seem to work)
    Check for tmote-bsl-linux binary under linux, and use it is available
    changed upload rules due to problems on linux platforms
    changed the Makefile rules for uploading to sky-nodes.
    
    the earlier approach caused problems sometimes, resulting in command succeeding without all nodes being reprogrammed
    checkpointing library implemented for the sky platform (cfs interface is currently not optimized)
    Updated to make use of the tmote-bsl instead of msp430-bsl (needed for the Sentilla JCreate) if it exists
    Added acc-sensor.c, dDriver for the acceleromenter sensors on the Sentilla JCreate board
    removed energest-arch from sky and esb platforms
    Added cc2420-aes.c (functions for interfacing the build-in AES support of the CC2420)
    Changed filename of the CC2420 driver from simple-cc2420 to cc2420.
    Moved sky-specific make targets from the tools/sky/Makefile to the more natural platform/sky/Makefile.sky. Added a number of convenient targets for accessing the serial port.
    Removed ENERGEST_CONF_ON which is present in contiki-conf.h anyway
    Removed unused file rom.c
    Removed buggy button.c that is and should not be used
    Added battery-sensor.c
    Added inclusion of Tmote Sky bulk upload makefile
    Added CC2420 driver
    Added energy estimation, leds instead of minileds to be able to do energy estimation on leds
    Added sht11 driver, energy estimation. Removed IP/SLIP support for now
    Removed loader/ subdirectory
    changed to use msp430-bsl to upload programs
    added radio-sensor
    Added IP/SLIP support
    Added CFS xmem module
    Files for incorporating the Tmote Sky port into the Contiki build system
    Merges Z1SP into Z1 platform
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Corrected copyright holder.
    contiki code style changes and copyright update + added source to ARCH instead of SOURCEFILES in platform Makefile
    added tlc59116 datasheet url
    tlc59116 for zolertia, added 0 values at init and code clean-up
    working tlc59116 implementation for z1
    first implementation for tlc59116 on z1
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    fixed compiler warnings
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    Moved watchdog_periodic into the lowest level to avoid multiple redundant calls higher up
    added Z1 xmem + coffee driver
    split hw config into platform-conf and adapted to new SPI and CC2420 naming
    Renamed SPI_WAITFOREOTxBUF to SPI_WAITFORTxREADY for clarity and generalized SPI transmission status checks to work with both AVR and MSP430
    Changed to monitor the UART transmitter buffer ready flag instead of the UART transmitter empty flag. This almost doubles the speed of transmitting data to CC2420. Patch by James Brown.
    Added flash reads and writes to energest.
    Changed type from off_t (that potentially conflicts with existing types.h typedefs) to unsigned long
    Code style fix
    Disable the watchdog during the whole erase operation.
    Call watchdog_periodic before erasing each sector, because this operation
    takes approximately 1s.
    Added Doxygen documentation
    * Avoid using FASTSPI_TX to reduce size of object code.
    
    * Use off_t to avoid overflows.
    Import of files for the Tmote sky platform.
    Add function to change I2C baudrate and push relevant configuration values to platform config
    Fixes warnings, bad code and code style
    Zolertia's light sensor ziglet
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    Added api for reading out tmp100 x100 temps
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    Fixed bug when reading temperature (abstemp was not always set).
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    Added device drivers for tmp102 sensor for the Zolertia Z1 platform.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    Added dummy light driver. Now skywebsense likes Z1
    
    The light sensor driver is mapped to the same pin as the potentiometer
    in Z1 Starter Platform. sky-websense is untouched, though.
    Import of files for the Tmote sky platform.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    fixed buggy config of phidget sensors for Z1
    minor polish to the phidget sensor driver
    added basic phidget support for the Z1
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Added Potentiometer sensor in Z1 Platform
    add a dummy light sensor for econotag
    Added constants for light sensor values
    changed sky sensors to new api
    Import of the contiki-2.x development code from the SICS internal CVS server
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    Added Potentiometer sensor in Z1 Platform
    Updated *-sensor.c files from the sky platform.
    Fixed battery-sensor plus added simple test (XXX)
    Updated *-sensor.c files from the sky platform.
    Fixed battery-sensor plus added simple test (XXX)
    added Z1 platform
    added missing include
    minor cleanup
    refactored some ADC code into sky-sensors and made it possible to turn off sensors to save energy
    Updated to match the new sensors API
    Updated to match the new sensors API
    fixed for updated sensors API
    fixed Sky platform for new sensor APIs
    changed sky sensors to new api
    fixed battery sensor for sky platform
    Preliminary untested code for the internal MSP430 battery sensor
    Returning the actual value rather than something read during an interrupt
    Temporary deletion of files due to problems with the CVS repository
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Added SHT25 sensor
    Add function to change I2C baudrate and push relevant configuration values to platform config
    Zolertia's light sensor ziglet
    Cleaned up some files, moved z1-websense example
    Modified Makefile and test-potent.c for ICTPWSN
    Added Potentiometer sensor in Z1 Platform
    Updated *-sensor.c files from the sky platform.
    Fixed battery-sensor plus added simple test (XXX)
    Updated *-sensor.c files from the sky platform.
    Fixed battery-sensor plus added simple test (XXX)
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added IPv6 z1-websense demo w/MSP batt&temp sensor
    Added temperature sensor for the builtin temperature sensor in MSP430
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Cross compiler interrupt service routine compatibility definitions for MSP430 based platforms based on isr_compat.h by Steve Underwood.
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    fixed configuration  of button sensor
    added Z1 platform
    Updated to match the new sensors API
    fixed for updated sensors API
    changed sky sensors to new api
    Button sensor driver
    Temporary deletion of files due to problems with the CVS repository
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add function to change I2C baudrate and push relevant configuration values to platform config
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Add disable function to I2C driver
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    io, signal and IAR-GCC checks have been moved into contiki include file
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    Added I2C Master drivers and accelerometer drivers
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    Added api for reading out tmp100 x100 temps
    Added device drivers for tmp102 sensor for the Zolertia Z1 platform.
    Fixes warnings, bad code and code style
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Simple phidget-like relay driver for the Z1 mote with basic functionalities
    Initial WiSMote port based on code from Arago Systems.
    Updated *-sensor.c files from the sky platform.
    Fixed battery-sensor plus added simple test (XXX)
    Moved the ADC configuration to sky-sensors.c and sensors now only need to specify their sample channel. This helps to avoid conflicts when using multiple sensors.
    refactored some ADC code into sky-sensors and made it possible to turn off sensors to save energy
    Added email client example.
    Added IRC client example.
    Introduced web browser as new example using ctk fullscreen mode.
    Rime statistics gathering
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed duplicated condition in sht25 configuration
    Added SHT25 sensor
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Add missing includes, remove unimplemented function declaration.
    added static on the list send functions to get less compiler errors with IAR compiler
    Include string.h
    Added bursts support in CSMA/ContikiMAC, and CFS-swapping in
    queuebuf. Exemplified in examples/udp-stream.
    Renamed nullrdc to nullrdc-noframer and nullrdc-framer to nullrdc.
    
    nullrdc (previously nullrdc-framer) is now a RDC implementation that
    does not do any radio duty cycling but supports link layer addresses
    and frame format via framer (for example 802.15.4). nullrdc can now be
    used in the same way as contikimac, xmac, etc.
    
    nullrdc-noframer (previously nullrdc) is a null RDC implementation
    that does not do any radio duty cycling, does not add any header of its
    own to the packets, and does not support link layer addresses.
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Added a field to the struct mac interface:
    channel_check_interval(). This function returns the interval by which
    the duty cycling mechanism checks the radio channel for activity. It
    is used by higher layer mechanisms to determine suitable timeouts for
    retransmissions.
    Code style fix
    generic return values for sent packet
    added init function in MAC driver for easier configuration
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    added name to mac structure
    Added parameter to the mac off() method that specifies whether or not the radio should be turned off when the MAC layer is turned off
    Avoid usage of POSIX function names even for static functions as some indirectly included system header might declare them.
    Ensure that receiver_callback is set before calling it
    Made initialization function return a pointer to the MAC driver structure, to make initialization nicer
    Modified to use the new MAC layer API
    Avoid function pointer mismatch in set_receive_function().
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add function to change I2C baudrate and push relevant configuration values to platform config
    fixed z1 i2c bug where 2 extra bytes were read with every i2c-receive
    fixed z1 i2c bug where 2 extra bytes were read with every i2c-receive
    Add disable function to I2C driver
    Cross compiler interrupt service routine compatibility definitions for MSP430 based platforms based on isr_compat.h by Steve Underwood.
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    Added I2C Master drivers and accelerometer drivers
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    minor polish to the phidget sensor driver
    added basic phidget support for the Z1
    Moved the ADC configuration to sky-sensors.c and sensors now only need to specify their sample channel. This helps to avoid conflicts when using multiple sensors.
    refactored some ADC code into sky-sensors and made it possible to turn off sensors to save energy
    Added email client example.
    Added IRC client example.
    Introduced web browser as new example using ctk fullscreen mode.
    Rime statistics gathering
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updated *-sensor.c files from the sky platform.
    Fixed battery-sensor plus added simple test (XXX)
    Moved the ADC configuration to sky-sensors.c and sensors now only need to specify their sample channel. This helps to avoid conflicts when using multiple sensors.
    refactored some ADC code into sky-sensors and made it possible to turn off sensors to save energy
    Added email client example.
    Added IRC client example.
    Introduced web browser as new example using ctk fullscreen mode.
    Rime statistics gathering
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fixes warnings, bad code and code style
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    Added api for reading out tmp100 x100 temps
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    Fixed bug when reading temperature (abstemp was not always set).
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    Added device drivers for tmp102 sensor for the Zolertia Z1 platform.
    Fixes warnings, bad code and code style
    Corrected copyright holder.
    contiki code style changes and copyright update + added source to ARCH instead of SOURCEFILES in platform Makefile
    added tlc59116 datasheet url
    tlc59116 for zolertia, added 0 values at init and code clean-up
    working tlc59116 implementation for z1
    first implementation for tlc59116 on z1
    Cross compiler interrupt service routine compatibility definitions for MSP430 based platforms based on isr_compat.h by Steve Underwood.
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    Moved variable definitions from header file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    fixed so that accelerometer is initialized and the isr vector is included
    XXX Interrupts by cc2420 & adxl345 compatible now
    
    Still remains to be seen why i2cmaster.c and adxl345.c need to be added
    in the Makefile.common at the very beginnig with the env. var.
    PROJECT_SOURCEFILES += i2cmaster.c adxl345.c
    corrected adxl345, ISR was not disabled, now it is.
    Corrected some typos in the PORT1 ISR function.
    Updated accelerometer drivers to avoid conflicts with radio transceiver.
    Added I2C Master drivers and accelerometer drivers
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    Updated *-sensor.c files from the sky platform.
    Fixed battery-sensor plus added simple test (XXX)
    Added temperature sensor for the builtin temperature sensor in MSP430
    Added Sentilla Jcreate platform. This platform is similar to the Sky platform but with other sensors and 8 leds.
    Moved ninimal-ppp into backyard as it depends on the uIP ppp support.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added dummy light driver. Now skywebsense likes Z1
    
    The light sensor driver is mapped to the same pin as the potentiometer
    in Z1 Starter Platform. sky-websense is untouched, though.
    Import of files for the Tmote sky platform.
    A set of simple example programs for the ESB platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    Added dummy light driver. Now skywebsense likes Z1
    
    The light sensor driver is mapped to the same pin as the potentiometer
    in Z1 Starter Platform. sky-websense is untouched, though.
    Moved the ADC configuration to sky-sensors.c and sensors now only need to specify their sample channel. This helps to avoid conflicts when using multiple sensors.
    Corrected include path
    minor cleanup
    refactored some ADC code into sky-sensors and made it possible to turn off sensors to save energy
    Added constants for light sensor values
    fixed for updated sensors API
    changed sky sensors to new api
    Changed name of the simple-cc2420 module to cc2420: changed all function names and variable names from simple_cc2420_* to cc2420_*.
    Changed filename of the CC2420 driver from simple-cc2420 to cc2420.
    Radio sensor (RSSI) interface
    no initial signal strength by radio sensor
    added radio sensor for signal strength etc.
    Added radio signal strength simulation
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fixed sht11 driver, now ensures the i2c bus is disabled when initializing
    Added a quick sht11 sensor driver support for Z1
    
    Support for Sensirion SHT1x/SHT7x support is adapted from core for Z1 in the Ziglet port.
    XXX TODO:
     + Remove SHT11_PWR
     + Lines are shared with I2C, hence port reconfiguration must be added at the driver level.
    Made driver less platform-dependent and added support for msb-430.
    Make it possible to subscribe to DMA events.
    Improvement batch.
    dma transfer support.
    Platform-specific devices.
    cooja radio driver (uip + rime)
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    Updated *-sensor.c files from the sky platform.
    Fixed battery-sensor plus added simple test (XXX)
    Moved the ADC configuration to sky-sensors.c and sensors now only need to specify their sample channel. This helps to avoid conflicts when using multiple sensors.
    convert registers upto 9 instead of upto 4
    refactored some ADC code into sky-sensors and made it possible to turn off sensors to save energy
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add function to change I2C baudrate and push relevant configuration values to platform config
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Zolertia's light sensor ziglet
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    Added api for reading out tmp100 x100 temps
    Added device drivers for tmp102 sensor for the Zolertia Z1 platform.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Converted u8_t to uint8_t and u16_t to uint16_t in the platforms directory.
    Added "These names are deprecated, use C99 names" warnings the contiki-conf.h files that were missing it.
    Moved variable definitions from header file
    io, signal and IAR-GCC checks have been moved into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    Added temporary definition of P1SEL2 for those mspgcc4 without complete port register definitions.
    Updated accelerometer drivers to avoid conflicts with radio transceiver.
    Added I2C Master drivers and accelerometer drivers
    Moved the cc2420 driver into a separate dev/cc2420 module
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Cross compiler interrupt service routine compatibility definitions for MSP430 based platforms based on isr_compat.h by Steve Underwood.
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    XXX Interrupts by cc2420 & adxl345 compatible now
    
    Still remains to be seen why i2cmaster.c and adxl345.c need to be added
    in the Makefile.common at the very beginnig with the env. var.
    PROJECT_SOURCEFILES += i2cmaster.c adxl345.c
    Fixed radio and contiki conf to get RIME working
    
    cc2420 isr handled at cc2420-arch, disabled accel. interrupts and modified
    platform/z1/contiki-conf.h to use same mac as sky.
    Added example-broadcast-button, sends packets every second or when button pushed.
    Works with other Z1s and Sky
    Added I2C Master drivers and accelerometer drivers
    fixed naming of SPI and CC2420 related code
    Made SFD timestamps configurable via external definition
    Bugfix: changed #ifdef to #if, otherwise the SFD code would be enabled anyway
    Disable SFD interrupt by default
    Broke out the CC2420 SFD interrupt into a separate file to allow easier overloading with project-specific files
    fixed variable names
    added initial set-up code SFD capture interrupts usable for exact packet timestamping
    Changed name of the simple-cc2420 module to cc2420: changed all function names and variable names from simple_cc2420_* to cc2420_*.
    Changed filename of the CC2420 driver from simple-cc2420 to cc2420.
    Architecture dependent code for the CC2420 driver
    Added energy estimation
    Use LPM4_EXIT to return from sleep on msp430.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved the cc2420 driver into a separate dev/cc2420 module
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updated *-sensor.c files from the sky platform.
    Fixed battery-sensor plus added simple test (XXX)
    Updated *-sensor.c files from the sky platform.
    Fixed battery-sensor plus added simple test (XXX)
    added Z1 platform
    Updated to match the new sensors API
    fixed for updated sensors API
    changed sky sensors to new api
    Changed name of the simple-cc2420 module to cc2420: changed all function names and variable names from simple_cc2420_* to cc2420_*.
    Changed filename of the CC2420 driver from simple-cc2420 to cc2420.
    Radio sensor (RSSI) interface
    no initial signal strength by radio sensor
    added radio sensor for signal strength etc.
    Added radio signal strength simulation
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added dummy light driver. Now skywebsense likes Z1
    
    The light sensor driver is mapped to the same pin as the potentiometer
    in Z1 Starter Platform. sky-websense is untouched, though.
    Added constants for light sensor values
    changed sky sensors to new api
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    Updated *-sensor.c files from the sky platform.
    Fixed battery-sensor plus added simple test (XXX)
    Updated *-sensor.c files from the sky platform.
    Fixed battery-sensor plus added simple test (XXX)
    added Z1 platform
    added missing include
    minor cleanup
    refactored some ADC code into sky-sensors and made it possible to turn off sensors to save energy
    Updated to match the new sensors API
    Updated to match the new sensors API
    fixed for updated sensors API
    fixed Sky platform for new sensor APIs
    changed sky sensors to new api
    fixed battery sensor for sky platform
    Preliminary untested code for the internal MSP430 battery sensor
    Returning the actual value rather than something read during an interrupt
    Temporary deletion of files due to problems with the CVS repository
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fixes warnings, bad code and code style
    Simple phidget-like relay driver for the Z1 mote with basic functionalities
    Cross compiler interrupt service routine compatibility definitions for MSP430 based platforms based on isr_compat.h by Steve Underwood.
    Updated SPI config for faster SPI, split msp430/clock/spi into separate versions for MSP430/MSP430X
    Initial WiSMote port based on code from Arago Systems.
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    fixed cpu/msp430 for compilation with IAR compiler
    added missing include
    Enable the watchdog for rtimers too. Removed the disabling of the TACTL - it should not be needed, and interferes with the timing behaviour of stable rtimers
    Added function rtimer_arch_now that makes sure that the timer value does not change between readouts to avoid reading while the timer is being updated.
    Turn off timer before updating - needed to avoid bugs in ContikiMAC - not 100% sure why
    Removed safeguards around the update code for the timer; turns out they weren't needed (but instead triggered a bug in MSPsim)
    Turn off Timer A before modifying its control registers to avoid problems when timer is updated frequently
    Remove the read from TAIV - this should not be done for TIMERA0 interrupts (in fact, doing so messes up the other timer a interrupts, like the clock tick...)
    Need to clear the interrupt flag register for Timer A
    bug fix: wake up MSP430 when leaving rtimer interrupt if the rtimer polled a process.
    thanks to Marco Vedovati for finding the bug
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    Moved energest from lib/ to sys/
    removed offset in rtimer_arch
    removed redundant code - configuration of basic clock subsystem in clock and rtimer_arch
    Added energy estimation, embryo for possible future drift configuration
    rtimer_arch_now() now returns the correct value
    Fixed description
    MSP430 real-time rtimer support using timerb1
    Added #include that #defines NULL
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    Added *experimental* module for sending raw (non-routed) packets from Contiki. The name of the module is likely to change.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added Z1 platform
    Moved from examples/sky into generic platform/sky/apps so that all examples can use it
    Blinking LEDs
    Experimental energy estimation code
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added Z1 platform
    Fading LEDs
    A set of simple example programs for the ESB platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the node-id.h files. The node-id.h file contains
    declarations of functions for setting and getting a node ID number, a
    functionality that exists on many platforms. Since this functionality
    was not considered part of the Contiki core, each platform defined its
    own node-id.h file. This commit attempts to clean this up by
    collecting the node-id.h into a core/sys/node-id.h file that replaces
    the old node-id.h files from the platform directories.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added MAC overwriting/burning capability to the Z1
    
    Added compilation parameter "nodemac=1234" that can be used
    to overwrite the MAC at compilation time, and that combined
    with the burn-nodeid app can record a prestablished MAC on ext. mem.
    Added MAC overwriting/burning capability to the Z1
    
    Added compilation parameter "nodemac=1234" that can be used
    to overwrite the MAC at compilation time, and that combined
    with the burn-nodeid app can record a prestablished MAC on ext. mem.
    added Z1 platform
    added 5 second delay before actually burning the node id (may otherwise cause problems with the .upload script)
    Disable watchdog while burning node ID
    Added LEDs notification. THe program won't compile without a nodeid=XXX now
    Program for 'permanently' burning a node ID to external flash
    fixed includes
    Program for 'permanently' burning a node ID to EEPROM
    Import of the contiki-2.x development code from the SICS internal CVS server
    Increase fixed filename sizes in SLIP tunnels
    
    Long serial port names like
      /dev/serial/by-id/usb-FTDI_FT230X_Basic_UART_DN0038W8-if00-port0
    cause crashes.  This is the simplest fix to avoid the problem.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Reverted the htons -> uip_htons change - tunslip is intended to be compiled under *nix, not as a Contiki program
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Code style fixes
    * Line buffered stdout (also when pipe).
    * 6 should be 4 in size of DHCP messages.
    
    * -w option to sysctl.
    * Only copy first DNS server (correctly).
    * Different ifconfig command under fbsd.
    * General stuff for different baudrates:
    
        - ubr argument to slip_arch_int
    
        - macros for calculating ubr
    
        - argument -Bbaudrate to tools tunslip and scat
    * Check for ip_id zero senders and low cost update of zero ip_id.
    * Support for -DBAUDRATE=xxx
    * Minor mod for FreeBSD 6.
    Add 'cuad0' device.
    * Bump speed over serial to 115200 (Tmote sky only).
    
    * Linux fread workaround.
    
    * IP address detection.
    
    * Use SIGALRM rather than select timeout.
    Fancier tunslip with keepalives, address detection, route management,
    route cleanup.
    Oops. broken backwards compat.
    Add processing of command line options but stay backwards compatible.
    Import of userspace SLIP implementation.
    added missing 'grep -v ^_'
    Updated script for generating symbols.[ch]
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add serial logging tool.
    Increase fixed filename sizes in SLIP tunnels
    
    Long serial port names like
      /dev/serial/by-id/usb-FTDI_FT230X_Basic_UART_DN0038W8-if00-port0
    cause crashes.  This is the simplest fix to avoid the problem.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Do not print error message for errno when showing the usage string. Use the same usage string in the two places where the usage is printed.
    Allow debugging output to be written from the bridge mote and be printed out by the tapslip6 program
    added tapslip6 for ipv6 connectivity over USB/SLIP/ethernet - use together with uip6-bridge
    Enable NAT on both tap0 and tun0, and set the outgoing interface to eth10 which seems to be the default on instant-contiki
    Small script for setting up NAT on Ubuntu (probably works on other linuxen too)
    Replaced make-empty-symbols with empty-symbols.[c|h]
    The symbol generation shell scripts cause CRLF issues on Windows/Cygwin again and again. Instead of fixing this yet again I opted to remove the symbol generation script at least for the "no symbols" scenario with two C source files to be copied.
    Older ELF-loader code, may not work any longer
    rtimer implementation (not well tested)
    sprintf that use strformat, so there's no need to pull in the newlib
    implementation.
    Build system improvements.
    Scatterweb MSB430 port.
    Converted u8_t to uint8_t and u16_t to uint16_t in the docs and tools directories.
    Drop unneded null byte at end of httpd-fsdata files.
    Add /apps/webserver-nano
    Remove coffee page size option, not used
    Generalize to coffee files,  data attributes, includes
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    * Line buffered stdout (also when pipe).
    * General stuff for different baudrates:
    
        - ubr argument to slip_arch_int
    
        - macros for calculating ubr
    
        - argument -Bbaudrate to tools tunslip and scat
    * Support for -DBAUDRATE=xxx
    * More control chars that needs binary output.
    * Change baudrate to 115200.
    
    * Switch from use of select to blocking reads.
    
    * Print non ascii bytes as hex.
    Read error messages from device file and print to stdout.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    * Add/update linker & loader error codes.
    Padded struct codeprop_tcphdr to 4 bytes, to get around different
    alignment on different platforms.
    Slightly outdated versions were imported to sf.
    Simple program for sending an ELF file to a Contiki host
    scripts for auto-generating symbols.[c,h]
    
    may for example be called from a platform makefile
    Put strings in PROGMEM, strip CRLF in text files only
    Changes by "David Kopf" <dak664@embarqmail.com> to:
     -Add hit counter to index.html
     -Adding link to favicon.png
     -Fix serving of binary (image) files in avr-makefsdata file
    
    Changes by Colin O'Flynn:
     -Removed extra linebreak in tutorial-raven.txt
     -Fix to contiki-conf.h in avr-rcb platform
    Added makefs script for AVR
    Import of the contiki-2.x development code from the SICS internal CVS server
    Tool for Base64 encoding
    Increase fixed filename sizes in SLIP tunnels
    
    Long serial port names like
      /dev/serial/by-id/usb-FTDI_FT230X_Basic_UART_DN0038W8-if00-port0
    cause crashes.  This is the simplest fix to avoid the problem.
    Fix command line handling in tunslip6
    
    Signed-off-by: Maxim Osipov <maxim.osipov@gmail.com>
    Signed-off-by: Mariano Alvira <mar@devl.org>
    Fix for baudrate and ifconfig on MacOS X
    Add higher baud rates, option for link-local address assignment
    fixed compilation error
    Minor tweaks based on maniacbug commits.
    Format debug packet output for Wireshark import, as default.
    Options to extend mc1322x fifo to RAM buffer, or use hardware flow control with tunslip6.
    fixed the prefix query
    fixed slip stuffing bug when sending over prefix to border router
    Add optional time stamps, delays, and verbosity levels
    added support for sending link prefix to RPL border router
    Added option to connect to server instead of serial port
    made tunslip6 take an argument for TAP/TUN
    improved tunslip6 with support for debug printouts and configuration of IPv6 address
    Do not print error message for errno when showing the usage string. Use the same usage string in the two places where the usage is printed.
    Allow debugging output to be written from the bridge mote and be printed out by the tapslip6 program
    added tapslip6 for ipv6 connectivity over USB/SLIP/ethernet - use together with uip6-bridge
    Small hack for adding a timestamp to incoming lines
    Tool for making the http-string.c file from http-strings
    PROGMEM changes needed for newer avr-gcc compiler
    Fix symbol table generation for the AVR platform.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Converted u8_t to uint8_t and u16_t to uint16_t in the docs and tools directories.
    Added input args and optional complemented output
    Configured for 1284p  Raven webserver
    Script for setting up SLIP communication under FreeBSD 6
    Filter out symbols defined by the C implementation
    Removed debuggin symbols and indirect symbol pointers. Added calloc and strchr to builtins
    Added memmove as a builtin function.
    Changed the generation of symbols to the mknmlist script. Now symbols.h is not automatically generated so we can use it as a normal include file and remove symbols-def.h.
    * More compiler builtins.
    * Increase portability by avoiding "-" in regexp sets.
    
    * Sort vector before use.
    * Typo in comment.
    
    * Parse nm input and create namelist.
    Replaced make-empty-symbols with empty-symbols.[c|h]
    The symbol generation shell scripts cause CRLF issues on Windows/Cygwin again and again. Instead of fixing this yet again I opted to remove the symbol generation script at least for the "no symbols" scenario with two C source files to be copied.
    Scatterweb MSB430 port.
    Add gitclean and distclean options to /tools/Makefile
    Makefile for tools
    Added memmove as a builtin function.
    * Do print "" rather than just print.
    * Like mknmlist but rely on ANSI C features.
    There is no need to explicitly compile the shell binary anymore
    Updated to the new collect-view path
    Reverted previous change of the sky tools path: it was correct before
    Bugfix in the path to the sky linux tools
    Cleaned up the release compilation process by moving the targets for the binary packages into separate makefiles
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    Added INF files to Raven binary package
    Bugfix: the directory filename was wrong
    Cleaned up the release compilation process by moving the targets for the binary packages into separate makefiles
    Updated for git (intermediate commit - not sure this works yet!)
    Cleaned up the release compilation process by moving the targets for the binary packages into separate makefiles
    Made it easier to package the current CVS (the HEAD tag). Added package for the AVR Raven uIPv6 files.
    Makefile for extracting, compiling, and packaging a Contiki release
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Moved compile-platforms from examples/ to tools/release-tools
    avr-raven needs to be built with uIPv6 - this should hopefully fix the nightly builds
    Prepared for automatic cc65 compilation
    Print out system and c compiler version
    Fixed problem that made error output not visible
    Makefile for compiling a set of Contiki platforms and produce error messages for those platforms that do not compile
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved compile-platforms from examples/ to tools/release-tools
    Fixed problem that made error output not visible
    Makefile for compiling a set of Contiki platforms and produce error messages for those platforms that do not compile
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed the deprecated netsim platform. Added z1 and redbee.
    Don't include the deprecated netsim platform
    Added the 6502-based target atari to the nightly test build.
    Moved compile-platforms from examples/ to tools/release-tools
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Corrected mistake in the avr makefile target
    Added avr-raven to compilation targets
    Added the 6502 targets to the default nightly build checks
    Presuming that all platforms based on a certain cpu should be listed here...
    Prepared for automatic cc65 compilation
    Print out system and c compiler version
    It now says if it succeeded as well as failed
    Fixed problem that made error output not visible
    Makefile for compiling a set of Contiki platforms and produce error messages for those platforms that do not compile
    Fix names of avr-raven platform
    bugfix
    Removed the deprecated netsim platform. Added z1 and redbee.
    jcreate now has its own platform
    Added target for making the tools/ and tools/sky/uip6-bridge
    Removed the energest-demo from the nightly builds since it is now moved to contikiprojects
    Makefile for automated nightly building of example code
    Added the total power consumption to each powertrace printout; updated powertrace scripts to reflect this change
    Tools for parsing and plotting a power trace from Contiki
    Updated scripts to new output
    Tools for parsing and plotting a power trace from Contiki
    Avoid multiple inclusion
    Updated scripts to new output
    Tools for parsing and plotting a power trace from Contiki
    Added the total power consumption to each powertrace printout; updated powertrace scripts to reflect this change
    Tools for parsing and plotting a power trace from Contiki
    Tools for parsing and plotting a power trace from Contiki
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Add a managment tool for Coffee file system images.
    Refactoring.
    added ESB platform properties and made build.sh include properties files in
    the JAR.
    Refactoring.
    Add a managment tool for Coffee file system images.
    Add a managment tool for Coffee file system images.
    Removed dependency of Cygwin from hexameter.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    added platform configuration argument.
    simplified the argument interface. cleaned up some code
    Add a managment tool for Coffee file system images.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    added ESB platform properties and made build.sh include properties files in
    the JAR.
    only include class files.
    Add a managment tool for Coffee file system images.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Enable debug.
    Do not include ant runtime in classpath (avoids compilation warning with Ant 1.8+)
    optional ant build.xml for building the coffee jar file
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Refactoring.
    added support for extracting micro logs
    Add a managment tool for Coffee file system images.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Refactoring.
    minor changes for allowing coffee manager access from cooja
    Add a managment tool for Coffee file system images.
    added experimental checkpointing functionality:
    currently only implemented on the sky platform
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Minor improvements of coffee-manager.
    Refactoring.
    minor changes for allowing coffee manager access from cooja
    added support for extracting micro logs
    simplified the argument interface. cleaned up some code
    removed debug output
    Add a managment tool for Coffee file system images.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Refactoring.
    Removed the deprecated COFFEE_DIR_CACHE_ENTRIES parameter.
    minor changes for allowing coffee manager access from cooja
    load configuration from the JAR
    added support for extracting micro logs
    Add a managment tool for Coffee file system images.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Minor improvements of coffee-manager.
    Refactoring.
    fixed error: -e arg should be checked
    added platform configuration argument.
    minor changes for allowing coffee manager access from cooja
    added support for extracting micro logs
    simplified the argument interface. cleaned up some code
    Add a managment tool for Coffee file system images.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Refactoring.
    minor changes for allowing coffee manager access from cooja
    load configuration from the JAR
    read the bytes of a full region from the original file if the log record doesn't exist.
    added support for extracting micro logs
    removed debug output
    Add a managment tool for Coffee file system images.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Refactoring.
    load configuration from the JAR
    added support for extracting micro logs
    Add a managment tool for Coffee file system images.
    added experimental checkpointing functionality:
    currently only implemented on the sky platform
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    The image file size must include the size of the area before the FS.
    Minor improvements of coffee-manager.
    Refactoring.
    added support for extracting micro logs
    Add a managment tool for Coffee file system images.
    added experimental checkpointing functionality:
    currently only implemented on the sky platform
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added tools for STM32W.
    Set executable flag on binaries
    Added serialdump utility from sky folder to stm32w folder. It has one more option for limiting upload speed.
    Fix: handle stm32f-based serial interfaces (/dev/ttyACMx)
    Set executable flag on binaries
    added motelist-linux for stm32w platforms
    Tmote Sky tools for Windows and Linux
    Added serialdump utility from sky folder to stm32w folder. It has one more option for limiting upload speed.
    Source code for the serialdump tool
    Added serialdump utility from sky folder to stm32w folder. It has one more option for limiting upload speed.
    STM32W flasher utilities for Linux and Windows merged into a single folder.
    STM32W Flasher utility for Windows updated to version 2.0.2b2.
    Added tools for STM32W.
    STM32W flasher utilities for Linux and Windows merged into a single folder.
    STM32W Flasher utility for Windows updated to version 2.0.2b2.
    STM32W flasher utilities for Linux and Windows merged into a single folder.
    Added tools for STM32W.
    STM32W flasher utilities for Linux and Windows merged into a single folder.
    STM32W Flasher utility for Windows updated to version 2.0.2b2.
    STM32W flasher utilities for Linux and Windows merged into a single folder.
    STM32W Flasher utility for Windows updated to version 2.0.2b2.
    Added tools for STM32W.
    STM32W flasher utilities for Linux and Windows merged into a single folder.
    Added tools for STM32W.
    STM32W flasher utilities for Linux and Windows merged into a single folder.
    STM32W Flasher utility for Windows updated to version 2.0.2b2.
    Added tools for STM32W.
    STM32W flasher utilities for Linux and Windows merged into a single folder.
    STM32W Flasher utility for Windows updated to version 2.0.2b2.
    Added tools for STM32W.
    STM32W flasher utilities for Linux and Windows merged into a single folder.
    STM32W Flasher utility for Windows updated to version 2.0.2b2.
    Added tools for STM32W.
    STM32W flasher utilities for Linux and Windows merged into a single folder.
    STM32W Flasher utility for Windows updated to version 2.0.2b2.
    Added tools for STM32W.
    STM32W flasher utilities for Linux and Windows merged into a single folder.
    STM32W Flasher utility for Windows updated to version 2.0.2b2.
    Added tools for STM32W.
    STM32W flasher utilities for Linux and Windows merged into a single folder.
    STM32W flasher utility for Linux updated to 2.0.2b2.
    
    This new version also programs boards equipped with STM32F103
    chip as USB-serial converter.
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    STM32W flasher utilities for Linux and Windows merged into a single folder.
    STM32W Flasher utility for Windows updated to version 2.0.2b2.
    STM32W flasher utilities for Linux and Windows merged into a single folder.
    Added tools for STM32W.
    STM32W flasher utilities for Linux and Windows merged into a single folder.
    STM32W Flasher utility for Windows updated to version 2.0.2b2.
    Added tools for STM32W.
    STM32W flasher utilities for Linux and Windows merged into a single folder.
    STM32W Flasher utility for Windows updated to version 2.0.2b2.
    Added tools for STM32W.
    STM32W flasher utilities for Linux and Windows merged into a single folder.
    STM32W Flasher utility for Windows updated to version 2.0.2b2.
    Added tools for STM32W.
    STM32W flasher utilities for Linux and Windows merged into a single folder.
    Added tools for STM32W.
    In stm32w_flasher adapted error message for missing pyudev.
    In stm32w_flasher added check for pyudev and updated ubuntu package instructions.
    Fix: stm32w flasher for Ubuntu 12.04 and later
    In stm32w_flasher replaced hal-* calls with usage of pyudev.
    Fix: stm32w flasher for Ubuntu 12.04 and later
    Fix: stm32w flasher for Ubuntu 12.04 and later
    Fix: stm32w flasher for Ubuntu 12.04 and later
    Fix: stm32w flasher for Ubuntu 12.04 and later
    Fix: stm32w flasher for Ubuntu 12.04 and later
    packetbuf: Use packetbuf_holds_broadcast() all-over
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Updated include paths for the moved files under net/
    leds: Fix the API
    
    The leds API did not work in some cases. E.g. with the following sequence:
      leds_off(LEDS_ALL);
      leds_toggle(LEDS_GREEN);
      leds_off(LEDS_ALL);
    the green LED was remaining on after the last call.
    
    This was caused by the toggle feature made synonymous with the invert feature,
    although it is unrelated. leds_toggle() is indeed supposed to toggle an LED,
    while leds_invert() is supposed to change the active level of an LED. However,
    all users of leds_invert() actually meant leds_toggle(), and the invert feature
    does not make sense in this module because it is not handy due to successive
    calls to leds_invert() changing the intended behavior, and hardware active
    levels should be managed in leds_arch_set() (e.g. by XORing the passed value
    with a hardware-specific constant before setting the output levels of the pins).
    
    Consequently, this change:
     - removes the leds_invert() function,
     - makes leds_toggle() behave as expected relatively to leds_off() / leds_on(),
     - sanitizes the code in the leds module.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    Added tools for STM32W.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Bugfix: don't send packets if they are shorter than the link layer header length
    ipv6 bridge between 802.15.4 and ethernet - over USB/SLIP - use with sliptap6
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    *Support for Atmel 'Router Under Mac' (RUM) in Jackdaw
    Fixed serious bug which causes RNDIS task to end when non-data message are sent via RNDIS interface
    *** empty log message ***
    Lots of changes / commits! This allows ravenusbstick example to build at least.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added tools for STM32W.
    updated to use uip-ds6
    CC2420_CONF_AUTOACK is now defined in contiki-conf.h
    Turned off CC2420 auto ack for the bridge
    Increase uIP buffer size for the bridge to accomodate for the Ethernet headers from the PC host
    Allow debugging output to be written from the bridge mote and be printed out by the tapslip6 program
    Configure RF channel to be the same as the default Contiki sky channel
    added autoack config for bridge
    ipv6 bridge between 802.15.4 and ethernet - over USB/SLIP - use with sliptap6
    A module that enables Rime to run over UDP.
    added multihop routing support through replaceable modules. first implementation
    uses rime's route discovery by translating between ipv6 and rime addresses.
    added experimental checkpointing functionality:
    currently only implemented on the sky platform
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    Added tools for STM32W.
    ipv6 bridge between 802.15.4 and ethernet - over USB/SLIP - use with sliptap6
    Lots of changes / commits! This allows ravenusbstick example to build at least.
    Moved unused malloc code to backyard directory
    Make malloc machine independent by relying on dependent sbrk(2).
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Travis-ci tweaks, added CPUREV to 01 regression test, needed by mbxxx platform
    Added tools for STM32W.
    Updated include paths for the moved files under net/
    Port apps, examples, platforms and tools so they use the new neighbor and route API.
    Converted u8_t to uint8_t and u16_t to uint16_t in the docs and tools directories.
    Added tools for STM32W.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    fixed for new uip_buf
    updated to use uip-ds6
    Added missing functions to make the bridge code compile
    ipv6 bridge between 802.15.4 and ethernet - over USB/SLIP - use with sliptap6
    fix compiling ravenusb platform
    -Change needed for ravenusb to build
    -Reverts Makefile.include back to 1.57, then apply the needed change
    Updated include paths for the moved files under net/
    Added the const keyword to functions that use the tcpip_set_outputfunc(), which now takes a const argument
    Add clock_delay_us and clock_set_seconds to clock.h. Modify clock_wait to use clock_time_t.
    Remove the troublesome avr/dev/delay.* files.
    Add PLATFORM_NAME and combine the confusing *_REVISION defines into a single PLATFORM_TYPE
    Now it is putchar that has to be redefined (instead of __io_putchar), like other platforms.
    Added tools for STM32W.
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Allow debugging output to be written from the bridge mote and be printed out by the tapslip6 program
    ipv6 bridge between 802.15.4 and ethernet - over USB/SLIP - use with sliptap6
    Added httpd command that sets up a local web server, reading files from the CFS file system
    Guard against NULL input, remove unguarded printf()
    Broke out serial-shell from the shell app into its own app. Project can use the serial-shell to get a shell running over the serial line, just like a project can use the telnetd to get a shell running over Telnet/TCP/IP.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Updated to new radio_driver API
    tr1001 init fix
    Added radio sniffer program
    More uip_ipaddr_t fixes.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Changed the name of the rimeaddr module to linkaddr
    Moved the rimeaddr.[ch] code from the core/net/rime module to the core/net module, as it is used not only by rime code
    Updated include paths for the moved files under net/
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added tools for STM32W.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added tools for STM32W.
    ipv6 bridge between 802.15.4 and ethernet - over USB/SLIP - use with sliptap6
    Added a function that gets called when we see SLIP input. This function can be used to determine if a node is a SLIP gateway or not.
    * General stuff for different baudrates:
    
        - ubr argument to slip_arch_int
    
        - macros for calculating ubr
    
        - argument -Bbaudrate to tools tunslip and scat
    * Constness and voidness.
    * New function slip_write(u8_t *ptr, int len).
    
    * Slip active detection and current address reporting.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Converted u8_t to uint8_t and u16_t to uint16_t in the docs and tools directories.
    wpcapslip6 now works on Windows XP too (not only Vista or 7).
    
    Added function for IP packet processing, that performs a translation of
    link layer addresses inside IPv6 NAs from EUI-64 into EUI-48 format.
    Correcting wait behavior for wpcapslip tool
    -Added a check for EAGAIN to errno (this is need to handle temporary timeouts)
    -Recompiled wpcapslip6.exe
    Added warning messages.
    wpcapslip6 now works on Windows XP too (not only Vista or 7).
    
    Added function for IP packet processing, that performs a translation of
    link layer addresses inside IPv6 NAs from EUI-64 into EUI-48 format.
    In tun mode, device's fake MAC address is derived from its EUI-64.
    Bug fix in function for validating IP address and in command option list.
    Added some parameter checks.
    Added new options that make wpcapslip6 work also with the rpl-border-router.
    Added tools for STM32W.
    Updated include paths for the moved files under net/
    core/net/uip: Rename `uip_ethaddr` to `uip_lladdr`.
    
    There isn't really a good reason I can think of for these
    to be different between IPv4 and IPv6.
    Removed static modifier.
    Added tools for STM32W.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Converted u8_t to uint8_t and u16_t to uint16_t in the docs and tools directories.
    Added tools for STM32W.
    Decrease TTL for forwarded packets
    A hack for tunneling IP packets from a pcap device to SLIP under MS Windows. Essentially a combination of the wpcap driver and the tunslip tool.
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Updated include paths for the moved files under net/
    Converted u8_t to uint8_t and u16_t to uint16_t in the docs and tools directories.
    wpcapslip6 now works on Windows XP too (not only Vista or 7).
    
    Added function for IP packet processing, that performs a translation of
    link layer addresses inside IPv6 NAs from EUI-64 into EUI-48 format.
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    Updated include paths for the moved files under net/
    Correcting wait behavior for wpcapslip tool
    -Added a check for EAGAIN to errno (this is need to handle temporary timeouts)
    -Recompiled wpcapslip6.exe
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the docs and tools directories.
    Trap CR in framed debug string
    Add timestamp option, print strings after CR
    Add higher baud rates, fix occasional buffer overflow
    Added warning messages.
    wpcapslip6 now works on Windows XP too (not only Vista or 7).
    
    Added function for IP packet processing, that performs a translation of
    link layer addresses inside IPv6 NAs from EUI-64 into EUI-48 format.
    In tun mode, device's fake MAC address is derived from its EUI-64.
    Bug fix in function for validating IP address and in command option list.
    fixed so that the specified interface mac address is used when adding neighbors
    Added some parameter checks.
    Added new options that make wpcapslip6 work also with the rpl-border-router.
    Added tools for STM32W.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Header file moved to the correct folder.
    Added tools for STM32W.
    Added tools for STM32W.
    wpcapslip6 now works on Windows XP too (not only Vista or 7).
    
    Added function for IP packet processing, that performs a translation of
    link layer addresses inside IPv6 NAs from EUI-64 into EUI-48 format.
    Added tools for STM32W.
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Updated include paths for the moved files under net/
    Port apps, examples, platforms and tools so they use the new neighbor and route API.
    Converted u8_t to uint8_t and u16_t to uint16_t in the docs and tools directories.
    wpcapslip6 now works on Windows XP too (not only Vista or 7).
    
    Added function for IP packet processing, that performs a translation of
    link layer addresses inside IPv6 NAs from EUI-64 into EUI-48 format.
    Added tools for STM32W.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    fixed for new uip_buf
    updated to use uip-ds6
    Added missing functions to make the bridge code compile
    ipv6 bridge between 802.15.4 and ethernet - over USB/SLIP - use with sliptap6
    fix compiling ravenusb platform
    -Change needed for ravenusb to build
    -Reverts Makefile.include back to 1.57, then apply the needed change
    Updated to a version compatible with latest serialdump-windows.exe
    Cygwin library for running cygwin-based tools
    Moved retro IP configuration from web site to target machine.
    
    Better match user expectations by allowing to download plain disk images and configure the IP settings afterwards on the target machine - then most likely leveraging DHCP. This works for the users with the most usual Ethernet adapter and settings - which are now pre-configured in default.cfg's. Only the few users with non-default Ethernet adapter and/or settings are required to download a custom contiki.cfg and inject it manually into their disk image files.
    Replaced 10.1.1.1/8 with 192.168.0.0/24.
    Changed Contiki IPv4 address to 10.1.1.1 to allow for out-of-the-box testing in emulators with Ethernet support bound to a loopback interface (see Contiki Wiki article "Capturing loopback traffic with Wireshark").
    Moved platform/c128/contiki.cfg to tools/c128/sample.cfg
    Added C128 port. It runs the example webserver both in the cgi and cfs variant - although the latter only with a reduced MTU size due to memory constraints.
    Added (default) binary config file.
    Added mouse support for the Atari.
    Add somewhat more support to use different mouse drivers.
    
    - The default mouse driver is now always named 'contiki.mou'.
    - Alternative mouse drivers are present in the disk images.
    - Users can select their mouse driver by renaming the files.
    Have CBM DOS filetype of imported files match the one used by cc65.
    
    CFS_WRITE implies O_TRUNC which is implemented on CBM DOS by deleting an
    exsisting file. Hoewever this succeeds only if the CBM DOS filetype matches.
    
    We need a working O_TRUNC in order to be able to overwrite the contiki.cfg
    configuration file.
    
    Note: Now it has be clarified why overwriting the configuration file started to
    fail the CBM PFS (platform file system) can be activated for the recently added
    ethconfig program.
    Replaced web configurator with target-based ethconfig.
    Final adjustments for the switch from 'atari' to 'atarixl'.
    Adjustments for the switch from 'atari' to 'atarixl'.
    Removed some more old RCS tags from the Contiki source tree.
    loader.system is now official part of the cc65 Apple II support.
    Added Atari 800k (MyDOS 4.53/4) floppy image.
    Added Apple II 3.5" floppy image.
    Reorganized retro distro Makefile (and added telnetd).
    Removed unnecessary -p option from mkdir calls for cmd.exe compatibility.
    Deliver retro CBM disk images as .d64, .d71 and .d81 files.
    Moved retro IP configuration from web site to target machine.
    
    Better match user expectations by allowing to download plain disk images and configure the IP settings afterwards on the target machine - then most likely leveraging DHCP. This works for the users with the most usual Ethernet adapter and settings - which are now pre-configured in default.cfg's. Only the few users with non-default Ethernet adapter and/or settings are required to download a custom contiki.cfg and inject it manually into their disk image files.
    Renamed retro 'dhcp-client' to 'ipconfig' as it can as well be used for interactive manual configuration.
    Minor formatting adjustment.
    Adjusted relative path to BREADBOX64 to work when 'contiki' and 'contikiprojects' are siblings.
    Included FTP example into cc65 binary relaease tools. This made four disk images necessary for the Apple II and the Atari.
    Call Makefiles to build binaries before creating the images.
    Added Breadbox64 to the Atari Makefile (now that I ported BB64 to that target). This made three disk images necessary.
    Added (preliminary) Atari support to the disk image Makefile.
    Made cfs-based webserver example compatible with 8.3 file systems.
    Made cfs-based webserver example compatible with 8.3 file systems.
    Included Breadbox64 into cc65 binary relaease tools.
    
    This additional application results in three disks for the Apple2, two disks for the C64 and one disk for the C128. Therefore the download page can't get along anymore without some JavaScript adjusting the number of downloadable disks depending on the selected machine. With JavaScript turned off access to non-existent disks (i.e. disk 3 for the C64) results in a successfull download of a zero byte sized file - not exactly great but at least a defined behaviour.
    Explicitly set CBM filetypes (PRG, USR).
    Added new wget app (and some reorg).
    Added new DHCP app (and some reorg).
    Added a (batch-type of) Makefile to create the various disk images making up "6502 Contiki".
    Moved retro IP configuration from web site to target machine.
    
    Better match user expectations by allowing to download plain disk images and configure the IP settings afterwards on the target machine - then most likely leveraging DHCP. This works for the users with the most usual Ethernet adapter and settings - which are now pre-configured in default.cfg's. Only the few users with non-default Ethernet adapter and/or settings are required to download a custom contiki.cfg and inject it manually into their disk image files.
    Replaced 10.1.1.1/8 with 192.168.0.0/24.
    Changed Contiki IPv4 address to 10.1.1.1 to allow for out-of-the-box testing in emulators with Ethernet support bound to a loopback interface (see Contiki Wiki article "Capturing loopback traffic with Wireshark").
    Moved platform/c64/contiki.cfg to tools/c64/sample.cfg
    Added (default) binary config file.
    Moved the Collect-view application from the examples/sky-shell directory and into its own tools/collect-view directory
    Removed the default immediate initialization of the network (the collect & netcmd commands). This should be done via the GUI instead now.
    Set the default packet rate to one packet per minute. Set the default number of hop-by-hop retransmissions to 15.
    Java interface using the shell to collect and visualize sensor values from Sky nodes
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    The collectview tool should use the example/collect code instead of examples/sky-shell code
    Cleaned up the ant build file, renamed final jar to collect-view.jar
    Updated ant build file to build sky-shell.ihex when needed
    Moved the Collect-view application from the examples/sky-shell directory and into its own tools/collect-view directory
    Fixed problem with programming Sky nodes using the Java interface under Linux
    added option to program Sky nodes from the Java interface
    setup library for tools
    Java interface using the shell to collect and visualize sensor values from Sky nodes
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the Collect-view application from the examples/sky-shell directory and into its own tools/collect-view directory
    The collect view functions now take the node's routing metric, not the parent's routing metric.
    ETX 1.0 is 8, not 16, in the new collect code
    Added Routing Metric and ETX
    Use 0 if no shortest inter-packet time is available
    Added charts over next hop changes and estimated lost packets.
    Added categories for cleaner tab layout
    * Added estimated packet loss and next hop change count to node info panel
    Added a radio duty cycle tab; made packet reception chart have integer labels
    Added shortest/longest/average period to node info panel
    Added duplicate detection
    * Updated to show base shape in line charts (can be disabled in menu)
    * Added simple packet delivery chart based on sequence numbers
    fixed more robust parsing
    Added menu option to send init script to nodes. Added charts 'Average Power' and 'Average Temperature'. Limited the number of displayed chart items to 250 in the time charts
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the Collect-view application from the examples/sky-shell directory and into its own tools/collect-view directory
    Fixed problem with programming Sky nodes using the Java interface under Linux
    Java interface using the shell to collect and visualize sensor values from Sky nodes
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the Collect-view application from the examples/sky-shell directory and into its own tools/collect-view directory
    Added more options to send and receive data (via command, file, standard in)
    Fixed problem with programming Sky nodes using the Java interface under Linux
    added option to program Sky nodes from the Java interface
    Java interface using the shell to collect and visualize sensor values from Sky nodes
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Assume the connection is open after the command is started instead of waiting for first input
    Moved the Collect-view application from the examples/sky-shell directory and into its own tools/collect-view directory
    Added more options to send and receive data (via command, file, standard in)
    Fixed problem with programming Sky nodes using the Java interface under Linux
    added option to program Sky nodes from the Java interface
    Java interface using the shell to collect and visualize sensor values from Sky nodes
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the Collect-view application from the examples/sky-shell directory and into its own tools/collect-view directory
    Fixed problem with programming Sky nodes using the Java interface under Linux
    added option to program Sky nodes from the Java interface
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the Collect-view application from the examples/sky-shell directory and into its own tools/collect-view directory
    Added more options to send and receive data (via command, file, standard in)
    Made configuration of node info table persistent
    minor polish to the phidget sensor driver
    added basic phidget support for the Z1
    Moved the ADC configuration to sky-sensors.c and sensors now only need to specify their sample channel. This helps to avoid conflicts when using multiple sensors.
    refactored some ADC code into sky-sensors and made it possible to turn off sensors to save energy
    Added email client example.
    Added IRC client example.
    Introduced web browser as new example using ctk fullscreen mode.
    Rime statistics gathering
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the Collect-view application from the examples/sky-shell directory and into its own tools/collect-view directory
    Bug fix: corrected sort with average numbers
    Added simple spring layout that attracts connected nodes in node visualizer
    Added more options to send and receive data (via command, file, standard in)
    Added Routing Metric and ETX
    Only remember last link for each node + changed node comparator to sort by id
    Fixed to sort nodes by id. Added charts for packets received last 5 minutes and last/average hops to sink
    Added system time when the sensordata is received at the base station and fixed sensor data log to be flushed.
    Added menu option to send init script to nodes. Added charts 'Average Power' and 'Average Temperature'. Limited the number of displayed chart items to 250 in the time charts
    Java interface using the shell to collect and visualize sensor values from Sky nodes
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Added option to read sensor data from TCP connection
    Added chart with average routing metric
    Started on UDP server support for CollectView
    The collectview tool should use the example/collect code instead of examples/sky-shell code
    Updated network graph to remember fixed node locations when clearing sensor/node data.
    Moved the node control tab to the left
    Clear node positions when clearing node data
    Moved the Collect-view application from the examples/sky-shell directory and into its own tools/collect-view directory
    Made exit configurable
    Updated to run without serial connection
    The collect view functions now take the node's routing metric, not the parent's routing metric.
    Corrected ETX values
    Added button to connect to serial in the node control panel
    Added configuration of max item count in time charts
    Added quick start help text, added explicit save settings in menu, fixed bug in the background image selection.
    Added a panel showing the beacon interval
    Added simple spring layout that attracts connected nodes in node visualizer
    Added more options to send and receive data (via command, file, standard in)
    Added the number of neighbors to the collection view app
    Added Routing Metric and ETX
    Added tab to set new collect parameters
    Made configuration of node info table persistent
    Added charts over next hop changes and estimated lost packets.
    Added categories for cleaner tab layout
    * Added estimated packet loss and next hop change count to node info panel
    Changed NodeInfo to use a table to show node information instead of text area.
    Clear all nodes when clearing sensor data. Use Node.compareTo() to sort nodes instead of NodeComparator.
    Added a radio duty cycle tab; made packet reception chart have integer labels
    Bug fix: use getNodeTime() instead of getSystemTime()
    Fixed to sort nodes by id. Added charts for packets received last 5 minutes and last/average hops to sink
    Updated to sort nodes by numeric id instead of name
    Added chart with received packets per minute and skeleton for node statistics panel
    * Updated to show base shape in line charts (can be disabled in menu)
    * Added simple packet delivery chart based on sequence numbers
    Added battery voltage level readout & SHT11 low-voltage indicator
    Fixed problem with programming Sky nodes using the Java interface under Linux
    Added system time when the sensordata is received at the base station and fixed sensor data log to be flushed.
    Added menu option to send init script to nodes. Added charts 'Average Power' and 'Average Temperature'. Limited the number of displayed chart items to 250 in the time charts
    Milliseconds -> seconds
    added option to program Sky nodes from the Java interface
    moved range configuration to initialization
    bug fix
    Java interface using the shell to collect and visualize sensor values from Sky nodes
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the Collect-view application from the examples/sky-shell directory and into its own tools/collect-view directory
    Added more options to send and receive data (via command, file, standard in)
    Made configuration of node info table persistent
    minor polish to the phidget sensor driver
    added basic phidget support for the Z1
    Moved the ADC configuration to sky-sensors.c and sensors now only need to specify their sample channel. This helps to avoid conflicts when using multiple sensors.
    refactored some ADC code into sky-sensors and made it possible to turn off sensors to save energy
    Added email client example.
    Added IRC client example.
    Introduced web browser as new example using ctk fullscreen mode.
    Rime statistics gathering
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the Collect-view application from the examples/sky-shell directory and into its own tools/collect-view directory
    Java interface using the shell to collect and visualize sensor values from Sky nodes
    A set of simple example programs for the ESB platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the Collect-view application from the examples/sky-shell directory and into its own tools/collect-view directory
    The collect view functions now take the node's routing metric, not the parent's routing metric.
    Reordered the data items to match the new collect-view-data shell command instead of the old sky-alldata command
    Added the number of neighbors to the collection view app
    Added battery voltage level readout & SHT11 low-voltage indicator
    Added menu option to send init script to nodes. Added charts 'Average Power' and 'Average Temperature'. Limited the number of displayed chart items to 250 in the time charts
    Java interface using the shell to collect and visualize sensor values from Sky nodes
    A set of simple example programs for the ESB platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the Collect-view application from the examples/sky-shell directory and into its own tools/collect-view directory
    Fixed problem with programming Sky nodes using the Java interface under Linux
    added option to program Sky nodes from the Java interface
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Added option to read sensor data from TCP connection
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    fixed bug in UDP packet handling
    added line to parse when receiving UDP packets
    Started on UDP server support for CollectView
    Moved the Collect-view application from the examples/sky-shell directory and into its own tools/collect-view directory
    Added more options to send and receive data (via command, file, standard in)
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Timesynch is now on 32768 Hz clock instead of 8192 Hz.
    Moved the Collect-view application from the examples/sky-shell directory and into its own tools/collect-view directory
    Added parsing of COOJA logs
    Fix: ETX 1.0 is 8, not 16, in the new collect code
    Added duplicate detection
    * Updated to show base shape in line charts (can be disabled in menu)
    * Added simple packet delivery chart based on sequence numbers
    Updated to the new number of rtimer ticks per second
    fixed more robust parsing
    Added battery voltage level readout & SHT11 low-voltage indicator
    Added system time when the sensordata is received at the base station and fixed sensor data log to be flushed.
    Added menu option to send init script to nodes. Added charts 'Average Power' and 'Average Temperature'. Limited the number of displayed chart items to 250 in the time charts
    Bugfix: dates are now correctly displayed. Capped humidity values at 100%
    Java interface using the shell to collect and visualize sensor values from Sky nodes
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the Collect-view application from the examples/sky-shell directory and into its own tools/collect-view directory
    Added more options to send and receive data (via command, file, standard in)
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the Collect-view application from the examples/sky-shell directory and into its own tools/collect-view directory
    Added categories for cleaner tab layout
    * Added estimated packet loss and next hop change count to node info panel
    Java interface using the shell to collect and visualize sensor values from Sky nodes
    Added battery sensor to the core interfaces
    Temporary deletion of files due to problems with the CVS repository
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the Collect-view application from the examples/sky-shell directory and into its own tools/collect-view directory
    Made configuration of node info table persistent
    minor polish to the phidget sensor driver
    added basic phidget support for the Z1
    Moved the ADC configuration to sky-sensors.c and sensors now only need to specify their sample channel. This helps to avoid conflicts when using multiple sensors.
    refactored some ADC code into sky-sensors and made it possible to turn off sensors to save energy
    Added email client example.
    Added IRC client example.
    Introduced web browser as new example using ctk fullscreen mode.
    Rime statistics gathering
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Update fixed node location after it has been moved
    Updated network graph to remember fixed node locations when clearing sensor/node data.
    Clear node positions when clearing node data
    Moved the Collect-view application from the examples/sky-shell directory and into its own tools/collect-view directory
    Added link direction to network graph
    Paint links below nodes
    Added ETX factor to convert the ETX value
    Added legend
    Added simple spring layout that attracts connected nodes in node visualizer
    Added categories for cleaner tab layout
    * Added estimated packet loss and next hop change count to node info panel
    Disabled visible node drag when moving nodes in the map panel (too cpu intensive).
    Java interface using the shell to collect and visualize sensor values from Sky nodes
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the Collect-view application from the examples/sky-shell directory and into its own tools/collect-view directory
    Added more options to send and receive data (via command, file, standard in)
    Added categories for cleaner tab layout
    * Added estimated packet loss and next hop change count to node info panel
    Java interface using the shell to collect and visualize sensor values from Sky nodes
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the Collect-view application from the examples/sky-shell directory and into its own tools/collect-view directory
    Added categories for cleaner tab layout
    * Added estimated packet loss and next hop change count to node info panel
    Added gradients to bar chart
    Added option for non-stack bar chart
    Only show nodes with sensor data by default
    Java interface using the shell to collect and visualize sensor values from Sky nodes
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the Collect-view application from the examples/sky-shell directory and into its own tools/collect-view directory
    Set new default values
    Added button to connect to serial in the node control panel
    Added quick start help text, added explicit save settings in menu, fixed bug in the background image selection.
    Replaced the sky-alldata command with the new collect-view-data command. Also added an explicit killall command before sending a new collect command.
    Added more options to send and receive data (via command, file, standard in)
    Added a 'retransmits' field
    Added stop button to stop any running commands
    Added tab to set new collect parameters
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the Collect-view application from the examples/sky-shell directory and into its own tools/collect-view directory
    Added configuration of max item count in time charts
    Added categories for cleaner tab layout
    * Added estimated packet loss and next hop change count to node info panel
    Shorter chart legend
    Fixed to sort nodes by id. Added charts for packets received last 5 minutes and last/average hops to sink
    * Updated to show base shape in line charts (can be disabled in menu)
    * Added simple packet delivery chart based on sequence numbers
    Added system time when the sensordata is received at the base station and fixed sensor data log to be flushed.
    added option to limit the number of displayed chart items
    Java interface using the shell to collect and visualize sensor values from Sky nodes
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the Collect-view application from the examples/sky-shell directory and into its own tools/collect-view directory
    Fixed ETX value
    Shorter column names
    Bug fix: corrected sort with average numbers
    Bug fix (typo)
    Added beacon interval to node info panel
    Marked the row with avereage values with bold font
    Changed average values to always be floating-point
    Added average values
    Added Routing Metric and ETX
    Made configuration of node info table persistent
    Made it easier to add/remove columns to the node info table
    Added categories for cleaner tab layout
    * Added estimated packet loss and next hop change count to node info panel
    Changed NodeInfo to use a table to show node information instead of text area.
    Fixed to sort nodes by id. Added charts for packets received last 5 minutes and last/average hops to sink
    Added shortest/longest/average period to node info panel
    Added chart with received packets per minute and skeleton for node statistics panel
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Added chart with average routing metric
    Moved the Collect-view application from the examples/sky-shell directory and into its own tools/collect-view directory
    Added charts over next hop changes and estimated lost packets.
    Added categories for cleaner tab layout
    * Added estimated packet loss and next hop change count to node info panel
    Do not include last (ongoing) minute in chart
    Added a radio duty cycle tab; made packet reception chart have integer labels
    Bug fix: use getNodeTime() instead of getSystemTime()
    Bugfix: use getNodeTime() instead of getSystemTime()
    Always include zero packets in the chart bounds
    Added shortest/longest/average period to node info panel
    Added chart with received packets per minute and skeleton for node statistics panel
    * Updated to show base shape in line charts (can be disabled in menu)
    * Added simple packet delivery chart based on sequence numbers
    Only show nodes with sensor data by default
    Java interface using the shell to collect and visualize sensor values from Sky nodes
    Moved the Collect-view application from the examples/sky-shell directory and into its own tools/collect-view directory
    Java interface using the shell to collect and visualize sensor values from Sky nodes
    Moved the Collect-view application from the examples/sky-shell directory and into its own tools/collect-view directory
    Java interface using the shell to collect and visualize sensor values from Sky nodes
    Scripts for manipulating and calculating statistics from .csc files
    Added the computation of average loss rate
    Scripts for manipulating and calculating statistics from .csc files
    Added platform 'Atari XL'.
    
    Don't be afraid, I'm not trying to have more retro platforms than "real" platforms ;-)
    The platform 'atarixl' will replace the platform 'atari'. However I need both for some
    transition period.
    Moved retro IP configuration from web site to target machine.
    
    Better match user expectations by allowing to download plain disk images and configure the IP settings afterwards on the target machine - then most likely leveraging DHCP. This works for the users with the most usual Ethernet adapter and settings - which are now pre-configured in default.cfg's. Only the few users with non-default Ethernet adapter and/or settings are required to download a custom contiki.cfg and inject it manually into their disk image files.
    Added platform 'Atari XL'.
    
    Don't be afraid, I'm not trying to have more retro platforms than "real" platforms ;-)
    The platform 'atarixl' will replace the platform 'atari'. However I need both for some
    transition period.
    Replaced 10.1.1.1/8 with 192.168.0.0/24.
    Added cc65 target 'atari' for Atari 8-bit machines. This addition was triggered by exsistence of http://www.atari8ethernet.com/.
    Added platform 'Atari XL'.
    
    Don't be afraid, I'm not trying to have more retro platforms than "real" platforms ;-)
    The platform 'atarixl' will replace the platform 'atari'. However I need both for some
    transition period.
    Added Atari 800k (MyDOS 4.53/4) floppy image.
    Added cc65 target 'atari' for Atari 8-bit machines. This addition was triggered by exsistence of http://www.atari8ethernet.com/.
    Added platform 'Atari XL'.
    
    Don't be afraid, I'm not trying to have more retro platforms than "real" platforms ;-)
    The platform 'atarixl' will replace the platform 'atari'. However I need both for some
    transition period.
    Added Atari 800k (MyDOS 4.53/4) floppy image.
    Added cc65 target 'atari' for Atari 8-bit machines. This addition was triggered by exsistence of http://www.atari8ethernet.com/.
    Added platform 'Atari XL'.
    
    Don't be afraid, I'm not trying to have more retro platforms than "real" platforms ;-)
    The platform 'atarixl' will replace the platform 'atari'. However I need both for some
    transition period.
    Added Atari 800k (MyDOS 4.53/4) floppy image.
    Added platform 'Atari XL'.
    
    Don't be afraid, I'm not trying to have more retro platforms than "real" platforms ;-)
    The platform 'atarixl' will replace the platform 'atari'. However I need both for some
    transition period.
    Added Atari 800k (MyDOS 4.53/4) floppy image.
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    A binary conversion tool has been modified to support variations.
    Removed dependency of Cygwin from hexameter.
    Makefile.include: support make clean all
    
    Historically $(OBJECTDIR) was created when Makefile.include is read.  A
    consequence is that combining "clean" with "all" (or any other build
    target) results in an error because the clean removes the object
    directory that is required to exist when building dependencies.
    Creating $(OBJECTDIR) on-demand ensures it is present when needed.
    
    Removed creation of $(OBJECTDIR) on initial read, and added an order-only
    dependency forcing its creation all Makefile* rules where the target is
    explicitly or implicitly in $(OBJECTDIR).
    synchronized with updated version; fixed Unix environment handling
    Removed dependency of Cygwin from hexameter.
    A binary conversion tool has been modified to support variations.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    synchronized with updated version; fixed Unix environment handling
    Removed dependency of Cygwin from hexameter.
    A binary conversion tool has been modified to support variations.
    NEC PC-6001 support sources are initially added.
    strcasecmp is moved to lib directory
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Whitespace, added includes
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    synchronized with updated version; fixed Unix environment handling
    Removed dependency of Cygwin from hexameter.
    A binary conversion tool has been modified to support variations.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    synchronized with updated version; fixed Unix environment handling
    Removed dependency of Cygwin from hexameter.
    A binary conversion tool has been modified to support variations.
    Removed dependency of Cygwin from hexameter.
    Removed dependency of Cygwin from hexameter.
    Removed dependency of Cygwin from hexameter.
    Removed dependency of Cygwin from hexameter.
    Removed dependency of Cygwin from hexameter.
    Removed dependency of Cygwin from hexameter.
    Removed dependency of Cygwin from hexameter.
    Removed dependency of Cygwin from hexameter.
    The Micro-Executable Format support (experimental).
    The Micro-Executable Format support (experimental).
    The Micro-Executable Format support (experimental).
    The Micro-Executable Format support (experimental).
    The Micro-Executable Format support (experimental).
    The Micro-Executable Format support (experimental).
    The Micro-Executable Format support (experimental).
    The Micro-Executable Format support (experimental).
    The Micro-Executable Format support (experimental).
    - Added the Sensinode platform programming tools to /tools
    - Added the Sensinode platform programming tools to /tools
    - Added the Sensinode platform programming tools to /tools
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    - Added the Sensinode platform programming tools to /tools
    - Added the Sensinode platform programming tools to /tools
    - Added the Sensinode platform programming tools to /tools
    - Added the Sensinode platform programming tools to /tools
    - Added the Sensinode platform programming tools to /tools
    - Added the Sensinode platform programming tools to /tools
    - Added the Sensinode platform programming tools to /tools
    - Added the Sensinode platform programming tools to /tools
    - Added the Sensinode platform programming tools to /tools
    - Added the Sensinode platform programming tools to /tools
    - Added the Sensinode platform programming tools to /tools
    - Added the Sensinode platform programming tools to /tools
    - Added the Sensinode platform programming tools to /tools
    - Added the Sensinode platform programming tools to /tools
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    - Added the Sensinode platform programming tools to /tools
    - Added the Sensinode platform programming tools to /tools
    - Added the Sensinode platform programming tools to /tools
    - Added the Sensinode platform programming tools to /tools
    - Added the Sensinode platform programming tools to /tools
    removed execute flag of source files (avoids diff problems with egit)
    - Added the Sensinode platform programming tools to /tools
    Add a config for the Uncrustify code beautifier
    Add uncrustify helper scripts
    Add uncrustify helper scripts
    Fix a typo
    feat(code-style): Add a script to automatically format all changed files
    
    If executed inside the repository it will run the default Contiki
    uncrustify script on all changed .c and .h file. This could be added
    as a Git pre-commit hook. See http://git-scm.com/book/en/Customizing-Git-Git-Hooks
    Moved retro IP configuration from web site to target machine.
    
    Better match user expectations by allowing to download plain disk images and configure the IP settings afterwards on the target machine - then most likely leveraging DHCP. This works for the users with the most usual Ethernet adapter and settings - which are now pre-configured in default.cfg's. Only the few users with non-default Ethernet adapter and/or settings are required to download a custom contiki.cfg and inject it manually into their disk image files.
    Added a bootable ProDOS 8 disk image and my ProDOS 8 binary loader to by used by the 'disk' make target.
    Added ProDOS 8 system program immediately returning to ProDOS. Thus allows to select between system programs if copied as first system program onto a ProDOS disk.
    Added Apple II 3.5" floppy image.
    Replaced 10.1.1.1/8 with 192.168.0.0/24.
    Changed Contiki IPv4 address to 10.1.1.1 to allow for out-of-the-box testing in emulators with Ethernet support bound to a loopback interface (see Contiki Wiki article "Capturing loopback traffic with Wireshark").
    Moved platform/apple2enh/contiki.cfg to tools/apple2enh/sample.cfg
    Added (default) binary config file.
    Python DLL needed for some of the tools
    Tmote Sky tools for Windows and Linux
    Tmote Sky tools for Windows and Linux
    Tmote Sky tools for Windows and Linux
    Support for serialdump on MacOS X. Patch by Laurent Deru.
    Source code for the serialdump tool
    Tmote Sky tools for Windows and Linux
    Small scripts (hacks!) for checking and plotting the Contiki code size
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    removed energest-arch from sky and esb platforms
    Small scripts (hacks!) for checking and plotting the Contiki code size
    Tmote Sky tools for Windows and Linux
    Makefile for Sky tools
    Moved sky-specific make targets from the tools/sky/Makefile to the more natural platform/sky/Makefile.sky. Added a number of convenient targets for accessing the serial port.
    Added slip target for setting up a SLIP link
    Added sizeplot target that plots and shows the size of the code
    The reset now comes after the binaries are compiled
    changed to not show the executed command
    Closing stderr to avoid error messages for compilation without Tmote Sky boards
    Added SERIALDUMP variable pointing to the serialdump executable
    Added CMOTES variable to make energy estimation demo scripts nicer
    Removed unused sky-run rule
    Makefile for doing bulk uploading of .ihex files to Tmote Sky boards
    Removed debug output
    Tmote Sky tools for Windows and Linux
    Sky motelist support for MacOS X
    Serial library for Python needed for some of the Tmote Sky tools
    Serial library for Python needed for some of the Tmote Sky tools
    Serial library for Python needed for some of the Tmote Sky tools
    Serial library for Python needed for some of the Tmote Sky tools
    Serial library for Python needed for some of the Tmote Sky tools
    Serial library for Python needed for some of the Tmote Sky tools
    packetbuf: Use packetbuf_holds_broadcast() all-over
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Updated include paths for the moved files under net/
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Bugfix: don't send packets if they are shorter than the link layer header length
    ipv6 bridge between 802.15.4 and ethernet - over USB/SLIP - use with sliptap6
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    *Support for Atmel 'Router Under Mac' (RUM) in Jackdaw
    Fixed serious bug which causes RNDIS task to end when non-data message are sent via RNDIS interface
    *** empty log message ***
    Lots of changes / commits! This allows ravenusbstick example to build at least.
    radvd configuration file for linux
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    updated to use uip-ds6
    CC2420_CONF_AUTOACK is now defined in contiki-conf.h
    Turned off CC2420 auto ack for the bridge
    Increase uIP buffer size for the bridge to accomodate for the Ethernet headers from the PC host
    Allow debugging output to be written from the bridge mote and be printed out by the tapslip6 program
    Configure RF channel to be the same as the default Contiki sky channel
    added autoack config for bridge
    ipv6 bridge between 802.15.4 and ethernet - over USB/SLIP - use with sliptap6
    A module that enables Rime to run over UDP.
    added multihop routing support through replaceable modules. first implementation
    uses rime's route discovery by translating between ipv6 and rime addresses.
    added experimental checkpointing functionality:
    currently only implemented on the sky platform
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    ipv6 bridge between 802.15.4 and ethernet - over USB/SLIP - use with sliptap6
    Lots of changes / commits! This allows ravenusbstick example to build at least.
    Moved unused malloc code to backyard directory
    Make malloc machine independent by relying on dependent sbrk(2).
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    The path to the Contiki root was not correctly set
    Print informative message if radvd could not be restarted (instead of failing)
    Allow debugging output to be written from the bridge mote and be printed out by the tapslip6 program
    Added make targets that help to setup the SLIP IPv6 bridge
    ipv6 bridge between 802.15.4 and ethernet - over USB/SLIP - use with sliptap6
    Updated include paths for the moved files under net/
    Port apps, examples, platforms and tools so they use the new neighbor and route API.
    Converted u8_t to uint8_t and u16_t to uint16_t in the docs and tools directories.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    fixed for new uip_buf
    updated to use uip-ds6
    Added missing functions to make the bridge code compile
    ipv6 bridge between 802.15.4 and ethernet - over USB/SLIP - use with sliptap6
    fix compiling ravenusb platform
    -Change needed for ravenusb to build
    -Reverts Makefile.include back to 1.57, then apply the needed change
    Updated include paths for the moved files under net/
    leds: Fix the API
    
    The leds API did not work in some cases. E.g. with the following sequence:
      leds_off(LEDS_ALL);
      leds_toggle(LEDS_GREEN);
      leds_off(LEDS_ALL);
    the green LED was remaining on after the last call.
    
    This was caused by the toggle feature made synonymous with the invert feature,
    although it is unrelated. leds_toggle() is indeed supposed to toggle an LED,
    while leds_invert() is supposed to change the active level of an LED. However,
    all users of leds_invert() actually meant leds_toggle(), and the invert feature
    does not make sense in this module because it is not handy due to successive
    calls to leds_invert() changing the intended behavior, and hardware active
    levels should be managed in leds_arch_set() (e.g. by XORing the passed value
    with a hardware-specific constant before setting the output levels of the pins).
    
    Consequently, this change:
     - removes the leds_invert() function,
     - makes leds_toggle() behave as expected relatively to leds_off() / leds_on(),
     - sanitizes the code in the leds module.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    Added the const keyword to functions that use the tcpip_set_outputfunc(), which now takes a const argument
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Allow debugging output to be written from the bridge mote and be printed out by the tapslip6 program
    ipv6 bridge between 802.15.4 and ethernet - over USB/SLIP - use with sliptap6
    Added httpd command that sets up a local web server, reading files from the CFS file system
    Guard against NULL input, remove unguarded printf()
    Broke out serial-shell from the shell app into its own app. Project can use the serial-shell to get a shell running over the serial line, just like a project can use the telnetd to get a shell running over Telnet/TCP/IP.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Updated to new radio_driver API
    tr1001 init fix
    Added radio sniffer program
    More uip_ipaddr_t fixes.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Moved the ds2411 driver into a dev/ds2411 module
    Updated include paths for the moved files under net/
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    ipv6 bridge between 802.15.4 and ethernet - over USB/SLIP - use with sliptap6
    Only process incoming data if the process is polled. Compile checksum checks only for IPv4.
    Added a function that gets called when we see SLIP input. This function can be used to determine if a node is a SLIP gateway or not.
    Code style fix
    slip.c:
            char is signed but uip_buf is unsigned
    
    spi.h:
            casted unused values to void
    
    autostart.c:
    autostart.h:
            The array itself should be const but the processes pointed to
            should not.
    
    profile-aggregates.c:
            sizeof returns unsigned long on my platform
    * Check for ip_id zero senders and low cost update of zero ip_id.
    * Constness and voidness.
    * New function slip_write(u8_t *ptr, int len).
    
    * Slip active detection and current address reporting.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    ipv6 bridge between 802.15.4 and ethernet - over USB/SLIP - use with sliptap6
    Added a function that gets called when we see SLIP input. This function can be used to determine if a node is a SLIP gateway or not.
    * General stuff for different baudrates:
    
        - ubr argument to slip_arch_int
    
        - macros for calculating ubr
    
        - argument -Bbaudrate to tools tunslip and scat
    * Constness and voidness.
    * New function slip_write(u8_t *ptr, int len).
    
    * Slip active detection and current address reporting.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Supporting libraries for the Tmote Sky tools
    Supporting libraries for the Tmote Sky tools
    Supporting libraries for the Tmote Sky tools
    Supporting libraries for the Tmote Sky tools
    Supporting libraries for the Tmote Sky tools
    Supporting libraries for the Tmote Sky tools
    Supporting libraries for the Tmote Sky tools
    Supporting libraries for the Tmote Sky tools
    [cooja] plugins/VariableWatcher: Added swingx library to provide autocomplete support for variable names combobox in plugins/VariableWatcher
    Adds  encoding attribute utf-8 arg to cooja compile command
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Fix building of powertracker
    added jsyntaxpane library, to be used by MspCodeWatcher and the Contiki Test Editor plugins
    added target to force running cooja in 64-bit mode
    Do not include ant runtime in classpath (avoids compilation warning with Ant 1.8+)
    Enabled the Collect-View plugin by default in COOJA
    fixed nogui-argument
    compiling serial socket project per default
    added export-jar target, updated help
    updated help
    added mote attributes to various types of motes
    added "ant help" target, with build executable simulation example
    added target that instructs the jvm to show a message box at errors, useful for debugging Contiki nodes
    fixed last commit regarding "run_bigmem": some windows systems cannot allocate more than 1500mb maxmemory
    increased maximum heap memory
    also clean avrora project
    added avrora to buildpath
    changed default lang to english
    all run target depend on jar
    optimized some loops for increased performance and added runprof for profiling
    cooja clean also cleaning cooja_mspsim and mrm
    cooja ant run automatically builds jars
    jar target compiles mspsim and mrm
    default no-gui cooja with increased heap
    added jar_all target which compiles both cooja, mrm and mspsim_cooja
    added cooja applet target
    bigmem target
    enabled debug information (source lines in stack traces)
    added support for nogui start from ant
    added cooja; 'The Contiki OS Java Simulator'
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    fixed line endings
    cooja.config example for defining a project description
    renamed 'user platform' to 'project directories'
    added cooja; 'The Contiki OS Java Simulator'
    Do not include ant runtime in classpath (avoids compilation warning with Ant 1.8+)
    updated plugin example to also save and restore configuration
    updated example plugin
    updated example interface
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    updated plugin example to also save and restore configuration
    example updates
    updated example plugin
    renamed 'user platform' to 'project directories'
    minor changes due to deletion of static variables and new method parameters
    added cooja; 'The Contiki OS Java Simulator'
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    removed obsolete tick method
    printing on serial port instead of System.out
    application-level mote that imitates the behavior of Rime's anonymous broadcast example in /examples/rime/example-abc.
    Do not include ant runtime in classpath (avoids compilation warning with Ant 1.8+)
    application-level mote that imitates the behavior of Rime's anonymous broadcast example in /examples/rime/example-abc.
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    removed execute flag of source files (avoids diff problems with egit)
    + script also includes the common data section
    contributed by Lars Rasmusson @ SICS
    experimental mac os x support:
    script for parsing out memory section information
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    fixed line endings
    renamed 'user platform' to 'project directories'
    added cooja; 'The Contiki OS Java Simulator'
    Do not include ant runtime in classpath (avoids compilation warning with Ant 1.8+)
    updated example radio medium
    updated example plugin
    updated example interface
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    updated example radio medium
    removed connection logger reference
    renamed 'user platform' to 'project directories'
    radio-related changes:
    radios can belong to different abstraction levels for example byte of packet radios.
    
    => lots of changes in surrounding files
    minor changes due to deletion of static variables and new method parameters
    added cooja; 'The Contiki OS Java Simulator'
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    updated example interface
    renamed 'user platform' to 'project directories'
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    fixed line endings
    renamed 'user platform' to 'project directories'
    added cooja; 'The Contiki OS Java Simulator'
    Do not include ant runtime in classpath (avoids compilation warning with Ant 1.8+)
    updated example interface
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    renamed 'user platform' to 'project directories'
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    removed bad character
    removing obsolete method previously used for estimating contiki's energy consumption
    example updates
    updated example interface
    renamed 'user platform' to 'project directories'
    updated interface due to set config structure changes
    added cooja; 'The Contiki OS Java Simulator'
    More uip_ipaddr_t fixes.
    Import of the contiki-2.x development code from the SICS internal CVS server
    New PluginType SIM_CONTROL_PLUGIN for sim control
    
    SIM_CONTROL_PLGUIN are handled like SIM_PLUGIN, with one exception.
    If the simulation is started with -nogui=<simfile> than it is checked
    if a controlling plugin is loaded. If not, the simulation terminates
    with an error message.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    documentation (including javadoc) update
    new name of visplugintype.java
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added debugging output when positioner fails
    documentation (including javadoc) update
    added cooja; 'The Contiki OS Java Simulator'
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Fixed compiler unchecked warning
    added method for getting mote interfaces based on class names + getInterfaces() returns a collection instead of a vector
    added read-only rime address interface: currently fixed to 2 bytes
    minor documentation and code fixes
    mote interface handler initialized by class array, not vector pointer
    minor author name fix: strange names causes compiler warnings on some systems
    interface handler support for new interface polling format
    optimized some loops for increased performance and added runprof for profiling
    documentation (including javadoc) update
    added cooja; 'The Contiki OS Java Simulator'
    Also remove uninitialized motes
    Move call to updateGUIComponentState from doAddMotes to addMote
    Cooja backwards compatibility with simulation files that uses non-Contiki Java package names
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed getGUI() method to getCooja(), to better reflect its purpose
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    minor bugfix: simulation speed was not restored correctly
    Cooja: Allow running the simulation without motes.
     Normally it is not possible to start a simulation without motes. While
     this nomally makes sense, it might be, that motes are added at a later
     point in time by plugins.
     Removing this requirement is not problem, as it is still not possible
     to start the simulation without registered events. Thus a plugin can now
     register an event in the future to add motes at that point of time.
    Cooja: Give access to uninitialized motes
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    replaced Simulation's setDelayTime(ms) method with more intuitive setSpeedLimit(ratio)
    
    updated Simulation Control tool to use new setSpeedLimit(), and removed unused "run until" function
    
    updated references to old setDelayTime(ms)
    Added an isRunnable() method that returns true if the simulation can be run.
    General cleanup and fixes of texts and labels
    Added simulation as argument to moteType.getConfigXML() instead of each MoteType storing a reference to the simulation.
    Throw exception for unknown mote type
    new experimental feature: possibility to change mote types when loading a simulation
    
    made compile dialogs only select mote interfaces specified in the loaded configuration
    added mote interface method to be called when add mote interfaces have been added. useful if the mote interfaces want to observe each
    other
    more informative error messages at simulation error
    method for emptying simulation event queue
    handle pending simulation thread events before simulation starts, just
    after loading
    Print out the speedup when simulation stops
    notify radio medium when simulation finished loading
    removed use of temporary (simulation-specific) plugins, instead plugins should be unregistered when no longer needed + added method called when radio medium is removed from simulation
    added removed()-method for mote objects
    minor optimization: avoids multiple checks and only check simulation thread when assertions are enabled
    no error dialog for mspsim breakpoints
    lower simulation thread priority, added timeout on blocking stop simulation method
    added method that returns a mote with the given id
    Removed obsolete mote class reference in simulation configs
    javadoc update
    added a method for pausing the simulation that doesn't block
    show error dialog at simulation exception
    Changed mote creation to always be done by the MoteType (allows application motes to be loaded with the right class loader)
    bugfix: generated random seeds were not reloaded correctly
    the simulation object now handles the motetype configuration for motes; common functionality that was earlier implemented in each mote.
    
    this patch allows the simulator more freedom for hand-picking mote class loaders
    
    + some debug output in experimental ImportAppMoteType
    made project class loader public + throw exception is mote class could not be loaded
    strict event scheduling from simulation thread +
    added method for removing mote types from a simulation +
    added cleanup-methods for simulation/motes/mote interfaces: void removed();
    major update to cooja's event scheduler:
    * all events must now be scheduled from the simulation thread
    * added new methods for requesting simulation thread execution
    
    this patch solves some race conditions introduced by the new mspsim execution scheduling, but affects many existing plugins and interfaces
    bugfix: clock drift must be set even when the random startup delay is zero
    allow simulation delays below real-time
    + support for configurable buffer sizes (currently only for log output events)
    method for accessing event central + include mote when notifying simulation observers that a mote was added/removed
    bugfix: random generator was initialized differently at load vs reload
    two major updates:
    
    simulation time now uses microsecond resolution instead of earlier millisecond (allows for better simulation accuracy)
    +
    Contiki motes schedule their own events instead of the earlier approach of having the simulation loop register tick events common to all Contiki motes (faster simulation)
    
    both changes require extensive changes throughout COOJA
    cleaned up exception handling
    immediately quit if simulation has error in test mode
    return mote types as array, not vector
    changed default simulation delay to 0
    added method returning all motes, instead of using getMote(int) method
    moved Avrora motes into the mspsim array and renamed
    remove new motes without stopping simulation: from timevent invoked by simulation loop
    
    enables test scripts to remove new motes
    add new motes without stopping simulation: from timevent invoked by simulation loop
    
    enables test scripts to add new motes
    added option to make random seed automatically generated at simulation load
    + a single random generator instance is used instead of sharing seed between different parts of the simulator
    added support for removing events from queue outside simulation thread
    thread-safe event scheduling
    allow mote tick events to be removed from event queue (slightly faster execution)
    changed simulation time from int to long to support very long simulations
    check that simulation is running before joining sim thread
    reimplemented single tick method
    only notify tick observers when simulation time changes, not for every handled event
    parsing currently used exception for bad memory access by MSPSim
    registering tick events when simulation starts running
    bugfix: initializing contiki array with wrong number
    removed tick lists and variable tick times
    
    handling tick events in simulation loop: moving towards fully event based (as opposed to tick based)
    removed interrupt output when simulation is stopped
    removed redundant error message
    default random mote startup time set to 1sec + handling msp mote breakpoints
    optimized some loops for increased performance and added runprof for profiling
    experimental: ticking msp motes separately
    
    allows for different tick durations per different nodes
    automatically close mote plugins when mote is removed
    fixed some javadoc warnings
    removed public static JFrame frame variable. components should instead access the top parent container via getTopParentContainer()
    set drift method as standard for all clock interfaces
    reset nr tick lists and mote startup delay, since both settings are still experimental
    added udgm random transmission support.
    
    random mode can currently only be activated via simulation configs (.csc)
    udgm uses the same random seed as the simulation
    saving random seed with simconfig
    nulll constructor arguments
    added delayed startups random for contiki motes
    separate mote tick lists enabling less radio interference and more realistic(?) simulations
    
    experimental fixed random seed for now
    removed saving current simulation time
    change default simulation delay time (100 -> 5)
    documentation (including javadoc) update
    changed method name
    separated simulation save/load config functionality
    
    added getGUI helpmethod
    
    minor updates due to new method params and removed static variables
    added support for gui standard plugin
    minor fix: plugin's z orders restored at load config
    added saved config plugin specifics support
    removed old unused test code
    added a few minor changes:
    
    - save plugin information (experimental)
    added cooja; 'The Contiki OS Java Simulator'
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    bug fix
    minor optimization: avoids multiple checks and only check simulation thread when assertions are enabled
    major update to cooja's event scheduler:
    * all events must now be scheduled from the simulation thread
    * added new methods for requesting simulation thread execution
    
    this patch solves some race conditions introduced by the new mspsim execution scheduling, but affects many existing plugins and interfaces
    bugfix: removed-flag should become false when rescheduling unsorted event
    bugfix: remove unsorted time event
    added method for peeking at first scheduled event
    minor author name fix: strange names causes compiler warnings on some systems
    added support for removing events from queue outside simulation thread
    thread-safe event scheduling
    changed simulation time from int to long to support very long simulations
    Cooja event queue. Ported from MSPSim
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    simplified usage of Watchpoint and WatchpointMote interfaces
    added breakpoint colors and user defined messages
    added simple watchpoint interfaces, currently only implemented on mspsim motes
    two new shell commands: download and sendcmd
    added experimental checkpointing functionality:
    currently only implemented on the sky platform
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    improved capture effect support in mrm: capture effect is effective if the latter transmission is stronger and no later than half the preamble
    distinct between a radio connection's interfered radios, and interfered destination radios: interfered destinations still receive connection data
    + faster code and updated documentation
    removeDestination(Mote) method returns true is the argument mote was actually a destination (and hence was removed)
    added static connection ID for debugging purposes
    bugfix: make sure destination has not already been removed from connection
    logging connection start time
    minor author name fix: strange names causes compiler warnings on some systems
    added experimental per destination delay
    added tostring method
    radio-related changes:
    radios can belong to different abstraction levels for example byte of packet radios.
    
    => lots of changes in surrounding files
    bug fix
    added remove destination method
    added cooja; 'The Contiki OS Java Simulator'
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed getGUI() method to getCooja(), to better reflect its purpose
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    removed obsolete object tagging methods on plugins, earlier only used by mote plugins
    explicitly calling startPlugin and showPlugin methods, instead of relying on the plugin constructor to configure the plugin. if a simulation is loaded, startPlugin() is called after the simulation configuration is set
    removing visplugin class dependency
    
    * added method for fetching plugin visualizer
    documentation (including javadoc) update
    separated visplugin from plugins (plugins may now also exist without visualizers)
    added a few minor changes:
    
    - save plugin information (experimental)
    added cooja; 'The Contiki OS Java Simulator'
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Updated file permissions
    extracted quick help interface to a separate file, moved plugin-specific quick help from quickhelp.txt to the plugins themselves
    introduced simple MotePlugin interface, to be used by all mote plugins
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    cleaned up the mote type visualizer code
    Made exception static and added constructor with exception cause
    Added simulation as argument to moteType.getConfigXML() instead of each MoteType storing a reference to the simulation.
    minor documentation and code fixes
    added contiki-related methods to mote type java interface, for example main contiki source file
    432
    added support for compilation output in mote type creation exception
    added additional error handling when loading and reloading simulations
    removed old libraries (created on demand)
    
    + added simple error handling when creating mote types
    renamed 'user platform' to 'project directories'
    documentation (including javadoc) update
    new method params: is visualizer available
    added cooja; 'The Contiki OS Java Simulator'
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    synchronizing access to log list
    added support for multiple log mote interfaces / mote
    + support for configurable buffer sizes (currently only for log output events)
    event central used for simplifying plugin implementations: a plugin can listen for simulation-wide mote interface changes via this class, and does not need to keep track of added/removed motes.
    
    in addition, the event central may be configured to keep an event history of selected mote interface events, useful for sharing events among several different plugins
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    new help class: time event associated with (or scheduled from) a mote. if the mote is removed during simulation, this enables removing all its scheduled events
    added radio communication between micaz nodes
    fixed new byte based radio model for MSPSim based Sky node
    initialize from int[] (mspsim standard)
    cc24240 packet converter (currently no actual conversion is performed due to already stripped cc2420 output)
    default radio packet implementation
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Cooja: Allow setting a folder to search for projects
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added container for cooja projects, to easier maintain and handle loaded projects and their resources
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added applet attribute support
    cooja applet files
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    documentation update
    default (os-level) radio packet
    
    all radios implementations must support this packet format
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added mote interface method to be called when add mote interfaces have been added. useful if the mote interfaces want to observe each
    other
    removed energyConsumption() method from mote interface: obsolete, we should instead interface Contiki's power profiler or MSPSim for better estimations
    +
    added stub removed() method: mote interfaces that need explicit cleanup should override this method
    fixed error output in log4j
    print debugging info when mote interface fails to load
    removed passive/active interfaces notion.
    also, new energy estimation method
    documentation (including javadoc) update
    new method params: is visualizer available
    added cooja; 'The Contiki OS Java Simulator'
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    introduced simple MotePlugin interface, to be used by all mote plugins
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    javadoc update
    javadoc update
    minor documentation and code fixes
    made two static methods public
    towards adding support for 64-bit architectures: registering relative memory addresses with contiki instead of fetching absolute addresses to java
    removed public static JFrame frame variable. components should instead access the top parent container via getTopParentContainer()
    restructured corecomm to throw exceptions instead of returning success of operation
    forwarding java corecomm compilation output via messagelist
    forwarding cause of exception
    differing between exceptions
    throwing exceptions when trying to access the library initially
    create class file directory and, if compilation fails, try including cooja.jar
    added support for dynamic corecomms (generated and compiled on demand)
    documentation (including javadoc) update
    performance improvement when fetching memory (throwing pointer to array instead of creating new one)
    added cooja; 'The Contiki OS Java Simulator'
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Cooja: Make paths more configurable
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    updated to use new cooja project class
    throw exception if project directory or config file does not exist
    removing strict dependency on project platform configuration files (cooja.config).
    
    files are still used if existing.
    added access control when applet
    renamed 'user platform' to 'project directories'
    removed warning message
    documentation (including javadoc) update
    removed old unused makefile-quickstart code
    +
    tidied up some code
    *added support for library files in user platforms (for example in dev and sys subdirectories)
    
    *added user platform history in platform configs
    *throwing 'include user platform directories' flags to compiler
    
    *fixed bug in platform config viewer
    *removed old custom class loader
    added cooja; 'The Contiki OS Java Simulator'
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    notify radio medium when simulation finished loading
    removed use of temporary (simulation-specific) plugins, instead plugins should be unregistered when no longer needed + added method called when radio medium is removed from simulation
    javadoc update
    updated obsolete method signature:
    when the radio medium was still tick-based, several radio connection could finish "simultaneously" (during the same tick), which is no longer possible
    radio medium updates: removed obsolete tick observer + notifying observers for each finished radio connection separately
    using new radio packet format
    radio-related changes:
    radios can belong to different abstraction levels for example byte of packet radios.
    
    => lots of changes in surrounding files
    documentation (including javadoc) update
    changed method name
    new help method for generating radio mediums during config load.
    added cooja; 'The Contiki OS Java Simulator'
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    show contiki stack trace in error dialog, not just print to console
    introduced new abstract mote classes:
    AbstractWakeupMote shared functionality common to both contiki-based and mspsim-based motes
    moved test framework chakana to backyard: project hasn't been used or maintained in some time
    an early version of chakana, an automated test framework used with COOJA
    documentation (including javadoc) update
    added cooja; 'The Contiki OS Java Simulator'
    A set of simple example programs for the ESB platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed getGUI() method to getCooja(), to better reflect its purpose
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    using MotePlugin interface, rather than object tagging
    explicitly calling startPlugin and showPlugin methods, instead of relying on the plugin constructor to configure the plugin. if a simulation is loaded, startPlugin() is called after the simulation configuration is set
    added quick help
    + constructor option for not automatically throwing "requires visualization" exception
    visplugins are optional, but require cooja to be visualized:
    
    * hybrid plugins (used both when cooja is visualized and in test mode) should not extend VisPlugin
    implemented default method for fetching plugin visualizer
    always highlighting node at mote plugin activation
    renamed 'user platform' to 'project directories'
    documentation (including javadoc) update
    separated visplugin from plugins (plugins may now also exist without visualizers)
    added a few minor changes:
    
    - save plugin information (experimental)
    added cooja; 'The Contiki OS Java Simulator'
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added converted radio packet, containing both the original and the converted data
    default radio packet implementation
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fixed a bug with the ScriptRunner plugin
    
    The ScriptRunner plugin started the simulation in GUI and NOGUI mode.
    Now the simulation is only started in nogui mode
    Better error message when aborting simulation
    New PluginType SIM_CONTROL_PLUGIN for sim control
    
    SIM_CONTROL_PLGUIN are handled like SIM_PLUGIN, with one exception.
    If the simulation is started with -nogui=<simfile> than it is checked
    if a controlling plugin is loaded. If not, the simulation terminates
    with an error message.
    [cooja] Removed some further printlns
    [cooja] ContikiMoteType: Fixed Command parsing
    
    - Use `nm -aP` for parsing both addres and size information
    - Use symbol section information for parsing
    [cooja] Set location of newly created plugins relative to second last activated plugin.
    
    Setting the position based on the number
    of total inner frames was very inflexible
    and caused pad positioning for larger number
    of frames.
    
    Setting the location of new plugin frames
    to the second last activated one tries to
    meet two requirements:
    - Avoid covering the last activated plugin frame,
    i.e. the one that was active when new plugin
    start was invoked.
    - Set new plugin near an actively used desktop pane
    location and allow 'diagonal stacking'
    Stopped to load plugins depending on simulations if there is no simulation
    Move call to updateGUIComponentState from doAddMotes to addMote
    Cooja backwards compatibility with simulation files that uses non-Contiki Java package names
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed getGUI() method to getCooja(), to better reflect its purpose
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Allow setting random seed as parameter
    allow saving .csc with contiki-relative paths when the .csc file is in a subdirectory of the referenced
    application
    Allow the exit code from a failed test script to propagate to the Java
    process, which makes it possible to track failing tests in makefiles and
    via scripts.
    Cooja: Fix command line override of ContikiPath
    Without the fix the command line parameter was overwritten by the simulation configuration.
    Cooja: Allow setting a folder to search for projects
    Cooja: Make paths more configurable
    Cooja: Load whole simulation before executing it in nogui mode
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    reverted previous plugin name changes, instead build displayed names when menu is created
    Added nmenomic for the exit action
    rewrote tools menu code to allow access to mote tools directly from the main menu
    
    mote tools can still be started from the network visualizer
    minor bugfix: start/stop simulation keyboard shortcut was not enabled correctly
    added support for mote interface requirements in SupportedArguments annotation
    
    NativeIPGateway plugin now requires an IP address mote interface
    replaced Simulation's setDelayTime(ms) method with more intuitive setSpeedLimit(ratio)
    
    updated Simulation Control tool to use new setSpeedLimit(), and removed unused "run until" function
    
    updated references to old setDelayTime(ms)
    Set default look and feel on Linux to Nimbus. If Nimbus is not available,
    default to CrossPlatformLookAndFeel.
    
    Updated menus to avoid having a separate Mote Types menu and instead merged
    mote type creation under the Motes->Add motes menu item.
    
    Reimplemented the menus to make it easier to follow the menu structure
    from the Java implementation.
    save simulation before exit
    minor window title fix
    fixed Tools menu mnemonic (P->T)
    extracted quick help interface to a separate file, moved plugin-specific quick help from quickhelp.txt to the plugins themselves
    simplified the external tools configuration with a single common file that is always loaded
    added getting started quickhelp menu item, made quick help sticky
    Refactored window title that was duplicated in multiple places
    disable plugin menu items if not supported
    Added new annonation with which Cooja components (e.g. mote plugins) can be activated
    or deactivated depending on the given argument (e.g. mote). This may for
    example be used by a mote plugin that only accepts emulated motes, and that
    consequently should be hidden in other non-emulated motes' plugin menues.
    
    The new annotation is currently only used by the MspCodeWatcher and the DGRM visualizer skin.
    code style
    Allow setting a log4j config file
    some bugfixes regarding timeouts in test scripts, with simplified code
    added objcopy external tools configuration
    changed nm command to sort numerically, and changed regexpressions to accept output from newer gcc versions
    added more debugging info under help menu
    minor fix on locating config file
    get[Started]Plugin method returns plugins that end with argument + added sim and gui variables accessible from test scripts
    only show error dialog when visualized
    Added optional color for mote relations
    changed open simulation menu structure + save simulation as config.gz
    removed temporary plugins, fixed compiler warnings, using new cooja projects class
    minor fix: visualized plugins z-order was not correctly loaded
    added argument for disallowing config relative paths
    rewrote project dialog, for easier import and management of cooja projects
    minor fix: save iconified plugins
    make portable paths method public
    minor bugfix: cause may be null
    loading user settings before generating executable jar, added debugging output
    removed contiki cooja template source, updated configurations
    warn if JAVA_HOME is not set
    catch no class exception when registering new plugin
    added warning when reloading a simulation with less then 20% memory left
    show contiki stack trace in error dialog, not just print to console
    javadoc update
    contiki mote type: added additional regexps for parsing common section addresses
    using MotePlugin interface, rather than object tagging
    explicitly calling startPlugin and showPlugin methods, instead of relying on the plugin constructor to configure the plugin. if a simulation is loaded, startPlugin() is called after the simulation configuration is set
    made project class loader public + throw exception is mote class could not be loaded
    minor patch: remember last exported jar filename
    show compilation warnings dialog after successful load + save config to history even if load fails
    cleaning up after a removed simulation by the removed() methods +
    exposing methods for loading simulations from external plugins +
    minor bug fix: the reload progress dialog sometimes disappear even when a simulation is loading
    removed debugging output
    Use canonical path to find parent directory when creating config relative path
    minor changes in executable jars: removed jdk dependency on simulating computer + temporary files from simulation are stored in a subdirectory + temporary files from building the jar are removed when done
    added experimental feature: generate executable JAR from current simulation
    
    + made some methods public for accessing configuration state etc from outside the GUI class + minor bug fix in reparse projectes method
    Minor fix with config relative path and allow external tools editing with specified Contiki path.
    exporting paths relative to contiki, not cooja
    + new project management api
    added convenience method for accessing active plugins
    start plugins in non-dispatcher thread
    Added FreeBSD support.
    
    Made the Sky mote type use PATH_MAKE for the build procedure.
    + support for configurable buffer sizes (currently only for log output events)
    only reload with new seed if simulation exists
    removed unused import
    made desktop scrollable + added quick help pane (keyboard F1)
    bugfix: random generator was initialized differently at load vs reload
    replaceFirst() also for Contiki relative paths + verify that the generated config path is valid
    bugfix: only replace the first instance when generating portable paths (simulation configs)
    Show config file when reloading
    no stack trace printout when a visualized plugin fails to in test mode
    + startPlugin method throws exceptions
    made test editor plugin a simulation plugin: it now depends on a specific simulation
    
    this change enables multiple simultaneous scripts in a simulation, and also makes it easier to create tests since they will be stored with the simulation config
    
    since the plugin now depends on a simulation it is no longer possible to create/reload simulations from the test scripts (this was however not often used)
    bugfix: mote plugins should use the start plugin action
    gui action fix: do not directly change isEnabled() from the simulation thread
    bugfix: non-simulation plugins menu items need separate action listeners
    fix: only toggle actions state in visualized mode + documentation
    gui update: enable menu items depending on whether a simulation is loaded or not
    Load last opened simulation configuration file when reloading without simulation.
    Added key shortcuts to last opened files.
    show error dialog when failing to add mote
    increased tooltip timeout to one minute
    backwards compatibility: visualizer plugins were removed
    make sure parent directory of current config file exists
    autostart simulation is reloaded when simulation is running
    simplified error dialog
    + special case: allow single parent directory when saving relative source file paths
    set initial error dialog size
    use regular api for configuring mote type, instead of directly calling contiki compile method
    + support for config file relative paths when saving simulations
    
    + support for quickstarting from simulation config
    cooja quickstart should be started from normal cooja working directory, otherwise config relative paths won't work
    +
    cygwin path fix for quickstart
    experimental: quick-n-dirty way to indicate compilation progress when (re)loading simulations
    using Java's built-in methods for converting to Contiki relative paths
    reimplemented quickstart functionality
    minor bugfix: check that simulation exists before reloading
    bugfix: clear all mote relations when simulation is removed
    added mote relation support. used to show  relations between simulated motes, typically for debugging and visualization purposes
    minor bugfix: not all mote type identifiers were reserved when reloading simulation. this caused loading some simulations with several mote types to fail
    
    + added key accelerator for reloading a simulation (ctrl+r or ctrl+shift+r). thanks to David Gustafsson for patching :)
    
    + added yet another key accelerator for starting/stopping simulation (ctrl+s)
    moved Avrora motes into the mspsim array and renamed
    added configuration wizard to replace the jni_tests
    sorting plugin menu according to plugin type
    quickstart uses main random generator
    added option to make random seed automatically generated at simulation load
    + a single random generator instance is used instead of sharing seed between different parts of the simulator
    Nimbus look and feel is not fully supported on many linux platforms:
    * changing default look and feel to cross platform l&f on linux systems
    better project load failure notification
    minor bugfix: use isVisualized() method to determine if Cooja is visualized
    merged script runner plugins:
    * in GUI-mode the script is editable
    * without GUI, the script loads the simulation and activates the test script
    visplugins are optional, but require cooja to be visualized:
    
    * hybrid plugins (used both when cooja is visualized and in test mode) should not extend VisPlugin
    added cooja support for 64-bit 64-bit architectures:
    * compiling for PIC
    
    contributed by David Gustafsson and Jesper Karlsson
    removed dependency on visplugin class, instead referencing plugin visualizers via new plugin method getGUI()
    
    + sanity-check when restoring last cooja location
    storing current project directories as meta data in simulation configs.
    currently no action: only warns if loaded simulation depends on a project not active
    added for convenience: reload simulation with new random seed
    removed warning when not starting visualizer plugin in tests
    use system look and feel instead of cross platform if nimbus fails (contributed by David Gustafsson)
    changed file history to not add same file twice and increase history size to 10 entries
    introduced wrapper class for executing swing code in event dispatcher thread.
    not used by all parts of the code yet
    storing screen device
    using new nimbus look and feel by default
    removed tick time
    if newly started plugin has not specified a location/size, use defaults
    not scanning platform/cooja directory (no user processes should reside there)
    ask user to immediately add nodes from newly created node type
    updated according to new scanProcesseses() interface
    removing strict dependency on project platform configuration files (cooja.config).
    
    files are still used if existing.
    some minor fixed:
    * warn when trying to load visualized plugins when cooja is not visualized
    * force calling doLoadConfig() from non-AWT thread
    removed system.exit after activated script
    more output after running scripts
    added tools for creating contiki relative paths
    added functionality for observing GUI (added/removed simulations)
    added applet attribute support + applet code base public
    log4j fallback on basic configurator if no file access
    added support for dynamic contiki mote type identifiers: no need to restart simulator when loading another simconfig
    removed debug output
    automatically close mote plugins when mote is removed
    added access control when applet
    fixed some javadoc warnings
    isVisualized handling both visualized in frame and in applet.
    possible bugfix: setting title before disposing error dialog
    updated deprecated code
    mote types sorted after abstraction level
    Added menu bar to quickstart window. Made Rime the default stack for quickstart
    cooja mac os x support
    enabled config of entire ar command, not only arguments
    added exception handling to project dir loading
    catching unsupported class version exceptions
    changed address parsing using nm to more generic: any command may be used
    setting nm parsing default
    added regular expressions for parsing map files and nm output
    changed link argument sent to makefile:
    instead of using linker, user may specify linker line including tools
    set specified external tools configs read only
    
    + automatic formatting
    added mote highlight functionality
    desktop always exists, but not always used
    added setVisualized method (experimental)
    nongui command arguments
    dispose on escape
    fix: maximized cooja frame overlapping os display regions (such as win start menu).
    removed event thread exceptions
    added menu info on current java version
    added support for several contiki comm stacks (uip + rime)
    removed Java 1.6 added ModalityType
    added retry option at failed simulation reload
    removed sun's proprietary icon
    added custom made error dialog for simulation (re)load errors
    only storing external tools settings differing from the defaults
    added quick fix for passing alternative external tools configuration files at startup.
    added menu option for removing all motes from simulation
    minor fixes
    added additional error handling when loading and reloading simulations
    removed old libraries (created on demand)
    
    + added simple error handling when creating mote types
    creating empty cooja.config when quickstarting
    quick-starting a few mote plugins
    minor changes when dusting up quick-start
    renamed 'user platform' to 'project directories'
    minor changes
    added support for dynamic corecomms (generated and compiled on demand)
    added simulation reload functionality
    
    tries to reload the current simulation by allocating new available corecomms, and replacing any references to the old ones
    
    warning: custom made simulation configs may not work with this functionality!
    
    this is a convenience method, and needs dynamic corecomms for reloading more than a constant number of times
    restores last window state (size, location)
    automatically bring on "create new simulation"-dialog on startup (if started with gui)
    fixed keyboard shortcuts
    added comparison of default and current external tools settings
    renamed file menu items for opening configurations
    added progress bar during quick-loads
    added load/save-simulation config history support
    changed mote plugins menu to submenues instead of popups
    (had to restructure mote menu system slightly)
    minor changes:
    menu names (load->open, quick->exit)
    minor fix; simulator not centering 0,0-size at startup
    bug fix: not possible to load mote plugin at mote pos 0
    ignoring exception is loaded plugin ordering not possible
    minor bug fix
    outputting more information when unable to quick-load simulation
    documentation (including javadoc) update
    changed method name
    a lot of changes:
    
    * added initial support for gui-less simulations
    * removed certain static variables for robustness
    * added support for standard gui plugins (startup)
    * added quick-load menu option
    * separated plugins from plugin visualizers
    added support for gui standard plugin
    changes to config system:
    * user properties saved to user home (.cooja.user.properties) instead of to current working directory
    * added config value "standard user platforms"
    * class loader bug fix
    added external tool objdump for alternative way to parse out section addresses and sizes (not used by contiki mote type yet)
    added a few minor changes:
    
    - save plugin information (experimental)
    - bug fix: windows not being deselected correctly
    - include contiki system symbols option (no need for the missing elf-loader files)
    quickstart outputs error stream from compilation
    removed old unused makefile-quickstart code
    +
    tidied up some code
    removed old unused makefile-quickstart code
    added new (experimental) quickstart method
    example usage (from user platform):
    > java -jar $CONTIKI/tools/cooja/dist/cooja.jar -quickstart=myprocsource.c -contiki=$CONTIKI
    *added support for library files in user platforms (for example in dev and sys subdirectories)
    
    *added user platform history in platform configs
    *throwing 'include user platform directories' flags to compiler
    
    *fixed bug in platform config viewer
    *removed old custom class loader
    mote type classloaders
    load default config from class path instead of current directory
    added cooja; 'The Contiki OS Java Simulator'
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    minor optimization: avoids multiple checks and only check simulation thread when assertions are enabled
    minor author name fix: strange names causes compiler warnings on some systems
    added support for removing events from queue outside simulation thread
    changed simulation time from int to long to support very long simulations
    Cooja time event. Ported from MSPSim
    default (os-level) radio packet
    
    all radios implementations must support this packet format
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    added support for mote interface requirements in SupportedArguments annotation
    
    NativeIPGateway plugin now requires an IP address mote interface
    Added new annonation with which Cooja components (e.g. mote plugins) can be activated
    or deactivated depending on the given argument (e.g. mote). This may for
    example be used by a mote plugin that only accepts emulated motes, and that
    consequently should be hidden in other non-emulated motes' plugin menues.
    
    The new annotation is currently only used by the MspCodeWatcher and the DGRM visualizer skin.
    * bugfixed and rewrote MRM to improve configurability
    * improved MRM GUI, including MRM visualizer skin that shows prr and rss
    * added experimental support for directional antennas
    include source radio when noise level changes
    doc
    noise radio, to be observed by radio mediums
    show contiki stack trace in error dialog, not just print to console
    introduced new abstract mote classes:
    AbstractWakeupMote shared functionality common to both contiki-based and mspsim-based motes
    moved test framework chakana to backyard: project hasn't been used or maintained in some time
    an early version of chakana, an automated test framework used with COOJA
    documentation (including javadoc) update
    added cooja; 'The Contiki OS Java Simulator'
    A set of simple example programs for the ESB platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    default radio packet implementation
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    bugfix: breakpoints should only trigger once
    
    updated watchpointmote method to return executable address, not wrapped in an object
    simplified usage of Watchpoint and WatchpointMote interfaces
    added simple watchpoint interfaces, currently only implemented on mspsim motes
    new help class: time event associated with (or scheduled from) a mote. if the mote is removed during simulation, this enables removing all its scheduled events
    added radio communication between micaz nodes
    fixed new byte based radio model for MSPSim based Sky node
    initialize from int[] (mspsim standard)
    cc24240 packet converter (currently no actual conversion is performed due to already stripped cc2420 output)
    default radio packet implementation
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    annotation describing an abstraction level
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    [cooja] getMemory() now returns MemoryInterface
    
    Including code adaptions based on new memory methods to keep code compilable
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    cleaned up some unnecessary methods: empty mote constructors (created from mote type), setInterfaces/setMoteType methods
    enables sharing mote-specific properties
    added removed()-method for mote objects
    removed obsolete tick method
    added getID() method (mandatory for all motes)
    removed the common state notion: these are instead mote specific
    changed simulation time from int to long to support very long simulations
    tick method returns true if mote can be ticked again immediately
    documentation (including javadoc) update
    new method params: is visualizer available
    changed mote state to enum type instead of int
    added cooja; 'The Contiki OS Java Simulator'
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    javadoc update
    removed dependency on mote interface getEnergyConsumption() method
    new event scheduling api
    removed mote state references
    event based mote interfaces: less dependencies on tick polling + using new mote time events
    renamed author to avoid compiler warnings
    new energy method: collecting total energy consumption from each interface
    updated interfaces to new polling format.
    method parameter updates
    changed mote state to enum type instead of int
    added method to get last tick used energy
    added cooja; 'The Contiki OS Java Simulator'
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    include source radio when noise level changes
    doc
    noise radio, to be observed by radio mediums
    show contiki stack trace in error dialog, not just print to console
    introduced new abstract mote classes:
    AbstractWakeupMote shared functionality common to both contiki-based and mspsim-based motes
    moved test framework chakana to backyard: project hasn't been used or maintained in some time
    an early version of chakana, an automated test framework used with COOJA
    documentation (including javadoc) update
    added cooja; 'The Contiki OS Java Simulator'
    A set of simple example programs for the ESB platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    renamed radio method isReceiverOn() to isRadioOn()
    
    fixed bug in Msp802154Radio causing all packets from non-802154-radios to be dropped
    example directional antenna
    implementing noise source radio
    added simple way for user to reconfigure application radio's channel
    added method for turning off radio receiver of application motes
    removing obsolete method previously used for estimating contiki's energy consumption.
    fixed interference in app radio
    abstract application mote, used for implementing application-level motes, now extends wakeup mote.
    + reimplemented disturber mote using abstract application mote
    + removed obsolete dummy mote example
    + method for checking if radio can receive data. does not change simulation output, but allows the radio medium to better keep track of how many packets were received etc
    renamed author to avoid compiler warnings
    changed simulation time from int to long to support very long simulations
    new energy method, not fully implemented yet
    updated interfaces to new polling format.
    using new radio packet format
    added output power indicator max value
    added getMote() method to all radios
    application radio
    
    may be used by java-based motes to implement radio functionality
    radio-related changes:
    radios can belong to different abstraction levels for example byte of packet radios.
    
    => lots of changes in surrounding files
    method parameter updates
    added disturber mote:
    
    mote that periodically transmits packet that interferes with surrounding radio traffic
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    event based mote interfaces: less dependencies on tick polling + using new mote time events
    renamed author to avoid compiler warnings
    changed simulation time from int to long to support very long simulations
    added getDrift method
    set drift method as standard for all clock interfaces
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    simple patch to allow application motes to receive serial data
    added simple serial port to be used by application motes
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    renamed author to avoid compiler warnings
    implemented by mote interfaces to determine when they should be polled
    custom data radios
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    * bugfixed and rewrote MRM to improve configurability
    * improved MRM GUI, including MRM visualizer skin that shows prr and rss
    * added experimental support for directional antennas
    include source radio when noise level changes
    doc
    noise radio, to be observed by radio mediums
    show contiki stack trace in error dialog, not just print to console
    introduced new abstract mote classes:
    AbstractWakeupMote shared functionality common to both contiki-based and mspsim-based motes
    moved test framework chakana to backyard: project hasn't been used or maintained in some time
    an early version of chakana, an automated test framework used with COOJA
    documentation (including javadoc) update
    added cooja; 'The Contiki OS Java Simulator'
    A set of simple example programs for the ESB platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    added new mote type method that returns the by default used mote interfaces, as opposed to all compatible mote
    interfaces
    
    this allows a user to override default settings in the create-new-mote-type dialogs
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    custom data radios
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Button: Allow to press and release button by mouse and key
    
    In the previous implementation a click event was triggered when the
    button was pressed.
    This implementation allows to set and release buttons independently both
    by mouse clicking and by key typing.
    Buttons: Some minor cleanups
    
    Removed imports not required anymore and made some class members final
    Buttons: Added missing @Override annotations
    Buttons: Move implementation of button routines to Button class
    
    The implementation of clickButton(), pressButton(), and releaseButton()
    can be shared accross the several node-dependent implementations as
    they use the node-dependent doPressButton() doReleaseButton() routines.
    Button: Add doPressButton() and doReleaseButton() to Button class
    
    As every Button has a node-specific implementation part, this should be
    the minimal interface to the backend node emulator for pressing and
    releasing a button.
    Button: None of the buttons will saves its state
    
    Saving a buttons state in simulation file is not required as its state
    is much too volatile.
    Button: Move common interface visualization to Button class
    
    The implementation of a simple JPanel with a JButton was only code
    duplication accross the several button implementations.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    splitting contiki messages on newlines
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    serial port interface
    custom data radios
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    the simulation object now handles the motetype configuration for motes; common functionality that was earlier implemented in each mote.
    
    this patch allows the simulator more freedom for hand-picking mote class loaders
    
    + some debug output in experimental ImportAppMoteType
    added default methods for saving and restoring the mote id
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    renamed author to avoid compiler warnings
    implemented by mote interfaces to determine when they should be polled
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    [cooja] getMemory() now returns MemoryInterface
    
    Including code adaptions based on new memory methods to keep code compilable
    cooja: interfaces/RimeAddress: renamed rimeaddr_node_addr to linkaddr_node_addr
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    using memory monitor instead of previously used time events
    avoid exception if rime address does not exist + removed obsolete methods
    using MoteTimeEvent instead of TimeEvent: scheduled events are automatically removed when the mote is removed
    event based mote interfaces: less dependencies on tick polling + using new mote time events
    bug fix: last address bytes were not displayed correctly (signed)
    added read-only rime address interface: currently fixed to 2 bytes
    quick-fix: the generator assumes that the constructor accepts a mote object, this is the quickest fix currently
    empty USART stateChanged handler
    new interface format without passive/active
    + energy method renamed
    splitting contiki messages on newlines
    esb and msp430-general interfaces
    minor changes due to new setConfig method parameter
    added cooja; 'The Contiki OS Java Simulator'
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    removing contiki log interface, instead only using the serial port interface
    renamed author to avoid compiler warnings
    implemented by mote interfaces to determine when they should be polled
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    removing obsolete method previously used for estimating contiki's energy consumption.
    renamed author to avoid compiler warnings
    new energy method, not fully implemented yet
    updated interfaces to new polling format.
    method parameter updates
    added cooja; 'The Contiki OS Java Simulator'
    [cooja] interfaces/IPAddress: Reimplementation of the IPAddress interface
    
    New features:
    * extended interface
    * Shows all IPv6 addresses of a mote
    * Shows link local IP in visualizer
    * Reads IPs correctly from different memory layouts
    [cooja] Get rid of all those redundant IP address to String functions
    
    Commonly use the String representation functions of IPUtils.
    [cooja] interfaces/IPAddress: Added @Override annotations
    [cooja] interfaces/IPAddress: Indention cleanup
    [cooja] getMemory() now returns MemoryInterface
    
    Including code adaptions based on new memory methods to keep code compilable
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    made ip-address-to-string method public
    simplified and bugfixed Cooja's IP address interface, added two
    variables in uip-ds6.c to allow Cooja to extract addresses from memory
    static method for compressing ipv6 addresses
    bad character
    displays only used ipv6 addresses + works for both cooja and sky platform
    fixed parsing of sky ipv6 addresses
    avoid exception if rime address does not exist + removed obsolete methods
    using MoteTimeEvent instead of TimeEvent: scheduled events are automatically removed when the mote is removed
    event based mote interfaces: less dependencies on tick polling + using new mote time events
    bug fix: last address bytes were not displayed correctly (signed)
    removed abstract ip address interface: equal for all motes
    update ip interface to supports ipv6 addresses.
    
    also disabled writing IP addresses from inside COOJA, since the these should rather be determined by Contiki
    updated interfaces to new polling format.
    added cooja; 'The Contiki OS Java Simulator'
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Cooja: Add LQI-Support to DGRM
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    renamed radio method isReceiverOn() to isRadioOn()
    
    fixed bug in Msp802154Radio causing all packets from non-802154-radios to be dropped
    moved radio interface visualizer code to this abstract radio
    implementation
    added documentation
    + method for checking if radio can receive data. does not change simulation output, but allows the radio medium to better keep track of how many packets were received etc
    general radio interface now implements old packet radio
    added output power indicator max value
    added getMote() method to all radios
    radio-related changes:
    radios can belong to different abstraction levels for example byte of packet radios.
    
    => lots of changes in surrounding files
    added experimental radio channel support
    added methods for reading current output power
    added possibility to interfere with radio receptions "in the future" - reduces code complexity for radio mediums
    new radio driver (allows for transmissions longer than one tick)
    added cooja; 'The Contiki OS Java Simulator'
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed getGUI() method to getCooja(), to better reflect its purpose
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    improved code: uses log mote interfaces observers directly, instead of going via the sim event central
    Added optional color for mote relations
    bugfix: only handle log output from our mote + added support for debug log interface
    bugfix: previously did not listen to all log interfaces
    removing obsolete method previously used for estimating contiki's energy consumption.
    minor fix: remove relations if mote is removed
    removed reference to potentially non-existing mote ID interface: the mote getID() method should instead be used
    added mote relation interface. used to show  relations between simulated motes, typically for debugging and visualization purposes
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    removing obsolete method previously used for estimating contiki's energy consumption.
    added LED to application motes
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    improved code: uses log mote interfaces observers directly, instead of going via the sim event central
    updated documentation examples
    attribute summary method made public
    added the MoteAttributes interface for handling mote printouts of #A x=y
    bugfix: only handle log output from our mote + added support for debug log interface
    bugfix: previously did not listen to all log interfaces
    removing obsolete method previously used for estimating contiki's energy consumption.
    minor fix: remove relations if mote is removed
    removed reference to potentially non-existing mote ID interface: the mote getID() method should instead be used
    added mote relation interface. used to show  relations between simulated motes, typically for debugging and visualization purposes
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    renamed author to avoid compiler warnings
    updated interfaces to new polling format.
    implemented by mote interfaces to determine when they should be polled
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    possibility to disable individual columns from auto-resize
    radio logger update: autosizing columns + support for new microsecond resolution + some minor fixes
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    removed debugging output
    + support for configurable buffer sizes (currently only for log output events)
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Close window when clicking the Save button.
    
    Changed the buttons for moving extensions up and down from icons to text.
    Added a Remove text message to the remove button, which previously was
    a red X.
    General cleanup and fixes of texts and labels
    hide .directories, sort directories
    updated to use new cooja project class
    minor fixes: using split pane, bugfix with canonical paths, added remove button
    disable tree icons icon at errors
    fix: default icons are not always available
    rewrote project dialog, for easier import and management of cooja projects
    minor fix: avoid too wide dialog by printing each project on a separate line
    'Set default' -> 'Save as default'
    new dialog api + removed lots of obsolete code
    respect screen size when displaying dialog
    removing strict dependency on project platform configuration files (cooja.config).
    
    files are still used if existing.
    misspelling fix
    added access control when applet
    removed public static JFrame frame variable. components should instead access the top parent container via getTopParentContainer()
    functionality for exporting current userplatforms as default external tools setting
    colors helping a user manually enter project paths
    dialog size fix
    renamed 'user platform' to 'project directories'
    creating user platform configuration on demand
    changed mote state to enum type instead of int
    removed old unused makefile-quickstart code
    +
    tidied up some code
    bug fix: user platform dialog had wrong owner window
    *added support for library files in user platforms (for example in dev and sys subdirectories)
    
    *added user platform history in platform configs
    *throwing 'include user platform directories' flags to compiler
    
    *fixed bug in platform config viewer
    *removed old custom class loader
    load default config from class path instead of current directory
    added cooja; 'The Contiki OS Java Simulator'
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed getGUI() method to getCooja(), to better reflect its purpose
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    removed unused ipdistributor code: was previously used to assign IP addresses to simulated motes,
    a decision better made by Contiki
    General cleanup and fixes of texts and labels
    removing unsafe MoteID interface dependencies
    disabled ip distributors, currently not used
    code cleanup
    fixed to finish edit before reading values from text fields
    do not dispose add mote dialog if positioner fails, simply abort
    removed public static JFrame frame variable. components should instead access the top parent container via getTopParentContainer()
    catching heap memory errors
    changed method name
    minor updates due to removed static variables and new method params
    added cooja; 'The Contiki OS Java Simulator'
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed getGUI() method to getCooja(), to better reflect its purpose
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    enable reconfigurable mote interfaces
    
    some minor trying to fix a bug that occasionally hangs cooja when reconfiguring a mote type
    added new mote type method that returns the by-default used mote interfaces, as opposed to all compatible mote
    interfaces
    
    this allows the user to override default settings in the create-new-mote-type dialogs
    Use the directory of the source file as initial directory when opening file browser
    General cleanup and fixes of texts and labels
    new experimental feature: possibility to change mote types when loading a simulation
    
    made compile dialogs only select mote interfaces specified in the loaded configuration
    added clean button to compile dialog, added compilation tip tab for msp motes
    three patches to simplify loading TinyOS firmwares (via MSPSim), contributed by Philipp Sommer
    remember last source file used relative to current contiki
    remember last source file
    recompile at ctrl+r
    minor fix: only reset dialogstate if mote type is not loaded
    gui fixes: allow editing external tools settings, hide advanced tab (not used yet) etc
    minor fix: clear commands from event thread
    added configurable environment + other minor changes
    abstract contiki compile dialog using compile library.
    to be implemented by msp mote type
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed getGUI() method to getCooja(), to better reflect its purpose
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added support for multi-class application motes
    [cooja] Reintroduced offset handling for absolute address space
    [cooja] ContikiMoteType: Fixed Command parsing
    
    - Use `nm -aP` for parsing both addres and size information
    - Use symbol section information for parsing
    [cooja] ContikiMoteType: Moved further parse functions to SectionParser classes
    [cooja] Removed offset from SectionMoteMemory to make it more generic
    [cooja] ContikiMoteType: Introduce abstract SectionParser
    
    Should encapsulate and decrease both redundancy and code duplication
    [cooja] memory: SectionMoteMemory implementation of MemoryInterface functions
    as forwarding to encapsulated memory sections
    
    Requires to make use of Symbol class for cooja motes, too
    [cooja] memory: Moved SectionMoteMemory to package memory
    [cooja] memory: Removed AddressMemory class including all references
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    General cleanup and fixes of texts and labels
    resizable dialog
    updated contiki mote compiler tests to again reflect contiki-cooja-main.c and the updated ContikiMoteType
    do not generate source + prepare environment method was updated
    removed contiki motes' communication stack configuration; the network stack instead depends on compiler flags/contiki-conf.h
    javadoc update
    fixed misspelling
    ContikiMoteType class methods were renamed
    removed debugging output
    activated communication stack selection for contiki mote types
    using new compiler library for configuration wizard
    added configuration wizard to replace the jni_tests
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added support for nested quotes in arguments when calling external commands from Cooja
    Added support for quote-delimited arguments when calling external commands from Cooja
    added objcopy external tools configuration
    changed nm command to sort numerically, and changed regexpressions to accept output from newer gcc versions
    added more debugging info under help menu
    added clean button to compile dialog, added compilation tip tab for msp motes
    added compile method with command array argument
    reimplemented initial support for referencing contiki source files in cooja projects
    do not generate source + prepare environment method was updated
    removed contiki motes' communication stack configuration; the network stack instead depends on compiler flags/contiki-conf.h
    activated communication stack selection for contiki mote types
    make sure compilation process is killed when simulation load is aborted
    added functionality for generating contiki main sources and building compiler environment. used by the contiki mote type
    contiki compile library. used by several mote type implementations (both emulated and os-level).
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added consumer thread timeout
    help class that simplifies effective handling of high rate events, that otherwise might flood the event queue
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    enable reconfigurable mote interfaces
    
    some minor trying to fix a bug that occasionally hangs cooja when reconfiguring a mote type
    added new mote type method that returns the by-default used mote interfaces, as opposed to all compatible mote
    interfaces
    
    this allows the user to override default settings in the create-new-mote-type dialogs
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    General cleanup and fixes of texts and labels
    new experimental feature: possibility to change mote types when loading a simulation
    
    made compile dialogs only select mote interfaces specified in the loaded configuration
    added clean button to compile dialog, added compilation tip tab for msp motes
    reimplemented initial support for referencing contiki source files in cooja projects
    do not generate source + prepare environment method was updated
    added possibility to override the default netstack in contiki-conf.h at compile time, by specifying another header
    temporarily disabled communication stacks on cooja platform, removed radio sensor
    use PATH_MAKE when compiling Contiki mote types. doesn't work on BSD systems
    otherwise.
    activated communication stack selection for contiki mote types
    gui fixes: allow editing external tools settings, hide advanced tab (not used yet) etc
    new compile dialog for creating contiki mote types.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed getGUI() method to getCooja(), to better reflect its purpose
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Placed the radio medium selection in the Advanced settings frame.
    General cleanup and fixes of texts and labels
    spelling fix
    removed delay configuration option + lots of obsolete code from dialog
    milliseconds -> microseconds update
    added option to make random seed automatically generated at simulation load
    + a single random generator instance is used instead of sharing seed between different parts of the simulator
    changed simulation time from int to long to support very long simulations
    increased label height
    removed tick lists and tick time functionality
    disabled some (almost) never used configuration options.
    removed old commented code
    changed to application modal dialogs instead of toolkit modal
    removed public static JFrame frame variable. components should instead access the top parent container via getTopParentContainer()
    code formatting and more debugging output at radio medium failure
    restructured dialog
    
    added main random seed, nr tick lists etc.
    force closing dialog correctly
    disposing on escape key
    changed method name
    minor updates due to removed static variables and new method params
    added cooja; 'The Contiki OS Java Simulator'
    [cooja] dialogs/MessageListe: User Logger instead of println
    [cooja] dialogs/MessageList: Added @Override annotations
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    + progress message type
    added option to limit the number of messages in list
    more efficient toggle warnings implementation + listen to all popup triggers
    minor fixes: allow copy to clipboard and output to console when hinding stdout + always show the last output
    added support for hiding normal output, only showing warnings/errors
    experimental: quick-n-dirty way to indicate compilation progress when (re)loading simulations
    added commonly used popup menu items to message list, such as copy to clipboard
    store messages outside model to avoid event thread problems
    add messages directly, scroll list later
    ensure new messages are added from the awt thread
    update message list immediately
    compilation window ui improvement (by nfi)
    changed to add messages using AWT thread
    added getInputStream method. returns a stream which ends in message window
    added cooja; 'The Contiki OS Java Simulator'
    [cooja] Removed some further printlns
    Fix: preserving blank characters (tabulator and space) in Cooja serial output
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    only show printable characters in mote output plugin
    simplified SerialUI implementation: code was both complex, buggy and contained unused broken functionality (slip, tos mode)
    save command history with configs
    replacing unterminated binary data with warning log message
    disabled tos mode for serial output (appears to be broken) + log
    messages with only printable characters
    fixed bug in serial printout related to TinyOS-mode
    bugfix: autofiltered data did not always trigger serial port event
    made COOJA avoid guessing that the debug printouts are TinyOS if many SLIP chars in stream
    added maximum log message size (1024 bytes) to avoid buffering up on binary serial output
    removing obsolete method previously used for estimating contiki's energy consumption.
    minor fix: always show start of lines
    added generic serial GUI component
    quick-fix: the generator assumes that the constructor accepts a mote object, this is the quickest fix currently
    renamed author to avoid compiler warnings
    minor TOS serial fix
    fixed TOS detect on usart output
    added simple method for wrapping serial data in SLIP packets
    removed todo: serial data callback is implemented
    changed simulation time from int to long to support very long simulations
    synchronizing pending bytes vector
    using state changed callback for more accurate incoming serial data throughput
    added command line history
    using events to write serial data to mote
    splitting contiki messages on newlines
    serial port implementation for sky node.
    sky serial port
    esb and msp430-general interfaces
    minor changes due to new setConfig method parameter
    added cooja; 'The Contiki OS Java Simulator'
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    warn if JAVA_HOME is not set
    'OK (Saves)' button -> 'Save'
    misspelling fix
    added access control when applet
    changed to application modal dialogs instead of toolkit modal
    removed public static JFrame frame variable. components should instead access the top parent container via getTopParentContainer()
    enabled config of entire ar command, not only arguments
    bug fix if JAVA_HOME not set
    minor fix
    added some explanations
    checking displayable attr on windows before disposing them
    (in an attempt to remove child0 exceptions)
    added comparison of default and current external tools settings
    added cooja; 'The Contiki OS Java Simulator'
    [cooja] Radio802154: Removed obsolete comments including println hints
    [cooja] Radio802154: Added @Override annotations
    
    Also removed some unused imports
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    renamed radio method isReceiverOn() to isRadioOn()
    
    fixed bug in Msp802154Radio causing all packets from non-802154-radios to be dropped
    moved radio interface visualizer code to shared abstract radio
    removing obsolete method previously used for estimating contiki's energy consumption.
    added common emulation classes for emulated motes
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    fixed line endings
    added common emulation classes for emulated motes
    added radio communication between micaz nodes
    fixed new byte based radio model for MSPSim based Sky node
    initialize from int[] (mspsim standard)
    cc24240 packet converter (currently no actual conversion is performed due to already stripped cc2420 output)
    default radio packet implementation
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    fixed line endings
    added common emulation classes for emulated motes
    javadoc bugs
    esb and msp430-general interfaces
    Removed duplicated statement.
    Simple test for the SHT11 driver.
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    fixed line endings
    added common emulation classes for emulated motes
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added cooja; 'The Contiki OS Java Simulator'
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added cooja; 'The Contiki OS Java Simulator'
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added manual positioner: allows user to manually enter every mote position
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    minor changes and documentation regarding using random generators in Cooja
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    extending abstract radio medium
    radio-related changes:
    radios can belong to different abstraction levels for example byte of packet radios.
    
    => lots of changes in surrounding files
    new method for getting observable object
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Cooja: Add LQI to DGRM
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    towards importing testbed profiles into dgrm
    changed default udgm to calculate success probabilities by distance. the previous behavior of udgm was renamed to "UDGM: Constant Loss"
    mspsim-specific time event that explicitly forces mspsim to synchronize its internal time to the current cooja time
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cooja: allow setting RSSI while sending and silence
    
    It is now possible to set the RSSI while the radio is sending or when
    no radiodata is received. This is now supported by all radiomediums
    exept MRM. This also includes a GUI to configure the values.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Cooja, DGRM: Change DirectedGraphMedium over to DGRMDestinationRadio and fix RSSI
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    renamed radio method isReceiverOn() to isRadioOn()
    
    fixed bug in Msp802154Radio causing all packets from non-802154-radios to be dropped
    General cleanup and fixes of texts and labels
    radio medium bugfix: a combination of changing channels while radio is off and with a nearby ongoing transmission, and
    then immediately turning on the radio caused it to incorrectly detect the ongoing transmission (bug reported by Beshr Al Nahas)
    unregistering visualizer skin
    towards importing testbed profiles into dgrm
    changed default udgm to calculate success probabilities by distance. the previous behavior of udgm was renamed to "UDGM: Constant Loss"
    javadoc update
    set radio interfered even when it is turned off -> cca is set immediately when radio is turned on
    radio medium update: receiving nodes that become interfered still receive connection data, but may (should) choose to ignore or corrupt it.
    this solves a problem with half-filled FIFO buffers on CC2420 radio platforms
    
    + minor fixes: the received signal strength is the maximum of all active connection, and a transmitting radio may still be interfered
    removed debug output
    radio medium patch: udgm uses hash table for efficient lookup in large networks + minor patches to dgrm
    radio medium updates: removed obsolete tick observer + notifying observers for each finished radio connection separately
    + method for checking if radio can receive data. does not change simulation output, but allows the radio medium to better keep track of how many packets were received etc
    register radio medium skin
    radio signalling moved to abstract radio medium
    separated udgm visualizer class from the udgm
    removed creating unnecessary random generator
    using main random generator
    negative channels can talk to any other channel (both rx and tx)
    minor fix: power cast to double
    only using distance when calculating received signal strength for nodes closer than transmitting range
    added output power indicator max value + remade signal strength calculation per distance
    added method for checking if radio is on/off. the method is currently only used by contikradio:s.
    
    changed UDGM coloring:
    dead/non-existing radios are black.
    turned off radios are gray.
    fixed some javadoc warnings
    using two random success ratios
    random seed fix
    removed old using
    now that success ratio is variable, it must also be stored with sim configs
    fixed possible null pointer exception
    
    + some formatting
    reset success ratio to 100&, and added configuration ability in plugin
    handling radio when nodes die
    added udgm random transmission support.
    
    random mode can currently only be activated via simulation configs (.csc)
    udgm uses the same random seed as the simulation
    setting UDGM signal strength depending on distance
    extending abstract radio medium
    radio-related changes:
    radios can belong to different abstraction levels for example byte of packet radios.
    
    => lots of changes in surrounding files
    new name (ealier Standard Radio Medium)
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    changed default udgm to calculate success probabilities by distance. the previous behavior of udgm was renamed to "UDGM: Constant Loss"
    mspsim-specific time event that explicitly forces mspsim to synchronize its internal time to the current cooja time
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cooja: allow setting RSSI while sending and silence
    
    It is now possible to set the RSSI while the radio is sending or when
    no radiodata is received. This is now supported by all radiomediums
    exept MRM. This also includes a GUI to configure the values.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    added new mote type method that returns the by default used mote interfaces, as opposed to all compatible mote
    interfaces
    
    this allows a user to override default settings in the create-new-mote-type dialogs
    Cooja: Refactored AbstractRadioMedium:update(): if -> switch
    Cooja: Change indention of AbstractRadioMedium to tabs
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    radio medium bugfix: a combination of changing channels while radio is off and with a nearby ongoing transmission, and
    then immediately turning on the radio caused it to incorrectly detect the ongoing transmission (bug reported by Beshr Al Nahas)
    + channel support in dgrm, signal strength bug fix
    bugfix: interfered nondestination radio
    radio connection update: radio should not be removed from destinations, but instead flagged as interfered.
    (and the radio medium will keep delivering data also to interfered destinations to avoid the half-filled RXFIFO problem)
    
    + minor fix: the received signal strength is the maximum of all sending radio
    bugfix: radio medium should reset last connection data before notifying observers that a new connection has begun
    radio medium patch: udgm uses hash table for efficient lookup in large networks + minor patches to dgrm
    radio medium updates: removed obsolete tick observer + notifying observers for each finished radio connection separately
    bugfix: must lock active connections before copying
    added experimental packet counters
    added experimental per destination propagation delay in radio connections. uses cooja time events to delay radio events.
    
    currently only delaying the four main events: reception started, packet delivery, byte delivery, and reception ended
    
    note that propagation delay is not yet implemented for all radio events - interfered radios will for example still be interfered immediately
    separated udgm visualizer class from the udgm
    warn if forwarded data is null
    using new radio packet format
    changed byte radio to supply delay meta data instead of timestamp
    added warning for null packets
    moved functionality to abstract radio medium in order to simplift new implementations
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    towards importing testbed profiles into dgrm
    changed default udgm to calculate success probabilities by distance. the previous behavior of udgm was renamed to "UDGM: Constant Loss"
    mspsim-specific time event that explicitly forces mspsim to synchronize its internal time to the current cooja time
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix backwards compatibility
    Cooja: allow setting RSSI while sending and silence
    
    It is now possible to set the RSSI while the radio is sending or when
    no radiodata is received. This is now supported by all radiomediums
    exept MRM. This also includes a GUI to configure the values.
    start DGRMVisualizerSkin in cooja_default.config now
    instead of starting in DirectedGraphMedium
    start DGRM plugin with cooja_default.config
    start the DGRMconfigurator within the cooja_default.config instead of starting in DirectedGraphMedium.java
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed getGUI() method to getCooja(), to better reflect its purpose
    Cooja: Add LQI-Support to DGRM
    Cooja, DRGM: Reordered interference checks: e.g. do not interfere if on different channel
    Cooja, DGRM: Change DirectedGraphMedium over to DGRMDestinationRadio and fix RSSI
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    renamed radio method isReceiverOn() to isRadioOn()
    
    fixed bug in Msp802154Radio causing all packets from non-802154-radios to be dropped
    try to restore edges loaded from old simulation configuration
    removed incorrect visualizer skin registration
    towards importing testbed profiles into dgrm
    removed use of temporary (simulation-specific) plugins, instead plugins should be unregistered when no longer needed + added method called when radio medium is removed from simulation
    interfere with ongoing transfer even if transmission fails
    + channel support in dgrm, signal strength bug fix
    register visualizer skin
    radio connection update: radio should not be removed from destinations, but instead flagged as interfered
    radio medium patch: udgm uses hash table for efficient lookup in large networks + minor patches to dgrm
    reload simulation bug fix (lost edges) + removed some debugging output
    added new radio medium: directed graph radio medium (short: dgrm).
    
    this radio medium will likely later be used to implement other more complex radio mediums such as udgm and mrm.
    
    currently the user interface (dgrm config plugin) for defining radio links is very limited.
    
    experimental: the new radio medium supports propagation delays, configurable via the plugin.
    [cooja] Memory: Added add/removeMemoryMonitor functions
    
    Provides a cleaner interface to access memory as VarMemory already
    contains variable name based add/removeVarMonitor functions.
    [cooja] Memory: Added get/setByteArray functions to Memory access class
    
    Provides a cleaner interface to access memory as VarMemory already
    contains variable name based get/setByteArray functions.
    [cooja] memory: Added address and symbol based memory access classes
    [cooja] MemoryLayout: Remove annoying println
    [cooja] Added MemoryLayout class to represent basic information about
    motes memory such as word size or endianess
    [cooja] Memory: Added add/removeMemoryMonitor functions
    
    Provides a cleaner interface to access memory as VarMemory already
    contains variable name based add/removeVarMonitor functions.
    [cooja] Memory: Added get/setByteArray functions to Memory access class
    
    Provides a cleaner interface to access memory as VarMemory already
    contains variable name based get/setByteArray functions.
    [cooja] VarMemory: Actually throw UnknownVariableException
    [cooja] memory: Added address and symbol based memory access classes
    [cooja] memory: Introduce minimal memory access interface 'MemoryInterface'
    
    A mote should provide access to its memory using this interface.
    All high-level access methods are wrapped around this minimal interface.
    
    Contains dummy-implementations of functions for AvrMoteMemory and MspMoteMemory
    [cooja] memory: Removed MoteMemory class including all references
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    renamed author to avoid compiler warnings
    updated interfaces to new polling format.
    implemented by mote interfaces to determine when they should be polled
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    [cooja] Reintroduced offset handling for absolute address space
    [cooja] Removed offset from SectionMoteMemory to make it more generic
    [cooja] memory: SectionMoteMemory implementation of MemoryInterface functions
    as forwarding to encapsulated memory sections
    
    Requires to make use of Symbol class for cooja motes, too
    [cooja] memory: Moved SectionMoteMemory to package memory
    [cooja] memory: Removed AddressMemory class including all references
    [cooja] memory: Removed MoteMemory class including all references
    [cooja] memory: SectionMoteMemory dummy implementation of MemoryInterface
    [cooja] Added @Override annotations for relevant files
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    added support for mapping Cooja motes' and Contiki's address
    implemented poll-based memory monitor support
    improved code
    removed unused methods and code cleanup
    throwing unknown variable exceptions
    decoupled sectionmemory and addressmemory.
    documentation (including javadoc) update
    added method for retrieving variable addresses
    performance improvement when fetching memory (using System.arraycopy instead of earlier for-loop)
    
    + code formatting (causing a lot of cvs diffs)
    added cooja; 'The Contiki OS Java Simulator'
    [cooja] Added base class `MemoryBuffer` for reading and writing both simple and complex data structures
    to and from memory with support for padding.
    [cooja] memory: Implementation of simple array-backed memory class 'ArrayMamory'
    [ccoja] Added new IPUtils class
    
    Utility class to convert IPv4/IPv6 byte arrays to String representation.
    
    * RFC5952-compliant IPv6 address shortening routine
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    help method for converting from hex string to binary
    read .gz files
    added support for hc06 decompression in radiologger / analyzer
    added initial 802.15.4 packet analyzer to COOJA radio logger
    added method for writing text to files
    added help methods for reading text files from disk
    Utility methods for generating hex dumps et al
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    reworked MspCodeWatcher plugin: using jsyntaxpane to display Contiki code, using tabs instead of splitpanes, easier to
    configure watch-/breakpoints, lots of bug fixes and minor improvements
    mspsim motes now implements new WatchpointMote interface, simplified code
    major update to mspsim-based emulated mote:
    * fully event based scheduling instead of previous event-tick-hybrid model
    
    ->
    * faster emulation of large mspsim-based networks
    * enables variable clock frequency (no longer fixed to 3.9 Mhz)
    removing unsafe MoteID interface dependencies
    minor changes: removing some unused code, restructuring, added getID() methods
    added read-only rime address interface
    using mote type configuration for generating correct mote interfaces:
    it is now possible to configure which interfaces msp430-based have
    main random generator must not be used for setup tasks such as node positioning
    new interface format without passive/active
    refactored MSPMote setup + added plugin to access MSPSim CLI
    fixed problem with the initialization order
    remade msp init methods
    esb mote extends general msp mote
    fixed a bug in executeJAR
    Added the control plugin behaviour to executeJAR
    Fix exported simulation: add jsyntaxpane JAR, start simulation with maximum speed
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed getGUI() method to getCooja(), to better reflect its purpose
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Allow setting random seed as parameter
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    General cleanup and fixes of texts and labels
    added simconfig attribute EXPORT that determines how files should be handled when a simulation is exported as an executable JAR
    export project config to allow project plugins to be run from executable jars
    loading user settings before generating executable jar, added debugging output
    return success (0) after exporting jar, use portable firmware paths in exported config
    bugfix: bad jar arguments
    added output jar arguments
    print jar process errors if building archive fails
    delete META-INF directory before building JAR
    minor changes in executable jars: removed jdk dependency on simulating computer + temporary files from simulation are stored in a subdirectory + temporary files from building the jar are removed when done
    new feature: generate executable jar from current simulation
    
    useful for preparing a simulation, and then running it elsewhere without having to configure cooja
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Queue implementation using a rotating, resizable array for fast random access
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    removed unnecessary imports
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    closing fileoutputstream
    added help method for reading from streams
    added methods for writing and reading byte array from files
    help methods for manipulating arrays
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    reworked MspCodeWatcher plugin: using jsyntaxpane to display Contiki code, using tabs instead of splitpanes, easier to
    configure watch-/breakpoints, lots of bug fixes and minor improvements
    mspsim motes now implements new WatchpointMote interface, simplified code
    major update to mspsim-based emulated mote:
    * fully event based scheduling instead of previous event-tick-hybrid model
    
    ->
    * faster emulation of large mspsim-based networks
    * enables variable clock frequency (no longer fixed to 3.9 Mhz)
    removing unsafe MoteID interface dependencies
    minor changes: removing some unused code, restructuring, added getID() methods
    added read-only rime address interface
    using mote type configuration for generating correct mote interfaces:
    it is now possible to configure which interfaces msp430-based have
    main random generator must not be used for setup tasks such as node positioning
    new interface format without passive/active
    refactored MSPMote setup + added plugin to access MSPSim CLI
    fixed problem with the initialization order
    remade msp init methods
    esb mote extends general msp mote
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    help class that simplifies implementing serial forwarders
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed getGUI() method to getCooja(), to better reflect its purpose
    reverted previous plugin name changes, instead build displayed names when menu is created
    Updated menu item name to indicate that a window is opened when selecting it.
    Added simulation as argument to moteType.getConfigXML() instead of each MoteType storing a reference to the simulation.
    convert paths when saving configuration
    added support for multi-class application motes
    the simulation object now handles the motetype configuration for motes; common functionality that was earlier implemented in each mote.
    
    this patch allows the simulator more freedom for hand-picking mote class loaders
    
    + some debug output in experimental ImportAppMoteType
    added new application mote type that loads a configurable application mote java class.
    the new mote type makes it easier to create and load new application-level motes
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    all mote memories now support symbol addresses
    added memory monitor methods (was previously only supported by emulated motes)
    added stack trace method stub
    new cooja plugin for monitoring memory areas, similar to the log listener.
    new method getExecutionDetails()
    added stub for reading current cpu frequency of emulated motes
    introduced new abstract mote classes:
    AbstractWakeupMote shared functionality common to both contiki-based and mspsim-based motes
    moved test framework chakana to backyard: project hasn't been used or maintained in some time
    an early version of chakana, an automated test framework used with COOJA
    documentation (including javadoc) update
    added cooja; 'The Contiki OS Java Simulator'
    A set of simple example programs for the ESB platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    cleaned up more mote type visualizer code
    cleaned up the mote type visualizer code
    Added simulation as argument to moteType.getConfigXML() instead of each MoteType storing a reference to the simulation.
    added mote attributes to various types of motes
    removing obsolete method previously used for estimating contiki's energy consumption.
    using application serial port
    removed warning for unrecognized configuration elements
    added LED to application motes
    configure and load methods may throw a MoteTypeCreationException
    abstract application mote, used for implementing application-level motes, now extends wakeup mote.
    + reimplemented disturber mote using abstract application mote
    + removed obsolete dummy mote example
    application-level mote type implementing new mote type methods
    
    + radio disturber mote extending abstract application mote
    removed public static JFrame frame variable. components should instead access the top parent container via getTopParentContainer()
    added abstract application motes
    
    can be used to rapidly implement new pure java application motes
    renamed 'user platform' to 'project directories'
    method parameter updates
    added disturber mote:
    
    mote that periodically transmits packet that interferes with surrounding radio traffic
    added cooja; 'The Contiki OS Java Simulator'
    [cooja] Removed offset from SectionMoteMemory to make it more generic
    [cooja] memory: SectionMoteMemory implementation of MemoryInterface functions
    as forwarding to encapsulated memory sections
    
    Requires to make use of Symbol class for cooja motes, too
    [cooja] memory: Moved SectionMoteMemory to package memory
    [cooja] memory: Removed MoteMemory class including all references
    [cooja] getMemory() now returns MemoryInterface
    
    Including code adaptions based on new memory methods to keep code compilable
    [cooja] Added MemoryLayout class to represent basic information about
    motes memory such as word size or endianess
    [cooja] Added @Override annotations for relevant files
    Cooja backwards compatibility with simulation files that uses non-Contiki Java package names
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed getGUI() method to getCooja(), to better reflect its purpose
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added support for mapping Cooja motes' and Contiki's address
    implemented poll-based memory monitor support
    improved code
    small optimizations and cleanups
    minor fix to allow adding mote interfaces from configuration
    simple patch to allow application motes to receive serial data
    using application serial port
    only deliver packets that are not null to app mote
    the simulation object now handles the motetype configuration for motes; common functionality that was earlier implemented in each mote.
    
    this patch allows the simulator more freedom for hand-picking mote class loaders
    
    + some debug output in experimental ImportAppMoteType
    abstract application mote, used for implementing application-level motes, now extends wakeup mote.
    + reimplemented disturber mote using abstract application mote
    + removed obsolete dummy mote example
    added getID() stub to avoid compiler errors: the application motes does not yet respect the configured mote IDs
    application-level mote type implementing new mote type methods
    
    + radio disturber mote extending abstract application mote
    removed passive/active interfaces notion.
    using new radio packet format and some documentation
    added abstract application motes
    
    can be used to rapidly implement new pure java application motes
    method parameter updates
    added disturber mote:
    
    mote that periodically transmits packet that interferes with surrounding radio traffic
    added test files for future support of mantis os.
    
    not working yet due to threading vs jni problems
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    method that returns the next wakeup time
    enables sharing mote-specific properties
    added removed()-method for mote objects
    small optimizations and cleanups
    introduced new abstract mote classes:
    AbstractWakeupMote shared functionality common to both contiki-based and mspsim-based motes
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Fixed menu item name to be consistent with others
    removed obsolete tick method
    configure and load methods may throw a MoteTypeCreationException
    decreased transmission interval and increased transmission duration of disturber mote, since short packets could still get through with the current settings
    abstract application mote, used for implementing application-level motes, now extends wakeup mote.
    + reimplemented disturber mote using abstract application mote
    + removed obsolete dummy mote example
    application-level mote type implementing new mote type methods
    
    + radio disturber mote extending abstract application mote
    removed public static JFrame frame variable. components should instead access the top parent container via getTopParentContainer()
    added abstraction level descriptions
    renamed 'user platform' to 'project directories'
    method parameter updates
    added disturber mote:
    
    mote that periodically transmits packet that interferes with surrounding radio traffic
    added cooja; 'The Contiki OS Java Simulator'
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    cleaned up the mote type visualizer code
    Made the mote type information for MSPSim based platforms more compact
    automatically updating when new mote types are added/removed
    minor fix when few mote types available
    updated plugin constructors
    added cooja; 'The Contiki OS Java Simulator'
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed getGUI() method to getCooja(), to better reflect its purpose
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    added 200% simulation speed alternative
    reverted previous plugin name changes, instead build displayed names when menu is created
    replaced Simulation's setDelayTime(ms) method with more intuitive setSpeedLimit(ratio)
    
    updated Simulation Control tool to use new setSpeedLimit(), and removed unused "run until" function
    
    updated references to old setDelayTime(ms)
    extracted quick help interface to a separate file, moved plugin-specific quick help from quickhelp.txt to the plugins themselves
    General cleanup and fixes of texts and labels
    Added a label that shows relative simulation speed
    minor fix: check that event is not already scheduled
    new event scheduling api
    allow simulation delays below real-time
    milliseconds -> microseconds update + more effective repainting using swing timers (avoid AWT event floods)
    better button description: "Stop" -> "Pause"
    make sure components are initialized at tick event
    new mote interfaces api + name changes
    renamed button "Step millisecond"
    consistent labelling
    removed run until button
    thread safe plugin startup
    minor layout fix
    changed to exponential delay slider
    changed label
    updated plugin constructors
    bug fix:
    label may still be null when simulation updating
    added cooja; 'The Contiki OS Java Simulator'
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed getGUI() method to getCooja(), to better reflect its purpose
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    plugin cleanup: removed list of mote interfaces, instead providing links to useful mote plugins
    using new MotePlugin interface
    removed mote state references
    removed passive/active interfaces notion.
    + fixed scrollbar
    removed mote type visualizer (only showing identifier)
    layout fix
    updated plugin constructors
    changed mote state to enum type instead of int
    added cooja; 'The Contiki OS Java Simulator'
    [cooja] plugins/LogListener: Prevent from throwing
    ArrayIndexOutOfBoundsException in case of empty logTable
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed getGUI() method to getCooja(), to better reflect its purpose
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    minor changes: methods that allow other plugins, e.g. the timeline, to learn about the currently used mote
    output filter, make mote-specific coloring on by default
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    reverted previous plugin name changes, instead build displayed names when menu is created
    Reimplementation of the context menu, which was difficult for newcomers to find,
    to become real menus instead.
    
    Renamed the tool to have a more user-centric name.
    
    Set a new default placement of the window.
    extracted quick help interface to a separate file, moved plugin-specific quick help from quickhelp.txt to the plugins themselves
    General cleanup and fixes of texts and labels
    public clean method, and broke out add log messages method
    append to file
    Renamed context menu item: 'Focus' -> 'Show in'
    +options to inverse current filter and hide debugging output
    removed log data string caches (reduces memory usage), added mote highlighting by clicking on Mote column
    save time formatting to config
    + simple time formatting hh:mm:ss.sss, currently accessed by mouse clicking column header
    Updated to use ArrayQueue instead of a linked list for faster random access
    mote-specific coloring bug fix + time focus on all active plugins
    Minor optimization: only lookup data when needed
    added option for mote-specific background coloring in log listener
    restructured focus menu items, removed debugging output
    using update aggregator to avoid event queue flooding in fast simulations, restructured copy to clipboard popup menu
    synchronize time to timeline and radio logger at space key
    title bug fix: mote may have several log interfaces
    setFilter() and getFilter() methods made public
    Changed separator for concatenated mote id and log message for filtering to a space character.
    Added option to filter on concatenated mote id and log message + removed compiler warnings
    added method to select a log listener message near a given time, similar to timeline and radio logger methods
    removing unsafe MoteID interface dependencies
    added notification to model when removing events
    + support for configurable buffer sizes (currently only for log output events)
    using event central for keeping track of simulation motes + for sharing log output events among different log listeners.
    
    note that at least one log listener plugin must be kept opened, otherwise the event central will clear the history
    removed regexp filtering on time column
    added menu options: copy to clipboard and save to file
    log listener plugin update: support for regexp filtering + nicer ui
    
    + minor tooltip fix in radio logger
    milliseconds -> microseconds update + more effective repainting using swing timers (avoid AWT event floods)
    set default location and size
    splitting contiki messages on newlines
    new loglistener version, implemented by Niclas Finne
    save log only available if not applet mode
    removed public static JFrame frame variable. components should instead access the top parent container via getTopParentContainer()
    automatically listening to newly added nodes
    appending to textarea from awt thread
    added "save log" functionality; simply writes to a text file
    updated plugin constructors
    added simple filtering support
    minor bug fix.
    text area may still be null when log interfaces update
    added cooja; 'The Contiki OS Java Simulator'
    Cooja: allow setting RSSI while sending and silence
    
    It is now possible to set the RSSI while the radio is sending or when
    no radiodata is received. This is now supported by all radiomediums
    exept MRM. This also includes a GUI to configure the values.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    reverted previous plugin name changes, instead build displayed names when menu is created
    Set Notes window to open by default.
    
    Changed name of the menu item in the Tools menu.
    
    Slightly shorter default note text.
    improved api
    added notes plugin, useful for storing simulation notes in the config
    [cooja] Get rid of all those redundant IP address to String functions
    
    Commonly use the String representation functions of IPUtils.
    [cooja] memory: Removed MoteMemory class including all references
    [cooja] getMemory() now returns MemoryInterface
    
    Including code adaptions based on new memory methods to keep code compilable
    [cooja] Added @Override annotations for relevant files
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed getGUI() method to getCooja(), to better reflect its purpose
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    increased maximum buffer size
    reverted previous plugin name changes, instead build displayed names when menu is created
    Updated menu item name to indicate that a window is opened when selecting it.
    rewrote code completely:
    lots of bugfixes and improved code
    added support for monitoring pointers
    added new integer buffer type
    bugfixed stacktrace tooltip
    improved source info, added optional stack trace tooltip
    new cooja plugin for monitoring memory areas, similar to the log listener.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Make the ScriptLog interface public. This is needed for OpenJDK
    two new shell commands: download and sendcmd
    added experimental checkpointing functionality:
    currently only implemented on the sky platform
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    javadoc update
    visualizer plugin major update: support for zooming and panning, hiding window decorations, and a more powerful visualization skin api
    visualizer update: enabling selecting multiple visualizer skins
    new visualizer plugin with skin support
    renamed author to avoid compiler warnings
    changed simulation time from int to long to support very long simulations
    added getDrift method
    set drift method as standard for all clock interfaces
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    introduced global timeout function, not yet documented
    added debugging output + generated javascript code tooltip
    directly call java script method instead of parsing GENERATE_MESSAGE calls
    milliseconds -> microseconds update + more effective repainting using swing timers (avoid AWT event floods)
    added help method for writing to script mote serial ports
    added generate_message macro to contiki scripts
    minor fix: using yield and wait_until macro to implement yield_wait_until
    implemented contiki test scripts as threads instead of state machines for easier test development:
    
    javascript generator that replaces test script specific "macros"
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed getGUI() method to getCooja(), to better reflect its purpose
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    new feature: ability to show log listener's output in the timeline, using the mote output plugin's currently
    active filter
    cooja TimeLine: support mouse wheel zoom
    
    Add listener that zooms based on mouse wheel.  The zoom center is the
    mouse position, which alleviates the pressure to touch pabigot/contikix#4.
    
    Closes pabigot/contikix#5
    
    Signed-off-by: Peter A. Bigot <pab@pabigot.com>
    cooja TimeLine: zoom keystroke failure
    
    The + typed character can only be generated on English keyboards by
    shift-equals, resulting in a failure to recognize ctrl-plus because of
    the unexpected shift modifier.  Adapt by supporting English and Spanish
    keyboards, as well as number pad keys.
    
    Closes pabigot/contikix#2
    
    Reference: http://forums.oracle.com/thread/1356291
    Signed-off-by: Peter A. Bigot <pab@pabigot.com>
    cooja TimeLine: refactor zoom infrastructure
    
    Refactor common code into private functions.  Abstract to support zoom
    to level or exact value.
    
    There should be no behavioral change as a result of this patch except:
    
     * zooms are consistently filtered to be in the valid range (those from
       configuration parameters formerly had been used directly);
     * the correct centerTime is used for zoomOutAction when
       mousePixelPositionX is positive
    
    Supports pabigot/contikix#5
    
    Signed-off-by: Peter A. Bigot <pab@pabigot.com>
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    reverted previous plugin name changes, instead build displayed names when menu is created
    Rewrote the context menu and the custom left pane as menus, to make the
    window more user-friendly.
    renamed radio method isReceiverOn() to isRadioOn()
    
    fixed bug in Msp802154Radio causing all packets from non-802154-radios to be dropped
    extracted quick help interface to a separate file, moved plugin-specific quick help from quickhelp.txt to the plugins themselves
    General cleanup and fixes of texts and labels
    ensure mouse-triggered event popups are not outside screen, updated to use new watchpoint interface
    Deferred mote height calculation until components are initialized
    minor bugfix: side panel height was wrong when plugin started
    make clean method public
    Renamed context menu item: 'Focus' -> 'Show in'
    added right-click menu option to remove all motes but selected
    minor updated: more zoom levels, implemented mote highlighting, updated channel-specific colors, added move to top mote action
    clear menu option + time focus on double-click
    minor bug fixes + support for panning with alt+mouse + two new experimental features: log execution details and active radio channels
    minor addition: sort motes by distance
    improved zoom
    minor fixes: better statistics output, added zoom level, popup menu labels
    statistics extraction public, to be accessible from other plugins and test scripts
    improved zooming by slider
    added method to select a log listener message near a given time, similar to timeline and radio logger methods
    added: zoom in/out via ctrl +/-
    removed: mouse tooltip (only appears when mouse is clicked)
    statistics bug fix: divide by number of motes + show time ruler at zoom in/out
    hide interfered radio events when radio is not on
    * observing motes' radio states ("is transmitting") instead of radio events ("started transmitting").
    previously the last radio event was logged in the Timeline, which could be very confusing when a radio was interfered while transmitting a packet: it looked like the radio stopped transmitting. (this behavior did not, however, affect the simulation output but only the timeline)
    
    * added Radio Logger menu option shortcut, for quickly moving from the Timeline to the Radio Logger plugin
    * minor ui fixes regarding event tooltips: tooltip info appear at mouse clicks
    fixed integer to long wrap bug for simulation times over 2000s
    improved timeline zooming
    minor feature: show mouse drag distance (in time) from mouse press
    removing unsafe MoteID interface dependencies
    support for extracting very simple statistics from observed events
    using event central for keeping track of simulation motes
    added mote separator background colors + painting LED events as three thin lines (RGB) instead of in a single color
    show watchpoint colors and use a fix watchpoint event width
    minor fixes: integer wrap in repaint method + check watchpoint cast
    implemented watchpoint visualization +
    saving current zoom and divider locations in simulation configs
    + automatically add/remove simulation motes
    minor bugfixes + added zoom functionality
    quick hack for storing logged events to file
    Draw 0-width radio events as one pixels wide to show all transmissions
    minor fix: avoid repaint flicker by directly setting scroll coordinate
    new cooja timeline plugin.
    
    still experimental and under development, therefore not yet enabled by default
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Cooja: Add LQI to DGRM
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    disallowed starting plugins/visualizer skins for non-compatible motes/simulations
    towards importing testbed profiles into dgrm
    hide exceptions if table input parsing fails
    radio medium patch: udgm uses hash table for efficient lookup in large networks + minor patches to dgrm
    bug fix: delay field is in milliseconds, not microseconds
    added new radio medium: directed graph radio medium (short: dgrm).
    
    this radio medium will likely later be used to implement other more complex radio mediums such as udgm and mrm.
    
    currently the user interface (dgrm config plugin) for defining radio links is very limited.
    
    experimental: the new radio medium supports propagation delays, configurable via the plugin.
    [cooja] plugins/VariableWatcher: Added minimal quick help
    [cooja] plugins/VariableWatcher: Also disble addr and size input fields when monitoring
    [cooja] plugins/VariableViewer: Fix decoding in stringToValue()
    [cooja] plugins/VariableWatcher: Fixes for value layout
    
    - Fixed layout axis form x to page to show multi-line value fields.
    - More flexible width calculation for value fields
    [cooja] plugins/VariableWatcher: Catch exceptions, show error dialog for invalid addresses
    And some gui option handling fixes
    [cooja] plugins/VariableWatcher: Allow to access memory by address/size
    
    By selecting the checbox next to the address field, VariableWatcher
    switches from variable mode to address mode.
    Now any address and size might be entered to show data from memory.
    
    Additionally for variables where now size information is available the
    interface allows the user to select one.
    [cooja] plugins/VariableWatcher: Replaced obsolete Vector by ArrayList
    [cooja] plugins/VariableWatcher: fixed handling of unknown variable sizes
    [cooja] plugins/VariableWatcher: Added Tooltip that shows address, added address variable type, fixed columns width layout
    [cooja] plugins/VariableWatcher: Added swingx library to provide autocomplete support for variable names combobox in plugins/VariableWatcher
    [cooja] plugins/VariableWatcher: Added 'line break' for byte text fields
    Adds new line each 8 text fields
    [cooja] plugins/VariableWatcher: Added address and and size labels
    to display information about currently selected variable
    [cooja] plugins/VariableWatcher: implemented monitoring, writing; fixed various issues
    [cooja] plugins/VariableWatcher: Fixed xml config save/load
    [cooja] plugins/VariableWatcher: Remove charValuePane and reimplement read functionality and more
    [cooja] plugins/VariableWatcher: Replace varName KeyListener by DocumentListener as only content changes change validation state of varName
    Modify foreground color of varName instead of background color because some LookAndFeels do not support colored backgrounds.
    [cooja] plugins/VariableWatcher: Implemented formatted output for value fields
    [cooja] plugins/VariableWatcher: Enums for ComboBoxes and new one for display format
    
    Allows to choose between var types (byte, short, int, long) and display
    types (char, decimal, hex)
    [cooja] plugins/VariableWatcher: Added Combo as name suffix for JComboBoxes
    [cooja] plugins/VariableWatcher: Added @Override annotations
    [cooja] memory: Removed AddressMemory class including all references
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    using new MotePlugin interface
    minor update: sorting variables by name + decreased default plugin size
    support for character arrays + various UI updates, contributed by Kasun Hewage.
    bug fix: bytes were not displayed correctly (signed)
    catching unknown variable exceptions + using integer size
    removed old debug output
    decoupled sectionmemory and addressmemory.
    updated plugin constructors
    added saved config plugin specifics support
    added cooja; 'The Contiki OS Java Simulator'
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    removing unsafe MoteID interface dependencies
    added scriptmote for easier scripting
    serial port interface
    custom data radios
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed getGUI() method to getCooja(), to better reflect its purpose
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    reverted previous plugin name changes, instead build displayed names when menu is created
    Updated menu item name to indicate that a window is opened when selecting it.
    removing unsafe MoteID interface dependencies
    + startPlugin method throws exceptions
    new mote interfaces api + name changes
    renamed variable
    added get/set config for event listener plugin: (must register new observers as well)
    added get/set config for event listener plugin
    bug fix. only registering when interface exists
    added a few commonly tracked interfaces, not depending on contiki mote types
    removed debugging output
    new plugin:
    plugin can be configured to break on certain events in simulation environment, for example whenever a led changes
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed getGUI() method to getCooja(), to better reflect its purpose
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    extracted quick help interface to a separate file, moved plugin-specific quick help from quickhelp.txt to the plugins themselves
    Replaced borders with separator for a more compact view
    added method for getting mote interfaces based on class names + getInterfaces() returns a collection instead of a vector
    using new MotePlugin interface
    added quick help
    fixed to save scroll position in configuration files
    new mote interfaces api + name changes
    removed passive/active interfaces notion.
    updated plugin constructors
    added saved config plugin specifics support
    added cooja; 'The Contiki OS Java Simulator'
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added simple method for wrapping serial data in SLIP packets
    javadoc bugs
    esb and msp430-general interfaces
    Removed duplicated statement.
    Simple test for the SHT11 driver.
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed getGUI() method to getCooja(), to better reflect its purpose
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Allow the exit code from a failed test script to propagate to the Java
    process, which makes it possible to track failing tests in makefiles and
    via scripts.
    Cooja: Fix missing message when running a script
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    General cleanup and fixes of texts and labels
    Make the ScriptLog interface public. This is needed for OpenJDK
    bugfixed race condition
    avoid exception when cooja runs in testmode
    some bugfixes regarding timeouts in test scripts, with simplified code
    added writeFile method to be used from scripts
    get[Started]Plugin method returns plugins that end with argument + added sim and gui variables accessible from test scripts
    do not execute timeout event if script is already disabled
    print test script progress for long running tests
    listen to all log interfaces, also mote debug interfaces
    added shortcut for logging to any file directly from test scripts
    fixed potential memory leak when motes are removed during a simulation
    new event scheduling api
    minor fix for non-GUI simulations: stop simulation and clean-up before shutting down COOJA
    removing unsafe MoteID interface dependencies
    GENERATE_MESSAGE() argument in milliseconds
    added debugging output + generated javascript code tooltip
    bugfix: do not activate script engine according to simulation config in test mode (without GUI), instead, always keep it activated
    + more debugging output
    made test editor plugin a simulation plugin: it now depends on a specific simulation
    
    this change enables multiple simultaneous scripts in a simulation, and also makes it easier to create tests since they will be stored with the simulation config
    
    since the plugin now depends on a simulation it is no longer possible to create/reload simulations from the test scripts (this was however not often used)
    show dialog at script errors
    catch exceptions thrown from script threads
    release semaphores before stopping simulation (may deadlock)
    added method for faking mote output in tests: mostly used for debugging
    immediately aborting script execution when test reports success or failure
    added generate_message macro to contiki scripts
    implemented contiki test scripts as threads instead of state machines for easier test development
    automatically stop simulation when script finishes test
    added testOK and testFailed methods accessible from test scripts
    updated some references to old getLastLogMessages()
    optimized some loops for increased performance and added runprof for profiling
    some minor fixes
    interact with simulations using javascripts
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    milliseconds -> microseconds update + more effective repainting using swing timers (avoid AWT event floods)
    mote types are returned as array now
    register as observer at end of constructor
    updated plugin constructors
    minor bug fix
    added cooja; 'The Contiki OS Java Simulator'
    Fixed a bug with the ScriptRunner plugin
    
    The ScriptRunner plugin started the simulation in GUI and NOGUI mode.
    Now the simulation is only started in nogui mode
    New PluginType SIM_CONTROL_PLUGIN for sim control
    
    SIM_CONTROL_PLGUIN are handled like SIM_PLUGIN, with one exception.
    If the simulation is started with -nogui=<simfile> than it is checked
    if a controlling plugin is loaded. If not, the simulation terminates
    with an error message.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed getGUI() method to getCooja(), to better reflect its purpose
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Cooja: Load whole simulation before executing it in nogui mode
    reverted previous plugin name changes, instead build displayed names when menu is created
    improved workaround to disable the code editor pane's built in run functionality: remove keyboard shortcut instead of
    disabling action
    fixed menu bug that caused menu items to be enabled although script was active
    
    reinstated title that shows whether script is active or not
    
    fixed Ctrl+R hotkey bug that triggered an error dialog when script was inactive
    
    remember last script disk file
    replaced Simulation's setDelayTime(ms) method with more intuitive setSpeedLimit(ratio)
    
    updated Simulation Control tool to use new setSpeedLimit(), and removed unused "run until" function
    
    updated references to old setDelayTime(ms)
    Rewrote the script editor to use real menus instead of the custom buttons
    at the bottom of the window as was previously used.
    General cleanup and fixes of texts and labels
    bugfix: gui-dependency caused nullpointer exception in test mode
    removed debugging output
    some bugfixes regarding timeouts in test scripts, with simplified code
    quickfix to allow running in headless mode
    using jsyntaxpane as javascript editor, added ui controls to link test scripts to a file on disk
    quick hack for reloading script from disk when script is activated
    do not write to external test script file
    added support for external script file, which currently requires manually editing the .csc
    removed debug tooltip
    added script example, demonstrating how to interact with surrounding cooja plugins
    added two example scripts
    minor fix for non-GUI simulations: stop simulation and clean-up before shutting down COOJA
    print random seed and end time to all test logs
    added debugging output + generated javascript code tooltip
    bugfix: do not activate script engine according to simulation config in test mode (without GUI), instead, always keep it activated
    + more debugging output
    made test editor plugin a simulation plugin: it now depends on a specific simulation
    
    this change enables multiple simultaneous scripts in a simulation, and also makes it easier to create tests since they will be stored with the simulation config
    
    since the plugin now depends on a simulation it is no longer possible to create/reload simulations from the test scripts (this was however not often used)
    milliseconds -> microseconds update + more effective repainting using swing timers (avoid AWT event floods)
    minor fixes: remember last used test, respect maximum window size etc
    minor bugfixes: support relative paths when saving simulation configs + check that simulation load succeeded
    make sure test script is activated *after* script file has been loaded
    automatically activate test for new simulations + simplified exporting tests
    minor fixes + added script line numbers
    clearing test log when reactivated
    start each log file with its filename
    implemented contiki test scripts as threads instead of state machines for easier test development:
    
    new example script + minor fixes
    merged script runner plugins:
    * in GUI-mode the script is editable
    * without GUI, the script loads the simulation and activates the test script
    using updated messagelist
    updated example script with new testOK() methods + better explanations
    bigger default compilation output window
    better example test script
    added import test functionality
    some minor fixes
    added "export contiki test" functionality. still needs testing
    interact with simulations using javascripts
    [cooja] plugins/Visualizer: Simple mote tooltip
    
    Shows a motes type identifier and filename of firmware/sourcecode running on it
    [cooja] plugins/Visualizer: Deselect motes when removing
    
    This also fixes visualization issues such as
    remaining transmission range underlays for removed motes
    [cooja] plugins/Visualizer: Key control: Allow to abort actions with ESCAPE key and delete motes using DELETE key
    [cooja] plugins/Visualizer: Partly implement behavior of beginMoveRequest to fit new mote movement handling
    [cooja] plugins/Visualizer: Mouse release always terminates previous action
    and reses actions state and cursor appearance
    
    Also renamed UNKNOWN state to NONE as it is a more adequate name for the new behavior
    [cooja] plugins/Visualizer: Group mote placement modifications together (move, delete)
    [cooja] plugins/Visualizer: Implemented multi-mode behavior of delete mote menu for move, too
    
    Note that this does not yet implement the correct behavior of beginMoveReques()
    [cooja] plugins/Visualizer: Fixed node selection in Delete menu handling
    
    Previously if multiple motes were selected
    and the context menu of a non-selected mote
    was used to delete, not the clicked mote
    but the other selected ones were removed.
    
    This behavior is fixed so that if another
    mote is clicked only this is deleted.
    [cooja] plugins/Visualizer: Enable multi-mote deletion in mote menu
    [cooja] plugins/Visualizer: Fix: Always highlight selected motes.
    
    Motes were highlighted only by the UDGMVisualizerSkin before.
    Now highlighting moved from individual VisualizerSkin to Visualizer.
    
    A selected mote is highlighted with a blue circle
    and a semi-transparent gray overlay.
    [cooja] plugins/Visualizer: Replaced multiple if-string with switch over
    strings
    [cooja] Reformatted Visualizer and skins code
    [cooja] plugins/Visualizer: Use more specific catches and multi-catches
    if possible
    [cooja] Automated code updates that do not make any functional changes
    - made loggers final
    - added some diamond interface cosmetic
    - shortened if-return statements
    - replaced size == 0 check with .isEmpty()
    [cooja] Added @Override annotations for Visualizer and skins
    [cooja] plugins/Visualizer: Updated quick help to match new control
    capabilities
    [cooja] plugins/Visualizer: Multi-mote selection functionality
    
    This adds multi-mote selection capabilities to the visualizer plugin:
    
    - [Ctrl + Mouse Drag]: Rectangular selection of multiple motes
    - [Ctrl + Mouse Click]: Add/Remove motes from current selection
    - Mouse Drag on any selected Mote: Move all currently selected motes
    
    Note: This changes previous behaviour of using Ctrl key.
    cooja: plugins/Visualizer: Implemented mouse wheel zooming with mouse coordinates as center
    deleted unneeded if
    getStringArrayValue never returns null
    Cooja backwards compatibility with simulation files that uses non-Contiki Java package names
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed getGUI() method to getCooja(), to better reflect its purpose
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    made mote-to-mote relations optional, reordered how skins are painted to more easily decide which skin is
    painted first
    Fixes COOJA Network Visualiser glitch when clicking on a mote
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    reverted previous plugin name changes, instead build displayed names when menu is created
    implemented zoom menu and added keyboard shortcuts
    
    fixed typos in quick help
    simplified skin menu implementation, removed unused skin button code
    Bugfix: viewers were not correctly ticked off in the menu when a simulation was loaded from file. The current fix feels like a hack through.
    Updated imports
    Rewrote the code to use real menus instead of relying on context menus for top-level operaions.
    The transition is not complete yet; there are still a few functions left in context menus,
    such as radio medium configuration options.
    
    Renamed the window to better match what the user sees in the window.
    
    Updated how mote movement is implemented: the user now sees that the mote moves when the
    mouse is moved.
    verify that visualizer skin is compatible with the current simulation before starting it,
    set udgm/dgrm/mrm radio medium skins to be started as default
    extracted quick help interface to a separate file, moved plugin-specific quick help from quickhelp.txt to the plugins themselves
    Renamed simulation visualizers to simulation visualizers, from simulation visualizer skins
    Added new annonation with which Cooja components (e.g. mote plugins) can be activated
    or deactivated depending on the given argument (e.g. mote). This may for
    example be used by a mote plugin that only accepts emulated motes, and that
    consequently should be hidden in other non-emulated motes' plugin menues.
    
    The new annotation is currently only used by the MspCodeWatcher and the DGRM visualizer skin.
    removed debugging output
    added possibility to save default visualizer skins
    simplified mote selection in visualizer skins
    Added optional color for mote relations
    exposing the last mouse clicked mote, skins may use this to view additional information about the mote
    Added arrows to mote relations to show direction
    added mote attribute visualizer skin: prints mote attributes below each mote
    Added option to move motes in Visualizer without confirm dialog by dragging motes with ALT button pressed
    Changed to draw the mote relations under the motes
    javadoc update
    Enabled antialiasing in visualizer paint.
    by request: added mote type visualizer skin
    visualizer plugin major update: support for zooming and panning, hiding window decorations, and a more powerful visualization skin api
    more debugging output + minor refactoring
    using event central for keeping track of simulation motes
    + startPlugin method throws exceptions
    setup skin from event dispatcher
    remade led skin: showing leds left of motes
    visualizer update: enabling selecting multiple visualizer skins
    bugfix: no visualizer may be selected when simulation is reloaded
    highlight several motes at the same time
    new visualizer plugin with skin support
    [cooja] plugins/analyzers: Replace StringBuffer with lightweight StringBuilder
    
    StringBuffer is a thread-safe version of StringBuilder that introduces
    unnecessary overhead.
    
    Additional replaced concatenations with .append()
    [cooja] plugins/analyzers: Added @Override annotations
    [cooja] plugins/analyzers: Indention and whitespace cleanups
    [cooja] plugins/analyzers: Added PacketAnalyzer for 6lowpan fragmentation header
    Allow user configuration of RadioLogger pcap file
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed getGUI() method to getCooja(), to better reflect its purpose
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    added new optional features: time formatting, hide-duplicate-packets, hide-airshot-packets
    Add a "Packet Number" column
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    reverted previous plugin name changes, instead build displayed names when menu is created
    Reimplemented the context menu, which was difficult for newcomers to find,
    to become real menus.
    capturing exceptions from radio logger - some packet analyzers seems to be buggy
    Renamed context menu item: 'Focus' -> 'Show in'
    added analyzer for raw IPv6
    added initial pcap exporter for 6lowpan analyzer
    minor bugfix: reverse search (ctrl+f, shift+enter)
    added simple search functionality (ctrl+f)
    added methods for saving radio connections to file from test scripts, as suggested on the develop mailing list
    time focus on space key
    Minor cleanup of the radio logger output (packet description).
    only add separator if there is more data
    Bug fix: only continue to analyze packet data when ANALYSIS_OK_CONTINUE is returned from previous analyzer.
    added possibility to add radio logger analyzers from cooja projects
    added support for icmpv6 analysis / RPL
    fixed 6lowpan analyzer
    Minor cleanup of radio logger verbose output
    * Save selected packet analyzer chain and split pane position in simulation file
    * Update all log entries when changing packet analyzer chain
    * Added popup menu to verbose pane
    * Added serialVersionUID to menu actions to avoid compiler warnings
    added initial 802.15.4 packet analyzer to COOJA radio logger
    added method to select a log listener message near a given time, similar to timeline and radio logger methods
    added Payload Alias for easier overview of several packets with identical payloads.
    added Timeline menu option for quickly viewing the selected radio packet in the Timeline plugin.
    minor bug fix: enforce string to avoid merging mote ids
    removing unsafe MoteID interface dependencies
    added menu options: copy to clipboard and save to file
    log listener plugin update: support for regexp filtering + nicer ui
    
    + minor tooltip fix in radio logger
    radio logger update: autosizing columns + support for new microsecond resolution + some minor fixes
    better description
    show also converted packet data in tooltip
    made table contents more compact and changed tooltip for radio packets to show hex dump
    radio logger plugin facelift: display the original packet data instead of only the converted data.
    
    this allows viewing all bytes sent from for example sky motes, including radio/mac headers
    highlight all destination motes when clicked
    changed simulation time from int to long to support very long simulations
    supporting connections with null radio packets
    using new radio packet format
    number of logged packets in title
    fixed possible null pointer exception
    
    + some formatting
    updated size of uAODV unicasts with headers
    preferred column sizes
    print high addresses correctly
    minor update regarding packet types
    added cooja uAODV ack packet type
    added aodv rerr support
    removed java 1.6 dependency
    added simple aodv packet parsing
    added radio logger plugin
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    fixed potential memory leak: did not unregister mote observer if the mote was removed from the simulation while the skin was active
    +
    added ability to copy mote IP addresses to clipboard
    visualizer skin updates: broke out traffic visualization from the udgm radio medium skin (the stand-alone traffic skin can be used with any radio medium), added a simple background grid skin and a mote position skin
    remade led skin: showing leds left of motes
    visualizer update: enabling selecting multiple visualizer skins
    a few simple visualizer skins
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    by request: added mote type visualizer skin
    visualizer skin updates: broke out traffic visualization from the udgm radio medium skin (the stand-alone traffic skin can be used with any radio medium), added a simple background grid skin and a mote position skin
    visualizer update: enabling selecting multiple visualizer skins
    a few simple visualizer skins
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    removing unsafe MoteID interface dependencies
    visualizer skin updates: broke out traffic visualization from the udgm radio medium skin (the stand-alone traffic skin can be used with any radio medium), added a simple background grid skin and a mote position skin
    visualizer update: enabling selecting multiple visualizer skins
    a few simple visualizer skins
    application-level mote type implementing new mote type methods
    
    + radio disturber mote extending abstract application mote
    removed public static JFrame frame variable. components should instead access the top parent container via getTopParentContainer()
    added abstraction level descriptions
    renamed 'user platform' to 'project directories'
    method parameter updates
    added cooja; 'The Contiki OS Java Simulator'
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    bug fix: z-coord was not painted + some (even) positions caused errors
    visualizer skin updates: broke out traffic visualization from the udgm radio medium skin (the stand-alone traffic skin can be used with any radio medium), added a simple background grid skin and a mote position skin
    new visualizer skin: showing mote IP or Rime addresses
    visualizer update: enabling selecting multiple visualizer skins
    a few simple visualizer skins
    [cooja] Reformatted Visualizer and skins code
    [cooja] Automated code updates that do not make any functional changes
    - made loggers final
    - added some diamond interface cosmetic
    - shortened if-return statements
    - replaced size == 0 check with .isEmpty()
    [cooja] Added @Override annotations for Visualizer and skins
    [cooja] plugins/skins: Adapted DGRM and UDGM visualizer skins to show
    adequate information for multi-selections
    [cooja] plugins/Visualizer: Multi-mote selection functionality
    
    This adds multi-mote selection capabilities to the visualizer plugin:
    
    - [Ctrl + Mouse Drag]: Rectangular selection of multiple motes
    - [Ctrl + Mouse Click]: Add/Remove motes from current selection
    - Mouse Drag on any selected Mote: Move all currently selected motes
    
    Note: This changes previous behaviour of using Ctrl key.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Cooja, DGRM: Fix problems with out-of-range RSSI-Values.
     Certain values cause the DGRMVisualizerSkin to calculate color values
     that are out of range.
    Cooja: Add LQI to DGRM
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added new annonation with which Cooja components (e.g. mote plugins) can be activated
    or deactivated depending on the given argument (e.g. mote). This may for
    example be used by a mote plugin that only accepts emulated motes, and that
    consequently should be hidden in other non-emulated motes' plugin menues.
    
    The new annotation is currently only used by the MspCodeWatcher and the DGRM visualizer skin.
    simplified mote selection in visualizer skins
    towards importing testbed profiles into dgrm
    visualizer skin showing mote-specific edges (for dgrm)
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added support for attribute colors, as introduced by the VisualHints Contiki project by Joris Borms.
    
    Example usage in Contiki:
    printf("#A myattr=123;RED\n"); // color myattr attribute
    printf("#A color=RED\n"); // color mote
    
    For more examples, see the MoteAttribute documentation.
    added mote attribute visualizer skin: prints mote attributes below each mote
    fixed potential memory leak: did not unregister mote observer if the mote was removed from the simulation while the skin was active
    +
    added ability to copy mote IP addresses to clipboard
    visualizer skin updates: broke out traffic visualization from the udgm radio medium skin (the stand-alone traffic skin can be used with any radio medium), added a simple background grid skin and a mote position skin
    remade led skin: showing leds left of motes
    visualizer update: enabling selecting multiple visualizer skins
    a few simple visualizer skins
    [cooja] plugins/Visualizer: Fix: Always highlight selected motes.
    
    Motes were highlighted only by the UDGMVisualizerSkin before.
    Now highlighting moved from individual VisualizerSkin to Visualizer.
    
    A selected mote is highlighted with a blue circle
    and a semi-transparent gray overlay.
    [cooja] Reformatted Visualizer and skins code
    [cooja] plugins/skins: Adapted DGRM and UDGM visualizer skins to show
    adequate information for multi-selections
    [cooja] plugins/Visualizer: Multi-mote selection functionality
    
    This adds multi-mote selection capabilities to the visualizer plugin:
    
    - [Ctrl + Mouse Drag]: Rectangular selection of multiple motes
    - [Ctrl + Mouse Click]: Add/Remove motes from current selection
    - Mouse Drag on any selected Mote: Move all currently selected motes
    
    Note: This changes previous behaviour of using Ctrl key.
    [cooja] pluings/skings/UDGMVisualizerSkin: Replaced unclosable Box implementation of JSpinner menus by JInternalFrame based variant.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    disallowed starting plugins/visualizer skins for non-compatible motes/simulations
    simplified mote selection in visualizer skins
    changed default udgm to calculate success probabilities by distance. the previous behavior of udgm was renamed to "UDGM: Constant Loss"
    javadoc update
    new radio medium api
    paint both actual transmission range (depends on current tx power), and the maximum value as configured in the radio medium
    visualizer skin updates: broke out traffic visualization from the udgm radio medium skin (the stand-alone traffic skin can be used with any radio medium), added a simple background grid skin and a mote position skin
    + draw connection arrows
    + method for checking if radio can receive data. does not change simulation output, but allows the radio medium to better keep track of how many packets were received etc
    visualizer update: enabling selecting multiple visualizer skins
    added experimental packet counters
    bugfix: made classes public
    a few simple visualizer skins
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added support for multiple log interfaces
    fixed potential memory leak when motes are removed during a simulation
    visualizer skin updates: broke out traffic visualization from the udgm radio medium skin (the stand-alone traffic skin can be used with any radio medium), added a simple background grid skin and a mote position skin
    visualizer update: enabling selecting multiple visualizer skins
    a few simple visualizer skins
    [cooja] plugins/sinks/TrafficVisualizerSkin: Synchronized to avoid ConcurrentModificationExcpetions
    [cooja] skins/TrafficVisualizerSkin: Use alpha value to fade out arrow color an potentially allow to configure colors
    [cooja] skins/TrafficVisualizerSkin: Age handling moved to RadioConnectionArrow class which also got some lines of function documentation
    [cooja] skins/TrafficVisualizerSkin: Reduce array copy and iteration overhead
    [cooja] skins/TrafficVisualizerSkin: Removed unnecessary 'historyCopy'
    [cooja] skins/TrafficVisualizerSkin: Use LinkedList instead of ArrayList to increase add and remove performance
    [cooja] skins/TrafficVisualizerSkin: Indicate sent but unreceived messages by a red double circle around mote
    [cooja] skins/TrafficVisualizerSkin: Added @Override annotations and added some final modifiers
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    improved repaint efficiency and fixed concurrent modification bug
    removed unused code including simulation observers, making the code cleaner and more efficient
    Rewrote the traffic history visualization with blue arrows that fade
    away based on their age. Age is calculated from the simulation time
    so the fade depends on the simulation speed.
    Removed traffic counters from the main canvas.
    renamed radio method isReceiverOn() to isRadioOn()
    
    fixed bug in Msp802154Radio causing all packets from non-802154-radios to be dropped
    Changed to draw the network traffic under the motes
    minor bug fix: arraydequeue may return null entries
    new radio medium method signature + increased history size
    check that radio connection is non-null when painting radio traffic history
    visualizer skin updates: broke out traffic visualization from the udgm radio medium skin (the stand-alone traffic skin can be used with any radio medium), added a simple background grid skin and a mote position skin
    [cooja] interfaces/IPAddress: Reimplementation of the IPAddress interface
    
    New features:
    * extended interface
    * Shows all IPv6 addresses of a mote
    * Shows link local IP in visualizer
    * Reads IPs correctly from different memory layouts
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    minor fix: show rime address when no IP address was found
    fixed potential memory leak: did not unregister mote observer if the mote was removed from the simulation while the skin was active
    +
    added ability to copy mote IP addresses to clipboard
    visualizer skin updates: broke out traffic visualization from the udgm radio medium skin (the stand-alone traffic skin can be used with any radio medium), added a simple background grid skin and a mote position skin
    new visualizer skin: showing mote IP or Rime addresses
    visualizer update: enabling selecting multiple visualizer skins
    a few simple visualizer skins
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    visualizer skin updates: broke out traffic visualization from the udgm radio medium skin (the stand-alone traffic skin can be used with any radio medium), added a simple background grid skin and a mote position skin
    visualizer update: enabling selecting multiple visualizer skins
    a few simple visualizer skins
    [cooja] plugins/analyzers/PacketAnalyzer: Fixed integer assembly from bytes in getInt() method
    [cooja] plugins/analyzers: Replace StringBuffer with lightweight StringBuilder
    
    StringBuffer is a thread-safe version of StringBuilder that introduces
    unnecessary overhead.
    
    Additional replaced concatenations with .append()
    [cooja] plugins/analyzers: Indention and whitespace cleanups
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    fixed bug in analyzers that caused looping analyzers and exceptions
    fixed line endings
    added support for icmpv6 analysis / RPL
    fixed 6lowpan analyzer
    added support for hc06 decompression in radiologger / analyzer
    added initial 802.15.4 and IPHC/hc06 analyzer
    [cooja] Get rid of all those redundant IP address to String functions
    
    Commonly use the String representation functions of IPUtils.
    [cooja] plugins/analyzers: Replace StringBuffer with lightweight StringBuilder
    
    StringBuffer is a thread-safe version of StringBuilder that introduces
    unnecessary overhead.
    
    Additional replaced concatenations with .append()
    [cooja] plugins/analyzers: Added @Override annotations
    [cooja] plugins/analyzers: Indention and whitespace cleanups
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    fixed bug in analyzers that caused looping analyzers and exceptions
    added analyzer for raw IPv6
    [cooja] plugins/analyzers: printout of UDP ports and clearer layer separation
    [cooja] plugins/analyzers/ICMPv6Analyzer: Short names for ICMP types in brief output and more reader-friendly long names
    [cooja] plugins/analyzers/ICMPv6Analyzer: DTSN field is unsigned
    [cooja] plugins/analyzers: Replace StringBuffer with lightweight StringBuilder
    
    StringBuffer is a thread-safe version of StringBuilder that introduces
    unnecessary overhead.
    
    Additional replaced concatenations with .append()
    [cooja] plugins/analyzers: Added @Override annotations
    [cooja] plugins/analyzers: Indention and whitespace cleanups
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    fixed bug in analyzers that caused looping analyzers and exceptions
    added more verbose data on RPL-DIO messages
    added initial pcap exporter for 6lowpan analyzer
    Minor cleanup of the radio logger output (packet description).
    added support for icmpv6 analysis / RPL
    [cooja] PcapExporter: Use logger
    
    Removed unnused imports, replaced println and printStackTrace by logger
    [cooja] plugins/analyzers: Indention and whitespace cleanups
    Fix PCAP packet header timestamp
    Allow user configuration of RadioLogger pcap file
    Allow configuration of pcap output file
    Cooja Pcap export: Reverts PR #284 to fix #420
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Bugfix: Corrected wireshark bad FCS errors in COOJA Pcap export
    Export Pcap as LINKTYPE_IEEE802_15_4
    fixed line endings
    added initial pcap exporter for 6lowpan analyzer
    Fixed HC analyser for SAC and DAC fields
    [cooja] Get rid of all those redundant IP address to String functions
    
    Commonly use the String representation functions of IPUtils.
    [cooja] plugins/analyzers: printout of UDP ports and clearer layer separation
    [cooja] plugins/analyzers/IPHCPacketAnalyzer: More verbose output of IPHC options
    [cooja] plugins/analyzers/IPHCPacketAnalyzer: Hack for basic Hop-by-hop extension header handling
    [cooja] plugins/analyzers/IPHCPacketAnalyzer: Full port decompression for UDP header compression
    [cooja] plugins/analyzers/IPHCPacketAnalyzer: fixed ttl encoding,
    addded hlim decoding
    [cooja] plugins/analyzers: Replace StringBuffer with lightweight StringBuilder
    
    StringBuffer is a thread-safe version of StringBuilder that introduces
    unnecessary overhead.
    
    Additional replaced concatenations with .append()
    [cooja] plugins/analyzers: Added @Override annotations
    [cooja] plugins/analyzers: Indention and whitespace cleanups
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    fixed bug in analyzers that caused looping analyzers and exceptions
    fixed bug in coojas iphc packet analyzer
    Minor cleanup of the radio logger output (packet description).
    Removed the IPHC flags from the brief packet description (the flags are shown in the verbose description)
    fixed UDP uncompression
    added support for icmpv6 analysis / RPL
    fixed 6lowpan analyzer
    Minor cleanup of radio logger verbose output
    added support for hc06 decompression in radiologger / analyzer
    added initial 802.15.4 and IPHC/hc06 analyzer
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added possibility to add radio logger analyzers from cooja projects
    introduced simple MotePlugin interface, to be used by all mote plugins
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    [cooja] plugins/analyzers/FragHeadPacketAnalyzer: Printout if first or nth fragment in verbose output
    [cooja] plugins/analyzers: Added PacketAnalyzer for 6lowpan fragmentation header
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    javadoc bugs
    esb and msp430-general interfaces
    Removed duplicated statement.
    Simple test for the SHT11 driver.
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    [cooja] IEEE802154Analyzer: Use logger
    
    Replaced println and printStackTrace by logger
    [cooja] plugins/analyzers/IEEE802154Analyzer: More verbose printout including FCF information
    [cooja] plugins/analyzers: Replace StringBuffer with lightweight StringBuilder
    
    StringBuffer is a thread-safe version of StringBuilder that introduces
    unnecessary overhead.
    
    Additional replaced concatenations with .append()
    [cooja] plugins/analyzers: Added @Override annotations
    [cooja] plugins/analyzers: Indention and whitespace cleanups
    Allow user configuration of RadioLogger pcap file
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    fixed line endings
    fixed IOException bug in pcap exporter
    added initial pcap exporter for 6lowpan analyzer
    added support for icmpv6 analysis / RPL
    fixed 6lowpan analyzer
    Minor cleanup of radio logger verbose output
    added support for hc06 decompression in radiologger / analyzer
    added initial 802.15.4 and IPHC/hc06 analyzer
    [cooja] memory: Moved SectionMoteMemory to package memory
    [cooja] memory: Removed MoteMemory class including all references
    [cooja] getMemory() now returns MemoryInterface
    
    Including code adaptions based on new memory methods to keep code compilable
    [cooja] Added @Override annotations for relevant files
    Cooja backwards compatibility with simulation files that uses non-Contiki Java package names
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed getGUI() method to getCooja(), to better reflect its purpose
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    cleaned up some unnecessary methods: empty mote constructors (created from mote type), setInterfaces/setMoteType methods
    added support for mapping Cooja motes' and Contiki's address
    implemented poll-based memory monitor support
    improved code
    small optimizations and cleanups
    removed obsolete tick method
    the simulation object now handles the motetype configuration for motes; common functionality that was earlier implemented in each mote.
    
    this patch allows the simulator more freedom for hand-picking mote class loaders
    
    + some debug output in experimental ImportAppMoteType
    extending abstract wakeup mote
    removing unsafe MoteID interface dependencies
    implements mandatory getID() method
    contiki mote schedules their next wakeup based on Contiki etimers + removed notion of active vs LPM state (optimization no longer needed)
    method names changed
    make sure node interfaces are initialized when generating toString()
    changed simulation time from int to long to support very long simulations
    passive/active interfaces distinction removed.
    tick method returns true if mote can be ticked again immediately
    handling radio when nodes die
    allow mote to go to sleep due to etimers IFF contiki system was ticked
    minor changes due to deletion of static variables
    changed mote state to enum type instead of int
    load simulation bug fix: loading a simulation and removing interfaces caused null-pointer exception
    added cooja; 'The Contiki OS Java Simulator'
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    simple class representing a scanned Contiki process (process name and source file)
    initialize from int[] (mspsim standard)
    cc24240 packet converter (currently no actual conversion is performed due to already stripped cc2420 output)
    default radio packet implementation
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Output sha1sums of files used for simulation on fail
    This helps reproducing results from the CI
    improved debugging output at referenceVar errors
    [cooja] Reintroduced offset handling for absolute address space
    [cooja] ContikiMoteType: Fixed Command parsing
    
    - Use `nm -aP` for parsing both addres and size information
    - Use symbol section information for parsing
    [cooja] ContikiMoteType: Fix mapfile variable size parsing
    
    For some longer variable names the lines are wrapped after the name
    to display size information vertical aligned.
    [cooja] ContikiMoteType: Moved further parse functions to SectionParser classes
    [cooja] Removed offset from SectionMoteMemory to make it more generic
    [cooja] ContikiMoteType: Introduce abstract SectionParser
    
    Should encapsulate and decrease both redundancy and code duplication
    [cooja] memory: SectionMoteMemory implementation of MemoryInterface functions
    as forwarding to encapsulated memory sections
    
    Requires to make use of Symbol class for cooja motes, too
    [cooja] ContikiMoteType: Some renames and function reordering
    [cooja] ContikiMoteType: Non-functional indention and code style updates
    [cooja] memory: Moved SectionMoteMemory to package memory
    [cooja] memory: Removed AddressMemory class including all references
    [cooja] Added @Override annotations for relevant files
    Cooja backwards compatibility with simulation files that uses non-Contiki Java package names
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed getGUI() method to getCooja(), to better reflect its purpose
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    reverted previous plugin name changes, instead build displayed names when menu is created
    Updated menu item name to indicate that a window is opened when selecting it.
    General cleanup and fixes of texts and labels
    cleaned up more mote type visualizer code
    Added simulation as argument to moteType.getConfigXML() instead of each MoteType storing a reference to the simulation.
    new experimental feature: possibility to change mote types when loading a simulation
    
    made compile dialogs only select mote interfaces specified in the loaded configuration
    improved debugging output
    added support for readonly memory sections
    updated to use new SectionMoteMemory with address space offset
    code cleanup
    reimplemented initial support for referencing contiki source files in cooja projects
    minor fix: section size was printed in hex, not decimal
    do not generate source + prepare environment method was updated
    removed contiki motes' communication stack configuration; the network stack instead depends on compiler flags/contiki-conf.h
    temporarily disabled communication stacks on cooja platform, removed radio sensor
    javadoc update
    added support for a third optional memory section (currently only used on mac os x) +
    added section address parsing debugging output +
    
    removed unused code and + increased code readability
    generate random mote type identifiers
    removed old uip/uaodv comm stack, added uipv6
    removing contiki log interface, instead only using the serial port interface
    bug fix: set simulation at configure
    + support for config file relative paths when saving simulations
    added simulation config backwards compatibility for contiki mote types: may not work for configurations with several compiled sources
    saving contiki relative paths
    rewrote contiki mote type to be more integrated with the contiki build system.
    
    example: instead of selecting and scanning for contiki processes, autostart processes are determined as on other platforms: via AUTOSTART() macro in the main contiki application
    
    not all functionality has been reimplemented yet
    automatically cleaning temporary files for every non-gui test: takes longer but allows for test-specific compiler flags
    towards adding support for 64-bit architectures: registering relative memory addresses with contiki instead of fetching absolute addresses to java
    saving portable paths (no '\'s)
    added help method for generating unique mote type identifiers
    removed public static JFrame frame variable. components should instead access the top parent container via getTopParentContainer()
    set rime communication stack default
    added abstraction level descriptions
    more error output at failed compilation
    make sure uip uaodv uses uaodv.c
    changed address parsing using nm to more generic: any command may be used
    parsing addresses differently depending on exttools config
    using external tools regular expressions
    uip uaodv using crc
    using nullmac for cooja rime radio
    added uIP over uAODV radio driver support for COOJA
    
    the radio driver assumes uAODV already has a route to the destination, hence the application is responsible for fetching routes and buffering delayed packet data
    added support for several contiki comm stacks (uip + rime)
    added retry option at failed simulation reload
    forwarding compilation output with exception
    throwing exceptions when trying to access the library initially
    added additional error handling when loading and reloading simulations
    removed old libraries (created on demand)
    
    + added simple error handling when creating mote types
    renamed 'user platform' to 'project directories'
    minor changes due to deletion of static variables.
    
    added support for new contiki mote type information: compilation files
    added external tool objdump for alternative way to parse out section addresses and sizes (not used by contiki mote type yet)
    
    + some documentation
    bug fix: no nm arguments (tested on linux)
    remade way to read variable addresses (still used old .map-file approach, but added nm-approach for testing)
    
    not tested on linux platforms yet
    removed old unused makefile-quickstart code
    +
    tidied up some code
    performance improvement when fetching memory (throwing pointer to array instead of creating new one)
    added cooja; 'The Contiki OS Java Simulator'
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    renamed strange last name to start with O instead of 
    passive/active interfaces distinction removed.
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    removing obsolete method previously used for estimating contiki's energy consumption.
    update ip interface to supports ipv6 addresses.
    
    also disabled writing IP addresses from inside COOJA, since the these should rather be determined by Contiki
    renamed strange last name to start with O instead of 
    new energy method, not fully implemented yet
    rewriting mote interfaces for faster simulation execution.
    
    ipv4 interface
    minor changes due to new setConfig method parameter
    added cooja; 'The Contiki OS Java Simulator'
    Buttons: Some minor cleanups
    
    Removed imports not required anymore and made some class members final
    Buttons: Added missing @Override annotations
    Buttons: Move implementation of button routines to Button class
    
    The implementation of clickButton(), pressButton(), and releaseButton()
    can be shared accross the several node-dependent implementations as
    they use the node-dependent doPressButton() doReleaseButton() routines.
    Button: Add doPressButton() and doReleaseButton() to Button class
    
    As every Button has a node-specific implementation part, this should be
    the minimal interface to the backend node emulator for pressing and
    releasing a button.
    Button: None of the buttons will saves its state
    
    Saving a buttons state in simulation file is not required as its state
    is much too volatile.
    Button: Move common interface visualization to Button class
    
    The implementation of a simple JPanel with a JButton was only code
    duplication accross the several button implementations.
    [cooja] memory: Removed AddressMemory class including all references
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    removing obsolete method previously used for estimating contiki's energy consumption.
    bug fix: schedule button events from simulation thread
    new event scheduling api
    event based mote interfaces: less dependencies on tick polling + using new mote time events
    renamed strange last name to start with O instead of 
    removed button debug output
    changed simulation time from int to long to support very long simulations
    renamed schedule event method
    new energy method, not fully implemented yet
    rewriting mote interfaces for faster simulation execution.
    
    button interface
    always consuming button events
    
    (bug fix: mote falls asleep during fast button clicks)
    minor changes due to new setConfig method parameter
    no need to send button up event to core (not handled anymore)
    making sure that core actually handles button press event before releasing button again (possible bug during busy-waits)
    changed mote state to enum type instead of int
    added cooja; 'The Contiki OS Java Simulator'
    [cooja] memory: Moved SectionMoteMemory to package memory
    [cooja] memory: Removed AddressMemory class including all references
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    removing obsolete method previously used for estimating contiki's energy consumption.
    Updated scheduling for user triggered events
    new event scheduling api
    event based mote interfaces: less dependencies on tick polling + using new mote time events
    renamed strange last name to start with O instead of 
    new energy method, not fully implemented yet
    rewriting mote interfaces for faster simulation execution.
    
    PIR interface
    minor changes due to new setConfig method parameter
    changed mote state to enum type instead of int
    added cooja; 'The Contiki OS Java Simulator'
    [cooja] memory: Removed AddressMemory class including all references
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Increased the default Cooja CFS size to 4000 bytes so that examples work (found by Roger Larsson)
    decreased default cooja CFS size
    event based mote interfaces: less dependencies on tick polling + using new mote time events
    renamed strange last name to start with O instead of 
    changed simulation time from int to long to support very long simulations
    renamed schedule event method
    new energy method, not fully implemented yet
    rewriting mote interfaces for faster simulation execution.
    
    cfs interface
    minor changes due to new setConfig method parameter
    outsourced the file dialog part to method
    added possibility to upload binary files into simulated cfs (for example for easier eeprom simulations)
    added Contiki Filesystem (CFS) support in COOJA: java interface
    fixed bad spelling
    added beeper interface panel
    added cooja; 'The Contiki OS Java Simulator'
    [cooja] memory: Moved SectionMoteMemory to package memory
    [cooja] memory: Removed AddressMemory class including all references
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    removed unnecessary warning
    removing obsolete method previously used for estimating contiki's energy consumption.
    removed mote state references
    bugfix: if timer expired but was not yet handled due to long running operations (such as radio transmits), warn and reschedule timer handling later
    warn if Contiki has an event timer scheduled to the current time, which has for some reason not been executed
    event based mote interfaces: less dependencies on tick polling + using new mote time events
    renamed strange last name to start with O instead of 
    changed simulation time from int to long to support very long simulations
    implemented getDrift method
    new energy method, not fully implemented yet
    rewriting mote interfaces for faster simulation execution.
    
    clock interface
    added method for setting timedrift
    minor changes due to new setConfig method parameter
    added cooja; 'The Contiki OS Java Simulator'
    [cooja] memory: Removed AddressMemory class including all references
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    guard amount of serial data being written to simulated contiki nodes
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    javadoc update
    removed obsolete energy consumption references + updated doc
    new event scheduling api
    schedule wakeup after new data has been written
    event based mote interfaces: less dependencies on tick polling + using new mote time events
    implemented writeArray() and writeByte() for Contiki serial interface
    removed unused variables + writing serial data in timeevent
    removing contiki log interface, instead only using the serial port interface
    new energy method, not fully implemented yet
    rewriting mote interfaces for faster simulation execution.
    
    rs232 interface
    minor changes due to new setConfig method parameter
    changed mote state to enum type instead of int
    added cooja; 'The Contiki OS Java Simulator'
    [cooja] memory: Removed AddressMemory class including all references
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    removing obsolete method previously used for estimating contiki's energy consumption.
    renamed strange last name to start with O instead of 
    new energy method, not fully implemented yet
    rewriting mote interfaces for faster simulation execution.
    
    LEDs interface
    added sky led interface (+ updated esb+contiki mote led interfaces)
    darkened colors of off leds
    minor changes due to new setConfig method parameter
    added cooja; 'The Contiki OS Java Simulator'
    [cooja] memory: Removed AddressMemory class including all references
    Added EEPROM support for Cooja with a rudimentary hexdump -C like viewer in the mote interface view
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Increased the default Cooja CFS size to 4000 bytes so that examples work (found by Roger Larsson)
    decreased default cooja CFS size
    event based mote interfaces: less dependencies on tick polling + using new mote time events
    renamed strange last name to start with O instead of 
    changed simulation time from int to long to support very long simulations
    renamed schedule event method
    new energy method, not fully implemented yet
    rewriting mote interfaces for faster simulation execution.
    
    cfs interface
    minor changes due to new setConfig method parameter
    outsourced the file dialog part to method
    added possibility to upload binary files into simulated cfs (for example for easier eeprom simulations)
    added Contiki Filesystem (CFS) support in COOJA: java interface
    fixed bad spelling
    added beeper interface panel
    added cooja; 'The Contiki OS Java Simulator'
    [cooja] memory: Moved SectionMoteMemory to package memory
    [cooja] memory: Removed AddressMemory class including all references
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    removing obsolete method previously used for estimating contiki's energy consumption.
    event based mote interfaces: less dependencies on tick polling + using new mote time events
    renamed strange last name to start with O instead of 
    changed simulation time from int to long to support very long simulations
    renamed schedule event method
    new energy method, not fully implemented yet
    rewriting mote interfaces for faster simulation execution.
    
    beeper interface
    minor changes due to new setConfig method parameter
    fixed bad spelling
    added beeper interface panel
    added cooja; 'The Contiki OS Java Simulator'
    [cooja] memory: Moved SectionMoteMemory to package memory
    [cooja] memory: Removed AddressMemory class including all references
    Fix documentation
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Add access to LQI and RSSI to Contiki motes
    store current radio transmission bitrate in .csc
    
    trigger radio event when device radio channel is changed
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    renamed radio method isReceiverOn() to isRadioOn()
    
    fixed bug in Msp802154Radio causing all packets from non-802154-radios to be dropped
    moved radio interface visualizer code to shared abstract radio
    updated radio driver, simplified code
    removing obsolete method previously used for estimating contiki's energy consumption + removed encoding overhead and header assumption when calculating transmission durations
    new event scheduling api
    removed mote state references
    event based mote interfaces: less dependencies on tick polling + using new mote time events
    + method for checking if radio can receive data. does not change simulation output, but allows the radio medium to better keep track of how many packets were received etc
    renamed strange last name to start with O instead of 
    added toString method
    changed simulation time from int to long to support very long simulations
    minor bug fix: storing observer at correct panel
    new energy method, not fully implemented yet
    rewriting mote interfaces for faster simulation execution.
    
    radio interface
    updated interface visualizer and changed default output power to 0 dBm
    using new radio packet format
    added output power indicator max value
    added method for checking if radio is on/off. the method is currently only used by contikradio:s.
    
    changed UDGM coloring:
    dead/non-existing radios are black.
    turned off radios are gray.
    added configurable transmission rate (default 19.2kbps)
    added getMote() method to all radios
    added check that outgoing packet was not discarded from simulator
    changed duration
    updated duration for 19200bps transmissions
    added some fault handling
    radio-related changes:
    radios can belong to different abstraction levels for example byte of packet radios.
    
    => lots of changes in surrounding files
    minor changes due to new setConfig method parameter
    added experimental radio channel support
    added signal strength information
    added signal strength and output power (non-core) functions
    
    + bug fix
    no reception possible if radio already busy
    added possibility to interfere with radio receptions "in the future" - reduces code complexity for radio mediums
    added transmission duration approximation
    (manchester encoding, uart-extra-bit, 19.2kbps)
    new radio driver (allows for transmissions longer than one tick)
    changed mote state to enum type instead of int
    added cooja; 'The Contiki OS Java Simulator'
    [cooja] memory: Removed AddressMemory class including all references
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    set cooja mote random seed depending on simulation random seed
    removing obsolete method previously used for estimating contiki's energy consumption.
    renamed strange last name to start with O instead of 
    new energy method, not fully implemented yet
    rewriting mote interfaces for faster simulation execution.
    
    node id interface
    bug fix:
    mote id reported changed every tick
    minor changes due to new setConfig method parameter
    added cooja; 'The Contiki OS Java Simulator'
    [cooja] memory: Moved SectionMoteMemory to package memory
    [cooja] memory: Removed AddressMemory class including all references
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    removing obsolete method previously used for estimating contiki's energy consumption.
    Updated scheduling for user triggered events
    new event scheduling api
    event based mote interfaces: less dependencies on tick polling + using new mote time events
    renamed strange last name to start with O instead of 
    new energy method, not fully implemented yet
    rewriting mote interfaces for faster simulation execution.
    
    vibration sensor interface
    minor changes due to new setConfig method parameter
    changed mote state to enum type instead of int
    added cooja; 'The Contiki OS Java Simulator'
    simplified the external tools configuration with a single common file that is always loaded
    General cleanup and fixes of texts and labels
    added powertracker plugin as default cooja plugin. the powertracker plugin was previously available via contiki projects.
    added missing objcopy external paths config
    Enabled the Collect-View plugin by default in COOJA
    set serial socket project to default cooja project
    removed contiki cooja template source, updated configurations
    replaced relative path with portable path
    added apps/avrora as default project for all platforms
    bugfix: regexps were too restrictive to correctly parse all Contiki processes
    
    thanks to Fetahi Wuhib for pointing this out
    compiler should not replace printfs with puts
    updated linux external tools conf
    set mspsim project default
    removed references to unused mantis files
    fixed nm command for linux platform
    enabled config of entire ar command, not only arguments
    changed address parsing using nm to more generic: any command may be used
    updated the default linux/win32 compiler/linker config
    setting nm parsing default
    added regular expressions for parsing map files and nm output
    removed old cfs process from default config
    removed comm stack processes from standard autostart processes
    renamed 'user platform' to 'project directories'
    added support for dynamic corecomms (generated and compiled on demand)
    renamed contiki code template
    updated arm -> mrm standard user platform
    added new more advanced ray tracing based radio medium: Advanced Radio Medium (ARM)
    
    * still not entirely integrated in the rest of the system
    * needs testing
    added external config for mantis code template
    added external tool objdump for alternative way to parse out section addresses and sizes (not used by contiki mote type yet)
    added nm default configuration
    added Contiki Filesystem (CFS) support in COOJA: added service registration process
    removed ether-process (new radio driver)
    added cooja; 'The Contiki OS Java Simulator'
    simplified the external tools configuration with a single common file that is always loaded
    added powertracker plugin as default cooja plugin. the powertracker plugin was previously available via contiki projects.
    added missing objcopy external paths config
    Enabled the Collect-View plugin by default in COOJA
    set serial socket project to default cooja project
    removed contiki cooja template source, updated configurations
    replaced relative path with portable path
    Added FreeBSD support.
    
    Made the Sky mote type use PATH_MAKE for the build procedure.
    added apps/avrora as default project for all platforms
    bugfix: regexps were too restrictive to correctly parse all Contiki processes
    
    thanks to Fetahi Wuhib for pointing this out
    compiler should not replace printfs with puts
    updated linux external tools conf
    set mspsim project default
    removed references to unused mantis files
    fixed nm command for linux platform
    enabled config of entire ar command, not only arguments
    changed address parsing using nm to more generic: any command may be used
    updated the default linux/win32 compiler/linker config
    setting nm parsing default
    added regular expressions for parsing map files and nm output
    removed old cfs process from default config
    removed comm stack processes from standard autostart processes
    renamed 'user platform' to 'project directories'
    added support for dynamic corecomms (generated and compiled on demand)
    renamed contiki code template
    updated arm -> mrm standard user platform
    added new more advanced ray tracing based radio medium: Advanced Radio Medium (ARM)
    
    * still not entirely integrated in the rest of the system
    * needs testing
    added external config for mantis code template
    added external tool objdump for alternative way to parse out section addresses and sizes (not used by contiki mote type yet)
    added nm default configuration
    added Contiki Filesystem (CFS) support in COOJA: added service registration process
    removed ether-process (new radio driver)
    added cooja; 'The Contiki OS Java Simulator'
    hack to support symbol size parsing under cygwin
    section address parsing configuration for windows
    simplified the external tools configuration with a single common file that is always loaded
    default compiler set to mingw32-gcc (verified to work on version 4.5.2/4.6.2), removed obsolete -mno-cygwin flags when compiling under cygwin
    
    added default visualizer skins
    added powertracker plugin as default cooja plugin. the powertracker plugin was previously available via contiki projects.
    added objcopy external tools configuration
    changed nm command to sort numerically, and changed regexpressions to accept output from newer gcc versions
    added more debugging info under help menu
    Enabled the Collect-View plugin by default in COOJA
    set serial socket project to default cooja project
    removed contiki cooja template source, updated configurations
    replaced relative path with portable path
    added avrora-micaz node emulation
    bugfix: regexps were too restrictive to correctly parse all Contiki processes
    
    thanks to Fetahi Wuhib for pointing this out
    compiler should not replace printfs with puts
    set mspsim project default
    removed references to unused mantis files
    enabled config of entire ar command, not only arguments
    changed address parsing using nm to more generic: any command may be used
    updated the default linux/win32 compiler/linker config
    setting nm parsing default
    added regular expressions for parsing map files and nm output
    added java_home reference
    removed old cfs process from default config
    removed comm stack processes from standard autostart processes
    renamed 'user platform' to 'project directories'
    added support for dynamic corecomms (generated and compiled on demand)
    renamed contiki code template
    updated arm -> mrm standard user platform
    added new more advanced ray tracing based radio medium: Advanced Radio Medium (ARM)
    
    * still not entirely integrated in the rest of the system
    * needs testing
    added external config for mantis code template
    added external tool objdump for alternative way to parse out section addresses and sizes (not used by contiki mote type yet)
    added nm default configuration
    added Contiki Filesystem (CFS) support in COOJA: added service registration process
    removed ether-process (new radio driver)
    added cooja; 'The Contiki OS Java Simulator'
    [cooja] ContikiMoteType: Fixed Command parsing
    
    - Use `nm -aP` for parsing both addres and size information
    - Use symbol section information for parsing
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Updated file permissions
    verify that visualizer skin is compatible with the current simulation before starting it,
    set udgm/dgrm/mrm radio medium skins to be started as default
    simplified the external tools configuration with a single common file that is always loaded
    General cleanup and fixes of texts and labels
    added powertracker plugin as default cooja plugin. the powertracker plugin was previously available via contiki projects.
    added missing objcopy external paths config
    Enabled the Collect-View plugin by default in COOJA
    set serial socket project to default cooja project
    removed contiki cooja template source, updated configurations
    replaced relative path with portable path
    added apps/avrora as default project for all platforms
    bugfix: regexps were too restrictive to correctly parse all Contiki processes
    
    thanks to Fetahi Wuhib for pointing this out
    compiler should not replace printfs with puts
    updated linux external tools conf
    set mspsim project default
    removed references to unused mantis files
    fixed nm command for linux platform
    enabled config of entire ar command, not only arguments
    changed address parsing using nm to more generic: any command may be used
    updated the default linux/win32 compiler/linker config
    setting nm parsing default
    added regular expressions for parsing map files and nm output
    removed old cfs process from default config
    removed comm stack processes from standard autostart processes
    renamed 'user platform' to 'project directories'
    added support for dynamic corecomms (generated and compiled on demand)
    renamed contiki code template
    updated arm -> mrm standard user platform
    added new more advanced ray tracing based radio medium: Advanced Radio Medium (ARM)
    
    * still not entirely integrated in the rest of the system
    * needs testing
    added external config for mantis code template
    added external tool objdump for alternative way to parse out section addresses and sizes (not used by contiki mote type yet)
    added nm default configuration
    added Contiki Filesystem (CFS) support in COOJA: added service registration process
    removed ether-process (new radio driver)
    added cooja; 'The Contiki OS Java Simulator'
    Added EEPROM support for Cooja with a rudimentary hexdump -C like viewer in the mote interface view
    Cooja: allow setting RSSI while sending and silence
    
    It is now possible to set the RSSI while the radio is sending or when
    no radiodata is received. This is now supported by all radiomediums
    exept MRM. This also includes a GUI to configure the values.
    start DGRMVisualizerSkin in cooja_default.config now
    instead of starting in DirectedGraphMedium
    start DGRM plugin with cooja_default.config
    start the DGRMconfigurator within the cooja_default.config instead of starting in DirectedGraphMedium.java
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    removed unused ipdistributor code: was previously used to assign IP addresses to simulated motes,
    a decision better made by Contiki
    new cooja plugin for monitoring memory areas, similar to the log listener.
    changed default udgm to calculate success probabilities by distance. the previous behavior of udgm was renamed to "UDGM: Constant Loss"
    added notes plugin, useful for storing simulation notes in the config
    added mote attributes to various types of motes
    removed unused configurations and increased default contiki mote transmission bitrate to 250kbit/s
    added new application mote type that loads a configurable application mote java class.
    the new mote type makes it easier to create and load new application-level motes
    setting timeline plugin as default
    added rime address interface as default for contikii mote types
    config update: visualizers
    removing contiki log interface, instead only using the serial port interface
    added mote relation interface to default contiki mote config
    added new radio medium: directed graph radio medium (short: dgrm).
    
    this radio medium will likely later be used to implement other more complex radio mediums such as udgm and mrm.
    
    currently the user interface (dgrm config plugin) for defining radio links is very limited.
    
    experimental: the new radio medium supports propagation delays, configurable via the plugin.
    added manual positioner to default config
    removed example mote type implementation from default configuration
    added script runner plugin
    
    javascript operates on mote log messages
    removed references to unused mantis files
    removed trailing space (causes a warning at cooja startup)
    moved application mote types to be loaded first
    added configurable transmission rate (default 19.2kbps)
    added radio logger plugin
    removed reference to non-working mantis mote
    updated plugin and radio medium names
    added disturber mote:
    
    mote that periodically transmits packet that interferes with surrounding radio traffic
    added test files for future support of mantis os.
    
    not working yet due to threading vs jni problems
    added Contiki Filesystem (CFS) support in COOJA:
    updated default cooja configuration.
    
    OBS energy consumption not measured yet
    added cooja; 'The Contiki OS Java Simulator'
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    updated contiki mote compiler tests to again reflect contiki-cooja-main.c and the updated ContikiMoteType
    fixed line endings
    fixed line endings
    test template used by configuration wizard
    towards adding support for 64-bit architectures: registering relative memory addresses with contiki instead of fetching absolute addresses to java
    updated tests - references to actual COOJA code
    outputting already increased counters
    added cooja; 'The Contiki OS Java Simulator'
    A set of simple example programs for the ESB platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    fixed line endings
    cooja applet files
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    removed unused ipdistributor code: was previously used to assign IP addresses to simulated motes,
    a decision better made by Contiki
    fixed line endings
    changed default udgm to calculate success probabilities by distance. the previous behavior of udgm was renamed to "UDGM: Constant Loss"
    config update: visualizers
    added new radio medium: directed graph radio medium (short: dgrm).
    
    this radio medium will likely later be used to implement other more complex radio mediums such as udgm and mrm.
    
    currently the user interface (dgrm config plugin) for defining radio links is very limited.
    
    experimental: the new radio medium supports propagation delays, configurable via the plugin.
    added manual positioner to default config
    removed example mote type implementation from default configuration
    applet config
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    towards adding support for 64-bit architectures: registering relative memory addresses with contiki instead of fetching absolute addresses to java
    added support for dynamic corecomms (generated and compiled on demand)
    performance improvement when fetching memory (throwing pointer to array instead of creating new one)
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    simplified the external tools configuration with a single common file that is always loaded
    added powertracker plugin as default cooja plugin. the powertracker plugin was previously available via contiki projects.
    added missing objcopy external paths config
    fixed line endings
    Enabled the Collect-View plugin by default in COOJA
    set serial socket project to default cooja project
    removed contiki cooja template source, updated configurations
    replaced relative path with portable path
    added apps/avrora as default project for all platforms
    added cooja support for 64-bit 64-bit architectures:
    * compiling for PIC
    
    contributed by David Gustafsson and Jesper Karlsson
    bugfix: regexps were too restrictive to correctly parse all Contiki processes
    
    thanks to Fetahi Wuhib for pointing this out
    compiler should not replace printfs with puts
    updated linux external tools conf
    set mspsim project default
    removed references to unused mantis files
    fixed nm command for linux platform
    enabled config of entire ar command, not only arguments
    changed address parsing using nm to more generic: any command may be used
    updated the default linux/win32 compiler/linker config
    setting nm parsing default
    added regular expressions for parsing map files and nm output
    removed old cfs process from default config
    removed comm stack processes from standard autostart processes
    renamed 'user platform' to 'project directories'
    added support for dynamic corecomms (generated and compiled on demand)
    renamed contiki code template
    updated arm -> mrm standard user platform
    added new more advanced ray tracing based radio medium: Advanced Radio Medium (ARM)
    
    * still not entirely integrated in the rest of the system
    * needs testing
    added external config for mantis code template
    added external tool objdump for alternative way to parse out section addresses and sizes (not used by contiki mote type yet)
    added nm default configuration
    added Contiki Filesystem (CFS) support in COOJA: added service registration process
    removed ether-process (new radio driver)
    added cooja; 'The Contiki OS Java Simulator'
    fixed line endings
    cooja applet files
    [cooja] logging: default logging level should not be highest
    fixed line endings
    added cooja; 'The Contiki OS Java Simulator'
    removed obsolete exit cooja keyboard shortcut from quick help
    extracted quick help interface to a separate file, moved plugin-specific quick help from quickhelp.txt to the plugins themselves
    Updated control panel quickhelp
    fixed line endings
    quickhelp for mspcli
    Added option to move motes in Visualizer without confirm dialog by dragging motes with ALT button pressed
    Changed separator for concatenated mote id and log message for filtering to a space character.
    Added option to filter on concatenated mote id and log message + removed compiler warnings
    added visualizer quick help
    +quickhelp for control panel
    quick help for log listener and time line pluging + keyboard shortcuts
    simplified the external tools configuration with a single common file that is always loaded
    added powertracker plugin as default cooja plugin. the powertracker plugin was previously available via contiki projects.
    added missing objcopy external paths config
    fixed line endings
    Enabled the Collect-View plugin by default in COOJA
    set serial socket project to default cooja project
    removed contiki cooja template source, updated configurations
    replaced relative path with portable path
    patch for avoiding snprintf()-related compiler error
    updated default mac os x compiler configuration
    added apps/avrora as default project for all platforms
    bugfix: regexps were too restrictive to correctly parse all Contiki processes
    
    thanks to Fetahi Wuhib for pointing this out
    set mspsim project default
    removed references to unused mantis files
    updated default mac config (fixed regexps)
    experimental mac os x support:
    default os configuration
    enabled config of entire ar command, not only arguments
    changed address parsing using nm to more generic: any command may be used
    updated the default linux/win32 compiler/linker config
    setting nm parsing default
    added regular expressions for parsing map files and nm output
    removed old cfs process from default config
    removed comm stack processes from standard autostart processes
    renamed 'user platform' to 'project directories'
    added support for dynamic corecomms (generated and compiled on demand)
    renamed contiki code template
    updated arm -> mrm standard user platform
    added new more advanced ray tracing based radio medium: Advanced Radio Medium (ARM)
    
    * still not entirely integrated in the rest of the system
    * needs testing
    added external config for mantis code template
    added external tool objdump for alternative way to parse out section addresses and sizes (not used by contiki mote type yet)
    added nm default configuration
    added Contiki Filesystem (CFS) support in COOJA: added service registration process
    removed ether-process (new radio driver)
    added cooja; 'The Contiki OS Java Simulator'
    fixed line endings
    two simple example scripts
    fixed line endings
    added two example scripts
    two simple example scripts
    fixed line endings
    two simple example scripts
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed getGUI() method to getCooja(), to better reflect its purpose
    example script demonstrating how to interface powertracker plugin
    added simple example demonstrating user-defined timeout function
    fixed line endings
    added script example, demonstrating how to interact with surrounding cooja plugins
    fixed line endings
    added two example scripts
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    added powertracker plugin as default cooja plugin. the powertracker plugin was previously available via contiki projects.
    Fix building of powertracker
    added powertracker plugin as default cooja plugin. the powertracker plugin was previously available via contiki projects.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    added methods to more easily extract runtime statistics from simulation scripts
    reverted previous plugin name changes, instead build displayed names when menu is created
    Updated menu item name to indicate that a window is opened.
    renamed radio method isReceiverOn() to isRadioOn()
    
    fixed bug in Msp802154Radio causing all packets from non-802154-radios to be dropped
    added powertracker plugin as default cooja plugin. the powertracker plugin was previously available via contiki projects.
    [cooja/serialsocket] Moved to package org.contikios.cooja.serialsocket
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    new project: adds two new plugins for forwarding data between a socket and a simulated serial port
    Do not include ant runtime in classpath (avoids compilation warning with Ant 1.8+)
    new project: adds two new plugins for forwarding data between a socket and a simulated serial port
    moved obsolete cooja projects to backyard
    create lib directory when building
    fixed ant targets causing jar files to have duplicate class files
    enabled debug information (source lines in stack traces)
    test implementation for forwarding serial data on per-node-basis to external applications
    
    (useful when connecting serialport-bound application used to communicating with real nodes)
    new name for arm:
    multi-path ray-tracer radio medium (mrm)
    [cooja/serialsocket] Write serial data only on simulation thread
    [cooja/serialsocket] SeriaSocketServer: Moved Observer and Handler to inner classes and let handler thread join before notifying server terminated
    [cooja/serialsocket] Support for xml import/export
    [cooja/serialsocket] Allow to stop server / disconnect client
    [cooja/serialsocket] SerialSocketServer: Allow only a single client,
    reject further
    [cooja/serialsocket] SerialSocketServer: Fixed and improved server
    implementation. Added visual feedback for new user interface.
    [cooja/serialsocket] SerialSocketServer: Applied some renames
    [cooja/serialsocket] SerialSocketServer: New visual appearance with
    status bar, port setting, and start button
    [cooja/serialsocket] Added @Override annotations
    [cooja/serialsocket] Moved to package org.contikios.cooja.serialsocket
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    repaint labels periodically instead of every time data is sent over the serial connection
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    plugin is updated to support non-visualized simulations
    removed debugging output
    new project: adds two new plugins for forwarding data between a socket and a simulated serial port
     [cooja/serialsocket] SeriaSocketClient: Fixed position of pack() call
    [cooja/serialsocket] Write serial data only on simulation thread
    [cooja/serialsocket] Support for xml import/export
    [cooja/serialsocket] Allow to stop server / disconnect client
    [cooja/serialsocket] SerialSocketClient: ClientListener interface decouples client implementation
    and visualization
    [cooja/serialsocket] SerialSocketClient: Status bar and improved
    action/event handling and visualization
    [cooja/serialsocket] SerialSocketClient: New visual appearance with
    input for server hostname and address including connect button
    [cooja/serialsocket] Added @Override annotations
    [cooja/serialsocket] Moved to package org.contikios.cooja.serialsocket
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    new project: adds two new plugins for forwarding data between a socket and a simulated serial port
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    fixed line endings
    native IP gateway mote plugin: enables IP communication with simulated networks, such as with ping or telnet
    Do not include ant runtime in classpath (avoids compilation warning with Ant 1.8+)
    prerequisites download info
    create lib directory when building
    native IP gateway mote plugin: enables IP communication with simulated networks, such as with ping or telnet
    fixed ant targets causing jar files to have duplicate class files
    enabled debug information (source lines in stack traces)
    test implementation for forwarding serial data on per-node-basis to external applications
    
    (useful when connecting serialport-bound application used to communicating with real nodes)
    new name for arm:
    multi-path ray-tracer radio medium (mrm)
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added support for mote interface requirements in SupportedArguments annotation
    
    NativeIPGateway plugin now requires an IP address mote interface
    using new MotePlugin interface
    do not show dialog unless COOJA is visualized
    on non-windows platforms: manually entering simulated gateway arp address
    
    + minor updates: introduced network interface wrapper class , extending vis plugin, showing number of bytes forwarded between native and simulated network (not just number of packets)
    increased slip data buffer size
    fixed executable path
    show progress dialog during minimal-net compilation
    more debugging output
    added shutdown hook for make sure the minimal-net application is killed when cooja exits without shutting down all plugins
    improved debug output
    gateway plugin does not extend visplugin; it can be used when cooja is not visualized (such as during tests)
    added support for linux:
    
    * starting external Contiki process to setup tun interface (instead of JNI solution)
    
    * sending simulation-generated packets to loopback network device  (need to activate forwarding and disable rp filter)
    native IP gateway mote plugin: enables IP communication with simulated networks, such as with ping or telnet
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Enabled the Collect-View plugin by default in COOJA
    Simple plugin to connect the CollectView demo to COOJA
    Enabled the Collect-View plugin by default in COOJA
    Updated to the new collect-view path
    Simple plugin to connect the CollectView demo to COOJA
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    extracted quick help interface to a separate file, moved plugin-specific quick help from quickhelp.txt to the plugins themselves
    Enabled the Collect-View plugin by default in COOJA
    Updated path to collect-view tool
    Added warning if the plugin fails to start the CollectView application
    Simple plugin to connect the CollectView demo to COOJA
    Updated file permissions
    added cooja mote type using mspsim's msp430x platforms (ti's exp5438)
    Updated file permissions
    added cooja mote type using mspsim's msp430x platforms (ti's exp5438)
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    [cooja/mspsim] a single sky mote in cooja.config should be sufficient
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    added a set of new mspsim-based mote types using CC1120, CC1101 and the Enc28j60 ethernet chip
    
    minor changes: removed some obsolete stack monitoring code, improved mspsim-cooja window handler
    integration
    Added Z1 platform
    Added Wismote platform
    activated exp5438 platform in cooja
    fixed line endings
    added build dependcy jipv6.jar
    including the coffee manager JAR in build system and project directory
    refactored MSPMote setup + added plugin to access MSPSim CLI
    activated sky nodes, no cross level converter exists yet
    restructuring mspsim/cooja files (about to add tmotesky support)
    updated project dir config file
    experimental code: using MSPSim for emulating msp430 (esb) motes
    Decent error if mspsim cant be built
    Added mspsim as a submodule instead of as a binary mspsim.jar file
    added cooja mote type using mspsim's msp430x platforms (ti's exp5438)
    Do not include ant runtime in classpath (avoids compilation warning with Ant 1.8+)
    jipv6 jar path fix
    added build dependcy jipv6.jar
    including the coffee manager JAR in build system and project directory
    changed to use MSPSim from tools/mspsim
    cooja ant run automatically builds jars
    fixed ant targets causing jar files to have duplicate class files
    added javadoc attr
    added javadoc target
    ant build file external from both cooja and mspsim
    core/net/uip: Rename `uip_ethaddr` to `uip_lladdr`.
    
    There isn't really a good reason I can think of for these
    to be different between IPv4 and IPv6.
    experimental code: using MSPSim for emulating msp430 (esb) motes
    experimental code: using MSPSim for emulating msp430 (esb) motes
    experimental code: using MSPSim for emulating msp430 (esb) motes
    Cooja backwards compatibility with simulation files that uses non-Contiki Java package names
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed getGUI() method to getCooja(), to better reflect its purpose
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    added new mote type method that returns the by-default used mote interfaces, as opposed to all compatible mote
    interfaces
    
    this allows the user to override default settings in the create-new-mote-type dialogs
    Replaced MSPSim interface SkyByteRadio with Msp802154Radio to easier support other 802.15.4 radio chips than CC2420.
    cleaned up the mote type visualizer code
    Made the mote type information for MSPSim based platforms more compact
    Added simulation as argument to moteType.getConfigXML() instead of each MoteType storing a reference to the simulation.
    bugfixed parsing of files read from mspsim
    Updated to allow MSPSim emulated nodes without debug information
    Ignore access control problems when looking up debug info
    Updated to allow MSPSim emulated nodes without debug information (the debug information generated by mspgcc4 is not yet supported).
    moved elf loading and debugging info to the mote type, rather than keeping a separate refence in each mote. this patch reduces both the memory usage of MSPSim-based motes, and the processing time to load them
    using EXPORT attribute to automatically copy firmware files in executable JARs
    renamed serial port mote interface SkySerial to MspSerial + replaced ESB's log mote interface with the new MspSerial (ESB motes can now read serial port data)
    bugfix: restoring path from wrong source when loading msp mote type
    minor changes: removing some unused code, restructuring, added getID() methods
    allow loading configs referring to MspIPAddress, which was removed
    + support for config file relative paths when saving simulations
    added simulation config backwards compatibility for msp motes
    compile method signature update
    using mote type configuration for generating correct mote interfaces:
    it is now possible to configure which interfaces msp430-based have
    now using contiki compilation library:
    
    removed lots of code from this class that was earlier used for compiling sky and esb motes
    better debugging output when compiling and cleaning for msp motes
    automatically cleaning temporary files for every non-gui test: takes longer but allows for test-specific compiler flags
    forcing all commands to be parsed/executed by bash to simplify multiple make commands
    split command into arguments is unnecessary
    using updated messagelist
    compile from separate thread, not edt
    using target extensions (.sky/.esb) instead of generic .firmware
    more error checking + compile default choice
    bugfix: source file got lost when reloading msp motes
    removing debug output
    fix: local firmware file variable defined when compilation starts
    added clean option
    kill potentially unfinished compilation process when dialog is closed
    in paths, dirs are separated by '/'s only
    avoid using additional threads for writing to message list
    print compilation errors to console
    printing debug output when compilation fails
    saving contiki relative paths if possible
    fixed problem with the initialization order
    using firmware specified in applet attribute
    removed public static JFrame frame variable. components should instead access the top parent container via getTopParentContainer()
    added icon interface
    fixed restoring firmware file info during reload
    esb mote extends general msp mote
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    added new mote type method that returns the by-default used mote interfaces, as opposed to all compatible mote
    interfaces
    
    this allows the user to override default settings in the create-new-mote-type dialogs
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    reverted previous plugin name changes, instead build displayed names when menu is created
    Updated menu item name to indicate that a window is opened.
    Added simulation as argument to moteType.getConfigXML() instead of each MoteType storing a reference to the simulation.
    added clean button to compile dialog, added compilation tip tab for msp motes
    added mote attributes to various types of motes
    renamed serial port mote interface SkySerial to MspSerial + replaced ESB's log mote interface with the new MspSerial (ESB motes can now read serial port data)
    merged mspsim's compile dialogs
    added read-only rime address interface
    + support for config file relative paths when saving simulations
    added simulation config backwards compatibility for msp motes
    compile method signature update
    calling contiki compile library for compiling instead of as earlier the msp mote type
    fixed problem with the initialization order
    using firmware specified in applet attribute
    removed public static JFrame frame variable. components should instead access the top parent container via getTopParentContainer()
    added icon interface
    esb mote extends general msp mote
    Updated to new radio_driver and mac_driver APIs
    network setup for uip without slip
    network setup for uip with slip
    A set of simple example programs for the ESB platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    a set of new cooja-mspsim mote types
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    a set of new cooja-mspsim mote types
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    removed executable flags
    cleaned up some unnecessary methods: empty mote constructors (created from mote type), setInterfaces/setMoteType methods
    added cooja mote type using mspsim's msp430x platforms (ti's exp5438)
    major update to mspsim-based emulated mote:
    * fully event based scheduling instead of previous event-tick-hybrid model
    
    ->
    * faster emulation of large mspsim-based networks
    * enables variable clock frequency (no longer fixed to 3.9 Mhz)
    removing unsafe MoteID interface dependencies
    minor changes: removing some unused code, restructuring, added getID() methods
    added read-only rime address interface
    using mote type configuration for generating correct mote interfaces:
    it is now possible to configure which interfaces msp430-based have
    main random generator must not be used for setup tasks such as node positioning
    new interface format without passive/active
    refactored MSPMote setup + added plugin to access MSPSim CLI
    fixed problem with the initialization order
    remade msp init methods
    esb mote extends general msp mote
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    a set of new cooja-mspsim mote types
    [cooja] Implementation of former MspMoteMemory dummy functions
    [cooja] memory: Removed AddressMemory class including all references
    [cooja] memory: Removed MoteMemory class including all references
    [cooja] memory: AvrMoteMemory and MspMoteMemory dummy implementation of MemoryInterface
    [cooja] Added @Override annotations for relevant files
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updates for latest MSPSim memory API
    Updated MSPSim plugin for new memory model in MSPSim
    implemented memory monitor support (moved previous functionality from MspMote to MspMoteMemory)
    remade msp init methods
    msp mote memory now contains map entries instead of name->address hash
    esb mote extends general msp mote
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    a set of new cooja-mspsim mote types
    added a set of new mspsim-based mote types using CC1120, CC1101 and the Enc28j60 ethernet chip
    
    minor changes: removed some obsolete stack monitoring code, improved mspsim-cooja window handler
    integration
    added new mote type method that returns the by-default used mote interfaces, as opposed to all compatible mote
    interfaces
    
    this allows the user to override default settings in the create-new-mote-type dialogs
    reverted previous plugin name changes, instead build displayed names when menu is created
    Updated menu item name to indicate that a window is opened.
    removed executable flags
    Replaced MSPSim interface SkyByteRadio with Msp802154Radio to easier support other 802.15.4 radio chips than CC2420.
    Added simulation as argument to moteType.getConfigXML() instead of each MoteType storing a reference to the simulation.
    added cooja mote type using mspsim's msp430x platforms (ti's exp5438)
    added clean button to compile dialog, added compilation tip tab for msp motes
    added temperature mote interface for sky motes
    enabled debug output again
    added mote attributes to various types of motes
    temporarily disabled experimental mspsim debug interface for upcoming release
    experimental debugging output interface for mspsim-based motes
    renamed serial port mote interface SkySerial to MspSerial + replaced ESB's log mote interface with the new MspSerial (ESB motes can now read serial port data)
    merged mspsim's compile dialogs
    minor changes: removing some unused code, restructuring, added getID() methods
    coffee manager mote interface for sky motes
    added read-only rime address interface
    + support for config file relative paths when saving simulations
    added simulation config backwards compatibility for msp motes
    compile method signature update
    calling contiki compile library for compiling instead of as earlier the msp mote type
    fixed problem with the initialization order
    using firmware specified in applet attribute
    removed public static JFrame frame variable. components should instead access the top parent container via getTopParentContainer()
    tmotesky mote type
    added icon interface
    esb mote extends general msp mote
    Updated to new radio_driver and mac_driver APIs
    network setup for uip without slip
    network setup for uip with slip
    A set of simple example programs for the ESB platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    added a set of new mspsim-based mote types using CC1120, CC1101 and the Enc28j60 ethernet chip
    
    minor changes: removed some obsolete stack monitoring code, improved mspsim-cooja window handler
    integration
    removed executable flags
    cleaned up some unnecessary methods: empty mote constructors (created from mote type), setInterfaces/setMoteType methods
    added cooja mote type using mspsim's msp430x platforms (ti's exp5438)
    major update to mspsim-based emulated mote:
    * fully event based scheduling instead of previous event-tick-hybrid model
    
    ->
    * faster emulation of large mspsim-based networks
    * enables variable clock frequency (no longer fixed to 3.9 Mhz)
    removing unsafe MoteID interface dependencies
    minor changes: removing some unused code, restructuring, added getID() methods
    added read-only rime address interface
    using mote type configuration for generating correct mote interfaces:
    it is now possible to configure which interfaces msp430-based have
    main random generator must not be used for setup tasks such as node positioning
    new interface format without passive/active
    refactored MSPMote setup + added plugin to access MSPSim CLI
    fixed problem with the initialization order
    remade msp init methods
    esb mote extends general msp mote
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    a set of new cooja-mspsim mote types
    added a set of new mspsim-based mote types using CC1120, CC1101 and the Enc28j60 ethernet chip
    
    minor changes: removed some obsolete stack monitoring code, improved mspsim-cooja window handler
    integration
    added new mote type method that returns the by-default used mote interfaces, as opposed to all compatible mote
    interfaces
    
    this allows the user to override default settings in the create-new-mote-type dialogs
    reverted previous plugin name changes, instead build displayed names when menu is created
    Updated menu item name to indicate that a window is opened.
    removed executable flags
    Replaced MSPSim interface SkyByteRadio with Msp802154Radio to easier support other 802.15.4 radio chips than CC2420.
    Added simulation as argument to moteType.getConfigXML() instead of each MoteType storing a reference to the simulation.
    added cooja mote type using mspsim's msp430x platforms (ti's exp5438)
    added clean button to compile dialog, added compilation tip tab for msp motes
    added temperature mote interface for sky motes
    enabled debug output again
    added mote attributes to various types of motes
    temporarily disabled experimental mspsim debug interface for upcoming release
    experimental debugging output interface for mspsim-based motes
    renamed serial port mote interface SkySerial to MspSerial + replaced ESB's log mote interface with the new MspSerial (ESB motes can now read serial port data)
    merged mspsim's compile dialogs
    minor changes: removing some unused code, restructuring, added getID() methods
    coffee manager mote interface for sky motes
    added read-only rime address interface
    + support for config file relative paths when saving simulations
    added simulation config backwards compatibility for msp motes
    compile method signature update
    calling contiki compile library for compiling instead of as earlier the msp mote type
    fixed problem with the initialization order
    using firmware specified in applet attribute
    removed public static JFrame frame variable. components should instead access the top parent container via getTopParentContainer()
    tmotesky mote type
    added icon interface
    esb mote extends general msp mote
    Updated to new radio_driver and mac_driver APIs
    network setup for uip without slip
    network setup for uip with slip
    A set of simple example programs for the ESB platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    added new mote type method that returns the by-default used mote interfaces, as opposed to all compatible mote
    interfaces
    
    this allows the user to override default settings in the create-new-mote-type dialogs
    Added JCreate and Sentilla USB platforms
    Added Wismote platform
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    a set of new cooja-mspsim mote types
    added a set of new mspsim-based mote types using CC1120, CC1101 and the Enc28j60 ethernet chip
    
    minor changes: removed some obsolete stack monitoring code, improved mspsim-cooja window handler
    integration
    added new mote type method that returns the by-default used mote interfaces, as opposed to all compatible mote
    interfaces
    
    this allows the user to override default settings in the create-new-mote-type dialogs
    reverted previous plugin name changes, instead build displayed names when menu is created
    Updated menu item name to indicate that a window is opened.
    removed executable flags
    Replaced MSPSim interface SkyByteRadio with Msp802154Radio to easier support other 802.15.4 radio chips than CC2420.
    Added simulation as argument to moteType.getConfigXML() instead of each MoteType storing a reference to the simulation.
    added cooja mote type using mspsim's msp430x platforms (ti's exp5438)
    added clean button to compile dialog, added compilation tip tab for msp motes
    added temperature mote interface for sky motes
    enabled debug output again
    added mote attributes to various types of motes
    temporarily disabled experimental mspsim debug interface for upcoming release
    experimental debugging output interface for mspsim-based motes
    renamed serial port mote interface SkySerial to MspSerial + replaced ESB's log mote interface with the new MspSerial (ESB motes can now read serial port data)
    merged mspsim's compile dialogs
    minor changes: removing some unused code, restructuring, added getID() methods
    coffee manager mote interface for sky motes
    added read-only rime address interface
    + support for config file relative paths when saving simulations
    added simulation config backwards compatibility for msp motes
    compile method signature update
    calling contiki compile library for compiling instead of as earlier the msp mote type
    fixed problem with the initialization order
    using firmware specified in applet attribute
    removed public static JFrame frame variable. components should instead access the top parent container via getTopParentContainer()
    tmotesky mote type
    added icon interface
    esb mote extends general msp mote
    Updated to new radio_driver and mac_driver APIs
    network setup for uip without slip
    network setup for uip with slip
    A set of simple example programs for the ESB platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    added new mote type method that returns the by-default used mote interfaces, as opposed to all compatible mote
    interfaces
    
    this allows the user to override default settings in the create-new-mote-type dialogs
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    reverted previous plugin name changes, instead build displayed names when menu is created
    Updated menu item name to indicate that a window is opened.
    Replaced MSPSim interface SkyByteRadio with Msp802154Radio to easier support other 802.15.4 radio chips than CC2420.
    Added simulation as argument to moteType.getConfigXML() instead of each MoteType storing a reference to the simulation.
    added clean button to compile dialog, added compilation tip tab for msp motes
    added temperature mote interface for sky motes
    enabled debug output again
    added mote attributes to various types of motes
    temporarily disabled experimental mspsim debug interface for upcoming release
    experimental debugging output interface for mspsim-based motes
    renamed serial port mote interface SkySerial to MspSerial + replaced ESB's log mote interface with the new MspSerial (ESB motes can now read serial port data)
    merged mspsim's compile dialogs
    minor changes: removing some unused code, restructuring, added getID() methods
    coffee manager mote interface for sky motes
    added read-only rime address interface
    + support for config file relative paths when saving simulations
    added simulation config backwards compatibility for msp motes
    compile method signature update
    calling contiki compile library for compiling instead of as earlier the msp mote type
    fixed problem with the initialization order
    using firmware specified in applet attribute
    removed public static JFrame frame variable. components should instead access the top parent container via getTopParentContainer()
    tmotesky mote type
    added icon interface
    esb mote extends general msp mote
    Updated to new radio_driver and mac_driver APIs
    network setup for uip without slip
    network setup for uip with slip
    A set of simple example programs for the ESB platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    added new mote type method that returns the by-default used mote interfaces, as opposed to all compatible mote
    interfaces
    
    this allows the user to override default settings in the create-new-mote-type dialogs
    reverted previous plugin name changes, instead build displayed names when menu is created
    Updated menu item name to indicate that a window is opened.
    Added serial interface that looks up default serial usart from MSPSim
    Added Wismote platform
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed unnecessary empty mote contructors
    Added JCreate and Sentilla USB platforms
    Added Wismote platform
    cleaned up some unnecessary methods: empty mote constructors (created from mote type), setInterfaces/setMoteType methods
    mspsim motes now implements new WatchpointMote interface, simplified code
    major update to mspsim-based emulated mote:
    * fully event based scheduling instead of previous event-tick-hybrid model
    
    ->
    * faster emulation of large mspsim-based networks
    * enables variable clock frequency (no longer fixed to 3.9 Mhz)
    removing unsafe MoteID interface dependencies
    minor changes: removing some unused code, restructuring, added getID() methods
    added read-only rime address interface
    using mote type configuration for generating correct mote interfaces:
    it is now possible to configure which interfaces msp430-based have
    main random generator must not be used for setup tasks such as node positioning
    new interface format without passive/active
    refactored MSPMote setup + added plugin to access MSPSim CLI
    fixed problem with the initialization order
    remade msp init methods
    esb mote extends general msp mote
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Added Z1 platform
    Removed unnecessary empty mote contructors
    Added Wismote platform
    cleaned up some unnecessary methods: empty mote constructors (created from mote type), setInterfaces/setMoteType methods
    mspsim motes now implements new WatchpointMote interface, simplified code
    major update to mspsim-based emulated mote:
    * fully event based scheduling instead of previous event-tick-hybrid model
    
    ->
    * faster emulation of large mspsim-based networks
    * enables variable clock frequency (no longer fixed to 3.9 Mhz)
    removing unsafe MoteID interface dependencies
    minor changes: removing some unused code, restructuring, added getID() methods
    added read-only rime address interface
    using mote type configuration for generating correct mote interfaces:
    it is now possible to configure which interfaces msp430-based have
    main random generator must not be used for setup tasks such as node positioning
    new interface format without passive/active
    refactored MSPMote setup + added plugin to access MSPSim CLI
    fixed problem with the initialization order
    remade msp init methods
    esb mote extends general msp mote
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    added new mote type method that returns the by-default used mote interfaces, as opposed to all compatible mote
    interfaces
    
    this allows the user to override default settings in the create-new-mote-type dialogs
    Added JCreate and Sentilla USB platforms
    Added Wismote platform
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    a set of new cooja-mspsim mote types
    added new mote type method that returns the by-default used mote interfaces, as opposed to all compatible mote
    interfaces
    
    this allows the user to override default settings in the create-new-mote-type dialogs
    reverted previous plugin name changes, instead build displayed names when menu is created
    Updated menu item name to indicate that a window is opened.
    removed executable flags
    Replaced MSPSim interface SkyByteRadio with Msp802154Radio to easier support other 802.15.4 radio chips than CC2420.
    Added simulation as argument to moteType.getConfigXML() instead of each MoteType storing a reference to the simulation.
    added cooja mote type using mspsim's msp430x platforms (ti's exp5438)
    added clean button to compile dialog, added compilation tip tab for msp motes
    added temperature mote interface for sky motes
    enabled debug output again
    added mote attributes to various types of motes
    temporarily disabled experimental mspsim debug interface for upcoming release
    experimental debugging output interface for mspsim-based motes
    renamed serial port mote interface SkySerial to MspSerial + replaced ESB's log mote interface with the new MspSerial (ESB motes can now read serial port data)
    merged mspsim's compile dialogs
    minor changes: removing some unused code, restructuring, added getID() methods
    coffee manager mote interface for sky motes
    added read-only rime address interface
    + support for config file relative paths when saving simulations
    added simulation config backwards compatibility for msp motes
    compile method signature update
    calling contiki compile library for compiling instead of as earlier the msp mote type
    fixed problem with the initialization order
    using firmware specified in applet attribute
    removed public static JFrame frame variable. components should instead access the top parent container via getTopParentContainer()
    tmotesky mote type
    added icon interface
    esb mote extends general msp mote
    Updated to new radio_driver and mac_driver APIs
    network setup for uip without slip
    network setup for uip with slip
    A set of simple example programs for the ESB platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    mspsim-specific time event that explicitly forces mspsim to synchronize its internal time to the current cooja time
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    a set of new cooja-mspsim mote types
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed unnecessary empty mote contructors
    Added JCreate and Sentilla USB platforms
    Added Wismote platform
    cleaned up some unnecessary methods: empty mote constructors (created from mote type), setInterfaces/setMoteType methods
    mspsim motes now implements new WatchpointMote interface, simplified code
    major update to mspsim-based emulated mote:
    * fully event based scheduling instead of previous event-tick-hybrid model
    
    ->
    * faster emulation of large mspsim-based networks
    * enables variable clock frequency (no longer fixed to 3.9 Mhz)
    removing unsafe MoteID interface dependencies
    minor changes: removing some unused code, restructuring, added getID() methods
    added read-only rime address interface
    using mote type configuration for generating correct mote interfaces:
    it is now possible to configure which interfaces msp430-based have
    main random generator must not be used for setup tasks such as node positioning
    new interface format without passive/active
    refactored MSPMote setup + added plugin to access MSPSim CLI
    fixed problem with the initialization order
    remade msp init methods
    esb mote extends general msp mote
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    a set of new cooja-mspsim mote types
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    a set of new cooja-mspsim mote types
    added a set of new mspsim-based mote types using CC1120, CC1101 and the Enc28j60 ethernet chip
    
    minor changes: removed some obsolete stack monitoring code, improved mspsim-cooja window handler
    integration
    added new mote type method that returns the by-default used mote interfaces, as opposed to all compatible mote
    interfaces
    
    this allows the user to override default settings in the create-new-mote-type dialogs
    reverted previous plugin name changes, instead build displayed names when menu is created
    Updated menu item name to indicate that a window is opened.
    removed executable flags
    Replaced MSPSim interface SkyByteRadio with Msp802154Radio to easier support other 802.15.4 radio chips than CC2420.
    Added simulation as argument to moteType.getConfigXML() instead of each MoteType storing a reference to the simulation.
    added cooja mote type using mspsim's msp430x platforms (ti's exp5438)
    added clean button to compile dialog, added compilation tip tab for msp motes
    added temperature mote interface for sky motes
    enabled debug output again
    added mote attributes to various types of motes
    temporarily disabled experimental mspsim debug interface for upcoming release
    experimental debugging output interface for mspsim-based motes
    renamed serial port mote interface SkySerial to MspSerial + replaced ESB's log mote interface with the new MspSerial (ESB motes can now read serial port data)
    merged mspsim's compile dialogs
    minor changes: removing some unused code, restructuring, added getID() methods
    coffee manager mote interface for sky motes
    added read-only rime address interface
    + support for config file relative paths when saving simulations
    added simulation config backwards compatibility for msp motes
    compile method signature update
    calling contiki compile library for compiling instead of as earlier the msp mote type
    fixed problem with the initialization order
    using firmware specified in applet attribute
    removed public static JFrame frame variable. components should instead access the top parent container via getTopParentContainer()
    tmotesky mote type
    added icon interface
    esb mote extends general msp mote
    Updated to new radio_driver and mac_driver APIs
    network setup for uip without slip
    network setup for uip with slip
    A set of simple example programs for the ESB platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    added new mote type method that returns the by-default used mote interfaces, as opposed to all compatible mote
    interfaces
    
    this allows the user to override default settings in the create-new-mote-type dialogs
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    new experimental feature: possibility to change mote types when loading a simulation
    
    made compile dialogs only select mote interfaces specified in the loaded configuration
    added clean button to compile dialog, added compilation tip tab for msp motes
    three patches to simplify loading TinyOS firmwares (via MSPSim), contributed by Philipp Sommer
    merged mspsim's compile dialogs
    added simulation config backwards compatibility for msp motes
    esb mote type should use esb mote interfaces, not sky mote interfaces
    compile dialog implementations
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    cleaned up some unnecessary methods: empty mote constructors (created from mote type), setInterfaces/setMoteType methods
    mspsim motes now implements new WatchpointMote interface, simplified code
    major update to mspsim-based emulated mote:
    * fully event based scheduling instead of previous event-tick-hybrid model
    
    ->
    * faster emulation of large mspsim-based networks
    * enables variable clock frequency (no longer fixed to 3.9 Mhz)
    removing unsafe MoteID interface dependencies
    minor changes: removing some unused code, restructuring, added getID() methods
    added read-only rime address interface
    using mote type configuration for generating correct mote interfaces:
    it is now possible to configure which interfaces msp430-based have
    main random generator must not be used for setup tasks such as node positioning
    new interface format without passive/active
    refactored MSPMote setup + added plugin to access MSPSim CLI
    fixed problem with the initialization order
    remade msp init methods
    esb mote extends general msp mote
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    added new mote type method that returns the by-default used mote interfaces, as opposed to all compatible mote
    interfaces
    
    this allows the user to override default settings in the create-new-mote-type dialogs
    reverted previous plugin name changes, instead build displayed names when menu is created
    Added button interface for Z1 platform
    Updated menu item name to indicate that a window is opened.
    Added serial interface that looks up default serial usart from MSPSim
    Added Z1 platform
    Added JCreate and Sentilla USB platforms
    Added Wismote platform
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    cleaned up some unnecessary methods: empty mote constructors (created from mote type), setInterfaces/setMoteType methods
    example code for manually configuring sky motes MAC addresses
    Updated SkyFlash to be used with any M25P80 equipped mote
    major update to mspsim-based emulated mote:
    * fully event based scheduling instead of previous event-tick-hybrid model
    
    ->
    * faster emulation of large mspsim-based networks
    * enables variable clock frequency (no longer fixed to 3.9 Mhz)
    added method for more easily accessing the coffee filesystem interface
    removing unsafe MoteID interface dependencies
    minor changes: removing some unused code, restructuring, added getID() methods
    added read-only rime address interface
    using mote type configuration for generating correct mote interfaces:
    it is now possible to configure which interfaces msp430-based have
    added mote relation interface to emulated sky nodes
    minor changes and documentation regarding using random generators in Cooja
    added MAC address setting - setNodeID in SkyNode
    uIP IP address interface (reading from uip_hostaddr)
    new interface format without passive/active
    refactored MSPMote setup + added plugin to access MSPSim CLI
    fixed new byte based radio model for MSPSim based Sky node
    fixed problem with the initialization order
    mspsim setup node ports without file access
    creating flash interface
    remade msp init methods
    tmotesky mote
    esb mote extends general msp mote
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    added new mote type method that returns the by-default used mote interfaces, as opposed to all compatible mote
    interfaces
    
    this allows the user to override default settings in the create-new-mote-type dialogs
    reverted previous plugin name changes, instead build displayed names when menu is created
    Updated menu item name to indicate that a window is opened.
    removed executable flags
    Replaced MSPSim interface SkyByteRadio with Msp802154Radio to easier support other 802.15.4 radio chips than CC2420.
    Added simulation as argument to moteType.getConfigXML() instead of each MoteType storing a reference to the simulation.
    added cooja mote type using mspsim's msp430x platforms (ti's exp5438)
    added clean button to compile dialog, added compilation tip tab for msp motes
    added temperature mote interface for sky motes
    enabled debug output again
    added mote attributes to various types of motes
    temporarily disabled experimental mspsim debug interface for upcoming release
    experimental debugging output interface for mspsim-based motes
    renamed serial port mote interface SkySerial to MspSerial + replaced ESB's log mote interface with the new MspSerial (ESB motes can now read serial port data)
    merged mspsim's compile dialogs
    minor changes: removing some unused code, restructuring, added getID() methods
    coffee manager mote interface for sky motes
    added read-only rime address interface
    + support for config file relative paths when saving simulations
    added simulation config backwards compatibility for msp motes
    compile method signature update
    calling contiki compile library for compiling instead of as earlier the msp mote type
    fixed problem with the initialization order
    using firmware specified in applet attribute
    removed public static JFrame frame variable. components should instead access the top parent container via getTopParentContainer()
    tmotesky mote type
    added icon interface
    esb mote extends general msp mote
    Updated to new radio_driver and mac_driver APIs
    network setup for uip without slip
    network setup for uip with slip
    A set of simple example programs for the ESB platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    a set of new cooja-mspsim mote types
    added a set of new mspsim-based mote types using CC1120, CC1101 and the Enc28j60 ethernet chip
    
    minor changes: removed some obsolete stack monitoring code, improved mspsim-cooja window handler
    integration
    added new mote type method that returns the by-default used mote interfaces, as opposed to all compatible mote
    interfaces
    
    this allows the user to override default settings in the create-new-mote-type dialogs
    reverted previous plugin name changes, instead build displayed names when menu is created
    Updated menu item name to indicate that a window is opened.
    removed executable flags
    Replaced MSPSim interface SkyByteRadio with Msp802154Radio to easier support other 802.15.4 radio chips than CC2420.
    Added simulation as argument to moteType.getConfigXML() instead of each MoteType storing a reference to the simulation.
    added cooja mote type using mspsim's msp430x platforms (ti's exp5438)
    added clean button to compile dialog, added compilation tip tab for msp motes
    added temperature mote interface for sky motes
    enabled debug output again
    added mote attributes to various types of motes
    temporarily disabled experimental mspsim debug interface for upcoming release
    experimental debugging output interface for mspsim-based motes
    renamed serial port mote interface SkySerial to MspSerial + replaced ESB's log mote interface with the new MspSerial (ESB motes can now read serial port data)
    merged mspsim's compile dialogs
    minor changes: removing some unused code, restructuring, added getID() methods
    coffee manager mote interface for sky motes
    added read-only rime address interface
    + support for config file relative paths when saving simulations
    added simulation config backwards compatibility for msp motes
    compile method signature update
    calling contiki compile library for compiling instead of as earlier the msp mote type
    fixed problem with the initialization order
    using firmware specified in applet attribute
    removed public static JFrame frame variable. components should instead access the top parent container via getTopParentContainer()
    tmotesky mote type
    added icon interface
    esb mote extends general msp mote
    Updated to new radio_driver and mac_driver APIs
    network setup for uip without slip
    network setup for uip with slip
    A set of simple example programs for the ESB platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    a set of new cooja-mspsim mote types
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    a set of new cooja-mspsim mote types
    added a set of new mspsim-based mote types using CC1120, CC1101 and the Enc28j60 ethernet chip
    
    minor changes: removed some obsolete stack monitoring code, improved mspsim-cooja window handler
    integration
    added new mote type method that returns the by-default used mote interfaces, as opposed to all compatible mote
    interfaces
    
    this allows the user to override default settings in the create-new-mote-type dialogs
    reverted previous plugin name changes, instead build displayed names when menu is created
    Updated menu item name to indicate that a window is opened.
    removed executable flags
    Replaced MSPSim interface SkyByteRadio with Msp802154Radio to easier support other 802.15.4 radio chips than CC2420.
    Added simulation as argument to moteType.getConfigXML() instead of each MoteType storing a reference to the simulation.
    added cooja mote type using mspsim's msp430x platforms (ti's exp5438)
    added clean button to compile dialog, added compilation tip tab for msp motes
    added temperature mote interface for sky motes
    enabled debug output again
    added mote attributes to various types of motes
    temporarily disabled experimental mspsim debug interface for upcoming release
    experimental debugging output interface for mspsim-based motes
    renamed serial port mote interface SkySerial to MspSerial + replaced ESB's log mote interface with the new MspSerial (ESB motes can now read serial port data)
    merged mspsim's compile dialogs
    minor changes: removing some unused code, restructuring, added getID() methods
    coffee manager mote interface for sky motes
    added read-only rime address interface
    + support for config file relative paths when saving simulations
    added simulation config backwards compatibility for msp motes
    compile method signature update
    calling contiki compile library for compiling instead of as earlier the msp mote type
    fixed problem with the initialization order
    using firmware specified in applet attribute
    removed public static JFrame frame variable. components should instead access the top parent container via getTopParentContainer()
    tmotesky mote type
    added icon interface
    esb mote extends general msp mote
    Updated to new radio_driver and mac_driver APIs
    network setup for uip without slip
    network setup for uip with slip
    A set of simple example programs for the ESB platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    a set of new cooja-mspsim mote types
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    added a set of new mspsim-based mote types using CC1120, CC1101 and the Enc28j60 ethernet chip
    
    minor changes: removed some obsolete stack monitoring code, improved mspsim-cooja window handler
    integration
    added new mote type method that returns the by-default used mote interfaces, as opposed to all compatible mote
    interfaces
    
    this allows the user to override default settings in the create-new-mote-type dialogs
    reverted previous plugin name changes, instead build displayed names when menu is created
    Updated menu item name to indicate that a window is opened.
    removed executable flags
    Replaced MSPSim interface SkyByteRadio with Msp802154Radio to easier support other 802.15.4 radio chips than CC2420.
    Added simulation as argument to moteType.getConfigXML() instead of each MoteType storing a reference to the simulation.
    added cooja mote type using mspsim's msp430x platforms (ti's exp5438)
    added clean button to compile dialog, added compilation tip tab for msp motes
    added temperature mote interface for sky motes
    enabled debug output again
    added mote attributes to various types of motes
    temporarily disabled experimental mspsim debug interface for upcoming release
    experimental debugging output interface for mspsim-based motes
    renamed serial port mote interface SkySerial to MspSerial + replaced ESB's log mote interface with the new MspSerial (ESB motes can now read serial port data)
    merged mspsim's compile dialogs
    minor changes: removing some unused code, restructuring, added getID() methods
    coffee manager mote interface for sky motes
    added read-only rime address interface
    + support for config file relative paths when saving simulations
    added simulation config backwards compatibility for msp motes
    compile method signature update
    calling contiki compile library for compiling instead of as earlier the msp mote type
    fixed problem with the initialization order
    using firmware specified in applet attribute
    removed public static JFrame frame variable. components should instead access the top parent container via getTopParentContainer()
    tmotesky mote type
    added icon interface
    esb mote extends general msp mote
    Updated to new radio_driver and mac_driver APIs
    network setup for uip without slip
    network setup for uip with slip
    A set of simple example programs for the ESB platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    [cooja] Implementation of former MspMoteMemory dummy functions
    [cooja] memory: Removed MoteMemory class including all references
    [cooja] getMemory() now returns MemoryInterface
    
    Including code adaptions based on new memory methods to keep code compilable
    [cooja] Added MemoryLayout class to represent basic information about
    motes memory such as word size or endianess
    Cooja backwards compatibility with simulation files that uses non-Contiki Java package names
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed getGUI() method to getCooja(), to better reflect its purpose
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Added mspsim as a submodule instead of as a binary mspsim.jar file
    Add MSPSim Logging
    added a set of new mspsim-based mote types using CC1120, CC1101 and the Enc28j60 ethernet chip
    
    minor changes: removed some obsolete stack monitoring code, improved mspsim-cooja window handler
    integration
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added check if the interface is not available
    No longer any need to specify memory when loading firmware
    Replaced MSPSim interface SkyByteRadio with Msp802154Radio to easier support other 802.15.4 radio chips than CC2420.
    cleaned up some unnecessary methods: empty mote constructors (created from mote type), setInterfaces/setMoteType methods
    bugfix: breakpoints should only trigger once
    
    updated watchpointmote method to return executable address, not wrapped in an object
    Stop the CPU when a breakpoint is triggered
    Updated for new listener API in MSPSim
    Updates for latest MSPSim memory API
    bugfixed parsing of files read from mspsim
    mspsim motes now implements new WatchpointMote interface, simplified code
    implemented memory monitor support (moved previous functionality from MspMote to MspMoteMemory)
    bugfix: mspsim may not have pc information, causing exception in buffer listener
    
    bugfix: mote interfaces were incorrectly initialized twice, causing an mote id error in tinyos
    improved mspsim-connected regarding command handlers and context, implemented stack track method
    more informative error messages at simulation error
    new watchpoint api, and method that allows for manipulating simulation time without affecting the
    mote
    execution
    new cooja plugin for monitoring memory areas, similar to the log listener.
    small optimizations and cleanups
    implementing getExecutionDetails() by returning a stack trace
    updated mspsim.jar that allows reading the current cpu speed
    moved elf loading and debugging info to the mote type, rather than keeping a separate refence in each mote. this patch reduces both the memory usage of MSPSim-based motes, and the processing time to load them
    added experimental visualizer skin that shows the current source code of each mote in the simulation (for emulated mspmotes only)
    make cli method public
    show contiki stack trace in error dialog, not just print to console
    introduced execute method with duration argument
    removed obsolete tick method
    removed unnecessary call to initEmulator (already called when the mote is first created)
    bugfix: rescheduling mspsim-based after breakpoint stops simulation + disabled automatic CLI "trace" at exceptions
    added support for multiple msp command line listeners
    renamed serial port mote interface SkySerial to MspSerial + replaced ESB's log mote interface with the new MspSerial (ESB motes can now read serial port data)
    the simulation object now handles the motetype configuration for motes; common functionality that was earlier implemented in each mote.
    
    this patch allows the simulator more freedom for hand-picking mote class loaders
    
    + some debug output in experimental ImportAppMoteType
    major update to mspsim-based emulated mote:
    * fully event based scheduling instead of previous event-tick-hybrid model
    
    ->
    * faster emulation of large mspsim-based networks
    * enables variable clock frequency (no longer fixed to 3.9 Mhz)
    debug info before loading ELF file
    minor changes: removing some unused code, restructuring, added getID() methods
    moved handling of breakpoint configs from plugin to mote
    mspmote is now a watchpoint mote + mspmote is responsible for parsing and providing firmware debugging info
    milliseconds -> microseconds update + removed dependency of radio interface
    new default clock frequency for Contiki's sky motes: 3.9MHz
    reverting previous accidental commit
    increasing loop symbols for higher clock speed
    allow loading configs referring to MspIPAddress, which was removed
    experimental: print pc history when program jumps to bad address
    temporary fix for catching new emulationexception
    using mote type configuration for generating correct mote interfaces:
    it is now possible to configure which interfaces msp430-based have
    method names changed
    added MAC address setting - setNodeID in SkyNode
    bugfix: setting heap start to enable stack watch again
    changed simulation time from int to long to support very long simulations
    bugfix: mspsim cycle counter was cast to int, limiting maximum simulation time
    mspsim should warn at bad memory access (not activated yet)
    new interface format without passive/active
    refactored MSPMote setup + added plugin to access MSPSim CLI
    removed unused currentSimTime + fixed bug when nodes are added during simulations
    optimized some loops for increased performance and added runprof for profiling
    fixed cycles per sec to be more correct
    fixed bug in the delayed start of MSPSim motes
    serialport is an active interface
    fixed problem with the initialization order
    reading specified binary firmware from webserver
    single instruction ticks instead of entire milliseconds
    
    need optimizing
    get/set for elf module
    make elf module public
    remade msp init methods
    msp mote memory now contains map entries instead of name->address hash
    esb mote extends general msp mote
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Added simulation as argument to moteType.getConfigXML() instead of each MoteType storing a reference to the simulation.
    Added constructor to exception
    Added Wismote platform
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed unnecessary empty mote contructors
    Added Wismote platform
    cleaned up some unnecessary methods: empty mote constructors (created from mote type), setInterfaces/setMoteType methods
    mspsim motes now implements new WatchpointMote interface, simplified code
    major update to mspsim-based emulated mote:
    * fully event based scheduling instead of previous event-tick-hybrid model
    
    ->
    * faster emulation of large mspsim-based networks
    * enables variable clock frequency (no longer fixed to 3.9 Mhz)
    removing unsafe MoteID interface dependencies
    minor changes: removing some unused code, restructuring, added getID() methods
    added read-only rime address interface
    using mote type configuration for generating correct mote interfaces:
    it is now possible to configure which interfaces msp430-based have
    main random generator must not be used for setup tasks such as node positioning
    new interface format without passive/active
    refactored MSPMote setup + added plugin to access MSPSim CLI
    fixed problem with the initialization order
    remade msp init methods
    esb mote extends general msp mote
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Leds interface for MSPSim leds abstraction
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added temperature mote interface for sky motes
    javadoc update
    removed dependency on mote interface getEnergyConsumption() method
    new event scheduling api
    removed mote state references
    event based mote interfaces: less dependencies on tick polling + using new mote time events
    renamed author to avoid compiler warnings
    new energy method: collecting total energy consumption from each interface
    updated interfaces to new polling format.
    method parameter updates
    changed mote state to enum type instead of int
    added method to get last tick used energy
    added cooja; 'The Contiki OS Java Simulator'
    Buttons: Some minor cleanups
    
    Removed imports not required anymore and made some class members final
    Buttons: Added missing @Override annotations
    Buttons: Move implementation of button routines to Button class
    
    The implementation of clickButton(), pressButton(), and releaseButton()
    can be shared accross the several node-dependent implementations as
    they use the node-dependent doPressButton() doReleaseButton() routines.
    Button: Add doPressButton() and doReleaseButton() to Button class
    
    As every Button has a node-specific implementation part, this should be
    the minimal interface to the backend node emulator for pressing and
    releasing a button.
    Button: None of the buttons will saves its state
    
    Saving a buttons state in simulation file is not required as its state
    is much too volatile.
    Button: Move common interface visualization to Button class
    
    The implementation of a simple JPanel with a JButton was only code
    duplication accross the several button implementations.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    removing obsolete method previously used for estimating contiki's energy consumption
    quick-fix: the generator assumes that the constructor accepts a mote object, this is the quickest fix currently
    new interface format without passive/active
    + energy method renamed
    esb and msp430-general interfaces
    renamed 'user platform' to 'project directories'
    updated interface due to set config structure changes
    added cooja; 'The Contiki OS Java Simulator'
    More uip_ipaddr_t fixes.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    a set of new cooja-mspsim mote types
    [cooja/mspsim] Msp802154Radio: Fix maximum power indicator
    
    Previously getOutputPowerIndicatorMax() returned the fixed value 31.
    This is valid for e.g. the mspsim CC2420 radio implementation but not for the CC2520 implementation where the maximum returned value is 9.
    
    Thus to fix transmission range issues (for example for Wismote node) the maxium value provided by the radio implementaiton must be used.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    added new mote type method that returns the by default used mote interfaces, as opposed to all compatible mote
    interfaces
    
    this allows a user to override default settings in the create-new-mote-type dialogs
    Cooja: Add LQI-Support to DGRM
    renamed radio method isReceiverOn() to isRadioOn()
    
    fixed bug in Msp802154Radio causing all packets from non-802154-radios to be dropped
    Replaced MSPSim interface SkyByteRadio with Msp802154Radio to easier support other 802.15.4 radio chips than CC2420.
    Updated for new listener API in MSPSim
    send empty packet if node reboots during transmission
    organized imports
    moved radio interface visualizer code to shared abstract radio
    Updated to be used with any CC2420 equipped mote
    notify observers when radio channel changes
    fixed cc2420's received signal strength indicator to be an average of the last 8 symbols (192us)
    bugfix: getSignalStrength() did not return the correct value
    bugfix: wrapping signal strength updates in separate event, to be executed after the last byte received
    wrapping cc2420 byte delivery in MspMoteTimeEvent:s, to avoid scheduling problems when emulated mote is in lpm
    added inter-byte delay for delivering cross-level packet bytes (250kbit/s)
    automatically ending transmission if radio hw is turned off
    bugfix: returned radio on during boot
    removed unused and unneeded custom radio data classes
    output warning if radio shuts down during transmission
    when a receiving radio is interfered by another transmission, the actual data received is corrupted.
    minor fix: isTransmitting() flag should be true during transmissions + removed obsolete MSPSim setCCA interface
    using MoteTimeEvent instead of TimeEvent: scheduled events are automatically removed when the mote is removed
    new event scheduling api
    event based mote interfaces + reimplemented cross level functionality for TR1001
    notify when radio HW is turned on/off
    added method for checking if radio can receive data
    sky motes output the new converted radio packets
    quick-fix: the generator assumes that the constructor accepts a mote object, this is the quickest fix currently
    re-enabled radio channels on sky motes
    increased buffer size for maximum sized packets including preamble
    changed simulation time from int to long to support very long simulations
    allow radio to flush before feeding with packet data
    using cc2420 packet converter for conversions between cc2420 and cooja
    new interface format without passive/active
    + energy method renamed
    fixed new byte based radio model for MSPSim based Sky node
    added missing variable initialization
    supporting new mspsim cc2420
    updated to latest version of MSPSim
    updated tr1001 channels: fixed to -1
    implementing custom data objects
    cc24240 packet converter (currently no actual conversion is performed due to already stripped cc2420 output)
    initial cc2420 wrapper interface
    
    supports signal strength and output power (indicator)
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    a set of new cooja-mspsim mote types
    removed executable flags
    added cooja mote type using mspsim's msp430x platforms (ti's exp5438)
    Added native-border-router and slip-radio
    hex conversion and crc shell commands
    removed execute flag of source files (avoids diff problems with egit)
    Adding ADC functions
    Platform-specific devices.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    removed executable flags
    added cooja mote type using mspsim's msp430x platforms (ti's exp5438)
    Added native-border-router and slip-radio
    hex conversion and crc shell commands
    removed execute flag of source files (avoids diff problems with egit)
    Adding ADC functions
    Platform-specific devices.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    esb and msp430-general interfaces
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updated SkyFlash to be used with any M25P80 equipped mote
    removing obsolete method previously used for estimating contiki's energy consumption
    coffee manager mote interface for sky motes
    implemented saving current flash memory
    new interface format without passive/active
    + energy method renamed
    made the GUI a little more compact
    upload flash binary not available in applet mode
    flash interface
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    a set of new cooja-mspsim mote types
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    removed executable flags
    added cooja mote type using mspsim's msp430x platforms (ti's exp5438)
    Added native-border-router and slip-radio
    hex conversion and crc shell commands
    removed execute flag of source files (avoids diff problems with egit)
    Adding ADC functions
    Platform-specific devices.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    removed previous workaround for already fixed bug in CC2420 CRC
    Fixed CRC for updated CRC-handling in new MSPSim
    Disabled the cross-level conversion of Contiki timestamp (currently not used by Contiki)
    + calculates CRC for incoming packets (from cooja to cc2420). not yet checking outgoing packets for correct CRC
    removed warning when packet conversion failed
    removed unused and unneeded custom radio data classes
    updated cc2420 converter to 6 byte xmac headers
    bugfix: the preamble and synchbytes was shown instead of the payload (including 2 footer bytes)
    do not convert packet is bad length is set in cc2420 fifo
    sky motes output the new converted radio packets
    renamed author to avoid compiler warnings
    misspelled method
    packet converter with x-mac and crc support
    updated to latest version of MSPSim
    javadoc bugs
    cc24240 packet converter (currently no actual conversion is performed due to already stripped cc2420 output)
    esb and msp430-general interfaces
    Removed duplicated statement.
    Simple test for the SHT11 driver.
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Buttons: Some minor cleanups
    
    Removed imports not required anymore and made some class members final
    Buttons: Move implementation of button routines to Button class
    
    The implementation of clickButton(), pressButton(), and releaseButton()
    can be shared accross the several node-dependent implementations as
    they use the node-dependent doPressButton() doReleaseButton() routines.
    Button: Add doPressButton() and doReleaseButton() to Button class
    
    As every Button has a node-specific implementation part, this should be
    the minimal interface to the backend node emulator for pressing and
    releasing a button.
    Button: None of the buttons will saves its state
    
    Saving a buttons state in simulation file is not required as its state
    is much too volatile.
    Button: Move common interface visualization to Button class
    
    The implementation of a simple JPanel with a JButton was only code
    duplication accross the several button implementations.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Button interface for MSPSim button abstraction
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Updated API for external flash for storage API in MSPSim
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Added serial interface that looks up default serial usart from MSPSim
    Updated for new listener API in MSPSim
    added cooja mote type using mspsim's msp430x platforms (ti's exp5438)
    updated to latest version of MSPSim with improved support for Dwarf
    bugfix: byte were written from both queue and in response to uart state rx flag clearing, which caused byte to be corrupted
    bugfix:  time event was initialized with null mote
    wrapping serial byte input in a MspMoteTimeEvent
    renamed serial port mote interface SkySerial to MspSerial + replaced ESB's log mote interface with the new MspSerial (ESB motes can now read serial port data)
    using MoteTimeEvent instead of TimeEvent: scheduled events are automatically removed when the mote is removed
    new event scheduling api
    extend SerialUI to avoid code duplication
    milliseconds -> microseconds update
    quick-fix: the generator assumes that the constructor accepts a mote object, this is the quickest fix currently
    renamed author to avoid compiler warnings
    minor TOS serial fix
    fixed TOS detect on usart output
    added simple method for wrapping serial data in SLIP packets
    removed todo: serial data callback is implemented
    changed simulation time from int to long to support very long simulations
    synchronizing pending bytes vector
    using state changed callback for more accurate incoming serial data throughput
    added command line history
    using events to write serial data to mote
    splitting contiki messages on newlines
    serial port implementation for sky node.
    sky serial port
    esb and msp430-general interfaces
    minor changes due to new setConfig method parameter
    added cooja; 'The Contiki OS Java Simulator'
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Updated API for external flash for storage API in MSPSim
    Updated for latest coffee-manager
    coffee manager mote interface for sky motes
    flash interface
    cc24240 packet converter (currently no actual conversion is performed due to already stripped cc2420 output)
    default radio packet implementation
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Buttons: use non-deprecated MSPSim button api
    Buttons: Some minor cleanups
    
    Removed imports not required anymore and made some class members final
    Buttons: Added missing @Override annotations
    Buttons: Move implementation of button routines to Button class
    
    The implementation of clickButton(), pressButton(), and releaseButton()
    can be shared accross the several node-dependent implementations as
    they use the node-dependent doPressButton() doReleaseButton() routines.
    Button: Add doPressButton() and doReleaseButton() to Button class
    
    As every Button has a node-specific implementation part, this should be
    the minimal interface to the backend node emulator for pressing and
    releasing a button.
    Button: None of the buttons will saves its state
    
    Saving a buttons state in simulation file is not required as its state
    is much too volatile.
    SkyButton: Reduce dependency on SkyMote
    
    Placed call to setButton() in implementation-specific functions
    doPressButton() and doReleaseButton() as in ContikiButton.
    Button: Move common interface visualization to Button class
    
    The implementation of a simple JPanel with a JButton was only code
    duplication accross the several button implementations.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    removed debugging output
    bugfix: using MspMoteTimeEvent:s to ensure that MSPSim's internal clock is correct when button is clicked
    removing obsolete method previously used for estimating contiki's energy consumption
    new interface format without passive/active
    + energy method renamed
    added Button interface for the Sky plattform
    esb and msp430-general interfaces
    renamed 'user platform' to 'project directories'
    updated interface due to set config structure changes
    added cooja; 'The Contiki OS Java Simulator'
    More uip_ipaddr_t fixes.
    Import of the contiki-2.x development code from the SICS internal CVS server
    [cooja] memory: Removed AddressMemory class including all references
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updates for latest MSPSim memory API
    Updated MSPSim plugin for new memory model in MSPSim
    updated to mspsims new watchpoint api
    avoid java expection when debug pointer doesn't exist
    experimental debugging output interface for mspsim-based motes
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Added serial interface that looks up default serial usart from MSPSim
    removed executable flags
    added cooja mote type using mspsim's msp430x platforms (ti's exp5438)
    Added native-border-router and slip-radio
    hex conversion and crc shell commands
    removed execute flag of source files (avoids diff problems with egit)
    Adding ADC functions
    Platform-specific devices.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    minor bug fix to avoid need for updating filesystem twice initially
    removing obsolete method previously used for estimating contiki's energy consumption
    added method for more easily accessing the coffee filesystem interface
    coffee manager mote interface for sky motes
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updated for new listener API in MSPSim
    removing obsolete method previously used for estimating contiki's energy consumption
    quick-fix: the generator assumes that the constructor accepts a mote object, this is the quickest fix currently
    new interface format without passive/active
    + energy method renamed
    fixed inverted leds
    added sky led interface (+ updated esb+contiki mote led interfaces)
    esb and msp430-general interfaces
    bug fix:
    mote id reported changed every tick
    minor changes due to new setConfig method parameter
    added cooja; 'The Contiki OS Java Simulator'
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    removed executable flags
    Updated for new listener API in MSPSim
    added cooja mote type using mspsim's msp430x platforms (ti's exp5438)
    removing obsolete method previously used for estimating contiki's energy consumption
    quick-fix: the generator assumes that the constructor accepts a mote object, this is the quickest fix currently
    new interface format without passive/active
    + energy method renamed
    fixed inverted leds
    added sky led interface (+ updated esb+contiki mote led interfaces)
    esb and msp430-general interfaces
    bug fix:
    mote id reported changed every tick
    minor changes due to new setConfig method parameter
    added cooja; 'The Contiki OS Java Simulator'
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Better handling of cross-level radio packet. Minor code cleanup.
    requesting mote wakeup when receiving radio data + code cleanup (faster code)
    event based mote interfaces + reimplemented cross level functionality for TR1001
    javadoc bugs
    using new radio packet format
    esb/tr1001 interface
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    removing obsolete method previously used for estimating contiki's energy consumption
    new event scheduling api
    milliseconds -> microseconds update
    quick-fix: the generator assumes that the constructor accepts a mote object, this is the quickest fix currently
    renamed author to avoid compiler warnings
    changed simulation time from int to long to support very long simulations
    ok
    implemented getDrift method
    new interface format without passive/active
    + energy method renamed
    fixed bug in the delayed start of MSPSim motes
    esb and msp430-general interfaces
    renamed 'user platform' to 'project directories'
    updated interface due to set config structure changes
    added cooja; 'The Contiki OS Java Simulator'
    More uip_ipaddr_t fixes.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updated for new listener API in MSPSim
    removing obsolete method previously used for estimating contiki's energy consumption
    new interface format without passive/active
    + energy method renamed
    added sky led interface (+ updated esb+contiki mote led interfaces)
    esb and msp430-general interfaces
    bug fix:
    mote id reported changed every tick
    minor changes due to new setConfig method parameter
    added cooja; 'The Contiki OS Java Simulator'
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    removed executable flags
    Updated for new listener API in MSPSim
    added cooja mote type using mspsim's msp430x platforms (ti's exp5438)
    removing obsolete method previously used for estimating contiki's energy consumption
    new interface format without passive/active
    + energy method renamed
    added sky led interface (+ updated esb+contiki mote led interfaces)
    esb and msp430-general interfaces
    bug fix:
    mote id reported changed every tick
    minor changes due to new setConfig method parameter
    added cooja; 'The Contiki OS Java Simulator'
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    javadoc bugs
    esb and msp430-general interfaces
    Removed duplicated statement.
    Simple test for the SHT11 driver.
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    a set of new cooja-mspsim mote types
    added new mote type method that returns the by default used mote interfaces, as opposed to all compatible mote
    interfaces
    
    this allows a user to override default settings in the create-new-mote-type dialogs
    Cooja: Add LQI-Support to DGRM
    renamed radio method isReceiverOn() to isRadioOn()
    
    fixed bug in Msp802154Radio causing all packets from non-802154-radios to be dropped
    Replaced MSPSim interface SkyByteRadio with Msp802154Radio to easier support other 802.15.4 radio chips than CC2420.
    Updated for new listener API in MSPSim
    send empty packet if node reboots during transmission
    organized imports
    moved radio interface visualizer code to shared abstract radio
    Updated to be used with any CC2420 equipped mote
    notify observers when radio channel changes
    fixed cc2420's received signal strength indicator to be an average of the last 8 symbols (192us)
    bugfix: getSignalStrength() did not return the correct value
    bugfix: wrapping signal strength updates in separate event, to be executed after the last byte received
    wrapping cc2420 byte delivery in MspMoteTimeEvent:s, to avoid scheduling problems when emulated mote is in lpm
    added inter-byte delay for delivering cross-level packet bytes (250kbit/s)
    automatically ending transmission if radio hw is turned off
    bugfix: returned radio on during boot
    removed unused and unneeded custom radio data classes
    output warning if radio shuts down during transmission
    when a receiving radio is interfered by another transmission, the actual data received is corrupted.
    minor fix: isTransmitting() flag should be true during transmissions + removed obsolete MSPSim setCCA interface
    using MoteTimeEvent instead of TimeEvent: scheduled events are automatically removed when the mote is removed
    new event scheduling api
    event based mote interfaces + reimplemented cross level functionality for TR1001
    notify when radio HW is turned on/off
    added method for checking if radio can receive data
    sky motes output the new converted radio packets
    quick-fix: the generator assumes that the constructor accepts a mote object, this is the quickest fix currently
    re-enabled radio channels on sky motes
    increased buffer size for maximum sized packets including preamble
    changed simulation time from int to long to support very long simulations
    allow radio to flush before feeding with packet data
    using cc2420 packet converter for conversions between cc2420 and cooja
    new interface format without passive/active
    + energy method renamed
    fixed new byte based radio model for MSPSim based Sky node
    added missing variable initialization
    supporting new mspsim cc2420
    updated to latest version of MSPSim
    updated tr1001 channels: fixed to -1
    implementing custom data objects
    cc24240 packet converter (currently no actual conversion is performed due to already stripped cc2420 output)
    initial cc2420 wrapper interface
    
    supports signal strength and output power (indicator)
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    a set of new cooja-mspsim mote types
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    added new mote type method that returns the by default used mote interfaces, as opposed to all compatible mote
    interfaces
    
    this allows a user to override default settings in the create-new-mote-type dialogs
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    renamed radio method isReceiverOn() to isRadioOn()
    
    fixed bug in Msp802154Radio causing all packets from non-802154-radios to be dropped
    Updated for new listener API in MSPSim
    updated to latest version of MSPSim with improved support for Dwarf
    moved radio interface visualizer code to shared abstract radio
    removing obsolete method previously used for estimating contiki's energy consumption
    wrapping tr1001 custom data byte delivery in MspMoteTimeEvent
    wrapping tr1001 byte delivery in MspMoteTimeEvent:s, to avoid scheduling problems when emulated mote is in lpm
    Better handling of cross-level radio packet. Minor code cleanup.
    requesting mote wakeup when receiving radio data + code cleanup (faster code)
    using MoteTimeEvent instead of TimeEvent: scheduled events are automatically removed when the mote is removed
    new event scheduling api
    event based mote interfaces + reimplemented cross level functionality for TR1001
    added method for checking if radio can receive data
    quick-fix: the generator assumes that the constructor accepts a mote object, this is the quickest fix currently
    renamed author to avoid compiler warnings
    changed simulation time from int to long to support very long simulations
    empty USART stateChanged handler
    using time events for following up on ongoing transmissions
    added udgm signal strength support
    updated tr1001 channels: fixed to -1
    debug output fix
    tr1001 implements a custom data radio. may deliver null packets is gcr decoding fails
    added output power indicator max value
    esb/tr1001 interface
    [cooja] memory: Removed AddressMemory class including all references
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    bugfix: only write to infomem if empty
    write node id to infomem
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updates for latest MSPSim memory API
    Updated MSPSim plugin for new memory model in MSPSim
    removed unnecessary overrided methods
    Deferred listening on memory until after mote id has been set
    updated to mspsims new watchpoint api
    bugfix in writing tinyos addresses
    using memory breakpoints instead of polling memory region during
    bootup
    three patches to simplify loading TinyOS firmwares (via MSPSim), contributed by Philipp Sommer
    removing obsolete method previously used for estimating contiki's energy consumption
    fix: mote id should not return memory value, but rather the configured value.
    using MoteTimeEvent instead of TimeEvent: scheduled events are automatically removed when the mote is removed
    milliseconds -> microseconds update
    renamed author to avoid compiler warnings
    added MAC address setting - setNodeID in SkyNode
    changed simulation time from int to long to support very long simulations
    scheduling events for persistent IDs instead of polling: more efficient
    bugfix for the TinyOS node id support
    persistent node ID defaults to true
    + removed some debugging output
    support for node IDs in variables node_id, TOS_NODE_ID or none
    bug fix: flash is not available on all platforms
    writing ID to flash memory
    removed contiki dependency variable: node_id
    esb and msp430-general interfaces
    bug fix:
    mote id reported changed every tick
    minor changes due to new setConfig method parameter
    added cooja; 'The Contiki OS Java Simulator'
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    re-implemented stack overflow monitoring, and user can now manually override the stack addresses for use with
    custom linker scripts
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    disallowed starting plugins/visualizer skins for non-compatible motes/simulations
    using new MotePlugin interface
    using mspsim's new window manager, not fully implemented yet
    changed simulation time from int to long to support very long simulations
    updated some references to old getLastLogMessages()
    removed public static JFrame frame variable. components should instead access the top parent container via getTopParentContainer()
    updated: setNote was removed from utils/StackUI
    msp430 specific plugins
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    reworked MspCodeWatcher plugin: using jsyntaxpane to display Contiki code, using tabs instead of splitpanes, easier to
    configure watch-/breakpoints, lots of bug fixes and minor improvements
    added breakpoint colors and user defined messages
    + shortcut for registering identical breakpoints for all motes of a particular mote type (currently only in popup menu)
    updated code watcher user interfaces: added support for disabling breakpoints without removing them + several minor fixes
    click on breakpoint to open source file
    msp430 specific plugins
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Added new annonation with which Cooja components (e.g. mote plugins) can be activated
    or deactivated depending on the given argument (e.g. mote). This may for
    example be used by a mote plugin that only accepts emulated motes, and that
    consequently should be hidden in other non-emulated motes' plugin menues.
    
    The new annotation is currently only used by the MspCodeWatcher and the DGRM visualizer skin.
    added temporary workaround that removes file duplicates, removed warning message
    supporting multiple path substituion rules in mspcodewatcher
    reworked MspCodeWatcher plugin: using jsyntaxpane to display Contiki code, using tabs instead of splitpanes, easier to
    configure watch-/breakpoints, lots of bug fixes and minor improvements
    Bug fix: only map beginning of path to source files + minor code cleanup
    Updated to allow MSPSim emulated nodes without debug information (the debug information generated by mspgcc4 is not yet supported).
    moved elf loading and debugging info to the mote type, rather than keeping a separate refence in each mote. this patch reduces both the memory usage of MSPSim-based motes, and the processing time to load them
    using new MotePlugin interface
    removed obsolete until method
    added experimental functionality for mapping between debug info paths and real source locations.
    
    useful when the firmware is not compiled on the cooja computer, or when the source files have been moved after compilation.
    
    this functionality is not yet saved with simulation configs
    bugfix: do not assume that the debugged mote is compiled from source
    moved handling of breakpoint configs from plugin to mote
    ui updates + extracted code to external classes
    temporary fix for catching new emulationexception
    + support for config file relative paths when saving simulations
    minor fixes + added experimental debugging function: run until function returns
    in paths, dirs are separated by '/'s only
    saving contiki relative paths if possible
    removed unmappable character
    removed unmappable character
    fixing paths
    reading source files from web server in applet mode
    update source info when breakpoints are altered
    new elf debug object access
    experimental: removed objdump dependency
    one touch expandable split panes
    removed external tool addr2line dependency
    new step method takes maximum cycle count argument
    msp430 specific plugins
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    extracted quick help interface to a separate file, moved plugin-specific quick help from quickhelp.txt to the plugins themselves
    disallowed starting plugins/visualizer skins for non-compatible motes/simulations
    avoid awt thread floods from mspsim cli output
    using new mspsim cli api
    using new MotePlugin interface
    added support for multiple msp command line listeners
    removing unsafe MoteID interface dependencies
    set default size
    refactored MSPMote setup + added plugin to access MSPSim CLI
    Java interface using the shell to collect and visualize sensor values from Sky nodes
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    bugfix: breakpoints should only trigger once
    
    updated watchpointmote method to return executable address, not wrapped in an object
    disable editor when no source code is showing
    documenting potential bug
    reworked MspCodeWatcher plugin: using jsyntaxpane to display Contiki code, using tabs instead of splitpanes, easier to
    configure watch-/breakpoints, lots of bug fixes and minor improvements
    faster repaint for large source files
    no source code repaints while simulation is running
    updated code watcher user interfaces: added support for disabling breakpoints without removing them + several minor fixes
    remember look and feel background color
    removed unmappable character
    removed debug output
    added syntax highlighting
    msp430 specific plugins
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    disallowed starting plugins/visualizer skins for non-compatible motes/simulations
    using new MotePlugin interface
    new step method takes maximum cycle count argument
    msp430 specific plugins
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    moved elf loading and debugging info to the mote type, rather than keeping a separate refence in each mote. this patch reduces both the memory usage of MSPSim-based motes, and the processing time to load them
    added experimental visualizer skin that shows the current source code of each mote in the simulation (for emulated mspmotes only)
    added support for multiple log interfaces
    fixed potential memory leak when motes are removed during a simulation
    visualizer skin updates: broke out traffic visualization from the udgm radio medium skin (the stand-alone traffic skin can be used with any radio medium), added a simple background grid skin and a mote position skin
    visualizer update: enabling selecting multiple visualizer skins
    a few simple visualizer skins
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed getGUI() method to getCooja(), to better reflect its purpose
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updates for latest MSPSim memory API
    Updated MSPSim plugin for new memory model in MSPSim
    mspsim motes now implements new WatchpointMote interface, simplified code
    updated to mspsims new watchpoint api
    minor bug fix: address may be null
    bugfixes: recalculate executable address after loading breakpoint + iterate over array, not list
    added breakpoint colors and user defined messages
    mspsim breakpoint wrapper with source code information (part of the code was extracted from the code watcher plugin)
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    fixed line endings
    removed unused libraries
    new name for arm:
    multi-path ray-tracer radio medium (mrm)
    Do not include ant runtime in classpath (avoids compilation warning with Ant 1.8+)
    deleting jar at clean
    cooja ant run automatically builds jars
    fixed ant targets causing jar files to have duplicate class files
    enabled debug information (source lines in stack traces)
    removed unused libraries
    new name for arm:
    multi-path ray-tracer radio medium (mrm)
    new name for arm:
    multi-path ray-tracer radio medium (mrm)
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added headers
    new name for arm:
    multi-path ray-tracer radio medium (mrm)
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added headers
    new name for arm:
    multi-path ray-tracer radio medium (mrm)
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added headers
    new name for arm:
    multi-path ray-tracer radio medium (mrm)
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    disallowed starting plugins/visualizer skins for non-compatible motes/simulations
    improved capture effect support in mrm: capture effect is effective if the latter transmission is stronger and no later than half the preamble
    * bugfixed and rewrote MRM to improve configurability
    * improved MRM GUI, including MRM visualizer skin that shows prr and rss
    * added experimental support for directional antennas
    added predefined obstacles (no need for external images)
    added headers
    new name for arm:
    multi-path ray-tracer radio medium (mrm)
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added headers
    new name for arm:
    multi-path ray-tracer radio medium (mrm)
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added headers
    new name for arm:
    multi-path ray-tracer radio medium (mrm)
    [cooja] Reformatted Visualizer and skins code
    [cooja] Automated code updates that do not make any functional changes
    - made loggers final
    - added some diamond interface cosmetic
    - shortened if-return statements
    - replaced size == 0 check with .isEmpty()
    [cooja] Added @Override annotations for Visualizer and skins
    [cooja] apps/mrm: Adapted MRM visualizer skin to show adequate
    information for multi-selections
    [cooja] plugins/Visualizer: Multi-mote selection functionality
    
    This adds multi-mote selection capabilities to the visualizer plugin:
    
    - [Ctrl + Mouse Drag]: Rectangular selection of multiple motes
    - [Ctrl + Mouse Click]: Add/Remove motes from current selection
    - Mouse Drag on any selected Mote: Move all currently selected motes
    
    Note: This changes previous behaviour of using Ctrl key.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    disallowed starting plugins/visualizer skins for non-compatible motes/simulations
    * bugfixed and rewrote MRM to improve configurability
    * improved MRM GUI, including MRM visualizer skin that shows prr and rss
    * added experimental support for directional antennas
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    improved capture effect support in mrm: capture effect is effective if the latter transmission is stronger and no later than half the preamble
    * bugfixed and rewrote MRM to improve configurability
    * improved MRM GUI, including MRM visualizer skin that shows prr and rss
    * added experimental support for directional antennas
    capture effect (3dB) + noise source radio support
    tracked components shown in tooltip
    minor changes and documentation regarding using random generators in Cooja
    added headers
    updated to support new multiabstraction radios
    
    + extending abstract medium
    + fixed set config in area viewer
    new name for arm:
    multi-path ray-tracer radio medium (mrm)
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    disallowed starting plugins/visualizer skins for non-compatible motes/simulations
    * bugfixed and rewrote MRM to improve configurability
    * improved MRM GUI, including MRM visualizer skin that shows prr and rss
    * added experimental support for directional antennas
    capture effect (3dB) + noise source radio support
    tracked components shown in tooltip
    minor changes and documentation regarding using random generators in Cooja
    updated since GUI.frame was removed
    
    + added predefined obstacles (no images needed)
    added headers
    updated to support new multiabstraction radios
    
    + extending abstract medium
    + fixed set config in area viewer
    new name for arm:
    multi-path ray-tracer radio medium (mrm)
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed getGUI() method to getCooja(), to better reflect its purpose
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    renamed radio method isReceiverOn() to isRadioOn()
    
    fixed bug in Msp802154Radio causing all packets from non-802154-radios to be dropped
    radio medium bugfix: a combination of changing channels while radio is off and with a nearby ongoing transmission, and
    then immediately turning on the radio caused it to incorrectly detect the ongoing transmission (bug reported by Beshr Al Nahas)
    updated doc
    improved capture effect support in mrm: capture effect is effective if the latter transmission is stronger and no later than half the preamble
    * bugfixed and rewrote MRM to improve configurability
    * improved MRM GUI, including MRM visualizer skin that shows prr and rss
    * added experimental support for directional antennas
    bug fix: signal strenghts may not be registered
    capture effect (3dB) + noise source radio support
    removed use of temporary (simulation-specific) plugins, instead plugins should be unregistered when no longer needed + added method called when radio medium is removed from simulation
    radio connection update: radio should not be removed from destinations, but instead flagged as interfered
    new radio medium api
    radio signalling moved to abstract radio medium
    minor changes and documentation regarding using random generators in Cooja
    negative channels can talk to any other channel (both rx and tx)
    added predefined obstacles (no need for external images)
    removed debug output
    added headers
    updated to support new multiabstraction radios
    
    + extending abstract medium
    + fixed set config in area viewer
    added get observable method
    new name for arm:
    multi-path ray-tracer radio medium (mrm)
    new name for arm:
    multi-path ray-tracer radio medium (mrm)
    new name for arm:
    multi-path ray-tracer radio medium (mrm)
    new name for arm:
    multi-path ray-tracer radio medium (mrm)
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    fixed line endings
    removed some stuff from the avrora jar (replaced with smaller version)
    added avrora-micaz node emulation
    Do not include ant runtime in classpath (avoids compilation warning with Ant 1.8+)
    removed some debug printout and added initial serial output on stdout
    only remove cooja-avrora jar when cleaning
    removed some stuff from the avrora jar
    added avrora-micaz node emulation
    changed to use MSPSim from tools/mspsim
    cooja ant run automatically builds jars
    fixed ant targets causing jar files to have duplicate class files
    added javadoc attr
    added javadoc target
    ant build file external from both cooja and mspsim
    [cooja] Implementation of former AvrMoteMemory dummy functions
    [cooja] memory: Removed MoteMemory class including all references
    [cooja] getMemory() now returns MemoryInterface
    
    Including code adaptions based on new memory methods to keep code compilable
    [cooja] Added MemoryLayout class to represent basic information about
    motes memory such as word size or endianess
    Cooja backwards compatibility with simulation files that uses non-Contiki Java package names
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed getGUI() method to getCooja(), to better reflect its purpose
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added memory monitor stubs to avr memory
    new cooja plugin for monitoring memory areas, similar to the log listener.
    removed execute flag of source files (avoids diff problems with egit)
    small optimizations and cleanups
    removed obsolete tick method
    the simulation object now handles the motetype configuration for motes; common functionality that was earlier implemented in each mote.
    
    this patch allows the simulator more freedom for hand-picking mote class loaders
    
    + some debug output in experimental ImportAppMoteType
    fixed MicaZ ID for contiki nodes by programming EEPROM
    fixed mote id for micaz
    improved support for MicaZ emulation - added variable watcher functionality
    micaz port now extends AbstractWakeupMote and schedules itself to execute every millisecond.
    
    still no memory access, so simulation of micaz motes remains limited
    removing unsafe MoteID interface dependencies
    added some basic functionality for cooja motes like save/load support, compile dialog, and configurable mote interfaces. some parts are still missing (memory r/w access and mote IDs)
    +
    code restructuring preparing for a generic emulated mote type layer in cooja (made avrora-based motes look more like mspsim-based motes)
    added serial output for MicaZ
    removed some debug printout and added initial serial output on stdout
    fixed firmware loading bug for micaz nodes
    implemented new mote type interfaces
    added radio communication between micaz nodes
    added avrora-micaz node emulation
    added MAC address setting - setNodeID in SkyNode
    bugfix: setting heap start to enable stack watch again
    changed simulation time from int to long to support very long simulations
    bugfix: mspsim cycle counter was cast to int, limiting maximum simulation time
    mspsim should warn at bad memory access (not activated yet)
    new interface format without passive/active
    refactored MSPMote setup + added plugin to access MSPSim CLI
    removed unused currentSimTime + fixed bug when nodes are added during simulations
    optimized some loops for increased performance and added runprof for profiling
    fixed cycles per sec to be more correct
    fixed bug in the delayed start of MSPSim motes
    serialport is an active interface
    fixed problem with the initialization order
    reading specified binary firmware from webserver
    single instruction ticks instead of entire milliseconds
    
    need optimizing
    get/set for elf module
    make elf module public
    remade msp init methods
    msp mote memory now contains map entries instead of name->address hash
    esb mote extends general msp mote
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    added new mote type method that returns the by-default used mote interfaces, as opposed to all compatible mote
    interfaces
    
    this allows the user to override default settings in the create-new-mote-type dialogs
    new experimental feature: possibility to change mote types when loading a simulation
    
    made compile dialogs only select mote interfaces specified in the loaded configuration
    added clean button to compile dialog, added compilation tip tab for msp motes
    added some basic functionality for cooja motes like save/load support, compile dialog, and configurable mote interfaces. some parts are still missing (memory r/w access and mote IDs)
    +
    code restructuring preparing for a generic emulated mote type layer in cooja (made avrora-based motes look more like mspsim-based motes)
    Added FreeBSD support.
    
    Made the Sky mote type use PATH_MAKE for the build procedure.
    made COOJA accept ELF files based on MAGIC ELF code instead of filename
    added simulation config backwards compatibility for msp motes
    compile dialog implementations
    Cooja backwards compatibility with simulation files that uses non-Contiki Java package names
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    renamed getGUI() method to getCooja(), to better reflect its purpose
    renamed main Java class of Cooja from GUI to Cooja.
    
    se.sics.cooja.GUI -> se.sics.cooja.Cooja
    
    this commit does not contain any functional changes, but may require external scripts to be updated
    such as Makefiles.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    reverted previous plugin name changes, instead build displayed names when menu is created
    Updated menu item name to indicate that a window is opened.
    Added simulation as argument to moteType.getConfigXML() instead of each MoteType storing a reference to the simulation.
    added mote attributes to various types of motes
    micaz port now extends AbstractWakeupMote and schedules itself to execute every millisecond.
    
    still no memory access, so simulation of micaz motes remains limited
    added some basic functionality for cooja motes like save/load support, compile dialog, and configurable mote interfaces. some parts are still missing (memory r/w access and mote IDs)
    +
    code restructuring preparing for a generic emulated mote type layer in cooja (made avrora-based motes look more like mspsim-based motes)
    abstraction level annotation
    removed some debug printout and added initial serial output on stdout
    + support for config file relative paths when saving simulations
    implemented new mote type interfaces
    added avrora-micaz node emulation
    forcing all commands to be parsed/executed by bash to simplify multiple make commands
    split command into arguments is unnecessary
    using updated messagelist
    compile from separate thread, not edt
    using target extensions (.sky/.esb) instead of generic .firmware
    more error checking + compile default choice
    bugfix: source file got lost when reloading msp motes
    removing debug output
    fix: local firmware file variable defined when compilation starts
    added clean option
    kill potentially unfinished compilation process when dialog is closed
    in paths, dirs are separated by '/'s only
    avoid using additional threads for writing to message list
    print compilation errors to console
    printing debug output when compilation fails
    saving contiki relative paths if possible
    fixed problem with the initialization order
    using firmware specified in applet attribute
    removed public static JFrame frame variable. components should instead access the top parent container via getTopParentContainer()
    added icon interface
    fixed restoring firmware file info during reload
    esb mote extends general msp mote
    [cooja] Implementation of former AvrMoteMemory dummy functions
    [cooja] memory: Removed AddressMemory class including all references
    [cooja] memory: Removed MoteMemory class including all references
    [cooja] memory: AvrMoteMemory and MspMoteMemory dummy implementation of MemoryInterface
    [cooja] Added @Override annotations for relevant files
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added memory monitor stubs to avr memory
    fixed MicaZ ID for contiki nodes by programming EEPROM
    fixed mote id for micaz
    added write to memory from COOJA + fixed byte ordering
    improved support for MicaZ emulation - added variable watcher functionality
    [cooja] memory: Removed AddressMemory class including all references
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    removing obsolete method previously used for estimating contiki's energy consumption
    fixed MicaZ ID for contiki nodes by programming EEPROM
    fixed mote id for micaz
    added some basic functionality for cooja motes like save/load support, compile dialog, and configurable mote interfaces. some parts are still missing (memory r/w access and mote IDs)
    +
    code restructuring preparing for a generic emulated mote type layer in cooja (made avrora-based motes look more like mspsim-based motes)
    milliseconds -> microseconds update
    quick-fix: the generator assumes that the constructor accepts a mote object, this is the quickest fix currently
    renamed author to avoid compiler warnings
    changed simulation time from int to long to support very long simulations
    ok
    implemented getDrift method
    new interface format without passive/active
    + energy method renamed
    fixed bug in the delayed start of MSPSim motes
    esb and msp430-general interfaces
    renamed 'user platform' to 'project directories'
    updated interface due to set config structure changes
    added cooja; 'The Contiki OS Java Simulator'
    More uip_ipaddr_t fixes.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    added some basic functionality for cooja motes like save/load support, compile dialog, and configurable mote interfaces. some parts are still missing (memory r/w access and mote IDs)
    +
    code restructuring preparing for a generic emulated mote type layer in cooja (made avrora-based motes look more like mspsim-based motes)
    added serial output for MicaZ
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    added new mote type method that returns the by default used mote interfaces, as opposed to all compatible mote
    interfaces
    
    this allows a user to override default settings in the create-new-mote-type dialogs
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    renamed radio method isReceiverOn() to isRadioOn()
    
    fixed bug in Msp802154Radio causing all packets from non-802154-radios to be dropped
    removing obsolete method previously used for estimating contiki's energy consumption
    improved micaz emulation - supports radio on/off states + moved over to used common emulation classes
     changed default tx power to maximum
    added some basic functionality for cooja motes like save/load support, compile dialog, and configurable mote interfaces. some parts are still missing (memory r/w access and mote IDs)
    +
    code restructuring preparing for a generic emulated mote type layer in cooja (made avrora-based motes look more like mspsim-based motes)
    added method for checking if radio can receive data
    removed some debug printout and added initial serial output on stdout
    added radio communication between micaz nodes
    re-enabled radio channels on sky motes
    increased buffer size for maximum sized packets including preamble
    changed simulation time from int to long to support very long simulations
    allow radio to flush before feeding with packet data
    using cc2420 packet converter for conversions between cc2420 and cooja
    new interface format without passive/active
    + energy method renamed
    fixed new byte based radio model for MSPSim based Sky node
    added missing variable initialization
    supporting new mspsim cc2420
    updated to latest version of MSPSim
    updated tr1001 channels: fixed to -1
    implementing custom data objects
    cc24240 packet converter (currently no actual conversion is performed due to already stripped cc2420 output)
    initial cc2420 wrapper interface
    
    supports signal strength and output power (indicator)
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    removed execute flag of source files (avoids diff problems with egit)
    removing obsolete method previously used for estimating contiki's energy consumption
    added some basic functionality for cooja motes like save/load support, compile dialog, and configurable mote interfaces. some parts are still missing (memory r/w access and mote IDs)
    +
    code restructuring preparing for a generic emulated mote type layer in cooja (made avrora-based motes look more like mspsim-based motes)
    added serial output for MicaZ
    removed some debug printout and added initial serial output on stdout
    added avrora-micaz node emulation
    new interface format without passive/active
    + energy method renamed
    added sky led interface (+ updated esb+contiki mote led interfaces)
    esb and msp430-general interfaces
    bug fix:
    mote id reported changed every tick
    minor changes due to new setConfig method parameter
    added cooja; 'The Contiki OS Java Simulator'
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    removing obsolete method previously used for estimating contiki's energy consumption
    micaz port now extends AbstractWakeupMote and schedules itself to execute every millisecond.
    
    still no memory access, so simulation of micaz motes remains limited
    disabled micaz clock until new wakeup interface is implemented
    added some basic functionality for cooja motes like save/load support, compile dialog, and configurable mote interfaces. some parts are still missing (memory r/w access and mote IDs)
    +
    code restructuring preparing for a generic emulated mote type layer in cooja (made avrora-based motes look more like mspsim-based motes)
    milliseconds -> microseconds update
    implemented new mote type interfaces
    added radio communication between micaz nodes
    changed simulation time from int to long to support very long simulations
    ok
    implemented getDrift method
    new interface format without passive/active
    + energy method renamed
    fixed bug in the delayed start of MSPSim motes
    esb and msp430-general interfaces
    renamed 'user platform' to 'project directories'
    updated interface due to set config structure changes
    added cooja; 'The Contiki OS Java Simulator'
    More uip_ipaddr_t fixes.
    Import of the contiki-2.x development code from the SICS internal CVS server
    removed some stuff from the avrora jar
    added jsyntaxpane library, to be used by MspCodeWatcher and the Contiki Test Editor plugins
    added cooja; 'The Contiki OS Java Simulator'
    licenses for libraries used by cooja
    added cooja; 'The Contiki OS Java Simulator'
    licenses for libraries used by cooja
    added jsyntaxpane library, to be used by MspCodeWatcher and the Contiki Test Editor plugins
    [cooja] plugins/VariableWatcher: Added swingx library to provide autocomplete support for variable names combobox in plugins/VariableWatcher
    [cooja] plugins/VariableWatcher: Added swingx library to provide autocomplete support for variable names combobox in plugins/VariableWatcher
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Made wpcapslip work with IPv6 enabled. Added -l option to turn on logging.
    Decrease TTL for forwarded packets
    A hack for tunneling IP packets from a pcap device to SLIP under MS Windows. Essentially a combination of the wpcap driver and the tunslip tool.
    * Line buffered stdout (also when pipe).
    * 6 should be 4 in size of DHCP messages.
    
    * -w option to sysctl.
    * Only copy first DNS server (correctly).
    * Different ifconfig command under fbsd.
    * General stuff for different baudrates:
    
        - ubr argument to slip_arch_int
    
        - macros for calculating ubr
    
        - argument -Bbaudrate to tools tunslip and scat
    * Check for ip_id zero senders and low cost update of zero ip_id.
    * Support for -DBAUDRATE=xxx
    * Minor mod for FreeBSD 6.
    Add 'cuad0' device.
    * Bump speed over serial to 115200 (Tmote sky only).
    
    * Linux fread workaround.
    
    * IP address detection.
    
    * Use SIGALRM rather than select timeout.
    Fancier tunslip with keepalives, address detection, route management,
    route cleanup.
    Oops. broken backwards compat.
    Add processing of command line options but stay backwards compatible.
    Import of userspace SLIP implementation.
    Updated include paths for the moved files under net/
    core/net/uip: Rename `uip_ethaddr` to `uip_lladdr`.
    
    There isn't really a good reason I can think of for these
    to be different between IPv4 and IPv6.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the docs and tools directories.
    The recent global change regarding htons allowed to remove this hack :-)
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Make wpcapslip compile with current uip headers
    Made wpcapslip work with IPv6 enabled. Added -l option to turn on logging.
    Decrease TTL for forwarded packets
    A hack for tunneling IP packets from a pcap device to SLIP under MS Windows. Essentially a combination of the wpcap driver and the tunslip tool.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Converted u8_t to uint8_t and u16_t to uint16_t in the docs and tools directories.
    Decrease TTL for forwarded packets
    A hack for tunneling IP packets from a pcap device to SLIP under MS Windows. Essentially a combination of the wpcap driver and the tunslip tool.
    A hack for tunneling IP packets from a pcap device to SLIP under MS Windows. Essentially a combination of the wpcap driver and the tunslip tool.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Decrease TTL for forwarded packets
    A hack for tunneling IP packets from a pcap device to SLIP under MS Windows. Essentially a combination of the wpcap driver and the tunslip tool.
    Added missing license file referenced in z1-bsl-* scripts
    Added support to program Z1 far memory with BSL
    added Zolertia Z1 tools
    Tmote Sky tools for Windows and Linux
    added Zolertia Z1 tools
    Tmote Sky tools for Windows and Linux
    added Zolertia Z1 tools
    Tmote Sky tools for Windows and Linux
    Added support for motelist and uploading to Z1 motes under Mac OSX
    Sky motelist support for MacOS X
    Fix clock.h warnings caused by multiple, conflicting documentation blocks of clock functions
    Updated include paths for the moved files under net/
    Travis-ci tweaks, added CPUREV to 01 regression test, needed by mbxxx platform
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Bugfix in clock_wait() declaration. Various style fixes.
    Add clock_delay_us and clock_set_seconds to clock.h. Modify clock_wait to use clock_time_t.
    Remove the troublesome avr/dev/delay.* files.
    Add PLATFORM_NAME and combine the confusing *_REVISION defines into a single PLATFORM_TYPE
    Added functions and example for deep sleep on mb851.
    
    The added function let a process to make the system go
    into deep sleep for maximum power saving.
    The udp-ipv6-example shows how to use these new functions.
    New Contiki port to STM32W108.
    ctimer moved from net/rime to sys/
    Added netstack init to native platform
    Initialize ctimers
    Changed the name of the 'serial' module to 'serial-line' to signify that the module is about lines of data from the serial port, not individual bytes, and to make sdcc happy
    Changed startup message
    Removed finally unnecessary cast.
    Added serial input from stdin, removed uIP initialization since uIP is not used anyway, made stdout unbuffered
    Reimplemented waiting with select() instead of nanosleep(). Let's see if Linux compiles this code now...
    Changed usleep() to nanosleep()
    Fixed compiler warnings
    Avoid compiler warnings.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fixed mbxxx platform
    Added weak symbols for STM32W exception handlers and other minor updates for the HAL.
    New HAL and SimpleMAC for STM32W108.
    Added elfloader machine dependent code for STM32W.
    Increased minimum stack size, because rpl uses it much more.
    New Contiki port to STM32W108.
    Travis-ci tweaks, added CPUREV to 01 regression test, needed by mbxxx platform
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    Added functions for deep sleep to mbxxx platform.
    Fixed mbxxx platform
    Fixed mbxxx platform
    Travis-ci tweaks, added CPUREV to 01 regression test, needed by mbxxx platform
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Set LED pins to output when MB851 is in sleep mode.
    
    This reduces power consumption.
    New Contiki port to STM32W108.
    Moved ninimal-ppp into backyard as it depends on the uIP ppp support.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Travis-ci tweaks, added CPUREV to 01 regression test, needed by mbxxx platform
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    Added a check for Coffee start address.
    Added a simple implementation of Coffee for STM32W108.
    Travis-ci tweaks, added CPUREV to 01 regression test, needed by mbxxx platform
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    New Contiki port to STM32W108.
    Travis-ci tweaks, added CPUREV to 01 regression test, needed by mbxxx platform
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    Added a simple implementation of Coffee for STM32W108.
    Travis-ci tweaks, added CPUREV to 01 regression test, needed by mbxxx platform
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    RANDOM_MAX changed to RANDOM_RAND_MAX.
    Fixed compile error raised after rand.c removal.
    New Contiki port to STM32W108.
    Added a dummy function instead of a NULL callback in the textentry widget because sdcc does not like NULL function pointers
    no message
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    Travis-ci tweaks, added CPUREV to 01 regression test, needed by mbxxx platform
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    New Contiki port to STM32W108.
    Added a dummy function instead of a NULL callback in the textentry widget because sdcc does not like NULL function pointers
    no message
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Travis-ci tweaks, added CPUREV to 01 regression test, needed by mbxxx platform
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    DOS EOL and indentation fixes (core/ apps/ cpu/)
    
    - Removed some DOS EOLs
    - Changed some tabs to spaces
    - Removed some trailing whitespaces
    
    Part of Pull Request #6
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    adding ducy cycling support to the stm32w-based platforms (patch by Chi-Anh La)
    New Contiki port to STM32W108.
    Travis-ci tweaks, added CPUREV to 01 regression test, needed by mbxxx platform
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    Added elfloader machine dependent code for STM32W.
    Moved and updated code for AT91SAM7S
    switched all users of cfs_seek(x,y) to cfs_seek(x,y,CFS_SEEK_SET)
    rtimer implementation (not well tested)
    sprintf that use strformat, so there's no need to pull in the newlib
    implementation.
    Build system improvements.
    Added ELF-loader code, should probably eventually end up in core/loader.
    Added some replacements for newlib's stdout.
    Added missing startup code.
    Some minor fixes.
    CPU specific files for the AT91SAM7S ARM-based microcontrollers
    Fixed mbxxx platform
    Added weak symbols for STM32W exception handlers and other minor updates for the HAL.
    New HAL and SimpleMAC for STM32W108.
    Added elfloader machine dependent code for STM32W.
    Increased minimum stack size, because rpl uses it much more.
    New Contiki port to STM32W108.
    Some little refactor
    Fixed mbxxx platform
    Set the RAM and flash size based on the CPU configuration for STM32W
    OBJECTDIR is defined by Makefile.include
    Support verbosity control when building for STM32W-based platforms
    Better error message in case of wrong CPUREV value
    Some little refactor
    Fixed mbxxx platform
    Makefile.include: support make clean all
    
    Historically $(OBJECTDIR) was created when Makefile.include is read.  A
    consequence is that combining "clean" with "all" (or any other build
    target) results in an error because the clean removes the object
    directory that is required to exist when building dependencies.
    Creating $(OBJECTDIR) on-demand ensures it is present when needed.
    
    Removed creation of $(OBJECTDIR) on initial read, and added an order-only
    dependency forcing its creation all Makefile* rules where the target is
    explicitly or implicitly in $(OBJECTDIR).
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    Fix: stm32w flasher for Ubuntu 12.04 and later
    Fix: handle stm32f-based serial interfaces (/dev/ttyACMx)
    fixes in mb851 and stm32w108: erroneous linking with mpu.o, conf file,
    more printouts in main when ipv6 is used, and a target for memory
    profiling taking stm's gnu.ld static stack size into account
    stm32w: added ability to upload and reset all connected boards, and login using MOTE=x
    avoid unnecessary symbols.c/h copying
    Simplified host OS platform detection in Makefiles
    Removed -fsigned-char GCC compiler options.
    Added functions and example for deep sleep on mb851.
    
    The added function let a process to make the system go
    into deep sleep for maximum power saving.
    The udp-ipv6-example shows how to use these new functions.
    Replaced make-empty-symbols with empty-symbols.[c|h]
    The symbol generation shell scripts cause CRLF issues on Windows/Cygwin again and again. Instead of fixing this yet again I opted to remove the symbol generation script at least for the "no symbols" scenario with two C source files to be copied.
    New HAL and SimpleMAC for STM32W108.
    STM32W flasher utilities for Linux and Windows merged into a single folder.
    'BTM' can be defined to flash devices already in bootloader mode.
    COFFEE_FILES changed to COFFEE.
    Added elfloader machine dependent code for STM32W.
    Added a simple implementation of Coffee for STM32W108.
    More safe detection of cygwin path.
    New Contiki port to STM32W108.
    Travis-ci tweaks, added CPUREV to 01 regression test, needed by mbxxx platform
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    New Contiki port to STM32W108.
    ctimer moved from net/rime to sys/
    Added netstack init to native platform
    Initialize ctimers
    Changed the name of the 'serial' module to 'serial-line' to signify that the module is about lines of data from the serial port, not individual bytes, and to make sdcc happy
    Changed startup message
    Removed finally unnecessary cast.
    Added serial input from stdin, removed uIP initialization since uIP is not used anyway, made stdout unbuffered
    Reimplemented waiting with select() instead of nanosleep(). Let's see if Linux compiles this code now...
    Changed usleep() to nanosleep()
    Fixed compiler warnings
    Avoid compiler warnings.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    New HAL and SimpleMAC for STM32W108.
    Added a simple implementation of Coffee for STM32W108.
    New Contiki port to STM32W108.
    Travis-ci tweaks, added CPUREV to 01 regression test, needed by mbxxx platform
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    New Contiki port to STM32W108.
    Added a dummy function instead of a NULL callback in the textentry widget because sdcc does not like NULL function pointers
    no message
    Import of the contiki-2.x development code from the SICS internal CVS server
    New HAL and SimpleMAC for STM32W108.
    Added a simple implementation of Coffee for STM32W108.
    New Contiki port to STM32W108.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Travis-ci tweaks, added CPUREV to 01 regression test, needed by mbxxx platform
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New Contiki port to STM32W108.
    Correct several doxygen tags (\file)
    Removing trailing whitespaces
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New Contiki port to STM32W108.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    [cpu/stm32w108] Doxygen grouping and group name fixes
    [doc] Various fixes for doxygen grouping etc.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New Contiki port to STM32W108.
    [cpu/stm32w108] Doxygen grouping and group name fixes
    [doc] Various fixes for doxygen grouping etc.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    Removing trailing whitespaces
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    [doc] Various fixes for doxygen grouping etc.
    Correct several doxygen tags (\file)
    Removing trailing whitespaces
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    Removed some warnings.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New Contiki port to STM32W108.
    [doc] Various fixes for doxygen grouping etc.
    Correct several doxygen tags (\file)
    Removing trailing whitespaces
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    Correct several doxygen tags (\file)
    Removing trailing whitespaces
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New Contiki port to STM32W108.
    [cpu/stm32w108] Doxygen grouping and group name fixes
    [doc] Various fixes for doxygen grouping etc.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    Fixed temperature ADC conversion bug on mbxxx.
    
    The conversion was made from an incorrect source when
    the GPIO pin was not PB7.
    Added functions and macros used to select the correct
    ADC channel.
    Added weak symbols for STM32W exception handlers and other minor updates for the HAL.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New Contiki port to STM32W108.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    New Contiki port to STM32W108.
    Fixed mbxxx platform
    Removing trailing whitespaces
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    Added functions for deep sleep to mbxxx platform.
    Added weak symbols for STM32W exception handlers and other minor updates for the HAL.
    New HAL and SimpleMAC for STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    New HAL and SimpleMAC for STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    [doc] Various fixes for doxygen grouping etc.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New Contiki port to STM32W108.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    Removed some warnings.
    New Contiki port to STM32W108.
    Correct several doxygen tags (\file)
    Removing trailing whitespaces
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New Contiki port to STM32W108.
    Correct several doxygen tags (\file)
    Removing trailing whitespaces
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    Fixed temperature ADC conversion bug on mbxxx.
    
    The conversion was made from an incorrect source when
    the GPIO pin was not PB7.
    Added functions and macros used to select the correct
    ADC channel.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    Correct several doxygen tags (\file)
    Removing trailing whitespaces
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    Correct several doxygen tags (\file)
    Removing trailing whitespaces
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    Added weak symbols for STM32W exception handlers and other minor updates for the HAL.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    New Contiki port to STM32W108.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New Contiki port to STM32W108.
    Correct several doxygen tags (\file)
    Removing trailing whitespaces
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    Fixed temperature ADC conversion bug on mbxxx.
    
    The conversion was made from an incorrect source when
    the GPIO pin was not PB7.
    Added functions and macros used to select the correct
    ADC channel.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New Contiki port to STM32W108.
    [doc] Various fixes for doxygen grouping etc.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    Added weak symbols for STM32W exception handlers and other minor updates for the HAL.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    Removed some warnings.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    Correct several doxygen tags (\file)
    Removing trailing whitespaces
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    Added weak symbols for STM32W exception handlers and other minor updates for the HAL.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    Added weak symbols for STM32W exception handlers and other minor updates for the HAL.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    Added weak symbols for STM32W exception handlers and other minor updates for the HAL.
    New HAL and SimpleMAC for STM32W108.
    Added elfloader machine dependent code for STM32W.
    Increased minimum stack size, because rpl uses it much more.
    New Contiki port to STM32W108.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    New Contiki port to STM32W108.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New Contiki port to STM32W108.
    STM32F10x headers from FWLib
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New Contiki port to STM32W108.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    New Contiki port to STM32W108.
    [doc] Various fixes for doxygen grouping etc.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    [doc] Various fixes for doxygen grouping etc.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    [doc] Various fixes for doxygen grouping etc.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    New Contiki port to STM32W108.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    Added functions and example for deep sleep on mb851.
    
    The added function let a process to make the system go
    into deep sleep for maximum power saving.
    The udp-ipv6-example shows how to use these new functions.
    New Contiki port to STM32W108.
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Made initialization function return a pointer to the MAC driver structure, to make initialization nicer
    Modified to use the new MAC layer API
    A 'null' MAC protocol that does not do anything
    Rime driver running over UDP
    Initial import of the experimental Rime code into the SourceForge CVS.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fixed STM32W radio to return RADIO_RESULT_INVALID_VALUE if trying to
    set a transmission power outside the valid range instead of using
    closest valid value.
    Implemented radio rx mode parameter for STM32W, changed the byte order
    of the 64 bit address to big-endian.
    Added radio parameter RADIO_PARAM_CCA_THRESHOLD for STM32W
    Added extended radio API implementation for STM32W
    Changed the name of the rimeaddr module to linkaddr
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    DOS EOL and indentation fixes (core/ apps/ cpu/)
    
    - Removed some DOS EOLs
    - Changed some tabs to spaces
    - Removed some trailing whitespaces
    
    Part of Pull Request #6
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    stm32w platforms: contikimac support in the Rime case, with EUI-64
    adding ducy cycling support to the stm32w-based platforms (patch by Chi-Anh La)
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    Added functions and example for deep sleep on mb851.
    
    The added function let a process to make the system go
    into deep sleep for maximum power saving.
    The udp-ipv6-example shows how to use these new functions.
    Added configuration in order to run Rime.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added definition of BAUD2UBR macro.
    New Contiki port to STM32W108.
    added handling function for checkin if uart is transmitting or receiving - patch by Klaus Stengel
    Changed the return value of the inpt handler function to int so that it can wake up the CPU from LPM
    Added support for configurable callbacks of uart1 input.
    UART1 driver
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    Now it is putchar that has to be redefined (instead of __io_putchar), like other platforms.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New Contiki port to STM32W108.
    STM32F10x headers from FWLib
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    New HAL and SimpleMAC for STM32W108.
    New Contiki port to STM32W108.
    New HAL and SimpleMAC for STM32W108.
    New HAL and SimpleMAC for STM32W108.
    Added missing libraries.
    New HAL and SimpleMAC for STM32W108.
    Added missing libraries.
    New HAL and SimpleMAC for STM32W108.
    Added missing libraries.
    New HAL and SimpleMAC for STM32W108.
    Added missing libraries.
    [cpu/arm] Added doxygen .txt files for gaining a minimum of documentation structure
    Missing file
    Moved and updated code for AT91SAM7S
    rtimer implementation (not well tested)
    sprintf that use strformat, so there's no need to pull in the newlib
    implementation.
    Build system improvements.
    CPU specific files for the AT91SAM7S ARM-based microcontrollers
    Synchronizing with my work copy.
    STM32F103 port
    STM32F103 port
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Makefile.include: support make clean all
    
    Historically $(OBJECTDIR) was created when Makefile.include is read.  A
    consequence is that combining "clean" with "all" (or any other build
    target) results in an error because the clean removes the object
    directory that is required to exist when building dependencies.
    Creating $(OBJECTDIR) on-demand ensures it is present when needed.
    
    Removed creation of $(OBJECTDIR) on initial read, and added an order-only
    dependency forcing its creation all Makefile* rules where the target is
    explicitly or implicitly in $(OBJECTDIR).
    Changed makefile. Removed extra slash
    Replaced make-empty-symbols with empty-symbols.[c|h]
    The symbol generation shell scripts cause CRLF issues on Windows/Cygwin again and again. Instead of fixing this yet again I opted to remove the symbol generation script at least for the "no symbols" scenario with two C source files to be copied.
    Use .u prefix for uploading to device and PROG variable to select programmer
    STM32F10x headers from FWLib
    STM32F103 port
    Missing file
    Removed warnings
    Added USB (specifically CDC-ACM) support
    rtimer implementation (not well tested)
    sprintf that use strformat, so there's no need to pull in the newlib
    implementation.
    Build system improvements.
    Added ELF-loader code, should probably eventually end up in core/loader.
    Added some replacements for newlib's stdout.
    Added missing startup code.
    Some minor fixes.
    CPU specific files for the AT91SAM7S ARM-based microcontrollers
    STM32F103 port
    Converted CRLF line endings to LF
    STM32F10x headers from FWLib
    Converted CRLF line endings to LF
    STM32F10x headers from FWLib
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    STM32F103 port
    CPU specific files for the AT91SAM7S ARM-based microcontrollers
    STM32F103 port
    Converted CRLF line endings to LF
    STM32F10x headers from FWLib
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    STM32F103 port
    Removed warnings
    rtimer implementation (not well tested)
    sprintf that use strformat, so there's no need to pull in the newlib
    implementation.
    Build system improvements.
    Synchronizing with my work copy.
    STM32F103 port
    Converted CRLF line endings to LF
    STM32F10x headers from FWLib
    Converted CRLF line endings to LF
    STM32F10x headers from FWLib
    STM32F103 port
    STM32F103 port
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    STM32F103 port
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Synchronizing with my work copy.
    STM32F103 port
    OpenOCD configuration for STM32F10xxx
    OpenOCD configuration for SAM7S. Should be merged into ../../common/openocd
    OpenOCD configuration for STM32F10xxx
    OpenOCD configuration for SAM7S. Should be merged into ../../common/openocd
    printf-style output intended for debugging. Uses less memory and is more flexible than the newlib implementation.
    rtimer implementation (not well tested)
    sprintf that use strformat, so there's no need to pull in the newlib
    implementation.
    Build system improvements.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    printf-style output intended for debugging. Uses less memory and is more flexible than the newlib implementation.
    Added ELF-loader code, should probably eventually end up in core/loader.
    Added some replacements for newlib's stdout.
    Added missing startup code.
    Some minor fixes.
    printf-style output intended for debugging. Uses less memory and is more flexible than the newlib implementation.
    Added ELF-loader code, should probably eventually end up in core/loader.
    Added some replacements for newlib's stdout.
    Added missing startup code.
    Some minor fixes.
    printf-style output intended for debugging. Uses less memory and is more flexible than the newlib implementation.
    Synchronizing with my work copy.
    printf-style output intended for debugging. Uses less memory and is more flexible than the newlib implementation.
    rtimer implementation (not well tested)
    sprintf that use strformat, so there's no need to pull in the newlib
    implementation.
    Build system improvements.
    Added ELF-loader code, should probably eventually end up in core/loader.
    Added some replacements for newlib's stdout.
    Added missing startup code.
    Some minor fixes.
    Webserver-nano: Add page load times, remove workaround code for bug in arm strformat.c, correct the double count of leading zeros there.
    Bug fix by Jonathan Chung
    printf-style output intended for debugging. Uses less memory and is more flexible than the newlib implementation.
    Added ELF-loader code, should probably eventually end up in core/loader.
    Added some replacements for newlib's stdout.
    Added missing startup code.
    Some minor fixes.
    printf-style output intended for debugging. Uses less memory and is more flexible than the newlib implementation.
    Added ELF-loader code, should probably eventually end up in core/loader.
    Added some replacements for newlib's stdout.
    Added missing startup code.
    Some minor fixes.
    Common USB functionality
    Added USB (specifically CDC-ACM) support
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Synchronizing with my work copy.
    Common USB functionality
    Added USB (specifically CDC-ACM) support
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Common USB functionality
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Synchronizing with my work copy.
    Common USB functionality
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Common USB functionality
    Added USB (specifically CDC-ACM) support
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Common USB functionality
    Synchronizing with my work copy.
    Common USB functionality
    Added USB (specifically CDC-ACM) support
    Common USB functionality
    Added USB (specifically CDC-ACM) support
    Use .u prefix for uploading to device and PROG variable to select programmer
    Synchronizing with my work copy.
    Common USB functionality
    Synchronizing with my work copy.
    Common USB functionality
    SCSI definitions
    Removed reference to obsolete header. Fixed HALTing when the SCSI handler fails.
    SCSI RBC
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    SCSI definitions
    USB mass storage class
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Synchronizing with my work copy.
    USB mass storage class
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    SCSI definitions
    USB mass storage class
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    USB mass storage class
    SCSI RBC
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    SCSI definitions
    Synchronizing with my work copy.
    Removed reference to obsolete header. Fixed HALTing when the SCSI handler fails.
    USB mass storage class
    SCSI RBC
    USB CDC-ACM class
    Added USB (specifically CDC-ACM) support
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    USB CDC-ACM class
    Added USB (specifically CDC-ACM) support
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    USB CDC-ACM class
    Added USB (specifically CDC-ACM) support
    USB CDC-ACM class
    Added USB (specifically CDC-ACM) support
    USB CDC-ACM class
    Added USB (specifically CDC-ACM) support
    USB CDC-ACM class
    Added USB (specifically CDC-ACM) support
    core/net/uip: Rename `uip_ethaddr` to `uip_lladdr`.
    
    There isn't really a good reason I can think of for these
    to be different between IPv4 and IPv6.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    USB CDC-Ethernet class
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Updated include paths for the moved files under net/
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    USB CDC-Ethernet class
    Updated include paths for the moved files under net/
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    USB CDC-Ethernet class
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    USB CDC-Ethernet class
    USB CDC-Ethernet class
    The file is generated from string-descriptors.xml, but since it probably won't change and not everyone has xsltproc I'm putting it in CVS.
    USB CDC-Ethernet class
    Added USB (specifically CDC-ACM) support
    Add CMSIS library code from ARM
    [cpu/arm] Added doxygen .txt files for gaining a minimum of documentation structure
    Add CMSIS library code from ARM
    Add CMSIS library code from ARM
    Add CMSIS library code from ARM
    Add CMSIS library code from ARM
    Add CMSIS library code from ARM
    Add CMSIS library code from ARM
    Add CMSIS library code from ARM
    Add CMSIS library code from ARM
    Common SD-card interface, implementing CFS using EFSL
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Common SD-card interface, implementing CFS using EFSL
    Common SD-card interface, implementing CFS using EFSL
    Moved and updated code for AT91SAM7S
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Common SD-card interface, implementing CFS using EFSL
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Common SD-card interface, implementing CFS using EFSL
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Common SD-card interface, implementing CFS using EFSL
    Moved and updated code for AT91SAM7S
    Removed warnings
    rtimer implementation (not well tested)
    sprintf that use strformat, so there's no need to pull in the newlib
    implementation.
    Build system improvements.
    Added ELF-loader code, should probably eventually end up in core/loader.
    Added some replacements for newlib's stdout.
    Added missing startup code.
    Some minor fixes.
    CPU specific files for the AT91SAM7S ARM-based microcontrollers
    Moved and updated code for AT91SAM7S
    Moved and updated code for AT91SAM7S
    rtimer implementation (not well tested)
    sprintf that use strformat, so there's no need to pull in the newlib
    implementation.
    Build system improvements.
    CPU specific files for the AT91SAM7S ARM-based microcontrollers
    Converted CRLF line endings to LF
    Moved and updated code for AT91SAM7S
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Moved and updated code for AT91SAM7S
    CPU specific files for the AT91SAM7S ARM-based microcontrollers
    Converted CRLF line endings to LF
    Moved and updated code for AT91SAM7S
    Moved and updated code for AT91SAM7S
    Added USB (specifically CDC-ACM) support
    Moved and updated code for AT91SAM7S
    Moved and updated code for AT91SAM7S
    Synchronizing with my work copy.
    Moved and updated code for AT91SAM7S
    Moved and updated code for AT91SAM7S
    CPU specific files for the AT91SAM7S ARM-based microcontrollers
    Converted CRLF line endings to LF
    Moved and updated code for AT91SAM7S
    Moved and updated code for AT91SAM7S
    Moved and updated code for AT91SAM7S
    Converted CRLF line endings to LF
    Moved and updated code for AT91SAM7S
    CPU specific files for the AT91SAM7S ARM-based microcontrollers
    Moved and updated code for AT91SAM7S
    CPU specific files for the AT91SAM7S ARM-based microcontrollers
    Converted CRLF line endings to LF
    Moved and updated code for AT91SAM7S
    rtimer implementation (not well tested)
    sprintf that use strformat, so there's no need to pull in the newlib
    implementation.
    Build system improvements.
    CPU specific files for the AT91SAM7S ARM-based microcontrollers
    Moved and updated code for AT91SAM7S
    rtimer implementation (not well tested)
    sprintf that use strformat, so there's no need to pull in the newlib
    implementation.
    Build system improvements.
    CPU specific files for the AT91SAM7S ARM-based microcontrollers
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Makefile.include: support make clean all
    
    Historically $(OBJECTDIR) was created when Makefile.include is read.  A
    consequence is that combining "clean" with "all" (or any other build
    target) results in an error because the clean removes the object
    directory that is required to exist when building dependencies.
    Creating $(OBJECTDIR) on-demand ensures it is present when needed.
    
    Removed creation of $(OBJECTDIR) on initial read, and added an order-only
    dependency forcing its creation all Makefile* rules where the target is
    explicitly or implicitly in $(OBJECTDIR).
    Replaced make-empty-symbols with empty-symbols.[c|h]
    The symbol generation shell scripts cause CRLF issues on Windows/Cygwin again and again. Instead of fixing this yet again I opted to remove the symbol generation script at least for the "no symbols" scenario with two C source files to be copied.
    Synchronizing with my work copy.
    Missing file
    Removed warnings
    Added USB (specifically CDC-ACM) support
    rtimer implementation (not well tested)
    sprintf that use strformat, so there's no need to pull in the newlib
    implementation.
    Build system improvements.
    Added ELF-loader code, should probably eventually end up in core/loader.
    Added some replacements for newlib's stdout.
    Added missing startup code.
    Some minor fixes.
    CPU specific files for the AT91SAM7S ARM-based microcontrollers
    Moved and updated code for AT91SAM7S
    rtimer implementation (not well tested)
    sprintf that use strformat, so there's no need to pull in the newlib
    implementation.
    Build system improvements.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Moved and updated code for AT91SAM7S
    CPU specific files for the AT91SAM7S ARM-based microcontrollers
    Converted CRLF line endings to LF
    Moved and updated code for AT91SAM7S
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Moved and updated code for AT91SAM7S
    CPU specific files for the AT91SAM7S ARM-based microcontrollers
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Moved and updated code for AT91SAM7S
    Moved and updated code for AT91SAM7S
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Moved and updated code for AT91SAM7S
    Removed warnings
    rtimer implementation (not well tested)
    sprintf that use strformat, so there's no need to pull in the newlib
    implementation.
    Build system improvements.
    Moved and updated code for AT91SAM7S
    CPU specific files for the AT91SAM7S ARM-based microcontrollers
    Moved and updated code for AT91SAM7S
    Removed warnings
    Moved and updated code for AT91SAM7S
    rtimer implementation (not well tested)
    sprintf that use strformat, so there's no need to pull in the newlib
    implementation.
    Build system improvements.
    CPU specific files for the AT91SAM7S ARM-based microcontrollers
    Moved and updated code for AT91SAM7S
    switched all users of cfs_seek(x,y) to cfs_seek(x,y,CFS_SEEK_SET)
    rtimer implementation (not well tested)
    sprintf that use strformat, so there's no need to pull in the newlib
    implementation.
    Build system improvements.
    Added ELF-loader code, should probably eventually end up in core/loader.
    Added some replacements for newlib's stdout.
    Added missing startup code.
    Some minor fixes.
    CPU specific files for the AT91SAM7S ARM-based microcontrollers
    Moved and updated code for AT91SAM7S
    CPU specific files for the AT91SAM7S ARM-based microcontrollers
    Moved and updated code for AT91SAM7S
    rtimer implementation (not well tested)
    sprintf that use strformat, so there's no need to pull in the newlib
    implementation.
    Build system improvements.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Moved and updated code for AT91SAM7S
    rtimer implementation (not well tested)
    sprintf that use strformat, so there's no need to pull in the newlib
    implementation.
    Build system improvements.
    OpenOCD configuration for SAM7S. Should be merged into ../../common/openocd
    CPU specific files for the AT91SAM7S ARM-based microcontrollers
    OpenOCD configuration for SAM7S. Should be merged into ../../common/openocd
    CPU specific files for the AT91SAM7S ARM-based microcontrollers
    OpenOCD configuration for SAM7S. Should be merged into ../../common/openocd
    CPU specific files for the AT91SAM7S ARM-based microcontrollers
    OpenOCD configuration for SAM7S. Should be merged into ../../common/openocd
    CPU specific files for the AT91SAM7S ARM-based microcontrollers
    OpenOCD configuration for SAM7S. Should be merged into ../../common/openocd
    OpenOCD configuration for SAM7S. Should be merged into ../../common/openocd
    CPU specific files for the AT91SAM7S ARM-based microcontrollers
    OpenOCD configuration for SAM7S. Should be merged into ../../common/openocd
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Older ELF-loader code, may not work any longer
    Added ELF-loader code, should probably eventually end up in core/loader.
    Added some replacements for newlib's stdout.
    Added missing startup code.
    Some minor fixes.
    added parameter to relocate method
    + renamed write_text() to write_rom()
    + added parameter to write_rom()
    Removed old elfloader.h and replaced with the current code (previously in elfloader-tmp.h)
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Older ELF-loader code, may not work any longer
    Added ELF-loader code, should probably eventually end up in core/loader.
    Added some replacements for newlib's stdout.
    Added missing startup code.
    Some minor fixes.
    moved elfloader-tmp.h -> elfloader.h
    Import of the contiki-2.x development code from the SICS internal CVS server
    Older ELF-loader code, may not work any longer
    Added ELF-loader code, should probably eventually end up in core/loader.
    Added some replacements for newlib's stdout.
    Added missing startup code.
    Some minor fixes.
    Older ELF-loader code, may not work any longer
    rtimer implementation (not well tested)
    sprintf that use strformat, so there's no need to pull in the newlib
    implementation.
    Build system improvements.
    Scatterweb MSB430 port.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Older ELF-loader code, may not work any longer
    switched all users of cfs_seek(x,y) to cfs_seek(x,y,CFS_SEEK_SET)
    Added ELF-loader code, should probably eventually end up in core/loader.
    Added some replacements for newlib's stdout.
    Added missing startup code.
    Some minor fixes.
    added support for elf32_rel relocation entries (earlier only elf32_rela)
    added support for rodata section
    
    (x86 compability)
    Removed old elfloader.h and replaced with the current code (previously in elfloader-tmp.h)
    Removed old elfloader.c and replaced with the current code (previously in elfloader-tmp.c)
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Older ELF-loader code, may not work any longer
    Added ELF-loader code, should probably eventually end up in core/loader.
    Added some replacements for newlib's stdout.
    Added missing startup code.
    Some minor fixes.
    [doc] added faulty esb and msp430 references
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Older ELF-loader code, may not work any longer
    switched all users of cfs_seek(x,y) to cfs_seek(x,y,CFS_SEEK_SET)
    Padded struct codeprop_tcphdr to 4 bytes, to get around different
    alignment on different platforms.
    Added ELF-loader code, should probably eventually end up in core/loader.
    Added some replacements for newlib's stdout.
    Added missing startup code.
    Some minor fixes.
    updated reference to "elfloader-tmp"
    fixed compiler warnings
    Simple program for loading a Contiki ELF binary over the network
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Older ELF-loader code, may not work any longer
    Added ELF-loader code, should probably eventually end up in core/loader.
    Added some replacements for newlib's stdout.
    Added missing startup code.
    Some minor fixes.
    Simple program for loading a Contiki ELF binary over the network
    Import of the contiki-2.x development code from the SICS internal CVS server
    aducrf101: Add stack pointer sampling, to help debug overflows
    Add IAR compiler support for ADuCRF101
    Add initial ADuCRF101 CPU support
    Add ADuCRF101 library code from Analog Devices
    Add IAR compiler support for ADuCRF101
    Implement rtimers for ADuCRF101
    Add ADuCRF101 radio driver
    Add initial ADuCRF101 CPU support
    Implement rtimers for ADuCRF101
    Add initial ADuCRF101 CPU support
    Add ADuCRF101 library code from Analog Devices
    Implement rtimers for ADuCRF101
    Add initial ADuCRF101 CPU support
    Add ADuCRF101 library code from Analog Devices
    Add IAR compiler support for ADuCRF101
    Add platform LED driver
    Add button sensor support (BOOT button)
    Add initial EV-ADuCRF101MKxZ platform support
    Add initial ADuCRF101 CPU support
    Add ADuCRF101 library code from Analog Devices
    Add initial ADuCRF101 CPU support
    Add ADuCRF101 library code from Analog Devices
    Implement rtimers for ADuCRF101
    Add initial ADuCRF101 CPU support
    Add ADuCRF101 library code from Analog Devices
    Fix aducrf101 builds with GCC 4.9+
    
    Mixing LTO and libraries requires the use of gcc-ar instead of ar.
    See https://gcc.gnu.org/wiki/LinkTimeOptimizationFAQ?action=recall&rev=5#ar.2C_nm_and_ranlib
    Add IAR compiler support for ADuCRF101
    Implement rtimers for ADuCRF101
    Add ADuCRF101 radio driver
    Add initial ADuCRF101 CPU support
    Add IAR compiler support for ADuCRF101
    Add initial ADuCRF101 CPU support
    Fix radio hangups when trying to transmit with radio off.
    
    The border-router tries to transmit and do other stuff after turning
    the radio off, and the radio driver didn't handle that very well.
    With this fix, it's no longer necessary to reset the border router
    after starting tunslip6.
    Add sniffer support to ADuCRF101
    
    This works with the examples/cc2538dk/sniffer/ project and the
    corresponding "sensniff" host-side tool.
    Move RF RX into its own process
    Add ADuCRF101 radio driver
    Add dummy uart0/uart1 headers that some examples require
    Implement rtimers for ADuCRF101
    Add initial ADuCRF101 CPU support
    Add ADuCRF101 library code from Analog Devices
    Add initial ADuCRF101 CPU support
    Add ADuCRF101 library code from Analog Devices
    Add dummy uart0/uart1 headers that some examples require
    Implement rtimers for ADuCRF101
    Add initial ADuCRF101 CPU support
    Add ADuCRF101 library code from Analog Devices
    Add initial ADuCRF101 CPU support
    Add ADuCRF101 library code from Analog Devices
    Add ADuCRF101 library code from Analog Devices
    [cpu] removed faulty group names
    Add ADuCRF101 library code from Analog Devices
    Add ADuCRF101 library code from Analog Devices
    [cpu/arm] removed free-standing @addtogroup command
    Add ADuCRF101 library code from Analog Devices
    Add ADuCRF101 library code from Analog Devices
    Fix ADI radio engine driver and add hook for packet reception
    Add ADuCRF101 radio driver
    Add ADuCRF101 library code from Analog Devices
    Add ADuCRF101 library code from Analog Devices
    Add ADuCRF101 library code from Analog Devices
    Add ADuCRF101 library code from Analog Devices
    Add IAR compiler support for ADuCRF101
    Add ADuCRF101 library code from Analog Devices
    Add ADuCRF101 library code from Analog Devices
    Add ADuCRF101 library code from Analog Devices
    aducrf101: Rearrange stack and heap to maximize available stack space
    
    Stack now starts at the top of RAM, heap starts after BSS, and
    they grow towards each other.
    Add initial ADuCRF101 CPU support
    aducrf101: Rearrange stack and heap to maximize available stack space
    
    Stack now starts at the top of RAM, heap starts after BSS, and
    they grow towards each other.
    Add initial ADuCRF101 CPU support
    cpu/native: Add file-backed simulated EEPROM to native cpu.
    
    This patch removes a defunct EEPROM implementation from the native
    platform and provides a new EEPROM implementation for the native cpu.
    The previous implementation appears to be vestigal.
    
    This is useful for testing code which uses the EEPROM without running
    the code on the actual hardware.
    
    By default the code will create a new temporary file as the EEPROM
    backing, reinitializing each time. If you would like to preserve the
    EEPROM contents or specify a specific EEPROM file to use, you can set the
    `CONTIKI_EEPROM` environment variable to the name of the EEPROM file you
    wish to use instead. If it already exists, its contents will be used.
    If it does not already exist, it will be created and initialized by
    filling it with `0xFF`---just like a real EEPROM.
    
    A new example is also included, which was used to verify the correctness
    of the implementation. It can easily be used to verify the EEPROM
    implementations of other targets.
    Update cpu/native/Makefile.native
    platform/minimal-net: Better, more seamless support for OS X.
    
    This patch enables automatic route setup and cleanup when
    starting and stopping the minimal-net target on OS X.
    
    Both IPv4 and IPv6 are supported.
    
    Using the minimal-net target on OS X was absolute hell
    before I came up with this patch. Now it is painless.
    Make gcc default LD, and allow override with LD_OVERRIDE
    Fixed LDFLAGS for cross-compiling of "native"
    Enable `native` target for cross-compiling -
    
    by now it would have worked if you set CC via
    command line (e.g. `make CC=clang`, though it
    wouldn't work when CC is set in the platform
    makefile which includes `Makefile.native`.
    Fixed TARGET=native compilation issues on Darwin.
    Replaced make-empty-symbols with empty-symbols.[c|h]
    The symbol generation shell scripts cause CRLF issues on Windows/Cygwin again and again. Instead of fixing this yet again I opted to remove the symbol generation script at least for the "no symbols" scenario with two C source files to be copied.
    Patch by Gideon Ernst: use explicit $(CONTIKI) path instead of implicit ../../ path to the mknmlist script
    Make sure that symbols.c is included in every native cpu build, not just the native target
    Added dummy watchdog.c to allow compiling and running code that calls the watchdog functions
    Added a WERROR variable, which, if set, causes -Werror flags to be turned on
    Added generation of symbols.c if CORE is set
    Forgot to remove -Werror
    Removed -Werror -pedantic and -std=c99 because of problems with compiling under Linux
    Fixed compiler warnings to make code compile with gcc's -pedantic switch
    Added -Werror to turn compiler warnings into errors to ensure that code always compile without warnings
    Improved map file naming consistency.
    Factored out setup directory search path for source files into Makefile.include.
    
    - All compilers used support the -I option for setting an include search directory.
    
    - The Contiki source tree follows the (common) approach of placing declarations (in headerf iles) in the same directory as definitions (in source files).
    
    As a result it makes sense to use the -I compiler option for just the same set of directories used for the vpath gnumake directive.
    
    Note: I checked several builds but nevertheless one or the other might need some additional adjustsments. Sorry for the inconvenience.
    Factored out setup directory search path for source files into Makefile.include.
    
    - Search target specific directories before CPU specific directories.
    - Search CPU specific directories before generic directories.
    
    Note: I checked several builds but nevertheless one or the other might need some additional adjustsments. Sorry for the inconvenience.
    CPU agnostic implementation of the platform specific part of the multi-threading library. Uses fibers on Windows and the ucontext functions on other platforms.
    Moved tapdev*.[ch] from platform/netsim/net and platform/minimal-net/net to cpu/native/net
    Added native CPU to avoid reliance on x86-specific code for the native and netsim platforms
    Added elfloader-stub, symbols generation
    Redefined LD to gcc to make things compile. Removed generation of symbols.[ch] due to problematic builds (seemingly neverending loops).
    Added generation of symbols.[ch]
    Removed out-commented stuff from Makefiles
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Allow VC++ to be used as alternative to GCC for building in the WIN32 target.
    TODOs:
    - Update README
    - Add dependency handling
    - Add rtimersupport
    Turned rtimer_arch_now() from a (one line) function into a macro.
    Added #include that #defines NULL
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    Added *experimental* module for sending raw (non-routed) packets from Contiki. The name of the module is likely to change.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Made MT stack size configurable
    Avoid deprecated error on Darwin.
    The dependency on the ucontext functions has the potential to keep others from successfully using cpu/native for other platforms. As the Contiki multithreading library typically isn't used at all it's not worth the trouble. So we just limit it to Windows and Linux - where it is known to not only build but actually work. If someone needs the Contiki cpu/native multithreading library on another platform he's certainly welcome to add that platform - hopefully by just activating the codepath that we now made exclusive for Linux for his platform.
    Allow VC++ to be used as alternative to GCC for building in the WIN32 target.
    TODOs:
    - Update README
    - Add dependency handling
    - Add rtimersupport
    Ooops, that was one level of indirection to much.
    CPU agnostic implementation of the platform specific part of the multi-threading library. Uses fibers on Windows and the ucontext functions on other platforms.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    If rtimer_arch_now() is mapped to clock_time() it seems reasonable to map RTIMER_ARCH_SECOND to CLOCK_CONF_SECOND for consistency reasons.
    Turned rtimer_arch_now() from a (one line) function into a macro.
    Added rtimer_arch_now prototype
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    MSP430 definitions
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Exit on watchdog reboot call
    removed unnecessary inclusion
    Added dummy watchdog.c to allow compiling and running code that calls the watchdog functions
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    CPU agnostic implementation of the platform specific part of the multi-threading library. Uses fibers on Windows and the ucontext functions on other platforms.
    Moved wpcap*.[ch] from platform/minimal-net/net to cpu/native/net.
    Added Cygwin networking support using WinPcap.
    Added a Win32 CFS (Contiki File System) service. The opendir() parameter "/" is mapped to the directory containing contiki.exe. That allows easy access to *.prg and *.dsc files which are supposed to reside in the same directory.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Added the const keyword to functions that use the tcpip_set_outputfunc(), which now takes a const argument
    core/net/uip: Rename `uip_ethaddr` to `uip_lladdr`.
    
    There isn't really a good reason I can think of for these
    to be different between IPv4 and IPv6.
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    Fix minimal-net webserver6, broken after native border router changes.
    Add wpcap for cygwin/Windows native border router
    Change ctimer startup order, add multihop to wpcap and minimal-net platform.
    Add RPL nodes and border router to minimal-net platform (cygwin only)
    The recent global change regarding htons allowed to remove this hack :-)
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Block NS echoback from interface
    ipv6 fixes and formatting
    There seems no reason for the whole set_ethaddr() thing if uip_setethaddr() doesn't get called after all.
    wpcap update for uIPv6
    Fixed problems with IPv6-enabled Windows XP
    Added "usual" comments.
    Made include paths consistent.
    Allow to build both with Cygwin and VC++.
    Source reformatting only.
    Fixed compiler warnings to make code compile with gcc's -pedantic switch
    Made use of exit handler.
    Changed packet drivers from services to plain processes.
    
    Now tcpip_output() is a function pointer that is supposed to be set via the macro tcpip_set_outputfunc(). Packet drivers do so on process startup.
    
    Thus if there are several packet drivers in a Contiki system the one started last is the one actually used. This behaviour is especially useful for the 'IP forwarding' "meta" packet driver.
    Made driver compilable with both Cygwin and VC++ (and usable for platform/win32 by using logging API).
    Fixed stupid bug. I have no idea how I didn't run into this one for months ! The development platforms have 400-600 bytes buffer size. So every incoming 1500 packet overwrote ~ 1000 bytes of uIP variables. And this happens very easily as every packet coming in for the Windows IP stack is seen by uIP as well (and discarded because of the wrong IP address).
    Don't rely on gcc's auto-import feature.
    Minor code formatting change.
    Now that Contiki has a htonl() we need the same workaround here that we already have for htons().
    Moved wpcap*.[ch] from platform/minimal-net/net to cpu/native/net.
    Added Cygwin networking support using WinPcap.
    Minor source consistency improvement.
    Added automatic detection of Ethernet address - this makes the WinPcap packet driver service kind of working :-)
    
    First the WinPcap library is used to enumerate the existing interfaces to make sure that only those are taken into account which the WinPcap library is able to actually work with. Their IP addresses are compaired against the one on the cmdline to find the desired interface.
    
    Then the IP Helper API is used to enumerate the existing adapters to find out the the Ethernet address of the desired adapter. This Ethernet address is then used by Contiki too.
    Moved error_exit() to the Win32 Contiki Core.
    Improved error handling.
    Added network support to the Win32 platform.
    
    Network I/O is done using the usual suspect - which is WinPcap. There's no need for the WinPcap Developer's Pack! An ordinary WinPcap install - as it is i.e. part of Ethereal - is sufficient.
    
    The code is still under development. But as I recently successfully opened HTML pages with the Contiki web browser I thought it might be the right time for an initial commit.
    Several minor consistency improvements.
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    Tried to make reference to Microsoft TechNet Forum thread more persistent.
    Added infos on Vista loopback connection handling.
    Minor docu update.
    Added some info on the wpcap driver.
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Updated include paths for the moved files under net/
    native/net/tapdev: Fix for new `UIP_CONF_IPV6` handling.
    tapdev: Fix using an uninitialized buffer
    tapdev: Log to stderr; add tracing
    
    Use stderr for logging to avoid polluting stdout.
    Add some DEBUG tracing.
    platform/minimal-net: Better, more seamless support for OS X.
    
    This patch enables automatic route setup and cleanup when
    starting and stopping the minimal-net target on OS X.
    
    Both IPv4 and IPv6 are supported.
    
    Using the minimal-net target on OS X was absolute hell
    before I came up with this patch. Now it is painless.
    platform/minimal-net: Implement better idle behavior.
    
    The minimal-net target, as currently written, wakes up the
    CPU every millisecond to check for packets, and will only
    react in real-time to input from stdin. If you are running
    this on a laptop battery, your battery will quickly drain.
    
    This change allows the CPU to idle when there is literally
    nothing to do while still being responsive to input from
    stein and/or incoming packets. This fix should significantly
    improve performance while significantly improving power
    usage. Win-win.
    
    Also added `_xassert()` implementation so that the contiki-
    provided `assert()` macro will work properly when used
    on this platform.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    Changed packet drivers from services to plain processes.
    
    Now tcpip_output() is a function pointer that is supposed to be set via the macro tcpip_set_outputfunc(). Packet drivers do so on process startup.
    
    Thus if there are several packet drivers in a Contiki system the one started last is the one actually used. This behaviour is especially useful for the 'IP forwarding' "meta" packet driver.
    Moved tapdev*.[ch] from platform/netsim/net and platform/minimal-net/net to cpu/native/net
    Added route addition and removal when starting and exiting
    - Moved all ARP handling to service wrapper (and narrowed interface to low level code).
    
    - Adjusted packet forwarding to moving all ARP handling to service wrapper.
    
    - Unified general coding/formatting style.
    Added uip-over-mesh, bugfixes, printing of statistics, renamed init() function to netsim_init()
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Added the const keyword to functions that use the tcpip_set_outputfunc(), which now takes a const argument
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    Modification to tapdev for IPv6 support
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Updated include paths for the moved files under net/
    Added the const keyword to functions that use the tcpip_set_outputfunc(), which now takes a const argument
    native/net/tapdev: Fix for new `UIP_CONF_IPV6` handling.
    platform/minimal-net: Better, more seamless support for OS X.
    
    This patch enables automatic route setup and cleanup when
    starting and stopping the minimal-net target on OS X.
    
    Both IPv4 and IPv6 are supported.
    
    Using the minimal-net target on OS X was absolute hell
    before I came up with this patch. Now it is painless.
    platform/minimal-net: Implement better idle behavior.
    
    The minimal-net target, as currently written, wakes up the
    CPU every millisecond to check for packets, and will only
    react in real-time to input from stdin. If you are running
    this on a laptop battery, your battery will quickly drain.
    
    This change allows the CPU to idle when there is literally
    nothing to do while still being responsive to input from
    stein and/or incoming packets. This fix should significantly
    improve performance while significantly improving power
    usage. Win-win.
    
    Also added `_xassert()` implementation so that the contiki-
    provided `assert()` macro will work properly when used
    on this platform.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Debugged autoconf for ethernet
    *** empty log message ***
    Modification to tapdev for IPv6 support
    More uip_ipaddr_t fixes.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    Changed packet drivers from services to plain processes.
    
    Now tcpip_output() is a function pointer that is supposed to be set via the macro tcpip_set_outputfunc(). Packet drivers do so on process startup.
    
    Thus if there are several packet drivers in a Contiki system the one started last is the one actually used. This behaviour is especially useful for the 'IP forwarding' "meta" packet driver.
    Moved tapdev*.[ch] from platform/netsim/net and platform/minimal-net/net to cpu/native/net
    - Removed unnecessary PROCESS_POLLHANDLER(pollhandler()) as pollhandler is explicitly called.
    
    - Moved all ARP handling to service wrappers (and narrowed interface to low level code).
    
    - Unified general coding/formatting style.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    Changed packet drivers from services to plain processes.
    
    Now tcpip_output() is a function pointer that is supposed to be set via the macro tcpip_set_outputfunc(). Packet drivers do so on process startup.
    
    Thus if there are several packet drivers in a Contiki system the one started last is the one actually used. This behaviour is especially useful for the 'IP forwarding' "meta" packet driver.
    Moved wpcap*.[ch] from platform/minimal-net/net to cpu/native/net.
    - Removed unnecessary PROCESS_POLLHANDLER(pollhandler()) as pollhandler is explicitly called.
    
    - Moved all ARP handling to service wrappers (and narrowed interface to low level code).
    
    - Unified general coding/formatting style.
    Added Cygwin networking support using WinPcap.
    Added network support to the Win32 platform.
    
    Network I/O is done using the usual suspect - which is WinPcap. There's no need for the WinPcap Developer's Pack! An ordinary WinPcap install - as it is i.e. part of Ethereal - is sufficient.
    
    The code is still under development. But as I recently successfully opened HTML pages with the Contiki web browser I thought it might be the right time for an initial commit.
    Added a Win32 CFS (Contiki File System) service. The opendir() parameter "/" is mapped to the directory containing contiki.exe. That allows easy access to *.prg and *.dsc files which are supposed to reside in the same directory.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    platform/minimal-net: Implement better idle behavior.
    
    The minimal-net target, as currently written, wakes up the
    CPU every millisecond to check for packets, and will only
    react in real-time to input from stdin. If you are running
    this on a laptop battery, your battery will quickly drain.
    
    This change allows the CPU to idle when there is literally
    nothing to do while still being responsive to input from
    stein and/or incoming packets. This fix should significantly
    improve performance while significantly improving power
    usage. Win-win.
    
    Also added `_xassert()` implementation so that the contiki-
    provided `assert()` macro will work properly when used
    on this platform.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    Changed packet drivers from services to plain processes.
    
    Now tcpip_output() is a function pointer that is supposed to be set via the macro tcpip_set_outputfunc(). Packet drivers do so on process startup.
    
    Thus if there are several packet drivers in a Contiki system the one started last is the one actually used. This behaviour is especially useful for the 'IP forwarding' "meta" packet driver.
    Copied tapdev from minimal-net to gtk.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Added the const keyword to functions that use the tcpip_set_outputfunc(), which now takes a const argument
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    Add RPL nodes and border router to minimal-net platform (cygwin only)
    wpcap update for uIPv6
    Changed packet drivers from services to plain processes.
    
    Now tcpip_output() is a function pointer that is supposed to be set via the macro tcpip_set_outputfunc(). Packet drivers do so on process startup.
    
    Thus if there are several packet drivers in a Contiki system the one started last is the one actually used. This behaviour is especially useful for the 'IP forwarding' "meta" packet driver.
    Moved wpcap*.[ch] from platform/minimal-net/net to cpu/native/net.
    Added Cygwin networking support using WinPcap.
    Added a Win32 CFS (Contiki File System) service. The opendir() parameter "/" is mapped to the directory containing contiki.exe. That allows easy access to *.prg and *.dsc files which are supposed to reside in the same directory.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Updated include paths for the moved files under net/
    native/net/tapdev: Fix for new `UIP_CONF_IPV6` handling.
    platform/minimal-net: Implement better idle behavior.
    
    The minimal-net target, as currently written, wakes up the
    CPU every millisecond to check for packets, and will only
    react in real-time to input from stdin. If you are running
    this on a laptop battery, your battery will quickly drain.
    
    This change allows the CPU to idle when there is literally
    nothing to do while still being responsive to input from
    stein and/or incoming packets. This fix should significantly
    improve performance while significantly improving power
    usage. Win-win.
    
    Also added `_xassert()` implementation so that the contiki-
    provided `assert()` macro will work properly when used
    on this platform.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    tapdev update for uIPv6
    Made tapdev and wpcap driver similiar making up a "driver template".
    Fixed copy&paste bug.
    That PROCESS_EXITHANDLER() thing was after all kind of overengineered...
    Changed packet drivers from services to plain processes.
    
    Now tcpip_output() is a function pointer that is supposed to be set via the macro tcpip_set_outputfunc(). Packet drivers do so on process startup.
    
    Thus if there are several packet drivers in a Contiki system the one started last is the one actually used. This behaviour is especially useful for the 'IP forwarding' "meta" packet driver.
    Adjusted packet forwarding to moving all ARP handling to service wrapper.
    Added missing adjustment to recent change on moving all ARP handling to service wrappers.
    Copied tapdev from minimal-net to gtk.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Updated include paths for the moved files under net/
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    Fix minimal-net webserver6, broken after native border router changes.
    Add wpcap for cygwin/Windows native border router
    Add RPL nodes and border router to minimal-net platform (cygwin only)
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    ipv6 fixes and formatting
    wpcap update for uIPv6
    Added missing IPBUF definition needed for IPv6
    Made include paths consistent.
    That PROCESS_EXITHANDLER() thing was after all kind of overengineered...
    Changed packet drivers from services to plain processes.
    
    Now tcpip_output() is a function pointer that is supposed to be set via the macro tcpip_set_outputfunc(). Packet drivers do so on process startup.
    
    Thus if there are several packet drivers in a Contiki system the one started last is the one actually used. This behaviour is especially useful for the 'IP forwarding' "meta" packet driver.
    Added Cygwin networking support using WinPcap.
    Moved wpcap*.[ch] from platform/minimal-net/net to cpu/native/net.
    - Removed unnecessary PROCESS_POLLHANDLER(pollhandler()) as pollhandler is explicitly called.
    
    - Moved all ARP handling to service wrappers (and narrowed interface to low level code).
    
    - Unified general coding/formatting style.
    Added Cygwin networking support using WinPcap.
    More uip_ipaddr_t fixes.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add file needed for rpl border router
    Include file needed for slip rpl-border-router build
    unistd.h doesn't seem to be necessary but breaks the MS VC build.
    cpu/native: Add file-backed simulated EEPROM to native cpu.
    
    This patch removes a defunct EEPROM implementation from the native
    platform and provides a new EEPROM implementation for the native cpu.
    The previous implementation appears to be vestigal.
    
    This is useful for testing code which uses the EEPROM without running
    the code on the actual hardware.
    
    By default the code will create a new temporary file as the EEPROM
    backing, reinitializing each time. If you would like to preserve the
    EEPROM contents or specify a specific EEPROM file to use, you can set the
    `CONTIKI_EEPROM` environment variable to the name of the EEPROM file you
    wish to use instead. If it already exists, its contents will be used.
    If it does not already exist, it will be created and initialized by
    filling it with `0xFF`---just like a real EEPROM.
    
    A new example is also included, which was used to verify the correctness
    of the implementation. It can easily be used to verify the EEPROM
    implementations of other targets.
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Build static Ethernet drivers directly from source.
    Build static Ethernet drivers directly from source.
    Removed unused variable.
    Some fine tuning after the recent general modularization.
    Some fine tuning after the recent general modularization.
    Add the explicit list of modules, since we cannot do auto-dependency management of them
    Made a module out of the core/ctk code
    Moved the 6502 custom rules into its own Makefile.customrules-6502 file
    Added 6502 driver for WIZnet W5100 in MACRAW mode.
    Suppress some usual warnings.
    Support the recently added verbosity control.
    Makefile.include: support make clean all
    
    Historically $(OBJECTDIR) was created when Makefile.include is read.  A
    consequence is that combining "clean" with "all" (or any other build
    target) results in an error because the clean removes the object
    directory that is required to exist when building dependencies.
    Creating $(OBJECTDIR) on-demand ensures it is present when needed.
    
    Removed creation of $(OBJECTDIR) on initial read, and added an order-only
    dependency forcing its creation all Makefile* rules where the target is
    explicitly or implicitly in $(OBJECTDIR).
    Removed some more old RCS tags from the Contiki source tree.
    We actually need PROJECT_OBJECTFILES and PROJECT_LIBRARIES for retro builds too.
    Moved from last cc65 release (2.13.3) to recent cc65 snapshot (2.13.9).
    
    Relevant cc65 changes...
    
    General:
    - The compiler generates "extended" dependency info (like gcc) so there's no need for postprocessing whatsoever :-)
    - The linker is very pernickety regarding the ordering of cmdline options so a custom linker rule is necessary :-(
    
    Apple2:
    - The various memory usage scenarios aren't specified anymore via separate linker configs but via defines overriding default values in the builtin linker config.
    
    Atari:
    - The builtin linker config allows to override the start addr so there no more need for a custom linker config.
    - The C library comes with POSIX directory access. So there's no more need for for a custom coding.
    
    CBM:
    - The C library comes with POSIX directory access. So there's no more need for for a custom coding.
    Made cc65 build compatible with make.exe from GnuWin32 and cmd.exe. We just live without the phony targets when building with cmd.exe - the next cc65 release will make the whole sed thingy obsolete anyway :-)
    Implemented cfs_opendir() and friends for CBMs based on cc65's cbm_opendir() and friends.
    There's no point in pulling in cfs-posix-dir.c if the POSIX functions it depends on are dummies anyway.
    Allow cc65 ethernet drivers to be loaded statically instead of dynamically. This saved quite some space in scenarios without additional cc65 drivers to be loaded for i.e. a mouse because in those scenarios the cc65 module loader isn't necessary. And without the module loader typically the cc65 heap manager isn't necessary.
    Allow 6502 ctk programs (all running in non-window mode) to exit the Contiki process by calling LOAD_UNLOAD().
    - cc65 2.13. allows to define all necessary paths through the single env var CC65_HOME.
    - cc65 2.13. allows to override the stacksize from the linker command line thus eliminating the need for linker configs maintained by Contiki.
    - cc65 2.13. integrates the startup code with the library. In 2.12. the startup code pulled in main(). Now main() is supposed to pull in the startup code. But  if main() resides itself in a library (as with Contiki) then nothing is pulled in at all :-(. The workaround is to pull in main() explicitly through the new option -u (working like the same GCC option).
    cc65 generates dependency files having the list of prerequisites start with a tab character.
    
    The processing done in the canned command sequence FINALIZE_DEPENDENCY brings this tab character to the beginning of the line making the empty rule look like a command.
    
    Therefore we replace the tab character in question with a blank.
    Replaced classic approach of generating dependency files via rule with generating them as side effect of generating object files. The issue with "No rule to make target ..." is solved as suggested in http://make.paulandlesley.org/autodep.html.
    
    At least with gcc (and cc65) the dependency files are generated without an additional run of the C compiler. This is especially beneficial on Cygwin because of the fork() performance issue.
    Removed '!' as gnumake already adds '.'.
    Removed unused variable.
    Implement cfs API on preprocessor level using POSIX functions..
    Splitted POSIX based cfs implementation to avoid pulling in potentially large POSIX directory I/O functions without needing them at all.
    Added generic ctk mouse implementation based on cc65 mouse drivers.
    Added general ctk support to the cc65 build.
    Moved stuff into sys subdir to clean up the apple2enh dir (and because the corresponding shared res. cpu stuff is in the sys dir as well).
    Made error_exit() implementation target-specific.
    Made error_exit() implementation target-specific.
    Added LAN91C96 driver.
    Added global error_exit() and config read function to build.
    Added (default) log implementation for cc65 targets.
    No reason to not just compile petsciiconv.c for all cc65 targets.
    Allow the webserver and telnetd examples to build.
    Generic Ethernet driver for cc65 targets. The actual hardware driver is loaded as relocatable module.
    Fixed recent change.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Added a Contiki clock_time() implementation based on the cc65 clock() implementation.
    Factored out setup directory search path for source files into Makefile.include.
    
    - All compilers used support the -I option for setting an include search directory.
    
    - The Contiki source tree follows the (common) approach of placing declarations (in headerf iles) in the same directory as definitions (in source files).
    
    As a result it makes sense to use the -I compiler option for just the same set of directories used for the vpath gnumake directive.
    
    Note: I checked several builds but nevertheless one or the other might need some additional adjustsments. Sorry for the inconvenience.
    Factored out setup directory search path for source files into Makefile.include.
    
    - Search target specific directories before CPU specific directories.
    - Search CPU specific directories before generic directories.
    
    Note: I checked several builds but nevertheless one or the other might need some additional adjustsments. Sorry for the inconvenience.
    Added Multithreading support to the cc65 targets based on the Contiki 1.x C64 implementation with the following changes:
    - Added support for the function parameter.
    - Removed support for preemption because:
      - No other current implementation does so.
      - Preemption support would make the code at least target-dependent or it wouldn't work at all (as on plain Apple2 machines without timer interrupt).
    Structured the cc65 makefile like all the other makefiles in the Contiki 2.x build system.
    Used SED to replace the assembler sources with the objects in the dependency file generated by the cc65 compiler. This allows to hide the assembler sources from GNU make which solves several issues. Now the cc65 toolchain behaves very similiar to gcc from the GNU make perspective.
    Replaced the PROJECT_OBJECTFILES hack with puting the Contiki library (containing contiki-main.o) and the cc65 libary into a cc65 "library group" which allows mutual crossreferences between the libraries in the group.
    Consistently use curly brackets for function calls (and add the same disclaimer as used in "my" other makefiles).
    Allow to build the statically linked telnet-server and webserver examples using cc65.
    Added an initial Makefile for the cc65 tool chain (www.cc65.org). For now it allows to build the statically linked hello-world example.
    Build static Ethernet drivers directly from source.
    Updated cc65 URL.
    Copied 'contiki_arg[c|v]' from 'native' to the other desktop targets.
    
    - On the retro targets support for 'contiki_arg[c|v]' is optional as accesing arg[c|v] is rather expensive.
    Several minor consistency improvements.
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    Build static Ethernet drivers directly from source.
    Some fine tuning after the recent general modularization.
    Some fine tuning after the recent general modularization.
    Moved the 6502 custom rules into its own Makefile.customrules-6502 file
    Added UIP_CONF_LLH_LEN.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Added configurations of the new resolver.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Removed the obsolete MAC_CONF_CHANNEL_CHECK_RATE (now replaced with NETSTACK_CONF_RDC_CHANNEL_CHECK_RATE)
    The recent change in core/net/mac/lpp.c requires CLOCK_SECOND to be at least twice NETSTACK_RDC_CHANNEL_CHECK_RATE in order to compile.
    Fixed 'Modulo operation with zero' error by making sure that NETSTACK_CONF_RDC_CHANNEL_CHECK_RATE is not smaller than CLOCK_CONF_SECOND.
    Removed UIP_CONF_PLAIN_BUFFER again now that the pointer indirection to uip_buf was removed again.
    Have the cc65 based targets stay with the "old" plain uip_buf.
    Made the maximum number of concurrent TCP connections a highlevel config value.
    Made MAC_CONF_CHANNEL_CHECK_RATE identical to CLOCK_CONF_SECOND in order to make sure it isn't larger - which causes 'divide by zero' errors.
    Moved PFS header from Apple2 directory to 6502 directory as we're going to have other PFS implementations.
    Allow 6502 ctk programs (all running in non-window mode) to exit the Contiki process by calling LOAD_UNLOAD().
    Don't activate UDP checksums on 6502 targets as the inline-assembler implementation in cpu/6502/net/uip_arch.c is broken!
    Activate uIP logging when "high level config" logging is enabled.
    Adjusted cfs_seek() offset type configuration macro name.
    Adjusted CFS implementations to the recent CFS API changes.
    Added cfs_seek to the preprocessor level implementation of the cfs API.
    I'd better don't try to be smart by including read access into every write access - as the cc65 CBM POSIX file I/O library doesn't allow for both reading and writing at all.
    Changed the name of UIP_CONF_TCP_FORWARD to UIP_CONF_IP_FORWARD since forwarding is done at the IP level
    Fixed minor copy&paste issue.
    Added high level config macro for the new compiletime forwarding option.
    Added naive snprintf support.
    Introduced yet another high-level config macro.
    Allow to implement cfs API on preprocessor level using a "pfs" (platform file system) by setting a new high-level config macro.
    Implement cfs API on preprocessor level using POSIX functions..
    Introduced some more high-level config macros.
    Introduced high-level macros to be set on the make command line. They allow easy configuration of Contiki for typical (cc65-)project scenarios.
    Added general ctk support to the cc65 build.
    Use C99 type to typedef Contiki types.
    Replaced most type definitions with reference to stdint.h.
    Renamed 6502-conf.h into 6502def.h to be in line with similiar files created in the meanwhile and added C99 names.
    Make it possible to subscribe to DMA events.
    Improvement batch.
    dma transfer support.
    Platform-specific devices.
    cooja radio driver (uip + rime)
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add somewhat more support to use different mouse drivers.
    
    - The default mouse driver is now always named 'contiki.mou'.
    - Alternative mouse drivers are present in the disk images.
    - Users can select their mouse driver by renaming the files.
    Remove tab chars from retro C sources.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    cc65 2.13. features a default-per-target mouse driver so there's no need to deal with their names in Contiki anymore.
    Use cfs filesystem to allow for specific implementations.
    Added generic ctk mouse implementation based on cc65 mouse drivers.
    dummy mtarch
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed retro 'dhcp-client' to 'ipconfig' as it can as well be used for interactive manual configuration.
    Added a Contiki app basically combining apps/netconf and apps/dhcp. It's a 6502 specific app as it doesn't configure the running uIP instance but instead writes to the 'contiki.cfg' configuration file used by 6502 apps to configure uIP.
    Renamed retro 'dhcp-client' to 'ipconfig' as it can as well be used for interactive manual configuration.
    Activated Platform-specific File System (PFS) for the C64/C128 by default for all programs with R/W CFS access.
    Added a Contiki app basically combining apps/netconf and apps/dhcp. It's a 6502 specific app as it doesn't configure the running uIP instance but instead writes to the 'contiki.cfg' configuration file used by 6502 apps to configure uIP.
    Renamed retro 'dhcp-client' to 'ipconfig' as it can as well be used for interactive manual configuration.
    Added a Contiki app basically combining apps/netconf and apps/dhcp. It's a 6502 specific app as it doesn't configure the running uIP instance but instead writes to the 'contiki.cfg' configuration file used by 6502 apps to configure uIP.
    Added mouse support for the Atari.
    Another small addition for platform 'Atari XL'.
    Renamed retro 'dhcp-client' to 'ipconfig' as it can as well be used for interactive manual configuration.
    Added cc65 target 'atari' for Atari 8-bit machines. This addition was triggered by exsistence of http://www.atari8ethernet.com/.
    Updated include paths for the moved files under net/
    Show current IP config on startup.
    core/net/uip: Rename `uip_ethaddr` to `uip_lladdr`.
    
    There isn't really a good reason I can think of for these
    to be different between IPv4 and IPv6.
    Adjusted names.
    Renamed retro 'dhcp-client' to 'ipconfig' as it can as well be used for interactive manual configuration.
    Remove tab chars from retro C sources.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    Use some defined event constant instead of just 0.
    Updated API for uiplib and resolv to use uip_ipaddr_t instead of uint16_t.
    Programs using CFS should #include "cfs.h" ;-)
    Used CFS instead of POSIX.
    Added a Contiki app basically combining apps/netconf and apps/dhcp. It's a 6502 specific app as it doesn't configure the running uIP instance but instead writes to the 'contiki.cfg' configuration file used by 6502 apps to configure uIP.
    Removed SELFSTART_PROCESS as AUTOSTART_ENABLE generally serves that purpose - and AUTOSTART_ENABLE gets already set as required :-)
    Allow to optionally (triggered with SELFSTART_PROCESS) self start the application.
    Applications have been modified to support !UIP_UDP and !CTK_CONF_WINDOWCLOSE.
    More uip_ipaddr_t fixes.
    More uip_ipaddr_t fixes and removal of the last occurances of WITH_ETHERNET.
    More uip_ipaddr_t fixes.
    More uip_ipaddr_t fixes and removal of the last occurances of WITH_UIP.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Renamed retro 'dhcp-client' to 'ipconfig' as it can as well be used for interactive manual configuration.
    Activated Platform-specific File System (PFS) for the C64/C128 by default for all programs with R/W CFS access.
    Now that the C64 mouse driver works we can activate the mouse support for this target :-)
    Added a Contiki app basically combining apps/netconf and apps/dhcp. It's a 6502 specific app as it doesn't configure the running uIP instance but instead writes to the 'contiki.cfg' configuration file used by 6502 apps to configure uIP.
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Renamed retro 'dhcp-client' to 'ipconfig' as it can as well be used for interactive manual configuration.
    Added a Contiki app basically combining apps/netconf and apps/dhcp. It's a 6502 specific app as it doesn't configure the running uIP instance but instead writes to the 'contiki.cfg' configuration file used by 6502 apps to configure uIP.
    Now that we started adding files to the CVS which are normally generated with a 'save...' make goal we can remove the DEFAULT_TARGET mechanism altogether and just add Makefile.target files.
    Many project Makefiles build just one Contiki binary. Up to now the name of this binary was only available to the 'all' goal as prerequisite. So it was possible to create a non-project-specific rule to i.e. load that binary into the target device.
    
    Therefore I introduced the make variable CONTIKI_PROJECT. Now a typical project Makefile starts with:
    
    CONTIKI_PROJECT = hello-world
    all: $(CONTIKI_PROJECT)
    replaced blink with blinker that uses more sensors
    ESB examples
    Added an example application to show the usage of the Contiki Multi-threading library.
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    Generic Ethernet driver for cc65 targets. The actual hardware driver is loaded as relocatable module.
    Changed packet drivers from services to plain processes.
    
    Now tcpip_output() is a function pointer that is supposed to be set via the macro tcpip_set_outputfunc(). Packet drivers do so on process startup.
    
    Thus if there are several packet drivers in a Contiki system the one started last is the one actually used. This behaviour is especially useful for the 'IP forwarding' "meta" packet driver.
    Moved wpcap*.[ch] from platform/minimal-net/net to cpu/native/net.
    - Removed unnecessary PROCESS_POLLHANDLER(pollhandler()) as pollhandler is explicitly called.
    
    - Moved all ARP handling to service wrappers (and narrowed interface to low level code).
    
    - Unified general coding/formatting style.
    Added Cygwin networking support using WinPcap.
    Added network support to the Win32 platform.
    
    Network I/O is done using the usual suspect - which is WinPcap. There's no need for the WinPcap Developer's Pack! An ordinary WinPcap install - as it is i.e. part of Ethereal - is sufficient.
    
    The code is still under development. But as I recently successfully opened HTML pages with the Contiki web browser I thought it might be the right time for an initial commit.
    Added a Win32 CFS (Contiki File System) service. The opendir() parameter "/" is mapped to the directory containing contiki.exe. That allows easy access to *.prg and *.dsc files which are supposed to reside in the same directory.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Enhanced Ethernet drivers.
    
    Made Ethernet drivers easier to consume by assembly programs.
    * Replaced function pointers with JMP instructions.
    * Provide return values additionally via Carry flag.
    
    Reset Ethernet chips on initialization.
    Both for the CS8900A and the W5100 the data sheets just say that
    the RESET bit is automatically cleared after the RESET. This may
    be interpreted in two ways:
    1) There's no need to be afraid of reading the RESET bit as 1 and
    unintentionally trigger a RESET by writing it back after ORing in
    some other bit.
    2) The RESET process isn't complete before the RESET bit hasn't
    become 0 again.
    It's impossible for me to empirically falsify the latter option
    as the drivers are supposed to work on faster machines than the
    ones I have access to. And if the RESET process includes things
    like oscillators then the time to complete the RESET could differ
    even between multiple exemplars of the same chip. Therefore I
    opted to presume the latter option.
    However that means a non-exsistent chip may cause an infinite
    loop while waiting for the RESET bit to be cleared so I finally
    added code to detect the presence of the Ethernet chips. There's
    a risk of a chip being locked up in a way that makes the detection
    fail - and therefore the RESET not being performed. This catch-22
    needs to be solved by the user doing a hard RESET.
    Build static Ethernet drivers directly from source.
    Adjustment to cc65 change.
    Saved six more bytes ;-)
    Added 6502 driver for WIZnet W5100 in MACRAW mode.
    Saved another byte ;-)
    Optimized CS8900A driver for speed and size.
    
    - Speed: The primary byte copy loops are reduzed to the bare minimum by adjusting the base pointer 'ptr' and loop register 'y' in such a way that the 'y' overflow matches the low byte of the loop size.
    
    - Size: Factored out all repeated code into subroutines. Introduced a loop for setting the MAC address.
    
    Additional minor changes:
    
    - Activate frame reception as last step of initialization after CS8900A configuration.
    
    - Properly set internal address bits used by the CS8900A.
    The current cc65 build doesn't require this workaround anymore.
    Removed some more old RCS tags from the Contiki source tree.
    Do not reject frames with a length exactly equal to the uIP bufer size.
    Fixed typo.
    Take in account that the C64 Retro Replay clockport needs to be activated in order to work with the RR-Net Ethernet card.
    Minor optimization.
    Minor change in comment.
    Generic Cirrus Logic CS8900A driver for cc65 targets. The driver is intended to be loaded dynamically as relocatable module. It modifies itself to accomodate different Ethernet IO address locations:
    - C64 TFE ($DE00)
    - C64 RRNet ($DE08)
    - Apple2 Uther ($C0x0)
    Fixed hardware detection.
    
    The previous chip detection was inspired by the old IP65 driver code. For some reason it didn't work as expected. The new code is simpler and based on this statement in the chip datasheet: "The upper byte always reads as 33h and can be used to help determine the I/O location of the LAN91C96."
    Enhanced Ethernet drivers.
    
    Made Ethernet drivers easier to consume by assembly programs.
    * Replaced function pointers with JMP instructions.
    * Provide return values additionally via Carry flag.
    
    Reset Ethernet chips on initialization.
    Both for the CS8900A and the W5100 the data sheets just say that
    the RESET bit is automatically cleared after the RESET. This may
    be interpreted in two ways:
    1) There's no need to be afraid of reading the RESET bit as 1 and
    unintentionally trigger a RESET by writing it back after ORing in
    some other bit.
    2) The RESET process isn't complete before the RESET bit hasn't
    become 0 again.
    It's impossible for me to empirically falsify the latter option
    as the drivers are supposed to work on faster machines than the
    ones I have access to. And if the RESET process includes things
    like oscillators then the time to complete the RESET could differ
    even between multiple exemplars of the same chip. Therefore I
    opted to presume the latter option.
    However that means a non-exsistent chip may cause an infinite
    loop while waiting for the RESET bit to be cleared so I finally
    added code to detect the presence of the Ethernet chips. There's
    a risk of a chip being locked up in a way that makes the detection
    fail - and therefore the RESET not being performed. This catch-22
    needs to be solved by the user doing a hard RESET.
    Build static Ethernet drivers directly from source.
    Adjustment to cc65 change.
    Saved another byte ;-)
    - Optimized LAN91C96 driver for speed and size.
    
    - Speed: The primary byte copy loops are reduzed to the bare minimum by adjusting the base pointer 'ptr' and loop register 'y' in such a way that the 'y' overflow matches the low byte of the loop size.
    
    - Introduced a loop for setting the MAC address.
    
    Additional minor fix:
    
    - Properly start self modification with first location.
    The current cc65 build doesn't require this workaround anymore.
    Removed some more old RCS tags from the Contiki source tree.
    Do not reject frames with a length exactly equal to the uIP bufer size.
    Fixed LAN91C96 driver.
    Generic SMSC LAN91C96 driver for cc65 targets. The driver is intended to be loaded dynamically as relocatable module. It modifies itself to accomodate different Ethernet IO address locations:
    - ETH64 ($DE10)
    - Apple2 LANceGS ($C0x0)
    Enhanced Ethernet drivers.
    
    Made Ethernet drivers easier to consume by assembly programs.
    * Replaced function pointers with JMP instructions.
    * Provide return values additionally via Carry flag.
    
    Reset Ethernet chips on initialization.
    Both for the CS8900A and the W5100 the data sheets just say that
    the RESET bit is automatically cleared after the RESET. This may
    be interpreted in two ways:
    1) There's no need to be afraid of reading the RESET bit as 1 and
    unintentionally trigger a RESET by writing it back after ORing in
    some other bit.
    2) The RESET process isn't complete before the RESET bit hasn't
    become 0 again.
    It's impossible for me to empirically falsify the latter option
    as the drivers are supposed to work on faster machines than the
    ones I have access to. And if the RESET process includes things
    like oscillators then the time to complete the RESET could differ
    even between multiple exemplars of the same chip. Therefore I
    opted to presume the latter option.
    However that means a non-exsistent chip may cause an infinite
    loop while waiting for the RESET bit to be cleared so I finally
    added code to detect the presence of the Ethernet chips. There's
    a risk of a chip being locked up in a way that makes the detection
    fail - and therefore the RESET not being performed. This catch-22
    needs to be solved by the user doing a hard RESET.
    Remove tab chars from retro C sources.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    Allow cc65 ethernet drivers to be loaded statically instead of dynamically. This saved quite some space in scenarios without additional cc65 drivers to be loaded for i.e. a mouse because in those scenarios the cc65 module loader isn't necessary. And without the module loader typically the cc65 heap manager isn't necessary.
    Use cfs filesystem to allow for specific implementations.
    Make use of fastcall.
    So we're finally back at reducing the memory footprint be avoiding to pull in large C-library enitities.
    Make use of global error_exit().
    Minor adjustment to predominant coding style.
    Generic Ethernet driver for cc65 targets. The actual hardware driver is loaded as relocatable module.
    Bugfixes, updates
    Debug output
    Documentation fixes
    Renamed rimebuf_hdrextend() to rimebuf_hdralloc()
    Fixed debug output
    Added *_close() function to all Rime modules
    API change for Rime: *_setup() renamed to *_open()
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Renamed ulayer -> callbacks
    Initial import of the experimental Rime code into the SourceForge CVS.
    Added *experimental* module for sending raw (non-routed) packets from Contiki. The name of the module is likely to change.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    Make use of fastcall.
    Generic Ethernet driver for cc65 targets. The actual hardware driver is loaded as relocatable module.
    CPU agnostic implementation of the platform specific part of the multi-threading library. Uses fibers on Windows and the ucontext functions on other platforms.
    Moved wpcap*.[ch] from platform/minimal-net/net to cpu/native/net.
    Added Cygwin networking support using WinPcap.
    Added a Win32 CFS (Contiki File System) service. The opendir() parameter "/" is mapped to the directory containing contiki.exe. That allows easy access to *.prg and *.dsc files which are supposed to reside in the same directory.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Enhanced Ethernet drivers.
    
    Made Ethernet drivers easier to consume by assembly programs.
    * Replaced function pointers with JMP instructions.
    * Provide return values additionally via Carry flag.
    
    Reset Ethernet chips on initialization.
    Both for the CS8900A and the W5100 the data sheets just say that
    the RESET bit is automatically cleared after the RESET. This may
    be interpreted in two ways:
    1) There's no need to be afraid of reading the RESET bit as 1 and
    unintentionally trigger a RESET by writing it back after ORing in
    some other bit.
    2) The RESET process isn't complete before the RESET bit hasn't
    become 0 again.
    It's impossible for me to empirically falsify the latter option
    as the drivers are supposed to work on faster machines than the
    ones I have access to. And if the RESET process includes things
    like oscillators then the time to complete the RESET could differ
    even between multiple exemplars of the same chip. Therefore I
    opted to presume the latter option.
    However that means a non-exsistent chip may cause an infinite
    loop while waiting for the RESET bit to be cleared so I finally
    added code to detect the presence of the Ethernet chips. There's
    a risk of a chip being locked up in a way that makes the detection
    fail - and therefore the RESET not being performed. This catch-22
    needs to be solved by the user doing a hard RESET.
    Build static Ethernet drivers directly from source.
    Adjustment to cc65 change.
    Adjust shadow register to full 8kB RX buffer.
    Avoid access to the address register during auto-increment.
    
    It cannot be ruled out that access to the address register triggers
    an address auto-increment. Therefore a temporary address register
    shadow is introduced to replace the access to the address regsiter.
    
    Additionally there are several minor beautifications.
    Added missing fixup & removed wait loop from poll.
    Added 6502 driver for WIZnet W5100 in MACRAW mode.
    Avoid compiler warnings.
    Updated include paths for the moved files under net/
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    Adjusted hacky inline assembler to reference uip_aligned_buf instead of uip_buf - some day I'll need to clean up that (btw bogus) code.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Updated include paths for the moved files under net/
    Remove tab chars from retro C sources.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Made include paths consistent.
    Generic Ethernet driver for cc65 targets. The actual hardware driver is loaded as relocatable module.
    That PROCESS_EXITHANDLER() thing was after all kind of overengineered...
    Changed packet drivers from services to plain processes.
    
    Now tcpip_output() is a function pointer that is supposed to be set via the macro tcpip_set_outputfunc(). Packet drivers do so on process startup.
    
    Thus if there are several packet drivers in a Contiki system the one started last is the one actually used. This behaviour is especially useful for the 'IP forwarding' "meta" packet driver.
    Added Cygwin networking support using WinPcap.
    Moved wpcap*.[ch] from platform/minimal-net/net to cpu/native/net.
    - Removed unnecessary PROCESS_POLLHANDLER(pollhandler()) as pollhandler is explicitly called.
    
    - Moved all ARP handling to service wrappers (and narrowed interface to low level code).
    
    - Unified general coding/formatting style.
    Added Cygwin networking support using WinPcap.
    More uip_ipaddr_t fixes.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added clock_seconds() implementation.
    Moved stuff into sys subdir to clean up the 6502 dir (and because the corresponding shared stuff is in the sys as well).
    Cosmetic change...
    Added a Contiki clock_time() implementation based on the cc65 clock() implementation.
    Provided a meaningful clock_time() implementation - which btw. makes the Cygwin variant finally work :-)
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed some more old RCS tags from the Contiki source tree.
    Added the same disclaimer as used in the header file.
    Moved 6502-specific implementation of local continuations into a 'sys' folder in order to allow the
    
    #include "sys/lc.h"
    
    in core/sys/pt.h to find it.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Remove tab chars from retro C sources.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved stuff into sys subdir to clean up the 6502 dir (and because the corresponding shared stuff is in the sys as well).
    cc65 has recently become more restrictive...
    - The cc65 assembler variable 'ptr1' (a general zero page pointer) is actually part of the cc65 zero page area so it's a bad idea (tm) to use it in swapping that very area.
    - The cc65 assembler variable 'sp' (the pointer to the C stack) is actually part of the cc65 zero page area so there's no need to manage it explicitly. Furthermore it is known to reside at the very start of the area so it can be initialized there for new threads.
    Added Multithreading support to the cc65 targets based on the Contiki 1.x C64 implementation with the following changes:
    - Added support for the function parameter.
    - Removed support for preemption because:
      - No other current implementation does so.
      - Preemption support would make the code at least target-dependent or it wouldn't work at all (as on plain Apple2 machines without timer interrupt).
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Replaced dummy code with code taken from 'native'.
    Allow division by RTIMER_ARCH_SECOND to compile.
    Define an empty rtimer_arch_now() macro to keep compiler happy.
    Moved stuff into sys subdir to clean up the 6502 dir (and because the corresponding shared stuff is in the sys as well).
    Added dummy value to allow for building.
    Added NOP headers in order to allow build.
    Moved wpcap*.[ch] from platform/minimal-net/net to cpu/native/net.
    - Removed unnecessary PROCESS_POLLHANDLER(pollhandler()) as pollhandler is explicitly called.
    
    - Moved all ARP handling to service wrappers (and narrowed interface to low level code).
    
    - Unified general coding/formatting style.
    Added Cygwin networking support using WinPcap.
    Added network support to the Win32 platform.
    
    Network I/O is done using the usual suspect - which is WinPcap. There's no need for the WinPcap Developer's Pack! An ordinary WinPcap install - as it is i.e. part of Ethereal - is sufficient.
    
    The code is still under development. But as I recently successfully opened HTML pages with the Contiki web browser I thought it might be the right time for an initial commit.
    Added a Win32 CFS (Contiki File System) service. The opendir() parameter "/" is mapped to the directory containing contiki.exe. That allows easy access to *.prg and *.dsc files which are supposed to reside in the same directory.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved stuff into sys subdir to clean up the 6502 dir (and because the corresponding shared stuff is in the sys as well).
    - The cc65 assembler variable 'ptr1' (a general zero page pointer) is actually part of the cc65 zero page area so it's a bad idea (tm) to use it in swapping that very area.
    - The cc65 assembler variable 'sp' (the pointer to the C stack) is actually part of the cc65 zero page area so there's no need to manage it explicitly. Furthermore it is known to reside at the very start of the area so it can be initialized there for new threads.
    Added Multithreading support to the cc65 targets based on the Contiki 1.x C64 implementation with the following changes:
    - Added support for the function parameter.
    - Removed support for preemption because:
      - No other current implementation does so.
      - Preemption support would make the code at least target-dependent or it wouldn't work at all (as on plain Apple2 machines without timer interrupt).
    Added NOP headers in order to allow build.
    CPU agnostic implementation of the platform specific part of the multi-threading library. Uses fibers on Windows and the ucontext functions on other platforms.
    Moved wpcap*.[ch] from platform/minimal-net/net to cpu/native/net.
    Added Cygwin networking support using WinPcap.
    Added a Win32 CFS (Contiki File System) service. The opendir() parameter "/" is mapped to the directory containing contiki.exe. That allows easy access to *.prg and *.dsc files which are supposed to reside in the same directory.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed some more old RCS tags from the Contiki source tree.
    Moved stuff into sys subdir to clean up the 6502 dir (and because the corresponding shared stuff is in the sys as well).
    - The cc65 assembler variable 'ptr1' (a general zero page pointer) is actually part of the cc65 zero page area so it's a bad idea (tm) to use it in swapping that very area.
    - The cc65 assembler variable 'sp' (the pointer to the C stack) is actually part of the cc65 zero page area so there's no need to manage it explicitly. Furthermore it is known to reside at the very start of the area so it can be initialized there for new threads.
    Added Multithreading support to the cc65 targets based on the Contiki 1.x C64 implementation with the following changes:
    - Added support for the function parameter.
    - Removed support for preemption because:
      - No other current implementation does so.
      - Preemption support would make the code at least target-dependent or it wouldn't work at all (as on plain Apple2 machines without timer interrupt).
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved 6502-specific implementation of local continuations into a 'sys' folder in order to allow the
    
    #include "sys/lc.h"
    
    in core/sys/pt.h to find it.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Have CBM DOS filetype of imported files match the one used by cc65.
    
    CFS_WRITE implies O_TRUNC which is implemented on CBM DOS by deleting an
    exsisting file. Hoewever this succeeds only if the CBM DOS filetype matches.
    
    We need a working O_TRUNC in order to be able to overwrite the contiki.cfg
    configuration file.
    
    Note: Now it has be clarified why overwriting the configuration file started to
    fail the CBM PFS (platform file system) can be activated for the recently added
    ethconfig program.
    Replaced web configurator with target-based ethconfig.
    Renamed retro 'dhcp-client' to 'ipconfig' as it can as well be used for interactive manual configuration.
    Added a Contiki app basically combining apps/netconf and apps/dhcp. It's a 6502 specific app as it doesn't configure the running uIP instance but instead writes to the 'contiki.cfg' configuration file used by 6502 apps to configure uIP.
    Have CBM DOS filetype of imported files match the one used by cc65.
    
    CFS_WRITE implies O_TRUNC which is implemented on CBM DOS by deleting an
    exsisting file. Hoewever this succeeds only if the CBM DOS filetype matches.
    
    We need a working O_TRUNC in order to be able to overwrite the contiki.cfg
    configuration file.
    
    Note: Now it has be clarified why overwriting the configuration file started to
    fail the CBM PFS (platform file system) can be activated for the recently added
    ethconfig program.
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Replaced web configurator with target-based ethconfig.
    Renamed retro 'dhcp-client' to 'ipconfig' as it can as well be used for interactive manual configuration.
    Added a Contiki app basically combining apps/netconf and apps/dhcp. It's a 6502 specific app as it doesn't configure the running uIP instance but instead writes to the 'contiki.cfg' configuration file used by 6502 apps to configure uIP.
    Now that we started adding files to the CVS which are normally generated with a 'save...' make goal we can remove the DEFAULT_TARGET mechanism altogether and just add Makefile.target files.
    Many project Makefiles build just one Contiki binary. Up to now the name of this binary was only available to the 'all' goal as prerequisite. So it was possible to create a non-project-specific rule to i.e. load that binary into the target device.
    
    Therefore I introduced the make variable CONTIKI_PROJECT. Now a typical project Makefile starts with:
    
    CONTIKI_PROJECT = hello-world
    all: $(CONTIKI_PROJECT)
    replaced blink with blinker that uses more sensors
    ESB examples
    Added an example application to show the usage of the Contiki Multi-threading library.
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Adjusted base address to final product.
    Replaced web configurator with target-based ethconfig.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Allow 6502 ctk programs (all running in non-window mode) to exit the Contiki process by calling LOAD_UNLOAD().
    Make the "empty" error_exit implementation the default to be optionally overridden.
    Made error_exit() implementation target-specific.
    Made error_exit() globally available.
    Provided a meaningful clock_time() implementation - which btw. makes the Cygwin variant finally work :-)
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Use cfs filesystem to allow for specific implementations (and make use of fastcall).
    Added read function for a simple binary config file.
    Made error_exit() globally available.
    CPU agnostic implementation of the platform specific part of the multi-threading library. Uses fibers on Windows and the ucontext functions on other platforms.
    Moved wpcap*.[ch] from platform/minimal-net/net to cpu/native/net.
    Added Cygwin networking support using WinPcap.
    Added a Win32 CFS (Contiki File System) service. The opendir() parameter "/" is mapped to the directory containing contiki.exe. That allows easy access to *.prg and *.dsc files which are supposed to reside in the same directory.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Allow 6502 ctk programs (all running in non-window mode) to exit the Contiki process by calling LOAD_UNLOAD().
    Made error_exit() globally available.
    CPU agnostic implementation of the platform specific part of the multi-threading library. Uses fibers on Windows and the ucontext functions on other platforms.
    Moved wpcap*.[ch] from platform/minimal-net/net to cpu/native/net.
    Added Cygwin networking support using WinPcap.
    Added a Win32 CFS (Contiki File System) service. The opendir() parameter "/" is mapped to the directory containing contiki.exe. That allows easy access to *.prg and *.dsc files which are supposed to reside in the same directory.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Make the "empty" error_exit implementation the default to be optionally overridden.
    Made error_exit() implementation target-specific.
    Made error_exit() globally available.
    Provided a meaningful clock_time() implementation - which btw. makes the Cygwin variant finally work :-)
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Made error_exit() globally available.
    CPU agnostic implementation of the platform specific part of the multi-threading library. Uses fibers on Windows and the ucontext functions on other platforms.
    Moved wpcap*.[ch] from platform/minimal-net/net to cpu/native/net.
    Added Cygwin networking support using WinPcap.
    Added a Win32 CFS (Contiki File System) service. The opendir() parameter "/" is mapped to the directory containing contiki.exe. That allows easy access to *.prg and *.dsc files which are supposed to reside in the same directory.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Soe we're finally back at reducing the memory footprint be avoiding to pull in large C-library enitities.
    Optimized to work with logging turned off.
    Fixed to work with logging turned off.
    Added (default) log implementation for cc65 targets.
    Provided a meaningful clock_time() implementation - which btw. makes the Cygwin variant finally work :-)
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    - Moved PFS header from Apple2 directory to 6502 directory as we're going to have other PFS implementations.
    - Completed declarations.
    Supply prototype even if there's no implementation (yet) to keep compiler happy.
    Introduced very lightweight pfs implementation based on Apple ProDOS.
    
    ProDOS requires for each opened file a user-supplied page-aligned 1024 byte i/o buffer. This makes the generic POSIX file i/o library contained in the cc65 C-library quite heavyweight.
    
    In contrast the lightweight pfs implementation uses the uIP packet buffer as ProDOS i/o buffer. Therefore:
    - Only one file may be open at any time.
    - That file may not be open while the uIP packet buffer is used by uIP. The open()/read()/close() sequence should be completed before Contiki event scheduling or inside handling a single Contiki event.
    - The uIP packet buffer must be large enough to hold the ProDOS I/O buffer. Depending on the position of the uIP buffer in memory this means between 1024 and 1024 + 256 bytes. Therefore in an Ethernet environment setting the MTU_SIZE to at least 1266 is safe (So the default of 1500 is just fine).
    Made error_exit() globally available.
    CPU agnostic implementation of the platform specific part of the multi-threading library. Uses fibers on Windows and the ucontext functions on other platforms.
    Moved wpcap*.[ch] from platform/minimal-net/net to cpu/native/net.
    Added Cygwin networking support using WinPcap.
    Added a Win32 CFS (Contiki File System) service. The opendir() parameter "/" is mapped to the directory containing contiki.exe. That allows easy access to *.prg and *.dsc files which are supposed to reside in the same directory.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Remove tab chars from retro C sources.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    Display correct name of statically loaded driver.
    Made use of the new high-level config macros.
    Use cfs filesystem to allow for specific implementations (and make use of fastcall).
    Optimized non-logging scenario.
    Soe we're finally back at reducing the memory footprint be avoiding to pull in large C-library enitities.
    Avoid pulling in the DNS client. Later we'll want to have this configurable.
    Added read function for a simple binary config file.
    Made error_exit() globally available.
    Provided a meaningful clock_time() implementation - which btw. makes the Cygwin variant finally work :-)
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    * Remove printfs.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    fixed support for IAR compiler
    added some files for MSP430X I/O
    Made SLIP code coexist with ordinary serial code. If WITH_UIP=1, the SLIP code is used instead.
    Added energy estimation
    Removed clock_delay()
    Added clock_delay() between characters to avoid dropping them
    * General stuff for different baudrates:
    
        - ubr argument to slip_arch_int
    
        - macros for calculating ubr
    
        - argument -Bbaudrate to tools tunslip and scat
    * Bump speed over serial to 115200 (Tmote sky only).
    Use LPM4_EXIT to return from sleep on msp430.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Initial WiSMote port based on code from Arago Systems.
    Added native-border-router and slip-radio
    hex conversion and crc shell commands
    removed execute flag of source files (avoids diff problems with egit)
    Adding ADC functions
    Platform-specific devices.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fixed compiler warning (with IAR compiler)
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved the cc2520 driver into its own dev/cc2520 module
    Cross compiler interrupt service routine compatibility definitions for MSP430 based platforms based on isr_compat.h by Steve Underwood.
    Updated SPI config for faster SPI, split msp430/clock/spi into separate versions for MSP430/MSP430X
    Initial WiSMote port based on code from Arago Systems.
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed Sky platform for IAR compiler
    Made configuration of CC2420 SFD timestamps easier
    fixed naming of SPI and CC2420 related code
    Made SFD timestamps configurable via external definition
    Bugfix: changed #ifdef to #if, otherwise the SFD code would be enabled anyway
    Disable SFD interrupt by default
    Broke out the CC2420 SFD interrupt into a separate file to allow easier overloading with project-specific files
    fixed variable names
    added initial set-up code SFD capture interrupts usable for exact packet timestamping
    Changed name of the simple-cc2420 module to cc2420: changed all function names and variable names from simple_cc2420_* to cc2420_*.
    Changed filename of the CC2420 driver from simple-cc2420 to cc2420.
    Architecture dependent code for the CC2420 driver
    Added energy estimation
    Use LPM4_EXIT to return from sleep on msp430.
    Import of the contiki-2.x development code from the SICS internal CVS server
    leds: Fix the API
    
    The leds API did not work in some cases. E.g. with the following sequence:
      leds_off(LEDS_ALL);
      leds_toggle(LEDS_GREEN);
      leds_off(LEDS_ALL);
    the green LED was remaining on after the last call.
    
    This was caused by the toggle feature made synonymous with the invert feature,
    although it is unrelated. leds_toggle() is indeed supposed to toggle an LED,
    while leds_invert() is supposed to change the active level of an LED. However,
    all users of leds_invert() actually meant leds_toggle(), and the invert feature
    does not make sense in this module because it is not handy due to successive
    calls to leds_invert() changing the intended behavior, and hardware active
    levels should be managed in leds_arch_set() (e.g. by XORing the passed value
    with a hardware-specific constant before setting the output levels of the pins).
    
    Consequently, this change:
     - removes the leds_invert() function,
     - makes leds_toggle() behave as expected relatively to leds_off() / leds_on(),
     - sanitizes the code in the leds module.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    Minimalistic plug in replacement for the leds package.
    Use LPM4_EXIT to return from sleep on msp430.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Cross compiler interrupt service routine compatibility definitions for MSP430 based platforms based on isr_compat.h by Steve Underwood.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    fixed cpu/msp430 for compilation with IAR compiler
    implemented support for data argument when starting threads:
    
    given function is called from a wrapper instead of immediately returned to via the stack
    added empty mtarch_stop()
    The function was missing the case when the stack was used completely,
    and didn't return a value then.
    Added a function for measuring stack usage
    Fixed include path
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed Sky platform for IAR compiler
    Made SLIP code coexist with ordinary serial code. If WITH_UIP=1, the SLIP code is used instead.
    Added energy estimation
    Removed clock_delay()
    Added clock_delay() between characters to avoid dropping them
    * General stuff for different baudrates:
    
        - ubr argument to slip_arch_int
    
        - macros for calculating ubr
    
        - argument -Bbaudrate to tools tunslip and scat
    * Bump speed over serial to 115200 (Tmote sky only).
    Use LPM4_EXIT to return from sleep on msp430.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updated SPI config for faster SPI, split msp430/clock/spi into separate versions for MSP430/MSP430X
    fixed cpu/msp430 for compilation with IAR compiler
    Turned up the rtimer resolution to 32678 Hz.
    Added function rtimer_arch_now that makes sure that the timer value does not change between readouts to avoid reading while the timer is being updated.
    Increased the rtimer granularity: needed to make contikimac work
    Increased the clock speed to 32768/4 from 32768/8 to provide better accuracy for power profiling of radio CCA checks
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    removed offset in rtimer_arch
    Reading timer now quicker, embryo for possible future drift configuration
    Fixed description
    MSP430 real-time rtimer support using timerb1
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    MSP430 definitions
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    Use platform configuration for CC2420/CC2520 SFD on MSP430 based platforms
    Moved the cc2520 driver into its own dev/cc2520 module
    Cross compiler interrupt service routine compatibility definitions for MSP430 based platforms based on isr_compat.h by Steve Underwood.
    Initial WiSMote port based on code from Arago Systems.
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    Store timestamps in the cc2420 module instead of the cc2420-arch-sfd module
    fixed naming of SPI and CC2420 related code
    Values altered in interrupt handlers should be volatile
    Enable a flag when packet SFD seen
    Broke out the CC2420 SFD interrupt into a separate file to allow easier overloading with project-specific files
    fixed variable names
    added initial set-up code SFD capture interrupts usable for exact packet timestamping
    Changed name of the simple-cc2420 module to cc2420: changed all function names and variable names from simple_cc2420_* to cc2420_*.
    Changed filename of the CC2420 driver from simple-cc2420 to cc2420.
    Architecture dependent code for the CC2420 driver
    Added energy estimation
    Use LPM4_EXIT to return from sleep on msp430.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    removed obsolete leds_[color]() functions, replaced by leds_{on,off}()
    allow LEDS_[COLOR] to be configured by platform-conf
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Cross compiler interrupt service routine compatibility definitions for MSP430 based platforms based on isr_compat.h by Steve Underwood.
    Initial WiSMote port based on code from Arago Systems.
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    Only include code for stack printouts when needed
    By default, don't print stack on reboot, since there are cases where this may hang the CPU (when the CPU is in LPM when the watchdog triggers). Must fix the code to set the UART and CU into correct modes before enabling stack printout on reboot.
    Made stack printout on reboot configurable.
    Added the ability to turn on watchdog multiple times - the watchdog
    registers are touched only when the watchdog goes from off to on state
    to avoid retriggering the watchdog when it shouldn't.
    added some files for MSP430X I/O
    Print out stack pointer when rebooting node
    Bugfix
    Print out a stack trace when a node reboots because of the watchdog
    Count the number of times the watchdog has been stopped to avoid starting it when someone else has stopped it
    Update the periodic watchdog only if it is not stopped
    Added a reboot function
    Fixed watchdog support for the MSP430. It now works as intended
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Cross compiler interrupt service routine compatibility definitions for MSP430 based platforms based on isr_compat.h by Steve Underwood.
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    Use LPM4_EXIT to return from sleep on msp430.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed code region to any
    Added flags to enable 20-bit support from msp430-gcc 4.7.x
    Support verbosity control when building MSP430-based platforms with
    the IAR compiler.
    Added rule to autocompile mspsim if needed and show warning if submodule MSPSim has not been initialized
    Makefile.include: support make clean all
    
    Historically $(OBJECTDIR) was created when Makefile.include is read.  A
    consequence is that combining "clean" with "all" (or any other build
    target) results in an error because the clean removes the object
    directory that is required to exist when building dependencies.
    Creating $(OBJECTDIR) on-demand ensures it is present when needed.
    
    Removed creation of $(OBJECTDIR) on initial read, and added an order-only
    dependency forcing its creation all Makefile* rules where the target is
    explicitly or implicitly in $(OBJECTDIR).
    remove -g
    
    see http://comments.gmane.org/gmane.os.contiki.devel/13869
    Default value for _DATA20_HEAP_SIZE when using the IAR compiler on MSP430 platforms
    Made the stack and heap size configurable when using the IAR compiler on the MSP430 platforms
    Added support for mspgcc 4.6+ that no longer supports generic MCU identifiers such as msp430x1611
    Corrected compiler flags for the IAR compiler
    avoid unnecessary symbols.c/h copying
    Improved support for the IAR compiler for the MSP430 platforms
    Allow compiler flag SMALL to be set to disable SMALL-build. Patch by Andre Frimberger.
    Minor cleanup (avoid setting some compiler flags twice)
    Ignore SMALL when using IAR compiler
    Be more explicit with the relationship between inheritance between MSP430 families.
    * Added f2xxx for two series (for example z1)
    * f1xxx is baseline and always included
    * Cleaned up the names of uart and spi (no x in names)
    * Updated SPI configuration for WiSMote
    Updated SPI config for faster SPI, split msp430/clock/spi into separate versions for MSP430/MSP430X
    Initial WiSMote port based on code from Arago Systems.
    added compiler flags and macros for IAR and mspgcc 4.4.5 compilers
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed Sky platform for IAR compiler
    improved support for IAR compiler for z1
    fixed IAR compilation paths
    fixed cpu/msp430 for compilation with IAR compiler
    Replaced make-empty-symbols with empty-symbols.[c|h]
    The symbol generation shell scripts cause CRLF issues on Windows/Cygwin again and again. Instead of fixing this yet again I opted to remove the symbol generation script at least for the "no symbols" scenario with two C source files to be copied.
    Bugfix
    A set of compiler options that reduce the size of the final code size and RAM usage with ~10%. Courtesy of Simon Duquennoy.
    added some files for MSP430X I/O
    Added rule to use MSPSim to show the maptable from the last compilation on MSP430 targets
    minor cleanup: random.c is already included in Makefile.include
    Moved putchar into separate file to make it easier to override its implementation
    Patch by Gideon Ernst: use explicit $(CONTIKI) path instead of implicit ../../ path to the mknmlist script
    Changed the name of the 'serial' module to 'serial-line' to signify that the module is about lines of data from the serial port, not individual bytes, and to make sdcc happy
    Removed obsolete definitions.
    Compile using . instead of separate make rules for .firmware
    Simulator for MSP430-based platforms
    The .ihex file use the intermediate Contiki-wide .$(TARGET) target instead of the MSP430-specific .firmware
    Made SLIP code coexist with ordinary serial code. If WITH_UIP=1, the SLIP code is used instead.
    Added a WERROR definition that can be used to turn -Werror on
    Removed -Werror since LPM*_EXIT; and friends trigger an internal mspgcc compiler error
    Added -Werror to turn compiler warnings into errors to ensure that code always compile without warnings
    Removed old codeprop-tmp.c
    Factored out setup directory search path for source files into Makefile.include.
    
    - All compilers used support the -I option for setting an include search directory.
    
    - The Contiki source tree follows the (common) approach of placing declarations (in headerf iles) in the same directory as definitions (in source files).
    
    As a result it makes sense to use the -I compiler option for just the same set of directories used for the vpath gnumake directive.
    
    Note: I checked several builds but nevertheless one or the other might need some additional adjustsments. Sorry for the inconvenience.
    Removed WITH_UIP
    Factored out setup directory search path for source files into Makefile.include.
    
    - Search target specific directories before CPU specific directories.
    - Search CPU specific directories before generic directories.
    
    Note: I checked several builds but nevertheless one or the other might need some additional adjustsments. Sorry for the inconvenience.
    Added rtimer-arch.c
    Moved buildscripts from cpu/msp430 to platform/esb.
    Added NM definition
    Added uart1.c and the dev/ subdirectory
    Changed the generation of symbols to the mknmlist script. Now symbols.h is not automatically generated so we can use it as a normal include file and remove symbols-def.h.
    Added generation of symbols.[ch], removed cfs-eeprom (should be in platform makefile instead)
    updated reference to "elfloader-tmp"
    Removed old elfloader.c and replaced with the current code (previously in elfloader-tmp.c)
    CFLAGS contain nodeid if it is defined
    Removed generation of node-id.c file since node ID now is stored in EEPROM
    removed old node id management from makefile
    Added mtarch.c
    Removed out-commented stuff from Makefiles
    fix to allow projects to extend the linker flags
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Values altered in interrupt handlers should be volatile
    Enable a flag when packet SFD seen
    Broke out the CC2420 SFD interrupt into a separate file to allow easier overloading with project-specific files
    updated bad file info
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved the cc2420 driver into a separate dev/cc2420 module
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Cross compiler interrupt service routine compatibility definitions for MSP430 based platforms based on isr_compat.h by Steve Underwood.
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed Sky platform for IAR compiler
    Made configuration of CC2420 SFD timestamps easier
    fixed naming of SPI and CC2420 related code
    Made SFD timestamps configurable via external definition
    Bugfix: changed #ifdef to #if, otherwise the SFD code would be enabled anyway
    Disable SFD interrupt by default
    Broke out the CC2420 SFD interrupt into a separate file to allow easier overloading with project-specific files
    fixed variable names
    added initial set-up code SFD capture interrupts usable for exact packet timestamping
    Changed name of the simple-cc2420 module to cc2420: changed all function names and variable names from simple_cc2420_* to cc2420_*.
    Changed filename of the CC2420 driver from simple-cc2420 to cc2420.
    Architecture dependent code for the CC2420 driver
    Added energy estimation
    Use LPM4_EXIT to return from sleep on msp430.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Made MT stack size configurable
    fixed cpu/msp430 for compilation with IAR compiler
    implemented support for data argument when starting threads:
    
    given function is called from a wrapper instead of immediately returned to via the stack
    Added a function for measuring stack usage
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    * remove author.
    Added uip include and asmv definition to make it compile
    +copyright header
    uIP checksum calculation for MSP430
    Use platform configuration for CC2420/CC2520 SFD on MSP430 based platforms
    Moved the cc2420 driver into a separate dev/cc2420 module
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Cross compiler interrupt service routine compatibility definitions for MSP430 based platforms based on isr_compat.h by Steve Underwood.
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    Store timestamps in the cc2420 module instead of the cc2420-arch-sfd module
    fixed naming of SPI and CC2420 related code
    Values altered in interrupt handlers should be volatile
    Enable a flag when packet SFD seen
    Broke out the CC2420 SFD interrupt into a separate file to allow easier overloading with project-specific files
    fixed variable names
    added initial set-up code SFD capture interrupts usable for exact packet timestamping
    Changed name of the simple-cc2420 module to cc2420: changed all function names and variable names from simple_cc2420_* to cc2420_*.
    Changed filename of the CC2420 driver from simple-cc2420 to cc2420.
    Architecture dependent code for the CC2420 driver
    Added energy estimation
    Use LPM4_EXIT to return from sleep on msp430.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    fixed cpu/msp430 for compilation with IAR compiler
    Fixed a bug found by Moritz Straube - writing to the internal flash would lock up contikimac. The problem was due to the IFG1 being reset to zero before writing to flash.
    Updated to use the watchdog API
    Import of the contiki-2.x development code from the SICS internal CVS server
    Define the BV macro if not already defined
    Moved configuration of memcpy workaround to cpu (only needed for an older version of mspgcc)
    Initial WiSMote port based on code from Arago Systems.
    added compiler flags and macros for IAR and mspgcc 4.4.5 compilers
    Fixed splhigh/splx for the IAR compiler
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    fixed cpu/msp430 for compilation with IAR compiler
    activated the new workaround...
    fixed workaround for memcpy/set to be memory efficient but slower
    added workaround for memcpy/memset bug in mspgcc
    added DCO-resync function and default config
    * Standard defines for MSP430.
    * Add cle_info argument to cle_write_reloc.
    * Rename cle_upd_reloc to cle_write_reloc and changed first arg to
      point to position to be updated.
    
    * Factor cle.c into multiple files.
    Rename cc2420_uart0.c to cc2420_spi.c
    * First port of CC2420 driver to the AVR.
    Use LPM4_EXIT to return from sleep on msp430.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix CPU clock calibration in msp430f2xxx based platforms (e.g. Zolertia Z1).
    
    The following problems were present in the existing DCO calibration algorithm:
    
    Problem #1. In function msp430_quick_synch_dco(), the "for(i=0; i < 1000; i++) { .. }" loop is optimized away by the compiler, as i is not volatile. Making i volatile would improve the results, but would not be sufficient: see the next point.
    
    Problem #2. According to MSP430F2617 Device Erratasheet, bug BCL12 precludes a naive implementations of "fast" calibration altogether. The bug is present on all MCU revisions up to date.
    
    The description of the bug:
    "After switching RSELx bits (located in register BCSCTL1) from a value of >13 to a value of <12 OR from a value of <12 to a value of >13, the resulting clock delivered by the DCO can stop before the new clock frequency is applied. This dead time is approximately 20 us. In some instances, the DCO may completely stop, requiring a power cycle.
    
    Furthermore, if all of the RSELx bits in the BSCTL1 register are set, modifying the DCOCTL register to change the DCOx or the MODx bits could also result in DCO dead time or DCO hang up."
    
    In Contiki code for msp430f2xxx @ 8MHz, the RSEL search currently typically goes from 15 down to 11, thus violating the rules.
    
    Step-by-step RSEL change is proposed as the best possible workaround:
    "[..] more reliable method can be implemented by changing the RSEL bits step by step in order to guarantee safe function without any dead time of the DCO."
    
    Problem #3. The old Contiki code started from the highest possible calibration values: RSEL=15, DCOx=7. According to MSP430F2617
    datasheet, this means that the DCO frequency is set to 26 MHz. For one, Vcc under 3V is not supported for this frequency, so this means that battery-powered nodes have a big problem. The minimal operating voltages are:
    - 1.8V for RSEL <= 13
    - 2.2V for RSEL = 14
    - 3.0V for RSEL = 15
    So the correct way is to always start calibration from RSEL <= 13, unless explicityly pre-calibred values are present.
    
    Problem #4. Timer B should be turned off after the calibration, following the "Principles for Low-Power Applications" in MSP430 user's Guide.
    
    The patch fixes these issues by performing step-by-step calibration and turning off Timer B afterwards. As opposed to MSP430F1xxx calibration, this algorithm does not change the ACLK divider beforehand; attempts to make calibration more precise would lead to looping in some cases, as the calibration step granularity at larger frequencies is quite big.
    
    Additionally, the patch improves DCOSYNCH_CONF_ENABLED behavior, allowing the resynchronization to correct for more than one step.
    MSP430 setup for f2xxx based on Z1
    io, signal and IAR-GCC checks have been moved into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    added Z1 platform
    only include memcpy/set workaround when needed
    activated the new workaround...
    fixed workaround for memcpy/set to be memory efficient but slower
    added DCO-resync function and default config
    Initialize watchdog instead of stopping and starting it
    Added improvements suggested by Hardy Greich: define CPU speed in one place only (contiki-conf.h), added nop to XTAL settlement delay
    Updated to use the watchdog API
    * Use _end rather than nonstandard __bss_end.
    Moved uip_ipchksum() into a separate file to allow the Tmote Sky port to be compiled entirely without uIP
    * Workaround for bug in msp430-ld where __bss_end is sometimes
      misaligned.
    
    * Indent trailing brace properly.
    * Obob in cur_break initialisation.
    Make malloc machine independent by relying on dependent sbrk(2).
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Cross compiler interrupt service routine compatibility definitions for MSP430 based platforms based on isr_compat.h by Steve Underwood.
    * Added f2xxx for two series (for example z1)
    * f1xxx is baseline and always included
    * Cleaned up the names of uart and spi (no x in names)
    * Updated SPI configuration for WiSMote
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    added some files for MSP430X I/O
    removed obsolete comments
    reverted previous patch: appears to create problems on hardware
    Ensure that the UART port is available before writing
    Added support for CPU speed 2.4576MHz and configuration to enable/disable interrupt driven TX
    Must check error flag before reading. Removed leds debug.
    Moved putchar into separate file to make it easier to override its implementation
    uart correction values for 3.9Mhz (default sky freq.)
    Initialize the transmit ringbuffer before enabling TX interrupt
    Always prod the watchdog on output to avoid spurious resets during long serial outputs
    Added optional interrupt-based transmission, based on the ringbuf library
    Minor code style fixes
    added handling function for checkin if uart is transmitting or receiving - patch by Klaus Stengel
    changed usart code to handle LPM3
    moved energest from lib/ to sys/
    Made SLIP code coexist with ordinary serial code. If WITH_UIP=1, the SLIP code is used instead.
    Changed the return value of the inpt handler function to int so that it can wake up the CPU from LPM
    Added support for configurable callbacks of uart1 input.
    Added energy estimation
    UART1 driver
    * General stuff for different baudrates:
    
        - ubr argument to slip_arch_int
    
        - macros for calculating ubr
    
        - argument -Bbaudrate to tools tunslip and scat
    * Bump speed over serial to 115200 (Tmote sky only).
    Use LPM4_EXIT to return from sleep on msp430.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Baudrate now is configured taking into account the MCU frequency, instead of using fixed values for 8MHz freq
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Removed leds debug output
    Cross compiler interrupt service routine compatibility definitions for MSP430 based platforms based on isr_compat.h by Steve Underwood.
    * Added f2xxx for two series (for example z1)
    * f1xxx is baseline and always included
    * Cleaned up the names of uart and spi (no x in names)
    * Updated SPI configuration for WiSMote
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    Added missing include
    added some files for MSP430X I/O
    removed obsolete comments
    reverted previous patch: appears to create problems on hardware
    Ensure that the UART port is available before writing
    Added support for CPU speed 2.4576MHz and configuration to enable/disable interrupt driven TX
    Must check error flag before reading. Removed leds debug.
    Moved putchar into separate file to make it easier to override its implementation
    uart correction values for 3.9Mhz (default sky freq.)
    Initialize the transmit ringbuffer before enabling TX interrupt
    Always prod the watchdog on output to avoid spurious resets during long serial outputs
    Added optional interrupt-based transmission, based on the ringbuf library
    Minor code style fixes
    added handling function for checkin if uart is transmitting or receiving - patch by Klaus Stengel
    changed usart code to handle LPM3
    moved energest from lib/ to sys/
    Made SLIP code coexist with ordinary serial code. If WITH_UIP=1, the SLIP code is used instead.
    Changed the return value of the inpt handler function to int so that it can wake up the CPU from LPM
    Added support for configurable callbacks of uart1 input.
    Added energy estimation
    UART1 driver
    * General stuff for different baudrates:
    
        - ubr argument to slip_arch_int
    
        - macros for calculating ubr
    
        - argument -Bbaudrate to tools tunslip and scat
    * Bump speed over serial to 115200 (Tmote sky only).
    Use LPM4_EXIT to return from sleep on msp430.
    Import of the contiki-2.x development code from the SICS internal CVS server
    * Added f2xxx for two series (for example z1)
    * f1xxx is baseline and always included
    * Cleaned up the names of uart and spi (no x in names)
    * Updated SPI configuration for WiSMote
    Updated SPI config for faster SPI, split msp430/clock/spi into separate versions for MSP430/MSP430X
    Initial WiSMote port based on code from Arago Systems.
    Added native-border-router and slip-radio
    added uip-driver (for both ivp4 and ipv6), setting WITH_UIP* compiler flags in Makefile
    Updated to match the new netstack api
    Added a new module called "framer" that creates MAC level frames to
    the packetbuf from packet attributes. Two framer modules are included,
    one that creates 802.15.4 frame headers, and one that creates a
    minimal "nullmac"-style header that only contains the link-local
    addresses.
    added multihop routing support through replaceable modules. first implementation
    uses rime's route discovery by translating between ipv6 and rime addresses.
    added experimental checkpointing functionality:
    currently only implemented on the sky platform
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated SPI config for faster SPI, split msp430/clock/spi into separate versions for MSP430/MSP430X
    Fixed quick dco sync to also work with mspgcc
    Corrected timing for higher CPU speed
    Initial WiSMote port based on code from Arago Systems.
    Fixed splhigh/splx for the IAR compiler
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed Sky platform for IAR compiler
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    minor fixes of DMA uart code
    added initial uart1 DMA rx support and required LPM requirements api
    only include memcpy/set workaround when needed
    activated the new workaround...
    fixed workaround for memcpy/set to be memory efficient but slower
    added DCO-resync function and default config
    Initialize watchdog instead of stopping and starting it
    Added improvements suggested by Hardy Greich: define CPU speed in one place only (contiki-conf.h), added nop to XTAL settlement delay
    Updated to use the watchdog API
    * Use _end rather than nonstandard __bss_end.
    Moved uip_ipchksum() into a separate file to allow the Tmote Sky port to be compiled entirely without uIP
    * Workaround for bug in msp430-ld where __bss_end is sometimes
      misaligned.
    
    * Indent trailing brace properly.
    * Obob in cur_break initialisation.
    Make malloc machine independent by relying on dependent sbrk(2).
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cross compiler interrupt service routine compatibility definitions for MSP430 based platforms based on isr_compat.h by Steve Underwood.
    * Added f2xxx for two series (for example z1)
    * f1xxx is baseline and always included
    * Cleaned up the names of uart and spi (no x in names)
    * Updated SPI configuration for WiSMote
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    added some files for MSP430X I/O
    removed obsolete comments
    reverted previous patch: appears to create problems on hardware
    Ensure that the UART port is available before writing
    Added support for CPU speed 2.4576MHz and configuration to enable/disable interrupt driven TX
    Must check error flag before reading. Removed leds debug.
    Moved putchar into separate file to make it easier to override its implementation
    uart correction values for 3.9Mhz (default sky freq.)
    Initialize the transmit ringbuffer before enabling TX interrupt
    Always prod the watchdog on output to avoid spurious resets during long serial outputs
    Added optional interrupt-based transmission, based on the ringbuf library
    Minor code style fixes
    added handling function for checkin if uart is transmitting or receiving - patch by Klaus Stengel
    changed usart code to handle LPM3
    moved energest from lib/ to sys/
    Made SLIP code coexist with ordinary serial code. If WITH_UIP=1, the SLIP code is used instead.
    Changed the return value of the inpt handler function to int so that it can wake up the CPU from LPM
    Added support for configurable callbacks of uart1 input.
    Added energy estimation
    UART1 driver
    * General stuff for different baudrates:
    
        - ubr argument to slip_arch_int
    
        - macros for calculating ubr
    
        - argument -Bbaudrate to tools tunslip and scat
    * Bump speed over serial to 115200 (Tmote sky only).
    Use LPM4_EXIT to return from sleep on msp430.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix clock.h warnings caused by multiple, conflicting documentation blocks of clock functions
    Fix time accounting on msp430 Series 5 MCU based platforms (wismote)
    
    See https://github.com/contiki-os/contiki/pull/727 for explanation
    Add clock_delay_us and clock_set_seconds to clock.h. Modify clock_wait to use clock_time_t.
    Remove the troublesome avr/dev/delay.* files.
    Add PLATFORM_NAME and combine the confusing *_REVISION defines into a single PLATFORM_TYPE
    Cross compiler interrupt service routine compatibility definitions for MSP430 based platforms based on isr_compat.h by Steve Underwood.
    * Added f2xxx for two series (for example z1)
    * f1xxx is baseline and always included
    * Cleaned up the names of uart and spi (no x in names)
    * Updated SPI configuration for WiSMote
    Updated SPI config for faster SPI, split msp430/clock/spi into separate versions for MSP430/MSP430X
    Changed clock_delay to use the nop instruction
    Initial WiSMote port based on code from Arago Systems.
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    msp430: fix "implicit declaration of function" warnings in clock.c, by including watchdog.h
    Turned up the rtimer resolution to 32678 Hz.
    Bugfix: the clock interrupt now flushes the energy estimator to avoid overflow of the LPM mode
    Turn off LPM mode for clock interrupts to avoid rtimer wrapping during extended LPM
    Increased the rtimer granularity: needed to make contikimac work
    Added support for 32-bit clock ticks: when reading the 32-bit value, make sure that it does not change between readouts to avoid reading right in the middle of it being updated
    Removed safeguards around the update code for the timer; turns out they weren't needed (but instead triggered a bug in MSPsim)
    Turn off Timer A before modifying its control registers to avoid problems when timer is updated frequently
    Increased the clock speed to 32768/4 from 32768/8 to provide better accuracy for power profiling of radio CCA checks
    Enable interrupts during the periodic clock processing to allow rtimers to execute on top of the clock
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    changed to use unsigned long for seconds counter
    bug fix, msp430 hw bug (undocumented):
    
    when in continuous/compare mode the interrupt handler may get called before CCR==TR.
    
    behavior observed when the timer is toggled between STOP/CONT in an external interrupt handler (serial input).
    
    possibly this problem may also affect watchdog timer/timer B
    Added a clock_seconds() function prototype to core/sys/clock.h, that returns seconds in 32 bit format. On platforms like the MSP430, which has a 16 bit native datatype, this cannot be implemented with an interrupt tick that increments a 32 bit value because access is not atomic. Instead, the MSP430 code increments 16 bit seconds value and converts this into a 32 bit value through an offset calculation. If the new value is smaller than the last check, the offset is incremented by 65536. This change also means that CLOCK_CONF_SECOND must be a power of two because a modulo operation is used inside the periodic tick interrupt handler.
    moved energest from lib/ to sys/
    Reformatting to comply with code style
    Added a hack function called clock_counter() to make the current prototype profiling code run on the MSP430 platform
    fixed some timer interrupt bugs and reimplemented clock_fine to avoid disabling interrupts
    support for delayed interrupts
    
    earlier TACCR1 could be set to already passed time if timer A interrupts was delayed
    removed redundant code - configuration of basic clock subsystem in clock and rtimer_arch
    Added energy estimation
    corrected comments
    Added experimental clock_fine() function
    Obob bug spotted by nfi.
    Use LPM4_EXIT to return from sleep on msp430.
    * Deal with numerical overflows.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cross compiler interrupt service routine compatibility definitions for MSP430 based platforms based on isr_compat.h by Steve Underwood.
    * Added f2xxx for two series (for example z1)
    * f1xxx is baseline and always included
    * Cleaned up the names of uart and spi (no x in names)
    * Updated SPI configuration for WiSMote
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    Added missing include
    added some files for MSP430X I/O
    removed obsolete comments
    reverted previous patch: appears to create problems on hardware
    Ensure that the UART port is available before writing
    Added support for CPU speed 2.4576MHz and configuration to enable/disable interrupt driven TX
    Must check error flag before reading. Removed leds debug.
    Moved putchar into separate file to make it easier to override its implementation
    uart correction values for 3.9Mhz (default sky freq.)
    Initialize the transmit ringbuffer before enabling TX interrupt
    Always prod the watchdog on output to avoid spurious resets during long serial outputs
    Added optional interrupt-based transmission, based on the ringbuf library
    Minor code style fixes
    added handling function for checkin if uart is transmitting or receiving - patch by Klaus Stengel
    changed usart code to handle LPM3
    moved energest from lib/ to sys/
    Made SLIP code coexist with ordinary serial code. If WITH_UIP=1, the SLIP code is used instead.
    Changed the return value of the inpt handler function to int so that it can wake up the CPU from LPM
    Added support for configurable callbacks of uart1 input.
    Added energy estimation
    UART1 driver
    * General stuff for different baudrates:
    
        - ubr argument to slip_arch_int
    
        - macros for calculating ubr
    
        - argument -Bbaudrate to tools tunslip and scat
    * Bump speed over serial to 115200 (Tmote sky only).
    Use LPM4_EXIT to return from sleep on msp430.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cross compiler interrupt service routine compatibility definitions for MSP430 based platforms based on isr_compat.h by Steve Underwood.
    Updated SPI config for faster SPI, split msp430/clock/spi into separate versions for MSP430/MSP430X
    Initial WiSMote port based on code from Arago Systems.
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    fixed cpu/msp430 for compilation with IAR compiler
    added missing include
    Enable the watchdog for rtimers too. Removed the disabling of the TACTL - it should not be needed, and interferes with the timing behaviour of stable rtimers
    Added function rtimer_arch_now that makes sure that the timer value does not change between readouts to avoid reading while the timer is being updated.
    Turn off timer before updating - needed to avoid bugs in ContikiMAC - not 100% sure why
    Removed safeguards around the update code for the timer; turns out they weren't needed (but instead triggered a bug in MSPsim)
    Turn off Timer A before modifying its control registers to avoid problems when timer is updated frequently
    Remove the read from TAIV - this should not be done for TIMERA0 interrupts (in fact, doing so messes up the other timer a interrupts, like the clock tick...)
    Need to clear the interrupt flag register for Timer A
    bug fix: wake up MSP430 when leaving rtimer interrupt if the rtimer polled a process.
    thanks to Marco Vedovati for finding the bug
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    Moved energest from lib/ to sys/
    removed offset in rtimer_arch
    removed redundant code - configuration of basic clock subsystem in clock and rtimer_arch
    Added energy estimation, embryo for possible future drift configuration
    rtimer_arch_now() now returns the correct value
    Fixed description
    MSP430 real-time rtimer support using timerb1
    Added #include that #defines NULL
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    Added *experimental* module for sending raw (non-routed) packets from Contiki. The name of the module is likely to change.
    Import of the contiki-2.x development code from the SICS internal CVS server
    * Added f2xxx for two series (for example z1)
    * f1xxx is baseline and always included
    * Cleaned up the names of uart and spi (no x in names)
    * Updated SPI configuration for WiSMote
    Updated SPI config for faster SPI, split msp430/clock/spi into separate versions for MSP430/MSP430X
    Initial WiSMote port based on code from Arago Systems.
    Added native-border-router and slip-radio
    added uip-driver (for both ivp4 and ipv6), setting WITH_UIP* compiler flags in Makefile
    Updated to match the new netstack api
    Added a new module called "framer" that creates MAC level frames to
    the packetbuf from packet attributes. Two framer modules are included,
    one that creates 802.15.4 frame headers, and one that creates a
    minimal "nullmac"-style header that only contains the link-local
    addresses.
    added multihop routing support through replaceable modules. first implementation
    uses rime's route discovery by translating between ipv6 and rime addresses.
    added experimental checkpointing functionality:
    currently only implemented on the sky platform
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    added some files for MSP430X I/O
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    ntikiMAC: a new radio duty cycling mechanism that uses a combination
    of link-layer and MAC-layer mechanisms to achieve a very low power
    consumption: during idle listening the radio is switched off between
    99.2% and 99.6% of the time. One unicast transmission typically adds
    between 0.07% and 1.2% additional radio time, depending on packet
    size.
    
    ContikiMAC uses the standard IEEE 802.15.4 message format and adds no
    additional headers.
    
    ContikiMAC is simple: it uses periodic two-shot channel sampling
    during idle listening to keep the radio on-time down. Transmissions
    are done with repeated transmissions until a link-layer ACK is
    received.
    Increased the clock speed to 32768/4 from 32768/8 to provide better accuracy for power profiling of radio CCA checks
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    removed offset in rtimer_arch
    Reading timer now quicker, embryo for possible future drift configuration
    Fixed description
    MSP430 real-time rtimer support using timerb1
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    MSP430 definitions
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    fixed cpu/msp430 for compilation with IAR compiler
    IRQ_PORTx is no longer used. Instead returning port number.
    added SELECT_IO and SELECT_PM macros
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    added handling function for checkin if uart is transmitting or receiving - patch by Klaus Stengel
    Changed the return value of the inpt handler function to int so that it can wake up the CPU from LPM
    Added support for configurable callbacks of uart1 input.
    UART1 driver
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved putchar into separate file to make it easier to override its implementation
    added some files for MSP430X I/O
    Moved putchar into separate file to make it easier to override its implementation
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    fixed cpu/msp430 for compilation with IAR compiler
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated SPI config for faster SPI, split msp430/clock/spi into separate versions for MSP430/MSP430X
    Fixed quick dco sync to also work with mspgcc
    Corrected timing for higher CPU speed
    Initial WiSMote port based on code from Arago Systems.
    Fixed splhigh/splx for the IAR compiler
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed Sky platform for IAR compiler
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    minor fixes of DMA uart code
    added initial uart1 DMA rx support and required LPM requirements api
    only include memcpy/set workaround when needed
    activated the new workaround...
    fixed workaround for memcpy/set to be memory efficient but slower
    added DCO-resync function and default config
    Initialize watchdog instead of stopping and starting it
    Added improvements suggested by Hardy Greich: define CPU speed in one place only (contiki-conf.h), added nop to XTAL settlement delay
    Updated to use the watchdog API
    * Use _end rather than nonstandard __bss_end.
    Moved uip_ipchksum() into a separate file to allow the Tmote Sky port to be compiled entirely without uIP
    * Workaround for bug in msp430-ld where __bss_end is sometimes
      misaligned.
    
    * Indent trailing brace properly.
    * Obob in cur_break initialisation.
    Make malloc machine independent by relying on dependent sbrk(2).
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Cross compiler interrupt service routine compatibility definitions for MSP430 based platforms based on isr_compat.h by Steve Underwood.
    * Added f2xxx for two series (for example z1)
    * f1xxx is baseline and always included
    * Cleaned up the names of uart and spi (no x in names)
    * Updated SPI configuration for WiSMote
    Initial WiSMote port based on code from Arago Systems.
    using dma by default
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed Sky platform for IAR compiler
    fixed bug with uart DMA
    Larger default DMA tx buffer size, to allow SLIP operation. Warn if DMA is enabled, since MSPsim does not yet support it.
    Tx on interrupts occasionally misses characters on output. Therefore we turn it off by default.
    minor fixes of DMA uart code
    added initial uart1 DMA rx support and required LPM requirements api
    removed obsolete comments
    reverted previous patch: appears to create problems on hardware
    Ensure that the UART port is available before writing
    Added support for CPU speed 2.4576MHz and configuration to enable/disable interrupt driven TX
    Must check error flag before reading. Removed leds debug.
    Moved putchar into separate file to make it easier to override its implementation
    uart correction values for 3.9Mhz (default sky freq.)
    Initialize the transmit ringbuffer before enabling TX interrupt
    Always prod the watchdog on output to avoid spurious resets during long serial outputs
    Added optional interrupt-based transmission, based on the ringbuf library
    Minor code style fixes
    added handling function for checkin if uart is transmitting or receiving - patch by Klaus Stengel
    changed usart code to handle LPM3
    moved energest from lib/ to sys/
    Made SLIP code coexist with ordinary serial code. If WITH_UIP=1, the SLIP code is used instead.
    Changed the return value of the inpt handler function to int so that it can wake up the CPU from LPM
    Added support for configurable callbacks of uart1 input.
    Added energy estimation
    UART1 driver
    * General stuff for different baudrates:
    
        - ubr argument to slip_arch_int
    
        - macros for calculating ubr
    
        - argument -Bbaudrate to tools tunslip and scat
    * Bump speed over serial to 115200 (Tmote sky only).
    Use LPM4_EXIT to return from sleep on msp430.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix clock.h warnings caused by multiple, conflicting documentation blocks of clock functions
    Fix time accounting on msp430 Series 1 and Series 2 MCU based platforms.
    
    The problem with the current version of the code was that the condition at the end of the do...while loop at Timer A1 interrupt:
     while((TACCR1 - TAR) > INTERVAL);
    evaluates to false whenever TACCR1 == TAR.
    Not incrementing TACCR1 in this case leads to Timer A1 interrupt not being called for 2 seconds, until TAR counter reaches TACCR1 again after an overflow.
    
    The patch avoids this problem by changing the condition of the loop, and using CLOCK_LT macro to compare between time values.
    
    The patch also attempts to fix another problem: a read of TAR register while it is being updated may return a lower value than the actual contents. To avoid that, the "read twice and compare results" idiom should be used. As the TAR register is updated by the actual hardware, it is of no importance whether it is read with interrupts disabled or enabled; the problem can occur in both contexts.
    Add clock_delay_us and clock_set_seconds to clock.h. Modify clock_wait to use clock_time_t.
    Remove the troublesome avr/dev/delay.* files.
    Add PLATFORM_NAME and combine the confusing *_REVISION defines into a single PLATFORM_TYPE
    Cross compiler interrupt service routine compatibility definitions for MSP430 based platforms based on isr_compat.h by Steve Underwood.
    * Added f2xxx for two series (for example z1)
    * f1xxx is baseline and always included
    * Cleaned up the names of uart and spi (no x in names)
    * Updated SPI configuration for WiSMote
    Updated SPI config for faster SPI, split msp430/clock/spi into separate versions for MSP430/MSP430X
    Changed clock_delay to use the nop instruction
    Initial WiSMote port based on code from Arago Systems.
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    msp430: fix "implicit declaration of function" warnings in clock.c, by including watchdog.h
    Turned up the rtimer resolution to 32678 Hz.
    Bugfix: the clock interrupt now flushes the energy estimator to avoid overflow of the LPM mode
    Turn off LPM mode for clock interrupts to avoid rtimer wrapping during extended LPM
    Increased the rtimer granularity: needed to make contikimac work
    Added support for 32-bit clock ticks: when reading the 32-bit value, make sure that it does not change between readouts to avoid reading right in the middle of it being updated
    Removed safeguards around the update code for the timer; turns out they weren't needed (but instead triggered a bug in MSPsim)
    Turn off Timer A before modifying its control registers to avoid problems when timer is updated frequently
    Increased the clock speed to 32768/4 from 32768/8 to provide better accuracy for power profiling of radio CCA checks
    Enable interrupts during the periodic clock processing to allow rtimers to execute on top of the clock
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    changed to use unsigned long for seconds counter
    bug fix, msp430 hw bug (undocumented):
    
    when in continuous/compare mode the interrupt handler may get called before CCR==TR.
    
    behavior observed when the timer is toggled between STOP/CONT in an external interrupt handler (serial input).
    
    possibly this problem may also affect watchdog timer/timer B
    Added a clock_seconds() function prototype to core/sys/clock.h, that returns seconds in 32 bit format. On platforms like the MSP430, which has a 16 bit native datatype, this cannot be implemented with an interrupt tick that increments a 32 bit value because access is not atomic. Instead, the MSP430 code increments 16 bit seconds value and converts this into a 32 bit value through an offset calculation. If the new value is smaller than the last check, the offset is incremented by 65536. This change also means that CLOCK_CONF_SECOND must be a power of two because a modulo operation is used inside the periodic tick interrupt handler.
    moved energest from lib/ to sys/
    Reformatting to comply with code style
    Added a hack function called clock_counter() to make the current prototype profiling code run on the MSP430 platform
    fixed some timer interrupt bugs and reimplemented clock_fine to avoid disabling interrupts
    support for delayed interrupts
    
    earlier TACCR1 could be set to already passed time if timer A interrupts was delayed
    removed redundant code - configuration of basic clock subsystem in clock and rtimer_arch
    Added energy estimation
    corrected comments
    Added experimental clock_fine() function
    Obob bug spotted by nfi.
    Use LPM4_EXIT to return from sleep on msp430.
    * Deal with numerical overflows.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Cross compiler interrupt service routine compatibility definitions for MSP430 based platforms based on isr_compat.h by Steve Underwood.
    Updated SPI config for faster SPI, split msp430/clock/spi into separate versions for MSP430/MSP430X
    Initial WiSMote port based on code from Arago Systems.
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    fixed cpu/msp430 for compilation with IAR compiler
    added missing include
    Enable the watchdog for rtimers too. Removed the disabling of the TACTL - it should not be needed, and interferes with the timing behaviour of stable rtimers
    Added function rtimer_arch_now that makes sure that the timer value does not change between readouts to avoid reading while the timer is being updated.
    Turn off timer before updating - needed to avoid bugs in ContikiMAC - not 100% sure why
    Removed safeguards around the update code for the timer; turns out they weren't needed (but instead triggered a bug in MSPsim)
    Turn off Timer A before modifying its control registers to avoid problems when timer is updated frequently
    Remove the read from TAIV - this should not be done for TIMERA0 interrupts (in fact, doing so messes up the other timer a interrupts, like the clock tick...)
    Need to clear the interrupt flag register for Timer A
    bug fix: wake up MSP430 when leaving rtimer interrupt if the rtimer polled a process.
    thanks to Marco Vedovati for finding the bug
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    Moved energest from lib/ to sys/
    removed offset in rtimer_arch
    removed redundant code - configuration of basic clock subsystem in clock and rtimer_arch
    Added energy estimation, embryo for possible future drift configuration
    rtimer_arch_now() now returns the correct value
    Fixed description
    MSP430 real-time rtimer support using timerb1
    Added #include that #defines NULL
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    Added *experimental* module for sending raw (non-routed) packets from Contiki. The name of the module is likely to change.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Remove unused SPI initializer flag from AVR. Comment out in the msp-430 template.
    Updated SPI config for faster SPI, split msp430/clock/spi into separate versions for MSP430/MSP430X
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed Sky platform for IAR compiler
    Import of the contiki-2.x development code from the SICS internal CVS server
    cc2x3x stack debugging macro fix
    Copied cc2530 stack functions to the cc2430 port
    Reworked the cc2530 stack debugging facilities:
    
    - Moved to their own file
      (so we can later copy the entire thing over to cc2430)
    - Renamed the functions
      (for naming convention reasons)
    - The entire thing can be enabled/disabled
    - Added a couple more macros
    - Hooked into main()
    cc2531 Button 2 driver
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Reincarnate the sensinode/cc2430 port
    Reincarnate the sensinode/cc2430 port
    add definition for PSBANK used in sdcc crtbank.asm
    Fixes and improvements from Anthony Asterisk
    - First in 8051def.h,  it appears the uip_arch-asm.S file was copied from z80 and am unsure it will work properly.  I modified the 8051def.h to prevent the UIP code from using these routines.
    - In dma.c the config routine provides access to all of the DMA channel options, except for the word mode flag.  In order to maintain compatibility with any existing code I created a second routine and converted the original routine into a wrapper routine with a fixed word mode value.
    - uart.c::uart0_init was missing blocking access to the higher baud rates.  I am not sure why, so I corrected this.
    - I also copied over to header files that provide some useful macros from the msp430 cpu.  The files are lpm.h and hwconf.h.  The lpm.h is for switching power modes, I think.  The hwconf.h has various macros for configuring port I/O.  By porting these files the led/button api's can be ported with minimal modifications.
    Initial commit of cc2430 cpu port files. Currently used by /platform/sensinode.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Sensinode/cc2430 stack depth optimisation
    
    This replicates the method used by the cc2530 port
    Adjust cc2x3x ports to the new clock API
    We can now use SDCC's __nonbanked feature
    
    This allows us to reduce CODE footprint of SDCC projects
    built with --model-huge. Use carefully!
    
    * Added a facility which allows us to enable/disable the
      feature from the CPU dir (CC_CONF_NON_BANKED_OPTIMIZATION)
    * Added the CC_NON_BANKED keyword to some platform files
      (expands to __nonbanked)
    * Started using this for some examples
    Added an ASM(foo) macro for cc243x
    Deleted obsolete macros. Minor formatting
    For cc2x30, moved CLOCK_CONF_SENCOND to the cpu dir.
    
    The value is not really configurable by the platform so having it
    in contiki-conf.h didn't make huge sense.
    Wrapped cc2x30 SOFT_RESET() macro inside do {...} while(0)
    Some uN_t had crept back in cc2530dk and sensinode.
    
    Changed to uintN_t plus a bit of code formatting
    Reincarnate the sensinode/cc2430 port
    Fixes and improvements from Anthony Asterisk
    - First in 8051def.h,  it appears the uip_arch-asm.S file was copied from z80 and am unsure it will work properly.  I modified the 8051def.h to prevent the UIP code from using these routines.
    - In dma.c the config routine provides access to all of the DMA channel options, except for the word mode flag.  In order to maintain compatibility with any existing code I created a second routine and converted the original routine into a wrapper routine with a fixed word mode value.
    - uart.c::uart0_init was missing blocking access to the higher baud rates.  I am not sure why, so I corrected this.
    - I also copied over to header files that provide some useful macros from the msp430 cpu.  The files are lpm.h and hwconf.h.  The lpm.h is for switching power modes, I think.  The hwconf.h has various macros for configuring port I/O.  By porting these files the led/button api's can be ported with minimal modifications.
    Initial commit of cc2430 cpu port files. Currently used by /platform/sensinode.
    Code style fixes: cc2430
    Sensinode/cc2430 stack depth optimisation
    
    This replicates the method used by the cc2530 port
    Reincarnate the sensinode/cc2430 port
    Cross compiler interrupt service routine compatibility definitions for MSP430 based platforms based on isr_compat.h by Steve Underwood.
    Updated SPI config for faster SPI, split msp430/clock/spi into separate versions for MSP430/MSP430X
    Initial WiSMote port based on code from Arago Systems.
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    fixed cpu/msp430 for compilation with IAR compiler
    added missing include
    Enable the watchdog for rtimers too. Removed the disabling of the TACTL - it should not be needed, and interferes with the timing behaviour of stable rtimers
    Added function rtimer_arch_now that makes sure that the timer value does not change between readouts to avoid reading while the timer is being updated.
    Turn off timer before updating - needed to avoid bugs in ContikiMAC - not 100% sure why
    Removed safeguards around the update code for the timer; turns out they weren't needed (but instead triggered a bug in MSPsim)
    Turn off Timer A before modifying its control registers to avoid problems when timer is updated frequently
    Remove the read from TAIV - this should not be done for TIMERA0 interrupts (in fact, doing so messes up the other timer a interrupts, like the clock tick...)
    Need to clear the interrupt flag register for Timer A
    bug fix: wake up MSP430 when leaving rtimer interrupt if the rtimer polled a process.
    thanks to Marco Vedovati for finding the bug
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    Moved energest from lib/ to sys/
    removed offset in rtimer_arch
    removed redundant code - configuration of basic clock subsystem in clock and rtimer_arch
    Added energy estimation, embryo for possible future drift configuration
    rtimer_arch_now() now returns the correct value
    Fixed description
    MSP430 real-time rtimer support using timerb1
    Added #include that #defines NULL
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    Added *experimental* module for sending raw (non-routed) packets from Contiki. The name of the module is likely to change.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Split the cc2430 custom rules into its own file
    Disable SDCC warnings 110 and 126
    
    Those two warnings are optimisation-related
    * 110 warns that an always-false if branch has been optimised out
    * 126 warns about unreachable code which also gets optimised out
    
    In disabling those warnings, we make the build less cluttered
    Support verbosity control for 8051-based platforms
    Change to sdar from the now deprecated sdcclib
    Don't redirect sdld output to dev/null
    
    This was used in the past because sdld was
    very verbose when linking banked hex files. New
    sdld versions do not exhibit this level of
    verbosity and therefore the redirect can be
    stopped
    Remove leftover make targets
    
    The sensinode platform does not support .upload and .serialdump
    Their presence in the makefile has confused in the past confused
    some users. This commit removes them
    
    The commit also removes the $(OBJECTDIR)/%.rel: %.cS recipe which
    is not used by either 8051 platform and is probably broken anyway,
    since it has been unmaintained for years
    Makefile.include: support make clean all
    
    Historically $(OBJECTDIR) was created when Makefile.include is read.  A
    consequence is that combining "clean" with "all" (or any other build
    target) results in an error because the clean removes the object
    directory that is required to exist when building dependencies.
    Creating $(OBJECTDIR) on-demand ensures it is present when needed.
    
    Removed creation of $(OBJECTDIR) on initial read, and added an order-only
    dependency forcing its creation all Makefile* rules where the target is
    explicitly or implicitly in $(OBJECTDIR).
    Copied cc2530 stack functions to the cc2430 port
    cc2430: Build with --fomit-frame-pointer
    Minor Sensinode build cleanup
    Reincarnate the sensinode/cc2430 port
    include new files in source file list.
    Add support for bank switching and segment.rules file to assign code to banks.
    - Fixed the MAC/RF interface problems, now correctly working with sicslowmac. Tested with rf_test_tx and rf_test_rx. Still needs more thorough testing.
    - Corrected a Makefile bug, was complaining about *.d missing
    - Fixed a compilation problem caused by 2.3 root Makefile-include changes with regard to sdcc.
    - Fixed a small typo in cc2430_rf.c
    - examples/sensinode now compiles
    Initial commit of cc2430 cpu port files. Currently used by /platform/sensinode.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Code style fixes: cc2430
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Reincarnate the sensinode/cc2430 port
    Initial commit of cc2430 cpu port files. Currently used by /platform/sensinode.
    Turned rtimer_arch_now() from a (one line) function into a macro.
    Added rtimer_arch_now prototype
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    MSP430 definitions
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    Reincarnate the sensinode/cc2430 port
    update code bank assignments
    rules file for assigning code files to specific banks.
    Split the cc2430 custom rules into its own file
    Code style fixes: cc2430
    Copied cc2530 stack functions to the cc2430 port
    Reworked the cc2530 stack debugging facilities:
    
    - Moved to their own file
      (so we can later copy the entire thing over to cc2430)
    - Renamed the functions
      (for naming convention reasons)
    - The entire thing can be enabled/disabled
    - Added a couple more macros
    - Hooked into main()
    cc253x: Add stack monitoring helpers
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Broke out serial-shell from the shell app into its own app. Project can use the serial-shell to get a shell running over the serial line, just like a project can use the telnetd to get a shell running over Telnet/TCP/IP.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Code style fixes: cc2430
    Reincarnate the sensinode/cc2430 port
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    - Added mtarch.c and mtarch.h back to /cpu/cc2430. Seems that mt.c needs mtarch.h even though we are not using mtarch right now in this port.
    Added some comments.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Added a function for measuring stack usage
    Made stacksize configurable via external definition
    Import of the contiki-2.x development code from the SICS internal CVS server
    Reincarnate the sensinode/cc2430 port
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    This is an initial commit of an implementation of the Chameleon
    architecture for the Rime stack for Contiki. The Chameleon
    architecture separates the header processing from the Rime protocol
    logic. Instead of having each protocol create its own part of the
    packet header, protocols use packet attributes. Before sending a
    packet, a special Chameleon header processing module creates a packet
    header from the packet attributes. The same Chameleon module parses
    incoming packets and creates packet attributes from the header.
    
    The details are in our SenSys 2007 paper:
    
    Adam Dunkels, Fredrik Osterlind, Zhitao He. An Adaptive Communication
    Architecture for Wireless Sensor Networks. In Proceedings of the Fifth
    ACM Conference on Networked Embedded Sensor Systems (SenSys 2007),
    Sydney, Australia, November 2007.
    
    http://www.sics.se/~adam/dunkels07adaptive.pdf
    
    This is a rewrite of the code that was developed for the paper.
    Turned rtimer_arch_now() from a (one line) function into a macro.
    Added rtimer_arch_now prototype
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    MSP430 definitions
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    Reincarnate the sensinode/cc2430 port
    Reincarnate the sensinode/cc2430 port
    Fix clock.h warnings caused by multiple, conflicting documentation blocks of clock functions
    Code style fixes: cc2430
    Sensinode/cc2430 stack depth optimisation
    
    This replicates the method used by the cc2530 port
    Changed the cc2430 sleep_flag to uint8_t
    Removed redundant #else blocks
    Adjust cc2x3x ports to the new clock API
    Add clock_delay_us and clock_set_seconds to clock.h. Modify clock_wait to use clock_time_t.
    Remove the troublesome avr/dev/delay.* files.
    Add PLATFORM_NAME and combine the confusing *_REVISION defines into a single PLATFORM_TYPE
    cc2x3x clock_delay(len) now delays for approx. len usecs
    Comment rewording and formatting
    Stack-friendly cc243x clock ISR enabled by default
    
    This new approach (CLOCK_CONF_ACCURATE=0) was not as inaccurate
    as originally thought. In fact, it has pretty much the same
    accuracy as the old, stack-hungry version.
    
    * Renamed the define from CLOCK_CONF_ACCURATE (1: old) to
      CLOCK_CONF_STACK_FRIENDLY (1: new) to stop implying
      that one is more accurate than the other.
    * Using CLOCK_CONF_STACK_FRIENDLY by default.
    cc2x3x clock driver cleanup
    
    * Bit-Addressable SFRs are now accessed as such,
      instead of (N)OR-ing the byte
    * A routine was declared as CCIF but not defined as such. Fixed
    * Deleted a leftover duplicate define
    * Formatting
    * Comment updates and clarifications
    Reincarnate the sensinode/cc2430 port
    Initial commit of cc2430 cpu port files. Currently used by /platform/sensinode.
    Code style fixes: cc2430
    Reincarnate the sensinode/cc2430 port
    Modifications to support banked code.  Interrupts and routines accessed through function pointers reside in independent files so they can be assigned to the HOME bank.  Init code can be placed in any bank.
    Also add adc init code and bank header files.
    Fixes and improvements from Anthony Asterisk
    - First in 8051def.h,  it appears the uip_arch-asm.S file was copied from z80 and am unsure it will work properly.  I modified the 8051def.h to prevent the UIP code from using these routines.
    - In dma.c the config routine provides access to all of the DMA channel options, except for the word mode flag.  In order to maintain compatibility with any existing code I created a second routine and converted the original routine into a wrapper routine with a fixed word mode value.
    - uart.c::uart0_init was missing blocking access to the higher baud rates.  I am not sure why, so I corrected this.
    - I also copied over to header files that provide some useful macros from the msp430 cpu.  The files are lpm.h and hwconf.h.  The lpm.h is for switching power modes, I think.  The hwconf.h has various macros for configuring port I/O.  By porting these files the led/button api's can be ported with minimal modifications.
    Initial commit of cc2430 cpu port files. Currently used by /platform/sensinode.
    Code style fixes: cc2430
    Reincarnate the sensinode/cc2430 port
    Reincarnate the sensinode/cc2430 port
    Code style fixes: cc2430
    Sensinode/cc2430 stack depth optimisation
    
    This replicates the method used by the cc2530 port
    Reincarnate the sensinode/cc2430 port
    Dummy watchdog implementation for cooja nodes
    Added dummy watchdog functions for all AVR platforms
    Dummy watchdog implementation so that programs that use the watchdog compiles
    Passed tests on Raven 1284p in 3 seconds  with 56KB program memory disk
    removed unnecessary inclusion
    Added dummy watchdog.c to allow compiling and running code that calls the watchdog functions
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Code style fixes: cc2430
    Added channel_get() to the cc2x3x RF drivers
    Renamed a config define to better match contiki's naming philosophy
    Reincarnate the sensinode/cc2430 port
    Modifications to support banked code.  Interrupts and routines accessed through function pointers reside in independent files so they can be assigned to the HOME bank.  Init code can be placed in any bank.
    Also add adc init code and bank header files.
    - Added RF address setup function (byte order may not be correct)
    - Fixed the interrupt and read functions, now receiving one frame correctly
    - Improved the send and read functions to work with sicslowmac.c
    - TODO: Still a MAC interaction problem. Although the exact same payload is received and sent up to the MAC as is sent, the MAC doesn't do anything with it. Turn on DEBUG in sicslowmac.c to see the problem.
    - Removed mtarch files, not used currently
    Initial commit of cc2430 cpu port files. Currently used by /platform/sensinode.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Reincarnate the sensinode/cc2430 port
    Modifications to support banked code.  Interrupts and routines accessed through function pointers reside in independent files so they can be assigned to the HOME bank.  Init code can be placed in any bank.
    Also add adc init code and bank header files.
    Fixes and improvements from Anthony Asterisk
    - First in 8051def.h,  it appears the uip_arch-asm.S file was copied from z80 and am unsure it will work properly.  I modified the 8051def.h to prevent the UIP code from using these routines.
    - In dma.c the config routine provides access to all of the DMA channel options, except for the word mode flag.  In order to maintain compatibility with any existing code I created a second routine and converted the original routine into a wrapper routine with a fixed word mode value.
    - uart.c::uart0_init was missing blocking access to the higher baud rates.  I am not sure why, so I corrected this.
    - I also copied over to header files that provide some useful macros from the msp430 cpu.  The files are lpm.h and hwconf.h.  The lpm.h is for switching power modes, I think.  The hwconf.h has various macros for configuring port I/O.  By porting these files the led/button api's can be ported with minimal modifications.
    Reincarnate the sensinode/cc2430 port
    Modifications to support banked code.  Interrupts and routines accessed through function pointers reside in independent files so they can be assigned to the HOME bank.  Init code can be placed in any bank.
    Also add adc init code and bank header files.
    Initial commit of cc2430 cpu port files. Currently used by /platform/sensinode.
    Code style fixes: cc2430
    Reincarnate the sensinode/cc2430 port
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Deleted the old Sensinode 'read mac from flash' routine.
    
    Since the introduction of a purpose-written routine, the old
    generic one (which was written in asm) was never being used.
    There was a configuration directive which allowed us to switch
    between the two. All references to this configuration directive
    have also been removed.
    Reincarnate the sensinode/cc2430 port
    remove bank macros which are now in banked.h
    Modifications to support banked code.  Interrupts and routines accessed through function pointers reside in independent files so they can be assigned to the HOME bank.  Init code can be placed in any bank.
    Also add adc init code and bank header files.
    Initial commit of cc2430 cpu port files. Currently used by /platform/sensinode.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Code style fixes: cc2430
    Sensinode/cc2430 stack depth optimisation
    
    This replicates the method used by the cc2530 port
    Reincarnate the sensinode/cc2430 port
    Modifications to support banked code.  Interrupts and routines accessed through function pointers reside in independent files so they can be assigned to the HOME bank.  Init code can be placed in any bank.
    Also add adc init code and bank header files.
    Code style fixes: cc2430
    Reincarnate the sensinode/cc2430 port
    Modifications to support banked code.  Interrupts and routines accessed through function pointers reside in independent files so they can be assigned to the HOME bank.  Init code can be placed in any bank.
    Also add adc init code and bank header files.
    Initial commit of cc2430 cpu port files. Currently used by /platform/sensinode.
    Code style fixes: cc2430
    Sensinode/cc2430 stack depth optimisation
    
    This replicates the method used by the cc2530 port
    Renamed a config define to better match contiki's naming philosophy
    Reincarnate the sensinode/cc2430 port
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    fix adc compile errors when HAVE_DMA is not true.
    remove reference to brione_lcd.h
    turn off DEBUG messages.
    move cc2430_process to home bank since it needs to be called from a function pointer.
    disable led code to make room in home bank.
    Modifications to support banked code.  Interrupts and routines accessed through function pointers reside in independent files so they can be assigned to the HOME bank.  Init code can be placed in any bank.
    Also add adc init code and bank header files.
    Code style fixes: cc2430
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Deleted the old Sensinode 'read mac from flash' routine.
    
    Since the introduction of a purpose-written routine, the old
    generic one (which was written in asm) was never being used.
    There was a configuration directive which allowed us to switch
    between the two. All references to this configuration directive
    have also been removed.
    Reincarnate the sensinode/cc2430 port
    Modifications to support banked code.  Interrupts and routines accessed through function pointers reside in independent files so they can be assigned to the HOME bank.  Init code can be placed in any bank.
    Also add adc init code and bank header files.
    Initial commit of cc2430 cpu port files. Currently used by /platform/sensinode.
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Changed listen and transmit energy attributes so that they are named _TIME rather than _ENERGY, to indicate that they contain the time during which the radio was switched on and not the energy
    Communication power accounting: this module keeps track of the energy expenditure of individial communication activities, such as transmission or reception of individual packets or idle listening.
    This is an initial commit of an implementation of the Chameleon
    architecture for the Rime stack for Contiki. The Chameleon
    architecture separates the header processing from the Rime protocol
    logic. Instead of having each protocol create its own part of the
    packet header, protocols use packet attributes. Before sending a
    packet, a special Chameleon header processing module creates a packet
    header from the packet attributes. The same Chameleon module parses
    incoming packets and creates packet attributes from the header.
    
    The details are in our SenSys 2007 paper:
    
    Adam Dunkels, Fredrik Osterlind, Zhitao He. An Adaptive Communication
    Architecture for Wireless Sensor Networks. In Proceedings of the Fifth
    ACM Conference on Networked Embedded Sensor Systems (SenSys 2007),
    Sydney, Australia, November 2007.
    
    http://www.sics.se/~adam/dunkels07adaptive.pdf
    
    This is a rewrite of the code that was developed for the paper.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Updated to new radio_driver API
    tr1001 init fix
    Added radio sniffer program
    More uip_ipaddr_t fixes.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Code style fixes: cc2430
    Sensinode/cc2430 stack depth optimisation
    
    This replicates the method used by the cc2530 port
    Reincarnate the sensinode/cc2430 port
    Modifications to support banked code.  Interrupts and routines accessed through function pointers reside in independent files so they can be assigned to the HOME bank.  Init code can be placed in any bank.
    Also add adc init code and bank header files.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Reincarnate the sensinode/cc2430 port
    Fixes and improvements from Anthony Asterisk
    - First in 8051def.h,  it appears the uip_arch-asm.S file was copied from z80 and am unsure it will work properly.  I modified the 8051def.h to prevent the UIP code from using these routines.
    - In dma.c the config routine provides access to all of the DMA channel options, except for the word mode flag.  In order to maintain compatibility with any existing code I created a second routine and converted the original routine into a wrapper routine with a fixed word mode value.
    - uart.c::uart0_init was missing blocking access to the higher baud rates.  I am not sure why, so I corrected this.
    - I also copied over to header files that provide some useful macros from the msp430 cpu.  The files are lpm.h and hwconf.h.  The lpm.h is for switching power modes, I think.  The hwconf.h has various macros for configuring port I/O.  By porting these files the led/button api's can be ported with minimal modifications.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Added stub for extended radio API for cc2430
    Code style fixes: cc2430
    Sensinode/cc2430 stack depth optimisation
    
    This replicates the method used by the cc2530 port
    Improved handling of cc2x3x rf_flags
    Added channel_get() to the cc2x3x RF drivers
    Adjust cc2x3x ports to the new clock API
    Fixed a documentation typo
    Renamed a config define to better match contiki's naming philosophy
    Reincarnate the sensinode/cc2430 port
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    fix adc compile errors when HAVE_DMA is not true.
    remove reference to brione_lcd.h
    turn off DEBUG messages.
    move cc2430_process to home bank since it needs to be called from a function pointer.
    disable led code to make room in home bank.
    Modifications to support banked code.  Interrupts and routines accessed through function pointers reside in independent files so they can be assigned to the HOME bank.  Init code can be placed in any bank.
    Also add adc init code and bank header files.
    - Fixed the MAC/RF interface problems, now correctly working with sicslowmac. Tested with rf_test_tx and rf_test_rx. Still needs more thorough testing.
    - Corrected a Makefile bug, was complaining about *.d missing
    - Added RF address setup function (byte order may not be correct)
    - Fixed the interrupt and read functions, now receiving one frame correctly
    - Improved the send and read functions to work with sicslowmac.c
    - TODO: Still a MAC interaction problem. Although the exact same payload is received and sent up to the MAC as is sent, the MAC doesn't do anything with it. Turn on DEBUG in sicslowmac.c to see the problem.
    - Removed mtarch files, not used currently
    - Fixed a compilation problem caused by 2.3 root Makefile-include changes with regard to sdcc.
    - Fixed a small typo in cc2430_rf.c
    - examples/sensinode now compiles
    Initial commit of cc2430 cpu port files. Currently used by /platform/sensinode.
    avoid unnecessary symbols.c/h copying
    Fixed TARGET=native compilation issues on Darwin.
    Replaced make-empty-symbols with empty-symbols.[c|h]
    The symbol generation shell scripts cause CRLF issues on Windows/Cygwin again and again. Instead of fixing this yet again I opted to remove the symbol generation script at least for the "no symbols" scenario with two C source files to be copied.
    Patch by Gideon Ernst: use explicit $(CONTIKI) path instead of implicit ../../ path to the mknmlist script
    Improved map file naming consistency.
    Factored out setup directory search path for source files into Makefile.include.
    
    - All compilers used support the -I option for setting an include search directory.
    
    - The Contiki source tree follows the (common) approach of placing declarations (in headerf iles) in the same directory as definitions (in source files).
    
    As a result it makes sense to use the -I compiler option for just the same set of directories used for the vpath gnumake directive.
    
    Note: I checked several builds but nevertheless one or the other might need some additional adjustsments. Sorry for the inconvenience.
    Factored out setup directory search path for source files into Makefile.include.
    
    - Search target specific directories before CPU specific directories.
    - Search CPU specific directories before generic directories.
    
    Note: I checked several builds but nevertheless one or the other might need some additional adjustsments. Sorry for the inconvenience.
    x86 elfloader
    Added elfloader-stub, symbols generation
    Redefined LD to gcc to make things compile. Removed generation of symbols.[ch] due to problematic builds (seemingly neverending loops).
    Added generation of symbols.[ch]
    Removed out-commented stuff from Makefiles
    Import of the contiki-2.x development code from the SICS internal CVS server
    added support for 64-bit architectures, as already added on the cooja mtarch clone (patch provided by Jesper Karlsson and David Gustafsson)
    reverted last commit (sorry, committed wrong file.. :)
    minor 64 bit fix: divide by sizeof(unsigned long) instead of constant 4
    Added a function for measuring stack usage
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Added a function for measuring stack usage
    Made stacksize configurable via external definition
    Import of the contiki-2.x development code from the SICS internal CVS server
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    Move files.
    Uncrustify.
    Added the TIME driver for RL78G14.
    Added the PmodRF3 demo for Renesas RL78G14 board.
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    Move files.
    Uncrustify.
    Added the TIME driver for RL78G14.
    Added the PmodRF3 demo for Renesas RL78G14 board.
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    Move files.
    Uncrustify.
    In GNURL78 v13.01 __far keyword is fixed. Now it is possible to use far pointers to flash area.
    Initial commit
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Increase the default baudrate to 38400 bps for RL78.
    Fix buggy UART baudrate calculation in the RL78 UART driver.
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    Move files.
    Uncrustify.
    In GNURL78 v13.01 __far keyword is fixed. Now it is possible to use far pointers to flash area.
    Initial commit
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    Move/rename files.
    * libc/machine/rl78/setjmp.S: Convert from CPP macros to GAS macros, to avoid dependence on the line separation character.
    
    * rl78/crt0.S (_interrupt_vector_table): Convert from CPP macros
    to GAS macros, to avoid dependence on the line separation
    character.
    [libgloss] * configure.in: Add rl78. * configure: Regenerate. * rl78: New directory
    
    [newlib]
    * configure.host: Add rl78.
    * libc/include/machine/ieeefp.h: Add rl78 support.
    * libc/include/machine/setjmp.h: Add rl78 support.
    * libc/machine/configure.in: Add rl78.
    * libc/machine/rl78: New directory.
    rl78: Attempt to locate the IAR installation automatically and instruct the user how to specify IAR_PATH if it cannot be found.
    rl78: Rename CORE to RL78_CORE to avoid a conflict with Contiki's CORE variable.
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    Move/rename files.
    [libgloss] * configure.in: Add rl78. * configure: Regenerate. * rl78: New directory
    
    [newlib]
    * configure.host: Add rl78.
    * libc/include/machine/ieeefp.h: Add rl78 support.
    * libc/include/machine/setjmp.h: Add rl78 support.
    * libc/machine/configure.in: Add rl78.
    * libc/machine/rl78: New directory.
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    Move/rename files.
    [libgloss] * configure.in: Add rl78. * configure: Regenerate. * rl78: New directory
    
    [newlib]
    * configure.host: Add rl78.
    * libc/include/machine/ieeefp.h: Add rl78 support.
    * libc/include/machine/setjmp.h: Add rl78 support.
    * libc/machine/configure.in: Add rl78.
    * libc/machine/rl78: New directory.
    Remove hyphen from preprocessor symbol to fix compiler warning.
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    Move files.
    Uncrustify.
    Added 3 more functions.
    Added the PmodRF3 demo for Renesas RL78G14 board.
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    Move files.
    Uncrustify.
    Added 3 more functions.
    Added the PmodRF3 demo for Renesas RL78G14 board.
    Added stub for extended radio API for rl78
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    Move files.
    Uncrustify.
    Added 3 more functions.
    Added the PmodRF3 demo for Renesas RL78G14 board.
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    cc2531: Added a new USB demo project (CDC-ACM)
    
    See Pull Request #18
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add cpu/rl78/dev/uart1.h because some examples rely on it.
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add CC26xx CPU files
    Add CC26xx CPU files
    Make the CC2538 secondary IEEE address location configurable
    Fix incorrect IEEE address byte re-ordering
    CC2538: add secondary location to ieee address
    
    The CC2538 currently has two addressing options: a hardcoded address set
    at compile time or the address stored in primary address section of the
    info page. This commit adds the option to choose the secondary location
    of the ieee address from the info page, or any memory address.
    
    To use, define `IEEE_ADDR_CONF_USE_SECONDARY_LOCATION` in `project-conf.h`
    or similar.
    
    For example:
    
        #define IEEE_ADDR_CONF_USE_SECONDARY_LOCATION 1
    Change the InfoPage Location of the IEEE address
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    cc2531: Added a new USB demo project (CDC-ACM)
    
    See Pull Request #18
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add CC26xx CPU files
    Add CC26xx CPU files
    Add MQTT demo for the cc2538dk platform
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add CC26xx CPU files
    CC2538: Add FLASH_CONF_ORIGIN and FLASH_CONF_SIZE config parameters.
    cc2538: Remove the unused vtable section
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: Move SoC data to a dedicated section to save space
    
    Some SoC data requires huge alignments. E.g., the µDMA channel control table has
    to be 1024-byte aligned. This table was simply aligned to 1024 bytes in the C
    code, which had the following consequences, wasting a lot of RAM:
     - As this table could be placed anywhere in .bss, there could be an alignment
       gap of up to 1023 bytes between the preceding data and this table.
     - The size of this table was also aligned to 1024 bytes, regardless of
       UDMA_CONF_MAX_CHANNEL, making this configuration option supposed to save RAM
       just useless.
     - .bss was also aligned to at least 1024 bytes, creating a huge alignment gap
       between .data and .bss.
    
    Instead of relying on the compiler to force this alignment, and on the linker to
    automatically place data, this change places carefully such SoC data in RAM
    using the linker script. A dedicated section is created to place such SoC data
    requiring huge alignments, and it is put at the beginning of the SRAM in order
    to ensure a maximal alignment without any gap. In this way, the alignment of
    .bss also remains normal, and the size of this table is not constrained by its
    alignment, but only by its contents (i.e. by UDMA_CONF_MAX_CHANNEL).
    
    In the case of the µDMA channel control table, the data is still zeroed by
    udma_init() (instead of also being zeroed as part of .bss).
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: Set the type of the .nrdata output section to NOLOAD
    
    The .nrdata section is volatile, so its initialization must be controlled by the
    application, and not be automatically done by the startup code. It should
    neither be zeroed like .bss, nor be initialized from data in flash memory like
    .data. This was already supposed to be the case, but the output section type of
    .nrdata was not set to NOLOAD, causing the generated ELF .nrdata section header
    to be of type PROGBITS instead of NOBITS, i.e. load data was generated to be
    programmed in RAM, thus producing huge unprogrammable .bin files.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: Add header file for flash CCA page and use it
    
    Create a dedicated header file with all the definitions for the flash lock bit
    page and customer configuration area. This avoids duplicating those definitions
    in the startup-gcc.c files of all CC2538-based platforms, and this also allows
    to easily manipulate the CCA from outside startup-gcc.c (e.g. for on-the-air
    firmware update).
    
    The definitions are now complete contrary to what was in startup-gcc.c:
     - Definitions have been added to select the bootloader backdoor pin and active
       level if enabled.
     - Definitions have been added to access the page and debug lock bits. The debug
       lock bit can be used to prevent someone from reading back a programmed
       firmware through JTAG if the firmware binary image has to be confidential,
       which should be combined with a disabled bootloader backdoor.
     - The application entry point is now tied to the beginning of the .text section
       instead of to the beginning of the flash. This allows projects using custom
       linker scripts to place the application entry point anywhere in the flash,
       which can be useful e.g. for on-the-air firmware update.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: lpm: Give access to the SRAM non-retention area for PM2
    
    If PM2 is enabled with LPM_CONF_MAX_PM, but not active, the non-retention area
    of the SRAM can be useful to place temporary data that does not fit in the
    low-leakage SRAM, typically after having called lpm_set_max_pm(LPM_PM1). Hence,
    give access to this non-retention area thanks to .nrdata* sections.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add CC26xx CPU files
    Add CC26xx CPU files
    cc2538: uart: Make it possible to use several UARTs simultaneously
    
    This avoids the limitation of having a single UART available at runtime, without
    duplicating code.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    cc2531: Added a new USB demo project (CDC-ACM)
    
    See Pull Request #18
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add CC26xx CPU files
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add CC26xx CPU files
    Add MQTT demo for the cc2538dk platform
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add CC26xx CPU files
    Add MQTT demo for the cc2538dk platform
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add CC26xx CPU files
    Add MQTT demo for the cc2538dk platform
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add CC26xx CPU files
    Add MQTT demo for the cc2538dk platform
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add CC26xx CPU files
    Improve documentation for the CC2538 IEEE address re-ordering
    Improve code style
    Fix incorrect IEEE address byte re-ordering
    CC2538: add secondary location to ieee address
    
    The CC2538 currently has two addressing options: a hardcoded address set
    at compile time or the address stored in primary address section of the
    info page. This commit adds the option to choose the secondary location
    of the ieee address from the info page, or any memory address.
    
    To use, define `IEEE_ADDR_CONF_USE_SECONDARY_LOCATION` in `project-conf.h`
    or similar.
    
    For example:
    
        #define IEEE_ADDR_CONF_USE_SECONDARY_LOCATION 1
    Changed the name of the rimeaddr module to linkaddr
    Moved the rimeaddr.[ch] code from the core/net/rime module to the core/net module, as it is used not only by rime code
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add CC26xx CPU files
    Add MQTT demo for the cc2538dk platform
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add CC26xx CPU files
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc253x
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    - Added mtarch.c and mtarch.h back to /cpu/cc2430. Seems that mt.c needs mtarch.h even though we are not using mtarch right now in this port.
    Added some comments.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Added a function for measuring stack usage
    Made stacksize configurable via external definition
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add CC26xx CPU files
    Add CC26xx CPU files
    Add CC26xx CPU files
    Tidy-up multicast documentation
    
    * Create a doxygen group and add files to it, so that documents appear as modules rather than simply under files
    * Document plenty of functions, macros, constants, data types which were previously undocumented
    * Re-structure some doxygen comments to improve structure and readability
    Remove now unneeded UIP_CONF_IPV6 guards in net/ipv6 and net/rpl code
    Multicast routing table manipulation
    
    We store multicast routes in a separate table since we don't need
    as much information as we need for normal routes
    Add CC26xx CPU files
    Add CC26xx CPU files
    cc2538: uart: Make it possible to use several UARTs simultaneously
    
    This avoids the limitation of having a single UART available at runtime, without
    duplicating code.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add CC26xx CPU files
    cc2538: uart: Make it possible to use several UARTs simultaneously
    
    This avoids the limitation of having a single UART available at runtime, without
    duplicating code.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    cc2531: Added a new USB demo project (CDC-ACM)
    
    See Pull Request #18
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add CC26xx CPU files
    Add MQTT demo for the cc2538dk platform
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add CC26xx CPU files
    Add CC26xx CPU files
    Add MQTT demo for the cc2538dk platform
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add CC26xx CPU files
    Add MQTT demo for the cc2538dk platform
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add CC26xx CPU files
    Add CC26xx CPU files
    Add CC26xx CPU files
    Make the CC2538 secondary IEEE address location configurable
    Fix incorrect IEEE address byte re-ordering
    CC2538: add secondary location to ieee address
    
    The CC2538 currently has two addressing options: a hardcoded address set
    at compile time or the address stored in primary address section of the
    info page. This commit adds the option to choose the secondary location
    of the ieee address from the info page, or any memory address.
    
    To use, define `IEEE_ADDR_CONF_USE_SECONDARY_LOCATION` in `project-conf.h`
    or similar.
    
    For example:
    
        #define IEEE_ADDR_CONF_USE_SECONDARY_LOCATION 1
    Change the InfoPage Location of the IEEE address
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    cc2531: Added a new USB demo project (CDC-ACM)
    
    See Pull Request #18
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add CC26xx CPU files
    Corrected the register offset value of ANA_REGS_IVCTRL. TI was using the address offset instead of the physical address in their header file.
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add CC26xx CPU files
    Add CC26xx CPU files
    Add CC26xx CPU files
    Add CC26xx CPU files
    Add CC26xx CPU files
    Add CC26xx CPU files
    Add CC26xx CPU files
    Add CC26xx CPU files
    Add CC26xx CPU files
    Add CC26xx CPU files
    [avr] Removed usage of deprecated MCUSR
    
    Since avr-libc 1.8.0 MCUSR is marked as poison as it was replaced by the
    correct name MCUCSR.
    Thus code still using the old MCUSR name does not compile anymore.
    
    This commit replaces usages of former MCUSR by its new name MCUCSR and
    modifies the alias fallback accordingly.
    avr/bootloader.c: Now compatible with bootloaders which always run first.
    
    The boot loader now knows when to go into bootstrap mode by
    looking for a specific EEPROM value. Also updated code style
    to match Contiki code style guidelines.
    Add stk500 platform and changes suggested by Daniel Willmann
    Add missing includes
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    fixed defs and to compile for atmega32 also - has no TCNT3
    * Standard defines for AVR.
    * Standard defines for MSP430.
    * Add cle_info argument to cle_write_reloc.
    * Rename cle_upd_reloc to cle_write_reloc and changed first arg to
      point to position to be updated.
    
    * Factor cle.c into multiple files.
    Rename cc2420_uart0.c to cc2420_spi.c
    * First port of CC2420 driver to the AVR.
    Use LPM4_EXIT to return from sleep on msp430.
    Import of the contiki-2.x development code from the SICS internal CVS server
    [avr] added missing mcu parameter to ASFLAGS in order to enable assembler compilation
    Makefile.include: support make clean all
    
    Historically $(OBJECTDIR) was created when Makefile.include is read.  A
    consequence is that combining "clean" with "all" (or any other build
    target) results in an error because the clean removes the object
    directory that is required to exist when building dependencies.
    Creating $(OBJECTDIR) on-demand ensures it is present when needed.
    
    Removed creation of $(OBJECTDIR) on initial read, and added an order-only
    dependency forcing its creation all Makefile* rules where the target is
    explicitly or implicitly in $(OBJECTDIR).
    cpu/avr: Added "AVRDUDE_MCU" configuration parameter.
    core/lib/settings: Generalized Settings Manager to work on any platform
    
    This commit moves the Settings Manager from the AVR codebase
    into the Contiki core library. Any platform that implements
    the Contiki EEPROM API can now use the Settings Manager's
    key-value store for storing their persistent configuration info.
    
    The Settings Manager is a EEPROM-based key-value store. Keys
    are 16-bit integers and values may be up to 16,383 bytes long.
    It is intended to be used to store configuration-related information,
    like network settings, radio channels, etc.
    
     * Robust data format which requires no initialization.
     * Supports multiple values with the same key.
     * Data can be appended without erasing EEPROM.
     * Max size of settings data can be easily increased in the future,
       as long as it doesn't overlap with application data.
    
    The format was inspired by the [OLPC manufacturing data format][].
    
    Since the beginning of EEPROM often contains application-specific
    information, the best place to store settings is at the end of EEPROM
    (the "top"). Because we are starting at the end of EEPROM, it makes
    sense to grow the list of key-value pairs downward, toward the start of
    EEPROM.
    
    Each key-value pair is stored in memory in the following format:
    
    Order    | Size     | Name         | Description
    --------:|---------:|--------------|-------------------------------
           0 |        2 | `key`        | 16-bit key
          -2 |        1 | `size_check` | One's-complement of next byte
          -3 |   1 or 2 | `size`       | The size of `value`, in bytes
    -4 or -5 | variable | `value`      | Value associated with `key`
    
    The end of the key-value pairs is denoted by the first invalid entry.
    An invalid entry has any of the following attributes:
    
     * The `size_check` byte doesn't match the one's compliment of the
       `size` byte (or `size_low` byte).
     * The key has a value of 0x0000.
    
    [OLPC manufacturing data format]: http://wiki.laptop.org/go/Manufacturing_data
    cpu/avr: Make sure that GCC removes all unused symbols.
    
    This magic comes from the `--gc-sections` linker flag, which turns on garbage collection for unused input sections. The compiler flags `-ffunction-sections` and `-fdata-sections` make sure that each function and each static data definition have their own section. The result is that GCC can prune away all unused symbols, reducing the size of the resulting executable.
    
    These optimizations may be disabled by setting the Makefile variable
    `SMALL` to zero.
    Reorder includes to prefer platform routines. Remove redundant RPL define.
    Simplified host OS platform detection in Makefiles
    Print elf size if ELF_SIZE is defined
    Implement WITH_RPL option in makefile
    Added an .eu target to upload only the eeprom for AVR cpu.
    No strict aliasing for AVR
    
    AVR build generates numerous aliasing errors.  This -f switch silences them.
    Add stk500 platform and changes suggested by Daniel Willmann
    Replaced make-empty-symbols with empty-symbols.[c|h]
    The symbol generation shell scripts cause CRLF issues on Windows/Cygwin again and again. Instead of fixing this yet again I opted to remove the symbol generation script at least for the "no symbols" scenario with two C source files to be copied.
    avrdude and makefile changes suggested by Georg von Zengen
    $make will show avr-size once and only once whether or not a build needs to occur.
    Allow non-ipv6 build, e.g. Hello World
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    Remove usually extra avr-size command
    Add MCU to avr-size command; Remove fuse and signature from .hex; Give bootloader more memory
    Add RS232  port option to jackdaw USB stick
    Move rtimer-arch.c inclusion from platform to cpu
    Add rtimers, allow Jackdaw to use RF230BB driver
    Added watchdog.c to the USB stick code
    Added dummy watchdog functions for all AVR platforms
    moved radio specifics out of avr Makefile and added some rs232 defs in order to get MicaZ platform working
    Allow hello-world to build, fix makefile ignoring rf230bb
    *** empty log message ***
    Add rf230bb radio driver with conditional make on RF230BB=1
    reordered build path to use cpu files before core
    Lots of changes / commits! This allows ravenusbstick example to build at least.
    Changes to support the Atmel AVR Raven port
    Removed (now obsolete) PROCESS_LOADABLE.
    added experimental avr rtimer-arch implementation
    8 seconds wraparound
    only create full symbols list if SYMBOLS is defined
    removed symbols from .elf output (but always included with .out)
    + uncommented unused %.ce target (check Makefile.include to enable it)
    removed platform specific definitions
    +
    changed default linker to gcc (as for the default linker arguments)
    - Fix build of contiki-2.x AVR port.
    - Generate symbol tables for loadable modules.
    updated reference to "elfloader-tmp"
    Removed out-commented stuff from Makefiles
    Added missing includes and made Ethernut 1 & 2 ports to compile again
    AVR makefile
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Provide dummy implementations for the leds and minileds module in order
    to unbreak the build.
    Import of the contiki-2.x development code from the SICS internal CVS server
    leds: Fix the API
    
    The leds API did not work in some cases. E.g. with the following sequence:
      leds_off(LEDS_ALL);
      leds_toggle(LEDS_GREEN);
      leds_off(LEDS_ALL);
    the green LED was remaining on after the last call.
    
    This was caused by the toggle feature made synonymous with the invert feature,
    although it is unrelated. leds_toggle() is indeed supposed to toggle an LED,
    while leds_invert() is supposed to change the active level of an LED. However,
    all users of leds_invert() actually meant leds_toggle(), and the invert feature
    does not make sense in this module because it is not handy due to successive
    calls to leds_invert() changing the intended behavior, and hardware active
    levels should be managed in leds_arch_set() (e.g. by XORing the passed value
    with a hardware-specific constant before setting the output levels of the pins).
    
    Consequently, this change:
     - removes the leds_invert() function,
     - makes leds_toggle() behave as expected relatively to leds_off() / leds_on(),
     - sanitizes the code in the leds module.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Provide dummy implementations for the leds and minileds module in order
    to unbreak the build.
    Use LPM4_EXIT to return from sleep on msp430.
    Import of the contiki-2.x development code from the SICS internal CVS server
    * Generic AVR stuff.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Place ATmega1281 define in correct section (it does have compare C
    unit, avoid duplicate define and compiler warning).
    Add clock_delay_us and clock_set_seconds to clock.h. Modify clock_wait to use clock_time_t.
    Remove the troublesome avr/dev/delay.* files.
    Add PLATFORM_NAME and combine the confusing *_REVISION defines into a single PLATFORM_TYPE
    Add rtimer_arch_sleep function, enabled with RDC_CONF_MCU_SLEEP
    Use 128rfa1 interrupts instead of timing.
    Generalize DEBUGFLOW macro for use in multiple routines.
    Option for nested rtimer interrupts
    Change timer setups for arbitrary CLOCK_CONF_SECOND
    Change raven to 128 ticks and enable 32KHz crystal as default.
    Add stk500 platform and changes suggested by Daniel Willmann
    Add combined MCU and radio ATmega128rfa1
    Clean up, functional webserver for  further testing of  low power protocols
    Clean up after testing
    remove debug printf
    add rtimers for cxmac
    Add rtimers, allow Jackdaw to use RF230BB driver
    moved radio specifics out of avr Makefile and added some rs232 defs in order to get MicaZ platform working
    * Addition of Meshnetics Zigbig platform by Frederic Thepaut <frederic.thepaut@inooi.com>
    
    * Changed default RavenUSB timeout to 3 seconds... seems to give most reliable transmissions
    Changes to support the Atmel AVR Raven port
    fixed defs and to compile for atmega32 also - has no TCNT3
    added experimental avr rtimer-arch implementation
    8 seconds wraparound
    removed offset in rtimer_arch
    removed redundant code - configuration of basic clock subsystem in clock and rtimer_arch
    Added energy estimation, embryo for possible future drift configuration
    rtimer_arch_now() now returns the correct value
    Fixed description
    MSP430 real-time rtimer support using timerb1
    Added #include that #defines NULL
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    Added *experimental* module for sending raw (non-routed) packets from Contiki. The name of the module is likely to change.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add missing mtarch_stop function
    AVR specific implementation of contiki multi-threating architecture
    (supporting per-thread stacks).
    Added a function for measuring stack usage
    Fixed include path
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    SLIP for AVR on UART1
    Rename cc2420_uart0.c to cc2420_spi.c
    * First port of CC2420 driver to the AVR.
    Use LPM4_EXIT to return from sleep on msp430.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Add F_CPU=0x800000 option with phase lock to external 32768 Hz crystal
    Add MCU_CONF_LOW_WEAR option to avoid eeprom writes during development.
    Add rtimer_arch_sleep function, enabled with RDC_CONF_MCU_SLEEP
    Change timer setups for arbitrary CLOCK_CONF_SECOND
    Change raven to 128 ticks and enable 32KHz crystal as default.
    Add stk500 platform and changes suggested by Daniel Willmann
    add rtimers for cxmac
    fixed defs and to compile for atmega32 also - has no TCNT3
    added experimental avr rtimer-arch implementation
    8 seconds wraparound
    added dummy RTIMER definition
    * Add missing file.
    Moved the cc2420 driver into a separate dev/cc2420 module
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    updated to new cc2420 spi naming
    Rename cc2420_uart0.c to cc2420_spi.c
    * First port of CC2420 driver to the AVR.
    Use LPM4_EXIT to return from sleep on msp430.
    Import of the contiki-2.x development code from the SICS internal CVS server
    [avr] Removed usage of deprecated MCUSR
    
    Since avr-libc 1.8.0 MCUSR is marked as poison as it was replaced by the
    correct name MCUCSR.
    Thus code still using the old MCUSR name does not compile anymore.
    
    This commit replaces usages of former MCUSR by its new name MCUCSR and
    modifies the alias fallback accordingly.
    Add stk500 platform and changes suggested by Daniel Willmann
    Refactor with WATCHDOG_CONF_TIMEOUT
    Add defines for watchdog configuration.
    Disable watchdog software counter. Nested watchdog stop/starts will not work, but the low power protocols will.
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    Added dummy watchdog functions for all AVR platforms
    Dummy watchdog implementation so that programs that use the watchdog compiles
    Passed tests on Raven 1284p in 3 seconds  with 56KB program memory disk
    removed unnecessary inclusion
    Added dummy watchdog.c to allow compiling and running code that calls the watchdog functions
    Import of the contiki-2.x development code from the SICS internal CVS server
    Remove unused SPI initializer flag from AVR. Comment out in the msp-430 template.
    * First port of CC2420 driver to the AVR.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    AVR specific implementation of contiki multi-threating architecture
    (supporting per-thread stacks).
    Added missing includes and made Ethernut 1 & 2 ports to compile again
    Import of the contiki-2.x development code from the SICS internal CVS server
    Make RF230BB the default radio driver
    added radio-makefile for avr + rf230 platforms
    *** empty log message ***
    Radio and 802.15.4 MAC code for the Atmel AVR Raven board
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Add RADIOSTATS
    Add RADIOSTATS
    Fixed bug of no current consequence
    Fixing more possible out of date files.
    Radio and 802.15.4 MAC code for the Atmel AVR Raven board
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Add clock_delay_us and clock_set_seconds to clock.h. Modify clock_wait to use clock_time_t.
    Remove the troublesome avr/dev/delay.* files.
    Add PLATFORM_NAME and combine the confusing *_REVISION defines into a single PLATFORM_TYPE
    IRIS port is working with uIPv6
    IRIS port is working with uIPv6
    Platform 0 was matching by default
    * Addition of Meshnetics Zigbig platform by Frederic Thepaut <frederic.thepaut@inooi.com>
    
    * Changed default RavenUSB timeout to 3 seconds... seems to give most reliable transmissions
    Addition of Atmel Radio Control Board (RCB), device in RZ200 kit
    Fixing more possible out of date files.
    Radio and 802.15.4 MAC code for the Atmel AVR Raven board
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Fixing more possible out of date files.
    Radio and 802.15.4 MAC code for the Atmel AVR Raven board
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Fixing more possible out of date files.
    Radio and 802.15.4 MAC code for the Atmel AVR Raven board
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Fixing more possible out of date files.
    Radio and 802.15.4 MAC code for the Atmel AVR Raven board
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Fixing more possible out of date files.
    Radio and 802.15.4 MAC code for the Atmel AVR Raven board
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    *Support for Atmel 'Router Under Mac' (RUM) in Jackdaw
    *** empty log message ***
    Fixing more possible out of date files.
    Radio and 802.15.4 MAC code for the Atmel AVR Raven board
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Adding updated files
    A quick, initial implementation of the LPP power-saving MAC protocol (Musaloiu-E et al, IPSN 2008)
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Adding updated files
    Fixing some files...
    Radio and 802.15.4 MAC code for the Atmel AVR Raven board
    *** empty log message ***
    Adding updated files
    Fixing some files...
    Radio and 802.15.4 MAC code for the Atmel AVR Raven board
    Adding updated files
    packetbuf: Use packetbuf_holds_broadcast() all-over
    Changed the name of the rimeaddr module to linkaddr
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Add useful comment, fix compiler warnings
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    *Support for Atmel 'Router Under Mac' (RUM) in Jackdaw
    *** empty log message ***
    * Channel is saved in EEPROM
    * Allow serial port to work with more term emulators
    Adding updated files
    Fixing some files...
    Radio and 802.15.4 MAC code for the Atmel AVR Raven board
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    More updates for raven
    Radio and 802.15.4 MAC code for the Atmel AVR Raven board
    *** empty log message ***
    Radio and 802.15.4 MAC code for the Atmel AVR Raven board
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    More updates for raven
    Radio and 802.15.4 MAC code for the Atmel AVR Raven board
    Cleaned up RF230BB, and refactored FRAME_RETRIES and CSMA_RETRIES
    #defines.
    ATmega128RFA1 bug fix: no interrupt pin used (embedded radio).
    Enabling interrupt caused MCU reset if using pin as GPIO.
    Enable check on received length to prevent buffer overflow. Thank you Cooja!
    Better fix for hardware FCS error on JTAG reset
    Correct silly error introduced by trying to save two bytes.
    Improve rf23x cca procesing
    Fix delay_loop timing bug by using long long calculation.
    128rfa1 and rf230 both working with contikimac RDC
    atmega128rfa1 cca fixes, energest and rimestat macros.
    Add option to return ACK to RDC layer when in extended mode, based on Georg von Zengen code.
    128rfa1 cca fix, NETSTACK_RADIO.off now returns 0/1 if radio off/on
    Use 128rfa1 interrupts instead of timing.
    Generalize DEBUGFLOW macro for use in multiple routines.
    Implement SRAM routine of Georg von Zengen
    Add combined MCU and radio ATmega128rfa1
    Revert Larsson patch, setting this to 0x3f truncated jackdaw Tx packets to 64 bytes.
    Patches from R Larsson
    Add FCS comments and text2pcap dump routines of Roger Larsson.
    Don't send last two byte to xmit buffer since they will be overwritten by the checksum anyway.
    Conditional code to use hardware multiply by default.
    Enable RX_START interrupt and read rssi at end of preamble when not using energy detect register
    Hardware/software radio HAL patch from Roger Larsson.
    Use CHANNEL_802_15_4 define for RF channel on all AVR platforms, default 26.
    Remove hopefully unnecessary interrupt disable wrapper on eeprom reads and writes.
    Add macros by Roger Larsson to select between hardware or software SPI transactions.
    Minor speed optimizations.
    Get rssi correctly in either rx mode, clean up radio driver debugging
    RSSI read fix (use ED register in AACK mode), add reduced power configuration for miniature mesh testing.
    Turn on DEBUGFLOW and software CRC computation
    Define and use  radio STATE_TRANSITION, improve debug messaging
    Add RADIOALWAYSON to monitor packet losses with low power protocols
    additions for cxmac
    Jackdaw additions
    *** empty log message ***
    Fixing more possible out of date files.
    Radio and 802.15.4 MAC code for the Atmel AVR Raven board
    Fix wrong register addresses.
    Several bugfixes
    atmega128rfa1 cca fixes, energest and rimestat macros.
    Add option to return ACK to RDC layer when in extended mode, based on Georg von Zengen code.
    Add changes needed for contikimac
    Add configurable auto cca threshold and implement driver cca call.
    Show smallest rssi in jackdaw menu.
    Add initial file
    Define and use  radio STATE_TRANSITION, improve debug messaging
    *** empty log message ***
    Fixing more possible out of date files.
    Radio and 802.15.4 MAC code for the Atmel AVR Raven board
    *** empty log message ***
    *** empty log message ***
    Enable Timer1 on Raven so that interrupts coming from radio, which are
    connected to input capture, fire again.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Cleaned up RF230BB, and refactored FRAME_RETRIES and CSMA_RETRIES
    #defines.
    Add clock_delay_us and clock_set_seconds to clock.h. Modify clock_wait to use clock_time_t.
    Remove the troublesome avr/dev/delay.* files.
    Add PLATFORM_NAME and combine the confusing *_REVISION defines into a single PLATFORM_TYPE
    rf230bb updates: involves setting the 801.15.4 pending bit,
    0x800000 cpu clock, and a jtag reset bugfix
    Add F_CPU=0x800000 option with phase lock to external 32768 Hz crystal
    Add MCU_CONF_LOW_WEAR option to avoid eeprom writes during development.
    128rfa1 cca fix, NETSTACK_RADIO.off now returns 0/1 if radio off/on
    IRIS port is working with uIPv6
    IRIS port is working with uIPv6
    Add combined MCU and radio ATmega128rfa1
    Hardware/software radio HAL patch from Roger Larsson.
    Use CHANNEL_802_15_4 define for RF channel on all AVR platforms, default 26.
    Remove hopefully unnecessary interrupt disable wrapper on eeprom reads and writes.
    Add macros by Roger Larsson to select between hardware or software SPI transactions.
    Minor speed optimizations.
    Platform 0 was matching by default
    Jackdaw additions
    *** empty log message ***
    * Addition of Meshnetics Zigbig platform by Frederic Thepaut <frederic.thepaut@inooi.com>
    
    * Changed default RavenUSB timeout to 3 seconds... seems to give most reliable transmissions
    Addition of Atmel Radio Control Board (RCB), device in RZ200 kit
    Fixing more possible out of date files.
    Radio and 802.15.4 MAC code for the Atmel AVR Raven board
    Cleaned up RF230BB, and refactored FRAME_RETRIES and CSMA_RETRIES
    #defines.
    Improve rf23x cca procesing
    Fix delay_loop timing bug by using long long calculation.
    128rfa1 and rf230 both working with contikimac RDC
    Fix typos and file endings
    Use 128rfa1 interrupts instead of timing.
    Generalize DEBUGFLOW macro for use in multiple routines.
    Add sneezer mode and tx power change
    Add configurable auto cca threshold and implement driver cca call.
    Show smallest rssi in jackdaw menu.
    Add combined MCU and radio ATmega128rfa1
    Add rf230_listen_channel routine to force RX_ON state for sniffing and to read rssi for energy scan.
    Enable RX_START interrupt and read rssi at end of preamble when not using energy detect register
    Hardware/software radio HAL patch from Roger Larsson.
    Use CHANNEL_802_15_4 define for RF channel on all AVR platforms, default 26.
    Remove hopefully unnecessary interrupt disable wrapper on eeprom reads and writes.
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    update to new driver format
    *** empty log message ***
    Fixing more possible out of date files.
    Radio and 802.15.4 MAC code for the Atmel AVR Raven board
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    rf230bb updates: involves setting the 801.15.4 pending bit,
    0x800000 cpu clock, and a jtag reset bugfix
    Define and use  radio STATE_TRANSITION, improve debug messaging
    *** empty log message ***
    Fixing more possible out of date files.
    Radio and 802.15.4 MAC code for the Atmel AVR Raven board
    rf230bb: Fix missing ')' and indentation.
    Added stub for extended radio API for rf230
    Removed old unused timetable code
    cpu/avr/radio/rf230bb/rf230bb.c (rf230_transmit): extend comment on tx sequence
    
    Explain that the transmission is intentionally started before copying the
    frame to the buffer.
    Cleaned up RF230BB, and refactored FRAME_RETRIES and CSMA_RETRIES
    #defines.
    Fix RF230 transition: RX_AACK_ON -> TX_ARET_ON (go through PLL_ON,
    as per datasheet). Tested on RF230 and 128RFA1 (RF231).
    Several bugfixes
    rf230bb updates: involves setting the 801.15.4 pending bit,
    0x800000 cpu clock, and a jtag reset bugfix
    Improved rf230bb.c synchronization/locking. Removed unnecessary locks
    during Tx (single-threaded environment). Added protection to Rx thread
    from buffer access by ISR.
    Better fix for hardware FCS error on JTAG reset
    Correct silly error introduced by trying to save two bytes.
    Improve rf23x cca procesing
    Fix delay_loop timing bug by using long long calculation.
    128rfa1 and rf230 both working with contikimac RDC
    atmega128rfa1 cca fixes, energest and rimestat macros.
    Add option to return ACK to RDC layer when in extended mode, based on Georg von Zengen code.
    This fixes commit 9a1ce7 for spaces instead of ....
    Use enumerated tx return values
    Move LEDONPORTE1 define to contiki-conf.h, fixing typo.
    128rfa1 cca fix, NETSTACK_RADIO.off now returns 0/1 if radio off/on
    Use 128rfa1 interrupts instead of timing.
    Generalize DEBUGFLOW macro for use in multiple routines.
    Add changes needed for contikimac
    CCA measurement was always returning busy
    Replace WEBSERVER by AVR_WEBSERVER
    Don't use RF230_CONF_CCA_THRES if it is not defined.
    Add sneezer mode and tx power change
    Add configurable auto cca threshold and implement driver cca call.
    Show smallest rssi in jackdaw menu.
    Refactor clock code with optional interrupt optimizing.
    Put periodic radio calibration on conditional.
    Add combined MCU and radio ATmega128rfa1
    Patches from R Larsson
    Add FCS comments and text2pcap dump routines of Roger Larsson.
    Don't send last two byte to xmit buffer since they will be overwritten by the checksum anyway.
    Enable radio off and sleep modes.
    Move conditional needed by previous commit.
    Add rf230_listen_channel routine to force RX_ON state for sniffing and to read rssi for energy scan.
    Conditional code to use hardware multiply by default.
    Enable RX_START interrupt and read rssi at end of preamble when not using energy detect register
    Return TRAC_STATUS register when tx autoretry is enabled.
    Add status page link, show correct rssi, fix indexing off array in  ipv4 builds
    Hardware/software radio HAL patch from Roger Larsson.
    Use CHANNEL_802_15_4 define for RF channel on all AVR platforms, default 26.
    Remove hopefully unnecessary interrupt disable wrapper on eeprom reads and writes.
    Get rssi correctly in either rx mode, clean up radio driver debugging
    RSSI read fix (use ED register in AACK mode), add reduced power configuration for miniature mesh testing.
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    Turn on DEBUGFLOW and software CRC computation
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Define and use  radio STATE_TRANSITION, improve debug messaging
    Add RADIOALWAYSON to monitor packet losses with low power protocols
    Enable radio stats in sensor cgi as default
    Add sniffer and 802 frame reporting
    update to new driver format
    additions for cxmac
    Jackdaw additions
    Add RADIOSTATS
    *** empty log message ***
    PROGMEM changes needed for newer avr-gcc compiler
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix clock.h warnings caused by multiple, conflicting documentation blocks of clock functions
    avr: fix divide when CLOCK_SECOND is not a power of two
    Add clock_delay_us and clock_set_seconds to clock.h. Modify clock_wait to use clock_time_t.
    Remove the troublesome avr/dev/delay.* files.
    Add PLATFORM_NAME and combine the confusing *_REVISION defines into a single PLATFORM_TYPE
    Add F_CPU=0x800000 option with phase lock to external 32768 Hz crystal
    Add MCU_CONF_LOW_WEAR option to avoid eeprom writes during development.
    Bugfix: use 16 bit tick count to adjust clock after sleep
    Add general unsupported interrupt vector suggested by Daniel Willmann
    Adjust sleep time by ticks instead of seconds, proposed by Ivan Delamer
    Fix typos and file endings
    Add changes needed for contikimac
    Replace WEBSERVER by AVR_WEBSERVER
    Fix type, diagnostic interrupt code on conditional
    Refactor clock code with optional interrupt optimizing.
    Put periodic radio calibration on conditional.
    Add combined MCU and radio ATmega128rfa1
    Keep track of sleeptime and display on status web page.
    Remove contitional on clock updating, it should always be done after a sleep!
    Resolve TIMER2 conflict between sleep and possible clock usage.
    Option to use  32768Hz watch crystal for timing. Code suggested by Georg von Zengen.
    Enable radio stats in sensor cgi as default
    Make seconds a global variable, add optional radio on time
    fixed clock_seconds to use full 32 bit
    Lots of changes / commits! This allows ravenusbstick example to build at least.
    * Fill clock_delay with something (needs rewriting).
    * Missing volatile.
    - Re-implementation of timing facility using timer0 and the internal clock
      source. Using an external clock source (esp. the real-time clock) did not
      work. This  might as well be a local problem (e.g. hardware).
    - Provide some dummy implementations in order to fix the build.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    PROGMEM changes needed for newer avr-gcc compiler
    Add stk500 platform and changes suggested by Daniel Willmann
    Add combined MCU and radio ATmega128rfa1
    Oops - as pointed out by Daniel Willmann change had a duplicate statement... fixed!
    * Addition of Meshnetics Zigbig platform by Frederic Thepaut <frederic.thepaut@inooi.com>
    
    * Changed default RavenUSB timeout to 3 seconds... seems to give most reliable transmissions
    Addition of Atmel Radio Control Board (RCB), device in RZ200 kit
    Lots of changes / commits! This allows ravenusbstick example to build at least.
    - Fix/enhence support for RS232 interface on AVR (ATMega128):
     * support for multiple ports: (extended interface with 'port' parameter)
     * new function: rs232_redirect_stdout that allows you to redirect stdout
       to a serial port
    - In order to implement support for other MCUs, adopt a copy of
       rs232_atmega128.h
    Import of the contiki-2.x development code from the SICS internal CVS server
    PROGMEM changes needed for newer avr-gcc compiler
    Access uart registers directly instead of through intermediate addresses in a RAM struct.
    Add a platform define to reduce the number of ports supported by the cpu.
    Remove duplicate code block
    Add stk500 platform and changes suggested by Daniel Willmann
    Add combined MCU and radio ATmega128rfa1
    Allow simultaneous use of  RS232 and USB serial ports
    Add RS232  port option to jackdaw USB stick
    Renamed serial module to serial-line
    Addition of Atmel Radio Control Board (RCB), device in RZ200 kit
    Lots of changes / commits! This allows ravenusbstick example to build at least.
    - Fix/enhence support for RS232 interface on AVR (ATMega128):
     * support for multiple ports: (extended interface with 'port' parameter)
     * new function: rs232_redirect_stdout that allows you to redirect stdout
       to a serial port
    - In order to implement support for other MCUs, adopt a copy of
       rs232_atmega128.h
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Various fixes for doxygen grouping etc.
    Closing doxygen groups
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Apply patch of Ivan Delamer for atmega1281 @ 4 MHz
    Convert obsolete  MCU_MHZ to  F_CPU and add 14745600MHz case using patch from Tobias Schfer
    Addition of Atmel Radio Control Board (RCB), device in RZ200 kit
    Lots of changes / commits! This allows ravenusbstick example to build at least.
    * Defines for 8MHz cpus.
    - Fix/enhence support for RS232 interface on AVR (ATMega128):
     * support for multiple ports: (extended interface with 'port' parameter)
     * new function: rs232_redirect_stdout that allows you to redirect stdout
       to a serial port
    - In order to implement support for other MCUs, adopt a copy of
       rs232_atmega128.h
    Convert obsolete  MCU_MHZ to  F_CPU and add 14745600MHz case using patch from Tobias Schfer
    moved radio specifics out of avr Makefile and added some rs232 defs in order to get MicaZ platform working
    * Defines for 8MHz cpus.
    - Fix/enhence support for RS232 interface on AVR (ATMega128):
     * support for multiple ports: (extended interface with 'port' parameter)
     * new function: rs232_redirect_stdout that allows you to redirect stdout
       to a serial port
    - In order to implement support for other MCUs, adopt a copy of
       rs232_atmega128.h
    Use correct prescale factor
    Calculate best prescaler based on F_CPU and CLOCK_CONF_SECONDS. Inspired by patch from Ivan Delamer.
    Change timer setups for arbitrary CLOCK_CONF_SECOND
    Change raven to 128 ticks and enable 32KHz crystal as default.
    Add stk500 platform and changes suggested by Daniel Willmann
    Add combined MCU and radio ATmega128rfa1
    Remove contitional on clock updating, it should always be done after a sleep!
    TIMER2 uses TIMER2 interrupt vector!
    Option to use  32768Hz watch crystal for timing. Code suggested by Georg von Zengen.
    Addition of Atmel Radio Control Board (RCB), device in RZ200 kit
    Lots of changes / commits! This allows ravenusbstick example to build at least.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Import of the contiki-2.x development code from the SICS internal CVS server
    Include file needed for slip rpl-border-router build
    Add stk500 platform and changes suggested by Daniel Willmann
    Convert obsolete  MCU_MHZ to  F_CPU and add 14745600MHz case using patch from Tobias Schfer
    moved radio specifics out of avr Makefile and added some rs232 defs in order to get MicaZ platform working
    * Defines for 8MHz cpus.
    - Fix/enhence support for RS232 interface on AVR (ATMega128):
     * support for multiple ports: (extended interface with 'port' parameter)
     * new function: rs232_redirect_stdout that allows you to redirect stdout
       to a serial port
    - In order to implement support for other MCUs, adopt a copy of
       rs232_atmega128.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Fix build: location of eeprom.h changed.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add F_CPU=0x800000 option with phase lock to external 32768 Hz crystal
    Add MCU_CONF_LOW_WEAR option to avoid eeprom writes during development.
    Convert obsolete  MCU_MHZ to  F_CPU and add 14745600MHz case using patch from Tobias Schfer
    Lots of changes / commits! This allows ravenusbstick example to build at least.
    * Defines for 8MHz cpus.
    - Fix/enhence support for RS232 interface on AVR (ATMega128):
     * support for multiple ports: (extended interface with 'port' parameter)
     * new function: rs232_redirect_stdout that allows you to redirect stdout
       to a serial port
    - In order to implement support for other MCUs, adopt a copy of
       rs232_atmega128.h
    Add stk500 platform and changes suggested by Daniel Willmann
    Convert obsolete  MCU_MHZ to  F_CPU and add 14745600MHz case using patch from Tobias Schfer
    Lots of changes / commits! This allows ravenusbstick example to build at least.
    * Defines for 8MHz cpus.
    - Fix/enhence support for RS232 interface on AVR (ATMega128):
     * support for multiple ports: (extended interface with 'port' parameter)
     * new function: rs232_redirect_stdout that allows you to redirect stdout
       to a serial port
    - In order to implement support for other MCUs, adopt a copy of
       rs232_atmega128.h
    Convert obsolete  MCU_MHZ to  F_CPU and add 14745600MHz case using patch from Tobias Schfer
    Add RS232  port option to jackdaw USB stick
    Lots of changes / commits! This allows ravenusbstick example to build at least.
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add initial atmega128rfa1 file
    Convert obsolete  MCU_MHZ to  F_CPU and add 14745600MHz case using patch from Tobias Schfer
    Lots of changes / commits! This allows ravenusbstick example to build at least.
    * Defines for 8MHz cpus.
    - Fix/enhence support for RS232 interface on AVR (ATMega128):
     * support for multiple ports: (extended interface with 'port' parameter)
     * new function: rs232_redirect_stdout that allows you to redirect stdout
       to a serial port
    - In order to implement support for other MCUs, adopt a copy of
       rs232_atmega128.h
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Import of the contiki-2.x development code from the SICS internal CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    Addition of USB files
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    Addition of USB files
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    -Fix that can cause USB stick to freeze up
    -Add EEM Support
    Fix for error where USB host could send NAK, but isn't considered in jackdaw, resulting in jackdaw hanging
    Addition of USB files
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    PROGMEM changes needed for newer avr-gcc compiler
    Addition of USB files
    PROGMEM changes needed for newer avr-gcc compiler
    Fix error when RS232 not enabled
    Fix windows COM port enumeration
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    Addition of USB files
    [doc] Various fixes for doxygen grouping etc.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Addition of USB files
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Addition of USB files
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    Addition of USB files
    [doc] Various fixes for doxygen grouping etc.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Addition of USB files
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Fix Windows XP RNDIS+CDC serial port enumeration
    Fix windows COM port enumeration
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    -Fix that can cause USB stick to freeze up
    -Add EEM Support
    Addition of USB files
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    -Fix that can cause USB stick to freeze up
    -Add EEM Support
    Addition of USB files
    sizeof(*) is sizeof first array element
    Fix Windows XP RNDIS+CDC serial port enumeration
    Fix windows COM port enumeration
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    -Fix that can cause USB stick to freeze up
    -Add EEM Support
    Addition of USB files
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    -Fix that can cause USB stick to freeze up
    -Add EEM Support
    Addition of USB files
    Allocate variable only when mass storage is enabled
    Allow simultaneous use of  RS232 and USB serial ports
    Fix compiler warnings
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    Add RS232  port option to jackdaw USB stick
    -Fix that can cause USB stick to freeze up
    -Add EEM Support
    * Channel is saved in EEPROM
    * Allow serial port to work with more term emulators
    Addition of USB files
    Experimental 64 bit Windows 7 drivers. They work with my Phenom.
    Addition of USB files
    Addition of USB files
    Addition of USB files
    Fix compiler warnings
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    Addition of USB files
    usb/rndis: Add parentheses to an unsafe macro
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    -Fix that can cause USB stick to freeze up
    -Add EEM Support
    Fixed serious bug which causes RNDIS task to end when non-data message are sent via RNDIS interface
    Addition of USB files
    Lots of changes / commits! This allows ravenusbstick example to build at least.
    Moved unused malloc code to backyard directory
    Make malloc machine independent by relying on dependent sbrk(2).
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    Fix compiler warnings
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    -Fix that can cause USB stick to freeze up
    -Add EEM Support
    Remove compiler warnings
    * Addition of Meshnetics Zigbig platform by Frederic Thepaut <frederic.thepaut@inooi.com>
    
    * Changed default RavenUSB timeout to 3 seconds... seems to give most reliable transmissions
    Fixed serious bug which causes RNDIS task to end when non-data message are sent via RNDIS interface
    Fixed bug that non-IPv6 would hang Jackdaw
    Addition of USB files
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    PROGMEM changes needed for newer avr-gcc compiler
    Fix compiler warnings
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    RF230BB addition
    Fix for error where USB host could send NAK, but isn't considered in jackdaw, resulting in jackdaw hanging
    Remove compiler warnings
    Addition of USB files
    Addition of USB files
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    Remove compiler warnings
    Addition of USB files
    Lots of changes / commits! This allows ravenusbstick example to build at least.
    Moved unused malloc code to backyard directory
    Make malloc machine independent by relying on dependent sbrk(2).
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix compiler warnings
    Merge CDC-ECM, RNG, DFU bootloader, watchdog, settings manager,  energy scan routines of Robert Quattlebaum
    *Added ability to change channel Jackdaw (raven USB) operates on over serial menu
    Addition of USB files
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Addition of USB files
    Lots of changes / commits! This allows ravenusbstick example to build at least.
    Moved unused malloc code to backyard directory
    Make malloc machine independent by relying on dependent sbrk(2).
    Import of the contiki-2.x development code from the SICS internal CVS server
    Addition of USB files
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Addition of USB files
    Remove compiler warnings
    Addition of USB files
    Addition of USB files
    Addition of USB files
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Remove compiler warnings
    Addition of USB files
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Addition of USB files
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Addition of USB files
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Addition of USB files
    Lots of changes / commits! This allows ravenusbstick example to build at least.
    Moved unused malloc code to backyard directory
    Make malloc machine independent by relying on dependent sbrk(2).
    Import of the contiki-2.x development code from the SICS internal CVS server
    run the linker script through CPP so that the stack sizes can be
    changed using CONF parameters via DEFINES (e.g. SYS_CONF_STACK_SIZE
    4096)
    mc1322x: increase the heap to 4K
    mc1322x: increase the HEAP to 2048 bytes: needed for COAP server.
    add heap and _sbrk to mc13224v
     add a memory section for RAM so that the linker will warn when you've
        made your program too big.
    fix how start object is linked
    Move stack near BSS so it doesn't take up space in the .bin
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    Fix clock.h warnings caused by multiple, conflicting documentation blocks of clock functions
    Use the RTC only as the main timer.
    
    This is a major change to how the main tick interrupt is handled on
    the mc1322x platforms. Instead of using two timer resources, TMR0 and
    RTC, this patch unifies all the timers to use the RTC. This is enabled by
    implementing etimers as scheduled rtimers. The main advantage (aside
    from freeing TMR0 for general use) is have the Contiki timebase come
    from the same source that will be used for sleeping and wakeup.
    Add clock_delay_us and clock_set_seconds to clock.h. Modify clock_wait to use clock_time_t.
    Remove the troublesome avr/dev/delay.* files.
    Add PLATFORM_NAME and combine the confusing *_REVISION defines into a single PLATFORM_TYPE
    remove cvs keywords from cpu/mc1322x
    define TCF TCF1 and TCF2 --- the new bit structs don't work here for
    some reason.
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    Updated include paths for the moved files under net/
    Use the RTC only as the main timer.
    
    This is a major change to how the main tick interrupt is handled on
    the mc1322x platforms. Instead of using two timer resources, TMR0 and
    RTC, this patch unifies all the timers to use the RTC. This is enabled by
    implementing etimers as scheduled rtimers. The main advantage (aside
    from freeing TMR0 for general use) is have the Contiki timebase come
    from the same source that will be used for sleeping and wakeup.
    Newer and cleaner TARGET=econotag as well as robust mc13224v
    configuration system.
    
    (also deprecate TARGET=redbee-econotag)
    
    - mc13224v now automatically probes hardware config for buck converter
    and 32kHz crystal as well as automatically monitors battery voltage
    and manages the buck accordingly.
    
    - new flashed based config system for mc13224v parameters such has
      radio modes (demod, autoack), nvmtype, mac address, channel and
      power.
    
    - considerably cleaned up econotag platform code (suffered from severe
      case of bit-rot)
    remove cvs keywords from cpu/mc1322x
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    Device driver for the Dallas Semiconductor DS2401 chip.
    Platform-specific devices.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    'free_packet' in csma.c conflicted with 'free_packet' in maca.c
    Added stub for extended radio API for mc1322x
    Changed the name of the rimeaddr module to linkaddr
    Updated include paths for the moved files under net/
    add working routines to turn the mc1322x radio on and off
    the contiki-maca process should wait for a poll event
    Newer and cleaner TARGET=econotag as well as robust mc13224v
    configuration system.
    
    (also deprecate TARGET=redbee-econotag)
    
    - mc13224v now automatically probes hardware config for buck converter
    and 32kHz crystal as well as automatically monitors battery voltage
    and manages the buck accordingly.
    
    - new flashed based config system for mc13224v parameters such has
      radio modes (demod, autoack), nvmtype, mac address, channel and
      power.
    
    - considerably cleaned up econotag platform code (suffered from severe
      case of bit-rot)
    mc1322x: flush the radio rx queue in the receive process
    mc1322x: get the tx status for a packet and return the proper response.
    mc1322x: disable broken maca calls for now.
    
    maca_on, maca_off, and contiki_maca_init don't work correctly;
    they mess up address filtering.
    
    disable them for now and fix them later.
    set timestamp packet attribute
    set lqi packet attribute
    remove cvs keywords from cpu/mc1322x
    this fixes a major problem with the maca_process
    
    Before it didn't do process_poll like it should and would add events
    out of turn and mess up the event processor --- that would cause the
    button to stop working after the unhandled events exceeded a max
    number
    
    this fixes maca_process to do a process_poll as it should. now the
    button works fine and so does the radio.
    change how prepare and transmit work --- Contiki expects to call
    prepare once and then transmit many times to repeat the same packet
    over and over. This didn't work like that, but now it does.
    fix defines for raw mode
    Don't post from an interrupt context --- this resulted in process
    corruption if a packet was received at the wrong time.
    
    The maca_thread now just PAUSEs and checks rx_head instead of waiting
    for a data event to be posted.
    remove bad call to maca_on()
    
    maca_on() resets the maca and phy, takes a long time, and clobbers any
    packet that is currently being transmitted or received. It doesn't
    belong in prepare and was the source of a lot of latency and bad
    packet transmissions.
    
    Make sure the maca is on somewhere else.
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    remove cvs keywords from cpu/mc1322x
    fix mc13224v led driver to only touch gpio used for leds.
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    Initial files of the MICAz port.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Newer and cleaner TARGET=econotag as well as robust mc13224v
    configuration system.
    
    (also deprecate TARGET=redbee-econotag)
    
    - mc13224v now automatically probes hardware config for buck converter
    and 32kHz crystal as well as automatically monitors battery voltage
    and manages the buck accordingly.
    
    - new flashed based config system for mc13224v parameters such has
      radio modes (demod, autoack), nvmtype, mac address, channel and
      power.
    
    - considerably cleaned up econotag platform code (suffered from severe
      case of bit-rot)
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    remove cvs keywords from cpu/mc1322x
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    Moved sensors setup to contiki-sky-platform.c and common make rules to Makefile.common for easier reuse in similar platforms
    Added IRC client example.
    Introduced web browser as new example using ctk fullscreen mode.
    Rime statistics gathering
    Import of the contiki-2.x development code from the SICS internal CVS server
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    Use the RTC only as the main timer.
    
    This is a major change to how the main tick interrupt is handled on
    the mc1322x platforms. Instead of using two timer resources, TMR0 and
    RTC, this patch unifies all the timers to use the RTC. This is enabled by
    implementing etimers as scheduled rtimers. The main advantage (aside
    from freeing TMR0 for general use) is have the Contiki timebase come
    from the same source that will be used for sleeping and wakeup.
    don't worry about wraparound in rtimer_arch_schedule
    remove cvs keywords from cpu/mc1322x
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    Turn off timer before updating - needed to avoid bugs in ContikiMAC - not 100% sure why
    Removed safeguards around the update code for the timer; turns out they weren't needed (but instead triggered a bug in MSPsim)
    Turn off Timer A before modifying its control registers to avoid problems when timer is updated frequently
    Remove the read from TAIV - this should not be done for TIMERA0 interrupts (in fact, doing so messes up the other timer a interrupts, like the clock tick...)
    Need to clear the interrupt flag register for Timer A
    bug fix: wake up MSP430 when leaving rtimer interrupt if the rtimer polled a process.
    thanks to Marco Vedovati for finding the bug
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    Moved energest from lib/ to sys/
    removed offset in rtimer_arch
    removed redundant code - configuration of basic clock subsystem in clock and rtimer_arch
    Added energy estimation, embryo for possible future drift configuration
    rtimer_arch_now() now returns the correct value
    Fixed description
    MSP430 real-time rtimer support using timerb1
    Added #include that #defines NULL
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    Added *experimental* module for sending raw (non-routed) packets from Contiki. The name of the module is likely to change.
    Import of the contiki-2.x development code from the SICS internal CVS server
    remove cvs keywords from cpu/mc1322x
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    Initial files of the MICAz port.
    use uint16_t to be specific about id type size.
    cr->lf
    Scatterweb MSB430 port.
    Node IDs are stored in EEPROM and restored on bootup
    Import of the contiki-2.x development code from the SICS internal CVS server
    add a dummy io.h for mc13224v
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    STM32F103 port
    CPU specific files for the AT91SAM7S ARM-based microcontrollers
    remove cvs keywords from cpu/mc1322x
    add heap and _sbrk to mc13224v
    use the hardware random number generator
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    Lots of changes / commits! This allows ravenusbstick example to build at least.
    examples for uIPv6
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Use the RTC only as the main timer.
    
    This is a major change to how the main tick interrupt is handled on
    the mc1322x platforms. Instead of using two timer resources, TMR0 and
    RTC, this patch unifies all the timers to use the RTC. This is enabled by
    implementing etimers as scheduled rtimers. The main advantage (aside
    from freeing TMR0 for general use) is have the Contiki timebase come
    from the same source that will be used for sleeping and wakeup.
    change mc1322x rtimers to 32-bit
    
    hardcode a close default value for the RTC
    remove cvs keywords from cpu/mc1322x
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    Increased the rtimer granularity: needed to make contikimac work
    Increased the clock speed to 32768/4 from 32768/8 to provide better accuracy for power profiling of radio CCA checks
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    removed offset in rtimer_arch
    Reading timer now quicker, embryo for possible future drift configuration
    Fixed description
    MSP430 real-time rtimer support using timerb1
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    MSP430 definitions
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    remove cvs keywords from cpu/mc1322x
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    Initial files of the MICAz port.
    use uint16_t to be specific about id type size.
    cr->lf
    Scatterweb MSB430 port.
    Node IDs are stored in EEPROM and restored on bootup
    Import of the contiki-2.x development code from the SICS internal CVS server
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    An implementation of the mc1322x watchdog
    remove cvs keywords from cpu/mc1322x
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    removed unnecessary inclusion
    Added dummy watchdog.c to allow compiling and running code that calls the watchdog functions
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    remove cvs keywords from cpu/mc1322x
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    Made SLIP code coexist with ordinary serial code. If WITH_UIP=1, the SLIP code is used instead.
    Added energy estimation
    Removed clock_delay()
    Added clock_delay() between characters to avoid dropping them
    * General stuff for different baudrates:
    
        - ubr argument to slip_arch_int
    
        - macros for calculating ubr
    
        - argument -Bbaudrate to tools tunslip and scat
    * Bump speed over serial to 115200 (Tmote sky only).
    Use LPM4_EXIT to return from sleep on msp430.
    Import of the contiki-2.x development code from the SICS internal CVS server
    remove cvs keywords from cpu/mc1322x
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    use synchronous transmission.
    DMA destination is now given as a parameter instead of being hardwired.
    Make it possible to subscribe to DMA events.
    Improvement batch.
    dma transfer support.
    Platform-specific devices.
    cooja radio driver (uip + rime)
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add a rule for generating assembly listings on mc1322x targets, for example: "make webserver6.lst".
    Enable the silent compilation mode from the latest Contiki
    Makefile.include: support make clean all
    
    Historically $(OBJECTDIR) was created when Makefile.include is read.  A
    consequence is that combining "clean" with "all" (or any other build
    target) results in an error because the clean removes the object
    directory that is required to exist when building dependencies.
    Creating $(OBJECTDIR) on-demand ensures it is present when needed.
    
    Removed creation of $(OBJECTDIR) on initial read, and added an order-only
    dependency forcing its creation all Makefile* rules where the target is
    explicitly or implicitly in $(OBJECTDIR).
    Use the RTC only as the main timer.
    
    This is a major change to how the main tick interrupt is handled on
    the mc1322x platforms. Instead of using two timer resources, TMR0 and
    RTC, this patch unifies all the timers to use the RTC. This is enabled by
    implementing etimers as scheduled rtimers. The main advantage (aside
    from freeing TMR0 for general use) is have the Contiki timebase come
    from the same source that will be used for sleeping and wakeup.
    run the linker script through CPP so that the stack sizes can be
    changed using CONF parameters via DEFINES (e.g. SYS_CONF_STACK_SIZE
    4096)
    Newer and cleaner TARGET=econotag as well as robust mc13224v
    configuration system.
    
    (also deprecate TARGET=redbee-econotag)
    
    - mc13224v now automatically probes hardware config for buck converter
    and 32kHz crystal as well as automatically monitors battery voltage
    and manages the buck accordingly.
    
    - new flashed based config system for mc13224v parameters such has
      radio modes (demod, autoack), nvmtype, mac address, channel and
      power.
    
    - considerably cleaned up econotag platform code (suffered from severe
      case of bit-rot)
    use --gc-sections instead of -gc-sections
    add gc-sections, roughly 4kB savings.
    mc1322x: add -MMD to Makefile.mc1322x to correctly create dependencies
    mc1322x: change how board.h works to allow default board.h (defaults
    to econotag)
    mc1322x: remove symbols.{c,h}
    Simplified host OS platform detection in Makefiles
    Replaced make-empty-symbols with empty-symbols.[c|h]
    The symbol generation shell scripts cause CRLF issues on Windows/Cygwin again and again. Instead of fixing this yet again I opted to remove the symbol generation script at least for the "no symbols" scenario with two C source files to be copied.
    Testing $OS works with cygwin and DOS command windows
    mc1322x: remove bad rule from cpu Makfile
    mc1322x: handle board file differently if cygwin
    add proper arm flags and remove Makefile.src as it's not used.
    use the CS toolchain by default:
    
        http://www.codesourcery.com/sgpp/lite/arm/portal/release642
    Allow CROSS to be overridden with CROSS or CROSS_COMPILE
    add section .start and undef _start so that _start is placed by the
    linker correctly
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    remove cvs keywords from cpu/mc1322x
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    AVR specific implementation of contiki multi-threating architecture
    (supporting per-thread stacks).
    Added missing includes and made Ethernut 1 & 2 ports to compile again
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Use the RTC only as the main timer.
    
    This is a major change to how the main tick interrupt is handled on
    the mc1322x platforms. Instead of using two timer resources, TMR0 and
    RTC, this patch unifies all the timers to use the RTC. This is enabled by
    implementing etimers as scheduled rtimers. The main advantage (aside
    from freeing TMR0 for general use) is have the Contiki timebase come
    from the same source that will be used for sleeping and wakeup.
    Add clock_delay_us and clock_set_seconds to clock.h. Modify clock_wait to use clock_time_t.
    Remove the troublesome avr/dev/delay.* files.
    Add PLATFORM_NAME and combine the confusing *_REVISION defines into a single PLATFORM_TYPE
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    remove cvs keywords from cpu/mc1322x
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Changed the Contiki Interface declaration macros from CCI/CLI to CCIF/CLIF because of already existing macros: Both CCI and CLI :-(
    Added defines for declaring functions/data which are part of the CCI (Contiki Core Interface) and CLI (Contiki Loadable Interface). Both defines are empty for all platforms but the upcoming Win32 port.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    Newer and cleaner TARGET=econotag as well as robust mc13224v
    configuration system.
    
    (also deprecate TARGET=redbee-econotag)
    
    - mc13224v now automatically probes hardware config for buck converter
    and 32kHz crystal as well as automatically monitors battery voltage
    and manages the buck accordingly.
    
    - new flashed based config system for mc13224v parameters such has
      radio modes (demod, autoack), nvmtype, mac address, channel and
      power.
    
    - considerably cleaned up econotag platform code (suffered from severe
      case of bit-rot)
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    use network 230 --- 802.15.4 no-FCS
    fix parsing and pcap generation for packets with multiple output lines
    (those that are > 16 bytes).
    fix parsing and pcap generation for packets with multiple output lines
    (those that are > 16 bytes).
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    Add script to invoke kermit with a particular port and speed
    add cmdline options to set the intercharacter delays.
    modify flasher.c to not create a vaild boot magic number if the length
    of the file is zero
    
    modify mc1322x-load.pl to optionally send a zero length file with -z;
    extra data on the command line is still written.
    
    This allows you to burn the mac adress without flashing a vaild image.
    add autoreset command and do_exit option
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    use kermit in open-terms
    add scripts to help load a bunch of econotags
    fix byte ordering in burn-macs
    add script that burns the mac address only --- mac address is Redwire
    IAB + tty number.
    add scripts to help load a bunch of econotags
    add scripts to help load a bunch of econotags
    add scripts to help load a bunch of econotags
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    remove cvs keywords from cpu/mc1322x
    add stdint.h
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    Use "rm -f" in clean rules to ignore errors
    add simple install rule
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    fix gpio initialization for uart2
    mc1322x: build fixes for uart2
    Options to extend mc1322x fifo to RAM buffer, or use hardware flow control with tunslip6.
    remove cvs keywords from cpu/mc1322x
    use stdint.h instead of custom types.h
    
    stdint.h is more portable across compilers
    initial commit of src files
    add board files.
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    Turn off timer before updating - needed to avoid bugs in ContikiMAC - not 100% sure why
    Removed safeguards around the update code for the timer; turns out they weren't needed (but instead triggered a bug in MSPsim)
    Turn off Timer A before modifying its control registers to avoid problems when timer is updated frequently
    Remove the read from TAIV - this should not be done for TIMERA0 interrupts (in fact, doing so messes up the other timer a interrupts, like the clock tick...)
    Need to clear the interrupt flag register for Timer A
    bug fix: wake up MSP430 when leaving rtimer interrupt if the rtimer polled a process.
    thanks to Marco Vedovati for finding the bug
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    Moved energest from lib/ to sys/
    removed offset in rtimer_arch
    removed redundant code - configuration of basic clock subsystem in clock and rtimer_arch
    Added energy estimation, embryo for possible future drift configuration
    rtimer_arch_now() now returns the correct value
    Fixed description
    MSP430 real-time rtimer support using timerb1
    Added #include that #defines NULL
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    Added *experimental* module for sending raw (non-routed) packets from Contiki. The name of the module is likely to change.
    Import of the contiki-2.x development code from the SICS internal CVS server
    remove cvs keywords from cpu/mc1322x
    whitespace fixup to sync with libmc1322x
    include crm.h
    Provide a function to change timer interrrupt handlers
    
    Function irq_register_timer_handler(int timer, void (*isr)(void))
    lets you change the handler at runtime.  This lets us set handlers
    without necessarily knowing the name at link-time.  The old way of
    having weakly-linked tmr0_isr functions should still work.
    initial commit of src files
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    use synchronous transmission.
    DMA destination is now given as a parameter instead of being hardwired.
    Make it possible to subscribe to DMA events.
    Improvement batch.
    dma transfer support.
    Platform-specific devices.
    cooja radio driver (uip + rime)
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    remove cvs keywords from cpu/mc1322x
    use stdint.h instead of custom types.h
    
    stdint.h is more portable across compilers
    Provide a function to change timer interrrupt handlers
    
    Function irq_register_timer_handler(int timer, void (*isr)(void))
    lets you change the handler at runtime.  This lets us set handlers
    without necessarily knowing the name at link-time.  The old way of
    having weakly-linked tmr0_isr functions should still work.
    Register definitions: get rid of some macro magic that doesn't help much
    
    Instead of e.g. GPIO.DATA.GPIO_08, you now use GPIO->DATA.GPIO_08.
    Add cal_isr() support
    initial commit of src files
    add board files.
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Changed the Contiki Interface declaration macros from CCI/CLI to CCIF/CLIF because of already existing macros: Both CCI and CLI :-(
    Added defines for declaring functions/data which are part of the CCI (Contiki Core Interface) and CLI (Contiki Loadable Interface). Both defines are empty for all platforms but the upcoming Win32 port.
    Import of the contiki-2.x development code from the SICS internal CVS server
    remove cvs keywords from cpu/mc1322x
    fix build errors with start.S
    add section .start and undef _start so that _start is placed by the
    linker correctly
    clear BSS
    initial commit of src files
    remove cvs keywords from cpu/mc1322x
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    initial commit of src files
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    use synchronous transmission.
    DMA destination is now given as a parameter instead of being hardwired.
    Make it possible to subscribe to DMA events.
    Improvement batch.
    dma transfer support.
    Platform-specific devices.
    cooja radio driver (uip + rime)
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    'free_packet' in csma.c conflicted with 'free_packet' in maca.c
    remove cvs keywords from cpu/mc1322x
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    initial commit of src files
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    use synchronous transmission.
    DMA destination is now given as a parameter instead of being hardwired.
    Make it possible to subscribe to DMA events.
    Improvement batch.
    dma transfer support.
    Platform-specific devices.
    cooja radio driver (uip + rime)
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    remove cvs keywords from cpu/mc1322x
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    add board files.
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    use synchronous transmission.
    DMA destination is now given as a parameter instead of being hardwired.
    Make it possible to subscribe to DMA events.
    Improvement batch.
    dma transfer support.
    Platform-specific devices.
    cooja radio driver (uip + rime)
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    'free_packet' in csma.c conflicted with 'free_packet' in maca.c
    remove cvs keywords from cpu/mc1322x
    discard received packets --- this lets you run multiple rftest-tx's at
    the same time.
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    initial commit of src files
    add board files.
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    Turn off timer before updating - needed to avoid bugs in ContikiMAC - not 100% sure why
    Removed safeguards around the update code for the timer; turns out they weren't needed (but instead triggered a bug in MSPsim)
    Turn off Timer A before modifying its control registers to avoid problems when timer is updated frequently
    Remove the read from TAIV - this should not be done for TIMERA0 interrupts (in fact, doing so messes up the other timer a interrupts, like the clock tick...)
    Need to clear the interrupt flag register for Timer A
    bug fix: wake up MSP430 when leaving rtimer interrupt if the rtimer polled a process.
    thanks to Marco Vedovati for finding the bug
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    Moved energest from lib/ to sys/
    removed offset in rtimer_arch
    removed redundant code - configuration of basic clock subsystem in clock and rtimer_arch
    Added energy estimation, embryo for possible future drift configuration
    rtimer_arch_now() now returns the correct value
    Fixed description
    MSP430 real-time rtimer support using timerb1
    Added #include that #defines NULL
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    Added *experimental* module for sending raw (non-routed) packets from Contiki. The name of the module is likely to change.
    Import of the contiki-2.x development code from the SICS internal CVS server
    remove cvs keywords from cpu/mc1322x
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    initial commit of src files
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    use synchronous transmission.
    DMA destination is now given as a parameter instead of being hardwired.
    Make it possible to subscribe to DMA events.
    Improvement batch.
    dma transfer support.
    Platform-specific devices.
    cooja radio driver (uip + rime)
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    remove cvs keywords from cpu/mc1322x
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    initial commit of src files
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    use synchronous transmission.
    DMA destination is now given as a parameter instead of being hardwired.
    Make it possible to subscribe to DMA events.
    Improvement batch.
    dma transfer support.
    Platform-specific devices.
    cooja radio driver (uip + rime)
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    remove cvs keywords from cpu/mc1322x
    fix long standing bug where the last pages of NVM were not erased
    properly.
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    add board files.
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Changed the Contiki Interface declaration macros from CCI/CLI to CCIF/CLIF because of already existing macros: Both CCI and CLI :-(
    Added defines for declaring functions/data which are part of the CCI (Contiki Core Interface) and CLI (Contiki Loadable Interface). Both defines are empty for all platforms but the upcoming Win32 port.
    Import of the contiki-2.x development code from the SICS internal CVS server
    remove cvs keywords from cpu/mc1322x
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    add board files.
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Changed the Contiki Interface declaration macros from CCI/CLI to CCIF/CLIF because of already existing macros: Both CCI and CLI :-(
    Added defines for declaring functions/data which are part of the CCI (Contiki Core Interface) and CLI (Contiki Loadable Interface). Both defines are empty for all platforms but the upcoming Win32 port.
    Import of the contiki-2.x development code from the SICS internal CVS server
    remove cvs keywords from cpu/mc1322x
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    add board files.
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    use synchronous transmission.
    DMA destination is now given as a parameter instead of being hardwired.
    Make it possible to subscribe to DMA events.
    Improvement batch.
    dma transfer support.
    Platform-specific devices.
    cooja radio driver (uip + rime)
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    remove cvs keywords from cpu/mc1322x
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    initial commit of src files
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    use synchronous transmission.
    DMA destination is now given as a parameter instead of being hardwired.
    Make it possible to subscribe to DMA events.
    Improvement batch.
    dma transfer support.
    Platform-specific devices.
    cooja radio driver (uip + rime)
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    remove cvs keywords from cpu/mc1322x
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    initial commit of src files
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    use synchronous transmission.
    DMA destination is now given as a parameter instead of being hardwired.
    Make it possible to subscribe to DMA events.
    Improvement batch.
    dma transfer support.
    Platform-specific devices.
    cooja radio driver (uip + rime)
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    remove cvs keywords from cpu/mc1322x
    modify flasher.c to not create a vaild boot magic number if the length
    of the file is zero
    
    modify mc1322x-load.pl to optionally send a zero length file with -z;
    extra data on the command line is still written.
    
    This allows you to burn the mac adress without flashing a vaild image.
    fix long standing bug where the last pages of NVM were not erased
    properly.
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    remove cvs keywords from cpu/mc1322x
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    initial commit of src files
    add board files.
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Changed the Contiki Interface declaration macros from CCI/CLI to CCIF/CLIF because of already existing macros: Both CCI and CLI :-(
    Added defines for declaring functions/data which are part of the CCI (Contiki Core Interface) and CLI (Contiki Loadable Interface). Both defines are empty for all platforms but the upcoming Win32 port.
    Import of the contiki-2.x development code from the SICS internal CVS server
    'free_packet' in csma.c conflicted with 'free_packet' in maca.c
    remove cvs keywords from cpu/mc1322x
    cycle channel on keypress.
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    initial commit of src files
    add board files.
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Changed the Contiki Interface declaration macros from CCI/CLI to CCIF/CLIF because of already existing macros: Both CCI and CLI :-(
    Added defines for declaring functions/data which are part of the CCI (Contiki Core Interface) and CLI (Contiki Loadable Interface). Both defines are empty for all platforms but the upcoming Win32 port.
    Import of the contiki-2.x development code from the SICS internal CVS server
    remove cvs keywords from cpu/mc1322x
    fix bug in print_packet
    
    Thanks dean and jim.
    get LQI of received packets
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    add board files.
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    use synchronous transmission.
    DMA destination is now given as a parameter instead of being hardwired.
    Make it possible to subscribe to DMA events.
    Improvement batch.
    dma transfer support.
    Platform-specific devices.
    cooja radio driver (uip + rime)
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    remove cvs keywords from cpu/mc1322x
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    initial commit of src files
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    use synchronous transmission.
    DMA destination is now given as a parameter instead of being hardwired.
    Make it possible to subscribe to DMA events.
    Improvement batch.
    dma transfer support.
    Platform-specific devices.
    cooja radio driver (uip + rime)
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    remove cvs keywords from cpu/mc1322x
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    remove cvs keywords from cpu/mc1322x
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    initial commit of src files
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    use synchronous transmission.
    DMA destination is now given as a parameter instead of being hardwired.
    Make it possible to subscribe to DMA events.
    Improvement batch.
    dma transfer support.
    Platform-specific devices.
    cooja radio driver (uip + rime)
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    'free_packet' in csma.c conflicted with 'free_packet' in maca.c
    'free_packet' in csma.c conflicted with 'free_packet' in maca.c
    remove cvs keywords from cpu/mc1322x
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    remove cvs keywords from cpu/mc1322x
    only use these stubs with linux toolchains
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    remove cvs keywords from cpu/mc1322x
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    remove cvs keywords from cpu/mc1322x
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    remove cvs keywords from cpu/mc1322x
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    initial commit of src files
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    use synchronous transmission.
    DMA destination is now given as a parameter instead of being hardwired.
    Make it possible to subscribe to DMA events.
    Improvement batch.
    dma transfer support.
    Platform-specific devices.
    cooja radio driver (uip + rime)
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    remove cvs keywords from cpu/mc1322x
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Changed the Contiki Interface declaration macros from CCI/CLI to CCIF/CLIF because of already existing macros: Both CCI and CLI :-(
    Added defines for declaring functions/data which are part of the CCI (Contiki Core Interface) and CLI (Contiki Loadable Interface). Both defines are empty for all platforms but the upcoming Win32 port.
    Import of the contiki-2.x development code from the SICS internal CVS server
    remove cvs keywords from cpu/mc1322x
    add board files.
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    use synchronous transmission.
    DMA destination is now given as a parameter instead of being hardwired.
    Make it possible to subscribe to DMA events.
    Improvement batch.
    dma transfer support.
    Platform-specific devices.
    cooja radio driver (uip + rime)
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    remove cvs keywords from cpu/mc1322x
    add board files.
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    use synchronous transmission.
    DMA destination is now given as a parameter instead of being hardwired.
    Make it possible to subscribe to DMA events.
    Improvement batch.
    dma transfer support.
    Platform-specific devices.
    cooja radio driver (uip + rime)
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    mc1322x: change how board.h works to allow default board.h (defaults
    to econotag)
    remove cvs keywords from cpu/mc1322x
    Fix #ifdefs in board files
    add board files.
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    use synchronous transmission.
    DMA destination is now given as a parameter instead of being hardwired.
    Make it possible to subscribe to DMA events.
    Improvement batch.
    dma transfer support.
    Platform-specific devices.
    cooja radio driver (uip + rime)
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    remove cvs keywords from cpu/mc1322x
    add board files.
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    AVR specific implementation of contiki multi-threating architecture
    (supporting per-thread stacks).
    Added missing includes and made Ethernut 1 & 2 ports to compile again
    Import of the contiki-2.x development code from the SICS internal CVS server
    remove cvs keywords from cpu/mc1322x
    add board files.
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    use synchronous transmission.
    DMA destination is now given as a parameter instead of being hardwired.
    Make it possible to subscribe to DMA events.
    Improvement batch.
    dma transfer support.
    Platform-specific devices.
    cooja radio driver (uip + rime)
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    remove cvs keywords from cpu/mc1322x
    fix mc13224v led driver to only touch gpio used for leds.
    Fix #ifdefs in board files
    add board files.
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Changed the Contiki Interface declaration macros from CCI/CLI to CCIF/CLIF because of already existing macros: Both CCI and CLI :-(
    Added defines for declaring functions/data which are part of the CCI (Contiki Core Interface) and CLI (Contiki Loadable Interface). Both defines are empty for all platforms but the upcoming Win32 port.
    Import of the contiki-2.x development code from the SICS internal CVS server
    remove cvs keywords from cpu/mc1322x
    add board files.
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    Turn off timer before updating - needed to avoid bugs in ContikiMAC - not 100% sure why
    Removed safeguards around the update code for the timer; turns out they weren't needed (but instead triggered a bug in MSPsim)
    Turn off Timer A before modifying its control registers to avoid problems when timer is updated frequently
    Remove the read from TAIV - this should not be done for TIMERA0 interrupts (in fact, doing so messes up the other timer a interrupts, like the clock tick...)
    Need to clear the interrupt flag register for Timer A
    bug fix: wake up MSP430 when leaving rtimer interrupt if the rtimer polled a process.
    thanks to Marco Vedovati for finding the bug
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    Moved energest from lib/ to sys/
    removed offset in rtimer_arch
    removed redundant code - configuration of basic clock subsystem in clock and rtimer_arch
    Added energy estimation, embryo for possible future drift configuration
    rtimer_arch_now() now returns the correct value
    Fixed description
    MSP430 real-time rtimer support using timerb1
    Added #include that #defines NULL
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    Added *experimental* module for sending raw (non-routed) packets from Contiki. The name of the module is likely to change.
    Import of the contiki-2.x development code from the SICS internal CVS server
    add a tutorial for rest-example
    fix typos
    add tutorial explaining how to set up an RPL network of econotags
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    mc1322x: flush the rx fifos when full
    mc1322x: block in uart putc if the TX buffer is full. Can also be
    configured to drop chars instead with UARTx_DROP_CHARS
    mc1322x: build fixes for uart2
    Options to extend mc1322x fifo to RAM buffer, or use hardware flow control with tunslip6.
    remove cvs keywords from cpu/mc1322x
    use stdint.h instead of custom types.h
    
    stdint.h is more portable across compilers
    properly drop characters when buffer is full
    
    fix by David Kopf
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    initial commit of src files
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    use synchronous transmission.
    DMA destination is now given as a parameter instead of being hardwired.
    Make it possible to subscribe to DMA events.
    Improvement batch.
    dma transfer support.
    Platform-specific devices.
    cooja radio driver (uip + rime)
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    Use the RTC only as the main timer.
    
    This is a major change to how the main tick interrupt is handled on
    the mc1322x platforms. Instead of using two timer resources, TMR0 and
    RTC, this patch unifies all the timers to use the RTC. This is enabled by
    implementing etimers as scheduled rtimers. The main advantage (aside
    from freeing TMR0 for general use) is have the Contiki timebase come
    from the same source that will be used for sleeping and wakeup.
    Newer and cleaner TARGET=econotag as well as robust mc13224v
    configuration system.
    
    (also deprecate TARGET=redbee-econotag)
    
    - mc13224v now automatically probes hardware config for buck converter
    and 32kHz crystal as well as automatically monitors battery voltage
    and manages the buck accordingly.
    
    - new flashed based config system for mc13224v parameters such has
      radio modes (demod, autoack), nvmtype, mac address, channel and
      power.
    
    - considerably cleaned up econotag platform code (suffered from severe
      case of bit-rot)
    'free_packet' in csma.c conflicted with 'free_packet' in maca.c
    add working routines to turn the mc1322x radio on and off
    Receive packets in a dummy_rx when the maca packet pool is
    empty. These packets get dropped.
    fix very incorrect insert_at_rx_head; the bugged version would make
    the rest of the rx list dangling.
    
    this is used to insert the ack packet needed by the upper layers in
    the netstack.
    Reactivate flash protection after maca init
    Only insert an ack packet if the ack request bit is set
    add option to insert an ack packet on autoack
    turn on insert ack packet by default
    mc1322x: remove auto reception mode as it appears to be the cause of
    the periodic autoack checksum errors. removing auto mode doesn't seem
    to create any performance issue.
    Don't create an object directory if target does not exist
    mc1322x: remove auto reception mode as it appears to be the cause of
    the periodic autoack checksum errors. removing auto mode doesn't seem
    to create any performance issue.
    remove cvs keywords from cpu/mc1322x
    fix a race condition regarding advancement of the softclock. Without
    this, the advancment would fail to trigger a tx cycle
    occasionally. This would cause the packet to get deferred until the
    next expiration of the softclock.
    get LQI of received packets
    increase the reception time now that tx_packet will advance the timer
    as necessary.
    in tx_packet, force an interrupt if the maca isn't doing anything so
    that the transmit starts. Or if the maca is in a reception cycle,
    advance the softclock timeout to now so that transmission starts as
    soon as possible (immediately if a packet isn't being received or
    right after reception finishes).
    make the debug prints in check_maca more specific
    use 32 packets in the pool by default
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    remove cvs keywords from cpu/mc1322x
    use stdint.h instead of custom types.h
    
    stdint.h is more portable across compilers
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    initial commit of src files
    add board files.
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Changed the Contiki Interface declaration macros from CCI/CLI to CCIF/CLIF because of already existing macros: Both CCI and CLI :-(
    Added defines for declaring functions/data which are part of the CCI (Contiki Core Interface) and CLI (Contiki Loadable Interface). Both defines are empty for all platforms but the upcoming Win32 port.
    Import of the contiki-2.x development code from the SICS internal CVS server
    remove cvs keywords from cpu/mc1322x
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    add board files.
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Changed the Contiki Interface declaration macros from CCI/CLI to CCIF/CLIF because of already existing macros: Both CCI and CLI :-(
    Added defines for declaring functions/data which are part of the CCI (Contiki Core Interface) and CLI (Contiki Loadable Interface). Both defines are empty for all platforms but the upcoming Win32 port.
    Import of the contiki-2.x development code from the SICS internal CVS server
    disable pad keeper when using ADC pin; otherwise you'll see a 20k input
    impedance.
    remove cvs keywords from cpu/mc1322x
    new timer setup routines.
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    initial commit of src files
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    use synchronous transmission.
    DMA destination is now given as a parameter instead of being hardwired.
    Make it possible to subscribe to DMA events.
    Improvement batch.
    dma transfer support.
    Platform-specific devices.
    cooja radio driver (uip + rime)
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    mc1322x: flush the rx fifos when full
    mc1322x: block in uart putc if the TX buffer is full. Can also be
    configured to drop chars instead with UARTx_DROP_CHARS
    mc1322x: build fixes for uart2
    remove cvs keywords from cpu/mc1322x
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    add board files.
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Changed the Contiki Interface declaration macros from CCI/CLI to CCIF/CLIF because of already existing macros: Both CCI and CLI :-(
    Added defines for declaring functions/data which are part of the CCI (Contiki Core Interface) and CLI (Contiki Loadable Interface). Both defines are empty for all platforms but the upcoming Win32 port.
    Import of the contiki-2.x development code from the SICS internal CVS server
    remove cvs keywords from cpu/mc1322x
    fix up stdint include
    use stdint.h instead of custom types.h
    
    stdint.h is more portable across compilers
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    initial commit of src files
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    use synchronous transmission.
    DMA destination is now given as a parameter instead of being hardwired.
    Make it possible to subscribe to DMA events.
    Improvement batch.
    dma transfer support.
    Platform-specific devices.
    cooja radio driver (uip + rime)
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    remove cvs keywords from cpu/mc1322x
    use stdint.h instead of custom types.h
    
    stdint.h is more portable across compilers
    Add the disable_int({}) macro
    
    This is similar to safe_irq_enable and disable
    Register definitions: get rid of some macro magic that doesn't help much
    
    Instead of e.g. GPIO.DATA.GPIO_08, you now use GPIO->DATA.GPIO_08.
    Add structure-based ITC access
    Add cal_isr() support
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    mc1322x: make uart buffer sizes configurable from contiki-conf.h
    mc1322x: build fixes for uart2
    remove cvs keywords from cpu/mc1322x
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    add board files.
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Changed the Contiki Interface declaration macros from CCI/CLI to CCIF/CLIF because of already existing macros: Both CCI and CLI :-(
    Added defines for declaring functions/data which are part of the CCI (Contiki Core Interface) and CLI (Contiki Loadable Interface). Both defines are empty for all platforms but the upcoming Win32 port.
    Import of the contiki-2.x development code from the SICS internal CVS server
    remove cvs keywords from cpu/mc1322x
    get LQI of received packets
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    add board files.
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    AVR specific implementation of contiki multi-threating architecture
    (supporting per-thread stacks).
    Added missing includes and made Ethernut 1 & 2 ports to compile again
    Import of the contiki-2.x development code from the SICS internal CVS server
    remove cvs keywords from cpu/mc1322x
    use stdint.h instead of custom types.h
    
    stdint.h is more portable across compilers
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    initial commit of src files
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    use synchronous transmission.
    DMA destination is now given as a parameter instead of being hardwired.
    Make it possible to subscribe to DMA events.
    Improvement batch.
    dma transfer support.
    Platform-specific devices.
    cooja radio driver (uip + rime)
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    remove cvs keywords from cpu/mc1322x
    add timer setup routines
    Add TMR_ADDR helper
    Add some useful timer macros
    Register definitions: get rid of some macro magic that doesn't help much
    
    Instead of e.g. GPIO.DATA.GPIO_08, you now use GPIO->DATA.GPIO_08.
    Add macro to help compute TMR.ENBL values (useful when using #defined
    values to represent timers)
    Add pin definitions for each timer, they're fixed
    Add structure-based timer register definitions
    Add missing type for TMR0_COMP2
    Fix the CNTR defines.
    
    Thanks to Ruslan for finding this.
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    remove cvs keywords from cpu/mc1322x
    use stdint.h instead of custom types.h
    
    stdint.h is more portable across compilers
    update ring_osc_on and _off to the new bit structs
    Register definitions: get rid of some macro magic that doesn't help much
    
    Instead of e.g. GPIO.DATA.GPIO_08, you now use GPIO->DATA.GPIO_08.
    REF_OSC is a 32-bit number, not 64-bit number
    Add structure-based CRM definitions
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    remove cvs keywords from cpu/mc1322x
    Add gpio_set and gpio_reset
    
    Use them like gpio_set(GPIO_xx) and gpio_reset(GPIO_xx).
    These macros efficiently set the DATA_SET and DATA_RESET bits without
    reading the registers first, as a direct GPIO->DATA_SET.GPIO_xx would do
    Name the GPIO structure so we can set multiple bits at once
    Register definitions: get rid of some macro magic that doesn't help much
    
    Instead of e.g. GPIO.DATA.GPIO_08, you now use GPIO->DATA.GPIO_08.
    Add structure-based GPIO register definitions
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    'free_packet' in csma.c conflicted with 'free_packet' in maca.c
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    add working routines to turn the mc1322x radio on and off
    remove cvs keywords from cpu/mc1322x
    use stdint.h instead of custom types.h
    
    stdint.h is more portable across compilers
    get LQI of received packets
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Put the cc253x custom makerules in its own customrules file
    Disable SDCC warnings 110 and 126
    
    Those two warnings are optimisation-related
    * 110 warns that an always-false if branch has been optimised out
    * 126 warns about unreachable code which also gets optimised out
    
    In disabling those warnings, we make the build less cluttered
    Support verbosity control for 8051-based platforms
    Change to sdar from the now deprecated sdcclib
    Don't redirect sdld output to dev/null
    
    This was used in the past because sdld was
    very verbose when linking banked hex files. New
    sdld versions do not exhibit this level of
    verbosity and therefore the redirect can be
    stopped
    Remove leftover make targets
    
    The sensinode platform does not support .upload and .serialdump
    Their presence in the makefile has confused in the past confused
    some users. This commit removes them
    
    The commit also removes the $(OBJECTDIR)/%.rel: %.cS recipe which
    is not used by either 8051 platform and is probably broken anyway,
    since it has been unmaintained for years
    Makefile.include: support make clean all
    
    Historically $(OBJECTDIR) was created when Makefile.include is read.  A
    consequence is that combining "clean" with "all" (or any other build
    target) results in an error because the clean removes the object
    directory that is required to exist when building dependencies.
    Creating $(OBJECTDIR) on-demand ensures it is present when needed.
    
    Removed creation of $(OBJECTDIR) on initial read, and added an order-only
    dependency forcing its creation all Makefile* rules where the target is
    explicitly or implicitly in $(OBJECTDIR).
    cc253x: Renamed P2 interrupt-related files for better consistency
    
    See Pull Request #18
    cc253x: P2-related routines are now bankable
    
    We keep the ISR in its own file and move everything else
    to a different one, so that we only have to keep the ISR
    in HOME
    
    See Pull Request #18
    cc253x: Add USB support to the compilation scripts
    
    See Pull Request #18
    cc253x: Add p2 interrupt handler
    
    The P2 Interrupt is shared across many periferal (I2C, USB, GPIO).
    This adds a generic interrupt handler on which the differents drivers
    can register a handler.
    
    See Pull Request #18
    Reworked the cc2530 stack debugging facilities:
    
    - Moved to their own file
      (so we can later copy the entire thing over to cc2430)
    - Renamed the functions
      (for naming convention reasons)
    - The entire thing can be enabled/disabled
    - Added a couple more macros
    - Hooked into main()
    cc253x: Change CFLAGS
    
    This add -fomit-frame-pointer by default, it decrease sliglty the
    stack usage when several function call are nested.
    On some specific case 30 bytes could be saved on the stack.
    The cc253x Makefile specifies SoC flavor
    
    This will help us slowly add better support for smaller SoCs
    instead of just assuming that all cc253x SoCs are F256
    
    - We build for F256 by default but the project Makefile can override this
    - We currently ignore this when passing --code-size. This is a ToDo
    - The bank allocator always assumes 7 banks. Once we fix --code-size above this will be irrelevant
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    include new files in source file list.
    Add support for bank switching and segment.rules file to assign code to banks.
    - Fixed the MAC/RF interface problems, now correctly working with sicslowmac. Tested with rf_test_tx and rf_test_rx. Still needs more thorough testing.
    - Corrected a Makefile bug, was complaining about *.d missing
    - Fixed a compilation problem caused by 2.3 root Makefile-include changes with regard to sdcc.
    - Fixed a small typo in cc2430_rf.c
    - examples/sensinode now compiles
    Initial commit of cc2430 cpu port files. Currently used by /platform/sensinode.
    cc2x3x stack debugging macro fix
    Reworked the cc2530 stack debugging facilities:
    
    - Moved to their own file
      (so we can later copy the entire thing over to cc2430)
    - Renamed the functions
      (for naming convention reasons)
    - The entire thing can be enabled/disabled
    - Added a couple more macros
    - Hooked into main()
    cc2531 Button 2 driver
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Implement extended RF API for the CC2530 RF
    Added definitions for cc2530 DMA-related SFR bits
    Fixed a typo which was preventing the cc253x watchdog from starting
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    cc2530: Added a method to maximise stack depth
    
    This was oringinally contributed/reported/discussed/patched by
    Philippe Retornaz (EPFL) but it's implemented
    in a more configurable fashion here.
    Adjust cc2x3x ports to the new clock API
    cc2530 watchdog improvements and cleanup
    We can now use SDCC's __nonbanked feature
    
    This allows us to reduce CODE footprint of SDCC projects
    built with --model-huge. Use carefully!
    
    * Added a facility which allows us to enable/disable the
      feature from the CPU dir (CC_CONF_NON_BANKED_OPTIMIZATION)
    * Added the CC_NON_BANKED keyword to some platform files
      (expands to __nonbanked)
    * Started using this for some examples
    For cc2x30, moved CLOCK_CONF_SENCOND to the cpu dir.
    
    The value is not really configurable by the platform so having it
    in contiki-conf.h didn't make huge sense.
    Wrapped cc2x30 SOFT_RESET() macro inside do {...} while(0)
    Adjusted check to determine if we are being built with SDCC
    
    Since rev #7342, SDCC defines __SDCC_mcs51 instead of SDCC_mcs51.
    We check for either
    Some uN_t had crept back in cc2530dk and sensinode.
    
    Changed to uintN_t plus a bit of code formatting
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Fixes and improvements from Anthony Asterisk
    - First in 8051def.h,  it appears the uip_arch-asm.S file was copied from z80 and am unsure it will work properly.  I modified the 8051def.h to prevent the UIP code from using these routines.
    - In dma.c the config routine provides access to all of the DMA channel options, except for the word mode flag.  In order to maintain compatibility with any existing code I created a second routine and converted the original routine into a wrapper routine with a fixed word mode value.
    - uart.c::uart0_init was missing blocking access to the higher baud rates.  I am not sure why, so I corrected this.
    - I also copied over to header files that provide some useful macros from the msp430 cpu.  The files are lpm.h and hwconf.h.  The lpm.h is for switching power modes, I think.  The hwconf.h has various macros for configuring port I/O.  By porting these files the led/button api's can be ported with minimal modifications.
    Initial commit of cc2430 cpu port files. Currently used by /platform/sensinode.
    Code style fixes: cc253x
    cc2530: Added a method to maximise stack depth
    
    This was oringinally contributed/reported/discussed/patched by
    Philippe Retornaz (EPFL) but it's implemented
    in a more configurable fashion here.
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Cross compiler interrupt service routine compatibility definitions for MSP430 based platforms based on isr_compat.h by Steve Underwood.
    Updated SPI config for faster SPI, split msp430/clock/spi into separate versions for MSP430/MSP430X
    Initial WiSMote port based on code from Arago Systems.
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    fixed cpu/msp430 for compilation with IAR compiler
    added missing include
    Enable the watchdog for rtimers too. Removed the disabling of the TACTL - it should not be needed, and interferes with the timing behaviour of stable rtimers
    Added function rtimer_arch_now that makes sure that the timer value does not change between readouts to avoid reading while the timer is being updated.
    Turn off timer before updating - needed to avoid bugs in ContikiMAC - not 100% sure why
    Removed safeguards around the update code for the timer; turns out they weren't needed (but instead triggered a bug in MSPsim)
    Turn off Timer A before modifying its control registers to avoid problems when timer is updated frequently
    Remove the read from TAIV - this should not be done for TIMERA0 interrupts (in fact, doing so messes up the other timer a interrupts, like the clock tick...)
    Need to clear the interrupt flag register for Timer A
    bug fix: wake up MSP430 when leaving rtimer interrupt if the rtimer polled a process.
    thanks to Marco Vedovati for finding the bug
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    Moved energest from lib/ to sys/
    removed offset in rtimer_arch
    removed redundant code - configuration of basic clock subsystem in clock and rtimer_arch
    Added energy estimation, embryo for possible future drift configuration
    rtimer_arch_now() now returns the correct value
    Fixed description
    MSP430 real-time rtimer support using timerb1
    Added #include that #defines NULL
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    Added *experimental* module for sending raw (non-routed) packets from Contiki. The name of the module is likely to change.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Put the cc253x custom makerules in its own customrules file
    Split the cc2430 custom rules into its own file
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Initial commit of cc2430 cpu port files. Currently used by /platform/sensinode.
    Turned rtimer_arch_now() from a (one line) function into a macro.
    Added rtimer_arch_now prototype
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    MSP430 definitions
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Reworked the cc2530 stack debugging facilities:
    
    - Moved to their own file
      (so we can later copy the entire thing over to cc2430)
    - Renamed the functions
      (for naming convention reasons)
    - The entire thing can be enabled/disabled
    - Added a couple more macros
    - Hooked into main()
    cc253x: Add stack monitoring helpers
    The cc253x Makefile specifies SoC flavor
    
    This will help us slowly add better support for smaller SoCs
    instead of just assuming that all cc253x SoCs are F256
    
    - We build for F256 by default but the project Makefile can override this
    - We currently ignore this when passing --code-size. This is a ToDo
    - The bank allocator always assumes 7 banks. Once we fix --code-size above this will be irrelevant
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Now, all network related initialization code segments are in one file
    Adding ADC functions
    Platform-specific devices.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    update code bank assignments
    rules file for assigning code files to specific banks.
    Code style fixes: cc253x
    Reworked the cc2530 stack debugging facilities:
    
    - Moved to their own file
      (so we can later copy the entire thing over to cc2430)
    - Renamed the functions
      (for naming convention reasons)
    - The entire thing can be enabled/disabled
    - Added a couple more macros
    - Hooked into main()
    cc253x: Add stack monitoring helpers
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Broke out serial-shell from the shell app into its own app. Project can use the serial-shell to get a shell running over the serial line, just like a project can use the telnetd to get a shell running over Telnet/TCP/IP.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Code style fixes: cc253x
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    - Added mtarch.c and mtarch.h back to /cpu/cc2430. Seems that mt.c needs mtarch.h even though we are not using mtarch right now in this port.
    Added some comments.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Added a function for measuring stack usage
    Made stacksize configurable via external definition
    Import of the contiki-2.x development code from the SICS internal CVS server
    Reworked the cc2530 stack debugging facilities:
    
    - Moved to their own file
      (so we can later copy the entire thing over to cc2430)
    - Renamed the functions
      (for naming convention reasons)
    - The entire thing can be enabled/disabled
    - Added a couple more macros
    - Hooked into main()
    cc253x: Add stack monitoring helpers
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Broke out serial-shell from the shell app into its own app. Project can use the serial-shell to get a shell running over the serial line, just like a project can use the telnetd to get a shell running over Telnet/TCP/IP.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Renamed a cc253x SFRX to stop namespace conflicts
    
    The TR0 SFRX can not use the name TR0 because it
    conflicts with TCON.TR0 on the default 8051.
    
    See SDCC bug 3513300
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    cc253x: Renamed P2 interrupt-related files for better consistency
    
    See Pull Request #18
    cc2531: Add USB driver
    
    See Pull Request #18
    cc253x: Add USB support to the compilation scripts
    
    See Pull Request #18
    cc2531: Copy arm usb framework
    
    See Pull Request #18
    Use .u prefix for uploading to device and PROG variable to select programmer
    Synchronizing with my work copy.
    Common USB functionality
    Change the cc2531 usb stick descriptor
    
    The CC2531 USB stick now identifies itself as a
    'Texas Instruments CC2531 USB Dongle' and uses a
    TI-assigmed VID:PID. The VID:PID is now configurable
    in contiki- or project-conf.h
    cc2531: change cdc-acm descriptor
    
    Change to have a real usb VID/PID and better fit the capabilities
    of the CC2531 hardware (enpoint size, location).
    
    Compile only if the cdc-acm class is requested.
    
    See Pull Request #18
    cc2531: Copy arm usb framework
    
    See Pull Request #18
    USB CDC-ACM class
    Added USB (specifically CDC-ACM) support
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    cc2531: Copy arm usb framework
    
    See Pull Request #18
    Synchronizing with my work copy.
    Common USB functionality
    Added USB (specifically CDC-ACM) support
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    cc2531: Copy arm usb framework
    
    See Pull Request #18
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    cc2531: Copy arm usb framework
    
    See Pull Request #18
    Synchronizing with my work copy.
    Common USB functionality
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    cc2531: Copy arm usb framework
    
    See Pull Request #18
    Common USB functionality
    Added USB (specifically CDC-ACM) support
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    cc2531: Copy arm usb framework
    
    See Pull Request #18
    cc2531: Copy arm usb framework
    
    See Pull Request #18
    cc2531: USB changes:
    
    - usb cdc-acm:
      * implement get line coding
      * use printf only when debugging
      * Add events
    
    - usb-core: do not force debugging
    
    See Pull Request #18
    cc2531: Copy arm usb framework
    
    See Pull Request #18
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    cc2531: Copy arm usb framework
    
    See Pull Request #18
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    cc2531: USB CDC-ACM code style fixes
    
    Closes #18
    cc2531: USB changes:
    
    - usb cdc-acm:
      * implement get line coding
      * use printf only when debugging
      * Add events
    
    - usb-core: do not force debugging
    
    See Pull Request #18
    cc2531: Copy arm usb framework
    
    See Pull Request #18
    USB CDC-ACM class
    Added USB (specifically CDC-ACM) support
    cc2531: USB CDC-ACM code style fixes
    
    Closes #18
    cc2531: USB changes:
    
    - usb cdc-acm:
      * implement get line coding
      * use printf only when debugging
      * Add events
    
    - usb-core: do not force debugging
    
    See Pull Request #18
    cc2531: Copy arm usb framework
    
    See Pull Request #18
    USB CDC-ACM class
    Added USB (specifically CDC-ACM) support
    Fix cc2530 UART1 init bug
    
    Fixes #286
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Removed a stray leds_toggle
    Code style fixes: cc253x
    cc2530: Added a method to maximise stack depth
    
    This was oringinally contributed/reported/discussed/patched by
    Philippe Retornaz (EPFL) but it's implemented
    in a more configurable fashion here.
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Modifications to support banked code.  Interrupts and routines accessed through function pointers reside in independent files so they can be assigned to the HOME bank.  Init code can be placed in any bank.
    Also add adc init code and bank header files.
    cc253x: Renamed P2 interrupt-related files for better consistency
    
    See Pull Request #18
    cc253x: P2-related routines are now bankable
    
    We keep the ISR in its own file and move everything else
    to a different one, so that we only have to keep the ISR
    in HOME
    
    See Pull Request #18
    cc253x: Renamed the P2 ISR
    
    This is mainly a naming convention thing, we want to have 'isr'
    as part of the name, instead of 'int'. We also want port_2 instead
    of p2 because we already had port_1
    
    See Pull Request #18
    cc253x: Add p2 interrupt handler
    
    The P2 Interrupt is shared across many periferal (I2C, USB, GPIO).
    This adds a generic interrupt handler on which the differents drivers
    can register a handler.
    
    See Pull Request #18
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Fix clock.h warnings caused by multiple, conflicting documentation blocks of clock functions
    Code style fixes: cc253x
    Removed redundant #else blocks
    cc2530: Added a method to maximise stack depth
    
    This was oringinally contributed/reported/discussed/patched by
    Philippe Retornaz (EPFL) but it's implemented
    in a more configurable fashion here.
    cc253x: use a uint8_t for sleep_flag
    
    __bit variables must be located after the 0x20 address
    This force the stack to start after 0x20, thus decrease
    the stack size by a considerable amount.
    Adjust cc2x3x ports to the new clock API
    Add clock_delay_us and clock_set_seconds to clock.h. Modify clock_wait to use clock_time_t.
    Remove the troublesome avr/dev/delay.* files.
    Add PLATFORM_NAME and combine the confusing *_REVISION defines into a single PLATFORM_TYPE
    cc2x3x clock_delay(len) now delays for approx. len usecs
    Ported the stack-friendly clock ISR code over from cc243x to cc253x
    cc2x3x clock driver cleanup
    
    * Bit-Addressable SFRs are now accessed as such,
      instead of (N)OR-ing the byte
    * A routine was declared as CCIF but not defined as such. Fixed
    * Deleted a leftover duplicate define
    * Formatting
    * Comment updates and clarifications
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Initial commit of cc2430 cpu port files. Currently used by /platform/sensinode.
    Fix cc2530 DMA priority define values
    
    Fixes #156
    Code style fixes: cc253x
    cc253x: DMA Changes
    
    - Fixed DMA irq flag clearing
    - Added a dma_reset helper
    
    See Pull Request #18
    cc253x: fix dma interrupt enable flag
    Fixed typos and a stray printf. Adjusted comments
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Modifications to support banked code.  Interrupts and routines accessed through function pointers reside in independent files so they can be assigned to the HOME bank.  Init code can be placed in any bank.
    Also add adc init code and bank header files.
    Fixes and improvements from Anthony Asterisk
    - First in 8051def.h,  it appears the uip_arch-asm.S file was copied from z80 and am unsure it will work properly.  I modified the 8051def.h to prevent the UIP code from using these routines.
    - In dma.c the config routine provides access to all of the DMA channel options, except for the word mode flag.  In order to maintain compatibility with any existing code I created a second routine and converted the original routine into a wrapper routine with a fixed word mode value.
    - uart.c::uart0_init was missing blocking access to the higher baud rates.  I am not sure why, so I corrected this.
    - I also copied over to header files that provide some useful macros from the msp430 cpu.  The files are lpm.h and hwconf.h.  The lpm.h is for switching power modes, I think.  The hwconf.h has various macros for configuring port I/O.  By porting these files the led/button api's can be ported with minimal modifications.
    Initial commit of cc2430 cpu port files. Currently used by /platform/sensinode.
    Code style fixes: cc253x
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Fix the uart0 flow control register P0SEL setting in cpu cc253x
    Fix a syntax error in /cpu/cc253x/dev/uart0.c
    Bugfixed the cc253x UART0 init (Thanks, Deng Jian)
    
    The flush instruction was resetting the stop bit level to 'low'
    The cc2530 UART driver was sending a 0 down the line on init
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Implement extended RF API for the CC2530 RF
    Added stub for extended radio API for cc253x
    Changed the name of the rimeaddr module to linkaddr
    Moved the rimeaddr.[ch] code from the core/net/rime module to the core/net module, as it is used not only by rime code
    Code style fixes: cc253x
    cc253x: Config to swap between UART and USB I/O
    
    See Pull Request #18
    cc2530: Added a method to maximise stack depth
    
    This was oringinally contributed/reported/discussed/patched by
    Philippe Retornaz (EPFL) but it's implemented
    in a more configurable fashion here.
    Improved handling of cc2x3x rf_flags
    Bugfixed the cc2530 LOW_POWER_RX configuration
    
    Report and fix by Tom Xiao
    Fixed the cc2530 RSSI adjustment
    Adjust cc2x3x ports to the new clock API
    Added support for reading MAC from the cc253x flash
    
    We still use the primary location by default (Info Page) but
    this is now configurable. This change is useful for users who
    wish to specify their own MAC address. Since the Info Page is
    read-only, they need to be able to use the secondary location
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Broke out serial-shell from the shell app into its own app. Project can use the serial-shell to get a shell running over the serial line, just like a project can use the telnetd to get a shell running over Telnet/TCP/IP.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Code style fixes: cc253x
    cc253x: Renamed P2 interrupt-related files for better consistency
    
    See Pull Request #18
    cc253x: Renamed the P2 ISR
    
    This is mainly a naming convention thing, we want to have 'isr'
    as part of the name, instead of 'int'. We also want port_2 instead
    of p2 because we already had port_1
    
    See Pull Request #18
    cc253x: Configurable linkage for the P2 ISR
    
    See Pull Request #18
    cc253x: Add p2 interrupt handler
    
    The P2 Interrupt is shared across many periferal (I2C, USB, GPIO).
    This adds a generic interrupt handler on which the differents drivers
    can register a handler.
    
    See Pull Request #18
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Modifications to support banked code.  Interrupts and routines accessed through function pointers reside in independent files so they can be assigned to the HOME bank.  Init code can be placed in any bank.
    Also add adc init code and bank header files.
    Initial commit of cc2430 cpu port files. Currently used by /platform/sensinode.
    Code style fixes: cc253x
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Implement extended RF API for the CC2530 RF
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Added channel_get() to the cc2x3x RF drivers
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Fix cc2530 DMA priority define values
    
    Fixes #156
    Code style fixes: cc253x
    cc253x: DMA Changes
    
    - Fixed DMA irq flag clearing
    - Added a dma_reset helper
    
    See Pull Request #18
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Modifications to support banked code.  Interrupts and routines accessed through function pointers reside in independent files so they can be assigned to the HOME bank.  Init code can be placed in any bank.
    Also add adc init code and bank header files.
    Initial commit of cc2430 cpu port files. Currently used by /platform/sensinode.
    cc2530 watchdog improvements and cleanup
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Dummy watchdog implementation for cooja nodes
    Added dummy watchdog functions for all AVR platforms
    Dummy watchdog implementation so that programs that use the watchdog compiles
    Passed tests on Raven 1284p in 3 seconds  with 56KB program memory disk
    removed unnecessary inclusion
    Added dummy watchdog.c to allow compiling and running code that calls the watchdog functions
    Import of the contiki-2.x development code from the SICS internal CVS server
    cc253x: optionally push bits in p2 interrupt
    
    See Pull Request #18
    cc253x: Renamed P2 interrupt-related files for better consistency
    
    See Pull Request #18
    cc253x: P2-related routines are now bankable
    
    We keep the ISR in its own file and move everything else
    to a different one, so that we only have to keep the ISR
    in HOME
    
    See Pull Request #18
    cc253x: Renamed the P2 ISR
    
    This is mainly a naming convention thing, we want to have 'isr'
    as part of the name, instead of 'int'. We also want port_2 instead
    of p2 because we already had port_1
    
    See Pull Request #18
    cc253x: Add p2 interrupt handler
    
    The P2 Interrupt is shared across many periferal (I2C, USB, GPIO).
    This adds a generic interrupt handler on which the differents drivers
    can register a handler.
    
    See Pull Request #18
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Code style fixes: cc253x
    cc253x: DMA Changes
    
    - Fixed DMA irq flag clearing
    - Added a dma_reset helper
    
    See Pull Request #18
    cc2530: Added a method to maximise stack depth
    
    This was oringinally contributed/reported/discussed/patched by
    Philippe Retornaz (EPFL) but it's implemented
    in a more configurable fashion here.
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Modifications to support banked code.  Interrupts and routines accessed through function pointers reside in independent files so they can be assigned to the HOME bank.  Init code can be placed in any bank.
    Also add adc init code and bank header files.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Fixes and improvements from Anthony Asterisk
    - First in 8051def.h,  it appears the uip_arch-asm.S file was copied from z80 and am unsure it will work properly.  I modified the 8051def.h to prevent the UIP code from using these routines.
    - In dma.c the config routine provides access to all of the DMA channel options, except for the word mode flag.  In order to maintain compatibility with any existing code I created a second routine and converted the original routine into a wrapper routine with a fixed word mode value.
    - uart.c::uart0_init was missing blocking access to the higher baud rates.  I am not sure why, so I corrected this.
    - I also copied over to header files that provide some useful macros from the msp430 cpu.  The files are lpm.h and hwconf.h.  The lpm.h is for switching power modes, I think.  The hwconf.h has various macros for configuring port I/O.  By porting these files the led/button api's can be ported with minimal modifications.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Correct several doxygen tags (\file)
    Removing trailing whitespaces
    pic32 minor cleanups
    minor corrections to adhere contiki code style guidelines
    added support for pic32 (PIC32MX795F512L)
    Add clock_delay_us and clock_set_seconds to clock.h. Modify clock_wait to use clock_time_t.
    Remove the troublesome avr/dev/delay.* files.
    Add PLATFORM_NAME and combine the confusing *_REVISION defines into a single PLATFORM_TYPE
    Restore micaz/dev/clock.c, mysteriously renamed to iris/dev/sensors/battery-sensor.c
    removed obsolete leds_[color]() functions, replaced by leds_{on,off}()
    allow LEDS_[COLOR] to be configured by platform-conf
    Minor code style fixes
    added energest on all parts of leds API and some cleanup
    Moved energest.{c,h} from core/lib to core/sys: power profiling is a system mechanism, not a library
    Experimental energy estimation code
    fixed leds invert
    Made LEDS not count
    Import of the contiki-2.x development code from the SICS internal CVS server
    [cpu] removed faulty group names
    Correct several doxygen tags (\file)
    Removing trailing whitespaces
    added support for pic32 (PIC32MX795F512L)
    added support for pic32 (PIC32MX795F512L)
    Correct several doxygen tags (\file)
    Removing trailing whitespaces
    added support for pic32 (PIC32MX795F512L)
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Cross compiler interrupt service routine compatibility definitions for MSP430 based platforms based on isr_compat.h by Steve Underwood.
    Updated SPI config for faster SPI, split msp430/clock/spi into separate versions for MSP430/MSP430X
    Initial WiSMote port based on code from Arago Systems.
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    fixed cpu/msp430 for compilation with IAR compiler
    added missing include
    Enable the watchdog for rtimers too. Removed the disabling of the TACTL - it should not be needed, and interferes with the timing behaviour of stable rtimers
    Added function rtimer_arch_now that makes sure that the timer value does not change between readouts to avoid reading while the timer is being updated.
    Turn off timer before updating - needed to avoid bugs in ContikiMAC - not 100% sure why
    Removed safeguards around the update code for the timer; turns out they weren't needed (but instead triggered a bug in MSPsim)
    Turn off Timer A before modifying its control registers to avoid problems when timer is updated frequently
    Remove the read from TAIV - this should not be done for TIMERA0 interrupts (in fact, doing so messes up the other timer a interrupts, like the clock tick...)
    Need to clear the interrupt flag register for Timer A
    bug fix: wake up MSP430 when leaving rtimer interrupt if the rtimer polled a process.
    thanks to Marco Vedovati for finding the bug
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    Moved energest from lib/ to sys/
    removed offset in rtimer_arch
    removed redundant code - configuration of basic clock subsystem in clock and rtimer_arch
    Added energy estimation, embryo for possible future drift configuration
    rtimer_arch_now() now returns the correct value
    Fixed description
    MSP430 real-time rtimer support using timerb1
    Added #include that #defines NULL
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    Added *experimental* module for sending raw (non-routed) packets from Contiki. The name of the module is likely to change.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Correct several doxygen tags (\file)
    Removing trailing whitespaces
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    added support for pic32 (PIC32MX795F512L)
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updated SPI config for faster SPI, split msp430/clock/spi into separate versions for MSP430/MSP430X
    fixed cpu/msp430 for compilation with IAR compiler
    Turned up the rtimer resolution to 32678 Hz.
    Added function rtimer_arch_now that makes sure that the timer value does not change between readouts to avoid reading while the timer is being updated.
    Increased the rtimer granularity: needed to make contikimac work
    Increased the clock speed to 32768/4 from 32768/8 to provide better accuracy for power profiling of radio CCA checks
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    removed offset in rtimer_arch
    Reading timer now quicker, embryo for possible future drift configuration
    Fixed description
    MSP430 real-time rtimer support using timerb1
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    MSP430 definitions
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    pic32 minor cleanups
    added support for pic32 (PIC32MX795F512L)
    Correct several doxygen tags (\file)
    Removing trailing whitespaces
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    added support for pic32 (PIC32MX795F512L)
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    implemented rtimer library for simulated contiki motes
    + clock stub functions
    added empty rtimer files to remove compilation errors
    
    OBS: not implemented yet; rtimer does not work with COOJA
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    MSP430 definitions
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    [cpu/pic32] Removed excess end group
    [doc] Various fixes for doxygen grouping etc.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    added support for pic32 (PIC32MX795F512L)
    Correct several doxygen tags (\file)
    Removing trailing whitespaces
    pic32 minor cleanups
    added support for pic32 (PIC32MX795F512L)
    Correct several doxygen tags (\file)
    Removing trailing whitespaces
    added support for pic32 (PIC32MX795F512L)
    remove cvs keywords from cpu/mc1322x
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    removed unnecessary inclusion
    Added dummy watchdog.c to allow compiling and running code that calls the watchdog functions
    Import of the contiki-2.x development code from the SICS internal CVS server
    Correct several doxygen tags (\file)
    Removing trailing whitespaces
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    added support for pic32 (PIC32MX795F512L)
    Made MT stack size configurable
    fixed cpu/msp430 for compilation with IAR compiler
    implemented support for data argument when starting threads:
    
    given function is called from a wrapper instead of immediately returned to via the stack
    Added a function for measuring stack usage
    Import of the contiki-2.x development code from the SICS internal CVS server
    Correct several doxygen tags (\file)
    Removing trailing whitespaces
    added support for pic32 (PIC32MX795F512L)
    remove cvs keywords from cpu/mc1322x
    initial mc1322x commit
    
    based on commit aac3a355451d899f02737f2907af8c874ee4feba of
    
    git://git.devl.org/git/malvira/contiki-mc1322x.git
    use synchronous transmission.
    DMA destination is now given as a parameter instead of being hardwired.
    Make it possible to subscribe to DMA events.
    Improvement batch.
    dma transfer support.
    Platform-specific devices.
    cooja radio driver (uip + rime)
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    pic32 minor cleanups
    minor corrections to adhere contiki code style guidelines
    added support for pic32 (PIC32MX795F512L)
    added support for pic32 (PIC32MX795F512L)
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    pic32 minor cleanups
    minor corrections to adhere contiki code style guidelines
    added support for pic32 (PIC32MX795F512L)
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    pic32 minor cleanups
    added support for pic32 (PIC32MX795F512L)
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    added support for pic32 (PIC32MX795F512L)
    added support for pic32 (PIC32MX795F512L)
    added support for pic32 (PIC32MX795F512L)
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    added support for pic32 (PIC32MX795F512L)
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added prototype missing for quite some time now - do we need -Werror ?
    Added functionality for decaying routes: when a packet is sent over a route, it is decayed. If the route is not refreshed within four packets (with the route_refresh() function, which is called when a new packet arrives), the route is dropped. A route can be decayed at most once per second
    Removed automatic refresh of routes from the route_lookup() function and moved it into an explicit route_refresh() function. The previous behaviour was dangerous, since it meant that even bad routes that someone was looking for were considered fresh. Now such routes time out if they are not explictily refreshed (e.g., on a packet reception)
    Made constant addresses const
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Added API for reading the routing table
    Cleaned up #includes to avoid cyclic dependencies - the Rime includes no longer depend on rime.h
    Documentation updates
    Make route lifetime dynamically configurable
    Added missing prototype.
    Added automatic timeouts
    New Rime module: mesh, a mesh routing protocol
    Initial version of a simple mesh routing protocol written with Rime
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    added support for pic32 (PIC32MX795F512L)
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added prototype missing for quite some time now - do we need -Werror ?
    Added functionality for decaying routes: when a packet is sent over a route, it is decayed. If the route is not refreshed within four packets (with the route_refresh() function, which is called when a new packet arrives), the route is dropped. A route can be decayed at most once per second
    Removed automatic refresh of routes from the route_lookup() function and moved it into an explicit route_refresh() function. The previous behaviour was dangerous, since it meant that even bad routes that someone was looking for were considered fresh. Now such routes time out if they are not explictily refreshed (e.g., on a packet reception)
    Made constant addresses const
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Added API for reading the routing table
    Cleaned up #includes to avoid cyclic dependencies - the Rime includes no longer depend on rime.h
    Documentation updates
    Make route lifetime dynamically configurable
    Added missing prototype.
    Added automatic timeouts
    New Rime module: mesh, a mesh routing protocol
    Initial version of a simple mesh routing protocol written with Rime
    Import of the contiki-2.x development code from the SICS internal CVS server
    Re-structure CC2538 doxygen module hierarchy
    [CC2538-SPI] Implement SPI_FLUSH, spi mode, !CS
    
    Because the CC2538 has a multi-byte SPI RX FIFO, flushing the buffer
    requires more than just a single read. This adds a loop that empties the
    entire RX buffer on a FLUSH().
    
    Different SPI chips needs different SPI settings. This commit adds a
    function that allows chip drivers to configure the SPI peripheral before
    using it.
    
    The frame pin the driver was using as a chip select does not work as
    most devices expect it to. It toggles after every byte, and most chips
    interpret that as end of message. To make drivers more reliable, each
    chip driver should setup a GPIO and assert it as needed.
    cc2538: spi: Add enable and disable functions
    
    This makes it possible to reduce the power consumption when the SPI is unused.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    Added SPI driver for CC2538
    
    This uses the core/dev/spi.h header and implements the spi_init()
    function and the various macros for SPI operation. ssi.h contains all of
    the register locations and information.
    
    This implementation is not very versatile, mostly because I don't how to
    make it flexible in the contiki system. It supports pin muxing for the
    four spi pins, but other than that picks sensible defaults.
    
    The SPI macros (like SPI_READ()) are defined in
    cpu/cc2538/spi-arch.h. In order to use the SPI driver, add the following
    includes to your project:
    
        #include "spi-arch.h
        #include "dev/spi.h"
    Cleanup and refactoring of the STM32w port
    
    This is a general cleanup of things like code style issues and code structure of the STM32w port to make it more like the rest of Contiki is structured.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    Added functions and example for deep sleep on mb851.
    
    The added function let a process to make the system go
    into deep sleep for maximum power saving.
    The udp-ipv6-example shows how to use these new functions.
    New Contiki port to STM32W108.
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Made initialization function return a pointer to the MAC driver structure, to make initialization nicer
    Modified to use the new MAC layer API
    A 'null' MAC protocol that does not do anything
    Rime driver running over UDP
    Initial import of the experimental Rime code into the SourceForge CVS.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Make the CC2538 secondary IEEE address location configurable
    Fix incorrect IEEE address byte re-ordering
    CC2538: add secondary location to ieee address
    
    The CC2538 currently has two addressing options: a hardcoded address set
    at compile time or the address stored in primary address section of the
    info page. This commit adds the option to choose the secondary location
    of the ieee address from the info page, or any memory address.
    
    To use, define `IEEE_ADDR_CONF_USE_SECONDARY_LOCATION` in `project-conf.h`
    or similar.
    
    For example:
    
        #define IEEE_ADDR_CONF_USE_SECONDARY_LOCATION 1
    Change the InfoPage Location of the IEEE address
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    cc2531: Added a new USB demo project (CDC-ACM)
    
    See Pull Request #18
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Fix clock.h warnings caused by multiple, conflicting documentation blocks of clock functions
    cc2538: clock: Fix time drift occurring with PM1/2
    
    The clock adjustments made when waking up from PM1/2 were very inaccurate. If
    relying on ContikiMAC's rtimer to sleep, this led to Contiki's software clock
    time, seconds and etimers to be 2.5 s slower after each min, i.e. 1 hour slower
    after each day, which is a show stopper issue for most real-life applications.
    
    This was caused by a lack of accuracy in several pieces of code during sleep
    entry and wake-up:
     - It was difficult to synchronize the calls to RTIMER_NOW() before and after
       sleep with the deactivation and activation of the SysTick peripheral caused
       by PM1/2. This caused an inaccuracy in the corrective number of ticks passed
       to clock_adjust().
     - The value passed to clock_adjust() was truncated from an rtimer_clock_t
       value, but the accumulated error caused by these truncated bits was ignored.
     - The SysTick peripheral had to be stopped during the call to clock_adjust().
    
    Rather than creating even more complicated clock adjustment mechanisms that
    would probably still have mixed results as to accuracy, this change simply uses
    the Sleep Timer counter as a base value for Contiki's clock and seconds
    counters. The tick from the Systick peripheral is still used as the interrupt
    source to update Contiki's clocks and timers. When running, the SysTick
    peripheral and the Sleep Timer are synchronized, so combining both is not an
    issue, and this allows not to alter the rtimer interrupt mechanism using the
    Sleep Timer. The purpose of the Sleep Timer is to be an RTC, so it is the
    perfect fit for the clock module, all the more it can not be disturbed by PM1/2.
    If the 32-kHz XOSC is used, the Sleep Timer is also very accurate. If the
    32-kHZ RCOSC is used, it is calibrated from the 32-MHz XOSC, so it is also
    accurate, and the 32753-Hz vs. 32768-Hz systematic error in that case is
    negligible, all the more one would use the 32-kHz XOSC for better accuracy.
    
    Besides fixing this time drift issue, this change has several benefits:
     - clock_time(), clock_seconds() and RTIMER_NOW() start synchronized, and they
       change at the same source pace.
     - If clock_set_seconds() is called, then clock_seconds() indicates one more
       second almost exactly one second later, then exactly each second. Before this
       change, clock_seconds() was not synchronized with clock_set_seconds(), so the
       value returned by the former could be incremented immediately after the call
       to the latter in some cases.
     - The code tied to the clock module is simpler and more robust.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: clock: Fix secs update in clock_adjust()
    
    Whole elapsed seconds are added to secs first, so only the remaining subsecond
    ticks should then be subtracted from second_countdown in order to decide whether
    secs should be incremented again.
    
    Otherwise, secs is not correctly updated in some cases, typically if the bit 7
    of ticks is 1. E.g., with ticks = 128 (i.e. exactly 1 s elapsed) and
    second_countdown = 128, secs was first incremented as expected, then 128 was
    subtracted from second_countdown, giving 0 and triggering an unwanted second
    increment of secs. Or with ticks = 129 (i.e. 1 s + 1 tick) and
    second_countdown = 1, secs was first incremented as expected, then 129 was
    subtracted from second_countdown, giving 128 and missing a second increment of
    secs that should have occurred because second_countdown wrapped around.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: clock: Request an etimer poll in clock_adjust()
    
    During PM1+, the hardware timer used to implement the Contiki clock is frozen,
    so clock_adjust() needs to be called when exiting those modes in order to
    compensate for the clock ticks missed while the timer was frozen. Doing so
    changes the Contiki clock time, so etimer_request_poll() needs to be called in
    order to inform the etimer library that an etimer might have expired.
    
    Note that waiting for the next clock ISR to call etimer_request_poll() is
    unreliable because the system might go back to sleep beforehand.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Re-structure CC2538 doxygen module hierarchy
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    cc2531: Added a new USB demo project (CDC-ACM)
    
    See Pull Request #18
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    cc2538: uart: Make it possible to use several UARTs simultaneously
    
    This avoids the limitation of having a single UART available at runtime, without
    duplicating code.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    cc2531: Added a new USB demo project (CDC-ACM)
    
    See Pull Request #18
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    cc2538: lpm: Fix build for LPM_CONF_ENABLE == 0
    
    lpm.c needs to #include lpm.h in order to get the definition of
    lpm_periph_permit_pm1_func_t, which made the replacement macros conflict with
    the function definitions for the LPM_CONF_ENABLE == 0 case. This change fixes
    this issue by #if-ing out the code in lpm.c in that case. Also, the replacement
    macro for lpm_register_peripheral() was missing in that case, which is fixed
    here.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: clock: Fix time drift occurring with PM1/2
    
    The clock adjustments made when waking up from PM1/2 were very inaccurate. If
    relying on ContikiMAC's rtimer to sleep, this led to Contiki's software clock
    time, seconds and etimers to be 2.5 s slower after each min, i.e. 1 hour slower
    after each day, which is a show stopper issue for most real-life applications.
    
    This was caused by a lack of accuracy in several pieces of code during sleep
    entry and wake-up:
     - It was difficult to synchronize the calls to RTIMER_NOW() before and after
       sleep with the deactivation and activation of the SysTick peripheral caused
       by PM1/2. This caused an inaccuracy in the corrective number of ticks passed
       to clock_adjust().
     - The value passed to clock_adjust() was truncated from an rtimer_clock_t
       value, but the accumulated error caused by these truncated bits was ignored.
     - The SysTick peripheral had to be stopped during the call to clock_adjust().
    
    Rather than creating even more complicated clock adjustment mechanisms that
    would probably still have mixed results as to accuracy, this change simply uses
    the Sleep Timer counter as a base value for Contiki's clock and seconds
    counters. The tick from the Systick peripheral is still used as the interrupt
    source to update Contiki's clocks and timers. When running, the SysTick
    peripheral and the Sleep Timer are synchronized, so combining both is not an
    issue, and this allows not to alter the rtimer interrupt mechanism using the
    Sleep Timer. The purpose of the Sleep Timer is to be an RTC, so it is the
    perfect fit for the clock module, all the more it can not be disturbed by PM1/2.
    If the 32-kHz XOSC is used, the Sleep Timer is also very accurate. If the
    32-kHZ RCOSC is used, it is calibrated from the 32-MHz XOSC, so it is also
    accurate, and the 32753-Hz vs. 32768-Hz systematic error in that case is
    negligible, all the more one would use the 32-kHz XOSC for better accuracy.
    
    Besides fixing this time drift issue, this change has several benefits:
     - clock_time(), clock_seconds() and RTIMER_NOW() start synchronized, and they
       change at the same source pace.
     - If clock_set_seconds() is called, then clock_seconds() indicates one more
       second almost exactly one second later, then exactly each second. Before this
       change, clock_seconds() was not synchronized with clock_set_seconds(), so the
       value returned by the former could be incremented immediately after the call
       to the latter in some cases.
     - The code tied to the clock module is simpler and more robust.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: lpm: Fix RTIMER_NOW() upon wake-up
    
    When returning from PM1/2, the sleep timer value (used by RTIMER_NOW()) is not
    up-to-date until a positive edge on the 32-kHz clock has been detected after the
    system clock restarted. To ensure an updated value is read, wait for a positive
    transition on the 32-kHz clock by polling the SYS_CTRL_CLOCK_STA.SYNC_32K bit,
    before reading the sleep timer value.
    
    Because of this RTIMER_NOW() fixup, lpm_exit() has to be called at the very
    beginning of ISRs waking up the SoC. This also ensures that all clocks and
    timers are enabled at the correct frequency and updated before using them
    following wake-up.
    
    Without this fix, etimers could sometimes (randomly, depending on timings)
    become ultra slow (observed from 10x to 40x slower than normal) if the system
    exited PM1/2 very often. This issue occurred more often with PM1.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: lpm: Speed up the transition to the 32-MHz XOSC after wake-up
    
    As recommended by the CC2538 User's Guide, set SYS_CTRL_CLOCK_CTRL.OSC_PD to 0
    before asserting WFI, and set it to 1 after the system clock is sourced from the
    32-MHz XOSC following wake-up. This allows to automatically start both
    oscillators upon wake-up in order to partially hide the 32-MHz XOSC startup time
    by the 16-MHz RCOSC startup time.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: lpm: Let system clock transitions complete before further changes
    
    As a matter of precaution, always make sure that pending system clock
    transitions are complete before requesting a new change of the system clock
    source.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: lpm: Fix energest context when aborting lpm_enter()
    
    In one of the abort cases in lpm_enter(), the energest context has previously
    been set to LPM, so the abort code needs to set it back to CPU.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: lpm: Make periph_permit_pm1_funcs static
    
    periph_permit_pm1_funcs[] is a private member of lpm.c, so define it as static.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: uart: Fix crippled output occurring upon lpm_enter()
    
    lpm_enter() must not enter PM1+ if the UART TX FIFO is not empty. Otherwise, the
    UART clock gets disabled, and its TX is broken.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: usb: Use the new LPM peripheral registration
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: lpm: Add registration mechanism for peripherals
    
    Some peripherals have their clocks automatically gated in PM1+ modes, so they
    cannot operate. This new mechanism gives peripherals a way to prohibit PM1+
    modes so that they can properly complete their current operations before
    entering PM1+.
    
    This mechanism is implemented with peripheral functions registered to the LPM
    module. These functions return whether the associated peripheral permits or not
    PM1+ modes. They are called by the LPM module each time PM1+ might be possible.
    If any of the peripherals wants to block PM1+, then the system is only dropped
    to PM0.
    
    Partly from: George Oikonomou
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    cc2538: lpm: Fix RTIMER_NOW() upon wake-up
    
    When returning from PM1/2, the sleep timer value (used by RTIMER_NOW()) is not
    up-to-date until a positive edge on the 32-kHz clock has been detected after the
    system clock restarted. To ensure an updated value is read, wait for a positive
    transition on the 32-kHz clock by polling the SYS_CTRL_CLOCK_STA.SYNC_32K bit,
    before reading the sleep timer value.
    
    Because of this RTIMER_NOW() fixup, lpm_exit() has to be called at the very
    beginning of ISRs waking up the SoC. This also ensures that all clocks and
    timers are enabled at the correct frequency and updated before using them
    following wake-up.
    
    Without this fix, etimers could sometimes (randomly, depending on timings)
    become ultra slow (observed from 10x to 40x slower than normal) if the system
    exited PM1/2 very often. This issue occurred more often with PM1.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    CC2538: Add FLASH_CONF_ORIGIN and FLASH_CONF_SIZE config parameters.
    cc2538: Remove the unused vtable section
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: Move SoC data to a dedicated section to save space
    
    Some SoC data requires huge alignments. E.g., the µDMA channel control table has
    to be 1024-byte aligned. This table was simply aligned to 1024 bytes in the C
    code, which had the following consequences, wasting a lot of RAM:
     - As this table could be placed anywhere in .bss, there could be an alignment
       gap of up to 1023 bytes between the preceding data and this table.
     - The size of this table was also aligned to 1024 bytes, regardless of
       UDMA_CONF_MAX_CHANNEL, making this configuration option supposed to save RAM
       just useless.
     - .bss was also aligned to at least 1024 bytes, creating a huge alignment gap
       between .data and .bss.
    
    Instead of relying on the compiler to force this alignment, and on the linker to
    automatically place data, this change places carefully such SoC data in RAM
    using the linker script. A dedicated section is created to place such SoC data
    requiring huge alignments, and it is put at the beginning of the SRAM in order
    to ensure a maximal alignment without any gap. In this way, the alignment of
    .bss also remains normal, and the size of this table is not constrained by its
    alignment, but only by its contents (i.e. by UDMA_CONF_MAX_CHANNEL).
    
    In the case of the µDMA channel control table, the data is still zeroed by
    udma_init() (instead of also being zeroed as part of .bss).
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: Set the type of the .nrdata output section to NOLOAD
    
    The .nrdata section is volatile, so its initialization must be controlled by the
    application, and not be automatically done by the startup code. It should
    neither be zeroed like .bss, nor be initialized from data in flash memory like
    .data. This was already supposed to be the case, but the output section type of
    .nrdata was not set to NOLOAD, causing the generated ELF .nrdata section header
    to be of type PROGBITS instead of NOBITS, i.e. load data was generated to be
    programmed in RAM, thus producing huge unprogrammable .bin files.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: Add header file for flash CCA page and use it
    
    Create a dedicated header file with all the definitions for the flash lock bit
    page and customer configuration area. This avoids duplicating those definitions
    in the startup-gcc.c files of all CC2538-based platforms, and this also allows
    to easily manipulate the CCA from outside startup-gcc.c (e.g. for on-the-air
    firmware update).
    
    The definitions are now complete contrary to what was in startup-gcc.c:
     - Definitions have been added to select the bootloader backdoor pin and active
       level if enabled.
     - Definitions have been added to access the page and debug lock bits. The debug
       lock bit can be used to prevent someone from reading back a programmed
       firmware through JTAG if the firmware binary image has to be confidential,
       which should be combined with a disabled bootloader backdoor.
     - The application entry point is now tied to the beginning of the .text section
       instead of to the beginning of the flash. This allows projects using custom
       linker scripts to place the application entry point anywhere in the flash,
       which can be useful e.g. for on-the-air firmware update.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: lpm: Give access to the SRAM non-retention area for PM2
    
    If PM2 is enabled with LPM_CONF_MAX_PM, but not active, the non-retention area
    of the SRAM can be useful to place temporary data that does not fit in the
    low-leakage SRAM, typically after having called lpm_set_max_pm(LPM_PM1). Hence,
    give access to this non-retention area thanks to .nrdata* sections.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Improve wording
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Improve documentation for the CC2538 IEEE address re-ordering
    Improve code style
    Fix incorrect IEEE address byte re-ordering
    CC2538: add secondary location to ieee address
    
    The CC2538 currently has two addressing options: a hardcoded address set
    at compile time or the address stored in primary address section of the
    info page. This commit adds the option to choose the secondary location
    of the ieee address from the info page, or any memory address.
    
    To use, define `IEEE_ADDR_CONF_USE_SECONDARY_LOCATION` in `project-conf.h`
    or similar.
    
    For example:
    
        #define IEEE_ADDR_CONF_USE_SECONDARY_LOCATION 1
    Changed the name of the rimeaddr module to linkaddr
    Moved the rimeaddr.[ch] code from the core/net/rime module to the core/net module, as it is used not only by rime code
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    cc2538: uart: Make it possible to use several UARTs simultaneously
    
    This avoids the limitation of having a single UART available at runtime, without
    duplicating code.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    cc2531: Added a new USB demo project (CDC-ACM)
    
    See Pull Request #18
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc253x
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Converted u8_t to uint8_t and u16_t to uint16_t in the cpu directory.
    - Added mtarch.c and mtarch.h back to /cpu/cc2430. Seems that mt.c needs mtarch.h even though we are not using mtarch right now in this port.
    Added some comments.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Added a function for measuring stack usage
    Made stacksize configurable via external definition
    Import of the contiki-2.x development code from the SICS internal CVS server
    CC2538: Add a Makefile rule to generate a final assembly listing.
    Make some CC2538 CFLAGS and LDFLAGS common
    
    Some CFLAGS and LDFLAGS previously only enabled with SMALL=1 have
    now been enabled for all builds, regardless of the value of SMALL.
    
    Therefore, from now on, SMALL only chooses between -Os and -O2
    Use -Os for CC2538 builds
    
    As discussed in #503, -Os was broken with one of the toolchains
    recommended in the platform's README and for that reason we were
    using -O2 by default.
    
    This commit sets the default to -Os and updates the README to no
    longer recommend the toolchain in question
    cc2538: Fix library linkage
    
    If a project needs to use some libraries at link stage, then the corresponding
    linker options (e.g. '-lm') have to be passed after any .o file depending on
    these libraries. Hence, LDFLAGS cannot be used to add such options when invoking
    $(LD) in Makefile.cc2538, or it should be moved to the correct location.
    Instead, this change adds TARGET_LIBFILES to the correct location, like most
    other Contiki targets.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: Sort link input sections by alignment to optimize size
    
    Normally, the linker does not sort files and sections matched by wildcards, so
    they are placed in the order in which they are seen during link. If numerous
    objects with different alignments are mixed, or if objects with unusually large
    alignments are present, this very likely leads to a lot of space being wasted
    because of accumulated alignment gaps.
    
    This commit forces input sections to be sorted by alignment (unless this is
    overridden by the linker script), which decreases the number and the size of
    alignment gaps, thus saving space.
    
    For a typical Contiki project, this change saves nearly 1 kiB, mainly in .bss.
    
    Note that this behavior is only enabled if the SMALL make variable is set to 1,
    because this makes more sense for a size optimization.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: Add adc driver and example
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: Make it possible to use a custom linker script
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: Generate .hex output
    
    ELF files generated by GCC make SmartRF Flash Programmer 2 crash (only the TI
    format is supported by this tool for ELFs), and binary files are not very
    appropriate because they are gapless, so generate Intel HEX files since these
    are very well supported by most programming tools while still flexible.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    Added SPI driver for CC2538
    
    This uses the core/dev/spi.h header and implements the spi_init()
    function and the various macros for SPI operation. ssi.h contains all of
    the register locations and information.
    
    This implementation is not very versatile, mostly because I don't how to
    make it flexible in the contiki system. It supports pin muxing for the
    four spi pins, but other than that picks sensible defaults.
    
    The SPI macros (like SPI_READ()) are defined in
    cpu/cc2538/spi-arch.h. In order to use the SPI driver, add the following
    includes to your project:
    
        #include "spi-arch.h
        #include "dev/spi.h"
    Add support for verbosity control
    Makefile.include: support make clean all
    
    Historically $(OBJECTDIR) was created when Makefile.include is read.  A
    consequence is that combining "clean" with "all" (or any other build
    target) results in an error because the clean removes the object
    directory that is required to exist when building dependencies.
    Creating $(OBJECTDIR) on-demand ensures it is present when needed.
    
    Removed creation of $(OBJECTDIR) on initial read, and added an order-only
    dependency forcing its creation all Makefile* rules where the target is
    explicitly or implicitly in $(OBJECTDIR).
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    cc2538: lpm: Fix build for LPM_CONF_ENABLE == 0
    
    lpm.c needs to #include lpm.h in order to get the definition of
    lpm_periph_permit_pm1_func_t, which made the replacement macros conflict with
    the function definitions for the LPM_CONF_ENABLE == 0 case. This change fixes
    this issue by #if-ing out the code in lpm.c in that case. Also, the replacement
    macro for lpm_register_peripheral() was missing in that case, which is fixed
    here.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: lpm: Fix RTIMER_NOW() upon wake-up
    
    When returning from PM1/2, the sleep timer value (used by RTIMER_NOW()) is not
    up-to-date until a positive edge on the 32-kHz clock has been detected after the
    system clock restarted. To ensure an updated value is read, wait for a positive
    transition on the 32-kHz clock by polling the SYS_CTRL_CLOCK_STA.SYNC_32K bit,
    before reading the sleep timer value.
    
    Because of this RTIMER_NOW() fixup, lpm_exit() has to be called at the very
    beginning of ISRs waking up the SoC. This also ensures that all clocks and
    timers are enabled at the correct frequency and updated before using them
    following wake-up.
    
    Without this fix, etimers could sometimes (randomly, depending on timings)
    become ultra slow (observed from 10x to 40x slower than normal) if the system
    exited PM1/2 very often. This issue occurred more often with PM1.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: lpm: Give access to the SRAM non-retention area for PM2
    
    If PM2 is enabled with LPM_CONF_MAX_PM, but not active, the non-retention area
    of the SRAM can be useful to place temporary data that does not fit in the
    low-leakage SRAM, typically after having called lpm_set_max_pm(LPM_PM1). Hence,
    give access to this non-retention area thanks to .nrdata* sections.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: uart: Fix crippled output occurring upon lpm_enter()
    
    lpm_enter() must not enter PM1+ if the UART TX FIFO is not empty. Otherwise, the
    UART clock gets disabled, and its TX is broken.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: usb: Use the new LPM peripheral registration
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: lpm: Add registration mechanism for peripherals
    
    Some peripherals have their clocks automatically gated in PM1+ modes, so they
    cannot operate. This new mechanism gives peripherals a way to prohibit PM1+
    modes so that they can properly complete their current operations before
    entering PM1+.
    
    This mechanism is implemented with peripheral functions registered to the LPM
    module. These functions return whether the associated peripheral permits or not
    PM1+ modes. They are called by the LPM module each time PM1+ might be possible.
    If any of the peripherals wants to block PM1+, then the system is only dropped
    to PM0.
    
    Partly from: George Oikonomou
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Changed the name of the rimeaddr module to linkaddr
    Moved the rimeaddr.[ch] code from the core/net/rime module to the core/net module, as it is used not only by rime code
    Improve handling of CDC ACM line state
    
    - For the CC2538, simplify handling of USB_CDC_ACM_LINE_STATE
      events. Ignore the Carrier Control (RTS) bit when receiving
      a SET_CONTROL_LINE _STATE request, we are a full duplex device.
    - Improve behaviour of the CC2531 USB stick when there is no
      process on the host to read IN data. Basically, we adopt the
      CC2538 approach and we only send data when a DTE is present
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    cc2538: usb: Make the GPIO driving the pull-up optional
    
    The data sheet recommends that the USB pull-up resistor be driven by a GPIO so
    that it can be controlled by software, but this is not mandatory. Hence, leave
    the choice so that CC253-based boards not using this option can build and work
    fine.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: Clean up port and pin definitions
    
    Homogenize port and pin definitions naming:
     - PERIPHERAL_FUNCTION_PORT for the port ID,
     - PERIPHERAL_FUNCTION_PIN for the pin ID,
     - PERIPHERAL_FUNCTION_PORT_BASE for the port base,
     - PERIPHERAL_FUNCTION_PIN_MASK for the pin mask.
    
    Define only PERIPHERAL_FUNCTION_PORT and PERIPHERAL_FUNCTION_PIN in board.h, and
    deduce PERIPHERAL_FUNCTION_PORT_BASE and PERIPHERAL_FUNCTION_PIN_MASK in the
    driver from the former definitions.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: gpio: Use accessor macros
    
    Use the GPIO accessor macros instead of copying raw register access code all
    over the place. This is cleaner and less error prone.
    
    This fixes the setting of the USB pull-up resistor that worked only by chance on
    the CC2538DK because it is controlled by the pin 0 of the used GPIO port.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: usb: Use the new LPM peripheral registration
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    cc2531: change cdc-acm descriptor
    
    Change to have a real usb VID/PID and better fit the capabilities
    of the CC2531 hardware (enpoint size, location).
    
    Compile only if the cdc-acm class is requested.
    
    See Pull Request #18
    cc2531: Copy arm usb framework
    
    See Pull Request #18
    USB CDC-ACM class
    Added USB (specifically CDC-ACM) support
    cc2538: Add adc driver and example
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Don't hardcode min and max TX power values
    Implement extended RF API for the CC2538
    Changed the name of the rimeaddr module to linkaddr
    Added missing argument declaration
    Added header declarations for cc2538_rf_read_rssi() and cc2538_rf_set_promiscous_mode()
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    CC2538: Add hardware flow control (RTS/CTS) support on UART1.
    cc2538: uart: Make it possible to use several UARTs simultaneously
    
    This avoids the limitation of having a single UART available at runtime, without
    duplicating code.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    Eliminate UART_CONF_IBRD and UART_CONF_FBRD.
    cc2538: Support any UART baudrate.
    cc2538: Clean up port and pin definitions
    
    Homogenize port and pin definitions naming:
     - PERIPHERAL_FUNCTION_PORT for the port ID,
     - PERIPHERAL_FUNCTION_PIN for the pin ID,
     - PERIPHERAL_FUNCTION_PORT_BASE for the port base,
     - PERIPHERAL_FUNCTION_PIN_MASK for the pin mask.
    
    Define only PERIPHERAL_FUNCTION_PORT and PERIPHERAL_FUNCTION_PIN in board.h, and
    deduce PERIPHERAL_FUNCTION_PORT_BASE and PERIPHERAL_FUNCTION_PIN_MASK in the
    driver from the former definitions.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: uart: Fix crippled output occurring upon lpm_enter()
    
    lpm_enter() must not enter PM1+ if the UART TX FIFO is not empty. Otherwise, the
    UART clock gets disabled, and its TX is broken.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    Set peripheral mode for the correct UART TX/RX pins
    Make the CC2538 UART driver more configurable
    
    * We can now very easily switch between UART0 and UART1 through a define
    * We can also configure the UART RX and TX port/pin through defines
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Fix CC2538 random_init lockup
    
    Contiki sometimes fails to boot correctly and locks up in
    random_init()
    
    This problem only manifests itself for specific versions
    of the arm-gcc toolchain and then again only for specific
    levels of optimisation (-Os vs -O2, depending on the
    value of the SMALL make variable)
    
    The lockup is caused when we write an RFCORE XREG before
    the RF clock ungating has taken effect, which in turn
    only occurs depending on the assembly generated for those
    two instructions:
    
      REG(SYS_CTRL_RCGCRFC) = 1;
    
      REG(RFCORE_XREG_FRMCTRL0) = 0x00000008;
    
    This commit makes the RNG wait for the ungating to take
    effect before attempting to write the register
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    [CC2538-SPI] Implement SPI_FLUSH, spi mode, !CS
    
    Because the CC2538 has a multi-byte SPI RX FIFO, flushing the buffer
    requires more than just a single read. This adds a loop that empties the
    entire RX buffer on a FLUSH().
    
    Different SPI chips needs different SPI settings. This commit adds a
    function that allows chip drivers to configure the SPI peripheral before
    using it.
    
    The frame pin the driver was using as a chip select does not work as
    most devices expect it to. It toggles after every byte, and most chips
    interpret that as end of message. To make drivers more reliable, each
    chip driver should setup a GPIO and assert it as needed.
    Added SPI driver for CC2538
    
    This uses the core/dev/spi.h header and implements the spi_init()
    function and the various macros for SPI operation. ssi.h contains all of
    the register locations and information.
    
    This implementation is not very versatile, mostly because I don't how to
    make it flexible in the contiki system. It supports pin muxing for the
    four spi pins, but other than that picks sensible defaults.
    
    The SPI macros (like SPI_READ()) are defined in
    cpu/cc2538/spi-arch.h. In order to use the SPI driver, add the following
    includes to your project:
    
        #include "spi-arch.h
        #include "dev/spi.h"
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Corrected the register offset value of ANA_REGS_IVCTRL. TI was using the address offset instead of the physical address in their header file.
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Improve wording
    cc2538: sys_ctrl: Make it possible to use the 32-kHz crystal
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    cc2538: Add adc driver and example
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    cc2538: lpm: Fix RTIMER_NOW() upon wake-up
    
    When returning from PM1/2, the sleep timer value (used by RTIMER_NOW()) is not
    up-to-date until a positive edge on the 32-kHz clock has been detected after the
    system clock restarted. To ensure an updated value is read, wait for a positive
    transition on the 32-kHz clock by polling the SYS_CTRL_CLOCK_STA.SYNC_32K bit,
    before reading the sleep timer value.
    
    Because of this RTIMER_NOW() fixup, lpm_exit() has to be called at the very
    beginning of ISRs waking up the SoC. This also ensures that all clocks and
    timers are enabled at the correct frequency and updated before using them
    following wake-up.
    
    Without this fix, etimers could sometimes (randomly, depending on timings)
    become ultra slow (observed from 10x to 40x slower than normal) if the system
    exited PM1/2 very often. This issue occurred more often with PM1.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: gpio: Clear the power-up interrupts in the port ISRs
    
    The pending GPIO power-up interrupts have to be cleared in the ISRs in order not
    to re-trigger the interrupts and the wake-up events.
    
    The power-up interrupts of all pins are cleared for each port in the
    corresponding port ISR. This is done after calling the registered callbacks so
    that the callbacks can know which pin woke up the SoC. This is done after
    clearing the regular interrupt in order to avoid getting a new wake-up interrupt
    without the regular interrupt in the case of a new wake-up edge occurring
    between the two clears.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: gpio: Use accessor macros
    
    Use the GPIO accessor macros instead of copying raw register access code all
    over the place. This is cleaner and less error prone.
    
    This fixes the setting of the USB pull-up resistor that worked only by chance on
    the CC2538DK because it is controlled by the pin 0 of the used GPIO port.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Changes suggested by @bthebaudeau.
    CC2538: Add CONF parameters to select boot loader backdoor pin and logic level.
    cc2538: Add header file for flash CCA page and use it
    
    Create a dedicated header file with all the definitions for the flash lock bit
    page and customer configuration area. This avoids duplicating those definitions
    in the startup-gcc.c files of all CC2538-based platforms, and this also allows
    to easily manipulate the CCA from outside startup-gcc.c (e.g. for on-the-air
    firmware update).
    
    The definitions are now complete contrary to what was in startup-gcc.c:
     - Definitions have been added to select the bootloader backdoor pin and active
       level if enabled.
     - Definitions have been added to access the page and debug lock bits. The debug
       lock bit can be used to prevent someone from reading back a programmed
       firmware through JTAG if the firmware binary image has to be confidential,
       which should be combined with a disabled bootloader backdoor.
     - The application entry point is now tied to the beginning of the .text section
       instead of to the beginning of the flash. This allows projects using custom
       linker scripts to place the application entry point anywhere in the flash,
       which can be useful e.g. for on-the-air firmware update.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    CC2538: Add hardware flow control (RTS/CTS) support on UART1.
    cc2538: uart: Make it possible to use several UARTs simultaneously
    
    This avoids the limitation of having a single UART available at runtime, without
    duplicating code.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    Change uart_set_baudrate() to a do-while statement.
    Fix rounding error in baudrate calculation.
    cc2538: Support any UART baudrate.
    CC2538: add support for UART baudrate 9600, 38400 and 57600
    Make the CC2538 UART driver more configurable
    
    * We can now very easily switch between UART0 and UART1 through a define
    * We can also configure the UART RX and TX port/pin through defines
    CC2538 Documentation typo and grammar fixes
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    cc2538: uart: Make it possible to use several UARTs simultaneously
    
    This avoids the limitation of having a single UART available at runtime, without
    duplicating code.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    cc2538: Move SoC data to a dedicated section to save space
    
    Some SoC data requires huge alignments. E.g., the µDMA channel control table has
    to be 1024-byte aligned. This table was simply aligned to 1024 bytes in the C
    code, which had the following consequences, wasting a lot of RAM:
     - As this table could be placed anywhere in .bss, there could be an alignment
       gap of up to 1023 bytes between the preceding data and this table.
     - The size of this table was also aligned to 1024 bytes, regardless of
       UDMA_CONF_MAX_CHANNEL, making this configuration option supposed to save RAM
       just useless.
     - .bss was also aligned to at least 1024 bytes, creating a huge alignment gap
       between .data and .bss.
    
    Instead of relying on the compiler to force this alignment, and on the linker to
    automatically place data, this change places carefully such SoC data in RAM
    using the linker script. A dedicated section is created to place such SoC data
    requiring huge alignments, and it is put at the beginning of the SRAM in order
    to ensure a maximal alignment without any gap. In this way, the alignment of
    .bss also remains normal, and the size of this table is not constrained by its
    alignment, but only by its contents (i.e. by UDMA_CONF_MAX_CHANNEL).
    
    In the case of the µDMA channel control table, the data is still zeroed by
    udma_init() (instead of also being zeroed as part of .bss).
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    cc2538: sys_ctrl: Make it possible to use the 32-kHz crystal
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    corrected code style error
    fixed error in saving status
    fixed bug that made radio die after error when not using default channel and/or not using a RDC protocol
    Improve the CC2538 extended RF API implementation
    
    * Decouple 64-bit address from LINKADDR_SIZE
    * get and set object from/to the start/end of the src/dest buffer
    * We expect size == 8 (rather than size < 8) for both get_ and set_object. Error otherwise
    * The RF no longer sets parameters by itself. We let the platform do this, using the extended API.
    Don't hardcode min and max TX power values
    cc2538: uart: Make it possible to use several UARTs simultaneously
    
    This avoids the limitation of having a single UART available at runtime, without
    duplicating code.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    Implement extended RF API for the CC2538
    Added stub for extended radio API for cc2538
    Changed the name of the rimeaddr module to linkaddr
    Moved the rimeaddr.[ch] code from the core/net/rime module to the core/net module, as it is used not only by rime code
    Added a function for setting promiscous mode on the CC2538 RF core
    Added a way to obtain the RSSI from the CC2538 RF core
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Confine CC2538 WDT on/off conf inside the driver
    
    Instead of requiring all calls to `watchdog_start` to be
    wrapped inside `#if WATCHDOG_CONF_ENABLE` guards, we control
    things from within the WDT driver itself.
    
    This commit also includes some minor documentation and
    indentation cleanups
    CC2538: Add WATCHDOG_CONF_ENABLE to optionally disable the watchdog timer.
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    cc2531: Added a new USB demo project (CDC-ACM)
    
    See Pull Request #18
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    cc2538: Add driver for the rom utility function library
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Improve wording, fix warnigs in the SSI/SPI docs
    Fix doxygen warning in the CC2538 SPI driver
    [CC2538-SPI] Implement SPI_FLUSH, spi mode, !CS
    
    Because the CC2538 has a multi-byte SPI RX FIFO, flushing the buffer
    requires more than just a single read. This adds a loop that empties the
    entire RX buffer on a FLUSH().
    
    Different SPI chips needs different SPI settings. This commit adds a
    function that allows chip drivers to configure the SPI peripheral before
    using it.
    
    The frame pin the driver was using as a chip select does not work as
    most devices expect it to. It toggles after every byte, and most chips
    interpret that as end of message. To make drivers more reliable, each
    chip driver should setup a GPIO and assert it as needed.
    cc2538: Clean up port and pin definitions
    
    Homogenize port and pin definitions naming:
     - PERIPHERAL_FUNCTION_PORT for the port ID,
     - PERIPHERAL_FUNCTION_PIN for the pin ID,
     - PERIPHERAL_FUNCTION_PORT_BASE for the port base,
     - PERIPHERAL_FUNCTION_PIN_MASK for the pin mask.
    
    Define only PERIPHERAL_FUNCTION_PORT and PERIPHERAL_FUNCTION_PIN in board.h, and
    deduce PERIPHERAL_FUNCTION_PORT_BASE and PERIPHERAL_FUNCTION_PIN_MASK in the
    driver from the former definitions.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: spi: Add enable and disable functions
    
    This makes it possible to reduce the power consumption when the SPI is unused.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: spi: Add format configuration options
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: spi: Include spi-arch.h before dev/spi.h
    
    spi-arch.h configures dev/spi.h, so it must be #included first. Luckily, this
    mistake did not have any consequence here, but fix it in order to avoid possible
    future issues.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: spi: Do not call SPI_WAITFOREORx() at end of init
    
    If the SSI has never been used and spi_init() is called, then the SSI receive
    FIFO is empty and remains so, so calling SPI_WAITFOREORx() at the end of
    spi_init() waits endlessly for SSI_SR.RNE to be set. Hence, this call must be
    removed in order to avoid a deadlock.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    Added SPI driver for CC2538
    
    This uses the core/dev/spi.h header and implements the spi_init()
    function and the various macros for SPI operation. ssi.h contains all of
    the register locations and information.
    
    This implementation is not very versatile, mostly because I don't how to
    make it flexible in the contiki system. It supports pin muxing for the
    four spi pins, but other than that picks sensible defaults.
    
    The SPI macros (like SPI_READ()) are defined in
    cpu/cc2538/spi-arch.h. In order to use the SPI driver, add the following
    includes to your project:
    
        #include "spi-arch.h
        #include "dev/spi.h"
    Improve wording
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    cc2538: Add adc driver and example
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: sys_ctrl: Make it possible to use the 32-kHz crystal
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    cc2538: Add adc driver and example
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    cc2538: Add adc driver and example
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: Add header file for flash CCA page and use it
    
    Create a dedicated header file with all the definitions for the flash lock bit
    page and customer configuration area. This avoids duplicating those definitions
    in the startup-gcc.c files of all CC2538-based platforms, and this also allows
    to easily manipulate the CCA from outside startup-gcc.c (e.g. for on-the-air
    firmware update).
    
    The definitions are now complete contrary to what was in startup-gcc.c:
     - Definitions have been added to select the bootloader backdoor pin and active
       level if enabled.
     - Definitions have been added to access the page and debug lock bits. The debug
       lock bit can be used to prevent someone from reading back a programmed
       firmware through JTAG if the firmware binary image has to be confidential,
       which should be combined with a disabled bootloader backdoor.
     - The application entry point is now tied to the beginning of the .text section
       instead of to the beginning of the flash. This allows projects using custom
       linker scripts to place the application entry point anywhere in the flash,
       which can be useful e.g. for on-the-air firmware update.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Clarify GPIO read and write macros
    cc2538: gpio: Add macros to use GPIO power-up interrupts
    
    The GPIO power-up interrupts have to be configured and enabled in order to be
    able to wake-up the SoC from PM1+ upon a signal edge occurring on a GPIO input
    pin.
    
    This set of macros allows to:
     - configure the signal edge triggering a power-up interrupt,
     - enable and disable a power-up interrupt,
     - clear a power-up interrupt flag.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: gpio: Add pin read / write and interrupt clear macros
    
    Introduce new useful GPIO macros to:
     - read the levels of some port pins,
     - write the levels of some port pins (pass bit-field value to be set),
     - clear the interrupt flags for some port pins.
    
    These macros are cleaner and less error prone than raw register access code
    copied all over the place.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    cc2538: gpio: Fix usage of parameters in macros
    
    The parameters in the GPIO macros were used without being parenthesized. This
    could generate wrong values for register assignments in the case of expressions
    passed as arguments to these macros.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    Added SPI driver for CC2538
    
    This uses the core/dev/spi.h header and implements the spi_init()
    function and the various macros for SPI operation. ssi.h contains all of
    the register locations and information.
    
    This implementation is not very versatile, mostly because I don't how to
    make it flexible in the contiki system. It supports pin muxing for the
    four spi pins, but other than that picks sensible defaults.
    
    The SPI macros (like SPI_READ()) are defined in
    cpu/cc2538/spi-arch.h. In order to use the SPI driver, add the following
    includes to your project:
    
        #include "spi-arch.h
        #include "dev/spi.h"
    Updates CC2538 GPIO
    
    1. Fixes two of the comments to GPIO macros. They were copied but not
    updated.
    2. Adds SET and CLR macros for controlling GPIO pins.
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Fix doxygen warning in the CC2538 uDMA driver's header
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Improve wording
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Moved the cc2520 driver into its own dev/cc2520 module
    Fixed some configuration problems and support for AUTOACK
    Initial WiSMote port based on code from Arago Systems.
    Moved the cc2520 driver into its own dev/cc2520 module
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Fixed some configuration problems and support for AUTOACK
    Initial WiSMote port based on code from Arago Systems.
    Added stub for extended radio API for CC2520
    Moved the cc2520 driver into its own dev/cc2520 module
    Removed old unused timetable code
    Autoenable RX after TX + removed exception check
    Fixed some configuration problems and support for AUTOACK
    Removed obsolete CRC checksum handling and debug leds
    Initial WiSMote port based on code from Arago Systems.
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    added delays in CC2420 to avoid risk of configuring before CC2420 is powered on
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    fixed for compilation with IAR compiler
    Several compiler warning fixes:
    
         * msp430: fix "implicit declaration of function" warnings in clock.c, by including watchdog.h;
         * sky: fix a couple pointer target signedness warnings;
         * core: fix several signed/unsigned comparison warnings;
         * framer-802154: "const static" -> "static const" to fix compiler warnings;
         * core: comment or remove unused variables and function definitions.
    
    Signed-off-by: Lionel Debroux <lionel_debroux@yahoo.fr>
    Signed-off-by: Mariano Alvira <mar@devl.org>
    Call upper layers even if packet reception failed - this allows the RDC layer to shut off the radio even if a malformed packet was received.
    Re-added timestamp support for outbound packets that was removed when switching to the new radio API
    Bugfix: if the cc2420_cca() function wasn't able to turn on the radio properly, it should turn it off again if it was off before.
    Reverted radio API change in CC2420 (not yet fully integrated with Contiki core)
    Rewrote all busy waits with a new macro, which has a built-in timeout to ensure that busy waits won't hang the CPU
    removed debug output
    Fixed naming of CC2420 macros
    split SPI code into generic and CC2420-related and renamed constants in CC2420
    removed platform dependent loop-count from cc2420 - moved to platform config instead
    added support for the Z1 platform and its 8Mhz
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Fixed to only use leds when DEBUG is set
    Bugfix: timing fixed
    After a lot of tweaking and twiddling with the timing of the ContikiMAC code and the mechanisms in the CC2420 driver, things seem to work somewhat stable now - knock on wood!
    Flush the rxfifo when turning off the radio instead of when turning it on. This seems to fix a bug that was seen in mspsim and seemed to appear on real hardware too.
    Rewrote the pending_packet() function to check the FIFOP pin instead of the 'pending' variable - works must better on real hardware and is now supported by the latest mspsim
    Reverted the removal of the code that checked the FIFOP pin before reading a packet - checking FIFOP is the correct way to do it. Also added TXONCCA for now, including new radio.h return values to indicate a link-layer collision.
    Safety check: only try to read a packet if it was preceeded by an interrupt (which sets the pending flag)
    Bugfix: don't care about FIFOP when reading a packet; if the radio rx had been turned off before a packet was read, FIFOP would be zero and the packet would be trashed
    Reworked the locking code, which seems to fix a few bugs caused by the interaction with contikimac. Contikimac performs a CCA check in a preempting rtimer, which requires underlying code to properly call the GET_LOCK() macro. This fix seems to solve most problems, but there may be others left.
    made cc2420 panid and short address not dependent on endianness
    Reset CCA mode to default. Make sure that the radio gto switched on when reading RSSI; otherwise node will reboot because of watchdog
    Bugfix: didn't correctly reset the pending flag when a packet was read from the radio
    Removed non-functional time synchronization code; added some experimental code for CCA checks (enabled CCA mode 1, a temporary development function for setting the CCA threshold); enable the possibility to switch off radio even if a packet is currently arriving
    Removed inadvertedly left-over include file
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Reverted the FIFOP->FIFO change; it didn't work :(
    Bug fix for mysterious packet loss : check FIFO pin instead of FIFOP pin for any unread RX FIFO data;
    Added protection of packet timestamp across interrupts. Note that race condition can still occur as interrupts and self-scheduled reads of the RX FIFO interleave in certain unusual patterns. More investigation is needed.
    generic radio return values
    + minor bug fix: SFD may go high without transmission starting (very seldom)
    Minor codestyle fix
    Fixed problem with the radio driver changing transmission power to max when not specified at transmission. Also fixed bug where the lock was released when setting the transmission power.
    
    Thanks to Djamel Djenouri and Marcus Lundn for identifying the problem.
    bug fix: we need to explicitly turn off the cc2420 listen mode after a packet transmission
    added autoack configuration for CC2420 and reversed long ieee address for address recognition
    Increased the number of iterations for ugly-hack-loop that checks if a transmission has started, to accommodate a faster CPU speed on the MSP430
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Set transmission power based on packet attribute
    Set RSSI, correlation, and timestamp as packet attributes for incoming packets
    added configuration of checksum and timesynch
    There is problem with the CC2420 driver: under high traffic load the packets often get mangled in the receive FIFO. Not sure why this happens or how to best prevent it. As a temporary workaround, I've added an additional CRC16 check to the incoming packets. This eats two bytes from each packet, but at least protects against the erroneous packets we've seen quite a few of lately. The reception code was also cleaned up, which resulted in a smaller code size.
    Changed name of the simple-cc2420 module to cc2420: changed all function names and variable names from simple_cc2420_* to cc2420_*.
    Changed filename of the CC2420 driver from simple-cc2420 to cc2420.
    Bugfix: energy estimation was not correct if a packet was sent when the radio was not in listen mode
    Added calibration to channel switch if currently in receive mode. Added explicit checks for transmission activity before channel switch
    Changed default transmission behaviour to be to send without checking for channel activity first (in anticipation of radio API change that adds a CCA function to the radio API). General code cleanup. Added optional timetable profiling. Added simple_cc2420_get_channel() function, changed simple_cc2420_set_chan_pan to simple_cc2420_set_pan since we now have a dedicated simple_cc2420_set_channel
    bugfix: wait while *either* transmitting or unvalid rssi
    added declaration for simple_cc2420_get_txpower.
    no ENERGEST_ON_* macro needed for levels.
    check if ENERGEST_CONF_LEVELDEVICE_LEVELS is set.
    call ENERGEST_ON_LEVEL.
    energy measurement support for TX power levels
    Moving timesynch.[ch] from sys/ to core/net/rime as they have more to do with Rime than with the kernel
    Made estimation of departure time better by locally measuring the average time per byte and adding this to the incoming timestamp.
    Fixed timestamping to support the simple implicit network time synchronization mechanism
    Added API for setting 802.15.4 channel and for measuring RSSI
    Fixed compiler warnings
    Added contentiondrop rimestats when a packet couldn't be sent because of failing CCA check
    waiting for valid RSSI bugfix, minor cleanup
    Turn off listen energy accounting when transmitting
    Changed the energy estimation type ENERGEST_TYPE_RECEIVE to ENERGEST_TYPE_LISTEN to highlight that energy is spent on idle listening, not just the actual reception of packets
    moved ENERGEST_ON to actual transmission
    Turn off ENERGEST_TYPE_TRANSMIT if send error
    Removed __ prefixes on symbols, which are reserved for C implementation; updated to new radio.h types
    Enabled dropping of packets with bad CRC. Added statistics gathering. Bugfix when packets where shorter than 2 bytes
    Moved a much code as possible away from interrupt handler; main thread code now do not need to disable interrupts. Added energy estimation code. Added radio driver structure.
    Added radio_on() and radio_off() functions
    Should subtract two bytes from the length to account for the two-bytes footer
    Removed blinking LEDs
    Corrected sending of two bytes footer
    A very simple CC2420 driver that can only send and receive raw packets. No extra CC2420 functionality is enabled or used.
    Moved the ds2411 driver into a dev/ds2411 module
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved the ds2411 driver into a dev/ds2411 module
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed Sky platform for IAR compiler
    removed unnecessary include
    corrected include path
    Code style fix
    quick fix for driver to work with 4MHz
    replaced the TMOTE_SKY macros with CONTIKI_TARGET_SKY, in conformance to the latest target hint rules
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved the cc2420 driver into a separate dev/cc2420 module
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    removed obsolete definitions
    Added AES cipher constants
    * Comment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    CC2420: Turned SPI macros to functions and removed redundant AES API
    CC2420: Hardware-accelerated aes_128_driver
    CC2420: CC2420_WRITE_RAM with parameterizable ordering + resulting
    simplifications
    CC2420: Macros as functions for saving program memory
    Moved the cc2420 driver into a separate dev/cc2420 module
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added parenthesis around addresses to allow expressions as arguments
    Reverted radio API change in CC2420 (not yet fully integrated with Contiki core)
    Added macro to read from CC2420 RAM
    Fixed naming of CC2420 macros
    split SPI code into generic and CC2420-related and renamed constants in CC2420
    Removed non-functional time synchronization code; added some experimental code for CCA checks (enabled CCA mode 1, a temporary development function for setting the CCA threshold); enable the possibility to switch off radio even if a packet is currently arriving
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Changed name of the simple-cc2420 module to cc2420: changed all function names and variable names from simple_cc2420_* to cc2420_*.
    Changed filename of the CC2420 driver from simple-cc2420 to cc2420.
    * Need to track if this was the incoming interface.
    * Literal constants.
    Move misc. routines to new file.
    Slightly outdated versions were imported to sf.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Make it possible to set and get the CC2420's CCA threshold through the extended radio API.
    CC2420: Added RSSI_OFFSET as described in the manual
    CC2420: Added GET_LOCK/RELEASE_LOCK to set_key & encrypt
    CC2420: Turned SPI macros to functions and removed redundant AES API
    CC2420: Hardware-accelerated aes_128_driver
    CC2420: Reusing getrxdata instead of getrxbyte.
    CC2420: Eliminated duplicated code in cc2420_read
    CC2420: Removed unused variables
    CC2420: Removed commented code
    CC2420: The crystal oscillator only needs to stabilize at startup
    CC2420: CC2420_WRITE_RAM with parameterizable ordering + resulting
    simplifications
    CC2420: Macros as functions for saving program memory
    CC2420: Doing CRC in hardware all the time
    Fixed CC2420 to return RADIO_RESULT_INVALID_VALUE if trying to set a
    transmission power outside the valid range instead of using closest
    valid value.
    Removed the unused function cc2420_cca_valid and replaced some macros
    with functions in CC2420. This reduces the code size with over 400 bytes.
    Added radio parameters RADIO_PARAM_RSSI and RADIO_PARAM_TXPOWER for cc2420
    Added stub for extended radio API for CC2420
    Moved the cc2420 driver into a separate dev/cc2420 module
    Removed old unused timetable code
    Clean up setting channel and CCA-threshold for CC2420 based motes.
    The CCA-threshold now defaults to -46 which give better simulation
    results and typically also better experimental results.
    This adjustment is also needed due to commit 0a13f99 in mspsim. As
    promised in https://github.com/mspsim/mspsim/pull/18 it broke the
    regression tests.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    added delays in CC2420 to avoid risk of configuring before CC2420 is powered on
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    fixed for compilation with IAR compiler
    Several compiler warning fixes:
    
         * msp430: fix "implicit declaration of function" warnings in clock.c, by including watchdog.h;
         * sky: fix a couple pointer target signedness warnings;
         * core: fix several signed/unsigned comparison warnings;
         * framer-802154: "const static" -> "static const" to fix compiler warnings;
         * core: comment or remove unused variables and function definitions.
    
    Signed-off-by: Lionel Debroux <lionel_debroux@yahoo.fr>
    Signed-off-by: Mariano Alvira <mar@devl.org>
    Call upper layers even if packet reception failed - this allows the RDC layer to shut off the radio even if a malformed packet was received.
    Re-added timestamp support for outbound packets that was removed when switching to the new radio API
    Bugfix: if the cc2420_cca() function wasn't able to turn on the radio properly, it should turn it off again if it was off before.
    Reverted radio API change in CC2420 (not yet fully integrated with Contiki core)
    Rewrote all busy waits with a new macro, which has a built-in timeout to ensure that busy waits won't hang the CPU
    removed debug output
    Fixed naming of CC2420 macros
    split SPI code into generic and CC2420-related and renamed constants in CC2420
    removed platform dependent loop-count from cc2420 - moved to platform config instead
    added support for the Z1 platform and its 8Mhz
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Fixed to only use leds when DEBUG is set
    Bugfix: timing fixed
    After a lot of tweaking and twiddling with the timing of the ContikiMAC code and the mechanisms in the CC2420 driver, things seem to work somewhat stable now - knock on wood!
    Flush the rxfifo when turning off the radio instead of when turning it on. This seems to fix a bug that was seen in mspsim and seemed to appear on real hardware too.
    Rewrote the pending_packet() function to check the FIFOP pin instead of the 'pending' variable - works must better on real hardware and is now supported by the latest mspsim
    Reverted the removal of the code that checked the FIFOP pin before reading a packet - checking FIFOP is the correct way to do it. Also added TXONCCA for now, including new radio.h return values to indicate a link-layer collision.
    Safety check: only try to read a packet if it was preceeded by an interrupt (which sets the pending flag)
    Bugfix: don't care about FIFOP when reading a packet; if the radio rx had been turned off before a packet was read, FIFOP would be zero and the packet would be trashed
    Reworked the locking code, which seems to fix a few bugs caused by the interaction with contikimac. Contikimac performs a CCA check in a preempting rtimer, which requires underlying code to properly call the GET_LOCK() macro. This fix seems to solve most problems, but there may be others left.
    made cc2420 panid and short address not dependent on endianness
    Reset CCA mode to default. Make sure that the radio gto switched on when reading RSSI; otherwise node will reboot because of watchdog
    Bugfix: didn't correctly reset the pending flag when a packet was read from the radio
    Removed non-functional time synchronization code; added some experimental code for CCA checks (enabled CCA mode 1, a temporary development function for setting the CCA threshold); enable the possibility to switch off radio even if a packet is currently arriving
    Removed inadvertedly left-over include file
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Reverted the FIFOP->FIFO change; it didn't work :(
    Bug fix for mysterious packet loss : check FIFO pin instead of FIFOP pin for any unread RX FIFO data;
    Added protection of packet timestamp across interrupts. Note that race condition can still occur as interrupts and self-scheduled reads of the RX FIFO interleave in certain unusual patterns. More investigation is needed.
    generic radio return values
    + minor bug fix: SFD may go high without transmission starting (very seldom)
    Minor codestyle fix
    Fixed problem with the radio driver changing transmission power to max when not specified at transmission. Also fixed bug where the lock was released when setting the transmission power.
    
    Thanks to Djamel Djenouri and Marcus Lundn for identifying the problem.
    bug fix: we need to explicitly turn off the cc2420 listen mode after a packet transmission
    added autoack configuration for CC2420 and reversed long ieee address for address recognition
    Increased the number of iterations for ugly-hack-loop that checks if a transmission has started, to accommodate a faster CPU speed on the MSP430
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Set transmission power based on packet attribute
    Set RSSI, correlation, and timestamp as packet attributes for incoming packets
    added configuration of checksum and timesynch
    There is problem with the CC2420 driver: under high traffic load the packets often get mangled in the receive FIFO. Not sure why this happens or how to best prevent it. As a temporary workaround, I've added an additional CRC16 check to the incoming packets. This eats two bytes from each packet, but at least protects against the erroneous packets we've seen quite a few of lately. The reception code was also cleaned up, which resulted in a smaller code size.
    Changed name of the simple-cc2420 module to cc2420: changed all function names and variable names from simple_cc2420_* to cc2420_*.
    Changed filename of the CC2420 driver from simple-cc2420 to cc2420.
    Bugfix: energy estimation was not correct if a packet was sent when the radio was not in listen mode
    Added calibration to channel switch if currently in receive mode. Added explicit checks for transmission activity before channel switch
    Changed default transmission behaviour to be to send without checking for channel activity first (in anticipation of radio API change that adds a CCA function to the radio API). General code cleanup. Added optional timetable profiling. Added simple_cc2420_get_channel() function, changed simple_cc2420_set_chan_pan to simple_cc2420_set_pan since we now have a dedicated simple_cc2420_set_channel
    bugfix: wait while *either* transmitting or unvalid rssi
    added declaration for simple_cc2420_get_txpower.
    no ENERGEST_ON_* macro needed for levels.
    check if ENERGEST_CONF_LEVELDEVICE_LEVELS is set.
    call ENERGEST_ON_LEVEL.
    energy measurement support for TX power levels
    Moving timesynch.[ch] from sys/ to core/net/rime as they have more to do with Rime than with the kernel
    Made estimation of departure time better by locally measuring the average time per byte and adding this to the incoming timestamp.
    Fixed timestamping to support the simple implicit network time synchronization mechanism
    Added API for setting 802.15.4 channel and for measuring RSSI
    Fixed compiler warnings
    Added contentiondrop rimestats when a packet couldn't be sent because of failing CCA check
    waiting for valid RSSI bugfix, minor cleanup
    Turn off listen energy accounting when transmitting
    Changed the energy estimation type ENERGEST_TYPE_RECEIVE to ENERGEST_TYPE_LISTEN to highlight that energy is spent on idle listening, not just the actual reception of packets
    moved ENERGEST_ON to actual transmission
    Turn off ENERGEST_TYPE_TRANSMIT if send error
    Removed __ prefixes on symbols, which are reserved for C implementation; updated to new radio.h types
    Enabled dropping of packets with bad CRC. Added statistics gathering. Bugfix when packets where shorter than 2 bytes
    Moved a much code as possible away from interrupt handler; main thread code now do not need to disable interrupts. Added energy estimation code. Added radio driver structure.
    Added radio_on() and radio_off() functions
    Should subtract two bytes from the length to account for the two-bytes footer
    Removed blinking LEDs
    Corrected sending of two bytes footer
    A very simple CC2420 driver that can only send and receive raw packets. No extra CC2420 functionality is enabled or used.
    Moved the sht11 driver to its own module
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    fixed read loop to be slightly less CPU speed dependent
    Fixed sht11 driver, now ensures the i2c bus is disabled when initializing
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    Removed redundant tokens at the end of preprocessor conditions
    added debug to sht11 driver and made it more configurable
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    Enabled the SHT11 register readout to allow reading the low-voltage indicator bit
    Code style fixes
    Made driver less platform-dependent and added support for msb-430.
    Moved the sht11 driver to its own module
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    Added the battery indicator to the sensors API
    Added sensor API for the SHT11 driver
    Updated to match the new sensors API
    return the last decoded value instead of the last value read during an interrupt
    Two types of radio sensor data
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved the sht11 driver to its own module
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added the battery indicator to the sensors API
    Added sensor API for the SHT11 driver
    changed sky sensors to new api
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved the sht11 driver to its own module
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Code style fixes
    Made driver less platform-dependent and added support for msb-430.
    Rename cc2420_uart0.c to cc2420_spi.c
    * First port of CC2420 driver to the AVR.
    Use LPM4_EXIT to return from sleep on msp430.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add template for AUTOSTART_PROCESS
    Lots of changes / commits! This allows ravenusbstick example to build at least.
    examples for uIPv6
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    llsec: Added a layer in between NETSTACK_MAC and NETSTACK_NETWORK for implementing link layer security
    Need to explicitly include the sicslowmac module and the fakeuip.c file.
    avr-ravenusb/cdc_task: Fix compile issues.
    
    A lot more changes are in the pipeline, but compiling is a good start.
    Move fakeuip.c to examples directory for proper selection when CONTIKI_NO_NET=1
    replaced DEFAULT_TARGET with Makefile.target for specifying default target
    -Change needed for ravenusb to build
    -Reverts Makefile.include back to 1.57, then apply the needed change
    examples for uIPv6
    replaced DEFAULT_TARGET with Makefile.target for specifying default target
    avr-ravenusb/cdc_task: Fix compile issues.
    
    A lot more changes are in the pipeline, but compiling is a good start.
    Show avr-size once and only once regradless of whether recompilation is needed.
    Use proper recursive make invokation
    *** empty log message ***
    Remove fuses from .hex, Pass MCU name to avr-size
    Lots of changes / commits! This allows ravenusbstick example to build at least.
    examples for uIPv6
    Added the const keyword to IP address arguments that are not (and should not be) changed by the callee
    Port apps, examples, platforms and tools so they use the new neighbor and route API.
    Converted u8_t to uint8_t and u16_t to uint16_t in the examples directory.
    Minor format and comment changes
    Add status page link, show correct rssi, fix indexing off array in  ipv4 builds
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Move fakeuip.c to examples directory for proper selection when CONTIKI_NO_NET=1
    Make fake routines conditional on CONTIKI_NO_NET
    replaced uip_buf with the new uip_aligned_buf
    update to uip-ds6.c
    Bugfix: output function was not called with latest version of tcpip. Identified by Pierre de Vos.
    fix compiling ravenusb platform
    -Change needed for ravenusb to build
    -Reverts Makefile.include back to 1.57, then apply the needed change
    Configure maximum number of Apple2 web server connections indirectly via maximum number of TCP connections.
    The Contiki 2.x build system allows to define arbitrary macros for the C compiler preprocessor (in other word add -d<macro[=value]>'s to the C compiler command line) directly from the gnumake command line by setting the gnumake variable DEFINES to a comma-seperated list of macros (and optionally values) like this:
    
    make TARGET=mytarget DEFINES=MYLOG, MYSIZE=100, MYTRACE
    
    The build system does however _NOT_ take care to rebuild things if the DEFINES change so most likely a 'make clean' is advisable. To ease usage the DEFINES may be saved individually per target with the goal 'savedefines' similiar to savinf the target.
    
    The 6502-based target leverage the DEFINES mechanism by introducing so-called 'high level config macros' which allow to configure Contiki per target AND per project.
    
    Most of the time there's exactly one reasonable set of high level config macros for every combination of target and project. Therefore it makes sense to place them into CVS.
    Configure maximum number of C128 web server connections indirectly via maximum number of TCP connections.
    Activated Platform-specific File System (PFS) for the C128 by default for all programs with R/O CFS access.
    The Contiki 2.x build system allows to define arbitrary macros for the C compiler preprocessor (in other word add -d<macro[=value]>'s to the C compiler command line) directly from the gnumake command line by setting the gnumake variable DEFINES to a comma-seperated list of macros (and optionally values) like this:
    
    make TARGET=mytarget DEFINES=MYLOG, MYSIZE=100, MYTRACE
    
    The build system does however _NOT_ take care to rebuild things if the DEFINES change so most likely a 'make clean' is advisable. To ease usage the DEFINES may be saved individually per target with the goal 'savedefines' similiar to savinf the target.
    
    The 6502-based target leverage the DEFINES mechanism by introducing so-called 'high level config macros' which allow to configure Contiki per target AND per project.
    
    Most of the time there's exactly one reasonable set of high level config macros for every combination of target and project. Therefore it makes sense to place them into CVS.
    Demonstrate usage of 'wwwroot.cfg' by allowing access to the example files from the build directory.
    Now that we started adding files to the CVS which are normally generated with a 'save...' make goal we can remove the DEFAULT_TARGET mechanism altogether and just add Makefile.target files.
    Added missing 'atarixl' Makefile defines.
    Activated Platform-specific File System (PFS) for the C64 by default for all programs with R/O CFS access.
    The Contiki 2.x build system allows to define arbitrary macros for the C compiler preprocessor (in other word add -d<macro[=value]>'s to the C compiler command line) directly from the gnumake command line by setting the gnumake variable DEFINES to a comma-seperated list of macros (and optionally values) like this:
    
    make TARGET=mytarget DEFINES=MYLOG, MYSIZE=100, MYTRACE
    
    The build system does however _NOT_ take care to rebuild things if the DEFINES change so most likely a 'make clean' is advisable. To ease usage the DEFINES may be saved individually per target with the goal 'savedefines' similiar to savinf the target.
    
    The 6502-based target leverage the DEFINES mechanism by introducing so-called 'high level config macros' which allow to configure Contiki per target AND per project.
    
    Most of the time there's exactly one reasonable set of high level config macros for every combination of target and project. Therefore it makes sense to place them into CVS.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Added optional URL filtering code to the CFS web server contributed by Kajtar Zsolt (and activated it by default).
    Reverted last change.
    Use a simpler project name as it now ends up as program file name.
    Minor formatting change.
    Now that we started adding files to the CVS which are normally generated with a 'save...' make goal we can remove the DEFAULT_TARGET mechanism altogether and just add Makefile.target files.
    Many project Makefiles build just one Contiki binary. Up to now the name of this binary was only available to the 'all' goal as prerequisite. So it was possible to create a non-project-specific rule to i.e. load that binary into the target device.
    
    Therefore I introduced the make variable CONTIKI_PROJECT. Now a typical project Makefile starts with:
    
    CONTIKI_PROJECT = hello-world
    all: $(CONTIKI_PROJECT)
    Set default target to minimal-net.
    Allow to easily build the webserver example with cfs support by running make with the parameter HTTPD-CFS=1.
    Removed unneeded target
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated Contiki URL in sample web page.
    Made cfs-based webserver example compatible with 8.3 file systems.
    Made cfs-based webserver example compatible with 8.3 file systems.
    Added some sample content for the webserver example using CFS.
    Made cfs-based webserver example compatible with 8.3 file systems.
    Added some sample content for the webserver example using CFS.
    Added some sample content for the webserver example using CFS.
    Made cfs-based webserver example compatible with 8.3 file systems.
    Added some sample content for the webserver example using CFS.
    Added the Telnet server to the examples supported by cc65.
    Activated Platform-specific File System (PFS) for the C64/C128 by default for all programs with R/W CFS access.
    After a CTK wget and a shell wget finally a plain vanilla CLI wget.
    Added the Telnet server to the examples supported by cc65.
    Removed 6502-specific files as this example doesn't build on any platform cleanly anyway.
    The Contiki 2.x build system allows to define arbitrary macros for the C compiler preprocessor (in other word add -d<macro[=value]>'s to the C compiler command line) directly from the gnumake command line by setting the gnumake variable DEFINES to a comma-seperated list of macros (and optionally values) like this:
    
    make TARGET=mytarget DEFINES=MYLOG, MYSIZE=100, MYTRACE
    
    The build system does however _NOT_ take care to rebuild things if the DEFINES change so most likely a 'make clean' is advisable. To ease usage the DEFINES may be saved individually per target with the goal 'savedefines' similiar to savinf the target.
    
    The 6502-based target leverage the DEFINES mechanism by introducing so-called 'high level config macros' which allow to configure Contiki per target AND per project.
    
    Most of the time there's exactly one reasonable set of high level config macros for every combination of target and project. Therefore it makes sense to place them into CVS.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added the Telnet server to the examples supported by cc65.
    Added webserver and irc.
    Include wget shell command in "standard" shell environments.
    As adding some commands to the telnet server shell doesn't seem to be desirable in the application it's now done in the example.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Now that we started adding files to the CVS which are normally generated with a 'save...' make goal we can remove the DEFAULT_TARGET mechanism altogether and just add Makefile.target files.
    Added missing 'atarixl' Makefile defines.
    After a CTK wget and a shell wget finally a plain vanilla CLI wget.
    Added the Telnet server to the examples supported by cc65.
    Activated Platform-specific File System (PFS) for the C64/C128 by default for all programs with R/W CFS access.
    After a CTK wget and a shell wget finally a plain vanilla CLI wget.
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    WITH_UIP in Makefile
    Now that we started adding files to the CVS which are normally generated with a 'save...' make goal we can remove the DEFAULT_TARGET mechanism altogether and just add Makefile.target files.
    Many project Makefiles build just one Contiki binary. Up to now the name of this binary was only available to the 'all' goal as prerequisite. So it was possible to create a non-project-specific rule to i.e. load that binary into the target device.
    
    Therefore I introduced the make variable CONTIKI_PROJECT. Now a typical project Makefile starts with:
    
    CONTIKI_PROJECT = hello-world
    all: $(CONTIKI_PROJECT)
    Set default target to minimal-net.
    Adding 'APPS+=program-handler' in apps/Makefile.telnetd might be considered more consistent but I opted for this more obvious approach. BTW yet another example that from my perspective simply can't have worked...
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fixed rssi scanner application and moved into single example
    Cleaned up rssi-scanner example directory
    Added ViewRSSI3D example.
    Fixed rssi scanner application and moved into single example
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Cleaned up some files, moved z1-websense example
    Cleaned up rssi-scanner example directory
    Modified contiki-conf.h and added sensys-scanner.
    Changed type from off_t (that potentially conflicts with existing types.h typedefs) to unsigned long
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fixed rssi scanner application and moved into single example
    Moved net/rime.h to net/rime/rime.h
    Moved the cc2420 driver into a separate dev/cc2420 module
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Removed obsolete mac pointer
    Cleaned up some files, moved z1-websense example
    Cleaned up rssi-scanner example directory
    Correceted cc2420 function calls+modified makefile
    Modified contiki-conf.h and added sensys-scanner.
    fixed compilation error
    minor bugfix - added process_pause
    added a hi-res RSSI scanner and viewer for sky/jcreate
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Changed the 'ibc' and 'uc' Rime modules into the more descriptive names 'broadcast' and 'unicast'
    Changed names of the Rime examples from test-* to example-* and added examples for ruc and uc
    Static should come first because it's a storage class.
    Added exithandlers so that the examples can be run as loadable (and unloadble) modules
    Message size should include ending zero byte
    Moved all Rime examples into examples/rime directory
    API change for Rime: *_setup() renamed to *_open()
    Simple Rime test code
    Renamed Rime output function
    A Rime driver for the simple-cc2420 driver
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fixed rssi scanner application and moved into single example
    Cleaned up some files, moved z1-websense example
    Cleaned up rssi-scanner example directory
    Modified contiki-conf.h and added sensys-scanner.
    Fixed rssi scanner application and moved into single example
    Code style fixes: cc2530dk examples
    The cc2530dk blink-hello example now makes sense for cc2531
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Initial commit of examples for the Sensinode/cc2430 platform.
    Code style fixes: cc2530dk examples
    Adjust cc2x3x ports to the new clock API
    Improved cc2x30 timer test examples
    
    * Adjusted the cc2530 timer-test example to reflect recent changes to clock_delay()
    * Sensinode now uses the newer timer-test example copied over from cc2530dk
    * Deleted the obsolete clock-test. timer-test is a superset
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Code style fixes: cc2530dk examples
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    cc2531: Added a new USB demo project (CDC-ACM)
    
    See Pull Request #18
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    cc2531: Added a new USB demo project (CDC-ACM)
    
    See Pull Request #18
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Change the way we switch between cc2530 models
    
    The switch is now performed through a configuration define,
    which has also been renamed to better match Contiki's naming
    conventions
    cc2531: Added a new USB demo project (CDC-ACM)
    
    See Pull Request #18
    Added examples for MB851 platform.
    Added a Contiki app basically combining apps/netconf and apps/dhcp. It's a 6502 specific app as it doesn't configure the running uIP instance but instead writes to the 'contiki.cfg' configuration file used by 6502 apps to configure uIP.
    Now that we started adding files to the CVS which are normally generated with a 'save...' make goal we can remove the DEFAULT_TARGET mechanism altogether and just add Makefile.target files.
    Many project Makefiles build just one Contiki binary. Up to now the name of this binary was only available to the 'all' goal as prerequisite. So it was possible to create a non-project-specific rule to i.e. load that binary into the target device.
    
    Therefore I introduced the make variable CONTIKI_PROJECT. Now a typical project Makefile starts with:
    
    CONTIKI_PROJECT = hello-world
    all: $(CONTIKI_PROJECT)
    replaced blink with blinker that uses more sensors
    ESB examples
    Added an example application to show the usage of the Contiki Multi-threading library.
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    Replace reads of rimestats with RIMESTATS_GET(x)
    cc2530 udp server example is no longer RPL root by default
    Code style fixes: cc2530dk examples
    cc2530dk and Sensinode example udp server code cleanup
    Offload some bytes off the cc2x3x stack for the sensinode & cc2530dk udp server example
    cc2530dk example comment fix
    Fixed mis-formatted printfs
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Updated include paths for the moved files under net/
    Code style fixes: cc2530dk examples
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    minor cleanup of example (changed to use uiplib to parse IPv6 address)
    Support fragmentation testing.
    Updated for new for new uIPv6 APIs. Also fixed compiler warning.
    updated for new uIPv6 APIs
    a little faster autoconfiguration
    changed address setup slightly.
    changed udp examples into a client and a server, added multi-hop routing,
    clarified the code.
    printing local ipv6 address at startup. addresses must match in order for the examples to work
    moved ipv6 udp example processes from apps/udp to inside examples/udp-receiver-ipv6 and examples/udp-sender-ipv6
    
    * transmitting human readable strings between the two processes
    * remote address configurable at compile time via DEFINES=...
    examples for uIPv6
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Replace reads of rimestats with RIMESTATS_GET(x)
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Broke out serial-shell from the shell app into its own app. Project can use the serial-shell to get a shell running over the serial line, just like a project can use the telnetd to get a shell running over Telnet/TCP/IP.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    Code style fixes: cc2530dk examples
    Changes to the ping part of the cc2530 and Sensinode udp-ipv6 examples
    
    - Remove obsolete variable declarations
    - prettier printf output
    - cc2530 example turns on printfs
    Some uN_t had crept back in cc2530dk and sensinode.
    
    Changed to uintN_t plus a bit of code formatting
    Changed some sensinode/cc2530 examples to use uip-debug.h instead of the old #define DEBUG N
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    Removed void * operations
    dos2unix conversion
    fixed for new uip6 APIs
    *** empty log message ***
    ping-ipv6 example compiles on native cygwin
    end of apps for uIPv6
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    cc2x3x RPL/non-RPL handling:
    
    - Relevant examples explicitly request it in their Makefile
    - Removed the definition of UIP_CONF_IPV6_RPL from
      contiki-conf.h. If needed, it's defined through a -D
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Code style fixes: cc2530dk examples
    Fixed the stub-rdc driver used by various cc2x30 examples
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Added a field to the struct mac interface:
    channel_check_interval(). This function returns the interval by which
    the duty cycling mechanism checks the radio channel for activity. It
    is used by higher layer mechanisms to determine suitable timeouts for
    retransmissions.
    Code style fix
    generic return values for sent packet
    added init function in MAC driver for easier configuration
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    added name to mac structure
    Added parameter to the mac off() method that specifies whether or not the radio should be turned off when the MAC layer is turned off
    Avoid usage of POSIX function names even for static functions as some indirectly included system header might declare them.
    Ensure that receiver_callback is set before calling it
    Made initialization function return a pointer to the MAC driver structure, to make initialization nicer
    Modified to use the new MAC layer API
    Avoid function pointer mismatch in set_receive_function().
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    Code style fixes: cc2530dk examples
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Common initialization code for the netstack
    Import of the contiki-2.x development code from the SICS internal CVS server
    Change the way we switch between cc2530 models
    
    The switch is now performed through a configuration define,
    which has also been renamed to better match Contiki's naming
    conventions
    cc2530dk: Sniffer example changes:
    
    - Building for the cc2531 USB dongle by default
    - We turn on USB-serial buffered mode
    
    Closes #21
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    added init function in MAC driver for easier configuration
    A quick, initial implementation of the LPP power-saving MAC protocol (Musaloiu-E et al, IPSN 2008)
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Updated include paths for the moved files under net/
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    removed refences to printf2log.h
    cooja hello world (+ include printf2log.h)
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Change the way we switch between cc2530 models
    
    The switch is now performed through a configuration define,
    which has also been renamed to better match Contiki's naming
    conventions
    cc2530dk: Sniffer example changes:
    
    - Building for the cc2531 USB dongle by default
    - We turn on USB-serial buffered mode
    
    Closes #21
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Updated include paths for the moved files under net/
    Code style fixes: cc2530dk examples
    cc2530dk: Border router example changes:
    
    - It now plays nicely with the cc2531 USB dongle
    - We build it for the dongle by default
    - Debugging with cc2530dk functions instead of printf
    - Using __nonbanked optimisations
    - During prefix requests, invert LED blinking to make things more visible
    - Removed leftover include
    - Code style fixes
    
    See Pull Request #21
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Turn off RDC before SLIP prefix interchange. Disable SIN/SUT prints, leave off-route prints.
    added response to Mac addr request and added addrs in printout
    added undef of putchar for platforms where it is a macro
    moved config file
    added missing include
    updated with support for getting prefix from tunslip6 and for setting RPL prefix
    added very basic rpl-border router example
    Made SLIP code coexist with ordinary serial code. If WITH_UIP=1, the SLIP code is used instead.
    Added energy estimation
    Removed clock_delay()
    Added clock_delay() between characters to avoid dropping them
    * General stuff for different baudrates:
    
        - ubr argument to slip_arch_int
    
        - macros for calculating ubr
    
        - argument -Bbaudrate to tools tunslip and scat
    * Bump speed over serial to 115200 (Tmote sky only).
    Use LPM4_EXIT to return from sleep on msp430.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Use the extended RF API for the cc2530 border router example
    Updated include paths for the moved files under net/
    Code style fixes: cc2530dk examples
    cc2530dk: Border router example changes:
    
    - It now plays nicely with the cc2531 USB dongle
    - We build it for the dongle by default
    - Debugging with cc2530dk functions instead of printf
    - Using __nonbanked optimisations
    - During prefix requests, invert LED blinking to make things more visible
    - Removed leftover include
    - Code style fixes
    
    See Pull Request #21
    Fixed typos and a stray printf. Adjusted comments
    Added channel_get() to the cc2x3x RF drivers
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    minor cleanup of example (changed to use uiplib to parse IPv6 address)
    Updated for new for new uIPv6 APIs. Also fixed compiler warning.
    updated for new uIPv6 APIs
    a little faster autoconfiguration
    fixed debug output to show the correct remote address
    changed udp examples into a client and a server, added multi-hop routing,
    clarified the code.
    printing local ipv6 address at startup. addresses must match in order for the examples to work
    moved ipv6 udp example processes from apps/udp to inside examples/udp-receiver-ipv6 and examples/udp-sender-ipv6
    
    * transmitting human readable strings between the two processes
    * remote address configurable at compile time via DEFINES=...
    examples for uIPv6
    Platform-specific devices.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Change the way we switch between cc2530 models
    
    The switch is now performed through a configuration define,
    which has also been renamed to better match Contiki's naming
    conventions
    Move SLIP interface define to project-conf
    cc2530dk: Border router example changes:
    
    - It now plays nicely with the cc2531 USB dongle
    - We build it for the dongle by default
    - Debugging with cc2530dk functions instead of printf
    - Using __nonbanked optimisations
    - During prefix requests, invert LED blinking to make things more visible
    - Removed leftover include
    - Code style fixes
    
    See Pull Request #21
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Renamed serial module to serial-line
    * Addition of Meshnetics Zigbig platform by Frederic Thepaut <frederic.thepaut@inooi.com>
    
    * Changed default RavenUSB timeout to 3 seconds... seems to give most reliable transmissions
    forgot these files for RCB...
    Contiki port for the Atmel AVR Raven board
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Change the way we switch between cc2530 models
    
    The switch is now performed through a configuration define,
    which has also been renamed to better match Contiki's naming
    conventions
    cc2530dk: Border router example changes:
    
    - It now plays nicely with the cc2531 USB dongle
    - We build it for the dongle by default
    - Debugging with cc2530dk functions instead of printf
    - Using __nonbanked optimisations
    - During prefix requests, invert LED blinking to make things more visible
    - Removed leftover include
    - Code style fixes
    
    See Pull Request #21
    cc2x3x RPL/non-RPL handling:
    
    - Relevant examples explicitly request it in their Makefile
    - Removed the definition of UIP_CONF_IPV6_RPL from
      contiki-conf.h. If needed, it's defined through a -D
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    SkyByteRadio was replaced by Msp802154Radio
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Hello, world example
    shell command 'ps' was removed from sky-shell.c, instead using 'echo' in test
    write command was removed from sky-shell, which requires a test update
    explicit make clean before compiling firmwares
    moved test scripts into simulation config (.csc)
    with the recent mote type updates, the simulation config structure changed.
    
    * updated simconfigs
    added sky shell basic commands test.
    Test that checks if the Contiki shell compiles and runs on the Tmote Sky
    with target specific extensions (.sky)
    added two rime/sky tests: abc and trickle
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Add hello-world README
    Fixes to allow ipv4 (hello world) builds
    Allow non-ipv6 build, e.g. Hello World
    Many project Makefiles build just one Contiki binary. Up to now the name of this binary was only available to the 'all' goal as prerequisite. So it was possible to create a non-project-specific rule to i.e. load that binary into the target device.
    
    Therefore I introduced the make variable CONTIKI_PROJECT. Now a typical project Makefile starts with:
    
    CONTIKI_PROJECT = hello-world
    all: $(CONTIKI_PROJECT)
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added IRC client example.
    Introduced web browser as new example using ctk fullscreen mode.
    Rime statistics gathering
    Import of the contiki-2.x development code from the SICS internal CVS server
    Added IRC client example.
    Re-added temporarily removed file.
    Temporarily removed file due to CVS issue.
    The Contiki 2.x build system allows to define arbitrary macros for the C compiler preprocessor (in other word add -d<macro[=value]>'s to the C compiler command line) directly from the gnumake command line by setting the gnumake variable DEFINES to a comma-seperated list of macros (and optionally values) like this:
    
    make TARGET=mytarget DEFINES=MYLOG, MYSIZE=100, MYTRACE
    
    The build system does however _NOT_ take care to rebuild things if the DEFINES change so most likely a 'make clean' is advisable. To ease usage the DEFINES may be saved individually per target with the goal 'savedefines' similiar to savinf the target.
    
    The 6502-based target leverage the DEFINES mechanism by introducing so-called 'high level config macros' which allow to configure Contiki per target AND per project.
    
    Most of the time there's exactly one reasonable set of high level config macros for every combination of target and project. Therefore it makes sense to place them into CVS.
    Allow for non-GUI win32 apps.
    Activated Platform-specific File System (PFS) for the C128 by default for all programs with R/O CFS access.
    Added high-level config macros for the C128 (due to lack of memory no DNS support for the webbrowser).
    Added email client example.
    Added IRC client example.
    Deactivated mouse support on the C64 because of "phantom keystroke" and "phantom mouseclick" issues :-(
    The Contiki 2.x build system allows to define arbitrary macros for the C compiler preprocessor (in other word add -d<macro[=value]>'s to the C compiler command line) directly from the gnumake command line by setting the gnumake variable DEFINES to a comma-seperated list of macros (and optionally values) like this:
    
    make TARGET=mytarget DEFINES=MYLOG, MYSIZE=100, MYTRACE
    
    The build system does however _NOT_ take care to rebuild things if the DEFINES change so most likely a 'make clean' is advisable. To ease usage the DEFINES may be saved individually per target with the goal 'savedefines' similiar to savinf the target.
    
    The 6502-based target leverage the DEFINES mechanism by introducing so-called 'high level config macros' which allow to configure Contiki per target AND per project.
    
    Most of the time there's exactly one reasonable set of high level config macros for every combination of target and project. Therefore it makes sense to place them into CVS.
    Added IRC client example.
    Now that we started adding files to the CVS which are normally generated with a 'save...' make goal we can remove the DEFAULT_TARGET mechanism altogether and just add Makefile.target files.
    Added mouse support for the Atari.
    Added missing 'atarixl' Makefile defines.
    Added platform 'Atari XL'.
    
    Don't be afraid, I'm not trying to have more retro platforms than "real" platforms ;-)
    The platform 'atarixl' will replace the platform 'atari'. However I need both for some
    transition period.
    Added cc65 target 'atari' for Atari 8-bit machines. This addition was triggered by exsistence of http://www.atari8ethernet.com/.
    Activated Platform-specific File System (PFS) for the C64 by default for all programs with R/O CFS access.
    Now that the C64 mouse driver works we can activate the mouse support for this target :-)
    Added IRC client example.
    Deactivated mouse support on the C64 because of "phantom keystroke" and "phantom mouseclick" issues :-(
    The Contiki 2.x build system allows to define arbitrary macros for the C compiler preprocessor (in other word add -d<macro[=value]>'s to the C compiler command line) directly from the gnumake command line by setting the gnumake variable DEFINES to a comma-seperated list of macros (and optionally values) like this:
    
    make TARGET=mytarget DEFINES=MYLOG, MYSIZE=100, MYTRACE
    
    The build system does however _NOT_ take care to rebuild things if the DEFINES change so most likely a 'make clean' is advisable. To ease usage the DEFINES may be saved individually per target with the goal 'savedefines' similiar to savinf the target.
    
    The 6502-based target leverage the DEFINES mechanism by introducing so-called 'high level config macros' which allow to configure Contiki per target AND per project.
    
    Most of the time there's exactly one reasonable set of high level config macros for every combination of target and project. Therefore it makes sense to place them into CVS.
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Added IRC client example.
    Many project Makefiles build just one Contiki binary. Up to now the name of this binary was only available to the 'all' goal as prerequisite. So it was possible to create a non-project-specific rule to i.e. load that binary into the target device.
    
    Therefore I introduced the make variable CONTIKI_PROJECT. Now a typical project Makefile starts with:
    
    CONTIKI_PROJECT = hello-world
    all: $(CONTIKI_PROJECT)
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Ncurses-based CTK backend for the native platform.
    Allow for non-GUI win32 apps.
    Updated include paths for the moved files under net/
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    A quick and dirty service registry daemon hack. The servreg-hack
    allows a program to register an 8-bit service ID that gets
    disseminated to the entire network, as long as a servreg-hack daemon
    is running on all neighbors. Other nodes can look up the service ID to
    figure out what nodes in the network offer this service.
    
    This is officially labeled as a "hack" so that we don't get too comfy
    with it; this hack is not the future of service discovery and
    advertisement in Contiki.
    Send to node 1.0 instead of 41.41, to make the example work better in Cooja.
    fixed compiler warning
    Updated the Rime channel numbers so that all examples can be run in the same network without channel clashes
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Changed the 'ibc' and 'uc' Rime modules into the more descriptive names 'broadcast' and 'unicast'
    Changed names of the Rime examples from test-* to example-* and added examples for ruc and uc
    Static should come first because it's a storage class.
    Added exithandlers so that the examples can be run as loadable (and unloadble) modules
    Message size should include ending zero byte
    Moved all Rime examples into examples/rime directory
    API change for Rime: *_setup() renamed to *_open()
    Simple Rime test code
    Renamed Rime output function
    A Rime driver for the simple-cc2420 driver
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Update to new API
    A quick and dirty service registry daemon hack. The servreg-hack
    allows a program to register an 8-bit service ID that gets
    disseminated to the entire network, as long as a servreg-hack daemon
    is running on all neighbors. Other nodes can look up the service ID to
    figure out what nodes in the network offer this service.
    
    This is officially labeled as a "hack" so that we don't get too comfy
    with it; this hack is not the future of service discovery and
    advertisement in Contiki.
    exec shell command and elfloader example
    Fixed problem that made error output not visible
    Makefile for compiling a set of Contiki platforms and produce error messages for those platforms that do not compile
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Stop setting WITH_UIP6=1 in example Makefiles
    
    It achieves exactly nothing other than generate confusion
    A quick and dirty service registry daemon hack. The servreg-hack
    allows a program to register an 8-bit service ID that gets
    disseminated to the entire network, as long as a servreg-hack daemon
    is running on all neighbors. Other nodes can look up the service ID to
    figure out what nodes in the network offer this service.
    
    This is officially labeled as a "hack" so that we don't get too comfy
    with it; this hack is not the future of service discovery and
    advertisement in Contiki.
    Eeprom-test example modified
    
    This patch improves the eeprom-test example adding more
    tests on the eeprom read/write procedures.
    cpu/native: Add file-backed simulated EEPROM to native cpu.
    
    This patch removes a defunct EEPROM implementation from the native
    platform and provides a new EEPROM implementation for the native cpu.
    The previous implementation appears to be vestigal.
    
    This is useful for testing code which uses the EEPROM without running
    the code on the actual hardware.
    
    By default the code will create a new temporary file as the EEPROM
    backing, reinitializing each time. If you would like to preserve the
    EEPROM contents or specify a specific EEPROM file to use, you can set the
    `CONTIKI_EEPROM` environment variable to the name of the EEPROM file you
    wish to use instead. If it already exists, its contents will be used.
    If it does not already exist, it will be created and initialized by
    filling it with `0xFF`---just like a real EEPROM.
    
    A new example is also included, which was used to verify the correctness
    of the implementation. It can easily be used to verify the EEPROM
    implementations of other targets.
    Cleaned up some files, moved z1-websense example
    Updated *-sensor.c files from the sky platform.
    Fixed battery-sensor plus added simple test (XXX)
    Updated *-sensor.c files from the sky platform.
    Fixed battery-sensor plus added simple test (XXX)
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Eeprom-test example modified
    
    This patch improves the eeprom-test example adding more
    tests on the eeprom read/write procedures.
    cpu/native: Add file-backed simulated EEPROM to native cpu.
    
    This patch removes a defunct EEPROM implementation from the native
    platform and provides a new EEPROM implementation for the native cpu.
    The previous implementation appears to be vestigal.
    
    This is useful for testing code which uses the EEPROM without running
    the code on the actual hardware.
    
    By default the code will create a new temporary file as the EEPROM
    backing, reinitializing each time. If you would like to preserve the
    EEPROM contents or specify a specific EEPROM file to use, you can set the
    `CONTIKI_EEPROM` environment variable to the name of the EEPROM file you
    wish to use instead. If it already exists, its contents will be used.
    If it does not already exist, it will be created and initialized by
    filling it with `0xFF`---just like a real EEPROM.
    
    A new example is also included, which was used to verify the correctness
    of the implementation. It can easily be used to verify the EEPROM
    implementations of other targets.
    Now that we started adding files to the CVS which are normally generated with a 'save...' make goal we can remove the DEFAULT_TARGET mechanism altogether and just add Makefile.target files.
    Many project Makefiles build just one Contiki binary. Up to now the name of this binary was only available to the 'all' goal as prerequisite. So it was possible to create a non-project-specific rule to i.e. load that binary into the target device.
    
    Therefore I introduced the make variable CONTIKI_PROJECT. Now a typical project Makefile starts with:
    
    CONTIKI_PROJECT = hello-world
    all: $(CONTIKI_PROJECT)
    replaced blink with blinker that uses more sensors
    ESB examples
    Added an example application to show the usage of the Contiki Multi-threading library.
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved net/rime.h to net/rime/rime.h
    Enabled shell_rime_send_cmd_init() so that this example can be used in the shell/03-sky-shell-command regression test
    Removed the experimental checkpointing code
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Enabled power commands
    Debug output cleanup (fixed compiler warning)
    Made use of new collect-view shell command
    Replaced the old sky-alldata command with the new collect-view-data command. Added the new shell powertrace command. Cleaned up.
    Added a neighbor number field to the sky-alldata command. The parent fields now correctly specify the parent neighbor, not just the currently best neighbor.
    Send only link estimate, not rtmetric + link estimate, for best neighbor
    Bugfix: address of first argument to collect_neighbor_list_best()
    Update to new collect neighbor API
    Updated to use new Collect neighbor api
    Renamed collect's neighbor module to collect_neighbor; added powertracing
    Fixed compilation without timesynch compiled in
    Added power & Rime debug commands
    Broke out the base64 commands from the text module
    Use the sht11_sensor instead of directly interfacing the sht11 driver
    Activate the light sensor before obtaining the value, deactivate it afterwards
    fixed for new sensors API
    Remove sniff and debug commands to save code space
    Removed Rime ping command to save flash space, added the single-hop Rime debug commands instead
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Disabled checkpointing for the default sky-shell build to reduce object code size, instead added a separate sky-checkpoint build with checkpointing but without the 'sky-alldata' command
    added checkpoint and rollback commands:
    
    writes/reads checkpoint images from file system.
    
    (temporarily disabled rime debug and sniff commands)
    Removed reliance on the ->u16 field in rimeaddr
    Added battery voltage level readout & SHT11 low-voltage indicator
    Enable rime debug commands (broadcast, unicast)
    Replaced the sky-shell with the new sky-shell-collect and removed sky-shell-collect
    Removed netfile command, added net debug commands
    enable coffee code coffee and netcmd commands
    Example application that runs the Contiki shell on the Tmote Sky
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Updated to new radio_driver API
    tr1001 init fix
    Added radio sniffer program
    More uip_ipaddr_t fixes.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Now that we started adding files to the CVS which are normally generated with a 'save...' make goal we can remove the DEFAULT_TARGET mechanism altogether and just add Makefile.target files.
    Removed old unused timetable code
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    enable coffee code coffee and netcmd commands
    Example application that runs the Contiki shell on the Tmote Sky
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Updated to new radio_driver API
    tr1001 init fix
    Added radio sniffer program
    More uip_ipaddr_t fixes.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Replaced the old sky-alldata command with the new collect-view-data command. Added the new shell powertrace command. Cleaned up.
    dependa on powertrace application
    Added a generic file-upload command. shell-upload only takes .ce files.
    Changed from shell app to serial-shell app
    Bugfix in netsend commands
    Added target for sky-shell-collect.c data collection
    Removed redundant targets
    Now that we started adding files to the CVS which are normally generated with a 'save...' make goal we can remove the DEFAULT_TARGET mechanism altogether and just add Makefile.target files.
    Many project Makefiles build just one Contiki binary. Up to now the name of this binary was only available to the 'all' goal as prerequisite. So it was possible to create a non-project-specific rule to i.e. load that binary into the target device.
    
    Therefore I introduced the make variable CONTIKI_PROJECT. Now a typical project Makefile starts with:
    
    CONTIKI_PROJECT = hello-world
    all: $(CONTIKI_PROJECT)
    Example application that runs the Contiki shell on the Tmote Sky
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Powertrace: a program that periodically prints out the power consumption; suitable for experiments or simulations that want to measure power consumption
    added printout of sender of received messages
    Added broadcast example for completeness
    minor fix: removed superfluous etimer_reset
    transmit with random intervals: 2-4 seconds
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Bugfix: it is etimer_reset() that makes timer behavior stable, not etimer_restart()
    Use etimer_restart() to avoid synchronization effects from the abc_send() invocation taking time to complete
    printing message when packet sent
    
    + changed period to 2 seconds (can be run unchanged with x-mac)
    Changed names of the Rime examples from test-* to example-* and added examples for ruc and uc
    Static should come first because it's a storage class.
    Added exithandlers so that the examples can be run as loadable (and unloadble) modules
    Message size should include ending zero byte
    Moved all Rime examples into examples/rime directory
    API change for Rime: *_setup() renamed to *_open()
    Simple Rime test code
    Renamed Rime output function
    A Rime driver for the simple-cc2420 driver
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Powertrace: a program that periodically prints out the power consumption; suitable for experiments or simulations that want to measure power consumption
    Many project Makefiles build just one Contiki binary. Up to now the name of this binary was only available to the 'all' goal as prerequisite. So it was possible to create a non-project-specific rule to i.e. load that binary into the target device.
    
    Therefore I introduced the make variable CONTIKI_PROJECT. Now a typical project Makefile starts with:
    
    CONTIKI_PROJECT = hello-world
    all: $(CONTIKI_PROJECT)
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fixed mbxxx platform
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added a simple implementation of Coffee for STM32W108.
    Added examples for MB851 platform.
    Reduced size of binary to fit on Tmote Sky platform
    Removed sendtest command to make binary fit in Tmote Sky
    Example code for using the shell netperf command
    Renamed the serial module to serial-line
    sky example running both webserver and serial shell (overrides default slip handler)
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fixed mbxxx platform
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Fixed mbxxx platform
    Changed COFFEE_FILES to COFFEE.
    Added a simple implementation of Coffee for STM32W108.
    Added examples for MB851 platform.
    Added a Contiki app basically combining apps/netconf and apps/dhcp. It's a 6502 specific app as it doesn't configure the running uIP instance but instead writes to the 'contiki.cfg' configuration file used by 6502 apps to configure uIP.
    Now that we started adding files to the CVS which are normally generated with a 'save...' make goal we can remove the DEFAULT_TARGET mechanism altogether and just add Makefile.target files.
    Many project Makefiles build just one Contiki binary. Up to now the name of this binary was only available to the 'all' goal as prerequisite. So it was possible to create a non-project-specific rule to i.e. load that binary into the target device.
    
    Therefore I introduced the make variable CONTIKI_PROJECT. Now a typical project Makefile starts with:
    
    CONTIKI_PROJECT = hello-world
    all: $(CONTIKI_PROJECT)
    replaced blink with blinker that uses more sensors
    ESB examples
    Added an example application to show the usage of the Contiki Multi-threading library.
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fixed mbxxx platform
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added examples for MB851 platform.
    Added webserver and irc.
    Include wget shell command in "standard" shell environments.
    As adding some commands to the telnet server shell doesn't seem to be desirable in the application it's now done in the example.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fixed mbxxx platform
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Fixed mbxxx platform
    Added examples for MB851 platform.
    Fixed mbxxx platform
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Changed COFFEE_FILES to COFFEE.
    Added a simple implementation of Coffee for STM32W108.
    Added examples for MB851 platform.
    Reduced size of binary to fit on Tmote Sky platform
    Removed sendtest command to make binary fit in Tmote Sky
    Example code for using the shell netperf command
    Renamed the serial module to serial-line
    sky example running both webserver and serial shell (overrides default slip handler)
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fixed mbxxx platform
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Fixed mbxxx platform
    Added examples for MB851 platform.
    Fixed mbxxx platform
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added example for the elfloader on the MB851 platform, taken from sky-shell-exec example.
    Initial files of the MICAz port.
    removed refences to printf2log.h
    cooja hello world (+ include printf2log.h)
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fixed mbxxx platform
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added example for the elfloader on the MB851 platform, taken from sky-shell-exec example.
    exec shell command and elfloader example
    Fixed problem that made error output not visible
    Makefile for compiling a set of Contiki platforms and produce error messages for those platforms that do not compile
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fixed mbxxx platform
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Fixed mbxxx platform
    Added example for the elfloader on the MB851 platform, taken from sky-shell-exec example.
    decreased elf loader memory to avoid stack overflow
    exec shell command and elfloader example
    Fixed mbxxx platform
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added examples for MB851 platform.
    A quick and dirty service registry daemon hack. The servreg-hack
    allows a program to register an 8-bit service ID that gets
    disseminated to the entire network, as long as a servreg-hack daemon
    is running on all neighbors. Other nodes can look up the service ID to
    figure out what nodes in the network offer this service.
    
    This is officially labeled as a "hack" so that we don't get too comfy
    with it; this hack is not the future of service discovery and
    advertisement in Contiki.
    exec shell command and elfloader example
    Fixed problem that made error output not visible
    Makefile for compiling a set of Contiki platforms and produce error messages for those platforms that do not compile
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fixed mbxxx platform
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Fixed mbxxx platform
    Added examples for MB851 platform.
    Added a Contiki app basically combining apps/netconf and apps/dhcp. It's a 6502 specific app as it doesn't configure the running uIP instance but instead writes to the 'contiki.cfg' configuration file used by 6502 apps to configure uIP.
    Now that we started adding files to the CVS which are normally generated with a 'save...' make goal we can remove the DEFAULT_TARGET mechanism altogether and just add Makefile.target files.
    Many project Makefiles build just one Contiki binary. Up to now the name of this binary was only available to the 'all' goal as prerequisite. So it was possible to create a non-project-specific rule to i.e. load that binary into the target device.
    
    Therefore I introduced the make variable CONTIKI_PROJECT. Now a typical project Makefile starts with:
    
    CONTIKI_PROJECT = hello-world
    all: $(CONTIKI_PROJECT)
    replaced blink with blinker that uses more sensors
    ESB examples
    Added an example application to show the usage of the Contiki Multi-threading library.
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    Fixed mbxxx platform
    Added functions and example for deep sleep on mb851.
    
    The added function let a process to make the system go
    into deep sleep for maximum power saving.
    The udp-ipv6-example shows how to use these new functions.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    minor cleanup of example (changed to use uiplib to parse IPv6 address)
    Updated for new for new uIPv6 APIs. Also fixed compiler warning.
    updated for new uIPv6 APIs
    a little faster autoconfiguration
    fixed debug output to show the correct remote address
    changed udp examples into a client and a server, added multi-hop routing,
    clarified the code.
    printing local ipv6 address at startup. addresses must match in order for the examples to work
    moved ipv6 udp example processes from apps/udp to inside examples/udp-receiver-ipv6 and examples/udp-sender-ipv6
    
    * transmitting human readable strings between the two processes
    * remote address configurable at compile time via DEFINES=...
    examples for uIPv6
    Platform-specific devices.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    Revert "Fixing sleep on stm32w108 cpu"
    
    This reverts commit eac73ff68ce98e862def4bd671db03f7b9a3b438.
    Fixing sleep on stm32w108 cpu
    Fixed mbxxx platform
    Added functions for deep sleep to mbxxx platform.
    Added functions and example for deep sleep on mb851.
    
    The added function let a process to make the system go
    into deep sleep for maximum power saving.
    The udp-ipv6-example shows how to use these new functions.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    minor cleanup of example (changed to use uiplib to parse IPv6 address)
    Support fragmentation testing.
    Updated for new for new uIPv6 APIs. Also fixed compiler warning.
    updated for new uIPv6 APIs
    a little faster autoconfiguration
    changed address setup slightly.
    changed udp examples into a client and a server, added multi-hop routing,
    clarified the code.
    printing local ipv6 address at startup. addresses must match in order for the examples to work
    moved ipv6 udp example processes from apps/udp to inside examples/udp-receiver-ipv6 and examples/udp-sender-ipv6
    
    * transmitting human readable strings between the two processes
    * remote address configurable at compile time via DEFINES=...
    examples for uIPv6
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fixed mbxxx platform
    Fixed mbxxx platform
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Fixed mbxxx platform
    Added functions and example for deep sleep on mb851.
    
    The added function let a process to make the system go
    into deep sleep for maximum power saving.
    The udp-ipv6-example shows how to use these new functions.
    replaced DEFAULT_TARGET with Makefile.target for specifying default target
    changed udp examples into a client and a server, added multi-hop routing,
    clarified the code.
    examples for uIPv6
    Fixed mbxxx platform
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added examples for MB851 platform.
    fixed button to toggle light sensor
    instantiated file-description and fixed style
    added activation of button sensor and activation and deactivation / toggle of light sensor
    added missing include
    fixed for new sensor APIs
    Testing the button
    Blinking LEDs
    Experimental energy estimation code
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fixed mbxxx platform
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Fixed mbxxx platform
    Added examples for MB851 platform.
    Added a Contiki app basically combining apps/netconf and apps/dhcp. It's a 6502 specific app as it doesn't configure the running uIP instance but instead writes to the 'contiki.cfg' configuration file used by 6502 apps to configure uIP.
    Now that we started adding files to the CVS which are normally generated with a 'save...' make goal we can remove the DEFAULT_TARGET mechanism altogether and just add Makefile.target files.
    Many project Makefiles build just one Contiki binary. Up to now the name of this binary was only available to the 'all' goal as prerequisite. So it was possible to create a non-project-specific rule to i.e. load that binary into the target device.
    
    Therefore I introduced the make variable CONTIKI_PROJECT. Now a typical project Makefile starts with:
    
    CONTIKI_PROJECT = hello-world
    all: $(CONTIKI_PROJECT)
    replaced blink with blinker that uses more sensors
    ESB examples
    Added an example application to show the usage of the Contiki Multi-threading library.
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fixed mbxxx platform
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added examples for MB851 platform.
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fixed mbxxx platform
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Fixed mbxxx platform
    Added examples for MB851 platform.
    Added a Contiki app basically combining apps/netconf and apps/dhcp. It's a 6502 specific app as it doesn't configure the running uIP instance but instead writes to the 'contiki.cfg' configuration file used by 6502 apps to configure uIP.
    Now that we started adding files to the CVS which are normally generated with a 'save...' make goal we can remove the DEFAULT_TARGET mechanism altogether and just add Makefile.target files.
    Many project Makefiles build just one Contiki binary. Up to now the name of this binary was only available to the 'all' goal as prerequisite. So it was possible to create a non-project-specific rule to i.e. load that binary into the target device.
    
    Therefore I introduced the make variable CONTIKI_PROJECT. Now a typical project Makefile starts with:
    
    CONTIKI_PROJECT = hello-world
    all: $(CONTIKI_PROJECT)
    replaced blink with blinker that uses more sensors
    ESB examples
    Added an example application to show the usage of the Contiki Multi-threading library.
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fixed mbxxx platform
    Added examples for MB851 platform.
    Example code for multi-hop Tmote Sky telnet server and web server
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Fixed mbxxx platform
    Added examples for MB851 platform.
    Fixed mbxxx platform
    Replaced make-empty-symbols with empty-symbols.[c|h]
    The symbol generation shell scripts cause CRLF issues on Windows/Cygwin again and again. Instead of fixing this yet again I opted to remove the symbol generation script at least for the "no symbols" scenario with two C source files to be copied.
    Scatterweb MSB430 port.
    Fixed mbxxx platform
    Fixed mbxxx platform
    Fixed mbxxx platform
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the examples directory.
    Added examples for MB851 platform.
    Rewrote the webserver so that sensor data is loaded using Ajax-style XmlHttpRequest and that a spinner icon is shown when the data is loaded
    Added an AJAX-style web server app that continously updates a web page with data from the Tmote Sky on-board sensors
    Adjusted source formatting Mk II ;-)
    Adjusted source formatting.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Changed the name of the rimeaddr module to linkaddr
    Fixed mbxxx platform
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the examples directory.
    Added examples for MB851 platform.
    Updated to latest announcement API and fixed typo
    Updated to latest collect-neighbor API
    fixed typo + announcement API to avoid compiler warning
    Updated to match the new sensors API
    Rewrote the webserver so that sensor data is loaded using Ajax-style XmlHttpRequest and that a spinner icon is shown when the data is loaded
    Remove debug printouts. Increase neighbor advertisement timers.
    Added an AJAX-style web server app that continously updates a web page with data from the Tmote Sky on-board sensors
    Changed all sprintf() calls to snprintf() to make it useful for systems with very low buffer size
    Adjusted process display cgi to recent change in process states.
    Optimzed PETSCII support.
    Allow to find the scripts on PETSCII machines.
    Removed compiler warning.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Avoid usage of nameless unions as they are - surprisingly at least to me - not part of any C spec.
    Added center alignment to network statistic columns. Now it looks nicer and is consistent with the system processes columns.
    Updated processes script output to match HTML ;-)
    Ported processes cgi to Contiki 2.x.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fixed mbxxx platform
    Replaced make-empty-symbols with empty-symbols.[c|h]
    The symbol generation shell scripts cause CRLF issues on Windows/Cygwin again and again. Instead of fixing this yet again I opted to remove the symbol generation script at least for the "no symbols" scenario with two C source files to be copied.
    Older ELF-loader code, may not work any longer
    rtimer implementation (not well tested)
    sprintf that use strformat, so there's no need to pull in the newlib
    implementation.
    Build system improvements.
    Scatterweb MSB430 port.
    Fixed mbxxx platform
    Added examples for MB851 platform.
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Fixed mbxxx platform
    Added examples for MB851 platform.
    Fixed mbxxx platform
    Added examples for MB851 platform.
    Added an AJAX-style web server app that continously updates a web page with data from the Tmote Sky on-board sensors
    Fixed mbxxx platform
    Added examples for MB851 platform.
    Rewrote the webserver so that sensor data is loaded using Ajax-style XmlHttpRequest and that a spinner icon is shown when the data is loaded
    Added an AJAX-style web server app that continously updates a web page with data from the Tmote Sky on-board sensors
    Fixed mbxxx platform
    Added examples for MB851 platform.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fixed mbxxx platform
    Added examples for MB851 platform.
    Fixed mbxxx platform
    Added examples for MB851 platform.
    Rewrote the webserver so that sensor data is loaded using Ajax-style XmlHttpRequest and that a spinner icon is shown when the data is loaded
    Fixed mbxxx platform
    Added examples for MB851 platform.
    Compressed the Javascript code to improve loading time; placed the uncompressed code in a separate file
    Rewrote the webserver so that sensor data is loaded using Ajax-style XmlHttpRequest and that a spinner icon is shown when the data is loaded
    Added an AJAX-style web server app that continously updates a web page with data from the Tmote Sky on-board sensors
    Fixed mbxxx platform
    Added examples for MB851 platform.
    Rewrote the webserver so that sensor data is loaded using Ajax-style XmlHttpRequest and that a spinner icon is shown when the data is loaded
    Fixed mbxxx platform
    Added examples for MB851 platform.
    Added an AJAX-style web server app that continously updates a web page with data from the Tmote Sky on-board sensors
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Fixed mbxxx platform
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Changed default size of uIP buffer and removed serial line input for mb851-websense example.
    New example for mb851 board that comes from sky-websense.
    Changed name of web-conf.h to project-conf.h
    Initial commit of a RESTful web service example using experimental COAP/HTTP/REST implementation for Contiki
    Web server example showing light and temperature sensor data
    Added simple web server listing the neighbors and routes
    reduced the buffers to save memory
    added project configuration
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    ntikiMAC: a new radio duty cycling mechanism that uses a combination
    of link-layer and MAC-layer mechanisms to achieve a very low power
    consumption: during idle listening the radio is switched off between
    99.2% and 99.6% of the time. One unicast transmission typically adds
    between 0.07% and 1.2% additional radio time, depending on packet
    size.
    
    ContikiMAC uses the standard IEEE 802.15.4 message format and adds no
    additional headers.
    
    ContikiMAC is simple: it uses periodic two-shot channel sampling
    during idle listening to keep the radio on-time down. Transmissions
    are done with repeated transmissions until a link-layer ACK is
    received.
    Increased the clock speed to 32768/4 from 32768/8 to provide better accuracy for power profiling of radio CCA checks
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    removed offset in rtimer_arch
    Reading timer now quicker, embryo for possible future drift configuration
    Fixed description
    MSP430 real-time rtimer support using timerb1
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    MSP430 definitions
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fixed mbxxx platform
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    New example for mb851 board that comes from sky-websense.
    Fixed mbxxx platform
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Bugfix in page layout for mb851-websense example.
    New example for mb851 board that comes from sky-websense.
    minor cleanup
    Added web pages "/1" and "/0" to turn leds on or off
    Web server example showing light and temperature sensor data
    Fixed mbxxx platform
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Stop setting WITH_UIP6=1 in example Makefiles
    
    It achieves exactly nothing other than generate confusion
    Fixed mbxxx platform
    New example for mb851 board that comes from sky-websense.
    Moved project-conf.h
    Added example using HTTP to control and be controlled.
    Fixed to set address on interface
    Added rules to connect to slip bridge connected via serial or running in COOJA using tunslip6
    Web server example showing light and temperature sensor data
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Many project Makefiles build just one Contiki binary. Up to now the name of this binary was only available to the 'all' goal as prerequisite. So it was possible to create a non-project-specific rule to i.e. load that binary into the target device.
    
    Therefore I introduced the make variable CONTIKI_PROJECT. Now a typical project Makefile starts with:
    
    CONTIKI_PROJECT = hello-world
    all: $(CONTIKI_PROJECT)
    Added an example application to show the usage of the Contiki Multi-threading library.
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Made MT stack size configurable
    Now that "even" the 6502 targets support stdout we can just puts() our feedback.
    Not all targets support stdio. There I replaced stdio output with log output (and streamlined the source).
    Fixed buffer overflow.
    Minor adjustment to coding style.
    Added an example application to show the usage of the Contiki Multi-threading library.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Added support for the FTP standalone client to the apple2enh target.
    Allow for non-GUI win32 apps.
    Reduced program size.
    
    On the C128 the custom PFS code doesn't add functionality (as it does with IDE64 support on the C64) but is "only" smaller than the POSIX file i/o code in the C library. But the POSIX directory access code in the C library relies on the POSIX file i/o code anyway so there no point in additionally adding the PFS code to the FTP program.
    Added support for the FTP standalone client to the c128 target.
    Activated Platform-specific File System (PFS) for the C128 by default for all programs with R/O CFS access.
    Added high-level config macros for the C128 (due to lack of memory no DNS support for the webbrowser).
    Added email client example.
    Added IRC client example.
    Deactivated mouse support on the C64 because of "phantom keystroke" and "phantom mouseclick" issues :-(
    The Contiki 2.x build system allows to define arbitrary macros for the C compiler preprocessor (in other word add -d<macro[=value]>'s to the C compiler command line) directly from the gnumake command line by setting the gnumake variable DEFINES to a comma-seperated list of macros (and optionally values) like this:
    
    make TARGET=mytarget DEFINES=MYLOG, MYSIZE=100, MYTRACE
    
    The build system does however _NOT_ take care to rebuild things if the DEFINES change so most likely a 'make clean' is advisable. To ease usage the DEFINES may be saved individually per target with the goal 'savedefines' similiar to savinf the target.
    
    The 6502-based target leverage the DEFINES mechanism by introducing so-called 'high level config macros' which allow to configure Contiki per target AND per project.
    
    Most of the time there's exactly one reasonable set of high level config macros for every combination of target and project. Therefore it makes sense to place them into CVS.
    Added CTK standalone FTP client example.
    Added email client example.
    Added IRC client example.
    Now that we started adding files to the CVS which are normally generated with a 'save...' make goal we can remove the DEFAULT_TARGET mechanism altogether and just add Makefile.target files.
    Added mouse support for the Atari.
    Added missing 'atarixl' Makefile defines.
    Added platform 'Atari XL'.
    
    Don't be afraid, I'm not trying to have more retro platforms than "real" platforms ;-)
    The platform 'atarixl' will replace the platform 'atari'. However I need both for some
    transition period.
    Added cc65 target 'atari' for Atari 8-bit machines. This addition was triggered by exsistence of http://www.atari8ethernet.com/.
    Added support for the FTP standalone client to the c64 target.
    Activated Platform-specific File System (PFS) for the C64 by default for all programs with R/O CFS access.
    Now that the C64 mouse driver works we can activate the mouse support for this target :-)
    Added email client example.
    Added IRC client example.
    Deactivated mouse support on the C64 because of "phantom keystroke" and "phantom mouseclick" issues :-(
    The Contiki 2.x build system allows to define arbitrary macros for the C compiler preprocessor (in other word add -d<macro[=value]>'s to the C compiler command line) directly from the gnumake command line by setting the gnumake variable DEFINES to a comma-seperated list of macros (and optionally values) like this:
    
    make TARGET=mytarget DEFINES=MYLOG, MYSIZE=100, MYTRACE
    
    The build system does however _NOT_ take care to rebuild things if the DEFINES change so most likely a 'make clean' is advisable. To ease usage the DEFINES may be saved individually per target with the goal 'savedefines' similiar to savinf the target.
    
    The 6502-based target leverage the DEFINES mechanism by introducing so-called 'high level config macros' which allow to configure Contiki per target AND per project.
    
    Most of the time there's exactly one reasonable set of high level config macros for every combination of target and project. Therefore it makes sense to place them into CVS.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added CTK standalone FTP client example.
    Added IRC client example.
    Introduced web browser as new example using ctk fullscreen mode.
    Rime statistics gathering
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Added CTK standalone FTP client example.
    Added IRC client example.
    Many project Makefiles build just one Contiki binary. Up to now the name of this binary was only available to the 'all' goal as prerequisite. So it was possible to create a non-project-specific rule to i.e. load that binary into the target device.
    
    Therefore I introduced the make variable CONTIKI_PROJECT. Now a typical project Makefile starts with:
    
    CONTIKI_PROJECT = hello-world
    all: $(CONTIKI_PROJECT)
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    ctk-curses: WITH_GUI also on ftp example for native platform
    Ncurses-based CTK backend for the native platform.
    Allow for non-GUI win32 apps.
    Added cmdline args support to wget example.
    After a CTK wget and a shell wget finally a plain vanilla CLI wget.
    Added cmdline args support to wget example.
    Removed PFS code from C128 WGET.
    
    On the C128 the custom PFS code doesn't add functionality (as it does with IDE64 support on the C64) but is "only" smaller than the POSIX file i/o code in the C library. But the stdio code in the C library (used in WGET for screen i/o) relies on the POSIX file i/o code anyway so there no point in additionally adding the PFS code to the WGET program.
    Activated Platform-specific File System (PFS) for the C64/C128 by default for all programs with R/W CFS access.
    After a CTK wget and a shell wget finally a plain vanilla CLI wget.
    After a CTK wget and a shell wget finally a plain vanilla CLI wget.
    replaced DEFAULT_TARGET with Makefile.target for specifying default target
    Now that we started adding files to the CVS which are normally generated with a 'save...' make goal we can remove the DEFAULT_TARGET mechanism altogether and just add Makefile.target files.
    Added cmdline args support to wget example.
    Now that all supported targets echo the Return key on gets() there's no more need to print \n's.
    core/net/resolv: IPv6 and mDNS ("Bonjour") support. Major refactor.
    
    This patch updates the DNS resolver to support IPv6 and introduces an
    improved API for looking up DNS entries. This patch also adds optional
    support for mDNS lookups and responses to the DNS resolver.
    
    Here is a quick summary of the changes:
    
     * Added support for IPv6 lookups.
     * DNS queries now honor record expiration.
     * Added support for mDNS, compatible with "Bonjour".
     * Implemented a new lookup api, `resolv_lookup2()`, which provides
       more information about the state of the record(error, expired,
       looking-up, etc.).
    
    About mDNS/Bonjour Support
    --------------------------
    
    This patch adds basic support for mDNS/Bonjour, which allows you to
    refer to the name of a device instead of its IP address. This is
    incredibly convenient for IPv6 addresses because they tend to be very
    long and difficult to remember. It is especially important for
    link-local IPv6 addresses, since not all programs support the '%'
    notation for indicating a network interface (required on systems with
    more than one network interface to disambiguate).
    
    In other words, instead of typing in this:
    
     * `http://[fe80::58dc:d7ed:a644:628f%en1]/`
    
    You can type this instead:
    
     * `http://contiki.local/`
    
    Huge improvement, no?
    
    The convenience extends beyond that: this mechanism can be used for
    nodes to talk to each other based on their human-readable names instead
    of their IPv6 addresses. So instead of a switch on
    `aaaa::58dc:d7ed:a644:628f` triggering an actuator on
    `aaaa::ed26:19c1:4bd2:f95b`, `light-switch.local` can trigger the
    actuator on `living-room-lights.local`.
    
    What you need to do to be able to look up `.local` names on your
    workstation depends on a few factors:
    
     * Your machine needs to be able to send and receive multicast packets
       to and from the LoWPAN. You can do this easily with the Jackdaw
       firmware on an RZUSBStick. If you have a border router, you will need
       it to bridge the mDNS multicast packets across the border.
    
     * If you are using a Mac, you win. All Apple devices support mDNS
       lookups.
    
     * If you are using Windows, you can install Apple's Bonjour for Windows
       package. (This may be already installed on your machine if you have
       installed iTunes) After you install this you can easily do `.local`
       lookups.
    
     * If you are using a Unix machine, you can install Avahi.
    
    The default hostname is set to `contiki.local.`. You can change the
    hostname programmatically by calling `resolv_set_hostname()`. You can
    change the default hostname by changing `CONTIKI_CONF_DEFAULT_HOSTNAME`.
    
    You may disable mDNS support by setting `RESOLV_CONF_SUPPORTS_MDNS` to
    `0`.
    
    ---------------------------------
    
    core/net/resolv: `resolv_lookup2()` -> `resolv_lookup()`
    
    Note that this patch should fix several `resolv_lookup()` bugs
    that already existed. There were many cases where `resolv_lookup()`
    was being called and the IP address ignored, but later code
    assumed that the IP address had been fetched... ANYWAY, those
    should be fixed now.
    
    ---------------------------------
    
    examples/udp-ipv6: Updated client to use MDNS to lookup the server.
    
    Also updated the Cooja regression test simulation.
    Allow user to read the result of wget.
    
    Several retro targets clear the screen after program termination so allow user to read the result.
    Have the wget process allow the resolver process to initialize properly.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the examples directory.
    Made use of PROCESS_PAUSE().
    Updated API for uiplib and resolv to use uip_ipaddr_t instead of uint16_t for compability with IPv6
    Some targets (i.e. the CBMs) don't echo the \n. Therefore print (additional) \n's.
    After a CTK wget and a shell wget finally a plain vanilla CLI wget.
    Added cmdline args support to wget example.
    Added missing 'atarixl' Makefile defines.
    After a CTK wget and a shell wget finally a plain vanilla CLI wget.
    Added cmdline args support to wget example.
    Activated Platform-specific File System (PFS) for the C64/C128 by default for all programs with R/W CFS access.
    After a CTK wget and a shell wget finally a plain vanilla CLI wget.
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    After a CTK wget and a shell wget finally a plain vanilla CLI wget.
    Now that we started adding files to the CVS which are normally generated with a 'save...' make goal we can remove the DEFAULT_TARGET mechanism altogether and just add Makefile.target files.
    Many project Makefiles build just one Contiki binary. Up to now the name of this binary was only available to the 'all' goal as prerequisite. So it was possible to create a non-project-specific rule to i.e. load that binary into the target device.
    
    Therefore I introduced the make variable CONTIKI_PROJECT. Now a typical project Makefile starts with:
    
    CONTIKI_PROJECT = hello-world
    all: $(CONTIKI_PROJECT)
    Introduced web browser as new example using ctk fullscreen mode.
    replaced blink with blinker that uses more sensors
    ESB examples
    Added an example application to show the usage of the Contiki Multi-threading library.
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    added remote power switch example for SeedEye board
    rest-example: don't do a hard override of config options
    Changed name of web-conf.h to project-conf.h
    Initial commit of a RESTful web service example using experimental COAP/HTTP/REST implementation for Contiki
    Web server example showing light and temperature sensor data
    Added simple web server listing the neighbors and routes
    reduced the buffers to save memory
    added project configuration
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    ntikiMAC: a new radio duty cycling mechanism that uses a combination
    of link-layer and MAC-layer mechanisms to achieve a very low power
    consumption: during idle listening the radio is switched off between
    99.2% and 99.6% of the time. One unicast transmission typically adds
    between 0.07% and 1.2% additional radio time, depending on packet
    size.
    
    ContikiMAC uses the standard IEEE 802.15.4 message format and adds no
    additional headers.
    
    ContikiMAC is simple: it uses periodic two-shot channel sampling
    during idle listening to keep the radio on-time down. Transmissions
    are done with repeated transmissions until a link-layer ACK is
    received.
    Increased the clock speed to 32768/4 from 32768/8 to provide better accuracy for power profiling of radio CCA checks
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    removed offset in rtimer_arch
    Reading timer now quicker, embryo for possible future drift configuration
    Fixed description
    MSP430 real-time rtimer support using timerb1
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    MSP430 definitions
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    added remote power switch example for SeedEye board
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Reduced the available commands to make code fit
    Added a telnet server with Twitter commands
    Example code for multi-hop Tmote Sky telnet server and web server
    TCP/IP-networking examples for the Tmote Sky platform
    Updated to new radio_driver API
    tr1001 init fix
    Added radio sniffer program
    More uip_ipaddr_t fixes.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Stop setting WITH_UIP6=1 in example Makefiles
    
    It achieves exactly nothing other than generate confusion
    remote power switch example updated to use coap version 13
    added remote power switch example for SeedEye board
    SkyByteRadio was replaced by Msp802154Radio
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Added a coap client and running coap-client-server COOJA simulation. Made README more detailed.
    minor cleanup of example (changed to use uiplib to parse IPv6 address)
    Fixed problems with boot order and short timeouts in the UDP tests.
    Converted the test to use examples/udp-ipv6
    explicit make clean before compiling firmwares
    Removed use of NULLMAC
    removed deprecated WITH_NULLMAC setting for IPv6.
    moved test scripts into simulation config (.csc)
    fixed udp test to use new addresses.
    with the recent mote type updates, the simulation config structure changed.
    
    * updated simconfigs
    added very simple sky ipv6 test: exercises the examples/udp-sender-ipv6 and examples/udp-receiver-ipv6 code
    updated  reference to moved plugin class VisUDGM. enables importing tests graphically again.
    more extensive rime abc testing:
    less than perfect radio environment (95%) + each node receives 30 radio messages each
    with target specific extensions (.sky)
    added two rime/sky tests: abc and trickle
    Modified project setup for er-rest-example and rest-example to use
    nullrdc and nullmac to reduce the code size. This allows the examples
    to compile on Tmote Sky again.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    rest-example: don't do a hard override of config options
    Changed name of web-conf.h to project-conf.h
    Initial commit of a RESTful web service example using experimental COAP/HTTP/REST implementation for Contiki
    Web server example showing light and temperature sensor data
    Added simple web server listing the neighbors and routes
    reduced the buffers to save memory
    added project configuration
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    ntikiMAC: a new radio duty cycling mechanism that uses a combination
    of link-layer and MAC-layer mechanisms to achieve a very low power
    consumption: during idle listening the radio is switched off between
    99.2% and 99.6% of the time. One unicast transmission typically adds
    between 0.07% and 1.2% additional radio time, depending on packet
    size.
    
    ContikiMAC uses the standard IEEE 802.15.4 message format and adds no
    additional headers.
    
    ContikiMAC is simple: it uses periodic two-shot channel sampling
    during idle listening to keep the radio on-time down. Transmissions
    are done with repeated transmissions until a link-layer ACK is
    received.
    Increased the clock speed to 32768/4 from 32768/8 to provide better accuracy for power profiling of radio CCA checks
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    removed offset in rtimer_arch
    Reading timer now quicker, embryo for possible future drift configuration
    Fixed description
    MSP430 real-time rtimer support using timerb1
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    MSP430 definitions
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    Moved the sht11 driver to its own module
    Converted u8_t to uint8_t and u16_t to uint16_t in the examples directory.
    Typo
    group light and leds together; use PLATFORM_HAS defines
    Changes for minimal-net and bug fix for buffer handling.
    patched rest-example
    Minor modification in .well-known/core service after the comments of Matthias Kovatsch.
    Added a coap client and running coap-client-server COOJA simulation. Made README more detailed.
    Converted u8_t to uint8_t and u16_t to uint16_t in the examples directory.
    rest-example: include <string.h> for memcpy
    Minor bug fix found by Niclas.
    Added more details to README and small printing modification in client example.
    Added a coap client and running coap-client-server COOJA simulation. Made README more detailed.
    SkyByteRadio was replaced by Msp802154Radio
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Added a coap client and running coap-client-server COOJA simulation. Made README more detailed.
    Added example COOJA simulation
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Stop setting WITH_UIP6=1 in example Makefiles
    
    It achieves exactly nothing other than generate confusion
    rest-example: add coap client to Makefile all goal
    rest-example is now rest-server-example
    patched rest-example
    Defined wITH_COAP=1 to made COAP default rather than HTTP
    Added some more description to README.
    Makefile update is about changing ifdef to ifeq so that users don't be misleaded.
    Added a coap client and running coap-client-server COOJA simulation. Made README more detailed.
    Removing unnecessary files to add the new ones.
    Updated PROJECT_CONF_H
    Initial commit of a RESTful web service example using experimental COAP/HTTP/REST implementation for Contiki
    Fixed to set address on interface
    Added rules to connect to slip bridge connected via serial or running in COOJA using tunslip6
    Added simple web server listing the neighbors and routes
    added project configuration
    added very basic rpl-border router example
    Updated include paths for the moved files under net/
    core/net/resolv: IPv6 and mDNS ("Bonjour") support. Major refactor.
    
    This patch updates the DNS resolver to support IPv6 and introduces an
    improved API for looking up DNS entries. This patch also adds optional
    support for mDNS lookups and responses to the DNS resolver.
    
    Here is a quick summary of the changes:
    
     * Added support for IPv6 lookups.
     * DNS queries now honor record expiration.
     * Added support for mDNS, compatible with "Bonjour".
     * Implemented a new lookup api, `resolv_lookup2()`, which provides
       more information about the state of the record(error, expired,
       looking-up, etc.).
    
    About mDNS/Bonjour Support
    --------------------------
    
    This patch adds basic support for mDNS/Bonjour, which allows you to
    refer to the name of a device instead of its IP address. This is
    incredibly convenient for IPv6 addresses because they tend to be very
    long and difficult to remember. It is especially important for
    link-local IPv6 addresses, since not all programs support the '%'
    notation for indicating a network interface (required on systems with
    more than one network interface to disambiguate).
    
    In other words, instead of typing in this:
    
     * `http://[fe80::58dc:d7ed:a644:628f%en1]/`
    
    You can type this instead:
    
     * `http://contiki.local/`
    
    Huge improvement, no?
    
    The convenience extends beyond that: this mechanism can be used for
    nodes to talk to each other based on their human-readable names instead
    of their IPv6 addresses. So instead of a switch on
    `aaaa::58dc:d7ed:a644:628f` triggering an actuator on
    `aaaa::ed26:19c1:4bd2:f95b`, `light-switch.local` can trigger the
    actuator on `living-room-lights.local`.
    
    What you need to do to be able to look up `.local` names on your
    workstation depends on a few factors:
    
     * Your machine needs to be able to send and receive multicast packets
       to and from the LoWPAN. You can do this easily with the Jackdaw
       firmware on an RZUSBStick. If you have a border router, you will need
       it to bridge the mDNS multicast packets across the border.
    
     * If you are using a Mac, you win. All Apple devices support mDNS
       lookups.
    
     * If you are using Windows, you can install Apple's Bonjour for Windows
       package. (This may be already installed on your machine if you have
       installed iTunes) After you install this you can easily do `.local`
       lookups.
    
     * If you are using a Unix machine, you can install Avahi.
    
    The default hostname is set to `contiki.local.`. You can change the
    hostname programmatically by calling `resolv_set_hostname()`. You can
    change the default hostname by changing `CONTIKI_CONF_DEFAULT_HOSTNAME`.
    
    You may disable mDNS support by setting `RESOLV_CONF_SUPPORTS_MDNS` to
    `0`.
    
    ---------------------------------
    
    core/net/resolv: `resolv_lookup2()` -> `resolv_lookup()`
    
    Note that this patch should fix several `resolv_lookup()` bugs
    that already existed. There were many cases where `resolv_lookup()`
    was being called and the IP address ignored, but later code
    assumed that the IP address had been fetched... ANYWAY, those
    should be fixed now.
    
    ---------------------------------
    
    examples/udp-ipv6: Updated client to use MDNS to lookup the server.
    
    Also updated the Cooja regression test simulation.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    minor cleanup of example (changed to use uiplib to parse IPv6 address)
    Updated for new for new uIPv6 APIs. Also fixed compiler warning.
    updated for new uIPv6 APIs
    a little faster autoconfiguration
    fixed debug output to show the correct remote address
    changed udp examples into a client and a server, added multi-hop routing,
    clarified the code.
    printing local ipv6 address at startup. addresses must match in order for the examples to work
    moved ipv6 udp example processes from apps/udp to inside examples/udp-receiver-ipv6 and examples/udp-sender-ipv6
    
    * transmitting human readable strings between the two processes
    * remote address configurable at compile time via DEFINES=...
    examples for uIPv6
    Platform-specific devices.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    core/net/resolv: Misc. updates and cleanups.
    core/net/resolv: IPv6 and mDNS ("Bonjour") support. Major refactor.
    
    This patch updates the DNS resolver to support IPv6 and introduces an
    improved API for looking up DNS entries. This patch also adds optional
    support for mDNS lookups and responses to the DNS resolver.
    
    Here is a quick summary of the changes:
    
     * Added support for IPv6 lookups.
     * DNS queries now honor record expiration.
     * Added support for mDNS, compatible with "Bonjour".
     * Implemented a new lookup api, `resolv_lookup2()`, which provides
       more information about the state of the record(error, expired,
       looking-up, etc.).
    
    About mDNS/Bonjour Support
    --------------------------
    
    This patch adds basic support for mDNS/Bonjour, which allows you to
    refer to the name of a device instead of its IP address. This is
    incredibly convenient for IPv6 addresses because they tend to be very
    long and difficult to remember. It is especially important for
    link-local IPv6 addresses, since not all programs support the '%'
    notation for indicating a network interface (required on systems with
    more than one network interface to disambiguate).
    
    In other words, instead of typing in this:
    
     * `http://[fe80::58dc:d7ed:a644:628f%en1]/`
    
    You can type this instead:
    
     * `http://contiki.local/`
    
    Huge improvement, no?
    
    The convenience extends beyond that: this mechanism can be used for
    nodes to talk to each other based on their human-readable names instead
    of their IPv6 addresses. So instead of a switch on
    `aaaa::58dc:d7ed:a644:628f` triggering an actuator on
    `aaaa::ed26:19c1:4bd2:f95b`, `light-switch.local` can trigger the
    actuator on `living-room-lights.local`.
    
    What you need to do to be able to look up `.local` names on your
    workstation depends on a few factors:
    
     * Your machine needs to be able to send and receive multicast packets
       to and from the LoWPAN. You can do this easily with the Jackdaw
       firmware on an RZUSBStick. If you have a border router, you will need
       it to bridge the mDNS multicast packets across the border.
    
     * If you are using a Mac, you win. All Apple devices support mDNS
       lookups.
    
     * If you are using Windows, you can install Apple's Bonjour for Windows
       package. (This may be already installed on your machine if you have
       installed iTunes) After you install this you can easily do `.local`
       lookups.
    
     * If you are using a Unix machine, you can install Avahi.
    
    The default hostname is set to `contiki.local.`. You can change the
    hostname programmatically by calling `resolv_set_hostname()`. You can
    change the default hostname by changing `CONTIKI_CONF_DEFAULT_HOSTNAME`.
    
    You may disable mDNS support by setting `RESOLV_CONF_SUPPORTS_MDNS` to
    `0`.
    
    ---------------------------------
    
    core/net/resolv: `resolv_lookup2()` -> `resolv_lookup()`
    
    Note that this patch should fix several `resolv_lookup()` bugs
    that already existed. There were many cases where `resolv_lookup()`
    was being called and the IP address ignored, but later code
    assumed that the IP address had been fetched... ANYWAY, those
    should be fixed now.
    
    ---------------------------------
    
    examples/udp-ipv6: Updated client to use MDNS to lookup the server.
    
    Also updated the Cooja regression test simulation.
    bugfix in fragmentation test mode: avoid reading from outside buffer placed on stack
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    minor cleanup of example (changed to use uiplib to parse IPv6 address)
    Support fragmentation testing.
    Updated for new for new uIPv6 APIs. Also fixed compiler warning.
    updated for new uIPv6 APIs
    a little faster autoconfiguration
    changed address setup slightly.
    changed udp examples into a client and a server, added multi-hop routing,
    clarified the code.
    printing local ipv6 address at startup. addresses must match in order for the examples to work
    moved ipv6 udp example processes from apps/udp to inside examples/udp-receiver-ipv6 and examples/udp-sender-ipv6
    
    * transmitting human readable strings between the two processes
    * remote address configurable at compile time via DEFINES=...
    examples for uIPv6
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    replaced DEFAULT_TARGET with Makefile.target for specifying default target
    Now that we started adding files to the CVS which are normally generated with a 'save...' make goal we can remove the DEFAULT_TARGET mechanism altogether and just add Makefile.target files.
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    replaced DEFAULT_TARGET with Makefile.target for specifying default target
    changed udp examples into a client and a server, added multi-hop routing,
    clarified the code.
    examples for uIPv6
    core/lib/settings: Generalized Settings Manager to work on any platform
    
    This commit moves the Settings Manager from the AVR codebase
    into the Contiki core library. Any platform that implements
    the Contiki EEPROM API can now use the Settings Manager's
    key-value store for storing their persistent configuration info.
    
    The Settings Manager is a EEPROM-based key-value store. Keys
    are 16-bit integers and values may be up to 16,383 bytes long.
    It is intended to be used to store configuration-related information,
    like network settings, radio channels, etc.
    
     * Robust data format which requires no initialization.
     * Supports multiple values with the same key.
     * Data can be appended without erasing EEPROM.
     * Max size of settings data can be easily increased in the future,
       as long as it doesn't overlap with application data.
    
    The format was inspired by the [OLPC manufacturing data format][].
    
    Since the beginning of EEPROM often contains application-specific
    information, the best place to store settings is at the end of EEPROM
    (the "top"). Because we are starting at the end of EEPROM, it makes
    sense to grow the list of key-value pairs downward, toward the start of
    EEPROM.
    
    Each key-value pair is stored in memory in the following format:
    
    Order    | Size     | Name         | Description
    --------:|---------:|--------------|-------------------------------
           0 |        2 | `key`        | 16-bit key
          -2 |        1 | `size_check` | One's-complement of next byte
          -3 |   1 or 2 | `size`       | The size of `value`, in bytes
    -4 or -5 | variable | `value`      | Value associated with `key`
    
    The end of the key-value pairs is denoted by the first invalid entry.
    An invalid entry has any of the following attributes:
    
     * The `size_check` byte doesn't match the one's compliment of the
       `size` byte (or `size_low` byte).
     * The key has a value of 0x0000.
    
    [OLPC manufacturing data format]: http://wiki.laptop.org/go/Manufacturing_data
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    core/lib/settings: Generalized Settings Manager to work on any platform
    
    This commit moves the Settings Manager from the AVR codebase
    into the Contiki core library. Any platform that implements
    the Contiki EEPROM API can now use the Settings Manager's
    key-value store for storing their persistent configuration info.
    
    The Settings Manager is a EEPROM-based key-value store. Keys
    are 16-bit integers and values may be up to 16,383 bytes long.
    It is intended to be used to store configuration-related information,
    like network settings, radio channels, etc.
    
     * Robust data format which requires no initialization.
     * Supports multiple values with the same key.
     * Data can be appended without erasing EEPROM.
     * Max size of settings data can be easily increased in the future,
       as long as it doesn't overlap with application data.
    
    The format was inspired by the [OLPC manufacturing data format][].
    
    Since the beginning of EEPROM often contains application-specific
    information, the best place to store settings is at the end of EEPROM
    (the "top"). Because we are starting at the end of EEPROM, it makes
    sense to grow the list of key-value pairs downward, toward the start of
    EEPROM.
    
    Each key-value pair is stored in memory in the following format:
    
    Order    | Size     | Name         | Description
    --------:|---------:|--------------|-------------------------------
           0 |        2 | `key`        | 16-bit key
          -2 |        1 | `size_check` | One's-complement of next byte
          -3 |   1 or 2 | `size`       | The size of `value`, in bytes
    -4 or -5 | variable | `value`      | Value associated with `key`
    
    The end of the key-value pairs is denoted by the first invalid entry.
    An invalid entry has any of the following attributes:
    
     * The `size_check` byte doesn't match the one's compliment of the
       `size` byte (or `size_low` byte).
     * The key has a value of 0x0000.
    
    [OLPC manufacturing data format]: http://wiki.laptop.org/go/Manufacturing_data
    Add CC26xx examples
    Add CC26xx examples
    Add MQTT demo for the cc2538dk platform
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add CC26xx examples
    Add CC26xx examples
    Add CC26xx examples
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Simplify the extended RF API example
    Add extended RF API example
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Add CC26xx examples
    Moved packetqueue to core/net/rime, as it is only used by the Rime collect protocol
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Moved ctimer.[ch] from their old and illogical location in core/net/rime to a more appropriate place in core/sys
    Added function for obtaining packet queue length
    New module: packetqueue. The packetqueue module maintains packet queues for other modules.
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Changed name of the sabc module to stbroadcast
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Documentation updates
    Make use of consistent timer interface code
    Fixed compilation problem, added send() call so that a packet is sent out immediately
    Added *_close() function to all Rime modules
    API change for Rime: *_setup() renamed to *_open()
    Renamed ulayer -> callbacks
    Initial import of the experimental Rime code into the SourceForge CVS.
    Make netsim more like the esb target
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add CC26xx examples
    Add CC26xx examples
    Add CC26xx examples
    Add CC26xx CPU files
    Add MQTT demo for the cc2538dk platform
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add CC26xx examples
    Add Srf06EB + CC26xx EM files
    Add CC26xx CPU files
    Add MQTT demo for the cc2538dk platform
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add CC26xx examples
    Add CC26xx examples
    Add CC26xx CPU files
    Add MQTT demo for the cc2538dk platform
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add CC26xx examples
    Add CC26xx examples
    Add CC26xx examples
    Add CC26xx examples
    Fixed doxygen formatting
    Add title to doxygen group
    Add MQTT demo for the cc2538dk platform
    Add CC26xx examples
    Add CC26xx examples
    Add CC26xx CPU files
    Add MQTT demo for the cc2538dk platform
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add CC26xx examples
    Add CC26xx examples
    Add CC26xx examples
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Fixed compiler warnings
    fixed sensors_find API
    removed obsolete structure
    simplified the sensors API - will break some platforms...
    Limit number of sensor events to avoid overflowing event queue
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add CC26xx examples
    Add CC26xx examples
    Add CC26xx examples
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    Add CC26xx examples
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Add missing includes, remove unimplemented function declaration.
    added static on the list send functions to get less compiler errors with IAR compiler
    Include string.h
    Added bursts support in CSMA/ContikiMAC, and CFS-swapping in
    queuebuf. Exemplified in examples/udp-stream.
    Renamed nullrdc to nullrdc-noframer and nullrdc-framer to nullrdc.
    
    nullrdc (previously nullrdc-framer) is now a RDC implementation that
    does not do any radio duty cycling but supports link layer addresses
    and frame format via framer (for example 802.15.4). nullrdc can now be
    used in the same way as contikimac, xmac, etc.
    
    nullrdc-noframer (previously nullrdc) is a null RDC implementation
    that does not do any radio duty cycling, does not add any header of its
    own to the packets, and does not support link layer addresses.
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Added a field to the struct mac interface:
    channel_check_interval(). This function returns the interval by which
    the duty cycling mechanism checks the radio channel for activity. It
    is used by higher layer mechanisms to determine suitable timeouts for
    retransmissions.
    Code style fix
    generic return values for sent packet
    added init function in MAC driver for easier configuration
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    added name to mac structure
    Added parameter to the mac off() method that specifies whether or not the radio should be turned off when the MAC layer is turned off
    Avoid usage of POSIX function names even for static functions as some indirectly included system header might declare them.
    Ensure that receiver_callback is set before calling it
    Made initialization function return a pointer to the MAC driver structure, to make initialization nicer
    Modified to use the new MAC layer API
    Avoid function pointer mismatch in set_receive_function().
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add CC26xx examples
    Add CC26xx examples
    Add CC26xx examples
    Add CC26xx examples
    Add CC26xx examples
    Add a compile test for the tcp-socket example
    TCP socket server example
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    TCP socket server example
    Regression tests for RPL, Rime trickle, and Rime mesh routing protocols
    
    The RPL tests test up and down routing, root reboots, 28-hour tests, and tests with more nodes than fit the routing tables
    removed execute flag of source files (avoids diff problems with egit)
    Adding a Makfile for example applications.
    Added a Contiki app basically combining apps/netconf and apps/dhcp. It's a 6502 specific app as it doesn't configure the running uIP instance but instead writes to the 'contiki.cfg' configuration file used by 6502 apps to configure uIP.
    Now that we started adding files to the CVS which are normally generated with a 'save...' make goal we can remove the DEFAULT_TARGET mechanism altogether and just add Makefile.target files.
    Many project Makefiles build just one Contiki binary. Up to now the name of this binary was only available to the 'all' goal as prerequisite. So it was possible to create a non-project-specific rule to i.e. load that binary into the target device.
    
    Therefore I introduced the make variable CONTIKI_PROJECT. Now a typical project Makefile starts with:
    
    CONTIKI_PROJECT = hello-world
    all: $(CONTIKI_PROJECT)
    replaced blink with blinker that uses more sensors
    ESB examples
    Added an example application to show the usage of the Contiki Multi-threading library.
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Readded the shell file module so that the nightly test works
    Removed Coffee to reduces the size to make it compile successfully
    Renamed the serial module to serial-line
    sky example running both webserver and serial shell (overrides default slip handler)
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    added makefile with saved target
    Example shell for the Sentilla JCreate
    Now that we started adding files to the CVS which are normally generated with a 'save...' make goal we can remove the DEFAULT_TARGET mechanism altogether and just add Makefile.target files.
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    core/net/resolv: IPv6 and mDNS ("Bonjour") support. Major refactor.
    
    This patch updates the DNS resolver to support IPv6 and introduces an
    improved API for looking up DNS entries. This patch also adds optional
    support for mDNS lookups and responses to the DNS resolver.
    
    Here is a quick summary of the changes:
    
     * Added support for IPv6 lookups.
     * DNS queries now honor record expiration.
     * Added support for mDNS, compatible with "Bonjour".
     * Implemented a new lookup api, `resolv_lookup2()`, which provides
       more information about the state of the record(error, expired,
       looking-up, etc.).
    
    About mDNS/Bonjour Support
    --------------------------
    
    This patch adds basic support for mDNS/Bonjour, which allows you to
    refer to the name of a device instead of its IP address. This is
    incredibly convenient for IPv6 addresses because they tend to be very
    long and difficult to remember. It is especially important for
    link-local IPv6 addresses, since not all programs support the '%'
    notation for indicating a network interface (required on systems with
    more than one network interface to disambiguate).
    
    In other words, instead of typing in this:
    
     * `http://[fe80::58dc:d7ed:a644:628f%en1]/`
    
    You can type this instead:
    
     * `http://contiki.local/`
    
    Huge improvement, no?
    
    The convenience extends beyond that: this mechanism can be used for
    nodes to talk to each other based on their human-readable names instead
    of their IPv6 addresses. So instead of a switch on
    `aaaa::58dc:d7ed:a644:628f` triggering an actuator on
    `aaaa::ed26:19c1:4bd2:f95b`, `light-switch.local` can trigger the
    actuator on `living-room-lights.local`.
    
    What you need to do to be able to look up `.local` names on your
    workstation depends on a few factors:
    
     * Your machine needs to be able to send and receive multicast packets
       to and from the LoWPAN. You can do this easily with the Jackdaw
       firmware on an RZUSBStick. If you have a border router, you will need
       it to bridge the mDNS multicast packets across the border.
    
     * If you are using a Mac, you win. All Apple devices support mDNS
       lookups.
    
     * If you are using Windows, you can install Apple's Bonjour for Windows
       package. (This may be already installed on your machine if you have
       installed iTunes) After you install this you can easily do `.local`
       lookups.
    
     * If you are using a Unix machine, you can install Avahi.
    
    The default hostname is set to `contiki.local.`. You can change the
    hostname programmatically by calling `resolv_set_hostname()`. You can
    change the default hostname by changing `CONTIKI_CONF_DEFAULT_HOSTNAME`.
    
    You may disable mDNS support by setting `RESOLV_CONF_SUPPORTS_MDNS` to
    `0`.
    
    ---------------------------------
    
    core/net/resolv: `resolv_lookup2()` -> `resolv_lookup()`
    
    Note that this patch should fix several `resolv_lookup()` bugs
    that already existed. There were many cases where `resolv_lookup()`
    was being called and the IP address ignored, but later code
    assumed that the IP address had been fetched... ANYWAY, those
    should be fixed now.
    
    ---------------------------------
    
    examples/udp-ipv6: Updated client to use MDNS to lookup the server.
    
    Also updated the Cooja regression test simulation.
    Compile with SMALL=1 to make binary fit in memory
    Have to remove PLATFORM_BUILD from the makefile to make code fit into memory
    Removed Coffee to reduces the size to make it compile successfully
    added webserver-nogui source and WITH_NULLMAC to example code (too large otherwise)
    sky example running both webserver and serial shell (overrides default slip handler)
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    exec shell command and elfloader example
    Fixed problem that made error output not visible
    Makefile for compiling a set of Contiki platforms and produce error messages for those platforms that do not compile
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    Moved net/rime.h to net/rime/rime.h
    Moved the sht11 driver to its own module
    Moved the cc2420 driver into a separate dev/cc2420 module
    Removed the experimental checkpointing code
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    removed io.h include, now handled by Contiki to support more compilers
    neighbor.h was removed
    added dec64 command
    exec shell command and elfloader example
    Renamed the serial module to serial-line
    sky example running both webserver and serial shell (overrides default slip handler)
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    decreased elf loader memory to avoid stack overflow
    exec shell command and elfloader example
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    examples for uIPv6
    Import of the contiki-2.x development code from the SICS internal CVS server
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    replaced DEFAULT_TARGET with Makefile.target for specifying default target
    Now that we started adding files to the CVS which are normally generated with a 'save...' make goal we can remove the DEFAULT_TARGET mechanism altogether and just add Makefile.target files.
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    examples/webserver-ipv6: Add UIP_CONF_TCP=1 to DEFINES.
    
    TCP is mandatory for this HTTP server.
    
    Fixes builds for platforms which have TCP turned off by default (mulle)
    
    Signed-off-by: Joakim Gebart <joakim.gebart@eistec.se>
    Ensure MAXDADNS is defined in uip-ds6.h
    Set no RPL as webserver6.minimal-net default and update README
    Compile with SMALL=1 to make binary fit in memory
    Print elf size if ELF_SIZE is defined
    Added 'webserver6' to CONTIKI_PROJECT.  This enables make upload.
    Raven-webserver needs raven-lcd-interface
    Add WITH_WEBSERVER=<webserver> options
    Ensure that uIPv6 always is compiled and used
    replaced DEFAULT_TARGET with Makefile.target for specifying default target
    Debugged autoconf for ethernet
    examples for uIPv6
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Forgot these files!
    examples for uIPv6
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    RPL is now default.
    Drop unneded null byte at end of httpd-fsdata files.
    Implement WITH_RPL option in makefile
    Commit with CRLF line endings for github line ending conversion test.
    Keep httpd-fsdata.c on a $make clean, add documentation.
    *** empty log message ***
    Add rf230bb radio driver with conditional make on RF230BB=1
    Change makefile to build with just 'make'
    Forgot these files!
    Debugged autoconf for ethernet
    examples for uIPv6
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    Add settings manager with program flash defaults, random routine, periodic prints with ENERGEST, node-id.
    A second line ending commit which hopefully won't get pushed.
    Allow other (compatible) AVR targets
    $make will show avr-size once and only once whether or not a build needs to occur.
    Use proper recursive make invokation
    Keep httpd-fsdata.c on a $make clean, add documentation.
    *** empty log message ***
    Remove signature bytes from hex file
    remove .fuse section from hex file, add mcu
    Change makefile to build with just 'make'
    Forgot these files!
    Debugged autoconf for ethernet
    examples for uIPv6
    Add Huginn and Muninn web content
    Add Huginn and Muninn web content
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add Huginn and Muninn web content
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Changes to raven-webserver by "David Kopf" <dak664@embarqmail.com>:
        *Fixed bug in the cgi script handling
        *Making a special check for index.html and treating it like index.shtml to
            allow a common header for all files.
        *adding robots.txt to keep google, msn, yahoo out
        *adding a nice icon through a <link rel="icon"... in the header
        *saying "not enabled" for temperature if it hasn't been initialized
    Minor format and comment changes
    Add status page, change ipv6 address to ::101 and ::102
    Add Huginn and Muninn web content
    Fix html compliance, use wildcard in file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Changes by "David Kopf" <dak664@embarqmail.com> to:
     -Add hit counter to index.html
     -Adding link to favicon.png
     -Fix serving of binary (image) files in avr-makefsdata file
    
    Changes by Colin O'Flynn:
     -Removed extra linebreak in tutorial-raven.txt
     -Fix to contiki-conf.h in avr-rcb platform
    webserver app for RAVEN platform
    applications updates for uIPv6
    Updated with new Contiki website URL
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add Huginn and Muninn web content
    Fix html compliance, use wildcard in file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add Huginn and Muninn web content
    Fix html compliance, use wildcard in file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Changes by "David Kopf" <dak664@embarqmail.com> to:
     -Add hit counter to index.html
     -Adding link to favicon.png
     -Fix serving of binary (image) files in avr-makefsdata file
    
    Changes by Colin O'Flynn:
     -Removed extra linebreak in tutorial-raven.txt
     -Fix to contiki-conf.h in avr-rcb platform
    Changes to raven-webserver by "David Kopf" <dak664@embarqmail.com>:
        *Fixed bug in the cgi script handling
        *Making a special check for index.html and treating it like index.shtml to
            allow a common header for all files.
        *adding robots.txt to keep google, msn, yahoo out
        *adding a nice icon through a <link rel="icon"... in the header
        *saying "not enabled" for temperature if it hasn't been initialized
    webserver app for RAVEN platform
    Add Huginn and Muninn web content
    Fix html compliance, use wildcard in file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Updated processes HTML to match script output
    Import of the contiki-2.x development code from the SICS internal CVS server
    Patch from Landon Fuller adds const to PROGMEM, required for newer avr-gcc
    Change Huginn and Muninn for params.c storage
    Give jackdaw fe80::0 address  and number webservers from fe80::1
    Add status page, change ipv6 address to ::101 and ::102
    Add documentation
    Add Huginn and Muninn web content
    Add Huginn and Muninn web content
    Fix html compliance, use wildcard in file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Changes by "David Kopf" <dak664@embarqmail.com> to:
     -Add hit counter to index.html
     -Adding link to favicon.png
     -Fix serving of binary (image) files in avr-makefsdata file
    
    Changes by Colin O'Flynn:
     -Removed extra linebreak in tutorial-raven.txt
     -Fix to contiki-conf.h in avr-rcb platform
    Changes to raven-webserver by "David Kopf" <dak664@embarqmail.com>:
        *Fixed bug in the cgi script handling
        *Making a special check for index.html and treating it like index.shtml to
            allow a common header for all files.
        *adding robots.txt to keep google, msn, yahoo out
        *adding a nice icon through a <link rel="icon"... in the header
        *saying "not enabled" for temperature if it hasn't been initialized
    webserver app for RAVEN platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add Huginn and Muninn web content
    Fix html compliance, use wildcard in file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add Huginn and Muninn web content
    Fix html compliance, use wildcard in file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add Huginn and Muninn web content
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Changes by "David Kopf" <dak664@embarqmail.com> to:
     -Add hit counter to index.html
     -Adding link to favicon.png
     -Fix serving of binary (image) files in avr-makefsdata file
    
    Changes by Colin O'Flynn:
     -Removed extra linebreak in tutorial-raven.txt
     -Fix to contiki-conf.h in avr-rcb platform
    webserver app for RAVEN platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add status page, change ipv6 address to ::101 and ::102
    Add Huginn and Muninn web content
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Changes to raven-webserver by "David Kopf" <dak664@embarqmail.com>:
        *Fixed bug in the cgi script handling
        *Making a special check for index.html and treating it like index.shtml to
            allow a common header for all files.
        *adding robots.txt to keep google, msn, yahoo out
        *adding a nice icon through a <link rel="icon"... in the header
        *saying "not enabled" for temperature if it hasn't been initialized
    Add Huginn and Muninn web content
    Add Huginn and Muninn web content
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add Huginn and Muninn web content
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Changes to raven-webserver by "David Kopf" <dak664@embarqmail.com>:
        *Fixed bug in the cgi script handling
        *Making a special check for index.html and treating it like index.shtml to
            allow a common header for all files.
        *adding robots.txt to keep google, msn, yahoo out
        *adding a nice icon through a <link rel="icon"... in the header
        *saying "not enabled" for temperature if it hasn't been initialized
    Minor format and comment changes
    Add status page, change ipv6 address to ::101 and ::102
    Add Huginn and Muninn web content
    Fix html compliance, use wildcard in file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Changes by "David Kopf" <dak664@embarqmail.com> to:
     -Add hit counter to index.html
     -Adding link to favicon.png
     -Fix serving of binary (image) files in avr-makefsdata file
    
    Changes by Colin O'Flynn:
     -Removed extra linebreak in tutorial-raven.txt
     -Fix to contiki-conf.h in avr-rcb platform
    webserver app for RAVEN platform
    applications updates for uIPv6
    Updated with new Contiki website URL
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add Huginn and Muninn web content
    Fix html compliance, use wildcard in file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add Huginn and Muninn web content
    Fix html compliance, use wildcard in file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Changes by "David Kopf" <dak664@embarqmail.com> to:
     -Add hit counter to index.html
     -Adding link to favicon.png
     -Fix serving of binary (image) files in avr-makefsdata file
    
    Changes by Colin O'Flynn:
     -Removed extra linebreak in tutorial-raven.txt
     -Fix to contiki-conf.h in avr-rcb platform
    Changes to raven-webserver by "David Kopf" <dak664@embarqmail.com>:
        *Fixed bug in the cgi script handling
        *Making a special check for index.html and treating it like index.shtml to
            allow a common header for all files.
        *adding robots.txt to keep google, msn, yahoo out
        *adding a nice icon through a <link rel="icon"... in the header
        *saying "not enabled" for temperature if it hasn't been initialized
    webserver app for RAVEN platform
    Add Huginn and Muninn web content
    Fix html compliance, use wildcard in file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Updated processes HTML to match script output
    Import of the contiki-2.x development code from the SICS internal CVS server
    Patch from Landon Fuller adds const to PROGMEM, required for newer avr-gcc
    Change Huginn and Muninn for params.c storage
    Give jackdaw fe80::0 address  and number webservers from fe80::1
    Add status page, change ipv6 address to ::101 and ::102
    Add Huginn and Muninn web content
    Add Huginn and Muninn web content
    Fix html compliance, use wildcard in file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Changes by "David Kopf" <dak664@embarqmail.com> to:
     -Add hit counter to index.html
     -Adding link to favicon.png
     -Fix serving of binary (image) files in avr-makefsdata file
    
    Changes by Colin O'Flynn:
     -Removed extra linebreak in tutorial-raven.txt
     -Fix to contiki-conf.h in avr-rcb platform
    Changes to raven-webserver by "David Kopf" <dak664@embarqmail.com>:
        *Fixed bug in the cgi script handling
        *Making a special check for index.html and treating it like index.shtml to
            allow a common header for all files.
        *adding robots.txt to keep google, msn, yahoo out
        *adding a nice icon through a <link rel="icon"... in the header
        *saying "not enabled" for temperature if it hasn't been initialized
    webserver app for RAVEN platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add Huginn and Muninn web content
    Fix html compliance, use wildcard in file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add Huginn and Muninn web content
    Fix html compliance, use wildcard in file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add Huginn and Muninn web content
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Changes by "David Kopf" <dak664@embarqmail.com> to:
     -Add hit counter to index.html
     -Adding link to favicon.png
     -Fix serving of binary (image) files in avr-makefsdata file
    
    Changes by Colin O'Flynn:
     -Removed extra linebreak in tutorial-raven.txt
     -Fix to contiki-conf.h in avr-rcb platform
    webserver app for RAVEN platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add status page, change ipv6 address to ::101 and ::102
    Add Huginn and Muninn web content
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Changes to raven-webserver by "David Kopf" <dak664@embarqmail.com>:
        *Fixed bug in the cgi script handling
        *Making a special check for index.html and treating it like index.shtml to
            allow a common header for all files.
        *adding robots.txt to keep google, msn, yahoo out
        *adding a nice icon through a <link rel="icon"... in the header
        *saying "not enabled" for temperature if it hasn't been initialized
    Removed the experimental checkpointing code
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Example application that runs the Contiki Shell with Collect View
    Reduced size of binary to fit on Tmote Sky platform
    Removed sendtest command to make binary fit in Tmote Sky
    Example code for using the shell netperf command
    Renamed the serial module to serial-line
    sky example running both webserver and serial shell (overrides default slip handler)
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Example application that runs the Contiki Shell with Collect View
    Replaced the old sky-alldata command with the new collect-view-data command. Added the new shell powertrace command. Cleaned up.
    dependa on powertrace application
    Added a generic file-upload command. shell-upload only takes .ce files.
    Changed from shell app to serial-shell app
    Bugfix in netsend commands
    Added target for sky-shell-collect.c data collection
    Removed redundant targets
    Now that we started adding files to the CVS which are normally generated with a 'save...' make goal we can remove the DEFAULT_TARGET mechanism altogether and just add Makefile.target files.
    Many project Makefiles build just one Contiki binary. Up to now the name of this binary was only available to the 'all' goal as prerequisite. So it was possible to create a non-project-specific rule to i.e. load that binary into the target device.
    
    Therefore I introduced the make variable CONTIKI_PROJECT. Now a typical project Makefile starts with:
    
    CONTIKI_PROJECT = hello-world
    all: $(CONTIKI_PROJECT)
    Example application that runs the Contiki shell on the Tmote Sky
    SkyByteRadio was replaced by Msp802154Radio
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Example application that runs the Contiki Shell with Collect View
    Data collection example
    Updated tests to match new collect-view-data command syntax
    Increased number of retransmissions from 15 to 31
    A version of the Contiki shell collect test but with stocastic packet loss. This tests that the collect protocol correctly handles lossy networks.
    workaround to survive the bad characters that are sometimes printed by mspsim-based motes + make clean before compilation
    Rewrite of the Sky shell collect test. The new test is better equipped
    to handle reordered packets - unlike the previous test, the new test
    counts all incoming packets in the data stream, even those that are
    significantly reordered. The new test also shows the received packets
    and their hop counts in a much more readable fashion.
    New and improved shell collect test: the new test sends out 10 packets from each node and counts the received packets. If less than 10 packets from each node is received, the test fails
    explicit make clean before compiling firmwares
    Moved the TIMEOUT() definition until after the print_stats() definition so that the print_stats() function can be called when the TIMEOUT() is invoked
    Print stats even when test fails
    Increased timeout
    Increased the transmission time to 40 seconds from 20 seconds
    moved test scripts into simulation config (.csc)
    with the recent mote type updates, the simulation config structure changed.
    
    * updated simconfigs
    Nightly test that runs Contiki's shell collect command in much the same way as the Contiki collect program does
    A nightly test of the Rime collect protocol on the sky platform
    Updated include paths for the moved files under net/
    Cleanup of the node-id.h files. The node-id.h file contains
    declarations of functions for setting and getting a node ID number, a
    functionality that exists on many platforms. Since this functionality
    was not considered part of the Contiki core, each platform defined its
    own node-id.h file. This commit attempts to clean this up by
    collecting the node-id.h into a core/sys/node-id.h file that replaces
    the old node-id.h files from the platform directories.
    Print out sender IPv6 address when receiving data. When sending data, include a counter in the message.
    Copyright headers
    Made the simple UDP examples simpler
    Example code for the simple UDP API
    SkyByteRadio was replaced by Msp802154Radio
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Simulation file for the unicast example
    fixed line endings
    A quick and dirty service registry daemon hack. The servreg-hack
    allows a program to register an 8-bit service ID that gets
    disseminated to the entire network, as long as a servreg-hack daemon
    is running on all neighbors. Other nodes can look up the service ID to
    figure out what nodes in the network offer this service.
    
    This is officially labeled as a "hack" so that we don't get too comfy
    with it; this hack is not the future of service discovery and
    advertisement in Contiki.
    Updated include paths for the moved files under net/
    Copyright headers
    Made the simple UDP examples simpler
    Example code for the simple UDP API
    Updated include paths for the moved files under net/
    Update to the newest RPL API
    Print out sender IPv6 address when receiving data. When sending data, include a counter in the message.
    Copyright headers
    Example code for the simple UDP API
    SkyByteRadio was replaced by Msp802154Radio
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Simulation file for the broadcast example
    Broadcast example
    explicit make clean before compiling firmwares
    Wait 1s before pressing the button to give the button sensor time to activate
    moved test scripts into simulation config (.csc)
    with the recent mote type updates, the simulation config structure changed.
    
    * updated simconfigs
    updated  reference to moved plugin class VisUDGM. enables importing tests graphically again.
    with target specific extensions (.sky)
    added two rime/sky tests: abc and trickle
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Stop setting WITH_UIP6=1 in example Makefiles
    
    It achieves exactly nothing other than generate confusion
    Example code for the simple UDP API
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Minor code style fixes
    IPv6 Multicast Example
    Updated include paths for the moved files under net/
    Replace reads of rimestats with RIMESTATS_GET(x)
    cc2530 udp server example is no longer RPL root by default
    Code style fixes: cc2530dk examples
    cc2530dk and Sensinode example udp server code cleanup
    Offload some bytes off the cc2x3x stack for the sensinode & cc2530dk udp server example
    cc2530dk example comment fix
    Fixed mis-formatted printfs
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    IPv6 Multicast Example
    Reincarnate the sensinode/cc2430 port
    removed refences to printf2log.h
    cooja hello world (+ include printf2log.h)
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    IPv6 Multicast Example
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Added Erbium coap-12 and coap-13.
    Updated file references and README.
    Cleaned up filenames
    Added Erbium REST engine with new CoAP implementation
    Added a coap client and running coap-client-server COOJA simulation. Made README more detailed.
    Added example COOJA simulation
    Cleanup UIP_CONF_IPV6_RPL configuration
    IPv6 Multicast Example
    Decrease Sensinode example code size
    Replace reads of rimestats with RIMESTATS_GET(x)
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Reincarnate the sensinode/cc2430 port
    Broke out serial-shell from the shell app into its own app. Project can use the serial-shell to get a shell running over the serial line, just like a project can use the telnetd to get a shell running over Telnet/TCP/IP.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Minor code style fixes
    IPv6 Multicast Example
    Updated include paths for the moved files under net/
    core/net/resolv: IPv6 and mDNS ("Bonjour") support. Major refactor.
    
    This patch updates the DNS resolver to support IPv6 and introduces an
    improved API for looking up DNS entries. This patch also adds optional
    support for mDNS lookups and responses to the DNS resolver.
    
    Here is a quick summary of the changes:
    
     * Added support for IPv6 lookups.
     * DNS queries now honor record expiration.
     * Added support for mDNS, compatible with "Bonjour".
     * Implemented a new lookup api, `resolv_lookup2()`, which provides
       more information about the state of the record(error, expired,
       looking-up, etc.).
    
    About mDNS/Bonjour Support
    --------------------------
    
    This patch adds basic support for mDNS/Bonjour, which allows you to
    refer to the name of a device instead of its IP address. This is
    incredibly convenient for IPv6 addresses because they tend to be very
    long and difficult to remember. It is especially important for
    link-local IPv6 addresses, since not all programs support the '%'
    notation for indicating a network interface (required on systems with
    more than one network interface to disambiguate).
    
    In other words, instead of typing in this:
    
     * `http://[fe80::58dc:d7ed:a644:628f%en1]/`
    
    You can type this instead:
    
     * `http://contiki.local/`
    
    Huge improvement, no?
    
    The convenience extends beyond that: this mechanism can be used for
    nodes to talk to each other based on their human-readable names instead
    of their IPv6 addresses. So instead of a switch on
    `aaaa::58dc:d7ed:a644:628f` triggering an actuator on
    `aaaa::ed26:19c1:4bd2:f95b`, `light-switch.local` can trigger the
    actuator on `living-room-lights.local`.
    
    What you need to do to be able to look up `.local` names on your
    workstation depends on a few factors:
    
     * Your machine needs to be able to send and receive multicast packets
       to and from the LoWPAN. You can do this easily with the Jackdaw
       firmware on an RZUSBStick. If you have a border router, you will need
       it to bridge the mDNS multicast packets across the border.
    
     * If you are using a Mac, you win. All Apple devices support mDNS
       lookups.
    
     * If you are using Windows, you can install Apple's Bonjour for Windows
       package. (This may be already installed on your machine if you have
       installed iTunes) After you install this you can easily do `.local`
       lookups.
    
     * If you are using a Unix machine, you can install Avahi.
    
    The default hostname is set to `contiki.local.`. You can change the
    hostname programmatically by calling `resolv_set_hostname()`. You can
    change the default hostname by changing `CONTIKI_CONF_DEFAULT_HOSTNAME`.
    
    You may disable mDNS support by setting `RESOLV_CONF_SUPPORTS_MDNS` to
    `0`.
    
    ---------------------------------
    
    core/net/resolv: `resolv_lookup2()` -> `resolv_lookup()`
    
    Note that this patch should fix several `resolv_lookup()` bugs
    that already existed. There were many cases where `resolv_lookup()`
    was being called and the IP address ignored, but later code
    assumed that the IP address had been fetched... ANYWAY, those
    should be fixed now.
    
    ---------------------------------
    
    examples/udp-ipv6: Updated client to use MDNS to lookup the server.
    
    Also updated the Cooja regression test simulation.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    minor cleanup of example (changed to use uiplib to parse IPv6 address)
    Updated for new for new uIPv6 APIs. Also fixed compiler warning.
    updated for new uIPv6 APIs
    a little faster autoconfiguration
    fixed debug output to show the correct remote address
    changed udp examples into a client and a server, added multi-hop routing,
    clarified the code.
    printing local ipv6 address at startup. addresses must match in order for the examples to work
    moved ipv6 udp example processes from apps/udp to inside examples/udp-receiver-ipv6 and examples/udp-sender-ipv6
    
    * transmitting human readable strings between the two processes
    * remote address configurable at compile time via DEFINES=...
    examples for uIPv6
    Platform-specific devices.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    IPv6 Multicast Example
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    cc2530dk: Sniffer example changes:
    
    - Building for the cc2531 USB dongle by default
    - We turn on USB-serial buffered mode
    
    Closes #21
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updated for the latest version of httpd-simple in rpl-border-router
    Moved project-conf.h
    Web server example showing light and temperature sensor data
    Added simple web server listing the neighbors and routes
    reduced the buffers to save memory
    added project configuration
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    ntikiMAC: a new radio duty cycling mechanism that uses a combination
    of link-layer and MAC-layer mechanisms to achieve a very low power
    consumption: during idle listening the radio is switched off between
    99.2% and 99.6% of the time. One unicast transmission typically adds
    between 0.07% and 1.2% additional radio time, depending on packet
    size.
    
    ContikiMAC uses the standard IEEE 802.15.4 message format and adds no
    additional headers.
    
    ContikiMAC is simple: it uses periodic two-shot channel sampling
    during idle listening to keep the radio on-time down. Transmissions
    are done with repeated transmissions until a link-layer ACK is
    received.
    Increased the clock speed to 32768/4 from 32768/8 to provide better accuracy for power profiling of radio CCA checks
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    removed offset in rtimer_arch
    Reading timer now quicker, embryo for possible future drift configuration
    Fixed description
    MSP430 real-time rtimer support using timerb1
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    MSP430 definitions
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updated for the latest version of httpd-simple in rpl-border-router
    fixed parsing of address to handle [<addr>]
    Renamed wget() to wget_get() and added server port as argument
    Added example using HTTP to control and be controlled.
    minor cleanup
    Added web pages "/1" and "/0" to turn leds on or off
    Web server example showing light and temperature sensor data
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    Added documentation
    Web server example showing light and temperature sensor data
    minor cleanup
    Now that we started adding files to the CVS which are normally generated with a 'save...' make goal we can remove the DEFAULT_TARGET mechanism altogether and just add Makefile.target files.
    Updated include paths for the moved files under net/
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the examples directory.
    Updated for the latest version of httpd-simple in rpl-border-router
    Renamed wget() to wget_get() and added server port as argument
    Added example using HTTP to control and be controlled.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Renamed wget() to wget_get() and added server port as argument
    Added example using HTTP to control and be controlled.
    added uip-driver (for both ivp4 and ipv6), setting WITH_UIP* compiler flags in Makefile
    Updated to match the new netstack api
    Added a new module called "framer" that creates MAC level frames to
    the packetbuf from packet attributes. Two framer modules are included,
    one that creates 802.15.4 frame headers, and one that creates a
    minimal "nullmac"-style header that only contains the link-local
    addresses.
    added multihop routing support through replaceable modules. first implementation
    uses rime's route discovery by translating between ipv6 and rime addresses.
    added experimental checkpointing functionality:
    currently only implemented on the sky platform
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    SkyByteRadio was replaced by Msp802154Radio
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Added example COOJA simulation
    Moved the sht11 driver to its own module
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updated for the latest version of httpd-simple in rpl-border-router
    Added dummy light driver. Now skywebsense likes Z1
    
    The light sensor driver is mapped to the same pin as the potentiometer
    in Z1 Starter Platform. sky-websense is untouched, though.
    Sky-websense compiles for Z1 (testing)
    minor cleanup
    Added web pages "/1" and "/0" to turn leds on or off
    Web server example showing light and temperature sensor data
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Stop setting WITH_UIP6=1 in example Makefiles
    
    It achieves exactly nothing other than generate confusion
    Updated for the latest version of httpd-simple in rpl-border-router
    Made the sky and z1 platform handling of PROJECT_CONF_H the same as the other platforms: the makefile should define PROJECT_CONF_H to be the name of the header file to include. This header file should #undef everything it #defines, as it is included after all the other configuration options in contiki-conf.h
    Let RPL examples enable platform RPL
    Moved project-conf.h
    Added example using HTTP to control and be controlled.
    Fixed to set address on interface
    Added rules to connect to slip bridge connected via serial or running in COOJA using tunslip6
    Web server example showing light and temperature sensor data
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    output buffer unused at present, save some RAM
    Added simple web server listing the neighbors and routes
    Added Sentilla Jcreate platform. This platform is similar to the Sky platform but with other sensors and 8 leds.
    Moved ninimal-ppp into backyard as it depends on the uIP ppp support.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    We can now turn off example-provided putchars
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Turn off RDC before SLIP prefix interchange. Disable SIN/SUT prints, leave off-route prints.
    added response to Mac addr request and added addrs in printout
    added undef of putchar for platforms where it is a macro
    moved config file
    added missing include
    updated with support for getting prefix from tunslip6 and for setting RPL prefix
    added very basic rpl-border router example
    Made SLIP code coexist with ordinary serial code. If WITH_UIP=1, the SLIP code is used instead.
    Added energy estimation
    Removed clock_delay()
    Added clock_delay() between characters to avoid dropping them
    * General stuff for different baudrates:
    
        - ubr argument to slip_arch_int
    
        - macros for calculating ubr
    
        - argument -Bbaudrate to tools tunslip and scat
    * Bump speed over serial to 115200 (Tmote sky only).
    Use LPM4_EXIT to return from sleep on msp430.
    Import of the contiki-2.x development code from the SICS internal CVS server
    examples/rpl-border-router: Fix two minor warnings.
    
     - Remove unused variable i in generate_routes.
     - Add cast to unsigned long for printf(..%lu..) in generate_routes.
    
    Signed-off-by: Joakim Gebart <joakim.gebart@eistec.se>
    Make DODAG ID selection RFC 6550-compliant
    
    Some calls to `rpl_set_root` select a hardcoded DODAG ID
    (0x1111, 0x1100, 0, 0, 0, 0, 0, 0x0011)
    
    This is against what RFC 6550 says. We change these calls
    to select a DODAG ID corresponding to a routable v6 address
    corresponding to the root
    Updated include paths for the moved files under net/
    Port apps, examples, platforms and tools so they use the new neighbor and route API.
    Updated to use the new uip-ds6-route API
    Add display options to border router web page, default now uses stack instead of static buffer.
    Turn radio off until prefix is acquired.
    Turn off RDC before SLIP prefix interchange. Disable SIN/SUT prints, leave off-route prints.
    Make static buffer the default, add comments.
    Use fixed font for neighbors and routes
    Remove debug output to save space
    Free internal webserver from dependency on /apps/webserver.
    Allow choice of webservers with makefile switch.
    Add WITH_WEBSERVER=<webserver> options
    change some examples for iris
    Changes in RPL implementation :
    - Structural modification of RPL data storage.
    - Support multiple gateways (multiple DODAG-ID with a unique InstanceID)
    - Use Lollipop counters
    - Add leaf-only configuration option for RPL
    Bugfix :
    - Correctly send "Grounded" flag in DIO
    Add optional build without internal webserver
    Conditional inclusion of the internal webserver
    fixed the prefix query
    Bugfix: avoid sending bogus data over the radio when no prefix is set; bug reported by mathieupouillot
    rpl_get_dag is no longer needed since rpl_set_root returns the dag pointer.
    updated with support for getting prefix from tunslip6 and for setting RPL prefix
    Fixed to only show used address entries at startup and removed hack to make address 'final'
    added nexthop to the route table listing
    Added simple web server listing the neighbors and routes
    added very basic rpl-border router example
    minor cleanup
    Added an example of using UDP over an RPL-enabled IPv6 network
    Updated for new for new uIPv6 APIs. Also fixed compiler warning.
    updated for new uIPv6 APIs
    a little faster autoconfiguration
    fixed debug output to show the correct remote address
    changed udp examples into a client and a server, added multi-hop routing,
    clarified the code.
    printing local ipv6 address at startup. addresses must match in order for the examples to work
    moved ipv6 udp example processes from apps/udp to inside examples/udp-receiver-ipv6 and examples/udp-sender-ipv6
    
    * transmitting human readable strings between the two processes
    * remote address configurable at compile time via DEFINES=...
    examples for uIPv6
    Platform-specific devices.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    don't do a hard override of platform config in rpl project config
    moved config file
    removed forced configuration of number of routes and neigbors
    Increase the size of the route and neighbor tables
    Added simple web server listing the neighbors and routes
    reduced the buffers to save memory
    added project configuration
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    ntikiMAC: a new radio duty cycling mechanism that uses a combination
    of link-layer and MAC-layer mechanisms to achieve a very low power
    consumption: during idle listening the radio is switched off between
    99.2% and 99.6% of the time. One unicast transmission typically adds
    between 0.07% and 1.2% additional radio time, depending on packet
    size.
    
    ContikiMAC uses the standard IEEE 802.15.4 message format and adds no
    additional headers.
    
    ContikiMAC is simple: it uses periodic two-shot channel sampling
    during idle listening to keep the radio on-time down. Transmissions
    are done with repeated transmissions until a link-layer ACK is
    received.
    Increased the clock speed to 32768/4 from 32768/8 to provide better accuracy for power profiling of radio CCA checks
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    removed offset in rtimer_arch
    Reading timer now quicker, embryo for possible future drift configuration
    Fixed description
    MSP430 real-time rtimer support using timerb1
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    MSP430 definitions
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added safeguard to avoid copying too much data to filename
    [Forget to add to previous commit]
    Free internal webserver from dependency on /apps/webserver.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    fixed compilation bug
    Up to now the root of the webserver filesystem was always the current directory. Now an optional file 'wwwroot.cfg' is read. If present its content is used as prefix in the conversion of http paths to local paths. This prefix may be a relative path as well as an absolute path.
    This is especially useful for the cc65-based targets as it ain't possible there to "just change into the wwwroot directory and start the webserver using its pathname".
    corrected comment
    Added simple web server listing the neighbors and routes
    Set the maximum number of concurrent web server connections by default to the maximum number of concurrent TCP connections.
    Added optional URL filtering code to the CFS web server contributed by Kajtar Zsolt (and activated it by default).
    Include slash in CFS web server state field 'filename' (like in the non-CFS web server).
    Reduced code size by removing one PT_WAIT_THREAD call site.
    Added GIF support to the CFS web server (which was already present in the non-CFS web server).
    There are no query strings or alike in the CFS web server so the file extensions have to be the actual end of the requested filename.
    Reduced code size by reducing the SEND_STRING call sites.
    - Added yet another PETSCII->ASCII conversion, this time for the file name in case of a 404.
    - Use all lowercase for the 404 message to avoid another PETSCII->ASCII conversion.
    - Write logfile entries for all 404s.
    - Adjust memory buffers on the C128 to accomodate for the items above.
    Added missing argument to send_string()
    Reverted the recent addition of the directory listing: instead, a 404 is now sent to indicate that a notfound.html file is missing
    When a file was not found, and no notfound.html was found, send directory contents instead
    webserver bugfix, caused nightly wget test to fail:
    * too many timer_reset will naively increase the start-time, even though timer has not expired. use timer_restart instead
    Replaced '404.html' with 'notfound.html' as '404.html' is no valid filename for the Apple2 disk operating system ProDOS 8.
    Yet another PETSCII<->ASCII issue solved - this time it caused failure to send the right content type.
    Avoid file handle leaks.
    Avoid memory block leaks (and minor code style adjustment).
    Allow to configure the maximum number of simultaneous connections to the cfs webserver.
    Added PETSCII support.
    Increased number of simultanious connections from two to three, fixed / streamlined 404.html handling and added logging on tcp resets.
    Removed compiler warnings.
    Made the webserver cfs support build and run.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    examples/ipv6/rpl-border-router: Add -DUIP_CONF_TCP=1 to CFLAGS
    
    The example used to rely on the default value being set to 1 which
    caused build failures on platforms which have a default UIP_CONF_TCP=0
    
    Signed-off-by: Joakim Gebart <joakim.gebart@eistec.se>
    Stop setting WITH_UIP6=1 in example Makefiles
    
    It achieves exactly nothing other than generate confusion
    Added option to specify the IPv6 prefix
    Added SMALL flag for border-router (exceeded sky memory)
    Add warning about slip overrun
    Add CONTIKI_PROJECT to the makefile, enabling make upload.
    Free internal webserver from dependency on /apps/webserver.
    Allow choice of webservers with makefile switch.
    Let RPL examples enable platform RPL
    Add WITH_WEBSERVER=<webserver> options
    change some examples for iris
    Add optional build without internal webserver
    fixed Makefile to work with platform other than sky
    Fixed to set address on interface
    Added rules to connect to slip bridge connected via serial or running in COOJA using tunslip6
    Added simple web server listing the neighbors and routes
    added project configuration
    added very basic rpl-border router example
    Updated include paths for the moved files under net/
    replaced inet6 with inet for linux to get tunbridge working.
    Use `__APPLE__` instead of `__MACH__`.
    Fixed ifconfig for Darwin
    Replaced SELECT_CALLBACK with an API that supports multiple select callbacks
    Add wpcap for cygwin/Windows native border router
    Added native-border-router and slip-radio
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Added native-border-router and slip-radio
    output buffer unused at present, save some RAM
    Added simple web server listing the neighbors and routes
    Added Sentilla Jcreate platform. This platform is similar to the Sky platform but with other sensors and 8 leds.
    Moved ninimal-ppp into backyard as it depends on the uIP ppp support.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    added config for serializing attributes
    Add 921600 baud to slip options, fix compiler warnings
    Added native-border-router and slip-radio
    Changed FRAMER to return negative values for error to allow 0 size headers.
    fixed bug causing lots of packet loss
    Added configurable delay between slip packets to avoid losing data
    Added command context. Patch by Joakim Eriksson
    Fixed typo, added option to run without slip connection
    Added option to connect to server instead of serial device
    Replaced SELECT_CALLBACK with an API that supports multiple select callbacks
    Add wpcap for cygwin/Windows native border router
    Added native-border-router and slip-radio
    Make DODAG ID selection RFC 6550-compliant
    
    Some calls to `rpl_set_root` select a hardcoded DODAG ID
    (0x1111, 0x1100, 0, 0, 0, 0, 0, 0x0011)
    
    This is against what RFC 6550 says. We change these calls
    to select a DODAG ID corresponding to a routable v6 address
    corresponding to the root
    Changed the name of the rimeaddr module to linkaddr
    Updated include paths for the moved files under net/
    fixed a C error "della madonna"
    
    http://it.wikipedia.org/wiki/Jerry_Cal%C3%A0
    Port apps, examples, platforms and tools so they use the new neighbor and route API.
    Updated to the latest uip-ds6-route API
    Added native-border-router and slip-radio
    Use fixed font for neighbors and routes
    Remove debug output to save space
    Free internal webserver from dependency on /apps/webserver.
    Allow choice of webservers with makefile switch.
    Add WITH_WEBSERVER=<webserver> options
    change some examples for iris
    Changes in RPL implementation :
    - Structural modification of RPL data storage.
    - Support multiple gateways (multiple DODAG-ID with a unique InstanceID)
    - Use Lollipop counters
    - Add leaf-only configuration option for RPL
    Bugfix :
    - Correctly send "Grounded" flag in DIO
    Add optional build without internal webserver
    Conditional inclusion of the internal webserver
    fixed the prefix query
    Bugfix: avoid sending bogus data over the radio when no prefix is set; bug reported by mathieupouillot
    rpl_get_dag is no longer needed since rpl_set_root returns the dag pointer.
    updated with support for getting prefix from tunslip6 and for setting RPL prefix
    Fixed to only show used address entries at startup and removed hack to make address 'final'
    added nexthop to the route table listing
    Added simple web server listing the neighbors and routes
    added very basic rpl-border router example
    minor cleanup
    Added an example of using UDP over an RPL-enabled IPv6 network
    Updated for new for new uIPv6 APIs. Also fixed compiler warning.
    updated for new uIPv6 APIs
    a little faster autoconfiguration
    fixed debug output to show the correct remote address
    changed udp examples into a client and a server, added multi-hop routing,
    clarified the code.
    printing local ipv6 address at startup. addresses must match in order for the examples to work
    moved ipv6 udp example processes from apps/udp to inside examples/udp-receiver-ipv6 and examples/udp-sender-ipv6
    
    * transmitting human readable strings between the two processes
    * remote address configurable at compile time via DEFINES=...
    examples for uIPv6
    Platform-specific devices.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Added configurable delay between slip packets to avoid losing data
    added config for serializing attributes
    increase uip buffer size for native border router
    Replaced SELECT_CALLBACK with an API that supports multiple select callbacks
    Added native-border-router and slip-radio
    don't do a hard override of platform config in rpl project config
    moved config file
    removed forced configuration of number of routes and neigbors
    Increase the size of the route and neighbor tables
    Added simple web server listing the neighbors and routes
    reduced the buffers to save memory
    added project configuration
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    ntikiMAC: a new radio duty cycling mechanism that uses a combination
    of link-layer and MAC-layer mechanisms to achieve a very low power
    consumption: during idle listening the radio is switched off between
    99.2% and 99.6% of the time. One unicast transmission typically adds
    between 0.07% and 1.2% additional radio time, depending on packet
    size.
    
    ContikiMAC uses the standard IEEE 802.15.4 message format and adds no
    additional headers.
    
    ContikiMAC is simple: it uses periodic two-shot channel sampling
    during idle listening to keep the radio on-time down. Transmissions
    are done with repeated transmissions until a link-layer ACK is
    received.
    Increased the clock speed to 32768/4 from 32768/8 to provide better accuracy for power profiling of radio CCA checks
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    removed offset in rtimer_arch
    Reading timer now quicker, embryo for possible future drift configuration
    Fixed description
    MSP430 real-time rtimer support using timerb1
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    MSP430 definitions
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    Added native-border-router and slip-radio
    Added safeguard to avoid copying too much data to filename
    [Forget to add to previous commit]
    Free internal webserver from dependency on /apps/webserver.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    fixed compilation bug
    Up to now the root of the webserver filesystem was always the current directory. Now an optional file 'wwwroot.cfg' is read. If present its content is used as prefix in the conversion of http paths to local paths. This prefix may be a relative path as well as an absolute path.
    This is especially useful for the cc65-based targets as it ain't possible there to "just change into the wwwroot directory and start the webserver using its pathname".
    corrected comment
    Added simple web server listing the neighbors and routes
    Set the maximum number of concurrent web server connections by default to the maximum number of concurrent TCP connections.
    Added optional URL filtering code to the CFS web server contributed by Kajtar Zsolt (and activated it by default).
    Include slash in CFS web server state field 'filename' (like in the non-CFS web server).
    Reduced code size by removing one PT_WAIT_THREAD call site.
    Added GIF support to the CFS web server (which was already present in the non-CFS web server).
    There are no query strings or alike in the CFS web server so the file extensions have to be the actual end of the requested filename.
    Reduced code size by reducing the SEND_STRING call sites.
    - Added yet another PETSCII->ASCII conversion, this time for the file name in case of a 404.
    - Use all lowercase for the 404 message to avoid another PETSCII->ASCII conversion.
    - Write logfile entries for all 404s.
    - Adjust memory buffers on the C128 to accomodate for the items above.
    Added missing argument to send_string()
    Reverted the recent addition of the directory listing: instead, a 404 is now sent to indicate that a notfound.html file is missing
    When a file was not found, and no notfound.html was found, send directory contents instead
    webserver bugfix, caused nightly wget test to fail:
    * too many timer_reset will naively increase the start-time, even though timer has not expired. use timer_restart instead
    Replaced '404.html' with 'notfound.html' as '404.html' is no valid filename for the Apple2 disk operating system ProDOS 8.
    Yet another PETSCII<->ASCII issue solved - this time it caused failure to send the right content type.
    Avoid file handle leaks.
    Avoid memory block leaks (and minor code style adjustment).
    Allow to configure the maximum number of simultaneous connections to the cfs webserver.
    Added PETSCII support.
    Increased number of simultanious connections from two to three, fixed / streamlined 404.html handling and added logging on tcp resets.
    Removed compiler warnings.
    Made the webserver cfs support build and run.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Add 921600 baud to slip options, fix compiler warnings
    Added native-border-router and slip-radio
    Renamed wget() to wget_get() and added server port as argument
    Added example using HTTP to control and be controlled.
    added uip-driver (for both ivp4 and ipv6), setting WITH_UIP* compiler flags in Makefile
    Updated to match the new netstack api
    Added a new module called "framer" that creates MAC level frames to
    the packetbuf from packet attributes. Two framer modules are included,
    one that creates 802.15.4 frame headers, and one that creates a
    minimal "nullmac"-style header that only contains the link-local
    addresses.
    added multihop routing support through replaceable modules. first implementation
    uses rime's route discovery by translating between ipv6 and rime addresses.
    added experimental checkpointing functionality:
    currently only implemented on the sky platform
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    additional edits to further clarify interface between native-border-router and slip-radio
    added some documentation of native-border-router and slip-radio relationship
    Added native-border-router and slip-radio
    Added missing arguments to usage information
    Fixed baudrate issue on Darwin.
    Added option to connect to server instead of serial device
    Add 921600 baud to slip options, fix compiler warnings
    Added native-border-router and slip-radio
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Added command context. Patch by Joakim Eriksson
    Added native-border-router and slip-radio
    hex conversion and crc shell commands
    removed execute flag of source files (avoids diff problems with egit)
    Adding ADC functions
    Platform-specific devices.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Stop setting WITH_UIP6=1 in example Makefiles
    
    It achieves exactly nothing other than generate confusion
    make native border router use ipv6 stack and not rime
    Added native-border-router and slip-radio
    Updated include paths for the moved files under net/
    Added command context. Patch by Joakim Eriksson
    Added native-border-router and slip-radio
    * Simple JSON parser and generator.
    * Simple HTTP webservice with support for both receiving and sending HTTP requests.
    * json-ws example that optionally push sensor data to COSM over IPv6.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    * Simple JSON parser and generator.
    * Simple HTTP webservice with support for both receiving and sending HTTP requests.
    * json-ws example that optionally push sensor data to COSM over IPv6.
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    added 802.15.4 frame packeter
    A quick, initial implementation of the LPP power-saving MAC protocol (Musaloiu-E et al, IPSN 2008)
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Fix naming issues and includes in uip-ds6-nbr.h
    Removed now unused per-module neighbor table size configs. Use NEIGHBOR_CONF_MAX_NEIGHBORS instead.
    Changed the name of the IPv6 number of route entries configuration from UIP_CONF_DS6_ROUTE_NBU to UIP_CONF_MAX_ROUTES.
    * Simple JSON parser and generator.
    * Simple HTTP webservice with support for both receiving and sending HTTP requests.
    * json-ws example that optionally push sensor data to COSM over IPv6.
    Added native-border-router and slip-radio
    Updated for the latest version of httpd-simple in rpl-border-router
    Moved project-conf.h
    Web server example showing light and temperature sensor data
    Added simple web server listing the neighbors and routes
    reduced the buffers to save memory
    added project configuration
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    ntikiMAC: a new radio duty cycling mechanism that uses a combination
    of link-layer and MAC-layer mechanisms to achieve a very low power
    consumption: during idle listening the radio is switched off between
    99.2% and 99.6% of the time. One unicast transmission typically adds
    between 0.07% and 1.2% additional radio time, depending on packet
    size.
    
    ContikiMAC uses the standard IEEE 802.15.4 message format and adds no
    additional headers.
    
    ContikiMAC is simple: it uses periodic two-shot channel sampling
    during idle listening to keep the radio on-time down. Transmissions
    are done with repeated transmissions until a link-layer ACK is
    received.
    Increased the clock speed to 32768/4 from 32768/8 to provide better accuracy for power profiling of radio CCA checks
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    removed offset in rtimer_arch
    Reading timer now quicker, embryo for possible future drift configuration
    Fixed description
    MSP430 real-time rtimer support using timerb1
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    MSP430 definitions
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved the sht11 driver to its own module
    * Simple JSON parser and generator.
    * Simple HTTP webservice with support for both receiving and sending HTTP requests.
    * json-ws example that optionally push sensor data to COSM over IPv6.
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    * Simple JSON parser and generator.
    * Simple HTTP webservice with support for both receiving and sending HTTP requests.
    * json-ws example that optionally push sensor data to COSM over IPv6.
    * Simple JSON parser and generator.
    * Simple HTTP webservice with support for both receiving and sending HTTP requests.
    * json-ws example that optionally push sensor data to COSM over IPv6.
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Stop setting WITH_UIP6=1 in example Makefiles
    
    It achieves exactly nothing other than generate confusion
    * Simple JSON parser and generator.
    * Simple HTTP webservice with support for both receiving and sending HTTP requests.
    * json-ws example that optionally push sensor data to COSM over IPv6.
    Updated include paths for the moved files under net/
    core/net/resolv: IPv6 and mDNS ("Bonjour") support. Major refactor.
    
    This patch updates the DNS resolver to support IPv6 and introduces an
    improved API for looking up DNS entries. This patch also adds optional
    support for mDNS lookups and responses to the DNS resolver.
    
    Here is a quick summary of the changes:
    
     * Added support for IPv6 lookups.
     * DNS queries now honor record expiration.
     * Added support for mDNS, compatible with "Bonjour".
     * Implemented a new lookup api, `resolv_lookup2()`, which provides
       more information about the state of the record(error, expired,
       looking-up, etc.).
    
    About mDNS/Bonjour Support
    --------------------------
    
    This patch adds basic support for mDNS/Bonjour, which allows you to
    refer to the name of a device instead of its IP address. This is
    incredibly convenient for IPv6 addresses because they tend to be very
    long and difficult to remember. It is especially important for
    link-local IPv6 addresses, since not all programs support the '%'
    notation for indicating a network interface (required on systems with
    more than one network interface to disambiguate).
    
    In other words, instead of typing in this:
    
     * `http://[fe80::58dc:d7ed:a644:628f%en1]/`
    
    You can type this instead:
    
     * `http://contiki.local/`
    
    Huge improvement, no?
    
    The convenience extends beyond that: this mechanism can be used for
    nodes to talk to each other based on their human-readable names instead
    of their IPv6 addresses. So instead of a switch on
    `aaaa::58dc:d7ed:a644:628f` triggering an actuator on
    `aaaa::ed26:19c1:4bd2:f95b`, `light-switch.local` can trigger the
    actuator on `living-room-lights.local`.
    
    What you need to do to be able to look up `.local` names on your
    workstation depends on a few factors:
    
     * Your machine needs to be able to send and receive multicast packets
       to and from the LoWPAN. You can do this easily with the Jackdaw
       firmware on an RZUSBStick. If you have a border router, you will need
       it to bridge the mDNS multicast packets across the border.
    
     * If you are using a Mac, you win. All Apple devices support mDNS
       lookups.
    
     * If you are using Windows, you can install Apple's Bonjour for Windows
       package. (This may be already installed on your machine if you have
       installed iTunes) After you install this you can easily do `.local`
       lookups.
    
     * If you are using a Unix machine, you can install Avahi.
    
    The default hostname is set to `contiki.local.`. You can change the
    hostname programmatically by calling `resolv_set_hostname()`. You can
    change the default hostname by changing `CONTIKI_CONF_DEFAULT_HOSTNAME`.
    
    You may disable mDNS support by setting `RESOLV_CONF_SUPPORTS_MDNS` to
    `0`.
    
    ---------------------------------
    
    core/net/resolv: `resolv_lookup2()` -> `resolv_lookup()`
    
    Note that this patch should fix several `resolv_lookup()` bugs
    that already existed. There were many cases where `resolv_lookup()`
    was being called and the IP address ignored, but later code
    assumed that the IP address had been fetched... ANYWAY, those
    should be fixed now.
    
    ---------------------------------
    
    examples/udp-ipv6: Updated client to use MDNS to lookup the server.
    
    Also updated the Cooja regression test simulation.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    * Simple JSON parser and generator.
    * Simple HTTP webservice with support for both receiving and sending HTTP requests.
    * json-ws example that optionally push sensor data to COSM over IPv6.
    * Simple JSON parser and generator.
    * Simple HTTP webservice with support for both receiving and sending HTTP requests.
    * json-ws example that optionally push sensor data to COSM over IPv6.
    Updated include paths for the moved files under net/
    Check the return value of udp_new.
    Make PERIOD and SERVER_REPLY configurable
    Changes in RPL implementation :
    - Structural modification of RPL data storage.
    - Support multiple gateways (multiple DODAG-ID with a unique InstanceID)
    - Use Lollipop counters
    - Add leaf-only configuration option for RPL
    Bugfix :
    - Correctly send "Grounded" flag in DIO
    print node ids correctly
    Server address options giving different 6lowpan header compression
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    removed servreg_hack from the rpl-udp example
    Rewrote the code to use the servreg-hack module, so that clients can look up the IP address of the collector node.
    added support for experimental RPL prefix based autoconf
    simplified
    Added optional server replies.
    minor cleanup
    Added an example of using UDP over an RPL-enabled IPv6 network
    Updated for new for new uIPv6 APIs. Also fixed compiler warning.
    updated for new uIPv6 APIs
    a little faster autoconfiguration
    fixed debug output to show the correct remote address
    changed udp examples into a client and a server, added multi-hop routing,
    clarified the code.
    printing local ipv6 address at startup. addresses must match in order for the examples to work
    moved ipv6 udp example processes from apps/udp to inside examples/udp-receiver-ipv6 and examples/udp-sender-ipv6
    
    * transmitting human readable strings between the two processes
    * remote address configurable at compile time via DEFINES=...
    examples for uIPv6
    Platform-specific devices.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    SkyByteRadio was replaced by Msp802154Radio
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    added powertrace to IPv6 including an example
    removed execute flag of source files (avoids diff problems with egit)
    reduced the width of the Log Listener window
    Use the new Mote Attributes interface.
    Added an example of using UDP over an RPL-enabled IPv6 network
    SkyByteRadio was replaced by Msp802154Radio
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    removed execute flag of source files (avoids diff problems with egit)
    reduced the width of the Log Listener window
    Use the new Mote Attributes interface.
    Added an example of using UDP over an RPL-enabled IPv6 network
    Updated include paths for the moved files under net/
    fixed compiler warning
    Check the return value of udp_new.
    added powertrace to IPv6 including an example
    Make PERIOD and SERVER_REPLY configurable
    print node ids correctly
    Server address options giving different 6lowpan header compression
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    removed servreg_hack from the rpl-udp example
    Removed unused variable.
    Rewrote the code to use the servreg-hack module, so that clients can look up the IP address of the collector node.
    ctimer moved from net/rime to sys/
    ctimer.h moved
    added support for experimental RPL prefix based autoconf
    minor cleanup
    Added an example of using UDP over an RPL-enabled IPv6 network
    Updated for new for new uIPv6 APIs. Also fixed compiler warning.
    updated for new uIPv6 APIs
    a little faster autoconfiguration
    changed address setup slightly.
    changed udp examples into a client and a server, added multi-hop routing,
    clarified the code.
    printing local ipv6 address at startup. addresses must match in order for the examples to work
    moved ipv6 udp example processes from apps/udp to inside examples/udp-receiver-ipv6 and examples/udp-sender-ipv6
    
    * transmitting human readable strings between the two processes
    * remote address configurable at compile time via DEFINES=...
    examples for uIPv6
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    minor cleanup
    Now that we started adding files to the CVS which are normally generated with a 'save...' make goal we can remove the DEFAULT_TARGET mechanism altogether and just add Makefile.target files.
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Stop setting WITH_UIP6=1 in example Makefiles
    
    It achieves exactly nothing other than generate confusion
    Continued merge with sf master
    added powertrace to IPv6 including an example
    Make PERIOD and SERVER_REPLY configurable
    Let RPL examples enable platform RPL
    Add the servreg-hack app to the Makefile
    removed internal make targets
    minor cleanup
    Added an example of using UDP over an RPL-enabled IPv6 network
    SkyByteRadio was replaced by Msp802154Radio
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Data collection over RPL/IPv6
    reduced the width of the Log Listener window
    Use the new Mote Attributes interface.
    Added an example of using UDP over an RPL-enabled IPv6 network
    Changed the name of the rimeaddr module to linkaddr
    Added missing include
    Make PERIOD configurable in Makefile
    Even out the transmissions during the interval
    Data collection over RPL/IPv6
    Changed the name of the rimeaddr module to linkaddr
    Updated include paths for the moved files under net/
    The RPL_PARENT_COUNT() macro doesn't exist anymore - use the uip_ds6_nbr_num() function instead
    Port apps, examples, platforms and tools so they use the new neighbor and route API.
    Updated to the latest uip-ds6-route API
    dio_intcurrent is now part of the instance struct
    Bugfix: IPv6 address to Rime address traslation did not appear correctly in the Collect-View GUI.
    Changes in RPL implementation :
    - Structural modification of RPL data storage.
    - Support multiple gateways (multiple DODAG-ID with a unique InstanceID)
    - Use Lollipop counters
    - Add leaf-only configuration option for RPL
    Bugfix :
    - Correctly send "Grounded" flag in DIO
    changed etx to metric
    Data collection over RPL/IPv6
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    removed servreg_hack from the rpl-udp example
    Removed unused variable.
    Rewrote the code to use the servreg-hack module, so that clients can look up the IP address of the collector node.
    ctimer moved from net/rime to sys/
    ctimer.h moved
    added support for experimental RPL prefix based autoconf
    minor cleanup
    Added an example of using UDP over an RPL-enabled IPv6 network
    Updated for new for new uIPv6 APIs. Also fixed compiler warning.
    updated for new uIPv6 APIs
    a little faster autoconfiguration
    changed address setup slightly.
    changed udp examples into a client and a server, added multi-hop routing,
    clarified the code.
    printing local ipv6 address at startup. addresses must match in order for the examples to work
    moved ipv6 udp example processes from apps/udp to inside examples/udp-receiver-ipv6 and examples/udp-sender-ipv6
    
    * transmitting human readable strings between the two processes
    * remote address configurable at compile time via DEFINES=...
    examples for uIPv6
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    Moved the rimeaddr.[ch] code from the core/net/rime module to the core/net module, as it is used not only by rime code
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Data collection over RPL/IPv6
    Renamed wget() to wget_get() and added server port as argument
    Added example using HTTP to control and be controlled.
    added uip-driver (for both ivp4 and ipv6), setting WITH_UIP* compiler flags in Makefile
    Updated to match the new netstack api
    Added a new module called "framer" that creates MAC level frames to
    the packetbuf from packet attributes. Two framer modules are included,
    one that creates 802.15.4 frame headers, and one that creates a
    minimal "nullmac"-style header that only contains the link-local
    addresses.
    added multihop routing support through replaceable modules. first implementation
    uses rime's route discovery by translating between ipv6 and rime addresses.
    added experimental checkpointing functionality:
    currently only implemented on the sky platform
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    SkyByteRadio was replaced by Msp802154Radio
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Data collection over RPL/IPv6
    reduced the width of the Log Listener window
    Use the new Mote Attributes interface.
    Added an example of using UDP over an RPL-enabled IPv6 network
    Changed the name of the rimeaddr module to linkaddr
    Moved the rimeaddr.[ch] code from the core/net/rime module to the core/net module, as it is used not only by rime code
    Updated include paths for the moved files under net/
    Changes in RPL implementation :
    - Structural modification of RPL data storage.
    - Support multiple gateways (multiple DODAG-ID with a unique InstanceID)
    - Use Lollipop counters
    - Add leaf-only configuration option for RPL
    Bugfix :
    - Correctly send "Grounded" flag in DIO
    Data collection over RPL/IPv6
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    removed servreg_hack from the rpl-udp example
    Rewrote the code to use the servreg-hack module, so that clients can look up the IP address of the collector node.
    added support for experimental RPL prefix based autoconf
    simplified
    Added optional server replies.
    minor cleanup
    Added an example of using UDP over an RPL-enabled IPv6 network
    Updated for new for new uIPv6 APIs. Also fixed compiler warning.
    updated for new uIPv6 APIs
    a little faster autoconfiguration
    fixed debug output to show the correct remote address
    changed udp examples into a client and a server, added multi-hop routing,
    clarified the code.
    printing local ipv6 address at startup. addresses must match in order for the examples to work
    moved ipv6 udp example processes from apps/udp to inside examples/udp-receiver-ipv6 and examples/udp-sender-ipv6
    
    * transmitting human readable strings between the two processes
    * remote address configurable at compile time via DEFINES=...
    examples for uIPv6
    Platform-specific devices.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Stop setting WITH_UIP6=1 in example Makefiles
    
    It achieves exactly nothing other than generate confusion
    Make PERIOD configurable in Makefile
    Let RPL examples enable platform RPL
    Data collection over RPL/IPv6
    Moved the sht11 driver to its own module
    Added native-border-router and slip-radio
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    Added the battery indicator to the sensors API
    Added sensor API for the SHT11 driver
    Updated to match the new sensors API
    return the last decoded value instead of the last value read during an interrupt
    Two types of radio sensor data
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    Added native-border-router and slip-radio
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    fixed cpu/msp430 for compilation with IAR compiler
    added missing include
    Enable the watchdog for rtimers too. Removed the disabling of the TACTL - it should not be needed, and interferes with the timing behaviour of stable rtimers
    Added function rtimer_arch_now that makes sure that the timer value does not change between readouts to avoid reading while the timer is being updated.
    Turn off timer before updating - needed to avoid bugs in ContikiMAC - not 100% sure why
    Removed safeguards around the update code for the timer; turns out they weren't needed (but instead triggered a bug in MSPsim)
    Turn off Timer A before modifying its control registers to avoid problems when timer is updated frequently
    Remove the read from TAIV - this should not be done for TIMERA0 interrupts (in fact, doing so messes up the other timer a interrupts, like the clock tick...)
    Need to clear the interrupt flag register for Timer A
    bug fix: wake up MSP430 when leaving rtimer interrupt if the rtimer polled a process.
    thanks to Marco Vedovati for finding the bug
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    Moved energest from lib/ to sys/
    removed offset in rtimer_arch
    removed redundant code - configuration of basic clock subsystem in clock and rtimer_arch
    Added energy estimation, embryo for possible future drift configuration
    rtimer_arch_now() now returns the correct value
    Fixed description
    MSP430 real-time rtimer support using timerb1
    Added #include that #defines NULL
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    Added *experimental* module for sending raw (non-routed) packets from Contiki. The name of the module is likely to change.
    Import of the contiki-2.x development code from the SICS internal CVS server
    SLIP-radio support for the Econotag
    Added native-border-router and slip-radio
    Add template for AUTOSTART_PROCESS
    Lots of changes / commits! This allows ravenusbstick example to build at least.
    examples for uIPv6
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    slip-radio: remove unneeded definition of NETSTACK_CONF_WITH_RPL (now set from makefile with CONTIKI_WITH_RPL)
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    SLIP-radio support for the Econotag
    SLIP-radio support for the Nooliberry (RF230 radio)
    Added native-border-router and slip-radio
    Updated for the latest version of httpd-simple in rpl-border-router
    Moved project-conf.h
    Web server example showing light and temperature sensor data
    Added simple web server listing the neighbors and routes
    reduced the buffers to save memory
    added project configuration
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    ntikiMAC: a new radio duty cycling mechanism that uses a combination
    of link-layer and MAC-layer mechanisms to achieve a very low power
    consumption: during idle listening the radio is switched off between
    99.2% and 99.6% of the time. One unicast transmission typically adds
    between 0.07% and 1.2% additional radio time, depending on packet
    size.
    
    ContikiMAC uses the standard IEEE 802.15.4 message format and adds no
    additional headers.
    
    ContikiMAC is simple: it uses periodic two-shot channel sampling
    during idle listening to keep the radio on-time down. Transmissions
    are done with repeated transmissions until a link-layer ACK is
    received.
    Increased the clock speed to 32768/4 from 32768/8 to provide better accuracy for power profiling of radio CCA checks
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    removed offset in rtimer_arch
    Reading timer now quicker, embryo for possible future drift configuration
    Fixed description
    MSP430 real-time rtimer support using timerb1
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    MSP430 definitions
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Added native-border-router and slip-radio
    hex conversion and crc shell commands
    removed execute flag of source files (avoids diff problems with egit)
    Adding ADC functions
    Platform-specific devices.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    additional edits to further clarify interface between native-border-router and slip-radio
    added some documentation of native-border-router and slip-radio relationship
    llsec: Added a layer in between NETSTACK_MAC and NETSTACK_NETWORK for implementing link layer security
    Updated include paths for the moved files under net/
    Restore CC2420 as default in slip-radio
    SLIP-radio support for the Econotag
    SLIP-radio support for the Nooliberry (RF230 radio)
    We can now turn off example-provided putchars
    Added check for illegal attributes in packet attribute serialization
    Add 921600 baud to slip options, fix compiler warnings
    added parsing of frame to get receiver address, etc
    Added native-border-router and slip-radio
    SLIP-radio support for the Nooliberry (RF230 radio)
    Added native-border-router and slip-radio
    Add template for AUTOSTART_PROCESS
    Lots of changes / commits! This allows ravenusbstick example to build at least.
    examples for uIPv6
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved the cc2420 driver into a separate dev/cc2420 module
    Added native-border-router and slip-radio
    Add template for AUTOSTART_PROCESS
    Lots of changes / commits! This allows ravenusbstick example to build at least.
    examples for uIPv6
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Stop setting WITH_UIP6=1 in example Makefiles
    
    It achieves exactly nothing other than generate confusion
    SLIP-radio support for the Econotag
    SLIP-radio support for the Nooliberry (RF230 radio)
    Load Makefile.target for slip-radio
    
    This loads Makefile.target into Makefile so we can check for TARGET==sky
    when building this. Compilation for sky fails without it.
    
    Signed-off-by: Johannes Gilger <heipei@hackvalue.de>
    Added native-border-router and slip-radio
    ContikiMAC: Create and parse ContikiMAC header in special framer; Expanded framer interface
    to allow for creating and securing frames in advance; Create and secure frames in advance when sending bursts; Do neither recreate nor resecure frames that come from phase
    Added method to framer that returns the header length if the framer
    would create a header with the current packet information.
    
    This allows sicslowpan to calculate the max payload size without
    consuming a sequence number or clearing/restoring the packet buffer.
    Changed the name of the rimeaddr module to linkaddr
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added native-border-router and slip-radio
    Changed FRAMER to return negative values for error to allow 0 size headers.
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Added a new module called "framer" that creates MAC level frames to
    the packetbuf from packet attributes. Two framer modules are included,
    one that creates 802.15.4 frame headers, and one that creates a
    minimal "nullmac"-style header that only contains the link-local
    addresses.
    slip.c:
            char is signed but uip_buf is unsigned
    
    spi.h:
            casted unused values to void
    
    autostart.c:
    autostart.h:
            The array itself should be const but the processes pointed to
            should not.
    
    profile-aggregates.c:
            sizeof returns unsigned long on my platform
    Debug output
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Broadcast example
    added printout of sender of received messages
    Added broadcast example for completeness
    minor fix: removed superfluous etimer_reset
    transmit with random intervals: 2-4 seconds
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Bugfix: it is etimer_reset() that makes timer behavior stable, not etimer_restart()
    Use etimer_restart() to avoid synchronization effects from the abc_send() invocation taking time to complete
    printing message when packet sent
    
    + changed period to 2 seconds (can be run unchanged with x-mac)
    Changed names of the Rime examples from test-* to example-* and added examples for ruc and uc
    Static should come first because it's a storage class.
    Added exithandlers so that the examples can be run as loadable (and unloadble) modules
    Message size should include ending zero byte
    Moved all Rime examples into examples/rime directory
    API change for Rime: *_setup() renamed to *_open()
    Simple Rime test code
    Renamed Rime output function
    A Rime driver for the simple-cc2420 driver
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updated to use latest Rime APIs
    Updated to match the new sensors API
    fixed to compile with new sensors API
    Updated the Rime channel numbers so that all examples can be run in the same network without channel clashes
    Rewrote the multihop example to better show how to use the multihop layer. Now also shows how to use the memb, list, and annoncement mechanisms.
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Updated to match new multihop API. Thanks to Carlo Alberto Boano for fixing.
    Renamed Rime module mh to multihop
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Changed names of the Rime examples from test-* to example-* and added examples for ruc and uc
    Static should come first because it's a storage class.
    Added exithandlers so that the examples can be run as loadable (and unloadble) modules
    Message size should include ending zero byte
    Moved all Rime examples into examples/rime directory
    API change for Rime: *_setup() renamed to *_open()
    Simple Rime test code
    Renamed Rime output function
    A Rime driver for the simple-cc2420 driver
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updated to match the new sensors API
    fixed to compile with new sensors API
    Updated the Rime channel numbers so that all examples can be run in the same network without channel clashes
    switched all users of cfs_seek(x,y) to cfs_seek(x,y,CFS_SEEK_SET)
    Replaced NETSIM macro with general (and now actually working) solution in Makefile.include.
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Changed names of the Rime examples from test-* to example-* and added examples for ruc and uc
    Fixed compiler warnings to make code compile with gcc's -pedantic switch
    Bugfixes, updates
    Removed unused button code
    Added percentage output in netsim
    Added LED output that shows when a file has been completely downloaded
    Added exithandlers so that the examples can be run as loadable (and unloadble) modules
    Removed the use of CFS. Instead, provide callbacks for the using application to fill in data.
    Added rudolph tests
    Moved all Rime examples into examples/rime directory
    API change for Rime: *_setup() renamed to *_open()
    Example showing how to use the mesh routing code in Rime
    A Rime driver for the simple-cc2420 driver
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Send to node 1.0 instead of 41.41, to make the example work better in Cooja.
    fixed compiler warning
    Updated the Rime channel numbers so that all examples can be run in the same network without channel clashes
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Changed the 'ibc' and 'uc' Rime modules into the more descriptive names 'broadcast' and 'unicast'
    Changed names of the Rime examples from test-* to example-* and added examples for ruc and uc
    Static should come first because it's a storage class.
    Added exithandlers so that the examples can be run as loadable (and unloadble) modules
    Message size should include ending zero byte
    Moved all Rime examples into examples/rime directory
    API change for Rime: *_setup() renamed to *_open()
    Simple Rime test code
    Renamed Rime output function
    A Rime driver for the simple-cc2420 driver
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Cleanup of the node-id.h files. The node-id.h file contains
    declarations of functions for setting and getting a node ID number, a
    functionality that exists on many platforms. Since this functionality
    was not considered part of the Contiki core, each platform defined its
    own node-id.h file. This commit attempts to clean this up by
    collecting the node-id.h into a core/sys/node-id.h file that replaces
    the old node-id.h files from the platform directories.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Let node ID 1 be the source
    Add checks for file size problems (fix by Roger Larsson)
    Updated to match the new sensors API
    fixed to compile with new sensors API
    Updated the Rime channel numbers so that all examples can be run in the same network without channel clashes
    switched all users of cfs_seek(x,y) to cfs_seek(x,y,CFS_SEEK_SET)
    Replaced NETSIM macro with general (and now actually working) solution in Makefile.include.
    Changed names of the Rime examples from test-* to example-* and added examples for ruc and uc
    Fixed compiler warnings to make code compile with gcc's -pedantic switch
    Bugfixes, updates
    Removed unused button code
    Added percentage output in netsim
    Added LED output that shows when a file has been completely downloaded
    Added exithandlers so that the examples can be run as loadable (and unloadble) modules
    Removed the use of CFS. Instead, provide callbacks for the using application to fill in data.
    Added rudolph tests
    Moved all Rime examples into examples/rime directory
    API change for Rime: *_setup() renamed to *_open()
    Example showing how to use the mesh routing code in Rime
    A Rime driver for the simple-cc2420 driver
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    New example that shows how to send and receive broadcast and unicast as well as how to use a simple Contiki list and a memb memory block pool.
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Allow the network to settle before sending first packet. Packet transmissions are now periodic, and randomized within each period.
    Don't place link if destination is the null address
    Removed left-over powertrace include
    Added network arrows in Cooja, fixed so that node ID 1 now is sink
    Updated to new collect router API
    Remove old neighbor.h inclusion
    The button sensor must be initialized before it is used
    Updated the Rime channel numbers so that all examples can be run in the same network without channel clashes
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    wait until rime finishes forwarding to send
    bugfix: including random.h to avoid random_rand() assumed signed, and timer intervals becoming very very small
    Reverted the recent change from random_rand() to rand(). It turned out that
    since libc rand() returns a signed int, there were frequently problems with
    timer values wrapping. By reverting to random_rand(), we can provide a
    random generator that returns an unsigned and the timer problems are solved.
    Increased the inter-packet time to work better on the sky platform
    Removed the blink process to make the code simpler, added randomness to the transmission intervals
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Changed names of the Rime examples from test-* to example-* and added examples for ruc and uc
    removed unused include
    Fixed to use the 'collect' module instead of the 'tree' module
    Removed dependency on PIR sensor
    Try sending every packet 10 times at most
    Now prints out sensor data
    Added exithandlers so that the examples can be run as loadable (and unloadble) modules
    Updated for the new APIs
    Moved all Rime examples into examples/rime directory
    API change for Rime: *_setup() renamed to *_open()
    Example showing how to use the tree routing code in Rime
    A Rime driver for the simple-cc2420 driver
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Include string header
    Minor style improvement.
    Updated to match the new sensors API
    fixed to compile with new sensors API
    Updated the Rime channel numbers so that all examples can be run in the same network without channel clashes
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Updated to match new mesh API. Thanks to Carlo Alberto Boano for fixing.
    Removed the rimeaddr ->u16 field
    Changed names of the Rime examples from test-* to example-* and added examples for ruc and uc
    Added exithandlers so that the examples can be run as loadable (and unloadble) modules
    Updated for the new APIs
    Moved all Rime examples into examples/rime directory
    API change for Rime: *_setup() renamed to *_open()
    Example showing how to use the mesh routing code in Rime
    A Rime driver for the simple-cc2420 driver
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updated to match the new sensors API
    fixed to compile with new sensors API
    Updated the Rime channel numbers so that all examples can be run in the same network without channel clashes
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Changed names of the Rime examples from test-* to example-* and added examples for ruc and uc
    Bugfixes, updates
    Added more printouts
    Added exithandlers so that the examples can be run as loadable (and unloadble) modules
    Added configurable interval
    Moved all Rime examples into examples/rime directory
    API change for Rime: *_setup() renamed to *_open()
    Simple Rime test code
    Renamed Rime output function
    A Rime driver for the simple-cc2420 driver
    Import of the contiki-2.x development code from the SICS internal CVS server
    SkyByteRadio was replaced by Msp802154Radio
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Data collection example
    Updated tests to match new collect-view-data command syntax
    Increased number of retransmissions from 15 to 31
    A version of the Contiki shell collect test but with stocastic packet loss. This tests that the collect protocol correctly handles lossy networks.
    workaround to survive the bad characters that are sometimes printed by mspsim-based motes + make clean before compilation
    Rewrite of the Sky shell collect test. The new test is better equipped
    to handle reordered packets - unlike the previous test, the new test
    counts all incoming packets in the data stream, even those that are
    significantly reordered. The new test also shows the received packets
    and their hop counts in a much more readable fashion.
    New and improved shell collect test: the new test sends out 10 packets from each node and counts the received packets. If less than 10 packets from each node is received, the test fails
    explicit make clean before compiling firmwares
    Moved the TIMEOUT() definition until after the print_stats() definition so that the print_stats() function can be called when the TIMEOUT() is invoked
    Print stats even when test fails
    Increased timeout
    Increased the transmission time to 40 seconds from 20 seconds
    moved test scripts into simulation config (.csc)
    with the recent mote type updates, the simulation config structure changed.
    
    * updated simconfigs
    Nightly test that runs Contiki's shell collect command in much the same way as the Contiki collect program does
    A nightly test of the Rime collect protocol on the sky platform
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    minor fix: removed superfluous etimer_reset
    transmit with random intervals: 2-4 seconds
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Bugfix: it is etimer_reset() that makes timer behavior stable, not etimer_restart()
    Use etimer_restart() to avoid synchronization effects from the abc_send() invocation taking time to complete
    printing message when packet sent
    
    + changed period to 2 seconds (can be run unchanged with x-mac)
    Changed names of the Rime examples from test-* to example-* and added examples for ruc and uc
    Static should come first because it's a storage class.
    Added exithandlers so that the examples can be run as loadable (and unloadble) modules
    Message size should include ending zero byte
    Moved all Rime examples into examples/rime directory
    API change for Rime: *_setup() renamed to *_open()
    Simple Rime test code
    Renamed Rime output function
    A Rime driver for the simple-cc2420 driver
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated the Rime channel numbers so that all examples can be run in the same network without channel clashes
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Changed names of the Rime examples from test-* to example-* and added examples for ruc and uc
    Renamed uabc to polite
    Added exithandlers so that the examples can be run as loadable (and unloadble) modules
    Moved all Rime examples into examples/rime directory
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    fixed compiler warnings
    Updated the Rime channel numbers so that all examples can be run in the same network without channel clashes
    Code style fixes
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    updated runicast example: added sender history to detect duplicate callbacks
    longer send period + forcing example to wait until an ongoing transmission is finished before initiating a new transmission
    Changed name of Rime module ruc to unicast
    Changed names of the Rime examples from test-* to example-* and added examples for ruc and uc
    Static should come first because it's a storage class.
    Added exithandlers so that the examples can be run as loadable (and unloadble) modules
    Message size should include ending zero byte
    Moved all Rime examples into examples/rime directory
    API change for Rime: *_setup() renamed to *_open()
    Simple Rime test code
    Renamed Rime output function
    A Rime driver for the simple-cc2420 driver
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    Removed old unused profile.h code
    Cleanup of the node-id.h files. The node-id.h file contains
    declarations of functions for setting and getting a node ID number, a
    functionality that exists on many platforms. Since this functionality
    was not considered part of the Contiki core, each platform defined its
    own node-id.h file. This commit attempts to clean this up by
    collecting the node-id.h into a core/sys/node-id.h file that replaces
    the old node-id.h files from the platform directories.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updated to match the new sensors API
    Updated the Rime channel numbers so that all examples can be run in the same network without channel clashes
    Replaced NETSIM macro with general (and now actually working) solution in Makefile.include.
    using the same addresses in both netsim and non-netsim
    added netsim address style support
    sending from node 2 to node 1
    Changed names of the Rime examples from test-* to example-* and added examples for ruc and uc
    Fixed compiler warnings to make code compile with gcc's -pedantic switch
    Program for testing the Rime reliable unicast bulk transfer protocol
    Bugfixes, updates
    Added more printouts
    Added exithandlers so that the examples can be run as loadable (and unloadble) modules
    Added configurable interval
    Moved all Rime examples into examples/rime directory
    API change for Rime: *_setup() renamed to *_open()
    Simple Rime test code
    Renamed Rime output function
    A Rime driver for the simple-cc2420 driver
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updated the announcement example to follow the current API.
    argument must be qualified as const
    Added example announcement code
    Changed the 'ibc' and 'uc' Rime modules into the more descriptive names 'broadcast' and 'unicast'
    Changed names of the Rime examples from test-* to example-* and added examples for ruc and uc
    Static should come first because it's a storage class.
    Added exithandlers so that the examples can be run as loadable (and unloadble) modules
    Message size should include ending zero byte
    Moved all Rime examples into examples/rime directory
    API change for Rime: *_setup() renamed to *_open()
    Simple Rime test code
    Renamed Rime output function
    A Rime driver for the simple-cc2420 driver
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updated to match the new sensors API
    fixed to compile with new sensors API
    Updated the Rime channel numbers so that all examples can be run in the same network without channel clashes
    switched all users of cfs_seek(x,y) to cfs_seek(x,y,CFS_SEEK_SET)
    Changed names of the Rime examples from test-* to example-* and added examples for ruc and uc
    Fixed compiler warnings to make code compile with gcc's -pedantic switch
    Removed bad include cfs/cfs-ram.h
    Added LED output that shows when a file has been completely downloaded
    Added exithandlers so that the examples can be run as loadable (and unloadble) modules
    Removed the use of CFS. Instead, provide callbacks for the using application to fill in data.
    Added rudolph tests
    Moved all Rime examples into examples/rime directory
    API change for Rime: *_setup() renamed to *_open()
    Example showing how to use the mesh routing code in Rime
    A Rime driver for the simple-cc2420 driver
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    New example that shows how to send and receive broadcast and unicast as well as how to use a simple Contiki list and a memb memory block pool.
    Changed name of Rime module ruc to unicast
    Changed the 'ibc' and 'uc' Rime modules into the more descriptive names 'broadcast' and 'unicast'
    Changed names of the Rime examples from test-* to example-* and added examples for ruc and uc
    Fixed to use the 'collect' module instead of the 'tree' module
    Renamed uabc to polite
    Bugfixes, updates
    Added default netsim target
    Added exithandlers so that the examples can be run as loadable (and unloadble) modules
    Added rudolph tests
    Moved all Rime examples into examples/rime directory
    SkyByteRadio was replaced by Msp802154Radio
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Broadcast example
    explicit make clean before compiling firmwares
    Wait 1s before pressing the button to give the button sensor time to activate
    moved test scripts into simulation config (.csc)
    with the recent mote type updates, the simulation config structure changed.
    
    * updated simconfigs
    updated  reference to moved plugin class VisUDGM. enables importing tests graphically again.
    with target specific extensions (.sky)
    added two rime/sky tests: abc and trickle
    Re-structure CC2538 doxygen module hierarchy
    Changed the name of the rimeaddr module to linkaddr
    cc2538: Add adc driver and example
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    Don't increment the counter when a button is pressed
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Updated include paths for the moved files under net/
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    cc2531: Added a new USB demo project (CDC-ACM)
    
    See Pull Request #18
    Added examples for MB851 platform.
    Added a Contiki app basically combining apps/netconf and apps/dhcp. It's a 6502 specific app as it doesn't configure the running uIP instance but instead writes to the 'contiki.cfg' configuration file used by 6502 apps to configure uIP.
    Now that we started adding files to the CVS which are normally generated with a 'save...' make goal we can remove the DEFAULT_TARGET mechanism altogether and just add Makefile.target files.
    Many project Makefiles build just one Contiki binary. Up to now the name of this binary was only available to the 'all' goal as prerequisite. So it was possible to create a non-project-specific rule to i.e. load that binary into the target device.
    
    Therefore I introduced the make variable CONTIKI_PROJECT. Now a typical project Makefile starts with:
    
    CONTIKI_PROJECT = hello-world
    all: $(CONTIKI_PROJECT)
    replaced blink with blinker that uses more sensors
    ESB examples
    Added an example application to show the usage of the Contiki Multi-threading library.
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add MQTT demo for the cc2538dk platform
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Add MQTT demo for the cc2538dk platform
    Add MQTT demo for the cc2538dk platform
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Fixed doxygen formatting
    Add title to doxygen group
    Add MQTT demo for the cc2538dk platform
    Add MQTT demo for the cc2538dk platform
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Stop setting WITH_UIP6=1 in example Makefiles
    
    It achieves exactly nothing other than generate confusion
    Example code for the simple UDP API
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: sensinode examples
    Fixed the stub-rdc driver used by various cc2x30 examples
    Reincarnate the sensinode/cc2430 port
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Added a field to the struct mac interface:
    channel_check_interval(). This function returns the interval by which
    the duty cycling mechanism checks the radio channel for activity. It
    is used by higher layer mechanisms to determine suitable timeouts for
    retransmissions.
    Code style fix
    generic return values for sent packet
    added init function in MAC driver for easier configuration
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    added name to mac structure
    Added parameter to the mac off() method that specifies whether or not the radio should be turned off when the MAC layer is turned off
    Avoid usage of POSIX function names even for static functions as some indirectly included system header might declare them.
    Ensure that receiver_callback is set before calling it
    Made initialization function return a pointer to the MAC driver structure, to make initialization nicer
    Modified to use the new MAC layer API
    Avoid function pointer mismatch in set_receive_function().
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk examples
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Common initialization code for the netstack
    Import of the contiki-2.x development code from the SICS internal CVS server
    cc2538: uart: Make it possible to use several UARTs simultaneously
    
    This avoids the limitation of having a single UART available at runtime, without
    duplicating code.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Updated include paths for the moved files under net/
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    cc2530dk: Sniffer example changes:
    
    - Building for the cc2531 USB dongle by default
    - We turn on USB-serial buffered mode
    
    Closes #21
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Reincarnate the sensinode/cc2430 port
    Moved net/rime.h to net/rime/rime.h
    Removed the experimental checkpointing code
    Remove everything that depended on the now gone twitter APP.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    change some examples for iris
    Broke out the base64 commands from the text module
    Added the tweet command
    contiki shell example with only platform independent commands
    enabled download and sendcmd commands + cleanup
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Disabled checkpointing for the default sky-shell build to reduce object code size, instead added a separate sky-checkpoint build with checkpointing but without the 'sky-alldata' command
    added checkpoint and rollback commands:
    
    writes/reads checkpoint images from file system.
    
    (temporarily disabled rime debug and sniff commands)
    Removed reliance on the ->u16 field in rimeaddr
    Added battery voltage level readout & SHT11 low-voltage indicator
    Enable rime debug commands (broadcast, unicast)
    Replaced the sky-shell with the new sky-shell-collect and removed sky-shell-collect
    Removed netfile command, added net debug commands
    enable coffee code coffee and netcmd commands
    Example application that runs the Contiki shell on the Tmote Sky
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Updated to new radio_driver API
    tr1001 init fix
    Added radio sniffer program
    More uip_ipaddr_t fixes.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    contiki shell example with only platform independent commands
    Now that we started adding files to the CVS which are normally generated with a 'save...' make goal we can remove the DEFAULT_TARGET mechanism altogether and just add Makefile.target files.
    Many project Makefiles build just one Contiki binary. Up to now the name of this binary was only available to the 'all' goal as prerequisite. So it was possible to create a non-project-specific rule to i.e. load that binary into the target device.
    
    Therefore I introduced the make variable CONTIKI_PROJECT. Now a typical project Makefile starts with:
    
    CONTIKI_PROJECT = hello-world
    all: $(CONTIKI_PROJECT)
    Introduced web browser as new example using ctk fullscreen mode.
    replaced blink with blinker that uses more sensors
    ESB examples
    Added an example application to show the usage of the Contiki Multi-threading library.
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    examples for uIPv6
    Introduced web browser as new example using ctk fullscreen mode.
    Rime statistics gathering
    Import of the contiki-2.x development code from the SICS internal CVS server
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    replaced DEFAULT_TARGET with Makefile.target for specifying default target
    Now that we started adding files to the CVS which are normally generated with a 'save...' make goal we can remove the DEFAULT_TARGET mechanism altogether and just add Makefile.target files.
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    replaced DEFAULT_TARGET with Makefile.target for specifying default target
    examples for uIPv6
    SkyByteRadio was replaced by Msp802154Radio
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Add an example demonstrating trickle timers
    Added bursts support in CSMA/ContikiMAC, and CFS-swapping in
    queuebuf. Exemplified in examples/udp-stream.
    Added a coap client and running coap-client-server COOJA simulation. Made README more detailed.
    Added example COOJA simulation
    Updated include paths for the moved files under net/
    examples/trickle-library: correct probability expression
    
    Documented intent is to update with probability 1/NEW_TOKEN_PROB where
    NEW_TOKEN_PROB is 0x80.  The current implementation updates with probability
    1/2.  Update NEW_TOKEN_PROB and the expression to keep existing behavior
    while correcting the calculation.
    
    Signed-off-by: Peter A. Bigot <pab@pabigot.com>
    Add an example demonstrating trickle timers
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Add an example demonstrating trickle timers
    Added CTK standalone FTP client example.
    Added IRC client example.
    Many project Makefiles build just one Contiki binary. Up to now the name of this binary was only available to the 'all' goal as prerequisite. So it was possible to create a non-project-specific rule to i.e. load that binary into the target device.
    
    Therefore I introduced the make variable CONTIKI_PROJECT. Now a typical project Makefile starts with:
    
    CONTIKI_PROJECT = hello-world
    all: $(CONTIKI_PROJECT)
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Replace reads of rimestats with RIMESTATS_GET(x)
    Code style fixes: sensinode examples
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Reincarnate the sensinode/cc2430 port
    Powertrace: a program that periodically prints out the power consumption; suitable for experiments or simulations that want to measure power consumption
    added printout of sender of received messages
    Added broadcast example for completeness
    minor fix: removed superfluous etimer_reset
    transmit with random intervals: 2-4 seconds
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Bugfix: it is etimer_reset() that makes timer behavior stable, not etimer_restart()
    Use etimer_restart() to avoid synchronization effects from the abc_send() invocation taking time to complete
    printing message when packet sent
    
    + changed period to 2 seconds (can be run unchanged with x-mac)
    Changed names of the Rime examples from test-* to example-* and added examples for ruc and uc
    Static should come first because it's a storage class.
    Added exithandlers so that the examples can be run as loadable (and unloadble) modules
    Message size should include ending zero byte
    Moved all Rime examples into examples/rime directory
    API change for Rime: *_setup() renamed to *_open()
    Simple Rime test code
    Renamed Rime output function
    A Rime driver for the simple-cc2420 driver
    Import of the contiki-2.x development code from the SICS internal CVS server
    Code style fixes: sensinode examples
    Reincarnate the sensinode/cc2430 port
    Code style fixes: sensinode examples
    Adjust cc2x3x ports to the new clock API
    Improved cc2x30 timer test examples
    
    * Adjusted the cc2530 timer-test example to reflect recent changes to clock_delay()
    * Sensinode now uses the newer timer-test example copied over from cc2530dk
    * Deleted the obsolete clock-test. timer-test is a superset
    Some uN_t had crept back in cc2530dk and sensinode.
    
    Changed to uintN_t plus a bit of code formatting
    Reincarnate the sensinode/cc2430 port
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Deleted obsolete sensinode examples
    Reincarnate the sensinode/cc2430 port
    - Removed rime_test from the Makefile
    Initial commit of examples for the Sensinode/cc2430 platform.
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Code style fixes: sensinode examples
    Reincarnate the sensinode/cc2430 port
    Reincarnate the sensinode/cc2430 port
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Reincarnate the sensinode/cc2430 port
    Code style fixes: sensinode examples
    Reincarnate the sensinode/cc2430 port
    Code style fixes: sensinode examples
    Some uN_t had crept back in cc2530dk and sensinode.
    
    Changed to uintN_t plus a bit of code formatting
    Reincarnate the sensinode/cc2430 port
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Reincarnate the sensinode/cc2430 port
    Code style fixes: sensinode examples
    Fixed the stub-rdc driver used by various cc2x30 examples
    Reincarnate the sensinode/cc2430 port
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Added a field to the struct mac interface:
    channel_check_interval(). This function returns the interval by which
    the duty cycling mechanism checks the radio channel for activity. It
    is used by higher layer mechanisms to determine suitable timeouts for
    retransmissions.
    Code style fix
    generic return values for sent packet
    added init function in MAC driver for easier configuration
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    added name to mac structure
    Added parameter to the mac off() method that specifies whether or not the radio should be turned off when the MAC layer is turned off
    Avoid usage of POSIX function names even for static functions as some indirectly included system header might declare them.
    Ensure that receiver_callback is set before calling it
    Made initialization function return a pointer to the MAC driver structure, to make initialization nicer
    Modified to use the new MAC layer API
    Avoid function pointer mismatch in set_receive_function().
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    Code style fixes: sensinode examples
    Reincarnate the sensinode/cc2430 port
    Common initialization code for the netstack
    Import of the contiki-2.x development code from the SICS internal CVS server
    Reincarnate the sensinode/cc2430 port
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    added init function in MAC driver for easier configuration
    A quick, initial implementation of the LPP power-saving MAC protocol (Musaloiu-E et al, IPSN 2008)
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Adjust cc2x3x ports to the new clock API
    Renamed sensinode-debug to debug
    Reincarnate the sensinode/cc2430 port
    Updated *-sensor.c files from the sky platform.
    Fixed battery-sensor plus added simple test (XXX)
    Updated *-sensor.c files from the sky platform.
    Fixed battery-sensor plus added simple test (XXX)
    added phidget example for z1
    fixed button to toggle light sensor
    instantiated file-description and fixed style
    added activation of button sensor and activation and deactivation / toggle of light sensor
    added missing include
    fixed for new sensor APIs
    Testing the button
    Blinking LEDs
    Experimental energy estimation code
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Reincarnate the sensinode/cc2430 port
    Updated include paths for the moved files under net/
    Don't build the Sensinode UDP server as RPL root
    
    The Sensinode UDP-IPv6 example used to build the
    UDP server to act as RPL root by default. This now
    changes, the server is a simple router. Support to
    build the server as RPL root is still there, it's
    just the default that changes
    Replace reads of rimestats with RIMESTATS_GET(x)
    Code style fixes: sensinode examples
    cc2530dk and Sensinode example udp server code cleanup
    Offload some bytes off the cc2x3x stack for the sensinode & cc2530dk udp server example
    Renamed sensinode-debug to debug
    Fixed mis-formatted printfs
    Turn off printf for sensinode examples which will otherwise not fit our flash
    Reincarnate the sensinode/cc2430 port
    Updated include paths for the moved files under net/
    Code style fixes: sensinode examples
    Renamed sensinode-debug to debug
    Reincarnate the sensinode/cc2430 port
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    minor cleanup of example (changed to use uiplib to parse IPv6 address)
    Support fragmentation testing.
    Updated for new for new uIPv6 APIs. Also fixed compiler warning.
    updated for new uIPv6 APIs
    a little faster autoconfiguration
    changed address setup slightly.
    changed udp examples into a client and a server, added multi-hop routing,
    clarified the code.
    printing local ipv6 address at startup. addresses must match in order for the examples to work
    moved ipv6 udp example processes from apps/udp to inside examples/udp-receiver-ipv6 and examples/udp-sender-ipv6
    
    * transmitting human readable strings between the two processes
    * remote address configurable at compile time via DEFINES=...
    examples for uIPv6
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Decrease Sensinode example code size
    Replace reads of rimestats with RIMESTATS_GET(x)
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Reincarnate the sensinode/cc2430 port
    Broke out serial-shell from the shell app into its own app. Project can use the serial-shell to get a shell running over the serial line, just like a project can use the telnetd to get a shell running over Telnet/TCP/IP.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    Code style fixes: sensinode examples
    Renamed sensinode-debug to debug
    Changes to the ping part of the cc2530 and Sensinode udp-ipv6 examples
    
    - Remove obsolete variable declarations
    - prettier printf output
    - cc2530 example turns on printfs
    Some uN_t had crept back in cc2530dk and sensinode.
    
    Changed to uintN_t plus a bit of code formatting
    Changed some sensinode/cc2530 examples to use uip-debug.h instead of the old #define DEBUG N
    Reincarnate the sensinode/cc2430 port
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    Removed void * operations
    dos2unix conversion
    fixed for new uip6 APIs
    *** empty log message ***
    ping-ipv6 example compiles on native cygwin
    end of apps for uIPv6
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    cc2x3x RPL/non-RPL handling:
    
    - Relevant examples explicitly request it in their Makefile
    - Removed the definition of UIP_CONF_IPV6_RPL from
      contiki-conf.h. If needed, it's defined through a -D
    Reincarnate the sensinode/cc2430 port
    Code style fixes: sensinode examples
    Renamed sensinode-debug to debug
    Reincarnate the sensinode/cc2430 port
    Decrease Sensinode example code size
    Reincarnate the sensinode/cc2430 port
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    added init function in MAC driver for easier configuration
    A quick, initial implementation of the LPP power-saving MAC protocol (Musaloiu-E et al, IPSN 2008)
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    Code style fixes: sensinode examples
    Renamed sensinode-debug to debug
    Reincarnate the sensinode/cc2430 port
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    minor cleanup of example (changed to use uiplib to parse IPv6 address)
    Updated for new for new uIPv6 APIs. Also fixed compiler warning.
    updated for new uIPv6 APIs
    a little faster autoconfiguration
    fixed debug output to show the correct remote address
    changed udp examples into a client and a server, added multi-hop routing,
    clarified the code.
    printing local ipv6 address at startup. addresses must match in order for the examples to work
    moved ipv6 udp example processes from apps/udp to inside examples/udp-receiver-ipv6 and examples/udp-sender-ipv6
    
    * transmitting human readable strings between the two processes
    * remote address configurable at compile time via DEFINES=...
    examples for uIPv6
    Platform-specific devices.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Reincarnate the sensinode/cc2430 port
    Reincarnate the sensinode/cc2430 port
    removed refences to printf2log.h
    cooja hello world (+ include printf2log.h)
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    cc2x3x RPL/non-RPL handling:
    
    - Relevant examples explicitly request it in their Makefile
    - Removed the definition of UIP_CONF_IPV6_RPL from
      contiki-conf.h. If needed, it's defined through a -D
    Reincarnate the sensinode/cc2430 port
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Reincarnate the sensinode/cc2430 port
    Code style fixes: sensinode examples
    Renamed sensinode-debug to debug
    Reincarnate the sensinode/cc2430 port
    Reincarnate the sensinode/cc2430 port
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Code style fixes: sensinode examples
    Renamed sensinode-debug to debug
    Reincarnate the sensinode/cc2430 port
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Reincarnate the sensinode/cc2430 port
    Code style fixes: sensinode examples
    Fixed the stub-rdc driver used by various cc2x30 examples
    Reincarnate the sensinode/cc2430 port
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Added a field to the struct mac interface:
    channel_check_interval(). This function returns the interval by which
    the duty cycling mechanism checks the radio channel for activity. It
    is used by higher layer mechanisms to determine suitable timeouts for
    retransmissions.
    Code style fix
    generic return values for sent packet
    added init function in MAC driver for easier configuration
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    added name to mac structure
    Added parameter to the mac off() method that specifies whether or not the radio should be turned off when the MAC layer is turned off
    Avoid usage of POSIX function names even for static functions as some indirectly included system header might declare them.
    Ensure that receiver_callback is set before calling it
    Made initialization function return a pointer to the MAC driver structure, to make initialization nicer
    Modified to use the new MAC layer API
    Avoid function pointer mismatch in set_receive_function().
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    Code style fixes: sensinode examples
    Reincarnate the sensinode/cc2430 port
    Common initialization code for the netstack
    Import of the contiki-2.x development code from the SICS internal CVS server
    Reincarnate the sensinode/cc2430 port
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    added init function in MAC driver for easier configuration
    A quick, initial implementation of the LPP power-saving MAC protocol (Musaloiu-E et al, IPSN 2008)
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    Reincarnate the sensinode/cc2430 port
    Updated include paths for the moved files under net/
    Reincarnate the sensinode/cc2430 port
    removed refences to printf2log.h
    cooja hello world (+ include printf2log.h)
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Reincarnate the sensinode/cc2430 port
    Updated include paths for the moved files under net/
    Code style fixes: sensinode examples
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Reincarnate the sensinode/cc2430 port
    Turn off RDC before SLIP prefix interchange. Disable SIN/SUT prints, leave off-route prints.
    added response to Mac addr request and added addrs in printout
    added undef of putchar for platforms where it is a macro
    moved config file
    added missing include
    updated with support for getting prefix from tunslip6 and for setting RPL prefix
    added very basic rpl-border router example
    Made SLIP code coexist with ordinary serial code. If WITH_UIP=1, the SLIP code is used instead.
    Added energy estimation
    Removed clock_delay()
    Added clock_delay() between characters to avoid dropping them
    * General stuff for different baudrates:
    
        - ubr argument to slip_arch_int
    
        - macros for calculating ubr
    
        - argument -Bbaudrate to tools tunslip and scat
    * Bump speed over serial to 115200 (Tmote sky only).
    Use LPM4_EXIT to return from sleep on msp430.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    Code style fixes: sensinode examples
    Sensinode: Border router debug without printf
    
    Closes #20
    Added channel_get() to the cc2x3x RF drivers
    We can now use SDCC's __nonbanked feature
    
    This allows us to reduce CODE footprint of SDCC projects
    built with --model-huge. Use carefully!
    
    * Added a facility which allows us to enable/disable the
      feature from the CPU dir (CC_CONF_NON_BANKED_OPTIMIZATION)
    * Added the CC_NON_BANKED keyword to some platform files
      (expands to __nonbanked)
    * Started using this for some examples
    Turn off printf for sensinode examples which will otherwise not fit our flash
    Reincarnate the sensinode/cc2430 port
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    minor cleanup of example (changed to use uiplib to parse IPv6 address)
    Updated for new for new uIPv6 APIs. Also fixed compiler warning.
    updated for new uIPv6 APIs
    a little faster autoconfiguration
    fixed debug output to show the correct remote address
    changed udp examples into a client and a server, added multi-hop routing,
    clarified the code.
    printing local ipv6 address at startup. addresses must match in order for the examples to work
    moved ipv6 udp example processes from apps/udp to inside examples/udp-receiver-ipv6 and examples/udp-sender-ipv6
    
    * transmitting human readable strings between the two processes
    * remote address configurable at compile time via DEFINES=...
    examples for uIPv6
    Platform-specific devices.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Move SLIP interface define to project-conf
    Reincarnate the sensinode/cc2430 port
    Renamed serial module to serial-line
    * Addition of Meshnetics Zigbig platform by Frederic Thepaut <frederic.thepaut@inooi.com>
    
    * Changed default RavenUSB timeout to 3 seconds... seems to give most reliable transmissions
    forgot these files for RCB...
    Contiki port for the Atmel AVR Raven board
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    cc2x3x RPL/non-RPL handling:
    
    - Relevant examples explicitly request it in their Makefile
    - Removed the definition of UIP_CONF_IPV6_RPL from
      contiki-conf.h. If needed, it's defined through a -D
    Reincarnate the sensinode/cc2430 port
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    disabled rime commands to decrease rom usage
    Example code for multi-hop Tmote Sky telnet server and web server
    TCP/IP-networking examples for the Tmote Sky platform
    Updated to new radio_driver API
    tr1001 init fix
    Added radio sniffer program
    More uip_ipaddr_t fixes.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Added missing separators in Javascript. Fixed sensors web page to use the right Javascript function to reload sensor data.
    Compressed the Javascript code to improve loading time; placed the uncompressed code in a separate file
    Rewrote the webserver so that sensor data is loaded using Ajax-style XmlHttpRequest and that a spinner icon is shown when the data is loaded
    Added an AJAX-style web server app that continously updates a web page with data from the Tmote Sky on-board sensors
    Moved net/rime.h to net/rime/rime.h
    Remove everything that depended on the now gone twitter APP.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Reduced the available commands to make code fit
    Added a telnet server with Twitter commands
    Example code for multi-hop Tmote Sky telnet server and web server
    TCP/IP-networking examples for the Tmote Sky platform
    Updated to new radio_driver API
    tr1001 init fix
    Added radio sniffer program
    More uip_ipaddr_t fixes.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Now that we started adding files to the CVS which are normally generated with a 'save...' make goal we can remove the DEFAULT_TARGET mechanism altogether and just add Makefile.target files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the examples directory.
    Rewrote the webserver so that sensor data is loaded using Ajax-style XmlHttpRequest and that a spinner icon is shown when the data is loaded
    Added an AJAX-style web server app that continously updates a web page with data from the Tmote Sky on-board sensors
    Adjusted source formatting Mk II ;-)
    Adjusted source formatting.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    Moved the sht11 driver to its own module
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updated to latest collect-neighbor API
    Updated to latest announcement API and fixed typo
    Updated to latest collect-neighbor API
    fixed typo + announcement API to avoid compiler warning
    Updated to match the new sensors API
    Rewrote the webserver so that sensor data is loaded using Ajax-style XmlHttpRequest and that a spinner icon is shown when the data is loaded
    Remove debug printouts. Increase neighbor advertisement timers.
    Added an AJAX-style web server app that continously updates a web page with data from the Tmote Sky on-board sensors
    Changed all sprintf() calls to snprintf() to make it useful for systems with very low buffer size
    Adjusted process display cgi to recent change in process states.
    Optimzed PETSCII support.
    Allow to find the scripts on PETSCII machines.
    Removed compiler warning.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Avoid usage of nameless unions as they are - surprisingly at least to me - not part of any C spec.
    Added center alignment to network statistic columns. Now it looks nicer and is consistent with the system processes columns.
    Updated processes script output to match HTML ;-)
    Ported processes cgi to Contiki 2.x.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Example code for multi-hop Tmote Sky telnet server and web server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Converted u8_t to uint8_t and u16_t to uint16_t in the examples directory.
    Added missing separators in Javascript. Fixed sensors web page to use the right Javascript function to reload sensor data.
    Compressed the Javascript code to improve loading time; placed the uncompressed code in a separate file
    Rewrote the webserver so that sensor data is loaded using Ajax-style XmlHttpRequest and that a spinner icon is shown when the data is loaded
    Added an AJAX-style web server app that continously updates a web page with data from the Tmote Sky on-board sensors
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Remove everything that depended on the now gone twitter APP.
    Added SMALL=1 to make code fit on Tmote Sky
    Updated to configure MAC using NETSTACK
    Added the telnet code to the list of targets to make them compile when running a bare 'make'
    MAC channel check rate configuration paramter renamed
    The IPv4 examples work much better with the cxmac power-saving radio protocol; added Makefile flag to get the non-cfs HTTP server
    Added a telnet server with Twitter commands
    Added an AJAX-style web server app that continously updates a web page with data from the Tmote Sky on-board sensors
    Reverted mistake commit
    Removed redundant targets
    Now that we started adding files to the CVS which are normally generated with a 'save...' make goal we can remove the DEFAULT_TARGET mechanism altogether and just add Makefile.target files.
    Many project Makefiles build just one Contiki binary. Up to now the name of this binary was only available to the 'all' goal as prerequisite. So it was possible to create a non-project-specific rule to i.e. load that binary into the target device.
    
    Therefore I introduced the make variable CONTIKI_PROJECT. Now a typical project Makefile starts with:
    
    CONTIKI_PROJECT = hello-world
    all: $(CONTIKI_PROJECT)
    TCP/IP-networking examples for the Tmote Sky platform
    Set default target to minimal-net.
    Allow to easily build the webserver example with cfs support by running make with the parameter HTTPD-CFS=1.
    Removed unneeded target
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Reduced the available commands to make code fit
    TCP/IP-networking examples for the Tmote Sky platform
    Updated to new radio_driver API
    tr1001 init fix
    Added radio sniffer program
    More uip_ipaddr_t fixes.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Added an AJAX-style web server app that continously updates a web page with data from the Tmote Sky on-board sensors
    Rewrote the webserver so that sensor data is loaded using Ajax-style XmlHttpRequest and that a spinner icon is shown when the data is loaded
    Added an AJAX-style web server app that continously updates a web page with data from the Tmote Sky on-board sensors
    Added an AJAX-style web server app that continously updates a web page with data from the Tmote Sky on-board sensors
    Import of the contiki-2.x development code from the SICS internal CVS server
    Added an AJAX-style web server app that continously updates a web page with data from the Tmote Sky on-board sensors
    Rewrote the webserver so that sensor data is loaded using Ajax-style XmlHttpRequest and that a spinner icon is shown when the data is loaded
    Added missing separators in Javascript. Fixed sensors web page to use the right Javascript function to reload sensor data.
    Compressed the Javascript code to improve loading time; placed the uncompressed code in a separate file
    Rewrote the webserver so that sensor data is loaded using Ajax-style XmlHttpRequest and that a spinner icon is shown when the data is loaded
    Added an AJAX-style web server app that continously updates a web page with data from the Tmote Sky on-board sensors
    Rewrote the webserver so that sensor data is loaded using Ajax-style XmlHttpRequest and that a spinner icon is shown when the data is loaded
    Added an AJAX-style web server app that continously updates a web page with data from the Tmote Sky on-board sensors
    Add extended RF API example
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Simplify the extended RF API example
    Add extended RF API example
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Minor update to improve output in extended RF API example. On 16 bit
    platforms, PAN id and short address might be negative when used as
    16 bit signed integers.
    Add extended RF API example
    Cleanup of the node-id.h files. The node-id.h file contains
    declarations of functions for setting and getting a node ID number, a
    functionality that exists on many platforms. Since this functionality
    was not considered part of the Contiki core, each platform defined its
    own node-id.h file. This commit attempts to clean this up by
    collecting the node-id.h into a core/sys/node-id.h file that replaces
    the old node-id.h files from the platform directories.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Fixed the udp-stream example: use the new RPL interface, reduce RAM usage
    Added bursts support in CSMA/ContikiMAC, and CFS-swapping in
    queuebuf. Exemplified in examples/udp-stream.
    Print out sender IPv6 address when receiving data. When sending data, include a counter in the message.
    Copyright headers
    Example code for the simple UDP API
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Fix naming issues and includes in uip-ds6-nbr.h
    Removed now unused per-module neighbor table size configs. Use NEIGHBOR_CONF_MAX_NEIGHBORS instead.
    Changed the name of the IPv6 number of route entries configuration from UIP_CONF_DS6_ROUTE_NBU to UIP_CONF_MAX_ROUTES.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Fixed the udp-stream example: use the new RPL interface, reduce RAM usage
    Added bursts support in CSMA/ContikiMAC, and CFS-swapping in
    queuebuf. Exemplified in examples/udp-stream.
    Cleaned up some files, moved z1-websense example
    Added IPv6 z1-websense demo w/MSP batt&temp sensor
    Moved project-conf.h
    Web server example showing light and temperature sensor data
    Added simple web server listing the neighbors and routes
    reduced the buffers to save memory
    added project configuration
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    ntikiMAC: a new radio duty cycling mechanism that uses a combination
    of link-layer and MAC-layer mechanisms to achieve a very low power
    consumption: during idle listening the radio is switched off between
    99.2% and 99.6% of the time. One unicast transmission typically adds
    between 0.07% and 1.2% additional radio time, depending on packet
    size.
    
    ContikiMAC uses the standard IEEE 802.15.4 message format and adds no
    additional headers.
    
    ContikiMAC is simple: it uses periodic two-shot channel sampling
    during idle listening to keep the radio on-time down. Transmissions
    are done with repeated transmissions until a link-layer ACK is
    received.
    Increased the clock speed to 32768/4 from 32768/8 to provide better accuracy for power profiling of radio CCA checks
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    removed offset in rtimer_arch
    Reading timer now quicker, embryo for possible future drift configuration
    Fixed description
    MSP430 real-time rtimer support using timerb1
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    MSP430 definitions
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    SkyByteRadio was replaced by Msp802154Radio
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Added bursts support in CSMA/ContikiMAC, and CFS-swapping in
    queuebuf. Exemplified in examples/udp-stream.
    Added a coap client and running coap-client-server COOJA simulation. Made README more detailed.
    Added example COOJA simulation
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Stop setting WITH_UIP6=1 in example Makefiles
    
    It achieves exactly nothing other than generate confusion
    Added bursts support in CSMA/ContikiMAC, and CFS-swapping in
    queuebuf. Exemplified in examples/udp-stream.
    Re-added temporarily removed file.
    Temporarily removed file due to CVS issue.
    The Contiki 2.x build system allows to define arbitrary macros for the C compiler preprocessor (in other word add -d<macro[=value]>'s to the C compiler command line) directly from the gnumake command line by setting the gnumake variable DEFINES to a comma-seperated list of macros (and optionally values) like this:
    
    make TARGET=mytarget DEFINES=MYLOG, MYSIZE=100, MYTRACE
    
    The build system does however _NOT_ take care to rebuild things if the DEFINES change so most likely a 'make clean' is advisable. To ease usage the DEFINES may be saved individually per target with the goal 'savedefines' similiar to savinf the target.
    
    The 6502-based target leverage the DEFINES mechanism by introducing so-called 'high level config macros' which allow to configure Contiki per target AND per project.
    
    Most of the time there's exactly one reasonable set of high level config macros for every combination of target and project. Therefore it makes sense to place them into CVS.
    Allow for non-GUI win32 apps.
    Reduced MTU size in order to allow for a reasonable (and full screen width) URL length.
    Activated Platform-specific File System (PFS) for the C128 by default for all programs with R/O CFS access.
    Without forms, centering and history we can just squeeze in DNS.
    Added high-level config macros for the C128 (due to lack of memory no DNS support for the webbrowser).
    Now that we started adding files to the CVS which are normally generated with a 'save...' make goal we can remove the DEFAULT_TARGET mechanism altogether and just add Makefile.target files.
    Added mouse support for the Atari.
    Added platform 'Atari XL'.
    
    Don't be afraid, I'm not trying to have more retro platforms than "real" platforms ;-)
    The platform 'atarixl' will replace the platform 'atari'. However I need both for some
    transition period.
    Added cc65 target 'atari' for Atari 8-bit machines. This addition was triggered by exsistence of http://www.atari8ethernet.com/.
    Activated Platform-specific File System (PFS) for the C64 by default for all programs with R/O CFS access.
    Now that the C64 mouse driver works we can activate the mouse support for this target :-)
    Deactivated mouse support on the C64 because of "phantom keystroke" and "phantom mouseclick" issues :-(
    The Contiki 2.x build system allows to define arbitrary macros for the C compiler preprocessor (in other word add -d<macro[=value]>'s to the C compiler command line) directly from the gnumake command line by setting the gnumake variable DEFINES to a comma-seperated list of macros (and optionally values) like this:
    
    make TARGET=mytarget DEFINES=MYLOG, MYSIZE=100, MYTRACE
    
    The build system does however _NOT_ take care to rebuild things if the DEFINES change so most likely a 'make clean' is advisable. To ease usage the DEFINES may be saved individually per target with the goal 'savedefines' similiar to savinf the target.
    
    The 6502-based target leverage the DEFINES mechanism by introducing so-called 'high level config macros' which allow to configure Contiki per target AND per project.
    
    Most of the time there's exactly one reasonable set of high level config macros for every combination of target and project. Therefore it makes sense to place them into CVS.
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Now that we started adding files to the CVS which are normally generated with a 'save...' make goal we can remove the DEFAULT_TARGET mechanism altogether and just add Makefile.target files.
    Many project Makefiles build just one Contiki binary. Up to now the name of this binary was only available to the 'all' goal as prerequisite. So it was possible to create a non-project-specific rule to i.e. load that binary into the target device.
    
    Therefore I introduced the make variable CONTIKI_PROJECT. Now a typical project Makefile starts with:
    
    CONTIKI_PROJECT = hello-world
    all: $(CONTIKI_PROJECT)
    Introduced web browser as new example using ctk fullscreen mode.
    replaced blink with blinker that uses more sensors
    ESB examples
    Added an example application to show the usage of the Contiki Multi-threading library.
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Introduced web browser as new example using ctk fullscreen mode.
    Rime statistics gathering
    Import of the contiki-2.x development code from the SICS internal CVS server
    Ncurses-based CTK backend for the native platform.
    Allow for non-GUI win32 apps.
    SkyByteRadio was replaced by Msp802154Radio
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    NetDB: a simple DBMS application using Rime's Mesh protocol to transfer queries and responses.
    Simulation file for the unicast example
    fixed line endings
    A quick and dirty service registry daemon hack. The servreg-hack
    allows a program to register an 8-bit service ID that gets
    disseminated to the entire network, as long as a servreg-hack daemon
    is running on all neighbors. Other nodes can look up the service ID to
    figure out what nodes in the network offer this service.
    
    This is officially labeled as a "hack" so that we don't get too comfy
    with it; this hack is not the future of service discovery and
    advertisement in Contiki.
    NetDB: a simple DBMS application using Rime's Mesh protocol to transfer queries and responses.
    Avoid compilation warnings in Antelope.
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Moved the sht11 driver to its own module
    Include stdarg.h
    NetDB: a simple DBMS application using Rime's Mesh protocol to transfer queries and responses.
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Include string.h
    NetDB: a simple DBMS application using Rime's Mesh protocol to transfer queries and responses.
    Minor tweaks based on maniacbug commits.
    Bugfix: removed extreanous asterix character
    avr-libc %.*s workaround
    some trivial change
    Some Telnet server enhancements:
    - PETSCII sending support
    - Option to customize shell prompt and banner
    - Stop all running commands on shell close
    - New 'exit' and 'quit' commands to close shell
    Changed the name of the 'serial' module to 'serial-line' to signify that the module is about lines of data from the serial port, not individual bytes, and to make sdcc happy
    Minor documentation update
    Added cr/nl to end of prompt to make scripting easier
    Guard against NULL input, remove unguarded printf()
    Broke out serial-shell from the shell app into its own app. Project can use the serial-shell to get a shell running over the serial line, just like a project can use the telnetd to get a shell running over Telnet/TCP/IP.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Updated to new radio_driver API
    tr1001 init fix
    Added radio sniffer program
    More uip_ipaddr_t fixes.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Added default targets and removed certain C flags.
    Avoid setting GCC-specific flags here.
    NetDB: a simple DBMS application using Rime's Mesh protocol to transfer queries and responses.
    Added the first Antelope example: a simple command-line interface to the DBMS.
    Added the first Antelope example: a simple command-line interface to the DBMS.
    Added the first Antelope example: a simple command-line interface to the DBMS.
    More comments + minor adjustments to the header file
    A facility for testing units of Contiki software.
    no need to initialize serial line
    minor serial test application update
    Renamed serial module to serial-line
    Changed the name of the 'serial' module to 'serial-line' to signify that the module is about lines of data from the serial port, not individual bytes, and to make sdcc happy
    removed refences to printf2log.h
    moved test applications from platform root to separate directory
    minor changes
    added cooja; 'The Contiki OS Java Simulator'
    A set of simple example programs for the ESB platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Added default targets and removed certain C flags.
    Added the first Antelope example: a simple command-line interface to the DBMS.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added email client example.
    Added IRC client example.
    Introduced web browser as new example using ctk fullscreen mode.
    Rime statistics gathering
    Import of the contiki-2.x development code from the SICS internal CVS server
    Added email client example.
    Added IRC client example.
    Re-added temporarily removed file.
    Temporarily removed file due to CVS issue.
    The Contiki 2.x build system allows to define arbitrary macros for the C compiler preprocessor (in other word add -d<macro[=value]>'s to the C compiler command line) directly from the gnumake command line by setting the gnumake variable DEFINES to a comma-seperated list of macros (and optionally values) like this:
    
    make TARGET=mytarget DEFINES=MYLOG, MYSIZE=100, MYTRACE
    
    The build system does however _NOT_ take care to rebuild things if the DEFINES change so most likely a 'make clean' is advisable. To ease usage the DEFINES may be saved individually per target with the goal 'savedefines' similiar to savinf the target.
    
    The 6502-based target leverage the DEFINES mechanism by introducing so-called 'high level config macros' which allow to configure Contiki per target AND per project.
    
    Most of the time there's exactly one reasonable set of high level config macros for every combination of target and project. Therefore it makes sense to place them into CVS.
    Allow for non-GUI win32 apps.
    Activated Platform-specific File System (PFS) for the C128 by default for all programs with R/O CFS access.
    Added high-level config macros for the C128 (due to lack of memory no DNS support for the webbrowser).
    Added email client example.
    Added IRC client example.
    Deactivated mouse support on the C64 because of "phantom keystroke" and "phantom mouseclick" issues :-(
    The Contiki 2.x build system allows to define arbitrary macros for the C compiler preprocessor (in other word add -d<macro[=value]>'s to the C compiler command line) directly from the gnumake command line by setting the gnumake variable DEFINES to a comma-seperated list of macros (and optionally values) like this:
    
    make TARGET=mytarget DEFINES=MYLOG, MYSIZE=100, MYTRACE
    
    The build system does however _NOT_ take care to rebuild things if the DEFINES change so most likely a 'make clean' is advisable. To ease usage the DEFINES may be saved individually per target with the goal 'savedefines' similiar to savinf the target.
    
    The 6502-based target leverage the DEFINES mechanism by introducing so-called 'high level config macros' which allow to configure Contiki per target AND per project.
    
    Most of the time there's exactly one reasonable set of high level config macros for every combination of target and project. Therefore it makes sense to place them into CVS.
    Added email client example.
    Added IRC client example.
    Now that we started adding files to the CVS which are normally generated with a 'save...' make goal we can remove the DEFAULT_TARGET mechanism altogether and just add Makefile.target files.
    Added mouse support for the Atari.
    Added missing 'atarixl' Makefile defines.
    Added platform 'Atari XL'.
    
    Don't be afraid, I'm not trying to have more retro platforms than "real" platforms ;-)
    The platform 'atarixl' will replace the platform 'atari'. However I need both for some
    transition period.
    Added cc65 target 'atari' for Atari 8-bit machines. This addition was triggered by exsistence of http://www.atari8ethernet.com/.
    Activated Platform-specific File System (PFS) for the C64 by default for all programs with R/O CFS access.
    Now that the C64 mouse driver works we can activate the mouse support for this target :-)
    Added email client example.
    Added IRC client example.
    Deactivated mouse support on the C64 because of "phantom keystroke" and "phantom mouseclick" issues :-(
    The Contiki 2.x build system allows to define arbitrary macros for the C compiler preprocessor (in other word add -d<macro[=value]>'s to the C compiler command line) directly from the gnumake command line by setting the gnumake variable DEFINES to a comma-seperated list of macros (and optionally values) like this:
    
    make TARGET=mytarget DEFINES=MYLOG, MYSIZE=100, MYTRACE
    
    The build system does however _NOT_ take care to rebuild things if the DEFINES change so most likely a 'make clean' is advisable. To ease usage the DEFINES may be saved individually per target with the goal 'savedefines' similiar to savinf the target.
    
    The 6502-based target leverage the DEFINES mechanism by introducing so-called 'high level config macros' which allow to configure Contiki per target AND per project.
    
    Most of the time there's exactly one reasonable set of high level config macros for every combination of target and project. Therefore it makes sense to place them into CVS.
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Added email client example.
    Added IRC client example.
    Many project Makefiles build just one Contiki binary. Up to now the name of this binary was only available to the 'all' goal as prerequisite. So it was possible to create a non-project-specific rule to i.e. load that binary into the target device.
    
    Therefore I introduced the make variable CONTIKI_PROJECT. Now a typical project Makefile starts with:
    
    CONTIKI_PROJECT = hello-world
    all: $(CONTIKI_PROJECT)
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Ncurses-based CTK backend for the native platform.
    Allow for non-GUI win32 apps.
    llsec: Renamed ccm to ccm_star & Renamed llsec regression test
    llsec: CCM* encryption tests
    llsec: CCM* verification tests
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    two new shell commands: download and sendcmd
    added experimental checkpointing functionality:
    currently only implemented on the sky platform
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    llsec: Renamed ccm to ccm_star & Renamed llsec regression test
    llsec: CCM* encryption tests
    llsec: CCM* verification tests
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    llsec: Renamed ccm to ccm_star & Renamed llsec regression test
    llsec: CCM* encryption tests
    llsec: CCM* verification tests
    llsec: Renamed ccm to ccm_star & Renamed llsec regression test
    llsec: CCM* verification tests
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    two new shell commands: download and sendcmd
    added experimental checkpointing functionality:
    currently only implemented on the sky platform
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    llsec: Renamed ccm to ccm_star & Renamed llsec regression test
    llsec: CCM* verification tests
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    llsec: Renamed ccm to ccm_star & Renamed llsec regression test
    llsec: CCM* encryption tests
    llsec: CCM* verification tests
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    Updated Erbium (Er) examples and removed unsupported static routing module.
    Fixed legacy CoAP versions.
    Added Erbium coap-12 and coap-13.
    Cleaned up filenames
    Managed consistent representation generation for /obs.
    Added Content-Type to observe notifications.
    Changed notify API to passing a notification message.
    Changed separate API and fixed token bug.
    Fixed debug/test prints.
    Added ETSI IoT CoAP Plugtests server and tweaked rest-server-example.
    Updated Cooja simulations.
    Updated to CoAP Proposed Standard and removed draft versions.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Added Erbium coap-12 and coap-13.
    Updated file references and README.
    Cleaned up filenames
    Added Erbium REST engine with new CoAP implementation
    Added a coap client and running coap-client-server COOJA simulation. Made README more detailed.
    Added example COOJA simulation
    er-coap-example: add example for client-side CoAP observe
    Updated Cooja simulations.
    Updated to CoAP Proposed Standard and removed draft versions.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Added Erbium coap-12 and coap-13.
    Updated file references and README.
    Cleaned up filenames
    Added Erbium REST engine with new CoAP implementation
    Added a coap client and running coap-client-server COOJA simulation. Made README more detailed.
    Added example COOJA simulation
    Added Erbium coap-12 and coap-13.
    Updated Cooja simulations.
    IPv6 Multicast Example
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Added Erbium coap-12 and coap-13.
    Updated file references and README.
    Cleaned up filenames
    Added Erbium REST engine with new CoAP implementation
    Added a coap client and running coap-client-server COOJA simulation. Made README more detailed.
    Added example COOJA simulation
    er-coap-example: add example for client-side CoAP observe
    Added function for easy block1 usage.
    Fixed blocksize calculation when REST_MAX_CHUNK_SIZE != 2^x.
    Added example for block1 + separate + block2.
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    Modified project setup for er-rest-example and rest-example to use
    nullrdc and nullmac to reduce the code size. This allows the examples
    to compile on Tmote Sky again.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Fix naming issues and includes in uip-ds6-nbr.h
    Removed now unused per-module neighbor table size configs. Use NEIGHBOR_CONF_MAX_NEIGHBORS instead.
    Updated Erbium (Er) examples and removed unsupported static routing module.
    Changed the name of the IPv6 number of route entries configuration from UIP_CONF_DS6_ROUTE_NBU to UIP_CONF_MAX_ROUTES.
    Added Erbium coap-12 and coap-13.
    Optimized configuration to fit into sky again.
    Made Erbium function parameters const where applicable.\nMinor clean-up.
    Disabled RDC for CoAP demo purposes due to changing memory requirements of core system.
    Fixed Erbium example simulation
    Added Erbium REST engine with new CoAP implementation
    rest-example: don't do a hard override of config options
    Changed name of web-conf.h to project-conf.h
    Initial commit of a RESTful web service example using experimental COAP/HTTP/REST implementation for Contiki
    Web server example showing light and temperature sensor data
    Added simple web server listing the neighbors and routes
    reduced the buffers to save memory
    added project configuration
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    ntikiMAC: a new radio duty cycling mechanism that uses a combination
    of link-layer and MAC-layer mechanisms to achieve a very low power
    consumption: during idle listening the radio is switched off between
    99.2% and 99.6% of the time. One unicast transmission typically adds
    between 0.07% and 1.2% additional radio time, depending on packet
    size.
    
    ContikiMAC uses the standard IEEE 802.15.4 message format and adds no
    additional headers.
    
    ContikiMAC is simple: it uses periodic two-shot channel sampling
    during idle listening to keep the radio on-time down. Transmissions
    are done with repeated transmissions until a link-layer ACK is
    received.
    Increased the clock speed to 32768/4 from 32768/8 to provide better accuracy for power profiling of radio CCA checks
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    removed offset in rtimer_arch
    Reading timer now quicker, embryo for possible future drift configuration
    Fixed description
    MSP430 real-time rtimer support using timerb1
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    MSP430 definitions
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated README and Makefile.
    Updated Erbium (Er) examples and removed unsupported static routing module.
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    Updated copyright information.
    Added Erbium coap-12 and coap-13.
    Clean-up and fix for rest-server-example.
    Changed separate API and fixed token bug.
    Fixed token bug in separate response and extended API (thanks to Klaus Hartke for the bug report).
    Bugfix for separate NON requests and updated separate resonse API.\nEnabled multiple BLOCKING_REQUESTs in the same scope.
    Simplified Erbium support for separate responses.
    Added Erbium REST engine with new CoAP implementation
    Broke out the base64 commands from the text module
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated Cooja simulations.
    Updated to CoAP Proposed Standard and removed draft versions.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Added Erbium coap-12 and coap-13.
    Updated file references and README.
    Cleaned up filenames
    Fixed Erbium example simulation
    Added Erbium REST engine with new CoAP implementation
    Added a coap client and running coap-client-server COOJA simulation. Made README more detailed.
    Added example COOJA simulation
    Add SHT11 CoAP Resource and Activate Sensors for several CoAP Resources.
    Added function for easy block1 usage.
    Fixed blocksize calculation when REST_MAX_CHUNK_SIZE != 2^x.
    Added example for block1 + separate + block2.
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    typo in event resource handler comment
    
    at line 531 says PERIODIC_RESOURCE, shouldn't it be EVENT_RESOURCE, since it's a EVENT_RESOURCE demo?
    Moved the sht11 driver to its own module
    Updated Erbium (Er) examples and removed unsupported static routing module.
    Fixed legacy CoAP versions.
    Added Erbium coap-12 and coap-13.
    Added sub-resource example.
    Disabled debugging.
    Fixed bug in debug print noticed by Linus.
    Added Giovanni Pellerano's radio resource.
    Updated file references and README.
    Cleaned up filenames
    Optimized configuration to fit into sky again.
    Clean-up and fix for rest-server-example.
    Changed notify API to passing a notification message.
    Added ETSI IoT CoAP Plugtests server and tweaked rest-server-example.
    Also excluded platform native from static routing.
    Converted u8_t to uint8_t and u16_t to uint16_t in the examples directory.
    Fixed token bug in separate response and extended API (thanks to Klaus Hartke for the bug report).
    Bugfix for separate NON requests and updated separate resonse API.\nEnabled multiple BLOCKING_REQUESTs in the same scope.
    Revised Erbium observing.
    Simplified Erbium support for separate responses.
    Erbium code cleanup.
    Made Erbium function parameters const where applicable.\nMinor clean-up.
    Fixed snprintf() return value handling.
    Fixed Erbium bugs (ext. header, client request path) and added server resource config defines.
    Restructured Erbium example resources.
    Fixed Erbium chunks for minimal-net
    Fixed Erbium example simulation
    Added Erbium REST engine with new CoAP implementation
    er-coap-example: add example for client-side CoAP observe
    Cleanup UIP_CONF_IPV6_RPL configuration
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Updated README and Makefile.
    Used Uncrustify and fixed Travis build errors.
    Renamed erbium to er-coap to avoid confusion and have a meaningful directory name.
    Updated to CoAP Proposed Standard and removed draft versions.
    Stop setting WITH_UIP6=1 in example Makefiles
    
    It achieves exactly nothing other than generate confusion
    Fixed broken/unclear Ipv6 configuration with CFLAG.
    Fixed RPL configuration according to core changes.
    Updated Erbium (Er) examples and removed unsupported static routing module.
    Added Erbium coap-12 and coap-13.
    don't use static routing with econotag platform
    Updated file references and README.
    Optimized configuration to fit into sky again.
    Clean-up and fix for rest-server-example.
    Branched and added custom address to Makefile.
    Made Block1 support dependent on resource handlers.\nAdded flags and target for minimal-net.
    Bugfix for separate NON requests and updated separate resonse API.\nEnabled multiple BLOCKING_REQUESTs in the same scope.
    Moved status code API from REST engine to main coap implementation.
    Made Erbium function parameters const where applicable.\nMinor clean-up.
    Fixed Erbium example simulation
    Added Erbium REST engine with new CoAP implementation
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    Updated Erbium (Er) examples and removed unsupported static routing module.
    Added Erbium coap-12 and coap-13.
    Updated file references and README.
    Cleaned up filenames
    Also excluded platform native from static routing.
    Converted u8_t to uint8_t and u16_t to uint16_t in the examples directory.
    Moved status code API from REST engine to main coap implementation.
    Erbium code cleanup.
    Fixed Erbium bugs (ext. header, client request path) and added server resource config defines.
    Added Erbium REST engine with new CoAP implementation
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    Add SHT11 CoAP Resource and Activate Sensors for several CoAP Resources.
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    Added function for easy block1 usage.
    Fixed blocksize calculation when REST_MAX_CHUNK_SIZE != 2^x.
    Added example for block1 + separate + block2.
    Add SHT11 CoAP Resource and Activate Sensors for several CoAP Resources.
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    Updated copyright information.
    Added Erbium coap-12 and coap-13.
    Clean-up and fix for rest-server-example.
    Changed separate API and fixed token bug.
    Fixed token bug in separate response and extended API (thanks to Klaus Hartke for the bug report).
    Bugfix for separate NON requests and updated separate resonse API.\nEnabled multiple BLOCKING_REQUESTs in the same scope.
    Simplified Erbium support for separate responses.
    Added Erbium REST engine with new CoAP implementation
    Broke out the base64 commands from the text module
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    Added function for easy block1 usage.
    Fixed blocksize calculation when REST_MAX_CHUNK_SIZE != 2^x.
    Added example for block1 + separate + block2.
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    Updated copyright information.
    Added Erbium coap-12 and coap-13.
    Clean-up and fix for rest-server-example.
    Changed separate API and fixed token bug.
    Fixed token bug in separate response and extended API (thanks to Klaus Hartke for the bug report).
    Bugfix for separate NON requests and updated separate resonse API.\nEnabled multiple BLOCKING_REQUESTs in the same scope.
    Simplified Erbium support for separate responses.
    Added Erbium REST engine with new CoAP implementation
    Broke out the base64 commands from the text module
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    Updated copyright information.
    Added Erbium coap-12 and coap-13.
    Clean-up and fix for rest-server-example.
    Changed separate API and fixed token bug.
    Fixed token bug in separate response and extended API (thanks to Klaus Hartke for the bug report).
    Bugfix for separate NON requests and updated separate resonse API.\nEnabled multiple BLOCKING_REQUESTs in the same scope.
    Simplified Erbium support for separate responses.
    Added Erbium REST engine with new CoAP implementation
    Broke out the base64 commands from the text module
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated to match the new leds_toggle() API
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    Updated copyright information.
    Added Erbium coap-12 and coap-13.
    Clean-up and fix for rest-server-example.
    Changed separate API and fixed token bug.
    Fixed token bug in separate response and extended API (thanks to Klaus Hartke for the bug report).
    Bugfix for separate NON requests and updated separate resonse API.\nEnabled multiple BLOCKING_REQUESTs in the same scope.
    Simplified Erbium support for separate responses.
    Added Erbium REST engine with new CoAP implementation
    Broke out the base64 commands from the text module
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    Updated copyright information.
    Added Erbium coap-12 and coap-13.
    Clean-up and fix for rest-server-example.
    Changed separate API and fixed token bug.
    Fixed token bug in separate response and extended API (thanks to Klaus Hartke for the bug report).
    Bugfix for separate NON requests and updated separate resonse API.\nEnabled multiple BLOCKING_REQUESTs in the same scope.
    Simplified Erbium support for separate responses.
    Added Erbium REST engine with new CoAP implementation
    Broke out the base64 commands from the text module
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    Updated copyright information.
    Added Erbium coap-12 and coap-13.
    Clean-up and fix for rest-server-example.
    Changed separate API and fixed token bug.
    Fixed token bug in separate response and extended API (thanks to Klaus Hartke for the bug report).
    Bugfix for separate NON requests and updated separate resonse API.\nEnabled multiple BLOCKING_REQUESTs in the same scope.
    Simplified Erbium support for separate responses.
    Added Erbium REST engine with new CoAP implementation
    Broke out the base64 commands from the text module
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    Updated copyright information.
    Added Erbium coap-12 and coap-13.
    Clean-up and fix for rest-server-example.
    Changed separate API and fixed token bug.
    Fixed token bug in separate response and extended API (thanks to Klaus Hartke for the bug report).
    Bugfix for separate NON requests and updated separate resonse API.\nEnabled multiple BLOCKING_REQUESTs in the same scope.
    Simplified Erbium support for separate responses.
    Added Erbium REST engine with new CoAP implementation
    Broke out the base64 commands from the text module
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    Updated copyright information.
    Added Erbium coap-12 and coap-13.
    Clean-up and fix for rest-server-example.
    Changed separate API and fixed token bug.
    Fixed token bug in separate response and extended API (thanks to Klaus Hartke for the bug report).
    Bugfix for separate NON requests and updated separate resonse API.\nEnabled multiple BLOCKING_REQUESTs in the same scope.
    Simplified Erbium support for separate responses.
    Added Erbium REST engine with new CoAP implementation
    Broke out the base64 commands from the text module
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    Updated copyright information.
    Added Erbium coap-12 and coap-13.
    Clean-up and fix for rest-server-example.
    Changed separate API and fixed token bug.
    Fixed token bug in separate response and extended API (thanks to Klaus Hartke for the bug report).
    Bugfix for separate NON requests and updated separate resonse API.\nEnabled multiple BLOCKING_REQUESTs in the same scope.
    Simplified Erbium support for separate responses.
    Added Erbium REST engine with new CoAP implementation
    Broke out the base64 commands from the text module
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    Updated copyright information.
    Added Erbium coap-12 and coap-13.
    Clean-up and fix for rest-server-example.
    Changed separate API and fixed token bug.
    Fixed token bug in separate response and extended API (thanks to Klaus Hartke for the bug report).
    Bugfix for separate NON requests and updated separate resonse API.\nEnabled multiple BLOCKING_REQUESTs in the same scope.
    Simplified Erbium support for separate responses.
    Added Erbium REST engine with new CoAP implementation
    Broke out the base64 commands from the text module
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    Updated copyright information.
    Added Erbium coap-12 and coap-13.
    Clean-up and fix for rest-server-example.
    Changed separate API and fixed token bug.
    Fixed token bug in separate response and extended API (thanks to Klaus Hartke for the bug report).
    Bugfix for separate NON requests and updated separate resonse API.\nEnabled multiple BLOCKING_REQUESTs in the same scope.
    Simplified Erbium support for separate responses.
    Added Erbium REST engine with new CoAP implementation
    Broke out the base64 commands from the text module
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    Cleanup of the node-id.h files. The node-id.h file contains
    declarations of functions for setting and getting a node ID number, a
    functionality that exists on many platforms. Since this functionality
    was not considered part of the Contiki core, each platform defined its
    own node-id.h file. This commit attempts to clean this up by
    collecting the node-id.h into a core/sys/node-id.h file that replaces
    the old node-id.h files from the platform directories.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Made the file size configurable.
    print the file version more seldom.
    use more suitable process name.
    Added Deluge and tests for it.
    Bugfix: it is etimer_reset() that makes timer behavior stable, not etimer_restart()
    Use etimer_restart() to avoid synchronization effects from the abc_send() invocation taking time to complete
    printing message when packet sent
    
    + changed period to 2 seconds (can be run unchanged with x-mac)
    Changed names of the Rime examples from test-* to example-* and added examples for ruc and uc
    Static should come first because it's a storage class.
    Added exithandlers so that the examples can be run as loadable (and unloadble) modules
    Message size should include ending zero byte
    Moved all Rime examples into examples/rime directory
    API change for Rime: *_setup() renamed to *_open()
    Simple Rime test code
    Renamed Rime output function
    A Rime driver for the simple-cc2420 driver
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    cleaned up error messages and break at first error
    switched to larger type size for the file size.
    use AND on characters read back since the file size is larger than 255 bytes.
    Fixed compiler warnings to make code compile with gcc's -pedantic switch
    Changed Contiki File System (cfs) from a service to a plain library.
    
    This change means that one needs to select _ONE_ cfs implementation at Contiki library link time. But this doesn't appear to be an issue as all platforms have their "favorite" implementation anyway.
    Test file for CFS driver
    Updated for the new APIs
    Moved all Rime examples into examples/rime directory
    API change for Rime: *_setup() renamed to *_open()
    Example showing how to use the tree routing code in Rime
    A Rime driver for the simple-cc2420 driver
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Moved the sht11 driver to its own module
    Moved the cc2420 driver into a separate dev/cc2420 module
    Replace reads of rimestats with RIMESTATS_GET(x)
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Removed obsolete mac pointer
    Fixed compilation errors
    Updated to new collect router API
    Updated API for neighbor (renamed to collect-neighbor) and changed to only use timesynch when configured
    Changed to use the light-sensor and sht11-sensor instead of directory interfacing the drivers
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Reversed byte order to match the old ->u16 approach to make the automated tests & scripts work again
    Rewrote code that used the old ->u16 field in rimeaddr_t to access Rime addresses to use rimeaddr_copy() and the ->u8 field instead
    Changed name of the simple-cc2420 module to cc2420: changed all function names and variable names from simple_cc2420_* to cc2420_*.
    Changed filename of the CC2420 driver from simple-cc2420 to cc2420.
    Added simple-cc2420 include, added argument to mac->off()
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Added timestamps and radio signal noise measurements
    Updated to use the 'collect' module instead of the old 'tree' module
    Fixed compiler warnings
    Updated to send much more statistics than before: energy estimates, rime statistics, neighbor statistics
    Added SHT11 readings, a lot of other stuff
    Header already reduced
    Treeroute for Sky
    Added exithandlers so that the examples can be run as loadable (and unloadble) modules
    Updated for the new APIs
    Moved all Rime examples into examples/rime directory
    API change for Rime: *_setup() renamed to *_open()
    Example showing how to use the tree routing code in Rime
    A Rime driver for the simple-cc2420 driver
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    switched all users of cfs_seek(x,y) to cfs_seek(x,y,CFS_SEEK_SET)
    Replaced NETSIM macro with general (and now actually working) solution in Makefile.include.
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    tree.h -> collect.h
    Fixed compiler warnings to make code compile with gcc's -pedantic switch
    API fixes
    Make sure psock is included in core
    Bug fixes: no clock tick when interrupts turned off, need to artifically trigger after ELF loading
    Include path
    Make LEDs blink when data is received
    Typo
    Program for loading an ELF file over TCP and Rudolph0:ing it out into the air
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    fixed button to toggle light sensor
    instantiated file-description and fixed style
    added activation of button sensor and activation and deactivation / toggle of light sensor
    added missing include
    fixed for new sensor APIs
    Testing the button
    Blinking LEDs
    Experimental energy estimation code
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved net/rime.h to net/rime/rime.h
    Moved the cc2420 driver into a separate dev/cc2420 module
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Changed to use the light-sensor and sht11-sensor instead of directory interfacing the drivers
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    updated for the latest CC2420 api
    Changed filename of the CC2420 driver from simple-cc2420 to cc2420.
    corrected comment
    simple application to indicate connectivity between two nodes
    Rime port of the radio test
    Updated to latest uIP API
    A set of simple example programs for the ESB platform
    fixed compiler warnings
    Test program that blinks LEDs using the rtimer real-time timers
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Improved the clarity of the Coffee test.
    removed execute flag of source files (avoids diff problems with egit)
    Removed duplicate test return value.
    fixed a compiler warning by providing an int type of the argument to
    printf, as specified by the format.
    print the time of the test.
    switched all users of cfs_seek(x,y) to cfs_seek(x,y,CFS_SEEK_SET)
    format first to get deterministic results.
    seek test (-25) failed sometimes because it assumed a default file size of 8kb. reserve the file instead so the default doesn't matter.
    updated cooja/mspsim test for coffee. now with GC
    added a simple garbage collection test.
    use new remove function name.
    added append test.
    allow in-page offets
    basic tests of Coffee.
    Added an example of using the Coffee file system.
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Fixed rssi scanner application and moved into single example
    added a hi-res RSSI scanner and viewer for sky/jcreate
    Removed redundant targets
    Updated to use the 'collect' module instead of the old 'tree' module
    Added rt-leds and sky-treeroute ass default compile targets, removed tcprudolph0 as it currently does not compile due to memory exhaustion
    Added serialdump target that prints the output of the first Tmote Sky to a file
    Rudolph now in core Rime
    Makefile with default TARGET sky for the sky examples
    Added extraction of power data (not just energy)
    A set of scripts for producing plots from the output of the sky-collect program
    Made graphs nicer by using gnuplot's mulitplot functionality, added power graph
    A set of scripts for producing plots from the output of the sky-collect program
    Fixes to total power plot generation
    A set of scripts for producing plots from the output of the sky-collect program
    A set of scripts for producing plots from the output of the sky-collect program
    Fixes to total power plot generation
    A set of scripts for producing plots from the output of the sky-collect program
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Reduced size of binary to fit on Tmote Sky platform
    Removed sendtest command to make binary fit in Tmote Sky
    Example code for using the shell netperf command
    Renamed the serial module to serial-line
    sky example running both webserver and serial shell (overrides default slip handler)
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    SkyByteRadio was replaced by Msp802154Radio
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Updated to use the command line options
    Example code for using the shell netperf command
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Example code for using the shell netperf command
    Now that we started adding files to the CVS which are normally generated with a 'save...' make goal we can remove the DEFAULT_TARGET mechanism altogether and just add Makefile.target files.
    Many project Makefiles build just one Contiki binary. Up to now the name of this binary was only available to the 'all' goal as prerequisite. So it was possible to create a non-project-specific rule to i.e. load that binary into the target device.
    
    Therefore I introduced the make variable CONTIKI_PROJECT. Now a typical project Makefile starts with:
    
    CONTIKI_PROJECT = hello-world
    all: $(CONTIKI_PROJECT)
    replaced blink with blinker that uses more sensors
    ESB examples
    Added an example application to show the usage of the Contiki Multi-threading library.
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Converted u8_t to uint8_t and u16_t to uint16_t in the examples directory.
    Moved variable definitions from header file
    fixed compiler warnings
    Added test application to test accelerometer
    Corrected copyright holder.
    contiki code style changes and copyright update + added source to ARCH instead of SOURCEFILES in platform Makefile
    tlc59116 for zolertia, added 0 values at init and code clean-up
    working tlc59116 implementation for z1
    first implementation for tlc59116 on z1
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added examples for MB851 platform.
    fixed button to toggle light sensor
    instantiated file-description and fixed style
    added activation of button sensor and activation and deactivation / toggle of light sensor
    added missing include
    fixed for new sensor APIs
    Testing the button
    Blinking LEDs
    Experimental energy estimation code
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add function to change I2C baudrate and push relevant configuration values to platform config
    Zolertia's light sensor ziglet
    Cleaned up some files, moved z1-websense example
    Modified Makefile and test-potent.c for ICTPWSN
    Added Potentiometer sensor in Z1 Platform
    Updated *-sensor.c files from the sky platform.
    Fixed battery-sensor plus added simple test (XXX)
    Updated *-sensor.c files from the sky platform.
    Fixed battery-sensor plus added simple test (XXX)
    Fixes warnings, bad code and code style
    Simple phidget-like relay driver for the Z1 mote with basic functionalities
    Zolertia's light sensor ziglet
    Cleaned up some files, moved z1-websense example
    Modified Makefile and test-potent.c for ICTPWSN
    Added Potentiometer sensor in Z1 Platform
    Updated *-sensor.c files from the sky platform.
    Fixed battery-sensor plus added simple test (XXX)
    Updated *-sensor.c files from the sky platform.
    Fixed battery-sensor plus added simple test (XXX)
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updated *-sensor.c files from the sky platform.
    Fixed battery-sensor plus added simple test (XXX)
    Updated *-sensor.c files from the sky platform.
    Fixed battery-sensor plus added simple test (XXX)
    added phidget example for z1
    fixed button to toggle light sensor
    instantiated file-description and fixed style
    added activation of button sensor and activation and deactivation / toggle of light sensor
    added missing include
    fixed for new sensor APIs
    Testing the button
    Blinking LEDs
    Experimental energy estimation code
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    Merges Z1SP into Z1 platform
    Cleaned up some files, moved z1-websense example
    Modified Makefile and test-potent.c for ICTPWSN
    Added Potentiometer sensor in Z1 Platform
    Updated *-sensor.c files from the sky platform.
    Fixed battery-sensor plus added simple test (XXX)
    Updated *-sensor.c files from the sky platform.
    Fixed battery-sensor plus added simple test (XXX)
    Cleaned up some files, moved z1-websense example
    Added test program in the z1 examples directory for the tmp102 temperature sensor.
    added missing include
    Enable the watchdog for rtimers too. Removed the disabling of the TACTL - it should not be needed, and interferes with the timing behaviour of stable rtimers
    Added function rtimer_arch_now that makes sure that the timer value does not change between readouts to avoid reading while the timer is being updated.
    Turn off timer before updating - needed to avoid bugs in ContikiMAC - not 100% sure why
    Removed safeguards around the update code for the timer; turns out they weren't needed (but instead triggered a bug in MSPsim)
    Turn off Timer A before modifying its control registers to avoid problems when timer is updated frequently
    Remove the read from TAIV - this should not be done for TIMERA0 interrupts (in fact, doing so messes up the other timer a interrupts, like the clock tick...)
    Need to clear the interrupt flag register for Timer A
    bug fix: wake up MSP430 when leaving rtimer interrupt if the rtimer polled a process.
    thanks to Marco Vedovati for finding the bug
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    Moved energest from lib/ to sys/
    removed offset in rtimer_arch
    removed redundant code - configuration of basic clock subsystem in clock and rtimer_arch
    Added energy estimation, embryo for possible future drift configuration
    rtimer_arch_now() now returns the correct value
    Fixed description
    MSP430 real-time rtimer support using timerb1
    Added #include that #defines NULL
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    Added *experimental* module for sending raw (non-routed) packets from Contiki. The name of the module is likely to change.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved the sht11 driver to its own module
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added a quick sht11 sensor driver support for Z1
    
    Support for Sensirion SHT1x/SHT7x support is adapted from core for Z1 in the Ziglet port.
    XXX TODO:
     + Remove SHT11_PWR
     + Lines are shared with I2C, hence port reconfiguration must be added at the driver level.
    Removed duplicated statement.
    Simple test for the SHT11 driver.
    Add new plattform definition for the STK 501 board featuring an
    Atmel ATmega128.
    
    Very brief instructions:
    
    - Configure your programmer etc. in Makefile.stk501
    - Use 'make upload' to flash your STK501.
    - Setup a SLIP connection to your board (on the first serial port)
      and make sure you can ping it.
    - Use 'make loadable_prg.ko' to build a demo module.
    - gcc -ocodeprop ../../tools/codeprop.c
    - ./codeprop <IP of STK> loadable_prg.ko
    - Watch the module print "Tick, Tack, Tick, ..." on the second
      serial port.
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleaned up some files, moved z1-websense example
    Updated *-sensor.c files from the sky platform.
    Fixed battery-sensor plus added simple test (XXX)
    Updated *-sensor.c files from the sky platform.
    Fixed battery-sensor plus added simple test (XXX)
    Added SHT25 sensor
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Merges Z1SP into Z1 platform
    first implementation for tlc59116 on z1
    Fixed sht11 driver, now ensures the i2c bus is disabled when initializing
    Simple phidget-like relay driver for the Z1 mote with basic functionalities
    Zolertia's light sensor ziglet
    Sensors already included by platform
    Modified Makefile and test-potent.c for ICTPWSN
    Added a quick sht11 sensor driver support for Z1
    
    Support for Sensirion SHT1x/SHT7x support is adapted from core for Z1 in the Ziglet port.
    XXX TODO:
     + Remove SHT11_PWR
     + Lines are shared with I2C, hence port reconfiguration must be added at the driver level.
    Definition of Z1 Starter Platform in contiki/platforms + LEDs + Potentiometer
    Added Potentiometer sensor in Z1 Platform
    Updated *-sensor.c files from the sky platform.
    Fixed battery-sensor plus added simple test (XXX)
    Updated *-sensor.c files from the sky platform.
    Fixed battery-sensor plus added simple test (XXX)
    Added tmp102-related makefiles directives for proper compilation.
    Added test application to test accelerometer
    added phidget example for z1
    replaced DEFAULT_TARGET with Makefile.target for specifying default target
    examples for uIPv6
    Added SHT25 sensor
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Contiki port to the TI EXP5438 MSP430x5438a experimenters board
    Moved from examples/sky into generic platform/sky/apps so that all examples can use it
    Blinking LEDs
    Experimental energy estimation code
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Cleaned up some files, moved z1-websense example
    M Makefile.common to add tmp102 sensor by default
    added example-unicast2.c
    Send to node 1.0 instead of 41.41, to make the example work better in Cooja.
    fixed compiler warning
    Updated the Rime channel numbers so that all examples can be run in the same network without channel clashes
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Changed the 'ibc' and 'uc' Rime modules into the more descriptive names 'broadcast' and 'unicast'
    Changed names of the Rime examples from test-* to example-* and added examples for ruc and uc
    Static should come first because it's a storage class.
    Added exithandlers so that the examples can be run as loadable (and unloadble) modules
    Message size should include ending zero byte
    Moved all Rime examples into examples/rime directory
    API change for Rime: *_setup() renamed to *_open()
    Simple Rime test code
    Renamed Rime output function
    A Rime driver for the simple-cc2420 driver
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Cleaned up some files, moved z1-websense example
    added makefile
    Added a quick sht11 sensor driver support for Z1
    
    Support for Sensirion SHT1x/SHT7x support is adapted from core for Z1 in the Ziglet port.
    XXX TODO:
     + Remove SHT11_PWR
     + Lines are shared with I2C, hence port reconfiguration must be added at the driver level.
    Definition of Z1 Starter Platform in contiki/platforms + LEDs + Potentiometer
    Added Potentiometer sensor in Z1 Platform
    Updated *-sensor.c files from the sky platform.
    Fixed battery-sensor plus added simple test (XXX)
    Updated *-sensor.c files from the sky platform.
    Fixed battery-sensor plus added simple test (XXX)
    Added tmp102-related makefiles directives for proper compilation.
    Added test application to test accelerometer
    added phidget example for z1
    replaced DEFAULT_TARGET with Makefile.target for specifying default target
    examples for uIPv6
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Cleaned up some files, moved z1-websense example
    added example unicast with temperature
    Send to node 1.0 instead of 41.41, to make the example work better in Cooja.
    fixed compiler warning
    Updated the Rime channel numbers so that all examples can be run in the same network without channel clashes
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Changed the 'ibc' and 'uc' Rime modules into the more descriptive names 'broadcast' and 'unicast'
    Changed names of the Rime examples from test-* to example-* and added examples for ruc and uc
    Static should come first because it's a storage class.
    Added exithandlers so that the examples can be run as loadable (and unloadble) modules
    Message size should include ending zero byte
    Moved all Rime examples into examples/rime directory
    API change for Rime: *_setup() renamed to *_open()
    Simple Rime test code
    Renamed Rime output function
    A Rime driver for the simple-cc2420 driver
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Squeeze websense example
    Cleaned up some files, moved z1-websense example
    Added IPv6 z1-websense demo w/MSP batt&temp sensor
    Moved project-conf.h
    Web server example showing light and temperature sensor data
    Added simple web server listing the neighbors and routes
    reduced the buffers to save memory
    added project configuration
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    ntikiMAC: a new radio duty cycling mechanism that uses a combination
    of link-layer and MAC-layer mechanisms to achieve a very low power
    consumption: during idle listening the radio is switched off between
    99.2% and 99.6% of the time. One unicast transmission typically adds
    between 0.07% and 1.2% additional radio time, depending on packet
    size.
    
    ContikiMAC uses the standard IEEE 802.15.4 message format and adds no
    additional headers.
    
    ContikiMAC is simple: it uses periodic two-shot channel sampling
    during idle listening to keep the radio on-time down. Transmissions
    are done with repeated transmissions until a link-layer ACK is
    received.
    Increased the clock speed to 32768/4 from 32768/8 to provide better accuracy for power profiling of radio CCA checks
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    removed offset in rtimer_arch
    Reading timer now quicker, embryo for possible future drift configuration
    Fixed description
    MSP430 real-time rtimer support using timerb1
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    MSP430 definitions
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Cleaned up some files, moved z1-websense example
    Added IPv6 z1-websense demo w/MSP batt&temp sensor
    Renamed wget() to wget_get() and added server port as argument
    Added example using HTTP to control and be controlled.
    minor cleanup
    Added web pages "/1" and "/0" to turn leds on or off
    Web server example showing light and temperature sensor data
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    Cleaned up some files, moved z1-websense example
    Added IPv6 z1-websense demo w/MSP batt&temp sensor
    Added documentation
    Moved the cc2420 driver into a separate dev/cc2420 module
    Cleaned up some files, moved z1-websense example
    Cleaned up z1-websense.c file
    minor tweaks to z1-websense and .gitignore
    ictp:z1-websense with battery in mV
    Meaningful units for msp temp&batt sensors
    Added IPv6 z1-websense demo w/MSP batt&temp sensor
    Added dummy light driver. Now skywebsense likes Z1
    
    The light sensor driver is mapped to the same pin as the potentiometer
    in Z1 Starter Platform. sky-websense is untouched, though.
    Sky-websense compiles for Z1 (testing)
    minor cleanup
    Added web pages "/1" and "/0" to turn leds on or off
    Web server example showing light and temperature sensor data
    Cleaned up some files, moved z1-websense example
    Added IPv6 z1-websense demo w/MSP batt&temp sensor
    Updated include paths for the moved files under net/
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the examples directory.
    Cleaned up some files, moved z1-websense example
    Added IPv6 z1-websense demo w/MSP batt&temp sensor
    Renamed wget() to wget_get() and added server port as argument
    Added example using HTTP to control and be controlled.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Cleaned up some files, moved z1-websense example
    Added IPv6 z1-websense demo w/MSP batt&temp sensor
    Renamed wget() to wget_get() and added server port as argument
    Added example using HTTP to control and be controlled.
    added uip-driver (for both ivp4 and ipv6), setting WITH_UIP* compiler flags in Makefile
    Updated to match the new netstack api
    Added a new module called "framer" that creates MAC level frames to
    the packetbuf from packet attributes. Two framer modules are included,
    one that creates 802.15.4 frame headers, and one that creates a
    minimal "nullmac"-style header that only contains the link-local
    addresses.
    added multihop routing support through replaceable modules. first implementation
    uses rime's route discovery by translating between ipv6 and rime addresses.
    added experimental checkpointing functionality:
    currently only implemented on the sky platform
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    SkyByteRadio was replaced by Msp802154Radio
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Cleaned up some files, moved z1-websense example
    Added example COOJA simulation
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Stop setting WITH_UIP6=1 in example Makefiles
    
    It achieves exactly nothing other than generate confusion
    Squeeze websense example
    Made the sky and z1 platform handling of PROJECT_CONF_H the same as the other platforms: the makefile should define PROJECT_CONF_H to be the name of the header file to include. This header file should #undef everything it #defines, as it is included after all the other configuration options in contiki-conf.h
    Cleaned up some files, moved z1-websense example
    Meaningful units for msp temp&batt sensors
    Added IPv6 z1-websense demo w/MSP batt&temp sensor
    Moved project-conf.h
    Added example using HTTP to control and be controlled.
    Fixed to set address on interface
    Added rules to connect to slip bridge connected via serial or running in COOJA using tunslip6
    Web server example showing light and temperature sensor data
    Some little refactor
    Travis-ci tweaks, added CPUREV to 01 regression test, needed by mbxxx platform
    Travis: Print out logs so that debugging travis is possible.
    Fix up compile test so that you can do nested subdirectories
    The Thingsquare Mist regression test scripts
    Need to have seed number included in filename, else the faillog files won't be reported at end of test
    Support running multiple random seeds in case one fails
    Move simulation execution from Makefile to Bash script; show Progress
    Additional code is needed to show the progress. Otherwise Travis is
    likely to become unhappy and terminates the job. This was no fun within
    the Makefile. Moving the execution to a Bash script allows better
    maintainability.
    In case of an error the error all logs will be printed when using a CI.
    Make regressiontest reproducable
    Travis: Run java with -Xshared:on. The previous jvm had shared on by default and cooja
    requires this.
    Travis: Print out logs so that debugging travis is possible.
    The Thingsquare Mist regression test scripts
    Output sha1sums of files used for simulation on fail
    This helps reproducing results from the CI
    Support running multiple random seeds in case one fails
    Move simulation execution from Makefile to Bash script; show Progress
    Additional code is needed to show the progress. Otherwise Travis is
    likely to become unhappy and terminates the job. This was no fun within
    the Makefile. Moving the execution to a Bash script allows better
    maintainability.
    In case of an error the error all logs will be printed when using a CI.
    Adding a scan-build command
    
    scan-build http://clang-analyzer.llvm.org/scan-build.html is a clang
    based tool designed to provide static analysis over C code files.
    The Thingsquare Mist regression test scripts
    Add Travis test for the MQTT demo
    Rename travis "arm" BUILD_ARCH to "arm-apcs".
    
    These platforms are built with an old ARM compiler that supports the
    deprecated APCS standard.
    Multicast compile regression tests
    Break travis compile tests into smaller builds
    
    * The previous 01-compile test has been renamed to compile-base. It
      now only tests {msp430, avr, native}-based platforms
    * New test builds for arm-based and 8051-based ports (one build per arch)
    * Only install arm-none-eabi, sdcc and srecord for the builds which need
      them. This will somewhat speed up all other tests
    * Test er-rest-example and webserver-ipv6 for the cc2538
    * An erroneous comment was fixed and another comment was somewhat
      clarified
    Multicast compile regression tests
    Remove Sensinode tests from travis
    Break travis compile tests into smaller builds
    
    * The previous 01-compile test has been renamed to compile-base. It
      now only tests {msp430, avr, native}-based platforms
    * New test builds for arm-based and 8051-based ports (one build per arch)
    * Only install arm-none-eabi, sdcc and srecord for the builds which need
      them. This will somewhat speed up all other tests
    * Test er-rest-example and webserver-ipv6 for the cc2538
    * An erroneous comment was fixed and another comment was somewhat
      clarified
    SkyByteRadio was replaced by Msp802154Radio
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    compiling with SMALL=0 to avoid problems with Contiki's elf loader
    fix: test failed since shell echo no longer appends a newline
    test script bug fix: serial writes to motes should not include a newline.
    the additional newline character was earlier (wrongly) dropped by the serial line module, but is now handled by the ringbuf-based serial line implementation
    added make clean + added an extra compilation command with CORE enabled
    + verifies the base64 encoded executable stored in flash
    more debugging output when test fails
    moved test scripts into simulation config (.csc)
    new test for shell command 'exec' and the Contiki elfloader:
    
    
    Tests Contiki ELF loader and shell command 'exec': Hello-world is compiled as a Contiki executable (.ce) and is uploaded to the single Sky node via serial port (base64 encoded). The node then loads and starts the uploaded hello-world application. Test succeeds when the 'Hello, World' output appears
    with the recent mote type updates, the simulation config structure changed.
    
    * updated simconfigs
    Changed to use sky-checkpoint.c instead of sky-shell.c since checkpointing was disabled in sky-shell.c
    sky checkpointing test:
    
    Tests node local checkpointing on the Sky platform. A single node checkpoints and rollbacks with a repeating echo background process. Running examples/sky-shell/sky-shell.c
    added sky shell basic commands test.
    Test that checks if the Contiki shell compiles and runs on the Tmote Sky
    with target specific extensions (.sky)
    added two rime/sky tests: abc and trickle
    Contiki regression tests, grouped into categories
    SkyByteRadio was replaced by Msp802154Radio
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Travis: disable flaky or failing tests
    
    * disable hello-world of cooja motes b/c it is flaky
    * mark 04-sky-shell-download.csc test as failing. Not sure what
    the problem is.
    Make regression tests deterministic by having a constant random seed
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    increased inter-rucb-transfer delay to avoid problems in lossy networks
    updated test: shell command echo no longer includes a newline -> updated expected final file size, improved debugging output
    explicit make clean before compiling firmwares
    improved test: reading files with blocksize 13, verifying the complete file30.txt output, no newlines when writing mote commands
    moved test scripts into simulation config (.csc)
    added test for shell download command (sky platform)
    with the recent mote type updates, the simulation config structure changed.
    
    * updated simconfigs
    added webserver-nogui source and WITH_NULLMAC to example code (too large otherwise)
    explicit make clean no longer needed since temporary files are now removed by default
    updated  reference to moved plugin class VisUDGM. enables importing tests graphically again.
    explicit "bash -c" no longer needed
    updated test to transfer files over a multihop link, to use NULLMAC, and to clean before and after building the sources
    
    NULLMAC is used mainly to reserve ROM
    added wget contiki test
    added Rime reliable unicast test.
    uses examples/rime/example-runicast.c
    added sky collect test
    with target specific extensions (.sky)
    added two rime/sky tests: abc and trickle
    SkyByteRadio was replaced by Msp802154Radio
    Removed the experimental checkpointing code
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    explicit make clean before compiling firmwares
    test update: corrected write newlines, increased initial wait before issuing the first sendcmd()
    moved test scripts into simulation config (.csc)
    added test for shell sendcmd command (sky platform)
    with the recent mote type updates, the simulation config structure changed.
    
    * updated simconfigs
    added webserver-nogui source and WITH_NULLMAC to example code (too large otherwise)
    explicit make clean no longer needed since temporary files are now removed by default
    updated  reference to moved plugin class VisUDGM. enables importing tests graphically again.
    explicit "bash -c" no longer needed
    updated test to transfer files over a multihop link, to use NULLMAC, and to clean before and after building the sources
    
    NULLMAC is used mainly to reserve ROM
    added wget contiki test
    added Rime reliable unicast test.
    uses examples/rime/example-runicast.c
    added sky collect test
    with target specific extensions (.sky)
    added two rime/sky tests: abc and trickle
    SkyByteRadio was replaced by Msp802154Radio
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    shell command 'ps' was removed from sky-shell.c, instead using 'echo' in test
    write command was removed from sky-shell, which requires a test update
    explicit make clean before compiling firmwares
    moved test scripts into simulation config (.csc)
    with the recent mote type updates, the simulation config structure changed.
    
    * updated simconfigs
    added sky shell basic commands test.
    Test that checks if the Contiki shell compiles and runs on the Tmote Sky
    with target specific extensions (.sky)
    added two rime/sky tests: abc and trickle
    SkyByteRadio was replaced by Msp802154Radio
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    test update: contiki shell prompt was changed
    explicit make clean before compiling firmwares
    moved test scripts into simulation config (.csc)
    with the recent mote type updates, the simulation config structure changed.
    
    * updated simconfigs
    Test that checks if the Contiki shell compiles and runs on the Tmote Sky
    with target specific extensions (.sky)
    added two rime/sky tests: abc and trickle
    Contiki regression tests, grouped into categories
    Adjust warning count in the doxygen travis job
    Adjust doxygen travis test error count
    Adjust doxygen error count
    Adjust number of errors to travis environment
    Add doxygen regression testing
    Add doxygen regression testing
    Adding a scan-build command
    
    scan-build http://clang-analyzer.llvm.org/scan-build.html is a clang
    based tool designed to provide static analysis over C code files.
    The Thingsquare Mist regression test scripts
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    added hello world simulation tests for exp5438, z1, and wismote.
    extracted test script to a separate hello-world.js, and updated the remaining hello world tests accordingly.
    Bugfix that makes MicaZ nightly tests work
    explicit make clean before compiling firmwares
    added micaz port hello world test
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    added hello world simulation tests for exp5438, z1, and wismote.
    extracted test script to a separate hello-world.js, and updated the remaining hello world tests accordingly.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    added hello world simulation tests for exp5438, z1, and wismote.
    extracted test script to a separate hello-world.js, and updated the remaining hello world tests accordingly.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    added hello world simulation tests for exp5438, z1, and wismote.
    extracted test script to a separate hello-world.js, and updated the remaining hello world tests accordingly.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Travis: disable flaky or failing tests
    
    * disable hello-world of cooja motes b/c it is flaky
    * mark 04-sky-shell-download.csc test as failing. Not sure what
    the problem is.
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    added hello world simulation tests for exp5438, z1, and wismote.
    extracted test script to a separate hello-world.js, and updated the remaining hello world tests accordingly.
    moved test scripts into simulation config (.csc)
    with the recent mote type updates, the simulation config structure changed.
    
    * updated simconfigs
    updated  reference to moved plugin class VisUDGM. enables importing tests graphically again.
    using new testOK() method
    using Contiki's regular hello-world application in test (examples/hello-world), instead of Cooja's test application
    added (unused) visualized plugins to test.
    allows importing tests with plugins
    added contiki test: cooja testapp hello world
    del backslashes
    very simple example test scripts
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    added hello world simulation tests for exp5438, z1, and wismote.
    extracted test script to a separate hello-world.js, and updated the remaining hello world tests accordingly.
    Contiki regression tests, grouped into categories
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    added hello world simulation tests for exp5438, z1, and wismote.
    extracted test script to a separate hello-world.js, and updated the remaining hello world tests accordingly.
    explicit make clean before compiling firmwares
    moved test scripts into simulation config (.csc)
    with the recent mote type updates, the simulation config structure changed.
    
    * updated simconfigs
    with target specific extensions (.sky)
    in paths, dirs are separated by '/'s only
    relative paths
    added contiki test: sky hello world
    Loaded the simulation files in Cooja and saved them again to avoid them having any non-backward-compatible constructs in them.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    explicit make clean before compiling firmwares
    Reduced the number of packets that needs to be received
    moved test scripts into simulation config (.csc)
    with the recent mote type updates, the simulation config structure changed.
    
    * updated simconfigs
    updated  reference to moved plugin class VisUDGM. enables importing tests graphically again.
    more extensive rime abc testing:
    less than perfect radio environment (95%) + each node receives 30 radio messages each
    with target specific extensions (.sky)
    added two rime/sky tests: abc and trickle
    Loaded the simulation files in Cooja and saved them again to avoid them having any non-backward-compatible constructs in them.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    explicit make clean before compiling firmwares
    moved test scripts into simulation config (.csc)
    with the recent mote type updates, the simulation config structure changed.
    
    * updated simconfigs
    include deluge directory in the test.
    Added Deluge and tests for it.
    added sky shell basic commands test.
    Test that checks if the Contiki shell compiles and runs on the Tmote Sky
    with target specific extensions (.sky)
    added two rime/sky tests: abc and trickle
    Loaded the simulation files in Cooja and saved them again to avoid them having any non-backward-compatible constructs in them.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    moved test scripts into simulation config (.csc)
    with the recent mote type updates, the simulation config structure changed.
    
    * updated simconfigs
    updated  reference to moved plugin class VisUDGM. enables importing tests graphically again.
    added rime rucb test
    Cooja crosslevel communication test:
    
    tests radio communication between emulated nodes (ESB + Sky) and Cooja Contiki nodes
    Loaded the simulation files in Cooja and saved them again to avoid them having any non-backward-compatible constructs in them.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Make regression tests deterministic by having a constant random seed
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    explicit make clean before compiling firmwares
    moved test scripts into simulation config (.csc)
    with the recent mote type updates, the simulation config structure changed.
    
    * updated simconfigs
    updated  reference to moved plugin class VisUDGM. enables importing tests graphically again.
    added Rime reliable unicast test.
    uses examples/rime/example-runicast.c
    added sky collect test
    with target specific extensions (.sky)
    added two rime/sky tests: abc and trickle
    Loaded the simulation files in Cooja and saved them again to avoid them having any non-backward-compatible constructs in them.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    Simplified the test code; made the rime_collect and rime_collect_sky tests the same.
    removed test script button click at sink, no longer used since sink is defined in example-collect.c
    Added a timeout before the button is pressed, to allow it to initialize
    explicit make clean before compiling firmwares
    Reduced interference range
    moved test scripts into simulation config (.csc)
    with the recent mote type updates, the simulation config structure changed.
    
    * updated simconfigs
    A nightly test of the Rime collect protocol on the sky platform
    Loaded the simulation files in Cooja and saved them again to avoid them having any non-backward-compatible constructs in them.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Make regression tests deterministic by having a constant random seed
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    Simplified the test code; made the rime_collect and rime_collect_sky tests the same.
    Removed reference to unused last_stats
    Copied the test code from the sky_shell_collect test, which correctly counts packet receptions and duplicates. Test code is much leaner and meaner now.
    updated collect test: bigger network (50), more hops, bugfixed duplicate detection
    moved test scripts into simulation config (.csc)
    with the recent mote type updates, the simulation config structure changed.
    
    * updated simconfigs
    Added a nightly test for the Rime collect protocol
    Loaded the simulation files in Cooja and saved them again to avoid them having any non-backward-compatible constructs in them.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    explicit make clean before compiling firmwares
    Wait 1s before pressing the button to give the button sensor time to activate
    moved test scripts into simulation config (.csc)
    with the recent mote type updates, the simulation config structure changed.
    
    * updated simconfigs
    updated  reference to moved plugin class VisUDGM. enables importing tests graphically again.
    with target specific extensions (.sky)
    added two rime/sky tests: abc and trickle
    Loaded the simulation files in Cooja and saved them again to avoid them having any non-backward-compatible constructs in them.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    explicit make clean before compiling firmwares
    moved test scripts into simulation config (.csc)
    with the recent mote type updates, the simulation config structure changed.
    
    * updated simconfigs
    updated  reference to moved plugin class VisUDGM. enables importing tests graphically again.
    modified test to fail if any single node successfully delivers 20 sensor data packets, before all other nodes has delivered 5 packets
    added sky collect test
    with target specific extensions (.sky)
    added two rime/sky tests: abc and trickle
    Loaded the simulation files in Cooja and saved them again to avoid them having any non-backward-compatible constructs in them.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Updated paths to relative paths to make it easier to move tests to new directories
    Regression tests for RPL, Rime trickle, and Rime mesh routing protocols
    
    The RPL tests test up and down routing, root reboots, 28-hour tests, and tests with more nodes than fit the routing tables
    Contiki regression tests, grouped into categories
    Loaded the simulation files in Cooja and saved them again to avoid them having any non-backward-compatible constructs in them.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Updated paths to relative paths to make it easier to move tests to new directories
    Regression tests for RPL, Rime trickle, and Rime mesh routing protocols
    
    The RPL tests test up and down routing, root reboots, 28-hour tests, and tests with more nodes than fit the routing tables
    Changed the name of the rimeaddr module to linkaddr
    Regression tests for RPL, Rime trickle, and Rime mesh routing protocols
    
    The RPL tests test up and down routing, root reboots, 28-hour tests, and tests with more nodes than fit the routing tables
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Copy the string first, since shell_output_str() does not ensure constness of the first string
    Use PROCESS_NAME_STRING macro to handle NO_PROCESS_NAMES
    change some examples for iris
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    Regression tests for RPL, Rime trickle, and Rime mesh routing protocols
    
    The RPL tests test up and down routing, root reboots, 28-hour tests, and tests with more nodes than fit the routing tables
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updated to match the new sensors API
    fixed to compile with new sensors API
    Updated the Rime channel numbers so that all examples can be run in the same network without channel clashes
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Changed names of the Rime examples from test-* to example-* and added examples for ruc and uc
    Bugfixes, updates
    Added more printouts
    Added exithandlers so that the examples can be run as loadable (and unloadble) modules
    Added configurable interval
    Moved all Rime examples into examples/rime directory
    API change for Rime: *_setup() renamed to *_open()
    Simple Rime test code
    Renamed Rime output function
    A Rime driver for the simple-cc2420 driver
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Regression tests for RPL, Rime trickle, and Rime mesh routing protocols
    
    The RPL tests test up and down routing, root reboots, 28-hour tests, and tests with more nodes than fit the routing tables
    removed execute flag of source files (avoids diff problems with egit)
    Adding a Makfile for example applications.
    Added a Contiki app basically combining apps/netconf and apps/dhcp. It's a 6502 specific app as it doesn't configure the running uIP instance but instead writes to the 'contiki.cfg' configuration file used by 6502 apps to configure uIP.
    Now that we started adding files to the CVS which are normally generated with a 'save...' make goal we can remove the DEFAULT_TARGET mechanism altogether and just add Makefile.target files.
    Many project Makefiles build just one Contiki binary. Up to now the name of this binary was only available to the 'all' goal as prerequisite. So it was possible to create a non-project-specific rule to i.e. load that binary into the target device.
    
    Therefore I introduced the make variable CONTIKI_PROJECT. Now a typical project Makefile starts with:
    
    CONTIKI_PROJECT = hello-world
    all: $(CONTIKI_PROJECT)
    replaced blink with blinker that uses more sensors
    ESB examples
    Added an example application to show the usage of the Contiki Multi-threading library.
    A really simple Contiki program, intended to show how the build system works and how to write simple Contiki programs
    Import of the contiki-2.x development code from the SICS internal CVS server
    Reduce travis overhead for testing 6502 ports.
    
    - build cc65 libraries only for target supported by Contiki
    - instead of building all examples for all 6502 targets build
      - all examples for one target (c64)
      - the most demanding client example (webbrowser) for all 6502 targets
      - the most demanding server examples (webserver) for all 6502 targets
    Add 6502 tests to travis
    Loaded the simulation files in Cooja and saved them again to avoid them having any non-backward-compatible constructs in them.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Made it easier to configure how many packets that should be received. Reduced the total amount of packets from 10 to 8 to make the test complete faster.
    Split the collect test into collect and collect-lossy to make each individual
    travis build complete faster.
    
    Also changed the armgcc download link to a github location.
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    Use collect-view-shell instead of sky-shell
    Updated tests to match new collect-view-data command syntax
    Increased number of retransmissions from 15 to 31
    A version of the Contiki shell collect test but with stocastic packet loss. This tests that the collect protocol correctly handles lossy networks.
    workaround to survive the bad characters that are sometimes printed by mspsim-based motes + make clean before compilation
    Rewrite of the Sky shell collect test. The new test is better equipped
    to handle reordered packets - unlike the previous test, the new test
    counts all incoming packets in the data stream, even those that are
    significantly reordered. The new test also shows the received packets
    and their hop counts in a much more readable fashion.
    New and improved shell collect test: the new test sends out 10 packets from each node and counts the received packets. If less than 10 packets from each node is received, the test fails
    explicit make clean before compiling firmwares
    Moved the TIMEOUT() definition until after the print_stats() definition so that the print_stats() function can be called when the TIMEOUT() is invoked
    Print stats even when test fails
    Increased timeout
    Increased the transmission time to 40 seconds from 20 seconds
    moved test scripts into simulation config (.csc)
    with the recent mote type updates, the simulation config structure changed.
    
    * updated simconfigs
    Nightly test that runs Contiki's shell collect command in much the same way as the Contiki collect program does
    A nightly test of the Rime collect protocol on the sky platform
    Split the collect test into collect and collect-lossy to make each individual
    travis build complete faster.
    
    Also changed the armgcc download link to a github location.
    Contiki regression tests, grouped into categories
    SkyByteRadio was replaced by Msp802154Radio
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Split the collect test into collect and collect-lossy to make each individual
    travis build complete faster.
    
    Also changed the armgcc download link to a github location.
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    old compilation flag WITH_NULLMAC=1 was replaced by netstack's nullmac_driver and nullrdc_Driver
    explicit make clean before compiling firmwares
    moved test scripts into simulation config (.csc)
    with the recent mote type updates, the simulation config structure changed.
    
    * updated simconfigs
    added webserver-nogui source and WITH_NULLMAC to example code (too large otherwise)
    explicit make clean no longer needed since temporary files are now removed by default
    updated  reference to moved plugin class VisUDGM. enables importing tests graphically again.
    explicit "bash -c" no longer needed
    updated test to transfer files over a multihop link, to use NULLMAC, and to clean before and after building the sources
    
    NULLMAC is used mainly to reserve ROM
    added wget contiki test
    added Rime reliable unicast test.
    uses examples/rime/example-runicast.c
    added sky collect test
    with target specific extensions (.sky)
    added two rime/sky tests: abc and trickle
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Split the collect test into collect and collect-lossy to make each individual
    travis build complete faster.
    
    Also changed the armgcc download link to a github location.
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    replaced Simulation's setDelayTime(ms) method with more intuitive setSpeedLimit(ratio)
    
    updated Simulation Control tool to use new setSpeedLimit(), and removed unused "run until" function
    
    updated references to old setDelayTime(ms)
    Ping slower to allow routes to settle
    using loopback as default network interface
    test now also includes multi-hop pinging (uip_over_mesh), up to 4 hops
    updated test configs: the test should normally not specify the network configuration, but rather use the default in the application directory
    added delay before starting ping process
    moved test scripts into simulation config (.csc)
    cloned sky ip ping test, but for contiki motes
    with the recent mote type updates, the simulation config structure changed.
    
    * updated simconfigs
    updated  reference to moved plugin class VisUDGM. enables importing tests graphically again.
    using new testOK() method
    using Contiki's regular hello-world application in test (examples/hello-world), instead of Cooja's test application
    added (unused) visualized plugins to test.
    allows importing tests with plugins
    added contiki test: cooja testapp hello world
    del backslashes
    very simple example test scripts
    SkyByteRadio was replaced by Msp802154Radio
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Split the collect test into collect and collect-lossy to make each individual
    travis build complete faster.
    
    Also changed the armgcc download link to a github location.
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    replaced Simulation's setDelayTime(ms) method with more intuitive setSpeedLimit(ratio)
    
    updated Simulation Control tool to use new setSpeedLimit(), and removed unused "run until" function
    
    updated references to old setDelayTime(ms)
    Ping slower to allow routes to settle
    set loopback to default network interface, improved simulation layout
    explicit make clean before compiling firmwares
    moved test scripts into simulation config (.csc)
    running test with simulation delay to avoid test timeout while external ping process has not finished
    with the recent mote type updates, the simulation config structure changed.
    
    * updated simconfigs
    deleting reference to moved plugin class VisUDGM
    ip ping test for sky platform (telnet server).
    Added multithreading test:
    Single Sky node running examples/multi-threading/multi-threading.c. Waits until both threads have counted up and down 5 times.
    added sky shell basic commands test.
    Test that checks if the Contiki shell compiles and runs on the Tmote Sky
    with target specific extensions (.sky)
    added two rime/sky tests: abc and trickle
    Split the collect test into collect and collect-lossy to make each individual
    travis build complete faster.
    
    Also changed the armgcc download link to a github location.
    Contiki regression tests, grouped into categories
    SkyByteRadio was replaced by Msp802154Radio
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    Improved the clarity of the Coffee test.
    explicit make clean before compiling firmwares
    increased timeout to 80sec (new mspsim is more accurate emulating flash memory timing)
    moved test scripts into simulation config (.csc)
    with the recent mote type updates, the simulation config structure changed.
    
    * updated simconfigs
    with target specific extensions (.sky)
    use relative path
    added the Coffee test to Cooja.
    added contiki test: sky hello world
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    explicit make clean before compiling firmwares
    moved test scripts into simulation config (.csc)
    with the recent mote type updates, the simulation config structure changed.
    
    * updated simconfigs
    Added multithreading test:
    Single Sky node running examples/multi-threading/multi-threading.c. Waits until both threads have counted up and down 5 times.
    added sky shell basic commands test.
    Test that checks if the Contiki shell compiles and runs on the Tmote Sky
    with target specific extensions (.sky)
    added two rime/sky tests: abc and trickle
    Contiki regression tests, grouped into categories
    SkyByteRadio was replaced by Msp802154Radio
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    updated crosslevel test to renamed nullrdc_noframer
    updated test configs: the test should normally not specify the network configuration, but rather use the default in the application directory
    explicit make clean before compiling firmwares
    fixed paths
    added application-level mote (/tools/cooja/examples/appmote_rimeabc) to cross-level test
    compile with nullmac + require all nodes to receive at least 3 messages before test ok
    updated test: testing ESB<->Sky comm + improved test output
    moved test scripts into simulation config (.csc)
    updated cross level test: bug fix + more debug info
    with the recent mote type updates, the simulation config structure changed.
    
    * updated simconfigs
    updated  reference to moved plugin class VisUDGM. enables importing tests graphically again.
    Cooja crosslevel communication test:
    
    tests radio communication between emulated nodes (ESB + Sky) and Cooja Contiki nodes
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Added regression tests that test IPv6 fragmentation
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Added regression tests that test IPv6 fragmentation
    Update regression sims to org.contikios
    Don't wait for a specific packet (which may not arrive) - instead, wait for any packet to arrive.
    Simple regression test for the IPv6 multicast code with 32 nodes (31 hops) in a line configuration
    Simple regression test for the IPv6 multicast code with 12 nodes (11 hops) in a line configuration
    Loaded the simulation files in Cooja and saved them again to avoid them having any non-backward-compatible constructs in them.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Added regression tests that test IPv6 fragmentation
    Added regression tests that test IPv6 fragmentation
    Loaded the simulation files in Cooja and saved them again to avoid them having any non-backward-compatible constructs in them.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Added regression tests that test IPv6 fragmentation
    Disabling the fragmentation test for the sky, as it is a little too small to reliably run this firmware
    Loaded the simulation files in Cooja and saved them again to avoid them having any non-backward-compatible constructs in them.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Split the collect test into collect and collect-lossy to make each individual
    travis build complete faster.
    
    Also changed the armgcc download link to a github location.
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    added radio logger with 6lowpan filter
    fixed line endings
    minor cleanup of example (changed to use uiplib to parse IPv6 address)
    Fixed problems with boot order and short timeouts in the UDP tests.
    Converted the test to examples/udp-ipv6
    Automated test for testing IPv6/6lowpan fragmentation
    explicit make clean before compiling firmwares
    Removed use of NULLMAC
    removed deprecated WITH_NULLMAC setting for IPv6.
    moved test scripts into simulation config (.csc)
    fixed udp test to use new addresses.
    with the recent mote type updates, the simulation config structure changed.
    
    * updated simconfigs
    added very simple sky ipv6 test: exercises the examples/udp-sender-ipv6 and examples/udp-receiver-ipv6 code
    updated  reference to moved plugin class VisUDGM. enables importing tests graphically again.
    more extensive rime abc testing:
    less than perfect radio environment (95%) + each node receives 30 radio messages each
    with target specific extensions (.sky)
    added two rime/sky tests: abc and trickle
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Added regression tests that test IPv6 fragmentation
    Loaded the simulation files in Cooja and saved them again to avoid them having any non-backward-compatible constructs in them.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Added regression tests that test IPv6 fragmentation
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Added regression tests that test IPv6 fragmentation
    SkyByteRadio was replaced by Msp802154Radio
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Travis: disable 02-sky-ipv6-udp test b/c it's still flaky even with
    the longer test time.
    Travis: sky-ipv6-udp test needs more time to complete
    Split the collect test into collect and collect-lossy to make each individual
    travis build complete faster.
    
    Also changed the armgcc download link to a github location.
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    fixed line endings
    minor cleanup of example (changed to use uiplib to parse IPv6 address)
    Fixed problems with boot order and short timeouts in the UDP tests.
    Converted the test to use examples/udp-ipv6
    explicit make clean before compiling firmwares
    Removed use of NULLMAC
    removed deprecated WITH_NULLMAC setting for IPv6.
    moved test scripts into simulation config (.csc)
    fixed udp test to use new addresses.
    with the recent mote type updates, the simulation config structure changed.
    
    * updated simconfigs
    added very simple sky ipv6 test: exercises the examples/udp-sender-ipv6 and examples/udp-receiver-ipv6 code
    updated  reference to moved plugin class VisUDGM. enables importing tests graphically again.
    more extensive rime abc testing:
    less than perfect radio environment (95%) + each node receives 30 radio messages each
    with target specific extensions (.sky)
    added two rime/sky tests: abc and trickle
    Loaded the simulation files in Cooja and saved them again to avoid them having any non-backward-compatible constructs in them.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Added regression tests that test IPv6 fragmentation
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Remove broken test from regression testing
    Added regression tests that test IPv6 fragmentation
    Loaded the simulation files in Cooja and saved them again to avoid them having any non-backward-compatible constructs in them.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Added regression tests that test IPv6 fragmentation
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Added regression tests that test IPv6 fragmentation
    Added regression tests that test IPv6 fragmentation
    Loaded the simulation files in Cooja and saved them again to avoid them having any non-backward-compatible constructs in them.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Added regression tests that test IPv6 fragmentation
    Travis: The test criteria for this test was too strict --- one or two
    packets get lost. Change the test to ensure that data comes back from
    every node and we get at least 75 non-duplicate reports.
    Split the collect test into collect and collect-lossy to make each individual
    travis build complete faster.
    
    Also changed the armgcc download link to a github location.
    Regression tests for RPL, Rime trickle, and Rime mesh routing protocols
    
    The RPL tests test up and down routing, root reboots, 28-hour tests, and tests with more nodes than fit the routing tables
    Make IPv6/RPL collect test faster by reducing the number of received packets
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    fixed line endings
    New nightly regression test for UDP/RPL/IPv6 data collection on the Tmote Sky
    Data collection over RPL/IPv6
    reduced the width of the Log Listener window
    Use the new Mote Attributes interface.
    Added an example of using UDP over an RPL-enabled IPv6 network
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Added regression tests that test IPv6 fragmentation
    Split the collect test into collect and collect-lossy to make each individual
    travis build complete faster.
    
    Also changed the armgcc download link to a github location.
    Contiki regression tests, grouped into categories
    Update regression sims to org.contikios
    Don't wait for a specific packet (which may not arrive) - instead, wait for any packet to arrive.
    Simple regression test for the IPv6 multicast code with 12 nodes (11 hops) in a line configuration
    Loaded the simulation files in Cooja and saved them again to avoid them having any non-backward-compatible constructs in them.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Split the collect test into collect and collect-lossy to make each individual
    travis build complete faster.
    
    Also changed the armgcc download link to a github location.
    core/net/resolv: IPv6 and mDNS ("Bonjour") support. Major refactor.
    
    This patch updates the DNS resolver to support IPv6 and introduces an
    improved API for looking up DNS entries. This patch also adds optional
    support for mDNS lookups and responses to the DNS resolver.
    
    Here is a quick summary of the changes:
    
     * Added support for IPv6 lookups.
     * DNS queries now honor record expiration.
     * Added support for mDNS, compatible with "Bonjour".
     * Implemented a new lookup api, `resolv_lookup2()`, which provides
       more information about the state of the record(error, expired,
       looking-up, etc.).
    
    About mDNS/Bonjour Support
    --------------------------
    
    This patch adds basic support for mDNS/Bonjour, which allows you to
    refer to the name of a device instead of its IP address. This is
    incredibly convenient for IPv6 addresses because they tend to be very
    long and difficult to remember. It is especially important for
    link-local IPv6 addresses, since not all programs support the '%'
    notation for indicating a network interface (required on systems with
    more than one network interface to disambiguate).
    
    In other words, instead of typing in this:
    
     * `http://[fe80::58dc:d7ed:a644:628f%en1]/`
    
    You can type this instead:
    
     * `http://contiki.local/`
    
    Huge improvement, no?
    
    The convenience extends beyond that: this mechanism can be used for
    nodes to talk to each other based on their human-readable names instead
    of their IPv6 addresses. So instead of a switch on
    `aaaa::58dc:d7ed:a644:628f` triggering an actuator on
    `aaaa::ed26:19c1:4bd2:f95b`, `light-switch.local` can trigger the
    actuator on `living-room-lights.local`.
    
    What you need to do to be able to look up `.local` names on your
    workstation depends on a few factors:
    
     * Your machine needs to be able to send and receive multicast packets
       to and from the LoWPAN. You can do this easily with the Jackdaw
       firmware on an RZUSBStick. If you have a border router, you will need
       it to bridge the mDNS multicast packets across the border.
    
     * If you are using a Mac, you win. All Apple devices support mDNS
       lookups.
    
     * If you are using Windows, you can install Apple's Bonjour for Windows
       package. (This may be already installed on your machine if you have
       installed iTunes) After you install this you can easily do `.local`
       lookups.
    
     * If you are using a Unix machine, you can install Avahi.
    
    The default hostname is set to `contiki.local.`. You can change the
    hostname programmatically by calling `resolv_set_hostname()`. You can
    change the default hostname by changing `CONTIKI_CONF_DEFAULT_HOSTNAME`.
    
    You may disable mDNS support by setting `RESOLV_CONF_SUPPORTS_MDNS` to
    `0`.
    
    ---------------------------------
    
    core/net/resolv: `resolv_lookup2()` -> `resolv_lookup()`
    
    Note that this patch should fix several `resolv_lookup()` bugs
    that already existed. There were many cases where `resolv_lookup()`
    was being called and the IP address ignored, but later code
    assumed that the IP address had been fetched... ANYWAY, those
    should be fixed now.
    
    ---------------------------------
    
    examples/udp-ipv6: Updated client to use MDNS to lookup the server.
    
    Also updated the Cooja regression test simulation.
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    minor cleanup of example (changed to use uiplib to parse IPv6 address)
    Switched to examples/udp-ipv6 as the code for the test
    updated test configs: the test should normally not specify the network configuration, but rather use the default in the application directory
    moved test scripts into simulation config (.csc)
    added another ipv6 udp test:
    identical setup as the sky_ipv6_udp test, but with contiki motes (native ipv6)
    Added regression tests that test IPv6 fragmentation
    Added regression tests that test IPv6 fragmentation
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Stop setting WITH_UIP6=1 in example Makefiles
    
    It achieves exactly nothing other than generate confusion
    Added regression tests that test IPv6 fragmentation
    Added regression tests that test IPv6 fragmentation
    Added regression tests that test IPv6 fragmentation
    Added regression tests that test IPv6 fragmentation
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Stop setting WITH_UIP6=1 in example Makefiles
    
    It achieves exactly nothing other than generate confusion
    Added regression tests that test IPv6 fragmentation
    Travis test for slip-radio
    Travis test for slip-radio
    Contiki regression tests, grouped into categories
    Travis test for slip-radio
    Updated with the new modularized uip paths
    Travis test for slip-radio
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Copy the string first, since shell_output_str() does not ensure constness of the first string
    Use PROCESS_NAME_STRING macro to handle NO_PROCESS_NAMES
    change some examples for iris
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Travis test for slip-radio
    Stop setting WITH_UIP6=1 in example Makefiles
    
    It achieves exactly nothing other than generate confusion
    Example code for the simple UDP API
    llsec: Renamed ccm to ccm_star & Renamed llsec regression test
    Added a simple regression test that uses the tests in examples/llsec/ccm-tests
    Loaded the simulation files in Cooja and saved them again to avoid them having any non-backward-compatible constructs in them.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Split the collect test into collect and collect-lossy to make each individual
    travis build complete faster.
    
    Also changed the armgcc download link to a github location.
    core/net/resolv: IPv6 and mDNS ("Bonjour") support. Major refactor.
    
    This patch updates the DNS resolver to support IPv6 and introduces an
    improved API for looking up DNS entries. This patch also adds optional
    support for mDNS lookups and responses to the DNS resolver.
    
    Here is a quick summary of the changes:
    
     * Added support for IPv6 lookups.
     * DNS queries now honor record expiration.
     * Added support for mDNS, compatible with "Bonjour".
     * Implemented a new lookup api, `resolv_lookup2()`, which provides
       more information about the state of the record(error, expired,
       looking-up, etc.).
    
    About mDNS/Bonjour Support
    --------------------------
    
    This patch adds basic support for mDNS/Bonjour, which allows you to
    refer to the name of a device instead of its IP address. This is
    incredibly convenient for IPv6 addresses because they tend to be very
    long and difficult to remember. It is especially important for
    link-local IPv6 addresses, since not all programs support the '%'
    notation for indicating a network interface (required on systems with
    more than one network interface to disambiguate).
    
    In other words, instead of typing in this:
    
     * `http://[fe80::58dc:d7ed:a644:628f%en1]/`
    
    You can type this instead:
    
     * `http://contiki.local/`
    
    Huge improvement, no?
    
    The convenience extends beyond that: this mechanism can be used for
    nodes to talk to each other based on their human-readable names instead
    of their IPv6 addresses. So instead of a switch on
    `aaaa::58dc:d7ed:a644:628f` triggering an actuator on
    `aaaa::ed26:19c1:4bd2:f95b`, `light-switch.local` can trigger the
    actuator on `living-room-lights.local`.
    
    What you need to do to be able to look up `.local` names on your
    workstation depends on a few factors:
    
     * Your machine needs to be able to send and receive multicast packets
       to and from the LoWPAN. You can do this easily with the Jackdaw
       firmware on an RZUSBStick. If you have a border router, you will need
       it to bridge the mDNS multicast packets across the border.
    
     * If you are using a Mac, you win. All Apple devices support mDNS
       lookups.
    
     * If you are using Windows, you can install Apple's Bonjour for Windows
       package. (This may be already installed on your machine if you have
       installed iTunes) After you install this you can easily do `.local`
       lookups.
    
     * If you are using a Unix machine, you can install Avahi.
    
    The default hostname is set to `contiki.local.`. You can change the
    hostname programmatically by calling `resolv_set_hostname()`. You can
    change the default hostname by changing `CONTIKI_CONF_DEFAULT_HOSTNAME`.
    
    You may disable mDNS support by setting `RESOLV_CONF_SUPPORTS_MDNS` to
    `0`.
    
    ---------------------------------
    
    core/net/resolv: `resolv_lookup2()` -> `resolv_lookup()`
    
    Note that this patch should fix several `resolv_lookup()` bugs
    that already existed. There were many cases where `resolv_lookup()`
    was being called and the IP address ignored, but later code
    assumed that the IP address had been fetched... ANYWAY, those
    should be fixed now.
    
    ---------------------------------
    
    examples/udp-ipv6: Updated client to use MDNS to lookup the server.
    
    Also updated the Cooja regression test simulation.
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    minor cleanup of example (changed to use uiplib to parse IPv6 address)
    Switched to examples/udp-ipv6 as the code for the test
    updated test configs: the test should normally not specify the network configuration, but rather use the default in the application directory
    moved test scripts into simulation config (.csc)
    added another ipv6 udp test:
    identical setup as the sky_ipv6_udp test, but with contiki motes (native ipv6)
    llsec: Renamed ccm to ccm_star & Renamed llsec regression test
    Added a simple regression test that uses the tests in examples/llsec/ccm-tests
    Contiki regression tests, grouped into categories
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    A set of RPL regression tests that the RPL network is able to survive the replacement of one node. The different tests test different placements of the moving node, with a varying number of hops from the root
    A RPL regression test that tests DAO routes going towards the sink and then down
    Updated paths to relative paths to make it easier to move tests to new directories
    Split the collect test into collect and collect-lossy to make each individual
    travis build complete faster.
    
    Also changed the armgcc download link to a github location.
    Regression tests for RPL, Rime trickle, and Rime mesh routing protocols
    
    The RPL tests test up and down routing, root reboots, 28-hour tests, and tests with more nodes than fit the routing tables
    Loaded the simulation files in Cooja and saved them again to avoid them having any non-backward-compatible constructs in them.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Re-enabled the large network RPL test
    Temporarily disable large RPL network test until we get link-layer ACKs in Cooja
    Updated paths to relative paths to make it easier to move tests to new directories
    Split the collect test into collect and collect-lossy to make each individual
    travis build complete faster.
    
    Also changed the armgcc download link to a github location.
    Regression tests for RPL, Rime trickle, and Rime mesh routing protocols
    
    The RPL tests test up and down routing, root reboots, 28-hour tests, and tests with more nodes than fit the routing tables
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    A set of RPL regression tests that the RPL network is able to survive the replacement of one node. The different tests test different placements of the moving node, with a varying number of hops from the root
    A RPL regression test that tests DAO routes going towards the sink and then down
    Updated paths to relative paths to make it easier to move tests to new directories
    Split the collect test into collect and collect-lossy to make each individual
    travis build complete faster.
    
    Also changed the armgcc download link to a github location.
    Regression tests for RPL, Rime trickle, and Rime mesh routing protocols
    
    The RPL tests test up and down routing, root reboots, 28-hour tests, and tests with more nodes than fit the routing tables
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    A RPL regression test that tests that the network survives a random rearrangement
    Loaded the simulation files in Cooja and saved them again to avoid them having any non-backward-compatible constructs in them.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Updated paths to relative paths to make it easier to move tests to new directories
    Split the collect test into collect and collect-lossy to make each individual
    travis build complete faster.
    
    Also changed the armgcc download link to a github location.
    Regression tests for RPL, Rime trickle, and Rime mesh routing protocols
    
    The RPL tests test up and down routing, root reboots, 28-hour tests, and tests with more nodes than fit the routing tables
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    A set of RPL regression tests that the RPL network is able to survive the replacement of one node. The different tests test different placements of the moving node, with a varying number of hops from the root
    A RPL regression test that tests DAO routes going towards the sink and then down
    Updated paths to relative paths to make it easier to move tests to new directories
    Split the collect test into collect and collect-lossy to make each individual
    travis build complete faster.
    
    Also changed the armgcc download link to a github location.
    Regression tests for RPL, Rime trickle, and Rime mesh routing protocols
    
    The RPL tests test up and down routing, root reboots, 28-hour tests, and tests with more nodes than fit the routing tables
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    A RPL regression test that tests DAO routes going towards the sink and then down
    Updated paths to relative paths to make it easier to move tests to new directories
    Split the collect test into collect and collect-lossy to make each individual
    travis build complete faster.
    
    Also changed the armgcc download link to a github location.
    Regression tests for RPL, Rime trickle, and Rime mesh routing protocols
    
    The RPL tests test up and down routing, root reboots, 28-hour tests, and tests with more nodes than fit the routing tables
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    A set of RPL regression tests that the RPL network is able to survive the replacement of one node. The different tests test different placements of the moving node, with a varying number of hops from the root
    A RPL regression test that tests DAO routes going towards the sink and then down
    Updated paths to relative paths to make it easier to move tests to new directories
    Split the collect test into collect and collect-lossy to make each individual
    travis build complete faster.
    
    Also changed the armgcc download link to a github location.
    Regression tests for RPL, Rime trickle, and Rime mesh routing protocols
    
    The RPL tests test up and down routing, root reboots, 28-hour tests, and tests with more nodes than fit the routing tables
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    A set of RPL regression tests that the RPL network is able to survive the replacement of one node. The different tests test different placements of the moving node, with a varying number of hops from the root
    A RPL regression test that tests DAO routes going towards the sink and then down
    Updated paths to relative paths to make it easier to move tests to new directories
    Split the collect test into collect and collect-lossy to make each individual
    travis build complete faster.
    
    Also changed the armgcc download link to a github location.
    Regression tests for RPL, Rime trickle, and Rime mesh routing protocols
    
    The RPL tests test up and down routing, root reboots, 28-hour tests, and tests with more nodes than fit the routing tables
    Loaded the simulation files in Cooja and saved them again to avoid them having any non-backward-compatible constructs in them.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Updated paths to relative paths to make it easier to move tests to new directories
    Split the collect test into collect and collect-lossy to make each individual
    travis build complete faster.
    
    Also changed the armgcc download link to a github location.
    Regression tests for RPL, Rime trickle, and Rime mesh routing protocols
    
    The RPL tests test up and down routing, root reboots, 28-hour tests, and tests with more nodes than fit the routing tables
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    A set of RPL regression tests that the RPL network is able to survive the replacement of one node. The different tests test different placements of the moving node, with a varying number of hops from the root
    A RPL regression test that tests DAO routes going towards the sink and then down
    Updated paths to relative paths to make it easier to move tests to new directories
    Split the collect test into collect and collect-lossy to make each individual
    travis build complete faster.
    
    Also changed the armgcc download link to a github location.
    Regression tests for RPL, Rime trickle, and Rime mesh routing protocols
    
    The RPL tests test up and down routing, root reboots, 28-hour tests, and tests with more nodes than fit the routing tables
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    A RPL regression test that tests that a RPL network survives a temporary root loss
    A RPL regression test that tests DAO routes going towards the sink and then down
    Updated paths to relative paths to make it easier to move tests to new directories
    Split the collect test into collect and collect-lossy to make each individual
    travis build complete faster.
    
    Also changed the armgcc download link to a github location.
    Regression tests for RPL, Rime trickle, and Rime mesh routing protocols
    
    The RPL tests test up and down routing, root reboots, 28-hour tests, and tests with more nodes than fit the routing tables
    Split the collect test into collect and collect-lossy to make each individual
    travis build complete faster.
    
    Also changed the armgcc download link to a github location.
    Contiki regression tests, grouped into categories
    Loaded the simulation files in Cooja and saved them again to avoid them having any non-backward-compatible constructs in them.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Updated paths to relative paths to make it easier to move tests to new directories
    Split the collect test into collect and collect-lossy to make each individual
    travis build complete faster.
    
    Also changed the armgcc download link to a github location.
    Regression tests for RPL, Rime trickle, and Rime mesh routing protocols
    
    The RPL tests test up and down routing, root reboots, 28-hour tests, and tests with more nodes than fit the routing tables
    Split the collect test into collect and collect-lossy to make each individual
    travis build complete faster.
    
    Also changed the armgcc download link to a github location.
    Regression tests for RPL, Rime trickle, and Rime mesh routing protocols
    
    The RPL tests test up and down routing, root reboots, 28-hour tests, and tests with more nodes than fit the routing tables
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    Split the collect test into collect and collect-lossy to make each individual
    travis build complete faster.
    
    Also changed the armgcc download link to a github location.
    Regression tests for RPL, Rime trickle, and Rime mesh routing protocols
    
    The RPL tests test up and down routing, root reboots, 28-hour tests, and tests with more nodes than fit the routing tables
    Update to the newest RPL API
    Print out sender IPv6 address when receiving data. When sending data, include a counter in the message.
    Copyright headers
    Example code for the simple UDP API
    Updated include paths for the moved files under net/
    Split the collect test into collect and collect-lossy to make each individual
    travis build complete faster.
    
    Also changed the armgcc download link to a github location.
    Regression tests for RPL, Rime trickle, and Rime mesh routing protocols
    
    The RPL tests test up and down routing, root reboots, 28-hour tests, and tests with more nodes than fit the routing tables
    Cleanup of the node-id.h files. The node-id.h file contains
    declarations of functions for setting and getting a node ID number, a
    functionality that exists on many platforms. Since this functionality
    was not considered part of the Contiki core, each platform defined its
    own node-id.h file. This commit attempts to clean this up by
    collecting the node-id.h into a core/sys/node-id.h file that replaces
    the old node-id.h files from the platform directories.
    Print out sender IPv6 address when receiving data. When sending data, include a counter in the message.
    Copyright headers
    Made the simple UDP examples simpler
    Example code for the simple UDP API
    Updated include paths for the moved files under net/
    Split the collect test into collect and collect-lossy to make each individual
    travis build complete faster.
    
    Also changed the armgcc download link to a github location.
    Regression tests for RPL, Rime trickle, and Rime mesh routing protocols
    
    The RPL tests test up and down routing, root reboots, 28-hour tests, and tests with more nodes than fit the routing tables
    Update to the newest RPL API
    Print out sender IPv6 address when receiving data. When sending data, include a counter in the message.
    Copyright headers
    Example code for the simple UDP API
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Stop setting WITH_UIP6=1 in example Makefiles
    
    It achieves exactly nothing other than generate confusion
    Split the collect test into collect and collect-lossy to make each individual
    travis build complete faster.
    
    Also changed the armgcc download link to a github location.
    Regression tests for RPL, Rime trickle, and Rime mesh routing protocols
    
    The RPL tests test up and down routing, root reboots, 28-hour tests, and tests with more nodes than fit the routing tables
    Example code for the simple UDP API
    Add a compile test for the tcp-socket example
    Multicast compile regression tests
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    Don't compile webserver-ipv6 for the sky platform, as it is a little too small. Use the larger exp5438 instead
    Removed the old esb regression tests
    Break travis compile tests into smaller builds
    
    * The previous 01-compile test has been renamed to compile-base. It
      now only tests {msp430, avr, native}-based platforms
    * New test builds for arm-based and 8051-based ports (one build per arch)
    * Only install arm-none-eabi, sdcc and srecord for the builds which need
      them. This will somewhat speed up all other tests
    * Test er-rest-example and webserver-ipv6 for the cc2538
    * An erroneous comment was fixed and another comment was somewhat
      clarified
    Add CC2538 travis compile tests
    Travis-ci tweaks, added CPUREV to 01 regression test, needed by mbxxx platform
    avr-ravenusb/cdc_task: Fix compile issues.
    
    A lot more changes are in the pipeline, but compiling is a good start.
    cpu/native: Add file-backed simulated EEPROM to native cpu.
    
    This patch removes a defunct EEPROM implementation from the native
    platform and provides a new EEPROM implementation for the native cpu.
    The previous implementation appears to be vestigal.
    
    This is useful for testing code which uses the EEPROM without running
    the code on the actual hardware.
    
    By default the code will create a new temporary file as the EEPROM
    backing, reinitializing each time. If you would like to preserve the
    EEPROM contents or specify a specific EEPROM file to use, you can set the
    `CONTIKI_EEPROM` environment variable to the name of the EEPROM file you
    wish to use instead. If it already exists, its contents will be used.
    If it does not already exist, it will be created and initialized by
    filling it with `0xFF`---just like a real EEPROM.
    
    A new example is also included, which was used to verify the correctness
    of the implementation. It can easily be used to verify the EEPROM
    implementations of other targets.
    core/lib/settings: Generalized Settings Manager to work on any platform
    
    This commit moves the Settings Manager from the AVR codebase
    into the Contiki core library. Any platform that implements
    the Contiki EEPROM API can now use the Settings Manager's
    key-value store for storing their persistent configuration info.
    
    The Settings Manager is a EEPROM-based key-value store. Keys
    are 16-bit integers and values may be up to 16,383 bytes long.
    It is intended to be used to store configuration-related information,
    like network settings, radio channels, etc.
    
     * Robust data format which requires no initialization.
     * Supports multiple values with the same key.
     * Data can be appended without erasing EEPROM.
     * Max size of settings data can be easily increased in the future,
       as long as it doesn't overlap with application data.
    
    The format was inspired by the [OLPC manufacturing data format][].
    
    Since the beginning of EEPROM often contains application-specific
    information, the best place to store settings is at the end of EEPROM
    (the "top"). Because we are starting at the end of EEPROM, it makes
    sense to grow the list of key-value pairs downward, toward the start of
    EEPROM.
    
    Each key-value pair is stored in memory in the following format:
    
    Order    | Size     | Name         | Description
    --------:|---------:|--------------|-------------------------------
           0 |        2 | `key`        | 16-bit key
          -2 |        1 | `size_check` | One's-complement of next byte
          -3 |   1 or 2 | `size`       | The size of `value`, in bytes
    -4 or -5 | variable | `value`      | Value associated with `key`
    
    The end of the key-value pairs is denoted by the first invalid entry.
    An invalid entry has any of the following attributes:
    
     * The `size_check` byte doesn't match the one's compliment of the
       `size` byte (or `size_low` byte).
     * The key has a value of 0x0000.
    
    [OLPC manufacturing data format]: http://wiki.laptop.org/go/Manufacturing_data
    Added rtests for 8051 ports
    add a few important econotag compile tests
    Regression tests for RPL, Rime trickle, and Rime mesh routing protocols
    
    The RPL tests test up and down routing, root reboots, 28-hour tests, and tests with more nodes than fit the routing tables
    Contiki regression tests, grouped into categories
    Travis: correct the name for the ipv6-apps test (travis.yml had the correct name
    --- this is why the test was failing)
    Split the collect test into collect and collect-lossy to make each individual
    travis build complete faster.
    
    Also changed the armgcc download link to a github location.
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    bugfix: use new setSpeedLimit(ratio) method in simulation instead of old setDelayTime()
    using example-specific connect-router-cooja target, to automatically build dependencies (e.g. tunslip6)
    updated to use the renamed examples under /examples/er-rest-example,
    using Californium CoAP to perform CoAP tests (DISCOVER and GET)
    Demo simulation and nightly test of rpl border router and coap rest server, based on the simulation example in
    /examples/er-rest-example. Uses tunslip6, ping, wget, and dapaulid's open source JCoAP java library (download needed).
    SkyByteRadio was replaced by Msp802154Radio
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Travis: correct the name for the ipv6-apps test (travis.yml had the correct name
    --- this is why the test was failing)
    Split the collect test into collect and collect-lossy to make each individual
    travis build complete faster.
    
    Also changed the armgcc download link to a github location.
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    updated to use the renamed examples under /examples/er-rest-example,
    using Californium CoAP to perform CoAP tests (DISCOVER and GET)
    Demo simulation and nightly test of rpl border router and coap rest server, based on the simulation example in
    /examples/er-rest-example. Uses tunslip6, ping, wget, and dapaulid's open source JCoAP java library (download needed).
    Fixed Erbium example simulation
    Added Erbium REST engine with new CoAP implementation
    Added a coap client and running coap-client-server COOJA simulation. Made README more detailed.
    Added example COOJA simulation
    Travis: correct the name for the ipv6-apps test (travis.yml had the correct name
    --- this is why the test was failing)
    Split the collect test into collect and collect-lossy to make each individual
    travis build complete faster.
    
    Also changed the armgcc download link to a github location.
    Contiki regression tests, grouped into categories
    Loaded the simulation files in Cooja and saved them again to avoid them having any non-backward-compatible constructs in them.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Travis: correct the name for the ipv6-apps test (travis.yml had the correct name
    --- this is why the test was failing)
    Split the collect test into collect and collect-lossy to make each individual
    travis build complete faster.
    
    Also changed the armgcc download link to a github location.
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    fixed line endings
    A quick and dirty service registry daemon hack. The servreg-hack
    allows a program to register an 8-bit service ID that gets
    disseminated to the entire network, as long as a servreg-hack daemon
    is running on all neighbors. Other nodes can look up the service ID to
    figure out what nodes in the network offer this service.
    
    This is officially labeled as a "hack" so that we don't get too comfy
    with it; this hack is not the future of service discovery and
    advertisement in Contiki.
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Tolerate loosing one packet in  01-sky-shell-collect.csc
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    Use collect-view-shell instead of sky-shell
    Updated tests to match new collect-view-data command syntax
    workaround to survive the bad characters that are sometimes printed by mspsim-based motes + make clean before compilation
    Rewrite of the Sky shell collect test. The new test is better equipped
    to handle reordered packets - unlike the previous test, the new test
    counts all incoming packets in the data stream, even those that are
    significantly reordered. The new test also shows the received packets
    and their hop counts in a much more readable fashion.
    New and improved shell collect test: the new test sends out 10 packets from each node and counts the received packets. If less than 10 packets from each node is received, the test fails
    explicit make clean before compiling firmwares
    Moved the TIMEOUT() definition until after the print_stats() definition so that the print_stats() function can be called when the TIMEOUT() is invoked
    Print stats even when test fails
    Increased timeout
    Increased the transmission time to 40 seconds from 20 seconds
    moved test scripts into simulation config (.csc)
    with the recent mote type updates, the simulation config structure changed.
    
    * updated simconfigs
    Nightly test that runs Contiki's shell collect command in much the same way as the Contiki collect program does
    A nightly test of the Rime collect protocol on the sky platform
    Contiki regression tests, grouped into categories
    Adding a scan-build command
    
    scan-build http://clang-analyzer.llvm.org/scan-build.html is a clang
    based tool designed to provide static analysis over C code files.
    Add cc26xx travis tests
    Add modern ARM compiler and ev-aducrf101mkxz to travis tests
    SkyByteRadio was replaced by Msp802154Radio
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    Remove the unicast mass-send test since the default number of queuebufs cannot handle 20 concurrent packets
    explicit make clean before compiling firmwares
    Nightly test for the netperf shell command
    Updated to use the command line options
    Example code for using the shell netperf command
    SkyByteRadio was replaced by Msp802154Radio
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    updated configs: MAC_DRIVER was replaced by NETSTACK_RDC
    Bugfix: the cxmac and lpp netperf tests didn't actually run cxmac and lpp
    explicit make clean before compiling firmwares
    Nightly tests for LPP and CXMAC duty cycling protocols
    Updated to use the command line options
    Example code for using the shell netperf command
    SkyByteRadio was replaced by Msp802154Radio
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    Moved the Contiki tests from the tools/cooja directory into the regression-tests/ directory
    updated configs: MAC_DRIVER was replaced by NETSTACK_RDC
    Bugfix: the cxmac and lpp netperf tests didn't actually run cxmac and lpp
    explicit make clean before compiling firmwares
    Nightly tests for LPP and CXMAC duty cycling protocols
    Updated to use the command line options
    Example code for using the shell netperf command
    Contiki regression tests, grouped into categories
    Make the Protosockets examples possible to compile.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] fixed some minor typos
    Import of the contiki-2.x development code from the SICS internal CVS server
    Make the Protosockets examples possible to compile.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Converted u8_t to uint8_t and u16_t to uint16_t in the docs and tools directories.
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Doc for uIPv6
    Added a note about the Contiki code style GNU Indent script
    Import of the contiki-2.x development code from the SICS internal CVS server
    [docs] Remove outdated example-packet-drv
    
    This example code is superseded by better examples in, for instance,
    cc2538 and cc2420.
    
    Fixes issue #208
    Added example-multihop.c
    Added example announcement code
    Added multi-threading example
    Fixed example names
    Changed names of the Rime examples from test-* to example-* and added examples for ruc and uc
    Changed packet drivers from services to plain processes.
    
    Now tcpip_output() is a function pointer that is supposed to be set via the macro tcpip_set_outputfunc(). Packet drivers do so on process startup.
    
    Thus if there are several packet drivers in a Contiki system the one started last is the one actually used. This behaviour is especially useful for the 'IP forwarding' "meta" packet driver.
    Added Rime examples
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix doxygen warnings in the uip6 group
    Fix some unresolved references
    
    * Either by removing them
    * Or by resolving them
    Doxygen fixes
    [doc] fixed some minor typos
    Converted u8_t to uint8_t and u16_t to uint16_t in the docs and tools directories.
    Doc for uIPv6
    [doc] Memory functions should be listed under 'Libraries'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] added base doxygen file for apps and cpu directory to doc/
    Added Rime documentation from the Rime/Chameleon paper (SenSys 2007)
    Documentation fixes
    Added Rime to doxygen documentation generation
    Remove references to the ESB platform
    A little cleanup of the mainpage text
    Documentation updates
    Bumped version number to 2.1
    Documentation updates
    Documentation fixes
    Added documentation of the Contiki build system
    Import of the contiki-2.x development code from the SICS internal CVS server
    Remove stray character which was being interpreted as a list item outside a list
    Remove references to the ESB platform
    Added documentation of the Contiki build system
    Expand macros when building docs
    Remove tags not supported by doxygen 1.8.7
    Update doxyfile to define TCP, UDP, Rime, IP, IPv6
    Set GENERATE_TREEVIEW to NO
    Update Doxyfile to a more recent version
    
    This was done with doxygen 1.8.8, Travis uses 1.8.7
    Bumped the version number from 2.6 to 3.x, which is to be used in the development branch
    Update of doxygen.to 1.8.1.2 using doxygen -u
    Define IPv6 and RPL related macros in Doxygen config
    Bumped version number
    Bumped version number
    Update to Contiki version number 2.4
    -> 2.3
    Bumped version number to 2.2.3
    * Addition of Meshnetics Zigbig platform by Frederic Thepaut <frederic.thepaut@inooi.com>
    
    * Changed default RavenUSB timeout to 3 seconds... seems to give most reliable transmissions
    Add image path to Doxygen file
    Reverted changes to the Doxygen file that were inadvertedly committed as part of the uIPv6 inclusion (where the Doxygen file was based on an older version of the Contiki Doxyfile)
    Doc for uIPv6
    Added multi-threading example
    2.2 -> 2.2.1
    2.1 -> 2.2
    Contributions from Michael Baar.
    
    Source and documentation files are included
    automatically. Small fixes for Windows also.
    Documentation updates
    Removed removed file win32/doc/getting-started.txt
    Renamed tree -> collect
    Bumped version number to 2.1
    Removed ctk-textedit, added a bunch of Rime modules
    Finally moved service.[c|h] into backyard. The "only" user left in outside backyard is the CTK on GTK simulation layer - which needs to be updated to build / run again...
    Documentation fixes
    Added Rime examples
    Added Rime to doxygen documentation generation
    renamed elfloader-tmp.h to elfloader.h
    Added documentation of the Contiki build system
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix documentation problems in the raven tutorial
    updated make command
    Changes by "David Kopf" <dak664@embarqmail.com> to:
     -Add hit counter to index.html
     -Adding link to favicon.png
     -Fix serving of binary (image) files in avr-makefsdata file
    
    Changes by Colin O'Flynn:
     -Removed extra linebreak in tutorial-raven.txt
     -Fix to contiki-conf.h in avr-rcb platform
    tutorial update
    updated radvd setting
    Update docs
    Doc for uIPv6
    Import of the contiki-2.x development code from the SICS internal CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Use the list_item_next() API
    Improved list example
    Import of the contiki-2.x development code from the SICS internal CVS server
    Doc for uIPv6
    [doc] Fixed and simplified doc/cpu.txt
    [doc/cpu.txt] added pic32 and aducrf101 cpu
    [doc] added base doxygen file for apps and cpu directory to doc/
    Remove obsolete/unused doxygen group
    
    The group is defined within the cpu files themselves, so this definition simply resulted in a 2nd CC2538 group, which was empty
    [doc] Added minimal doxygen anchor for each platform currently available in Contiki
    
    Already existing label names and titles were retained
    Import of the contiki-2.x development code from the SICS internal CVS server
    Documentation updates
    Import of the contiki-2.x development code from the SICS internal CVS server
    Doxygen fixes
    Sort docdirs
    
    Sorting docdirs is requierd to get reproducable results
    Fix doxygen prerequisites
    [doc] added base doxygen file for apps and cpu directory to doc/
    Simplified host OS platform detection in Makefiles
    Contributions from Michael Baar.
    
    Source and documentation files are included
    automatically. Small fixes for Windows also.
    Documentation updates
    Use $(MAKE) instead of explicit make command
    New documentation location
    Import of the contiki-2.x development code from the SICS internal CVS server
    Doc for uIPv6
    Doc for uIPv6
    [doc] fixed some minor typos
    Converted u8_t to uint8_t and u16_t to uint16_t in the docs and tools directories.
    Doc for uIPv6
    Import of the contiki-2.x development code from the SICS internal CVS server
    Doc for uIPv6
    Doc for uIPv6
    Doc for uIPv6
    Doc for uIPv6
    Doc for uIPv6
    Doc for uIPv6
    Doc for uIPv6
    Doc for uIPv6
    Doc for uIPv6
    Doc for uIPv6
    Doc for uIPv6
    Doc for uIPv6
    Contiki port for the Atmel AVR Raven board
    Doc for uIPv6
    Doc for uIPv6
    Doc for uIPv6
    Contiki port for the Atmel AVR Raven board
    Doc for uIPv6
    Doc for uIPv6
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Include udp-socket.h and tcp-socket.h by default in all applications that include contiki-net.h
    Moved net/rime.h to net/rime/rime.h
    Updated include paths for the moved files under net/
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Fixed includes
    replaced obsolete netif include with new ds6
    Always include netstack.h
    Main uIPv6 files addition
    Removed reference to logically empty file.
    * s/uip-fw-service/uip-fw-drv/
    Added Rime to default network include file
    Added uip-udp-packet.h
    Import of the contiki-2.x development code from the SICS internal CVS server
    Bumped the version number from 2.6 to 3.x, which is to be used in the development branch
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Bumped version number
    Bumped version number
    Update to Contiki version number 2.4
    -> 2.3
    Bumped version number to 2.2.3
    Bumber version number to 2.2.2
    2.2 -> 2.2.1
    2.1 -> 2.2
    Bumped version number to 2.1
    Version 2.0
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    sicslowpan: Fixed too aggresive fragmentation
    llsec: Configuration option for defining a constant LoWPAN-wide security level
    llsec: Added a layer in between NETSTACK_MAC and NETSTACK_NETWORK for implementing link layer security
    Add UIP_CONF_ND6_SEND_NA to contiki-default-conf.h
    Fix naming issues and includes in uip-ds6-nbr.h
    Removed now unused per-module neighbor table size configs. Use NEIGHBOR_CONF_MAX_NEIGHBORS instead.
    change default UIP_CONF_IPV6 back to 0. This is not a complete fix:
    see #227 for details. Will merge as it fixes build errors so Travis
    can be useful agian.
    A default configuraion file for Contiki
    
    The contiki-default-conf.h file is intended as a safe fallback for
    a number of configuration options in Contiki, to avoid putting too
    much in the individual contiki-conf.h files.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    A default configuraion file for Contiki
    
    The contiki-default-conf.h file is intended as a safe fallback for
    a number of configuration options in Contiki, to avoid putting too
    much in the individual contiki-conf.h files.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved ctimer.[ch] from their old and illogical location in core/net/rime to a more appropriate place in core/sys
    Moved energest.{c,h} from core/lib to core/sys: power profiling is a system mechanism, not a library
    Finally moved service.[c|h] into backyard. The "only" user left in outside backyard is the CTK on GTK simulation layer - which needs to be updated to build / run again...
    Added hard real-time rtimer to standard include file
    + energest.h
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    *** empty log message ***
    switched unsigned int to cfs_offset_t
    Major API change:
    1. Introduced a cfs_offset_t type that designates file offsets. unsigned int
    was insufficient on several platforms with non-volatile storage that exceed
    the capacity of unsigned int.
    
    2. Switched cfs_seek signature to POSIX style with a "whence" parameter.
    Added file removal function to the CFS API. Only cfs-coffee and cfs-posix
    implements this, whereas the others just return -1.
    Added const to constant arguments
    Added missing filesize field
    Fixed handling of CFS_WRITE and CFS_APPEND
    Made cfs implementation adhere to (new) cfs interface.
    Fixed compiler warnings to make code compile with gcc's -pedantic switch
    Changed Contiki File System (cfs) from a service to a plain library.
    
    This change means that one needs to select _ONE_ cfs implementation at Contiki library link time. But this doesn't appear to be an issue as all platforms have their "favorite" implementation anyway.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Major API change:
    1. Introduced a cfs_offset_t type that designates file offsets. unsigned int
    was insufficient on several platforms with non-volatile storage that exceed
    the capacity of unsigned int.
    
    2. Switched cfs_seek signature to POSIX style with a "whence" parameter.
    Added file removal function to the CFS API. Only cfs-coffee and cfs-posix
    implements this, whereas the others just return -1.
    Removed left-over debug printouts
    Added const to constant arguments
    Fixed handling of CFS_WRITE and CFS_APPEND
    Made cfs implementation adhere to (new) cfs interface.
    Fixed compiler warnings to make code compile with gcc's -pedantic switch
    Changed Contiki File System (cfs) from a service to a plain library.
    
    This change means that one needs to select _ONE_ cfs implementation at Contiki library link time. But this doesn't appear to be an issue as all platforms have their "favorite" implementation anyway.
    Added file size
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Use a more understandable name
    Added a function for setting the I/O semantics on a Coffee file descriptor. Changed the configuration parameters slightly and updated the platform definitions to reflect this change.
    made the documentation more clear.
    corrected GC page isolation loop.
    adjusted cfs_coffee_reserve signature to use cfs_offset_t instead of uint32_t.
    made cfs_coffee_format also to clear *next_free.
    The text suggested that only append operations were supported.
    * added coffee_files to the protected memory needed during cfs-based checkpointing operations
    
    * renamed cfs_coffee_get_fd_set() to cfs_coffee_get_protected_memory() to highlight that not only fd_set is protected
    documented the new function that helps sensornet checkpointing to protect
    file descriptors while rolling back state.
    added function for getting coffee's fd_set address and size
    Added file removal function to the CFS API. Only cfs-coffee and cfs-posix
    implements this, whereas the others just return -1.
    documented the extra Coffee functions.
    added formatting function and made code style compliant
    A flash file system for sensor nodes.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Major API change:
    1. Introduced a cfs_offset_t type that designates file offsets. unsigned int
    was insufficient on several platforms with non-volatile storage that exceed
    the capacity of unsigned int.
    
    2. Switched cfs_seek signature to POSIX style with a "whence" parameter.
    added file removal capability to xmem fs
    Added file removal function to the CFS API. Only cfs-coffee and cfs-posix
    implements this, whereas the others just return -1.
    Added const to constant arguments
    Fixed handling of CFS_WRITE and CFS_APPEND
    Made cfs implementation adhere to (new) cfs interface.
    Fixed compiler warnings to make code compile with gcc's -pedantic switch
    Changed Contiki File System (cfs) from a service to a plain library.
    
    This change means that one needs to select _ONE_ cfs implementation at Contiki library link time. But this doesn't appear to be an issue as all platforms have their "favorite" implementation anyway.
    changed counters to unsigned
    added erase of xmem and size checks
    CFS implementation over the xmem module
    Import of the contiki-2.x development code from the SICS internal CVS server
    Corrected some code style issues in Coffee.
    Do not copy more bytes than the filename string contains.
    Ensure that the file end is updated in the original file extent if it has been overwritten through a micro log operation.
    Added some comments about Antelope and Coffee.
    Avoid reading bytes from the original file when their is a log entry for that part of the file.
    Removed unread stack variable
    fixed the z1 platform and generic code used by z1 to work with IAR compiler
    removed execute flag of source files (avoids diff problems with egit)
    Replaced ifdef with if, as salvopitru suggested
    missing word
    Use a more understandable name
    ifdef -> if
    Added a function for setting the I/O semantics on a Coffee file descriptor. Changed the configuration parameters slightly and updated the platform definitions to reflect this change.
    Must check the storage boundary in find_contiguous_pages.
    Removed watchdog calls from Coffee
    Added a macro for portable watchdog calls.
    Minor clarifications in the code and comments. Integrated atches from Frederic Sureau: 1. copy_buf is now an ordinary char pointer. 2. Read directly from a file that is not modified. This reduces the code size when COFFEE_MICRO_LOGS is set to 0. 3. Update the file end value each time it is changed in case a log merge operation occurs later. 4. Avoid possible alignment problem in reading from the dummy_space area when calling cfs_readdir.
    Must check if load_file succeeded
    Preserve the file offset if a seek operation fails.
    Made pointers constant and thereby reduced the code size slightly.
    Introduced append-only mode for systems with little available code space left, but which require basic FS support. Removes about 1.5kB ROM when the mode is enabled, i.e., COFFEE_CONF_APPEND_ONLY=1
    stopping watchdog during find_file
    Fixed a performance problem by not allowing GC while doing merges of files and micro logs.
    Added some comments to clarify how Coffee works internally
    make watchdog management slightly more abstract to simplify porting
    Fixed a bug with reading to far in get_record index. Thanks to Darren Moore for reporting this.
    * isolate only pages in the last sector
    * set max_pages to 0 when calling remove_by_page to prevent file starvation.
    * when allocating files, only update next_free if the allocated file starts at next_free.
    
    Thanks to Darren Moore (CSIRO) for suggesting the first two of the
    three changes.
    undo accidental enabling of debug output.
    Made the use of micro logs configurable to make file modifications
    more efficient on storage types that support inline updates.
    
    The sky platform uses logs, and the native platform uses no logs.
    cleared debug flag.
    fixed GC bug with big files and unwanted buffer overwrite bug.
    stop the watchdog while merging.
    use unsigned for sector count type.
    decreased the code size to less than 5000 bytes. (msp430 code)
    improved clarity in read and write code.
    added negative offset check in cfs_seek().
    removed unnecessary multiplication.
    Fixed append->modify->append bug.
    
    Approximately doubled the speed of file reservations.
    
    Reduced the compiled code size by about 100 bytes by removing redundant code.
    removed complicated and mostly unused EOF hint code.
    make sure that page isolation is called after erasing a sector in reluctant GC.
    simplified the GC logic a bit.
    reluctant gc will now wait until the sector has no free pages
    before erasing the sector.
    made gc on removal configurable since it decreases wear levelling.
    cleaned up some code.
    Introduced two garbage collection mode: greedy and reluctant.
    
    The greedy GC mode attempts to erase as many sectors as possible, and
    it is therefore a slow operation, since the flash driver must wait
    for about a second after erasing one sector. The former behavior was
    to always do a greedy GC if file reservations fails due to lack of space.
    
    The new reluctant GC stops after erasing one sector, and therefore
    we often do not have to wait if there is no file system operation
    in the time while the sector is being erased. We call the garbage collector
    using this mode when removing a file that is not a micro log file, since
    the remove function is called recursively for micro log files that are
    erased because the corresponding ordinary file is erased.
    
    This change increases the coffee test (examples/sky/test-coffee.c) speed
    from 9 to 5 seconds.
    merged files must always inherit the old file end.
    dereference gc_wait
    avoid repetitive garbage collection if no files have been deleted since
    the last try.
    corrected GC page isolation loop.
    adjusted cfs_coffee_reserve signature to use cfs_offset_t instead of uint32_t.
    made cfs_coffee_format also to clear *next_free.
    bugfixes:
    
    * set invalid page on all removed files which have cache entries.
    * update file cache entries earlier to prevent overwrites.
    * cfs_opendir in Coffee now accepts any name.
    * refer to the documentation of each whence parameter. Old documentation didn't   consider negative movements either.
    fixed cfs_seek signature.
    file end check must be against fdp->offset.
    Major API change:
    1. Introduced a cfs_offset_t type that designates file offsets. unsigned int
    was insufficient on several platforms with non-volatile storage that exceed
    the capacity of unsigned int.
    
    2. Switched cfs_seek signature to POSIX style with a "whence" parameter.
    fixed error in last commit: second character must terminate
    permit the current directory name "." to be used in cfs_opendir.
    bug fix: removed possible null pointer dereference.
    doubled the speed of uncached file openings.
    broke out the essence of the search algorithm to a separate function.
    corrected file cache status checks in previous commit.
    cleaned up mostly the GC code.
    made EOF hints optional.
    
    default build is now ~500 bytes smaller.
    GC fix: isolated pages must always be allocated.
    
    page allocation: increased utilization because the algorithm failed to
    count all space before.
    
    style: renamed and simplified some code and names.
    fixed merge_log bug and space allocation error with isolated pages.
    sizeof on coffee_fd_set is no longer suitable since it has become a
    pointer.
    * added coffee_files to the protected memory needed during cfs-based checkpointing operations
    
    * renamed cfs_coffee_get_fd_set() to cfs_coffee_get_protected_memory() to highlight that not only fd_set is protected
    A long refactoring session yielded the following.
    
    Technical changes:
    
    * Factored out file specific information from the file descriptor
      structure into a new file structure.
    
      - Useful file metadata can be stored after the file is closed.
      - File descriptors become much smaller.
      - Significantly reduces the need to scan for the file end.
    
    * Use correct types in all function signatures.
    * Removed the directory cache.
    
    Results:
    
    * Enormous speed increase when opening cached files (10x-20x.)
    * Multiple fd:s pointing to the same file have the correct semantics.
    * About 100 bytes smaller ROM size.
    * Slightly smaller static RAM size.
    Use the right type for pages in the directory cache. This makes the
    cache much smaller on most platforms.
    zeroed debug flag
    added function for getting coffee's fd_set address and size
    reduced code size by removing some unnecessary statements.
    fixed compilation error when debug flag was set.
    reduced the code size by 200 bytes.
    fixed an EOF hint bug that occured when files where extended.
    Added file removal function to the CFS API. Only cfs-coffee and cfs-posix
    implements this, whereas the others just return -1.
    removed redundant code.
    - important bug fix regarding writing after a merge log operation: parameters
    must be restored.
    
    - fixed watchdog problem in reserve
    break out eof update functionality since its now needed at more than one
    place.
    simplified complex functions through abstractions.
    switched base offset to coffee_offset_t type.
    loop parameter must be signed in case batch_size is 0.
    reuse merge_log to also do file extensions.
    function argument should be a pointer
    removed debug output.
    corrected EOF hint calculation.
    - Added passive directory cache filling.
    - Improved variable naming.
    - Cast unknown integer type parameters to format type for printf calls.
    generalized log buffer adjustments into functions. simplified next_log_record
    usage.
    revoked accidental renaming om dir cache entries.
    refactored the code and reduced the ROM size a few dozen of bytes
    cut 500 bytes of ROM size.
    removed redundant code
    reduced rom size by ~40 bytes
    optimized the merge log operation and fixed a fd update bug.
    adjust read chunk size according to log entry size
    fixed a buffer bug with the micro logs
    fixed bug with dislocated end of file search
    fixed compiler warnings that were introduced with the new reserve function.
    allow duplicate reservations when flushing the log.
    read as much as possible, even when reading log records.
    prohibit 0-sized log entries.
    - new log semantics: read the previous log entry only if the new one doesn't completely overshadow it.
    - bug fix: prohibit file reservations with names that already exist.
    improved log write semantics on configured logs.
    sanity check on configure_log parameters
    use abstract types for offsets and pages so that we can easily port it to
    very large or small memories.
    fixed file descriptor leakage and erroneous flag setting.
    corrected assignments.
    increased sequential read performance by eliminating a header reading.
    bug fixes:
    
    - close all file descriptors after formatting.
    - do not increase file size when flushing the log.
    - make sure that the fd is positive in FD_VALID.
    corrected parameter type
    fixed bug with eof hint
    the isolated flag must have higher precedence than the obsolete flag
    activated EOF hints and fixed a bug in the garbage collector.
    Enforce the number of pages in a sector to be a power of two.
    Improved the performance of the garbage collector and the algorithm for
    finding contiguous pages.
    
    Adjusted the file header and added a validity indicator.
    
    Removed some redundant code and fixes minor issues in the text.
    moved platform independent definitions
    moved platform independent code to the right place
    Major performance boost to directory listings and non-cached file openings.
    exclude log files from directory list
    should be comparison, not assignment
    Simplified file finding code.
    
    Renamed fd_set to coffee_fd_set in order to avoid name clash on the native
    platform.
    Fixed bug that occured after the node had been rebooted.
    call watchdog_periodic in potentially long-running loops
    turned off debugging by default
    added formatting function and made code style compliant
    no debugging printouts by default
    A flash file system for sensor nodes.
    Changed handling of predefined macros in cc65 allows for simplification.
    The new POSIX directory access in the CBM C library comes with a d_blocks field too.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Set directory entry size if available in some dirent field. Currently for the Apple2 only.
    Splitted POSIX based cfs implementation to avoid pulling in potentially large POSIX directory I/O functions without needing them at all.
    Made cfs implementation adhere to (new) cfs interface, streamlined implementation, reduced header dependencies and removed the 'cfs-root/' prefix. The reasoning behind the latter:
    - Productive embedded targets don't use the posix based variant anyway.
    - For testing purposes the prefix is a hurdle as the documentation doesn't mention it ;-))
    - The prefix is incompatible with posix implementations lacking directory support (like the C64).
    Removed used variable that caused compiler warning.
    Fixed compiler warnings to make code compile with gcc's -pedantic switch
    Changed Contiki File System (cfs) from a service to a plain library.
    
    This change means that one needs to select _ONE_ cfs implementation at Contiki library link time. But this doesn't appear to be an issue as all platforms have their "favorite" implementation anyway.
    Don't exit application on every _BUT_ exit messages ;-)
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Set a file mode in the third argument when calling open() with O_CREAT in
    the flags. Required by IEEE Std 1003.1, 2004 Edition.
    switched unsigned int to cfs_offset_t
    Major API change:
    1. Introduced a cfs_offset_t type that designates file offsets. unsigned int
    was insufficient on several platforms with non-volatile storage that exceed
    the capacity of unsigned int.
    
    2. Switched cfs_seek signature to POSIX style with a "whence" parameter.
    Added file removal function to the CFS API. Only cfs-coffee and cfs-posix
    implements this, whereas the others just return -1.
    Added VC++ compatibility.
    Added const to constant arguments
    Fixed handling of CFS_WRITE and CFS_APPEND
    Set truncate flag to make sure that overwriting a existing file doesn't result in a mix of old and new content.
    Splitted POSIX based cfs implementation to avoid pulling in potentially large POSIX directory I/O functions without needing them at all.
    Made cfs implementation adhere to (new) cfs interface, streamlined implementation, reduced header dependencies and removed the 'cfs-root/' prefix. The reasoning behind the latter:
    - Productive embedded targets don't use the posix based variant anyway.
    - For testing purposes the prefix is a hurdle as the documentation doesn't mention it ;-))
    - The prefix is incompatible with posix implementations lacking directory support (like the C64).
    Removed used variable that caused compiler warning.
    Fixed compiler warnings to make code compile with gcc's -pedantic switch
    Changed Contiki File System (cfs) from a service to a plain library.
    
    This change means that one needs to select _ONE_ cfs implementation at Contiki library link time. But this doesn't appear to be an issue as all platforms have their "favorite" implementation anyway.
    Don't exit application on every _BUT_ exit messages ;-)
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Switched cfs offset type to signed int to allow backward movements with cfs_seek.
    Switched name to CFS_CONF_OFFSET_TYPE to emphasize that it is a configurable option.
    * cfs_opendir in Coffee now accepts any name.
    * refer to the documentation of each whence parameter. Old documentation didn't   consider negative movements either.
    Allow to override the whence macros individually - just like the open flags.
    switched unsigned int to cfs_offset_t
    Major API change:
    1. Introduced a cfs_offset_t type that designates file offsets. unsigned int
    was insufficient on several platforms with non-volatile storage that exceed
    the capacity of unsigned int.
    
    2. Switched cfs_seek signature to POSIX style with a "whence" parameter.
    Added file removal function to the CFS API. Only cfs-coffee and cfs-posix
    implements this, whereas the others just return -1.
    Added const to constant arguments
    Fixed handling of CFS_WRITE and CFS_APPEND
    Allow to implement cfs API on preprocessor level. The benefits are:
    - Less overhead.
    - Switching implementations without makefile changes.
    - Compatibility with specific declaration needs. (I.e. the cc65 module loader expects the read() function to be defined as fastcall but that contradicts the cfs API declaration.)
    Improved cfs interface.
    Removed compiler warnings.
    Fixed compiler warnings to make code compile with gcc's -pedantic switch
    Changed Contiki File System (cfs) from a service to a plain library.
    
    This change means that one needs to select _ONE_ cfs implementation at Contiki library link time. But this doesn't appear to be an issue as all platforms have their "favorite" implementation anyway.
    Added a CFS_APPEND option, set CFS_READ and CFS_WRITE to new numbers
    Added the CCIF (Contiki Core InterFace) declarations used by the applications which are currently part of the Win32 build.
    Avoid compiler warning.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved the ctk files from core/lib into core/lib/ and core/lib/libconio
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved the ctk files from core/lib into core/lib/ and core/lib/libconio
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix warnings caused by unescaped special doxygen chars
    Fix warnings caused by incorrect param names / undocumented params
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added the CCIF (Contiki Core InterFace) declarations used by the applications which are currently part of the Win32 build.
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Allow to exit the process owning the foreground window by pressing ctrl-c. This is especially useful if there's no closebutton on the window frames (or no windows at all).
    Provide optional prototypes for all three keyboard input related functions.
    With dynamic loading enabled the function ctk_textentry_input_null() lives in the persistent core while the macro CTK_TEXTENTRY() is typically used in loadable modules. So ctk_textentry_input_null() needs to be dynamically resolved.
    
    On Win32 dynamic resolving isn't done by patching the dynamically loaded segments. Rather the code generated by the compiler for accessing symbols declared with __declspec(dllimport) is implicitly modified to actually go through pointer dereferenciations. The dynamic linker only initializes this pointers.
    
    But with the symbol ctk_textentry_input_null becoming a pointer to a function it isn't a constant anymore and so it can't be used as initializer element - and thus breaking CTK_TEXTENTRY().
    
    So the only viable solution seems to stick to the inversally available NULL pointer on Win32. But if there's an ugly #ifdef <platform> necessary anyway than it seems resonable to classify ctk_textentry_input_null as the special case and therefore use #ifdef SDCC:
    - It saves some bytes on all non-SDCC platforms
    - Is matches the exsisting inline documentation
    Avoid compiler warning by returning a value from non-void function but no not avoid calling into the function now returning a meaningful value.
    Added check for NULL textentry input, and a typecast to make cc65 happy
    Removed leftover semicolon
    Fixed function prototype so that it compiles again...
    Added a dummy function instead of a NULL callback in the textentry widget because sdcc does not like NULL function pointers
    Did more aggressive fullscreen ctk codesize optimization. Now ctk draw implementations need adjustment as the struct window member x and y are gone. Another potential optimization would be to remove clipping...
    Have the fullscreen mode (triggered by not setting CTK_CONF_WINDOWS) work with mouse support.
    Some source reformatting.
    Have ctk (at least on conio) work correctly without menus.
    Removed CTK_CONF_HYPERLINK from shared code as its use is still unclear (and the implementation was incomplete anyway).
    Ooops, forgot to remove debug printfs before committing :-(
    Introduced CTK_CONF_WINDOWS.
    If it is set the behaviour is (supposed to be) as before. Otherwise ctk supports just one window in fullscreen mode: No windows, no borders, no menu, no dialogs, no desktop.
    The ctk draw interface stays stable but obviously further code savings are possible by making ctk draw implementations CTK_CONF_WINDOWS aware.
    Currently the fullscreen mode doesn't work with mouse support - this is supposed to come later...
    Enhanced CTK_CONF_ICONS support.
    Minor formatting change.
    CTK_WINDOW_CLOSE support is enhanced.
    CTK_CONF_HYPERLINK is introduced.
    Both are for the memory sake.
    Removed compiler warning.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Avoid compiler warnings.
    Allow to build telnet-server example for targets not defining CTK_CONF_MAXMENUITEMS.
    The special handling of mouse-over detection for bitmaps and icons seems unnecessary since the the member 'h' is always present and can always be assumed to be initialized. Furthermore the special handling prevented multiline textentries to be treated correctly. Therefore the special handling is now completely removed (and the handling of the 'h' member is adjusted).
    The program_handler_add() mechanism relied on being used after the initialization of the program_handler (and the ctk) process but before entering the event handling. In Contiki 2.x there's no such explicit process initialization anymore - and the implicit asynchronous initialization runs after program_handler_add(). Therefore the initialization of the data structures modified by program_handler_add() had to be removed from that asynchronous process initialization. Instead C-langugae global data.initialization is used.
    Avoid compiler warnings.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved the ctk files from core/lib into core/lib/ and core/lib/libconio
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added a dummy function instead of a NULL callback in the textentry widget because sdcc does not like NULL function pointers
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved the ctk files from core/lib into core/lib/ and core/lib/libconio
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added a dummy function instead of a NULL callback in the textentry widget because sdcc does not like NULL function pointers
    no message
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved the ctk files from core/lib into core/lib/ and core/lib/libconio
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved the ctk files from core/lib into core/lib/ and core/lib/libconio
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved the ctk files from core/lib into core/lib/ and core/lib/libconio
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Minimal reformatting only.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved the ctk files from core/lib into core/lib/ and core/lib/libconio
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Avoid compiler warnings.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Using wherex() to determine the length of the string printed with cputsn() fails if the right edge of the screen was reached as wherex() then returns 0.
    Therefore we rather count the chars actually printed in cputsn() and return that value thus avoiding usage of wherex() in those scenarios altogether.
    - Set cursor in ctk_draw_init() to top left corner as it is called for re-initialization on Contiki exit.
    - No need for textcolor() before cclear().
    - Set textcolor() in ctk_draw_init() to some reasonable value as it is called for re-initialization on Contiki exit.
    Did more aggressive fullscreen ctk codesize optimization. Now ctk draw implementations need adjustment as the struct window member x and y are gone. Another potential optimization would be to remove clipping...
    Mustn't include libconio header as this is just one possible implementation of the conio API (and further code exlusion for fullscreen ctk).
    Exclude unnecessary code in ctk fullscreen mode.
    Some source reformatting.
    Have ctk (at least on conio) work correctly without menus.
    Enhanced CTK_CONF_MENUS support.
    Removed compiler warnings.
    #include <conio.h>
    doesn't work on z80 version, because this is not a standard library.
    - Removed ctk_arch_isprint() definition as it is - nomen est omen - platform specific.
    - Avoided compiler warnings.
    - Rearranged headers.
    Don't make assumptions on textentry contents beyond the first '\0'.
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    With dynamic loading enabled the function ctk_textentry_input_null() lives in the persistent core while the macro CTK_TEXTENTRY() is typically used in loadable modules. So ctk_textentry_input_null() needs to be dynamically resolved.
    
    On Win32 dynamic resolving isn't done by patching the dynamically loaded segments. Rather the code generated by the compiler for accessing symbols declared with __declspec(dllimport) is implicitly modified to actually go through pointer dereferenciations. The dynamic linker only initializes this pointers.
    
    But with the symbol ctk_textentry_input_null becoming a pointer to a function it isn't a constant anymore and so it can't be used as initializer element - and thus breaking CTK_TEXTENTRY().
    
    So the only viable solution seems to stick to the inversally available NULL pointer on Win32. But if there's an ugly #ifdef <platform> necessary anyway than it seems resonable to classify ctk_textentry_input_null as the special case and therefore use #ifdef SDCC:
    - It saves some bytes on all non-SDCC platforms
    - Is matches the exsisting inline documentation
    Fixed function prototype so that it compiles again...
    Added a dummy function instead of a NULL callback in the textentry widget because sdcc does not like NULL function pointers
    Added fallback #define of CH_ENTER
    Did more aggressive fullscreen ctk codesize optimization. Now ctk draw implementations need adjustment as the struct window member x and y are gone. Another potential optimization would be to remove clipping...
    Introduced CTK_CONF_WINDOWS.
    If it is set the behaviour is (supposed to be) as before. Otherwise ctk supports just one window in fullscreen mode: No windows, no borders, no menu, no dialogs, no desktop.
    The ctk draw interface stays stable but obviously further code savings are possible by making ctk draw implementations CTK_CONF_WINDOWS aware.
    Currently the fullscreen mode doesn't work with mouse support - this is supposed to come later...
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Added the CCIF (Contiki Core InterFace) declarations used by the applications which are currently part of the Win32 build.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved the ctk files from core/lib into core/lib/ and core/lib/libconio
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    #include "contiki" has been added so as to enable platform-dependent configuration for LIBCONIO_WIDTH and LIBCONIO_HEIGHT.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved the ctk files from core/lib into core/lib/ and core/lib/libconio
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    fixed documentation typos
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    switched all users of cfs_seek(x,y) to cfs_seek(x,y,CFS_SEEK_SET)
    added parameter to relocate method
    + renamed write_text() to write_rom()
    + added parameter to write_rom()
    x86 elf loader implementation (only 2 common types).
    depends on a few not-yet-commited files
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    * Add cle_info argument to cle_write_reloc.
    * Rename cle_upd_reloc to cle_write_reloc and changed first arg to
      point to position to be updated.
    
    * Factor cle.c into multiple files.
    * Add GNUC AVR support.
    
    * Change cle_upd_reloc to return consistent errorvalue.
    
    * Suppress stupid GCC warning about casting pointer to wider types
      "(cle_addr)(uintptr_t)".
    * For portability reasons change cle_addr from pointer type.
    
    * Use loader/sym.h.
    
    * cle_upd_reloc() makes updates in memory copy.
    * Fix an miscalculation.
    
    * Changing naming to be more explicit about file offsets.
    * Typo in comment.
    
    * More info in printfs.
    Small and modular dynamic link-editor.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    * Resurrect traditional elfloader interface.
    Import of the contiki-2.x development code from the SICS internal CVS server
    PROGMEM changes needed for newer avr-gcc compiler
    Converted u8_t to uint8_t and u16_t to uint16_t in the rest of core (specifically ctk/vnc, slip and the loader code)
    Add stk500 platform and changes suggested by Daniel Willmann
    Third attempt with INCLUDE_APPLICATE_SOURCE  to remove compile warnings without breaking any platforms
    Fix previous 2 overhasty commits which broke required signedness of address shifts
    Bugs in previous change, could include 32 bit code on 16 bit builds
    INCLUDE_APPLICATE_SOURCE defined to remove compiler warnings. Untested but should work on all AVR builds.
    switched all users of cfs_seek(x,y) to cfs_seek(x,y,CFS_SEEK_SET)
    changed R_AVR_CALL relocation (but unsure why the old didn't work)
    
    + defined debug output
    - Fix / enhence AVR specific part of the ELF relocator. Some relocation types
      are still unsupported and will write warings on the second serial port.
    
    - Fix elfloader_arch_write_rom (), which has to reside in a special bootloader
      section of flash rom. The code is heavly inspired from avr-libc's documentation.
    
    - Prelimiary implementation of elfloader_arch_allocate_rom: Code is
      flashed to fixed address 0x8000. Note that on the AVR, flash rom is adressed
      word (16bit)-wise, not byte wise!
    
    - Preliminary implementation of elfloader_arch_allocate_ram using the mmem
      module. Current code does not free the memory.
    added parameter to relocate method
    + renamed write_text() to write_rom()
    + added parameter to write_rom()
    Fixed bug where instruction to be relocated was fetched from an incorrect location
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    * Add cle_info argument to cle_write_reloc.
    * Rename cle_upd_reloc to cle_write_reloc and changed first arg to
      point to position to be updated.
    
    * Factor cle.c into multiple files.
    Rename cc2420_uart0.c to cc2420_spi.c
    * First port of CC2420 driver to the AVR.
    Use LPM4_EXIT to return from sleep on msp430.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the parameter 'char * data' of process_start to the
    type process_data_t. This was an artifact when the choice was
    made to use the void * type for the data parameter in processes.
    
    Changed parameter 'void * data' of process_post_synch to
    process_data_t for consistency.
    
    Checked all the uses of process_start() in contiki and fixed casts
    of the data parameter.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Use PROCESS_NAME_STRING macro to handle NO_PROCESS_NAMES
    Switched from (now obsolete) 'process_load' to 'autostart_processes'.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    * Add/update linker & loader error codes.
    * For portability reasons change cle_addr from pointer type.
    * First stab at loadable contiki modules in plural form.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    * Add cle_info argument to cle_write_reloc.
    
    * Use cle_info to extract low order bits in pc-relative calculation.
    * Add last two relocs.
    * Rename cle_upd_reloc to cle_write_reloc and changed first arg to
      point to position to be updated.
    
    * Factor cle.c into multiple files.
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Fix some typos.
    
    Signed-off-by: François Revol <revol@free.fr>
    Signed-off-by: Mariano Alvira <mar@devl.org>
    allow elf loader memory configuration at compile time
    Added const
    moved elfloader-tmp.h -> elfloader.h
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    * Switch from linear search to binary ditto.
    
    * Symbol names is "const char *" but symbol values are "void *" (not
      "const char *").
    Symbol is const
    Fix constness problems.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    * s/_DEF_/_/g
    
    * Value is not const and of unknown type.
    Changed the generation of symbols to the mknmlist script. Now symbols.h is not automatically generated so we can use it as a normal include file and remove symbols-def.h.
    Updated code
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    * Obob in assertion.
    * Rename cle_upd_reloc to cle_write_reloc and changed first arg to
      point to position to be updated.
    
    * Factor cle.c into multiple files.
    * For portability reasons change cle_addr from pointer type.
    * First stab at loadable contiki modules in plural form.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Changed the generation of symbols to the mknmlist script. Now symbols.h is not automatically generated so we can use it as a normal include file and remove symbols-def.h.
    * Constness and voidness.
    - AVR specific implementation of (linear) symbol table lookup, that uses the
      necessary functions to load symbols from flash ROM.
    - Implementing binary search is on my TODO list.
    * Include loader/symbols-def.h and use extern declarations.
    Added optional binary search
    updated reference to symbols.h
    Fix constness problems.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Small and modular dynamic link-editor.
    Parse rodata too
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    switched all users of cfs_seek(x,y) to cfs_seek(x,y,CFS_SEEK_SET)
    Added debugging statements
    Added const
    static before const.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    More debugging information. Now identifies symtab and strtab based on type rather than name.
    added support for elf32_rel relocation entries (earlier only elf32_rela)
    added support for rodata section
    
    (x86 compability)
    Removed old elfloader.h and replaced with the current code (previously in elfloader-tmp.h)
    Removed old elfloader.c and replaced with the current code (previously in elfloader-tmp.c)
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    forcing 16-bit aligned data memory
    switched all users of cfs_seek(x,y) to cfs_seek(x,y,CFS_SEEK_SET)
    elfloader executing loaded programs from ram (not rom) by default on msp430 platforms.
    added parameter to relocate method
    + renamed write_text() to write_rom()
    + added parameter to write_rom()
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    * Like symtab but rely on ANSI C features.
    * s/_DEF_/_/g
    
    * Value is not const and of unknown type.
    Changed the generation of symbols to the mknmlist script. Now symbols.h is not automatically generated so we can use it as a normal include file and remove symbols-def.h.
    Updated code
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    * Switch from linear search to binary ditto.
    
    * Symbol names is "const char *" but symbol values are "void *" (not
      "const char *").
    * Add extern declarations.
    new symbols definition header.
    
    should be included from autogenerated symbols.h
    Fix constness problems.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    * Like symtab but rely on ANSI C features.
    Changed the generation of symbols to the mknmlist script. Now symbols.h is not automatically generated so we can use it as a normal include file and remove symbols-def.h.
    * Switch from linear search to binary ditto.
    
    * Symbol names is "const char *" but symbol values are "void *" (not
      "const char *").
    * Include loader/symbols-def.h and use extern declarations.
    Added optional binary search
    updated reference to symbols.h
    Fix constness problems.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Make consistent presumptions about inlcude paths.
    added parameter to relocate method
    + renamed write_text() to write_rom()
    + added parameter to write_rom()
    Removed old elfloader.h and replaced with the current code (previously in elfloader-tmp.h)
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Switched from (now obsolete) 'process_load' to 'autostart_processes'.
    * Use __data_load_end to find unused ROM.
    * Move loaded modules to higher addresses.
    * Bug in assertion.
    * For portability reasons change cle_addr from pointer type.
    * Resurrect traditional elfloader interface.
    * Backwards compatible with elfloader.c but uses the new Contiki
      link-editor. Taken together cle and elfloader_compat requires less
      ROM and RAM than the old version.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Changed the generation of symbols to the mknmlist script. Now symbols.h is not automatically generated so we can use it as a normal include file and remove symbols-def.h.
    * Switch from linear search to binary ditto.
    
    * Symbol names is "const char *" but symbol values are "void *" (not
      "const char *").
    * Include loader/symbols-def.h and use extern declarations.
    Added optional binary search
    updated reference to symbols.h
    Fix constness problems.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Fixed compiler warnings
    added parameter to relocate method
    + renamed write_text() to write_rom()
    + added parameter to write_rom()
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the rest of core (specifically ctk/vnc, slip and the loader code)
    * Add cle_info argument to cle_write_reloc.
    * Scratch buffer is used as a string more often than not, change to
      char * rather than unsigned char *.
    * Rename cle_upd_reloc to cle_write_reloc and changed first arg to
      point to position to be updated.
    
    * Factor cle.c into multiple files.
    * Add GNUC AVR support.
    
    * Add/update linker & loader error codes.
    * For portability reasons change cle_addr from pointer type.
    * Typedef for scratch buffer.
    Small and modular dynamic link-editor.
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    llsec: Noncompromise-resilient 802.15.4 security
    Changed the name of the rimeaddr module to linkaddr
    Moved the rimeaddr.[ch] code from the core/net/rime module to the core/net module, as it is used not only by rime code
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    fixed some documentation typos.
    
    also uc -> unicast, stuc -> stunicast.
    Removed the unused ->u16 field (it was there only as a convenience/laziness access method during the initial development of the Rime stack, but has caused problems when being there)
    Made Rime address size configurable through contiki-conf.h
    Documentation updates
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Initial version of a simple mesh routing protocol written with Rime
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    Moved the rimeaddr.[ch] code from the core/net/rime module to the core/net module, as it is used not only by rime code
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Added the const keyword to IP address arguments that are not (and should not be) changed by the callee
    Fix naming issues and includes in uip-ds6-nbr.h
    Added new neighbor-table module, a centralized place where to store all data about neighbors, indexed by link-layer address. Meant for use in other Contiki modules such as rpl, ds6, ds6-route, phase, neighbor-info.
    Cleanup packetbuf: use rime attributes and addresses only when rime is enabled. Saves 32 byte per queuebuf in the non-rime case.
    packetbuf: Added function "packetbuf_holds_broadcast()" for checking whether the current packet is a
    broadcast
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    ContikiMAC: Create and parse ContikiMAC header in special framer; Expanded framer interface
    to allow for creating and securing frames in advance; Create and secure frames in advance when sending bursts; Do neither recreate nor resecure frames that come from phase
    framer-802154: Support for explicit keys
    framer-802154: Conditional compilation of security-related code
    framer-802154: Support for setting and accessing the frame type
    attribute
    framer-802154: Support for creating and parsing frames with security headers
    packetbuf: Made packetbuf_hdrlen applicable to inbound packets, too
    Changed to use LINKADDR_SIZE instead of sizeof() to select between
    short address and long address as some platforms might use padding in
    the struct. This fixes #555.
    Changed the name of the rimeaddr module to linkaddr
    Moved the rimeaddr.[ch] code from the core/net/rime module to the core/net module, as it is used not only by rime code
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added a PACKETBUF_ATTR_STREAM_END packet flag
    Added explicit timestamp packet type, for the revived timesynch support
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Added macro to identify address attributes for use in header processing modules
    Added a packetbuf flag that indicates if the link layer acks should be used or not
    MAC sequence number attribute
    Added pending flag
    Added function that removes the header
    * Added configurable default number of transmissions for CSMA to use when not specified using packetbuf attributes (CSMA_CONF_MAX_MAC_TRANSMISSIONS).
    * Renamed packetbuf attribute PACKETBUF_ATTR_MAX_MAC_REXMIT to PACKETBUF_ATTR_MAX_MAC_TRANSMISSIONS where value 0 (attribute not set) means that default number of transmissions should be used.
    New packet attribute for specifiying MAC layer retransmissions; reorder and commented packet attributes
    Added a function to clear only the header part of the packetbuf
    A simple addition with significant performance implications:
    sicslowpan tags TCP packets with the PACKETBUF_ATTR_PACKET_TYPE_STREAM
    flag, which makes the underlying power-saving MAC layer keep the radio
    on for some time after transmitting the packet. This allows reply
    packets to be processed directly, significantly increasing TCP latency
    and throughput.
    Increased default header size in packetbuf to accomodate 802.15.4 headers
    removed unused prototype
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Align packetbuf on an even 32-bit boundary
    packetbuf: Added function "packetbuf_holds_broadcast()" for checking whether the current packet is a
    broadcast
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    packetbuf: Made packetbuf_hdrlen applicable to inbound packets, too
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Code style and debugging updates
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Added check to not copy or create too large packets
    Fixed to not change the header if the header allocation fails
    Added function that removes the header
    Removed debug string names of packet attribtues
    Added a function to clear only the header part of the packetbuf
    Removed debug strings to save ROM
    Added explicit typecast to buffer definition
    Defined the packetbuf buffer so that it is always aligned on a 16-bit boundary.
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Added a packet attribute to specify transmission power on outgoing packets
    Added packet attributes for energy spent on a packet (RIMEBUF_ATTR_LISTEN_ENERGY and RIMEBUF_ATTR_TRANSMIT_ENERGY)
    Added rimebuf attributes for RSSI, timestamp, and network ID (used for e.g. 802.15.4 PAN ID)
    clear attributes when clearing buffer
    Fixed type offset bug in rimebuf_addr() and removed unused type for attributes and addresses. Replaced memcpy with loop.
    Changed assignment to explicit copy to enable compilation with SDCC
    This is an initial commit of an implementation of the Chameleon
    architecture for the Rime stack for Contiki. The Chameleon
    architecture separates the header processing from the Rime protocol
    logic. Instead of having each protocol create its own part of the
    packet header, protocols use packet attributes. Before sending a
    packet, a special Chameleon header processing module creates a packet
    header from the packet attributes. The same Chameleon module parses
    incoming packets and creates packet attributes from the header.
    
    The details are in our SenSys 2007 paper:
    
    Adam Dunkels, Fredrik Osterlind, Zhitao He. An Adaptive Communication
    Architecture for Wireless Sensor Networks. In Proceedings of the Fifth
    ACM Conference on Networked Embedded Sensor Systems (SenSys 2007),
    Sydney, Australia, November 2007.
    
    http://www.sics.se/~adam/dunkels07adaptive.pdf
    
    This is a rewrite of the code that was developed for the paper.
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Fixed compiler warnings to make code compile with gcc's -pedantic switch
    const parameter to rimbuef_copyfrom()
    Documentation updates
    Debug output
    #if'ed away debugging code
    Added stdio.h for sprintf.
    Renamed rimebuf_hdrextend() to rimebuf_hdralloc()
    Renamed function for compacting the data in the rimebuf: rimebuf_compact
    Removed the explicit header buffer; both the header and data are not in the same 'physical' buffer. Added function for copying referenced data into the rimebuf.
    Initial import of the experimental Rime code into the SourceForge CVS.
    Make netsim more like the esb target
    Import of the contiki-2.x development code from the SICS internal CVS server
    llsec: Added a layer in between NETSTACK_MAC and NETSTACK_NETWORK for implementing link layer security
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Set default RDC wakeup rate to 8 hz
    Moved the definition of the channel check rate used by the radio duty
    cycling layer. This definition was previously held in net/mac/mac.h,
    with the name MAC_CONF_CHANNEL_CHECK_RATE. But since the rate is used
    by the radio duty cycling layer, it makes more sense to change its
    name to reflect this. Also, the configuration option should be tied to
    the netstack configuration instead.
    
    So the new configuration option is called
    NETSTACK_CONF_RDC_CHANNEL_CHECK_RATE.
    Replaced old framer (framer_get/framer_set) with new NETSTACK style configuration. Added nullrdc-framer that is a nullrdc with framer support.
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    Set the default radio driver to nullradio
    Common initialization code for the netstack
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Refactored the phase optimization functionality into a separate module
    Added prototype missing for quite some time now - do we need -Werror ?
    Added functionality for decaying routes: when a packet is sent over a route, it is decayed. If the route is not refreshed within four packets (with the route_refresh() function, which is called when a new packet arrives), the route is dropped. A route can be decayed at most once per second
    Removed automatic refresh of routes from the route_lookup() function and moved it into an explicit route_refresh() function. The previous behaviour was dangerous, since it meant that even bad routes that someone was looking for were considered fresh. Now such routes time out if they are not explictily refreshed (e.g., on a packet reception)
    Made constant addresses const
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Added API for reading the routing table
    Cleaned up #includes to avoid cyclic dependencies - the Rime includes no longer depend on rime.h
    Documentation updates
    Make route lifetime dynamically configurable
    Added missing prototype.
    Added automatic timeouts
    New Rime module: mesh, a mesh routing protocol
    Initial version of a simple mesh routing protocol written with Rime
    Import of the contiki-2.x development code from the SICS internal CVS server
    llsec: Removed superseded NETSTACK_ENCRYPT, NETSTACK_DECRYPT, and
    NETSTACK_ENCRYPTION_INIT macros
    Added support for encryption and decryption of the packetbuf if macros
    NETSTACK_ENCRYPT and NETSTACK_DECRYPT are defined. Those are intended
    to be called as functions NETSTACK_ENCRYPT() and NETSTACK_DECRYPT() to
    encrypt and decrypt the packetbuf, respectively. If needed, an
    initialization function by the name NETSTACK_ENCRYPTION_INIT() can
    also be defined.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Common initialization code for the netstack
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    Added the const keyword to IP address arguments that are not (and should not be) changed by the callee
    Added function prototypes to a number of functions with void arguments
    Fix naming issues and includes in uip-ds6-nbr.h
    Added new neighbor-table module, a centralized place where to store all data about neighbors, indexed by link-layer address. Meant for use in other Contiki modules such as rpl, ds6, ds6-route, phase, neighbor-info.
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Drop packet if there are not enough free buffers to perform fragmentation
    ContikiMAC: Create and parse ContikiMAC header in special framer; Expanded framer interface
    to allow for creating and securing frames in advance; Create and secure frames in advance when sending bursts; Do neither recreate nor resecure frames that come from phase
    Changed the name of the rimeaddr module to linkaddr
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added bursts support in CSMA/ContikiMAC, and CFS-swapping in
    queuebuf. Exemplified in examples/udp-stream.
    Bug fix: update packet attributes in queued packets in CSMA instead of doing a full packetbuf copy after transmissions. The lower layers often add their own headers to packetbuf.
    Added a debug mode that keeps track of where individual queuebufs are allocated, which is useful when debugging queuebuf leakage problems.
    Fixed build for platforms which use the default value for QUEUEBUF_NUM.
    Removed old netsim code. Added a function for obtaining the packet attributes of a queuebuf packet.
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Addresses are not const
    Removed the (unused) header packet of the queuebuf. Added a function for accessing address attributes in the queuebuf
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Documentation updates
    Documentation fixes
    Documentation fixes
    Added functions for accessing the data and length of a queued buffer
    Initial import of the experimental Rime code into the SourceForge CVS.
    Added *experimental* module for sending raw (non-routed) packets from Contiki. The name of the module is likely to change.
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    struct queuebuf_data: swap len with data to make sure data is 32-bit aligned
    Fix deallocation in queuebuf.c, case where QUEUEBUF_STATS is set
    Added missing memb_free in queuebuf.c
    Drop packet if there are not enough free buffers to perform fragmentation
    ContikiMAC: Create and parse ContikiMAC header in special framer; Expanded framer interface
    to allow for creating and securing frames in advance; Create and secure frames in advance when sending bursts; Do neither recreate nor resecure frames that come from phase
    Changed the name of the rimeaddr module to linkaddr
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Add missing includes, remove unimplemented function declaration.
    Added bursts support in CSMA/ContikiMAC, and CFS-swapping in
    queuebuf. Exemplified in examples/udp-stream.
    Bug fix: update packet attributes in queued packets in CSMA instead of doing a full packetbuf copy after transmissions. The lower layers often add their own headers to packetbuf.
    Added a debug mode that keeps track of where individual queuebufs are allocated, which is useful when debugging queuebuf leakage problems.
    Fixed build for platforms which use the default value for QUEUEBUF_NUM.
    Removed old netsim code. Added a function for obtaining the packet attributes of a queuebuf packet.
    Made QUEUEBUF_STATS configurable
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Addresses are not const
    Fixed conversion of packetbuf address type to address index and corrected return value
    Removed the (unused) header packet of the queuebuf. Added a function for accessing address attributes in the queuebuf
    Made queuebuf statistics configurable, and off by default
    Increased default number of queue buffers
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Replaced NETSIM macro with general (and now actually working) solution in Makefile.include.
    This is an initial commit of an implementation of the Chameleon
    architecture for the Rime stack for Contiki. The Chameleon
    architecture separates the header processing from the Rime protocol
    logic. Instead of having each protocol create its own part of the
    packet header, protocols use packet attributes. Before sending a
    packet, a special Chameleon header processing module creates a packet
    header from the packet attributes. The same Chameleon module parses
    incoming packets and creates packet attributes from the header.
    
    The details are in our SenSys 2007 paper:
    
    Adam Dunkels, Fredrik Osterlind, Zhitao He. An Adaptive Communication
    Architecture for Wireless Sensor Networks. In Proceedings of the Fifth
    ACM Conference on Networked Embedded Sensor Systems (SenSys 2007),
    Sydney, Australia, November 2007.
    
    http://www.sics.se/~adam/dunkels07adaptive.pdf
    
    This is a rewrite of the code that was developed for the paper.
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Fixed compiler warnings to make code compile with gcc's -pedantic switch
    Bugfixes, updates
    Documentation updates
    Documentation fixes
    Made buffer sizes configurable from contiki-conf.h
    Renamed rimebuf_hdrextend() to rimebuf_hdralloc()
    Added functions for accessing the data and length of a queued buffer
    Compiler warning fix
    Renamed old netbuf -> rimebuf
    Initial import of the experimental Rime code into the SourceForge CVS.
    Added radio sniffer program
    More uip_ipaddr_t fixes.
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Changed the name of the rimeaddr module to linkaddr
    Moved the rimeaddr.[ch] code from the core/net/rime module to the core/net module, as it is used not only by rime code
    Code style fixes
    Use memcpy, memcmp functions for the rime compare and copy functions as they
    are already used all over contiki.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    Rewrote the rimeaddr_copy() loop to use the ->u8 field instead of the ->u16 field (which now finally is removed)
    Main uIPv6 files addition
    fixed alignment problem with rime/chameleon
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    NAT64 / DNS64 code for Contiki that makes connecting an IPv6 Contiki network to IPv4 networks really easy
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    NAT64 / DNS64 code for Contiki that makes connecting an IPv6 Contiki network to IPv4 networks really easy
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    a set of new cooja-mspsim mote types
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    NAT64 / DNS64 code for Contiki that makes connecting an IPv6 Contiki network to IPv4 networks really easy
    NAT64 / DNS64 code for Contiki that makes connecting an IPv6 Contiki network to IPv4 networks really easy
    Moved all generic IP files into the net/ip module
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    * Support longer lease times.
    Use ticks for s.ticks.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    NAT64 / DNS64 code for Contiki that makes connecting an IPv6 Contiki network to IPv4 networks really easy
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    Move files.
    Uncrustify.
    In GNURL78 v13.01 __far keyword is fixed. Now it is possible to use far pointers to flash area.
    Initial commit
    NAT64 / DNS64 code for Contiki that makes connecting an IPv6 Contiki network to IPv4 networks really easy
    Updated include paths for the moved files under net/
    Moved IPv4 files into the net/ipv4 module
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    core/net/uip: Rename `uip_ethaddr` to `uip_lladdr`.
    
    There isn't really a good reason I can think of for these
    to be different between IPv4 and IPv6.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    Added the CCIF (Contiki Core InterFace) declarations used by the applications which are currently part of the Win32 build.
    Import of the contiki-2.x development code from the SICS internal CVS server
    NAT64 / DNS64 code for Contiki that makes connecting an IPv6 Contiki network to IPv4 networks really easy
    Updated include paths for the moved files under net/
    Moved all generic IP files into the net/ip module
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    Converted scope-local variables into function-local variables.
    The 6502-specific LC implementation doesn't allow for scope-local vaiables between PT_BEGIN/PROCESS_BEGIN/PSOCK_BEGIN and PT_BEGIN/PROCESS_END/PSOCK_END.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    * Support longer lease times.
    Use ticks for s.ticks.
    Avoid compiler warnings.
    * Some ntohs stuff.
    
    * Etimer package only allows you to sleep half as many ticks as one
      would expect. Adjust for this.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    added cast in line 254 to make cc65 happy
    Import of the contiki-2.x development code from the SICS internal CVS server
    NAT64 / DNS64 code for Contiki that makes connecting an IPv6 Contiki network to IPv4 networks really easy
    cc2538: uart: Make it possible to use several UARTs simultaneously
    
    This avoids the limitation of having a single UART available at runtime, without
    duplicating code.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    cc2531: Added a new USB demo project (CDC-ACM)
    
    See Pull Request #18
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    NAT64 / DNS64 code for Contiki that makes connecting an IPv6 Contiki network to IPv4 networks really easy
    NAT64 / DNS64 code for Contiki that makes connecting an IPv6 Contiki network to IPv4 networks really easy
    NAT64 / DNS64 code for Contiki that makes connecting an IPv6 Contiki network to IPv4 networks really easy
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    NAT64 / DNS64 code for Contiki that makes connecting an IPv6 Contiki network to IPv4 networks really easy
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    NAT64 / DNS64 code for Contiki that makes connecting an IPv6 Contiki network to IPv4 networks really easy
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    NAT64 / DNS64 code for Contiki that makes connecting an IPv6 Contiki network to IPv4 networks really easy
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    README file for the IP64 module
    NAT64 / DNS64 code for Contiki that makes connecting an IPv6 Contiki network to IPv4 networks really easy
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    Move files.
    Uncrustify.
    In GNURL78 v13.01 __far keyword is fixed. Now it is possible to use far pointers to flash area.
    Initial commit
    NAT64 / DNS64 code for Contiki that makes connecting an IPv6 Contiki network to IPv4 networks really easy
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    NAT64 / DNS64 code for Contiki that makes connecting an IPv6 Contiki network to IPv4 networks really easy
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    Move files.
    Uncrustify.
    In GNURL78 v13.01 __far keyword is fixed. Now it is possible to use far pointers to flash area.
    Initial commit
    NAT64 / DNS64 code for Contiki that makes connecting an IPv6 Contiki network to IPv4 networks really easy
    NAT64 / DNS64 code for Contiki that makes connecting an IPv6 Contiki network to IPv4 networks really easy
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    NAT64 / DNS64 code for Contiki that makes connecting an IPv6 Contiki network to IPv4 networks really easy
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    NAT64 / DNS64 code for Contiki that makes connecting an IPv6 Contiki network to IPv4 networks really easy
    Randomize source ports for all outgoing connections. Fix for CERT VU#210620.
    NAT64 / DNS64 code for Contiki that makes connecting an IPv6 Contiki network to IPv4 networks really easy
    NAT64 / DNS64 code for Contiki that makes connecting an IPv6 Contiki network to IPv4 networks really easy
    Renamed Java packages to match our contiki-os.org domain. Note that this commit does not affect external dependencies
    like /tools/mspsim.
    
    This is a very simple modification that affects a very large number of files in Contiki: Cooja,
    /platform/cooja, Collect-view, Coffe-manager, and Cooja simulation files (.csc).
    
    I've gone through Contiki to update all references I could find. Nevertheless, this commit will likely
    break external dependencies, like saved Cooja simulation files.
    a set of new cooja-mspsim mote types
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Tidy up \file & \author blocks under core/net/ipv6
    
    * Make these blocks appear in the respective module pages
    * Re-word \file blocks to bring them up to speed with what each file actually does nowadays
    avoid updating routes that already are correct
    Remove now unneeded UIP_CONF_IPV6 guards in net/ipv6 and net/rpl code
    Changed sorting order of routing list (optimization).
    Re-create a routing table entry if the next hop is changed.
    
    The next-hop address did not get updated in the routing table
    in case an entry for the destination already existed.
    
    This patch resolves the issue by removing the entry and
    having it re-created from scratch.
    
    The issue causes a routing error triggering reconstruction of
    the DODAG through version increase.
    
    In case of somewhat frequent downward traffic in not (yet) stabilized DODAG
    a vicious circle is formed: unstable topology means churn, downward
    routing under churn causes reconstruction of DODAG. In this situation
    the network does not have chance to stabilize.
    
    We encountered a constant churn caused by this bug
    in a network of 50 nodes and a periodic traffic (a packet every 5
    seconds) generated at the root.
    
    More info and a PCAP demonstrating the issue can be found here:
    https://github.com/contiki-os/contiki/issues/496
    Changed the name of the rimeaddr module to linkaddr
    Updated include paths for the moved files under net/
    Moved IPv6 files into the net/ipv6 module
    Rewrote the IPv6 route management so that all routes are maintained on a list that is ordered by the time at which the route was accessed. If a new route is added to the system, the oldest route is dropped.
    Added the const keyword to IP address arguments that are not (and should not be) changed by the callee
    Fixed a few bugs in the route handling code. While bughunting, rewrote parts of the code to make its intention clearer. Also added a bunch of comments to make the logic of the code more evident.
    Fix naming issues and includes in uip-ds6-nbr.h
    Make uip-ds6-route use neighbor table. Instead of storing a global list of routing entries that contain both the next hop and the destination, we have a separate list of reachable destination for each neighbor in the global table.
    Make DS6 route notifications optional.
    Added #if UIP_CONF_IPV6 around the IPv6 code in the uIP source tree to allow the C files to be compiled even if IPv6 is not configured.
    Clean up of a few missing printf() that were converted into PRINTF()s
    Rewrote the uIP IPv6 route handling code. Instead of being nested deeply inside the uip-ds6.c file, the route management code is now in a separate file, uip-ds6-route.c. This file presents a lib/list.h API for the routes, which makes the route list much easier to use. Additionally, the uip-ds6-route.c file adds a callback API that invokes a callback when routes are added and removed.
    Tidy up \file & \author blocks under core/net/ipv6
    
    * Make these blocks appear in the respective module pages
    * Re-word \file blocks to bring them up to speed with what each file actually does nowadays
    Make RA configuration parameters user configurable
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Register generic ICMPv6 handlers for IPv6 ND
    Updated include paths for the moved files under net/
    Moved IPv6 files into the net/ipv6 module
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Added a flag to optionally disable IPv6 NA/NS at compile time
    Made nd6 maximum unicast solicitation messages configurable
    Allow to completely desactivate DAD (useless in route-over LLN as implemented, see http://tools.ietf.org/html/draft-ietf-6lowpan-nd-15#section-8.2)
    Cleaning old .h :
    - Delete unimplemented function and unused structures
    - Remove misleading configuration options
    - Transfer some comments from 6lowmac to framer-802154
    (doc/uip6-doc.txt should be cleaned as well)
    dos2unix conversion
    removed nd llao option struct since not naturally aligned - replaced struct fields access with array based access
    made UIP_ND6_SEND_RA configurable from platforms and projects
    integration of new uip6 code from Mathilde and Julien - adds routing and improved interface handling
    started integration of Mathildes and Juliens new uip6 code + made some ND timers configurable
    Rewrote the netif time code so that is avoids the use of floating point numbers; some code style fixes
    changed timer to stimer for neighbor, prefix, default router, address list
    Main uIPv6 files addition - more
    Tidy up \file & \author blocks under core/net/ipv6
    
    * Make these blocks appear in the respective module pages
    * Re-word \file blocks to bring them up to speed with what each file actually does nowadays
    Rename as suggested by g-oikonomou
    Make the period for the uip-ds6 periodic task configurable
    Updated include paths for the moved files under net/
    Moved IPv6 files into the net/ipv6 module
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Fix naming issues and includes in uip-ds6-nbr.h
    Moved ETX management from neighbor-info to rpl-of-etx. Avoids conversions between different fixed point representations, and simplifies neighbor management. Makes more clear how default-ETX and noack-ETX actually affect the rank. Removed neighbor-info and neighbor-attr.
    Make DS6 neighbors use neighbor-table, and move all DS6 neighbor management from uip-ds6 to a new uip-ds6-neighbor module.
    Code style fixes
    Add method to get the first neighbour which is about to expire
    core/net/uip-ds6: Make `uip_ds6_maddr_add()` and `uip_ds6_maddr_lookup()` const-correct.
    Rewrote the uIP IPv6 route handling code. Instead of being nested deeply inside the uip-ds6.c file, the route management code is now in a separate file, uip-ds6-route.c. This file presents a lib/list.h API for the routes, which makes the route list much easier to use. Additionally, the uip-ds6-route.c file adds a callback API that invokes a callback when routes are added and removed.
    Ensure MAXDADNS is defined in uip-ds6.h
    Set no RPL as webserver6.minimal-net default and update README
    Update the last lookup time for a neighbor when actually doing a lookup. Also fixed some coding style issues.
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    Add (dangerous) feature : use layer 2 acks instead of NUD in the IPv6 layer.
    (Decrease packet numbers but dangerous if neighbors change their ips (not a problem in standard RPL with EUI-64 based addresses))
    Allow to completely desactivate DAD (useless in route-over LLN as implemented, see http://tools.ietf.org/html/draft-ietf-6lowpan-nd-15#section-8.2)
    Made the code more conforming to the Contiki style.
    removed execute flag of source files (avoids diff problems with egit)
    When IPv6 ND kicks in, the packet that caused the ND can either be dropped or saved in a buffer to be send when the NS reply returns. This commit reimplements the buffer management to avoid having one buffer per neighbor, but instead use a buffer pool from which buffers can be allocated for different neighbors.
    Replace old neighbors according to an LRU policy when a new neighbor needs to be added
    fixed buggy comment
    no callback to rpl if rpl is not used
    Added a function for getting the first global IPv6 address
    Clarified the function naming for neighbor information callbacks - names now indicate where the information is from.
    Added isinfinite to uip_ds6_defrt_t to handle infinite life time
    factored out function for getting link local address in ds6 and made use of it in rpl for checking state of lladdress as DIOs should not be sent when tentative
    always include the RPL route state to allow compilation of rpl code
    moved RPL routing state struct into uip-ds6
    added route_rm_by_nexthop and small code cleanup
    added support for extending route entries
    integration of new uip6 code from Mathilde and Julien - adds routing and improved interface handling
    started integration of Mathildes and Juliens new uip6 code + made some ND timers configurable
    Fix warnings caused by unescaped special doxygen chars
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Updated include paths for the moved files under net/
    Moved IPv6 files into the net/ipv6 module
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Added a way to get the RSSI of the last received packet
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    sicslowpan doesn't need to remember the mac driver
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    reverted to byte-based iid check
    minor cleanup of 16-bit compressable macro and comment
    16-bit addr compression fix
    added support for all UDP port compressions in hc06
    fixed buggy define for Traffic class and Flowlabel compression
    added hooks for adding an external header compressor
    refactoring of hc06 code
    Fix UDP compression to work per hc-06. More commits to come to fix Traffic Class stuff...
    upgraded sicslowpan to hc-06 - no 48 bit multicast compression support yet
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Made the sicslowpan MAC layer reachable from outside modules
    fixed alignment problem on MSP430 when using compression
    fixed documentation typos.
    Removed unused include files (also automatically removed whitespace from line endings)
    Main uIPv6 files addition - more
    Remove now unneeded UIP_CONF_IPV6 guards in net/ipv6 and net/rpl code
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Drop packet if there are not enough free buffers to perform fragmentation
    Fix too short 6LoWPAN reassembly timeout
    sicslowpan: Fixed too aggresive fragmentation
    llsec: Added a layer in between NETSTACK_MAC and NETSTACK_NETWORK for implementing link layer security
    Added method to framer that returns the header length if the framer
    would create a header with the current packet information.
    
    This allows sicslowpan to calculate the max payload size without
    consuming a sequence number or clearing/restoring the packet buffer.
    Changed the variable names that access the packetbuf code so that they are called packetbuf_* instead of rime_*
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Updated include paths for the moved files under net/
    Moved IPv6 files into the net/ipv6 module
    If the 6lowpan layer is currently reassembling a packet, and a non-fragmented packet comes along, this is a sign that one of the fragments were lost (as they normally would arrive back-to-back, in sequence). So we'll grab the non-fragmented packet instead of dropping it.
    Added a way to get the RSSI of the last received packet
    Added the const keyword to IP address arguments that are not (and should not be) changed by the callee
    Allow the 6lowpan code to handle packets larger than 256 bytes
    Moved ETX management from neighbor-info to rpl-of-etx. Avoids conversions between different fixed point representations, and simplifies neighbor management. Makes more clear how default-ETX and noack-ETX actually affect the rank. Removed neighbor-info and neighbor-attr.
    Bugfix: must set the SICSLOWPAM_MAX_MAC_TRANSMISSIONS attribute after clearing the buffer, otherwise it will not be used for outoing packets.
    6lowpan fragmentation bugfix: the 6lowpan code had an unfortunate
    interaction with the behavior of the rdc layer. If the first packet of a
    fragment transmission was lost, the remaining packets would get dropped
    on reception. Moreover, the reception code contained a bug that
    sometimes would cause fragments to be misidentified as fragments. Taken
    together, these problems would result in a pathelogical network
    breakdown if too many fragmented packets would occur simultaneously.
    Removed undef
    Force sicslowpan to use uip-debug rather than an own system
    New mechanism for computing the 6lowpan header length dynamically, depending on how large header the framer creates. Also check the incoming packet for buffer overflow.
    Added #if UIP_CONF_IPV6 around the IPv6 code in the uIP source tree to allow the C files to be compiled even if IPv6 is not configured.
    core/net: Added support for "bridge mode".
    
    "Bridge mode" allows devices to more easily send 802.15.4 packets as if
    they were a different device. It also turns off any packet filtering
    that may be implemented at layer 2. It works by allowing
    `PACKETBUF_ADDR_SENDER` to be set earlier in the stack.
    
    This is useful for implementing 6LoWPAN-ethernet bridges.
    
    Enabled via setting `NETSTACK_CONF_BRIDGE_MODE` to 1. Disabled by
    default.
    Code style and debugging updates
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    6LowPAN: check tx result, if fail then do not send subsequent
    fragments. Serves to save energy and also as collision avoidance.
    Separated processed_ip_len into processed_ip_in_len and
    processed_ip_out_len to avoid corruption, in case we send a packet in
    the middle of receiving a fragmented packet.
    Ignore 6LowPAN fragments which won't fit in UIP_BUFSIZE (in case
    UIP_BUFSIZE < 1280). Otherwise we'll have a buffer overrun.
    sicslowpan doesn't need to remember the mac driver
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    Compress UDP header when UIP_CONF_UDP is disabled but we are routing
    others' UDP packets.
    Avoid infinite loop when printing garbled packets
    Fix sd6 typo
    fixed powertrace attribution for 6lowpan traffic
    added powertrace to IPv6 including an example
    Added a safeguard to fragmentation reassembly: if there are additional bytes in the final fragment, we shave them off in the spirit of being 'liberal in what we accept'
    Added a SICSLOWPAN_CONF_COMPRESSION_THRESHOLD that can be used to set a threshold under which header compression should not be used. Below this threshold, headers are not compressed but sent as full IPv6 packets. This is useful for RDC layers, such as ContikiMAC, which set a lower bound for packet size.
    fixed for compilation with IAR compiler
    fixed bug in 6lowpan compression when compressing
    16-bit addr compression fix
    Set the end-of-stream flag on the TCP FIN packet
    removed void * + changed ux_t to uintx_t
    Add SICSLOWPAN_CONF_ACK_ALL for hardware autoack testing
    Add defines to set stateful address prefixes.
    Fix compiler warning and possible bug
    Bugfix: out-of-order fragments were not handled correctly. minor style fixes
    made number of transmissions configurable
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    fixed bug where context is null but still referenced
    fixed bug that caused problems when uncompressing unspecified address
    fixed bug in ttl decompression
    refactoring and cleanup
    cleanup of the code, removing dead core + adding local vars to save some space.
    changed uip_buf to a union for 32-bit alignment
    Changed neighbor notification to be default on when using RPL
    added const for the uip_buf pointer for more efficient and smaller uip code and fixed same construct for the sicslowpan code
    Added missing #define
    Set stream bit only on non-FIN TCP segments
    moved packet_sent function, it was in a HC06-specific unit
    * Added configurable default number of transmissions for CSMA to use when not specified using packetbuf attributes (CSMA_CONF_MAX_MAC_TRANSMISSIONS).
    * Renamed packetbuf attribute PACKETBUF_ATTR_MAX_MAC_REXMIT to PACKETBUF_ATTR_MAX_MAC_TRANSMISSIONS where value 0 (attribute not set) means that default number of transmissions should be used.
    added support for all UDP port compressions in hc06
    typos
    made it possible to have zero contexts to avoid stateful compression in hc06
    added hooks for adding an external header compressor
    refactoring of hc06 code
    integration of new uip6 code from Mathilde and Julien - adds routing and improved interface handling
    minor include fix + added documentation
    fixed comment
    Make it possible to provide feedback to the neighbor modules
    Set the (correct) packet attribute to let the MAC layer perform retransmissions
    Fix TC/FL errors in hc-06. Need to verify further
    Fix UDP compression to work per hc-06. More commits to come to fix Traffic Class stuff...
    Set the default number of MAC layer retransmissions for IPv6 packets to 2
    upgraded sicslowpan to hc-06 - no 48 bit multicast compression support yet
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Added missing include, made debug statement more explicit
    Bugfix: added missing queuebuf allocation
    No need to clear the headers now that we explicitly save a queuebuf when sending fragments
    Turns out that with cxmac, clearing the header after sending a packet is not enough to make fragmentation work. Instead, we allocate a queuebuf and restore the packet after from the queuebuf after sending it.
    Bugfix: clear the header after sending a packet solves a problem with fragmentation; also prod the watchdog since fragment transmissions can take a long time with some low-power MAC protocol
    Don't set the stream bit on outgoing TCP packets for now - it doesn't seem to play well with IPv6 and X-MAC
    Made the sicslowpan MAC layer reachable from outside modules
    A simple addition with significant performance implications:
    sicslowpan tags TCP packets with the PACKETBUF_ATTR_PACKET_TYPE_STREAM
    flag, which makes the underlying power-saving MAC layer keep the radio
    on for some time after transmitting the packet. This allows reply
    packets to be processed directly, significantly increasing TCP latency
    and throughput.
    Moved the link layer destination check to sicslowmac
    Separate input and output debug PRINTFs
    typo
    fixed alignment problem on MSP430 when using compression
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    temporary fix to get sicslowpan.c working on the Sky platform:
    conventional MAC implementations require a call to the MAC driver's
    read function.
    ping-ipv6 example compiles on native cygwin
    Removed unused include files (also automatically removed whitespace from line endings)
    Main uIPv6 files addition - more
    Fix doxygen warnings in the uip6 group
    Tidy up \file & \author blocks under core/net/ipv6
    
    * Make these blocks appear in the respective module pages
    * Re-word \file blocks to bring them up to speed with what each file actually does nowadays
    Fill IPv6->Next-Hdr field for outgoing RSTs
    Remove now unneeded UIP_CONF_IPV6 guards in net/ipv6 and net/rpl code
    Drop forwarding error packet and send back DAO to originating parent
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Insert properly Hop-by-Hop option at first hop
    Register generic ICMPv6 handlers for IPv6 ND
    Register generic handlers for ICMPv6 Echo Request / Reply
    Replace old switch-based ICMPv6 type/code management
    Implement multicast engine hooks in the uIPv6 core
    
      - init()
      - process incoming multicast datagram
      - Pass ICMPv6 trickle messages to the engine
    Updated include paths for the moved files under net/
    Moved IPv6 files into the net/ipv6 module
    Added an API for getting a callback when a ping reply is received.
    Bugfix: correctly handle the case if uip_sappdata is NULL.
    Bugfix: if a SYN is received in the SYN_RCVD state we should not send a blank SYN, but a SYNACK in response.
    Received UDP packet was counted twice in statistics, first in udp_input and then again in udp_found.
    Fix this to use same logic as in uip.c: valid packet is counted only in udp_found.
    Fix UDP statistics also in ipv6 code.
    Inserts missing IPv6 Hop-By-Hop RPL Option at first hop
    Added a flag to optionally disable IPv6 NA/NS at compile time
    Fixes imposibility of receiving data when a node not using RPL joins a network
    which does.
    
    The RPL header is processed, declared invalid and the packet discarded. This
    is fixed by this commit.
    Added #if UIP_CONF_IPV6 around the IPv6 code in the uIP source tree to allow the C files to be compiled even if IPv6 is not configured.
    Code style and debugging updates
    Add missing Doxygen marker
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Workaround for an odd type inference problem associated with the IAR compiler. Patch by Vilhelm Jutvik.
    Applied patch provided by Franck Rousseau restoring UIP_LLH_LEN.
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    fixed debug output and changed to use uip-debug.h for debug output
    fixed extension header handling
    Added ext. header handling for UDP (RPL multihop still not functional).
    Added native-border-router and slip-radio
    Use rpl headers.
    Removed debug output and fixed coding style.
    DEBUG off.
    some fixes to cut some extension headers before TCP processing
    Small spelling bugfix
    Minor code style fixes
    gcc 4.4.1 - 4.6.0 compiler bug workaround.
    Add support of RPL Option (http://tools.ietf.org/html/draft-ietf-6man-rpl-option-03):
    - Auto-insersion when forwarding messages
    - Delete messages with 2 rank errors
    Not supported yet :
    - Routing depending on InstanceID
    - DAO inconsistency loop recovery
    - Full UDP or TCP support (Bugs in µIPv6)
    - Real Option Type (TBD by IANA)
    set expected reception sequence no to zero - to get initial connection to avoid having ack-number other than zero
    removed some void * casts in uip code
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    changed uip_buf to a union for 32-bit alignment
    Adjusted UIP_CONF_EXTERNAL_BUFFER to apply to actual buffer only.
    added const for the uip_buf pointer for more efficient and smaller uip code and fixed same construct for the sicslowpan code
    allocate uip_buf as uint32_t to avoid risk for unaligned uip_buf on 32 or 16 bit architectures
    added icmp_send function and moved rpl input function signature
    fixed uip to use UDP_BUF instead of TCP_BUF when setting udp ports - minor cleanup
    Make it possible to receive multicast UDP packets
    removed uip_router
    integration of new uip6 code from Mathilde and Julien - adds routing and improved interface handling
    added support for dropping packets if hop limit is reached
    Buffer name definition bugfix
    Bugfix by Raimondas Sasnauskas: TCP SYN duplicate receptions in the SYN_RCVD state was not correctly handled
    Initialize lastport in all cases it is defined.
    Bugfix: lastport must be defines both when UIP_ACTIVE_OPEN or UIP_UDP are defined (thanks Oliver!)
    Bugfix: drop incoming TCP and UDP packets where port numbers are zero
    accept messages to all routers if UIP_CONF_ROUTER is set.
    Bugfix: Active TCP connections in uIP are made by first setting up the
    TCP connection state, then poll uIP to send out the first SYN. Until
    now, however, the SYN was not sent as part of the poll, but at the
    first retransmission. This is now fixed.
    decrement TTL right after forwarding check.
    added packet forwarding and replaceable routing modules.
    more printing in debug mode
    ping-ipv6 example compiles on native cygwin
    Removed unused include files (also automatically removed whitespace from line endings)
    Main uIPv6 files addition - more
    Nudge comments left so they won't appear as a code block
    Tidy up \file & \author blocks under core/net/ipv6
    
    * Make these blocks appear in the respective module pages
    * Re-word \file blocks to bring them up to speed with what each file actually does nowadays
    moved ETX storage variable from RPL to ds6-nbr
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Closing doxygen groups
    Updated include paths for the moved files under net/
    Moved IPv6 files into the net/ipv6 module
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Added the const keyword to IP address arguments that are not (and should not be) changed by the callee
    Added a function uip_ds6_nbr_num() for getting the number of neighbors
    Fix naming issues and includes in uip-ds6-nbr.h
    Moved ETX management from neighbor-info to rpl-of-etx. Avoids conversions between different fixed point representations, and simplifies neighbor management. Makes more clear how default-ETX and noack-ETX actually affect the rank. Removed neighbor-info and neighbor-attr.
    Make DS6 neighbors use neighbor-table, and move all DS6 neighbor management from uip-ds6 to a new uip-ds6-neighbor module.
    Tidy up \file & \author blocks under core/net/ipv6
    
    * Make these blocks appear in the respective module pages
    * Re-word \file blocks to bring them up to speed with what each file actually does nowadays
    Remove now unneeded UIP_CONF_IPV6 guards in net/ipv6 and net/rpl code
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Fix SDCC Compile Error
    Register generic ICMPv6 handlers for IPv6 ND
    Updated include paths for the moved files under net/
    Moved IPv6 files into the net/ipv6 module
    Added the const keyword to IP address arguments that are not (and should not be) changed by the callee
    Fixed fail to build from source due to a bad "&nbr->lladdr" reference
    Make DS6 neighbors use neighbor-table, and move all DS6 neighbor management from uip-ds6 to a new uip-ds6-neighbor module.
    Added #if UIP_CONF_IPV6 around the IPv6 code in the uIP source tree to allow the C files to be compiled even if IPv6 is not configured.
    Set the R flag in NAs if UIP_CONF_ROUTER
    Fix compile errors with SDCC
    
    Intermingled declarations and code are not yet implemented in sdcc.
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    Fixes small bug in uip-nd6.c: when a packet is sent before DAD is
    completed, DAD-like message is sent that can create a DAD fail in
    another node (if it matches the destination of our packet).
    Clean nd6 debug output (use uip-debug instead of local code)
    Allow to completely desactivate DAD (useless in route-over LLN as implemented, see http://tools.ietf.org/html/draft-ietf-6lowpan-nd-15#section-8.2)
    When IPv6 ND kicks in, the packet that caused the ND can either be dropped or saved in a buffer to be send when the NS reply returns. This commit reimplements the buffer management to avoid having one buffer per neighbor, but instead use a buffer pool from which buffers can be allocated for different neighbors.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    fixed compiler warnings
    removed nd llao option struct since not naturally aligned - replaced struct fields access with array based access
    moved prefix to avoid compiler warning
    added ipaddr variable if not UIP_ROUTER is defined
    integration of new uip6 code from Mathilde and Julien - adds routing and improved interface handling
    Removed CLOCK_SECOND from stimers in uIPv6, stimers are already in seconds
    changed timer to stimer for neighbor, prefix, default router, address list
    Temporarily out-commented the problematic code and added a comment that describes the problem
    uncommented the remove of the router (necessary for compliance)
    Removed one line to prevent the default router from being removed
    prematurely.  This timer should not time out, but it does.
    Main uIPv6 files addition - more
    Tidy up \file & \author blocks under core/net/ipv6
    
    * Make these blocks appear in the respective module pages
    * Re-word \file blocks to bring them up to speed with what each file actually does nowadays
    Moved IPv6 files into the net/ipv6 module
    Rewrote the IPv6 route management so that all routes are maintained on a list that is ordered by the time at which the route was accessed. If a new route is added to the system, the oldest route is dropped.
    Small fixes to networking files
    
    1. Added #include header
    2. Fixed #defines that weren't updated
    3. Small change to comment that now points to correct RFC section
    Fixed a few bugs in the route handling code. While bughunting, rewrote parts of the code to make its intention clearer. Also added a bunch of comments to make the logic of the code more evident.
    Make uip-ds6-route use neighbor table. Instead of storing a global list of routing entries that contain both the next hop and the destination, we have a separate list of reachable destination for each neighbor in the global table.
    Make DS6 route notifications optional.
    A default configuraion file for Contiki
    
    The contiki-default-conf.h file is intended as a safe fallback for
    a number of configuration options in Contiki, to avoid putting too
    much in the individual contiki-conf.h files.
    Rewrote the uIP IPv6 route handling code. Instead of being nested deeply inside the uip-ds6.c file, the route management code is now in a separate file, uip-ds6-route.c. This file presents a lib/list.h API for the routes, which makes the route list much easier to use. Additionally, the uip-ds6-route.c file adds a callback API that invokes a callback when routes are added and removed.
    Tidy up \file & \author blocks under core/net/ipv6
    
    * Make these blocks appear in the respective module pages
    * Re-word \file blocks to bring them up to speed with what each file actually does nowadays
    Doxygen fixes
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Register generic handlers for ICMPv6 Echo Request / Reply
    Declare and Implement generic ICMPv6 handler management
    Define a new ICMPv6 message type for Trickle Multicast
    
    Pending IANA allocation, we currently use private experimentation
    Updated include paths for the moved files under net/
    Moved IPv6 files into the net/ipv6 module
    Added an API for getting a callback when a ping reply is received.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    added icmp_send function and moved rpl input function signature
    integration of new uip6 code from Mathilde and Julien - adds routing and improved interface handling
    added typedef of icmp6_error
    fixed documentation typos.
    Main uIPv6 files addition - more
    Tidy up \file & \author blocks under core/net/ipv6
    
    * Make these blocks appear in the respective module pages
    * Re-word \file blocks to bring them up to speed with what each file actually does nowadays
    Remove now unneeded UIP_CONF_IPV6 guards in net/ipv6 and net/rpl code
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Register generic handlers for ICMPv6 Echo Request / Reply
    Declare and Implement generic ICMPv6 handler management
    Avoid compiler warnings.
    Updated include paths for the moved files under net/
    Moved IPv6 files into the net/ipv6 module
    Added an API for getting a callback when a ping reply is received.
    A default configuraion file for Contiki
    
    The contiki-default-conf.h file is intended as a safe fallback for
    a number of configuration options in Contiki, to avoid putting too
    much in the individual contiki-conf.h files.
    Added #if UIP_CONF_IPV6 around the IPv6 code in the uIP source tree to allow the C files to be compiled even if IPv6 is not configured.
    Code style and debugging updates
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    Added native-border-router and slip-radio
    Fix coding style.
    Add support of RPL Option (http://tools.ietf.org/html/draft-ietf-6man-rpl-option-03):
    - Auto-insersion when forwarding messages
    - Delete messages with 2 rank errors
    Not supported yet :
    - Routing depending on InstanceID
    - DAO inconsistency loop recovery
    - Full UDP or TCP support (Bugs in µIPv6)
    - Real Option Type (TBD by IANA)
    removed some void * casts in uip code
    Bugfix: allow ICMPv6 to send packets larger than those whose length fits in one byte. Bugfix by mathieupouillot
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    added icmp_send function and moved rpl input function signature
    integration of new uip6 code from Mathilde and Julien - adds routing and improved interface handling
    fixed so that uip6 sends icmp6 errors from correct source when acting as router - improves support for tracert, etc.
    Main uIPv6 files addition - more
    Tidy up \file & \author blocks under core/net/ipv6
    
    * Make these blocks appear in the respective module pages
    * Re-word \file blocks to bring them up to speed with what each file actually does nowadays
    Fix conditional compilation directive in uip-ds6.c
    Remove now unneeded UIP_CONF_IPV6 guards in net/ipv6 and net/rpl code
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Closing doxygen groups
    We now know how to select our source address for outgoing routable multicast datagrams
    Updated include paths for the moved files under net/
    Moved IPv6 files into the net/ipv6 module
    Fix naming issues and includes in uip-ds6-nbr.h
    Make DS6 neighbors use neighbor-table, and move all DS6 neighbor management from uip-ds6 to a new uip-ds6-neighbor module.
    Simplify periodic ds6 neighbor processing in case NA/NS is disabled. Strips out uip_nd6_ns_output from the binary.
    Code style fixes
    Add method to get the first neighbour which is about to expire
    Added #if UIP_CONF_IPV6 around the IPv6 code in the uIP source tree to allow the C files to be compiled even if IPv6 is not configured.
    core/net/uip-ds6: Make `uip_ds6_maddr_add()` and `uip_ds6_maddr_lookup()` const-correct.
    Cleanup: removed the old routing table management functions that had previously been removed from compilation with #if 0
    Call the route callback API functions.
    Rewrote the uIP IPv6 route handling code. Instead of being nested deeply inside the uip-ds6.c file, the route management code is now in a separate file, uip-ds6-route.c. This file presents a lib/list.h API for the routes, which makes the route list much easier to use. Additionally, the uip-ds6-route.c file adds a callback API that invokes a callback when routes are added and removed.
    Added sanity check to avoid deleting DS6 neighbor table entry for a default route
    simplified and bugfixed Cooja's IP address interface, added two
    variables in uip-ds6.c to allow Cooja to extract addresses from memory
    Update the last lookup time for a neighbor when actually doing a lookup. Also fixed some coding style issues.
    Simplified reachability detections by sending probes only in PROBE
    state.
    Do not remove infinite default routers when PROBE fails.
    Bug fix: do not overwrite NS or RA messages otherwise generated in the
    same uip_ds6_periodic() call.
    Fix coding style.
    uip : When creating a route with a "state" field, clear it (It's possible that the process responsible for this creation doesn't handle the state field)
    Add (dangerous) feature : use layer 2 acks instead of NUD in the IPv6 layer.
    (Decrease packet numbers but dangerous if neighbors change their ips (not a problem in standard RPL with EUI-64 based addresses))
    Allow to completely desactivate DAD (useless in route-over LLN as implemented, see http://tools.ietf.org/html/draft-ietf-6lowpan-nd-15#section-8.2)
    fixed RPL to handle inifinite rank better
    fixed for compilation with IAR compiler
    Made the code more conforming to the Contiki style.
    removed execute flag of source files (avoids diff problems with egit)
    added annotation for showing routes and default route during simulation
    changed neighbor state callbacks to occur only at add and remove
    When IPv6 ND kicks in, the packet that caused the ND can either be dropped or saved in a buffer to be send when the NS reply returns. This commit reimplements the buffer management to avoid having one buffer per neighbor, but instead use a buffer pool from which buffers can be allocated for different neighbors.
    Bugfix: removed old leftover code statement
    Replace old neighbors according to an LRU policy when a new neighbor needs to be added
    only compare with global addresses when selecting source for a specific destination
    Added a function for getting the first global IPv6 address
    Minor optimization: replaced init loops with memset to reduce code size
    Added isinfinite to uip_ds6_defrt_t to handle infinite life time
    fixed bug that caused select_src to set a non legal address - now sets unspecified if no address found
    factored out function for getting link local address in ds6 and made use of it in rpl for checking state of lladdress as DIOs should not be sent when tentative
    Neighbor state notification also when adding new neighbors
    Added option for neighbor state changed notifications
    added route_rm_by_nexthop and small code cleanup
    made UIP_ND6_SEND_RA configurable from platforms and projects
    Debug off by default
    integration of new uip6 code from Mathilde and Julien - adds routing and improved interface handling
    started integration of Mathildes and Juliens new uip6 code + made some ND timers configurable
    Tidy up \file & \author blocks under core/net/ipv6
    
    * Make these blocks appear in the respective module pages
    * Re-word \file blocks to bring them up to speed with what each file actually does nowadays
    uip-ds6-nbr: consider reachable node if LL-NUD
    
    The reachable state might also be considered to keep the reachable
    state since we are already not standard complaint. This reduces the
    nbr discovery messages if nodes talk to each other periodically.
    Force NUD on default routers
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Closing doxygen groups
    Changed the name of the rimeaddr module to linkaddr
    Moved the rimeaddr.[ch] code from the core/net/rime module to the core/net module, as it is used not only by rime code
    Updated include paths for the moved files under net/
    Moved IPv6 files into the net/ipv6 module
    Added the const keyword to IP address arguments that are not (and should not be) changed by the callee
    Small fixes to networking files
    
    1. Added #include header
    2. Fixed #defines that weren't updated
    3. Small change to comment that now points to correct RFC section
    Added a function uip_ds6_nbr_num() for getting the number of neighbors
    Defensive programming: check for the argument being NULL.
    Added function prototypes to a number of functions with void arguments
    Fix naming issues and includes in uip-ds6-nbr.h
    Moved ETX management from neighbor-info to rpl-of-etx. Avoids conversions between different fixed point representations, and simplifies neighbor management. Makes more clear how default-ETX and noack-ETX actually affect the rank. Removed neighbor-info and neighbor-attr.
    Make DS6 neighbors use neighbor-table, and move all DS6 neighbor management from uip-ds6 to a new uip-ds6-neighbor module.
    Tidy-up multicast documentation
    
    * Create a doxygen group and add files to it, so that documents appear as modules rather than simply under files
    * Document plenty of functions, macros, constants, data types which were previously undocumented
    * Re-structure some doxygen comments to improve structure and readability
    Factor out multicast stats
    Multicast common header files
    Tidy-up multicast documentation
    
    * Create a doxygen group and add files to it, so that documents appear as modules rather than simply under files
    * Document plenty of functions, macros, constants, data types which were previously undocumented
    * Re-structure some doxygen comments to improve structure and readability
    Multicast routing table manipulation
    
    We store multicast routes in a separate table since we don't need
    as much information as we need for normal routes
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Tidy-up multicast documentation
    
    * Create a doxygen group and add files to it, so that documents appear as modules rather than simply under files
    * Document plenty of functions, macros, constants, data types which were previously undocumented
    * Re-structure some doxygen comments to improve structure and readability
    Factor out multicast stats
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Code style fixes: cc2530dk
    cc2530dk: Added a 'Serial over USB' platform process
    
    This is based on a usb-test example by Philippe Retornaz. It has
    been moved to platform and modified accordingly. With this in place:
    
    - putchar() can work over USB. So we can use things like
      printf, slip output
    - USB input can be redirected to slip or serial input
    
    The example itself is no longer needed in the source tree
    
    See Pull Request #18
    Removed the explicit year 2012 to make it more generic
    Added a license file with a short explanation of the 3-clause BSD license that Contiki is released under
    Tidy-up multicast documentation
    
    * Create a doxygen group and add files to it, so that documents appear as modules rather than simply under files
    * Document plenty of functions, macros, constants, data types which were previously undocumented
    * Re-structure some doxygen comments to improve structure and readability
    Register generic ICMPv6 handlers for ROLL TM
    Factor out multicast stats
    Implementation of the Trickle multicast engine
    Tidy-up multicast documentation
    
    * Create a doxygen group and add files to it, so that documents appear as modules rather than simply under files
    * Document plenty of functions, macros, constants, data types which were previously undocumented
    * Re-structure some doxygen comments to improve structure and readability
    Factor out multicast stats
    New Platform: TI CC2538 Development Kit
    
    This commit adds cpu, platform and example files,
    providing support for running Contiki on TI's cc2538 DK
    Tidy-up multicast documentation
    
    * Create a doxygen group and add files to it, so that documents appear as modules rather than simply under files
    * Document plenty of functions, macros, constants, data types which were previously undocumented
    * Re-structure some doxygen comments to improve structure and readability
    Remove now unneeded UIP_CONF_IPV6 guards in net/ipv6 and net/rpl code
    Multicast routing table manipulation
    
    We store multicast routes in a separate table since we don't need
    as much information as we need for normal routes
    Tidy-up multicast documentation
    
    * Create a doxygen group and add files to it, so that documents appear as modules rather than simply under files
    * Document plenty of functions, macros, constants, data types which were previously undocumented
    * Re-structure some doxygen comments to improve structure and readability
    Factor out multicast stats
    Multicast common header files
    Reincarnate the sensinode/cc2430 port
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    added init function in MAC driver for easier configuration
    A quick, initial implementation of the LPP power-saving MAC protocol (Musaloiu-E et al, IPSN 2008)
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Tidy-up multicast documentation
    
    * Create a doxygen group and add files to it, so that documents appear as modules rather than simply under files
    * Document plenty of functions, macros, constants, data types which were previously undocumented
    * Re-structure some doxygen comments to improve structure and readability
    Implementation of the SMRF multicast engine
    Change the way we switch between cc2530 models
    
    The switch is now performed through a configuration define,
    which has also been renamed to better match Contiki's naming
    conventions
    Code style fixes: cc2530dk
    Platform cc2530dk now uses models.h to configure differences between the SmartRF and the 2531 USB stick
    cc2531 LED support
    New platform: TI cc2530 Development Kit
    
    This commits adds support for TI's SmartRF05 Eval. Board with cc2530 EMs
    Some initial support for cc2531 USB dongles
    Fixed compiler warning (with IAR compiler)
    Added Sentilla USB platform. This platform is similar to the Sky platform but without the sensors and with 2 leds.
    Added Sentilla Jcreate platform. This platform is similar to the Sky platform but with other sensors and 8 leds.
    Moved ninimal-ppp into backyard as it depends on the uIP ppp support.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Factor out multicast stats
    Multicast README
    Tidy-up multicast documentation
    
    * Create a doxygen group and add files to it, so that documents appear as modules rather than simply under files
    * Document plenty of functions, macros, constants, data types which were previously undocumented
    * Re-structure some doxygen comments to improve structure and readability
    Remove now unneeded UIP_CONF_IPV6 guards in net/ipv6 and net/rpl code
    Register generic ICMPv6 handlers for ROLL TM
    Factor out multicast stats
    Check Tactive irrespective of suppression
    Don't advertise datagrams older than Tactive
    Improve sliding window inclusion in ICMPv6 messages
    
    Don't include a sliding window in the ICMPv6 datagram
    unless the window has at least one active datagram
    associated with it
    Point to the correct trickle param
    Implementation of the Trickle multicast engine
    Tidy-up multicast documentation
    
    * Create a doxygen group and add files to it, so that documents appear as modules rather than simply under files
    * Document plenty of functions, macros, constants, data types which were previously undocumented
    * Re-structure some doxygen comments to improve structure and readability
    Remove now unneeded UIP_CONF_IPV6 guards in net/ipv6 and net/rpl code
    Factor out multicast stats
    Implementation of the SMRF multicast engine
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    This is an initial commit of an implementation of the Chameleon
    architecture for the Rime stack for Contiki. The Chameleon
    architecture separates the header processing from the Rime protocol
    logic. Instead of having each protocol create its own part of the
    packet header, protocols use packet attributes. Before sending a
    packet, a special Chameleon header processing module creates a packet
    header from the packet attributes. The same Chameleon module parses
    incoming packets and creates packet attributes from the header.
    
    The details are in our SenSys 2007 paper:
    
    Adam Dunkels, Fredrik Osterlind, Zhitao He. An Adaptive Communication
    Architecture for Wireless Sensor Networks. In Proceedings of the Fifth
    ACM Conference on Networked Embedded Sensor Systems (SenSys 2007),
    Sydney, Australia, November 2007.
    
    http://www.sics.se/~adam/dunkels07adaptive.pdf
    
    This is a rewrite of the code that was developed for the paper.
    Turned rtimer_arch_now() from a (one line) function into a macro.
    Added rtimer_arch_now prototype
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    MSP430 definitions
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    fixed excessive retransmissions of junk packets after runicast timeout
    fixed stuck packet ID for next packet after runicast timeout
    Debug printout fix
    avoid freeing queuebuf multiple times, and free buffer after cancelling connection
    Added the MAC layer callback functionality so that the Rime network layer gets information from the MAC about the status of sent packets: were they successfully transmitted, or was there a collisions? How many retries were there?
    Made rimeaddr_t pointers const where they should be.
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Changed name of suc module to stunicast
    Changed the 'ibc' and 'uc' Rime modules into the more descriptive names 'broadcast' and 'unicast'
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Added API to retrieve address of current receiver
    Stubborn timer now configurable on a per-transmission basis.
    Documentation updates
    Debug output
    Free queued packet when closing
    Renamed suc_send_uc() to suc_send(), fixed debug output
    Added *_close() function to all Rime modules
    API change for Rime: *_setup() renamed to *_open()
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Renamed ulayer -> callbacks
    Initial import of the experimental Rime code into the SourceForge CVS.
    Make netsim more like the esb target
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Avoid using memcpy on unaligned uint16_t variables, because certain compilers will optimize this code to a direct copy instruction that will result in unaligned memory access. Thanks to Angelo Compagnucci for reporting this problem.
    Remove old neighbor.h inclusion
    removed debugging output
    Remove compiler warnings
    Improved backoff management: timer is now doubled on every transmission, until the using module calls the neighbor_discovery_start() function again. Don't cancel the transmission even if a lower value arrives (this fixes a problem with multi-hop ETX propagaion).
    Made rimeaddr_t pointers const where they should be.
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Reverted the recent change from random_rand() to rand(). It turned out that
    since libc rand() returns a signed int, there were frequently problems with
    timer values wrapping. By reverting to random_rand(), we can provide a
    random generator that returns an unsigned and the timer problems are solved.
    Changed from random_rand() to rand() for better pseudo randomness
    Replaced NETSIM macro with general (and now actually working) solution in Makefile.include.
    Fixed a bunch of bugs in the collection neighbor announcement/discovery code: neighbor announcments were not repeated unless there was a change in the ETX val. Neighbor announcements happened to often when there were changes in the ETX.
    Rewrote the neighbor discovery code so that messages are suppressed if a lower rtmetric is received. This reduces the overall number of broadcast packets.
    Renamed Rime nf module to netflood
    CC_CONST_FUNCTION replaces some const keywords in order to workaround a sdcc bug, which cannot handle function pointers as const.
    Changed the 'ibc' and 'uc' Rime modules into the more descriptive names 'broadcast' and 'unicast'
    This is an initial commit of an implementation of the Chameleon
    architecture for the Rime stack for Contiki. The Chameleon
    architecture separates the header processing from the Rime protocol
    logic. Instead of having each protocol create its own part of the
    packet header, protocols use packet attributes. Before sending a
    packet, a special Chameleon header processing module creates a packet
    header from the packet attributes. The same Chameleon module parses
    incoming packets and creates packet attributes from the header.
    
    The details are in our SenSys 2007 paper:
    
    Adam Dunkels, Fredrik Osterlind, Zhitao He. An Adaptive Communication
    Architecture for Wireless Sensor Networks. In Proceedings of the Fifth
    ACM Conference on Networked Embedded Sensor Systems (SenSys 2007),
    Sydney, Australia, November 2007.
    
    http://www.sics.se/~adam/dunkels07adaptive.pdf
    
    This is a rewrite of the code that was developed for the paper.
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Rewrote the code to use polite broadcasts istead of regular broadcasts. This reduces the amount of broadcast traffic, particularly for dense networks.
    Setting a lower value now causes a discovery packet go out quicker
    Changed name on the neighbor discovery module from (cryptic) 'nbh' to 'neighbor-discovery'
    Added debug output
    fixed compiler warning
    fixed conflicting types: nbh.c vs nbh.h
    Added neighborhood discovery module
    Added API to retrieve address of current receiver
    Stubborn timer now configurable on a per-transmission basis.
    Documentation updates
    Debug output
    Free queued packet when closing
    Renamed suc_send_uc() to suc_send(), fixed debug output
    Added *_close() function to all Rime modules
    API change for Rime: *_setup() renamed to *_open()
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Renamed ulayer -> callbacks
    Initial import of the experimental Rime code into the SourceForge CVS.
    Make netsim more like the esb target
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Provide a macro to read rimestats when enabled
    Fix #183 (short term fix)
    
    This is a temporary fix for #183, so that things can
    build cleanly until the issue is fixed properly.
    
    If RIMESTATS_CONF_ENABLED is 0, rimestats.foo will always
    read as 0, since RIMESTATS_ADD(foo) doesn't do anything
    Include the rimestats variable only if rimestats are enabled by the configuration
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Rime statistics gathering
    Rime driver running over UDP
    Initial import of the experimental Rime code into the SourceForge CVS.
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Changed filename of the CC2420 driver from simple-cc2420 to cc2420.
    Added a function for converting a timesynchronized time to a local (rtimer) time
    Rewrote the timesynch code to use the Rime sniffer interface instead of the kludge of running timesynch as a MAC layer
    Moving timesynch.[ch] from sys/ to core/net/rime as they have more to do with Rime than with the kernel
    A simple implicit network time synchronization mechanism
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Made rimeaddr_t pointers const where they should be.
    use u8 when writing rime addresses.
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Changed name of Rime module ruc to unicast
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Added hopcount to callbacks
    Don't call the forward function if it is not defined
    Removed unused return value from ruc recv callback
    Updated ruc callback types to fix compiler warnings
    Hop-by-hop reliable multi-hop communication primitive (untested)
    Documentation updates
    Renamed rimebuf_hdrextend() to rimebuf_hdralloc()
    Best effort multi-hop routing
    Unique identified best effort local area broadcast
    Split interval: one half listen only, second half send packet
    New Rime module: unique anonymous best effort broadcast
    Added *_close() function to all Rime modules
    API change for Rime: *_setup() renamed to *_open()
    Renamed ulayer -> callbacks
    Initial import of the experimental Rime code into the SourceForge CVS.
    Make netsim more like the esb target
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix "multiple use of section label 'channels'" warning in various rime headers
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    [core/net/rime] Avoid equal group titles in same group
    Changed the name of the rimeaddr module to linkaddr
    Moved the rimeaddr.[ch] code from the core/net/rime module to the core/net module, as it is used not only by rime code
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Made rimeaddr_t pointers const where they should be.
    Documentation updates
    Moved packet attributes specifications from rimebuf.h to the appropriate protocol header files
    Changed name of Rime module ruc to unicast
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Added hopcount to callbacks
    Fixed include of ruc instead of abc
    Hop-by-hop reliable multi-hop communication primitive (untested)
    Documentation updates
    Best effort multi-hop routing
    Added *_close() function to all Rime modules
    API change for Rime: *_setup() renamed to *_open()
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Renamed ulayer -> callbacks
    Initial import of the experimental Rime code into the SourceForge CVS.
    Added *experimental* module for sending raw (non-routed) packets from Contiki. The name of the module is likely to change.
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Changed the name of the rimeaddr module to linkaddr
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Made rimeaddr_t pointers const where they should be.
    Added a timer that randomizes the retransmission of an incoming new trickle version to avoid broadcast collisions
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Reverted the recent change from random_rand() to rand(). It turned out that
    since libc rand() returns a signed int, there were frequently problems with
    timer values wrapping. By reverting to random_rand(), we can provide a
    random generator that returns an unsigned and the timer problems are solved.
    Changed from random_rand() to rand() function for (pseudo) random numbers because random_rand() does not work that well
    Replaced NETSIM macro with general (and now actually working) solution in Makefile.include.
    Improved debugging output
    Fixed function prototype compiler warning
    Rewrote the trickle code to run directly over the broadcast primitive: the previous implementation did not work as expected, because packets were not supressed correctly by the previous underlying netflood primitive
    Renamed Rime nf module to netflood
    This is an initial commit of an implementation of the Chameleon
    architecture for the Rime stack for Contiki. The Chameleon
    architecture separates the header processing from the Rime protocol
    logic. Instead of having each protocol create its own part of the
    packet header, protocols use packet attributes. Before sending a
    packet, a special Chameleon header processing module creates a packet
    header from the packet attributes. The same Chameleon module parses
    incoming packets and creates packet attributes from the header.
    
    The details are in our SenSys 2007 paper:
    
    Adam Dunkels, Fredrik Osterlind, Zhitao He. An Adaptive Communication
    Architecture for Wireless Sensor Networks. In Proceedings of the Fifth
    ACM Conference on Networked Embedded Sensor Systems (SenSys 2007),
    Sydney, Australia, November 2007.
    
    http://www.sics.se/~adam/dunkels07adaptive.pdf
    
    This is a rewrite of the code that was developed for the paper.
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Bugfix: queue buffers were not freed when a new packet was sent, leading to memory leakage. Added debug output.
    Bugfixes, updates
    Documentation updates
    Renamed rimebuf_hdrextend() to rimebuf_hdralloc()
    Added configurable interval
    Trickle implementation for Rime
    Fix "multiple use of section label 'channels'" warning in various rime headers
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Changed the name of the rimeaddr module to linkaddr
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Moved ctimer.[ch] from their old and illogical location in core/net/rime to a more appropriate place in core/sys
    Added parameter to ipolite that specifies how many dups that are acceptable, before suppressing one's own packet
    Made rimeaddr_t pointers const where they should be.
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Added Rime documentation from the Rime/Chameleon paper (SenSys 2007)
    Added Doxygen documentation
    Moved packet attributes specifications from rimebuf.h to the appropriate protocol header files
    Changed the 'ibc' and 'uc' Rime modules into the more descriptive names 'broadcast' and 'unicast'
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Cleaned up #includes to avoid cyclic dependencies - the Rime includes no longer depend on rime.h
    Identified polite broadcast primitive
    Documentation updates
    Minor documentation change
    Documentation fixes
    Unique identified best effort local area broadcast
    New Rime module: unique anonymous best effort broadcast
    Trickle implementation for Rime
    Added *_close() function to all Rime modules
    API change for Rime: *_setup() renamed to *_open()
    New Rime module: tree, a converge cast / tree data collection protocol
    New Rime module: mesh, a mesh routing protocol
    Initial version of a simple mesh routing protocol written with Rime
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Moved the rimeaddr.[ch] code from the core/net/rime module to the core/net module, as it is used not only by rime code
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Removed obsolete mac pointer
    Rime sniffers must be called for all transmissions, even if they failed, to get energy attribution right. This means that rime output sniffers now also must take the MAC transmission status as an argument.
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Moved ctimer.[ch] from their old and illogical location in core/net/rime to a more appropriate place in core/sys
    Remove old neighbor.h inclusion
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    Reworked the Rime/Chameleon interface so that packets now always hit Rime before Chameleon. Chameleon is now only called by Rime. This makes packet sniffing easier, and allows for sniffing packets after their header has been processed by Chameleon, thereby making per-packet power profiling much easier to implement
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    rime_output() now returns RIME_OK or RIME_ERR depending on the MAC return value.
    
    this patch may affect Rime sniffers running on top of MAC protocols that do not yet return generic MAC return values
    fixed documentation typos.
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Added announcement includes
    Renamed Rime module mh to multihop
    Renamed Rime nf module to netflood
    Changed name of Rime module ruc to unicast
    Reverted mistakenly added #include for non-existant file
    Removed unused sibc module
    Added generic return valued
    Rewrote the sniffer code to use a list, which makes it possible to add any number of sniffers. Sniffers now can be both for incoming and outoing packets.
    Added a simple sniffer callback, which currently is a hack - a better solution would be a list of sniffers for both outgoing and incoming packets, but this will do for now. Added trickle, neighbor & route includes.
    Cleaned up #includes to avoid cyclic dependencies - the Rime includes no longer depend on rime.h
    Expose the Rime MAC driver so that applications can use it - a bit of a hack, but it works for now
    Added mh.h and rmh.h to the default includes
    Modified to use the new MAC layer API
    Added Rime statistics
    Added output functions
    Documentation fixes
    Documentation update, removed unneeded includes
    Added missing include.
    Removed mesh and tree, added queuebuf
    Removed inclusion of non-existant file rime-types.h
    Renamed input function to rime_input() and the output function to rime_driver_send()
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Renamed ulayer -> callbacks
    Initial import of the experimental Rime code into the SourceForge CVS.
    Added radio sniffer program
    More uip_ipaddr_t fixes.
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Changed the name of the rimeaddr module to linkaddr
    Moved the rimeaddr.[ch] code from the core/net/rime module to the core/net module, as it is used not only by rime code
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added a lifetime for link estimates: if they are too old, they are
    reset so that a new probing period can produce more up-to-date
    estimates. Added a congestion mechanism whereby a neighbor can be
    marked as being congested for a period of time, during which the ETX
    for the neighbor will be artificially inflated.
    Cleaned up the collect neighbor management code
    Added a function for obtaining the link estimate and rtmetric for a neighbor
    Significant improvements to the Collect protocol:
    
    * Loop detection and untangling. Now uses in-band loop detection that
      works.
    
    * Link quality estimation. Now starts with a conservative /
      pessimistic estimate for new links.
    
    * Retransmissions. MAC layer and network layer retransmissions are now
      decoupled.
    
    * Loss handling. Deals better with losses now.
    
    * Concurrent applications. Each connection now maintains its own
      neighbor table with separated cost to sink estimates for each
      connection.
    Rewrite of important parts of the Collect logic: link estimation
    calculation and parent selection.  This fixes a severe bug that caused
    loops when packets were erroneously retransmitted due to ACK loss.
    Renamed the neighbor module to collect-neighbor, as it is only used by the collect module and is not a generic neighbor module
    Made rimeaddr_t pointers const where they should be.
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Rewrote the neighbor code to use memb and a list instead of a static array
    Changed to store neighbors' rtmetrics as 16 bit valued
    Added function for accessing a specific neighbor
    Re-added hop count to header, fixes related to ETX computation: adv packets do not add a good etx, timedout packets do not restore the neighbor age, removed unused code
    Updated tree to use expected transmissions (etx) as routing metric
    Documentation updates
    Timeouts configurable at run-time
    Added automatic timeouts
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Initial import of the experimental Rime code into the SourceForge CVS.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Rime statistics gathering
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added parameter to ipolite that specifies how many dups that are acceptable, before suppressing one's own packet
    Made rimeaddr_t pointers const where they should be.
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Fixed compiler warnings to make code compile with gcc's -pedantic switch
    Bugfixes, updates
    Bugfix: rudolph1 sometimes failed because the first packet was received from a neighbor
    Now keeps track of highest chunk number heard and sends NACKs until it sees it
    Made send intervals configurable when sending a new file
    Documentation updates
    Increased default packet size to 64, removed out-commented code
    Added stdio.h for printf.
    Keep system includes in front of Contiki includes.
    Moved rudolph{0,1} from apps/ directory into core/net/rime
    Renamed rimebuf_hdrextend() to rimebuf_hdralloc()
    Removed the use of CFS. Instead, provide callbacks for the using application to fill in data.
    Reliable multi-hop bulk transfer based on trickle and local uabc repairs
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Changed the name of the rimeaddr module to linkaddr
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Use the list_item_next() API
    Moved ctimer.[ch] from their old and illogical location in core/net/rime to a more appropriate place in core/sys
    Added debug printout
    Added functionality for decaying routes: when a packet is sent over a route, it is decayed. If the route is not refreshed within four packets (with the route_refresh() function, which is called when a new packet arrives), the route is dropped. A route can be decayed at most once per second
    Removed automatic refresh of routes from the route_lookup() function and moved it into an explicit route_refresh() function. The previous behaviour was dangerous, since it meant that even bad routes that someone was looking for were considered fresh. Now such routes time out if they are not explictily refreshed (e.g., on a packet reception)
    Made constant addresses const
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Added API for reading the routing table
    Made use of uip_ipaddr_to_quad().
    Made the number of routing table entries configurable
    Cleaned up #includes to avoid cyclic dependencies - the Rime includes no longer depend on rime.h
    Increased default route lifetime to 60 seconds. Routes are now refreshed every time they are looked up.
    Documentation updates
    Make route lifetime dynamically configurable
    Added stdio.h for printf.
    Make consistent presumptions about inlcude paths.
    Added automatic timeouts
    New Rime module: mesh, a mesh routing protocol
    Initial version of a simple mesh routing protocol written with Rime
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed out-commented timetable code
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    bugfix: transfer did not terminate correctly when last packet was full
    Made rimeaddr_t pointers const where they should be.
    minor bugfixes: a rucb sender could not immediately after start receiving a bulk transfer
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Changed name of Rime module ruc to unicast
    This is an initial commit of an implementation of the Chameleon
    architecture for the Rime stack for Contiki. The Chameleon
    architecture separates the header processing from the Rime protocol
    logic. Instead of having each protocol create its own part of the
    packet header, protocols use packet attributes. Before sending a
    packet, a special Chameleon header processing module creates a packet
    header from the packet attributes. The same Chameleon module parses
    incoming packets and creates packet attributes from the header.
    
    The details are in our SenSys 2007 paper:
    
    Adam Dunkels, Fredrik Osterlind, Zhitao He. An Adaptive Communication
    Architecture for Wireless Sensor Networks. In Proceedings of the Fifth
    ACM Conference on Networked Embedded Sensor Systems (SenSys 2007),
    Sydney, Australia, November 2007.
    
    http://www.sics.se/~adam/dunkels07adaptive.pdf
    
    This is a rewrite of the code that was developed for the paper.
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Updated debug output
    Removed debug output
    Removed unused return value from ruc recv callback
    Updated ruc callback types to fix compiler warnings
    Reliable single-hop unicast bulk transfer
    Documentation updates
    Debug output
    Free queued packet when closing
    Renamed suc_send_uc() to suc_send(), fixed debug output
    Added *_close() function to all Rime modules
    API change for Rime: *_setup() renamed to *_open()
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Renamed ulayer -> callbacks
    Initial import of the experimental Rime code into the SourceForge CVS.
    Make netsim more like the esb target
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix "multiple use of section label 'channels'" warning in various rime headers
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    [core/net/rime] Avoid equal group titles in same group
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Changed name of the sabc module to stbroadcast
    This is an initial commit of an implementation of the Chameleon
    architecture for the Rime stack for Contiki. The Chameleon
    architecture separates the header processing from the Rime protocol
    logic. Instead of having each protocol create its own part of the
    packet header, protocols use packet attributes. Before sending a
    packet, a special Chameleon header processing module creates a packet
    header from the packet attributes. The same Chameleon module parses
    incoming packets and creates packet attributes from the header.
    
    The details are in our SenSys 2007 paper:
    
    Adam Dunkels, Fredrik Osterlind, Zhitao He. An Adaptive Communication
    Architecture for Wireless Sensor Networks. In Proceedings of the Fifth
    ACM Conference on Networked Embedded Sensor Systems (SenSys 2007),
    Sydney, Australia, November 2007.
    
    http://www.sics.se/~adam/dunkels07adaptive.pdf
    
    This is a rewrite of the code that was developed for the paper.
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Cleaned up #includes to avoid cyclic dependencies - the Rime includes no longer depend on rime.h
    Fixed compiler warnings to make code compile with gcc's -pedantic switch
    configurable rudolph datasize
    Bugfixes, updates
    Made send intervals configurable when sending a new file
    Documentation updates
    Moved rudolph{0,1} from apps/ directory into core/net/rime
    Removed the use of CFS. Instead, provide callbacks for the using application to fill in data.
    Bugfixes, added version API, larger data size
    A simple program for reliably sending a file to all neihgboring nodes
    Renamed Rime output function
    A Rime driver for the simple-cc2420 driver
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    * Made Chameleon header processing module configurable (CHAMELEON_CONF_MODULE)
    * Removed the unused init function from header processing modules
    * Added option CHAMELEON_CONF_WITH_MAC_LINK_ADDRESSES to specify that
      MAC link addresses should be used instead of Chameleon's own encoding
      of sender and receiver. This avoids encoding the link addresses twice
      when the MAC RDC has its own addresses.
    Reworked the Rime/Chameleon interface so that packets now always hit Rime before Chameleon. Chameleon is now only called by Rime. This makes packet sniffing easier, and allows for sniffing packets after their header has been processed by Chameleon, thereby making per-packet power profiling much easier to implement
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    This is an initial commit of an implementation of the Chameleon
    architecture for the Rime stack for Contiki. The Chameleon
    architecture separates the header processing from the Rime protocol
    logic. Instead of having each protocol create its own part of the
    packet header, protocols use packet attributes. Before sending a
    packet, a special Chameleon header processing module creates a packet
    header from the packet attributes. The same Chameleon module parses
    incoming packets and creates packet attributes from the header.
    
    The details are in our SenSys 2007 paper:
    
    Adam Dunkels, Fredrik Osterlind, Zhitao He. An Adaptive Communication
    Architecture for Wireless Sensor Networks. In Proceedings of the Fifth
    ACM Conference on Networked Embedded Sensor Systems (SenSys 2007),
    Sydney, Australia, November 2007.
    
    http://www.sics.se/~adam/dunkels07adaptive.pdf
    
    This is a rewrite of the code that was developed for the paper.
    Rime statistics gathering
    Rime driver running over UDP
    Initial import of the experimental Rime code into the SourceForge CVS.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix "multiple use of section label 'channels'" warning in various rime headers
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    [core/net/rime] Avoid equal group titles in same group
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added missing include
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Cleaned up #includes to avoid cyclic dependencies - the Rime includes no longer depend on rime.h
    Fixed compiler warnings to make code compile with gcc's -pedantic switch
    Yet another network bulk flooding protocol
    Made send intervals configurable when sending a new file
    Documentation updates
    Moved rudolph{0,1} from apps/ directory into core/net/rime
    Removed the use of CFS. Instead, provide callbacks for the using application to fill in data.
    Bugfixes, added version API, larger data size
    A simple program for reliably sending a file to all neihgboring nodes
    Renamed Rime output function
    A Rime driver for the simple-cc2420 driver
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added missing include
    Revived the timesynch module, which has been switched off since the introduction of the new radio API after Contiki 2.4. The new code uses explicit timestamp messages instead of piggybacking timestamps on every transmission. It is also significantly better in terms of exactness.
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Use RTIMER_NOW() instead of rtimer_arch_now()
    fixed compiler warning when timesynch is disabled
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Compile only if timesynch is enabled
    Changed name of the simple-cc2420 module to cc2420: changed all function names and variable names from simple_cc2420_* to cc2420_*.
    Changed filename of the CC2420 driver from simple-cc2420 to cc2420.
    Added a function for converting a timesynchronized time to a local (rtimer) time
    Rewrote the timesynch code to use the Rime sniffer interface instead of the kludge of running timesynch as a MAC layer
    Moving timesynch.[ch] from sys/ to core/net/rime as they have more to do with Rime than with the kernel
    The radio driver now takes care of adjusting for the transmission time
    Avoid usage of POSIX function names even for static functions as some indirectly included system header might declare them.
    Easily avoided double (meant to be a forward ?) definition of timesynch_driver.
    Removed debug output
    A simple implicit network time synchronization mechanism
    Made initialization function return a pointer to the MAC driver structure, to make initialization nicer
    Modified to use the new MAC layer API
    Avoid function pointer mismatch in set_receive_function().
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix "multiple use of section label 'channels'" warning in various rime headers
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Added the MAC layer callback functionality so that the Rime network layer gets information from the MAC about the status of sent packets: were they successfully transmitted, or was there a collisions? How many retries were there?
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    This is an initial commit of an implementation of the Chameleon
    architecture for the Rime stack for Contiki. The Chameleon
    architecture separates the header processing from the Rime protocol
    logic. Instead of having each protocol create its own part of the
    packet header, protocols use packet attributes. Before sending a
    packet, a special Chameleon header processing module creates a packet
    header from the packet attributes. The same Chameleon module parses
    incoming packets and creates packet attributes from the header.
    
    The details are in our SenSys 2007 paper:
    
    Adam Dunkels, Fredrik Osterlind, Zhitao He. An Adaptive Communication
    Architecture for Wireless Sensor Networks. In Proceedings of the Fifth
    ACM Conference on Networked Embedded Sensor Systems (SenSys 2007),
    Sydney, Australia, November 2007.
    
    http://www.sics.se/~adam/dunkels07adaptive.pdf
    
    This is a rewrite of the code that was developed for the paper.
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Bugfixes, updates
    Documentation updates
    Documentation fixes
    Minor documentation change
    Documentation fixes
    Added *_close() function to all Rime modules
    API change for Rime: *_setup() renamed to *_open()
    Renamed input function to rime_input() and the output function to rime_driver_send()
    Renamed ulayer -> callbacks
    Renamed driver output function to abc_driver_send
    Generic abc module
    Initial import of the experimental Rime code into the SourceForge CVS.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix "multiple use of section label 'channels'" warning in various rime headers
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Changed the name of the rimeaddr module to linkaddr
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Remove old neighbor.h inclusion
    Made rimeaddr_t pointers const where they should be.
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Added Rime documentation from the Rime/Chameleon paper (SenSys 2007)
    bugfix: remember active transmissions (sender side) instead of last received packets (receiving side). allows several nodes sending to a single receiver.
    
    + added function for checking if runicast is currently transmitting (non-acked) data
    remembering last received packet id to avoid multiple recv callbacks for the same retransmitted packet (but still sending back acks of course)
    Changed name of Rime module ruc to unicast
    Changed name of suc module to stunicast
    This is an initial commit of an implementation of the Chameleon
    architecture for the Rime stack for Contiki. The Chameleon
    architecture separates the header processing from the Rime protocol
    logic. Instead of having each protocol create its own part of the
    packet header, protocols use packet attributes. Before sending a
    packet, a special Chameleon header processing module creates a packet
    header from the packet attributes. The same Chameleon module parses
    incoming packets and creates packet attributes from the header.
    
    The details are in our SenSys 2007 paper:
    
    Adam Dunkels, Fredrik Osterlind, Zhitao He. An Adaptive Communication
    Architecture for Wireless Sensor Networks. In Proceedings of the Fifth
    ACM Conference on Networked Embedded Sensor Systems (SenSys 2007),
    Sydney, Australia, November 2007.
    
    http://www.sics.se/~adam/dunkels07adaptive.pdf
    
    This is a rewrite of the code that was developed for the paper.
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Documentation updates
    Removed unused return value from ruc recv callback
    Updated ruc to send ACKs before notifying applications, and API support for the etx-based tree code
    Multiplicative increase in retransmission time. Statistics. Max amount of retransmissions now configurable on a per-packet basis
    Bugfixes, updates
    Made the number of retransmissions configurable
    Added *_close() function to all Rime modules
    API change for Rime: *_setup() renamed to *_open()
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Renamed ulayer -> callbacks
    Initial import of the experimental Rime code into the SourceForge CVS.
    Added *experimental* module for sending raw (non-routed) packets from Contiki. The name of the module is likely to change.
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Made rimeaddr_t pointers const where they should be.
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Changed name of the sabc module to stbroadcast
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Documentation updates
    Make use of consistent timer interface code
    Fixed compilation problem, added send() call so that a packet is sent out immediately
    Added *_close() function to all Rime modules
    API change for Rime: *_setup() renamed to *_open()
    Renamed ulayer -> callbacks
    Initial import of the experimental Rime code into the SourceForge CVS.
    Make netsim more like the esb target
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix "multiple use of section label 'channels'" warning in various rime headers
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Changed the name of the rimeaddr module to linkaddr
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Moved ctimer.[ch] from their old and illogical location in core/net/rime to a more appropriate place in core/sys
    Added the MAC layer callback functionality so that the Rime network layer gets information from the MAC about the status of sent packets: were they successfully transmitted, or was there a collisions? How many retries were there?
    Made rimeaddr_t pointers const where they should be.
    fixed some documentation typos.
    
    also uc -> unicast, stuc -> stunicast.
    Added Rime documentation from the Rime/Chameleon paper (SenSys 2007)
    Changed name of suc module to stunicast
    Changed the 'ibc' and 'uc' Rime modules into the more descriptive names 'broadcast' and 'unicast'
    This is an initial commit of an implementation of the Chameleon
    architecture for the Rime stack for Contiki. The Chameleon
    architecture separates the header processing from the Rime protocol
    logic. Instead of having each protocol create its own part of the
    packet header, protocols use packet attributes. Before sending a
    packet, a special Chameleon header processing module creates a packet
    header from the packet attributes. The same Chameleon module parses
    incoming packets and creates packet attributes from the header.
    
    The details are in our SenSys 2007 paper:
    
    Adam Dunkels, Fredrik Osterlind, Zhitao He. An Adaptive Communication
    Architecture for Wireless Sensor Networks. In Proceedings of the Fifth
    ACM Conference on Networked Embedded Sensor Systems (SenSys 2007),
    Sydney, Australia, November 2007.
    
    http://www.sics.se/~adam/dunkels07adaptive.pdf
    
    This is a rewrite of the code that was developed for the paper.
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Added API to retrieve address of current receiver
    Stubborn timer now configurable on a per-transmission basis.
    Documentation updates
    Renamed suc_send_uc() to suc_send(), fixed debug output
    Added *_close() function to all Rime modules
    API change for Rime: *_setup() renamed to *_open()
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Renamed ulayer -> callbacks
    Initial import of the experimental Rime code into the SourceForge CVS.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Corrected debug output
    * Made Chameleon header processing module configurable (CHAMELEON_CONF_MODULE)
    * Removed the unused init function from header processing modules
    * Added option CHAMELEON_CONF_WITH_MAC_LINK_ADDRESSES to specify that
      MAC link addresses should be used instead of Chameleon's own encoding
      of sender and receiver. This avoids encoding the link addresses twice
      when the MAC RDC has its own addresses.
    Fixed sdcc compiler problem: function pointers cannot be NULL, so added a dummy function instead
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    bugfix: use memcpy() to get attributes longer than a byte properly written to packet header
    Bugfix: the Chameleon header parser modules should not clear the packet attributes, because the MAC or radio layers may have added attributes already
    Slightly nicer formatting
    CC_CONST_FUNCTION replaces some const keywords in order to workaround a sdcc bug, which cannot handle function pointers as const.
    This is an initial commit of an implementation of the Chameleon
    architecture for the Rime stack for Contiki. The Chameleon
    architecture separates the header processing from the Rime protocol
    logic. Instead of having each protocol create its own part of the
    packet header, protocols use packet attributes. Before sending a
    packet, a special Chameleon header processing module creates a packet
    header from the packet attributes. The same Chameleon module parses
    incoming packets and creates packet attributes from the header.
    
    The details are in our SenSys 2007 paper:
    
    Adam Dunkels, Fredrik Osterlind, Zhitao He. An Adaptive Communication
    Architecture for Wireless Sensor Networks. In Proceedings of the Fifth
    ACM Conference on Networked Embedded Sensor Systems (SenSys 2007),
    Sydney, Australia, November 2007.
    
    http://www.sics.se/~adam/dunkels07adaptive.pdf
    
    This is a rewrite of the code that was developed for the paper.
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    core/net/rime/ipolite: stop ctimer and reset queuebuf pointer when canceling old send
    
    Ipolite is used by netflood and route-discovery modules among others. If a route request is yet to be re-broadcasted and a local route discovery is started (interval == 0), the previous queuebuf used is freed but ctimer and queuebuf pointer is left unchanged. This causes corrupt route requests to be sent, invalid routing tables to be formed, memcmp() on NULL pointer on receive, and other undefined behavior.
    
    Signed-off-by: Oskar Nordquist <oskar.nordquist@crlsweden.com>
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added the MAC layer callback functionality so that the Rime network layer gets information from the MAC about the status of sent packets: were they successfully transmitted, or was there a collisions? How many retries were there?
    Added parameter to ipolite that specifies how many dups that are acceptable, before suppressing one's own packet
    Made rimeaddr_t pointers const where they should be.
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Bugfix: backwards definition of MIN macro (quite embarassing)
    Reverted the recent change from random_rand() to rand(). It turned out that
    since libc rand() returns a signed int, there were frequently problems with
    timer values wrapping. By reverting to random_rand(), we can provide a
    random generator that returns an unsigned and the timer problems are solved.
    Changed from random_rand() to rand() function for (pseudo) random numbers because random_rand() does not work that well
    Bugfix: check should cover min(hdrsize, datalen), not max
    Changed send function to return false if it was not possible to send
    Changed the 'ibc' and 'uc' Rime modules into the more descriptive names 'broadcast' and 'unicast'
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Optimized transmission when interval == 0
    Send immediately if interval == 0. Added debug information
    Sending with interval 0 made explicit
    Added #ifdef around MAX definition to avoid compiler warnings
    A function declared in lib/random.h is used, so this file should be included
    instead of lib/rand.h.
    Identified polite broadcast primitive
    Polite broadcast primitive
    Documentation updates
    Use random_rand() instead of rand() due to bug on msp430
    Queued packet pointer should be NULL when no packet is queued
    Split interval: one half listen only, second half send packet
    New Rime module: unique anonymous best effort broadcast
    Added *_close() function to all Rime modules
    API change for Rime: *_setup() renamed to *_open()
    Renamed ulayer -> callbacks
    Initial import of the experimental Rime code into the SourceForge CVS.
    Make netsim more like the esb target
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added the MAC layer callback functionality so that the Rime network layer gets information from the MAC about the status of sent packets: were they successfully transmitted, or was there a collisions? How many retries were there?
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Bugfix: backwards definition of MIN macro (quite embarassing)
    Reverted the recent change from random_rand() to rand(). It turned out that
    since libc rand() returns a signed int, there were frequently problems with
    timer values wrapping. By reverting to random_rand(), we can provide a
    random generator that returns an unsigned and the timer problems are solved.
    Changed from random_rand() to rand() function for (pseudo) random numbers because random_rand() does not work that well
    Bugfix: check should cover min(hdrsize, datalen), not max
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Added #ifdef around MAX definition to avoid compiler warnings
    fixed compiler warning
    Polite broadcast primitive
    Documentation updates
    Use random_rand() instead of rand() due to bug on msp430
    Queued packet pointer should be NULL when no packet is queued
    Split interval: one half listen only, second half send packet
    New Rime module: unique anonymous best effort broadcast
    Added *_close() function to all Rime modules
    API change for Rime: *_setup() renamed to *_open()
    Renamed ulayer -> callbacks
    Initial import of the experimental Rime code into the SourceForge CVS.
    Make netsim more like the esb target
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Remove unguarded printf()
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Removed debug output
    Fixed compiler warnings to make code compile with gcc's -pedantic switch
    Fixed compiler warnings
    Yet another network bulk flooding protocol
    Fix "multiple use of section label 'channels'" warning in various rime headers
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    [core/net/rime] Doxygen fixes
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Slight API change to support bump functionality
    A new experimental network primitive called an 'announcement'. An
    announcement is an (ID, value) tuple that is disseminated to local
    area neighbors. An application or protocol can explicitly listen to
    announcements from neighbors. When an announcement is heard, a
    callback is invoked.
    
    Announcements can be used for a variety of network mechanisms such as
    neighbor discovery, node-level service discovery, or routing metric
    dissemination.
    
    Application programs and protocols register announcements with the
    announcement module. An announcement back-end, implemented by the
    system, takes care of sending out announcements over the radio, as
    well as collecting announcements heard from neighbors.
    Documentation updates
    Documentation fixes
    Initial import of the experimental Rime code into the SourceForge CVS.
    Functions for sending individual UDP datagrams
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved packetqueue to core/net/rime, as it is only used by the Rime collect protocol
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    collect: making some protocol parameters configurable by COLLECT_CONF_ style defines
    
    TTL (which has a rather low default of 15), MAC level retransmissions,
    overall number of retransmissions, and the header bits dedicated to these
    were all fixed in the collect.h and collect.c, without a simple way to
    override them.
    Extracted these as COLLECT_CONF_ parameters, keeping defaults as they were
    before.
    
    Signed-off-by: Csaba Kiraly <kiraly@disi.unitn.it>
    Allow proactive probing interval to be configured
    Removed undef
    Corrects some leftover uncapitalized printfs which may cause some platforms
    to crash.
    Send announcements only if the node is configured to be a router
    Added NULL pointer guards
    Avoid using memcpy on unaligned uint16_t variables, because certain compilers will optimize this code to a direct copy instruction that will result in unaligned memory access. Thanks to Angelo Compagnucci for reporting this problem.
    Eliminate unused variable warnings. Dummy test of PT_YIELD_FLAG does not change program size.
    Use NETSTACK_RDC_* instead of NETSTACK_CONF_RDC_*
    Made collect retransmissions and broadcast announcements timers depend on the rdc wakeup rate
    collect_send() should return 0 if the packet could not be enqueued to be sent
    More recent packet entries. Allow 4 queue entries to be dedicated to generated packets.
    Minor bugfixes pertaining to queue handling: if a packet was explicitly dropped, the packet would later be acknowledged despite it never being received; added a limit on how many queue entries that can be used for packets that are being forwarded, to allow for originated packets even if the forwarding queue is filled.
    Bugfix: the defensive retransmission timer setting must be made before the packet is transmitted, otherwise the retransmission timer will always be for the defensive retransmit
    Added safeguard timer if the MAC layer would fail to call back after transmission.
    Fix avr-gcc compiler warnings
    Changed the behaviour of retransmissions to work better with the in-order CSMA code. The retransmission timer is now set when the packet is known to be sent by the MAC layer.
    Allow platform to specify  COLLECT_CONF_BROADCAST_ANNOUNCEMENT_MAX_TIME
    Added a function for obtaining the current parent
    Rewrote proactive link estimator to be invoked randomly instead of triggered by an empty queue; this makes network bootups because nodes are not synchronized
    Left-over debug printf removed
    Rewrote parts of the retransmission logic so that collect is robust against the situation where the MAC layer will fail to callback after a packet has been transmitted.
    Bugfix: bump advertisements only when a parent changes, not because of an upstream parent change
    Fixed build for platforms which use the default value for QUEUEBUF_NUM.
    Rewrite of the congestion logic. A node now report it being congested
    when half the transmission queue is full. When a neighbor is heard to
    be congested, the rtmetric of that node is inflated to avoid sending
    more traffic in its direction.
    
    Fixed problems with beacon intervals: intervals are now not reduced
    when a path gets significantly worse, only when they get better.
    Don't call sink recv function for zero-size packets, since these most likely are link estimate probes or keepalive packets. Explicitly set eseqno to zero when opening a new connection.
    Bugfix: when a node's rtmetric was lower than SIGNIFICANT_RTMETRIC_PARENT_CHANGE, its beacon timers would always be bumped to its lowest value
    Turned the DRAW_TREE debug flag off by default
    Several bugfixes to the proactive link estimate maintenance code, which is now enabled by default. Simplified DRAW_TREE code for drawing routing graph in Cooja. Added routing metric penalty to parents that are congested or that drop packets.
    Bugfixes and improvements: rtmetrics are now 16-bit clean. Added experimental feature that proactively probes neighbors that have not yet been tried out, in order to get an initial ETX for them.
    Bugfix: make sure that neighbor exists before attempting to update tx
    count.
    A number of changes to the collect code:
    * Added an optional "keep alive" mechanism whereby an idle network is
    periodically probed by dummy packets to maintain a recent quality
    metric when there is no traffic.
    * Bugfix in when new routing metrics should be advertised
    * Rewrote the ACK logic so that a queuebuf is not allocated for each
    ack, only for those acks generated by the sink node.
    * Updated the wrap-around logic for sequence numbers: when a sequence
    number wraps, it won't go back to 0. Instead, it wraps to 128. This
    allows us to understand when a node has rebooted: when its seqno is <
    128, it has recently rebooted.
    Minor tweaks. Removed debug output from CVS.
    Significant improvements to the Collect protocol:
    
    * Loop detection and untangling. Now uses in-band loop detection that
      works.
    
    * Link quality estimation. Now starts with a conservative /
      pessimistic estimate for new links.
    
    * Retransmissions. MAC layer and network layer retransmissions are now
      decoupled.
    
    * Loss handling. Deals better with losses now.
    
    * Concurrent applications. Each connection now maintains its own
      neighbor table with separated cost to sink estimates for each
      connection.
    Rewrite of important parts of the Collect logic: link estimation
    calculation and parent selection.  This fixes a severe bug that caused
    loops when packets were erroneously retransmitted due to ACK loss.
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Bugfix: select the best parent if current parent is NULL
    Added a safety measure against a problem where a node in rare situations would turn itself into a sink. Not entirely sure why this happens, but the safety measure should at least avoid the results of the problem. Added more debug messages.
    PRINTF():ed debugging output
    Improved parent management: parent neighbor is retained until a better neighbor is found (with 1 ETX less than parent). Don't drop parent neighbors when loop is detected (loops are transient anyway).
    Configuration parameter for number of MAC-layer retransmissions
    * Added configurable default number of transmissions for CSMA to use when not specified using packetbuf attributes (CSMA_CONF_MAX_MAC_TRANSMISSIONS).
    * Renamed packetbuf attribute PACKETBUF_ATTR_MAX_MAC_REXMIT to PACKETBUF_ATTR_MAX_MAC_TRANSMISSIONS where value 0 (attribute not set) means that default number of transmissions should be used.
    Added a parameter to collect_open() that specifies whether or not the node should be a router for packets, or only an originator of packets. Updated the collect module to the new annoucement API.
    Renamed the neighbor module to collect-neighbor, as it is only used by the collect module and is not a generic neighbor module
    Reenabled announcement support
    Leave compiler warning for 16 bit timers
    Remove compiler warning
    Bugfix: set up rtmetric before starting to announce it. Set the number of MAC layer retransmissions correctly
    Remove compiler warnings
    Make max queueing time depend on retransmission timeout
    Significant rework of the Contiki data collection protocol:
    
    * the new version makes use of MAC-layer feedback so that bad paths
      can be identified quicker and then avoided.
    
    * the new code uses transport layer ACKs that contain feedback from
      the collect protocol: when a packet cannot be forwarded due to lack
      of resources, the ACK contains a flag that indicates that the packet
      could not be forwarded. ACKs also contain the routing metric of the
      sender, which improves agility in face of rapid path changes.
    
    * loop detection and management has been improved: with higher path
      metric agility, the system is more prone to short-lived routing
      loops. Instead of dropping looping packets, the new version adjusts
      the routing metric for the routes that exhibit loops so that the
      risk for future loops is reduced.
    
    * make use of packet attributes to inform the MAC layer of how many
      times packets should be retransmitted.
    Better loop handling: when a loop is detected, the neighbor to which the packet was originally sent gets an inflated ETX; made sure that collect without announcments work; increased timeouts, to work nicer in larger networks
    Added debugging statements for packet drops
    Moved the neigbor_init() call to the collect module, since it is the only one that currently uses it
    Increased the forwarding queue to six packets to improve collection robustness
    Made rimeaddr_t pointers const where they should be.
    made neighbor discovery method configurable. default is announcements.
    removed reference to undefined function in mspgcc
    Fixes by Ward Van Heddeghem (reapplied from versioin 1.24)
    Rewrite of the collect module. The new version uses a packet queue for outgoing and forwarded packets so that more than one packet can be forwarded at the same time. The new version uses the packetqueue module to maintain the packet queue.
    Fixes by Ward Van Heddeghem (VUB)
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    raise busy forwarding flag before sending
    Update announcement value after route metric saturates. Not doing this results in stubborn forwards from former children nodes.
    avoid ping pong packets during route disruption
    bugfix: put up busy forwarding flag only after next hop found
    If no neighbor is found, we listen for announcements. Cleaned up debug output.
    Reduced the size of the packet cache from four to two to avoid falseley dismissing fresh packets (the header field that hold sequence numbers is only two bits wide, hence all sequence numbers fits in a four-entry cache...)
    Rewrote the collect module so that it uses the announcement module rather than the neighbor-discovery module. This makes it possible to implement other annoumcement back-ends than the traditional broadcast-based neighbor discovery
    Replaced NETSIM macro with general (and now actually working) solution in Makefile.include.
    Fixed a bunch of bugs in the collection neighbor announcement/discovery code: neighbor announcments were not repeated unless there was a change in the ETX val. Neighbor announcements happened to often when there were changes in the ETX.
    Renamed Rime nf module to netflood
    Changed name of Rime module ruc to unicast
    Rewrote the collect module to use packet attributes instead of explicit headers
    Bugfix: fixed the missing arguments to make Rime compile
    Changed send function to return false if it was not possible to send
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Updated collect_open() definiton to match prototype declaration
    Added line drawing code when compiled for the netsim target
    Show rt metric in netsim as number of expected transmissions
    Removed unused code
    Bugfix: hops should be at least one for all packets that are sent over the radio
    Changed local rtmetric name from 'local_rtmetric' to 'rtmetric' and updated the neighbor discovery module from nbh to neighbor-discovery
    Changed module name to 'collect' from 'tree' to better reflect the purpose of the module, rather than the particular data structure used to implement it
    Removed unused return value from ruc recv callback
    Always add neighbors to the list regardless if their rtmetric is higher than ours or not. If our rtmetric rises, we may need ot have those neighbors in our list.
    Fixed compiler warnings to make code compile with gcc's -pedantic switch
    Re-added hop count to header, fixes related to ETX computation: adv packets do not add a good etx, timedout packets do not restore the neighbor age, removed unused code
    Updated tree to use expected transmissions (etx) as routing metric
    Amount of retransmissions now configurable on a per-packet basis
    Bugfixes, updates
    Made advertisments for new shorter routes quicker, and advertisements for longer routes slower
    Reduce header before passing over to receiver
    Fixed include files
    Renamed rimebuf_hdrextend() to rimebuf_hdralloc()
    Added support for multiple simulteaneous tree connections, removed sibc connection in favour of a uibc connection
    Added hop counting, remade the rimeaddr_t u16 to be an array rather than a scalar
    Added *_close() function to all Rime modules
    API change for Rime: *_setup() renamed to *_open()
    node_id -> rimeaddr_node_addr
    New Rime module: tree, a converge cast / tree data collection protocol
    Treeroute implemented with Rime
    Fix "multiple use of section label 'channels'" warning in various rime headers
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added missing include
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Moved ctimer.[ch] from their old and illogical location in core/net/rime to a more appropriate place in core/sys
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Added Rime documentation from the Rime/Chameleon paper (SenSys 2007)
    Added Doxygen documentation
    Moved packet attributes specifications from rimebuf.h to the appropriate protocol header files
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Cleaned up #includes to avoid cyclic dependencies - the Rime includes no longer depend on rime.h
    Polite broadcast primitive
    Documentation updates
    New Rime module: unique anonymous best effort broadcast
    Trickle implementation for Rime
    Added *_close() function to all Rime modules
    API change for Rime: *_setup() renamed to *_open()
    New Rime module: tree, a converge cast / tree data collection protocol
    New Rime module: mesh, a mesh routing protocol
    Initial version of a simple mesh routing protocol written with Rime
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix "multiple use of section label 'channels'" warning in various rime headers
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Changed the name of the rimeaddr module to linkaddr
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added the MAC layer callback functionality so that the Rime network layer gets information from the MAC about the status of sent packets: were they successfully transmitted, or was there a collisions? How many retries were there?
    Made rimeaddr_t pointers const where they should be.
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Documentation updates
    Added Rime documentation from the Rime/Chameleon paper (SenSys 2007)
    Changed the 'ibc' and 'uc' Rime modules into the more descriptive names 'broadcast' and 'unicast'
    This is an initial commit of an implementation of the Chameleon
    architecture for the Rime stack for Contiki. The Chameleon
    architecture separates the header processing from the Rime protocol
    logic. Instead of having each protocol create its own part of the
    packet header, protocols use packet attributes. Before sending a
    packet, a special Chameleon header processing module creates a packet
    header from the packet attributes. The same Chameleon module parses
    incoming packets and creates packet attributes from the header.
    
    The details are in our SenSys 2007 paper:
    
    Adam Dunkels, Fredrik Osterlind, Zhitao He. An Adaptive Communication
    Architecture for Wireless Sensor Networks. In Proceedings of the Fifth
    ACM Conference on Networked Embedded Sensor Systems (SenSys 2007),
    Sydney, Australia, November 2007.
    
    http://www.sics.se/~adam/dunkels07adaptive.pdf
    
    This is a rewrite of the code that was developed for the paper.
    constness
    Documentation updates
    Added *_close() function to all Rime modules
    API change for Rime: *_setup() renamed to *_open()
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Renamed ulayer -> callbacks
    Initial import of the experimental Rime code into the SourceForge CVS.
    Added *experimental* module for sending raw (non-routed) packets from Contiki. The name of the module is likely to change.
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Changed the name of the rimeaddr module to linkaddr
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added parameter to ipolite that specifies how many dups that are acceptable, before suppressing one's own packet
    Fixed alignment issue
    Made rimeaddr_t pointers const where they should be.
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Reverted the recent change from random_rand() to rand(). It turned out that
    since libc rand() returns a signed int, there were frequently problems with
    timer values wrapping. By reverting to random_rand(), we can provide a
    random generator that returns an unsigned and the timer problems are solved.
    Renamed Rime nf module to netflood
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Made a primary transmission go out immediately instead of within a random interval
    Cleaned up #includes to avoid cyclic dependencies - the Rime includes no longer depend on rime.h
    Removed debug output
    Bugfixes, updates
    Documentation updates
    Timeouts configurable at run-time
    Renamed rimebuf_hdrextend() to rimebuf_hdralloc()
    Added debugging, reduced wait time
    nf is now based on uibc
    Added *_close() function to all Rime modules
    API change for Rime: *_setup() renamed to *_open()
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Renamed ulayer -> callbacks
    Sequence number now reported
    New rime module: best-effort network flooding (nf)
    Initial import of the experimental Rime code into the SourceForge CVS.
    Make netsim more like the esb target
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix "multiple use of section label 'channels'" warning in various rime headers
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Changed the name of the rimeaddr module to linkaddr
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Add mesh_ready() to mesh
    mesh_ready checkes whether a packet is queued. This allows to avoid
    packet loss at application level.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Added const to constant parameters (rime addresses)
    Made constant addresses const
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Renamed Rime module mh to multihop
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Added hopcount to callbacks
    Cleaned up #includes to avoid cyclic dependencies - the Rime includes no longer depend on rime.h
    Documentation updates
    Documentation fixes
    Documentation fixes
    Refactored the mesh code by splitting multi-hop forwarding and route discovery. The mesh module is now much simpler than before
    Added *_close() function to all Rime modules
    API change for Rime: *_setup() renamed to *_open()
    New Rime module: tree, a converge cast / tree data collection protocol
    New Rime module: mesh, a mesh routing protocol
    Initial version of a simple mesh routing protocol written with Rime
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix "multiple use of section label 'channels'" warning in various rime headers
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Changed the name of the rimeaddr module to linkaddr
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added missing include
    Made rimeaddr_t pointers const where they should be.
    * decline route discovery requests if we have one in the air
    * and, by popular demand, switched PRINTF to printf in the debug macro. :-)
    Added const to constant parameters (rime addresses)
    Renamed Rime nf module to netflood
    Changed the 'ibc' and 'uc' Rime modules into the more descriptive names 'broadcast' and 'unicast'
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Cleaned up #includes to avoid cyclic dependencies - the Rime includes no longer depend on rime.h
    Documentation updates
    Timeouts configurable at run-time
    Refactored the mesh code by splitting multi-hop forwarding and route discovery. The mesh module is now much simpler than before
    Added *_close() function to all Rime modules
    API change for Rime: *_setup() renamed to *_open()
    New Rime module: tree, a converge cast / tree data collection protocol
    New Rime module: mesh, a mesh routing protocol
    Initial version of a simple mesh routing protocol written with Rime
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix "multiple use of section label 'channels'" warning in various rime headers
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Moved ctimer.[ch] from their old and illogical location in core/net/rime to a more appropriate place in core/sys
    fixed some documentation typos.
    
    also uc -> unicast, stuc -> stunicast.
    Changed name of the sabc module to stbroadcast
    Changed the 'ibc' and 'uc' Rime modules into the more descriptive names 'broadcast' and 'unicast'
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Documentation updates
    Documentation fixes
    Fixed compilation problem, added send() call so that a packet is sent out immediately
    Added *_close() function to all Rime modules
    API change for Rime: *_setup() renamed to *_open()
    Renamed ulayer -> callbacks
    Initial import of the experimental Rime code into the SourceForge CVS.
    Fix warnings caused by incorrect param names / undocumented params
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Changed the name of the rimeaddr module to linkaddr
    Moved the rimeaddr.[ch] code from the core/net/rime module to the core/net module, as it is used not only by rime code
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    API change to the announcement module: an annoucement can now be registered without a value. Such announcements are never transmitted to neighbors, until the announcement's value is set.
    Added a bump method that tells the announcement module that a value has changed sufficiently much for it to be pushed out quicker
    Added the option to specify the old value to observers so that they can determine if the announcement should be sent out quicklier than otherwise
    Made rimeaddr_t pointers const where they should be.
    fixed some documentation typos.
    
    also uc -> unicast, stuc -> stunicast.
    Documentation fix
    Minor documentation update
    A new experimental network primitive called an 'announcement'. An
    announcement is an (ID, value) tuple that is disseminated to local
    area neighbors. An application or protocol can explicitly listen to
    announcements from neighbors. When an announcement is heard, a
    callback is invoked.
    
    Announcements can be used for a variety of network mechanisms such as
    neighbor discovery, node-level service discovery, or routing metric
    dissemination.
    
    Application programs and protocols register announcements with the
    announcement module. An announcement back-end, implemented by the
    system, takes care of sending out announcements over the radio, as
    well as collecting announcements heard from neighbors.
    Moved packetqueue to core/net/rime, as it is only used by the Rime collect protocol
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Moved ctimer.[ch] from their old and illogical location in core/net/rime to a more appropriate place in core/sys
    Added function for obtaining packet queue length
    New module: packetqueue. The packetqueue module maintains packet queues for other modules.
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Changed name of the sabc module to stbroadcast
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Documentation updates
    Make use of consistent timer interface code
    Fixed compilation problem, added send() call so that a packet is sent out immediately
    Added *_close() function to all Rime modules
    API change for Rime: *_setup() renamed to *_open()
    Renamed ulayer -> callbacks
    Initial import of the experimental Rime code into the SourceForge CVS.
    Make netsim more like the esb target
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix "multiple use of section label 'channels'" warning in various rime headers
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Changed the name of the rimeaddr module to linkaddr
    Moved the rimeaddr.[ch] code from the core/net/rime module to the core/net module, as it is used not only by rime code
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added the MAC layer callback functionality so that the Rime network layer gets information from the MAC about the status of sent packets: were they successfully transmitted, or was there a collisions? How many retries were there?
    Made rimeaddr_t pointers const where they should be.
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Added Rime documentation from the Rime/Chameleon paper (SenSys 2007)
    Changed the 'ibc' and 'uc' Rime modules into the more descriptive names 'broadcast' and 'unicast'
    This is an initial commit of an implementation of the Chameleon
    architecture for the Rime stack for Contiki. The Chameleon
    architecture separates the header processing from the Rime protocol
    logic. Instead of having each protocol create its own part of the
    packet header, protocols use packet attributes. Before sending a
    packet, a special Chameleon header processing module creates a packet
    header from the packet attributes. The same Chameleon module parses
    incoming packets and creates packet attributes from the header.
    
    The details are in our SenSys 2007 paper:
    
    Adam Dunkels, Fredrik Osterlind, Zhitao He. An Adaptive Communication
    Architecture for Wireless Sensor Networks. In Proceedings of the Fifth
    ACM Conference on Networked Embedded Sensor Systems (SenSys 2007),
    Sydney, Australia, November 2007.
    
    http://www.sics.se/~adam/dunkels07adaptive.pdf
    
    This is a rewrite of the code that was developed for the paper.
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    anonymous -> identified.
    Documentation updates
    Documentation fixes
    Documentation fixes
    Added *_close() function to all Rime modules
    API change for Rime: *_setup() renamed to *_open()
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Renamed ulayer -> callbacks
    Initial import of the experimental Rime code into the SourceForge CVS.
    Added *experimental* module for sending raw (non-routed) packets from Contiki. The name of the module is likely to change.
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Changed the name of the rimeaddr module to linkaddr
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Use the list_item_next() API
    API change to the announcement module: an annoucement can now be registered without a value. Such announcements are never transmitted to neighbors, until the announcement's value is set.
    Added a bump method that tells the announcement module that a value has changed sufficiently much for it to be pushed out quicker
    Added the option to specify the old value to observers so that they can determine if the announcement should be sent out quicklier than otherwise
    Made rimeaddr_t pointers const where they should be.
    A new experimental network primitive called an 'announcement'. An
    announcement is an (ID, value) tuple that is disseminated to local
    area neighbors. An application or protocol can explicitly listen to
    announcements from neighbors. When an announcement is heard, a
    callback is invoked.
    
    Announcements can be used for a variety of network mechanisms such as
    neighbor discovery, node-level service discovery, or routing metric
    dissemination.
    
    Application programs and protocols register announcements with the
    announcement module. An announcement back-end, implemented by the
    system, takes care of sending out announcements over the radio, as
    well as collecting announcements heard from neighbors.
    Make netsim more like the esb target
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Replaced default link estimator with an exponential weighted moving average, which reduces memory consumption per neighbor.
    rtmetric values should always be computed as 16-bit values
    Significant improvements to the Collect protocol:
    
    * Loop detection and untangling. Now uses in-band loop detection that
      works.
    
    * Link quality estimation. Now starts with a conservative /
      pessimistic estimate for new links.
    
    * Retransmissions. MAC layer and network layer retransmissions are now
      decoupled.
    
    * Loss handling. Deals better with losses now.
    
    * Concurrent applications. Each connection now maintains its own
      neighbor table with separated cost to sink estimates for each
      connection.
    Rewrite of important parts of the Collect logic: link estimation
    calculation and parent selection.  This fixes a severe bug that caused
    loops when packets were erroneously retransmitted due to ACK loss.
    Changed the name of the rimeaddr module to linkaddr
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    bugfix: transfer did not terminate correctly when last packet was full
    Made rimeaddr_t pointers const where they should be.
    Changed name of Rime module ruc to unicast
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Reliable single-hop unicast bulk transfer
    Added *_close() function to all Rime modules
    API change for Rime: *_setup() renamed to *_open()
    Renamed ulayer -> callbacks
    Initial import of the experimental Rime code into the SourceForge CVS.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    * Made Chameleon header processing module configurable (CHAMELEON_CONF_MODULE)
    * Removed the unused init function from header processing modules
    * Added option CHAMELEON_CONF_WITH_MAC_LINK_ADDRESSES to specify that
      MAC link addresses should be used instead of Chameleon's own encoding
      of sender and receiver. This avoids encoding the link addresses twice
      when the MAC RDC has its own addresses.
    Reworked the Rime/Chameleon interface so that packets now always hit Rime before Chameleon. Chameleon is now only called by Rime. This makes packet sniffing easier, and allows for sniffing packets after their header has been processed by Chameleon, thereby making per-packet power profiling much easier to implement
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    chameleon returns 1 only on successful rime_output()
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Set the channel as a packet attribute
    Avoid crashing if Rime/Chameleon is not initialized when Rime code is run
    Ensure that header_module is != NULL before calling it. Define and print headers only if DEBUG is set.
    -debugging output
    This is an initial commit of an implementation of the Chameleon
    architecture for the Rime stack for Contiki. The Chameleon
    architecture separates the header processing from the Rime protocol
    logic. Instead of having each protocol create its own part of the
    packet header, protocols use packet attributes. Before sending a
    packet, a special Chameleon header processing module creates a packet
    header from the packet attributes. The same Chameleon module parses
    incoming packets and creates packet attributes from the header.
    
    The details are in our SenSys 2007 paper:
    
    Adam Dunkels, Fredrik Osterlind, Zhitao He. An Adaptive Communication
    Architecture for Wireless Sensor Networks. In Proceedings of the Fifth
    ACM Conference on Networked Embedded Sensor Systems (SenSys 2007),
    Sydney, Australia, November 2007.
    
    http://www.sics.se/~adam/dunkels07adaptive.pdf
    
    This is a rewrite of the code that was developed for the paper.
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Updated debug printouts
    Debug formatting fixes
    Bugfixes, updates
    Debug output
    Documentation fixes
    Renamed rimebuf_hdrextend() to rimebuf_hdralloc()
    Fixed debug output
    Added *_close() function to all Rime modules
    API change for Rime: *_setup() renamed to *_open()
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Renamed ulayer -> callbacks
    Initial import of the experimental Rime code into the SourceForge CVS.
    Added *experimental* module for sending raw (non-routed) packets from Contiki. The name of the module is likely to change.
    Import of the contiki-2.x development code from the SICS internal CVS server
    [core/net/rime] Doxygen fixes
    [doc] Various fixes for doxygen grouping etc.
    Changed the name of the rimeaddr module to linkaddr
    Added NULL pointer guards
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added the MAC layer callback functionality so that the Rime network layer gets information from the MAC about the status of sent packets: were they successfully transmitted, or was there a collisions? How many retries were there?
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Changed the 'ibc' and 'uc' Rime modules into the more descriptive names 'broadcast' and 'unicast'
    This is an initial commit of an implementation of the Chameleon
    architecture for the Rime stack for Contiki. The Chameleon
    architecture separates the header processing from the Rime protocol
    logic. Instead of having each protocol create its own part of the
    packet header, protocols use packet attributes. Before sending a
    packet, a special Chameleon header processing module creates a packet
    header from the packet attributes. The same Chameleon module parses
    incoming packets and creates packet attributes from the header.
    
    The details are in our SenSys 2007 paper:
    
    Adam Dunkels, Fredrik Osterlind, Zhitao He. An Adaptive Communication
    Architecture for Wireless Sensor Networks. In Proceedings of the Fifth
    ACM Conference on Networked Embedded Sensor Systems (SenSys 2007),
    Sydney, Australia, November 2007.
    
    http://www.sics.se/~adam/dunkels07adaptive.pdf
    
    This is a rewrite of the code that was developed for the paper.
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Updated debug printouts
    Debug formatting fixes
    Bugfixes, updates
    Debug output
    Documentation fixes
    Renamed rimebuf_hdrextend() to rimebuf_hdralloc()
    Fixed debug output
    Added *_close() function to all Rime modules
    API change for Rime: *_setup() renamed to *_open()
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Renamed ulayer -> callbacks
    Initial import of the experimental Rime code into the SourceForge CVS.
    Added *experimental* module for sending raw (non-routed) packets from Contiki. The name of the module is likely to change.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Corrected debug output
    * Made Chameleon header processing module configurable (CHAMELEON_CONF_MODULE)
    * Removed the unused init function from header processing modules
    * Added option CHAMELEON_CONF_WITH_MAC_LINK_ADDRESSES to specify that
      MAC link addresses should be used instead of Chameleon's own encoding
      of sender and receiver. This avoids encoding the link addresses twice
      when the MAC RDC has its own addresses.
    Fixed sdcc compiler problem: function pointers cannot be NULL, so added a dummy function instead
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Bugfix: the Chameleon header parser modules should not clear the packet attributes, because the MAC or radio layers may have added attributes already
    Added CC_CONST_FUNCTION as a work-around to the sdcc const function pointer bug
    fixed typo
    fixed alignment problem with rime/chameleon
    Stick to CC_INLINE.
    This is an initial commit of an implementation of the Chameleon
    architecture for the Rime stack for Contiki. The Chameleon
    architecture separates the header processing from the Rime protocol
    logic. Instead of having each protocol create its own part of the
    packet header, protocols use packet attributes. Before sending a
    packet, a special Chameleon header processing module creates a packet
    header from the packet attributes. The same Chameleon module parses
    incoming packets and creates packet attributes from the header.
    
    The details are in our SenSys 2007 paper:
    
    Adam Dunkels, Fredrik Osterlind, Zhitao He. An Adaptive Communication
    Architecture for Wireless Sensor Networks. In Proceedings of the Fifth
    ACM Conference on Networked Embedded Sensor Systems (SenSys 2007),
    Sydney, Australia, November 2007.
    
    http://www.sics.se/~adam/dunkels07adaptive.pdf
    
    This is a rewrite of the code that was developed for the paper.
    Fix "multiple use of section label 'channels'" warning in various rime headers
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    [core/net/rime] Doxygen fixes
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added a function for obtaining beacon intervals
    Broadcast announcement back-end that sends announcement data as broadcasts, with increasing transmission intervals
    A new experimental network primitive called an 'announcement'. An
    announcement is an (ID, value) tuple that is disseminated to local
    area neighbors. An application or protocol can explicitly listen to
    announcements from neighbors. When an announcement is heard, a
    callback is invoked.
    
    Announcements can be used for a variety of network mechanisms such as
    neighbor discovery, node-level service discovery, or routing metric
    dissemination.
    
    Application programs and protocols register announcements with the
    announcement module. An announcement back-end, implemented by the
    system, takes care of sending out announcements over the radio, as
    well as collecting announcements heard from neighbors.
    Documentation updates
    Documentation fixes
    Initial import of the experimental Rime code into the SourceForge CVS.
    Functions for sending individual UDP datagrams
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    [core/net/rime] Doxygen fixes
    Changed the name of the rimeaddr module to linkaddr
    Added NULL pointer guards
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Safeguard against NULL arguments
    Bugfix: memory wasn't freed when a neighbor was dropped from the list. Also increase the max age to 180 minutes to allow for regular beacons to refresh the neighbor before it is dropped.
    Added a lifetime for link estimates: if they are too old, they are
    reset so that a new probing period can produce more up-to-date
    estimates. Added a congestion mechanism whereby a neighbor can be
    marked as being congested for a period of time, during which the ETX
    for the neighbor will be artificially inflated.
    Cleaned up the collect neighbor management code
    Added a function for obtaining the link estimate and rtmetric for a neighbor
    Significant improvements to the Collect protocol:
    
    * Loop detection and untangling. Now uses in-band loop detection that
      works.
    
    * Link quality estimation. Now starts with a conservative /
      pessimistic estimate for new links.
    
    * Retransmissions. MAC layer and network layer retransmissions are now
      decoupled.
    
    * Loss handling. Deals better with losses now.
    
    * Concurrent applications. Each connection now maintains its own
      neighbor table with separated cost to sink estimates for each
      connection.
    Rewrite of important parts of the Collect logic: link estimation
    calculation and parent selection.  This fixes a severe bug that caused
    loops when packets were erroneously retransmitted due to ACK loss.
    Use the list_item_next() API
    Moved ctimer.[ch] from their old and illogical location in core/net/rime to a more appropriate place in core/sys
    Renamed the neighbor module to collect-neighbor, as it is only used by the collect module and is not a generic neighbor module
    Increased neighbor lifetime to allow for longer neighbor announcement intervals
    Added debug printout
    Moved the neigbor_init() call to the collect module, since it is the only one that currently uses it
    Made rimeaddr_t pointers const where they should be.
    prevent neighbor ETX from wrap-over
    Made max number of neighbors configurable
    Increased size of temporary stack value to avoid overflowing when computation is done with 8-bit integers
    use u8 when writing rime addresses.
    Neighbor ETX should accumulate over retransmission timeouts;
    Best neighbor has minimum sum of routing metric and neighbor ETX. Previously best neighbor prioritizes routing metric before neighbor ETX, which often causes a poor neighbor with a good upstream path to be selected.
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Rewrote the neighbor code to use memb and a list instead of a static array
    Maximum rtmetric now defined by the collect module - a bit of a hack since this probably should be configured elsewhere (and be referenced by both the collect and the neighbor module) but it will do for now
    Added function for accessing a specific neighbor
    Re-added hop count to header, fixes related to ETX computation: adv packets do not add a good etx, timedout packets do not restore the neighbor age, removed unused code
    Updated tree to use expected transmissions (etx) as routing metric
    Increased default neighbor lifetime, removed debug output
    Documentation updates
    Timeouts configurable at run-time
    Added stdio.h for printf.
    ctimer_set() bugfix
    Added automatic timeouts
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Compiler warning fix
    Initial import of the experimental Rime code into the SourceForge CVS.
    [core/net/rime] Avoid equal group titles in same group
    [doc] Various fixes for doxygen grouping etc.
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Avoid using memcpy on unaligned uint16_t variables, because certain compilers will optimize this code to a direct copy instruction that will result in unaligned memory access. Thanks to Angelo Compagnucci for reporting this problem.
    Do not reduce transmission interval, unless explicitly told so with the bump flag
    added missing include
    Use the list_item_next() API
    Guard against malformed broadcast announcements
    API change to the announcement module: an annoucement can now be registered without a value. Such announcements are never transmitted to neighbors, until the announcement's value is set.
    bugfix: structs should be declared static
    Broadcast announcement back-end that sends announcement data as broadcasts, with increasing transmission intervals
    Added the option to specify the old value to observers so that they can determine if the announcement should be sent out quicklier than otherwise
    Made number of duplicate announcements configurable
    Bugfix for alignment issue. Added mechanism that allows five duplicate announcements before suppressing one's own.
    bugfix: alignment problem caused by previous bugfix
    Alignment bugfix
    Made rimeaddr_t pointers const where they should be.
    Bugfix by Takahide Matsutsuka: too few items in array, which caused problems with sdcc
    Fixed minor bug in comment
    Send an announcement packet only if there are more than zero announcemnets
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    A new experimental network primitive called an 'announcement'. An
    announcement is an (ID, value) tuple that is disseminated to local
    area neighbors. An application or protocol can explicitly listen to
    announcements from neighbors. When an announcement is heard, a
    callback is invoked.
    
    Announcements can be used for a variety of network mechanisms such as
    neighbor discovery, node-level service discovery, or routing metric
    dissemination.
    
    Application programs and protocols register announcements with the
    announcement module. An announcement back-end, implemented by the
    system, takes care of sending out announcements over the radio, as
    well as collecting announcements heard from neighbors.
    Changed name of suc module to stunicast
    Changed the 'ibc' and 'uc' Rime modules into the more descriptive names 'broadcast' and 'unicast'
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Added API to retrieve address of current receiver
    Stubborn timer now configurable on a per-transmission basis.
    Documentation updates
    Debug output
    Free queued packet when closing
    Renamed suc_send_uc() to suc_send(), fixed debug output
    Added *_close() function to all Rime modules
    API change for Rime: *_setup() renamed to *_open()
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Renamed ulayer -> callbacks
    Initial import of the experimental Rime code into the SourceForge CVS.
    Make netsim more like the esb target
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix "multiple use of section label 'channels'" warning in various rime headers
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Changed the name of the rimeaddr module to linkaddr
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Moved ctimer.[ch] from their old and illogical location in core/net/rime to a more appropriate place in core/sys
    Made rimeaddr_t pointers const where they should be.
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Added Rime documentation from the Rime/Chameleon paper (SenSys 2007)
    Moved packet attributes specifications from rimebuf.h to the appropriate protocol header files
    Renamed Rime nf module to netflood
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Bugfixes, updates
    Documentation updates
    Timeouts configurable at run-time
    nf is now based on uibc
    Added *_close() function to all Rime modules
    API change for Rime: *_setup() renamed to *_open()
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Renamed ulayer -> callbacks
    Sequence number now reported
    New rime module: best-effort network flooding (nf)
    Initial import of the experimental Rime code into the SourceForge CVS.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix "multiple use of section label 'channels'" warning in various rime headers
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Changed the name of the rimeaddr module to linkaddr
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added missing include
    Moved ctimer.[ch] from their old and illogical location in core/net/rime to a more appropriate place in core/sys
    Improved backoff management: timer is now doubled on every transmission, until the using module calls the neighbor_discovery_start() function again. Don't cancel the transmission even if a lower value arrives (this fixes a problem with multi-hop ETX propagaion).
    Made rimeaddr_t pointers const where they should be.
    include ctimer.h, since ctimer's are used in the neighbor_discovery_conn struct.
    Fixed a bunch of bugs in the collection neighbor announcement/discovery code: neighbor announcments were not repeated unless there was a change in the ETX val. Neighbor announcements happened to often when there were changes in the ETX.
    Rewrote the neighbor discovery code so that messages are suppressed if a lower rtmetric is received. This reduces the overall number of broadcast packets.
    Changed the 'ibc' and 'uc' Rime modules into the more descriptive names 'broadcast' and 'unicast'
    Minor source code reformatting
    Rewrote the code to use polite broadcasts istead of regular broadcasts. This reduces the amount of broadcast traffic, particularly for dense networks.
    Documentation updates
    Changed name on the neighbor discovery module from (cryptic) 'nbh' to 'neighbor-discovery'
    Re-added hop count to header, fixes related to ETX computation: adv packets do not add a good etx, timedout packets do not restore the neighbor age, removed unused code
    Added neighborhood discovery module
    Make netsim more like the esb target
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    fixed excessive retransmissions of junk packets after runicast timeout
    fixed stuck packet ID for next packet after runicast timeout
    * Added configurable default number of transmissions for CSMA to use when not specified using packetbuf attributes (CSMA_CONF_MAX_MAC_TRANSMISSIONS).
    * Renamed packetbuf attribute PACKETBUF_ATTR_MAX_MAC_REXMIT to PACKETBUF_ATTR_MAX_MAC_TRANSMISSIONS where value 0 (attribute not set) means that default number of transmissions should be used.
    Remove old neighbor.h inclusion
    Added the MAC layer callback functionality so that the Rime network layer gets information from the MAC about the status of sent packets: were they successfully transmitted, or was there a collisions? How many retries were there?
    Made retransmission timeout configurable
    clear transmission flag if send failed
    Made rimeaddr_t pointers const where they should be.
    Added debug printouts
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    bugfix: remember active transmissions (sender side) instead of last received packets (receiving side). allows several nodes sending to a single receiver.
    
    + added function for checking if runicast is currently transmitting (non-acked) data
    remembering last received packet id to avoid multiple recv callbacks for the same retransmitted packet (but still sending back acks of course)
    Only send ACK if it was possible to allocate a queuebuf to hold the data packet.
    Changed name of Rime module ruc to unicast
    Changed name of suc module to stunicast
    This is an initial commit of an implementation of the Chameleon
    architecture for the Rime stack for Contiki. The Chameleon
    architecture separates the header processing from the Rime protocol
    logic. Instead of having each protocol create its own part of the
    packet header, protocols use packet attributes. Before sending a
    packet, a special Chameleon header processing module creates a packet
    header from the packet attributes. The same Chameleon module parses
    incoming packets and creates packet attributes from the header.
    
    The details are in our SenSys 2007 paper:
    
    Adam Dunkels, Fredrik Osterlind, Zhitao He. An Adaptive Communication
    Architecture for Wireless Sensor Networks. In Proceedings of the Fifth
    ACM Conference on Networked Embedded Sensor Systems (SenSys 2007),
    Sydney, Australia, November 2007.
    
    http://www.sics.se/~adam/dunkels07adaptive.pdf
    
    This is a rewrite of the code that was developed for the paper.
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Removed unused code
    Call the timeout function only if it is non-NULL
    Documentation updates
    Updated ruc to send ACKs before notifying applications, and API support for the etx-based tree code
    only update rimestats rexmit for retransmissions + added debug output when retransmitting
    Turn debug output off (which was inadvertedly left on)
    Multiplicative increase in retransmission time. Statistics. Max amount of retransmissions now configurable on a per-packet basis
    Bugfixes, updates
    Made the number of retransmissions configurable
    Debug output
    Renamed rimebuf_hdrextend() to rimebuf_hdralloc()
    Renamed suc_send_uc() to suc_send(), fixed debug output
    Added *_close() function to all Rime modules
    API change for Rime: *_setup() renamed to *_open()
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Renamed ulayer -> callbacks
    Initial import of the experimental Rime code into the SourceForge CVS.
    Make netsim more like the esb target
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added missing #include sys/cc.h to make system compile
    CC_CONST_FUNCTION replaces some const keywords in order to workaround a sdcc bug, which cannot handle function pointers as const.
    This is an initial commit of an implementation of the Chameleon
    architecture for the Rime stack for Contiki. The Chameleon
    architecture separates the header processing from the Rime protocol
    logic. Instead of having each protocol create its own part of the
    packet header, protocols use packet attributes. Before sending a
    packet, a special Chameleon header processing module creates a packet
    header from the packet attributes. The same Chameleon module parses
    incoming packets and creates packet attributes from the header.
    
    The details are in our SenSys 2007 paper:
    
    Adam Dunkels, Fredrik Osterlind, Zhitao He. An Adaptive Communication
    Architecture for Wireless Sensor Networks. In Proceedings of the Fifth
    ACM Conference on Networked Embedded Sensor Systems (SenSys 2007),
    Sydney, Australia, November 2007.
    
    http://www.sics.se/~adam/dunkels07adaptive.pdf
    
    This is a rewrite of the code that was developed for the paper.
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix "multiple use of section label 'channels'" warning in various rime headers
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    [core/net/rime] Avoid equal group titles in same group
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added missing include
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Cleaned up #includes to avoid cyclic dependencies - the Rime includes no longer depend on rime.h
    Fixed compiler warnings to make code compile with gcc's -pedantic switch
    Bugfixes, updates
    Now keeps track of highest chunk number heard and sends NACKs until it sees it
    Made send intervals configurable when sending a new file
    Documentation updates
    Moved rudolph{0,1} from apps/ directory into core/net/rime
    Removed the use of CFS. Instead, provide callbacks for the using application to fill in data.
    Reliable multi-hop bulk transfer based on trickle and local uabc repairs
    A simple program for reliably sending a file to all neihgboring nodes
    Renamed Rime output function
    A Rime driver for the simple-cc2420 driver
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Add mesh_ready() to mesh
    mesh_ready checkes whether a packet is queued. This allows to avoid
    packet loss at application level.
    Check callback pointers to avoid calling a NULL pointer
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Improved multihop/mesh route discovery.
    
    Packetbuffer is now saved before route discovery and resent when a
    route is found.
    
    This solves the following problems:
    - First packet sent to a certain node is corrupted.
    - Packet to be forwarded that triggers route discovery is lost.
    Rediscover lost routes when forwarding packets. Also refresh route entries when sending packets through them. Patch from Jaroslav Meduna.
    Signal the result of transmissions attempts made in the mesh module. Patch from Moritz Struebe
    Made rimeaddr_t pointers const where they should be.
    Refresh routes when hearing a packet from a neighbor
    Added const to constant parameters (rime addresses)
    Made constant addresses const
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Renamed Rime module mh to multihop
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Increased timeouts, updated to match new mh API
    Added hopcount to callbacks
    Correct route lookup
    Added missing forwarding function
    Bugfixes, updates
    Documentation fixes
    Timeouts configurable at run-time
    Refactored the mesh code by splitting multi-hop forwarding and route discovery. The mesh module is now much simpler than before
    Added *_close() function to all Rime modules
    API change for Rime: *_setup() renamed to *_open()
    New Rime module: tree, a converge cast / tree data collection protocol
    New Rime module: mesh, a mesh routing protocol
    Initial version of a simple mesh routing protocol written with Rime
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Changed name of the sabc module to stbroadcast
    This is an initial commit of an implementation of the Chameleon
    architecture for the Rime stack for Contiki. The Chameleon
    architecture separates the header processing from the Rime protocol
    logic. Instead of having each protocol create its own part of the
    packet header, protocols use packet attributes. Before sending a
    packet, a special Chameleon header processing module creates a packet
    header from the packet attributes. The same Chameleon module parses
    incoming packets and creates packet attributes from the header.
    
    The details are in our SenSys 2007 paper:
    
    Adam Dunkels, Fredrik Osterlind, Zhitao He. An Adaptive Communication
    Architecture for Wireless Sensor Networks. In Proceedings of the Fifth
    ACM Conference on Networked Embedded Sensor Systems (SenSys 2007),
    Sydney, Australia, November 2007.
    
    http://www.sics.se/~adam/dunkels07adaptive.pdf
    
    This is a rewrite of the code that was developed for the paper.
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Removed debug output
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Bugfixes, updates
    Made send intervals configurable when sending a new file
    Documentation updates
    Make consistent presumptions about inlcude paths.
    Moved rudolph{0,1} from apps/ directory into core/net/rime
    Renamed rimebuf_hdrextend() to rimebuf_hdralloc()
    Removed the use of CFS. Instead, provide callbacks for the using application to fill in data.
    Bugfixes, added version API, larger data size
    A simple program for reliably sending a file to all neihgboring nodes
    Fix "multiple use of section label 'channels'" warning in various rime headers
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Moved ctimer.[ch] from their old and illogical location in core/net/rime to a more appropriate place in core/sys
    Added a timer that randomizes the retransmission of an incoming new trickle version to avoid broadcast collisions
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Rewrote the trickle code to run directly over the broadcast primitive: the previous implementation did not work as expected, because packets were not supressed correctly by the previous underlying netflood primitive
    Renamed Rime nf module to netflood
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Minor type change
    Cleaned up #includes to avoid cyclic dependencies - the Rime includes no longer depend on rime.h
    Bugfixes, updates
    Documentation updates
    Added configurable interval
    Trickle implementation for Rime
    Added *_close() function to all Rime modules
    API change for Rime: *_setup() renamed to *_open()
    New Rime module: tree, a converge cast / tree data collection protocol
    New Rime module: mesh, a mesh routing protocol
    Initial version of a simple mesh routing protocol written with Rime
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Added NULL pointer guards
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Several compiler warning fixes:
    
         * msp430: fix "implicit declaration of function" warnings in clock.c, by including watchdog.h;
         * sky: fix a couple pointer target signedness warnings;
         * core: fix several signed/unsigned comparison warnings;
         * framer-802154: "const static" -> "static const" to fix compiler warnings;
         * core: comment or remove unused variables and function definitions.
    
    Signed-off-by: Lionel Debroux <lionel_debroux@yahoo.fr>
    Signed-off-by: Mariano Alvira <mar@devl.org>
    Replaced default link estimator with an exponential weighted moving average, which reduces memory consumption per neighbor.
    Rewrote the initial link estimate logic: link estimates are now
    computed only over the actual samples, not over the entire
    buffer. Also, the initial link estimate is much more conservative now
    (16 transmissions) to favor links that have been probed, and which
    therefore are likely to have better ETXs.
    rtmetric values should always be computed as 16-bit values
    Made the initial link estimate explicit
    Significant improvements to the Collect protocol:
    
    * Loop detection and untangling. Now uses in-band loop detection that
      works.
    
    * Link quality estimation. Now starts with a conservative /
      pessimistic estimate for new links.
    
    * Retransmissions. MAC layer and network layer retransmissions are now
      decoupled.
    
    * Loss handling. Deals better with losses now.
    
    * Concurrent applications. Each connection now maintains its own
      neighbor table with separated cost to sink estimates for each
      connection.
    Rewrite of important parts of the Collect logic: link estimation
    calculation and parent selection.  This fixes a severe bug that caused
    loops when packets were erroneously retransmitted due to ACK loss.
    Changed the name of the 'serial' module to 'serial-line' to signify that the module is about lines of data from the serial port, not individual bytes, and to make sdcc happy
    Minor documentation update
    Added cr/nl to end of prompt to make scripting easier
    Guard against NULL input, remove unguarded printf()
    Broke out serial-shell from the shell app into its own app. Project can use the serial-shell to get a shell running over the serial line, just like a project can use the telnetd to get a shell running over Telnet/TCP/IP.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Updated to new radio_driver API
    tr1001 init fix
    Added radio sniffer program
    More uip_ipaddr_t fixes.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Use the list_item_next() API
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    This is an initial commit of an implementation of the Chameleon
    architecture for the Rime stack for Contiki. The Chameleon
    architecture separates the header processing from the Rime protocol
    logic. Instead of having each protocol create its own part of the
    packet header, protocols use packet attributes. Before sending a
    packet, a special Chameleon header processing module creates a packet
    header from the packet attributes. The same Chameleon module parses
    incoming packets and creates packet attributes from the header.
    
    The details are in our SenSys 2007 paper:
    
    Adam Dunkels, Fredrik Osterlind, Zhitao He. An Adaptive Communication
    Architecture for Wireless Sensor Networks. In Proceedings of the Fifth
    ACM Conference on Networked Embedded Sensor Systems (SenSys 2007),
    Sydney, Australia, November 2007.
    
    http://www.sics.se/~adam/dunkels07adaptive.pdf
    
    This is a rewrite of the code that was developed for the paper.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Updated to new radio_driver API
    tr1001 init fix
    Added radio sniffer program
    More uip_ipaddr_t fixes.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix some unresolved references
    
    * Either by removing them
    * Or by resolving them
    Moved packetqueue to core/net/rime, as it is only used by the Rime collect protocol
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Moved ctimer.[ch] from their old and illogical location in core/net/rime to a more appropriate place in core/sys
    Added function for obtaining packet queue length
    fixed some documentation typos.
    
    also uc -> unicast, stuc -> stunicast.
    minor documentation fixes
    New module: packetqueue. The packetqueue module maintains packet queues for other modules.
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Added NULL pointer guards
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added the MAC layer callback functionality so that the Rime network layer gets information from the MAC about the status of sent packets: were they successfully transmitted, or was there a collisions? How many retries were there?
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    This is an initial commit of an implementation of the Chameleon
    architecture for the Rime stack for Contiki. The Chameleon
    architecture separates the header processing from the Rime protocol
    logic. Instead of having each protocol create its own part of the
    packet header, protocols use packet attributes. Before sending a
    packet, a special Chameleon header processing module creates a packet
    header from the packet attributes. The same Chameleon module parses
    incoming packets and creates packet attributes from the header.
    
    The details are in our SenSys 2007 paper:
    
    Adam Dunkels, Fredrik Osterlind, Zhitao He. An Adaptive Communication
    Architecture for Wireless Sensor Networks. In Proceedings of the Fifth
    ACM Conference on Networked Embedded Sensor Systems (SenSys 2007),
    Sydney, Australia, November 2007.
    
    http://www.sics.se/~adam/dunkels07adaptive.pdf
    
    This is a rewrite of the code that was developed for the paper.
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Updated debug printouts
    Better debug output
    corrected debug print
    Bugfixes, updates
    Documentation updates
    Debug output
    Minor documentation change
    Documentation fixes
    Renamed rimebuf_hdrextend() to rimebuf_hdralloc()
    Fixed debug output
    Added *_close() function to all Rime modules
    API change for Rime: *_setup() renamed to *_open()
    Renamed input function to rime_input() and the output function to rime_driver_send()
    Renamed ulayer -> callbacks
    Renamed driver output function to abc_driver_send
    Generic abc module
    Initial import of the experimental Rime code into the SourceForge CVS.
    Added radio sniffer program
    More uip_ipaddr_t fixes.
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    [doc] Various fixes for doxygen grouping etc.
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Removed const qualifier to conform with the rest of the Rime interface.
    Improved multihop/mesh route discovery.
    
    Packetbuffer is now saved before route discovery and resent when a
    route is found.
    
    This solves the following problems:
    - First packet sent to a certain node is corrupted.
    - Packet to be forwarded that triggers route discovery is lost.
    Made rimeaddr_t pointers const where they should be.
    Bugfix: must copy the sender and receiver addresses from the packetbuf buffer, otherwise an application program may overwrite them
    Bugfix in debug message printout
    Added const to constant parameters (rime addresses)
    The multihop module used the pre-chameleon style packet headers. Converted it to use packet attributes instead of packet headers
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Renamed Rime module mh to multihop
    Changed the 'ibc' and 'uc' Rime modules into the more descriptive names 'broadcast' and 'unicast'
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Debug output slightly improved
    Bugfix: forwarding functions now have access to its packet headers. Added last hop to the arguments to the reception function
    Added hopcount to callbacks
    Updated debug output
    Don't call the forward function if it is not defined
    Updated the multihop forwarding interface to match the intended operation of the module: to let the user produce the route, and the mh module only does the forwarding
    Documentation updates
    Renamed rimebuf_hdrextend() to rimebuf_hdralloc()
    Best effort multi-hop routing
    Unique identified best effort local area broadcast
    Split interval: one half listen only, second half send packet
    New Rime module: unique anonymous best effort broadcast
    Added *_close() function to all Rime modules
    API change for Rime: *_setup() renamed to *_open()
    Renamed ulayer -> callbacks
    Initial import of the experimental Rime code into the SourceForge CVS.
    Make netsim more like the esb target
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    [core/net/rime] Doxygen fixes
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Avoid using memcpy on unaligned uint16_t variables, because certain compilers will optimize this code to a direct copy instruction that will result in unaligned memory access. Thanks to Angelo Compagnucci for reporting this problem.
    added missing include
    Use the list_item_next() API
    updated function: has_value argument was missing
    bugfix: structs should be declared static
    Slight API change to support bump functionality
    Added the option to specify the old value to observers so that they can determine if the announcement should be sent out quicklier than otherwise
    Made number of duplicate announcements configurable
    Bugfix for alignment issue. Added mechanism that allows five duplicate announcements before suppressing one's own.
    bugfix: alignment problem caused by previous bugfix
    Alignment bugfix
    Made rimeaddr_t pointers const where they should be.
    Bugfix by Takahide Matsutsuka: too few items in array, which caused problems with sdcc
    Fixed minor bug in comment
    Send an announcement packet only if there are more than zero announcemnets
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    A new experimental network primitive called an 'announcement'. An
    announcement is an (ID, value) tuple that is disseminated to local
    area neighbors. An application or protocol can explicitly listen to
    announcements from neighbors. When an announcement is heard, a
    callback is invoked.
    
    Announcements can be used for a variety of network mechanisms such as
    neighbor discovery, node-level service discovery, or routing metric
    dissemination.
    
    Application programs and protocols register announcements with the
    announcement module. An announcement back-end, implemented by the
    system, takes care of sending out announcements over the radio, as
    well as collecting announcements heard from neighbors.
    Changed name of suc module to stunicast
    Changed the 'ibc' and 'uc' Rime modules into the more descriptive names 'broadcast' and 'unicast'
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Added API to retrieve address of current receiver
    Stubborn timer now configurable on a per-transmission basis.
    Documentation updates
    Debug output
    Free queued packet when closing
    Renamed suc_send_uc() to suc_send(), fixed debug output
    Added *_close() function to all Rime modules
    API change for Rime: *_setup() renamed to *_open()
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Renamed ulayer -> callbacks
    Initial import of the experimental Rime code into the SourceForge CVS.
    Make netsim more like the esb target
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix "multiple use of section label 'channels'" warning in various rime headers
    Moved packetqueue to core/net/rime, as it is only used by the Rime collect protocol
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Changed the name of the rimeaddr module to linkaddr
    collect: making some protocol parameters configurable by COLLECT_CONF_ style defines
    
    TTL (which has a rather low default of 15), MAC level retransmissions,
    overall number of retransmissions, and the header bits dedicated to these
    were all fixed in the collect.h and collect.c, without a simple way to
    override them.
    Extracted these as COLLECT_CONF_ parameters, keeping defaults as they were
    before.
    
    Signed-off-by: Csaba Kiraly <kiraly@disi.unitn.it>
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Increased the max ETX to allow for longer paths even with the initial conservative ETX estimate; made collect use announcements by default
    Reduced the value of the max depth, so that a count-to-infinity loop will not count too long before hitting the maximum value. This is important when a network loses its sink, so that packets are not forwarded around the network for ever.
    Added a function for obtaining the current parent
    Rewrote proactive link estimator to be invoked randomly instead of triggered by an empty queue; this makes network bootups because nodes are not synchronized
    Bugfixes and improvements: rtmetrics are now 16-bit clean. Added experimental feature that proactively probes neighbors that have not yet been tried out, in order to get an initial ETX for them.
    A number of changes to the collect code:
    * Added an optional "keep alive" mechanism whereby an idle network is
    periodically probed by dummy packets to maintain a recent quality
    metric when there is no traffic.
    * Bugfix in when new routing metrics should be advertised
    * Rewrote the ACK logic so that a queuebuf is not allocated for each
    ack, only for those acks generated by the sink node.
    * Updated the wrap-around logic for sequence numbers: when a sequence
    number wraps, it won't go back to 0. Instead, it wraps to 128. This
    allows us to understand when a node has rebooted: when its seqno is <
    128, it has recently rebooted.
    Significant improvements to the Collect protocol:
    
    * Loop detection and untangling. Now uses in-band loop detection that
      works.
    
    * Link quality estimation. Now starts with a conservative /
      pessimistic estimate for new links.
    
    * Retransmissions. MAC layer and network layer retransmissions are now
      decoupled.
    
    * Loss handling. Deals better with losses now.
    
    * Concurrent applications. Each connection now maintains its own
      neighbor table with separated cost to sink estimates for each
      connection.
    Rewrite of important parts of the Collect logic: link estimation
    calculation and parent selection.  This fixes a severe bug that caused
    loops when packets were erroneously retransmitted due to ACK loss.
    Changed packet id to use 8 bit instead of 4 bit
    added missing include
    Improved parent management: parent neighbor is retained until a better neighbor is found (with 1 ETX less than parent). Don't drop parent neighbors when loop is detected (loops are transient anyway).
    Added a parameter to collect_open() that specifies whether or not the node should be a router for packets, or only an originator of packets. Updated the collect module to the new annoucement API.
    Increased the number of bits that repressent the MAX_RETRANSMITS attribute to allow for more than 7 hop-by-hop retransmissions
    Significant rework of the Contiki data collection protocol:
    
    * the new version makes use of MAC-layer feedback so that bad paths
      can be identified quicker and then avoided.
    
    * the new code uses transport layer ACKs that contain feedback from
      the collect protocol: when a packet cannot be forwarded due to lack
      of resources, the ACK contains a flag that indicates that the packet
      could not be forwarded. ACKs also contain the routing metric of the
      sender, which improves agility in face of rapid path changes.
    
    * loop detection and management has been improved: with higher path
      metric agility, the system is more prone to short-lived routing
      loops. Instead of dropping looping packets, the new version adjusts
      the routing metric for the routes that exhibit loops so that the
      risk for future loops is reduced.
    
    * make use of packet attributes to inform the MAC layer of how many
      times packets should be retransmitted.
    Better loop handling: when a loop is detected, the neighbor to which the packet was originally sent gets an inflated ETX; made sure that collect without announcments work; increased timeouts, to work nicer in larger networks
    Rewrite of the collect module. The new version uses a packet queue for outgoing and forwarded packets so that more than one packet can be forwarded at the same time. The new version uses the packetqueue module to maintain the packet queue.
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Rewrote the collect module so that it uses the announcement module rather than the neighbor-discovery module. This makes it possible to implement other annoumcement back-ends than the traditional broadcast-based neighbor discovery
    Changed name of Rime module ruc to unicast
    originator address is const
    Rewrote the collect module to use packet attributes instead of explicit headers
    Changed send function to return false if it was not possible to send
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Minor type change
    Changed local rtmetric name from 'local_rtmetric' to 'rtmetric' and updated the neighbor discovery module from nbh to neighbor-discovery
    Changed module name to 'collect' from 'tree' to better reflect the purpose of the module, rather than the particular data structure used to implement it
    Updated tree to use expected transmissions (etx) as routing metric
    Amount of retransmissions now configurable on a per-packet basis
    Bugfixes, updates
    Documentation updates
    Fixed include files
    Added support for multiple simulteaneous tree connections, removed sibc connection in favour of a uibc connection
    Added *_close() function to all Rime modules
    API change for Rime: *_setup() renamed to *_open()
    New Rime module: tree, a converge cast / tree data collection protocol
    Initial version of a simple mesh routing protocol written with Rime
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Changed the name of the rimeaddr module to linkaddr
    Moved the rimeaddr.[ch] code from the core/net/rime module to the core/net module, as it is used not only by rime code
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added prototype missing for quite some time now - do we need -Werror ?
    Added functionality for decaying routes: when a packet is sent over a route, it is decayed. If the route is not refreshed within four packets (with the route_refresh() function, which is called when a new packet arrives), the route is dropped. A route can be decayed at most once per second
    Removed automatic refresh of routes from the route_lookup() function and moved it into an explicit route_refresh() function. The previous behaviour was dangerous, since it meant that even bad routes that someone was looking for were considered fresh. Now such routes time out if they are not explictily refreshed (e.g., on a packet reception)
    Made constant addresses const
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Added API for reading the routing table
    Cleaned up #includes to avoid cyclic dependencies - the Rime includes no longer depend on rime.h
    Documentation updates
    Make route lifetime dynamically configurable
    Added missing prototype.
    Added automatic timeouts
    New Rime module: mesh, a mesh routing protocol
    Initial version of a simple mesh routing protocol written with Rime
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Added NULL pointer guards
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Corrected debug output
    Added the MAC layer callback functionality so that the Rime network layer gets information from the MAC about the status of sent packets: were they successfully transmitted, or was there a collisions? How many retries were there?
    Made rimeaddr_t pointers const where they should be.
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Changed the 'ibc' and 'uc' Rime modules into the more descriptive names 'broadcast' and 'unicast'
    This is an initial commit of an implementation of the Chameleon
    architecture for the Rime stack for Contiki. The Chameleon
    architecture separates the header processing from the Rime protocol
    logic. Instead of having each protocol create its own part of the
    packet header, protocols use packet attributes. Before sending a
    packet, a special Chameleon header processing module creates a packet
    header from the packet attributes. The same Chameleon module parses
    incoming packets and creates packet attributes from the header.
    
    The details are in our SenSys 2007 paper:
    
    Adam Dunkels, Fredrik Osterlind, Zhitao He. An Adaptive Communication
    Architecture for Wireless Sensor Networks. In Proceedings of the Fifth
    ACM Conference on Networked Embedded Sensor Systems (SenSys 2007),
    Sydney, Australia, November 2007.
    
    http://www.sics.se/~adam/dunkels07adaptive.pdf
    
    This is a rewrite of the code that was developed for the paper.
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    constness
    Updated format of debug output
    Bugfixes, updates
    Documentation updates
    Debug output
    Renamed rimebuf_hdrextend() to rimebuf_hdralloc()
    Fixed debug output
    Added *_close() function to all Rime modules
    API change for Rime: *_setup() renamed to *_open()
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Renamed ulayer -> callbacks
    Initial import of the experimental Rime code into the SourceForge CVS.
    Added radio sniffer program
    More uip_ipaddr_t fixes.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added CC_CONST_FUNCTION as a work-around to the sdcc const function pointer bug
    This is an initial commit of an implementation of the Chameleon
    architecture for the Rime stack for Contiki. The Chameleon
    architecture separates the header processing from the Rime protocol
    logic. Instead of having each protocol create its own part of the
    packet header, protocols use packet attributes. Before sending a
    packet, a special Chameleon header processing module creates a packet
    header from the packet attributes. The same Chameleon module parses
    incoming packets and creates packet attributes from the header.
    
    The details are in our SenSys 2007 paper:
    
    Adam Dunkels, Fredrik Osterlind, Zhitao He. An Adaptive Communication
    Architecture for Wireless Sensor Networks. In Proceedings of the Fifth
    ACM Conference on Networked Embedded Sensor Systems (SenSys 2007),
    Sydney, Australia, November 2007.
    
    http://www.sics.se/~adam/dunkels07adaptive.pdf
    
    This is a rewrite of the code that was developed for the paper.
    Added improvements suggested by Hardy Greich: define CPU speed in one place only (contiki-conf.h), added nop to XTAL settlement delay
    MSP430 definitions
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Bugfix: copy the originator address from the packetbuf into a local variable to avoid it being overwritten
    Made rimeaddr_t pointers const where they should be.
    * decline route discovery requests if we have one in the air
    * and, by popular demand, switched PRINTF to printf in the debug macro. :-)
    Added debug output
    save copy of a rime address that points to a packet buffer, since the
    packet buffer is cleared and overwritten before the address usage is done.
    Added const to constant parameters (rime addresses)
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    bugfix: stopping timeout timer when we receive route reply (still limited to only one active discovery)
    Replaced NETSIM macro with general (and now actually working) solution in Makefile.include.
    Renamed Rime nf module to netflood
    Changed the 'ibc' and 'uc' Rime modules into the more descriptive names 'broadcast' and 'unicast'
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Added line drawing code when compiled for the netsim target
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Bugfixes, updates
    Documentation updates
    Added call to timedout callback
    Typo
    Timeouts configurable at run-time
    Refactored the mesh code by splitting multi-hop forwarding and route discovery. The mesh module is now much simpler than before
    Fix "multiple use of section label 'channels'" warning in various rime headers
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Changed the name of the rimeaddr module to linkaddr
    Moved the rimeaddr.[ch] code from the core/net/rime module to the core/net module, as it is used not only by rime code
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Removed const qualifier to conform with the rest of the Rime interface.
    Improved multihop/mesh route discovery.
    
    Packetbuffer is now saved before route discovery and resent when a
    route is found.
    
    This solves the following problems:
    - First packet sent to a certain node is corrupted.
    - Packet to be forwarded that triggers route discovery is lost.
    Added const to constant parameters (rime addresses)
    The multihop module used the pre-chameleon style packet headers. Converted it to use packet attributes instead of packet headers
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Added Rime documentation from the Rime/Chameleon paper (SenSys 2007)
    Moved packet attributes specifications from rimebuf.h to the appropriate protocol header files
    Renamed Rime module mh to multihop
    Changed the 'ibc' and 'uc' Rime modules into the more descriptive names 'broadcast' and 'unicast'
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Bugfix: forwarding functions now have access to its packet headers. Added last hop to the arguments to the reception function
    Added hopcount to callbacks
    Updated the multihop forwarding interface to match the intended operation of the module: to let the user produce the route, and the mh module only does the forwarding
    Documentation updates
    Best effort multi-hop routing
    Added *_close() function to all Rime modules
    API change for Rime: *_setup() renamed to *_open()
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Renamed ulayer -> callbacks
    Initial import of the experimental Rime code into the SourceForge CVS.
    Added *experimental* module for sending raw (non-routed) packets from Contiki. The name of the module is likely to change.
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    llsec: Added a layer in between NETSTACK_MAC and NETSTACK_NETWORK for implementing link layer security
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Removed obsolete mac pointer
    Use NETSTACK_RDC_* instead of NETSTACK_CONF_RDC_*
    Made collect retransmissions and broadcast announcements timers depend on the rdc wakeup rate
    Rime sniffers must be called for all transmissions, even if they failed, to get energy attribution right. This means that rime output sniffers now also must take the MAC transmission status as an argument.
    Removed the polite announcement code, since it was not used, and enabled the broadcast announcement code by default. Increased the default intervals for broadcast announcements.
    Fix compiler warnings
    * Made Chameleon header processing module configurable (CHAMELEON_CONF_MODULE)
    * Removed the unused init function from header processing modules
    * Added option CHAMELEON_CONF_WITH_MAC_LINK_ADDRESSES to specify that
      MAC link addresses should be used instead of Chameleon's own encoding
      of sender and receiver. This avoids encoding the link addresses twice
      when the MAC RDC has its own addresses.
    Added broadcast announcement module and collect-neighbor module
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    Reworked the Rime/Chameleon interface so that packets now always hit Rime before Chameleon. Chameleon is now only called by Rime. This makes packet sniffing easier, and allows for sniffing packets after their header has been processed by Chameleon, thereby making per-packet power profiling much easier to implement
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Moved the neigbor_init() call to the collect module, since it is the only one that currently uses it
    Moved route_init() into mesh instead of the generic rime initialiation
    rime_output() now returns RIME_OK or RIME_ERR depending on the MAC return value.
    
    this patch may affect Rime sniffers running on top of MAC protocols that do not yet return generic MAC return values
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Made polite announcement times configurable, added missing right-brace
    Call output packet sniffers after the MAC has sent the packet
    Added default initialization of polite announcements. Not sure where the best place for this is, but this at least allow us to start experimenting with this.
    Initialize the announcement module
    This is an initial commit of an implementation of the Chameleon
    architecture for the Rime stack for Contiki. The Chameleon
    architecture separates the header processing from the Rime protocol
    logic. Instead of having each protocol create its own part of the
    packet header, protocols use packet attributes. Before sending a
    packet, a special Chameleon header processing module creates a packet
    header from the packet attributes. The same Chameleon module parses
    incoming packets and creates packet attributes from the header.
    
    The details are in our SenSys 2007 paper:
    
    Adam Dunkels, Fredrik Osterlind, Zhitao He. An Adaptive Communication
    Architecture for Wireless Sensor Networks. In Proceedings of the Fifth
    ACM Conference on Networked Embedded Sensor Systems (SenSys 2007),
    Sydney, Australia, November 2007.
    
    http://www.sics.se/~adam/dunkels07adaptive.pdf
    
    This is a rewrite of the code that was developed for the paper.
    Rewrote the sniffer code to use a list, which makes it possible to add any number of sniffers. Sniffers now can be both for incoming and outoing packets.
    Added a simple sniffer callback, which currently is a hack - a better solution would be a list of sniffers for both outgoing and incoming packets, but this will do for now.
    Expose the Rime MAC driver so that applications can use it - a bit of a hack, but it works for now
    moved initialization of ctimer to allow MAC layer to use ctimers
    fixed compiler warning
    Modified to use the new MAC layer API
    Added Rime statistics.
    Bugfixes, updates
    Documentation updates
    Removed unused node-id,.h
    Added route initializaion
    Removed automatic setting of Rime node address
    Renamed input function to rime_input() and the output function to rime_driver_send()
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Initial import of the experimental Rime code into the SourceForge CVS.
    Import of the contiki-2.x development code from the SICS internal CVS server
    moved ETX storage variable from RPL to ds6-nbr
    Drop forwarding error packet and send back DAO to originating parent
    Fix code style in rpl_set_root prototype
    RPL MRHOF with ETX: bypass weighted moving average when setting a parent's link metric for the first time
    Ensure that the objective function's reset function is called at least once. This will enable the objective function to initialize itself during run-time.
    Updated include paths for the moved files under net/
    Preliminary support for RPL node types. This change allows a node to be in any of three given types:
    * Mesh: this is the normal case. Nodes route data on behalf of others and the node can be reached via a DAO route.
    * Leaf: the node does not route data on behalf of others, but others can route data to the node (it has a RPL DAO route).
    * Feather: this is a new type of node. A feather node routes data on behalf of others, but does not install DAO routes in the network. Feather nodes allow having a larger number of nodes than the RPL network can sustain in terms of routing tables.
    
    This commit introduces the RPL node types and the feather mode, but does not add support for the leaf node type.
    Remove references to the now unused dag->parents list
    RPL DAO timers and management:
    * Added a DAO lifetime timer that sends out a new DAO after half the lifetime of the DAO. This allows implementing DAO route soft state that avoids routing tables in the network keeping stale routes for ever.
    * Added ways to schedule a new DAO transmission as well as cancelling an active DAO transmit timer, which makes it possible to do nodes that don't send DAOs.
    Added the const keyword to IP address arguments that are not (and should not be) changed by the callee
    Inserts missing IPv6 Hop-By-Hop RPL Option at first hop
    Added a function rpl_get_parent_link_metric() for obtaining the link metric of a given parent
    Moved ETX management from neighbor-info to rpl-of-etx. Avoids conversions between different fixed point representations, and simplifies neighbor management. Makes more clear how default-ETX and noack-ETX actually affect the rank. Removed neighbor-info and neighbor-attr.
    Make RPL use neighbor tables. RPL locks the neighbor used as preferred parent.
    Use no metric container when having MRHOF with ETX, as specified in RFC6719. Renamed rpl-of-etx to rpl-mrhof.
    Made DIO interval processing a little easier to follow. Explicitly state that the delay is handled as clock timer ticks.
    removed obsolete function declaration
    Separated configuration into a new file called rpl-conf.h. Improved the documentation.
    Changed function names.
    Cleaned up code style, comments, and print outs. Set default DAG parameters when the DIO configuration option is missing.
    fixed lollipop counter
    fix typo
    Refactored header management.
    Continued merge with sf master
    some fixes to cut some extension headers before TCP processing
    Changed Instance structure in order to decrease memory waste.
    Changes in RPL implementation :
    - Structural modification of RPL data storage.
    - Support multiple gateways (multiple DODAG-ID with a unique InstanceID)
    - Use Lollipop counters
    - Add leaf-only configuration option for RPL
    Bugfix :
    - Correctly send "Grounded" flag in DIO
    The flags field got widened to 9 bits.
    Fixed issues with propagation of the route lifetime configuration. Removed deprecated configuration parameters.
    Update the metric container correctly. Use only one ETX initializer.
    Generalized MRHOF and added partial support for energy objects in DAG metric containers.
    Replaced old description
    Improved objective function API so DAG metric containers can be generated cleanly. The packet generation now asks the OF to provide a fresh logical presentation of the metric container, which is then translated to raw packet format.
    Split the RPL header into a private and a public header.
    Changed the variable name local_confidence to etx to better reflect what it was used for
    fixed so that minhoprankinc is configurable
    added address macros for rpl-all-nodes
    Configuration of the objective function made easier. Updated OF0 to the new rank calculation.
    Improved DAO management.
    Improved macro definitions and removed obsolete declarations.
    Increased the width of dio_next_delay to avoid possible wrappings
    updated rpl dio message format to be compliant with latest version
    Added support for Mode of Operation flags in DIOs. Removed obsolete destination advertisement flags.
    made rank use full resolution when using OF-ETX
    Created a separate function for local repair. Added a statistics structure. Improved the control of malformed packets.
    made DIS Interval configurable
    Various bug fixes and adjustments for rpl-11
    A major update to ContikiRPL resulting in a reduced code footprint by
    300 bytes, as well as cleaner protocol logic.
    
    * Made parent management uniform.
    
    * Simplified the DIO processing.
    
    * Improved the Objective Function API and its documentation.
    
    * Removed redundant code at various places.
    
    * Improved identifier naming.
    
    * Switched visualization from candidate parents to preferred parents only.
    
    * Made DAO ACK transmissions configurable.
    
    * Improved initial ETX guess by using a cached local confidence value.
    
    * Added a periodical rank recalculation function to reduce
      the maximum stack depth.
    
    * Increased the Trickle redundancy constant to ensure faster
      topological updates.
    Moved ctimer.[ch] from their old and illogical location in core/net/rime to a more appropriate place in core/sys
    made DIOs and OCP 09 compliant
    Updated declaration for rpl_alloc_dag.
    Make the distinction between incoming and outgoing DTSN clear.
    Fixed typo
    Added basic functionality for DAO ACKs and DTSN. Randomized DAO timer.
    Purge all routes related to a DAG being freed. Do not send no-DAOs when doing a global repair.
    changed DAOs to be formatted according to the rpl-08 specification
    fixed a minor bug causing too low rank during global repair
    fixed rank calculation bug in of-etx
    removed sequence_number and replaced with version - fixing global repair functionality
    changed RPL to be more 08 compliant - DIO and DIO options are formatted as in RPL-08
    Better validation of incoming DIOs. Added a reset function to the OF API.
    Added support for multiple objective functions.
    
    Extended the objective function API with a callback function that receives link-layer neighbor information.
    
    Throttled DAO transmissions to one per DEFAULT_DAO_LATENCY period.
    
    Added support for an ETX objective function (hysteresis control still lacking though).
    
    Fixed a leak of routes installed by DAOs.
    
    Control that dst_adv_supported is set before sending DAOs.
    
    Improved debugging output.
    Renamed neighbors to parents. Removed redundant code. Corrected the logic for max rank increase.
    added experimental support for disseminating autoconf prefix via DIO suboption
    Increased minimum DIO interval from 1024 ms to 4096 ms in order to more calm in duty-cycled networks.
    added ContikiRPL - an implementation of IETF ROLL RPL
    fixed so that trickle timer rpl config is updated at global repair
    fixed comments
    Send no-path DAO only when the dag has a preferred parent
    Add more RPL stats
    style fixes, cherry-pick this and fixup with ae87790
    moved ETX storage variable from RPL to ds6-nbr
    Do not use rpl_add_dag when RPL is used with a single dag per instance
    Remove now unneeded UIP_CONF_IPV6 guards in net/ipv6 and net/rpl code
    Bug fix: Stop the DAO lifetime timer in RPL instances when released.
    
    Clearing the memory for an active etimer/ctimer might corrupt the
    timer list and cause other timers to be lost or infinite loops. The
    DAO lifetime timer is only used when RPL route lifetime is not
    infinite but then the timer will cause problems if not stopped.
    Drop forwarding error packet and send back DAO to originating parent
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Closing doxygen groups
    RPL MRHOF with ETX: bypass weighted moving average when setting a parent's link metric for the first time
    Add user configuration of DIO preference field
    rpl_select_parent: Only check parents belonging to the given dag
    Cleaned up some of the comments and output strings.
    RPL Multicast group management with MOP 3
    Changed the name of the rimeaddr module to linkaddr
    Updated include paths for the moved files under net/
    Remove references to the now unused dag->parents list
    Add a neighbor table entry if a DAO is received from a node where we don't yet have a neighbor table entry.
    Add a check for the case when the parent neighbor may have gone away to avoid using a NULL pointer
    Slight improvements in debug messages
    Made it a bit more clear what function that gets called when a neighbor is removed
    Added the const keyword to IP address arguments that are not (and should not be) changed by the callee
    As RPL Root, drop an incoming DIO from the same instance but different DAG
    Cleaned up various fragments and fixed a compilation error that occured when switching metric container.
    
    Fixed a wrapping problem in the ETX EWMA calculation.
    
    Corrected the multiplier of the link metric, and simplified the configuration
    so that the user does not need to specify the multiplier.
    Bugfix: don't set the parent if the dag is NULL
    Fixed a bunch of compiler warnings
    Added a function rpl_get_parent_link_metric() for obtaining the link metric of a given parent
    Defensive programming: check for the argument being NULL.
    Added function prototypes to a number of functions with void arguments
    Added and updated debugging printouts and reformatted code to make it a little easier to read.
    Fix naming issues and includes in uip-ds6-nbr.h
    Moved ETX management from neighbor-info to rpl-of-etx. Avoids conversions between different fixed point representations, and simplifies neighbor management. Makes more clear how default-ETX and noack-ETX actually affect the rank. Removed neighbor-info and neighbor-attr.
    Make RPL use neighbor tables. RPL locks the neighbor used as preferred parent.
    Minor code style fix
    Bugfix: DIOs with infinite ranks should not be ignored as they are used by RPL as a signal by nodes that have lost their routes. Instead of ignoring them, we should send out our latest information to let the node with infinite rank find their way into the network again.
    Adapted comment
    Use no metric container when having MRHOF with ETX, as specified in RFC6719. Renamed rpl-of-etx to rpl-mrhof.
    fix: default routes are removed correctly if no DAG with preferred parent is available
    Support prefix udpates with PIO Handling
    Added #if UIP_CONF_IPV6 around the IPv6 code in the uIP source tree to allow the C files to be compiled even if IPv6 is not configured.
    Adds default route lifetime update in RPL DIO processing
    Makes RPL Initial Link Metric configurable
    Clean up of a few missing printf() that were converted into PRINTF()s
    Rewrote the uIP IPv6 route handling code. Instead of being nested deeply inside the uip-ds6.c file, the route management code is now in a separate file, uip-ds6-route.c. This file presents a lib/list.h API for the routes, which makes the route list much easier to use. Additionally, the uip-ds6-route.c file adds a callback API that invokes a callback when routes are added and removed.
    Updated DAG version processing to occur even for infinite rank DIOs. This makes it possible for the RPL root to infer the DAG version number from a network that hasn't had a root for a while, and where the rank has increased to infinity.
    Updated the RPL code to better match the Contiki code style
    Removed redundant code and improve code style and documentation.
    Use LIST_STRUCT macros. Made get_dag a static function.
    Removed some redundant code and fixed coding style.
    Refuse to allocate more parents for a specific DAG when the per-DAG limit has been reached.
    Cleaned up code style, comments, and print outs. Set default DAG parameters when the DIO configuration option is missing.
    fixed lollipop counter
    Check return value.
    Removed the force flag from rpl_reset_dio_timer. Removed an unnecessary DIO timer reset when changing rank but keeping the same preferred parent.
    Allocate the default_instance pointer in rpl-dag.c instead of the
    header file to fix "multiple definition of `default_instance'" errors.
    Removed redundant code
    Inverted DAG ID check
    Continued merge with sf master
    Do not force DIO reset on certain events where it is not needed.
    fixed so that rpl avoids sending no-path DAOs when changing parent when in NO_DOWNWARD mode of operation
    some fixes to cut some extension headers before TCP processing
    Send DAOs if dtsn differs instead of only when larger than last dtsn in DIO
    RPL prefix handling fix : Change IP on DODAG change, delete IP when leaving DODAG.
    Changes in RPL implementation :
    - Structural modification of RPL data storage.
    - Support multiple gateways (multiple DODAG-ID with a unique InstanceID)
    - Use Lollipop counters
    - Add leaf-only configuration option for RPL
    Bugfix :
    - Correctly send "Grounded" flag in DIO
    Fixed issues with propagation of the route lifetime configuration. Removed deprecated configuration parameters.
    Send No-Path DAOs correctly.
    fixed RPL to handle inifinite rank better
    fixed for compilation with IAR compiler
    Update the metric container correctly. Use only one ETX initializer.
    fixed RPL statistics bug and added parent switch stats
    added annotate when setting root and joining dag
    Error: the value was printed before setting it
    Several compiler warning fixes:
    
         * msp430: fix "implicit declaration of function" warnings in clock.c, by including watchdog.h;
         * sky: fix a couple pointer target signedness warnings;
         * core: fix several signed/unsigned comparison warnings;
         * framer-802154: "const static" -> "static const" to fix compiler warnings;
         * core: comment or remove unused variables and function definitions.
    
    Signed-off-by: Lionel Debroux <lionel_debroux@yahoo.fr>
    Signed-off-by: Mariano Alvira <mar@devl.org>
    Replaced ROOT_RANK with a macro that allows for other min_hoprankinc parameters than the default. Also made some minor style improvements.
    Improved objective function API so DAG metric containers can be generated cleanly. The packet generation now asks the OF to provide a fresh logical presentation of the metric container, which is then translated to raw packet format.
    Make sure we don't remove the preferred parent
    Turn off debugging
    Remove only the worst parent if the table is full when processing a DIO.
    Changed the name of macros defined in neighbor-info.h to have the NEIGHBOR_INFO prefix.
    Use DAG_RANK() macro to compute rank
    Don't add neighbor as a potential parent if its rank is too high.
    Don't remove all parents that have a worse rank than an incoming DIO: we may inadvertently remove our preferred parent. Instead, remove parents with a rank that is worse than our preferred parent. If we are lucky, this will give us enough space for the new parent.
    Split the RPL header into a private and a public header.
    Changed the variable name local_confidence to etx to better reflect what it was used for
    made rank calculation depend on selected parent when joining DAG
    Configuration of the objective function made easier. Updated OF0 to the new rank calculation.
    Improved DAO management.
    updated rpl dio message format to be compliant with latest version
    Added support for Mode of Operation flags in DIOs. Removed obsolete destination advertisement flags.
    removed route annotation from rpl - moved to ds6
    Turn off debug messages
    Update annotation when removing preferred parent.
    We found that the preferred parent should be reset in the rpl_remove_parent function.
    Created a separate function for local repair. Added a statistics structure. Improved the control of malformed packets.
    Fixed debug printfs. Added control of max_rankinc parameter.
    Print the rank correctly in the debug output.
    Various bug fixes and adjustments for rpl-11
    The second predicate is not needed.
    Improved logic for processing DIOs
    Clarified the function naming for neighbor information callbacks - names now indicate where the information is from.
    removed debug output
    A major update to ContikiRPL resulting in a reduced code footprint by
    300 bytes, as well as cleaner protocol logic.
    
    * Made parent management uniform.
    
    * Simplified the DIO processing.
    
    * Improved the Objective Function API and its documentation.
    
    * Removed redundant code at various places.
    
    * Improved identifier naming.
    
    * Switched visualization from candidate parents to preferred parents only.
    
    * Made DAO ACK transmissions configurable.
    
    * Improved initial ETX guess by using a cached local confidence value.
    
    * Added a periodical rank recalculation function to reduce
      the maximum stack depth.
    
    * Increased the Trickle redundancy constant to ensure faster
      topological updates.
    Moved ctimer.[ch] from their old and illogical location in core/net/rime to a more appropriate place in core/sys
    Check correctly if a DAG already exists in the same instance.
    Make the distinction between incoming and outgoing DTSN clear.
    Replaced invalid attempt to switch preferred parent when its DS6 neighbor entry got purged.
    Removed redundant code, moved the control of acceptable rank increases into a separate function.
    Validate incoming DTSN value
    Copy the DTSN from the DIO when joining a DAG.
    Added basic functionality for DAO ACKs and DTSN. Randomized DAO timer.
    moved code for autoconfiguring global address into join_dag
    Purge all routes related to a DAG being freed. Do not send no-DAOs when doing a global repair.
    Made the remove_parents function more powerful by adding a flag that indicates whether no-DAOs should be sent or not. Fixed some style issues and a possible NULL pointer dereference.
    fixed a minor bug causing too low rank during global repair
    fixed rank calculation bug in of-etx
    removed sequence_number and replaced with version - fixing global repair functionality
    changed RPL to be more 08 compliant - DIO and DIO options are formatted as in RPL-08
    Better validation of incoming DIOs. Added a reset function to the OF API.
    Added support for multiple objective functions.
    
    Extended the objective function API with a callback function that receives link-layer neighbor information.
    
    Throttled DAO transmissions to one per DEFAULT_DAO_LATENCY period.
    
    Added support for an ETX objective function (hysteresis control still lacking though).
    
    Fixed a leak of routes installed by DAOs.
    
    Control that dst_adv_supported is set before sending DAOs.
    
    Improved debugging output.
    Renamed neighbors to parents. Removed redundant code. Corrected the logic for max rank increase.
    added experimental support for disseminating autoconf prefix via DIO suboption
    Improvements to local repair and DAO handling.
    Added isinfinite to uip_ds6_defrt_t to handle infinite life time
    replaced hardcoded value with constant for route lifetime
    bug fix: dag pointer may be NULL
    Improvements to style and commentary.
    added missing include
    added ContikiRPL - an implementation of IETF ROLL RPL
    Update rpl.c
    
    Removed change to "a RPL"
    Update rpl.c
    
    Very minor grammar / spelling edits to comments
    Remove now unneeded UIP_CONF_IPV6 guards in net/ipv6 and net/rpl code
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Closing doxygen groups
    RPL MRHOF with ETX: bypass weighted moving average when setting a parent's link metric for the first time
    Register generic ICMPv6 handlers for RPL
    Ensure that the objective function's reset function is called at least once. This will enable the objective function to initialize itself during run-time.
    RPL Multicast group management with MOP 3
    Changed the name of the rimeaddr module to linkaddr
    Updated include paths for the moved files under net/
    Preliminary support for RPL node types. This change allows a node to be in any of three given types:
    * Mesh: this is the normal case. Nodes route data on behalf of others and the node can be reached via a DAO route.
    * Leaf: the node does not route data on behalf of others, but others can route data to the node (it has a RPL DAO route).
    * Feather: this is a new type of node. A feather node routes data on behalf of others, but does not install DAO routes in the network. Feather nodes allow having a larger number of nodes than the RPL network can sustain in terms of routing tables.
    
    This commit introduces the RPL node types and the feather mode, but does not add support for the leaf node type.
    Added and updated debugging printouts and reformatted code to make it a little easier to read.
    Moved ETX management from neighbor-info to rpl-of-etx. Avoids conversions between different fixed point representations, and simplifies neighbor management. Makes more clear how default-ETX and noack-ETX actually affect the rank. Removed neighbor-info and neighbor-attr.
    Make RPL use neighbor tables. RPL locks the neighbor used as preferred parent.
    Make uip-ds6-route use neighbor table. Instead of storing a global list of routing entries that contain both the next hop and the destination, we have a separate list of reachable destination for each neighbor in the global table.
    Make DS6 neighbors use neighbor-table, and move all DS6 neighbor management from uip-ds6 to a new uip-ds6-neighbor module.
    No-Path DAO Propagation
    Added #if UIP_CONF_IPV6 around the IPv6 code in the uIP source tree to allow the C files to be compiled even if IPv6 is not configured.
    Fix a route lifetime bug
    
    There is a bug in the current route purge routine which would
    result in a route's lifetime getting decremented more than once
    during the same pass. This commit fixes it
    
    The bug is documented here:
    http://thread.gmane.org/gmane.os.contiki.devel/16209
    Rewrote the uIP IPv6 route handling code. Instead of being nested deeply inside the uip-ds6.c file, the route management code is now in a separate file, uip-ds6-route.c. This file presents a lib/list.h API for the routes, which makes the route list much easier to use. Additionally, the uip-ds6-route.c file adds a callback API that invokes a callback when routes are added and removed.
    Updated the RPL code to better match the Contiki code style
    Removed redundant code and improve code style and documentation.
    Removed redundant code
    Split management of extension headers into a separate file and fixed coding style.
    Changes in RPL implementation :
    - Structural modification of RPL data storage.
    - Support multiple gateways (multiple DODAG-ID with a unique InstanceID)
    - Use Lollipop counters
    - Add leaf-only configuration option for RPL
    Bugfix :
    - Correctly send "Grounded" flag in DIO
    Fixed issues with propagation of the route lifetime configuration. Removed deprecated configuration parameters.
    Update the metric container correctly. Use only one ETX initializer.
    change FIX2ETX -> NEIGHBOR_INFO_FIX2ETX in some debug prints.
    Split the RPL header into a private and a public header.
    Changed the variable name local_confidence to etx to better reflect what it was used for
    added rpl-all-nodes multicast address to nodes mcast addresses
    Corrected the reported ETX in the initial callback, and fixed the coding style
    Turn off debug messages
    made rank use full resolution when using OF-ETX
    Created a separate function for local repair. Added a statistics structure. Improved the control of malformed packets.
    Export fix-point representation of the ETX. Make RPL temporarily use the same representation as before.
    clear default route when neighbour is removed
    Clarified the function naming for neighbor information callbacks - names now indicate where the information is from.
    A major update to ContikiRPL resulting in a reduced code footprint by
    300 bytes, as well as cleaner protocol logic.
    
    * Made parent management uniform.
    
    * Simplified the DIO processing.
    
    * Improved the Objective Function API and its documentation.
    
    * Removed redundant code at various places.
    
    * Improved identifier naming.
    
    * Switched visualization from candidate parents to preferred parents only.
    
    * Made DAO ACK transmissions configurable.
    
    * Improved initial ETX guess by using a cached local confidence value.
    
    * Added a periodical rank recalculation function to reduce
      the maximum stack depth.
    
    * Increased the Trickle redundancy constant to ensure faster
      topological updates.
    Purge all routes related to a DAG being freed. Do not send no-DAOs when doing a global repair.
    Added support for multiple objective functions.
    
    Extended the objective function API with a callback function that receives link-layer neighbor information.
    
    Throttled DAO transmissions to one per DEFAULT_DAO_LATENCY period.
    
    Added support for an ETX objective function (hysteresis control still lacking though).
    
    Fixed a leak of routes installed by DAOs.
    
    Control that dst_adv_supported is set before sending DAOs.
    
    Improved debugging output.
    Renamed neighbors to parents. Removed redundant code. Corrected the logic for max rank increase.
    Improvements to local repair and DAO handling.
    Fixed bug in DAO input. Made printfs more portable.
    added ContikiRPL - an implementation of IETF ROLL RPL
    Update rpl-icmp6.c
    Reset nopath_received flag when new DAO is received
    Remove now unneeded UIP_CONF_IPV6 guards in net/ipv6 and net/rpl code
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Closing doxygen groups
    RPL MRHOF with ETX: bypass weighted moving average when setting a parent's link metric for the first time
    Register generic ICMPv6 handlers for RPL
    Cleaned up some of the comments and output strings.
    Avoid calling rpl_lock_parent for uninitialized memory. Renamed p to parent to make reading easier.
    RPL Multicast group management with MOP 3
    Check for DAO fwd loop early, before processing DAO options
    Updated include paths for the moved files under net/
    Moved variable declaration to the start of the function block
    Preliminary support for RPL node types. This change allows a node to be in any of three given types:
    * Mesh: this is the normal case. Nodes route data on behalf of others and the node can be reached via a DAO route.
    * Leaf: the node does not route data on behalf of others, but others can route data to the node (it has a RPL DAO route).
    * Feather: this is a new type of node. A feather node routes data on behalf of others, but does not install DAO routes in the network. Feather nodes allow having a larger number of nodes than the RPL network can sustain in terms of routing tables.
    
    This commit introduces the RPL node types and the feather mode, but does not add support for the leaf node type.
    Forward no-path DAOs up the tree to allow the root to repair the network if needed
    Add a neighbor table entry if a DAO is received from a node where we don't yet have a neighbor table entry.
    Removed duplicate code in rpl-icmp6
    Make sure our parent's IP address isn't NULL.
    Loop detection via DAO: if we get a DAO from a parent, that parent thinks we are its parent. We poison it and recalulate our parents.
    Fixed a bunch of compiler warnings
    Defensive programming: check for the argument being NULL.
    Added and updated debugging printouts and reformatted code to make it a little easier to read.
    Make RPL use neighbor tables. RPL locks the neighbor used as preferred parent.
    Make uip-ds6-route use neighbor table. Instead of storing a global list of routing entries that contain both the next hop and the destination, we have a separate list of reachable destination for each neighbor in the global table.
    Improve readability of DAO output variables
    Ignore No-Path DAO if target is already reachable through a different route than the DAO sender
    No-Path DAO Propagation
    Use no metric container when having MRHOF with ETX, as specified in RFC6719. Renamed rpl-of-etx to rpl-mrhof.
    Added #if UIP_CONF_IPV6 around the IPv6 code in the uIP source tree to allow the C files to be compiled even if IPv6 is not configured.
    Add some debug PRINTFs for RPL_LEAF_ONLY mode.
    chmod correction
    Removed redundant code and improve code style and documentation.
    Remove obsolete support for broadcast DAOs.
    Eliminated RPL_CONF_ADJUST_LLH_LEN correction by using uip_l3_icmp_hdr_len instead of uip_l2_l3_icmp_hdr_len.
    always send DAO to refresh routes
    Cleaned up code style, comments, and print outs. Set default DAG parameters when the DIO configuration option is missing.
    Removed the force flag from rpl_reset_dio_timer. Removed an unnecessary DIO timer reset when changing rank but keeping the same preferred parent.
    Continued merge with sf master
    Do not force DIO reset on certain events where it is not needed.
    Update next-hop address for existing routes.
    Split management of extension headers into a separate file and fixed coding style.
    added debug callbacks
    Move 16-bit integer conversion operations into functions, as is done already with 32-bit ops.
    Initialize the DIO object in case options are missing. Updated the terminology regarding options.
    Changes in RPL implementation :
    - Structural modification of RPL data storage.
    - Support multiple gateways (multiple DODAG-ID with a unique InstanceID)
    - Use Lollipop counters
    - Add leaf-only configuration option for RPL
    Bugfix :
    - Correctly send "Grounded" flag in DIO
    The flags field got widened to 9 bits.
    Fixed issues with propagation of the route lifetime configuration. Removed deprecated configuration parameters.
    Add RPL nodes and border router to minimal-net platform (cygwin only)
    fixed RPL statistics bug and added parent switch stats
    Generalized MRHOF and added partial support for energy objects in DAG metric containers.
    fixed format of transit subopt
    Improved objective function API so DAG metric containers can be generated cleanly. The packet generation now asks the OF to provide a fresh logical presentation of the metric container, which is then translated to raw packet format.
    basic support for parsing metric containers in DIOs
    Split the RPL header into a private and a public header.
    fixed MOP bug and improved debug print messages
    Just update the node rank and let rpl_process_parent_event take care of the rest
    fixed rpl so that it sends and receives on the rpl-all-nodes multicast address
    Improved DAO management.
    Corrected a comment that was accidentally overwritten in a previous commit
    updated rpl dio message format to be compliant with latest version
    Added support for Mode of Operation flags in DIOs. Removed obsolete destination advertisement flags.
    fixed comments and initialize flags in dio_output to zero
    Fixed error reported by Pieter Agten. The reachable time is specified in milliseconds, and must thus be divided by 1000.
    Convert implicit  printf to PRINTF
    Turn off debug messages
    made rank use full resolution when using OF-ETX
    Created a separate function for local repair. Added a statistics structure. Improved the control of malformed packets.
    Added detection of loops in DAO forwarding.
    Various bug fixes and adjustments for rpl-11
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    A major update to ContikiRPL resulting in a reduced code footprint by
    300 bytes, as well as cleaner protocol logic.
    
    * Made parent management uniform.
    
    * Simplified the DIO processing.
    
    * Improved the Objective Function API and its documentation.
    
    * Removed redundant code at various places.
    
    * Improved identifier naming.
    
    * Switched visualization from candidate parents to preferred parents only.
    
    * Made DAO ACK transmissions configurable.
    
    * Improved initial ETX guess by using a cached local confidence value.
    
    * Added a periodical rank recalculation function to reduce
      the maximum stack depth.
    
    * Increased the Trickle redundancy constant to ensure faster
      topological updates.
    made DIOs and OCP 09 compliant
    Make the distinction between incoming and outgoing DTSN clear.
    Added basic functionality for DAO ACKs and DTSN. Randomized DAO timer.
    minor fixes + improved debug-printout
    moved code for autoconfiguring global address into join_dag
    changed DAOs to be formatted according to the rpl-08 specification
    removed sequence_number and replaced with version - fixing global repair functionality
    changed RPL to be more 08 compliant - DIO and DIO options are formatted as in RPL-08
    Added support for multiple objective functions.
    
    Extended the objective function API with a callback function that receives link-layer neighbor information.
    
    Throttled DAO transmissions to one per DEFAULT_DAO_LATENCY period.
    
    Added support for an ETX objective function (hysteresis control still lacking though).
    
    Fixed a leak of routes installed by DAOs.
    
    Control that dst_adv_supported is set before sending DAOs.
    
    Improved debugging output.
    Renamed neighbors to parents. Removed redundant code. Corrected the logic for max rank increase.
    added experimental support for disseminating autoconf prefix via DIO suboption
    Improvements to local repair and DAO handling.
    added include of string.h since memcpy are used
    Fixed bug in DAO input. Made printfs more portable.
    Improvements to style and commentary.
    added missing include
    Removed return value in function that should not return a value.
    *** empty log message ***
    Addressed compilation warnings.
    added ContikiRPL - an implementation of IETF ROLL RPL
    Set default link ETX to 2
    Add user configuration of DIO preference field
    Cleaned up various fragments and fixed a compilation error that occured when switching metric container.
    
    Fixed a wrapping problem in the ETX EWMA calculation.
    
    Corrected the multiplier of the link metric, and simplified the configuration
    so that the user does not need to specify the multiplier.
    Moved ETX management from neighbor-info to rpl-of-etx. Avoids conversions between different fixed point representations, and simplifies neighbor management. Makes more clear how default-ETX and noack-ETX actually affect the rank. Removed neighbor-info and neighbor-attr.
    Use no metric container when having MRHOF with ETX, as specified in RFC6719. Renamed rpl-of-etx to rpl-mrhof.
    Moved RPL Lifetime configuration to rpl-conf.h
    Makes RPL Initial Link Metric configurable
    Added missing include of contiki-conf.h
    Separated configuration into a new file called rpl-conf.h. Improved the documentation.
    moved ETX storage variable from RPL to ds6-nbr
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Closing doxygen groups
    Updated include paths for the moved files under net/
    Fixed printout that used deprectated rpl_parent_t structure
    Moved ETX management from neighbor-info to rpl-of-etx. Avoids conversions between different fixed point representations, and simplifies neighbor management. Makes more clear how default-ETX and noack-ETX actually affect the rank. Removed neighbor-info and neighbor-attr.
    Cleaned up code style, comments, and print outs. Set default DAG parameters when the DIO configuration option is missing.
    Adjust for the multi-instance structures.
    Changes in RPL implementation :
    - Structural modification of RPL data storage.
    - Support multiple gateways (multiple DODAG-ID with a unique InstanceID)
    - Use Lollipop counters
    - Add leaf-only configuration option for RPL
    Bugfix :
    - Correctly send "Grounded" flag in DIO
    changed ext to link_metric
    Improved objective function API so DAG metric containers can be generated cleanly. The packet generation now asks the OF to provide a fresh logical presentation of the metric container, which is then translated to raw packet format.
    Changed the name of macros defined in neighbor-info.h to have the NEIGHBOR_INFO prefix.
    Added a hysteresis when choosing a new parent: don't switch parent unless the ETX is significantly better (1.5 ETX better).
    fixed of0 to respect min hop rank increase
    Split the RPL header into a private and a public header.
    Rewrote the parent selection to favour parents with a low ETX and a good rank. The old parent selection would always favour parents with a lower rank, regardless of their ETX, which in some cases lead to suboptimal parent selections. Also, the old code was buggy in that it would always pick the worst parent (the one with the highest ETX).
    Configuration of the objective function made easier. Updated OF0 to the new rank calculation.
    A major update to ContikiRPL resulting in a reduced code footprint by
    300 bytes, as well as cleaner protocol logic.
    
    * Made parent management uniform.
    
    * Simplified the DIO processing.
    
    * Improved the Objective Function API and its documentation.
    
    * Removed redundant code at various places.
    
    * Improved identifier naming.
    
    * Switched visualization from candidate parents to preferred parents only.
    
    * Made DAO ACK transmissions configurable.
    
    * Improved initial ETX guess by using a cached local confidence value.
    
    * Added a periodical rank recalculation function to reduce
      the maximum stack depth.
    
    * Increased the Trickle redundancy constant to ensure faster
      topological updates.
    Better validation of incoming DIOs. Added a reset function to the OF API.
    Added support for multiple objective functions.
    
    Extended the objective function API with a callback function that receives link-layer neighbor information.
    
    Throttled DAO transmissions to one per DEFAULT_DAO_LATENCY period.
    
    Added support for an ETX objective function (hysteresis control still lacking though).
    
    Fixed a leak of routes installed by DAOs.
    
    Control that dst_adv_supported is set before sending DAOs.
    
    Improved debugging output.
    Renamed neighbors to parents. Removed redundant code. Corrected the logic for max rank increase.
    added ContikiRPL - an implementation of IETF ROLL RPL
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    ntikiMAC: a new radio duty cycling mechanism that uses a combination
    of link-layer and MAC-layer mechanisms to achieve a very low power
    consumption: during idle listening the radio is switched off between
    99.2% and 99.6% of the time. One unicast transmission typically adds
    between 0.07% and 1.2% additional radio time, depending on packet
    size.
    
    ContikiMAC uses the standard IEEE 802.15.4 message format and adds no
    additional headers.
    
    ContikiMAC is simple: it uses periodic two-shot channel sampling
    during idle listening to keep the radio on-time down. Transmissions
    are done with repeated transmissions until a link-layer ACK is
    received.
    Increased the clock speed to 32768/4 from 32768/8 to provide better accuracy for power profiling of radio CCA checks
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    removed offset in rtimer_arch
    Reading timer now quicker, embryo for possible future drift configuration
    Fixed description
    MSP430 real-time rtimer support using timerb1
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    MSP430 definitions
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add missing return values in rpl_update_header_empty()
    Add more RPL stats
    Remove now unneeded UIP_CONF_IPV6 guards in net/ipv6 and net/rpl code
    Drop forwarding error packet and send back DAO to originating parent
    Rank error packet should not be forwarded
    Do not trigger global repair when forwarding error is detected
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Improve RPL hop-by-hop option detection
    Insert properly Hop-by-Hop option at first hop
    Setting uip_ext_len again breaks hop-by-hop option
    Sender rank in Hop-by-Hop option has inverted bytes
    Closing doxygen groups
    Updated include paths for the moved files under net/
    Moved variable declaration to the start of the function block
    Slight improvements in debug messages
    Inserts missing IPv6 Hop-By-Hop RPL Option at first hop
    Removed debugging printout that came before a local variable declaration, which seems to have broken sdcc
    Poor man's loop reparation: reset the DIO timer and hope the neighbor learns a better route.
    Implement forwarding error handling: if a packet changes direction, we set the FWD_ERR flag. If we see the FWD_ERR flag, we drop the route that we sent it to. If we are the root node, we also initiate a global repair.
    Fixed a bunch of compiler warnings
    Added #if UIP_CONF_IPV6 around the IPv6 code in the uIP source tree to allow the C files to be compiled even if IPv6 is not configured.
    Correctly handle upward and downward routes according to Section 1.2 of RFC6550
    Updated the RPL code to better match the Contiki code style
    fixed loop detection bug in RPL
    changed so that ext hdr len code checks against buffer size instead of link mtu
    Refactored loop detection.
    Refactored header management.
    Coding style
    Removed redundant code
    Do not force DIO reset on certain events where it is not needed.
    Split management of extension headers into a separate file and fixed coding style.
    Allow disabling of DIO suppression as required in RFC
    Remove now unneeded UIP_CONF_IPV6 guards in net/ipv6 and net/rpl code
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Closing doxygen groups
    The check should be whether RPL_DIS_SEND is non-zero, not whether it is defined.
    RPL Multicast group management with MOP 3
    Updated include paths for the moved files under net/
    Preliminary support for RPL node types. This change allows a node to be in any of three given types:
    * Mesh: this is the normal case. Nodes route data on behalf of others and the node can be reached via a DAO route.
    * Leaf: the node does not route data on behalf of others, but others can route data to the node (it has a RPL DAO route).
    * Feather: this is a new type of node. A feather node routes data on behalf of others, but does not install DAO routes in the network. Feather nodes allow having a larger number of nodes than the RPL network can sustain in terms of routing tables.
    
    This commit introduces the RPL node types and the feather mode, but does not add support for the leaf node type.
    RPL DAO timers and management:
    * Added a DAO lifetime timer that sends out a new DAO after half the lifetime of the DAO. This allows implementing DAO route soft state that avoids routing tables in the network keeping stale routes for ever.
    * Added ways to schedule a new DAO transmission as well as cancelling an active DAO transmit timer, which makes it possible to do nodes that don't send DAOs.
    Added #if UIP_CONF_IPV6 around the IPv6 code in the uIP source tree to allow the C files to be compiled even if IPv6 is not configured.
    Make RPL DIS transmission interval random in the interval [0, INTERVAL/2]. This is needed to avoid synchronization in large RPL networks.
    Made DIO interval processing a little easier to follow. Explicitly state that the delay is handled as clock timer ticks.
    Updated the RPL code to better match the Contiki code style
    Cleaned up code style, comments, and print outs. Set default DAG parameters when the DIO configuration option is missing.
    Removed the force flag from rpl_reset_dio_timer. Removed an unnecessary DIO timer reset when changing rank but keeping the same preferred parent.
    Do not force DIO reset on certain events where it is not needed.
    Changes in RPL implementation :
    - Structural modification of RPL data storage.
    - Support multiple gateways (multiple DODAG-ID with a unique InstanceID)
    - Use Lollipop counters
    - Add leaf-only configuration option for RPL
    Bugfix :
    - Correctly send "Grounded" flag in DIO
    Fixed issues with propagation of the route lifetime configuration. Removed deprecated configuration parameters.
    ROOT_RANK is now a macro function.
    fixed format of transit subopt
    Split the RPL header into a private and a public header.
    Improved DAO management.
    Fixed problem with too large values for the DIO timer.
    Fix ancient  RAND_MAX compiler warning
    Turn off debug messages
    made rank use full resolution when using OF-ETX
    Various bug fixes and adjustments for rpl-11
    A major update to ContikiRPL resulting in a reduced code footprint by
    300 bytes, as well as cleaner protocol logic.
    
    * Made parent management uniform.
    
    * Simplified the DIO processing.
    
    * Improved the Objective Function API and its documentation.
    
    * Removed redundant code at various places.
    
    * Improved identifier naming.
    
    * Switched visualization from candidate parents to preferred parents only.
    
    * Made DAO ACK transmissions configurable.
    
    * Improved initial ETX guess by using a cached local confidence value.
    
    * Added a periodical rank recalculation function to reduce
      the maximum stack depth.
    
    * Increased the Trickle redundancy constant to ensure faster
      topological updates.
    Moved ctimer.[ch] from their old and illogical location in core/net/rime to a more appropriate place in core/sys
    fixed a minor bug causing too low rank during global repair
    Added support for multiple objective functions.
    
    Extended the objective function API with a callback function that receives link-layer neighbor information.
    
    Throttled DAO transmissions to one per DEFAULT_DAO_LATENCY period.
    
    Added support for an ETX objective function (hysteresis control still lacking though).
    
    Fixed a leak of routes installed by DAOs.
    
    Control that dst_adv_supported is set before sending DAOs.
    
    Improved debugging output.
    Renamed neighbors to parents. Removed redundant code. Corrected the logic for max rank increase.
    Improvements to local repair and DAO handling.
    avoid sending DAO when address is tentative
    factored out function for getting link local address in ds6 and made use of it in rpl for checking state of lladdress as DIOs should not be sent when tentative
    Improvements to style and commentary.
    added ContikiRPL - an implementation of IETF ROLL RPL
    Add more RPL stats
    Remove duplicated configuration parameters definition
    Register generic ICMPv6 handlers for RPL
    Use the same scale for ETX calculation as for rank calculations to avoid conversion errors between the two.
    RPL Multicast group management with MOP 3
    Updated include paths for the moved files under net/
    Add a neighbor table entry if a DAO is received from a node where we don't yet have a neighbor table entry.
    RPL DAO timers and management:
    * Added a DAO lifetime timer that sends out a new DAO after half the lifetime of the DAO. This allows implementing DAO route soft state that avoids routing tables in the network keeping stale routes for ever.
    * Added ways to schedule a new DAO transmission as well as cancelling an active DAO transmit timer, which makes it possible to do nodes that don't send DAOs.
    Make RPL use neighbor tables. RPL locks the neighbor used as preferred parent.
    No-Path DAO Propagation
    Moved RPL Lifetime configuration to rpl-conf.h
    Allow user configuration of RPL Lifetime and Lifetime Unit
    Bug fix: changed the macro RPL_LOLLIPOP_INCREMENT to update the counter instead of returning the new value since this is how the macro is used today.
    Makes RPL Initial Link Metric configurable
    Made RPL DAO latency configurable
    Separated configuration into a new file called rpl-conf.h. Improved the documentation.
    Changed function names.
    Cleaned up code style, comments, and print outs. Set default DAG parameters when the DIO configuration option is missing.
    tuned RPL parameters and improved calculation of path etx
    Simplified best_dag function and fixed the previous incomplete commit.
    Removed the force flag from rpl_reset_dio_timer. Removed an unnecessary DIO timer reset when changing rank but keeping the same preferred parent.
    Allocate the default_instance pointer in rpl-dag.c instead of the
    header file to fix "multiple definition of `default_instance'" errors.
    Refactored header management.
    Initialize the DIO object in case options are missing. Updated the terminology regarding options.
    Changes in RPL implementation :
    - Structural modification of RPL data storage.
    - Support multiple gateways (multiple DODAG-ID with a unique InstanceID)
    - Use Lollipop counters
    - Add leaf-only configuration option for RPL
    Bugfix :
    - Correctly send "Grounded" flag in DIO
    Fixed issues with propagation of the route lifetime configuration. Removed deprecated configuration parameters.
    fixed for compilation with IAR compiler
    Update the metric container correctly. Use only one ETX initializer.
    fixed RPL statistics bug and added parent switch stats
    made DIO parameters configurable
    Replaced ROOT_RANK with a macro that allows for other min_hoprankinc parameters than the default. Also made some minor style improvements.
    Improved objective function API so DAG metric containers can be generated cleanly. The packet generation now asks the OF to provide a fresh logical presentation of the metric container, which is then translated to raw packet format.
    basic support for parsing metric containers in DIOs
    Split the RPL header into a private and a public header.
    Changed the variable name local_confidence to etx to better reflect what it was used for
    fixed so that minhoprankinc is configurable
    added address macros for rpl-all-nodes
    Configuration of the objective function made easier. Updated OF0 to the new rank calculation.
    Improved DAO management.
    Improved macro definitions and removed obsolete declarations.
    Increased the width of dio_next_delay to avoid possible wrappings
    updated rpl dio message format to be compliant with latest version
    Added support for Mode of Operation flags in DIOs. Removed obsolete destination advertisement flags.
    made rank use full resolution when using OF-ETX
    Created a separate function for local repair. Added a statistics structure. Improved the control of malformed packets.
    made DIS Interval configurable
    Various bug fixes and adjustments for rpl-11
    A major update to ContikiRPL resulting in a reduced code footprint by
    300 bytes, as well as cleaner protocol logic.
    
    * Made parent management uniform.
    
    * Simplified the DIO processing.
    
    * Improved the Objective Function API and its documentation.
    
    * Removed redundant code at various places.
    
    * Improved identifier naming.
    
    * Switched visualization from candidate parents to preferred parents only.
    
    * Made DAO ACK transmissions configurable.
    
    * Improved initial ETX guess by using a cached local confidence value.
    
    * Added a periodical rank recalculation function to reduce
      the maximum stack depth.
    
    * Increased the Trickle redundancy constant to ensure faster
      topological updates.
    Moved ctimer.[ch] from their old and illogical location in core/net/rime to a more appropriate place in core/sys
    made DIOs and OCP 09 compliant
    Updated declaration for rpl_alloc_dag.
    Make the distinction between incoming and outgoing DTSN clear.
    Fixed typo
    Added basic functionality for DAO ACKs and DTSN. Randomized DAO timer.
    Purge all routes related to a DAG being freed. Do not send no-DAOs when doing a global repair.
    changed DAOs to be formatted according to the rpl-08 specification
    fixed a minor bug causing too low rank during global repair
    fixed rank calculation bug in of-etx
    removed sequence_number and replaced with version - fixing global repair functionality
    changed RPL to be more 08 compliant - DIO and DIO options are formatted as in RPL-08
    Better validation of incoming DIOs. Added a reset function to the OF API.
    Added support for multiple objective functions.
    
    Extended the objective function API with a callback function that receives link-layer neighbor information.
    
    Throttled DAO transmissions to one per DEFAULT_DAO_LATENCY period.
    
    Added support for an ETX objective function (hysteresis control still lacking though).
    
    Fixed a leak of routes installed by DAOs.
    
    Control that dst_adv_supported is set before sending DAOs.
    
    Improved debugging output.
    Renamed neighbors to parents. Removed redundant code. Corrected the logic for max rank increase.
    added experimental support for disseminating autoconf prefix via DIO suboption
    Increased minimum DIO interval from 1024 ms to 4096 ms in order to more calm in duty-cycled networks.
    added ContikiRPL - an implementation of IETF ROLL RPL
    fixed comments
    style fixes, cherry-pick this and fixup with ae87790
    moved ETX storage variable from RPL to ds6-nbr
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Closing doxygen groups
    RPL MRHOF with ETX: bypass weighted moving average when setting a parent's link metric for the first time
    Cleaned up some of the comments and output strings.
    Updated include paths for the moved files under net/
    Cleaned up various fragments and fixed a compilation error that occured when switching metric container.
    
    Fixed a wrapping problem in the ETX EWMA calculation.
    
    Corrected the multiplier of the link metric, and simplified the configuration
    so that the user does not need to specify the multiplier.
    Bugfix: must multiply with ETX divisor to turn into fixed-point format.
    Fix naming issues and includes in uip-ds6-nbr.h
    Moved ETX management from neighbor-info to rpl-of-etx. Avoids conversions between different fixed point representations, and simplifies neighbor management. Makes more clear how default-ETX and noack-ETX actually affect the rank. Removed neighbor-info and neighbor-attr.
    Use no metric container when having MRHOF with ETX, as specified in RFC6719. Renamed rpl-of-etx to rpl-mrhof.
    Makes RPL Initial Link Metric configurable
    Cleaned up code style, comments, and print outs. Set default DAG parameters when the DIO configuration option is missing.
    tuned RPL parameters and improved calculation of path etx
    Simplified best_dag function and fixed the previous incomplete commit.
    some fixes to cut some extension headers before TCP processing
    Changes in RPL implementation :
    - Structural modification of RPL data storage.
    - Support multiple gateways (multiple DODAG-ID with a unique InstanceID)
    - Use Lollipop counters
    - Add leaf-only configuration option for RPL
    Bugfix :
    - Correctly send "Grounded" flag in DIO
    Announce MAX_PATH_COST if we don't have a preferred parent.
    Update the metric container correctly. Use only one ETX initializer.
    Generalized MRHOF and added partial support for energy objects in DAG metric containers.
    Avoid hysteresis check if neither p1 nor p2 is the preferred parent.
    Replaced ROOT_RANK with a macro that allows for other min_hoprankinc parameters than the default. Also made some minor style improvements.
    Improved objective function API so DAG metric containers can be generated cleanly. The packet generation now asks the OF to provide a fresh logical presentation of the metric container, which is then translated to raw packet format.
    Changed the name of macros defined in neighbor-info.h to have the NEIGHBOR_INFO prefix.
    Slight code complexity reduction
    Split the RPL header into a private and a public header.
    Changed the variable name local_confidence to etx to better reflect what it was used for
    Updated to the minrank-hysteresis OF
    Turn off debug messages
    made rank use full resolution when using OF-ETX
    Various bug fixes and adjustments for rpl-11
    A major update to ContikiRPL resulting in a reduced code footprint by
    300 bytes, as well as cleaner protocol logic.
    
    * Made parent management uniform.
    
    * Simplified the DIO processing.
    
    * Improved the Objective Function API and its documentation.
    
    * Removed redundant code at various places.
    
    * Improved identifier naming.
    
    * Switched visualization from candidate parents to preferred parents only.
    
    * Made DAO ACK transmissions configurable.
    
    * Improved initial ETX guess by using a cached local confidence value.
    
    * Added a periodical rank recalculation function to reduce
      the maximum stack depth.
    
    * Increased the Trickle redundancy constant to ensure faster
      topological updates.
    Restrict the rank to INFINITE_RANK
    fixed rank calculation bug in of-etx
    Better validation of incoming DIOs. Added a reset function to the OF API.
    Added support for multiple objective functions.
    
    Extended the objective function API with a callback function that receives link-layer neighbor information.
    
    Throttled DAO transmissions to one per DEFAULT_DAO_LATENCY period.
    
    Added support for an ETX objective function (hysteresis control still lacking though).
    
    Fixed a leak of routes installed by DAOs.
    
    Control that dst_adv_supported is set before sending DAOs.
    
    Improved debugging output.
    Renamed neighbors to parents. Removed redundant code. Corrected the logic for max rank increase.
    added ContikiRPL - an implementation of IETF ROLL RPL
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    ntikiMAC: a new radio duty cycling mechanism that uses a combination
    of link-layer and MAC-layer mechanisms to achieve a very low power
    consumption: during idle listening the radio is switched off between
    99.2% and 99.6% of the time. One unicast transmission typically adds
    between 0.07% and 1.2% additional radio time, depending on packet
    size.
    
    ContikiMAC uses the standard IEEE 802.15.4 message format and adds no
    additional headers.
    
    ContikiMAC is simple: it uses periodic two-shot channel sampling
    during idle listening to keep the radio on-time down. Transmissions
    are done with repeated transmissions until a link-layer ACK is
    received.
    Increased the clock speed to 32768/4 from 32768/8 to provide better accuracy for power profiling of radio CCA checks
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    removed offset in rtimer_arch
    Reading timer now quicker, embryo for possible future drift configuration
    Fixed description
    MSP430 real-time rtimer support using timerb1
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    MSP430 definitions
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    packetbuf: Use packetbuf_holds_broadcast() all-over
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    llsec: Replay protection
    framer-802154: Support for setting and accessing the frame type
    attribute
    llsec: Added a layer in between NETSTACK_MAC and NETSTACK_NETWORK for implementing link layer security
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Exit on watchdog reboot call
    removed unnecessary inclusion
    Added dummy watchdog.c to allow compiling and running code that calls the watchdog functions
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    sicslowpan: Fixed too aggresive fragmentation
    framer-802154: Support for setting and accessing the frame type
    attribute
    llsec: Added a layer in between NETSTACK_MAC and NETSTACK_NETWORK for implementing link layer security
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Exit on watchdog reboot call
    removed unnecessary inclusion
    Added dummy watchdog.c to allow compiling and running code that calls the watchdog functions
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    llsec: Renamed ccm to ccm_star & Renamed llsec regression test
    llsec: Allow for sharing CCM*
    llsec: Allow for sharing AES-128
    llsec: Added a layer in between NETSTACK_MAC and NETSTACK_NETWORK for implementing link layer security
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Fixed mbxxx platform
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Files for platform mbxxx.
    
    MBXXX is a fake platform that actually include
    all the platforms based on STM32W108 microcontroller.
    Detection of the board is made at runtime, at the
    expense of code size.
    New Contiki port to STM32W108.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    llsec: Renamed ccm to ccm_star & Renamed llsec regression test
    llsec: Allow for sharing CCM*
    Fix warnings caused by incorrect \defgroup, \addtogroup, \file
    llsec: Fixed MIC length; reject unsupported security levels
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    llsec: Allow for sharing endianness functions
    framer-802154: Support for explicit keys
    llsec: Configuration option for defining a constant LoWPAN-wide security level
    llsec: Added a layer in between NETSTACK_MAC and NETSTACK_NETWORK for implementing link layer security
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Fixed mbxxx platform
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Files for platform mbxxx.
    
    MBXXX is a fake platform that actually include
    all the platforms based on STM32W108 microcontroller.
    Detection of the board is made at runtime, at the
    expense of code size.
    New Contiki port to STM32W108.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    [doc] llsec moved in net group
    sicslowpan: Fixed too aggresive fragmentation
    llsec: Added a layer in between NETSTACK_MAC and NETSTACK_NETWORK for implementing link layer security
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added bursts support in CSMA/ContikiMAC, and CFS-swapping in
    queuebuf. Exemplified in examples/udp-stream.
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    ntikiMAC: a new radio duty cycling mechanism that uses a combination
    of link-layer and MAC-layer mechanisms to achieve a very low power
    consumption: during idle listening the radio is switched off between
    99.2% and 99.6% of the time. One unicast transmission typically adds
    between 0.07% and 1.2% additional radio time, depending on packet
    size.
    
    ContikiMAC uses the standard IEEE 802.15.4 message format and adds no
    additional headers.
    
    ContikiMAC is simple: it uses periodic two-shot channel sampling
    during idle listening to keep the radio on-time down. Transmissions
    are done with repeated transmissions until a link-layer ACK is
    received.
    Increased the clock speed to 32768/4 from 32768/8 to provide better accuracy for power profiling of radio CCA checks
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    removed offset in rtimer_arch
    Reading timer now quicker, embryo for possible future drift configuration
    Fixed description
    MSP430 real-time rtimer support using timerb1
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    MSP430 definitions
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix warnings caused by incorrect \defgroup, \addtogroup, \file
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    llsec: Added a layer in between NETSTACK_MAC and NETSTACK_NETWORK for implementing link layer security
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Fixed mbxxx platform
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Files for platform mbxxx.
    
    MBXXX is a fake platform that actually include
    all the platforms based on STM32W108 microcontroller.
    Detection of the board is made at runtime, at the
    expense of code size.
    New Contiki port to STM32W108.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix warnings caused by incorrect param names / undocumented params
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    llsec: Replay protection
    llsec: Allow for sharing AES-128
    llsec: Added a layer in between NETSTACK_MAC and NETSTACK_NETWORK for implementing link layer security
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Fixed mbxxx platform
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Files for platform mbxxx.
    
    MBXXX is a fake platform that actually include
    all the platforms based on STM32W108 microcontroller.
    Detection of the board is made at runtime, at the
    expense of code size.
    New Contiki port to STM32W108.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix warnings caused by incorrect \defgroup, \addtogroup, \file
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    llsec: Noncompromise-resilient 802.15.4 security
    llsec: Added a layer in between NETSTACK_MAC and NETSTACK_NETWORK for implementing link layer security
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Fixed mbxxx platform
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Files for platform mbxxx.
    
    MBXXX is a fake platform that actually include
    all the platforms based on STM32W108 microcontroller.
    Detection of the board is made at runtime, at the
    expense of code size.
    New Contiki port to STM32W108.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    llsec: Renamed ccm to ccm_star & Renamed llsec regression test
    sicslowpan: Fixed too aggresive fragmentation
    llsec: Noncompromise-resilient 802.15.4 security
    Minor typo fixes in comments only
    
    Noticed a few minor typos, so skimmed through the file and found a few
    more.
    Correctly set the proto field for the case when tcp_send_noconn is called without tcp_send being called
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Closing doxygen groups
    Updated include paths for the moved files under net/
    Moved IPv4 files into the net/ipv4 module
    Fix UDP statistics.
    Limit size of uip/tcpip stack when not using TCP at all.
    core/net/uip: Rename `uip_ethaddr` to `uip_lladdr`.
    
    There isn't really a good reason I can think of for these
    to be different between IPv4 and IPv6.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Removed UIP_CONF_PLAIN_BUFFER again now that the pointer indirection to uip_buf was removed again.
    changed uip_buf to a union for 32-bit alignment
    The recent change turning uip_buf from an array to a pointer seems a quite heavyweight way to have the uip_buf alligned to a 32-bit boundary. Contiki is - still - supposed to be portable across a wide range of toolchains - therefore it i.e. intentionally doesn't use C99 features. From that perspective it seems questionable if all toolchains are able to optimize away the overhead imposed by an "unnecessary" indirection to access uip_buf - and uIP consists mostly of accesses to uip_buf. Even if the future is supposed to bring support for multiple uip_bufs which would turn the uip_buf pointer from a mere workaround to an neceesary element on can still presume that there will be targets with resources limited in a way prohibiting the use of several uip_bufs. So at least for those targets will still be a usecase for a "plain", not indirected uip_buf.
    
    Therefore it seems reasonable to allow to stay with the "plain" uip_buf at compile-time.
    Adjusted UIP_CONF_EXTERNAL_BUFFER to apply to actual buffer only.
    added const for the uip_buf pointer for more efficient and smaller uip code and fixed same construct for the sicslowpan code
    allocate uip_buf as uint32_t to avoid risk for unaligned uip_buf on 32 or 16 bit architectures
    Removed left-over debug printfs
    Bugfix by Raimondas Sasnauskas: TCP SYN duplicate receptions in the SYN_RCVD state was not correctly handled
    Initialize lastport in all cases it is defined.
    Bugfix: lastport must be defines both when UIP_ACTIVE_OPEN or UIP_UDP are defined (thanks Oliver!)
    Bugfix: drop incoming TCP and UDP packets where port numbers are zero
    Bugfix: UIP_TCP_BUF -> BUF
    Bugfix: Active TCP connections in uIP are made by first setting up the
    TCP connection state, then poll uIP to send out the first SYN. Until
    now, however, the SYN was not sent as part of the poll, but at the
    first retransmission. This is now fixed.
    Hack to be able to receive UDPv4 multicast packets
    Added an #if around the whole code if IPv6 is defined
    Avoided compiler warning.
    Ensure that no more data than can be held by the buffer is sent with uip_send()
    Since revision 1.11 the usage of the label 'ip_send_nolen' isn't solely depending on  UIP_UDP anymore.
    Set TTL on outbound ICMP echo reply packets to make Windows tracert work
    Added optional transmission of ICMP destimation unreachable in response to incoming UDP packets with an destination port that is not open. This is needed for correct operation of traceroute
    Added #ifdef around label (yes, ugly) to avoid compiler warning with UIP_UDP == 0
    * htonl and friends.
    const qualifiers
    Get uip_ethaddr declaration.
    * Change uip_ipaddr_t to be initialized from bytes rather than
    Removed designated union initializers from recent change to avoid dependence on ISO C99 compliant compilers.
    More uip_ipaddr_t fixes.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved IPv4 files into the net/ipv4 module
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    including uaodv-rt
    * Change function uaodv_bad_route to uaodv_bad_dest.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    Moved IPv4 files into the net/ipv4 module
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Updated include paths for the moved files under net/
    Moved IPv4 files into the net/ipv4 module
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    core/net/uip: Rename `uip_ethaddr` to `uip_lladdr`.
    
    There isn't really a good reason I can think of for these
    to be different between IPv4 and IPv6.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    Added the CCIF (Contiki Core InterFace) declarations used by the applications which are currently part of the Win32 build.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    Moved IPv4 files into the net/ipv4 module
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    * NULL pointer spotted by Vlasios.
    * When looking up potentially bad routes use uaodv_rt_lookup_any
      rather than uaodv_rt_lookup.
    * Make it explicit that some seqno:s are in host byte order by naming
      them hseqno.
    
    * Change uaodv_rt_add to take argument in (standard) network byte
      order (and change it to be a pointer).
    * Add attribute to track bad routes and necessary support for this.
    * Make uaodv_rt_add return meaningful value.
    
    * uaodv_rt_lru() moves route to head of list.
    
    * Configurable number of routes.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup packetbuf: use rime attributes and addresses only when rime is enabled. Saves 32 byte per queuebuf in the non-rime case.
    Changed the name of the rimeaddr module to linkaddr
    Updated include paths for the moved files under net/
    Moved IPv4 files into the net/ipv4 module
    Removed the old unused hc.[ch] code
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    bugfix: refresh correct source route
    +
    refreshing gateway route whenever data is received via a gateway
    Disable the stream mode for TCP packets since it does not seem to work reliably with cxmac
    Increase the trickle resend interval for router advertisements
    Reconfigured the timeouts to work better on top of a power-cycling radio mechanism
    Made rimeaddr_t pointers const where they should be.
    Added functionality for decaying routes: when a packet is sent over a route, it is decayed. If the route is not refreshed within four packets (with the route_refresh() function, which is called when a new packet arrives), the route is dropped. A route can be decayed at most once per second
    Refresh routes when a packet is received. Set a conservatively low route timeout (10 seconds).
    Tag outgoing TCP packets with the ERELIABLE attribute so that an underlying power-saving MAC protocol can treat them differently, because it knows that an ACK might be arriving soon
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Added logic for announcing that a network has a gateway to the outside world (with the function uip_over_mesh_make_announced_gateway()). The announced gateway sends a trickle message to the network, containing the address of the gateway. Other nodes will then know that packets destined to the outside world should go through the gateway node.
    Changed the 'ibc' and 'uc' Rime modules into the more descriptive names 'broadcast' and 'unicast'
    Removed call to tcpip_set_forwarding() - the UIP_CONF_IP_FORWARDING configuration option is used instead
    Improved debug output
    Added the ability to send packets to an external network
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Added debugging output
    Added stdio.h for printf.
    Route discovery timeout configurable at run-time
    Transmission of IP packets over mesh routing, implemented with Rime
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Updated include paths for the moved files under net/
    Moved IPv4 files into the net/ipv4 module
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    fixed documentation typos.
    * Change uip_ipaddr_t to be initialized from bytes rather than
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved the cc2420 driver into a separate dev/cc2420 module
    Updated include paths for the moved files under net/
    Moved IPv4 files into the net/ipv4 module
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    removed compiler specific attribute
    uaodv.c now compiles without #if UIP_UDP
    #if UIP_UDP
    option is added, because this file cannot be compiled and is unnecessary when UIP_UDP==0.
    Format requires unsigned long.
    Fixed compiler warnings to make code compile with gcc's -pedantic switch
    When UIP_UDP is off, turn off udp functions more accurately.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    * Sprinkle () in boolean expression to aid readability.
    * Add bad hop extension to RREQ messages (#ifdef:ed AODV_BAD_HOP_EXTENSION)
    * Send RREP-ACKs if we can.
    * Put back code for sending fake RREPs in response to HEELOs but now
      #ifdef:ed AODV_RESPOND_TO_HELLOS.
    * #ifndef NOINIT around NOINIT define.
    * Increase MY_ROUTE_TIMEOUT but real value should be even larger.
    
    * Honor ip::ttl when processing and forwarding RREQs.
    
    * Fix obob for when to jump my_hseqno after a reboot.
    
    * No longer send fake RREPs in response to HELLO messages.
    
    * If we received a RERR message with flag UAODV_RERR_UNKNOWN set then
      clear flag and set bad routes seqno from our route.
    * Route lifetime is a 32 bit quantity.
    * Optional AODV BAD_HOP extension.
    * Rename field reserved to prefix_sz.
    
    * Literal constant RSSI_THRESHOLD.
    
    * Send fake RREPs to implementations that insist on sending HELLOs.
    
    * Ignore and clear ACK flag in RREPs.
    bugfix: could not store last seen rreqs
    Made use of signed 32 bit data type.
    * When looking up potentially bad routes use uaodv_rt_lookup_any
      rather than uaodv_rt_lookup.
    * Respect "destination only" flag in RREQs.
    
    * If our routes seqno is <= requester last known seqno our route must
      be bad (in his eyes). Previos comparison was < which must be wrong.
    * Make it explicit that some seqno:s are in host byte order by naming
      them hseqno.
    
    * Change uaodv_rt_add to take argument in (standard) network byte
      order (and change it to be a pointer).
    * Make filtering criterion on rssi more liberal and don't use the
      correlation value at all.
    * Added flag UAODV_RERR_UNKNOWN to deal with unknown errors that are
      often the result of rebooting nodes.
    
    * Change function uaodv_bad_route to uaodv_bad_dest.
    * Add attribute to track bad routes and necessary support for this.
    
    * Revamp forwarding to deal with bad routes or request new routes as
      appropriate.
    
    * Mark bad routes (rather than tossing them) as we are informed by
      other hosts.
    
    * No longer wait two ticks before making route request.
    * Keep track of last known seqno. Send last known seqno in RREQs.
    
    * If we have rebooted, bump seqno (gleaned from RREQs).
    
    * Reworked filtering of RREQs.
    
    * Use last known seqno check before responding to RREQ that we have a
      route for. Never graft onto an existing but old route.
    * Set route timeout to maximum value for std compliance.
    
    * Rename aodvconn to bcastconn for clarity and uniformity.
    
    * Use uip_udp_packet_send where possible.
    
    * Change a lot of debug printfs.
    
    * Moved call to fwc_add.
    
    * Set ttl to sensible value if AODV_COMPLIANCE.
    * Missing return when filtering out bad neigbours.
    
    * Make routing messages bypass routing rather than creating artificial
      neigbours.
    * Explain that SCMP32 comes from RFC 3561 and is easy to implement
      using 2's complement arithmetic. Unfortunately C only defines
      unsigned arithmetic and consequently machines that don't use 2's
      complement (i.e unknown arithmetic) will have to be dealt with on a
      per machine basis.
    * Some more debug printfs.
    
    * Correct hop_count when an existing route is found.
    Made it build, but certainly _NOT_ work on non-gcc platforms.
    * Unifdef UAODV_BAD_ROUTE.
    
    * Allow more frequent RREQs but avoid some unnecessary ones.
    * Some constness and signedness.
    
    * Connect new routes to existing routes.
    
    * RERR bad destinations not bad nexthops.
    * Major overhaul in order to support route sequence numbers.
    
    * Changes to use network byte order.
    
    * Add RREQ forwading cache.
    
    * Fix some const:ness and casts.
    
    * RERR shall only delete old routes.
    
    * Filter RREQ:s also using cc2420_check_remote().
    
    * LRU management of routes.
    * Use convince macro uip_ipaddr_to_quad.
    
    * Printf format check and fix format strings.
    
    * More info in some printfs.
    
    * Be conservative about keeping working routes in RREQ (forward) path.
    
    * Put some spacing between forwarded packet and RREQ.
    * Conditional compilation on CC2420_RADIO rather than TMOTE_SKY.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved IPv4 files into the net/ipv4 module
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    * Make it explicit that some seqno:s are in host byte order by naming
      them hseqno.
    
    * Change uaodv_rt_add to take argument in (standard) network byte
      order (and change it to be a pointer).
    * Add attribute to track bad routes and necessary support for this.
    * Make uaodv_rt_add return meaningful value.
    
    * uaodv_rt_lru() moves route to head of list.
    
    * Hop count is only 8 bits.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    Moved IPv4 files into the net/ipv4 module
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Name fix on uip_all_zeroes_addr
    Make windows tracert work: needs ICMP time exceeded sent for ICMP echo packets
    Bugfix: IP addresses in ICMP time exceeded messages were not transmitted correctly
    Fixed compiler warnings
    Use uip_ipaddr_copy in places where addresses are copied.
    * Remove forgotten printf.
    * Move AODV_COMPLIANCE hack into better place.
    * AODV requires that 255.255.255.255 is not rebroadcasted! Deal with
      this using conditional compilation (AODV_COMPLIANCE).
    Avoid compiler warning.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Updated include paths for the moved files under net/
    Moved IPv4 files into the net/ipv4 module
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    Added logic for announcing that a network has a gateway to the outside world (with the function uip_over_mesh_make_announced_gateway()). The announced gateway sends a trickle message to the network, containing the address of the gateway. Other nodes will then know that packets destined to the outside world should go through the gateway node.
    Added the ability to send packets to an external network
    Transmission of IP packets over mesh routing, implemented with Rime
    Architecture-specific code for the real-time module, for the native and netsim platforms
    MSP430 definitions
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    Moved IPv4 files into the net/ipv4 module
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Changed packet drivers from services to plain processes.
    
    Now tcpip_output() is a function pointer that is supposed to be set via the macro tcpip_set_outputfunc(). Packet drivers do so on process startup.
    
    Thus if there are several packet drivers in a Contiki system the one started last is the one actually used. This behaviour is especially useful for the 'IP forwarding' "meta" packet driver.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    Moved IPv4 files into the net/ipv4 module
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    * Optional AODV BAD_HOP extension.
    * Rename field reserved to prefix_sz.
    * Added flag UAODV_RERR_UNKNOWN to deal with unknown errors that are
      often the result of rebooting nodes.
    * Abbreviate originator as orig rather than src to avoid confusion.
    
    * #if 0 unused defines.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Updated include paths for the moved files under net/
    Moved IPv4 files into the net/ipv4 module
    Added #if UIP_CONF_IPV6 around the IPv6 code in the uIP source tree to allow the C files to be compiled even if IPv6 is not configured.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Removed the empty PROCESS_NO_BROADCAST macro.
    no message
    removed:
    uip_fw_init() called from process, causing all network interfaces to be reset *after* earlier initialization routines.
    Changed packet drivers from services to plain processes.
    
    Now tcpip_output() is a function pointer that is supposed to be set via the macro tcpip_set_outputfunc(). Packet drivers do so on process startup.
    
    Thus if there are several packet drivers in a Contiki system the one started last is the one actually used. This behaviour is especially useful for the 'IP forwarding' "meta" packet driver.
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Avoid compiler warnings.
    Updated include paths for the moved files under net/
    Moved IPv4 files into the net/ipv4 module
    core/net/uip: Rename `uip_ethaddr` to `uip_lladdr`.
    
    There isn't really a good reason I can think of for these
    to be different between IPv4 and IPv6.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    Fix compiler warnings
    ARP fix for multicast transmissions. (Patch by Robert Quattlebaum.)
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Name fix on uip_all_zeroes_addr
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Debugging added, whitespace removed
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    Moved IPv4 files into the net/ipv4 module
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    Remove unguarded printf()
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Updated include paths for the moved files under net/
    Moved all generic IP files into the net/ip module
    Removed undef
    Corrects some leftover uncapitalized printfs which may cause some platforms
    to crash.
    Removed uiplib_ip6addrconv() from IPv4 builds.
    
    While it may very well be beneficial to have explict uiplib_ip4addrconv() and uiplib_ip6addrconv() available for IPv6 builds I'm having a hard time to see the point in uiplib_ip6addrconv() for IPv4 builds.
    
    Unrelated to the above the dispatching of uiplib_ipaddrconv() to either uiplib_ip4addrconv() or uiplib_ip6addrconv() can be accomplished by the C preprocessor only thus avoiding the size/speed overhead of an additional callframe.
    Added explicit functions uiplib_ip6addrconv and uiplib_ip4addrconv for converting IPv6 and IPv4 addresses, regardless of whether uIP was configured to run as an IPv4 or an IPv6 stack.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Fixed uiplib to stop parsing IPv6 address when at length part
    fixed so that ] is accepted as end of IPv6 address
    fixed parsing of address to handle [<addr>]
    Several compiler warning fixes:
    
         * msp430: fix "implicit declaration of function" warnings in clock.c, by including watchdog.h;
         * sky: fix a couple pointer target signedness warnings;
         * core: fix several signed/unsigned comparison warnings;
         * framer-802154: "const static" -> "static const" to fix compiler warnings;
         * core: comment or remove unused variables and function definitions.
    
    Signed-off-by: Lionel Debroux <lionel_debroux@yahoo.fr>
    Signed-off-by: Mariano Alvira <mar@devl.org>
    Fix compiler warnings
    Updated API for uiplib and resolv to use uip_ipaddr_t instead of uint16_t for compability with IPv6
    Import of the contiki-2.x development code from the SICS internal CVS server
    Bugfix: uip_mss() isn't set until the connection is connected, so we can't set it during socket registration
    Allow specifying a max outgoing segment size per TCP socket
    The TCP socket API code
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Moved all generic IP files into the net/ip module
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    fixed documentation typos.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Updated include paths for the moved files under net/
    Moved all generic IP files into the net/ip module
    Added and updated debugging printouts and reformatted code to make it a little easier to read.
    Add PRINTA so direct calls to debug routines will always print
    Several compiler warning fixes:
    
         * msp430: fix "implicit declaration of function" warnings in clock.c, by including watchdog.h;
         * sky: fix a couple pointer target signedness warnings;
         * core: fix several signed/unsigned comparison warnings;
         * framer-802154: "const static" -> "static const" to fix compiler warnings;
         * core: comment or remove unused variables and function definitions.
    
    Signed-off-by: Lionel Debroux <lionel_debroux@yahoo.fr>
    Signed-off-by: Mariano Alvira <mar@devl.org>
    added uip-debug utilities
    slip.c:
            char is signed but uip_buf is unsigned
    
    spi.h:
            casted unused values to void
    
    autostart.c:
    autostart.h:
            The array itself should be const but the processes pointed to
            should not.
    
    profile-aggregates.c:
            sizeof returns unsigned long on my platform
    Debug output
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Updated include paths for the moved files under net/
    Moved all generic IP files into the net/ip module
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed uiplib_ip6addrconv() from IPv4 builds.
    
    While it may very well be beneficial to have explict uiplib_ip4addrconv() and uiplib_ip6addrconv() available for IPv6 builds I'm having a hard time to see the point in uiplib_ip6addrconv() for IPv4 builds.
    
    Unrelated to the above the dispatching of uiplib_ipaddrconv() to either uiplib_ip4addrconv() or uiplib_ip6addrconv() can be accomplished by the C preprocessor only thus avoiding the size/speed overhead of an additional callframe.
    Added explicit functions uiplib_ip6addrconv and uiplib_ip4addrconv for converting IPv6 and IPv4 addresses, regardless of whether uIP was configured to run as an IPv4 or an IPv6 stack.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updated API for uiplib and resolv to use uip_ipaddr_t instead of uint16_t for compability with IPv6
    Added the CCIF (Contiki Core InterFace) declarations used by the applications which are currently part of the Win32 build.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Document a macro
    Fix minor typos
    Remove documentation of a macro which was commented out
    
    The result of this was that the doxygen block was being applied to the wrong macro
    Fix some unresolved references
    
    * Either by removing them
    * Or by resolving them
    Fix warnings caused by incorrect param names / undocumented params
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    [doc] fixed some minor typos
    Correct several doxygen tags (\file)
    Removing trailing whitespaces
    core/net/uip.h: Add missing #include <string.h>
    
    Fixes implicit definition of memcmp() warnings/errors.
    
    Signed-off-by: Joakim Gebart <joakim.gebart@eistec.se>
    New uip_is_addr macros for multicast addresses
    Updated include paths for the moved files under net/
    Moved all generic IP files into the net/ip module
    Removed redundant #ifdef
    Moved #defines so that UIP_TCPIP_HLEN and UIP_LLH_LEN are defined before they are used
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Added #if UIP_CONF_IPV6 around the IPv6 code in the uIP source tree to allow the C files to be compiled even if IPv6 is not configured.
    Added macros that allow handling IPv4 addresses even when uIP is configured to be an IPv6 stack
    Remove conditionals around RPL extension header #defines and typedefs. With the conditional, it wasn't possible to compile the rpl-ext-header.c file. Since #defines and typedefs and 'free' at runtime, we gain nothing by having them conditional.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    fixed extension header handling
    Minor documentation improvements.
    some fixes to cut some extension headers before TCP processing
    Make comparison endian-safe, thanks Ivan.
    Add support of RPL Option (http://tools.ietf.org/html/draft-ietf-6man-rpl-option-03):
    - Auto-insersion when forwarding messages
    - Delete messages with 2 rank errors
    Not supported yet :
    - Routing depending on InstanceID
    - DAO inconsistency loop recovery
    - Full UDP or TCP support (Bugs in µIPv6)
    - Real Option Type (TBD by IANA)
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Removed UIP_CONF_PLAIN_BUFFER again now that the pointer indirection to uip_buf was removed again.
    changed uip_buf to a union for 32-bit alignment
    The recent change turning uip_buf from an array to a pointer seems a quite heavyweight way to have the uip_buf alligned to a 32-bit boundary. Contiki is - still - supposed to be portable across a wide range of toolchains - therefore it i.e. intentionally doesn't use C99 features. From that perspective it seems questionable if all toolchains are able to optimize away the overhead imposed by an "unnecessary" indirection to access uip_buf - and uIP consists mostly of accesses to uip_buf. Even if the future is supposed to bring support for multiple uip_bufs which would turn the uip_buf pointer from a mere workaround to an neceesary element on can still presume that there will be targets with resources limited in a way prohibiting the use of several uip_bufs. So at least for those targets will still be a usecase for a "plain", not indirected uip_buf.
    
    Therefore it seems reasonable to allow to stay with the "plain" uip_buf at compile-time.
    added const for the uip_buf pointer for more efficient and smaller uip code and fixed same construct for the sicslowpan code
    allocate uip_buf as uint32_t to avoid risk for unaligned uip_buf on 32 or 16 bit architectures
    Added a macro for checking if an address is link local.
    added fallback interface and removed uip_router
    integration of new uip6 code from Mathilde and Julien - adds routing and improved interface handling
    started integration of Mathildes and Juliens new uip6 code + made some ND timers configurable
    accept messages to all routers if UIP_CONF_ROUTER is set.
    added packet forwarding and replaceable routing modules.
    fixed documentation typos.
    Fixed documentation error (thanks to David Kopf)
    *Support for Atmel 'Router Under Mac' (RUM) in Jackdaw
    struct uip_udp_conn should be declared even if UIP_UDP is zero (it does not add any extra code)
    Added payload field to ICMP v4 header that was inadvertedly removed during the uIPv6 commits; automatic whitespace removal at line ends
    Main uIPv6 files addition
    Added a configuration option for using u32 in the uip_ip4addr_t structure: UIP_CONF_UIP_IP4ADDR_T_WITH_U32
    Reverted part of recent change. The 32-bit member causes 32-bit alignment on 32-bit machines - at least without specific compiler options. That 32-bit alignment causes padding i.e. the ARP structure breaking the existing code.
    Name fix on uip_all_zeroes_addr
    Added optional transmission of ICMP destimation unreachable in response to incoming UDP packets with an destination port that is not open. This is needed for correct operation of traceroute
    Exposed a few UDP declarations even when UIP_UDP == 0 to make uaodv.c compile
    Made it possible to override uip_ipaddr_copy .
    Use uip_ipaddr_copy in some places where addresses are copied.
    * htonl and friends.
    Documentation fix
    const qualifiers
    * Convince macro uip_ipaddr_to_quad.
    Fixed the order of the statistics fields, added UIP_APPDATA_PTR pointer that always points to the application data space in the uip_buf buffer, added the documentation for an uip_ipaddr_isbroadcast() function.
    Added the CCIF (Contiki Core InterFace) declarations necessary for a loadable ARP handler.
    Added the CCIF (Contiki Core InterFace) declarations necessary for a loadable packet driver.
    Added the CCIF (Contiki Core InterFace) declarations used by the applications which are currently part of the Win32 build.
    * Change uip_ipaddr_t to be initialized from bytes rather than
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Allow specifying a max outgoing segment size per TCP socket
    The TCP socket API code
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Implement multicast engine hooks in the uIPv6 core
    
      - init()
      - process incoming multicast datagram
      - Pass ICMPv6 trickle messages to the engine
    Updated include paths for the moved files under net/
    Moved all generic IP files into the net/ip module
    Bugfix: check the size of the outgoing packet to avoid overflowing the output buffer
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    Added some defensive programming
    Added function for sending an UDP packet to a specified IP address and port number over an existing UDP connection
    ping-ipv6 example compiles on native cygwin
    Fixed compiler warnings to make code compile with gcc's -pedantic switch
    When UIP_UDP is off, turn off udp functions more accurately.
    * Constness, voidness.
    Must reset uip_slen to zero after transmit to avoid confusing uIP if it is invoked after this function
    Functions for sending individual UDP datagrams
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Moved all generic IP files into the net/ip module
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    core/net/resolv: IPv6 and mDNS ("Bonjour") support. Major refactor.
    
    This patch updates the DNS resolver to support IPv6 and introduces an
    improved API for looking up DNS entries. This patch also adds optional
    support for mDNS lookups and responses to the DNS resolver.
    
    Here is a quick summary of the changes:
    
     * Added support for IPv6 lookups.
     * DNS queries now honor record expiration.
     * Added support for mDNS, compatible with "Bonjour".
     * Implemented a new lookup api, `resolv_lookup2()`, which provides
       more information about the state of the record(error, expired,
       looking-up, etc.).
    
    About mDNS/Bonjour Support
    --------------------------
    
    This patch adds basic support for mDNS/Bonjour, which allows you to
    refer to the name of a device instead of its IP address. This is
    incredibly convenient for IPv6 addresses because they tend to be very
    long and difficult to remember. It is especially important for
    link-local IPv6 addresses, since not all programs support the '%'
    notation for indicating a network interface (required on systems with
    more than one network interface to disambiguate).
    
    In other words, instead of typing in this:
    
     * `http://[fe80::58dc:d7ed:a644:628f%en1]/`
    
    You can type this instead:
    
     * `http://contiki.local/`
    
    Huge improvement, no?
    
    The convenience extends beyond that: this mechanism can be used for
    nodes to talk to each other based on their human-readable names instead
    of their IPv6 addresses. So instead of a switch on
    `aaaa::58dc:d7ed:a644:628f` triggering an actuator on
    `aaaa::ed26:19c1:4bd2:f95b`, `light-switch.local` can trigger the
    actuator on `living-room-lights.local`.
    
    What you need to do to be able to look up `.local` names on your
    workstation depends on a few factors:
    
     * Your machine needs to be able to send and receive multicast packets
       to and from the LoWPAN. You can do this easily with the Jackdaw
       firmware on an RZUSBStick. If you have a border router, you will need
       it to bridge the mDNS multicast packets across the border.
    
     * If you are using a Mac, you win. All Apple devices support mDNS
       lookups.
    
     * If you are using Windows, you can install Apple's Bonjour for Windows
       package. (This may be already installed on your machine if you have
       installed iTunes) After you install this you can easily do `.local`
       lookups.
    
     * If you are using a Unix machine, you can install Avahi.
    
    The default hostname is set to `contiki.local.`. You can change the
    hostname programmatically by calling `resolv_set_hostname()`. You can
    change the default hostname by changing `CONTIKI_CONF_DEFAULT_HOSTNAME`.
    
    You may disable mDNS support by setting `RESOLV_CONF_SUPPORTS_MDNS` to
    `0`.
    
    ---------------------------------
    
    core/net/resolv: `resolv_lookup2()` -> `resolv_lookup()`
    
    Note that this patch should fix several `resolv_lookup()` bugs
    that already existed. There were many cases where `resolv_lookup()`
    was being called and the IP address ignored, but later code
    assumed that the IP address had been fetched... ANYWAY, those
    should be fixed now.
    
    ---------------------------------
    
    examples/udp-ipv6: Updated client to use MDNS to lookup the server.
    
    Also updated the Cooja regression test simulation.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updated API for uiplib and resolv to use uip_ipaddr_t instead of uint16_t for compability with IPv6
    More uip_ipaddr_t fixes.
    Added the CCIF (Contiki Core InterFace) declarations used by the applications which are currently part of the Win32 build.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    Moved all generic IP files into the net/ip module
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Add PRINTA so direct calls to debug routines will always print
    Use AVR program flash for uip-debug.h printfs.
    added uip-debug utilities
    Made debug printfs optional
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Added email client example.
    Added IRC client example.
    Introduced web browser as new example using ctk fullscreen mode.
    Rime statistics gathering
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved all generic IP files into the net/ip module
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Removed reliance on the core/net/ipv4 module
    Moved all generic IP files into the net/ip module
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved all generic IP files into the net/ip module
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    * Support longer lease times.
    Use ticks for s.ticks.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Updated include paths for the moved files under net/
    Moved all generic IP files into the net/ip module
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Added the const keyword to IP address arguments that are not (and should not be) changed by the callee
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Changed to use separate Contiki event type for ICMP6 notifications
    fixed documentation typos.
    Minor rearrangement.
    Rewrote the tcpip_output() and tcpip_set_outputfunc() so that the latter is a proper function (which simplifies debugging) and so that tcpip_output() checks if the output callback function is NULL before calling it
    Main uIPv6 files addition
    Changed packet forwarding from a runtime option to a compiletime option. This avoids pulling in uip-fw.o if forwarding isn't required (saves > 1400 bytes on 6502 targets).
    *** This change breaks all platforms calling tcpip_set_forwarding() ! These calls were intentionally not removed as they need to be replaced by setting the new compiletime option UIP_CONF_TCP_FORWARD - which should be done by the platform owners. ***
    Changed packet drivers from services to plain processes.
    
    Now tcpip_output() is a function pointer that is supposed to be set via the macro tcpip_set_outputfunc(). Packet drivers do so on process startup.
    
    Thus if there are several packet drivers in a Contiki system the one started last is the one actually used. This behaviour is especially useful for the 'IP forwarding' "meta" packet driver.
    Replaced function with macro.
    * Need to track if we at the moment are doing forwarding or sending.
    Documentation updates
    const qualifiers
    Added the CCIF (Contiki Core InterFace) declarations necessary for a loadable packet driver.
    Added the CCIF (Contiki Core InterFace) declarations used by the applications which are currently part of the Win32 build.
    More uip_ipaddr_t fixes.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    Moved all generic IP files into the net/ip module
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added function for sending an UDP packet to a specified IP address and port number over an existing UDP connection
    * Constness, voidness.
    Functions for sending individual UDP datagrams
    Import of the contiki-2.x development code from the SICS internal CVS server
    The UDP socket API code
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Updated include paths for the moved files under net/
    Moved all generic IP files into the net/ip module
    Added a configuration option, UIP_SPLIT_CONF_SIZE, for setting the threshold at which point TCP packets get split into two.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    Bugfix: split full size TCP segments if they match the MSS definition, not only the buffer size definition
    ping-ipv6 example compiles on native cygwin
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    Moved all generic IP files into the net/ip module
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    Converted scope-local variables into function-local variables.
    The 6502-specific LC implementation doesn't allow for scope-local vaiables between PT_BEGIN/PROCESS_BEGIN/PSOCK_BEGIN and PT_BEGIN/PROCESS_END/PSOCK_END.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    * Support longer lease times.
    Use ticks for s.ticks.
    Avoid compiler warnings.
    * Some ntohs stuff.
    
    * Etimer package only allows you to sleep half as many ticks as one
      would expect. Adjust for this.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    added cast in line 254 to make cc65 happy
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    [doc] moved doxygen parts from core/net/simple-udp.c to corresponding
    header file
    Updated include paths for the moved files under net/
    Moved all generic IP files into the net/ip module
    Added a function simple_udp_sendto_port() for sending a UDP packet to a specified port.
    Fixed previously erroneously fixed include
    Fixed includes
    A significantly simpler API for sending UDP packets
    Cleanup UIP_CONF_IPV6_RPL configuration
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Updated include paths for the moved files under net/
    Moved all generic IP files into the net/ip module
    Added the const keyword to IP address arguments that are not (and should not be) changed by the callee
    Small fixes to networking files
    
    1. Added #include header
    2. Fixed #defines that weren't updated
    3. Small change to comment that now points to correct RFC section
    Check if the nexthop neighbor for a given route has disappeared. If so, we drop the route too. If we happen to be the RPL root, we also initiate a global repair as the neighbor may moved.
    Make uip-ds6-route use neighbor table. Instead of storing a global list of routing entries that contain both the next hop and the destination, we have a separate list of reachable destination for each neighbor in the global table.
    Make DS6 neighbors use neighbor-table, and move all DS6 neighbor management from uip-ds6 to a new uip-ds6-neighbor module.
    Added a flag to optionally disable IPv6 NA/NS at compile time
    Limit size of uip/tcpip stack when not using TCP at all.
    Added #if UIP_CONF_IPV6 around the IPv6 code in the uIP source tree to allow the C files to be compiled even if IPv6 is not configured.
    Removed useless register keywords.
    
    Modern compilers (especially GCC) ignore the register keyword anyway and the latest cc65 snapshot generates actually larger code with the register keyword at the locations in question.
    Code style and debugging updates
    Added a configuration option to annotate IP transmissions with red arrows in Cooja.
    Remove compiler warning for remove_ext_header().
    remove unnecessary stimer call in tcpip_ipv6_output()
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    Added native-border-router and slip-radio
    Clear uip_len when trying to send to a neighbor with an incomplete state, as suggested by Ivan Delamer.
    code style
    Use rpl headers.
    some fixes to cut some extension headers before TCP processing
    Add support of RPL Option (http://tools.ietf.org/html/draft-ietf-6man-rpl-option-03):
    - Auto-insersion when forwarding messages
    - Delete messages with 2 rank errors
    Not supported yet :
    - Routing depending on InstanceID
    - DAO inconsistency loop recovery
    - Full UDP or TCP support (Bugs in µIPv6)
    - Real Option Type (TBD by IANA)
    Cleaning old .h :
    - Delete unimplemented function and unused structures
    - Remove misleading configuration options
    - Transfer some comments from 6lowmac to framer-802154
    (doc/uip6-doc.txt should be cleaned as well)
    Use the new shared ND-packet queue buffers
    Small style fixes
    added initialization of RPL
    fixed typo
    added fallback interface and removed uip_router
    integration of new uip6 code from Mathilde and Julien - adds routing and improved interface handling
    Major bugfix, found by Raimondas Sasnauskas: the TCP periodic timer was not started when a new connection request arrived. If there were no other active TCP connections, this means that the SYNACK would never be retransmitted, potentially leading to a forever stale TCP connection.
    Changed to use separate Contiki event type for ICMP6 notifications
    Bugfix by Henrik Mäkitaavola: check that ICMP6 process is defined before invoking it
    support udp_broadcast_new also when using IPv6. Suggested by Wolf-Bastian Pttner.
    in case UIP_CONF_ROUTING is set, check if we have a registered routing
    module and use it for looking up the next hop of an address.
    Rewrote the tcpip_output() and tcpip_set_outputfunc() so that the latter is a proper function (which simplifies debugging) and so that tcpip_output() checks if the output callback function is NULL before calling it
    Removed CLOCK_SECOND from stimers in uIPv6, stimers are already in seconds
    Inform user about (most likely unintentional) call of dummy_tcpip_output_function.
    Added dummy function so that tcpip_output() always is defined, even if tcpip_set_outputfunc() never has been called. This fixes a bug with programs attempting to use the network when compiled for the native platform.
    Added more curly brackets to ensure ANSI C compliance when UIP_TCP is defined;
    added curly brackets to ensure ANSI C compliance when UIP_TCP is defined; some automatic whitespace removal
    Main uIPv6 files addition
    Changed the name of UIP_CONF_TCP_FORWARD to UIP_CONF_IP_FORWARD since forwarding is done at the IP level
    Changed packet forwarding from a runtime option to a compiletime option. This avoids pulling in uip-fw.o if forwarding isn't required (saves > 1400 bytes on 6502 targets).
    *** This change breaks all platforms calling tcpip_set_forwarding() ! These calls were intentionally not removed as they need to be replaced by setting the new compiletime option UIP_CONF_TCP_FORWARD - which should be done by the platform owners. ***
    Allow to link with UIP_CONF_ACTIVE_OPEN set to 0.
    When UIP_UDP is off, turn off udp functions more accurately.
    Changed packet drivers from services to plain processes.
    
    Now tcpip_output() is a function pointer that is supposed to be set via the macro tcpip_set_outputfunc(). Packet drivers do so on process startup.
    
    Thus if there are several packet drivers in a Contiki system the one started last is the one actually used. This behaviour is especially useful for the 'IP forwarding' "meta" packet driver.
    Replaced function with macro.
    * Need to track if we at the moment are doing forwarding or sending.
    const qualifiers
    More uip_ipaddr_t fixes.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    changed to use constant instead of numeric value
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    Moved all generic IP files into the net/ip module
    Fixed severe bug in PSOCK_READTO (?)
    
    Either I found and fixed a severe bug in PSOCK_READTO() or I misunderstood something completely. To me PSOCK_READTO() is supposed to return if either the supplied character was read or if the user supplied buffer is exhausted - sor far so good.
    
    However if the latter occurs up to now PSOCK_READTO() was continuing to process characters already read from the network (aka present in the uIP buffer) in order to check if the supplied character was found there and adjust the return value accordingly. But this means that the character processed this way were lost forever for the caller as the next call to PSOCK_READTO() would continue to read past the characters processed this way.
    
    Therefore I removed that character processing altogether. So now if the user supplied buffer is exhausted before the supplied character is found the next call to PSOCK_READTO() starts exactly where previous call left off.
    Fixed severe bug in PSOCK_READTO (?)
    
    Either I found and fixed a severe bug in PSOCK_READTO() or I misunderstood something completely. To me PSOCK_READTO() is supposed to return if either the supplied character was read or if the user supplied buffer is exhausted - sor far so good.
    
    However if the latter occurs up to now PSOCK_READTO() was continuing to process characters already read from the network (aka present in the uIP buffer) in order to check if the supplied character was found there and adjust the return value accordingly. But this means that the character processed this way were lost forever for the caller as the next call to PSOCK_READTO() would continue to read past the characters processed this way.
    
    Therefore I removed that character processing altogether. So now if the user supplied buffer is exhausted before the supplied character is found the next call to PSOCK_READTO() starts exactly where previous call left off.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    added psock function for reading specified number of bytes
    removed unused (and slightly problematic) code
    Adjusted formal parameter to single existing actual parameter.
    Bugfix and addition by Dogan Yazar: psock_readbuf() shouldn't wait for a full buffer (which might never happen); a new function for sending strings that batches data and sends full buffers instead of individual strings.
    *** empty log message ***
    Bugfix: psock send should use PT_WAIT_UNTIL() not PT_YIELD_UNTIL(). This improves TCP throughput by 100x under minimal-net
    Commented out otherwise unguarded printf().
    Bugfix: there was a problem with TCP segments not being properly retransmitted for protosockets-based applications. Cleaning up the logic around acknowledgements and retransmissions fixed the bugs pertaining to retransmissions of lost packets. This bugfix affects both the telnet server and the web server (which now work as expected wrt packet loss).
    Fixed compiler warnings to make code compile with gcc's -pedantic switch
    removed debugging printf
    make an old debbuging printf optional
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix warnings caused by incorrect param names / undocumented params
    Doxygen fixes
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    [doc] moved doxygen parts from core/net/simple-udp.c to corresponding
    header file
    Updated include paths for the moved files under net/
    Moved all generic IP files into the net/ip module
    Added a function simple_udp_sendto_port() for sending a UDP packet to a specified port.
    A significantly simpler API for sending UDP packets
    added missing include
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Cleaned up #includes to avoid cyclic dependencies - the Rime includes no longer depend on rime.h
    Fixed compiler warnings to make code compile with gcc's -pedantic switch
    Yet another network bulk flooding protocol
    Made send intervals configurable when sending a new file
    Documentation updates
    Moved rudolph{0,1} from apps/ directory into core/net/rime
    Removed the use of CFS. Instead, provide callbacks for the using application to fill in data.
    Bugfixes, added version API, larger data size
    A simple program for reliably sending a file to all neihgboring nodes
    Renamed Rime output function
    A Rime driver for the simple-cc2420 driver
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved all generic IP files into the net/ip module
    When IPv6 ND kicks in, the packet that caused the ND can either be dropped or saved in a buffer to be send when the NS reply returns. This commit reimplements the buffer management to avoid having one buffer per neighbor, but instead use a buffer pool from which buffers can be allocated for different neighbors.
    Fix warnings caused by incorrect param names / undocumented params
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Updated include paths for the moved files under net/
    Moved all generic IP files into the net/ip module
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    Moved all generic IP files into the net/ip module
    When IPv6 ND kicks in, the packet that caused the ND can either be dropped or saved in a buffer to be send when the NS reply returns. This commit reimplements the buffer management to avoid having one buffer per neighbor, but instead use a buffer pool from which buffers can be allocated for different neighbors.
    Don't do the debug printout if ipaddr is NULL
    Automatically initialize the resolv process
    Avoid compiler warning about unused variable
    Fix for CERT VU#210620: randomize DNS request IDs for every request
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    core/net/ip: Prevent (tiny) buffer overflow in resolv_found()
    
    An off-by-one error in resolv_found() could make an strncat() call
    overflow by the terminating null byte.
    
    When building with Clang the following warning was shown:
    
    ../../../core/net/ip/resolv.c:1458:17: warning: the value of the
          size argument in 'strncat' is too large, might lead to a
          buffer overflow [-Wstrncat-size]
                    sizeof(resolv_hostname) - strlen(resolv_hostname));
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ../../../core/net/ip/resolv.c:1458:17: note: change the argument to
          be the free space in the destination buffer minus the
          terminating null byte
                    sizeof(resolv_hostname) - strlen(resolv_hostname));
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                    sizeof(resolv_hostname) - strlen(resolv_hostname) - 1
    
    Signed-off-by: Joakim Gebart <joakim.gebart@eistec.se>
    Avoid compiler warnings.
    Updated include paths for the moved files under net/
    Moved all generic IP files into the net/ip module
    Removed unnecessary code from resolver.
    Removed unnecessary code from resolver.
    resolv: Fix for bad NSEC record on announce
    resolv: Fix for word alignment issues in `mdns_prep_host_announce_packet()`.
    core/net/resolv: Misc. updates and cleanups.
    core/net/resolv: Fix for resolving CNAME records.
    core/net/resolv: Fix for SDCC.
    Reduced code size.
    
    Combined recent changes from darconeous...
    - Refactor to decrease minimum code footprint.
    - Added `RESOLV_CONF_SUPPORTS_RECORD_EXPIRATION`.
    ...with a few additional changes to reduce code size.
    Some more changes improving code style conformance and code size.
    Some coding style nomalization.
    Restored Contiki compatibility with non-C99 compilers.
    
    (and compilers without non-standard extensions like void pointer arithmetic)
    core/net/resolv: IPv6 and mDNS ("Bonjour") support. Major refactor.
    
    This patch updates the DNS resolver to support IPv6 and introduces an
    improved API for looking up DNS entries. This patch also adds optional
    support for mDNS lookups and responses to the DNS resolver.
    
    Here is a quick summary of the changes:
    
     * Added support for IPv6 lookups.
     * DNS queries now honor record expiration.
     * Added support for mDNS, compatible with "Bonjour".
     * Implemented a new lookup api, `resolv_lookup2()`, which provides
       more information about the state of the record(error, expired,
       looking-up, etc.).
    
    About mDNS/Bonjour Support
    --------------------------
    
    This patch adds basic support for mDNS/Bonjour, which allows you to
    refer to the name of a device instead of its IP address. This is
    incredibly convenient for IPv6 addresses because they tend to be very
    long and difficult to remember. It is especially important for
    link-local IPv6 addresses, since not all programs support the '%'
    notation for indicating a network interface (required on systems with
    more than one network interface to disambiguate).
    
    In other words, instead of typing in this:
    
     * `http://[fe80::58dc:d7ed:a644:628f%en1]/`
    
    You can type this instead:
    
     * `http://contiki.local/`
    
    Huge improvement, no?
    
    The convenience extends beyond that: this mechanism can be used for
    nodes to talk to each other based on their human-readable names instead
    of their IPv6 addresses. So instead of a switch on
    `aaaa::58dc:d7ed:a644:628f` triggering an actuator on
    `aaaa::ed26:19c1:4bd2:f95b`, `light-switch.local` can trigger the
    actuator on `living-room-lights.local`.
    
    What you need to do to be able to look up `.local` names on your
    workstation depends on a few factors:
    
     * Your machine needs to be able to send and receive multicast packets
       to and from the LoWPAN. You can do this easily with the Jackdaw
       firmware on an RZUSBStick. If you have a border router, you will need
       it to bridge the mDNS multicast packets across the border.
    
     * If you are using a Mac, you win. All Apple devices support mDNS
       lookups.
    
     * If you are using Windows, you can install Apple's Bonjour for Windows
       package. (This may be already installed on your machine if you have
       installed iTunes) After you install this you can easily do `.local`
       lookups.
    
     * If you are using a Unix machine, you can install Avahi.
    
    The default hostname is set to `contiki.local.`. You can change the
    hostname programmatically by calling `resolv_set_hostname()`. You can
    change the default hostname by changing `CONTIKI_CONF_DEFAULT_HOSTNAME`.
    
    You may disable mDNS support by setting `RESOLV_CONF_SUPPORTS_MDNS` to
    `0`.
    
    ---------------------------------
    
    core/net/resolv: `resolv_lookup2()` -> `resolv_lookup()`
    
    Note that this patch should fix several `resolv_lookup()` bugs
    that already existed. There were many cases where `resolv_lookup()`
    was being called and the IP address ignored, but later code
    assumed that the IP address had been fetched... ANYWAY, those
    should be fixed now.
    
    ---------------------------------
    
    examples/udp-ipv6: Updated client to use MDNS to lookup the server.
    
    Also updated the Cooja regression test simulation.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Updated API for uiplib and resolv to use uip_ipaddr_t instead of uint16_t for compability with IPv6
    Remove compiler warning
    Fixed compiler warnings to make code compile with gcc's -pedantic switch
    When UIP_UDP is off, turn off udp functions more accurately.
    Up to now the DNS resolver relied on the uIP 1/2 second polling for its retry management (implementing a linear back-off). But Contiki 2.x uIP doesn't implement the 1/2 second polling for UDP connections anymore! Therefore I added an event timer to the DNS resolver for its retry management. I went for a 1 second interval (still with the same linear back-off) as compromise between officially recommended longer intervals (i.e. BIND with 5 seconds and exponential back-off) and a reasonable user experience for the self induced packet loss in ARP setups.
    More uip_ipaddr_t fixes.
    Avoid compiler warnings.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved all generic IP files into the net/ip module
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    added psock function for reading specified number of bytes
    removed unused (and slightly problematic) code
    Bugfix and addition by Dogan Yazar: psock_readbuf() shouldn't wait for a full buffer (which might never happen); a new function for sending strings that batches data and sends full buffers instead of individual strings.
    Explicit typecast to avoid compiler problems
    fixed documentation typos.
    Fixed compiler warnings to make code compile with gcc's -pedantic switch
    refer to PSOCK_NEWDATA.
    Documentation updates
    Import of the contiki-2.x development code from the SICS internal CVS server
    The UDP socket API code
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Moved all generic IP files into the net/ip module
    Add comments to the #else and #endifs to make it clearer to what #ifdef they belong.
    Correct the operator in the comment so that it matches the actual #if
    Fixed a severe error in the bugfix: the conditional was reversed. The check must be if the TCP MSS is larger than the BUFSIZE and not the other way around.
    Make 0 the default link-layer header length, as far as uIP is concerned. Most currently used linke layers (specifically, 802.15.4) has adaptation layers that use separate buffers, so there is no need to reserve space in the uIP buffer.
    Moved #defines so that UIP_TCPIP_HLEN and UIP_LLH_LEN are defined before they are used
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Produce an error if the UIP_TCP_MSS is too large for UIP_BUFSIZE
    Allow the default TTL to be configured with UIP_CONF_TTL
    Fixed a typo in net/uipopt.h
    Removed now unused per-module neighbor table size configs. Use NEIGHBOR_CONF_MAX_NEIGHBORS instead.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted deprecated uIP types in the network stack to standard C99 names (in stdint.h)
    Cleaning old .h :
    - Delete unimplemented function and unused structures
    - Remove misleading configuration options
    - Transfer some comments from 6lowmac to framer-802154
    (doc/uip6-doc.txt should be cleaned as well)
    Allow shorter UIP_CONF_WAIT_TIMEOUT for more aggressive power saving modes.
    Put parenthesis around user-supplied options. Patch by Roger Larsson
    UDP checksum is mandatory with IPv6. (Patch by Robert Quattlebaum.)
    Made TCP MSS configurable
    fixed documentation typos.
    Bug fix by David Kopf - sicslowpan timeout was always set at 20 seconds, this greatly improves performance!!
    Main uIPv6 files addition
    Adjusted value (without distinguishing between Ethernet, SLIP, ...).
    Fixed typo.
    Allow to actually configure active open support via  UIP_CONF_ACTIVE_OPEN.
    Is there any reason I don't understand why this wasn't allowed? At least it seems to work...
    Made endianess configuration actually work.
    Documentation updates
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    The ip64-addr module converts between IPv4 and IPv6 addresses.
    NAT64 / DNS64 code for Contiki that makes connecting an IPv6 Contiki network to IPv4 networks really easy
    Adds support for ADF7023 sub-GHz radio from Analog Devices and RL78 series MCU from Renesas.
    
    This example platform for this port is the EVAL-ADF7XXXMB4Z w/ radio
    daughter cards:
    
        http://www.analog.com/en/evaluation/eval-adf7023/eb.html
    
    See the platform readme for usage and platform information:
    
        https://github.com/contiki-os/contiki/tree/master/platform/eval-adf7xxxmb4z/readme.md
    
    All files provided by Analog Devices for this port are released under
    the same license as Contiki and copyright Analog Devices Inc. per
    agreement between Redwire Consulting, LLC and Analog Devices Inc. (SOW 08122013)
    Move files.
    Uncrustify.
    In GNURL78 v13.01 __far keyword is fixed. Now it is possible to use far pointers to flash area.
    Initial commit
    The ip64-addr module converts between IPv4 and IPv6 addresses.
    The ip64-addr module converts between IPv4 and IPv6 addresses.
    Fix warnings caused by incorrect \defgroup, \addtogroup, \file
    [core/net/mac] Doxygen: Added frame802154 to net group
    frame802154: move inclusion of linkaddr.h from .h to .c file
    struct frame802154_t: make sure dest_addr and src_addr are aligned
    framer-802154: Support for explicit keys
    framer-802154: Simplification of frame802154_create
    framer-802154: Support for creating and parsing frames with security headers
    framer-802154: Style fixes
    llsec: Configuration option for defining a constant LoWPAN-wide security level
    Closing doxygen groups
    Changed the name of the rimeaddr module to linkaddr
    Moved the rimeaddr.[ch] code from the core/net/rime module to the core/net module, as it is used not only by rime code
    Allow payload len to be larger than 256 bytes
    Let the framer functions use ints instead of uint8_t to make them more generic
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Reworked 802.15.4 header creation and parsing so that it works regardless of the size of the rimeaddr_t typedef
    removed bitfields for compatibility with cc65
    added 802.15.4 frame packeter
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Add missing includes, remove unimplemented function declaration.
    added static on the list send functions to get less compiler errors with IAR compiler
    Include string.h
    Added bursts support in CSMA/ContikiMAC, and CFS-swapping in
    queuebuf. Exemplified in examples/udp-stream.
    Renamed nullrdc to nullrdc-noframer and nullrdc-framer to nullrdc.
    
    nullrdc (previously nullrdc-framer) is now a RDC implementation that
    does not do any radio duty cycling but supports link layer addresses
    and frame format via framer (for example 802.15.4). nullrdc can now be
    used in the same way as contikimac, xmac, etc.
    
    nullrdc-noframer (previously nullrdc) is a null RDC implementation
    that does not do any radio duty cycling, does not add any header of its
    own to the packets, and does not support link layer addresses.
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Added a field to the struct mac interface:
    channel_check_interval(). This function returns the interval by which
    the duty cycling mechanism checks the radio channel for activity. It
    is used by higher layer mechanisms to determine suitable timeouts for
    retransmissions.
    Code style fix
    generic return values for sent packet
    added init function in MAC driver for easier configuration
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    added name to mac structure
    Added parameter to the mac off() method that specifies whether or not the radio should be turned off when the MAC layer is turned off
    Avoid usage of POSIX function names even for static functions as some indirectly included system header might declare them.
    Ensure that receiver_callback is set before calling it
    Made initialization function return a pointer to the MAC driver structure, to make initialization nicer
    Modified to use the new MAC layer API
    Avoid function pointer mismatch in set_receive_function().
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    ContikiMAC: Create and parse ContikiMAC header in special framer; Expanded framer interface
    to allow for creating and securing frames in advance; Create and secure frames in advance when sending bursts; Do neither recreate nor resecure frames that come from phase
    Changed the name of the rimeaddr module to linkaddr
    Fix naming issues and includes in uip-ds6-nbr.h
    Make phase module use neighbor-table.
    style fix; added fas check for cycle_time being a power of two or not.
    Add optional correction for phase drift of receiver.
    Removed ContikiMAC burst dependency to phase optimization
    Added bursts support in CSMA/ContikiMAC, and CFS-swapping in
    queuebuf. Exemplified in examples/udp-stream.
    Fix avr-gcc compiler warnings
    Rework of the phase-lock optimization mechanism. There were several bugs in the existing code, such as the phase-lock would lose synchronization when a packet was lost.
    Added a timer to each phase structure that keeps track of for how long
    a particular receiver has not ACKed packets. After some time
    (currently 16 seconds), the sender will begin sending full strobe
    periods again.
    Use the list_item_next() API
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Moved ctimer.[ch] from their old and illogical location in core/net/rime to a more appropriate place in core/sys
    PRINTF()ed debugging output
    Turn off DEBUG mode by default.
    Bugfix: memory from the wrong memb was freed.
    Improved phase lock behaviour when neighbor is not duty cycling: senders notify receivers via the 802.15.4 pending bit that they are not duty cycling. Neighbors then will start sending packets immediately and not wait for neighbors' phase. Tweaking of ContikiMAC timers to make it more reliable.
    Fine-tuned the timing and phase lock optimization
    Fiddled with the timing
    Back off a guard time for every non-ack packet
    Two major changes:
    
    * Low-power streaming. Experimental support for a low-power mode which
      allows rapid exchange of packets with a 16% duty cycle. Does not
      seem to function correctly yet though.
    
    * Phase locking. When the phase of a neighbor has been detected, the
      sender assumes that the neighbor will keeps it phase and does not
      send more strobes than necessary to hit the receiver's channel
      check - even if the receiver does not acknowledge the reception of
      the strobes when it should have been awake. Instead, the sender
      stops strobing and tries again at a later time.
    Improved handling of neighbor phase estimation: instead of busy-waiting while waiting for neighbor's phase, the new code schedules a timer just before neighbor wakes up
    Prod the watchdog if waiting for along time
    Refactored the phase optimization functionality into a separate module
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added a new module called "framer" that creates MAC level frames to
    the packetbuf from packet attributes. Two framer modules are included,
    one that creates 802.15.4 frame headers, and one that creates a
    minimal "nullmac"-style header that only contains the link-local
    addresses.
    added multihop routing support through replaceable modules. first implementation
    uses rime's route discovery by translating between ipv6 and rime addresses.
    added experimental checkpointing functionality:
    currently only implemented on the sky platform
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    llsec: Added a layer in between NETSTACK_MAC and NETSTACK_NETWORK for implementing link layer security
    Updated include paths for the moved files under net/
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Added a field to the struct mac interface:
    channel_check_interval(). This function returns the interval by which
    the duty cycling mechanism checks the radio channel for activity. It
    is used by higher layer mechanisms to determine suitable timeouts for
    retransmissions.
    Code style fix
    generic return values for sent packet
    added init function in MAC driver for easier configuration
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    added name to mac structure
    Added parameter to the mac off() method that specifies whether or not the radio should be turned off when the MAC layer is turned off
    Avoid usage of POSIX function names even for static functions as some indirectly included system header might declare them.
    Ensure that receiver_callback is set before calling it
    Made initialization function return a pointer to the MAC driver structure, to make initialization nicer
    Modified to use the new MAC layer API
    Avoid function pointer mismatch in set_receive_function().
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added a simple CSMA (Carrier Sense Multiple Access) mechanism that
    works on top of an underlying duty cycling mechanism. The CSMA layer
    retransmits packets that could not be sent because of a collision was
    detected.
    added init function in MAC driver for easier configuration
    xmac ctimer implementation
    Modified to use the new MAC layer API
    Added nicer configuration options. Added hack for optimizing X-MAC for unicast packets. Added statistics gathering. Turn radio off when someone else is receiving a packet. Queueing packets when X-MAC cannot send immediately (since someone else is transmitting).
    Strobes for unicast packets are now acked immediately. Sleep cycle is now configurable. Many bugfixes
    Power saving MAC protocol based on X-MAC [SenSys 2006]
    Rime driver running over UDP
    Initial import of the experimental Rime code into the SourceForge CVS.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Minor bugfix: explicitly cast pointer argument in debug printf
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Made debug printfs optional
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Added email client example.
    Added IRC client example.
    Introduced web browser as new example using ctk fullscreen mode.
    Rime statistics gathering
    Import of the contiki-2.x development code from the SICS internal CVS server
    packetbuf: Use packetbuf_holds_broadcast() all-over
    ContikiMAC: Create and parse ContikiMAC header in special framer; Expanded framer interface
    to allow for creating and securing frames in advance; Create and secure frames in advance when sending bursts; Do neither recreate nor resecure frames that come from phase
    framer-802154: Support for explicit keys
    framer-802154: Conditional compilation of security-related code
    framer-802154: Simplification of frame802154_create
    framer-802154: Renamed variable for the sake of consistency
    framer-802154: Sequence number fix
    framer-802154: Support for setting and accessing the frame type
    attribute
    framer-802154: Support for creating and parsing frames with security headers
    framer-802154: Introduced mnemonic variable
    framer-802154: Style fixes
    Changed to use LINKADDR_SIZE instead of sizeof() to select between
    short address and long address as some platforms might use padding in
    the struct. This fixes #555.
    Added method to framer that returns the header length if the framer
    would create a header with the current packet information.
    
    This allows sicslowpan to calculate the max payload size without
    consuming a sequence number or clearing/restoring the packet buffer.
    Changed the name of the rimeaddr module to linkaddr
    [core/net/mac] Removed invalid struct member u8 in PRINTADDR
    Let the framer functions use ints instead of uint8_t to make them more generic
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Changed FRAMER to return negative values for error to allow 0 size headers.
    Cleaning old .h :
    - Delete unimplemented function and unused structures
    - Remove misleading configuration options
    - Transfer some comments from 6lowmac to framer-802154
    (doc/uip6-doc.txt should be cleaned as well)
    Several compiler warning fixes:
    
         * msp430: fix "implicit declaration of function" warnings in clock.c, by including watchdog.h;
         * sky: fix a couple pointer target signedness warnings;
         * core: fix several signed/unsigned comparison warnings;
         * framer-802154: "const static" -> "static const" to fix compiler warnings;
         * core: comment or remove unused variables and function definitions.
    
    Signed-off-by: Lionel Debroux <lionel_debroux@yahoo.fr>
    Signed-off-by: Mariano Alvira <mar@devl.org>
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Added a packetbuf flag that indicates if the link layer acks should be used or not
    Improved handling of duplicate packets
    Added MAC-layer duplicate message suppression, which is very helpful when running with duty cycling turned off
    Improved phase lock behaviour when neighbor is not duty cycling: senders notify receivers via the 802.15.4 pending bit that they are not duty cycling. Neighbors then will start sending packets immediately and not wait for neighbors' phase. Tweaking of ContikiMAC timers to make it more reliable.
    Don't set the RELIABLE flag on incoming packets with the ack requested flag set, since it is set on most packets even if they aren't reliable
    Changed to use short address mode with short rime addresses
    Don't set the ack flag for broadcast packets
    added random init of sequence number
    Reworked 802.15.4 header creation and parsing so that it works regardless of the size of the rimeaddr_t typedef
    added missing include
    Added a new module called "framer" that creates MAC level frames to
    the packetbuf from packet attributes. Two framer modules are included,
    one that creates 802.15.4 frame headers, and one that creates a
    minimal "nullmac"-style header that only contains the link-local
    addresses.
    Moved the link layer destination check to sicslowmac
    added init function in MAC driver for easier configuration
    Fixed link panid for broadcasts to be standard compliant. Ignore packets addressed to other non-broadcast panids.
    added 802.15.4 frame packeter
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    frame802154: move inclusion of linkaddr.h from .h to .c file
    framer-802154: Support for explicit keys
    framer-802154: Conditional compilation of security-related code
    framer-802154: Simplification of frame802154_create
    framer-802154: Support for creating and parsing frames with security headers
    Changed the name of the rimeaddr module to linkaddr
    Allow payload len to be larger than 256 bytes
    Let the framer functions use ints instead of uint8_t to make them more generic
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Reworked 802.15.4 header creation and parsing so that it works regardless of the size of the rimeaddr_t typedef
    sdcc compiler issue fix: compound assignments are not supported, so we use memcpy() instead
    removed bitfields for compatibility with cc65
    added 802.15.4 frame packeter
    Add per neighbor packet throttle
    Improve csma debug traces
    llsec: Added a layer in between NETSTACK_MAC and NETSTACK_NETWORK for implementing link layer security
    Bugfix: when a packet is sent by the RDC layer, we should count the number of transmissions made because a single callback can pertain to multiple transmissions at the RDC layer.
    Changed the name of the rimeaddr module to linkaddr
    csma: Initialize sequence number with random value
    
    According to IEEE 802.15.4 (§5.1.6.1, §6.4.2), the MAC sequence numbers should
    be initialized to random values. This was already the case in
    framer-802154.c:create(), but not in csma.c:send_packet(), sometimes causing
    false detections of duplicate MAC-layer packets in other devices when a device
    was restarted too quickly. This patch decreases the probability of such an
    event.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    Implement a truncated exponential backoff for csma
    Bugfix: when a CSMA callback is received, we should remove the packet
    that was transmitted and not just the first packet that happens to be on
    the output queue.
    Defensive programming: make sure that we don't fail completely if we get a callback for a NULL pointer
    Minor code style fixes to the contikimac and nullrdc code
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added bursts support in CSMA/ContikiMAC, and CFS-swapping in
    queuebuf. Exemplified in examples/udp-stream.
    Bug fix: update packet attributes in queued packets in CSMA instead of doing a full packetbuf copy after transmissions. The lower layers often add their own headers to packetbuf.
    Bugfix: energy consumption for retransmissions was miscounted
    Bugfix: q->buf was not tested for NULL, as it should be. Fix by Simon Duquennoy.
    Bugfix: default should be 3 MAC-level retransmissions if collissions or loss occurs
    Bugfix by Simon Duquennoy: don't transmit packet until previous packet has been sent by the RDC layer.
    Rework of the new CSMA in-order code that fixes a number of smalllish bugs in the in-order code.
    Rework of the CSMA layer: instead of using one timer per packet, the module now uses one central timer and a queue of outgoing packets. This helps to keep packets in order, which is extremely useful for TCP transfers, and reduces the amount of congestion since consecutive packets now are spaced in time if there is a collision. Based on the observations and ideas of Simon Duquennoy.
    Always restore the queuebuf to the packetbuf before calling the upper layers. Reduce the waiting time between successive MAC layer retransmissions.
    Bug fix: release the packet and notify the sender if RDC returned an error
    Moved the definition of the channel check rate used by the radio duty
    cycling layer. This definition was previously held in net/mac/mac.h,
    with the name MAC_CONF_CHANNEL_CHECK_RATE. But since the rate is used
    by the radio duty cycling layer, it makes more sense to change its
    name to reflect this. Also, the configuration option should be tied to
    the netstack configuration instead.
    
    So the new configuration option is called
    NETSTACK_CONF_RDC_CHANNEL_CHECK_RATE.
    Changed the retransmission time to be based on the configured MAC channel check rate when the RDC has no channel check interval.
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Moved ctimer.[ch] from their old and illogical location in core/net/rime to a more appropriate place in core/sys
    Improved handling of duplicate packets
    * Added configurable default number of transmissions for CSMA to use when not specified using packetbuf attributes (CSMA_CONF_MAX_MAC_TRANSMISSIONS).
    * Renamed packetbuf attribute PACKETBUF_ATTR_MAX_MAC_REXMIT to PACKETBUF_ATTR_MAX_MAC_TRANSMISSIONS where value 0 (attribute not set) means that default number of transmissions should be used.
    Simplified the structure of the code
    Minor bugfix: don't subtract collisions and deferrals from the number of transmissions
    Bugfix: handle deferred transmissions correctly (don't count them)
    forward arguments even if REXMIT is not set
    Don't count collisions as transmissions
    Made the number of MAC-layer retransmissions configurable on a per-packet basis, via a packet attribute
    Removed the combined name of CSMA and NETSTACK_RDC. The name of NETSTACK_RDC can be accessed separately if needed.
    Bugfix: the wrong callback pointer was passed to higher layers.
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Retransmit packet if it didn't receive a MAC layer ack
    Removed the csma_init declaration in the mac_driver struct since it isn't needed and it breaks sdcc
    Bugfix: deallocate queuebuf only if there was no collision
    Typecast to fix nightly build problem
    Added a simple CSMA (Carrier Sense Multiple Access) mechanism that
    works on top of an underlying duty cycling mechanism. The CSMA layer
    retransmits packets that could not be sent because of a collision was
    detected.
    Added a field to the struct mac interface:
    channel_check_interval(). This function returns the interval by which
    the duty cycling mechanism checks the radio channel for activity. It
    is used by higher layer mechanisms to determine suitable timeouts for
    retransmissions.
    Code style fix
    generic return values for sent packet
    added init function in MAC driver for easier configuration
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    added name to mac structure
    Added parameter to the mac off() method that specifies whether or not the radio should be turned off when the MAC layer is turned off
    Avoid usage of POSIX function names even for static functions as some indirectly included system header might declare them.
    Ensure that receiver_callback is set before calling it
    Made initialization function return a pointer to the MAC driver structure, to make initialization nicer
    Modified to use the new MAC layer API
    Avoid function pointer mismatch in set_receive_function().
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    packetbuf: Use packetbuf_holds_broadcast() all-over
    ContikiMAC: Create and parse ContikiMAC header in special framer; Expanded framer interface
    to allow for creating and securing frames in advance; Create and secure frames in advance when sending bursts; Do neither recreate nor resecure frames that come from phase
    llsec: Removed superseded NETSTACK_ENCRYPT, NETSTACK_DECRYPT, and
    NETSTACK_ENCRYPTION_INIT macros
    llsec: Disable duplicate detection when the LLSEC driver provides replay protection anyway.
    llsec: Calling NETSTACK_LLSEC.on_frame_created()
    Changed the name of the rimeaddr module to linkaddr
    rdc: duplicate packets: Factor out detection code
    
    The code detecting duplicate packets in the RDC layer had been copied into most
    RDC implementations. Factor it out into a new mac-sequence module in order to
    have a single instance of this code.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    link-layer acks support for cooja motes
    6lowpan fragmentation bugfix: the 6lowpan code had an unfortunate
    interaction with the behavior of the rdc layer. If the first packet of a
    fragment transmission was lost, the remaining packets would get dropped
    on reception. Moreover, the reception code contained a bug that
    sometimes would cause fragments to be misidentified as fragments. Taken
    together, these problems would result in a pathelogical network
    breakdown if too many fragmented packets would occur simultaneously.
    Major bugfix: when nullrdc is asked to send a list of packets, send the list of packets and not just the first packet - this is essential for retransmissions of fragmented IP packets to work
    A number of updates to nullrdc
    
    * add a few rimestats to keep track of sent and received acks
    * made a number of configuration options possible to override (ack timing)
    * added the logic for sending 802.15.4 link layer ack packets, despite not being able to guarentee the 802.15.4 MAC timing
    * increased the number of sequence numbers to keep track of for duplicate filtering
    Added support for encryption and decryption of the packetbuf if macros
    NETSTACK_ENCRYPT and NETSTACK_DECRYPT are defined. Those are intended
    to be called as functions NETSTACK_ENCRYPT() and NETSTACK_DECRYPT() to
    encrypt and decrypt the packetbuf, respectively. If needed, an
    initialization function by the name NETSTACK_ENCRYPTION_INIT() can
    also be defined.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Changed FRAMER to return negative values for error to allow 0 size headers.
    Add missing includes, remove unimplemented function declaration.
    added static on the list send functions to get less compiler errors with IAR compiler
    Added bursts support in CSMA/ContikiMAC, and CFS-swapping in
    queuebuf. Exemplified in examples/udp-stream.
    Added optional address filtering
    add NULLRDC_CONF_802154_AUTOACK_HW for radios that only pass-up NOACK
    status but not the actual ack packet.
    pass up a RADIO_NOACK to the MAC layer.
    Made the number of MAC sequence numbers to remember configurable
    Renamed nullrdc to nullrdc-noframer and nullrdc-framer to nullrdc.
    
    nullrdc (previously nullrdc-framer) is now a RDC implementation that
    does not do any radio duty cycling but supports link layer addresses
    and frame format via framer (for example 802.15.4). nullrdc can now be
    used in the same way as contikimac, xmac, etc.
    
    nullrdc-noframer (previously nullrdc) is a null RDC implementation
    that does not do any radio duty cycling, does not add any header of its
    own to the packets, and does not support link layer addresses.
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Added a field to the struct mac interface:
    channel_check_interval(). This function returns the interval by which
    the duty cycling mechanism checks the radio channel for activity. It
    is used by higher layer mechanisms to determine suitable timeouts for
    retransmissions.
    Code style fix
    generic return values for sent packet
    added init function in MAC driver for easier configuration
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    added name to mac structure
    Added parameter to the mac off() method that specifies whether or not the radio should be turned off when the MAC layer is turned off
    Avoid usage of POSIX function names even for static functions as some indirectly included system header might declare them.
    Ensure that receiver_callback is set before calling it
    Made initialization function return a pointer to the MAC driver structure, to make initialization nicer
    Modified to use the new MAC layer API
    Avoid function pointer mismatch in set_receive_function().
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added a new module called "framer" that creates MAC level frames to
    the packetbuf from packet attributes. Two framer modules are included,
    one that creates 802.15.4 frame headers, and one that creates a
    minimal "nullmac"-style header that only contains the link-local
    addresses.
    added multihop routing support through replaceable modules. first implementation
    uses rime's route discovery by translating between ipv6 and rime addresses.
    added experimental checkpointing functionality:
    currently only implemented on the sky platform
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    rdc: duplicate packets: Factor out detection code
    
    The code detecting duplicate packets in the RDC layer had been copied into most
    RDC implementations. Factor it out into a new mac-sequence module in order to
    have a single instance of this code.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Cleanup of the ContikiMAC code; removed the old an unused announcement code
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    ntikiMAC: a new radio duty cycling mechanism that uses a combination
    of link-layer and MAC-layer mechanisms to achieve a very low power
    consumption: during idle listening the radio is switched off between
    99.2% and 99.6% of the time. One unicast transmission typically adds
    between 0.07% and 1.2% additional radio time, depending on packet
    size.
    
    ContikiMAC uses the standard IEEE 802.15.4 message format and adds no
    additional headers.
    
    ContikiMAC is simple: it uses periodic two-shot channel sampling
    during idle listening to keep the radio on-time down. Transmissions
    are done with repeated transmissions until a link-layer ACK is
    received.
    Increased the clock speed to 32768/4 from 32768/8 to provide better accuracy for power profiling of radio CCA checks
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    removed offset in rtimer_arch
    Reading timer now quicker, embryo for possible future drift configuration
    Fixed description
    MSP430 real-time rtimer support using timerb1
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    MSP430 definitions
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Renamed nullrdc to nullrdc-noframer and nullrdc-framer to nullrdc.
    
    nullrdc (previously nullrdc-framer) is now a RDC implementation that
    does not do any radio duty cycling but supports link layer addresses
    and frame format via framer (for example 802.15.4). nullrdc can now be
    used in the same way as contikimac, xmac, etc.
    
    nullrdc-noframer (previously nullrdc) is a null RDC implementation
    that does not do any radio duty cycling, does not add any header of its
    own to the packets, and does not support link layer addresses.
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Made initialization function return a pointer to the MAC driver structure, to make initialization nicer
    Modified to use the new MAC layer API
    A 'null' MAC protocol that does not do anything
    Rime driver running over UDP
    Initial import of the experimental Rime code into the SourceForge CVS.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    rdc: duplicate packets: Keep only the last sequence number for each address
    
    According to IEEE 802.15.4e (§6.4.3.9), in order to detect duplicate received
    MAC-layer frames, only the most recently received frame's sequence number needs
    to be stored for each unique device address. Doing so limits the possible false
    duplicate packet detections to a single sequence number. This also allows to
    keep the last sequence number of more device addresses for the same value of
    MAX_SEQNOS.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    rdc: duplicate packets: Factor out detection code
    
    The code detecting duplicate packets in the RDC layer had been copied into most
    RDC implementations. Factor it out into a new mac-sequence module in order to
    have a single instance of this code.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added a powertrace command as an interface to the powertrace app
    Added Sentilla USB platform. This platform is similar to the Sky platform but without the sensors and with 2 leds.
    Added Sentilla Jcreate platform. This platform is similar to the Sky platform but with other sensors and 8 leds.
    Moved ninimal-ppp into backyard as it depends on the uIP ppp support.
    Import of the contiki-2.x development code from the SICS internal CVS server
    ContikiMAC: Create and parse ContikiMAC header in special framer; Expanded framer interface
    to allow for creating and securing frames in advance; Create and secure frames in advance when sending bursts; Do neither recreate nor resecure frames that come from phase
    llsec: Removed superseded NETSTACK_ENCRYPT, NETSTACK_DECRYPT, and
    NETSTACK_ENCRYPTION_INIT macros
    Added support for encryption and decryption of the packetbuf if macros
    NETSTACK_ENCRYPT and NETSTACK_DECRYPT are defined. Those are intended
    to be called as functions NETSTACK_ENCRYPT() and NETSTACK_DECRYPT() to
    encrypt and decrypt the packetbuf, respectively. If needed, an
    initialization function by the name NETSTACK_ENCRYPTION_INIT() can
    also be defined.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Common initialization code for the netstack
    Import of the contiki-2.x development code from the SICS internal CVS server
    ContikiMAC: Create and parse ContikiMAC header in special framer; Expanded framer interface
    to allow for creating and securing frames in advance; Create and secure frames in advance when sending bursts; Do neither recreate nor resecure frames that come from phase
    Added method to framer that returns the header length if the framer
    would create a header with the current packet information.
    
    This allows sicslowpan to calculate the max payload size without
    consuming a sequence number or clearing/restoring the packet buffer.
    Changed the name of the rimeaddr module to linkaddr
    Fix compilation error when DEBUG enabled in core/net/mac/framer-nullmac.c
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Changed FRAMER to return negative values for error to allow 0 size headers.
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Added a new module called "framer" that creates MAC level frames to
    the packetbuf from packet attributes. Two framer modules are included,
    one that creates 802.15.4 frame headers, and one that creates a
    minimal "nullmac"-style header that only contains the link-local
    addresses.
    slip.c:
            char is signed but uip_buf is unsigned
    
    spi.h:
            casted unused values to void
    
    autostart.c:
    autostart.h:
            The array itself should be const but the processes pointed to
            should not.
    
    profile-aggregates.c:
            sizeof returns unsigned long on my platform
    Debug output
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Renamed nullrdc to nullrdc-noframer and nullrdc-framer to nullrdc.
    
    nullrdc (previously nullrdc-framer) is now a RDC implementation that
    does not do any radio duty cycling but supports link layer addresses
    and frame format via framer (for example 802.15.4). nullrdc can now be
    used in the same way as contikimac, xmac, etc.
    
    nullrdc-noframer (previously nullrdc) is a null RDC implementation
    that does not do any radio duty cycling, does not add any header of its
    own to the packets, and does not support link layer addresses.
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Made initialization function return a pointer to the MAC driver structure, to make initialization nicer
    Modified to use the new MAC layer API
    A 'null' MAC protocol that does not do anything
    Rime driver running over UDP
    Initial import of the experimental Rime code into the SourceForge CVS.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Made initialization function return a pointer to the MAC driver structure, to make initialization nicer
    Modified to use the new MAC layer API
    A 'null' MAC protocol that does not do anything
    Rime driver running over UDP
    Initial import of the experimental Rime code into the SourceForge CVS.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved the definition of the channel check rate used by the radio duty
    cycling layer. This definition was previously held in net/mac/mac.h,
    with the name MAC_CONF_CHANNEL_CHECK_RATE. But since the rate is used
    by the radio duty cycling layer, it makes more sense to change its
    name to reflect this. Also, the configuration option should be tied to
    the netstack configuration instead.
    
    So the new configuration option is called
    NETSTACK_CONF_RDC_CHANNEL_CHECK_RATE.
    Added MAC-layer return value to indicate that a packet transmission was deferred
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Include contiki-conf.h to let the MAC channel check rate be configurable
    Added a MAC layer return value that informs the caller that a packet did not receive a MAC layer acknowledgement
    Added a configuration option for setting the MAC channel check rate (which must be a power of two). The configuration is independent of the MAC protocol.
    Added a field to the struct mac interface:
    channel_check_interval(). This function returns the interval by which
    the duty cycling mechanism checks the radio channel for activity. It
    is used by higher layer mechanisms to determine suitable timeouts for
    retransmissions.
    Added an error type for signalling a MAC-layer collision
    added radio and MAC generic return values to allow applications finding out whether the packet was transmitted
    added init function in MAC driver for easier configuration
    Documentation bugfix
    Added a 'name' field in the mac structure, which allows boot-up code to print out the name of the currently selected MAC protocol
    Added parameter to the mac off() method that specifies whether or not the radio should be turned off when the MAC layer is turned off
    Generic API for MAC layers
    Rime driver running over UDP
    Initial import of the experimental Rime code into the SourceForge CVS.
    Import of the contiki-2.x development code from the SICS internal CVS server
    llsec: Disable duplicate detection when the LLSEC driver provides replay protection anyway.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added bursts support in CSMA/ContikiMAC, and CFS-swapping in
    queuebuf. Exemplified in examples/udp-stream.
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    ntikiMAC: a new radio duty cycling mechanism that uses a combination
    of link-layer and MAC-layer mechanisms to achieve a very low power
    consumption: during idle listening the radio is switched off between
    99.2% and 99.6% of the time. One unicast transmission typically adds
    between 0.07% and 1.2% additional radio time, depending on packet
    size.
    
    ContikiMAC uses the standard IEEE 802.15.4 message format and adds no
    additional headers.
    
    ContikiMAC is simple: it uses periodic two-shot channel sampling
    during idle listening to keep the radio on-time down. Transmissions
    are done with repeated transmissions until a link-layer ACK is
    received.
    Increased the clock speed to 32768/4 from 32768/8 to provide better accuracy for power profiling of radio CCA checks
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    removed offset in rtimer_arch
    Reading timer now quicker, embryo for possible future drift configuration
    Fixed description
    MSP430 real-time rtimer support using timerb1
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    MSP430 definitions
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    ContikiMAC: Create and parse ContikiMAC header in special framer; Expanded framer interface
    to allow for creating and securing frames in advance; Create and secure frames in advance when sending bursts; Do neither recreate nor resecure frames that come from phase
    Added method to framer that returns the header length if the framer
    would create a header with the current packet information.
    
    This allows sicslowpan to calculate the max payload size without
    consuming a sequence number or clearing/restoring the packet buffer.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Changed FRAMER to return negative values for error to allow 0 size headers.
    Replaced old framer (framer_get/framer_set) with new NETSTACK style configuration. Added nullrdc-framer that is a nullrdc with framer support.
    Added a new module called "framer" that creates MAC level frames to
    the packetbuf from packet attributes. Two framer modules are included,
    one that creates 802.15.4 frame headers, and one that creates a
    minimal "nullmac"-style header that only contains the link-local
    addresses.
    added autoack config for bridge
    ipv6 bridge between 802.15.4 and ethernet - over USB/SLIP - use with sliptap6
    A module that enables Rime to run over UDP.
    added multihop routing support through replaceable modules. first implementation
    uses rime's route discovery by translating between ipv6 and rime addresses.
    added experimental checkpointing functionality:
    currently only implemented on the sky platform
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    Moved the rimeaddr.[ch] code from the core/net/rime module to the core/net module, as it is used not only by rime code
    Make phase module use neighbor-table.
    Disable phase shift correction by default
    Add optional correction for phase drift of receiver.
    Removed ContikiMAC burst dependency to phase optimization
    Added bursts support in CSMA/ContikiMAC, and CFS-swapping in
    queuebuf. Exemplified in examples/udp-stream.
    Added a timer to each phase structure that keeps track of for how long
    a particular receiver has not ACKed packets. After some time
    (currently 16 seconds), the sender will begin sending full strobe
    periods again.
    Improved phase lock behaviour when neighbor is not duty cycling: senders notify receivers via the 802.15.4 pending bit that they are not duty cycling. Neighbors then will start sending packets immediately and not wait for neighbors' phase. Tweaking of ContikiMAC timers to make it more reliable.
    Two major changes:
    
    * Low-power streaming. Experimental support for a low-power mode which
      allows rapid exchange of packets with a 16% duty cycle. Does not
      seem to function correctly yet though.
    
    * Phase locking. When the phase of a neighbor has been detected, the
      sender assumes that the neighbor will keeps it phase and does not
      send more strobes than necessary to hit the receiver's channel
      check - even if the receiver does not acknowledge the reception of
      the strobes when it should have been awake. Instead, the sender
      stops strobing and tries again at a later time.
    Improved handling of neighbor phase estimation: instead of busy-waiting while waiting for neighbor's phase, the new code schedules a timer just before neighbor wakes up
    Refactored the phase optimization functionality into a separate module
    Added prototype missing for quite some time now - do we need -Werror ?
    Added functionality for decaying routes: when a packet is sent over a route, it is decayed. If the route is not refreshed within four packets (with the route_refresh() function, which is called when a new packet arrives), the route is dropped. A route can be decayed at most once per second
    Removed automatic refresh of routes from the route_lookup() function and moved it into an explicit route_refresh() function. The previous behaviour was dangerous, since it meant that even bad routes that someone was looking for were considered fresh. Now such routes time out if they are not explictily refreshed (e.g., on a packet reception)
    Made constant addresses const
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    Added API for reading the routing table
    Cleaned up #includes to avoid cyclic dependencies - the Rime includes no longer depend on rime.h
    Documentation updates
    Make route lifetime dynamically configurable
    Added missing prototype.
    Added automatic timeouts
    New Rime module: mesh, a mesh routing protocol
    Initial version of a simple mesh routing protocol written with Rime
    Import of the contiki-2.x development code from the SICS internal CVS server
    Turned sicslowmac into a module
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    added 802.15.4 frame packeter
    A quick, initial implementation of the LPP power-saving MAC protocol (Musaloiu-E et al, IPSN 2008)
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    packetbuf: Use packetbuf_holds_broadcast() all-over
    framer-802154: Simplification of frame802154_create
    Changed the name of the rimeaddr module to linkaddr
    Turned sicslowmac into a module
    [core/net/mac] Removed invalid struct member u8 in PRINTADDR
    core/net: Added support for "bridge mode".
    
    "Bridge mode" allows devices to more easily send 802.15.4 packets as if
    they were a different device. It also turns off any packet filtering
    that may be implemented at layer 2. It works by allowing
    `PACKETBUF_ADDR_SENDER` to be set earlier in the stack.
    
    This is useful for implementing 6LoWPAN-ethernet bridges.
    
    Enabled via setting `NETSTACK_CONF_BRIDGE_MODE` to 1. Disabled by
    default.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Add missing includes, remove unimplemented function declaration.
    Added bursts support in CSMA/ContikiMAC, and CFS-swapping in
    queuebuf. Exemplified in examples/udp-stream.
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    added missing function in sicslowmac_driver
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Moved the link layer destination check to sicslowmac
    added init function in MAC driver for easier configuration
    Fixed link panid for broadcasts to be standard compliant. Ignore packets addressed to other non-broadcast panids.
    added 802.15.4 frame packeter
    Cleanup packetbuf: use rime attributes and addresses only when rime is enabled. Saves 32 byte per queuebuf in the non-rime case.
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    packetbuf: Use packetbuf_holds_broadcast() all-over
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Moved cxmac into a separate module
    core/net: Added support for "bridge mode".
    
    "Bridge mode" allows devices to more easily send 802.15.4 packets as if
    they were a different device. It also turns off any packet filtering
    that may be implemented at layer 2. It works by allowing
    `PACKETBUF_ADDR_SENDER` to be set earlier in the stack.
    
    This is useful for implementing 6LoWPAN-ethernet bridges.
    
    Enabled via setting `NETSTACK_CONF_BRIDGE_MODE` to 1. Disabled by
    default.
    avoid gcc optimization bug by extracting struct values
    Eliminate unused variable warnings. Dummy test of PT_YIELD_FLAG does not change program size.
    Changed FRAMER to return negative values for error to allow 0 size headers.
    added static on the list send functions to get less compiler errors with IAR compiler
    Added bursts support in CSMA/ContikiMAC, and CFS-swapping in
    queuebuf. Exemplified in examples/udp-stream.
    Several compiler warning fixes:
    
         * msp430: fix "implicit declaration of function" warnings in clock.c, by including watchdog.h;
         * sky: fix a couple pointer target signedness warnings;
         * core: fix several signed/unsigned comparison warnings;
         * framer-802154: "const static" -> "static const" to fix compiler warnings;
         * core: comment or remove unused variables and function definitions.
    
    Signed-off-by: Lionel Debroux <lionel_debroux@yahoo.fr>
    Signed-off-by: Mariano Alvira <mar@devl.org>
    Moved the definition of the channel check rate used by the radio duty
    cycling layer. This definition was previously held in net/mac/mac.h,
    with the name MAC_CONF_CHANNEL_CHECK_RATE. But since the rate is used
    by the radio duty cycling layer, it makes more sense to change its
    name to reflect this. Also, the configuration option should be tied to
    the netstack configuration instead.
    
    So the new configuration option is called
    NETSTACK_CONF_RDC_CHANNEL_CHECK_RATE.
    Fix compiler warnings
    Use the list_item_next() API
    Replaced old framer (framer_get/framer_set) with new NETSTACK style configuration. Added nullrdc-framer that is a nullrdc with framer support.
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Remove unused rtimer code
    Added a MAC layer return value that informs the caller that a packet did not receive a MAC layer acknowledgement
    Added a configuration option for setting the MAC channel check rate (which must be a power of two). The configuration is independent of the MAC protocol.
    Remove compiler warnings
    Revised version of the X-MAC implementation that uses a ctimer instead
    of an rtimer for the periodic radio duty cycling. The benefit of this
    implementation is that it leaves an rtimer free for user tasks. The
    drawback is a slightly higher idle power consumption. This new version
    is based on the current rtimer-based X-MAC.
    added init function in MAC driver for easier configuration
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Changed all occurences of u8_t and u16_t to uint8_t and uint16_t
    xmac ctimer implementation
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Modified to use the new MAC layer API
    Made it compile again.
    Added nicer configuration options. Added hack for optimizing X-MAC for unicast packets. Added statistics gathering. Turn radio off when someone else is receiving a packet. Queueing packets when X-MAC cannot send immediately (since someone else is transmitting).
    The PT_* macros contain return statements so a function using them must return a value.
    Strobes for unicast packets are now acked immediately. Sleep cycle is now configurable. Many bugfixes
    Power saving MAC protocol based on X-MAC [SenSys 2006]
    Moved cxmac into a separate module
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Revised version of the X-MAC implementation that uses a ctimer instead
    of an rtimer for the periodic radio duty cycling. The benefit of this
    implementation is that it leaves an rtimer free for user tasks. The
    drawback is a slightly higher idle power consumption. This new version
    is based on the current rtimer-based X-MAC.
    added init function in MAC driver for easier configuration
    xmac ctimer implementation
    Modified to use the new MAC layer API
    Added nicer configuration options. Added hack for optimizing X-MAC for unicast packets. Added statistics gathering. Turn radio off when someone else is receiving a packet. Queueing packets when X-MAC cannot send immediately (since someone else is transmitting).
    Strobes for unicast packets are now acked immediately. Sleep cycle is now configurable. Many bugfixes
    Power saving MAC protocol based on X-MAC [SenSys 2006]
    Rime driver running over UDP
    Initial import of the experimental Rime code into the SourceForge CVS.
    Import of the contiki-2.x development code from the SICS internal CVS server
    ContikiMAC: Retain original copyright
    ContikiMAC: Added missing length function to contikimac-framer.c
    ContikiMAC: Create and parse ContikiMAC header in special framer; Expanded framer interface
    to allow for creating and securing frames in advance; Create and secure frames in advance when sending bursts; Do neither recreate nor resecure frames that come from phase
    Cleanup packetbuf: use rime attributes and addresses only when rime is enabled. Saves 32 byte per queuebuf in the non-rime case.
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    packetbuf: Use packetbuf_holds_broadcast() all-over
    ContikiMAC: Create and parse ContikiMAC header in special framer; Expanded framer interface
    to allow for creating and securing frames in advance; Create and secure frames in advance when sending bursts; Do neither recreate nor resecure frames that come from phase
    llsec: Removed superseded NETSTACK_ENCRYPT, NETSTACK_DECRYPT, and
    NETSTACK_ENCRYPTION_INIT macros
    llsec: Disable duplicate detection when the LLSEC driver provides replay protection anyway.
    llsec: Calling NETSTACK_LLSEC.on_frame_created()
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Moved the contikimac code into a core/net/mac/contikimac module
    rdc: duplicate packets: Factor out detection code
    
    The code detecting duplicate packets in the RDC layer had been copied into most
    RDC implementations. Factor it out into a new mac-sequence module in order to
    have a single instance of this code.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    Make phase module use neighbor-table.
    changed inter packet interval to 0.4ms
    Added a number of default options for ContikiMAC, and allow them to be overridden with contiki-conf.h configuration options
    Removed undef
    Corrects some leftover uncapitalized printfs which may cause some platforms
    to crash.
    Bugfix: keep track of receiver being awake as a local variable rather than a global, as it may have changed between invokations
    Minor code style fixes to the contikimac and nullrdc code
    core/net: Added support for "bridge mode".
    
    "Bridge mode" allows devices to more easily send 802.15.4 packets as if
    they were a different device. It also turns off any packet filtering
    that may be implemented at layer 2. It works by allowing
    `PACKETBUF_ADDR_SENDER` to be set earlier in the stack.
    
    This is useful for implementing 6LoWPAN-ethernet bridges.
    
    Enabled via setting `NETSTACK_CONF_BRIDGE_MODE` to 1. Disabled by
    default.
    Added support for encryption and decryption of the packetbuf if macros
    NETSTACK_ENCRYPT and NETSTACK_DECRYPT are defined. Those are intended
    to be called as functions NETSTACK_ENCRYPT() and NETSTACK_DECRYPT() to
    encrypt and decrypt the packetbuf, respectively. If needed, an
    initialization function by the name NETSTACK_ENCRYPTION_INIT() can
    also be defined.
    DOS EOL and indentation fixes (core/ apps/ cpu/)
    
    - Removed some DOS EOLs
    - Changed some tabs to spaces
    - Removed some trailing whitespaces
    
    Part of Pull Request #6
    base encounter_time on the time before last strobe, remove unused previous_txtime
    stm32w platforms: use 2 cca and default contikimac guard time
    adding ducy cycling support to the stm32w-based platforms (patch by Chi-Anh La)
    Fix compile errors with SDCC
    
    Intermingled declarations and code are not yet implemented in sdcc.
    Add display options to border router web page, default now uses stack instead of static buffer.
    Turn radio off until prefix is acquired.
    Adjust cycle starts when RTIMER_ARCH_SECOND not a power of two.
    Changed FRAMER to return negative values for error to allow 0 size headers.
    Restore packetbuf before mac callback (earlier commit was accidental reverted)
    Add RDC_CONF_HARDWARE_CSMA, RDC_CONF_HARDWARE_ACK, RDC_CONF_MCU_SLEEP, CONTIKIMAC_CONF_SHORTEST_PACKET_SIZE for use with hardware having those modes.
    Default behaviour should be unchanged.
    Fixed to restore packetbuf before mac callback
    Removed ContikiMAC burst dependency to phase optimization
    added static on the list send functions to get less compiler errors with IAR compiler
    Added bursts support in CSMA/ContikiMAC, and CFS-swapping in
    queuebuf. Exemplified in examples/udp-stream.
    Cleanup of the ContikiMAC code; removed the old an unused announcement code
    Made the ContikiMAC header configurable from contiki-conf.h
    Made the number of phase neighbors configurable
    Fix compiler warning for unused variable
    Bugfix: idle power consumption was sometimes misestimated for transmissions, when a duty cycle rtimer fired in the middle of a transmission
    'if' statement replaced by a preprocessor directive.
    Made the number of MAC sequence numbers to remember configurable; fixed bug with power attribution to the idle state.
    Added the low-power streaming mode where frequent channel checks are performed when streaming is on. Enabling this will (by setting WITH_STREAMING to 1), however, significantly slow down Cooja/MSPsim simulations.
    Updated streaming mode to use only about 20% radio. Made guard time more conservative due to problem report by Ricklef Wohlers.
    Enabled phase-lock only for channel check rates of 32 Hz or lower
    Cleaned up parts of the code; added comments
    Rework of the phase-lock optimization mechanism. There were several bugs in the existing code, such as the phase-lock would lose synchronization when a packet was lost.
    Make sure that the cycle timing is exact
    Bugfix: with the recent bugfixes, it was no longer possible to turn duty cycling back on after it had  been turned off
    Let ContikiMAC remember the state that the radio should have when duty cycling is turned off. This fixes a bug in which the radio was turned on after sending, even when NETSTACK_RDC.off(0) was enabled.
    Turned off streaming by default to save code space; made guard time a little more conservative
    Made the guard time slightly more conservative - found an occasion where this was needed
    Timing bugfix in the waiting period between channel samples to check if the coast is clear before sending a packet.
    Bugfix: the return value sometimes was wrong when a collision was detected.
    Added a packetbuf flag that indicates if the link layer acks should be used or not
    removed unused variable
    code cleanup
    Added MAC header to handle padding
    Fixed to only use leds when DEBUG is set
    Bugfix: timing fixed
    Improved handling of duplicate packets
    Added an optional rate limit for broadcast transmissions
    Added MAC-layer duplicate message suppression, which is very helpful when running with duty cycling turned off
    Small timing tweaks
    Removed non-existant cooja-debug.h include
    Fiddled more with the timing: the phase seems stable now at least. Still bugs left though...
    After a lot of tweaking and twiddling with the timing of the ContikiMAC code and the mechanisms in the CC2420 driver, things seem to work somewhat stable now - knock on wood!
    Improved phase lock behaviour when neighbor is not duty cycling: senders notify receivers via the 802.15.4 pending bit that they are not duty cycling. Neighbors then will start sending packets immediately and not wait for neighbors' phase. Tweaking of ContikiMAC timers to make it more reliable.
    made number of phase neighbors configurable
    Bugfixed stream mode: node listens 100% for 0.5 seconds in stream mode. Naming change: is_listening changed is_snooping.
    Fine-tuned the timing and phase lock optimization
    Fiddled with the timing
    Had previously not included the waiting time that the CC2420 introduces when sending a packet. Also increased the smallest packet size, just to be on the safe side.
    Removed non-existant include file
    Extend packet size after creating 802.15.4 header; prepare radio chip with packet before waiting for neighbor phase to make phase wait time deterministic
    Extend the length of announcement packets if they are too short
    Minor timing bugfix: the time between channel checks should not include the time required for the channel check itself
    Increase the required non-activity periods before turning off the radio; remove the strict phase requirement (which messes up things with low-power streaming)
    Bugfixes in low-power streaming mode, and re-added support for announcements. These now use the low-power streaming mode so that active listening for announcments have a radio duty cycle of 16% rather than 100%
    Two major changes:
    
    * Low-power streaming. Experimental support for a low-power mode which
      allows rapid exchange of packets with a 16% duty cycle. Does not
      seem to function correctly yet though.
    
    * Phase locking. When the phase of a neighbor has been detected, the
      sender assumes that the neighbor will keeps it phase and does not
      send more strobes than necessary to hit the receiver's channel
      check - even if the receiver does not acknowledge the reception of
      the strobes when it should have been awake. Instead, the sender
      stops strobing and tries again at a later time.
    Avoid newlines in macro expansions as cc65 doesn't support them between the macro name and the open parenthesis of the arguments.
    
    There were btw other even longer lines with expansions of the same macro already present.
    Don't call up the netstack if the transmission was deferred
    Rework of the timing conditions of ContikiMAC: the old timing did not work well on real hardware, the new one seems to work better
    Replaced old framer (framer_get/framer_set) with new NETSTACK style configuration. Added nullrdc-framer that is a nullrdc with framer support.
    Improved handling of neighbor phase estimation: instead of busy-waiting while waiting for neighbor's phase, the new code schedules a timer just before neighbor wakes up
    Improved detection of link-layer ACKs; increased the time ContikiMAC waits when it has detected a link-layer ACK; increased the number of silence periods required to detect a CCA false positive
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    Rework of parts of the ContikiMAC code based on input from experimental results. When channel check is triggered because of a false positive, the new version checks the radio several times to make sure that there really is an incoming packet. Otherwise, the radio is switched off. Cleaned up and removed old unused code. Added a few temporary debugging mechanisms and functions.
    Removed inadvertedly left-over include file
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    ntikiMAC: a new radio duty cycling mechanism that uses a combination
    of link-layer and MAC-layer mechanisms to achieve a very low power
    consumption: during idle listening the radio is switched off between
    99.2% and 99.6% of the time. One unicast transmission typically adds
    between 0.07% and 1.2% additional radio time, depending on packet
    size.
    
    ContikiMAC uses the standard IEEE 802.15.4 message format and adds no
    additional headers.
    
    ContikiMAC is simple: it uses periodic two-shot channel sampling
    during idle listening to keep the radio on-time down. Transmissions
    are done with repeated transmissions until a link-layer ACK is
    received.
    ContikiMAC: Retain original copyright
    ContikiMAC: Create and parse ContikiMAC header in special framer; Expanded framer interface
    to allow for creating and securing frames in advance; Create and secure frames in advance when sending bursts; Do neither recreate nor resecure frames that come from phase
    llsec: CCM* encryption tests
    llsec: CCM* verification tests
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    two new shell commands: download and sendcmd
    added experimental checkpointing functionality:
    currently only implemented on the sky platform
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved the contikimac code into a core/net/mac/contikimac module
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Cleanup of the ContikiMAC code; removed the old an unused announcement code
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    ntikiMAC: a new radio duty cycling mechanism that uses a combination
    of link-layer and MAC-layer mechanisms to achieve a very low power
    consumption: during idle listening the radio is switched off between
    99.2% and 99.6% of the time. One unicast transmission typically adds
    between 0.07% and 1.2% additional radio time, depending on packet
    size.
    
    ContikiMAC uses the standard IEEE 802.15.4 message format and adds no
    additional headers.
    
    ContikiMAC is simple: it uses periodic two-shot channel sampling
    during idle listening to keep the radio on-time down. Transmissions
    are done with repeated transmissions until a link-layer ACK is
    received.
    Increased the clock speed to 32768/4 from 32768/8 to provide better accuracy for power profiling of radio CCA checks
    moved rtimer from TimerB to TimerA so that TimerB subsystem is free for other uses
    removed offset in rtimer_arch
    Reading timer now quicker, embryo for possible future drift configuration
    Fixed description
    MSP430 real-time rtimer support using timerb1
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    MSP430 definitions
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix warnings caused by unescaped special doxygen chars
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added configuration option to circumvent C compilers that have problems with const function pointers (i.e., sdcc)
    Added a macro for concatenation of two strings, which may be macro expansions
    Removed compiler warnings.
    Fixed a glitch of CC_CONF_ASSIGN_AGGREGATE.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    fixed timer bug - did not do equality comparison
    changed timer comparison to avoid crashing mspgcc4
    Ugly workaround for internal error in mspgcc when applying the >= operator to two 32-bit values
    Reverted the timer_expired() back to the previous version (which should be correct). Removed the definition of CLOCK_LT() because it seems to only cause problems.
    Added a timer_remaining() function that returns the time until the timer expires
    Hardy Griech's timer bugfix: avoid direct comparison for timer values since they may wrap. Instead, use the CLOCK_LT() that works correctly even for wrapped timers.
    Fixed typo.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Closing doxygen groups
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Remove compiler warnings
    There were many bugs in the rtimer code, particularly one that made only one rtimer at a time work. We have a new rtimer system that we're testing, but in the meantime, I rewrote the rtimer code to explicitly support only one rtimer. Makes the code significantly simpler (and fixes a bug that was very hard to track down).
    Made rtimer callback a typedefed type to make function prototypes nicer
    Documentation fix. Number of rtimers configurable with contiki-conf.h
    Bugfix: should not invoke timer if timer list is empty.
    Fixed API to be consistent between .h and .c file
    Renamed rt module to rtimer
    Initial code for a Contiki real-time scheduler
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    fixed documentation typos.
    Spelling error fix
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    fixed documentation typos.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved thread states from module to header
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    removed unused state codes and unused printf statements
    Removed unused code
    Added mt_stop() calling mtarch_stop() to allow for thread resource cleanup.
    Copyright update
    Commented out unused functionality: the ability to create a process running a thread was never used. With the new code, only running 'bare' threads is supported. If support for creating processes with a thread is needed, it may be reneabled later but currently there doesn't seem to be a need for it
    #if 0:ed out unused code
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Documentation group set accordingly
    Moved ctimer.[ch] from their old and illogical location in core/net/rime to a more appropriate place in core/sys
    * Added ctimer_restart(). Patch by Moritz Struebe.
    * Added ctimer_expired().
    Documentation updates
    Documentation fixes
    Initial import of the experimental Rime code into the SourceForge CVS.
    Functions for sending individual UDP datagrams
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added function to retrieve elapsed time
    corrected macro name
    a timer of seconds
    Added a timer_remaining() function that returns the time until the timer expires
    Hardy Griech's timer bugfix: avoid direct comparison for timer values since they may wrap. Instead, use the CLOCK_LT() that works correctly even for wrapped timers.
    Fixed typo.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Communication power accounting: this module keeps track of the energy expenditure of individial communication activities, such as transmission or reception of individual packets or idle listening.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Decorate declaration rather than definition with export attribute.
    Declare 'autostart_processes' as CLIF (Contiki Loadable Interface) to trigger exporting the symbol from shared libraries on Win32.
    slip.c:
            char is signed but uip_buf is unsigned
    
    spi.h:
            casted unused values to void
    
    autostart.c:
    autostart.h:
            The array itself should be const but the processes pointed to
            should not.
    
    profile-aggregates.c:
            sizeof returns unsigned long on my platform
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Account for 16 bit rtimer wraparound, else ENERGEST way underreports AVR times.
    Bugfix: attribute energy expenditure to a device only if the device was actually switched on
    Added flash reads and writes to energest.
    fixed documentation typos.
    fixed energest to always add positive values and to use all bits, removed energest arch
    Moved energest.{c,h} from core/lib to core/sys: power profiling is a system mechanism, not a library
    Changed energest_type_time() to first update the total time, if the device
    is currently active, before returning the total time.
    
    Added energest_flush() that updates the total time for all currently
    active devices. It should be called periodically to avoid the time to
    overflow for devices that are active for long periods of time.
    Added ENEGEST_SECOND
    added support for devices with power levels (e.g. TX radio)
    Adjusted include path.
    Include rtimer.h instead of rtimer-arch.h
    Changed the energy estimation type ENERGEST_TYPE_RECEIVE to ENERGEST_TYPE_LISTEN to highlight that energy is spent on idle listening, not just the actual reception of packets
    Added IRQ and SERIAL component.
    Made scalar values explicitly unsigned long. Preliminary support for cummulative estimates (larger than 32 bits)
    Changed variable declaration into type definition - as most likely originally intended.
    Experimental energy estimation code
    A very simple CC2420 driver that can only send and receive raw packets. No extra CC2420 functionality is enabled or used.
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix some unresolved references
    
    * Either by removing them
    * Or by resolving them
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Add clock_delay_us and clock_set_seconds to clock.h. Modify clock_wait to use clock_time_t.
    Remove the troublesome avr/dev/delay.* files.
    Add PLATFORM_NAME and combine the confusing *_REVISION defines into a single PLATFORM_TYPE
    Reverted the timer_expired() back to the previous version (which should be correct). Removed the definition of CLOCK_LT() because it seems to only cause problems.
    Fixed the CLOCK_LT again. The previous revert was incorrect: the conditional was missing due to a bad copy-and-paste on my part :(
    Fixed missing parenthesis
    Reverted CLOCK_LT to the previous version, which upon closer examination seems to be correct. The new version did not work correctly on the minimal-net platform.
    Hardy Griech's timer bugfix: avoid direct comparison for timer values since they may wrap. Instead, use the CLOCK_LT() that works correctly even for wrapped timers.
    Added CCIF to make clock_seconds() function name visible for win32
    Added a clock_seconds() function prototype to core/sys/clock.h, that returns seconds in 32 bit format.
    Declare some more functions as CCIF (Contiki Core Interface) to trigger exporting the symbols from the main binary on Win32.
    compare clock_time_t's
    Added experimental clock_fine() function
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix minor typos
    Changed the parameter 'char * data' of process_start to the
    type process_data_t. This was an artifact when the choice was
    made to use the void * type for the data parameter in processes.
    
    Changed parameter 'void * data' of process_post_synch to
    process_data_t for consistency.
    
    Checked all the uses of process_start() in contiki and fixed casts
    of the data parameter.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Defensive programming: make sure that a process is actually running before we try to kill it.
    Add option to remove process name strings to save RAM
    Removed unused code; a number of fixed by Anthony Asterisk
    Removed PROCESS_ZOMBIE code, which does not compile with sdcc, added some optional debugging printouts
    Process only one poll request at a time to avoid starvation if one process keeps calling process_poll() from its poll handler
    Removed remaining debug code
    Rewrote the process code so that initialization events are posted synchronously instead of asynchronously, so that we don't have to explicitly wait for processes to be initialized. This also reduces the size of the event queue by half on the Tmote Sky platform since the queue was maximized during system bootup. This change also prompted an update of the process invokation code to ensure that a process is not invoked again when processing an event. General cleanup of the code also.
    corrected comment
    Debug output
    * Don't include signal.h.
    New function process_nevents().
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    fixed energest to always add positive values and to use all bits, removed energest arch
    Moved energest.{c,h} from core/lib to core/sys: power profiling is a system mechanism, not a library
    Changed energest_type_time() to first update the total time, if the device
    is currently active, before returning the total time.
    
    Added energest_flush() that updates the total time for all currently
    active devices. It should be called periodically to avoid the time to
    overflow for devices that are active for long periods of time.
    added support for devices with power levels (e.g. TX radio)
    Initialization of energest_current_time to fix problems with energy attribution on LEDs during Tmote Sky bootup
    Fixed type of energest_crrent_time to match the type in the .h file
    Added a function for setting the estimated energy of a component
    Made scalar values explicitly unsigned long. Preliminary support for cummulative estimates (larger than 32 bits)
    Experimental energy estimation code
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    Closing doxygen groups
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    A module that allows Contiki processes to have subprocesses. A subprocess is defined within another process and is created on the fly when needed.
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Flush before computing accumulative power
    Moved the modules packetbuf, queuebuf, and packetqueue from net/rime to net/, since they are not Rime-specific
    Improved per-packet power profiling: if a packet is retransmitted, the new energy is added to the old energy so that it is possible to measure the full energy for all transmissions of the packet
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Changed listen and transmit energy attributes so that they are named _TIME rather than _ENERGY, to indicate that they contain the time during which the radio was switched on and not the energy
    Communication power accounting: this module keeps track of the energy expenditure of individial communication activities, such as transmission or reception of individual packets or idle listening.
    This is an initial commit of an implementation of the Chameleon
    architecture for the Rime stack for Contiki. The Chameleon
    architecture separates the header processing from the Rime protocol
    logic. Instead of having each protocol create its own part of the
    packet header, protocols use packet attributes. Before sending a
    packet, a special Chameleon header processing module creates a packet
    header from the packet attributes. The same Chameleon module parses
    incoming packets and creates packet attributes from the header.
    
    The details are in our SenSys 2007 paper:
    
    Adam Dunkels, Fredrik Osterlind, Zhitao He. An Adaptive Communication
    Architecture for Wireless Sensor Networks. In Proceedings of the Fifth
    ACM Conference on Networked Embedded Sensor Systems (SenSys 2007),
    Sydney, Australia, November 2007.
    
    http://www.sics.se/~adam/dunkels07adaptive.pdf
    
    This is a rewrite of the code that was developed for the paper.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Updated to new radio_driver API
    tr1001 init fix
    Added radio sniffer program
    More uip_ipaddr_t fixes.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Eliminate unused variable warnings. Dummy test of PT_YIELD_FLAG does not change program size.
    fixed documentation typos.
    Fixed the behaviour of PT_SCHEDULE() so that it returns true if a protothread is still active (yielded or waiting). Thanks to Kevin Collins for fixing.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix warnings caused by incorrect param names / undocumented params
    Changed the parameter 'char * data' of process_start to the
    type process_data_t. This was an artifact when the choice was
    made to use the void * type for the data parameter in processes.
    
    Changed parameter 'void * data' of process_post_synch to
    process_data_t for consistency.
    
    Checked all the uses of process_start() in contiki and fixed casts
    of the data parameter.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Bugfix: PROCESS_PAUSE() must explicitly check the event type, otherwise we may cause the process event queue to fill up if we repeatedly call PROCESS_PAUSE() while other (broadcast) events are posted as well, such as timer events.
    Add option to remove process name strings to save RAM
    fixed documentation typos.
    Declare some more functions as CCIF (Contiki Core Interface) to trigger exporting the symbols from the main binary on Win32.
    Removed support for the old method of starting a dynamically loaded process based on the symbol 'process_load'. All loaders now have to use the new method based on the symbol 'autostart_processes'.
    Rewrote the process code so that initialization events are posted synchronously instead of asynchronously, so that we don't have to explicitly wait for processes to be initialized. This also reduces the size of the event queue by half on the Tmote Sky platform since the queue was maximized during system bootup. This change also prompted an update of the process invokation code to ensure that a process is not invoked again when processing an event. General cleanup of the code also.
    reverted the PROCESS_LOAD() commit - the PROCESS_LOAD() code is used by ports such as the win32 and 6502 ports
    Made definition of PROCESS() macro nicer by removing unused PROCESS_LOAD() and PROCESS_NOLOAD()
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Changed macros to not include a trailing semicolon.
    Removed the empty PROCESS_NO_BROADCAST macro.
    Documentation updates
    Removed erroneous documentation
    Added PROCESS_PT_SPAWN, PROCESS_WAIT_UNTIL
    Added the CCIF (Contiki Core InterFace) declarations necessary for a loadable packet driver.
    Added the CCIF (Contiki Core InterFace) declarations used by the applications which are currently part of the Win32 build.
    New function process_nevents().
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix warnings caused by incorrect param names / undocumented params
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    fixed documentation typos.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Added the CCIF (Contiki Core InterFace) declarations used by the applications which are currently part of the Win32 build.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved thread states from module to header
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    fixed documentation typos.
    Removed old unused documentation that messed up Doxygen
    Added mt_stop() calling mtarch_stop() to allow for thread resource cleanup.
    Commented out unused functionality: the ability to create a process running a thread was never used. With the new code, only running 'bare' threads is supported. If support for creating processes with a thread is needed, it may be reneabled later but currently there doesn't seem to be a need for it
    #if 0:ed out unused code
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Recent changes in telnetd make exporting of those two necessary.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added a timer_remaining() function that returns the time until the timer expires
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved down inclusion of rtimer-arch.h to allow rtimer_clock_t to be used in rtimer-arch.h
    moved inclusion of rtimer-arch.h to top of rtimer.h, to avoid circular rtimer_clock_t dependencies
    allows rtimer_clock_t to be defined from contiki-conf.h
    Documentation bugfix: rtimer should be in sys group and the stimer library should have the correct documetation group
    added parameter descriptions
    fixed documentation typos.
    Made rtimer callback a typedefed type to make function prototypes nicer
    Documentation fix.
    Added error return value
    Correct function prototype
    Fixed API to be consistent between .h and .c file
    Renamed rt module to rtimer
    Initial code for a Contiki real-time scheduler
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    slip.c:
            char is signed but uip_buf is unsigned
    
    spi.h:
            casted unused values to void
    
    autostart.c:
    autostart.h:
            The array itself should be const but the processes pointed to
            should not.
    
    profile-aggregates.c:
            sizeof returns unsigned long on my platform
    Debug output
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    one blank less
    add_timer() does not set owning process
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    renamed variable, rewrote comment to make easier to read
    major bug fix: arithmetic was done incorrectly in update_time() + process already expired timers when adding timers
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Cleanup of the node-id.h files. The node-id.h file contains
    declarations of functions for setting and getting a node ID number, a
    functionality that exists on many platforms. Since this functionality
    was not considered part of the Contiki core, each platform defined its
    own node-id.h file. This commit attempts to clean this up by
    collecting the node-id.h into a core/sys/node-id.h file that replaces
    the old node-id.h files from the platform directories.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    add dummy node-id.h for econotag
    Node IDs are stored in external memory and restored on bootup
    Node IDs are stored in EEPROM and restored on bootup
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added function to retrieve elapsed time
    Documentation bugfix: rtimer should be in sys group and the stimer library should have the correct documetation group
    use unsigned long since clock_seconds() returns that.
    a timer of seconds
    Added a timer_remaining() function that returns the time until the timer expires
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Remove unnecessary list_remove in ctimer.c (list_add automatically removes first)
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Moved ctimer.[ch] from their old and illogical location in core/net/rime to a more appropriate place in core/sys
    ensure matching format and type in debug printf
    Adjusted process name to title case.
    * Added ctimer_restart(). Patch by Moritz Struebe.
    * Added ctimer_expired().
    added fix to enable start of ctimers before etimer process has started
    Documentation updates
    Debug output
    Documentation fixes
    Initial import of the experimental Rime code into the SourceForge CVS.
    Make netsim more like the esb target
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added main header include.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Correct several doxygen tags (\file)
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Changed macros to not include a trailing semicolon.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    fixed documentation typos.
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Declare some more functions as CCIF (Contiki Core Interface) to trigger exporting the symbols from the main binary on Win32.
    Added the CCIF (Contiki Core InterFace) declarations used by the applications which are currently part of the Win32 build.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added battery sensor to the core interfaces
    Temporary deletion of files due to problems with the CVS repository
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Enabled 2nd button on platform econotag
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Button sensor header
    Temporary deletion of files due to problems with the CVS repository
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    cpu/native: Add file-backed simulated EEPROM to native cpu.
    
    This patch removes a defunct EEPROM implementation from the native
    platform and provides a new EEPROM implementation for the native cpu.
    The previous implementation appears to be vestigal.
    
    This is useful for testing code which uses the EEPROM without running
    the code on the actual hardware.
    
    By default the code will create a new temporary file as the EEPROM
    backing, reinitializing each time. If you would like to preserve the
    EEPROM contents or specify a specific EEPROM file to use, you can set the
    `CONTIKI_EEPROM` environment variable to the name of the EEPROM file you
    wish to use instead. If it already exists, its contents will be used.
    If it does not already exist, it will be created and initialized by
    filling it with `0xFF`---just like a real EEPROM.
    
    A new example is also included, which was used to verify the correctness
    of the implementation. It can easily be used to verify the EEPROM
    implementations of other targets.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Changed the name of the rimeaddr module to linkaddr
    Updated include paths for the moved files under net/
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the rest of core (specifically ctk/vnc, slip and the loader code)
    Patch from Roger Larsson to answer  mac address request, for testing autoconfigure.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Fixed to call the SLIP callback function also when using IPv6
    fixed to work with IPv6
    Only process incoming data if the process is polled. Compile checksum checks only for IPv4.
    Added a function that gets called when we see SLIP input. This function can be used to determine if a node is a SLIP gateway or not.
    Code style fix
    slip.c:
            char is signed but uip_buf is unsigned
    
    spi.h:
            casted unused values to void
    
    autostart.c:
    autostart.h:
            The array itself should be const but the processes pointed to
            should not.
    
    profile-aggregates.c:
            sizeof returns unsigned long on my platform
    * Check for ip_id zero senders and low cost update of zero ip_id.
    * Constness and voidness.
    * New function slip_write(u8_t *ptr, int len).
    
    * Slip active detection and current address reporting.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Minor style fix
    configurable line buffer size + simplified interrupt handler + overflow check on line buffer
    serial line ringbuf implementation + increased default buffer size to 128 bytes
    Changed the name of the 'serial' module to 'serial-line' to signify that the module is about lines of data from the serial port, not individual bytes, and to make sdcc happy
    Increased the default input line length from 40 to 80
    changed to terminate the event data with a zero character instead of line feed character
    Import of the contiki-2.x development code from the SICS internal CVS server
    Added stub for extended radio API for nullradio
    A null radio driver that does not do anything - useful in the native port and as a template for new radio drivers
    Closing doxygen groups
    leds: Add the leds_set() function
    
    The leds_set() function is added on top of leds_arch_set() in order to have a
    means of displaying a pattern on a set of LEDs, while keeping the ENERGEST
    information up to date, which would be missing with a direct call to
    leds_arch_set().
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    leds: Fix the API
    
    The leds API did not work in some cases. E.g. with the following sequence:
      leds_off(LEDS_ALL);
      leds_toggle(LEDS_GREEN);
      leds_off(LEDS_ALL);
    the green LED was remaining on after the last call.
    
    This was caused by the toggle feature made synonymous with the invert feature,
    although it is unrelated. leds_toggle() is indeed supposed to toggle an LED,
    while leds_invert() is supposed to change the active level of an LED. However,
    all users of leds_invert() actually meant leds_toggle(), and the invert feature
    does not make sense in this module because it is not handy due to successive
    calls to leds_invert() changing the intended behavior, and hardware active
    levels should be managed in leds_arch_set() (e.g. by XORing the passed value
    with a hardware-specific constant before setting the output levels of the pins).
    
    Consequently, this change:
     - removes the leds_invert() function,
     - makes leds_toggle() behave as expected relatively to leds_off() / leds_on(),
     - sanitizes the code in the leds module.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    core/dev/led: Allow platform to provide LED color map
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    removed obsolete leds_[color]() functions, replaced by leds_{on,off}()
    allow LEDS_[COLOR] to be configured by platform-conf
    LEDS_ALL configurable
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Radio sensor header file
    Two types of radio sensor data
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    leds: Add the leds_set() function
    
    The leds_set() function is added on top of leds_arch_set() in order to have a
    means of displaying a pattern on a set of LEDs, while keeping the ENERGEST
    information up to date, which would be missing with a direct call to
    leds_arch_set().
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    leds: Fix the API
    
    The leds API did not work in some cases. E.g. with the following sequence:
      leds_off(LEDS_ALL);
      leds_toggle(LEDS_GREEN);
      leds_off(LEDS_ALL);
    the green LED was remaining on after the last call.
    
    This was caused by the toggle feature made synonymous with the invert feature,
    although it is unrelated. leds_toggle() is indeed supposed to toggle an LED,
    while leds_invert() is supposed to change the active level of an LED. However,
    all users of leds_invert() actually meant leds_toggle(), and the invert feature
    does not make sense in this module because it is not handy due to successive
    calls to leds_invert() changing the intended behavior, and hardware active
    levels should be managed in leds_arch_set() (e.g. by XORing the passed value
    with a hardware-specific constant before setting the output levels of the pins).
    
    Consequently, this change:
     - removes the leds_invert() function,
     - makes leds_toggle() behave as expected relatively to leds_off() / leds_on(),
     - sanitizes the code in the leds module.
    
    Signed-off-by: Benoît Thébaudeau <benoit.thebaudeau@advansee.com>
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    removed obsolete leds_[color]() functions, replaced by leds_{on,off}()
    allow LEDS_[COLOR] to be configured by platform-conf
    Minor code style fixes
    added energest on all parts of leds API and some cleanup
    Moved energest.{c,h} from core/lib to core/sys: power profiling is a system mechanism, not a library
    Experimental energy estimation code
    fixed leds invert
    Made LEDS not count
    Import of the contiki-2.x development code from the SICS internal CVS server
    [SPI] Make SPI_FLUSH() more versatile
    
    Currently the SPI driver in core/ sets `SPI_FLUSH()` to be a single read
    of the spi RX buffer. This is fine for many microcontrollers, but newer
    platforms like the CC2538 have a multi-byte FIFO for the RX buffer. In
    that case, a single read is not guaranteed to flush the RX. This commit
    allows `SPI_FLUSH()` to be platform dependent if needed, but doesn't
    change for platforms where it works.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    split SPI code into generic and CC2420-related and renamed constants in CC2420
    * Fixed FASTSPI_READ_RAM_LE to wait for tx end before reading
    * Added FASTSPI_WRITE_RAM_BE to write to RAM (big-endian order)
    Renamed SPI_WAITFOREOTxBUF to SPI_WAITFORTxREADY for clarity and generalized SPI transmission status checks to work with both AVR and MSP430
    Changed to monitor the UART transmitter buffer ready flag instead of the UART transmitter empty flag. This almost doubles the speed of transmitting data to CC2420. Patch by James Brown.
    slip.c:
            char is signed but uip_buf is unsigned
    
    spi.h:
            casted unused values to void
    
    autostart.c:
    autostart.h:
            The array itself should be const but the processes pointed to
            should not.
    
    profile-aggregates.c:
            sizeof returns unsigned long on my platform
    declaration outside loop
    *  FASTSPI_READ_RAM_LE(p,a,c,n) for completeness.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Changed type from off_t (that potentially conflicts with existing types.h typedefs) to unsigned long
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Changed the name of the 'serial' module to 'serial-line' to signify that the module is about lines of data from the serial port, not individual bytes, and to make sdcc happy
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the rest of core (specifically ctk/vnc, slip and the loader code)
    Added a function that gets called when we see SLIP input. This function can be used to determine if a node is a SLIP gateway or not.
    * General stuff for different baudrates:
    
        - ubr argument to slip_arch_int
    
        - macros for calculating ubr
    
        - argument -Bbaudrate to tools tunslip and scat
    * Constness and voidness.
    * New function slip_write(u8_t *ptr, int len).
    
    * Slip active detection and current address reporting.
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Split the radio parameter ADDRESS_HANDLER into RX_MODE and TX_MODE.
    Enhanced the documentation.
    Extended radio API definitions with support for setting channel, pan id, etc.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    pass up a RADIO_NOACK to the MAC layer.
    New return value for invidating a link-layer collision
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    added radio and MAC generic return values to allow applications finding out whether the packet was transmitted
    Updated types to avoid reliance on uIP includes
    Added net include to define u*_t types
    removed old radio_on/off functions
    A common structure for radio drivers. Used by MAC protocols.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added watchdog_reboot() prototype
    Changed watchdog API by adding a start function, and renaming the restart function to periodic to make it clear that this should be called periodically
    Import of the contiki-2.x development code from the SICS internal CVS server
    A null radio driver that does not do anything - useful in the native port and as a template for new radio drivers
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    Drop packet if there are not enough free buffers to perform fragmentation
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Changed name of the internal struct memb_blocks to struct memb for consistency
    fixed documentation typos
    Moved C preprocessor concatenation macro to sys/cc.h
    Documentation fix
    + memb_inmemb
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Convenience function for printing out system statistics
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    MSP430 definitions
    Added Rime driver for the netsim ethernode layer, renamed init.c to netsim-init.c
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Fix ancient  RAND_MAX compiler warning
    Removed old unused files rand.[ch]. By default, Contiki uses the libc implementations of the rand() and srand() functions.
    Rewrote the random_rand() pseudo random number generator to use the libc rand() function instead
    Avoided compiler warning.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    make it possible to accumulate CRC values through crc16_data.
    Constness
    Added a function for computing the CRC16 over a portion of data
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Use TRICKLE_TIMER_IS_STOPPED in trickle_timer_stop()
    Add a way to determine whether a trickle timer is running
    1. Added a missing '&' in lib/trickle-timer.h
    2. Removed executable permissions of lib/trickle-timer.c & .h
    Add a Trickle Timer Library (RFC 6206)
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    corrected include path
    A ring buffer library. The ring buffer library is useful in device drivers, where bytes can be safely written to the buffer from an interrupt handler, and read from non-interrupt code.
    The cc65 compiler has a bug that doesn't allow to initialize an automatic struct with references to automatic variables. Therefore I changed the timetable used for measuring the timestamping time from automatic to static - which wastes some bytes in the data segment. If this isn't generally acceptable then an #ifdef __CC65__ seems to be the appropriate approach.
    Factored out the time table keeping code from the profiling code and placed it in a separate 'timetable' module, that may be uesd on its own.
    Make netsim more like the esb target
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Closing doxygen groups
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    A ring buffer library. The ring buffer library is useful in device drivers, where bytes can be safely written to the buffer from an interrupt handler, and read from non-interrupt code.
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added a function for obtaining the next item on the list. This makes list iterations nicer, as the ->next pointer now is hidden within the list abstraction.
    Avoid adding elements twice
    make sure not to add an already existing list element, as it breaks the list iteration functions
    changed list_pop to return removed element
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Fixed compiler warnings
    Removed semicolon from #define to allow the semicolon to be placed naturally after the macro is used
    Made SENSORS_ACTIVATE() and SENSORS_DEACTIVATE() use non-pointers, for concistency
    fixed sensors_find API
    replace void pointer types with int
    changed argument for SENSORS_ACTIVATE/DEACTIVATE to be a pointer to the sensor structure
    removed obsolete structure
    simplified the sensors API - will break some platforms...
    Fixed compiler warnings to make code compile with gcc's -pedantic switch
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Only schedule a trickle interval doubling for running timers
    1. Added a missing '&' in lib/trickle-timer.h
    2. Removed executable permissions of lib/trickle-timer.c & .h
    Add a Trickle Timer Library (RFC 6206)
    llsec: Allow for sharing AES-128
    llsec: Added a layer in between NETSTACK_MAC and NETSTACK_NETWORK for implementing link layer security
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Fixed mbxxx platform
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Files for platform mbxxx.
    
    MBXXX is a fake platform that actually include
    all the platforms based on STM32W108 microcontroller.
    Detection of the board is made at runtime, at the
    expense of code size.
    New Contiki port to STM32W108.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    llsec: Allow for sharing AES-128
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Replace reads of rimestats with RIMESTATS_GET(x)
    Rimestats bugfix: only compile the rimestats printout if rimestats are enabled
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updated to use clock_seconds() on all platforms
    Remove inclusion of preprocessor directive in macro expansion. Some gcc's do not like that.
    Free rtimer for contikimac, add print-stats option
    supply an argument of the same type as the print format
    Moved energest.{c,h} from core/lib to core/sys: power profiling is a system mechanism, not a library
    Fixed compiler warnings
    Removed nonexistant neighbors rimestat
    Convenience function for printing out system statistics
    Fixed type of energest_crrent_time to match the type in the .h file
    Added a function for setting the estimated energy of a component
    Made scalar values explicitly unsigned long. Preliminary support for cummulative estimates (larger than 32 bits)
    Experimental energy estimation code
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    fixed for compilation with IAR compiler
    Import of the contiki-2.x development code from the SICS internal CVS server
    core/lib/settings: Added `SETTINGS_CONF_SKIP_CONVENIENCE_FUNCS`.
    
    Unfortunately, some platforms don't properly drop unreferenced functions,
    so on these broken platforms we can save a significant amount
    of space by skipping the definition of the convenience functions.
    core/lib/settings: Generalized Settings Manager to work on any platform
    
    This commit moves the Settings Manager from the AVR codebase
    into the Contiki core library. Any platform that implements
    the Contiki EEPROM API can now use the Settings Manager's
    key-value store for storing their persistent configuration info.
    
    The Settings Manager is a EEPROM-based key-value store. Keys
    are 16-bit integers and values may be up to 16,383 bytes long.
    It is intended to be used to store configuration-related information,
    like network settings, radio channels, etc.
    
     * Robust data format which requires no initialization.
     * Supports multiple values with the same key.
     * Data can be appended without erasing EEPROM.
     * Max size of settings data can be easily increased in the future,
       as long as it doesn't overlap with application data.
    
    The format was inspired by the [OLPC manufacturing data format][].
    
    Since the beginning of EEPROM often contains application-specific
    information, the best place to store settings is at the end of EEPROM
    (the "top"). Because we are starting at the end of EEPROM, it makes
    sense to grow the list of key-value pairs downward, toward the start of
    EEPROM.
    
    Each key-value pair is stored in memory in the following format:
    
    Order    | Size     | Name         | Description
    --------:|---------:|--------------|-------------------------------
           0 |        2 | `key`        | 16-bit key
          -2 |        1 | `size_check` | One's-complement of next byte
          -3 |   1 or 2 | `size`       | The size of `value`, in bytes
    -4 or -5 | variable | `value`      | Value associated with `key`
    
    The end of the key-value pairs is denoted by the first invalid entry.
    An invalid entry has any of the following attributes:
    
     * The `size_check` byte doesn't match the one's compliment of the
       `size` byte (or `size_low` byte).
     * The key has a value of 0x0000.
    
    [OLPC manufacturing data format]: http://wiki.laptop.org/go/Manufacturing_data
    Drop packet if there are not enough free buffers to perform fragmentation
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Changed name of the internal struct memb_blocks to struct memb for consistency
    + memb_inmemb
    Added main header include.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    dos2unix conversion
    GCR encoding/decoding
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Convert '@' correctly from PETSCII to ASCII - by leaving it alone.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix warnings caused by incorrect param names / undocumented params
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    fixed documentation typos
    Constness
    Added a function for computing the CRC16 over a portion of data
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    modified API for fft
    initial/alpha version of integer fft
    Import of the contiki-2.x development code from the SICS internal CVS server
    mmem: Prevent duplicate init of mmem
    
    This could seriously corrupt data if mmem_init was called again after
    someone called mmem_alloc.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Respect MMEM_CONF_SIZE user option, otherwise default to 4096 byts
    for MMEM_SIZE.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Fix ancient  RAND_MAX compiler warning
    Import of the contiki-2.x development code from the SICS internal CVS server
    Rename static function log2 to ilog2 to avoid clashes (and compiler warnings) with built-in function called log2
    modified API for fft
    initial/alpha version of integer fft
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] updated settings manager documentation
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    settings: Correct a problem where sometimes CC_INLINE is not defined properly.
    core/lib/settings: Added `SETTINGS_CONF_SKIP_CONVENIENCE_FUNCS`.
    
    Unfortunately, some platforms don't properly drop unreferenced functions,
    so on these broken platforms we can save a significant amount
    of space by skipping the definition of the convenience functions.
    core/lib/settings: Generalized Settings Manager to work on any platform
    
    This commit moves the Settings Manager from the AVR codebase
    into the Contiki core library. Any platform that implements
    the Contiki EEPROM API can now use the Settings Manager's
    key-value store for storing their persistent configuration info.
    
    The Settings Manager is a EEPROM-based key-value store. Keys
    are 16-bit integers and values may be up to 16,383 bytes long.
    It is intended to be used to store configuration-related information,
    like network settings, radio channels, etc.
    
     * Robust data format which requires no initialization.
     * Supports multiple values with the same key.
     * Data can be appended without erasing EEPROM.
     * Max size of settings data can be easily increased in the future,
       as long as it doesn't overlap with application data.
    
    The format was inspired by the [OLPC manufacturing data format][].
    
    Since the beginning of EEPROM often contains application-specific
    information, the best place to store settings is at the end of EEPROM
    (the "top"). Because we are starting at the end of EEPROM, it makes
    sense to grow the list of key-value pairs downward, toward the start of
    EEPROM.
    
    Each key-value pair is stored in memory in the following format:
    
    Order    | Size     | Name         | Description
    --------:|---------:|--------------|-------------------------------
           0 |        2 | `key`        | 16-bit key
          -2 |        1 | `size_check` | One's-complement of next byte
          -3 |   1 or 2 | `size`       | The size of `value`, in bytes
    -4 or -5 | variable | `value`      | Value associated with `key`
    
    The end of the key-value pairs is denoted by the first invalid entry.
    An invalid entry has any of the following attributes:
    
     * The `size_check` byte doesn't match the one's compliment of the
       `size` byte (or `size_low` byte).
     * The key has a value of 0x0000.
    
    [OLPC manufacturing data format]: http://wiki.laptop.org/go/Manufacturing_data
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    GCR encoding/decoding
    Temporary deletion of files due to problems with the CVS repository
    Code imported from the SICS CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Assertions are useful.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    fixed documentation typos
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added a way to for specifying lists as parts of structs. These lists
    must be initialized with a special LIST_STRUCT_INIT() call before
    using.
    Added a function for obtaining the next item on the list. This makes list iterations nicer, as the ->next pointer now is hidden within the list abstraction.
    Minor documentation addition
    fixed documentation typos
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Fixed compiler warnings
    fixed sensors_find API
    removed obsolete structure
    simplified the sensors API - will break some platforms...
    Limit number of sensor events to avoid overflowing event queue
    Import of the contiki-2.x development code from the SICS internal CVS server
    Redefine assert if already defined since some platforms already have an assert definition
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    * Add compile time assert CTASSERT.
    Assertions are useful.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved the custom strncasecmp code into a separate module, since it cannot be compiled on all platforms
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    fixed documentation typos
    Import of the contiki-2.x development code from the SICS internal CVS server
    Lifted restrictions on accepted MIME type.
    
    The "normal" web is moving forward quickly reducing the interoperability of the Contiki web browser to nearly zero. The Mobile Web fits the capabilities of the Contiki web browser much better. Modern smartphones don't need the Mobile Web anymore but there are large areas in world with rather low end mobile phones and limited mobile bandwidth where the Mobile Web will be necessary for quite some time.
    
    From that perspective it is reasonable to increase the Contiki web browser's interoperability with the Mobie Web - namely WAP 2.0 aka XHTML MP. XHTML MP is delivered as MIME types 'application/vnd.wap.xhtml+xml' or 'application/xhtml+xml'. Therefore we (try to) parse the document if the MIME type contains the substring 'html' (which is true 'text/html' too).
    Bumped version number
    Made cfs-based webserver example compatible with 8.3 file systems.
    Update to Contiki version number 2.4
    Updated version number in server and user agent strings
    Updated for Contiki 2.0
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    lookup content type only when needed
    bugfix: ptr must be preserved until psock has finished
    Fixed bug introduced with the 8.3 filesystem support.
    
    If we use .htm instead of .html then we should also check for .htm instead of .html when it comes to MIME type setting.
    
    Interestingly this didn't show up when testing with Internet Explorer as that one just ignores the wrong MIME type and displays the HTML page as expected.
    
    Thanks to Shane Wood for pointing out the issue!
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Made cfs-based webserver example compatible with 8.3 file systems.
    Up to now the root of the webserver filesystem was always the current directory. Now an optional file 'wwwroot.cfg' is read. If present its content is used as prefix in the conversion of http paths to local paths. This prefix may be a relative path as well as an absolute path.
    This is especially useful for the cc65-based targets as it ain't possible there to "just change into the wwwroot directory and start the webserver using its pathname".
    Set the maximum number of concurrent web server connections by default to the maximum number of concurrent TCP connections.
    Added optional URL filtering code to the CFS web server contributed by Kajtar Zsolt (and activated it by default).
    Include slash in CFS web server state field 'filename' (like in the non-CFS web server).
    Reduced code size by removing one PT_WAIT_THREAD call site.
    Added GIF support to the CFS web server (which was already present in the non-CFS web server).
    There are no query strings or alike in the CFS web server so the file extensions have to be the actual end of the requested filename.
    Reduced code size by reducing the SEND_STRING call sites.
    - Added yet another PETSCII->ASCII conversion, this time for the file name in case of a 404.
    - Use all lowercase for the 404 message to avoid another PETSCII->ASCII conversion.
    - Write logfile entries for all 404s.
    - Adjust memory buffers on the C128 to accomodate for the items above.
    Added missing argument to send_string()
    Reverted the recent addition of the directory listing: instead, a 404 is now sent to indicate that a notfound.html file is missing
    When a file was not found, and no notfound.html was found, send directory contents instead
    webserver bugfix, caused nightly wget test to fail:
    * too many timer_reset will naively increase the start-time, even though timer has not expired. use timer_restart instead
    Replaced '404.html' with 'notfound.html' as '404.html' is no valid filename for the Apple2 disk operating system ProDOS 8.
    Yet another PETSCII<->ASCII issue solved - this time it caused failure to send the right content type.
    Avoid file handle leaks.
    Avoid memory block leaks (and minor code style adjustment).
    Allow to configure the maximum number of simultaneous connections to the cfs webserver.
    Added PETSCII support.
    Increased number of simultanious connections from two to three, fixed / streamlined 404.html handling and added logging on tcp resets.
    Removed compiler warnings.
    Made the webserver cfs support build and run.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Insidious minimal-net segmentation fault if initialized ptr not declared static.
    Fix compiler warnings
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Set the maximum number of concurrent web server connections by default to the maximum number of concurrent TCP connections.
    Minor syntax simplification.
    Log requests in PETSCII on CBMs in the non-CFS web server (as was already done in the CFS web server).
    Search for last '.' just like in send_headers().
    Copy '/404.html' to filename in order to allow send_headers() to send the proper content type.
    Reduced code size by reducing the SEND_STRING call sites.
    Print ipv6 address in weblog and tcp_stats cgi
    Reverted raven changes, which are now in the raven-webserver directory
    applications updates for uIPv6
    Allow to configure the maximum number of simultaneous connections to the cgi webserver.
    Optimzed PETSCII support.
    Include 'Referer:' in referer log message.
    Removed compiler warnings.
    Made the webserver logging follow the popular pattern of foo_???() being declared in foo.h and defined in foo.c.
    Fix for bug when script goes past the end of a file (thanks to Till Harbaum)
    Avoid compiler warnings.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Up to now the root of the webserver filesystem was always the current directory. Now an optional file 'wwwroot.cfg' is read. If present its content is used as prefix in the conversion of http paths to local paths. This prefix may be a relative path as well as an absolute path.
    This is especially useful for the cc65-based targets as it ain't possible there to "just change into the wwwroot directory and start the webserver using its pathname".
    Added final newline to make GCC happy.
    Added optional URL filtering code to the CFS web server contributed by Kajtar Zsolt (and activated it by default).
    Contiki program that posts messages to the Twitter microblogging service
    two new shell commands: download and sendcmd
    added experimental checkpointing functionality:
    currently only implemented on the sky platform
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Fix naming issues and includes in uip-ds6-nbr.h
    Port apps, examples, platforms and tools so they use the new neighbor and route API.
    Updated to the latest uip-ds6-route API
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Use PROCESS_NAME_STRING macro to handle NO_PROCESS_NAMES
    Include status cgi's with explicit define
    Restore lines that were excluded for VC++ test build
    Add RPL nodes and border router to minimal-net platform (cygwin only)
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Print ipv6 address in weblog and tcp_stats cgi
    Reverted raven changes, which are now in the raven-webserver directory
    applications updates for uIPv6
    Changed all sprintf() calls to snprintf() to make it useful for systems with very low buffer size
    Adjusted process display cgi to recent change in process states.
    Optimzed PETSCII support.
    Allow to find the scripts on PETSCII machines.
    Removed compiler warning.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Avoid usage of nameless unions as they are - surprisingly at least to me - not part of any C spec.
    Added center alignment to network statistic columns. Now it looks nicer and is consistent with the system processes columns.
    Updated processes script output to match HTML ;-)
    Ported processes cgi to Contiki 2.x.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    *-dsc.c files have been changed to remove forward reference for struct_icon variable, bacause it is strange that this variable is used wholly inside the C source file and declared extern for the forward reference.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Reverted raven changes, which are now in the raven-webserver directory
    applications updates for uIPv6
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Print ipv6 address in weblog and tcp_stats cgi
    ipv6 address logging
    Removed SELFSTART_PROCESS as AUTOSTART_ENABLE generally serves that purpose - and AUTOSTART_ENABLE gets already set as required :-)
    Made the webserver logging follow the popular pattern of foo_???() being declared in foo.h and defined in foo.c.
    Direct httpd logs to the Contiki log for non-CTK scenarios.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Revert rules to rebuild httpd-fs.c and httpd-fsdata.c
    Drop unneded null byte at end of httpd-fsdata files.
    Removed unreferenced source from application makefile.
    Make lists of source files for each app available individually - i.e. for creation of dynamically loadable modules.
    Added comment in makefile on how to produce the http-strings.c file; having the actual rule in the makefile does not seem to work
    It simply doesn't make sense to link in both webserver.c and webserver-nogui.c. This raises the question if examples/webserver was tested at all ;-)
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Reverted raven changes, which are now in the raven-webserver directory
    applications updates for uIPv6
    Made the webserver logging follow the popular pattern of foo_???() being declared in foo.h and defined in foo.c.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Bumped the version number from 2.6 to 3.x, which is to be used in the development branch
    Lifted restrictions on accepted MIME type.
    
    The "normal" web is moving forward quickly reducing the interoperability of the Contiki web browser to nearly zero. The Mobile Web fits the capabilities of the Contiki web browser much better. Modern smartphones don't need the Mobile Web anymore but there are large areas in world with rather low end mobile phones and limited mobile bandwidth where the Mobile Web will be necessary for quite some time.
    
    From that perspective it is reasonable to increase the Contiki web browser's interoperability with the Mobie Web - namely WAP 2.0 aka XHTML MP. XHTML MP is delivered as MIME types 'application/vnd.wap.xhtml+xml' or 'application/xhtml+xml'. Therefore we (try to) parse the document if the MIME type contains the substring 'html' (which is true 'text/html' too).
    Bumped version number
    Made cfs-based webserver example compatible with 8.3 file systems.
    Update to Contiki version number 2.4
    Updated version number in server and user agent strings
    Updated for Contiki 2.0
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Made the webserver logging follow the popular pattern of foo_???() being declared in foo.h and defined in foo.c.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Fixed recently introduced minor inconsistency.
    Made cfs-based webserver example compatible with 8.3 file systems.
    Up to now the root of the webserver filesystem was always the current directory. Now an optional file 'wwwroot.cfg' is read. If present its content is used as prefix in the conversion of http paths to local paths. This prefix may be a relative path as well as an absolute path.
    This is especially useful for the cc65-based targets as it ain't possible there to "just change into the wwwroot directory and start the webserver using its pathname".
    Added optional URL filtering code to the CFS web server contributed by Kajtar Zsolt (and activated it by default).
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    Reverted raven changes, which are now in the raven-webserver directory
    applications updates for uIPv6
    Adjusted source formatting Mk II ;-)
    Adjusted source formatting.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Bumped the version number from 2.6 to 3.x, which is to be used in the development branch
    Lifted restrictions on accepted MIME type.
    
    The "normal" web is moving forward quickly reducing the interoperability of the Contiki web browser to nearly zero. The Mobile Web fits the capabilities of the Contiki web browser much better. Modern smartphones don't need the Mobile Web anymore but there are large areas in world with rather low end mobile phones and limited mobile bandwidth where the Mobile Web will be necessary for quite some time.
    
    From that perspective it is reasonable to increase the Contiki web browser's interoperability with the Mobie Web - namely WAP 2.0 aka XHTML MP. XHTML MP is delivered as MIME types 'application/vnd.wap.xhtml+xml' or 'application/xhtml+xml'. Therefore we (try to) parse the document if the MIME type contains the substring 'html' (which is true 'text/html' too).
    Bumped version number
    Made cfs-based webserver example compatible with 8.3 file systems.
    Update to Contiki version number 2.4
    Updated version number in server and user agent strings
    HTTP strings
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Made CFS web server pathname length configurable via WEBSERVER_CONF_CFS_PATHLEN and increased default pathname length from 20 to 80 chars in order to allow to actually make use of subdirs.
    Made the webserver cfs support build and run.
    Import of the contiki-2.x development code from the SICS internal CVS server
    [webserver] Update urls in default data
    
    Replace all links to sics.se with contiki.org
    Drop unneded null byte at end of httpd-fsdata files.
    Reverted raven changes, which are now in the raven-webserver directory
    applications updates for uIPv6
    Removed compiler warnings.
    Updated processes HTML to match script output
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    Reverted raven changes, which are now in the raven-webserver directory
    applications updates for uIPv6
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Removed SELFSTART_PROCESS as AUTOSTART_ENABLE generally serves that purpose - and AUTOSTART_ENABLE gets already set as required :-)
    Allow to optionally (triggered with SELFSTART_PROCESS) self start the application.
    Made the webserver logging follow the popular pattern of foo_???() being declared in foo.h and defined in foo.c.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Print ipv6 address in weblog and tcp_stats cgi
    Avoid usage of nameless unions as they are - surprisingly at least to me - not part of any C spec.
    Made the webserver logging follow the popular pattern of foo_???() being declared in foo.h and defined in foo.c.
    Ported processes cgi to Contiki 2.x.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated processes HTML to match script output
    Import of the contiki-2.x development code from the SICS internal CVS server
    [webserver] Update urls in default data
    
    Replace all links to sics.se with contiki.org
    Add RPL nodes and border router to minimal-net platform (cygwin only)
    Reverted raven changes, which are now in the raven-webserver directory
    applications updates for uIPv6
    Updated with new Contiki website URL
    Import of the contiki-2.x development code from the SICS internal CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    [webserver] Update urls in default data
    
    Replace all links to sics.se with contiki.org
    Add RPL nodes and border router to minimal-net platform (cygwin only)
    Reverted raven changes, which are now in the raven-webserver directory
    applications updates for uIPv6
    Updated with new Contiki website URL
    Import of the contiki-2.x development code from the SICS internal CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add RPL nodes and border router to minimal-net platform (cygwin only)
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Add status page link, show correct rssi, fix indexing off array in  ipv4 builds
    Add status web page with addresses, neighbors, routes
    Added native-border-router and slip-radio
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Added native-border-router and slip-radio
    added uip-driver (for both ivp4 and ipv6), setting WITH_UIP* compiler flags in Makefile
    Updated to match the new netstack api
    Added a new module called "framer" that creates MAC level frames to
    the packetbuf from packet attributes. Two framer modules are included,
    one that creates 802.15.4 frame headers, and one that creates a
    minimal "nullmac"-style header that only contains the link-local
    addresses.
    added multihop routing support through replaceable modules. first implementation
    uses rime's route discovery by translating between ipv6 and rime addresses.
    added experimental checkpointing functionality:
    currently only implemented on the sky platform
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix a mismatch between declaration and definition
    Added native-border-router and slip-radio
    moved io and signal and IAR-GCC checks from driver files into contiki include file
    Added Sentilla Jcreate platform. This platform is similar to the Sky platform but with other sensors and 8 leds.
    Moved ninimal-ppp into backyard as it depends on the uIP ppp support.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    Added check for illegal attributes in packet attribute serialization
    Added native-border-router and slip-radio
    Add PRINTA so direct calls to debug routines will always print
    Several compiler warning fixes:
    
         * msp430: fix "implicit declaration of function" warnings in clock.c, by including watchdog.h;
         * sky: fix a couple pointer target signedness warnings;
         * core: fix several signed/unsigned comparison warnings;
         * framer-802154: "const static" -> "static const" to fix compiler warnings;
         * core: comment or remove unused variables and function definitions.
    
    Signed-off-by: Lionel Debroux <lionel_debroux@yahoo.fr>
    Signed-off-by: Mariano Alvira <mar@devl.org>
    added uip-debug utilities
    slip.c:
            char is signed but uip_buf is unsigned
    
    spi.h:
            casted unused values to void
    
    autostart.c:
    autostart.h:
            The array itself should be const but the processes pointed to
            should not.
    
    profile-aggregates.c:
            sizeof returns unsigned long on my platform
    Debug output
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Added native-border-router and slip-radio
    hex conversion and crc shell commands
    removed execute flag of source files (avoids diff problems with egit)
    Adding ADC functions
    Platform-specific devices.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    * Add some assertions.
    More'or less a verbatim copy of the traditional elfloader but built
    upon cmod and cle.
    * Resurrect traditional elfloader interface.
    Slightly outdated versions were imported to sf.
    Simple program for loading a Contiki ELF binary over the network
    [doc] added faulty esb and msp430 references
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    switched all users of cfs_seek(x,y) to cfs_seek(x,y,CFS_SEEK_SET)
    Padded struct codeprop_tcphdr to 4 bytes, to get around different
    alignment on different platforms.
    updated reference to "elfloader-tmp"
    fixed compiler warnings
    Simple program for loading a Contiki ELF binary over the network
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Simple program for loading a Contiki ELF binary over the network
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] added faulty esb and msp430 references
    Updated include paths for the moved files under net/
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Simple program for loading a Contiki ELF binary over the network
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    Padded struct codeprop_tcphdr to 4 bytes, to get around different
    alignment on different platforms.
    Simple program for loading a Contiki ELF binary over the network
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    * Resurrect traditional elfloader interface.
    Slightly outdated versions were imported to sf.
    Simple program for loading a Contiki ELF binary over the network
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Bugfix: rewrote the switch() statement into an if/else sequence. Protothreads and switches do not mix well.
    Removed compiler warnings.
    Avoid compiler warnings.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed reference to logically empty file.
    Make lists of source files for each app available individually - i.e. for creation of dynamically loadable modules.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Fixed the repressentation of IP addresses: IP addresses are uip_ipaddr_t nowadays
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    *-dsc.c files have been changed to remove forward reference for struct_icon variable, bacause it is strange that this variable is used wholly inside the C source file and declared extern for the forward reference.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved the ctk files from core/lib into core/lib/ and core/lib/libconio
    core/net/resolv: IPv6 and mDNS ("Bonjour") support. Major refactor.
    
    This patch updates the DNS resolver to support IPv6 and introduces an
    improved API for looking up DNS entries. This patch also adds optional
    support for mDNS lookups and responses to the DNS resolver.
    
    Here is a quick summary of the changes:
    
     * Added support for IPv6 lookups.
     * DNS queries now honor record expiration.
     * Added support for mDNS, compatible with "Bonjour".
     * Implemented a new lookup api, `resolv_lookup2()`, which provides
       more information about the state of the record(error, expired,
       looking-up, etc.).
    
    About mDNS/Bonjour Support
    --------------------------
    
    This patch adds basic support for mDNS/Bonjour, which allows you to
    refer to the name of a device instead of its IP address. This is
    incredibly convenient for IPv6 addresses because they tend to be very
    long and difficult to remember. It is especially important for
    link-local IPv6 addresses, since not all programs support the '%'
    notation for indicating a network interface (required on systems with
    more than one network interface to disambiguate).
    
    In other words, instead of typing in this:
    
     * `http://[fe80::58dc:d7ed:a644:628f%en1]/`
    
    You can type this instead:
    
     * `http://contiki.local/`
    
    Huge improvement, no?
    
    The convenience extends beyond that: this mechanism can be used for
    nodes to talk to each other based on their human-readable names instead
    of their IPv6 addresses. So instead of a switch on
    `aaaa::58dc:d7ed:a644:628f` triggering an actuator on
    `aaaa::ed26:19c1:4bd2:f95b`, `light-switch.local` can trigger the
    actuator on `living-room-lights.local`.
    
    What you need to do to be able to look up `.local` names on your
    workstation depends on a few factors:
    
     * Your machine needs to be able to send and receive multicast packets
       to and from the LoWPAN. You can do this easily with the Jackdaw
       firmware on an RZUSBStick. If you have a border router, you will need
       it to bridge the mDNS multicast packets across the border.
    
     * If you are using a Mac, you win. All Apple devices support mDNS
       lookups.
    
     * If you are using Windows, you can install Apple's Bonjour for Windows
       package. (This may be already installed on your machine if you have
       installed iTunes) After you install this you can easily do `.local`
       lookups.
    
     * If you are using a Unix machine, you can install Avahi.
    
    The default hostname is set to `contiki.local.`. You can change the
    hostname programmatically by calling `resolv_set_hostname()`. You can
    change the default hostname by changing `CONTIKI_CONF_DEFAULT_HOSTNAME`.
    
    You may disable mDNS support by setting `RESOLV_CONF_SUPPORTS_MDNS` to
    `0`.
    
    ---------------------------------
    
    core/net/resolv: `resolv_lookup2()` -> `resolv_lookup()`
    
    Note that this patch should fix several `resolv_lookup()` bugs
    that already existed. There were many cases where `resolv_lookup()`
    was being called and the IP address ignored, but later code
    assumed that the IP address had been fetched... ANYWAY, those
    should be fixed now.
    
    ---------------------------------
    
    examples/udp-ipv6: Updated client to use MDNS to lookup the server.
    
    Also updated the Cooja regression test simulation.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updated API for uiplib and resolv to use uip_ipaddr_t instead of uint16_t for compability with IPv6
    Fixed the repressentation of IP addresses: IP addresses are uip_ipaddr_t nowadays
    - Removed Quit button code
    - Added Quit menu entry
    - Added menu removal on quit (to avoid memory access violations)
    - Removed recently added opening of setup window on close of main window
    Added a menu for opening the setup dialog, removed the quit button
    Removed SELFSTART_PROCESS as AUTOSTART_ENABLE generally serves that purpose - and AUTOSTART_ENABLE gets already set as required :-)
    Allow to optionally (triggered with SELFSTART_PROCESS) self start the application.
    Removed (unnecessary) reference to the textedit widget header that was recently moved to the backyard.
    Removed compiler warning.
    Applications have been modified to support !UIP_UDP and !CTK_CONF_WINDOWCLOSE.
    Avoid compiler warnings.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added process declaration
    Import of the contiki-2.x development code from the SICS internal CVS server
    New MACRO for creating jsontree_array
    
    This proposed MACRO simplifies jsontree_array declarations. It takes as arguments the name of the array and its size. ( I've modified the indention as requested )
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    * Simple JSON parser and generator.
    * Simple HTTP webservice with support for both receiving and sending HTTP requests.
    * json-ws example that optionally push sensor data to COSM over IPv6.
    * Simple JSON parser and generator.
    * Simple HTTP webservice with support for both receiving and sending HTTP requests.
    * json-ws example that optionally push sensor data to COSM over IPv6.
    * Simple JSON parser and generator.
    * Simple HTTP webservice with support for both receiving and sending HTTP requests.
    * json-ws example that optionally push sensor data to COSM over IPv6.
    * Simple JSON parser and generator.
    * Simple HTTP webservice with support for both receiving and sending HTTP requests.
    * json-ws example that optionally push sensor data to COSM over IPv6.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    * Simple JSON parser and generator.
    * Simple HTTP webservice with support for both receiving and sending HTTP requests.
    * json-ws example that optionally push sensor data to COSM over IPv6.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    * Simple JSON parser and generator.
    * Simple HTTP webservice with support for both receiving and sending HTTP requests.
    * json-ws example that optionally push sensor data to COSM over IPv6.
    Changed the network stack to use different structures for the different layers (network_driver, mac_driver, rdc_driver, radio_driver). This helps to avoid incorrect configuration.
    added 802.15.4 frame packeter
    A quick, initial implementation of the LPP power-saving MAC protocol (Musaloiu-E et al, IPSN 2008)
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Updated include paths for the moved files under net/
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    To avoid ambiguity, address should be explicitly set by caller, not automatically by the module.
    A quick and dirty service registry daemon hack. The servreg-hack
    allows a program to register an 8-bit service ID that gets
    disseminated to the entire network, as long as a servreg-hack daemon
    is running on all neighbors. Other nodes can look up the service ID to
    figure out what nodes in the network offer this service.
    
    This is officially labeled as a "hack" so that we don't get too comfy
    with it; this hack is not the future of service discovery and
    advertisement in Contiki.
    Servreg-hack makefile
    Doxygen fixes
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Updated include paths for the moved files under net/
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    Explicitly initialize module if it wasn't initialized before the first registration
    To avoid ambiguity, address should be explicitly set by caller, not automatically by the module.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Periodically increase sequence number to avoid active registrations being garbage collected in neighbors
    A quick and dirty service registry daemon hack. The servreg-hack
    allows a program to register an 8-bit service ID that gets
    disseminated to the entire network, as long as a servreg-hack daemon
    is running on all neighbors. Other nodes can look up the service ID to
    figure out what nodes in the network offer this service.
    
    This is officially labeled as a "hack" so that we don't get too comfy
    with it; this hack is not the future of service discovery and
    advertisement in Contiki.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    *-dsc.c files have been changed to remove forward reference for struct_icon variable, bacause it is strange that this variable is used wholly inside the C source file and declared extern for the forward reference.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    Updated API for uiplib and resolv to use uip_ipaddr_t instead of uint16_t for compability with IPv6
    Removed SELFSTART_PROCESS as AUTOSTART_ENABLE generally serves that purpose - and AUTOSTART_ENABLE gets already set as required :-)
    Allow to optionally (triggered with SELFSTART_PROCESS) self start the application.
    Applications have been modified to support !UIP_UDP and !CTK_CONF_WINDOWCLOSE.
    More uip_ipaddr_t fixes.
    More uip_ipaddr_t fixes and removal of the last occurances of WITH_ETHERNET.
    More uip_ipaddr_t fixes.
    More uip_ipaddr_t fixes and removal of the last occurances of WITH_UIP.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    Make lists of source files for each app available individually - i.e. for creation of dynamically loadable modules.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    Updated to CoAP Proposed Standard and removed draft versions.
    Updated include paths for the moved files under net/
    core/net/uip: Rename `uip_ethaddr` to `uip_lladdr`.
    
    There isn't really a good reason I can think of for these
    to be different between IPv4 and IPv6.
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    Removed SELFSTART_PROCESS as AUTOSTART_ENABLE generally serves that purpose - and AUTOSTART_ENABLE gets already set as required :-)
    Allow to optionally (triggered with SELFSTART_PROCESS) self start the application.
    More uip_ipaddr_t fixes.
    More uip_ipaddr_t fixes.
    Added handling of dhcp_unconfigured events
    Import of the contiki-2.x development code from the SICS internal CVS server
    Make lists of source files for each app available individually - i.e. for creation of dynamically loadable modules.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    *-dsc.c files have been changed to remove forward reference for struct_icon variable, bacause it is strange that this variable is used wholly inside the C source file and declared extern for the forward reference.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup packetbuf: use rime attributes and addresses only when rime is enabled. Saves 32 byte per queuebuf in the non-rime case.
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    added powertrace to IPv6 including an example
    Updated to use new Rime sniffer API
    Bugfix: print out the correct total idle transmit and listen time
    Added the total power consumption to each powertrace printout; updated powertrace scripts to reflect this change
    Rewrote the default powertrace_sniff() behaviour. Instead of printing
    out power data for all incoming and outgoing packets (which causes
    problems when there is much traffic), the power data for the packets
    is instead logged and periodically printed out in aggregated form.
    Don't include sniffer code when using IPv6 - this saves significant code space because Rime won't be pulled in
    Print the node ID instead of the first byte in the Rime address. That byte often has the value 0 when using powertrace with IPv6.
    Added a function powertrace_print() that prints out the current power trace
    Added functions for turning powertracing off
    Added per-packet power profile tracing
    Powertrace: a program that periodically prints out the power consumption; suitable for experiments or simulations that want to measure power consumption
    Avoid including the powertrace tools makefile more than once.
    Added functions for turning powertracing off
    Powertrace: a program that periodically prints out the power consumption; suitable for experiments or simulations that want to measure power consumption
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added a function powertrace_print() that prints out the current power trace
    Added functions for turning powertracing off
    Added per-packet power profile tracing
    Powertrace: a program that periodically prints out the power consumption; suitable for experiments or simulations that want to measure power consumption
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    core/net/resolv: IPv6 and mDNS ("Bonjour") support. Major refactor.
    
    This patch updates the DNS resolver to support IPv6 and introduces an
    improved API for looking up DNS entries. This patch also adds optional
    support for mDNS lookups and responses to the DNS resolver.
    
    Here is a quick summary of the changes:
    
     * Added support for IPv6 lookups.
     * DNS queries now honor record expiration.
     * Added support for mDNS, compatible with "Bonjour".
     * Implemented a new lookup api, `resolv_lookup2()`, which provides
       more information about the state of the record(error, expired,
       looking-up, etc.).
    
    About mDNS/Bonjour Support
    --------------------------
    
    This patch adds basic support for mDNS/Bonjour, which allows you to
    refer to the name of a device instead of its IP address. This is
    incredibly convenient for IPv6 addresses because they tend to be very
    long and difficult to remember. It is especially important for
    link-local IPv6 addresses, since not all programs support the '%'
    notation for indicating a network interface (required on systems with
    more than one network interface to disambiguate).
    
    In other words, instead of typing in this:
    
     * `http://[fe80::58dc:d7ed:a644:628f%en1]/`
    
    You can type this instead:
    
     * `http://contiki.local/`
    
    Huge improvement, no?
    
    The convenience extends beyond that: this mechanism can be used for
    nodes to talk to each other based on their human-readable names instead
    of their IPv6 addresses. So instead of a switch on
    `aaaa::58dc:d7ed:a644:628f` triggering an actuator on
    `aaaa::ed26:19c1:4bd2:f95b`, `light-switch.local` can trigger the
    actuator on `living-room-lights.local`.
    
    What you need to do to be able to look up `.local` names on your
    workstation depends on a few factors:
    
     * Your machine needs to be able to send and receive multicast packets
       to and from the LoWPAN. You can do this easily with the Jackdaw
       firmware on an RZUSBStick. If you have a border router, you will need
       it to bridge the mDNS multicast packets across the border.
    
     * If you are using a Mac, you win. All Apple devices support mDNS
       lookups.
    
     * If you are using Windows, you can install Apple's Bonjour for Windows
       package. (This may be already installed on your machine if you have
       installed iTunes) After you install this you can easily do `.local`
       lookups.
    
     * If you are using a Unix machine, you can install Avahi.
    
    The default hostname is set to `contiki.local.`. You can change the
    hostname programmatically by calling `resolv_set_hostname()`. You can
    change the default hostname by changing `CONTIKI_CONF_DEFAULT_HOSTNAME`.
    
    You may disable mDNS support by setting `RESOLV_CONF_SUPPORTS_MDNS` to
    `0`.
    
    ---------------------------------
    
    core/net/resolv: `resolv_lookup2()` -> `resolv_lookup()`
    
    Note that this patch should fix several `resolv_lookup()` bugs
    that already existed. There were many cases where `resolv_lookup()`
    was being called and the IP address ignored, but later code
    assumed that the IP address had been fetched... ANYWAY, those
    should be fixed now.
    
    ---------------------------------
    
    examples/udp-ipv6: Updated client to use MDNS to lookup the server.
    
    Also updated the Cooja regression test simulation.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    - Allow to configure window dimensions.
    - Added usage text in fullscreen windowless scenario.
    - Activated toggle between download/upload and upload dialog. However removed actual upload button. This seems reasonable as otherwiese the whole UI concept with remote and local directory listing doesn't make sense to the user.
    - Made sure that the "low level" keystroke events are only handled if no dialog is displayed.
    - Changed anonymous to 'anonymous'.
    - Added option to run in fullscreen windowless mode by replacing in that scenario the dialogs with windows.
    Updated API for uiplib and resolv to use uip_ipaddr_t instead of uint16_t for compability with IPv6
    Removed SELFSTART_PROCESS as AUTOSTART_ENABLE generally serves that purpose - and AUTOSTART_ENABLE gets already set as required :-)
    Allow to optionally (triggered with SELFSTART_PROCESS) self start the application.
    Removed compiler warnings.
    Applications have been modified to support !UIP_UDP and !CTK_CONF_WINDOWCLOSE.
    Avoid compiler warning.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    *-dsc.c files have been changed to remove forward reference for struct_icon variable, bacause it is strange that this variable is used wholly inside the C source file and declared extern for the forward reference.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fixed typo.
    Make lists of source files for each app available individually - i.e. for creation of dynamically loadable modules.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added process declaration
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    Added PETSCII support to the FTP client. It seems reasonable to do this in ftpc.c (instead of ftp.c) as all command connection strings are given in PETSCII in the C source.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Updated API for uiplib and resolv to use uip_ipaddr_t instead of uint16_t for compability with IPv6
    Made use of uip_ipaddr_to_quad().
    More uip_ipaddr_t fixes (and avoid compiler warning).
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    Updated API for uiplib and resolv to use uip_ipaddr_t instead of uint16_t for compability with IPv6
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    er-coap: add client-side support for CoAP Observe
    
    Client-side support for CoAP observe is not compiled by default. To enable it, the COAP_OBSERVE_CLIENT macro must be defined equal to 1.
    Added function for easy block1 usage.
    Fixed blocksize calculation when REST_MAX_CHUNK_SIZE != 2^x.
    Added example for block1 + separate + block2.
    Used Uncrustify and fixed Travis build errors.
    Renamed erbium to er-coap to avoid confusion and have a meaningful directory name.
    Updated to CoAP Proposed Standard and removed draft versions.
    Enabled forcing CON packet for observer notifications each 20 packets
    Used Uncrustify and fixed Travis build errors.
    Renamed erbium to er-coap to avoid confusion and have a meaningful directory name.
    Updated to CoAP Proposed Standard and removed draft versions.
    Updated copyright information.
    Added Erbium coap-12 and coap-13.
    Changed notify API to passing a notification message.
    Added RST-MID matching for observing.
    Revised Erbium observing.
    Added Erbium REST engine with new CoAP implementation
    Added two commands: unicast-send and unicast-recv that can be used to send unicast data
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Used Uncrustify and fixed Travis build errors.
    Renamed erbium to er-coap to avoid confusion and have a meaningful directory name.
    Updated to CoAP Proposed Standard and removed draft versions.
    Updated copyright information.
    Added Erbium coap-12 and coap-13.
    Renamed CoAP transaction ID (tid) to message ID (mid).
    Added Erbium REST engine with new CoAP implementation
    Added two commands: unicast-send and unicast-recv that can be used to send unicast data
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    er-coap: add client-side support for CoAP Observe
    
    Client-side support for CoAP observe is not compiled by default. To enable it, the COAP_OBSERVE_CLIENT macro must be defined equal to 1.
    Added function for easy block1 usage.
    Fixed blocksize calculation when REST_MAX_CHUNK_SIZE != 2^x.
    Added example for block1 + separate + block2.
    Used Uncrustify and fixed Travis build errors.
    Updated to CoAP Proposed Standard and removed draft versions.
    er-coap: add client-side support for CoAP Observe
    
    Client-side support for CoAP observe is not compiled by default. To enable it, the COAP_OBSERVE_CLIENT macro must be defined equal to 1.
    Used Uncrustify and fixed Travis build errors.
    Renamed erbium to er-coap to avoid confusion and have a meaningful directory name.
    Updated to CoAP Proposed Standard and removed draft versions.
    Updated copyright information.
    Added Erbium coap-12 and coap-13.
    Bugfix for separate NON requests and updated separate resonse API.\nEnabled multiple BLOCKING_REQUESTs in the same scope.
    Added Erbium REST engine with new CoAP implementation
    Added clock_seconds implementation to win32 port
    Provided a meaningful clock_time() implementation - which btw. makes the Cygwin variant finally work :-)
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    Removed references to missing DTLS implementation.
    Added function for easy block1 usage.
    Fixed blocksize calculation when REST_MAX_CHUNK_SIZE != 2^x.
    Added example for block1 + separate + block2.
    Used Uncrustify and fixed Travis build errors.
    Renamed erbium to er-coap to avoid confusion and have a meaningful directory name.
    Updated to CoAP Proposed Standard and removed draft versions.
    er-coap: add client-side support for CoAP Observe
    
    Client-side support for CoAP observe is not compiled by default. To enable it, the COAP_OBSERVE_CLIENT macro must be defined equal to 1.
    Removed references to missing DTLS implementation.
    Added function for easy block1 usage.
    Fixed blocksize calculation when REST_MAX_CHUNK_SIZE != 2^x.
    Added example for block1 + separate + block2.
    Used Uncrustify and fixed Travis build errors.
    Renamed erbium to er-coap to avoid confusion and have a meaningful directory name.
    Updated to CoAP Proposed Standard and removed draft versions.
    er-coap: add client-side support for CoAP Observe
    
    Client-side support for CoAP observe is not compiled by default. To enable it, the COAP_OBSERVE_CLIENT macro must be defined equal to 1.
    Added function for easy block1 usage.
    Fixed blocksize calculation when REST_MAX_CHUNK_SIZE != 2^x.
    Added example for block1 + separate + block2.
    Renamed erbium to er-coap to avoid confusion and have a meaningful directory name.
    Added function for easy block1 usage.
    Fixed blocksize calculation when REST_MAX_CHUNK_SIZE != 2^x.
    Added example for block1 + separate + block2.
    Used Uncrustify and fixed Travis build errors.
    Renamed erbium to er-coap to avoid confusion and have a meaningful directory name.
    Updated to CoAP Proposed Standard and removed draft versions.
    Updated copyright information.
    Added Erbium coap-12 and coap-13.
    Clean-up and fix for rest-server-example.
    Changed separate API and fixed token bug.
    Fixed token bug in separate response and extended API (thanks to Klaus Hartke for the bug report).
    Bugfix for separate NON requests and updated separate resonse API.\nEnabled multiple BLOCKING_REQUESTs in the same scope.
    Simplified Erbium support for separate responses.
    Added Erbium REST engine with new CoAP implementation
    Broke out the base64 commands from the text module
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Used Uncrustify and fixed Travis build errors.
    Renamed erbium to er-coap to avoid confusion and have a meaningful directory name.
    Updated to CoAP Proposed Standard and removed draft versions.
    Updated copyright information.
    Added Erbium coap-12 and coap-13.
    Changed notify API to passing a notification message.
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    Simplified Erbium support for separate responses.
    Renamed CoAP transaction ID (tid) to message ID (mid).
    Added Erbium REST engine with new CoAP implementation
    Added function for easy block1 usage.
    Fixed blocksize calculation when REST_MAX_CHUNK_SIZE != 2^x.
    Added example for block1 + separate + block2.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Made initialization function return a pointer to the MAC driver structure, to make initialization nicer
    Modified to use the new MAC layer API
    A 'null' MAC protocol that does not do anything
    Rime driver running over UDP
    Initial import of the experimental Rime code into the SourceForge CVS.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed references to missing DTLS implementation.
    Added function for easy block1 usage.
    Fixed blocksize calculation when REST_MAX_CHUNK_SIZE != 2^x.
    Added example for block1 + separate + block2.
    Used Uncrustify and fixed Travis build errors.
    Renamed erbium to er-coap to avoid confusion and have a meaningful directory name.
    Updated to CoAP Proposed Standard and removed draft versions.
    Used Uncrustify and fixed Travis build errors.
    Renamed erbium to er-coap to avoid confusion and have a meaningful directory name.
    Updated to CoAP Proposed Standard and removed draft versions.
    Updated copyright information.
    Added Erbium coap-12 and coap-13.
    Changed notify API to passing a notification message.
    Added RST-MID matching for observing.
    Revised Erbium observing.
    Added Erbium REST engine with new CoAP implementation
    Added two commands: unicast-send and unicast-recv that can be used to send unicast data
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Added function for easy block1 usage.
    Fixed blocksize calculation when REST_MAX_CHUNK_SIZE != 2^x.
    Added example for block1 + separate + block2.
    Used Uncrustify and fixed Travis build errors.
    Renamed erbium to er-coap to avoid confusion and have a meaningful directory name.
    Updated to CoAP Proposed Standard and removed draft versions.
    Updated copyright information.
    Added Erbium coap-12 and coap-13.
    Clean-up and fix for rest-server-example.
    Changed separate API and fixed token bug.
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    Fixed token bug in separate response and extended API (thanks to Klaus Hartke for the bug report).
    Bugfix for separate NON requests and updated separate resonse API.\nEnabled multiple BLOCKING_REQUESTs in the same scope.
    Simplified Erbium support for separate responses.
    Renamed CoAP transaction ID (tid) to message ID (mid).
    Erbium code cleanup.
    Added Erbium REST engine with new CoAP implementation
    Allow VC++ to be used as alternative to GCC for building in the WIN32 target.
    TODOs:
    - Update README
    - Add dependency handling
    - Add rtimersupport
    Turned rtimer_arch_now() from a (one line) function into a macro.
    Added #include that #defines NULL
    Preliminary implementation of the rtimer architecture functions for the native CPU
    Architecture-specific code for the real-time module, for the native and netsim platforms
    Added *experimental* module for sending raw (non-routed) packets from Contiki. The name of the module is likely to change.
    Import of the contiki-2.x development code from the SICS internal CVS server
    er-coap (observe): fix possible duplicate value for observe option in GET response and subsequent notification
    
    Currently, the observe value for a response to a GET observe request is always set to zero. That may cause the subsequent notification to have the same observe value. In fact, that happens every time an observable resource is observed for the first time (since the obs_counter is implicitly initialized to zero).
    This patch fixes such a problem by setting the observe option value of responses to obs_counter (and then incrementing it).
    Update to observe-13 (cancellation).
    Enabled forcing CON packet for observer notifications each 20 packets
    Used Uncrustify and fixed Travis build errors.
    Renamed erbium to er-coap to avoid confusion and have a meaningful directory name.
    Updated to CoAP Proposed Standard and removed draft versions.
    Removed references to missing DTLS implementation.
    Added function for easy block1 usage.
    Fixed blocksize calculation when REST_MAX_CHUNK_SIZE != 2^x.
    Added example for block1 + separate + block2.
    Used Uncrustify and fixed Travis build errors.
    Renamed erbium to er-coap to avoid confusion and have a meaningful directory name.
    Updated to CoAP Proposed Standard and removed draft versions.
    Make lists of source files for each app available individually - i.e. for creation of dynamically loadable modules.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Removed SELFSTART_PROCESS as AUTOSTART_ENABLE generally serves that purpose - and AUTOSTART_ENABLE gets already set as required :-)
    Allow to optionally (triggered with SELFSTART_PROCESS) self start the application.
    Have ctk (at least on conio) work correctly without menus.
    Don't close directory if it isn't open.
    Reactivated application core functionality (and avoid compiler warning).
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    *-dsc.c files have been changed to remove forward reference for struct_icon variable, bacause it is strange that this variable is used wholly inside the C source file and declared extern for the forward reference.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    Bug fix by Kovatsch Matthias.
    patched rest-code for econotag
    Bug fix and added new features in coap.
    Changed HTONS to uip_htons and removed some commented code
    Initial commit of an experimental COAP/HTTP/REST implementation for Contiki
    removed execute flag of source files (avoids diff problems with egit)
    Initial commit of an experimental COAP/HTTP/REST implementation for Contiki
    Bug fix and added new features in coap.
    Initial commit of an experimental COAP/HTTP/REST implementation for Contiki
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    fixed compiler warning
    Changes for minimal-net and bug fix for buffer handling.
    patched rest-code for econotag
    Added support for Uri_Query option
    Bug fix and added new features in coap.
    Changed HTONS to uip_htons and removed some commented code
    Initial commit of an experimental COAP/HTTP/REST implementation for Contiki
    Bug fix and added new features in coap.
    Initial commit of an experimental COAP/HTTP/REST implementation for Contiki
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updated API to avoid compiler warnings (added const)
    The collect view functions now take the node's routing metric, not the parent's routing metric. The node ID is now given as the last two bytes of the Rime address, to make it play nice with 8-byte Rime addresses.
    Broke out shell code from the collect-view app to make it useful for non-shell apps too. Added a shell app for interacting with collect-view. Broke out handling of parent, rtmetric, etx, and num_neighbors to make collect-view independent of rime collect.
    Added function for creating a message in a separate buffer
    Made the collect-view application that was preivously hidden inside examples/sky-shell into its own application. This makes it possible for other platforms to use the same nica Java gui from the sky-shell application.
    Collect view for z1
    Moved packet structure into its own header file
    Moved the sht11 driver to its own module
    Moved the cc2420 driver into a separate dev/cc2420 module
    Moved packet structure into its own header file
    Made the collect-view application that was preivously hidden inside examples/sky-shell into its own application. This makes it possible for other platforms to use the same nica Java gui from the sky-shell application.
    Collect view for z1
    Arch-specific code template that works on all platforms
    Made the collect-view application that was preivously hidden inside examples/sky-shell into its own application. This makes it possible for other platforms to use the same nica Java gui from the sky-shell application.
    Moved the cc2420 driver into a separate dev/cc2420 module
    DOS EOL and indentation fixes (core/ apps/ cpu/)
    
    - Removed some DOS EOLs
    - Changed some tabs to spaces
    - Removed some trailing whitespaces
    
    Part of Pull Request #6
    Collect view for z1
    Changed the name of the rimeaddr module to linkaddr
    Moved the rimeaddr.[ch] code from the core/net/rime module to the core/net module, as it is used not only by rime code
    Updated API to avoid compiler warnings (added const)
    The collect view functions now take the node's routing metric, not the parent's routing metric. The node ID is now given as the last two bytes of the Rime address, to make it play nice with 8-byte Rime addresses.
    Broke out shell code from the collect-view app to make it useful for non-shell apps too. Added a shell app for interacting with collect-view. Broke out handling of parent, rtmetric, etx, and num_neighbors to make collect-view independent of rime collect.
    Added function for creating a message in a separate buffer
    Made the collect-view application that was preivously hidden inside examples/sky-shell into its own application. This makes it possible for other platforms to use the same nica Java gui from the sky-shell application.
    Moved packet structure into its own header file
    Arch-specific code template that works on all platforms
    Replace twitter app with generic http-post-auth
    
    Twitter removed http basic auth from the api in august 2010, but this
    underlying code is a good example of doing http basic auth in contiki.
    
    The app has been renamed, and some fixes applied to make it build
    cleanly.
    Changed the parameter 'char * data' of process_start to the
    type process_data_t. This was an artifact when the choice was
    made to use the void * type for the data parameter in processes.
    
    Changed parameter 'void * data' of process_post_synch to
    process_data_t for consistency.
    
    Checked all the uses of process_start() in contiki and fixed casts
    of the data parameter.
    Replace twitter app with generic http-post-auth
    
    Twitter removed http basic auth from the api in august 2010, but this
    underlying code is a good example of doing http basic auth in contiki.
    
    The app has been renamed, and some fixes applied to make it build
    cleanly.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Removed unused include serial-shell.h
    Contiki program that posts messages to the Twitter microblogging service
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Replace twitter app with generic http-post-auth
    
    Twitter removed http basic auth from the api in august 2010, but this
    underlying code is a good example of doing http basic auth in contiki.
    
    The app has been renamed, and some fixes applied to make it build
    cleanly.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Contiki program that posts messages to the Twitter microblogging service
    two new shell commands: download and sendcmd
    added experimental checkpointing functionality:
    currently only implemented on the sky platform
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add MQTT 3.1 engine
    Add MQTT 3.1 engine
    Add MQTT 3.1 engine
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Added a telnet_connect() function
    Import of the contiki-2.x development code from the SICS internal CVS server
    core/net/resolv: IPv6 and mDNS ("Bonjour") support. Major refactor.
    
    This patch updates the DNS resolver to support IPv6 and introduces an
    improved API for looking up DNS entries. This patch also adds optional
    support for mDNS lookups and responses to the DNS resolver.
    
    Here is a quick summary of the changes:
    
     * Added support for IPv6 lookups.
     * DNS queries now honor record expiration.
     * Added support for mDNS, compatible with "Bonjour".
     * Implemented a new lookup api, `resolv_lookup2()`, which provides
       more information about the state of the record(error, expired,
       looking-up, etc.).
    
    About mDNS/Bonjour Support
    --------------------------
    
    This patch adds basic support for mDNS/Bonjour, which allows you to
    refer to the name of a device instead of its IP address. This is
    incredibly convenient for IPv6 addresses because they tend to be very
    long and difficult to remember. It is especially important for
    link-local IPv6 addresses, since not all programs support the '%'
    notation for indicating a network interface (required on systems with
    more than one network interface to disambiguate).
    
    In other words, instead of typing in this:
    
     * `http://[fe80::58dc:d7ed:a644:628f%en1]/`
    
    You can type this instead:
    
     * `http://contiki.local/`
    
    Huge improvement, no?
    
    The convenience extends beyond that: this mechanism can be used for
    nodes to talk to each other based on their human-readable names instead
    of their IPv6 addresses. So instead of a switch on
    `aaaa::58dc:d7ed:a644:628f` triggering an actuator on
    `aaaa::ed26:19c1:4bd2:f95b`, `light-switch.local` can trigger the
    actuator on `living-room-lights.local`.
    
    What you need to do to be able to look up `.local` names on your
    workstation depends on a few factors:
    
     * Your machine needs to be able to send and receive multicast packets
       to and from the LoWPAN. You can do this easily with the Jackdaw
       firmware on an RZUSBStick. If you have a border router, you will need
       it to bridge the mDNS multicast packets across the border.
    
     * If you are using a Mac, you win. All Apple devices support mDNS
       lookups.
    
     * If you are using Windows, you can install Apple's Bonjour for Windows
       package. (This may be already installed on your machine if you have
       installed iTunes) After you install this you can easily do `.local`
       lookups.
    
     * If you are using a Unix machine, you can install Avahi.
    
    The default hostname is set to `contiki.local.`. You can change the
    hostname programmatically by calling `resolv_set_hostname()`. You can
    change the default hostname by changing `CONTIKI_CONF_DEFAULT_HOSTNAME`.
    
    You may disable mDNS support by setting `RESOLV_CONF_SUPPORTS_MDNS` to
    `0`.
    
    ---------------------------------
    
    core/net/resolv: `resolv_lookup2()` -> `resolv_lookup()`
    
    Note that this patch should fix several `resolv_lookup()` bugs
    that already existed. There were many cases where `resolv_lookup()`
    was being called and the IP address ignored, but later code
    assumed that the IP address had been fetched... ANYWAY, those
    should be fixed now.
    
    ---------------------------------
    
    examples/udp-ipv6: Updated client to use MDNS to lookup the server.
    
    Also updated the Cooja regression test simulation.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Updated API for uiplib and resolv to use uip_ipaddr_t instead of uint16_t for compability with IPv6
    Removed SELFSTART_PROCESS as AUTOSTART_ENABLE generally serves that purpose - and AUTOSTART_ENABLE gets already set as required :-)
    Allow to optionally (triggered with SELFSTART_PROCESS) self start the application.
    Window size has been made customizable, and widget placement is modified to fit in smaller screen size.
    If UIP_UDP is turned off, iut doesn't lookup DNS (i.e. doesn't use resolv.c).
    Avoid compiler warnings.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    Added a telnet_connect() function
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    Make lists of source files for each app available individually - i.e. for creation of dynamically loadable modules.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    *-dsc.c files have been changed to remove forward reference for struct_icon variable, bacause it is strange that this variable is used wholly inside the C source file and declared extern for the forward reference.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Do not depend on TELNET_CONF_WINDOW_HEIGHT being defined.
    Window size has been made customizable, and widget placement is modified to fit in smaller screen size.
    If UIP_UDP is turned off, iut doesn't lookup DNS (i.e. doesn't use resolv.c).
    Import of the contiki-2.x development code from the SICS internal CVS server
    removed execute flag of source files (avoids diff problems with egit)
    Bug fix and updates in http implementation.
    Initial commit of an experimental COAP/HTTP/REST implementation for Contiki
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    Converted scope-local variables into function-local variables.
    The 6502-specific LC implementation doesn't allow for scope-local vaiables between PT_BEGIN/PROCESS_BEGIN/PSOCK_BEGIN and PT_BEGIN/PROCESS_END/PSOCK_END.
    Bugfix for Post method not allowed.
    Changes for minimal-net and bug fix for buffer handling.
    removed execute flag of source files (avoids diff problems with egit)
    Bug fix and updates in http implementation.
    Changed HTONS to uip_htons
    Initial commit of an experimental COAP/HTTP/REST implementation for Contiki
    removed execute flag of source files (avoids diff problems with egit)
    Initial commit of an experimental COAP/HTTP/REST implementation for Contiki
    removed execute flag of source files (avoids diff problems with egit)
    Initial commit of an experimental COAP/HTTP/REST implementation for Contiki
    Bugfix for Post method not allowed.
    removed execute flag of source files (avoids diff problems with egit)
    Initial commit of an experimental COAP/HTTP/REST implementation for Contiki
    core/net/resolv: IPv6 and mDNS ("Bonjour") support. Major refactor.
    
    This patch updates the DNS resolver to support IPv6 and introduces an
    improved API for looking up DNS entries. This patch also adds optional
    support for mDNS lookups and responses to the DNS resolver.
    
    Here is a quick summary of the changes:
    
     * Added support for IPv6 lookups.
     * DNS queries now honor record expiration.
     * Added support for mDNS, compatible with "Bonjour".
     * Implemented a new lookup api, `resolv_lookup2()`, which provides
       more information about the state of the record(error, expired,
       looking-up, etc.).
    
    About mDNS/Bonjour Support
    --------------------------
    
    This patch adds basic support for mDNS/Bonjour, which allows you to
    refer to the name of a device instead of its IP address. This is
    incredibly convenient for IPv6 addresses because they tend to be very
    long and difficult to remember. It is especially important for
    link-local IPv6 addresses, since not all programs support the '%'
    notation for indicating a network interface (required on systems with
    more than one network interface to disambiguate).
    
    In other words, instead of typing in this:
    
     * `http://[fe80::58dc:d7ed:a644:628f%en1]/`
    
    You can type this instead:
    
     * `http://contiki.local/`
    
    Huge improvement, no?
    
    The convenience extends beyond that: this mechanism can be used for
    nodes to talk to each other based on their human-readable names instead
    of their IPv6 addresses. So instead of a switch on
    `aaaa::58dc:d7ed:a644:628f` triggering an actuator on
    `aaaa::ed26:19c1:4bd2:f95b`, `light-switch.local` can trigger the
    actuator on `living-room-lights.local`.
    
    What you need to do to be able to look up `.local` names on your
    workstation depends on a few factors:
    
     * Your machine needs to be able to send and receive multicast packets
       to and from the LoWPAN. You can do this easily with the Jackdaw
       firmware on an RZUSBStick. If you have a border router, you will need
       it to bridge the mDNS multicast packets across the border.
    
     * If you are using a Mac, you win. All Apple devices support mDNS
       lookups.
    
     * If you are using Windows, you can install Apple's Bonjour for Windows
       package. (This may be already installed on your machine if you have
       installed iTunes) After you install this you can easily do `.local`
       lookups.
    
     * If you are using a Unix machine, you can install Avahi.
    
    The default hostname is set to `contiki.local.`. You can change the
    hostname programmatically by calling `resolv_set_hostname()`. You can
    change the default hostname by changing `CONTIKI_CONF_DEFAULT_HOSTNAME`.
    
    You may disable mDNS support by setting `RESOLV_CONF_SUPPORTS_MDNS` to
    `0`.
    
    ---------------------------------
    
    core/net/resolv: `resolv_lookup2()` -> `resolv_lookup()`
    
    Note that this patch should fix several `resolv_lookup()` bugs
    that already existed. There were many cases where `resolv_lookup()`
    was being called and the IP address ignored, but later code
    assumed that the IP address had been fetched... ANYWAY, those
    should be fixed now.
    
    ---------------------------------
    
    examples/udp-ipv6: Updated client to use MDNS to lookup the server.
    
    Also updated the Cooja regression test simulation.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    Made DNS optional - just like the other web clients.
    Added support for IPv6 URLs
    Updated API for uiplib and resolv to use uip_ipaddr_t instead of uint16_t for compability with IPv6
    Added wget command for downloading files over HTTP
    core/net/resolv: IPv6 and mDNS ("Bonjour") support. Major refactor.
    
    This patch updates the DNS resolver to support IPv6 and introduces an
    improved API for looking up DNS entries. This patch also adds optional
    support for mDNS lookups and responses to the DNS resolver.
    
    Here is a quick summary of the changes:
    
     * Added support for IPv6 lookups.
     * DNS queries now honor record expiration.
     * Added support for mDNS, compatible with "Bonjour".
     * Implemented a new lookup api, `resolv_lookup2()`, which provides
       more information about the state of the record(error, expired,
       looking-up, etc.).
    
    About mDNS/Bonjour Support
    --------------------------
    
    This patch adds basic support for mDNS/Bonjour, which allows you to
    refer to the name of a device instead of its IP address. This is
    incredibly convenient for IPv6 addresses because they tend to be very
    long and difficult to remember. It is especially important for
    link-local IPv6 addresses, since not all programs support the '%'
    notation for indicating a network interface (required on systems with
    more than one network interface to disambiguate).
    
    In other words, instead of typing in this:
    
     * `http://[fe80::58dc:d7ed:a644:628f%en1]/`
    
    You can type this instead:
    
     * `http://contiki.local/`
    
    Huge improvement, no?
    
    The convenience extends beyond that: this mechanism can be used for
    nodes to talk to each other based on their human-readable names instead
    of their IPv6 addresses. So instead of a switch on
    `aaaa::58dc:d7ed:a644:628f` triggering an actuator on
    `aaaa::ed26:19c1:4bd2:f95b`, `light-switch.local` can trigger the
    actuator on `living-room-lights.local`.
    
    What you need to do to be able to look up `.local` names on your
    workstation depends on a few factors:
    
     * Your machine needs to be able to send and receive multicast packets
       to and from the LoWPAN. You can do this easily with the Jackdaw
       firmware on an RZUSBStick. If you have a border router, you will need
       it to bridge the mDNS multicast packets across the border.
    
     * If you are using a Mac, you win. All Apple devices support mDNS
       lookups.
    
     * If you are using Windows, you can install Apple's Bonjour for Windows
       package. (This may be already installed on your machine if you have
       installed iTunes) After you install this you can easily do `.local`
       lookups.
    
     * If you are using a Unix machine, you can install Avahi.
    
    The default hostname is set to `contiki.local.`. You can change the
    hostname programmatically by calling `resolv_set_hostname()`. You can
    change the default hostname by changing `CONTIKI_CONF_DEFAULT_HOSTNAME`.
    
    You may disable mDNS support by setting `RESOLV_CONF_SUPPORTS_MDNS` to
    `0`.
    
    ---------------------------------
    
    core/net/resolv: `resolv_lookup2()` -> `resolv_lookup()`
    
    Note that this patch should fix several `resolv_lookup()` bugs
    that already existed. There were many cases where `resolv_lookup()`
    was being called and the IP address ignored, but later code
    assumed that the IP address had been fetched... ANYWAY, those
    should be fixed now.
    
    ---------------------------------
    
    examples/udp-ipv6: Updated client to use MDNS to lookup the server.
    
    Also updated the Cooja regression test simulation.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Updated API for uiplib and resolv to use uip_ipaddr_t instead of uint16_t for compability with IPv6
    added check for too long server name
    Rewrote NULL-termination code to avoid writing to a const array
    Bugfix: zero-terminate string before copying
    Fixed compilation problems, added new commands to shell.h
    Added three commands for IP interaction in the shell: ping (sends ICMP ping messages), tcpsend (sets up TCP connections for sending and receiving data), and udpsend (sends and receives UDP packets)
    Added an irc shell command that runs an IRC client from the shell.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Two 'peek' and 'poke' commands for reading and writing directly to memory
    Added httpd command that sets up a local web server, reading files from the CFS file system
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added wget command for downloading files over HTTP
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added a separate file for CFS Coffee-specific commands
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Reverted commit below as the cc65 bug in question is fixed.
    
    Rearranged some expressions to avoid triggering a cc65 bug. (reverse-merged from commit 7134da0915cf56c7eeff2cd22b6b3ddeff5e7e33)
    Rearranged some expressions to avoid triggering a cc65 bug.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Remove old neighbor.h inclusion
    Enabled compilation without timesynch enabled
    Added a debug command for testing reliable unicast (runicast) communication
    Made rimeaddr_t pointers const when they should be
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Moved all rime channel definitions to the shell-rime.h file
    Separated the 'debug' commands (unicast and broadcast) from shell-rime into a separate shell-rime-debug
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Changed names of the Rime examples from test-* to example-* and added examples for ruc and uc
    Added exithandlers so that the examples can be run as loadable (and unloadble) modules
    Updated for the new APIs
    Moved all Rime examples into examples/rime directory
    API change for Rime: *_setup() renamed to *_open()
    Example showing how to use the mesh routing code in Rime
    A Rime driver for the simple-cc2420 driver
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Updated to new radio_driver API
    tr1001 init fix
    Added radio sniffer program
    More uip_ipaddr_t fixes.
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Removed the experimental checkpointing code
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Remove everything that depended on the now gone twitter APP.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Some Telnet server enhancements:
    - PETSCII sending support
    - Option to customize shell prompt and banner
    - Stop all running commands on shell close
    - New 'exit' and 'quit' commands to close shell
    Broke out shell code from the collect-view app to make it useful for non-shell apps too. Added a shell app for interacting with collect-view. Broke out handling of parent, rtmetric, etx, and num_neighbors to make collect-view independent of rime collect.
    Added a powertrace command as an interface to the powertrace app
    Broke out the base64 commands from the text module
    Two 'peek' and 'poke' commands for reading and writing directly to memory
    Added a debug command for testing reliable unicast (runicast) communication
    netperf: a new small shell command that measures the communication
    performance between two local (single-hop) nodes. It sends packets
    over both broadcast and unicast, both in one direction and in both, as
    well as tested the stream mode of the underlying MAC protocol.
    New Twitter tweet commands added
    Added new shell commands
    two new shell commands: download and sendcmd
    Fixed compilation problems, added new commands to shell.h
    Refactored the power commands out from the sky-specific shell commands into its own module. Also added compower idle consumption in the energy and power reports.
    Added documentation for the shell functions
    Added missing include.
    added experimental checkpointing functionality:
    currently only implemented on the sky platform
    Added httpd and wget commands
    Removed serial-shell.h (now a separate app)
    Separated the 'debug' commands (unicast and broadcast) from shell-rime into a separate shell-rime-debug
    Added a separate file for CFS Coffee-specific commands
    Added a shell_quit() function that cleanly exits the shell (currently untested though)
    Added a shell_start() function that prints out the shell prompt and a small helpful message
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    Broke out the netcmd command from shell-rime.c into shell-rime-netcmd.c
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Broke out shell code from the collect-view app to make it useful for non-shell apps too. Added a shell app for interacting with collect-view. Broke out handling of parent, rtmetric, etx, and num_neighbors to make collect-view independent of rime collect.
    Added a separate file for CFS Coffee-specific commands
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added a powertrace command as an interface to the powertrace app
    Added Sentilla USB platform. This platform is similar to the Sky platform but without the sensors and with 2 leds.
    Added Sentilla Jcreate platform. This platform is similar to the Sky platform but with other sensors and 8 leds.
    Moved ninimal-ppp into backyard as it depends on the uIP ppp support.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Reverted commit below as the cc65 bug in question is fixed.
    
    Rearranged some expressions to avoid triggering a cc65 bug. (reverse-merged from commit 7134da0915cf56c7eeff2cd22b6b3ddeff5e7e33)
    Rearranged some expressions to avoid triggering a cc65 bug.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    Fixed alignment problem on the MSP430, where the ping message may be misaligned
    from address is const
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Renamed the Rime 'ping' command to 'rime-ping' to differentiate it from the IP ping command
    Added dummy function callback because sdcc does not like NULL function pointers
    Moved all rime channel definitions to the shell-rime.h file
    CC_CONST_FUNCTION replaces some const keywords in order to workaround a sdcc bug, which cannot handle function pointers as const.
    Made ping output nicer, made rtt measurement work without timesynch too
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Separated the 'debug' commands (unicast and broadcast) from shell-rime into a separate shell-rime-debug
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added httpd command that sets up a local web server, reading files from the CFS file system
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Copy the string first, since shell_output_str() does not ensure constness of the first string
    Use PROCESS_NAME_STRING macro to handle NO_PROCESS_NAMES
    change some examples for iris
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    Cleanup of the Contiki network layer configuration. Now using CONTIKI_WITH_IPV6, CONTIKI_WITH_IPV4, and CONTIKI_WITH_RIME in makefiles, and UIP_CONF_IPV6, UIP_CONF_IPV4, UIP_CONF_RIME in c code. Now only the stacks that are used are compiled (via makefile MODULES). Make IPv6 the default network stack.
    Removed the experimental checkpointing code
    Remove everything that depended on the now gone twitter APP.
    hex conversion and crc shell commands
    examples/sky-shell now runs out-of-the-box on Z1
    
    For best results, use a Z1 Starter Platform with an sht11 sensor plugged
    in the ziglet port.
    Keep in mind that the light-sensor is mapped to the potentiometer in this platform.
    XXX Tracing why powertrace does not show anything different from 0.
    Broke out shell code from the collect-view app to make it useful for non-shell apps too. Added a shell app for interacting with collect-view. Broke out handling of parent, rtmetric, etx, and num_neighbors to make collect-view independent of rime collect.
    Added a powertrace command as an interface to the powertrace app
    Fixed recent build error in example-shell.
    
    Both apps/webbrowser and apps/webserver contain a http-strings.c. It seems unclear to me if the original intention was to have them identical (but then they should have been factored out in the first place) or if they were only very similiar by chance.
    
    Anyway, currently webserver/http-strings.c is a clean superset of webbrowser/http-strings.c so if a project has both HTTP server and client parts it is desirable to use the webserver variant. In the case of apps/shell this can be archived by adding webserver *before* webbrowser to the APPS variable.
    
    This seems like a hack to me - but the whole shell build qualifies as hack, doesn't it ;-)
    Added missing urlconv.c for optional URL filtering.
    Broke out the base64 commands from the text module
    Two 'peek' and 'poke' commands for reading and writing directly to memory
    Added a debug command for testing reliable unicast (runicast) communication
    netperf: a new small shell command that measures the communication
    performance between two local (single-hop) nodes. It sends packets
    over both broadcast and unicast, both in one direction and in both, as
    well as tested the stream mode of the underlying MAC protocol.
    added webserver-nogui.c to webserver sources
    New Twitter tweet commands added
    Added new shell commands
    two new shell commands: download and sendcmd
    Added three commands for IP interaction in the shell: ping (sends ICMP ping messages), tcpsend (sets up TCP connections for sending and receiving data), and udpsend (sends and receives UDP packets)
    Refactored the power commands out from the sky-specific shell commands into its own module. Also added compower idle consumption in the energy and power reports.
    Override source file sets of included apps to exclude source files that would cause symbols to be defined twice in the Contiki library.
    added experimental checkpointing functionality:
    currently only implemented on the sky platform
    Added an irc shell command that runs an IRC client from the shell.
    Keep override directive from breaking win32 build - things are getting quite messy here :-(
    Added httpd and wget commands
    Broke out serial-shell from the shell app into its own app. Project can use the serial-shell to get a shell running over the serial line, just like a project can use the telnetd to get a shell running over Telnet/TCP/IP.
    Separated the 'debug' commands (unicast and broadcast) from shell-rime into a separate shell-rime-debug
    Make cfs-coffee compiled on all platforms
    Added a separate file for CFS Coffee-specific commands
    It doesn't seem reasonable to me to presume that all targets support the elfloader. Therefore shell-exec.c may not be part of the common source files.  For now I just moved it to the sky dependent source. In case the dependency on the sky target is undesirable someone needs to come up with a more flexible approach.
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    Compile shell-sky.c only for the sky target, added shell-rime-netcmd.c
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Make lists of source files for each app available individually - i.e. for creation of dynamically loadable modules.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    no newline added by echo command
    Converted scope-local variables into function-local variables.
    The 6502-specific LC implementation doesn't allow for scope-local vaiables between PT_BEGIN/PROCESS_BEGIN/PSOCK_BEGIN and PT_BEGIN/PROCESS_END/PSOCK_END.
    Fixed alignment issue
    I made a mess out of the dec64 command being moved to a new module; this commit should fix the previous issues though
    Moved the dec64 command into the shell base64 module
    Broke out the base64 commands from the text module
    Added three commands for IP interaction in the shell: ping (sends ICMP ping messages), tcpsend (sets up TCP connections for sending and receiving data), and udpsend (sends and receives UDP packets)
    Avoided compiler warnings by adding casts and moved variable definitions to the begin of function bodies.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    switched all users of cfs_seek(x,y) to cfs_seek(x,y,CFS_SEEK_SET)
    Fixed ugly function pointer cast by implementing a wrapper function for the protothread function.
    Remove unguarded printf()
    Moved all rime channel definitions to the shell-rime.h file
    Better error handling if the file could not be opened
    Bugfix: CFS file handles can be 0
    CC_CONST_FUNCTION replaces some const keywords in order to workaround a sdcc bug, which cannot handle function pointers as const.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Allow to reduce functionality if non-standard alloca() isn't available.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    hex conversion and crc shell commands
    Changed the parameter 'char * data' of process_start to the
    type process_data_t. This was an artifact when the choice was
    made to use the void * type for the data parameter in processes.
    
    Changed parameter 'void * data' of process_post_synch to
    process_data_t for consistency.
    
    Checked all the uses of process_start() in contiki and fixed casts
    of the data parameter.
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Made rimeaddr_t pointers const when they should be
    two new shell commands: download and sendcmd
    Avoid alignment problems by copying the crc from the header field into a local variable
    Made sure netcmds are null-terminated
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Replaced NETSIM macro with general (and now actually working) solution in Makefile.include.
    Moved all rime channel definitions to the shell-rime.h file
    Add a CRC checksum to all netcmd packets to ensure that they are valid, even if they are running on top of a radio link with bit errors
    Send one extra byte to ensure that the terminating zero is included
    Refactored netcmd command code that was broken out from shell-rime.c
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added a debug command for testing reliable unicast (runicast) communication
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Remove old neighbor.h inclusion
    Made rimeaddr_t pointers const when they should be
    Fixed compiler warnings
    Added two commands: unicast-send and unicast-recv that can be used to send unicast data
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Moved all rime channel definitions to the shell-rime.h file
    Separated the 'debug' commands (unicast and broadcast) from shell-rime into a separate shell-rime-debug
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    The collect view functions now take the node's routing metric, not the parent's routing metric.
    Broke out shell code from the collect-view app to make it useful for non-shell apps too. Added a shell app for interacting with collect-view. Broke out handling of parent, rtmetric, etx, and num_neighbors to make collect-view independent of rime collect.
    Added a powertrace command as an interface to the powertrace app
    Added Sentilla USB platform. This platform is similar to the Sky platform but without the sensors and with 2 leds.
    Added Sentilla Jcreate platform. This platform is similar to the Sky platform but with other sensors and 8 leds.
    Moved ninimal-ppp into backyard as it depends on the uIP ppp support.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Two 'peek' and 'poke' commands for reading and writing directly to memory
    Fixed to work with new sensor API (SENSORS_ACTIVATE no longer use pointer) and removed ping command to save code space
    fixed to work with new sensor API
    Removed the debug and sniff commands to make code size smaller so that the compiled binary fits in ROM
    Example shell for the Sentilla JCreate
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    bugfix: cfs_open must get aquire permissions
    error check got triggered on valid file descriptor 0.
    Slightly more informative output
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Factored out the time table keeping code from the profiling code and placed it in a separate 'timetable' module, that may be uesd on its own.
    Make netsim more like the esb target
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Reverted commit below as the cc65 bug in question is fixed.
    
    Rearranged some expressions to avoid triggering a cc65 bug. (reverse-merged from commit 7134da0915cf56c7eeff2cd22b6b3ddeff5e7e33)
    Rearranged some expressions to avoid triggering a cc65 bug.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    bugfix: control messages were lost due to lack of buffers; wait for buffer before sending
    Fixed bugs in the types to the printf arguments
    Set default number of retries to 8 to make the netperf command more robust
    Fixed compilation without timesynch compiled in
    Print out the performance test number for automatic processing
    Fixed compliation problem
    Made rimeaddr_t pointers const when they should be
    Added command line options for enabling the four different performance tests
    netperf: a new small shell command that measures the communication
    performance between two local (single-hop) nodes. It sends packets
    over both broadcast and unicast, both in one direction and in both, as
    well as tested the stream mode of the underlying MAC protocol.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    adjusted shell for the generic remove command.
    Slightly more informative output
    Added a separate file for CFS Coffee-specific commands
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Updated to new radio_driver API
    tr1001 init fix
    Added radio sniffer program
    More uip_ipaddr_t fixes.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the parameter 'char * data' of process_start to the
    type process_data_t. This was an artifact when the choice was
    made to use the void * type for the data parameter in processes.
    
    Changed parameter 'void * data' of process_post_synch to
    process_data_t for consistency.
    
    Checked all the uses of process_start() in contiki and fixed casts
    of the data parameter.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted scope-local variables into function-local variables.
    The 6502-specific LC implementation doesn't allow for scope-local vaiables between PT_BEGIN/PROCESS_BEGIN/PSOCK_BEGIN and PT_BEGIN/PROCESS_END/PSOCK_END.
    Rewrote part of the repeat command to make the repeat cycle deterministic
    Implement repeats with a periodic second timer to allow for greater range than what is possible with Contiki ctimers. Use RTIMER_NOW() instead of rtimer_arch_now().
    Reverted the recent change from random_rand() to rand(). It turned out that
    since libc rand() returns a signed int, there were frequently problems with
    timer values wrapping. By reverting to random_rand(), we can provide a
    random generator that returns an unsigned and the timer problems are solved.
    Use C rand() instead of random_rand()
    Bugfix: a repeat command with 0 interval only ran half its commands because the repeat server process was started during the exithandler of the previous repeat server process. The kernel detected this and did not start every second repeat server process.
    If the reps argument to the repeat command is 0, it means to repeat infinitely
    Avoided compiler warnings by adding casts. However it might make sense to start taking into account that C pointer differences do not have the type 'int'...
    Description made clearer
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Changed the parameter 'char * data' of process_start to the
    type process_data_t. This was an artifact when the choice was
    made to use the void * type for the data parameter in processes.
    
    Changed parameter 'void * data' of process_post_synch to
    process_data_t for consistency.
    
    Checked all the uses of process_start() in contiki and fixed casts
    of the data parameter.
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Minor beautification / optmization of prompt / banner custimization.
    Improved shell banner / prompt customization.
    Working with string-type macros on cmdlines is a pain in the nack so rather go for global string constants activated by simple flag-type macros.
    Some Telnet server enhancements:
    - PETSCII sending support
    - Option to customize shell prompt and banner
    - Stop all running commands on shell close
    - New 'exit' and 'quit' commands to close shell
    Converted scope-local variables into function-local variables.
    The 6502-specific LC implementation doesn't allow for scope-local vaiables between PT_BEGIN/PROCESS_BEGIN/PSOCK_BEGIN and PT_BEGIN/PROCESS_END/PSOCK_END.
    Added documentation for the shell functions
    Remove XXX todo comment: this has now been fixed
    Use the clock_second() function to get time in seconds
    Shave off whitespace at the end of a command (they would otherwise cause problems with filenames having 'invisible' trailing spaces).
    Added a shell_quit() function that cleanly exits the shell (currently untested though)
    Added a shell_start() function that prints out the shell prompt and a small helpful message
    Avoided compiler warnings by adding casts. However it might make sense to start taking into account that C pointer differences do not have the type 'int'...
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Changed #ifdef to #if for checking CONF flag to be more consistent with predominant coding style.
    Providing a dummy program_handler_load() made made the telnet server work without program-handler but on the other hand incompatible with an exsistng program handler :-(
    Therefore I replaced that hack with a clean CONF macro, which by the way really removes the run() and exec() functionality instead of just implementing it empty.
    The Contiki 2.x process entity doesn't contain a process id anymore. Therefore processes are killed by name rather then by id.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added two commands: unicast-send and unicast-recv that can be used to send unicast data
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added an irc shell command that runs an IRC client from the shell.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted scope-local variables into function-local variables.
    The 6502-specific LC implementation doesn't allow for scope-local vaiables between PT_BEGIN/PROCESS_BEGIN/PSOCK_BEGIN and PT_BEGIN/PROCESS_END/PSOCK_END.
    Report an error if cfs_write failed.
    Small documentation fix
    the third read parameter must be checked for existence.
    updated the documentation to cover the third parameter.
    use unsigned long to print total file size.
    switched all users of cfs_seek(x,y) to cfs_seek(x,y,CFS_SEEK_SET)
    Fixes by Luca Mottola: don't call write with zero-length data; added parameter to specify block size to read command
    increase file size range for display in the ls command.
    adjusted shell for the generic remove command.
    Avoid compiler warning.
    Added an optional 'offset' parameter to the read command. With the offset parameter, reading starts 'offset' bytes into the file
    Bugfix: don't try to read/write/append to file if it was not possible to open it. Bugfix: CFS file descriptors that are 0 are OK.
    Fixed copy&paste issue.
    Print directory entry size right-justified.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    *-dsc.c files have been changed to remove forward reference for struct_icon variable, bacause it is strange that this variable is used wholly inside the C source file and declared extern for the forward reference.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Explicitly turn LEDs off if the command is interrupted
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Changed names of the Rime examples from test-* to example-* and added examples for ruc and uc
    Static should come first because it's a storage class.
    Added exithandlers so that the examples can be run as loadable (and unloadble) modules
    Message size should include ending zero byte
    Moved all Rime examples into examples/rime directory
    API change for Rime: *_setup() renamed to *_open()
    Simple Rime test code
    Renamed Rime output function
    A Rime driver for the simple-cc2420 driver
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    core/net/resolv: IPv6 and mDNS ("Bonjour") support. Major refactor.
    
    This patch updates the DNS resolver to support IPv6 and introduces an
    improved API for looking up DNS entries. This patch also adds optional
    support for mDNS lookups and responses to the DNS resolver.
    
    Here is a quick summary of the changes:
    
     * Added support for IPv6 lookups.
     * DNS queries now honor record expiration.
     * Added support for mDNS, compatible with "Bonjour".
     * Implemented a new lookup api, `resolv_lookup2()`, which provides
       more information about the state of the record(error, expired,
       looking-up, etc.).
    
    About mDNS/Bonjour Support
    --------------------------
    
    This patch adds basic support for mDNS/Bonjour, which allows you to
    refer to the name of a device instead of its IP address. This is
    incredibly convenient for IPv6 addresses because they tend to be very
    long and difficult to remember. It is especially important for
    link-local IPv6 addresses, since not all programs support the '%'
    notation for indicating a network interface (required on systems with
    more than one network interface to disambiguate).
    
    In other words, instead of typing in this:
    
     * `http://[fe80::58dc:d7ed:a644:628f%en1]/`
    
    You can type this instead:
    
     * `http://contiki.local/`
    
    Huge improvement, no?
    
    The convenience extends beyond that: this mechanism can be used for
    nodes to talk to each other based on their human-readable names instead
    of their IPv6 addresses. So instead of a switch on
    `aaaa::58dc:d7ed:a644:628f` triggering an actuator on
    `aaaa::ed26:19c1:4bd2:f95b`, `light-switch.local` can trigger the
    actuator on `living-room-lights.local`.
    
    What you need to do to be able to look up `.local` names on your
    workstation depends on a few factors:
    
     * Your machine needs to be able to send and receive multicast packets
       to and from the LoWPAN. You can do this easily with the Jackdaw
       firmware on an RZUSBStick. If you have a border router, you will need
       it to bridge the mDNS multicast packets across the border.
    
     * If you are using a Mac, you win. All Apple devices support mDNS
       lookups.
    
     * If you are using Windows, you can install Apple's Bonjour for Windows
       package. (This may be already installed on your machine if you have
       installed iTunes) After you install this you can easily do `.local`
       lookups.
    
     * If you are using a Unix machine, you can install Avahi.
    
    The default hostname is set to `contiki.local.`. You can change the
    hostname programmatically by calling `resolv_set_hostname()`. You can
    change the default hostname by changing `CONTIKI_CONF_DEFAULT_HOSTNAME`.
    
    You may disable mDNS support by setting `RESOLV_CONF_SUPPORTS_MDNS` to
    `0`.
    
    ---------------------------------
    
    core/net/resolv: `resolv_lookup2()` -> `resolv_lookup()`
    
    Note that this patch should fix several `resolv_lookup()` bugs
    that already existed. There were many cases where `resolv_lookup()`
    was being called and the IP address ignored, but later code
    assumed that the IP address had been fetched... ANYWAY, those
    should be fixed now.
    
    ---------------------------------
    
    examples/udp-ipv6: Updated client to use MDNS to lookup the server.
    
    Also updated the Cooja regression test simulation.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    Converted scope-local variables into function-local variables.
    The 6502-specific LC implementation doesn't allow for scope-local vaiables between PT_BEGIN/PROCESS_BEGIN/PSOCK_BEGIN and PT_BEGIN/PROCESS_END/PSOCK_END.
    Removed void * operations
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Updated API for uiplib and resolv to use uip_ipaddr_t instead of uint16_t for compability with IPv6
    updated for new uip APIs
    Fixed IPv6 compilation problems
    Added three commands for IP interaction in the shell: ping (sends ICMP ping messages), tcpsend (sets up TCP connections for sending and receiving data), and udpsend (sends and receives UDP packets)
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted scope-local variables into function-local variables.
    The 6502-specific LC implementation doesn't allow for scope-local vaiables between PT_BEGIN/PROCESS_BEGIN/PSOCK_BEGIN and PT_BEGIN/PROCESS_END/PSOCK_END.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Refactored netcmd command code that was broken out from shell-rime.c
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved the ctk files from core/lib into core/lib/ and core/lib/libconio
    shell: Fix GUI build
    
    * Fix shell_exit() signature, it's called without any argument.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Some Telnet server enhancements:
    - PETSCII sending support
    - Option to customize shell prompt and banner
    - Stop all running commands on shell close
    - New 'exit' and 'quit' commands to close shell
    Include wget shell command in "standard" shell environments.
    Made use of shell_quit().
    Avoided compiler warnings by adding casts. However it might make sense to start taking into account that C pointer differences do not have the type 'int'...
    Removed SELFSTART_PROCESS as AUTOSTART_ENABLE generally serves that purpose - and AUTOSTART_ENABLE gets already set as required :-)
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    Renamed shell-gui.c to gui-shell.c to fit the new shell file naming scheme.
    Adjust shell GUI to the new shell logic.
    Avoid generating new CTK events if process_exit() and LOADER_UNLOAD() was already called.
    Avoid compiler warning.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updated to new announcement API
    Made rimeaddr_t pointers const when they should be
    Added missing string.h include, for memset()
    Broke out the 'neighbor' command functionality from the shell-rime.c file; reimplemented it to use the announcemnet primitive instead
    Changed the name of the 'serial' module to 'serial-line' to signify that the module is about lines of data from the serial port, not individual bytes, and to make sdcc happy
    Minor documentation update
    Added cr/nl to end of prompt to make scripting easier
    Guard against NULL input, remove unguarded printf()
    Broke out serial-shell from the shell app into its own app. Project can use the serial-shell to get a shell running over the serial line, just like a project can use the telnetd to get a shell running over Telnet/TCP/IP.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Updated to new radio_driver API
    tr1001 init fix
    Added radio sniffer program
    More uip_ipaddr_t fixes.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    netperf: a new small shell command that measures the communication
    performance between two local (single-hop) nodes. It sends packets
    over both broadcast and unicast, both in one direction and in both, as
    well as tested the stream mode of the underlying MAC protocol.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updated to use new Rime sniffer API
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Added support for sniffing for packet attributes for both incoming and outgoing packets
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Avoid usage of POSIX function names even for static functions as some indirectly included system header might declare them.
    Ensure that receiver_callback is set before calling it
    Made initialization function return a pointer to the MAC driver structure, to make initialization nicer
    Modified to use the new MAC layer API
    Avoid function pointer mismatch in set_receive_function().
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    two new shell commands: download and sendcmd
    added experimental checkpointing functionality:
    currently only implemented on the sky platform
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Reverted commit below as the cc65 bug in question is fixed.
    
    Rearranged some expressions to avoid triggering a cc65 bug. (reverse-merged from commit 7134da0915cf56c7eeff2cd22b6b3ddeff5e7e33)
    Rearranged some expressions to avoid triggering a cc65 bug.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Remove old neighbor.h inclusion
    Made rimeaddr_t pointers const when they should be
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Moved all rime channel definitions to the shell-rime.h file
    Separated the 'debug' commands (unicast and broadcast) from shell-rime into a separate shell-rime-debug
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved net/rime.h to net/rime/rime.h
    Moved the sht11 driver to its own module
    Moved the cc2420 driver into a separate dev/cc2420 module
    Cleanup of the node-id.h files. The node-id.h file contains
    declarations of functions for setting and getting a node ID number, a
    functionality that exists on many platforms. Since this functionality
    was not considered part of the Contiki core, each platform defined its
    own node-id.h file. This commit attempts to clean this up by
    collecting the node-id.h into a core/sys/node-id.h file that replaces
    the old node-id.h files from the platform directories.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Removed obsolete mac pointer
    Bugfix: rfchannel did not print out over the correct command structure
    updated to new sensors API
    Fixed compilation without timesynch compiled in
    fixed for new sensor api
    Refactored the power commands out from the sky-specific shell commands into its own module. Also added compower idle consumption in the energy and power reports.
    added voltage value in sky-shell sense and senseconv command
    Added a 'nodeid' command for setting and retreiving the node ID from the external flash. Made the powergraph command optional to save code space.
    Flush energy estimates before reading them
    Added a separate file for CFS Coffee-specific commands
    Fixed compiled warnings
    Added a 'format' command that formats a CFS Coffee flash file system
    Changed name of the simple-cc2420 module to cc2420: changed all function names and variable names from simple_cc2420_* to cc2420_*.
    Changed filename of the CC2420 driver from simple-cc2420 to cc2420.
    Fixed help text on rfchannel command
    Added 'graphical' (ASCII-graphics) power display
    Better looking senseconv output
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added three commands for IP interaction in the shell: ping (sends ICMP ping messages), tcpsend (sets up TCP connections for sending and receiving data), and udpsend (sends and receives UDP packets)
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added three commands for IP interaction in the shell: ping (sends ICMP ping messages), tcpsend (sets up TCP connections for sending and receiving data), and udpsend (sends and receives UDP packets)
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    hex conversion and crc shell commands
    removed execute flag of source files (avoids diff problems with egit)
    Adding ADC functions
    Platform-specific devices.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted scope-local variables into function-local variables.
    The 6502-specific LC implementation doesn't allow for scope-local vaiables between PT_BEGIN/PROCESS_BEGIN/PSOCK_BEGIN and PT_BEGIN/PROCESS_END/PSOCK_END.
    Broke out the base64 commands from the text module
    Added three commands for IP interaction in the shell: ping (sends ICMP ping messages), tcpsend (sets up TCP connections for sending and receiving data), and udpsend (sends and receives UDP packets)
    Avoided compiler warnings by adding casts and moved variable definitions to the begin of function bodies.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Fix warnings caused by incorrect \defgroup, \addtogroup, \file
    Fix warnings caused by unescaped special doxygen chars
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Made rimeaddr_t pointers const when they should be
    fixed compiler warnings (as suggested by Niclas Finne)
    two new shell commands: download and sendcmd
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Added a 'netstat' command that (currently) shows active TCP connections
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added a 'netstat' command that (currently) shows active TCP connections
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Refactored the power commands out from the sky-specific shell commands into its own module. Also added compower idle consumption in the energy and power reports.
    Added an irc shell command that runs an IRC client from the shell.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    Increased the default number of retransmissions for the send command
    Made use of the new collect keepalive timer
    Const and typecast bugfix
    Fixed compilation error
    Set a default value for 'send' commands without arguments
    Added the number of hop-by-hop retransmissions to the 'send' command
    Print out rdc instead of mac
    Print out the name of the radio duty cycling mechanism instead of the MAC
    Updated to new collect router API
    Remove old neighbor.h inclusion
    Removed the 'nodes' command from the shell: it never really worked
    Potential alignment problem fix
    Made rimeaddr_t pointers const when they should be
    Broke out the 'neighbor' command functionality from the shell-rime.c file; reimplemented it to use the announcemnet primitive instead
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Reverted the recent change from random_rand() to rand(). It turned out that
    since libc rand() returns a signed int, there were frequently problems with
    timer values wrapping. By reverting to random_rand(), we can provide a
    random generator that returns an unsigned and the timer problems are solved.
    Use C rand() instead of random_rand()
    Replaced NETSIM macro with general (and now actually working) solution in Makefile.include.
    Fixed problem with erroneous pointer type
    Rewrote the 'nodes' command to use netflood rather than trickle - but the 'nodes' command don't seem to work reliably anyway, so it currently is a candidate for removal.
    Add a CRC checksum to all collect packets to ensure that they are valid, even if they are running on top of a radio link with bit errors
    Separated the 'debug' commands (unicast and broadcast) from shell-rime into a separate shell-rime-debug
    Fixed compiled warnings
    Print MAC layer with mac command
    Added command for turning the MAC protocol on or off
    Broke out the netcmd command from shell-rime.c into shell-rime-netcmd.c
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    core/net/resolv: IPv6 and mDNS ("Bonjour") support. Major refactor.
    
    This patch updates the DNS resolver to support IPv6 and introduces an
    improved API for looking up DNS entries. This patch also adds optional
    support for mDNS lookups and responses to the DNS resolver.
    
    Here is a quick summary of the changes:
    
     * Added support for IPv6 lookups.
     * DNS queries now honor record expiration.
     * Added support for mDNS, compatible with "Bonjour".
     * Implemented a new lookup api, `resolv_lookup2()`, which provides
       more information about the state of the record(error, expired,
       looking-up, etc.).
    
    About mDNS/Bonjour Support
    --------------------------
    
    This patch adds basic support for mDNS/Bonjour, which allows you to
    refer to the name of a device instead of its IP address. This is
    incredibly convenient for IPv6 addresses because they tend to be very
    long and difficult to remember. It is especially important for
    link-local IPv6 addresses, since not all programs support the '%'
    notation for indicating a network interface (required on systems with
    more than one network interface to disambiguate).
    
    In other words, instead of typing in this:
    
     * `http://[fe80::58dc:d7ed:a644:628f%en1]/`
    
    You can type this instead:
    
     * `http://contiki.local/`
    
    Huge improvement, no?
    
    The convenience extends beyond that: this mechanism can be used for
    nodes to talk to each other based on their human-readable names instead
    of their IPv6 addresses. So instead of a switch on
    `aaaa::58dc:d7ed:a644:628f` triggering an actuator on
    `aaaa::ed26:19c1:4bd2:f95b`, `light-switch.local` can trigger the
    actuator on `living-room-lights.local`.
    
    What you need to do to be able to look up `.local` names on your
    workstation depends on a few factors:
    
     * Your machine needs to be able to send and receive multicast packets
       to and from the LoWPAN. You can do this easily with the Jackdaw
       firmware on an RZUSBStick. If you have a border router, you will need
       it to bridge the mDNS multicast packets across the border.
    
     * If you are using a Mac, you win. All Apple devices support mDNS
       lookups.
    
     * If you are using Windows, you can install Apple's Bonjour for Windows
       package. (This may be already installed on your machine if you have
       installed iTunes) After you install this you can easily do `.local`
       lookups.
    
     * If you are using a Unix machine, you can install Avahi.
    
    The default hostname is set to `contiki.local.`. You can change the
    hostname programmatically by calling `resolv_set_hostname()`. You can
    change the default hostname by changing `CONTIKI_CONF_DEFAULT_HOSTNAME`.
    
    You may disable mDNS support by setting `RESOLV_CONF_SUPPORTS_MDNS` to
    `0`.
    
    ---------------------------------
    
    core/net/resolv: `resolv_lookup2()` -> `resolv_lookup()`
    
    Note that this patch should fix several `resolv_lookup()` bugs
    that already existed. There were many cases where `resolv_lookup()`
    was being called and the IP address ignored, but later code
    assumed that the IP address had been fetched... ANYWAY, those
    should be fixed now.
    
    ---------------------------------
    
    examples/udp-ipv6: Updated client to use MDNS to lookup the server.
    
    Also updated the Cooja regression test simulation.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updated API for uiplib and resolv to use uip_ipaddr_t instead of uint16_t for compability with IPv6
    Added an irc shell command that runs an IRC client from the shell.
    Changed the parameter 'char * data' of process_start to the
    type process_data_t. This was an artifact when the choice was
    made to use the void * type for the data parameter in processes.
    
    Changed parameter 'void * data' of process_post_synch to
    process_data_t for consistency.
    
    Checked all the uses of process_start() in contiki and fixed casts
    of the data parameter.
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Remove old neighbor.h inclusion
    Avoid alignment problems by copying the crc from the header field into a local variable
    Made sure netcmds are null-terminated
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Replaced NETSIM macro with general (and now actually working) solution in Makefile.include.
    Moved all rime channel definitions to the shell-rime.h file
    Add a CRC checksum to all netcmd packets to ensure that they are valid, even if they are running on top of a radio link with bit errors
    Send one extra byte to ensure that the terminating zero is included
    Refactored netcmd command code that was broken out from shell-rime.c
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Refactored the power commands out from the sky-specific shell commands into its own module. Also added compower idle consumption in the energy and power reports.
    added voltage value in sky-shell sense and senseconv command
    Added a 'nodeid' command for setting and retreiving the node ID from the external flash. Made the powergraph command optional to save code space.
    Flush energy estimates before reading them
    Added a separate file for CFS Coffee-specific commands
    Fixed compiled warnings
    Added a 'format' command that formats a CFS Coffee flash file system
    Changed name of the simple-cc2420 module to cc2420: changed all function names and variable names from simple_cc2420_* to cc2420_*.
    Changed filename of the CC2420 driver from simple-cc2420 to cc2420.
    Fixed help text on rfchannel command
    Added 'graphical' (ASCII-graphics) power display
    Better looking senseconv output
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    core/net/resolv: IPv6 and mDNS ("Bonjour") support. Major refactor.
    
    This patch updates the DNS resolver to support IPv6 and introduces an
    improved API for looking up DNS entries. This patch also adds optional
    support for mDNS lookups and responses to the DNS resolver.
    
    Here is a quick summary of the changes:
    
     * Added support for IPv6 lookups.
     * DNS queries now honor record expiration.
     * Added support for mDNS, compatible with "Bonjour".
     * Implemented a new lookup api, `resolv_lookup2()`, which provides
       more information about the state of the record(error, expired,
       looking-up, etc.).
    
    About mDNS/Bonjour Support
    --------------------------
    
    This patch adds basic support for mDNS/Bonjour, which allows you to
    refer to the name of a device instead of its IP address. This is
    incredibly convenient for IPv6 addresses because they tend to be very
    long and difficult to remember. It is especially important for
    link-local IPv6 addresses, since not all programs support the '%'
    notation for indicating a network interface (required on systems with
    more than one network interface to disambiguate).
    
    In other words, instead of typing in this:
    
     * `http://[fe80::58dc:d7ed:a644:628f%en1]/`
    
    You can type this instead:
    
     * `http://contiki.local/`
    
    Huge improvement, no?
    
    The convenience extends beyond that: this mechanism can be used for
    nodes to talk to each other based on their human-readable names instead
    of their IPv6 addresses. So instead of a switch on
    `aaaa::58dc:d7ed:a644:628f` triggering an actuator on
    `aaaa::ed26:19c1:4bd2:f95b`, `light-switch.local` can trigger the
    actuator on `living-room-lights.local`.
    
    What you need to do to be able to look up `.local` names on your
    workstation depends on a few factors:
    
     * Your machine needs to be able to send and receive multicast packets
       to and from the LoWPAN. You can do this easily with the Jackdaw
       firmware on an RZUSBStick. If you have a border router, you will need
       it to bridge the mDNS multicast packets across the border.
    
     * If you are using a Mac, you win. All Apple devices support mDNS
       lookups.
    
     * If you are using Windows, you can install Apple's Bonjour for Windows
       package. (This may be already installed on your machine if you have
       installed iTunes) After you install this you can easily do `.local`
       lookups.
    
     * If you are using a Unix machine, you can install Avahi.
    
    The default hostname is set to `contiki.local.`. You can change the
    hostname programmatically by calling `resolv_set_hostname()`. You can
    change the default hostname by changing `CONTIKI_CONF_DEFAULT_HOSTNAME`.
    
    You may disable mDNS support by setting `RESOLV_CONF_SUPPORTS_MDNS` to
    `0`.
    
    ---------------------------------
    
    core/net/resolv: `resolv_lookup2()` -> `resolv_lookup()`
    
    Note that this patch should fix several `resolv_lookup()` bugs
    that already existed. There were many cases where `resolv_lookup()`
    was being called and the IP address ignored, but later code
    assumed that the IP address had been fetched... ANYWAY, those
    should be fixed now.
    
    ---------------------------------
    
    examples/udp-ipv6: Updated client to use MDNS to lookup the server.
    
    Also updated the Cooja regression test simulation.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    Updated API for uiplib and resolv to use uip_ipaddr_t instead of uint16_t for compability with IPv6
    Fix types to make cc65 happy
    Removed NULL pointer to make sdcc happy
    Fixed compilation problems, added new commands to shell.h
    Added three commands for IP interaction in the shell: ping (sends ICMP ping messages), tcpsend (sets up TCP connections for sending and receiving data), and udpsend (sends and receives UDP packets)
    Added an irc shell command that runs an IRC client from the shell.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added the number of hop-by-hop retransmissions to the 'send' command
    Added missing Rime channel for the runicast debug command
    netperf: a new small shell command that measures the communication
    performance between two local (single-hop) nodes. It sends packets
    over both broadcast and unicast, both in one direction and in both, as
    well as tested the stream mode of the underlying MAC protocol.
    Added new shell commands
    two new shell commands: download and sendcmd
    Moved all rime channel definitions to the shell-rime.h file
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added a powertrace command as an interface to the powertrace app
    Added an irc shell command that runs an IRC client from the shell.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Broke out the base64 commands from the text module
    Added an irc shell command that runs an IRC client from the shell.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted scope-local variables into function-local variables.
    The 6502-specific LC implementation doesn't allow for scope-local vaiables between PT_BEGIN/PROCESS_BEGIN/PSOCK_BEGIN and PT_BEGIN/PROCESS_END/PSOCK_END.
    Printout power data as well
    Replaced NETSIM macro with general (and now actually working) solution in Makefile.include.
    Remove unguarded printf()
    Moved all rime channel definitions to the shell-rime.h file
    Added netsim output
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added three commands for IP interaction in the shell: ping (sends ICMP ping messages), tcpsend (sets up TCP connections for sending and receiving data), and udpsend (sends and receives UDP packets)
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added httpd command that sets up a local web server, reading files from the CFS file system
    Guard against NULL input, remove unguarded printf()
    Broke out serial-shell from the shell app into its own app. Project can use the serial-shell to get a shell running over the serial line, just like a project can use the telnetd to get a shell running over Telnet/TCP/IP.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Updated to new radio_driver API
    tr1001 init fix
    Added radio sniffer program
    More uip_ipaddr_t fixes.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted scope-local variables into function-local variables.
    The 6502-specific LC implementation doesn't allow for scope-local vaiables between PT_BEGIN/PROCESS_BEGIN/PSOCK_BEGIN and PT_BEGIN/PROCESS_END/PSOCK_END.
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    Remove unguarded printf()
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Broke out the base64 commands from the text module
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Broke out the 'neighbor' command functionality from the shell-rime.c file; reimplemented it to use the announcemnet primitive instead
    Added a separate file for CFS Coffee-specific commands
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    two new shell commands: download and sendcmd
    added experimental checkpointing functionality:
    currently only implemented on the sky platform
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Updated to new radio_driver API
    tr1001 init fix
    Added radio sniffer program
    More uip_ipaddr_t fixes.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Broke out serial-shell from the shell app into its own app. Project can use the serial-shell to get a shell running over the serial line, just like a project can use the telnetd to get a shell running over Telnet/TCP/IP.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Added radio sniffer program
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Precision (printf("%.Ns", text1)) not supported by all compilers, for example some versions of avrgcc and mspgcc.
    Minor tweaks based on maniacbug commits.
    Bugfix: removed extreanous asterix character
    avr-libc %.*s workaround
    some trivial change
    Some Telnet server enhancements:
    - PETSCII sending support
    - Option to customize shell prompt and banner
    - Stop all running commands on shell close
    - New 'exit' and 'quit' commands to close shell
    Changed the name of the 'serial' module to 'serial-line' to signify that the module is about lines of data from the serial port, not individual bytes, and to make sdcc happy
    Minor documentation update
    Added cr/nl to end of prompt to make scripting easier
    Guard against NULL input, remove unguarded printf()
    Broke out serial-shell from the shell app into its own app. Project can use the serial-shell to get a shell running over the serial line, just like a project can use the telnetd to get a shell running over Telnet/TCP/IP.
    Rewrite of the old Contiki shell. The new shell supports dynamic
    insertion of new commands and command pipelining. There are also a
    bunch of new commands for network access (using Rime): ping, data
    collection, packet sniffing, sending shell commands across the
    network, and testing the single-hop throughput to neighboring
    nodes. Commands are also available for reading from and writing to
    files, reading the sensors (on the Tmote Sky platform), and accessing
    the power and energy consumption of the system. Dynamic loading of
    programs across the network is also possible, although a little
    untested at the moment.
    Updated to new radio_driver API
    tr1001 init fix
    Added radio sniffer program
    More uip_ipaddr_t fixes.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fixed erroneous character
    Broke out serial-shell from the shell app into its own app. Project can use the serial-shell to get a shell running over the serial line, just like a project can use the telnetd to get a shell running over Telnet/TCP/IP.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Reorganized web page attribute data handling.
    
    - Up to now the web browser used several fixed size arrays to hold the various types attribute data of the web page. This turned out to be way to inflexible for any non-trivial web page. Therefore now all attribute data is stored in a single buffer one after the other as they arrive from the parser only occupying the memory actually needed. This allows for pages with many links with rather short URLs as well as pages with few link with long URLs as well as pages with several simple forms as well as pages with one form with many form inputs.
    
    - Using the actual web page buffer to hold the text buffers of text entry fields was in general a cool idea but in reality it  is often necessary to enter text longer than the size of the text entry field. Therefore the text buffer is now stored in the new unified attribute data buffer.
    
    - Splitting up the process of canonicalizing a link URL and actually navigating to the resulting URL allowed to get rid of the 'tmpurl' buffer used during form submit. Now the form action is canonicalized like a usual link, then the form input name/value pairs are written right into the 'url' buffer and afterwards the navigation is triggered.
    
    - Support for the 'render states' was completely removed. The only actually supported render state was centered output. The new unified attribute buffer would have complicated enumerating all widgets added to the page in order to adjust their position. Therefore I decided to drop the whole feature as the <center> tag is barely used anymore and newer center attributes are to hard to parse.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Reduce the default number of pagewidgets to make file compile out-of-the-box on MSP430
    Provided webbrowser configuration defaults.
    Removed obsolete declaration and added PROCESS_NAME().
    Import of the contiki-2.x development code from the SICS internal CVS server
    Limit content of web browser version of http-strings to web browser.
    
    In general it seems a bad idea to have two http-strings.c files as this precludes to have them both in the Contiki library. However as it stands it seems most reasonable to have one http-strings.c file be a clean superset of all usecases in order to allow them to run together in a single binary. As webserver/http-strings.c already contained strings not present in webbrowser/http-strings.c it seems reasonable to consider webserver/http-strings.c as the superset described. From that perspective it is appropriate to remove all strings from webbrowser/http-strings.c which are not used by the web browser in order to save memory otherwise wasted.
    Lifted restrictions on accepted MIME type.
    
    The "normal" web is moving forward quickly reducing the interoperability of the Contiki web browser to nearly zero. The Mobile Web fits the capabilities of the Contiki web browser much better. Modern smartphones don't need the Mobile Web anymore but there are large areas in world with rather low end mobile phones and limited mobile bandwidth where the Mobile Web will be necessary for quite some time.
    
    From that perspective it is reasonable to increase the Contiki web browser's interoperability with the Mobie Web - namely WAP 2.0 aka XHTML MP. XHTML MP is delivered as MIME types 'application/vnd.wap.xhtml+xml' or 'application/xhtml+xml'. Therefore we (try to) parse the document if the MIME type contains the substring 'html' (which is true 'text/html' too).
    Bumped version number
    Update to Contiki version number 2.4
    Updated version number in server and user agent strings
    Import of the contiki-2.x development code from the SICS internal CVS server
    Added support for <input type='hidden'>.
    
    Hidden form fields are aded to the page attribute buffer like text form fields so there's no need for special treatment in formsubmit(). However they are not added as widgets to the window so there's no user interaction.
    Reorganized web page attribute data handling.
    
    - Up to now the web browser used several fixed size arrays to hold the various types attribute data of the web page. This turned out to be way to inflexible for any non-trivial web page. Therefore now all attribute data is stored in a single buffer one after the other as they arrive from the parser only occupying the memory actually needed. This allows for pages with many links with rather short URLs as well as pages with few link with long URLs as well as pages with several simple forms as well as pages with one form with many form inputs.
    
    - Using the actual web page buffer to hold the text buffers of text entry fields was in general a cool idea but in reality it  is often necessary to enter text longer than the size of the text entry field. Therefore the text buffer is now stored in the new unified attribute data buffer.
    
    - Splitting up the process of canonicalizing a link URL and actually navigating to the resulting URL allowed to get rid of the 'tmpurl' buffer used during form submit. Now the form action is canonicalized like a usual link, then the form input name/value pairs are written right into the 'url' buffer and afterwards the navigation is triggered.
    
    - Support for the 'render states' was completely removed. The only actually supported render state was centered output. The new unified attribute buffer would have complicated enumerating all widgets added to the page in order to adjust their position. Therefore I decided to drop the whole feature as the <center> tag is barely used anymore and newer center attributes are to hard to parse.
    Added newline on </div>.
    
    The tag <div> (in contrast to the tag <span>) is normally used to denote content placed on a line by its own. So it makes sense to trigger a newline when </div> is processed.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Added support for <input type='hidden'>.
    
    Hidden form fields are aded to the page attribute buffer like text form fields so there's no need for special treatment in formsubmit(). However they are not added as widgets to the window so there's no user interaction.
    Reorganized web page attribute data handling.
    
    - Up to now the web browser used several fixed size arrays to hold the various types attribute data of the web page. This turned out to be way to inflexible for any non-trivial web page. Therefore now all attribute data is stored in a single buffer one after the other as they arrive from the parser only occupying the memory actually needed. This allows for pages with many links with rather short URLs as well as pages with few link with long URLs as well as pages with several simple forms as well as pages with one form with many form inputs.
    
    - Using the actual web page buffer to hold the text buffers of text entry fields was in general a cool idea but in reality it  is often necessary to enter text longer than the size of the text entry field. Therefore the text buffer is now stored in the new unified attribute data buffer.
    
    - Splitting up the process of canonicalizing a link URL and actually navigating to the resulting URL allowed to get rid of the 'tmpurl' buffer used during form submit. Now the form action is canonicalized like a usual link, then the form input name/value pairs are written right into the 'url' buffer and afterwards the navigation is triggered.
    
    - Support for the 'render states' was completely removed. The only actually supported render state was centered output. The new unified attribute buffer would have complicated enumerating all widgets added to the page in order to adjust their position. Therefore I decided to drop the whole feature as the <center> tag is barely used anymore and newer center attributes are to hard to parse.
    Added newline on </div>.
    
    The tag <div> (in contrast to the tag <span>) is normally used to denote content placed on a line by its own. So it makes sense to trigger a newline when </div> is processed.
    Import of the contiki-2.x development code from the SICS internal CVS server
    core/net/resolv: IPv6 and mDNS ("Bonjour") support. Major refactor.
    
    This patch updates the DNS resolver to support IPv6 and introduces an
    improved API for looking up DNS entries. This patch also adds optional
    support for mDNS lookups and responses to the DNS resolver.
    
    Here is a quick summary of the changes:
    
     * Added support for IPv6 lookups.
     * DNS queries now honor record expiration.
     * Added support for mDNS, compatible with "Bonjour".
     * Implemented a new lookup api, `resolv_lookup2()`, which provides
       more information about the state of the record(error, expired,
       looking-up, etc.).
    
    About mDNS/Bonjour Support
    --------------------------
    
    This patch adds basic support for mDNS/Bonjour, which allows you to
    refer to the name of a device instead of its IP address. This is
    incredibly convenient for IPv6 addresses because they tend to be very
    long and difficult to remember. It is especially important for
    link-local IPv6 addresses, since not all programs support the '%'
    notation for indicating a network interface (required on systems with
    more than one network interface to disambiguate).
    
    In other words, instead of typing in this:
    
     * `http://[fe80::58dc:d7ed:a644:628f%en1]/`
    
    You can type this instead:
    
     * `http://contiki.local/`
    
    Huge improvement, no?
    
    The convenience extends beyond that: this mechanism can be used for
    nodes to talk to each other based on their human-readable names instead
    of their IPv6 addresses. So instead of a switch on
    `aaaa::58dc:d7ed:a644:628f` triggering an actuator on
    `aaaa::ed26:19c1:4bd2:f95b`, `light-switch.local` can trigger the
    actuator on `living-room-lights.local`.
    
    What you need to do to be able to look up `.local` names on your
    workstation depends on a few factors:
    
     * Your machine needs to be able to send and receive multicast packets
       to and from the LoWPAN. You can do this easily with the Jackdaw
       firmware on an RZUSBStick. If you have a border router, you will need
       it to bridge the mDNS multicast packets across the border.
    
     * If you are using a Mac, you win. All Apple devices support mDNS
       lookups.
    
     * If you are using Windows, you can install Apple's Bonjour for Windows
       package. (This may be already installed on your machine if you have
       installed iTunes) After you install this you can easily do `.local`
       lookups.
    
     * If you are using a Unix machine, you can install Avahi.
    
    The default hostname is set to `contiki.local.`. You can change the
    hostname programmatically by calling `resolv_set_hostname()`. You can
    change the default hostname by changing `CONTIKI_CONF_DEFAULT_HOSTNAME`.
    
    You may disable mDNS support by setting `RESOLV_CONF_SUPPORTS_MDNS` to
    `0`.
    
    ---------------------------------
    
    core/net/resolv: `resolv_lookup2()` -> `resolv_lookup()`
    
    Note that this patch should fix several `resolv_lookup()` bugs
    that already existed. There were many cases where `resolv_lookup()`
    was being called and the IP address ignored, but later code
    assumed that the IP address had been fetched... ANYWAY, those
    should be fixed now.
    
    ---------------------------------
    
    examples/udp-ipv6: Updated client to use MDNS to lookup the server.
    
    Also updated the Cooja regression test simulation.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Made arguments const to allow constant strings as arguments
    Updated API for uiplib and resolv to use uip_ipaddr_t instead of uint16_t for compability with IPv6
    Allow to build the web browser without DNS support - like i.e. the email client and the IRC client.
    Removed unused variable (and some whitespaces).
    Bugfix: the web client previously implicitly depended on uip_buf to be larger than an HTTP GET request. This made the web client fail when uip_buf was smaller, and lead to memory corruption. Also, there was a bug when HTTP request headers would arrive when the GET request was being sent out.
    Made webbrowser configuration defaults visible.
    Removed compiler warnings.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Avoid compiler warnings.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    *-dsc.c files have been changed to remove forward reference for struct_icon variable, bacause it is strange that this variable is used wholly inside the C source file and declared extern for the forward reference.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Bumped the version number from 2.6 to 3.x, which is to be used in the development branch
    Bumped version number
    Updated version number in server and user agent strings
    Added support for <input type='hidden'>.
    
    Hidden form fields are aded to the page attribute buffer like text form fields so there's no need for special treatment in formsubmit(). However they are not added as widgets to the window so there's no user interaction.
    Reorganized web page attribute data handling.
    
    - Up to now the web browser used several fixed size arrays to hold the various types attribute data of the web page. This turned out to be way to inflexible for any non-trivial web page. Therefore now all attribute data is stored in a single buffer one after the other as they arrive from the parser only occupying the memory actually needed. This allows for pages with many links with rather short URLs as well as pages with few link with long URLs as well as pages with several simple forms as well as pages with one form with many form inputs.
    
    - Using the actual web page buffer to hold the text buffers of text entry fields was in general a cool idea but in reality it  is often necessary to enter text longer than the size of the text entry field. Therefore the text buffer is now stored in the new unified attribute data buffer.
    
    - Splitting up the process of canonicalizing a link URL and actually navigating to the resulting URL allowed to get rid of the 'tmpurl' buffer used during form submit. Now the form action is canonicalized like a usual link, then the form input name/value pairs are written right into the 'url' buffer and afterwards the navigation is triggered.
    
    - Support for the 'render states' was completely removed. The only actually supported render state was centered output. The new unified attribute buffer would have complicated enumerating all widgets added to the page in order to adjust their position. Therefore I decided to drop the whole feature as the <center> tag is barely used anymore and newer center attributes are to hard to parse.
    Added newline on </div>.
    
    The tag <div> (in contrast to the tag <span>) is normally used to denote content placed on a line by its own. So it makes sense to trigger a newline when </div> is processed.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Limit content of web browser version of http-strings to web browser.
    
    In general it seems a bad idea to have two http-strings.c files as this precludes to have them both in the Contiki library. However as it stands it seems most reasonable to have one http-strings.c file be a clean superset of all usecases in order to allow them to run together in a single binary. As webserver/http-strings.c already contained strings not present in webbrowser/http-strings.c it seems reasonable to consider webserver/http-strings.c as the superset described. From that perspective it is appropriate to remove all strings from webbrowser/http-strings.c which are not used by the web browser in order to save memory otherwise wasted.
    Lifted restrictions on accepted MIME type.
    
    The "normal" web is moving forward quickly reducing the interoperability of the Contiki web browser to nearly zero. The Mobile Web fits the capabilities of the Contiki web browser much better. Modern smartphones don't need the Mobile Web anymore but there are large areas in world with rather low end mobile phones and limited mobile bandwidth where the Mobile Web will be necessary for quite some time.
    
    From that perspective it is reasonable to increase the Contiki web browser's interoperability with the Mobie Web - namely WAP 2.0 aka XHTML MP. XHTML MP is delivered as MIME types 'application/vnd.wap.xhtml+xml' or 'application/xhtml+xml'. Therefore we (try to) parse the document if the MIME type contains the substring 'html' (which is true 'text/html' too).
    Bumped version number
    Update to Contiki version number 2.4
    Updated version number in server and user agent strings
    Import of the contiki-2.x development code from the SICS internal CVS server
    Make lists of source files for each app available individually - i.e. for creation of dynamically loadable modules.
    Added arg.c
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Added support for <input type='hidden'>.
    
    Hidden form fields are aded to the page attribute buffer like text form fields so there's no need for special treatment in formsubmit(). However they are not added as widgets to the window so there's no user interaction.
    Reorganized web page attribute data handling.
    
    - Up to now the web browser used several fixed size arrays to hold the various types attribute data of the web page. This turned out to be way to inflexible for any non-trivial web page. Therefore now all attribute data is stored in a single buffer one after the other as they arrive from the parser only occupying the memory actually needed. This allows for pages with many links with rather short URLs as well as pages with few link with long URLs as well as pages with several simple forms as well as pages with one form with many form inputs.
    
    - Using the actual web page buffer to hold the text buffers of text entry fields was in general a cool idea but in reality it  is often necessary to enter text longer than the size of the text entry field. Therefore the text buffer is now stored in the new unified attribute data buffer.
    
    - Splitting up the process of canonicalizing a link URL and actually navigating to the resulting URL allowed to get rid of the 'tmpurl' buffer used during form submit. Now the form action is canonicalized like a usual link, then the form input name/value pairs are written right into the 'url' buffer and afterwards the navigation is triggered.
    
    - Support for the 'render states' was completely removed. The only actually supported render state was centered output. The new unified attribute buffer would have complicated enumerating all widgets added to the page in order to adjust their position. Therefore I decided to drop the whole feature as the <center> tag is barely used anymore and newer center attributes are to hard to parse.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    With the change to always position the cursor at the end of the exsisting text on entering the textentry field edit state it became necessary to avoid initializing textentry fields with blanks insteads of zeros.
    
    Unfortunately I overlooked the dynamically created textentry fields for web forms. Changing their behaviour was a little more complicated as the length of the existing text was used to determine the size of the textentry field. Now this size is passed explicitly.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    Added support for <input type='hidden'>.
    
    Hidden form fields are aded to the page attribute buffer like text form fields so there's no need for special treatment in formsubmit(). However they are not added as widgets to the window so there's no user interaction.
    Reorganized web page attribute data handling.
    
    - Up to now the web browser used several fixed size arrays to hold the various types attribute data of the web page. This turned out to be way to inflexible for any non-trivial web page. Therefore now all attribute data is stored in a single buffer one after the other as they arrive from the parser only occupying the memory actually needed. This allows for pages with many links with rather short URLs as well as pages with few link with long URLs as well as pages with several simple forms as well as pages with one form with many form inputs.
    
    - Using the actual web page buffer to hold the text buffers of text entry fields was in general a cool idea but in reality it  is often necessary to enter text longer than the size of the text entry field. Therefore the text buffer is now stored in the new unified attribute data buffer.
    
    - Splitting up the process of canonicalizing a link URL and actually navigating to the resulting URL allowed to get rid of the 'tmpurl' buffer used during form submit. Now the form action is canonicalized like a usual link, then the form input name/value pairs are written right into the 'url' buffer and afterwards the navigation is triggered.
    
    - Support for the 'render states' was completely removed. The only actually supported render state was centered output. The new unified attribute buffer would have complicated enumerating all widgets added to the page in order to adjust their position. Therefore I decided to drop the whole feature as the <center> tag is barely used anymore and newer center attributes are to hard to parse.
    Made sure that HTML form values get initialized properly.
    Added support for self closing tags.
    
    XHTML requires self closing tags to be used for empty tags, so we need to recognize them.
    Added newline on </div>.
    
    The tag <div> (in contrast to the tag <span>) is normally used to denote content placed on a line by its own. So it makes sense to trigger a newline when </div> is processed.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    Made webbrowser configuration defaults visible.
    Removed compiler warning.
    Changed the maximum length of a single word from 40 to match the page width. Browsers wider than 40 cols can now render longer words. Browsers smaller than 40 cols avoid display inconsistencies on long words (and save memory). Additionally simplified word truncation code.
    Discard word right in fromt of </script>, </style> and </select>.
    Removed now unused var.
    With the change to always position the cursor at the end of the exsisting text on entering the textentry field edit state it became necessary to avoid initializing textentry fields with blanks insteads of zeros.
    
    Unfortunately I overlooked the dynamically created textentry fields for web forms. Changing their behaviour was a little more complicated as the length of the existing text was used to determine the size of the textentry field. Now this size is passed explicitly.
    Avoid compiler warnings.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Limit content of web browser version of http-strings to web browser.
    
    In general it seems a bad idea to have two http-strings.c files as this precludes to have them both in the Contiki library. However as it stands it seems most reasonable to have one http-strings.c file be a clean superset of all usecases in order to allow them to run together in a single binary. As webserver/http-strings.c already contained strings not present in webbrowser/http-strings.c it seems reasonable to consider webserver/http-strings.c as the superset described. From that perspective it is appropriate to remove all strings from webbrowser/http-strings.c which are not used by the web browser in order to save memory otherwise wasted.
    Lifted restrictions on accepted MIME type.
    
    The "normal" web is moving forward quickly reducing the interoperability of the Contiki web browser to nearly zero. The Mobile Web fits the capabilities of the Contiki web browser much better. Modern smartphones don't need the Mobile Web anymore but there are large areas in world with rather low end mobile phones and limited mobile bandwidth where the Mobile Web will be necessary for quite some time.
    
    From that perspective it is reasonable to increase the Contiki web browser's interoperability with the Mobie Web - namely WAP 2.0 aka XHTML MP. XHTML MP is delivered as MIME types 'application/vnd.wap.xhtml+xml' or 'application/xhtml+xml'. Therefore we (try to) parse the document if the MIME type contains the substring 'html' (which is true 'text/html' too).
    Bumped version number
    Update to Contiki version number 2.4
    Updated version number in server and user agent strings
    Import of the contiki-2.x development code from the SICS internal CVS server
    Avoid compiler warnings.
    Moved the ctk files from core/lib into core/lib/ and core/lib/libconio
    Added more flexibility to webbrowser -> wget forwarding.
    
    - Up to now the CTK program handler was necessary to start wget and forward the URL. Now alternatively the webbrowser uses the underlying OS to exec wget.
    
    - Up to now windowed CTK was necessary to display the acknowledge dialog. Now alternatively the webbrowser displays the acknowledge text and buttons right in the webpage area.
    
    - For now the targets 'win32' and 'c64' make use of the new capabilities.
    Minor code style fix
    Added support for <input type='hidden'>.
    
    Hidden form fields are aded to the page attribute buffer like text form fields so there's no need for special treatment in formsubmit(). However they are not added as widgets to the window so there's no user interaction.
    core/net/resolv: IPv6 and mDNS ("Bonjour") support. Major refactor.
    
    This patch updates the DNS resolver to support IPv6 and introduces an
    improved API for looking up DNS entries. This patch also adds optional
    support for mDNS lookups and responses to the DNS resolver.
    
    Here is a quick summary of the changes:
    
     * Added support for IPv6 lookups.
     * DNS queries now honor record expiration.
     * Added support for mDNS, compatible with "Bonjour".
     * Implemented a new lookup api, `resolv_lookup2()`, which provides
       more information about the state of the record(error, expired,
       looking-up, etc.).
    
    About mDNS/Bonjour Support
    --------------------------
    
    This patch adds basic support for mDNS/Bonjour, which allows you to
    refer to the name of a device instead of its IP address. This is
    incredibly convenient for IPv6 addresses because they tend to be very
    long and difficult to remember. It is especially important for
    link-local IPv6 addresses, since not all programs support the '%'
    notation for indicating a network interface (required on systems with
    more than one network interface to disambiguate).
    
    In other words, instead of typing in this:
    
     * `http://[fe80::58dc:d7ed:a644:628f%en1]/`
    
    You can type this instead:
    
     * `http://contiki.local/`
    
    Huge improvement, no?
    
    The convenience extends beyond that: this mechanism can be used for
    nodes to talk to each other based on their human-readable names instead
    of their IPv6 addresses. So instead of a switch on
    `aaaa::58dc:d7ed:a644:628f` triggering an actuator on
    `aaaa::ed26:19c1:4bd2:f95b`, `light-switch.local` can trigger the
    actuator on `living-room-lights.local`.
    
    What you need to do to be able to look up `.local` names on your
    workstation depends on a few factors:
    
     * Your machine needs to be able to send and receive multicast packets
       to and from the LoWPAN. You can do this easily with the Jackdaw
       firmware on an RZUSBStick. If you have a border router, you will need
       it to bridge the mDNS multicast packets across the border.
    
     * If you are using a Mac, you win. All Apple devices support mDNS
       lookups.
    
     * If you are using Windows, you can install Apple's Bonjour for Windows
       package. (This may be already installed on your machine if you have
       installed iTunes) After you install this you can easily do `.local`
       lookups.
    
     * If you are using a Unix machine, you can install Avahi.
    
    The default hostname is set to `contiki.local.`. You can change the
    hostname programmatically by calling `resolv_set_hostname()`. You can
    change the default hostname by changing `CONTIKI_CONF_DEFAULT_HOSTNAME`.
    
    You may disable mDNS support by setting `RESOLV_CONF_SUPPORTS_MDNS` to
    `0`.
    
    ---------------------------------
    
    core/net/resolv: `resolv_lookup2()` -> `resolv_lookup()`
    
    Note that this patch should fix several `resolv_lookup()` bugs
    that already existed. There were many cases where `resolv_lookup()`
    was being called and the IP address ignored, but later code
    assumed that the IP address had been fetched... ANYWAY, those
    should be fixed now.
    
    ---------------------------------
    
    examples/udp-ipv6: Updated client to use MDNS to lookup the server.
    
    Also updated the Cooja regression test simulation.
    Reorganized web page attribute data handling.
    
    - Up to now the web browser used several fixed size arrays to hold the various types attribute data of the web page. This turned out to be way to inflexible for any non-trivial web page. Therefore now all attribute data is stored in a single buffer one after the other as they arrive from the parser only occupying the memory actually needed. This allows for pages with many links with rather short URLs as well as pages with few link with long URLs as well as pages with several simple forms as well as pages with one form with many form inputs.
    
    - Using the actual web page buffer to hold the text buffers of text entry fields was in general a cool idea but in reality it  is often necessary to enter text longer than the size of the text entry field. Therefore the text buffer is now stored in the new unified attribute data buffer.
    
    - Splitting up the process of canonicalizing a link URL and actually navigating to the resulting URL allowed to get rid of the 'tmpurl' buffer used during form submit. Now the form action is canonicalized like a usual link, then the form input name/value pairs are written right into the 'url' buffer and afterwards the navigation is triggered.
    
    - Support for the 'render states' was completely removed. The only actually supported render state was centered output. The new unified attribute buffer would have complicated enumerating all widgets added to the page in order to adjust their position. Therefore I decided to drop the whole feature as the <center> tag is barely used anymore and newer center attributes are to hard to parse.
    Lifted restrictions on accepted MIME type.
    
    The "normal" web is moving forward quickly reducing the interoperability of the Contiki web browser to nearly zero. The Mobile Web fits the capabilities of the Contiki web browser much better. Modern smartphones don't need the Mobile Web anymore but there are large areas in world with rather low end mobile phones and limited mobile bandwidth where the Mobile Web will be necessary for quite some time.
    
    From that perspective it is reasonable to increase the Contiki web browser's interoperability with the Mobie Web - namely WAP 2.0 aka XHTML MP. XHTML MP is delivered as MIME types 'application/vnd.wap.xhtml+xml' or 'application/xhtml+xml'. Therefore we (try to) parse the document if the MIME type contains the substring 'html' (which is true 'text/html' too).
    Harmonized ststus texts and and added status on wrong MIME type.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    Converting the last screen line from ASCII to PETSCII as it was done up to now almost never makes sense. Either the conent to be converted is not the last screen line or the last screen line was already converted (and is incorrectly converted back). Therefore now only a partial line not already converted before gets converted.
    Updated API for uiplib and resolv to use uip_ipaddr_t instead of uint16_t for compability with IPv6
    Allow to build the webbrowser without history support - by setting WWW_CONF_HISTORY_SIZE to 0.
    Allow to build the web browser without DNS support - like i.e. the email client and the IRC client.
    #include ctk-textentry-cmdline.h, plus a bunch of whitespace removed
    Removed SELFSTART_PROCESS as AUTOSTART_ENABLE generally serves that purpose - and AUTOSTART_ENABLE gets already set as required :-)
    Allow to optionally (triggered with SELFSTART_PROCESS) self start the application.
    Don't depend on program handler if building without wget support.
    Introduced WWW_CONF_WITH_WGET to make the "URL forwarding" to wget.prg optional (and minor formatting changes).
    Removed compiler warnings.
    Removed inconsistent source formatting.
    With the change to always position the cursor at the end of the exsisting text on entering the textentry field edit state it became necessary to avoid initializing textentry fields with blanks insteads of zeros.
    
    Unfortunately I overlooked the dynamically created textentry fields for web forms. Changing their behaviour was a little more complicated as the length of the existing text was used to determine the size of the textentry field. Now this size is passed explicitly.
    Avoid compiler warnings.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Bumped version number
    Updated version number in server and user agent strings
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    Made arguments const to allow constant strings as arguments
    Import of the contiki-2.x development code from the SICS internal CVS server
    Bumped the version number from 2.6 to 3.x, which is to be used in the development branch
    Bumped version number
    Updated version number in server and user agent strings
    Import of the contiki-2.x development code from the SICS internal CVS server
    Publishing Antelope - a DBMS for sensor devices. For details, see A Database in Every Sensor, N. Tsiftes and A. Dunkels, in Proceedings of ACM SenSys 2011.
    Made driver less platform-dependent and added support for msb-430.
    Make it possible to subscribe to DMA events.
    Improvement batch.
    dma transfer support.
    Platform-specific devices.
    cooja radio driver (uip + rime)
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    Publishing Antelope - a DBMS for sensor devices. For details, see A Database in Every Sensor, N. Tsiftes and A. Dunkels, in Proceedings of ACM SenSys 2011.
    Updated include paths for the moved files under net/
    Use variable-length arrays instead of alloca.
    Publishing Antelope - a DBMS for sensor devices. For details, see A Database in Every Sensor, N. Tsiftes and A. Dunkels, in Proceedings of ACM SenSys 2011.
    Updated include paths for the moved files under net/
    New attribute must be put into storage.
    Publishing Antelope - a DBMS for sensor devices. For details, see A Database in Every Sensor, N. Tsiftes and A. Dunkels, in Proceedings of ACM SenSys 2011.
    The keyword structure can be constant.
    Publishing Antelope - a DBMS for sensor devices. For details, see A Database in Every Sensor, N. Tsiftes and A. Dunkels, in Proceedings of ACM SenSys 2011.
    Updated include paths for the moved files under net/
    Publishing Antelope - a DBMS for sensor devices. For details, see A Database in Every Sensor, N. Tsiftes and A. Dunkels, in Proceedings of ACM SenSys 2011.
    Publishing Antelope - a DBMS for sensor devices. For details, see A Database in Every Sensor, N. Tsiftes and A. Dunkels, in Proceedings of ACM SenSys 2011.
    Publishing Antelope - a DBMS for sensor devices. For details, see A Database in Every Sensor, N. Tsiftes and A. Dunkels, in Proceedings of ACM SenSys 2011.
    Made driver less platform-dependent and added support for msb-430.
    Make it possible to subscribe to DMA events.
    Improvement batch.
    dma transfer support.
    Platform-specific devices.
    cooja radio driver (uip + rime)
    A 'null' MAC protocol that does not do anything
    Documentation updates
    Removed redundant initialization
    Make consistent presumptions about inlcude paths.
    Remade the rimeaddr_t u16 to be an array rather than a scalar
    Added a new type for all addresses in Rime: rimeaddr_t. This is an abstract type that currently is defined as a 16-bit quantity but that most likely will be redefined in the future
    Import of the contiki-2.x development code from the SICS internal CVS server
    Updated include paths for the moved files under net/
    Publishing Antelope - a DBMS for sensor devices. For details, see A Database in Every Sensor, N. Tsiftes and A. Dunkels, in Proceedings of ACM SenSys 2011.
    Avoid compilation warnings in Antelope.
    Publishing Antelope - a DBMS for sensor devices. For details, see A Database in Every Sensor, N. Tsiftes and A. Dunkels, in Proceedings of ACM SenSys 2011.
    Updated include paths for the moved files under net/
    Added some comments about Antelope and Coffee.
    Publishing Antelope - a DBMS for sensor devices. For details, see A Database in Every Sensor, N. Tsiftes and A. Dunkels, in Proceedings of ACM SenSys 2011.
    Updated include paths for the moved files under net/
    Publishing Antelope - a DBMS for sensor devices. For details, see A Database in Every Sensor, N. Tsiftes and A. Dunkels, in Proceedings of ACM SenSys 2011.
    Added some comments about Antelope and Coffee.
    Added reference.
    New attribute must be put into storage.
    Publishing Antelope - a DBMS for sensor devices. For details, see A Database in Every Sensor, N. Tsiftes and A. Dunkels, in Proceedings of ACM SenSys 2011.
    Updated include paths for the moved files under net/
    Publishing Antelope - a DBMS for sensor devices. For details, see A Database in Every Sensor, N. Tsiftes and A. Dunkels, in Proceedings of ACM SenSys 2011.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Publishing Antelope - a DBMS for sensor devices. For details, see A Database in Every Sensor, N. Tsiftes and A. Dunkels, in Proceedings of ACM SenSys 2011.
    Add PRINTA so direct calls to debug routines will always print
    Use AVR program flash for uip-debug.h printfs.
    added uip-debug utilities
    Made debug printfs optional
    A work-in-progress rework of the Contiki MAC and radio layers. The
    main ideas are:
    
    * Separates the Contiki low-layer network stack into four layers:
      network (e.g. sicslowpan / rime), Medium Access Control MAC
      (e.g. CSMA), Radio Duty Cycling RDC (e.g. ContikiMAC, X-MAC), and
      radio (e.g. cc2420).
    * Introduces a new way to configure the network stack. Four #defines
      that specify what mechanism/protocol/driver to use at the four
      layers: NETSTACK_CONF_NETWORK, NETSTACK_CONF_MAC, NETSTACK_CONF_RDC,
      NETSTACK_CONF_RADIO.
    * Adds a callback mechanism to inform the MAC and network layers about
      the fate of a transmitted packet: if the packet was not possible to
      transmit, the cause of the failure is reported, and if the packets
      was successfully transmitted, the number of tries before it was
      finally transmitted is reported.
    * NULL-protocols at both the MAC and RDC layers: nullmac and nullrdc,
      which can be used when MAC and RDC functionality is not needed.
    * Extends the radio API with three new functions that enable more
      efficient radio duty cycling protocols: channel check, pending
      packet, and receiving packet.
    * New initialization mechanism, which takes advantage of the NETSTACK
      #defines.
    Added email client example.
    Added IRC client example.
    Introduced web browser as new example using ctk fullscreen mode.
    Rime statistics gathering
    Import of the contiki-2.x development code from the SICS internal CVS server
    Publishing Antelope - a DBMS for sensor devices. For details, see A Database in Every Sensor, N. Tsiftes and A. Dunkels, in Proceedings of ACM SenSys 2011.
    Publishing Antelope - a DBMS for sensor devices. For details, see A Database in Every Sensor, N. Tsiftes and A. Dunkels, in Proceedings of ACM SenSys 2011.
    More comments + minor adjustments to the header file
    A facility for testing units of Contiki software.
    no need to initialize serial line
    minor serial test application update
    Renamed serial module to serial-line
    Changed the name of the 'serial' module to 'serial-line' to signify that the module is about lines of data from the serial port, not individual bytes, and to make sdcc happy
    removed refences to printf2log.h
    moved test applications from platform root to separate directory
    minor changes
    added cooja; 'The Contiki OS Java Simulator'
    A set of simple example programs for the ESB platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Added some comments about Antelope and Coffee.
    Removed previous language grammar. Added a parameter for the bytecode size.
    Publishing Antelope - a DBMS for sensor devices. For details, see A Database in Every Sensor, N. Tsiftes and A. Dunkels, in Proceedings of ACM SenSys 2011.
    Updated include paths for the moved files under net/
    Use variable-length arrays instead of alloca.
    Publishing Antelope - a DBMS for sensor devices. For details, see A Database in Every Sensor, N. Tsiftes and A. Dunkels, in Proceedings of ACM SenSys 2011.
    Publishing Antelope - a DBMS for sensor devices. For details, see A Database in Every Sensor, N. Tsiftes and A. Dunkels, in Proceedings of ACM SenSys 2011.
    More comments + minor adjustments to the header file
    A facility for testing units of Contiki software.
    no need to initialize serial line
    minor serial test application update
    Renamed serial module to serial-line
    Changed the name of the 'serial' module to 'serial-line' to signify that the module is about lines of data from the serial port, not individual bytes, and to make sdcc happy
    removed refences to printf2log.h
    moved test applications from platform root to separate directory
    minor changes
    added cooja; 'The Contiki OS Java Simulator'
    A set of simple example programs for the ESB platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Publishing Antelope - a DBMS for sensor devices. For details, see A Database in Every Sensor, N. Tsiftes and A. Dunkels, in Proceedings of ACM SenSys 2011.
    More comments + minor adjustments to the header file
    A facility for testing units of Contiki software.
    no need to initialize serial line
    minor serial test application update
    Renamed serial module to serial-line
    Changed the name of the 'serial' module to 'serial-line' to signify that the module is about lines of data from the serial port, not individual bytes, and to make sdcc happy
    removed refences to printf2log.h
    moved test applications from platform root to separate directory
    minor changes
    added cooja; 'The Contiki OS Java Simulator'
    A set of simple example programs for the ESB platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Added some comments about Antelope and Coffee.
    Removed previous language grammar. Added a parameter for the bytecode size.
    Publishing Antelope - a DBMS for sensor devices. For details, see A Database in Every Sensor, N. Tsiftes and A. Dunkels, in Proceedings of ACM SenSys 2011.
    Publishing Antelope - a DBMS for sensor devices. For details, see A Database in Every Sensor, N. Tsiftes and A. Dunkels, in Proceedings of ACM SenSys 2011.
    Updated include paths for the moved files under net/
    Prevent erroneous index creation for non-numerical attributes.
    Added some comments about Antelope and Coffee.
    Publishing Antelope - a DBMS for sensor devices. For details, see A Database in Every Sensor, N. Tsiftes and A. Dunkels, in Proceedings of ACM SenSys 2011.
    Publishing Antelope - a DBMS for sensor devices. For details, see A Database in Every Sensor, N. Tsiftes and A. Dunkels, in Proceedings of ACM SenSys 2011.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed unreferenced source from application makefile.
    Make lists of source files for each app available individually - i.e. for creation of dynamically loadable modules.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    *-dsc.c files have been changed to remove forward reference for struct_icon variable, bacause it is strange that this variable is used wholly inside the C source file and declared extern for the forward reference.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    Updated API for uiplib and resolv to use uip_ipaddr_t instead of uint16_t for compability with IPv6
    Made declaration match definition.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Updated API for uiplib and resolv to use uip_ipaddr_t instead of uint16_t for compability with IPv6
    Removed compiler warnings.
    Avoid compiler warnings.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added process declaration
    Import of the contiki-2.x development code from the SICS internal CVS server
    Moved the ctk files from core/lib into core/lib/ and core/lib/libconio
    core/net/resolv: IPv6 and mDNS ("Bonjour") support. Major refactor.
    
    This patch updates the DNS resolver to support IPv6 and introduces an
    improved API for looking up DNS entries. This patch also adds optional
    support for mDNS lookups and responses to the DNS resolver.
    
    Here is a quick summary of the changes:
    
     * Added support for IPv6 lookups.
     * DNS queries now honor record expiration.
     * Added support for mDNS, compatible with "Bonjour".
     * Implemented a new lookup api, `resolv_lookup2()`, which provides
       more information about the state of the record(error, expired,
       looking-up, etc.).
    
    About mDNS/Bonjour Support
    --------------------------
    
    This patch adds basic support for mDNS/Bonjour, which allows you to
    refer to the name of a device instead of its IP address. This is
    incredibly convenient for IPv6 addresses because they tend to be very
    long and difficult to remember. It is especially important for
    link-local IPv6 addresses, since not all programs support the '%'
    notation for indicating a network interface (required on systems with
    more than one network interface to disambiguate).
    
    In other words, instead of typing in this:
    
     * `http://[fe80::58dc:d7ed:a644:628f%en1]/`
    
    You can type this instead:
    
     * `http://contiki.local/`
    
    Huge improvement, no?
    
    The convenience extends beyond that: this mechanism can be used for
    nodes to talk to each other based on their human-readable names instead
    of their IPv6 addresses. So instead of a switch on
    `aaaa::58dc:d7ed:a644:628f` triggering an actuator on
    `aaaa::ed26:19c1:4bd2:f95b`, `light-switch.local` can trigger the
    actuator on `living-room-lights.local`.
    
    What you need to do to be able to look up `.local` names on your
    workstation depends on a few factors:
    
     * Your machine needs to be able to send and receive multicast packets
       to and from the LoWPAN. You can do this easily with the Jackdaw
       firmware on an RZUSBStick. If you have a border router, you will need
       it to bridge the mDNS multicast packets across the border.
    
     * If you are using a Mac, you win. All Apple devices support mDNS
       lookups.
    
     * If you are using Windows, you can install Apple's Bonjour for Windows
       package. (This may be already installed on your machine if you have
       installed iTunes) After you install this you can easily do `.local`
       lookups.
    
     * If you are using a Unix machine, you can install Avahi.
    
    The default hostname is set to `contiki.local.`. You can change the
    hostname programmatically by calling `resolv_set_hostname()`. You can
    change the default hostname by changing `CONTIKI_CONF_DEFAULT_HOSTNAME`.
    
    You may disable mDNS support by setting `RESOLV_CONF_SUPPORTS_MDNS` to
    `0`.
    
    ---------------------------------
    
    core/net/resolv: `resolv_lookup2()` -> `resolv_lookup()`
    
    Note that this patch should fix several `resolv_lookup()` bugs
    that already existed. There were many cases where `resolv_lookup()`
    was being called and the IP address ignored, but later code
    assumed that the IP address had been fetched... ANYWAY, those
    should be fixed now.
    
    ---------------------------------
    
    examples/udp-ipv6: Updated client to use MDNS to lookup the server.
    
    Also updated the Cooja regression test simulation.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Updated API for uiplib and resolv to use uip_ipaddr_t instead of uint16_t for compability with IPv6
    Added conversion of From field from PETSCII to ASCII (and adjusted setup window size to commented-out POP3 settings).
    Made 'Erase' button and dialog optional to make email client compatible with non-windows CTK.
    Removed SELFSTART_PROCESS as AUTOSTART_ENABLE generally serves that purpose - and AUTOSTART_ENABLE gets already set as required :-)
    Allow to optionally (triggered with SELFSTART_PROCESS) self start the application.
    Removed compiler warnings.
    Applications have been modified to support !UIP_UDP and !CTK_CONF_WINDOWCLOSE.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A facility for testing units of Contiki software.
    More comments + minor adjustments to the header file
    A facility for testing units of Contiki software.
    no need to initialize serial line
    minor serial test application update
    Renamed serial module to serial-line
    Changed the name of the 'serial' module to 'serial-line' to signify that the module is about lines of data from the serial port, not individual bytes, and to make sdcc happy
    removed refences to printf2log.h
    moved test applications from platform root to separate directory
    minor changes
    added cooja; 'The Contiki OS Java Simulator'
    A set of simple example programs for the ESB platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    A facility for testing units of Contiki software.
    Make netsim more like the esb target
    Import of the contiki-2.x development code from the SICS internal CVS server
    Do not return test execution status. The information is already available in the test object, and it becomes possible for test function to easily clean up state allocated during the test by putting such code after UNIT_TEST_END.
    Made it possible to access the results externally.
    More comments + minor adjustments to the header file
    A facility for testing units of Contiki software.
    Minor change.
    Make lists of source files for each app available individually - i.e. for creation of dynamically loadable modules.
    Import of the contiki-2.x development code from the SICS internal CVS server
    [doc] Give files a common structure by placing license first (partial)
    
    Followed by doxyen file and group tags.
    This patch is only a first attempt to make provide a clean structure,
    many more files require rework, too.
    Add missing include
    
    Fix log_message() undefined warning.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Improve consistency if WITH_LOADER_ARCH is 0.
    Removed SELFSTART_PROCESS as AUTOSTART_ENABLE generally serves that purpose - and AUTOSTART_ENABLE gets already set as required :-)
    Allow to optionally (triggered with SELFSTART_PROCESS) self start the application.
    Minimal reformatting.
    Removed compiler warning.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Allow to build telnet-server example for targets not defining CTK_CONF_MAXMENUITEMS.
    Added quit menu option.
    The program_handler_add() mechanism relied on being used after the initialization of the program_handler (and the ctk) process but before entering the event handling. In Contiki 2.x there's no such explicit process initialization anymore - and the implicit asynchronous initialization runs after program_handler_add(). Therefore the initialization of the data structures modified by program_handler_add() had to be removed from that asynchronous process initialization. Instead C-langugae global data.initialization is used.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Aligned PROCESS_NAME() position with other apps.
    Added the CCIF (Contiki Core InterFace) declarations used by the applications which are currently part of the Win32 build.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    Make lists of source files for each app available individually - i.e. for creation of dynamically loadable modules.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    *-dsc.c files have been changed to remove forward reference for struct_icon variable, bacause it is strange that this variable is used wholly inside the C source file and declared extern for the forward reference.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Use PROCESS_NAME_STRING macro to handle NO_PROCESS_NAMES
    Removed SELFSTART_PROCESS as AUTOSTART_ENABLE generally serves that purpose - and AUTOSTART_ENABLE gets already set as required :-)
    Allow to optionally (triggered with SELFSTART_PROCESS) self start the application.
    Removed the last change so that we can assume all global variables are zero-initialized.
    Initialization of string has been added, so as to strlen works appropriately while showing the textentry widget.
    Fixed recent change.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    The Contiki 2.x process entity doesn't contain a process id anymore. Therefore successive numbers are assigned dynamically to the listed processes for selection purposes.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    *-dsc.c files have been changed to remove forward reference for struct_icon variable, bacause it is strange that this variable is used wholly inside the C source file and declared extern for the forward reference.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Removed SELFSTART_PROCESS as AUTOSTART_ENABLE generally serves that purpose - and AUTOSTART_ENABLE gets already set as required :-)
    Allow to optionally (triggered with SELFSTART_PROCESS) self start the application.
    Removed compiler warnings.
    Avoid compiler warnings.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    Minor change.
    Make lists of source files for each app available individually - i.e. for creation of dynamically loadable modules.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    lookup content type only when needed
    bugfix: ptr must be preserved until psock has finished
    Add /apps/webserver-nano
    Fixed bug introduced with the 8.3 filesystem support.
    
    If we use .htm instead of .html then we should also check for .htm instead of .html when it comes to MIME type setting.
    
    Interestingly this didn't show up when testing with Internet Explorer as that one just ignores the wrong MIME type and displays the HTML page as expected.
    
    Thanks to Shane Wood for pointing out the issue!
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Made cfs-based webserver example compatible with 8.3 file systems.
    Up to now the root of the webserver filesystem was always the current directory. Now an optional file 'wwwroot.cfg' is read. If present its content is used as prefix in the conversion of http paths to local paths. This prefix may be a relative path as well as an absolute path.
    This is especially useful for the cc65-based targets as it ain't possible there to "just change into the wwwroot directory and start the webserver using its pathname".
    Set the maximum number of concurrent web server connections by default to the maximum number of concurrent TCP connections.
    Added optional URL filtering code to the CFS web server contributed by Kajtar Zsolt (and activated it by default).
    Include slash in CFS web server state field 'filename' (like in the non-CFS web server).
    Reduced code size by removing one PT_WAIT_THREAD call site.
    Added GIF support to the CFS web server (which was already present in the non-CFS web server).
    There are no query strings or alike in the CFS web server so the file extensions have to be the actual end of the requested filename.
    Reduced code size by reducing the SEND_STRING call sites.
    - Added yet another PETSCII->ASCII conversion, this time for the file name in case of a 404.
    - Use all lowercase for the 404 message to avoid another PETSCII->ASCII conversion.
    - Write logfile entries for all 404s.
    - Adjust memory buffers on the C128 to accomodate for the items above.
    Added missing argument to send_string()
    Reverted the recent addition of the directory listing: instead, a 404 is now sent to indicate that a notfound.html file is missing
    When a file was not found, and no notfound.html was found, send directory contents instead
    webserver bugfix, caused nightly wget test to fail:
    * too many timer_reset will naively increase the start-time, even though timer has not expired. use timer_restart instead
    Replaced '404.html' with 'notfound.html' as '404.html' is no valid filename for the Apple2 disk operating system ProDOS 8.
    Yet another PETSCII<->ASCII issue solved - this time it caused failure to send the right content type.
    Avoid file handle leaks.
    Avoid memory block leaks (and minor code style adjustment).
    Allow to configure the maximum number of simultaneous connections to the cfs webserver.
    Added PETSCII support.
    Increased number of simultanious connections from two to three, fixed / streamlined 404.html handling and added logging on tcp resets.
    Removed compiler warnings.
    Made the webserver cfs support build and run.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add variable update time for Ajax display. Update status.shtml with <pre> tag now used by cgi.
    Webserver-nano: Add page load times, remove workaround code for bug in arm strformat.c, correct the double count of leading zeros there.
    Fix avr progmem string accesses, add DEBUGLOGIC, configure sky defaults
    Add /apps/webserver-nano
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Send text following ? in GET to Raven LCD
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Add httpd_s* function layer and HTTPD_STRING_ATTR  for strings in different memory types
    Add static coffee file system to webserver
    All static strings to flash, add wildcard to file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Changes to raven-webserver by "David Kopf" <dak664@embarqmail.com>:
        *Fixed bug in the cgi script handling
        *Making a special check for index.html and treating it like index.shtml to
            allow a common header for all files.
        *adding robots.txt to keep google, msn, yahoo out
        *adding a nice icon through a <link rel="icon"... in the header
        *saying "not enabled" for temperature if it hasn't been initialized
    webserver app for RAVEN platform
    applications updates for uIPv6
    Allow to configure the maximum number of simultaneous connections to the cgi webserver.
    Optimzed PETSCII support.
    Include 'Referer:' in referer log message.
    Removed compiler warnings.
    Made the webserver logging follow the popular pattern of foo_???() being declared in foo.h and defined in foo.c.
    Fix for bug when script goes past the end of a file (thanks to Till Harbaum)
    Avoid compiler warnings.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Add /apps/webserver-nano
    Up to now the root of the webserver filesystem was always the current directory. Now an optional file 'wwwroot.cfg' is read. If present its content is used as prefix in the conversion of http paths to local paths. This prefix may be a relative path as well as an absolute path.
    This is especially useful for the cc65-based targets as it ain't possible there to "just change into the wwwroot directory and start the webserver using its pathname".
    Added final newline to make GCC happy.
    Added optional URL filtering code to the CFS web server contributed by Kajtar Zsolt (and activated it by default).
    Contiki program that posts messages to the Twitter microblogging service
    two new shell commands: download and sendcmd
    added experimental checkpointing functionality:
    currently only implemented on the sky platform
    Added a 'run' shell command similiar to the 'exec' command but using the high-level LOADER_LOAD() interface instead of the ELF-loader specific interface.
    refactored putchar to make it replacable
    added cooja; 'The Contiki OS Java Simulator'
    Import of the contiki-2.x development code from the SICS internal CVS server
    Fix naming issues and includes in uip-ds6-nbr.h
    Port apps, examples, platforms and tools so they use the new neighbor and route API.
    Replace reads of rimestats with RIMESTATS_GET(x)
    Rename RIMESTATS_CONF_ON to RIMESTATS_CONF_ENABLED
    Restart ajax on changed update time, remove unused variable.
    Add variable update time for Ajax display. Update status.shtml with <pre> tag now used by cgi.
    Redo html output, more options, httpd state variables to allow neighbors and routes to span tcp segments.
    Add PAGETITLE option to webserver-nano, compress status page white space.
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    Webserver-nano: Add page load times, remove workaround code for bug in arm strformat.c, correct the double count of leading zeros there.
    Add Raven battery display to status page
    atmega128rfa1 ajax power and sensor reporting, longint calculation bugfixes.
    Condense js file and hopefully convert to unix line endings. Move r.abort to stop button so IE9 can stop ajax streaming.
    Add streaming ajax page with csv text buffer
    Better formatting of webserver-nano status page
    Add ENERGEST, RIMESTATS, COMPOWER to status page
    More reliable webserver-nano build
    Use PROCESS_NAME_STRING macro to handle NO_PROCESS_NAMES
    Add /apps/webserver-nano
    Replace file, some problem with my local master line endings.
    Test web-based commit, see if it fixes the line endings.
    Keep track of sleeptime and display on status web page.
    Save  radio ontime  when webwser displays current  cpu ontime for later display of corresponding value  after possible TCP delays.
    Minor format and comment changes
    Add status page link, show correct rssi, fix indexing off array in  ipv4 builds
    Add address, neighbor, routes cgi's
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Enable radio stats in sensor cgi as default
    Add RADIOSTATS to sensors cgi
    Expose httpd-cgi  ipv6 address print to other modules
    Add httpd_s* function layer and HTTPD_STRING_ATTR  for strings in different memory types
    Add static coffee file system to webserver
    All static strings to flash, add wildcard to file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Changes to raven-webserver by "David Kopf" <dak664@embarqmail.com>:
        *Fixed bug in the cgi script handling
        *Making a special check for index.html and treating it like index.shtml to
            allow a common header for all files.
        *adding robots.txt to keep google, msn, yahoo out
        *adding a nice icon through a <link rel="icon"... in the header
        *saying "not enabled" for temperature if it hasn't been initialized
    webserver app for RAVEN platform
    applications updates for uIPv6
    Changed all sprintf() calls to snprintf() to make it useful for systems with very low buffer size
    Adjusted process display cgi to recent change in process states.
    Optimzed PETSCII support.
    Allow to find the scripts on PETSCII machines.
    Removed compiler warning.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Avoid usage of nameless unions as they are - surprisingly at least to me - not part of any C spec.
    Added center alignment to network statistic columns. Now it looks nicer and is consistent with the system processes columns.
    Updated processes script output to match HTML ;-)
    Ported processes cgi to Contiki 2.x.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Add /apps/webserver-nano
    *-dsc.c files have been changed to remove forward reference for struct_icon variable, bacause it is strange that this variable is used wholly inside the C source file and declared extern for the forward reference.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Add /apps/webserver-nano
    Reverted raven changes, which are now in the raven-webserver directory
    applications updates for uIPv6
    Import of the contiki-2.x development code from the SICS internal CVS server
    Network layer configuration: replace UIP_CONF_* with NETSTACK_CONF_WITH_*
    More reliable webserver-nano build
    Add /apps/webserver-nano
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Expose httpd-cgi  ipv6 address print to other modules
    All static strings to flash, add wildcard to file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    Removed SELFSTART_PROCESS as AUTOSTART_ENABLE generally serves that purpose - and AUTOSTART_ENABLE gets already set as required :-)
    Made the webserver logging follow the popular pattern of foo_???() being declared in foo.h and defined in foo.c.
    Direct httpd logs to the Contiki log for non-CTK scenarios.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Add /apps/webserver-nano
    Reverted raven changes, which are now in the raven-webserver directory
    applications updates for uIPv6
    Made the webserver logging follow the popular pattern of foo_???() being declared in foo.h and defined in foo.c.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Add /apps/webserver-nano
    Made the webserver logging follow the popular pattern of foo_???() being declared in foo.h and defined in foo.c.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Add /apps/webserver-nano
    Fixed recently introduced minor inconsistency.
    Made cfs-based webserver example compatible with 8.3 file systems.
    Up to now the root of the webserver filesystem was always the current directory. Now an optional file 'wwwroot.cfg' is read. If present its content is used as prefix in the conversion of http paths to local paths. This prefix may be a relative path as well as an absolute path.
    This is especially useful for the cc65-based targets as it ain't possible there to "just change into the wwwroot directory and start the webserver using its pathname".
    Added optional URL filtering code to the CFS web server contributed by Kajtar Zsolt (and activated it by default).
    makefsdata must be run with HTTPD_STRING_ADDR
    More reliable webserver-nano build
    Add /apps/webserver-nano
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    Drop unneded null byte at end of httpd-fsdata files.
    Fix avr progmem string accesses, add DEBUGLOGIC, configure sky defaults
    Add /apps/webserver-nano
    Add httpd_s* function layer and HTTPD_STRING_ATTR  for strings in different memory types
    Add static coffee file system to webserver
    All static strings to flash, add wildcard to file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    webserver app for RAVEN platform
    applications updates for uIPv6
    Adjusted source formatting Mk II ;-)
    Adjusted source formatting.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Add /apps/webserver-nano
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    Add /apps/webserver-nano
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Add /apps/webserver-nano
    Made CFS web server pathname length configurable via WEBSERVER_CONF_CFS_PATHLEN and increased default pathname length from 20 to 80 chars in order to allow to actually make use of subdirs.
    Made the webserver cfs support build and run.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add PAGETITLE option to webserver-nano, compress status page white space.
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    Drop unneded null byte at end of httpd-fsdata files.
    Add /apps/webserver-nano
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    Add /apps/webserver-nano
    Special version of web server that consumes less memory.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Add /apps/webserver-nano
    Removed SELFSTART_PROCESS as AUTOSTART_ENABLE generally serves that purpose - and AUTOSTART_ENABLE gets already set as required :-)
    Allow to optionally (triggered with SELFSTART_PROCESS) self start the application.
    Made the webserver logging follow the popular pattern of foo_???() being declared in foo.h and defined in foo.c.
    Change typedef of uip_ipaddr_t from a vector type to a union.
    
    typedef union uip_ip4addr_t {
      u16_t u16[2];
      u8_t  u8[4];
    } uip_ip4addr_t;
    
    typedef uip_ip4addr_t uip_ipaddr_t;
    
    This implies that one must consistently pass pointers to
    uip_ipaddr_t:s and not mix and match pointers with
    uip_ipaddr_t:s as was done earlier.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Add variable update time for Ajax display. Update status.shtml with <pre> tag now used by cgi.
    Redo html output, more options, httpd state variables to allow neighbors and routes to span tcp segments.
    Add PAGETITLE option to webserver-nano, compress status page white space.
    Webserver-nano: Add page load times, remove workaround code for bug in arm strformat.c, correct the double count of leading zeros there.
    atmega128rfa1 ajax power and sensor reporting, longint calculation bugfixes.
    Add streaming ajax page with csv text buffer
    More reliable webserver-nano build
    Add stk500 platform and changes suggested by Daniel Willmann
    Fix avr progmem string accesses, add DEBUGLOGIC, configure sky defaults
    Add /apps/webserver-nano
    Add /apps/webserver-nano
    Add /apps/webserver-nano
    Add /apps/webserver-nano
    Fix html compliance, use wildcard in file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Changes by "David Kopf" <dak664@embarqmail.com> to:
     -Add hit counter to index.html
     -Adding link to favicon.png
     -Fix serving of binary (image) files in avr-makefsdata file
    
    Changes by Colin O'Flynn:
     -Removed extra linebreak in tutorial-raven.txt
     -Fix to contiki-conf.h in avr-rcb platform
    Changes to raven-webserver by "David Kopf" <dak664@embarqmail.com>:
        *Fixed bug in the cgi script handling
        *Making a special check for index.html and treating it like index.shtml to
            allow a common header for all files.
        *adding robots.txt to keep google, msn, yahoo out
        *adding a nice icon through a <link rel="icon"... in the header
        *saying "not enabled" for temperature if it hasn't been initialized
    webserver app for RAVEN platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add /apps/webserver-nano
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add variable update time for Ajax display. Update status.shtml with <pre> tag now used by cgi.
    Add PAGETITLE option to webserver-nano, compress status page white space.
    Add /apps/webserver-nano
    Add RPL nodes and border router to minimal-net platform (cygwin only)
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Add status page link, show correct rssi, fix indexing off array in  ipv4 builds
    Add status web page with addresses, neighbors, routes
    Add /apps/webserver-nano
    Updated processes HTML to match script output
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add /apps/webserver-nano
    Add /apps/webserver-nano
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add /apps/webserver-nano
    Add streaming ajax page with csv text buffer
    Add /apps/webserver-nano
    Add /apps/webserver-nano
    Add /apps/webserver-nano
    Restart ajax on changed update time, remove unused variable.
    Add variable update time for Ajax display. Update status.shtml with <pre> tag now used by cgi.
    atmega128rfa1 ajax power and sensor reporting, longint calculation bugfixes.
    Condense js file and hopefully convert to unix line endings. Move r.abort to stop button so IE9 can stop ajax streaming.
    Add streaming ajax page with csv text buffer
    Add variable update time for Ajax display. Update status.shtml with <pre> tag now used by cgi.
    Condense js file and hopefully convert to unix line endings. Move r.abort to stop button so IE9 can stop ajax streaming.
    Add streaming ajax page with csv text buffer
    Add /apps/webserver-nano
    Fix html compliance, use wildcard in file-stats cgi
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Changes by "David Kopf" <dak664@embarqmail.com> to:
     -Add hit counter to index.html
     -Adding link to favicon.png
     -Fix serving of binary (image) files in avr-makefsdata file
    
    Changes by Colin O'Flynn:
     -Removed extra linebreak in tutorial-raven.txt
     -Fix to contiki-conf.h in avr-rcb platform
    Changes to raven-webserver by "David Kopf" <dak664@embarqmail.com>:
        *Fixed bug in the cgi script handling
        *Making a special check for index.html and treating it like index.shtml to
            allow a common header for all files.
        *adding robots.txt to keep google, msn, yahoo out
        *adding a nice icon through a <link rel="icon"... in the header
        *saying "not enabled" for temperature if it hasn't been initialized
    webserver app for RAVEN platform
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add /apps/webserver-nano
    Import of the contiki-2.x development code from the SICS internal CVS server
    Add /apps/webserver-nano
    Add variable update time for Ajax display. Update status.shtml with <pre> tag now used by cgi.
    Add /apps/webserver-nano
    Add RPL nodes and border router to minimal-net platform (cygwin only)
    Add avr-atmega128rfa1 platform based on Michael Hartman's board (single LED peripheral)
    Add status page link, show correct rssi, fix indexing off array in  ipv4 builds
    Add status web page with addresses, neighbors, routes
    Add /apps/webserver-nano
    Add Huginn and Muninn web content
    Moved the Raven-specific applications from the generic apps/ directory to the platform-specific platform/avr-raven/apps
    Changes to raven-webserver by "David Kopf" <dak664@embarqmail.com>:
        *Fixed bug in the cgi script handling
        *Making a special check for index.html and treating it like index.shtml to
            allow a common header for all files.
        *adding robots.txt to keep google, msn, yahoo out
        *adding a nice icon through a <link rel="icon"... in the header
        *saying "not enabled" for temperature if it hasn't been initialized
    Rename to md
    Update to markdown
    
    - Spellchecking
    - Update plain text to github markdown
    Add /apps/webserver-nano
    Add /apps/webserver-nano
    Add /apps/webserver-nano
    Add /apps/webserver-nano
    Add /apps/webserver-nano
    Add /apps/webserver-nano
    Add /apps/webserver-nano
    Add /apps/webserver-nano
    Add /apps/webserver-nano
    Add /apps/webserver-nano
    Add /apps/webserver-nano
    Add /apps/webserver-nano
    Add /apps/webserver-nano
    Add /apps/webserver-nano
    Add /apps/webserver-nano
    Add /apps/webserver-nano
    Minor change.
    Added Deluge and tests for it.
    Changed the parameter 'char * data' of process_start to the
    type process_data_t. This was an artifact when the choice was
    made to use the void * type for the data parameter in processes.
    
    Changed parameter 'void * data' of process_post_synch to
    process_data_t for consistency.
    
    Checked all the uses of process_start() in contiki and fixed casts
    of the data parameter.
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Cleanup of the node-id.h files. The node-id.h file contains
    declarations of functions for setting and getting a node ID number, a
    functionality that exists on many platforms. Since this functionality
    was not considered part of the Contiki core, each platform defined its
    own node-id.h file. This commit attempts to clean this up by
    collecting the node-id.h into a core/sys/node-id.h file that replaces
    the old node-id.h files from the platform directories.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added streaming mode for page updates. Rewrote and removed some legacy code. Improved error checks and comments.
    ctimer moved from net/rime to sys/
    Improved configuration for low-power wireless networks. Removed legacy code regarding netsim and energest. Fixed bug with state transitions, in which timers were stopped incorrectly.
    Updated for the changed Rime API
    shorten file size function by using the new CFS_SEEK_END.
    send only packets in the request set. reset the request set immediately
    after sending the packets.
    Renamed the rimebuf module to packetbuf to signal that the module is used outside of a pure Rime context (e.g., the sicslowpan code uses it).
    moved debug macros from header to source.
    switched all users of cfs_seek(x,y) to cfs_seek(x,y,CFS_SEEK_SET)
    coding style compliance.
    Added Deluge and tests for it.
    Changed the name of the rimeaddr module to linkaddr
    Moved net/rime.h to net/rime/rime.h
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Added streaming mode for page updates. Rewrote and removed some legacy code. Improved error checks and comments.
    Improved configuration for low-power wireless networks. Removed legacy code regarding netsim and energest. Fixed bug with state transitions, in which timers were stopped incorrectly.
    moved debug macros from header to source.
    removed bitfields.
    Added Deluge and tests for it.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed obsolete comment.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    uip_ipaddr_t changes fixed thanks to Marcelo Barros
    Removed old contiki-1.x-based code
    Fixed include paths
    Import of the contiki-2.x development code from the SICS internal CVS server
    Minor change.
    Make lists of source files for each app available individually - i.e. for creation of dynamically loadable modules.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    *-dsc.c files have been changed to remove forward reference for struct_icon variable, bacause it is strange that this variable is used wholly inside the C source file and declared extern for the forward reference.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Telnetd improvement: allow specifying a maximum silence time and kill the connection after that time. This is to avoid the telnet connection getting stuck forever if the connecting host reboots.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    Keep gcc 4.x from complaining about 'lvalue required as increment operand'.
    Added explicit rejection of multiple connections.
    Although a simple solution the recently introduced approach to just not listen to incoming connetions if there's already one has the downside that one doesn't know if a connection fails because the server is down or becuase there's a connection.
    Therefore now connections are always accepted but after sending a message to the user and waiting a few seconds they are closed.
    The appstate is used used in a somewhat unusual way here: The one and only "active" connection has an appstate of 0. For all other connections the appstate is initially set to 1. Then it is increased on every uIP poll until it reaches 10, which triggers the connection close. This somewhat hacky approach allows to keep track of the rejected sessions without any additional state variables and/or timers.
    Allow only one Telnet connection at a time.
    As the session state management of Telnet server is a single static variable allowing more than one connection leads to inconsistencies.
    Some Telnet server enhancements:
    - PETSCII sending support
    - Option to customize shell prompt and banner
    - Stop all running commands on shell close
    - New 'exit' and 'quit' commands to close shell
    A simple but substantial change: uIP used the htons()/HTONS() macro
    functions for converting between host and network byte order. These
    names are the de facto standard names for this functionality because
    of the original BSD TCP/IP implementation. But they cause problems for
    uIP/Contiki: some platforms define these names themselves (Mac OS,
    most notably), causing compilation problems for Contiki on those
    platforms.
    
    This commit changes all htons to uip_htons instead. Same goes for
    htonl, ntohs, and ntohl. All-caps versions as well.
    Bugfix: the code tried to shave off the ending newline character even if it did not exist
    Avoided compiler warning.
    Made use of shell_quit().
    Rewrote the telnet server to buffer the output in a single, large buffer rather than as individual lines. This both makes output faster and makes it possible to buffer more outgoing data.
    Accomodate for the now more complex shell output.
    Adjusted telnet server to the new shell logic.
    Removed compiler warning.
    Avoid warning about using a cast as a lvalue.
    Added integration of shell event handler into shell server. This is obligatory for the 'ls' command to succeed.
    Fixed incomplete integration of shell server log gui.
    Avoid compiler warnings.
    Providing a dummy program_handler_load() made made the telnet server work without program-handler but on the other hand incompatible with an exsistng program handler :-(
    Therefore I replaced that hack with a clean CONF macro, which by the way really removes the run() and exec() functionality instead of just implementing it empty.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Telnetd improvement: allow specifying a maximum silence time and kill the connection after that time. This is to avoid the telnet connection getting stuck forever if the connecting host reboots.
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Adjusted telnet server to the new shell logic.
    Minor formatting change.
    Fixed incomplete integration of shell server log gui.
    Import of the contiki-2.x development code from the SICS internal CVS server
    - It doesn't make sense to me add the shell sources here _AND_ link to the shell app.
    - The shell app needs to be there so the '-' prefix is wrong here.
    Specify that the telnet server uses the shell application
    Adjusted telnet server to the new shell logic.
    Added memb.c.
    Make lists of source files for each app available individually - i.e. for creation of dynamically loadable modules.
    How were the references to shell.h and shell.c supposed to be resolved without bringing in apps/shell ?!?
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Include wget shell command in "standard" shell environments.
    As adding some commands to the telnet server shell doesn't seem to be desirable in the application it's now done in the gui-specific code.
    Accomodate for the now more complex shell output.
    Adjusted telnet server to the new shell logic.
    Avoid compiler warnings.
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Import of the contiki-2.x development code from the SICS internal CVS server
    Make lists of source files for each app available individually - i.e. for creation of dynamically loadable modules.
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    Removed SELFSTART_PROCESS as AUTOSTART_ENABLE generally serves that purpose - and AUTOSTART_ENABLE gets already set as required :-)
    Allow to optionally (triggered with SELFSTART_PROCESS) self start the application.
    Added header necessary for petsciiconv_toascii().
    Import of the contiki-2.x development code from the SICS internal CVS server
    Removed all old RCS tags in the Contiki source tree. Those RCS tags are not used any more, as we are now using git to manage the Contiki source tree
    *-dsc.c files have been changed to remove forward reference for struct_icon variable, bacause it is strange that this variable is used wholly inside the C source file and declared extern for the forward reference.
    Support for z80(sdcc) port.
    In order to support, some core modules are modified as follows:
    
    core/sys/dsc.h
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    - DSC_HEADER is changed to remove extra semicolon.
    
    core/sys/process.h
    - process_data_t is expressed by void* in signatures (known bug on sdcc).
    
    core/sys/autostart.h
    - autostart_processes is changed to remove extra semicolon.
    
    core/sys/cc.h
    - CC_CONF_ASSIGN_AGGREGATE is introduced.
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/net/hc.c
    core/net/uip_arp.c
    core/net/uaodv.c
    - Aggregation assignments are changed to uip_ipaddr_copy.
    
    core/net/psock.c
    core/net/uipbuf.c
    core/net/dhcpc.c
    apps/shell/shell.c
    core/ctk/vnc-server.c
    core/ctk/vnc-out.c
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    core/net/uip-over-mesh.c
    - An extra semicolon is removed.
    
    apps/dhcp/dhcp-dsc.c
    apps/shell/shell-dsc.
    apps/ftp/ftp-dsc.c
    apps/process-list/process-list-dsc.c
    apps/email/email-dsc.c
    apps/webserver/webserver-dsc.c
    apps/vnc/vnc-dsc.c
    apps/vnc/vnc-viewer.h
    apps/webbrowser/www-dsc.c
    apps/about/about-dsc.c
    apps/irc/irc-dsc.c
    apps/telnet/telnet-dsc.c
    apps/telnetd/telnetd-dsc.c
    apps/netconf/netconf-dsc.c
    apps/directory/directory-dsc.c
    pps/calc/calc-dsc.c
    - Modify an extern type to a real declaration, which is static
      to prevent a compile error.
    
    core/net/mac/xmac.c
    - Variables cannot be defined in a head of block on sdcc.
    
    core/ctk/ctk.h
    core/ctk/ctk.c
    apps/program-handler/program-handler.c
    - If CTK_CONF_ICONS is diabled, the whole icon-related code is disabled.
    
    Makefile.include
    - Add a set of configuration for an assembler.
    - $(CLEAN) variable is introduced for customized cleanup.
    
    apps/process-list/process-list.c
    - PROCESSLIST_CONF_HEIGHT is introduced to address smaller screen size.
    
    core/lib/ctk-filedialog.c
    - FILES_CONF_HEIGHT is introduced to address smaller screen size.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/vnc/vnc-viewer.c
    - A cast is added to prevent a compile error.
    - "register" keyword in a signature cannot be used in sdcc,
      CC_REGISTER_ARG is used instead.
    
    apps/webbrowser/webclient.c
    - CC_CONF_INC_CAST_POINTER is introduced, a workaround of a kind
      of sdcc bug for an increment.
    
    core/loader/elfloader.c
    - A cast is added to prevent a compile error.
    
    core/net/rime/rimeaddr.c
    - An initialization is added to prevent a compile error.
    
    core/net/rime/rudolph0.c
    - NULL is changed to 0, because NULL causes a compile error.
    
    core/net/rime/route-discovery.c
    - Add an argument to match the definition of nf_callbacks.
    
    cpu/z80/strcasecmp.h
    cpu/z80/strcasecmp.c
    cpu/z80/contiki-sdcc-conf.h
    cpu/z80/mtarch.c
    cpu/z80/mtarch.h
    cpu/z80/Makefile.z80
    - New files to make compilation availble on sdcc.
    - Added support for multithreading.
    Import of the contiki-2.x development code from the SICS internal CVS server
    * Simple JSON parser and generator.
    * Simple HTTP webservice with support for both receiving and sending HTTP requests.
    * json-ws example that optionally push sensor data to COSM over IPv6.
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    * Simple JSON parser and generator.
    * Simple HTTP webservice with support for both receiving and sending HTTP requests.
    * json-ws example that optionally push sensor data to COSM over IPv6.
    core/net/resolv: IPv6 and mDNS ("Bonjour") support. Major refactor.
    
    This patch updates the DNS resolver to support IPv6 and introduces an
    improved API for looking up DNS entries. This patch also adds optional
    support for mDNS lookups and responses to the DNS resolver.
    
    Here is a quick summary of the changes:
    
     * Added support for IPv6 lookups.
     * DNS queries now honor record expiration.
     * Added support for mDNS, compatible with "Bonjour".
     * Implemented a new lookup api, `resolv_lookup2()`, which provides
       more information about the state of the record(error, expired,
       looking-up, etc.).
    
    About mDNS/Bonjour Support
    --------------------------
    
    This patch adds basic support for mDNS/Bonjour, which allows you to
    refer to the name of a device instead of its IP address. This is
    incredibly convenient for IPv6 addresses because they tend to be very
    long and difficult to remember. It is especially important for
    link-local IPv6 addresses, since not all programs support the '%'
    notation for indicating a network interface (required on systems with
    more than one network interface to disambiguate).
    
    In other words, instead of typing in this:
    
     * `http://[fe80::58dc:d7ed:a644:628f%en1]/`
    
    You can type this instead:
    
     * `http://contiki.local/`
    
    Huge improvement, no?
    
    The convenience extends beyond that: this mechanism can be used for
    nodes to talk to each other based on their human-readable names instead
    of their IPv6 addresses. So instead of a switch on
    `aaaa::58dc:d7ed:a644:628f` triggering an actuator on
    `aaaa::ed26:19c1:4bd2:f95b`, `light-switch.local` can trigger the
    actuator on `living-room-lights.local`.
    
    What you need to do to be able to look up `.local` names on your
    workstation depends on a few factors:
    
     * Your machine needs to be able to send and receive multicast packets
       to and from the LoWPAN. You can do this easily with the Jackdaw
       firmware on an RZUSBStick. If you have a border router, you will need
       it to bridge the mDNS multicast packets across the border.
    
     * If you are using a Mac, you win. All Apple devices support mDNS
       lookups.
    
     * If you are using Windows, you can install Apple's Bonjour for Windows
       package. (This may be already installed on your machine if you have
       installed iTunes) After you install this you can easily do `.local`
       lookups.
    
     * If you are using a Unix machine, you can install Avahi.
    
    The default hostname is set to `contiki.local.`. You can change the
    hostname programmatically by calling `resolv_set_hostname()`. You can
    change the default hostname by changing `CONTIKI_CONF_DEFAULT_HOSTNAME`.
    
    You may disable mDNS support by setting `RESOLV_CONF_SUPPORTS_MDNS` to
    `0`.
    
    ---------------------------------
    
    core/net/resolv: `resolv_lookup2()` -> `resolv_lookup()`
    
    Note that this patch should fix several `resolv_lookup()` bugs
    that already existed. There were many cases where `resolv_lookup()`
    was being called and the IP address ignored, but later code
    assumed that the IP address had been fetched... ANYWAY, those
    should be fixed now.
    
    ---------------------------------
    
    examples/udp-ipv6: Updated client to use MDNS to lookup the server.
    
    Also updated the Cooja regression test simulation.
    * Simple JSON parser and generator.
    * Simple HTTP webservice with support for both receiving and sending HTTP requests.
    * json-ws example that optionally push sensor data to COSM over IPv6.
    end of apps for uIPv6
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    Removed void * operations
    dos2unix conversion
    fixed for new uip6 APIs
    *** empty log message ***
    ping-ipv6 example compiles on native cygwin
    end of apps for uIPv6
    A massive all-tree automated update of all double inclusion guard #defines that changes from using two underscores as a prefix, which are reserved, to not using two underscores as a prefix
    end of apps for uIPv6
    removed execute flag of source files (avoids diff problems with egit)
    Subscription Lifetime update
    Bug fix and updates
    Initial commit of an experimental COAP/HTTP/REST implementation for Contiki
    Port apps, examples, platforms and tools so they use the new neighbor and route API.
    Changes for minimal-net and bug fix for buffer handling.
    Subscription lifetime update
    Bug fix and updates
    Initial commit of an experimental COAP/HTTP/REST implementation for Contiki
    Initial commit of an experimental COAP/HTTP/REST implementation for Contiki
    Cleanup of the node-id.h files. The node-id.h file contains
    declarations of functions for setting and getting a node ID number, a
    functionality that exists on many platforms. Since this functionality
    was not considered part of the Contiki core, each platform defined its
    own node-id.h file. This commit attempts to clean this up by
    collecting the node-id.h into a core/sys/node-id.h file that replaces
    the old node-id.h files from the platform directories.
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    Changes for minimal-net and bug fix for buffer handling.
    Bug fix and updates
    Initial commit of an experimental COAP/HTTP/REST implementation for Contiki
    Converted u8_t to uint8_t and u16_t to uint16_t in the apps directory.
    Commented periodic resource related stuff for the sake of small code print and added minimal-net configuration in README.
    removed execute flag of source files (avoids diff problems with egit)
    Subscription lifetime update
    Bug fix and updates
    Initial commit of an experimental COAP/HTTP/REST implementation for Contiki
    Bug fix and updates
    Initial commit of an experimental COAP/HTTP/REST implementation for Contiki
    Fix alignment issue on ARM
    
    Signed-off-by: Maxim Osipov <maxim.osipov@gmail.com>
    Changes for minimal-net and bug fix for buffer handling.
    patched rest-code for econotag
    Initial commit of an experimental COAP/HTTP/REST implementation for Contiki
    Bug fix and updates
    Initial commit of an experimental COAP/HTTP/REST implementation for Contiki
    removed execute flag of source files (avoids diff problems with egit)
    Initial commit of an experimental COAP/HTTP/REST implementation for Contiki
