    minor typos
    added initial versions of DEVELOPERS-GUIDE.md, OPERATORS-GUIDE.md, USERS-GUIDE.md
    added Apache Tika version 1.11
    Issue 312 (QRCode scanning bug): replaced qrcode and jsqrcode js libraries with ZXing core and javase java libraries; added EncodeQRCode and DecodeQRCode APIs
    UPnP support
    GPL, developer agreement and license info
    updated licenses files
    added a list of third-party libraries used by the java code
    separate windows and linux package scripts
    Package installer using Cygwin - GnuPG functions excluded since they hang Cygwin
    use unpacked class files in classes subdirectory instead of the nxt.jar file
    junit tests
    package as nxt.jar
    allow using https/ssl for the API and the UI, allow custom Properties
    embedded jetty
    javadoc.sh
    javadoc.sh
    always specify encoding utf8
    also remove nxtservice.jar on recompile
    separate windows and linux package scripts
    executable
    use unpacked class files in classes subdirectory instead of the nxt.jar file
    junit tests
    Shell script for use on MinGW (Windows)
    cosmetic improvements
    don't make a jar if compilation failed
    reduce memory waste
    package as nxt.jar
    minor
    embedded jetty
    javadoc.sh
    javadoc.sh
    fixed compile.sh
    fixed transaction hash validation
    minor
    generate javadoc
    compile.sh
    added "-encoding utf8" to javac in compile.sh
    also remove nxtservice.jar on recompile
    separate windows and linux package scripts
    Package installer using Cygwin - GnuPG functions excluded since they hang Cygwin
    NXT-PLUS in a single commit
    minor, also gzip ttf svg and otf files
    reviewed the VS and phasing code, added TODOs
    use unpacked class files in classes subdirectory instead of the nxt.jar file
    Merge branch 'feature/db' into feature/votingsystem
    
    Conflicts:
            src/java/nxt/Attachment.java
            src/java/nxt/DbVersion.java
            src/java/nxt/Generator.java
            src/java/nxt/Poll.java
            src/java/nxt/Vote.java
            src/java/nxt/db/DbTable.java
            src/java/nxt/http/GetActivePollIds.java
    JSON Constructor / parse, compile with debug info
    junit tests
    cosmetic improvements
    don't make a jar if compilation failed
    reduce memory waste
    package as nxt.jar
    minor
    embedded jetty
    javadoc.sh
    javadoc.sh
    fixed compile.sh
    fixed transaction hash validation
    minor
    generate javadoc
    compile.sh
    set svg files to binary
    Maintain Unix new lines for .sh files + indentation
    added sign.sh script for command line transaction json signing
    update mac installer
    create clickable link run.command
    mac installer
    Ignore local patches
    mac installer
    proguard configuration file
    Ignore zips
    Update gitignore
    gitignore
    gitignore
    gitignore
    Include JavaExe 3rd party, restore run.bat so that it can still look for Java in case it is not redistributed (i.e. zip file) work on win-package.sh
    fixed validation of AE cancellation orders
    gitignore
    Print environment information about the client environment to the browser JavaScript console
    Ignore IntelliJ dictionary modifications
    Ignore auto-generated manifest files
    Update git ignore
    added package.sh script
    Installer updates
    added getAccountAssets and getAssetAccountCount APIs, each also taking a height parameter
    gitignore
    gitignore
    tests for blockchain download, rescan and rollback
    replace currency maps with database calls
    gitignore
    gitignore
    gitignore
    deploy.sh in gitignore
    junit tests
    gitignore
    minor
    minor
    trace leasing begin and end, and lessor guaranteed balance for each generated block with fees
    debug tracing of account balances and account trades
    enable use of testnet just by setting nxt.isTestnet=true
    package as nxt.jar
    allow using https/ssl for the API and the UI, allow custom Properties
    gitignore
    gitignore, run.sh
    run.sh
    make sure old gz files are deleted
    added sign.sh script for command line transaction json signing
    also include resource dir in package.sh
    include compact.sh and compact.bat scripts in package and installer
    update linux package scripts, verify.sh not needed
    move installer scripts and conf to installer dir
    updated docker files (not tested) and moved to contrib
    separate windows and linux package scripts
    added the new files to the package.sh script
    updated licenses files
    Add installer Jar link to installer change log
    Package installer using Cygwin - GnuPG functions excluded since they hang Cygwin
    keep including nxt.jar
    do not build or include nxt.jar in the distribution package anymore
    updated package.sh
    minor
    minor, also gzip ttf svg and otf files
    added package.sh script
    minor, also gzip ttf svg and otf files
    rollback to height
    updated wiki links
    create clickable link run.command
    Update readme
    java 8
    openjdk has known problems with ssl, do not recommend it
    noted that java 8 can also be used, added links to Oracle jdk install guides
    added new README.md
    clarification
    GPL, developer agreement and license info
    GPL, developer agreement and license info
    executable flag
    executable
    Minting client reference implementation
    Add support for Scrypt hash function
    Minting client reference implementation
    Add mac-run.sh to the copied resources
    make sure old gz files are deleted
    experimental closed source release
    fixed logs folder still not created by the installer
    added sign.sh script for command line transaction json signing
    include Dockerfile in package
    include compact.sh and compact.bat scripts in package and installer
    Create the logs folder by the installer since it is need when working without GUI or running as a Windows service
    also move JavaExe to installer/lib
    update linux package scripts, verify.sh not needed
    Fix merge problems
    move installer scripts and conf to installer dir
    Remove GPG signing for now
    Create nxt.exe and nxtservice.exe from JavaExe.exe
    Include JavaExe 3rd party, restore run.bat so that it can still look for Java in case it is not redistributed (i.e. zip file) work on win-package.sh
    updated docker files (not tested) and moved to contrib
    fix build scripts
    separate windows and linux package scripts
    added the new files to the package.sh script
    updated licenses files
    Add installer Jar link to installer change log
    Package installer using Cygwin - GnuPG functions excluded since they hang Cygwin
    keep including nxt.jar
    do not build or include nxt.jar in the distribution package anymore
    updated package.sh
    minor
    minor, also gzip ttf svg and otf files
    added package.sh script
    Fix run-tor.sh
    added run-tor.sh script
    Remove -server flag so that we can run with client JRE as well
    Include JavaExe 3rd party, restore run.bat so that it can still look for Java in case it is not redistributed (i.e. zip file) work on win-package.sh
    Fixed version checks when javaVersion or javaVersion32 are empty
    Update run.bat to support Java 8
    Installation improvments
    Support installation by non-priviligied user on Windows
    Update batch files
    executable
    use unpacked class files in classes subdirectory instead of the nxt.jar file
    updated run.bat
    updated run.bat
    added run.bat, -Xmx1024M probably no longer needed
    minor typos
    removed the unmaintained admin.html and alias.html pages
    Replaced all HTML containing translation strings for security reasons
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Recollected some translation strings
    Improved translation instructions
    Minor changes to translation docs in DEVELOPERS-GUIDE.md
    Changed language state for Italian, Dutch, Ukrainian, changelog
    Added language selection to welcome screen, updated DEVELOPERS-GUIDE.md, changelog
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Fixed typo
    Add security/backup advice to Crowdin translation file update instructions in DEVELOPERS-GUIDE.md file
    Some hints on translation for DEVELOPERS-GUIDE.md
    Readded translation keys to the english translation file created dynamically and therefor missed by i18next parser, updated documentation
    Synchronized Crowdin and locales folder naming
    Finished developer guide instructions, added Crowdin translation instructions (DEVELOPERS-GUIDE.md)
    Parsed new translation strings into i18next parser, manually filled up > 100 missing strings by full-text search
    Removed useless number data attributes 10, 20, 30,... in settings, adding meaningless entries to translation file
    Replaced 5 i18n key with namespaces to avoid problems with translation key parsing
    Started translation processing section in DEVELOPERS-GUIDE.md
    Added translation developer instructions to DEVELOPERS-GUIDE.md
    Started a UI developers section to the developers guide markup, UI devs modify as needed.
    added database, code style and testing notes
    added initial versions of DEVELOPERS-GUIDE.md, OPERATORS-GUIDE.md, USERS-GUIDE.md
    make sure old gz files are deleted
    added sign.sh script for command line transaction json signing
    also include resource dir in package.sh
    include compact.sh and compact.bat scripts in package and installer
    update linux package scripts, verify.sh not needed
    move installer scripts and conf to installer dir
    Include JavaExe 3rd party, restore run.bat so that it can still look for Java in case it is not redistributed (i.e. zip file) work on win-package.sh
    updated docker files (not tested) and moved to contrib
    separate windows and linux package scripts
    removed the unmaintained admin.html and alias.html pages
    java 8
    added contribution section to README
    use unpacked class files in classes subdirectory instead of the nxt.jar file
    update README with warning not to use non-latin characters in path name
    Typo in README.txt
    typo
    minor
    changelog, README
    added readme file and windows url link, not finished
    Email correction based on PM from wesley on the NXT forum
    I'm changing my PGP public key
    updated email
    new GPG key
    Update key and account
    Email change and gpg/nxt address addition.
    Petko's fingerprint and ID
    Fix typo
    Contact information for Ronald Hoffman
    GPL, developer agreement and license info
    NXT-PLUS in a single commit
    use unpacked class files in classes subdirectory instead of the nxt.jar file
    junit tests
    added run.bat, -Xmx1024M probably no longer needed
    package as nxt.jar
    blockchain refactoring
    gitignore, run.sh
    run.sh
    updated full changelog
    full changelog in release-package.sh
    mention dmg installer in release announcement too
    Add mac-run.sh to the copied resources
    make sure old gz files are deleted
    experimental closed source release
    fixed logs folder still not created by the installer
    added sign.sh script for command line transaction json signing
    new GPG key
    include Dockerfile in package
    include compact.sh and compact.bat scripts in package and installer
    add a note about the digital signature
    add link to exe package too in the release announcement
    do not sign the zip package with jarsigner as it seems to remove the executable flags on all scripts in the zip
    minor
    sign with jarsigner too
    copy exe files in the linux release script too
    update linux package scripts, verify.sh not needed
    move installer scripts and conf to installer dir
    updated docker files (not tested) and moved to contrib
    fix build scripts
    separate windows and linux package scripts
    updated copyright year
    next release non-experimental
    updated version, renamed Tagged Data to Data Cloud
    experimental release
    next release non-experimental
    date
    experimental closed source release
    GPL, developer agreement and license info
    always specify encoding utf8
    added forging tests, refactoring, run each test in a new jvm
    tests for blockchain download, rescan and rollback
    use unpacked class files in classes subdirectory instead of the nxt.jar file
    Added TokenTest
    Added HallmarkTest
    junit tests
    updated docker files (not tested) and moved to contrib
    Update OPERATORS-GUIDE.md
    added initial versions of DEVELOPERS-GUIDE.md, OPERATORS-GUIDE.md, USERS-GUIDE.md
    NXT-PLUS in a single commit
    separate windows and linux package scripts
    always specify encoding utf8
    executable
    use unpacked class files in classes subdirectory instead of the nxt.jar file
    junit tests
    preserve lucene trigger class
    proguard configuration file
    Support for Windows service installation and missing resources related to installer
    Fix opening wallet from tray icon and log system.out and err messages to files in %TEMP% folder when running nxt.exe
    Support for Windows service installation and missing resources related to installer
    Fix unix build script and add nxt.exe properties file needed by JavaExe (not to be confused with the properties file for NXT)
    upgrades from old versions require database reset
    made messageFormat ThreadLocal
    use nxt-default.properties for all defaults
    updated copyright year
    added copyright notice headers
    GetLog and GetStackTraces API
    Initial Support for System Tray icons - not done yet
    logging level FINE by default
    increased default log file size max to 50 MB
    Use SLF4J for logging
    Use SLF4J for logging
    Use SLF4J for logging
    updated initial peers
    updated version
    Hardfork coming - commit and update to 1.7.4
    h2 1.4.190, with MVStore disabled
    h2 1.4.190
    different error for disabled APIs, rename
    allow disabling the public key cache
    allow disabling specific APIs
    updated default initial peers
    updated copyright year
    fixed host properties description
    made maximum allowed number of forgers and shufflers configurable
    next release non-experimental
    updated version, renamed Tagged Data to Data Cloud
    add X-Frame-Options: SAMEORIGIN header by default
    changelog
    changelog
    use a property to control whether strong secure random is used, and test implementation speed before start
    formatting
    correct insufficient fees
    Moved Account Control to Account Details
    updated initial peers
    prepare for 1.6.2
    changelog
    increase default (but not minimum) prunable lifetime to 90 days
    increase default (but not minimum) prunable lifetime to 90 days
    expose upnp found external address in getState, allow overriding upnp timeouts
    minor fixes
    allow suppressing exception details from peer error responses
    updated default known peers
    Update DNS address
    default testnetNumberOfForkConfirmations=2
    made deletion of finished shufflings optional
    merge fix, will be 1.7
    changelog
    Add TRANSACTION_FEE account ledger event
    Change default value for nxt.ledgerLogUnconfirmed to 1
    code review, added TODOs, various minor changes
    Merged source updates
    changelog
    shuffling block
    updated initial known peers
    Update nxt-default.properties comments
    Account ledger support
    UPnP support
    trim tables in a separate thread not in transaction
    allow setting socks proxy in properties file
    add maxUploadFileSize to properties, do not allow values less than 42k
    changelog
    updated secureae hostnames in default initial peers
    typo
    updated default initial peers
    reject some peer requests and don't process transactions while blockchain download is in progress
    nxt.allowedBotHosts=*
    increased log thresholds
    formatting
    changelog
    Change database statistics interval
    Track database execution times
    updated default initial peers
    changelog
    added copyright notice headers
    fixed peer http request content-type, validate that text submitted as bytes can be treated as UTF-8
    fixed peer http request content-type
    Limit inbound and outbound connections
    version
    increased default unconfirmed transactions limit
    remove old announced address from announced addresses map
    fixed processing of unconfirmed ExtendTaggedData transactions, improved json validation
    Websocket peer support
    changelog
    Websocket peer support
    version
    set max unconfirmed transaction limit to 1000
    fix downloading of prunable messages with non-default maxPrunableLifetime
    allow forcing inclusion of prunables even if expired
    EventRegister and EventWait API
    prunable tagged data
    allow limiting unconfirmed transaction pool size
    version
    allow keeping prunable data longer
    Replace nxt.websocketSSL with nxt.apiSSL
    version
    updated initial default peers
    reduced default nxt.maxRollback, added nxt.trimFrequency
    NXT-PLUS in a single commit
    typo, logging
    Backwards compatibility
    Support HTTP and HTTPS using two ports
    more default testnet nodes
    removed Peer.isWellKnown; use nxt-default.properties for setting initial peers instead of NxtDbVersion
    replaced nxt.dumpPeerVersion with dumpPeers API
    added nxt.ignorePeerAnnouncedAddress and nxt.cjdnsOnly properties
    limit number of records returned to nxt.maxAPIRecords unless the admin password is provided or is disabled
    jetty 9.2.9
    fixed ParameterParser, some refactoring
    changelog
    changelog
    reduced default numberOfForkConfirmations to 2
    increased default read and connect timeouts
    peer errors handling, disconnect but do not blacklist peers that have blacklisted us
    trimming settings deleted
    also enable sending blocks earlier than hit time
    enforce nxt-default.properties file to match current version
    forging bugfixes and improvements
    fix off by one error in dividend payment transaction validation, and increased default max rollback to 1441
    Support installation by non-priviligied user on Windows
    limit total number of known peers
    revert change, accidently checked in to wrong repo
    config
    comment fix
    nxt.processPolls=true by default
    optional polls processing, finished field removed from all pols
    pruning for pending transactions polls, "finished" flag removed from phased txs HTTP API, delete operation for VersionedValuesTable
    #260 Minting of MYSTM at the testnet stops after one mint transaction
    do not require admin password when API server listens on 127.0.0.1 only
    changelog
    Add Https support for mint worker
    Debug requests and DbShellServlet are always public and password protected. Removed nxt.enableDebugAPI
    Added nxt.disableAdminPassword to disable password protection
    Added password protection functionality to be used for administrative API requests. A single password is stored in nxt.adminPassword. All protected API requests require "adminPassword" parameter to match nxt.adminPassword.
    refactoring allowedBotHosts logic
    allow configuring different default page for the api server
    minor, prepping for poll results
    separate number of fork confirmations parameter for testnet
    put back testnet ports and peers
    Introduce nxt.mint.serverAddress property
    Add isSubmitted
    MVCC=TRUE by default
    Fix explanation
    mint worker default configuration
    reverted MS time multiplier change
    set time multiplier to 6 for MS testnet
    adjusted numberOfForkConfirmations
    numberOfForkConfirmations=1 for MS testnet
    Accidentally overwrote some changes in nxt-default.properties, reverting them
    Update FontAwesome to newest version, added some more icons to transactions, changed MS icon in sidebar, and added option on currencies page to show all or just the users
    reduced default to checking 5 other peers
    number of fork confirmations configurable by nxt.numberOfForkConfirmations property
    fixed nxt-default.properties
    Added more code for Issue Currency and started Exchange History page
    minor
    userdb not yet needed
    changelog
    Work on shuffle processing
    renaming
    multiple database support
    minor
    made maxRollback a property
    allow disabling of the transaction re-broadcasting feature, always re-send unconfirmed transactions to peers
    changelog
    default lock timeout 60
    bugs
    added Debug API requests for triggering rescan, reset, and rollback
    increased default connection pool size to 30
    trimming of derived tables optional
    removed scan at start
    addPeers request, don't do peer weighting if hallmark protection disabled
    keep enableHallmarkProtection set by default, and always weight peer selection by hallmark weight, but increase number of connected peers to have enough hallmarked peers
    disabled hallmark protection by default
    Implement GZip filter for the API Servlet
    peer networking gzip compression
    GZip - calculate compressed size and make gzip configurable
    added nxt.getMorePeers property
    debug
    added nxt.offline property
    scan same as push, cleanup, unconfirmed balance logging optional
    allow dumping of peer list at shutdown
    Use SLF4J for logging
    Use SLF4J for logging
    added option to force re-validation of existing blocks at start; moved Generator.clear and transactionProcessor.clear after the re-scan
    increased default timeout
    blacklist for 10 min by default
    increased default timeout
    increased default timeouts
    Use SLF4J for logging
    default to IPv4 only
    support IPv6 connections
    trace leasing begin and end, and lessor guaranteed balance for each generated block with fees
    allow changing the database default lock timeout, set to 10 seconds by default
    disable old NRS UI by default
    moved tools to ui
    allow disabling of peers database
    store peers in the database
    allow custom quote or separator in debug trace
    fixed parsing of transaction json
    debug tracing of account balances and account trades
    well known testnet peers
    added knownBlacklistedPeers parameter;
    allow disabling of DoSFilter and setting maxRequestMs parameter;
    do not try to connect to peers with shareAddress=false
    do not blacklist peers when outgoing connection failed
    improved nxt-default.properties comments
    enable use of testnet just by setting nxt.isTestnet=true
    use and require POST for all UI requests
    support POST for all requests, and optionally enforce its use for those that require it
    improve handling of peer announced addresses and ports
    allow using https/ssl for the API and the UI, allow custom Properties
    use nxt-default.properties for all defaults
    Unit test prototype
    junit tests
    junit tests
    API cleanup
    encapsulate fields
    NXT-PLUS in a single commit
    NXT-PLUS in a single commit
    NXT-PLUS in a single commit
    NXT-PLUS in a single commit
    DbKey optimizations
    updated copyright year
    added copyright notice headers
    added by-transaction voting model (linked transactions)
    allow duplicate votes for phased transactions
    minor optimizations
    allow phasing without voting
    added getPollVote and getPhasingPollVote APIs
    fixed validation of phased transactions, removed immediate release on vote feature
    minor refactoring
    added phasing_poll_result table
    refactoring, implement voting models as enum
    renaming
    renaming, database indexes
    renamed PollCounting to VoteWeighting
    moved out the counting logic to PollCounting
    minor
    GetPendingTransactionVotesCount -> GetPendingTransactionVotes, countVotes method
    formatting
    minor cleanup
    various fixes and improvements
    max 2 votes for pending txs multivoting
    refactoring  / unused code removal
    no on-vote recalcs for 2-pending transactions with by-asset voting
    db issues fixes, includeVoters parameter in VS Http API, phasing transactions commit/rollback fixes
    todos fixed: better pending tx validation, json longs read/write, poll_results -> poll_result for  table name
    getPendingTransactionVotesCount, todos fixed
    TODOs fixes #1
    TODO comments
    reviewed the VS and phasing code, added TODOs
    double voting prevention
    Merge branch 'develop' into voting_2phased
    
    Conflicts:
            src/java/nxt/Constants.java
            src/java/nxt/NxtDbVersion.java
            src/java/nxt/TransactionProcessorImpl.java
    voting recheck before refuse
    unneccesary todos deleted, code formating, unneccesary exceptions handling removed
    blacklist implemented for 2-phased transactions, some validation added to vs/2ptxs
    unsorted voters array bug fixed, poll fee set to 50 nxt
    poll classes renaming
    voting constants moved to Constants, getAccounPolls API call, optional account parameter has been added to getPollIds
    account_id bug fixed in Poll(voting system), multivoting in phased transactions implemented(not well-tested!)
    persistence for 2-phased votes, votecounting fixed for by-asset & by-balance, possibleVoters persistence bugfix
    race condition
    global publicKey cache
    updated copyright year
    made maximum allowed number of forgers and shufflers configurable
    limit max number of simultaneous forgers per node
    use updateLock in block generator
    Reflect forging status changes immediately after the start/stop dialog is completed
    use explicit read-write lock for blockchain
    added copyright notice headers
    logging
    NXT-PLUS in a single commit
    fixed some IntelliJ inspections
    optimized Account.getEffectiveBalance, added getEffectiveBalance(height)
    replace some Convert methods with java 8 ones
    logging
    only reset forging delay afer a successful forge
    do not use hit time if missed by more than 1 h
    fixed getNextHitTime
    fixed special case
    forging bugfixes and improvements
    allow getForging and stopForging access with admin password instead of secret phrase too
    also log key height and effective balance in debug trace
    fork resolution during push, do not allow front running in block forging, delay block generation by 20 s
    made currency_mint table Versioned, delete mint records when a mintable currency is deleted
    Eliminate the isUnitTest patch
    Forging tests
    define a known most recent block in Constants
    added forging tests, refactoring, run each test in a new jvm
    allow time manipulations for testing, and test forging
    Make sure each block allocates different time stamp during tests
    allow disabling of specific background tasks for test purposes
    no more Longs
    More MS unit tests and bug fixes
    removed debug
    avoid rounding issues
    more generator cleanup
    bugs
    generator bugs and optimizations
    simplify
    optimizations
    Remove the NXT currency and revert the offline change
    Implement isDuplicate fixes and logging improvements
    after DGS block
    retry block generation when failing due to invalid transactions
    Merge branch 'feature/db' into feature/votingsystem
    debug
    minor
    optimization
    try to forge each 0.5 s
    generate block refactoring, use the same timestamp
    merging with feature/db
    minor
    clear generator state on rescan
    minor
    don't run generate while scanning
    merged develop
    finished getNextBlockGenerators refactoring and optimizations
    reviewed effective balance leasing;
    some getNextBlockGenerators refactoring
    some cleanup
    don't hold potentially stale Account objects in Generator
    NQT
    remove forging code no longer in use
    moved constants to a separate class so that custom properties can be used to set them
    Added methods to get a hit and its time for an account.
    generator deadline should not be negative
    added START_FORGING and STOP_FORGING events, more debug logging
    added getAccount method to Generator
    blockchain refactoring
    embedded jetty
    minor
    minor
    enforce account existence before creating a generator for it
    minor improvements
    startForging and stopForging API
    listeners
    updated copyright year
    rename
    add registered count to shuffling
    new features already enabled
    minor
    minor
    enforce that encrypted data are sorted for more efficient duplicates check
    more strict ciphertext size validation
    additional duplicates check to prevent incorrect blaming, sort instead of shuffle, check that public key is canonical too
    cancellingAccountId can be stored in assigneeAccountId, shuffling stage error checking
    new fees
    test max shuffling size, set shuffling processing full size as 1/2 of real full size
    isPruned
    handle shuffler restart or late start
    added Shuffler, made shuffling registration also depend on shuffling full hash
    improved blaming, more tests
    last participant cannot submit shuffling verify or shuffling cancel
    more shuffling state consistency validation, logging, refactoring
    first processing transaction must also depend on shuffle state
    testnet shuffling constants
    shuffling events and ledger events
    separate height deadlines for each shuffling phase, skipping full blocks
    phasing refactoring
    shuffling creation and registration phasable, other shuffling transactions not, all not phasing safe
    also check for duplicate data at each processing step
    prevent duplicate or colliding recipient public keys
    prunable shuffling processing data
    shuffling assets
    DbKey optimizations
    updated copyright year
    keep track of asset deletes in asset_delete table, added getAssetDeletes API
    updated copyright year
    use a separate referenced_transaction table
    added getReferencingTransactions API
    handle restore for prunable plain and prunable encrypted attachments on the same transaction
    Add RetrievePrunedData API
    code review, added TODOs, various minor changes
    Merged source updates
    added copyright notice headers
    fixed IntelliJ inspections, replace some for loops with Iterable.forEach
    cleanup
    prunable encrypted messages
    prunable message
    prunable message
    also prohibit linking to phased transactions in the past
    hasTransactionByFullHash
    minor optimizations
    same block and transaction validation on push and validating rescan, added rescan after shutdown option
    index on transaction.full_hash not needed
    optimizations
    optimizations
    minor, exceptions
    replace some Convert methods with java 8 ones
    simplify NxtDbVersion
    defer apply for all appendixes in phasing; rename TwoPhased to Phasing; add "phasing" prefix
    optimization, do not store redundant public_key records in the database
    allow creating and signing transactions in absence of blockchain data
    reviewed the VS and phasing code, added TODOs
    after MS block, the order of transactions in a block gets determined by the forger, instead of by id, default by arrival time
    renaming
    renaming
    multiple database support
    fixed ecBlockId loading
    lazy loading of block transactions
    Transaction/persistence fixes due to the new appendage
    no more Longs
    minor, chain exceptions
    added height parameter to getBlock
    encryptToSelfMessage
    null pointer
    null recipient bugs
    added EC fields to transaction json too, renamed to ecBlockId, ecBlockHeight
    start recording EC clusterDefiningBlock in transactions at DGS block, enforce EC fork check and TF8 after PK_ANNOUNCEMENT_BLOCK, some refactoring and preparing to merge with develop branch
    moved nxt.Db to nxt.db.Db
    cleanup
    PublicKeyAnnouncement appendix
    cleanup
    transactions with no recipient really should not have a recipient; bugfixes
    attachment versioning
    merging with feature/db
    transaction attachments refactoring
    use NULL in the db for no-recipient transactions, added GetAccountTransactions, sort by timestamp desc, added fromIndex toIndex parameters
    scan same as push, cleanup, unconfirmed balance logging optional
    Added saving of EC fields.
    Added Economic Clustering.
    store attachment bytes instead of Attachment objects in the database
    store attachment bytes instead of Attachment objects in the database
    merged develop
    fully remove referencedTransactionId after NQT_BLOCK
    full hash bugfixes, allow finding transaction by full hash, return full hash in the JSON
    full hash referenced transactions
    setAccountInfo
    NQT
    minor renaming
    added block_timestamp to the transaction table, added Transaction.getBlockId() and Transaction.getBlockTimestamp() which should be used for better performance instead of having to load the Block from the database to get them;
    store transaction hashes in the transaction table and make them available using Transaction.getHash() and in the JSON returned from getTransaction API;
    enable transaction lookup based on hash, as an optional parameter to the getTransaction API
    blockchain refactoring
    Block and Transaction interfaces, not finished
    updated copyright year
    use currency units instead of amount for getAvailableToBuy, fix exchangeNXTForCurrency to buy not more than the number of units requested after the hard fork
    added getAvailableToBuy and getAvailableToSell APIs
    Use transaction id instead of block id
    more DbClauses
    
    (cherry picked from commit 8adcd7a83569b171a7781019acbe5c5fe8beffad)
    more DbClauses
    code review, added TODOs, various minor changes
    Account ledger support
    added copyright notice headers
    fixed IntelliJ inspections, replace some for loops with Iterable.forEach
    fixed some IntelliJ inspections
    java 8 lambdas
    replace some Convert methods with java 8 ones
    phasing for MS offers
    more phasing side effects
    removed pre-MS checks and logic where no longer needed; added a checksum at MS block
    enforce exchange offer expiration height to be after current blockchain height
    restrict exchange offer supplies not to exceed total limits
    fixed removeOffer unconfirmed balance adjustment
    add exchanger profit to unconfirmed balance on currency sell
    added availableOnly parameter to getSellOffers and getBuyOffers, to return offers with non-zero supply and limit only
    skip 0 units exchanges
    after MS block, the order of transactions in a block gets determined by the forger, instead of by id, default by arrival time
    delete existing currency if issuing account owns all of it
    avoid null pointer if nothing to remove
    replaced getAllOffers with getBuyOffers and getSellOffers, added getOffer, offer queries optimizations
    refactoring
    optimizations
    cleanup of the CurrencyType validation code, optimized to avoid multiple db access;
    enforce unique currency_id, account_id in exchange offers
    rename CurrencyBuy and CurrencySell to CurrencyBuyOffer and CurrencySellOffer
    use transaction_id, offer_id as primary key for exchange
    minor
    more fixes and notes, not finished
    more fixes and notes, not finished
    minor fixes while reviewing the code
    Replace CurrencyExchange api with currency buy and sell
    Naming change from *CurrencyBalanceQNT to *CurrencyUnits
    re-organize currency exchange testing
    Complete tracing creation and verification (not tested yet), replace Long with long in MS code
    More exchange tests and APIs
    Implement the exchanges table and getAllExchanges API
    Unit test uses getAllExchanges API
    Add algorithm field to currency
    Convert Long to long in Currency and Exchange
    More work on APIs
    port currency exchange to database and support height for versioned tables
    use versioned entity tables
    Implemented currency exchange.
    Added stubs for currency exchange and minting.
    voting and phasing hard fork block is same, cleanup
    DbKey optimizations
    updated copyright year
    getLastTrades and getLastExchanges APIs
    added copyright notice headers
    NXT-PLUS in a single commit
    fixed some IntelliJ inspections
    added getOrderTrades, improved default sorting in non-versioned tables
    replace some Convert methods with java 8 ones
    phasing for AE orders
    phasing
    after VS block, order transactions by index instead of id during trade processing
    added getCount methods to EntityDbTable
    renaming
    multiple database support
    added Trade.isBuy(), exposed as tradeType in trade json
    refactoring
    added askOrderHeight and bidOrderHeight to Trade
    no more Longs
    performance, reduce number of Strings created
    getTrades API now can return trades for account, asset, or a combination of the two
    added getAssetAccounts API to get all holders of an asset
    optimizations
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    DbIterator, offset and limit pagination
    trimming of derived objects tables
    refactoring
    renaming
    DbKey, DbKeyFactory, removed Link tables
    model Trade as link table
    refactoring
    debug
    refactoring, guaranteed balances in database, not finished
    merging with feature/db
    minor
    orders in database
    trades in database
    minor
    error handling, minor
    fractional quantities
    NQT
    added Trade event
    cleanup
    return Long instead of long, prevent possible null pointer if no trades for an asset
    Add getAllTrades(timestamp) API call.
    
    This call returned all trades (regardless of asset) executed since the specified timestamp.
    
    For this call it was necessary to add assetId and timeStamp information to trade objects in memory.
    minor improvements
    Added "numberOfTrades", "numberOfPolls" and "numberOfVotes" to "getState".
    Added "getTrades" API request.
    more post-hardfork cleanup
    DbKey optimizations
    updated copyright year
    added getLinkedPhasedTransactions API
    close connections
    allow limiting max fees and phasing duration for phasing controlled accounts
    exclude transactions that finished early from getVoterPhasedTransactions and getAccountPhasedTransactions APIs
    immediate release of approved phased transactions when possible
    more DbClauses
    
    (cherry picked from commit 8adcd7a83569b171a7781019acbe5c5fe8beffad)
    more DbClauses
    phased transactions API improvements
    performance optimization, avoid querying database tables when only accountId or other id is needed
    minor
    refactoring
    added hash API
    trim tables in a separate thread not in transaction
    added copyright notice headers
    fixed IntelliJ inspections, replace some for loops with Iterable.forEach
    renamed pending to phased/phasing
    allow different hash functions for by-hash phasing
    by-hash voting (pay on revealed secret)
    added by-transaction voting model (linked transactions)
    minor optimizations
    added getAccountPendingTransactionCount
    allow nulls where needed for some phasing tables
    allow phasing without voting
    added account parameter to getCurrencyPendingTransactions and getAssetPendingTransactions
    renamed voter_count to whitelist_size
    added withoutWhitelist optional parameter
    fixed validation of phased transactions, removed immediate release on vote feature
    sort whitelist when constructing Appendix to be able to validate there are no duplicates
    also sort by transaction_index
    fees refactoring, phasing fees
    make sure poll is finished only once
    minor refactoring
    getAccountPendingTransactions - both outgoing & ingoing transactions
    added phasing_poll_result table
    fixed to read the values from the values table in the order they are saved, reversal no longer needed
    removed blacklist
    ORDER BY transaction.height DESC in getVoterPendingTransactions
    ORDER BY transaction.height DESC added for pending tx queries by account & holding
    use full hash instead of just id to identify transactions being voted for
    refactoring, implement voting models as enum
    renaming
    renaming, database indexes
    renamed PollCounting to VoteWeighting
    moved out the counting logic to PollCounting
    various improvements
    defer apply for all appendixes in phasing; rename TwoPhased to Phasing; add "phasing" prefix
    GetCurrencyPendingTransactions
    GetAccountPendingTransactionIds removed, getAccountPendingTransactionsToApprove implemented, getAssetPendingTransactions implemented
    GetAccountPendingTransaction, finished field added back to PendingTransactionPoll, TransactionProcessocImpl condition fix, PendingTransactionPoll.getIdsByWhitelistedSigner fix
    GetPendingTransactionVotes - "finished" fix
    poll_id -> pending_transaction_id bugix
    pending_transaction_signer.poll_id -> pending_transaction_signer.pending_transaction_id
    2-phased data trimming
    PendingTransactionPoll.isFinished
     PendingTransactionPoll.getCount() -> PendingTransactionPoll.getActiveCount()
    GetState - VS & 2PTs info
    Constants.VOTING_MINBALANCE_UNDEFINED removed
    formatting
    renamed finishBlockHeight to finishHeight
    minor cleanup
    minor
    GetAccountPendingTransactionToApproveIds fix, test for it
    various fixes and improvements
    assetId -> holdingId in VS & 2PT, min balance model, referential integrity contstraint fix for poll, createPoll refactoring with ParameterParser, better poll validation
    optional polls processing, finished field removed from all pols
    pruning for pending transactions polls, "finished" flag removed from phased txs HTTP API, delete operation for VersionedValuesTable
    fix for bug with dupes in pending poll signers table
    voting on polls  & phased transactions by MS_COIN implemented (raw, could be buggy!)
    optimized query for finishing 2-phased transactions
    todos fix: visibility, inlining & other small refactoring
    db issues fixes, includeVoters parameter in VS Http API, phasing transactions commit/rollback fixes
    removing or rollback / commit methods from interfaces
    pending_transactions_signers -> pending_transaction_signer, finish -> finish_height for polls
    database tables / fields renaming, NxtDbVersion case 137 fix
    getPendingTransactionVotesCount, todos fixed
    reviewed the VS and phasing code, added TODOs
    GetAccountPendingTransactionToSignIds implementation
    whitelists/blacklists in another table, checks for minbalance/lists
    Merge branch 'develop' into voting_2phased
    
    Conflicts:
            src/java/nxt/Constants.java
            src/java/nxt/NxtDbVersion.java
            src/java/nxt/TransactionProcessorImpl.java
    GetAccountPendingTransactionIds
    blacklist implemented for 2-phased transactions, some validation added to vs/2ptxs
    unsorted voters array bug fixed, poll fee set to 50 nxt
    poll classes renaming
    account_id bug fixed in Poll(voting system), multivoting in phased transactions implemented(not well-tested!)
    persistence for 2-phased votes, votecounting fixed for by-asset & by-balance, possibleVoters persistence bugfix
    deferred attachment applying, voters whitelist, some unnecessary/fixed todos have been deleted
    some todos fixed or deleted as outdated, voting system fixes(now passing all existing tests)
    attachment loading fix, db fixes, after-merge fixes
    2phased impl mostly done
    DbKey optimizations
    updated copyright year
    ExchangeRequest derived object and exchange_request table
    updated copyright year
    added retrievePrunedTransaction API
    use AFTER_BLOCK_ACCEPT event instead
    debug logging, no-op for taggedDataExtend restore
    Don't log account change if scanning and block height less than initial height
    Add RetrievePrunedData API
    Account ledger support
    reject some peer requests and don't process transactions while blockchain download is in progress
    added copyright notice headers
    also check announced address before send, do not remove peer when address not resolvable
    more debug logging
    improved TransactionNotAcceptedException logging
    trimDerivedTables debug API
    fixed phasing finish height validation, cleaned up phasing and voting constants
    fixed some IntelliJ inspections
    minor
    same block and transaction validation on push and validating rescan, added rescan after shutdown option
    add the cause exception to the TransactionNotAcceptedException, when caused by exception
    save scan status in database to continue rescan until successfully completed
    moved control of starting and stopping blockchain download outside of the scan method
    minor fixes while reviewing the code
    allow historical queries if data still available, added optional height parameter to getAssetAccounts, added getAccountLessors with a height parameter
    removed isDownloading because it can often be wrong
    More MS unit tests and bug fixes
    use versioned table for unconfirmed transactions
    optimization
    added validate option to Scan request
    added Debug API requests for triggering rescan, reset, and rollback
    added BlockchainProcessor.isDownloading(), do not accept unconfirmed transactions if isDownloading
    block pop-off refactoring, removed BEFORE_BLOCK_UNDO event
    refactoring
    added BEFORE_BLOCK_ACCEPT event to make DebugTrace comparable with feature/db branch
    added BEFORE_BLOCK_ACCEPT event to help with logging of guaranteed balances
    set isScanning flag during re-scan
    also keep track of lastBlockchainFeederHeight
    full hash referenced transactions
    DGS refactoring
    better handling of invalid transactions during block generation, always remove from unconfirmed pool
    better handling of invalid transactions during block generation, always remove from unconfirmed pool
    added BEFORE_BLOCK_APPLY and BEFORE_BLOCK_UNDO events, added Block.undo()
    added rescan events
    cosmetic clean up
    clean up
    define Listeners for Logger and for Blockchain scan, added Observable interface
    blockchain refactoring
    updated copyright year
    immediate release of approved phased transactions when possible
    added copyright notice headers
    renamed pending to phased/phasing
    fixed some IntelliJ inspections
    allow phasing without voting
    fixed validation of phased transactions, removed immediate release on vote feature
    fees refactoring, phasing fees
    minor refactoring
    renamed PollCounting to VoteWeighting
    moved out the counting logic to PollCounting
    Constants.VOTING_MINBALANCE_UNDEFINED removed
    formatting
    purge votes for polls that finished before max rollback height, as their weight can no longer be calculated
    renamed finishBlockHeight to finishHeight
    count poll votes at the smaller of current height or finish height
    renamed MS_COIN to CURRENCY
    optimization
    minor
    assetId -> holdingId in VS & 2PT, min balance model, referential integrity contstraint fix for poll, createPoll refactoring with ParameterParser, better poll validation
    isFinished method removed from PendingTransactionPoll, formatting
    optional polls processing, finished field removed from all pols
    voting on polls  & phased transactions by MS_COIN implemented (raw, could be buggy!)
    HTTP API bugfixes, getPollsFinishingAt bugfix
    minBalance is in nqts (VS/2PTs)
    database tables / fields renaming, NxtDbVersion case 137 fix
    getPendingTransactionVotesCount, todos fixed
    TODOs fixes #1
    reviewed the VS and phasing code, added TODOs
    unneccesary todos deleted, code formating, unneccesary exceptions handling removed
    voting system got massive update
    poll classes renaming
    voting constants moved to Constants, getAccounPolls API call, optional account parameter has been added to getPollIds
    persistence for 2-phased votes, votecounting fixed for by-asset & by-balance, possibleVoters persistence bugfix
    deferred attachment applying, voters whitelist, some unnecessary/fixed todos have been deleted
    blockchain reorg issues solved for VS, VS HTTP API switched on
    some todos fixed or deleted as outdated, voting system fixes(now passing all existing tests)
    2phased impl mostly done
    updated copyright year
    do not log db password
    added copyright notice headers
    Support installation by non-priviligied user on Windows
    userdb not yet needed
    renaming
    multiple database support
    updated copyright year
    fix Token validation to check announced account public keys
    Implement file token APIs
    added copyright notice headers
    allow time manipulations for testing, and test forging
    alias transfer bugfixes and clean up
    only enforce canonical signatures and keys for transactions and blocks after NQT_BLOCK
    token processing
    token processing
    set nextBlockId for cached blocks
    checksum 1.7
    logging
    updated copyright year
    added getLinkedPhasedTransactions API
    do not retrieve from peers if not pruned and not expired
    minor
    added retrievePrunedTransaction API
    added checkpoint
    event must be after db transaction end, also clear shufflers on rescan
    use AFTER_BLOCK_ACCEPT event instead
    new features already enabled
    fixed checksum block
    clean up old special case bugs
    handle restore for prunable plain and prunable encrypted attachments on the same transaction
    changelog, more recent checksum
    avoid null pointer
    added more recent checksum
    minor
    skip some transaction validations when below last known checksum, and also don't accept new transactions
    more validation of payload length
    skip some transaction validations when below last known checksum, and also don't accept new transactions
    more validation of payload length
    removed leftover duplicate code
    throttling of unique resource allocation transactions
    check again that finish height is in the future
    immediate release of approved phased transactions when possible
    removed leftover FullTextLucene call
    phasing refactoring
    support limits on duplicates count
    debug logging, no-op for taggedDataExtend restore
    Don't log account change if scanning and block height less than initial height
    do not keep zero balance accounts in account table
    Release read lock after trimming each table
    Merge ledger entries
    Kick off restore if found missing data
    Add RetrievePrunedData API
    Retrieve phased prunable data
    code review, added TODOs, various minor changes
    Merged source updates
    log block id
    replace lambda with method reference
    Use cached thread pool for blockchain download
    expunge referencing unconfirmed transactions before others when needed
    Account ledger support
    log warning on potential clock drift
    commit after each table trim
    use updateLock in block generator
    no need for WHERE clause when scanning all blocks
    also call analyze tables in a separate thread
    ReadWriteUpdateLock support
    revert trimming changes, keep in the same thread
    skip scheduling trimming if previous trimming still running
    trim tables in a separate thread not in transaction
    skip instead of trying to remove invalid transactions
    refactoring to make expected unconfirmed transaction selection same as the one used in generateBlock
    added getExpectedAsk/BidOrders APIs
    use explicit read-write lock for blockchain
    logging
    fix fork switch
    Correctly handle fork confirmations
    only run analyze every 50k blocks during download
    disconnect slow peers during blockchain download
    minor optimization
    do not use weighting when selecting parallel download peers, log download times
    delete blocks above 445000 only
    after VS and Phasing block
    reject some peer requests and don't process transactions while blockchain download is in progress
    fix fork confirmation
    don't yet calculate PHASING_BLOCK checksum
    optimization, made checksums incremental
    trimming in a separate transaction after sending pushed block
    fix compilation
    added copyright notice headers
    keep running the getMoreBlocks thread at 1 s intervals
    fixed IntelliJ inspections, replace some for loops with Iterable.forEach
    do not use streams where unlikely to be of performance benefit
    Halt download if unable to get segment
    Don't retry feeder peer
    Try feeder peer if unable to download blocks from weighted peer
    Process blocks up to an invalid block
    Propagate InterruptedException
    Parallel block download
    allow phasing to be enabled at a different height than voting
    use host only as peer identifier, not host with port
    improved rescan to be able to re-validate prunable transactions
    more debug logging
    Improved diagnostic messages in pushBlock()
    preload prunables before deleting blocks
    improved TransactionNotAcceptedException logging
    better handling of invalid transactions during block generation
    fix downloading of prunable messages with non-default maxPrunableLifetime
    getDataTags, getDataTagCount, getDataTagsLike, verifyTaggedData APIs
    logging
    preload transactions before pop-off
    refactoring
    trimDerivedTables debug API
    prunable message
    prunable message
    enforce timestamp limit for linked transactions same as for referenced
    reduced default nxt.maxRollback, added nxt.trimFrequency
    cleaned up some hardcoded constants
    minor
    minor optimizations
    added Block.getBytes() and bytes() for consistency with the corresponding Transaction methods
    moved account info to a separate table, removed unused message pattern code
    added getAliasesLike and searchAccounts APIs, drop and recreate search indexes on full rescan
    renamed getBytesOrig() to bytes()
    fixed phasing finish height validation, cleaned up phasing and voting constants
    use a private executor for the blockchain download thread only
    minor
    reverted last commit as not really useful
    validate blockchain against default peers when doing rescan with validation
    pre-processing of phased transactions same for push and rescan
    also verify checkpoints when doing a scan with validation
    minor
    same block and transaction validation on push and validating rescan, added rescan after shutdown option
    logging
    removed Transaction.sign and Block.sign methods, replaced TransactionProcessor.parseTransaction with Nxt.newTransactionBuilder
    optimizations
    uncache bytes after signing, optimizations
    optimizations
    minor, exceptions
    java 8 lambdas
    replace some Convert methods with java 8 ones
    schedule scan in addGenesisBlock
    more phasing side effects
    fixed validation of phased transactions, removed immediate release on vote feature
    rescan fix
    after VS block, order transactions by index instead of id during trade processing
    logging
    also rollback after setting last block on start and on failed scan
    repeat popoff in case of exception to ensure derived tables are consistent with blockchain tables; detect and log if inconsistency
    optimization
    keep track of reason for blacklisting
    optimization
    also enable sending blocks earlier than hit time
    improve test
    fixed special case
    forging bugfixes and improvements
    optimization
    also log key height and effective balance in debug trace
    fork resolution during push, do not allow front running in block forging, delay block generation by 20 s
    limit peer networking request and response sizes to prevent out of memory attacks
    split currency table to improve performance
    scan should commit after table rollback
    require at most one fork confirmation when below last checkpoint
    increased synchronized scope to prevent blockchain changes due to forging during fork resolution
    allow creating and signing transactions in absence of blockchain data
    removed pre-MS checks and logic where no longer needed; added a checksum at MS block
    add the cause exception to the TransactionNotAcceptedException, when caused by exception
    minor, better logging
    load last block transactions before popping it off
    check for duplicates should be done after transaction.validate
    separate number of fork confirmations parameter for testnet
    rescan with validate also checks isDuplicate
    keep transactions in popped-off blocks
    minor
    allow pop off of more than max rollback number of blocks, triggering a rescan
    fixed unsetBlock
    adjusted numberOfForkConfirmations
    save scan status in database to continue rescan until successfully completed
    peer handling optimizations, some refactoring, moved FilteringIterator.Filter to nxt.util.Filter
    reduced default to checking 5 other peers
    optimization
    number of fork confirmations configurable by nxt.numberOfForkConfirmations property
    each download of more than 10 blocks will be verified with other peers trying to find a fork with better difficulty
    simplify
    get at most 719 blocks at a time
    undo caching of previousBlock as doing it correctly is more complicated than it is worth
    minor
    caching of previousBlock, better query for expired DGS purchases
    minor, no need to call setPrevious here
    minor
    moved control of starting and stopping blockchain download outside of the scan method
    pause blockchain download during rescan
    pause blockchain download during rescan
    after MS block, the order of transactions in a block gets determined by the forger, instead of by id, default by arrival time
    implemented exclusive and non-exclusive duplicates check
    added currency decimals, optionally include currency name and decimals in getCurrencyTransfers and getExchanges
    exclude SSLv3 protocol
    added includeAssetInfo parameter to getTrades, getAllTrades, getAssetTransfers;
    added includeCounts parameter to getState;
    analyze tables every 5000 instead of 1440 blocks
    make sure derived tables are registered before start
    renaming
    minor fixes while reviewing the code
    multiple database support
    renaming
    run analyze one block after trim
    minor synchronization bug
    unconfirmed transactions don't need to be versioned if they are always deleted before a height change
    keep lastTrimHeight non-negative
    removed extra debug logging
    removed excessive logging
    allow historical queries if data still available, added optional height parameter to getAssetAccounts, added getAccountLessors with a height parameter
    allow time manipulations for testing, and test forging
    removed isDownloading because it can often be wrong
    cleanup, don't clear non-broadcasted transactions on rescan
    Start work on tracing and alignment with develop
    avoid last block being null
    the 15s timestamp drift allowance was deleted by mistake
    debug
    timestamp checking in generate should be consistent with that in push
    recursive rescan not needed; improved own blocks preservation during failed fork switch
    rescan after delete bug
    tests for blockchain download, rescan and rollback
    do not blacklist peers when transaction timestamp in a block is ahead of current time
    Make sure each block allocates different time stamp during tests
    set lastBlockchainFeeder only when lastBlockchainFeederHeight is also set
    also run analyze after a rescan
    analyze tables every 1440 blocks, moved BLOCK_PUSHED and BLOCK_SCANNED event notification outside the db transaction
    allow disabling of specific background tasks for test purposes
    no more Longs
    More MS unit tests and bug fixes
    MS unit tests and bug fixes
    iterable bugs
    generator bugs and optimizations
    changed unconfirmed transaction processing to reduce size of unconfirmed_transaction table
    simplify
    sort unconfirmed transactions using the database, preserve transaction height
    minor refactoring
    reapply unconfirmed transaction during rescan, block pop-off bugfix
    Implement isDuplicate fixes and logging improvements
    less logging
    do a full scan when partial not possible
    minor
    added back rescan events
    more bugs
    bugs
    bugs
    use versioned table for unconfirmed transactions
    optimization
    added validate option to Scan request
    added Debug API requests for triggering rescan, reset, and rollback
    optimizations
    fix transaction handling on pop-off, maybe
    reduce exception logging
    fix exception handling
    update lastBlockchainFeederHeight
    added BlockchainProcessor.isDownloading(), do not accept unconfirmed transactions if isDownloading
    block pop-off refactoring, removed BEFORE_BLOCK_UNDO event
    optimizations, refactoring
    recursive rescan should not start a new transaction
    DbIterator, offset and limit pagination
    trimming of derived tables optional
    trimming of derived objects tables
    refactoring
    Merge validateFee with validate
    amount validation only in CreateTransaction
    Fee calculation fix
    FeeNQT final
    Exception type
    Variable fees - fee is based on 3 levels.
    Old blocks before baseline are not validated (minimum fee is 0)
    Blocks after baseline are validated using old fee
    Blocks after next baseline are validated using new fee
    renamed Transaction.verify to verifySignature and validateAttachment to validate
    minor
    also log block heights
    after DGS block
    removed scan at start
    avoid misleading error message
    minor refactoring
    revert account freezing changes
    retry block generation when failing due to invalid transactions
    this is the rollback version
    minor
    undo account freezing
    try not to have duplicates to save memory
    bugs, preserve unconfirmed transactions during rescan
    null pointer
    fixed bugs in rollback code
    trying to save transactions
    pop-off instead of delete
    Version for forgers who want to do the blockchain reorganization related to BTER hack.
    when forcing revalidation at start, also check that block and transactions bytes and json can be parsed back to the same block/transaction
    limit forkblocks size and request count from a single blockchain feeder while fetching blocks
    skip transactions with wrong version
    debug
    generate block refactoring, use the same timestamp
    version check cleanup
    only log transactions generated on a fork instead of rejecting them
    start recording EC clusterDefiningBlock in transactions at DGS block, enforce EC fork check and TF8 after PK_ANNOUNCEMENT_BLOCK, some refactoring and preparing to merge with develop branch
    debug
    finished accounts in database
    added BEFORE_BLOCK_ACCEPT event to make DebugTrace comparable with feature/db branch
    added BEFORE_BLOCK_ACCEPT event to help with logging of guaranteed balances
    moved nxt.Db to nxt.db.Db
    refactoring, guaranteed balances in database, not finished
    minor
    improved validation exception handling
    debug
    transactions with no recipient really should not have a recipient; bugfixes
    merging with feature/db
    transaction attachments refactoring
    forcing rescan in push block not needed with db transactions
    forcing rescan in push block not needed with db transactions
    Added stubs for currency exchange and minting.
    parallelize startup tasks
    scan same as push, cleanup, unconfirmed balance logging optional
    more error checking
    reworked verification of unconfirmed transactions during block push, updateTotals should no longer be necessary
    Added validation of unconfirmed MS transaction attachments.
    Grouped NXT balance and asset quantities into a superbalance.
    hubs in database
    Added Currency.
    orders in database
    database transactions
    try pop-off before rescan
    try pop-off before rescan
    Added Economic Clustering.
    minor
    improve rescan logic
    minor
    added option to force re-validation of existing blocks at start; moved Generator.clear and transactionProcessor.clear after the re-scan
    more rescans avoiding
    avoid unneeded scans
    fork fix
    debug
    clear generator state on rescan
    revert
    delete before undo
    checksum at NQT_BLOCK
    post-nqt bugs
    minor
    don't run generate while scanning
    set isScanning flag during re-scan
    also keep track of lastBlockchainFeederHeight
    enforce referenced transaction chain length limit of 60 days and 10 transactions
    fixed ugly forking bug
    fixed ugly forking bug
    fixed ugly forking bug
    undo of leasing should trigger a rescan
    minor
    minor
    backwards compatibility for referenced transactions, testnet checkpoint at NQT_BLOCK, REFERENCED_TRANSACTIONS_FULL_HASH_BLOCK
    merged develop
    merged develop
    fully remove NXT amounts after NQT_BLOCK
    fully remove referencedTransactionId after NQT_BLOCK
    use NQT_BLOCK for payload size limit change
    minor
    minor
    referenced transactions not in the same block
    also validate block version
    full hash referenced transactions
    validation has to be done during scan, not in DbVersion
    DGS refactoring
    only enforce canonical signatures and keys for transactions and blocks after NQT_BLOCK
    enforce canonical signatures and public keys
    removed NXT and INT JSON properties, removed support for NXT and INT http parameters, enabled running on main net too
    fractional quantities
    JSON representation is now use case specific, different for http API and peer to peer communication, and no longer part of the Block and Transaction APIs;
    define JSON represenations for http API in a signle place for consistency;
    always return amounts in both NXT and NQT, the amounts in NXT represented in the JSON as Strings
    better handling of invalid transactions during block generation, always remove from unconfirmed pool
    better handling of invalid transactions during block generation, always remove from unconfirmed pool
    minor
    NQT
    do a one-time validation in DbVersion instead
    added Asset Transfer comment field; verify blocks and transactions on first scan; don't rely on db triggers when deleting multiple blocks
    return error for double spending transactions and do not re-broadcast them
    added BEFORE_BLOCK_APPLY and BEFORE_BLOCK_UNDO events, added Block.undo()
    Added DigitalGoodsStore.java and some basic OOP stuff.
    sign no longer fails
    applied Curve25519 patch from DoctorEvil
    more attachment validation, delete bad blocks already in the database
    remove forging code no longer in use
    fix handling of transactions with identical timestamps
    moved constants to a separate class so that custom properties can be used to set them
    minor renaming
    fix unconfirmed balance calculation
    revert stale block send limit to 15
    added all changelogs
    increased stale block sending limit because block generation is slow
    new transaction timestamp is always current time, no need to supply as parameter
    fix handling of unconfirmed balances and asset balances and undoing of asset transactions
    added rescan events
    fixed UI handling of myTransactions
    init improvements
    more efficient full reset
    cosmetic clean up
    null pointer
    clean up
    removed excessive debug logging
    removed excessive debug logging
    define Listeners for Logger and for Blockchain scan, added Observable interface
    blockchain refactoring
    split Blockchain class
    don't log harmless NotYetEnabledExceptions
    drop invalid transactions instead of blacklisting peers;
    enforce transaction validation before block generation and before block acceptance because the validation conditions may have changed since the Transaction was constructed
    Block and Transaction interfaces, not finished
    refactoring of Peer, User, Api, Nxt
    embedded jetty
    Added "getTrades" API request.
    renamed convert methods with more explicit names, optimized
    fixed a bug introduced in the last refactoring
    minor
    block events don't need to use a List
    simplify
    simplified block and transaction construction, made block.transactionIds and block.blockTransactions unmodifiable Lists
    debug
    Added Voting System.
    prevent duplicate account key attack
    debug
    get rid of index
    further optimized getMilestoneBlockIds
    caching JSON in Block object doesn't help when using a database
    minor optimization
    don't sort transactions when not needed
    don't blacklist peers only because of timestamp
    optimize database queries
    drop support for old getMilestoneBlockIds protocol
    listeners
    fixed generateBlock broken by the last refactoring
    improved getMilestoneBlockIds
    handle out of order errors
    optimized getMilestoneBlockIds, refactoring getMoreBlocks and generateBlock threads
    minor
    minor cleanup
    don't resend generated blocks and transactions to avoid possible privacy leak
    made block.payloadHash and generationSignature final
    height setting bug
    fixed bad merge
    improved handling of blacklisting, ignore http json requests from blacklisted peers
    improved handling of blacklisting, ignore http json requests from blacklisted peers
    avoid potential null pointers
    blacklist peers on bad block rejection
    blacklist peers on bad block rejection
    debug
    debug
    better debugging of block push failures, better transaction timestamp validation
    debug
    debug
    better debugging of block push failures, better transaction timestamp validation
    preserve the broken guaranteedBalance calculation until block 64000 to prevent a fork
    preserve the broken guaranteedBalance calculation until block 64000 to prevent a fork
    also log to a file
    peer address validation
    peer address validation
    set block transactions during deserialization too
    fix purging of expired transaction hashes
    fix purging of expired transaction hashes
    merged lastBytes fix from 0.5.12
    fixed transaction hash validation
    purge expired hashes in block.apply
    enforce deadline less than 1440 for new transactions
    purge expired hashes in block.apply, make sure transaction blockId is always set
    fixed transaction hash validation
    enforce deadline less than 1440 for new transactions
    merged lastBytes fix from 0.5.12
    todo
    minor
    optimized GetMilestoneBlockIds
    DbIterator AutoCloseable
    more optimizations, added methods to filter blocks and transactions by account
    optimizations
    optimizations
    bug
    optimizations, added index on block.height
    optimization
    finished database transition, no more serialized files support
    minor
    don't blacklist peers when validation fails because of a not yet enabled feature
    null pointer
    ignore pushes of future blocks and transactions
    validation and debugging
    fixed validation, NxtException, partial undo support
    enforce transaction and attachment validation
    more API cleanup, removed extra conversion to/from ByteBuffer
    API cleanup
    encapsulate fields
    minor
    removed unused code
    also clear Assets and Orders on rescan, some API refactoring in progress
    minor transaction validation cleanup
    fixed bug in double processing of genesis block
    more cleanup
    use Longs for id's, a lot of cleanup
    more cleanup
    transaction type refactoring
    transaction type refactoring
    more minor json optimizations
    json optimizations, not finished
    minor
    finished doGet and doPost switch refactoring
    doGet switch statement refactoring, not done yet
    moved blockchain init out of Nxt servlet
    moved background thread definitions out of Nxt servlet
    added Blockchain class
    moved Attachment to top level
    backwards compatible with 0.5.9 serialized forms
    moved all classes to separate files
    Hardfork coming - commit and update to 1.7.4
    DbKey optimizations
    updated copyright year
    added copyright notice headers
    minor optimizations
    NXT-PLUS in a single commit
    added getAliasesLike and searchAccounts APIs, drop and recreate search indexes on full rescan
    phasing for ordinary payment, messages, aliases
    added getAccountAssetCount, getAliasCount, getDGSGoodsCount, getDGSGoodsPurchaseCount, getDGSPurchaseCount APIs
    minor
    minor
    Implemented "Alias Delete" transaction type.
    sorting
    refactoring
    no more Longs
    performance, reduce number of Strings created
    optimizations
    bug
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    DbIterator, offset and limit pagination
    trimming of derived objects tables
    refactoring
    renaming
    DbKey, DbKeyFactory, removed Link tables
    refactoring
    removed undo
    use null recipient instead of Genesis for Alias sell to anyone transactions
    cache database objects during transactions
    refactoring, guaranteed balances in database, not finished
    accounts in database, not finished
    merging with feature/db
    minor
    refactoring
    orders in database
    trades in database
    assets in database, refactoring
    aliases in database
    better to preserver alias id even when ownership changes
    cleaned up the Aliases API
    undo alias assignment possible when no re-assignment has been done
    alias transfer bugfixes and clean up
    alias transfer - alpha
    remove possibly wrong overrides of equals, enforce unique objects, made some methods package-local
    aliases optimization
    aliases optimization
    more API cleanup, removed extra conversion to/from ByteBuffer
    encapsulate fields
    getState show number of unlocked accounts, minor
    more cleanup
    use Longs for id's, a lot of cleanup
    doGet switch statement refactoring, not done yet
    moved all classes to separate files
    use unconfirmed transactions cache
    updated copyright year
    test max shuffling size, set shuffling processing full size as 1/2 of real full size
    getTaggedDataExtendTransactions API
    include expired prunable JSON in API transaction JSON, if available
    added copyright notice headers
    refactoring
    renamed lostTransactions to waitingTransactions, undo UnconfirmedTransaction.isNotCurrentlyValid and use a limit on arrival timestamp instead
    fixed processing of unconfirmed transactions, added getAllBroadcasted and getAllLostTransactions debug APIs
    use prunableAttachmentJSON parameter in broadcastTransaction, add prunableAttachmentJSON in signTransaction and getTransactionBytes response, Nxt.newTransactionBuilder(bytes,prunableAttachmentJSON)
    always include the hash in the json, but ignore it if both hash and data are included
    getTaggedData, getAccountTaggedData, searchTaggedData APIs, bugfixes
    allow limiting unconfirmed transaction pool size
    refactoring
    cleanup
    prunable encrypted messages
    prunable message
    prunable message
    NXT-PLUS in a single commit
    renamed getBytesOrig() to bytes()
    removed Transaction.sign and Block.sign methods, replaced TransactionProcessor.parseTransaction with Nxt.newTransactionBuilder
    uncache bytes after signing, optimizations
    added Transaction.getValidationHeight()
    defer apply for all appendixes in phasing; rename TwoPhased to Phasing; add "phasing" prefix
    Merge branch 'develop' into voting_2phased
    
    Conflicts:
            html/ui/index.html
            html/ui/js/nrs.modals.transaction.js
            html/ui/js/nrs.transactions.js
            src/java/nxt/Account.java
            src/java/nxt/Constants.java
            src/java/nxt/Nxt.java
            src/java/nxt/NxtDbVersion.java
            src/java/nxt/TransactionDb.java
            src/java/nxt/TransactionImpl.java
            src/java/nxt/TransactionProcessorImpl.java
            src/java/nxt/db/DbClause.java
            src/java/nxt/db/DbIterator.java
            src/java/nxt/http/APIServlet.java
            src/java/nxt/http/APITag.java
            src/java/nxt/http/CreateTransaction.java
            src/java/nxt/http/JSONData.java
            src/java/nxt/http/JSONResponses.java
            src/java/nxt/util/Convert.java
    after MS block, the order of transactions in a block gets determined by the forger, instead of by id, default by arrival time
    DbKey optimizations
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    fixed some IntelliJ inspections
    phasing for MS offers
    more phasing side effects
    restrict exchange offer supplies not to exceed total limits
    added availableOnly parameter to getSellOffers and getBuyOffers, to return offers with non-zero supply and limit only
    minor
    after MS block, the order of transactions in a block gets determined by the forger, instead of by id, default by arrival time
    replaced getAllOffers with getBuyOffers and getSellOffers, added getOffer, offer queries optimizations
    refactoring
    make sure DbIterators are closed
    optimizations
    rename CurrencyBuy and CurrencySell to CurrencyBuyOffer and CurrencySellOffer
    more fixes and notes, not finished
    more fixes and notes, not finished
    more fixes and notes, not finished
    Exchange offer validations and naming change
    Complete tracing creation and verification (not tested yet), replace Long with long in MS code
    Merge develop into feature/ms
    More MS unit tests and bug fixes
    port currency exchange to database and support height for versioned tables
    updated copyright year
    added getReferencingTransactions API
    phased transactions API improvements
    performance optimization, avoid querying database tables when only accountId or other id is needed
    Merged source updates
    ReadWriteUpdateLock support
    added getExpectedAsk/BidOrders APIs
    use explicit read-write lock for blockchain
    added copyright notice headers
    added getBlockchainTransactions API, deprecated getAccountTransactions and getAccountTransactionIds
    Add 'limit' and 'blockIds' parameters to GetNextBlocks
    phasing for ordinary payment, messages, aliases
    renaming
    "twoPhased" filter for GetAccountTransaction(Id)s
    added withMessage parameter to getAccountTransactions and getAccountTransactionIds to return transactions with message only
    getAccountBlockCount API
    added getBlocks API
    added timestamp parameter to getBlock API
    no more Longs
    added getAccountBlocks, with firstIndex/lastIndex pagination, order DESC
    added height parameter to getBlock
    added numberOfConfirmations parameter to getAccountTransactions APIs
    use block timestamp instead of transaction timestamp in Blockchain.getTransactions
    refactoring, guaranteed balances in database, not finished
    merging with feature/db
    use NULL in the db for no-recipient transactions, added GetAccountTransactions, sort by timestamp desc, added fromIndex toIndex parameters
    merged develop
    full hash bugfixes, allow finding transaction by full hash, return full hash in the JSON
    fixed NQT transaction signing, allow fractional amounts after NQT_BLOCK
    added getBlocks and getTransactions using PreparedStatement, made Db.getConnection public
    added block_timestamp to the transaction table, added Transaction.getBlockId() and Transaction.getBlockTimestamp() which should be used for better performance instead of having to load the Block from the database to get them;
    store transaction hashes in the transaction table and make them available using Transaction.getHash() and in the JSON returned from getTransaction API;
    enable transaction lookup based on hash, as an optional parameter to the getTransaction API
    blockchain refactoring
    split Blockchain class
    don't log harmless NotYetEnabledExceptions
    drop invalid transactions instead of blacklisting peers;
    enforce transaction validation before block generation and before block acceptance because the validation conditions may have changed since the Transaction was constructed
    Block and Transaction interfaces, not finished
    refactoring of Peer, User, Api, Nxt
    embedded jetty
    Added "getTrades" API request.
    renamed convert methods with more explicit names, optimized
    fixed a bug introduced in the last refactoring
    minor
    block events don't need to use a List
    simplify
    simplified block and transaction construction, made block.transactionIds and block.blockTransactions unmodifiable Lists
    debug
    Added Voting System.
    prevent duplicate account key attack
    debug
    get rid of index
    further optimized getMilestoneBlockIds
    caching JSON in Block object doesn't help when using a database
    minor optimization
    don't sort transactions when not needed
    don't blacklist peers only because of timestamp
    optimize database queries
    drop support for old getMilestoneBlockIds protocol
    listeners
    fixed generateBlock broken by the last refactoring
    improved getMilestoneBlockIds
    handle out of order errors
    optimized getMilestoneBlockIds, refactoring getMoreBlocks and generateBlock threads
    minor
    minor cleanup
    don't resend generated blocks and transactions to avoid possible privacy leak
    made block.payloadHash and generationSignature final
    height setting bug
    fixed bad merge
    improved handling of blacklisting, ignore http json requests from blacklisted peers
    improved handling of blacklisting, ignore http json requests from blacklisted peers
    avoid potential null pointers
    blacklist peers on bad block rejection
    blacklist peers on bad block rejection
    debug
    debug
    better debugging of block push failures, better transaction timestamp validation
    debug
    debug
    better debugging of block push failures, better transaction timestamp validation
    preserve the broken guaranteedBalance calculation until block 64000 to prevent a fork
    preserve the broken guaranteedBalance calculation until block 64000 to prevent a fork
    also log to a file
    peer address validation
    peer address validation
    set block transactions during deserialization too
    fix purging of expired transaction hashes
    fix purging of expired transaction hashes
    merged lastBytes fix from 0.5.12
    fixed transaction hash validation
    purge expired hashes in block.apply
    enforce deadline less than 1440 for new transactions
    purge expired hashes in block.apply, make sure transaction blockId is always set
    fixed transaction hash validation
    enforce deadline less than 1440 for new transactions
    merged lastBytes fix from 0.5.12
    todo
    minor
    optimized GetMilestoneBlockIds
    DbIterator AutoCloseable
    more optimizations, added methods to filter blocks and transactions by account
    optimizations
    optimizations
    bug
    optimizations, added index on block.height
    optimization
    finished database transition, no more serialized files support
    minor
    don't blacklist peers when validation fails because of a not yet enabled feature
    null pointer
    ignore pushes of future blocks and transactions
    validation and debugging
    fixed validation, NxtException, partial undo support
    enforce transaction and attachment validation
    more API cleanup, removed extra conversion to/from ByteBuffer
    API cleanup
    encapsulate fields
    minor
    removed unused code
    also clear Assets and Orders on rescan, some API refactoring in progress
    minor transaction validation cleanup
    fixed bug in double processing of genesis block
    more cleanup
    use Longs for id's, a lot of cleanup
    more cleanup
    transaction type refactoring
    transaction type refactoring
    more minor json optimizations
    json optimizations, not finished
    minor
    finished doGet and doPost switch refactoring
    doGet switch statement refactoring, not done yet
    moved blockchain init out of Nxt servlet
    moved background thread definitions out of Nxt servlet
    added Blockchain class
    moved Attachment to top level
    backwards compatible with 0.5.9 serialized forms
    moved all classes to separate files
    updated initial peers
    checksum 1.7
    do not log to account ledger if more than trimKeep blocks behind last known block
    voting and phasing hard fork block is same, cleanup
    DbKey optimizations
    updated default initial peers
    updated copyright year
    updated version, renamed Tagged Data to Data Cloud
    more testnet rollback required
    checksum block
    added checkpoint
    blacklist old version peers on testnet
    remove old message length constant
    blacklist versions before 1.7
    increased max shuffling registration period to one week
    fixed checksum block
    testnet shuffling block 483000, mainnet 621000
    switch back to production testnet, use SHUFFLING_BLOCK for all hardfork changes
    correct insufficient fees
    changelog, more recent checksum
    bugs
    increased testnet shuffling registration period to 1440 too
    adjusted some fees
    added more recent checksum
    do not count the AES 16 bytes initialization vector when determining encrypted data fee
    new fees
    skip some transaction validations when below last known checksum, and also don't accept new transactions
    test max shuffling size, set shuffling processing full size as 1/2 of real full size
    skip some transaction validations when below last known checksum, and also don't accept new transactions
    account properties
    singleton assets
    limit of 1000 NXT on min forging balance
    set new base target calculation block to 438000 on testnet
    new base target adjustment
    updated default known peers
    asset delete block same as coin shuffling block
    made deletion of finished shufflings optional
    testnet shuffling constants
    separate height deadlines for each shuffling phase, skipping full blocks
    more shuffling validation
    refactoring, use byte[][] instead of serializing encrypted data, store recipient keys in issuer data field
    require min shuffling amount of 1000 NXT and always also shuffle this amount of NXT when shuffling MS currency
    fixed public key setting, do not log key height
    Asset delete support
    GetChatList and GetChatMessages API
    shuffling block
    updated initial known peers
    do not use streams
    testing
    trim tables in a separate thread not in transaction
    after VS and Phasing block
    changelog
    added copyright notice headers
    Unit tests for SendMoney, SendMessage and LeaseBalance
    allow phasing to be enabled at a different height than voting
    on testnet 1.4 should be blacklisted
    added channel field to tagged data
    force rescan
    last block
    MAX_PRUNABLE_LIFETIME should be Integer.MAX_VALUE when pruning is not enabled
    MAX_PRUNABLE_LIFETIME should be Integer.MAX_VALUE when pruning is not enabled
    limit DGS goods delivery length to 1000 bytes after VS block
    last block
    fix downloading of prunable messages with non-default maxPrunableLifetime
    improved tagged data extending
    allow forcing inclusion of prunables even if expired
    removed server side check for minimum prunable length
    prunable tagged data
    reduced DGS delivery size to the pre-VS default
    changelog
    allow keeping prunable data longer
    minor refactoring
    24 h prunable expiration on testnet
    minor
    cleanup
    prunable encrypted messages
    prunable message
    prunable message
    changed back to 6874 testnet, cleaned up new NxtDbVersion steps
    enforce timestamp limit for linked transactions same as for referenced
    by-hash voting (pay on revealed secret)
    reduced default nxt.maxRollback, added nxt.trimFrequency
    cleaned up some hardcoded constants
    added by-transaction voting model (linked transactions)
    reduced MAX_PHASING_VOTE_TRANSACTIONS to 10
    minor optimizations
    no need to define min_poll_duration as constant
    fixed phasing finish height validation, cleaned up phasing and voting constants
    updated last known block
    increased max votes in an approval transaction to 20, changed fee, fixed some height checks in case of phasing
    optimization, restrict voting range to prevent overflow
    set min vote duration to 1
    made DGS delivery fee size based too, after the first 10240 bytes
    Merge remote-tracking branch 'origin/develop' into feature/cs and fix shuffling unit test
    variable size arbitrary and encrypted messages with size based fee
    set TWO_PHASED_BLOCK same as VOTING_SYSTEM_BLOCK and disable phased transactions before that
    minor
    removed blacklist
    changelog
    changelog
    refactoring, implement voting models as enum
    moved out the counting logic to PollCounting
    defer apply for all appendixes in phasing; rename TwoPhased to Phasing; add "phasing" prefix
    trimming settings deleted
    also enable sending blocks earlier than hit time
    more error logging
    forging bugfixes and improvements
    Constants.VOTING_MINBALANCE_UNDEFINED removed
    optimization
    do the deletion of old votes in vote table trim instead
    renamed MS_COIN to CURRENCY
    changelog
    fix off by one error in dividend payment transaction validation, and increased default max rollback to 1441
    changelog
    assetId -> holdingId in VS & 2PT, min balance model, referential integrity contstraint fix for poll, createPoll refactoring with ParameterParser, better poll validation
    minor
    optional polls processing, finished field removed from all pols
    pruning for pending transactions polls, "finished" flag removed from phased txs HTTP API, delete operation for VersionedValuesTable
    removed pre-MS checks and logic where no longer needed; added a checksum at MS block
    changelog
    HTTP API bugfixes, getPollsFinishingAt bugfix
    max 2 votes for pending txs multivoting
    changelog
    changelog
    Variable fee framework usage for polls
    ParameterParser usage for VS / 2PTs
    Merge branch 'develop' into voting_2phased
    
    Conflicts:
            html/ui/index.html
            html/ui/js/nrs.modals.transaction.js
            html/ui/js/nrs.transactions.js
            src/java/nxt/Account.java
            src/java/nxt/Constants.java
            src/java/nxt/Nxt.java
            src/java/nxt/NxtDbVersion.java
            src/java/nxt/TransactionDb.java
            src/java/nxt/TransactionImpl.java
            src/java/nxt/TransactionProcessorImpl.java
            src/java/nxt/db/DbClause.java
            src/java/nxt/db/DbIterator.java
            src/java/nxt/http/APIServlet.java
            src/java/nxt/http/APITag.java
            src/java/nxt/http/CreateTransaction.java
            src/java/nxt/http/JSONData.java
            src/java/nxt/http/JSONResponses.java
            src/java/nxt/util/Convert.java
    AE_2 block not needed
    testnet ms block
    put back testnet ports and peers
    minBalance is in nqts (VS/2PTs)
    updated initial known peers
    blacklist old version peers
    changelog
    blacklist old version peers
    optionally include full peer info in getPeers
    Changed Peers page to use new API call, improving performance
    MS block 136500 on MS testnet
    1.4.0e testnet on ports 2874, 2875, 2876
    TODOs fixes #1
    reviewed the VS and phasing code, added TODOs
    changelog, minor
    Unit tests - leasing
    changelog
    whitelist&blacklist sizes moved to Constants.java
    minor
    variable fees for currency issuance
    Shuffling - code review pass 1 - add todo items
    Implementing remaining pieces of the 'dividend payment' transaction type.
    blacklist implemented for 2-phased transactions, some validation added to vs/2ptxs
    voting system got massive update
    changelog, updated known peers
    merged in the server-side version of the merchant account message pattern feature, may need more testing
    fixed isDuplicates for aliasDelete, enable alias delete at MS block
    unsorted voters array bug fixed, poll fee set to 50 nxt
    voting constants moved to Constants, getAccounPolls API call, optional account parameter has been added to getPollIds
    account_id bug fixed in Poll(voting system), multivoting in phased transactions implemented(not well-tested!)
    Implemented "Alias Delete" transaction type.
    Work on APIs and transaction types
    exclude SSLv3 protocol
    blockchain reorg issues solved for VS, VS HTTP API switched on
    some todos fixed or deleted as outdated, voting system fixes(now passing all existing tests)
    minor fixes while reviewing the code
    changelog
    2phased impl mostly done
    updated default known peers and last known block
    added another load test, sort account lessors by id too
    Added support of dividend payment transactions.
    minor
    1. Increase units per mint to 0.01% of total supply (see Constants)
    2. ApplyAttachment() no longer depends on CurrencyType in preparation for adding currency capabilities
    made maxRollback a property
    define a known most recent block in Constants
    set DGS block to 77341 for testnet
    Disable VS and Hub Announcement on testnet and removed unfinished code that is not production ready from 1.3. This will cause a testnet reset to block 77341.
    Currency Reserve unit tests and fixes to the crowd funding system
    use versioned table for unconfirmed transactions
    Completed TransactionType code.
    Added attachment fields.
    Fee calculations - remove hardcoded asset fee
    moved DGS block to 213000
    debug
    added EC fields to transaction json too, renamed to ecBlockId, ecBlockHeight
    fixed transaction bytes size
    start recording EC clusterDefiningBlock in transactions at DGS block, enforce EC fork check and TF8 after PK_ANNOUNCEMENT_BLOCK, some refactoring and preparing to merge with develop branch
    cleanup, set DGS block to 205000, enforce public key announcement only after block 210000, allow running on main net
    Implemented minting.
    attachment versioning
    merging with feature/db
    transaction attachments refactoring
    voting system - pre-final version
    unconfirmed balance fix
    Added validation of unconfirmed MS transaction attachments.
    Grouped NXT balance and asset quantities into a superbalance.
    Added validation of MS attachments.
    Added MS constants.
    encrypted message transaction type
    Added Rule Terminator.
    Added the milestone block for the disabled trap.
    alias transfer bugfixes and clean up
    checksum at NQT_BLOCK
    DGS bugs
    more DGS API
    removed obsolete NotYetEnabled checks; keep HubTerminalAnnouncement transactions disabled on mainnet until TF7
    minor
    backwards compatibility for referenced transactions, testnet checkpoint at NQT_BLOCK, REFERENCED_TRANSACTIONS_FULL_HASH_BLOCK
    DGS not disabled on testnet
    DGS http API, not yet finished
    updated payload max size constants for NQT
    transactions waiting in unconfirmed pool now require 100 NXT refundable deposit
    testnet NQT_BLOCK at 76500, main net NQT_BLOCK 132000, FRACTIONAL_BLOCK 134000, AE 135000
    testnet NQT_BLOCK 76000, lease balance 75000
    testnet NQT_BLOCK at 65000, lease balance at 68000
    set transparent forging block 6 to 130000 on main net
    added leaseBalance http API, enable transparent forging 6 on testnet at block 73000
    setAccountInfo
    finished getNextBlockGenerators refactoring and optimizations
    DGS refactoring
    more cleanup, commented out Phaser as not yet implemented
    define a separate milestone block for turning on fractional amounts, should be after NQT_BLOCK but before asset exchange
    don't hardcode uncertain deadlines
    removed NXT and INT JSON properties, removed support for NXT and INT http parameters, enabled running on main net too
    0.9.0e changelog
    minor
    NQT
    added Asset Transfer comment field; verify blocks and transactions on first scan; don't rely on db triggers when deleting multiple blocks
    moved constants to a separate class so that custom properties can be used to set them
    updated copyright year
    bugs
    added copyright notice headers
    holdingId must be 0 if voting model or minbalance model are by NQT
    by-hash voting (pay on revealed secret)
    added by-transaction voting model (linked transactions)
    fixed some IntelliJ inspections
    allow phasing without voting
    replace some Convert methods with java 8 ones
    minor refactoring
    bugs
    refactoring, implement voting models as enum
    renamed PollCounting to VoteWeighting
    moved common validation to PollCounting.validate
    moved out the counting logic to PollCounting
    Fix run.bat for Windows XP and Windows 2003 by creating the roaming folder under the user folder in case it does not exist
    updated version
    Hardfork coming - commit and update to 1.7.4
    updated copyright year
    next release non-experimental
    updated version, renamed Tagged Data to Data Cloud
    changelog
    changelog
    initialize SecureRandom in a separate thread in parallel
    use a property to control whether strong secure random is used, and test implementation speed before start
    experimental release
    keep track of asset deletes in asset_delete table, added getAssetDeletes API
    prepare for 1.6.2
    next release non-experimental
    updated default known peers
    bugs, optimizations, various changes
    experimental closed source release
    merge fix, will be 1.7
    changelog
    code review, added TODOs, various minor changes
    changelog
    shuffling block
    Account ledger support
    ExchangeRequest derived object and exchange_request table
    Virtual exchange
    revert trimming changes, keep in the same thread
    shutdown order
    trim tables in a separate thread not in transaction
    allow setting socks proxy in properties file
    The system out and err streams can now redirect to the file names specified by nxt.system.out and nxt.system.err Java properties correspondingly when these properties are specified in the Java command line
    changelog
    reject some peer requests and don't process transactions while blockchain download is in progress
    changelog
    print client UI link and copyright notice after start
    fixed IntelliJ inspections
    changelog
    added copyright notice headers
    Unit tests for SendMoney, SendMessage and LeaseBalance
    fixed peer http request content-type, validate that text submitted as bytes can be treated as UTF-8
    fixed peer http request content-type
    changelog
    fixed shutdown order, debug
    remove old announced address from announced addresses map
    fixed processing of unconfirmed ExtendTaggedData transactions, improved json validation
    changelog
    version
    use prunableAttachmentJSON parameter in broadcastTransaction, add prunableAttachmentJSON in signTransaction and getTransactionBytes response, Nxt.newTransactionBuilder(bytes,prunableAttachmentJSON)
    getTaggedData, getAccountTaggedData, searchTaggedData APIs, bugfixes
    prunable tagged data
    Fix opening wallet from tray icon and log system.out and err messages to files in %TEMP% folder when running nxt.exe
    When running as Windows exe allow redirecting the standard out and standard err streams to files
    version
    2874 testnet
    prunable message
    prunable message
    NXT-PLUS in a single commit
    Http API: GetPhasingOnlyControl/SetPhasingOnlyControl
    First simple unit test - set and then get
    minor
    removed Transaction.sign and Block.sign methods, replaced TransactionProcessor.parseTransaction with Nxt.newTransactionBuilder
    java 8 lambdas
    jetty 9.2.9
    do not allow Nxt.init to be called more than once
    changelog
    changelog
    renaming, database indexes
    peer errors handling, disconnect but do not blacklist peers that have blacklisted us
    Separate the logic for enabling the system tray on every desktop from the logic of using the user dir only on Windows desktop - not tested yet
    more error logging
    enforce nxt-default.properties file to match current version
    fork resolution during push, do not allow front running in block forging, delay block generation by 20 s
    Support for Windows service installation and missing resources related to installer
    Initial Support for System Tray icons - status dialog
    limit peer networking request and response sizes to prevent out of memory attacks
    Initial Support for System Tray icons - not done yet
    Support installation by non-priviligied user on Windows
    version
    changelog
    Support creating log folder under the user home folder on Windows
    Do not install Unix specific resources on Windows
    Do not install Windows Java VM on Unix
    Install desktop shortcuts by default
    Add command line property for looking up nxt.properties
    changelog
    refactoring to avoid MintWorker having to intialize blockchain processing classes that it does not need
    allow not logging some property values
    removed pre-MS checks and logic where no longer needed; added a checksum at MS block
    changelog
    changelog
    enforce exchange offer expiration height to be after current blockchain height
    changelog
    restrict exchange offer supplies not to exceed total limits
    changelog
    changelog
    changelog
    updated initial known peers
    log system properties on startup
    reverted MS time multiplier change
    set time multiplier to 6 for MS testnet
    1.4.0e testnet on ports 2874, 2875, 2876
    changelog, minor
    changelog
    voting system got massive update
    poll classes renaming
    persistence for 2-phased votes, votecounting fixed for by-asset & by-balance, possibleVoters persistence bugfix
    Testing and fixing problem in the participant registration code
    minor
    rename CurrencyBuy and CurrencySell to CurrencyBuyOffer and CurrencySellOffer
    minor
    more fixes and notes, not finished
    renaming
    multiple database support
    changelog
    fixed ecBlockId loading
    Eliminate the isUnitTest patch
    unconfirmed transactions don't need to be versioned if they are always deleted before a height change
    renamed Transfer to AssetTransfer
    bugs
    Adapt unit tests to new standard
    added forging tests, refactoring, run each test in a new jvm
    allow time manipulations for testing, and test forging
    More MS unit tests and bug fixes
    Merge branch 'feature/db' into feature/votingsystem
    
    Conflicts:
            src/java/nxt/Attachment.java
            src/java/nxt/DbVersion.java
            src/java/nxt/Generator.java
            src/java/nxt/Poll.java
            src/java/nxt/Vote.java
            src/java/nxt/db/DbTable.java
            src/java/nxt/http/GetActivePollIds.java
    trimming of derived objects tables
    use block timestamp instead of transaction timestamp in Blockchain.getTransactions
    logging
    do not log some common errors
    refactoring
    better handling of startup errors
    after DGS block
    removed scan at start
    revert account freezing changes
    changelog
    this is the rollback version
    undo account freezing
    changelog
    Version for forgers who want to do the blockchain reorganization related to BTER hack.
    removed undo
    changelog
    changelog
    changelog
    changelog
    changelog
    moved nxt.Db to nxt.db.Db
    if not using NxtLogManager, print shutdown messages to System.out
    accounts in database bugs
    cleanup, set DGS block to 205000, enforce public key announcement only after block 210000, allow running on main net
    merging with feature/db
    more error checking
    reworked verification of unconfirmed transactions during block push, updateTotals should no longer be necessary
    unconfirmed balance fix
    changelog
    testnet only
    aliases in database
    Issue 002
    include application name in getState
    Add NxtLogManager to delay logger shutdown
    Use SLF4J for logging
    upgrades from old versions require database reset
    Use SLF4J for logging
    changelog
    avoid unneeded scans
    changelog
    Account.getPublicKey() should return null if key has not been included in a block yet
    minor
    checksum at NQT_BLOCK
    Use SLF4J for logging
    changelog
    more DGS API
    changelog, README
    backwards compatibility for referenced transactions, testnet checkpoint at NQT_BLOCK, REFERENCED_TRANSACTIONS_FULL_HASH_BLOCK
    DGS not disabled on testnet
    use sha256(signature) instead of plain signature for full hash calculation
    full hash referenced transactions
    store peers in the database
    set transparent forging block 6 to 130000 on main net
    added leaseBalance http API, enable transparent forging 6 on testnet at block 73000
    allow custom quote or separator in debug trace
    h2-1.3.176
    0.9.3.1e
    removed NXT and INT JSON properties, removed support for NXT and INT http parameters, enabled running on main net too
    fractional quantities
    JSON representation is now use case specific, different for http API and peer to peer communication, and no longer part of the Block and Transaction APIs;
    define JSON represenations for http API in a signle place for consistency;
    always return amounts in both NXT and NQT, the amounts in NXT represented in the JSON as Strings
    only run on testnet, fixed UI fee adjustment
    minor
    0.8.13 changelog
    NQT
    improvements to DebugTrace, log the event type, log order cancellations, added changelog
    automated parsing and verification of trace output
    debug tracing of account balances and account trades
    allow non-unique asset names;
    added GetAssetsByName API request
    explicitly stop all jetty servers at shutdown
    more attachment validation, delete bad blocks already in the database
    Added validation of DGS transactions.
    moved constants to a separate class so that custom properties can be used to set them
    moved setting of isTestnet to Nxt.Init, to allow overriding it with custom properties
    0.8.9 changelog, AE block limit pushed further
    Added stubs for Digital Goods Store.
    Added the 6th step to TF.
    fixed genesis block timestamp setting in daylight savings time
    fixed genesis block timestamp setting in daylight savings time
    changelog, 0.8.7
    0.8.6
    0.8.5
    added knownBlacklistedPeers parameter;
    allow disabling of DoSFilter and setting maxRequestMs parameter;
    do not try to connect to peers with shareAddress=false
    do not blacklist peers when outgoing connection failed
    cosmetic improvements
    enable use of testnet just by setting nxt.isTestnet=true
    consistent counting of transaction confirmations
    0.8.2e
    also look for nxt-default.properties in location defined by system property
    init improvements
    package as nxt.jar
    allow using https/ssl for the API and the UI, allow custom Properties
    use nxt-default.properties for all defaults
    start background threads after all other initialization is complete
    cosmetic clean up
    define Listeners for Logger and for Blockchain scan, added Observable interface
    blockchain refactoring
    split Blockchain class
    Block and Transaction interfaces, not finished
    refactoring of Peer, User, Api, Nxt
    embedded jetty
    Added Voting System.
    prevent duplicate account key attack
    get rid of index
    fixed setting of Peer connection state, improved display of known and blacklisted peers
    Added a skeleton for Voting System implementation.
    Added ASSET_EXCHANGE_BLOCK.
    avoid null pointers
    another guaranteed balance fix, block 67000
    drop support for old getMilestoneBlockIds protocol
    refactoring for better javadoc
    made block.payloadHash and generationSignature final
    set transaction block in advance to avoid extra db query
    hallmark processing
    hallmark processing
    preserve the broken guaranteedBalance calculation until block 64000 to prevent a fork
    preserve the broken guaranteedBalance calculation until block 64000 to prevent a fork
    also log to a file
    peer address validation
    peer address validation
    version 0.7.0e
    fix purging of expired transaction hashes
    finished database transition, no more serialized files support
    database initialization and update, save and load blocks and transactions
    removed unused code
    getState show number of unlocked accounts, minor
    use Longs for id's, a lot of cleanup
    more cleanup
    minor
    fix TF height bug at block 51000
    finished doGet and doPost switch refactoring
    doGet switch statement refactoring, not done yet
    moved blockchain init out of Nxt servlet
    moved background thread definitions out of Nxt servlet
    added Blockchain class
    moved Attachment to top level
    backwards compatible with 0.5.9 serialized forms
    moved all classes to separate files
    Fixed a bug related to a peer weight.
    minor
    Added transaction re-broadcasting.
    disallow blockId = 0
    Added "getAccountCurrentAskOrderIds" and "getAccountCurrentBidOrderIds".
    minor
    avoid division by zero
    cache block transactions in block.blockTransactions
    blocks and transactions synchronization issues
    made lastBlock AtomicReference
    unsupported protocol bug
    fixed JSONObject concurrent modification bug, removed sendInParallel parameter
    Added "type" and "subtype" filters into "getAccountTransactionIds".
    Declared the genesis account public key as a constant.
    control the size of sendToPeersService with a web.xml parameter, default 3; minor optimizations
    TF-2 at 47000
    use Executor to send to peers in parallel
    renamed method
    limit sendToAllPeers to only sendToPeersLimit parameter, default 10
    fixed setting of Transaction.height, Block.numberOfTransactions not needed
    Added step #2 to TF implementation.
    minor
    ignore all ConnectExceptions on sendJSON
    check that hallmark is parseable on startup
    minor
    Added 4 constants into "getConstants".
    minor, better hallmark error handling
    Added "bytes" into "sendMessage" response.
    jetty 9.1.1.v20140108
    minor
    ignore common connection errors, fix autoboxing error
    Exception handling and logging
    getAccountBlockIds and getAccountTransactionIds now return sorted results
    cache senderAccountId and generatorAccountId to avoid repeated sha256 digests
    minor optimizations
    volatile is enough here
    minor
    Merge remote-tracking branch 'origin/develop' into develop
    
    Conflicts:
            src/java/Nxt.java
    Added balance change calculation.
    Added "getGuaranteedBalance".
    char[] better than String
    JSON and Id caching, memory and performance optimizations in Blocks and Transactions
    set ARBITRARY_MESSAGES_BLOCK to 40000
    experimental
    use parseUnsignedLong everywhere
    define MAX_ASSET_QUANTITY
    Added "getAliasId".
    Added "getAccountBlockIds".
    Improved "getState".
    reviewed Assets code
    Added Arbitrary Messages.
    better recipient account number validation
    better recipient account number validation
    validation, do not allow negative recipient account numbers
    fix blockchain rescan bug, clear unconfirmedTransactions on rescan
    prevent version UI spam
    improved numberOfTransactions and payloadLength validations
    Added validation of block.payloadLength and block.numberOfTransactions to counteract a DoS-attack.
    Answered questions in TODOs.
    simplify
    trying to revert failed merge
    merged changes from CfB
    whitespace
    minor
    1. Removed possibility to forge blocks with the genesis account.
    2. Removed blacklisting of accounts with an incorrect hallmark.
    3. Removed possibility to "block" accounts by providing a fake public key with the same first 64 bits.
    fixed stuck on hallmarked peers bug
    untested, urgent fix for critical bug https://bitcointalk.org/index.php?topic=397183.msg4343616#msg4343616
    whitespace
    accounts with effectiveBalance < 0 can't forge
    added more transaction.fee and transaction.amount checks
    minor
    checkpoint at block 30000
    account concurrency issues
    networking optimizations
    add cache control headers, only helps with disk cache though; require secret phrase for generating authorization tokens too
    unlocking an account locks out all other instances of the same account
    minor cleanups
    close all streams in finally, cleanup
    concurrent blocks and transactions, cleanup, revert transparent forging limit to 30000
    concurrency optimizations and thread safety fixes
    Nxt.peers concurrent
    transparent forging starting at 32000
    verify secret phrase on sendMoney
    added TODO comments, minor send responses fix
    0.4.8 from CfB
    0.4.7e source
    set nextBlockId for cached blocks
    fixed special case of null subselects
    updated copyright year
    use a separate referenced_transaction table
    added getReferencingTransactions API
    throttling of unique resource allocation transactions
    phased transactions API improvements
    performance optimization, avoid querying database tables when only accountId or other id is needed
    phasing refactoring
    support limits on duplicates count
    Merged source updates
    ReadWriteUpdateLock support
    refactoring to make expected unconfirmed transaction selection same as the one used in generateBlock
    added getExpectedAsk/BidOrders APIs
    use explicit read-write lock for blockchain
    removed some setFetchSize calls
    include expired prunable JSON in API transaction JSON, if available
    fix compilation
    added copyright notice headers
    added getBlockchainTransactions API, deprecated getAccountTransactions and getAccountTransactionIds
    fixed IntelliJ inspections, replace some for loops with Iterable.forEach
    Add 'limit' and 'blockIds' parameters to GetNextBlocks
    fix downloading of prunable messages with non-default maxPrunableLifetime
    allow forcing inclusion of prunables even if expired
    prunable encrypted messages
    prunable message
    prunable message
    cleaned up some hardcoded constants
    hasTransactionByFullHash
    minor optimizations
    fixed IntelliJ compile error
    optimizations
    optimizations
    more lambdas
    phasing for ordinary payment, messages, aliases
    simplify NxtDbVersion
    renaming
    minor
    defer apply for all appendixes in phasing; rename TwoPhased to Phasing; add "phasing" prefix
    "twoPhased" filter for GetAccountTransaction(Id)s
    added withMessage parameter to getAccountTransactions and getAccountTransactionIds to return transactions with message only
    height clause bug
    transaction sort order
    fixed merge
    getAccountBlockCount API
    H2 doesn't use indexes when sorting in oposite direction, need to work around
    added getBlocks API
    added timestamp parameter to getBlock API
    renaming
    multiple database support
    tests for blockchain download, rescan and rollback
    optimizations
    no more Longs
    added getAccountBlocks, with firstIndex/lastIndex pagination, order DESC
    DbIterator, offset and limit pagination
    added height parameter to getBlock
    added numberOfConfirmations parameter to getAccountTransactions APIs
    sort order
    use block timestamp instead of transaction timestamp in Blockchain.getTransactions
    fixed account transactions query
    moved nxt.Db to nxt.db.Db
    refactoring, guaranteed balances in database, not finished
    merging with feature/db
    use NULL in the db for no-recipient transactions, added GetAccountTransactions, sort by timestamp desc, added fromIndex toIndex parameters
    db query optimization again
    optimized db query
    merged develop
    full hash bugfixes, allow finding transaction by full hash, return full hash in the JSON
    fixed NQT transaction signing, allow fractional amounts after NQT_BLOCK
    added getBlocks and getTransactions using PreparedStatement, made Db.getConnection public
    minor renaming
    added block_timestamp to the transaction table, added Transaction.getBlockId() and Transaction.getBlockTimestamp() which should be used for better performance instead of having to load the Block from the database to get them;
    store transaction hashes in the transaction table and make them available using Transaction.getHash() and in the JSON returned from getTransaction API;
    enable transaction lookup based on hash, as an optional parameter to the getTransaction API
    blockchain refactoring
    fixed setting nextBlockId
    set nextBlockId for cached blocks
    voting and phasing hard fork block is same, cleanup
    fixed special case of null subselects
    updated copyright year
    do the clear cache after the delete
    Clear block cache when deleting blocks
    code review, added TODOs, various minor changes
    Merged source updates
    fixed IntelliJ inspections
    minor
    added copyright notice headers
    extendTaggedData API, versioned prunable data
    refactoring
    rollback and truncate cannot be done on prunable tables
    same block and transaction validation on push and validating rescan, added rescan after shutdown option
    removed Transaction.sign and Block.sign methods, replaced TransactionProcessor.parseTransaction with Nxt.newTransactionBuilder
    optimizations
    minor, exceptions
    optimization, do not store redundant public_key records in the database
    optimizations
    fixed merge
    getAccountBlockCount API
    added timestamp parameter to getBlock API
    renaming
    multiple database support
    lazy loading of block transactions
    no more Longs
    prevent bugs
    should not save next_block_id
    minor
    minor, chain exceptions
    added height parameter to getBlock
    removed scan at start
    moved nxt.Db to nxt.db.Db
    bugs
    cleanup
    merging with feature/db
    database transactions
    minor
    NQT
    added Asset Transfer comment field; verify blocks and transactions on first scan; don't rely on db triggers when deleting multiple blocks
    minor renaming
    added block_timestamp to the transaction table, added Transaction.getBlockId() and Transaction.getBlockTimestamp() which should be used for better performance instead of having to load the Block from the database to get them;
    store transaction hashes in the transaction table and make them available using Transaction.getHash() and in the JSON returned from getTransaction API;
    enable transaction lookup based on hash, as an optional parameter to the getTransaction API
    more efficient full reset
    blockchain refactoring
    Block and Transaction interfaces, not finished
    DbKey optimizations
    updated copyright year
    added retrievePrunedTransaction API
    handle restore for prunable plain and prunable encrypted attachments on the same transaction
    allow both prunable plain and prunable encrypted messages
    optimization
    keep the secondary sort on db_id as it is still ok in the common case
    Add RetrievePrunedData API
    Retrieve phased prunable data
    code review, added TODOs, various minor changes
    Merged source updates
    added copyright notice headers
    cleanup
    fix downloading of prunable messages with non-default maxPrunableLifetime
    prunable tagged data
    store transaction timestamp instead of expiration time for prunable messages, improve some indexes
    prunable message count in getState, getAllPrunableMessages API
    allow keeping prunable data longer
    made compression of encrypted messages optional
    improved getPrunableMessages API with optional correspondant account
    getPrunableMessage, getPrunableMessages APIs
    rollback and truncate cannot be done on prunable tables
    prunable encrypted messages
    prunable message
    prunable message
    DbKey optimizations
    updated copyright year
    added copyright notice headers
    fixed some IntelliJ inspections
    added getOrderTrades, improved default sorting in non-versioned tables
    phasing for MS
    refactor to use the getCount methods
    merged develop
    make sure DbIterators are closed
    Add timestamp to currency transfer
    Merge with latest entity DB changes
    Implement CurrencyTransfer, change the term "money" to "currency" where applicable
    simplify
    NotValidException
    more post-hardfork cleanup
    avoid exception in balance leasing validation
    better dividend height error messages
    global publicKey cache
    DbKey optimizations
    updated copyright year
    some NotCurrentlyValid transaction validation cases are now always NotValid
    null pointer
    removed not yet enabled check
    increase lease limit to 65535 blocks
    higher max fee limit needed for balance dependent account control
    max fees at least 3 NXT, show as NXT in error message
    use recipient instead of account everywhere in account properties including for transaction recipient
    rebase fees to SHUFFLING_BLOCK baseline
    new features already enabled
    polls size fee must be 2x
    switch back to production testnet, use SHUFFLING_BLOCK for all hardfork changes
    clean up old special case bugs
    allow limiting max fees and phasing duration for phasing controlled accounts
    keep track of asset deletes in asset_delete table, added getAssetDeletes API
    min/max range value check
    also validate not yet encrypted data length
    allow calculation of sizes and fees for not yet encrypted appendages too
    bugs
    adjusted some fees
    do not count the AES 16 bytes initialization vector when determining encrypted data fee
    new fees
    voting models by-hash and by-transaction not allowed for phasing control
    do not spread back fees for singleton assets
    do not count changing existing alias towards the block duplicates limit
    disallow setting properties of genesis account
    spreading back fees for asset and currency issuance
    throttling of unique resource allocation transactions
    account properties
    singleton assets
    minor fixes
    bugs, optimizations, various changes
    asset delete block same as coin shuffling block
    phasing refactoring
    shuffling assets
    duplicates checks for shuffling transactions
    support limits on duplicates count
    Set event id to transaction id for dividend payment
    do not restore TaggedDataExtend transactions, instead update tagged data tags and timestamps when the TaggedDataUpload is restored
    minor optimization
    fixed public key setting, do not log key height
    minor
    asset quantity fix also in undoAttachmentUnconfirmed
    Add TRANSACTION_FEE account ledger event
    Add RetrievePrunedData API
    Use asset id for unconfirmed dividend payment ledger entry
    Exception in dividend payment attachment if asset not issued yet
    Asset delete review
    do a full rescan instead of trying to fix genesis asset transfers
    code review, added TODOs, various minor changes
    allow deferred attachment encryption for full offline signing and encryption
    Add dividend payment sanity check
    Use initial asset quantity to validate attachment
    Code review
    Handle variable asset quantity when paying dividends
    Disallow asset transfer to genesis block after asset delete enabled
    Asset delete support
    Account ledger support
    after VS and Phasing block
    minor
    added copyright notice headers
    corrected validation height for phased transactions
    better error messages
    refactoring
    fixed IntelliJ inspections, replace some for loops with Iterable.forEach
    no need for custom DGS delivery fee, as allowed delivery size will not be increased
    allow phasing to be enabled at a different height than voting
    added isPhasable to getConstants
    refactoring
    check whether data is utf-8 text only when submitted as bytes
    verify that messages or data declared to be text can indeed be converted to valid UTF-8 strings
    added channel field to tagged data
    require reveal secret when approving by-hash phased transaction
    Improve voting finish height error message
    fixed processing of unconfirmed ExtendTaggedData transactions, improved json validation
    fixed whitelist check
    java 7
    fixed validation of AE cancellation orders
    fixed validation of AE cancellation orders
    fixed validation of AE cancellation orders
    limit DGS goods delivery length to 1000 bytes after VS block
    improved tagged data extending
    extendTaggedData API, versioned prunable data
    getTaggedData, getAccountTaggedData, searchTaggedData APIs, bugfixes
    prunable tagged data
    reduced DGS delivery size to the pre-VS default
    renamed pending to phased/phasing
    allow different hash functions for by-hash phasing
    Improve voting error messages
    by-hash voting (pay on revealed secret)
    cleaned up some hardcoded constants
    added by-transaction voting model (linked transactions)
    allow duplicate votes for phased transactions
    Sub-object for the SetPhasingOnly phasingParams in the JSON attachment
    Test phasing only with account voting
    minor optimizations
    moved account info to a separate table, removed unused message pattern code
    no need to define min_poll_duration as constant
    added TransactionType.isPhasingSafe indication
    fixed phasing finish height validation, cleaned up phasing and voting constants
    Refactored Appendix.Phasing - phasing data handing encapsulated in PhasingParams
    Phasing account control tables - DDL and data access classes
    Phasing AC transaction type and transaction attachment
    fixed some IntelliJ inspections
    allow phasing without voting
    reviewed applyUnconfirmed and undoApplyUnconfirmed for phasing safety, fixed for MS transactions
    dividend payment needs validation relative to current height
    same block and transaction validation on push and validating rescan, added rescan after shutdown option
    logging
    increased max votes in an approval transaction to 20, changed fee, fixed some height checks in case of phasing
    added getPollVote and getPhasingPollVote APIs
    more lambdas
    added Transaction.getValidationHeight()
    also check phasing finish height for AE dividend payment and MS currency issuance
    replace some Convert methods with java 8 ones
    poll fee dependent on number of options, changed numbering of options and votes to allow sorting
    allowsPhasing no longer needed
    phasing for AE orders
    phasing for MS
    phasing
    phasing for asset issuance and asset transfer
    phasing for poll, vote, phasing vote, account info
    phasing for ordinary payment, messages, aliases
    disallow phasing by default
    fixed validation of phased transactions, removed immediate release on vote feature
    fees
    phasing vote fee
    remove some poll restrictions
    check for poll.isFinished also needs to be in validate
    phasing vote fee
    minor
    made DGS delivery fee size based too, after the first 10240 bytes
    fees refactoring, phasing fees
    make sure poll is finished only once
    added phasing_poll_result table
    set TWO_PHASED_BLOCK same as VOTING_SYSTEM_BLOCK and disable phased transactions before that
    minor
    removed blacklist
    add getName to TransactionType and populate getConstants for the types and subtypes dynamically
    use full hash instead of just id to identify transactions being voted for
    Intermidiate Work on GetPlugins
    refactoring, implement voting models as enum
    renaming
    renaming, database indexes
    renamed PollCounting to VoteWeighting
    moved common validation to PollCounting.validate
    moved out the counting logic to PollCounting
    minor
    defer apply for all appendixes in phasing; rename TwoPhased to Phasing; add "phasing" prefix
    some more validation
    GetAccountPendingTransaction, finished field added back to PendingTransactionPoll, TransactionProcessocImpl condition fix, PendingTransactionPoll.getIdsByWhitelistedSigner fix
    2-phased data trimming
    Constants.VOTING_MINBALANCE_UNDEFINED removed
    optimization
    TwoPhased.commit -> release
    renamed finishBlockHeight to finishHeight
    renamed MS_COIN to CURRENCY
    minor cleanup
    optimization, fewer changes to account balance
    minor
    various fixes and improvements
    minor
    fix off by one error in dividend payment transaction validation, and increased default max rollback to 1441
    System.out.println cleared
    minBalanceModel fixes in API, validation, builder
    assetId -> holdingId in VS & 2PT, min balance model, referential integrity contstraint fix for poll, createPoll refactoring with ParameterParser, better poll validation
    2-phased transactions apply & balance changes fix
    isFinished method removed from PendingTransactionPoll, formatting
    prevent duplicate minting transactions in the unconfirmed pool
    removed pre-MS checks and logic where no longer needed; added a checksum at MS block
    disable message pattern feature
    max 2 votes for pending txs multivoting
    PENDING_PAYMENT_VOTE_CASTING moved to messaging
    Variable fee framework usage for polls
    Poll.addPoll refactoring
    Merge branch 'develop' into voting_2phased
    
    Conflicts:
            html/ui/index.html
            html/ui/js/nrs.modals.transaction.js
            html/ui/js/nrs.transactions.js
            src/java/nxt/Account.java
            src/java/nxt/Constants.java
            src/java/nxt/Nxt.java
            src/java/nxt/NxtDbVersion.java
            src/java/nxt/TransactionDb.java
            src/java/nxt/TransactionImpl.java
            src/java/nxt/TransactionProcessorImpl.java
            src/java/nxt/db/DbClause.java
            src/java/nxt/db/DbIterator.java
            src/java/nxt/http/APIServlet.java
            src/java/nxt/http/APITag.java
            src/java/nxt/http/CreateTransaction.java
            src/java/nxt/http/JSONData.java
            src/java/nxt/http/JSONResponses.java
            src/java/nxt/util/Convert.java
    AE_2 block not needed
    no on-vote recalcs for 2-pending transactions with by-asset voting
    finishBlockHeight check has been moved to TransactionType
    one parameter for commit method (twophased appendix)
    minor typos
    isDuplicate for vote casting
    double-check for amount==0 eliminated
    getAccountExchangeRequests refactoring
    GetNextGenerator experiment
    todos fixed: better pending tx validation, json longs read/write, poll_results -> poll_result for  table name
    removing or rollback / commit methods from interfaces
    getPendingTransactionVotesCount, todos fixed
    reviewed the VS and phasing code, added TODOs
    disallow sending messages, selling aliases, and leasing balance, to genesis account, after MS block
    DGS refactoring, moving static methods
    using Constants.VOTING_MIN_RANGE_VALUE_LIMIT, Constants.VOTING_MAX_RANGE_VALUE_LIMIT in validation
    double voting prevention
    Unit tests - leasing
    Merge branch 'develop' into voting_2phased
    
    Conflicts:
            src/java/nxt/Constants.java
            src/java/nxt/NxtDbVersion.java
            src/java/nxt/TransactionProcessorImpl.java
    only check dgs purchase isDuplicate after MS block
    no duplicate restriction needed for DGS feedback
    merge develop
    renaming
    improve transaction recipientId validation
    unneccesary todos deleted, code formating, unneccesary exceptions handling removed
    variable fees for currency issuance
    check that height parameters is >= blockchainHeight - Constants.MAX_ROLLBACK
    Implementing remaining pieces of the 'dividend payment' transaction type.
    blacklist implemented for 2-phased transactions, some validation added to vs/2ptxs
    added a separate DeleteCurrency transaction and API call
    voting system got massive update
    Implement the shuffling process transaction which implements the shuffling algorithm
    merged in the server-side version of the merchant account message pattern feature, may need more testing
    minor
    fixed isDuplicates for aliasDelete, enable alias delete at MS block
    implemented exclusive and non-exclusive duplicates check
    poll classes renaming
    voting constants moved to Constants, getAccounPolls API call, optional account parameter has been added to getPollIds
    account_id bug fixed in Poll(voting system), multivoting in phased transactions implemented(not well-tested!)
    persistence for 2-phased votes, votecounting fixed for by-asset & by-balance, possibleVoters persistence bugfix
    Implemented "Alias Delete" transaction type.
    removed coin shuffling code
    deferred attachment applying, voters whitelist, some unnecessary/fixed todos have been deleted
    Work on APIs and transaction types
    Work on attachment validation and transaction types
    split exchange transaction and attachments into buy and sell, units always positive
    Initial work on shuffling
    some todos fixed or deleted as outdated, voting system fixes(now passing all existing tests)
    line separators
    more fixes and notes, not finished
    attachment loading fix, db fixes, after-merge fixes
    2phased impl mostly done
    Exchange offer validations and naming change
    merged develop
    Added support of dividend payment transactions.
    Implement CurrencyTransfer, change the term "money" to "currency" where applicable
    more renaming
    renamed Transfer to AssetTransfer
    1. Separate TransactionType MonetarySystem into a separate class to reduce merging problems
    2. Reduce dependency on CurrencyType in preparation for making it an enum set
    Replace CurrencyExchange api with currency buy and sell
    Naming change from *CurrencyBalanceQNT to *CurrencyUnits
    re-organize currency exchange testing
    keep track of asset transfers in a transfer table, added getTransfers API
    Complete tracing creation and verification (not tested yet), replace Long with long in MS code
    Minting tests, minting and reserve increase fixes
    More exchange tests and APIs
    Transaction/persistence fixes due to the new appendage
    no more Longs
    More MS unit tests and bug fixes
    MS unit tests and bug fixes
    Merge branch 'feature/db' into feature/votingsystem
    
    Conflicts:
            src/java/nxt/Attachment.java
            src/java/nxt/DbVersion.java
            src/java/nxt/Generator.java
            src/java/nxt/Poll.java
            src/java/nxt/Vote.java
            src/java/nxt/db/DbTable.java
            src/java/nxt/http/GetActivePollIds.java
    datastructures prototypes are ready
    Simplify currency transfer, add additional APIS, align mint data types across classes
    transaction type & attachment prototypes, Phaser has been deleted
    More work on APIs
    Implement isDuplicate fixes and logging improvements
    fix currency issuance problems
    username
    port currency exchange to database and support height for versioned tables
    use versioned entity tables
    Created currency and account_currency tables.
    Initial work on account balances
    Removed the SuperComplexNumber
    Issuer account
    undo attachment before undo sender account
    Implemented shuffling cancellation.
    Implemented shuffling finalization.
     Improved validation of transactions.
    Implemented shuffling initiation.
    Improved validation of transactions.
    Completed TransactionType code.
    Added shuffling cancellation transaction type.
    Added stubs.
    Fee calculations - remove hardcoded asset fee
    more refactoring
    Merge validateFee with validate
    amount validation only in CreateTransaction
    Fee calculation fix
    FeeNQT final
    Exception type
    Variable fees - fee is based on 3 levels.
    Old blocks before baseline are not validated (minimum fee is 0)
    Blocks after baseline are validated using old fee
    Blocks after next baseline are validated using new fee
    exception handling improvement
    after DGS block
    removed scan at start
    Merge branch 'feature/db' into feature/votingsystem
    removed undo
    avoid forks
    use null recipient instead of Genesis for Alias sell to anyone transactions
    cleanup, set DGS block to 205000, enforce public key announcement only after block 210000, allow running on main net
    allow Appendices to also be validated
    improved validation exception handling
    minor
    bug
    cleanup
    transactions with no recipient really should not have a recipient; bugfixes
    Implemented minting.
    attachment versioning
    merging with feature/db
    Implemented delayed issuance.
    Implemented currency exchange.
    disallow asset transfer comments after DGS block (should use message attachments instead)
    use Arbitrary Message type for encrypted messages too, better parameter names
    transaction attachments refactoring
    more duplicates error enforcements in alias transfer and dgs transactions
    Added stubs for currency exchange and minting.
    use NULL in the db for no-recipient transactions, added GetAccountTransactions, sort by timestamp desc, added fromIndex toIndex parameters
    Renaming of a transaction type.
    Implemented currency issuance, reserve increase/claim, money transfer.
    Refactored CurrencyType.
    Changed a method name.
    todos fixed
    validation fixes
    Added CurrencyType.
    cleanup
    more error checking
    voting system - pre-final version
    Added currency ruleset support.
    added payment with message transaction type
    discount limited to total price, not to single item price
    use real recipient instead of genesis for DGS transactions
    scan same as push, cleanup, unconfirmed balance logging optional
    reworked verification of unconfirmed transactions during block push, updateTotals should no longer be necessary
    unconfirmed balance fix
    refactoring
    digital goods in database
    Improved validation of MS transactions.
    Added block check.
    Added validation of unconfirmed MS transaction attachments.
    Removed redundant code related to assets.
    Grouped NXT balance and asset quantities into a superbalance.
    Fixed a typo.
    hubs in database
    polls and votes in database
    Added validation of MS attachments.
    voting system - alpha(no validation, interface is raw)
    Added Currency.
    orders in database
    DGS refund or feedback possible only after delivery, goods data must not be empty
    Added deserialization of MS transactions.
    Added money exchange transaction.
    aliases in database
    Added support of PoW currency.
    Added stubs for Monetary System transaction subtypes.
    encrypted message transaction type
    bugs
    special handling of empty encrypted notes
    check that discount does not exceed price
    better to preserver alias id even when ownership changes
    allow ridiculously large ask orders
    separate transaction validation from transaction attachment loading
    another check for overflow
    remove Serializable
    undo alias assignment possible when no re-assignment has been done
    alias transfer bugfixes and clean up
    alias transfer - alpha
    removed NotYetEnabled checks for AE
    Account.getPublicKey() should return null if key has not been included in a block yet
    bugs
    only one refund and one feedback allowed per purchase
    DGS now uses AES; finished DGS API; added Account.encryptTo and Account.decryptFrom; added DGS event listeners
    DGS API
    more DGS API
    undo of leasing should trigger a rescan
    removed some NotYetEnabled checks in post-nqt
    removed obsolete NotYetEnabled checks; keep HubTerminalAnnouncement transactions disabled on mainnet until TF7
    merged develop
    DGS http API, not yet finished
    transactions waiting in unconfirmed pool now require 100 NXT refundable deposit
    check that lease recipient account has a public key
    better transaction attachment validation
    setAccountInfo
    finished getNextBlockGenerators refactoring and optimizations
    missed one quantityQNT
    use timestamp for deliveryDeadline
    DGS refactoring
    more cleanup, commented out Phaser as not yet implemented
    some cleanup
    fixed class cast exception in json parsing
    removed NXT and INT JSON properties, removed support for NXT and INT http parameters, enabled running on main net too
    reverted transaction types with generified attachments (reverted from commit 2eacfc61613a28f33ee7f41d7400475119a407bb)
    transaction types with generified attachments
    fractional quantities
    null pointer in parsing asset order attachments
    NQT
    Completed Digital Goods Store.
    Implemented refund in DGS.
    Implemented feedback in DGS.
    Implemented delivery in DGS.
    Implemented purchase in DGS.
    Completed Effective Balance Leasing.
    added Asset Transfer comment field; verify blocks and transactions on first scan; don't rely on db triggers when deleting multiple blocks
    Added (de)serialization of Effective Balance Leasing.
    Added stubs for Effective Balance Leasing.
    Added ability to announce "minFeePerByte".
    Limited max number of entries in hub terminal announcement transactions from 32767 to 127.
    Added Phaser.
    Replaced RATING with FEEDBACK.
    Added stubs for purchase, delivery, rating and refund.
    Added goods listing, delisting and price and quantity change.
    allow non-unique asset names;
    added GetAssetsByName API request
    APITestServlet for manual testing and debugging of all http APIs
    more attachment validation, delete bad blocks already in the database
    Added validation of DGS transactions.
    Added deserialization of DGS transactions.
    improve asset issuance transaction validation
    moved constants to a separate class so that custom properties can be used to set them
    Added stubs for Digital Goods Store.
    added block_timestamp to the transaction table, added Transaction.getBlockId() and Transaction.getBlockTimestamp() which should be used for better performance instead of having to load the Block from the database to get them;
    store transaction hashes in the transaction table and make them available using Transaction.getHash() and in the JSON returned from getTransaction API;
    enable transaction lookup based on hash, as an optional parameter to the getTransaction API
    Added code for hub terminal announcement transactions.
    Added stubs for hub terminal announcement transactions.
    fixed calculation of genesis account unconfirmed balance for the genesis block transactions
    undoAttachment for asset orders should not update asset balances because for unfilled orders those have not changed, and for filled or partially filled orders undo is not supported
    order cancellations should only update unconfirmed balances
    poll attachment validation bug
    fix handling of unconfirmed balances and asset balances and undoing of asset transactions
    cosmetic clean up
    blockchain refactoring
    Block and Transaction interfaces, not finished
    updated copyright year
    rebase fees to SHUFFLING_BLOCK baseline
    switch back to production testnet, use SHUFFLING_BLOCK for all hardfork changes
    allow limiting max fees and phasing duration for phasing controlled accounts
    additional fee for referenced transactions
    correct insufficient fees
    use transaction acceptance height for minimum fee calculations
    optimization
    test max shuffling size, set shuffling processing full size as 1/2 of real full size
    do not spread back fees for singleton assets
    spreading back fees for asset and currency issuance
    throttling of unique resource allocation transactions
    more error checking
    bugs, optimizations, various changes
    phasing refactoring
    prunable shuffling processing data
    support limits on duplicates count
    do not keep zero balance accounts in account table
    Add TRANSACTION_FEE account ledger event
    getTaggedDataExtendTransactions API
    code review, added TODOs, various minor changes
    allow deferred attachment encryption for full offline signing and encryption
    Account ledger support
    include expired prunable JSON in API transaction JSON, if available
    added copyright notice headers
    refactoring
    refactoring
    cleanup
    improved rescan to be able to re-validate prunable transactions
    fixed processing of unconfirmed ExtendTaggedData transactions, improved json validation
    more debug logging
    preload
    use prunableAttachmentJSON parameter in broadcastTransaction, add prunableAttachmentJSON in signTransaction and getTransactionBytes response, Nxt.newTransactionBuilder(bytes,prunableAttachmentJSON)
    getTaggedData, getAccountTaggedData, searchTaggedData APIs, bugfixes
    prunable tagged data
    refactoring
    prunable appendixes should be applied immediately even if phased
    refactoring
    cleanup
    prunable encrypted messages
    prunable message
    prunable message
    removed limit on transaction deadline, added limit on lost transactions pool for currently not valid transactions
    move more transaction validations to validate() instead of validating in the constructor
    Sub-object for the SetPhasingOnly phasingParams in the JSON attachment
    Test phasing only with account voting
    minor optimizations
    moved account info to a separate table, removed unused message pattern code
    renamed getBytesOrig() to bytes()
    fixed some IntelliJ inspections
    logging
    logging
    removed Transaction.sign and Block.sign methods, replaced TransactionProcessor.parseTransaction with Nxt.newTransactionBuilder
    uncache bytes after signing, optimizations
    increased max votes in an approval transaction to 20, changed fee, fixed some height checks in case of phasing
    optimizations
    added Transaction.getValidationHeight()
    replace some Convert methods with java 8 ones
    allowsPhasing no longer needed
    make sure fee is enough at finish height too
    more phasing side effects
    disallow phasing by default
    fees
    variable size arbitrary and encrypted messages with size based fee
    fees refactoring, phasing fees
    defer apply for all appendixes in phasing; rename TwoPhased to Phasing; add "phasing" prefix
    fixed account key height setting
    optimization, do not store redundant public_key records in the database
    unnecessary differences from develop branch removed
    Pair class deletion
    allow creating and signing transactions in absence of blockchain data
    prevent duplicate minting transactions in the unconfirmed pool
    removed pre-MS checks and logic where no longer needed; added a checksum at MS block
    disable message pattern feature
    getSenderAndRecipient in TransactionImpl removed
    make public key announcement optional after MS block
    removing or rollback / commit methods from interfaces
    reviewed the VS and phasing code, added TODOs
    called twice during block generation
    after MS block, the order of transactions in a block gets determined by the forger, instead of by id, default by arrival time
    renaming
    improve transaction recipientId validation
    unneccesary todos deleted, code formating, unneccesary exceptions handling removed
    it is enough to check for invalid fee in the validate method
    variable fees for currency issuance
    merged in the server-side version of the merchant account message pattern feature, may need more testing
    implemented exclusive and non-exclusive duplicates check
    deferred attachment applying, voters whitelist, some unnecessary/fixed todos have been deleted
    if first outgoing transaction is to yourself, it should not need a public key, enable after MS block
    some todos fixed or deleted as outdated, voting system fixes(now passing all existing tests)
    attachment loading fix, db fixes, after-merge fixes
    when sender is same as recipient should not need a public key announcement, to be enabled at next fork
    2phased impl mostly done
    deadline restriction not needed
    Transaction/persistence fixes due to the new appendage
    optimizations
    no more Longs
    datastructures prototypes are ready
    sort unconfirmed transactions using the database, preserve transaction height
    bugs
    use versioned table for unconfirmed transactions
    Created currency and account_currency tables.
    Initial work on account balances
    Removed the SuperComplexNumber
    Issuer account
    optimization
    use blockchain height instead of effective height in transaction.validate()
    undo sender account after transaction undo
    Validate current block height not previous block
    Merge validateFee with validate
    amount validation only in CreateTransaction
    Fee calculation fix
    FeeNQT final
    Exception type
    Variable fees - fee is based on 3 levels.
    Old blocks before baseline are not validated (minimum fee is 0)
    Blocks after baseline are validated using old fee
    Blocks after next baseline are validated using new fee
    renamed Transaction.verify to verifySignature and validateAttachment to validate
    avoid possible null pointer in getBlock, unset block on transaction undo
    exception handling improvement
    after DGS block
    fixed bugs in rollback code
    Version for forgers who want to do the blockchain reorganization related to BTER hack.
    removed undo
    workaround for rescans breaking size calculation
    parseTransaction, signTransaction and broadcastTransaction also accepts transactions in JSON format instead of bytes
    debug
    debug
    encryptToSelfMessage
    null recipient bugs
    use null recipient instead of Genesis for Alias sell to anyone transactions
    added EC fields to transaction json too, renamed to ecBlockId, ecBlockHeight
    fixed transaction bytes size
    start recording EC clusterDefiningBlock in transactions at DGS block, enforce EC fork check and TF8 after PK_ANNOUNCEMENT_BLOCK, some refactoring and preparing to merge with develop branch
    synchronization on Account no longer needed
    cleanup, set DGS block to 205000, enforce public key announcement only after block 210000, allow running on main net
    bug
    PublicKeyAnnouncement appendix
    allow Appendices to also be validated
    improved validation exception handling
    bugs
    moved validation of constant parameters to Transaction constructor
    attachment version verification
    don't add json for empty attachments
    minor
    cleanup
    transactions with no recipient really should not have a recipient; bugfixes
    attachment versioning
    merging with feature/db
    transaction attachments refactoring
    more duplicates error enforcements in alias transfer and dgs transactions
    use NULL in the db for no-recipient transactions, added GetAccountTransactions, sort by timestamp desc, added fromIndex toIndex parameters
    reworked verification of unconfirmed transactions during block push, updateTotals should no longer be necessary
    Grouped NXT balance and asset quantities into a superbalance.
    Added Economic Clustering.
    changelog
    separate transaction validation from transaction attachment loading
    post-nqt bugs
    removed NotYetEnabled check
    store attachment bytes instead of Attachment objects in the database
    store attachment bytes instead of Attachment objects in the database
    new transactions after NQT_BLOCK always in new format
    moved check for fractional amounts to validateAttachment
    merged develop
    fully remove NXT amounts after NQT_BLOCK
    fully remove referencedTransactionId after NQT_BLOCK
    minor
    use sha256(signature) instead of plain signature for full hash calculation
    also validate block version
    full hash bugfixes, allow finding transaction by full hash, return full hash in the JSON
    full hash referenced transactions
    added parseTransaction API
    add full hash of referenced transaction to the transaction json
    more cleanup, commented out Phaser as not yet implemented
    define a separate milestone block for turning on fractional amounts, should be after NQT_BLOCK but before asset exchange
    only enforce canonical signatures and keys for transactions and blocks after NQT_BLOCK
    enforce canonical signatures and public keys
    removed NXT and INT JSON properties, removed support for NXT and INT http parameters, enabled running on main net too
    JSON representation is now use case specific, different for http API and peer to peer communication, and no longer part of the Block and Transaction APIs;
    define JSON represenations for http API in a signle place for consistency;
    always return amounts in both NXT and NQT, the amounts in NXT represented in the JSON as Strings
    fixed NQT transaction signing, allow fractional amounts after NQT_BLOCK
    NQT
    Added Phaser.
    allow non-unique asset names;
    added GetAssetsByName API request
    sign no longer fails
    applied Curve25519 patch from DoctorEvil
    fix handling of transactions with identical timestamps
    moved constants to a separate class so that custom properties can be used to set them
    added block_timestamp to the transaction table, added Transaction.getBlockId() and Transaction.getBlockTimestamp() which should be used for better performance instead of having to load the Block from the database to get them;
    store transaction hashes in the transaction table and make them available using Transaction.getHash() and in the JSON returned from getTransaction API;
    enable transaction lookup based on hash, as an optional parameter to the getTransaction API
    fix create unsigned transaction bugs
    fix create unsigned transaction bugs
    Added "findObject".
    Added guid for transactions.
    Account.apply also does setOrVerify
    fix handling of unconfirmed balances and asset balances and undoing of asset transactions
    blockchain refactoring
    split Blockchain class
    Block and Transaction interfaces, not finished
    updated copyright year
    some NotCurrentlyValid transaction validation cases are now always NotValid
    additional exchange offer validation
    switch back to production testnet, use SHUFFLING_BLOCK for all hardfork changes
    minor
    do not spread back fees for singleton assets
    spreading back fees for asset and currency issuance
    throttling of unique resource allocation transactions
    phasing refactoring
    shuffling assets
    only shuffling creation needs to implement MonetarySystemAttachment as the others don't use this duplicates check anymore
    duplicates checks for shuffling transactions
    support limits on duplicates count
    more shuffling validation
    shuffle processing, verification, and cancellation should all depend on current shuffle state and validate that it did not change
    cancel during processing stage when a participant couldn't decrypt data
    all participants equally allowed to cancel shuffle, improved shuffle and participants state validation
    no need for separate ShufflingDistribute transaction
    finished blame, maybe
    blame
    keep track of which shuffle participant first initiated cancelling, do not allow deletion of currencies with shuffles in progress
    fixed participant ordering
    simplify, each participant stores data and keys in its own record
    reveal keys as part of shuffle cancel transaction, for now
    refactoring, use byte[][] instead of serializing encrypted data, store recipient keys in issuer data field
    require min shuffling amount of 1000 NXT and always also shuffle this amount of NXT when shuffling MS currency
    code review, added TODOs, various minor changes
    removed redundant public key check, some refactoring
    added some TODOs, bugfixes, cleanup
    shuffling block
    removed duplicated check
    Account ledger support
    ExchangeRequest derived object and exchange_request table
    Improve exchange offer error message
    added copyright notice headers
    refactoring
    always uppercase currency code in Currency.getCurrencyByCode
    added TransactionType.isPhasingSafe indication
    fixed validation for phased MS publish offer transactions
    reviewed applyUnconfirmed and undoApplyUnconfirmed for phasing safety, fixed for MS transactions
    Merge related changes
    increased max votes in an approval transaction to 20, changed fee, fixed some height checks in case of phasing
    replace some Convert methods with java 8 ones
    allowsPhasing no longer needed
    phasing for MS offers
    phasing for MS
    phasing vote fee
    fees refactoring, phasing fees
    removed debug
    add getName to TransactionType and populate getConstants for the types and subtypes dynamically
    temporary debug logging
    refactoring to avoid MintWorker having to intialize blockchain processing classes that it does not need
    prevent duplicate minting transactions in the unconfirmed pool
    enforce exchange offer expiration height to be after current blockchain height
    restrict exchange offer supplies not to exceed total limits
    changelog
    verify that currency type exists, enforce sellRate > buyRate for exchange offers
    removed duplicate sufficient balance validation
    Move additional validation added yesterday to their respective currency types
    Fixes:
    1. Do not allow min difficulty below 2 and max difficulty above 128
    2. Validate that min reserve * reserve units do not overflow
    fixed null pointer, CurrencyType.validate which checks for that should be first
    also do meetsTarget check in validateAttachment
    isDuplicate check for minting
    use NotCurrentlyValid for incorrect minting counter
    Fix parameter encoding and minting validation
    getAccountExchangeRequests refactoring
    Minting client reference implementation
    Add support for Scrypt hash function
    made account currency indexes on buy and sell offer non unique
    Minting client reference implementation
    Another round of shuffling code review and adapt the currency test to a database which contains multiple currencies
    implement crowdfunding distribution of non-claimable currency as paying NXT to issuer instead of locking
    Merge changes into shuffling code
    variable fees for currency issuance
    Shuffling - isDuplicate() validation and deletion
    Shuffling - work on isDuplicate() not done yet and bug fixes
    Shuffling - code review pass 1 - add todo items
    Shuffling tests and fixes
    disallow currency transfers to genesis
    allow currency to be both reservable and mintable, fix initial supply (pre-mine) handling
    added a separate DeleteCurrency transaction and API call
    Quick temp workaround to be able to issue shuffling transactions
    Implement the shuffling process transaction which implements the shuffling algorithm
    made currency_mint table Versioned, delete mint records when a mintable currency is deleted
    implemented exclusive and non-exclusive duplicates check
    delete existing currency if issuing account owns all of it
    added currency decimals, optionally include currency name and decimals in getCurrencyTransfers and getExchanges
    Work on shuffle processing
    removed coin shuffling code
    issuanceHeight must be 0 for non-reservable currencies, initial supply must be 0 for claimable currencies and not exceed total supply
    Testing and fixing problem in the participant registration code
    Work on APIs and transaction types
    Work on attachment validation and transaction types
    currency mint should use EntityDbTable
    crowdfunding listener fixes
    allow multiple reserve increases from same founder in the same block
    refactoring
    store currency transfer recipientId as transaction recipient instead of in attachment
    cleanup of the CurrencyType validation code, optimized to avoid multiple db access;
    enforce unique currency_id, account_id in exchange offers
    split exchange transaction and attachments into buy and sell, units always positive
    use transaction_id, offer_id as primary key for exchange
    Initial work on shuffling
    improved currency name and code validation
    more fixes and notes, not finished
    more fixes and notes, not finished
    more fixes and notes, not finished
    more fixes and notes, not finished
    Exchange offer validations and naming change
    Change currency type from byte to int for allow for future expansion of additional capabilities
    Implement CurrencyTransfer, change the term "money" to "currency" where applicable
    Enhance CurrencyType to support multiple currency types in the same currency and validate their inter dependencies (unit testing not included)
    Intermidiate commit for saving work on currency validation
    1. Increase units per mint to 0.01% of total supply (see Constants)
    2. ApplyAttachment() no longer depends on CurrencyType in preparation for adding currency capabilities
    1. Separate TransactionType MonetarySystem into a separate class to reduce merging problems
    2. Reduce dependency on CurrencyType in preparation for making it an enum set
    DbKey optimizations
    updated copyright year
    logging
    Account ledger support
    added copyright notice headers
    fixed IntelliJ inspections, replace some for loops with Iterable.forEach
    fixed some IntelliJ inspections
    phasing for MS
    removed debug
    temporary debug logging
    added a CURRENCY_MINT event, fixed DebugTrace logging for minting
    refactoring to avoid MintWorker having to intialize blockchain processing classes that it does not need
    minor refactoring, fixed mint calculation test
    use signed bytes for min/max minting difficulty to allow values 1 to 255
    Fixes:
    1. Do not allow min difficulty below 2 and max difficulty above 128
    2. Validate that min reserve * reserve units do not overflow
    submission height is not needed in CurrencyMint, fixed sql
    submission height is not needed in CurrencyMint
    also do meetsTarget check in validateAttachment
    Fix minting corner case with low difficulty
    Minting client reference implementation
    Add support for Scrypt hash function
    Fix small bug in MS code.
    Minting client reference implementation
    minor
    Javadoc update
    Add counter to get minting target reply
    Add counter to get minting target reply
    allow currency to be both reservable and mintable, fix initial supply (pre-mine) handling
    minor
    made currency_mint table Versioned, delete mint records when a mintable currency is deleted
    currency mint should use EntityDbTable
    more fixes and notes, not finished
    more fixes and notes, not finished
    Merge with latest entity DB changes
    Implement CurrencyTransfer, change the term "money" to "currency" where applicable
    Replace CurrencyExchange api with currency buy and sell
    Naming change from *CurrencyBalanceQNT to *CurrencyUnits
    re-organize currency exchange testing
    New API to enable miners (minters ?) to determine the minting target per currency and number of units
    Implement additional hashing algorithms for minting
    Calculate minting target based on the same idea used by Bitcoin and factor the number of units into the target calculation - cont
    Minting tests, minting and reserve increase fixes
    Merge develop into feature/ms
    Simplify currency transfer, add additional APIS, align mint data types across classes
    port currency founder and currency mint to database
    Implemented minting.
    Added stubs for currency exchange and minting.
    use last block timestamp
    use fixed shuffling transaction timestamp instead
    random shuffling transaction timestamps
    updated copyright year
    made maximum allowed number of forgers and shufflers configurable
    log level
    minor
    fail immediately when adding a new shuffler
    do not allow phasing only accounts to start shufflers, create or join shufflings
    disallow starting multiple shufflers for the same recipient account, regardless of shuffling
    event must be after db transaction end, also clear shufflers on rescan
    use AFTER_BLOCK_ACCEPT event instead
    do broadcasting of failed shuffler transactions at BLOCK_PUSHED rather than AFTER_BLOCK_APPLY so that it is outside of isProcessingBlock
    check recipientPublicKey even if shuffling does not exist yet
    also report the failure cause
    keep trying to submit currently not valid transactions
    specific error codes for each startShuffler failure case
    limit max number of simultaneous shufflers allowed on the same node to prevent OOM attacks on open API nodes
    cancellingAccountId can be stored in assigneeAccountId, shuffling stage error checking
    shuffler restart tests, bugs
    use full hash only in shuffling registration, test automated shuffling
    shuffler http APIs
    use full hash for shuffling identification, shuffler API
    shuffler expiration
    handle shuffler restart or late start
    Shuffler can use waitingTransactions and rebroadcasting instead of its own queue
    added Shuffler, made shuffling registration also depend on shuffling full hash
    updated copyright year
    increase lease limit to 65535 blocks
    allow limiting max fees and phasing duration for phasing controlled accounts
    minor
    additional duplicates check to prevent incorrect blaming, sort instead of shuffle, check that public key is canonical too
    allow calculation of sizes and fees for not yet encrypted appendages too
    handle missing cancel due to pruning
    minor
    test max shuffling size, set shuffling processing full size as 1/2 of real full size
    account properties
    singleton assets
    minor
    bugs, optimizations, various changes
    use full hash only in shuffling registration, test automated shuffling
    added Shuffler, made shuffling registration also depend on shuffling full hash
    improved blaming, more tests
    more shuffling state consistency validation, logging, refactoring
    minor
    separate height deadlines for each shuffling phase, skipping full blocks
    phasing refactoring
    also check for duplicate data at each processing step
    prunable shuffling processing data
    shuffling assets
    only shuffling creation needs to implement MonetarySystemAttachment as the others don't use this duplicates check anymore
    shuffle processing, verification, and cancellation should all depend on current shuffle state and validate that it did not change
    no need for separate ShufflingDistribute transaction
    blame
    reveal keys as part of shuffle cancel transaction, for now
    refactoring
    refactoring, use byte[][] instead of serializing encrypted data, store recipient keys in issuer data field
    debug logging, no-op for taggedDataExtend restore
    do not restore TaggedDataExtend transactions, instead update tagged data tags and timestamps when the TaggedDataUpload is restored
    do a full rescan instead of trying to fix genesis asset transfers
    code review, added TODOs, various minor changes
    allow deferred attachment encryption for full offline signing and encryption
    Add dividend payment sanity check
    Asset delete support
    Merged source updates
    removed redundant public key check, some refactoring
    added some TODOs, bugfixes, cleanup
    include expired prunable JSON in API transaction JSON, if available
    fixed IntelliJ inspections
    added copyright notice headers
    refactoring
    senseless comment removed
    refactoring
    check whether data is utf-8 text only when submitted as bytes
    added channel field to tagged data
    fixed processing of unconfirmed ExtendTaggedData transactions, improved json validation
    taggedDataId not needed
    fixed parsing of taggedDataId in TaggedDataExtend attachment json, renamed to taggedData
    tagged data extend bugs
    extendTaggedData API, versioned prunable data
    getTaggedData, getAccountTaggedData, searchTaggedData APIs, bugfixes
    prunable tagged data
    reduced DGS delivery size to the pre-VS default
    refactoring
    allow different hash functions for by-hash phasing
    by-hash voting (pay on revealed secret)
    added by-transaction voting model (linked transactions)
    allow duplicate votes for phased transactions
    Sub-object for the SetPhasingOnly phasingParams in the JSON attachment
    Test phasing only with account voting
    moved account info to a separate table, removed unused message pattern code
    Http API: GetPhasingOnlyControl/SetPhasingOnlyControl
    First simple unit test - set and then get
    fixed phasing finish height validation, cleaned up phasing and voting constants
    Refactored Appendix.Phasing - phasing data handing encapsulated in PhasingParams
    Phasing account control tables - DDL and data access classes
    Phasing AC transaction type and transaction attachment
    fixed some IntelliJ inspections
    allow phasing without voting
    Merge related changes
    increased max votes in an approval transaction to 20, changed fee, fixed some height checks in case of phasing
    more lambdas
    replace some Convert methods with java 8 ones
    poll attachment parsing bug
    made DGS delivery fee size based too, after the first 10240 bytes
    Merge remote-tracking branch 'origin/develop' into feature/cs and fix shuffling unit test
    variable size arbitrary and encrypted messages with size based fee
    fees refactoring, phasing fees
    minor
    add getName to TransactionType and populate getConstants for the types and subtypes dynamically
    use full hash instead of just id to identify transactions being voted for
    refactoring, implement voting models as enum
    renaming
    moved out the counting logic to PollCounting
    some more validation
    Constants.VOTING_MINBALANCE_UNDEFINED removed
    formatting
    renamed finishBlockHeight to finishHeight
    renamed MS_COIN to CURRENCY
    minor cleanup
    unnecessary differences from develop branch removed
    minBalanceModel fixes in API, validation, builder
    assetId -> holdingId in VS & 2PT, min balance model, referential integrity contstraint fix for poll, createPoll refactoring with ParameterParser, better poll validation
    disable message pattern feature
    check on number of options in vote deserialization
    PENDING_PAYMENT_VOTE_CASTING moved to messaging
    use signed bytes for min/max minting difficulty to allow values 1 to 255
    finishBlockHeight check has been moved to TransactionType
    minor typos
    todos fixed: better pending tx validation, json longs read/write, poll_results -> poll_result for  table name
    TODOs fixes #1
    CastVotePhased API Call added, CastVote glitches fixed, bug with maxHeight fixed
    reviewed the VS and phasing code, added TODOs
    minor
    implement crowdfunding distribution of non-claimable currency as paying NXT to issuer instead of locking
    some fixes  due to static code analysis
    variable fees for currency issuance
    Shuffling - work on isDuplicate() not done yet and bug fixes
    fix parsing of DividendPayment attachment json
    avoid extra database calls in Account.payDividends
    Shuffling - allow null values for shuffling currency and shuffling_participant next account (similar to next_lessee_id)
    Shuffling - code review pass 1 - add todo items
    Implementing remaining pieces of the 'dividend payment' transaction type.
    allow currency to be both reservable and mintable, fix initial supply (pre-mine) handling
    blacklist implemented for 2-phased transactions, some validation added to vs/2ptxs
    added a separate DeleteCurrency transaction and API call
    voting system got massive update
    Implement the shuffling process transaction which implements the shuffling algorithm
    merged in the server-side version of the merchant account message pattern feature, may need more testing
    implemented exclusive and non-exclusive duplicates check
    poll classes renaming
    no 10 blocks min for voting for now
    voting constants moved to Constants, getAccounPolls API call, optional account parameter has been added to getPollIds
    account_id bug fixed in Poll(voting system), multivoting in phased transactions implemented(not well-tested!)
    added currency decimals, optionally include currency name and decimals in getCurrencyTransfers and getExchanges
    Implemented "Alias Delete" transaction type.
    removed coin shuffling code
    Testing and fixing problem in the participant registration code
    Work on APIs and transaction types
    Work on attachment validation and transaction types
    currency mint should use EntityDbTable
    store currency transfer recipientId as transaction recipient instead of in attachment
    split exchange transaction and attachments into buy and sell, units always positive
    Initial work on shuffling
    some todos fixed or deleted as outdated, voting system fixes(now passing all existing tests)
    more fixes and notes, not finished
    more fixes and notes, not finished
    attachment loading fix, db fixes, after-merge fixes
    minor fixes while reviewing the code
    2phased impl mostly done
    Exchange offer validations and naming change
    merged develop
    Added support of dividend payment transactions.
    Implement CurrencyTransfer, change the term "money" to "currency" where applicable
    Enhance CurrencyType to support multiple currency types in the same currency and validate their inter dependencies (unit testing not included)
    1. Increase units per mint to 0.01% of total supply (see Constants)
    2. ApplyAttachment() no longer depends on CurrencyType in preparation for adding currency capabilities
    1. Separate TransactionType MonetarySystem into a separate class to reduce merging problems
    2. Reduce dependency on CurrencyType in preparation for making it an enum set
    Complete tracing creation and verification (not tested yet), replace Long with long in MS code
    Implement the exchanges table and getAllExchanges API
    Unit test uses getAllExchanges API
    Add algorithm field to currency
    Convert Long to long in Currency and Exchange
    comment parameter no longer used
    Merge develop into feature/ms
    no more Longs
    optimizations
    Merge branch 'feature/db' into feature/votingsystem
    
    Conflicts:
            src/java/nxt/Attachment.java
            src/java/nxt/DbVersion.java
            src/java/nxt/Generator.java
            src/java/nxt/Poll.java
            src/java/nxt/Vote.java
            src/java/nxt/db/DbTable.java
            src/java/nxt/http/GetActivePollIds.java
    Merge branch 'feature/db' into feature/votingsystem
    
    Conflicts:
            src/java/nxt/Attachment.java
            src/java/nxt/DbVersion.java
            src/java/nxt/Generator.java
            src/java/nxt/Poll.java
            src/java/nxt/Vote.java
            src/java/nxt/db/DbTable.java
            src/java/nxt/http/GetActivePollIds.java
    datastructures prototypes are ready
    Simplify currency transfer, add additional APIS, align mint data types across classes
    transaction type & attachment prototypes, Phaser has been deleted
    More work on APIs
    Created currency and account_currency tables.
    Initial work on account balances
    Removed the SuperComplexNumber
    Issuer account
    Implemented shuffling cancellation.
    Added shuffling cancellation transaction type.
    Added attachment fields.
    Added stubs.
    exception handling improvement
    Merge branch 'feature/db' into feature/votingsystem
    removed undo
    parseTransaction, signTransaction and broadcastTransaction also accepts transactions in JSON format instead of bytes
    added getAppendixName method
    null pointer
    unneccessary todo deleted
    goodsIsText bug
    cleanup, set DGS block to 205000, enforce public key announcement only after block 210000, allow running on main net
    PublicKeyAnnouncement appendix
    allow Appendices to also be validated
    improved validation exception handling
    moved validation of constant parameters to Transaction constructor
    attachment version verification
    cleanup
    minor
    transactions with no recipient really should not have a recipient; bugfixes
    attachment versioning
    merging with feature/db
    Implemented currency exchange.
    use Arbitrary Message type for encrypted messages too, better parameter names
    transaction attachments refactoring
    Renaming of a transaction type.
    Implemented currency issuance, reserve increase/claim, money transfer.
    validation fixes
    voting system - pre-final version
    Added currency ruleset support.
    added payment with message transaction type
    Added validation of unconfirmed MS transaction attachments.
    voting system - alpha(no validation, interface is raw)
    Added Currency.
    Added money exchange transaction.
    Removed mining shortcut.
    Replaced the slope with the points.
    Added MS constants.
    Added fields to MS attachments.
    Added support of PoW currency.
    Added stubs for Monetary System transaction subtypes.
    encrypted message transaction type
    special handling of empty encrypted notes
    remove Serializable
    alias transfer bugfixes and clean up
    alias transfer - alpha
    serializable still needed for the conversion, will remove later
    removed Serializable
    removed Serializable
    DGS now uses AES; finished DGS API; added Account.encryptTo and Account.decryptFrom; added DGS event listeners
    more DGS API
    better transaction attachment validation
    setAccountInfo
    finished getNextBlockGenerators refactoring and optimizations
    some cleanup
    minor bugs
    fractional quantities
    NQT
    added Asset Transfer comment field; verify blocks and transactions on first scan; don't rely on db triggers when deleting multiple blocks
    Added (de)serialization of Effective Balance Leasing.
    Added stubs for Effective Balance Leasing.
    Added ability to announce "minFeePerByte".
    Limited max number of entries in hub terminal announcement transactions from 32767 to 127.
    Replaced RATING with FEEDBACK.
    more attachment validation, delete bad blocks already in the database
    Added getters for DGS transaction fields.
    Added delivery deadline.
    Added serialization of DGS transactions.
    Added data fields for Digital Goods Store transactions.
    Added stubs for Digital Goods Store.
    Added code for hub terminal announcement transactions.
    Added stubs for hub terminal announcement transactions.
    minor fixes
    Block and Transaction interfaces, not finished
    renamed convert methods with more explicit names, optimized
    Added Voting System.
    Added a skeleton for Voting System implementation.
    aliases optimization
    aliases optimization
    fixed validation, NxtException, partial undo support
    more API cleanup, removed extra conversion to/from ByteBuffer
    API cleanup
    encapsulate fields
    use Longs for id's, a lot of cleanup
    transaction type refactoring
    factored out common code
    added Blockchain class
    moved Attachment to top level
    GetChatList and GetChatMessages API
    updated copyright year
    voting models by-hash and by-transaction not allowed for phasing control
    bugs, optimizations, various changes
    Http API: GetPhasingOnlyControl/SetPhasingOnlyControl
    First simple unit test - set and then get
    Added controls set to Account
    Phasing control "business" logic
    Refactored Appendix.Phasing - phasing data handing encapsulated in PhasingParams
    Phasing account control tables - DDL and data access classes
    Phasing AC transaction type and transaction attachment
    DbKey optimizations
    updated copyright year
    treat holdingId 0 as null in getHoldingShufflings
    rename
    add registered count to shuffling
    also spread shuffling penalty fees
    minor
    sorting
    enforce that encrypted data are sorted for more efficient duplicates check
    more strict ciphertext size validation
    additional duplicates check to prevent incorrect blaming, sort instead of shuffle, check that public key is canonical too
    bugs
    cancellingAccountId can be stored in assigneeAccountId, shuffling stage error checking
    added DebugTrace logging for shuffling, set assignee account to blamed account on cancel with blame
    test max shuffling size, set shuffling processing full size as 1/2 of real full size
    shuffling penalty is block event
    minor fixes
    use shuffling id for shuffling cancelation and distribution ledger events
    also allow shuffling filtering by stage
    minor
    use full hash only in shuffling registration, test automated shuffling
    use full hash for shuffling identification, shuffler API
    fixed shuffling penalty, also check forger balance in tests
    improved blaming, more tests
    more tests and bugs
    last participant cannot submit shuffling verify or shuffling cancel
    made deletion of finished shufflings optional
    more shuffling state consistency validation, logging, refactoring
    first processing transaction must also depend on shuffle state
    bugs
    testnet shuffling constants
    shuffling events and ledger events
    more shuffling APIs, database indexes
    refactoring
    separate height deadlines for each shuffling phase, skipping full blocks
    also check for duplicate data at each processing step
    prevent duplicate or colliding recipient public keys
    prunable shuffling processing data
    shuffling assets
    more shuffling validation
    no penalty if registration phase never finished
    delete all shuffles and their participants when done or at finish height
    shuffle processing, verification, and cancellation should all depend on current shuffle state and validate that it did not change
    cancel during processing stage when a participant couldn't decrypt data
    all participants equally allowed to cancel shuffle, improved shuffle and participants state validation
    no need for separate ShufflingDistribute transaction
    pre-announce recipient keys before the verification stage, partial fix only
    finished blame, maybe
    blame
    keep track of which shuffle participant first initiated cancelling, do not allow deletion of currencies with shuffles in progress
    fixed participant ordering
    simplify, each participant stores data and keys in its own record
    reveal keys as part of shuffle cancel transaction, for now
    create new public/private key pairs for encrypting each shuffling data
    refactoring, use byte[][] instead of serializing encrypted data, store recipient keys in issuer data field
    require min shuffling amount of 1000 NXT and always also shuffle this amount of NXT when shuffling MS currency
    cancel shuffle if a different public key has been set for a recipient account in the meantime
    use recipientPublicKey instead of recipientId
    added some TODOs, bugfixes, cleanup
    copyright notices
    Test account balances after shuffling
    Another round of shuffling code review and adapt the currency test to a database which contains multiple currencies
    Merge changes into shuffling code
    Shuffling - efficient cancellation
    Shuffling - isDuplicate() validation and deletion
    Shuffling - work on isDuplicate() not done yet and bug fixes
    Shuffling - allow null values for shuffling currency and shuffling_participant next account (similar to next_lessee_id)
    Shuffling - code review pass 1 - add todo items
    Shuffling tests and fixes
    Implement the shuffling process transaction which implements the shuffling algorithm
    Work on shuffle processing
    More testing and fixing problem in the participant registration code
    Testing and fixing problem in the participant registration code
    Work on APIs and transaction types
    Work on attachment validation and transaction types
    Initial work on shuffling Participants
    Initial work on shuffling
    updated copyright year
    added retrievePrunedTransaction API
    also preserve currently not valid transactions on popoff reprocessing
    code review, added TODOs, various minor changes
    Code review
    Cache unconfirmed transactions
    Merged source updates
    added getExpectedAsk/BidOrders APIs
    added copyright notice headers
    renamed lostTransactions to waitingTransactions, undo UnconfirmedTransaction.isNotCurrentlyValid and use a limit on arrival timestamp instead
    fixed processing of unconfirmed transactions, added getAllBroadcasted and getAllLostTransactions debug APIs
    added rebroadcastUnconfirmedTransactions debug API
    allow limiting unconfirmed transaction pool size
    fixed some IntelliJ inspections
    removed Transaction.sign and Block.sign methods, replaced TransactionProcessor.parseTransaction with Nxt.newTransactionBuilder
    added events for release and reject of phased transactions
    refactoring to avoid MintWorker having to intialize blockchain processing classes that it does not need
    refactoring of new transactions processing to be able to return more specific errors
    added clearUnconfirmedTransactions API
    minor fixes
    no more Longs
    MS unit tests and bug fixes
    changed unconfirmed transaction processing to reduce size of unconfirmed_transaction table
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    DbIterator, offset and limit pagination
    parseTransaction, signTransaction and broadcastTransaction also accepts transactions in JSON format instead of bytes
    improved validation exception handling
    transactions with no recipient really should not have a recipient; bugfixes
    transaction attachments refactoring
    full hash referenced transactions
    NQT
    verify transaction signature before broadcast
    Added "findObject".
    new transaction timestamp is always current time, no need to supply as parameter
    cosmetic clean up
    define Listeners for Logger and for Blockchain scan, added Observable interface
    blockchain refactoring
    split Blockchain class
    updated copyright year
    rebase fees to SHUFFLING_BLOCK baseline
    switch back to production testnet, use SHUFFLING_BLOCK for all hardfork changes
    do not count the AES 16 bytes initialization vector when determining encrypted data fee
    new fees
    minor, code style
    added copyright notice headers
    getTaggedData, getAccountTaggedData, searchTaggedData APIs, bugfixes
    fixed some IntelliJ inspections
    more lambdas
    replace some Convert methods with java 8 ones
    variable size arbitrary and encrypted messages with size based fee
    fees refactoring, phasing fees
    updated copyright year
    added copyright notice headers
    added Block.getBytes() and bytes() for consistency with the corresponding Transaction methods
    undo caching of previousBlock as doing it correctly is more complicated than it is worth
    caching of previousBlock, better query for expired DGS purchases
    no more Longs
    optimizations
    removed NXT and INT JSON properties, removed support for NXT and INT http parameters, enabled running on main net too
    JSON representation is now use case specific, different for http API and peer to peer communication, and no longer part of the Block and Transaction APIs;
    define JSON represenations for http API in a signle place for consistency;
    always return amounts in both NXT and NQT, the amounts in NXT represented in the JSON as Strings
    NQT
    Block and Transaction interfaces, not finished
    refactoring of Peer, User, Api, Nxt
    embedded jetty
    renamed convert methods with more explicit names, optimized
    minor
    simplify
    simplified block and transaction construction, made block.transactionIds and block.blockTransactions unmodifiable Lists
    Something weird has happened to my local repository.
    prevent duplicate account key attack
    get rid of index
    caching JSON in Block object doesn't help when using a database
    handle out of order errors
    minor cleanup
    minor, invalid state checking
    made block.payloadHash and generationSignature final
    height setting bug
    set transaction block in advance to avoid extra db query
    set block transactions during deserialization too
    fix purging of expired transaction hashes
    fix purging of expired transaction hashes
    merged lastBytes fix from 0.5.12
    fixed transaction hash validation
    purge expired hashes in block.apply
    purge expired hashes in block.apply, make sure transaction blockId is always set
    fixed transaction hash validation
    merged lastBytes fix from 0.5.12
    minor
    optimized GetMilestoneBlockIds
    optimizations
    optimizations
    optimizations, added index on block.height
    increased number of pooled connections to 200
    optimization
    finished database transition, no more serialized files support
    database initialization and update, save and load blocks and transactions
    don't blacklist peers when validation fails because of a not yet enabled feature
    minor
    fixed validation, NxtException, partial undo support
    more API cleanup, removed extra conversion to/from ByteBuffer
    API cleanup
    encapsulate fields
    make sure generator public key is set, was missing when loading blocks from file
    fixed bug in double processing of genesis block
    more cleanup
    use Longs for id's, a lot of cleanup
    more cleanup
    more minor json optimizations
    minor
    finished doGet and doPost switch refactoring
    doGet switch statement refactoring, not done yet
    moved background thread definitions out of Nxt servlet
    added Blockchain class
    moved Attachment to top level
    backwards compatible with 0.5.9 serialized forms
    moved all classes to separate files
    DbKey optimizations
    updated copyright year
    added copyright notice headers
    fixed IntelliJ inspections, replace some for loops with Iterable.forEach
    sort currency founders by height desc by default, also handle the case of both currency and account specified
    get founders currency - initial commit not tested
    implement crowdfunding distribution of non-claimable currency as paying NXT to issuer instead of locking
    allow currency to be both reservable and mintable, fix initial supply (pre-mine) handling
    allow multiple reserve increases from same founder in the same block
    make sure DbIterators are closed
    more fixes and notes, not finished
    more fixes and notes, not finished
    line separators
    more fixes and notes, not finished
    minor fixes while reviewing the code
    Merge with latest entity DB changes
    Complete tracing creation and verification (not tested yet), replace Long with long in MS code
    Currency Reserve unit tests and fixes to the crowd funding system
    Merge develop into feature/ms
    port currency exchange to database and support height for versioned tables
    use versioned entity tables
    port currency founder and currency mint to database
    port currency founder and currency mint to database
    set nextBlockId for cached blocks
    possible race condition
    updated copyright year
    switch back to production testnet, use SHUFFLING_BLOCK for all hardfork changes
    spreading back fees for asset and currency issuance
    new base target adjustment
    do not keep zero balance accounts in account table
    Account ledger support
    added copyright notice headers
    fixed IntelliJ inspections, replace some for loops with Iterable.forEach
    cleanup
    more debug logging
    preload transactions before pop-off
    prunable message
    prunable message
    added Block.getBytes() and bytes() for consistency with the corresponding Transaction methods
    fixed some IntelliJ inspections
    removed Transaction.sign and Block.sign methods, replaced TransactionProcessor.parseTransaction with Nxt.newTransactionBuilder
    optimizations
    uncache bytes after signing, optimizations
    optimizations
    minor, exceptions
    replace some Convert methods with java 8 ones
    more phasing side effects
    fixed validation of phased transactions, removed immediate release on vote feature
    optimization
    fixed account key height setting
    optimization, do not store redundant public_key records in the database
    fork resolution during push, do not allow front running in block forging, delay block generation by 20 s
    unnecessary differences from develop branch removed
    add the cause exception to the TransactionNotAcceptedException, when caused by exception
    throw TransactionNotAcceptedException in order to remove transactions that trigger bugs
    TODOs fixes #1
    reviewed the VS and phasing code, added TODOs
    Merge branch 'develop' into voting_2phased
    
    Conflicts:
            src/java/nxt/Asset.java
            src/java/nxt/Constants.java
            src/java/nxt/NxtDbVersion.java
            src/java/nxt/db/EntityDbTable.java
    undo caching of previousBlock as doing it correctly is more complicated than it is worth
    caching of previousBlock, better query for expired DGS purchases
    after MS block, the order of transactions in a block gets determined by the forger, instead of by id, default by arrival time
    setBlock should not be needed when loading from the db (reverted from commit ae51dfe2c2597032e1e3f0a2ad3d668a7c86d4e0)
    setBlock should not be needed when loading from the db
    2phased impl mostly done
    lazy loading of block transactions
    allow time manipulations for testing, and test forging
    debug
    optimizations
    no more Longs
    optimizations
    generator bugs and optimizations
    optimizations, refactoring
    removed undo
    parseTransaction, signTransaction and broadcastTransaction also accepts transactions in JSON format instead of bytes
    generate block refactoring, use the same timestamp
    do not penalize forgers who miss their turns when forging on a local testnet (no peers)
    increased the elapsedTime check to 1 hour
    start recording EC clusterDefiningBlock in transactions at DGS block, enforce EC fork check and TF8 after PK_ANNOUNCEMENT_BLOCK, some refactoring and preparing to merge with develop branch
    bugs
    improved validation exception handling
    merging with feature/db
    transaction attachments refactoring
    Added the milestone block for the disabled trap.
    Disabled the last trap.
    post-nqt bugs
    added Account.getForgedBalanceNQT, and forgedBalanceNQT to account JSON
    merged develop
    fully remove NXT amounts after NQT_BLOCK
    use NQT_BLOCK for payload size limit change
    reviewed effective balance leasing;
    some getNextBlockGenerators refactoring
    DGS refactoring
    more DGS work
    only enforce canonical signatures and keys for transactions and blocks after NQT_BLOCK
    removed NXT and INT JSON properties, removed support for NXT and INT http parameters, enabled running on main net too
    JSON representation is now use case specific, different for http API and peer to peer communication, and no longer part of the Block and Transaction APIs;
    define JSON represenations for http API in a signle place for consistency;
    always return amounts in both NXT and NQT, the amounts in NXT represented in the JSON as Strings
    NQT
    Implemented purchase in DGS.
    Completed Effective Balance Leasing.
    added BEFORE_BLOCK_APPLY and BEFORE_BLOCK_UNDO events, added Block.undo()
    minor
    moved constants to a separate class so that custom properties can be used to set them
    added block_timestamp to the transaction table, added Transaction.getBlockId() and Transaction.getBlockTimestamp() which should be used for better performance instead of having to load the Block from the database to get them;
    store transaction hashes in the transaction table and make them available using Transaction.getHash() and in the JSON returned from getTransaction API;
    enable transaction lookup based on hash, as an optional parameter to the getTransaction API
    Account.apply also does setOrVerify
    minor
    cosmetic clean up
    define Listeners for Logger and for Blockchain scan, added Observable interface
    blockchain refactoring
    split Blockchain class
    Block and Transaction interfaces, not finished
    refactoring of Peer, User, Api, Nxt
    embedded jetty
    renamed convert methods with more explicit names, optimized
    minor
    simplify
    simplified block and transaction construction, made block.transactionIds and block.blockTransactions unmodifiable Lists
    Something weird has happened to my local repository.
    prevent duplicate account key attack
    get rid of index
    caching JSON in Block object doesn't help when using a database
    handle out of order errors
    minor cleanup
    minor, invalid state checking
    made block.payloadHash and generationSignature final
    height setting bug
    set transaction block in advance to avoid extra db query
    set block transactions during deserialization too
    fix purging of expired transaction hashes
    fix purging of expired transaction hashes
    merged lastBytes fix from 0.5.12
    fixed transaction hash validation
    purge expired hashes in block.apply
    purge expired hashes in block.apply, make sure transaction blockId is always set
    fixed transaction hash validation
    merged lastBytes fix from 0.5.12
    minor
    optimized GetMilestoneBlockIds
    optimizations
    optimizations
    optimizations, added index on block.height
    increased number of pooled connections to 200
    optimization
    finished database transition, no more serialized files support
    database initialization and update, save and load blocks and transactions
    don't blacklist peers when validation fails because of a not yet enabled feature
    minor
    fixed validation, NxtException, partial undo support
    more API cleanup, removed extra conversion to/from ByteBuffer
    API cleanup
    encapsulate fields
    make sure generator public key is set, was missing when loading blocks from file
    fixed bug in double processing of genesis block
    more cleanup
    use Longs for id's, a lot of cleanup
    more cleanup
    more minor json optimizations
    minor
    finished doGet and doPost switch refactoring
    doGet switch statement refactoring, not done yet
    moved background thread definitions out of Nxt servlet
    added Blockchain class
    moved Attachment to top level
    backwards compatible with 0.5.9 serialized forms
    moved all classes to separate files
    DbKey optimizations
    updated copyright year
    Use transaction id instead of block id
    more DbClauses
    
    (cherry picked from commit 8adcd7a83569b171a7781019acbe5c5fe8beffad)
    more DbClauses
    minor
    refactoring
    code review, added TODOs, various minor changes
    Account ledger support
    after VS and Phasing block
    added copyright notice headers
    extendTaggedData API, versioned prunable data
    added buyer parameter to getDGSGoodsPurchases
    tags for tagged data
    getDGSExpiredPurchases
    added getAliasesLike and searchAccounts APIs, drop and recreate search indexes on full rescan
    added getDGSTagsLike API
    fixed some IntelliJ inspections
    minor optimization
    java 8 lambdas
    replace some Convert methods with java 8 ones
    phasing
    various fixes and improvements
    removed pre-MS checks and logic where no longer needed; added a checksum at MS block
    added availableOnly parameter to getSellOffers and getBuyOffers, to return offers with non-zero supply and limit only
    added completed parameter to getDGSGoodsPurchases, getDGSGoodsPurchaseCount, getDGSPurchaseCount, getDGSPurchases, to allow querying for completed purchases only
    allow secondary sort of search results
    minor
    DGS refactoring, moving static methods
    added getDGSTagCount API, allow getDGSGoodsCount and getDGSPurchaseCount to be used also to get total goods or purchase counts
    do not count undelivered purchases
    added getAccountAssetCount, getAliasCount, getDGSGoodsCount, getDGSGoodsPurchaseCount, getDGSPurchaseCount APIs
    getDGSTags returns only tags for goods in stock by default
    optimization, preserve tag order
    store parsed tags in Goods and also expose them in json
    include total numbers of Goods, Purchases, and Tags in the getState API, changelog
    tag restrictions - between 3 and 20 chars, no more than 3 per product
    added withPublicFeedbacksOnly parameter to getDGSPurchases API
    added getDGSGoodsPurchases API to retrieve purchases for a specific goodsId, optionally those with public feedbacks only;
    show purchase counts in all Goods JSON, unless includeCounts=false
    added tag table and getDGSTags API
    implemented full text search using the H2 lucene search, added searchAssets and searchDGSGoods APIs
    undo caching of previousBlock as doing it correctly is more complicated than it is worth
    caching of previousBlock, better query for expired DGS purchases
    optimizations
    fixed missing DGS feedbacks
    fix inserts into values tables, preserve values order
    optimization
    more sorting
    sorting
    refactoring
    no more Longs
    performance, reduce number of Strings created
    optimizations
    block pop-off refactoring, removed BEFORE_BLOCK_UNDO event
    DbIterator, offset and limit pagination
    trimming of derived objects tables
    refactoring
    renaming
    DbKey, DbKeyFactory, removed Link tables
    refactoring
    fixed goods comparison
    removed undo
    DGS in database bugs
    moved nxt.Db to nxt.db.Db
    refactoring, guaranteed balances in database, not finished
    accounts in database, not finished
    accounts in database, not finished
    merging with feature/db
    transaction attachments refactoring
    a deadline bug
    should not be null, better throw exception if it is
    refactoring
    digital goods in database
    add Goods name to Purchase
    reverse sorting of purchases, allow filtering goods by availability, pagination
    remove purchase from pending purchases on refund
    sort purchases in reverse chronological order
    return all goods sorted most recent first, and allow specifying index range
    add refundNQT and discountNQT fields to Purchase, debug trace of purchase transactions
    DGS bugs
    DGS now uses AES; finished DGS API; added Account.encryptTo and Account.decryptFrom; added DGS event listeners
    DGS API - goods sorted by name, purchases by timestamp
    DGS API
    more DGS API
    DGS http API, not yet finished
    use timestamp for deliveryDeadline
    DGS refactoring
    more DGS work
    more cleanup, commented out Phaser as not yet implemented
    some cleanup
    Completed Digital Goods Store.
    Implemented refund in DGS.
    Implemented feedback in DGS.
    Implemented delivery in DGS.
    Implemented purchase in DGS.
    Moved "delisted" checks from DigitalGoodsStore.Goods to DigitalGoodsStore.
    Replaced RATING with FEEDBACK.
    Added stubs for purchase, delivery, rating and refund.
    Added goods listing, delisting and price and quantity change.
    Added DigitalGoodsStore.java and some basic OOP stuff.
    updated copyright year
    test max shuffling size, set shuffling processing full size as 1/2 of real full size
    getTaggedDataExtendTransactions API
    include expired prunable JSON in API transaction JSON, if available
    added copyright notice headers
    refactoring
    use prunableAttachmentJSON parameter in broadcastTransaction, add prunableAttachmentJSON in signTransaction and getTransactionBytes response, Nxt.newTransactionBuilder(bytes,prunableAttachmentJSON)
    cleanup
    prunable encrypted messages
    prunable message
    prunable message
    fixed some IntelliJ inspections
    removed Transaction.sign and Block.sign methods, replaced TransactionProcessor.parseTransaction with Nxt.newTransactionBuilder
    added Transaction.getValidationHeight()
    minor
    defer apply for all appendixes in phasing; rename TwoPhased to Phasing; add "phasing" prefix
    allow creating and signing transactions in absence of blockchain data
    removing or rollback / commit methods from interfaces
    reviewed the VS and phasing code, added TODOs
    after MS block, the order of transactions in a block gets determined by the forger, instead of by id, default by arrival time
    unneccesary todos deleted, code formating, unneccesary exceptions handling removed
    2phased impl mostly done
    Transaction/persistence fixes due to the new appendage
    no more Longs
    datastructures prototypes are ready
    sort unconfirmed transactions using the database, preserve transaction height
    Merge validateFee with validate
    amount validation only in CreateTransaction
    Fee calculation fix
    FeeNQT final
    Exception type
    Variable fees - fee is based on 3 levels.
    Old blocks before baseline are not validated (minimum fee is 0)
    Blocks after baseline are validated using old fee
    Blocks after next baseline are validated using new fee
    renamed Transaction.verify to verifySignature and validateAttachment to validate
    exception handling improvement
    encryptToSelfMessage
    added EC fields to transaction json too, renamed to ecBlockId, ecBlockHeight
    PublicKeyAnnouncement appendix
    transactions with no recipient really should not have a recipient; bugfixes
    transaction attachments refactoring
    Added Economic Clustering.
    separate transaction validation from transaction attachment loading
    merged develop
    fully remove referencedTransactionId after NQT_BLOCK
    use sha256(signature) instead of plain signature for full hash calculation
    full hash referenced transactions
    added parseTransaction API
    more cleanup, commented out Phaser as not yet implemented
    removed NXT and INT JSON properties, removed support for NXT and INT http parameters, enabled running on main net too
    JSON representation is now use case specific, different for http API and peer to peer communication, and no longer part of the Block and Transaction APIs;
    define JSON represenations for http API in a signle place for consistency;
    always return amounts in both NXT and NQT, the amounts in NXT represented in the JSON as Strings
    NQT
    Added Phaser.
    added block_timestamp to the transaction table, added Transaction.getBlockId() and Transaction.getBlockTimestamp() which should be used for better performance instead of having to load the Block from the database to get them;
    store transaction hashes in the transaction table and make them available using Transaction.getHash() and in the JSON returned from getTransaction API;
    enable transaction lookup based on hash, as an optional parameter to the getTransaction API
    Added guid for transactions.
    don't log harmless NotYetEnabledExceptions
    drop invalid transactions instead of blacklisting peers;
    enforce transaction validation before block generation and before block acceptance because the validation conditions may have changed since the Transaction was constructed
    Block and Transaction interfaces, not finished
    embedded jetty
    Added length validation to poll creation and vote casting loadAttachment().
    renamed convert methods with more explicit names, optimized
    added isDuplicate check in Asset Issuance
    simplified block and transaction construction, made block.transactionIds and block.blockTransactions unmodifiable Lists
    Added Voting System.
    prevent duplicate account key attack
    get rid of index
    Added a skeleton for Voting System implementation.
    caching JSON in Block object doesn't help when using a database
    Added ASSET_EXCHANGE_BLOCK.
    Fixed NPE bug related to too lazy initialization of Sorted Orders.
    optimized getMilestoneBlockIds, refactoring getMoreBlocks and generateBlock threads
    minor
    minor cleanup
    minor, invalid state checking
    made block.payloadHash and generationSignature final
    height setting bug
    avoid potential null pointers
    avoid potential null pointers
    merged lastBytes fix from 0.5.12
    fixed transaction hash validation
    purge expired hashes in block.apply
    aliases optimization
    fixed transaction hash validation
    merged lastBytes fix from 0.5.12
    todo
    aliases optimization
    optimizations
    optimizations
    optimizations, added index on block.height
    optimization
    finished database transition, no more serialized files support
    database initialization and update, save and load blocks and transactions
    don't blacklist peers when validation fails because of a not yet enabled feature
    validation and debugging
    minor
    fixed validation, NxtException, partial undo support
    enforce transaction and attachment validation
    more API cleanup, removed extra conversion to/from ByteBuffer
    API cleanup
    encapsulate fields
    removed unused code
    minor transaction validation cleanup
    getState show number of unlocked accounts, minor
    more cleanup
    use Longs for id's, a lot of cleanup
    minor
    more cleanup
    transaction type refactoring
    transaction type refactoring
    fixed transaction.sign
    finished doGet and doPost switch refactoring
    doGet switch statement refactoring, not done yet
    moved blockchain init out of Nxt servlet
    moved background thread definitions out of Nxt servlet
    added Blockchain class
    moved Attachment to top level
    backwards compatible with 0.5.9 serialized forms
    moved all classes to separate files
    updated copyright year
    added copyright notice headers
    forging bugfixes and improvements
    Unit tests - leasing
    undo caching of previousBlock as doing it correctly is more complicated than it is worth
    caching of previousBlock, better query for expired DGS purchases
    require that the timestamp parameter in getECBlock is not less than last block timestamp - 15
    added getECBlock API
    don't apply EC fork check to referencing transactions
    only log transactions generated on a fork instead of rejecting them
    added EC fields to transaction json too, renamed to ecBlockId, ecBlockHeight
    start recording EC clusterDefiningBlock in transactions at DGS block, enforce EC fork check and TF8 after PK_ANNOUNCEMENT_BLOCK, some refactoring and preparing to merge with develop branch
    Added Rule Terminator.
    Added Economic Clustering.
    Hardfork coming - commit and update to 1.7.4
    NXT-PLUS in a single commit
    use parseUnsignedLong instead of BigInteger
    updated copyright year
    get rid of account creation height
    added copyright notice headers
    no more Longs
    minor
    use Longs for id's, a lot of cleanup
    moved blockchain init out of Nxt servlet
    updated copyright year
    fixed broken English
    test currency and asset shuffling
    phasing refactoring
    shuffling assets
    added hash API
    added copyright notice headers
    refactoring
    always uppercase currency code in Currency.getCurrencyByCode
    allow different hash functions for by-hash phasing
    fixed some IntelliJ inspections
    fixed currency reserve validation in case of phased transaction
    added Transaction.getValidationHeight()
    also check phasing finish height for AE dividend payment and MS currency issuance
    replace some Convert methods with java 8 ones
    removed pre-MS checks and logic where no longer needed; added a checksum at MS block
    verify that currency type exists, enforce sellRate > buyRate for exchange offers
    use signed bytes for min/max minting difficulty to allow values 1 to 255
    Move additional validation added yesterday to their respective currency types - cont
    require currency name to be not shorter than the currency code
    change SHUFFLEABLE to NON_SHUFFLEABLE, all currencies should be shuffleable by default
    variable fees for currency issuance
    Shuffling - isDuplicate() validation and deletion
    allow currency to be both reservable and mintable, fix initial supply (pre-mine) handling
    improved currency delete
    allow a currency to be both exchangeable and claimable
    delete existing currency if issuing account owns all of it
    allow pre-mines for claimable currency too
    allow pre-mines for claimable currency too
    issuanceHeight must be 0 for non-reservable currencies, initial supply must be 0 for claimable currencies and not exceed total supply
    reserve NXT currency code
    currency mint should use EntityDbTable
    crowdfunding listener fixes
    don't throw not implemented exception
    store currency transfer recipientId as transaction recipient instead of in attachment
    cleanup of the CurrencyType validation code, optimized to avoid multiple db access;
    enforce unique currency_id, account_id in exchange offers
    improved currency name and code validation
    more fixes and notes, not finished
    more fixes and notes, not finished
    more fixes and notes, not finished
    Exchange offer validations and naming change
    Change currency type from byte to int for allow for future expansion of additional capabilities
    1. IssueCurrency client side dialog
    2. Implement controllable currency type - currency which can only be transferred to/from issuer and only issuer can publish exchange offer
    Implement claimable, currency can be claimed only when it's active and not exchangeable. If we let currency become both exchangeable and claimable users can game the exchange rate and use which is lower. Adapt Javadoc accordingly.
    Javadoc work in progress
    Implement CurrencyTransfer, change the term "money" to "currency" where applicable
    Enhance CurrencyType to support multiple currency types in the same currency and validate their inter dependencies (unit testing not included)
    Intermidiate commit for saving work on currency validation
    1. Increase units per mint to 0.01% of total supply (see Constants)
    2. ApplyAttachment() no longer depends on CurrencyType in preparation for adding currency capabilities
    1. Separate TransactionType MonetarySystem into a separate class to reduce merging problems
    2. Reduce dependency on CurrencyType in preparation for making it an enum set
    Replace CurrencyExchange api with currency buy and sell
    Naming change from *CurrencyBalanceQNT to *CurrencyUnits
    re-organize currency exchange testing
    Currency Reserve unit tests and fixes to the crowd funding system
    Implement the exchanges table and getAllExchanges API
    Unit test uses getAllExchanges API
    Add algorithm field to currency
    Convert Long to long in Currency and Exchange
    update issuer account id in currency
    Monetary System Http APIs - part 1
    Implemented minting.
    Implemented delayed issuance.
    Implemented currency issuance, reserve increase/claim, money transfer.
    Refactored CurrencyType.
    Changed a method name.
    Added CurrencyType.
    more post-hardfork cleanup
    DbKey optimizations
    updated copyright year
    added retrievePrunedTransaction API
    rebase fees to SHUFFLING_BLOCK baseline
    remove old message length constant
    new features already enabled
    switch back to production testnet, use SHUFFLING_BLOCK for all hardfork changes
    disallow duplicate linked transaction ids
    fixed restore of combined plain and encrypted prunable messages
    allow both prunable plain and prunable encrypted messages
    additional size based fee for Phasing appendix
    additional base fee for encrypted messages to account for nonce/iv fields
    additional duplicates check to prevent incorrect blaming, sort instead of shuffle, check that public key is canonical too
    also validate not yet encrypted data length
    allow calculation of sizes and fees for not yet encrypted appendages too
    do not count the AES 16 bytes initialization vector when determining encrypted data fee
    new fees
    optimization
    throttling of unique resource allocation transactions
    bugs, optimizations, various changes
    immediate release of approved phased transactions when possible
    minor
    phasing refactoring
    refactoring
    prunable attachments are never phasable
    minor optimization
    fixed public key setting, do not log key height
    do not keep zero balance accounts in account table
    allow deferred attachment encryption for full offline signing and encryption
    Merged source updates
    Account ledger support
    after VS and Phasing block
    include expired prunable JSON in API transaction JSON, if available
    fixed IntelliJ inspections
    added copyright notice headers
    refactoring
    fixed peer http request content-type, validate that text submitted as bytes can be treated as UTF-8
    allow phasing to be enabled at a different height than voting
    check whether data is utf-8 text only when submitted as bytes
    check whether data is utf-8 text only when submitted as bytes
    verify that messages or data declared to be text can indeed be converted to valid UTF-8 strings
    cleanup
    Improve error message
    fixed processing of unconfirmed ExtendTaggedData transactions, improved json validation
    minor
    fix downloading of prunable messages with non-default maxPrunableLifetime
    public key announcement must not be phasable
    always include the hash in the json, but ignore it if both hash and data are included
    version 2 uncompressed permanent encrypted messages
    allow forcing inclusion of prunables even if expired
    removed server side check for minimum prunable length
    prunable tagged data
    verifyPrunableMessage API
    refactoring
    prepare for merge
    minor refactoring
    made compression of encrypted messages optional
    refactoring
    fix message download
    fix message download from old peers
    bugs
    more cleanup
    cleanup
    bugs
    minor
    prunable encrypted messages
    reuse parameter names
    prunable message
    reuse parameter names
    prunable message
    fixed phasing appendix validation
    allow different hash functions for by-hash phasing
    also prohibit linking to phased transactions in the past
    enforce timestamp limit for linked transactions same as for referenced
    by-hash voting (pay on revealed secret)
    added by-transaction voting model (linked transactions)
    Http API: GetPhasingOnlyControl/SetPhasingOnlyControl
    First simple unit test - set and then get
    Added controls set to Account
    Phasing control "business" logic
    optimization
    fixed phasing finish height validation, cleaned up phasing and voting constants
    Refactored Appendix.Phasing - phasing data handing encapsulated in PhasingParams
    Phasing account control tables - DDL and data access classes
    Phasing AC transaction type and transaction attachment
    fixed some IntelliJ inspections
    allow phasing without voting
    reviewed applyUnconfirmed and undoApplyUnconfirmed for phasing safety, fixed for MS transactions
    increased max votes in an approval transaction to 20, changed fee, fixed some height checks in case of phasing
    optimizations
    minor, exceptions
    replace some Convert methods with java 8 ones
    fixed exception
    more phasing side effects
    fixed validation of phased transactions, removed immediate release on vote feature
    sort whitelist when constructing Appendix to be able to validate there are no duplicates
    0 is not a valid accountId in whitelist
    phasing vote fee
    added check for non-achievable quorum
    remove some poll restrictions
    phasing vote fee
    minor
    added events for release and reject of phased transactions
    minor refactoring
    variable size arbitrary and encrypted messages with size based fee
    fees refactoring, phasing fees
    added phasing_poll_result table
    set TWO_PHASED_BLOCK same as VOTING_SYSTEM_BLOCK and disable phased transactions before that
    removed blacklist
    refactoring, implement voting models as enum
    renaming
    renaming, database indexes
    renamed PollCounting to VoteWeighting
    moved common validation to PollCounting.validate
    moved out the counting logic to PollCounting
    various improvements
    defer apply for all appendixes in phasing; rename TwoPhased to Phasing; add "phasing" prefix
    GetAccountPendingTransaction, finished field added back to PendingTransactionPoll, TransactionProcessocImpl condition fix, PendingTransactionPoll.getIdsByWhitelistedSigner fix
    2-phased data trimming
    GetPendingTransactionVotesCount -> GetPendingTransactionVotes, countVotes method
    fixed account key height setting
    optimization
    better validation for twophased appendix
    TwoPhased.commit -> release
    formatting
    count poll votes at the smaller of current height or finish height
    renamed MS_COIN to CURRENCY
    optimization
    minor cleanup
    minor
    2 phased transactions: quorum validation, tests for pending transactions with invalid quorum&maxheight parameters
    various fixes and improvements
    unnecessary differences from develop branch removed
    System.out.println cleared
    assetId -> holdingId in VS & 2PT, min balance model, referential integrity contstraint fix for poll, createPoll refactoring with ParameterParser, better poll validation
    2-phased transactions apply & balance changes fix
    pruning for pending transactions polls, "finished" flag removed from phased txs HTTP API, delete operation for VersionedValuesTable
    voting on polls  & phased transactions by MS_COIN implemented (raw, could be buggy!)
    optimized query for finishing 2-phased transactions
    todos fix: visibility, inlining & other small refactoring
    no on-vote recalcs for 2-pending transactions with by-asset voting
    db issues fixes, includeVoters parameter in VS Http API, phasing transactions commit/rollback fixes
    todos fixed: better pending tx validation, json longs read/write, poll_results -> poll_result for  table name
    getPendingTransactionVotesCount, todos fixed
    TODOs fixes #1
    another TODO
    CastVotePhased API Call added, CastVote glitches fixed, bug with maxHeight fixed
    reviewed the VS and phasing code, added TODOs
    Merge branch 'develop' into voting_2phased
    
    Conflicts:
            src/java/nxt/Asset.java
            src/java/nxt/Constants.java
            src/java/nxt/NxtDbVersion.java
            src/java/nxt/db/EntityDbTable.java
    minor
    by-balance voting on pending tx is prohibited from now
    whitelists/blacklists in another table, checks for minbalance/lists
    whitelist&blacklist sizes moved to Constants.java
    some fixes  due to static code analysis
    improve transaction recipientId validation
    balances ops fix for voting recheck before refuse
    voting recheck before refuse
    unneccesary todos deleted, code formating, unneccesary exceptions handling removed
    2-phased modification for all HTTP API calls creating transactions
    blacklist implemented for 2-phased transactions, some validation added to vs/2ptxs
    poll classes renaming
    voting constants moved to Constants, getAccounPolls API call, optional account parameter has been added to getPollIds
    account_id bug fixed in Poll(voting system), multivoting in phased transactions implemented(not well-tested!)
    persistence for 2-phased votes, votecounting fixed for by-asset & by-balance, possibleVoters persistence bugfix
    deferred attachment applying, voters whitelist, some unnecessary/fixed todos have been deleted
    blockchain reorg issues solved for VS, VS HTTP API switched on
    some todos fixed or deleted as outdated, voting system fixes(now passing all existing tests)
    attachment loading fix, db fixes, after-merge fixes
    2phased impl mostly done
    minor fixes
    Transaction/persistence fixes due to the new appendage
    no more Longs
    datastructures prototypes are ready
    TwoPhased Appendix prototype ready
    JSON Constructor / parse, compile with debug info
    initial commit with appendix stub
    exception handling improvement
    after DGS block
    minor validation refactoring, also add comment in addition to message in Asset Transfer json
    removed undo
    improved error handling
    check public key length in validate()
    refactoring, fixed encrypted message json parsing bugs
    fix encrypted message json parsing
    added getAppendixName method
    encryptToSelfMessage
    cleanup, set DGS block to 205000, enforce public key announcement only after block 210000, allow running on main net
    minor
    PublicKeyAnnouncement appendix
    allow Appendices to also be validated
    improved validation exception handling
    bugs
    attachment version verification
    cleanup
    minor
    transactions with no recipient really should not have a recipient; bugfixes
    attachment versioning
    transaction attachments refactoring
    changed getAccountLedger to be consistent with all other APIs when applying firstIndex, lastIndex pagination
    h2 no longer uses order of in-select queries for external query too, need to specify it explicitly
    do not log to account ledger if more than trimKeep blocks behind last known block
    updated copyright year
    account properties
    use shuffling id for shuffling cancelation and distribution ledger events
    Use transaction id instead of block id
    bugs, optimizations, various changes
    shuffling events and ledger events
    shuffling assets
    optimization, only create LedgerEvent objects if logging will need to be done
    todo
    Don't log account change if scanning and block height less than initial height
    intellij inspections
    minor
    Code review
    Adjust account balance when merging entries
    Preserve account update order
    Add TRANSACTION_FEE account ledger event
    Code review
    Merge ledger entries
    Account ledger review
    code review, added TODOs, various minor changes
    Asset delete support
    Add timestamp to ledger entry
    Account ledger support
    global publicKey cache
    updated copyright year
    fixed public key setting, do not log key height
    use explicit read-write lock for blockchain
    added copyright notice headers
    optimized Account.getEffectiveBalance, added getEffectiveBalance(height)
    optimization
    allow multiple reserve increases from same founder in the same block
    Disable VS and Hub Announcement on testnet and removed unfinished code that is not production ready from 1.3. This will cause a testnet reset to block 77341.
    no more Longs
    performance, reduce number of Strings created
    optimizations
    DbIterator, offset and limit pagination
    trimming of derived objects tables
    refactoring
    renaming
    DbKey, DbKeyFactory, removed Link tables
    refactoring
    removed undo
    refactoring, guaranteed balances in database, not finished
    accounts in database, not finished
    merging with feature/db
    refactoring
    hubs in database
    finished getNextBlockGenerators refactoring and optimizations
    DbKey optimizations
    updated copyright year
    getTaggedDataExtendTransactions API
    do a full rescan instead of trying to fix genesis asset transfers
    Asset delete support
    added copyright notice headers
    fixed some IntelliJ inspections
    added getOrderTrades, improved default sorting in non-versioned tables
    phasing for asset issuance and asset transfer
    added getCount methods to EntityDbTable
    renaming
    multiple database support
    add timestamp to asset transfer
    sorting
    more renaming
    refactoring
    renamed Transfer to AssetTransfer
    keep track of asset transfers in a transfer table, added getTransfers API
    DbKey optimizations
    updated copyright year
    optimization
    minor
    refactoring
    try to handle correctly tagged data restore at lower heights
    do not restore TaggedDataExtend transactions, instead update tagged data tags and timestamps when the TaggedDataUpload is restored
    Add RetrievePrunedData API
    Retrieve phased prunable data
    getTaggedDataExtendTransactions API
    code review, added TODOs, various minor changes
    Merged source updates
    minor, code style
    added copyright notice headers
    cleanup
    added channel field to tagged data
    data_tag must be a persistent table
    tagged data extend bugs
    tagged data bugs
    improved tagged data extending
    extendTaggedData API, versioned prunable data
    getDataTags, getDataTagCount, getDataTagsLike, verifyTaggedData APIs
    tags for tagged data
    getTaggedData, getAccountTaggedData, searchTaggedData APIs, bugfixes
    prunable tagged data
    updated copyright year
    shuffling assets
    DbKey optimizations
    updated copyright year
    Account ledger support
    Virtual exchange
    added copyright notice headers
    replace some Convert methods with java 8 ones
    phasing for AE orders
    phasing
    after VS block, order transactions by index instead of id during trade processing
    added availableOnly parameter to getSellOffers and getBuyOffers, to return offers with non-zero supply and limit only
    after MS block, the order of transactions in a block gets determined by the forger, instead of by id, default by arrival time
    renaming
    multiple database support
    added Trade.isBuy(), exposed as tradeType in trade json
    more sorting
    sorting
    refactoring
    no more Longs
    performance, reduce number of Strings created
    getTrades API now can return trades for account, asset, or a combination of the two
    order creation height separate from last modified height
    optimizations
    FilteringIterator
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    DbIterator, offset and limit pagination
    trimming of derived objects tables
    refactoring
    renaming
    DbKey, DbKeyFactory, removed Link tables
    more refactoring
    refactoring
    removed undo
    moved nxt.Db to nxt.db.Db
    debug
    refactoring, guaranteed balances in database, not finished
    accounts in database, not finished
    merging with feature/db
    minor
    refactoring
    bug
    orders in database
    fractional quantities
    NQT
    minor
    Add getAllTrades(timestamp) API call.
    
    This call returned all trades (regardless of asset) executed since the specified timestamp.
    
    For this call it was necessary to add assetId and timeStamp information to trade objects in memory.
    if the bidder ended up buying cheaper than his bid, the difference should be added back to his unconfirmed balance
    fix handling of unconfirmed balances and asset balances and undoing of asset transactions
    blockchain refactoring
    minor improvements
    Added "getTrades" API request.
    renamed convert methods with more explicit names, optimized
    remove possibly wrong overrides of equals, enforce unique objects, made some methods package-local
    keep the lazy initialization of sortedOrders in the Order class
    Fixed NPE bug related to too lazy initialization of Sorted Orders.
    avoid null pointers
    avoid potential null pointers
    avoid potential null pointers
    Added "getAccount".
    Improved "getAskOrderIds", "getBidOrderIds".
    Enabled "getAsset", "getAssetIds".
    return unmodifiable maps
    return unmodifiable maps
    more API cleanup, removed extra conversion to/from ByteBuffer
    encapsulate fields
    also clear Assets and Orders on rescan, some API refactoring in progress
    more cleanup
    use Longs for id's, a lot of cleanup
    more cleanup
    factored out common code
    DbKey optimizations
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    fixed some IntelliJ inspections
    phasing for MS offers
    more phasing side effects
    restrict exchange offer supplies not to exceed total limits
    added availableOnly parameter to getSellOffers and getBuyOffers, to return offers with non-zero supply and limit only
    minor
    after MS block, the order of transactions in a block gets determined by the forger, instead of by id, default by arrival time
    replaced getAllOffers with getBuyOffers and getSellOffers, added getOffer, offer queries optimizations
    refactoring
    make sure DbIterators are closed
    optimizations
    rename CurrencyBuy and CurrencySell to CurrencyBuyOffer and CurrencySellOffer
    more fixes and notes, not finished
    more fixes and notes, not finished
    more fixes and notes, not finished
    Exchange offer validations and naming change
    Complete tracing creation and verification (not tested yet), replace Long with long in MS code
    Merge develop into feature/ms
    More MS unit tests and bug fixes
    port currency exchange to database and support height for versioned tables
    DbKey optimizations
    updated copyright year
    Use transaction id instead of block id
    made deletion of finished shufflings optional
    shuffling assets
    delete all shuffles and their participants when done or at finish height
    keep track of which shuffle participant first initiated cancelling, do not allow deletion of currencies with shuffles in progress
    code review, added TODOs, various minor changes
    Account ledger support
    added copyright notice headers
    fixed IntelliJ inspections, replace some for loops with Iterable.forEach
    always uppercase currency code in Currency.getCurrencyByCode
    moved account info to a separate table, removed unused message pattern code
    added getAliasesLike and searchAccounts APIs, drop and recreate search indexes on full rescan
    fixed some IntelliJ inspections
    minor
    reviewed applyUnconfirmed and undoApplyUnconfirmed for phasing safety, fixed for MS transactions
    replace some Convert methods with java 8 ones
    phasing for MS
    split currency table to improve performance
    removed pre-MS checks and logic where no longer needed; added a checksum at MS block
    fixed double spending exception on currency delete
    use signed bytes for min/max minting difficulty to allow values 1 to 255
    added currency initial_supply
    add creation_height to currency table
    fixed DebugTrace and VerifyTrace for MS transactions
    currency search sort order
    search currencies by code, name, or description, using lucene, not tested
    implement crowdfunding distribution of non-claimable currency as paying NXT to issuer instead of locking
    Shuffling - minor
    Shuffling - isDuplicate() validation and deletion
    Shuffling - work on isDuplicate() not done yet and bug fixes
    Reserve distribution rounding test + fix to current supply
    Delete currency test + one fix in Currency
    Reserve distribution rounding test + fix to current supply
    Delete currency test + one fix in Currency
    revert increase in case of error
    bug, currency must be saved
    minor, error checking
    allow currency to be both reservable and mintable, fix initial supply (pre-mine) handling
    added a separate DeleteCurrency transaction and API call
    if a mintable currency is not fully minted, only currency issuer can delete it, provided he owns all currently existing units
    improved currency delete
    made currency_mint table Versioned, delete mint records when a mintable currency is deleted
    also allow deletion of currency that nobody owns
    there may be other offers with 0 supply, remove them too
    delete existing currency if issuing account owns all of it
    added currency decimals, optionally include currency name and decimals in getCurrencyTransfers and getExchanges
    crowdfunding listener fixes
    fixed currency_founder unique index
    optimizations
    store currency transfer recipientId as transaction recipient instead of in attachment
    cleanup of the CurrencyType validation code, optimized to avoid multiple db access;
    enforce unique currency_id, account_id in exchange offers
    improved currency name and code validation
    more fixes and notes, not finished
    more fixes and notes, not finished
    more fixes and notes, not finished
    more fixes and notes, not finished
    Change currency type from byte to int for allow for future expansion of additional capabilities
    1. IssueCurrency client side dialog
    2. Implement controllable currency type - currency which can only be transferred to/from issuer and only issuer can publish exchange offer
    Implement GetCurrencyAccounts API
    Merge with latest entity DB changes
    Implement CurrencyTransfer, change the term "money" to "currency" where applicable
    Intermidiate commit for saving work on currency validation
    1. Increase units per mint to 0.01% of total supply (see Constants)
    2. ApplyAttachment() no longer depends on CurrencyType in preparation for adding currency capabilities
    Replace CurrencyExchange api with currency buy and sell
    Naming change from *CurrencyBalanceQNT to *CurrencyUnits
    re-organize currency exchange testing
    Complete tracing creation and verification (not tested yet), replace Long with long in MS code
    Currency Reserve unit tests and fixes to the crowd funding system
    More exchange tests and APIs
    Implement the exchanges table and getAllExchanges API
    Unit test uses getAllExchanges API
    Add algorithm field to currency
    Convert Long to long in Currency and Exchange
    Merge develop into feature/ms
    Simplify currency transfer, add additional APIS, align mint data types across classes
    Remove the NXT currency and revert the offline change
    More work on APIs
    Implement isDuplicate fixes and logging improvements
    commit the nxt currency
    fix currency issuance problems
    port currency exchange to database and support height for versioned tables
    use versioned entity tables
    port currency founder and currency mint to database
    replace currency maps with database calls
    update issuer account id in currency
    update issuer account id in currency
    version the Currency table
    Created currency and account_currency tables.
    Initial work on account balances
    Removed the SuperComplexNumber
    Issuer account
    Implemented minting.
    Implemented delayed issuance.
    Added stubs for currency exchange and minting.
    Implemented currency issuance, reserve increase/claim, money transfer.
    Added currency ruleset support.
    Added validation of MS attachments.
    Added Currency.
    Prepared nxt/Account for implementation of Monetary System. (reverted from commit bcce245fce855f9c1df770b0ec911338edf13c2c)
    Prepared nxt/Account for implementation of Monetary System. (reverted from commit bcce245fce855f9c1df770b0ec911338edf13c2c)
    Prepared nxt/Account for implementation of Monetary System.
    allow disabling the public key cache
    global publicKey cache
    DbKey optimizations
    updated copyright year
    increase lease limit to 65535 blocks
    use recipient instead of account everywhere in account properties including for transaction recipient
    minor
    account properties
    limit of 1000 NXT on min forging balance
    bugs, optimizations, various changes
    more DbClauses
    
    (cherry picked from commit 8adcd7a83569b171a7781019acbe5c5fe8beffad)
    more DbClauses
    performance optimization, avoid querying database tables when only accountId or other id is needed
    refactoring
    Set event id to transaction id for dividend payment
    also allow encrypting messages if recipient public key will be provided by the current transaction
    optimization, only create LedgerEvent objects if logging will need to be done
    no need to check for id 0
    fixed public key setting, do not log key height
    do not keep zero balance accounts in account table
    get key height from public_key table
    get rid of account creation height
    Add TRANSACTION_FEE account ledger event
    do a full rescan instead of trying to fix genesis asset transfers
    code review, added TODOs, various minor changes
    Handle scan with validate=false
    Add dividend payment sanity check
    Account ledger support
    fixed handling of deleted leases
    keep account lease info in a separate table
    no need to use Integer.MAX_VALUE
    improve performance of account leasing height indexes
    database performance optimizations
    added copyright notice headers
    fixed IntelliJ inspections, replace some for loops with Iterable.forEach
    improved DoubleSpendinException
    refactoring
    made compression of encrypted messages optional
    minor
    cleaned up some hardcoded constants
    minor bug
    NXT-PLUS in a single commit
    moved account info to a separate table, removed unused message pattern code
    added getAliasesLike and searchAccounts APIs, drop and recreate search indexes on full rescan
    Added controls set to Account
    Phasing control "business" logic
    fixed some IntelliJ inspections
    minor
    reviewed applyUnconfirmed and undoApplyUnconfirmed for phasing safety, fixed for MS transactions
    also enforce that query height does not exceed blockchain height
    optimized Account.getEffectiveBalance, added getEffectiveBalance(height)
    more lambdas
    replace some Convert methods with java 8 ones
    more phasing side effects
    minor
    fix debug trace of dividend payment
    account_asset table needs to keep 1440 height records more than the default
    key height bug
    fixed account key height setting
    optimization
    optimization, do not store redundant public_key records in the database
    also log key height and effective balance in debug trace
    count poll votes at the smaller of current height or finish height
    optimization
    various fixes and improvements
    consistent ordering needed for the blockchain processor tests
    reviewed the VS and phasing code, added TODOs
    added getAccountCurrencyCount and getCurrencyAccountCount APIs
    added getAccountAssetCount, getAliasCount, getDGSGoodsCount, getDGSGoodsPurchaseCount, getDGSPurchaseCount APIs
    Fix merge problem
    added getAccountCurrencies API, added optional includeLessors, includeAssets, includeCurrencies parameters to getAccount
    Unit tests - leasing
    only go through accounts that change leasing status
    minor sql optimization
    optimizations
    added getAccountAssets and getAssetAccountCount APIs, each also taking a height parameter
    optimizations, make sure DbIterator is closed, do not hold table locks long
    added getCount methods to EntityDbTable
    Shuffling - test infrastructure
    improve transaction recipientId validation
    avoid extra database calls in Account.payDividends
    Implementing remaining pieces of the 'dividend payment' transaction type.
    merged in the server-side version of the merchant account message pattern feature, may need more testing
    delete existing currency if issuing account owns all of it
    renaming
    minor fixes while reviewing the code
    multiple database support
    include lessors guaranteed balance as of the requested height in getAccountLessors
    only save changes to account public key when signature verification is done within a db transaction
    2phased impl mostly done
    improved double spending check
    Eliminate the isUnitTest patch
    back to ordering by id
    optimization
    sorting
    AccountAsset should not have a height field at all
    also sort asset holders by quantity, account_id, lessors need sorting by id only
    added another load test, sort account lessors by id too
    keep lastTrimHeight non-negative
    add number of asset holders to asset json
    Align AccountCurrency height with AccountAsset height
    test for account asset equality should not include unconfirmed quantities, moved equals out of AccountAsset
    height should be set when saving
    always set height in AccountAsset
    Implement GetCurrencyAccounts API
    merged develop
    Added support of dividend payment transactions.
    Implement CurrencyTransfer, change the term "money" to "currency" where applicable
    bugs
    testing historical queries
    refactoring
    renamed Transfer to AssetTransfer
    allow historical queries if data still available, added optional height parameter to getAssetAccounts, added getAccountLessors with a height parameter
    Replace CurrencyExchange api with currency buy and sell
    Naming change from *CurrencyBalanceQNT to *CurrencyUnits
    re-organize currency exchange testing
    keep track of asset transfers in a transfer table, added getTransfers API
    Complete tracing creation and verification (not tested yet), replace Long with long in MS code
    allow time manipulations for testing, and test forging
    Start work on tracing and alignment with develop
    tests for blockchain download, rescan and rollback
    minor
    More exchange tests and APIs
    More MS work on unit tests and starting to work on currency exchange entity similar to asset trade entity
    no more Longs
    performance, reduce number of Strings created
    More MS unit tests and bug fixes
    MS unit tests and bug fixes
    getTrades API now can return trades for account, asset, or a combination of the two
    added getAssetAccounts API to get all holders of an asset
    Implement isDuplicate fixes and logging improvements
    port currency exchange to database and support height for versioned tables
    Created currency and account_currency tables.
    Initial work on account balances
    Removed the SuperComplexNumber
    Issuer account
    optimizations
    optimizations, refactoring
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    DbIterator, offset and limit pagination
    check for public key mismatch
    trimming of derived objects tables
    refactoring
    renaming
    DbKey, DbKeyFactory, removed Link tables
    model Trade as link table
    refactoring
    removed undo
    improved error handling
    minor
    synchronization on Account no longer needed
    finished accounts in database
    account assets bug
    leasing and guaranteed balance bugs
    keep leasing account_ids ordered
    moved nxt.Db to nxt.db.Db
    better guaranteed balance algorithm
    account assets delete bug
    bugs
    cleanup
    accounts in database bugs
    refactoring, guaranteed balances in database, not finished
    accounts in database, not finished
    accounts in database, not finished
    transactions with no recipient really should not have a recipient; bugfixes
    Implemented minting.
    merging with feature/db
    remove asset balances that drop to zero
    more error checking
    extra safety check
    Added validation of unconfirmed MS transaction attachments.
    Removed redundant code related to assets.
    Refactored asset and currency balance variables.
    Added basic Currency support into Account.
    Added basic Currency support into Account.
    Grouped NXT balance and asset quantities into a superbalance.
    alias transfer bugfixes and clean up
    alias transfer - alpha
    include guaranteedBalanceNQT(1440) in getAccount JSON
    minor
    Account.getPublicKey() should return null if key has not been included in a block yet
    fix undo lease handling
    minor
    added Account.getForgedBalanceNQT, and forgedBalanceNQT to account JSON
    DGS now uses AES; finished DGS API; added Account.encryptTo and Account.decryptFrom; added DGS event listeners
    check for RS collisions
    finish Reed-Solomon format core support
    undo of leasing should trigger a rescan
    added lease listeners
    full hash referenced transactions
    balance leasing optimization;
    keep negative values of guaranteed balance for internal use only, effective balance always non-negative
    add leasing info to the account JSON
    added leaseBalance http API, enable transparent forging 6 on testnet at block 73000
    setAccountInfo
    made more readable
    reviewed effective balance leasing;
    some getNextBlockGenerators refactoring
    DGS refactoring
    more DGS work
    some cleanup
    fractional quantities
    workaround old guaranteedbalance bug
    Prepared nxt/Account for implementation of Monetary System. (reverted from commit bcce245fce855f9c1df770b0ec911338edf13c2c)
    NQT
    Prepared nxt/Account for implementation of Monetary System. (reverted from commit bcce245fce855f9c1df770b0ec911338edf13c2c)
    Prepared nxt/Account for implementation of Monetary System.
    Implemented delivery in DGS.
    Implemented purchase in DGS.
    Added an extra condition for effective balance calculation.
    Completed Effective Balance Leasing.
    added AccountAsset listeners, don't update balance when difference is 0
    also return unconfirmed asset balances
    added ASSET_BALANCE and UNCONFIRMED_ASSET_BALANCE events, fixed possible asset and unconfirmed asset balance calculation bug
    moved constants to a separate class so that custom properties can be used to set them
    Added the 6th step to TF.
    Added methods to get a hit and its time for an account.
    Account.apply also does setOrVerify
    return 0 for guaranteed balance when required number of confirmations exceeds blockchain height
    blockchain refactoring
    renamed convert methods with more explicit names, optimized
    simplified block and transaction construction, made block.transactionIds and block.blockTransactions unmodifiable Lists
    debug
    Something weird has happened to my local repository.
    prevent duplicate account key attack
    avoid null pointers
    another guaranteed balance fix, block 67000
    listeners
    preserve the broken guaranteedBalance calculation until block 64000 to prevent a fork
    preserve the broken guaranteedBalance calculation until block 64000 to prevent a fork
    fix another guaranteedBalance calculation bug
    fix another guaranteedBalance calculation bug
    Added "getAccount".
    Improved "getAskOrderIds", "getBidOrderIds".
    Enabled "getAsset", "getAssetIds".
    return unmodifiable maps
    return unmodifiable maps
    Added "getAccount".
    Improved "getAskOrderIds", "getBidOrderIds".
    Enabled "getAsset", "getAssetIds".
    more API cleanup, removed extra conversion to/from ByteBuffer
    encapsulate fields
    new guaranteedBalance implementation from 0.5.11
    more cleanup
    use Longs for id's, a lot of cleanup
    more cleanup
    fix TF height bug at block 51000
    finished doGet and doPost switch refactoring
    doGet switch statement refactoring, not done yet
    moved background thread definitions out of Nxt servlet
    added Blockchain class
    moved Attachment to top level
    moved all classes to separate files
    DbKey optimizations
    updated copyright year
    null pointer
    max fees exception formatting
    allow limiting max fees and phasing duration for phasing controlled accounts
    approval transactions (PhasingVoteCasting) should not be subject to phasing only account control
    voting models by-hash and by-transaction not allowed for phasing control
    bugs, optimizations, various changes
    Auto-fill phasing parameters when mandatory approval is enabled
    Fixed duplicate PhasingOnly object in DB cache
    Http API: GetPhasingOnlyControl/SetPhasingOnlyControl
    First simple unit test - set and then get
    Added controls set to Account
    Phasing control "business" logic
    Refactored Appendix.Phasing - phasing data handing encapsulated in PhasingParams
    Phasing account control tables - DDL and data access classes
    Phasing AC transaction type and transaction attachment
    DbKey optimizations
    updated copyright year
    getLastTrades and getLastExchanges APIs
    ExchangeRequest derived object and exchange_request table
    added copyright notice headers
    fixed some IntelliJ inspections
    added getOrderTrades, improved default sorting in non-versioned tables
    java 8 lambdas
    replace some Convert methods with java 8 ones
    phasing for MS
    added getExchangesByOffer
    Fix SQL syntax error
    getAccountExchangeRequests refactoring
    refactor to use the getCount methods
    merged develop
    refactoring
    make sure DbIterators are closed
    use transaction_id, offer_id as primary key for exchange
    minor
    minor fixes while reviewing the code
    Merge with latest entity DB changes
    Implement the exchanges table and getAllExchanges API
    Unit test uses getAllExchanges API
    Add algorithm field to currency
    Convert Long to long in Currency and Exchange
    Merge develop into feature/ms
    More MS work on unit tests and starting to work on currency exchange entity similar to asset trade entity
    updated copyright year
    added hash API
    added copyright notice headers
    refactoring to avoid MintWorker having to intialize blockchain processing classes that it does not need
    DbKey optimizations
    updated copyright year
    added retrievePrunedTransaction API
    add registered count to shuffling
    bugs
    minor fixes
    also allow shuffling filtering by stage
    need foreign key on shuffling_data, fixed db version steps
    more tests and bugs
    more shuffling state consistency validation, logging, refactoring
    bugs
    shuffling events and ledger events
    refactoring
    prunable shuffling processing data
    more shuffling validation
    delete all shuffles and their participants when done or at finish height
    shuffle processing, verification, and cancellation should all depend on current shuffle state and validate that it did not change
    all participants equally allowed to cancel shuffle, improved shuffle and participants state validation
    no need for separate ShufflingDistribute transaction
    finished blame, maybe
    blame
    keep track of which shuffle participant first initiated cancelling, do not allow deletion of currencies with shuffles in progress
    fixed participant ordering
    simplify, each participant stores data and keys in its own record
    reveal keys as part of shuffle cancel transaction, for now
    refactoring, use byte[][] instead of serializing encrypted data, store recipient keys in issuer data field
    use recipientPublicKey instead of recipientId
    added some TODOs, bugfixes, cleanup
    copyright notices
    Another round of shuffling code review and adapt the currency test to a database which contains multiple currencies
    Merge changes into shuffling code
    Shuffling - allow null values for shuffling currency and shuffling_participant next account (similar to next_lessee_id)
    Shuffling - code review pass 1 - add todo items
    Shuffling tests and fixes
    Implement the shuffling process transaction which implements the shuffling algorithm
    Work on shuffle processing
    More testing and fixing problem in the participant registration code
    Testing and fixing problem in the participant registration code
    Work on APIs and transaction types
    Work on attachment validation and transaction types
    Initial work on shuffling Participants
    Initial work on shuffling
    debug trace for asset delete transaction
    updated copyright year
    switch back to production testnet, use SHUFFLING_BLOCK for all hardfork changes
    also spread shuffling penalty fees
    log back fees correctly in DebugTrace
    clean up old special case bugs
    bugs
    added DebugTrace logging for shuffling, set assignee account to blamed account on cancel with blame
    refactoring
    fixed public key setting, do not log key height
    do a full rescan instead of trying to fix genesis asset transfers
    debug
    keep account lease info in a separate table
    added copyright notice headers
    cleaned up some hardcoded constants
    java 8 lambdas
    replace some Convert methods with java 8 ones
    fixed DebugTrace to work with phased transactions, maybe
    fix debug trace of dividend payment
    also log key height and effective balance in debug trace
    added a CURRENCY_MINT event, fixed DebugTrace logging for minting
    refactoring to avoid MintWorker having to intialize blockchain processing classes that it does not need
    bug in DebugTrace when deleting a currency
    debugTrace fix
    log dividend payments in DebugTrace
    added currency initial_supply
    only log successful mints in DebugTrace
    DebugTrace fix for currency issuance
    fixed DebugTrace and VerifyTrace for MS transactions
    DGS refactoring, moving static methods
    allow currency to be both reservable and mintable, fix initial supply (pre-mine) handling
    Exchange offer validations and naming change
    Implement CurrencyTransfer, change the term "money" to "currency" where applicable
    Complete tracing creation and verification (not tested yet), replace Long with long in MS code
    minor fixes
    Start work on tracing and alignment with develop
    tests for blockchain download, rescan and rollback
    no more Longs
    block pop-off refactoring, removed BEFORE_BLOCK_UNDO event
    DbIterator, offset and limit pagination
    DbKey, DbKeyFactory, removed Link tables
    Merge branch 'feature/db' into feature/votingsystem
    added BEFORE_BLOCK_ACCEPT event to make DebugTrace comparable with feature/db branch
    added BEFORE_BLOCK_ACCEPT event to help with logging of guaranteed balances
    also log generator effective balance
    fix DebugTrace to handle null recipient accountId
    accounts in database, not finished
    merging with feature/db
    use Arbitrary Message type for encrypted messages too, better parameter names
    transaction attachments refactoring
    fix balance logging of DGS transactions
    remove unnecessary balance entries
    remove unnecessary balance entries
    scan same as push, cleanup, unconfirmed balance logging optional
    orders in database
    allow ridiculously large ask orders
    also log blockId
    also log AM in nxt-trace.csv
    another check for overflow
    include guaranteedBalanceNQT(1440) in getAccount JSON
    add refundNQT and discountNQT fields to Purchase, debug trace of purchase transactions
    log lessor guaranteed balances for every block
    trace leasing begin and end, and lessor guaranteed balance for each generated block with fees
    allow custom quote or separator in debug trace
    debug trace bug
    fractional quantities
    NQT
    only log the specific asset balance that changed, don't log when change is 0
    minor
    improvements to DebugTrace, log the event type, log order cancellations, added changelog
    also track and verify asset balances
    debug improvements, allow tracing of all existing accounts, only verify confirmed balances at the end
    automated parsing and verification of trace output
    improved DebugTrace
    debug tracing of account balances and account trades
    voting and phasing hard fork block is same, cleanup
    DbKey optimizations
    updated copyright year
    immediate release of approved phased transactions when possible
    refactoring
    added copyright notice headers
    fixed IntelliJ inspections, replace some for loops with Iterable.forEach
    added creation timestamp to polls
    added includeFinished to getPolls
    added by-transaction voting model (linked transactions)
    minor optimizations
    added getAliasesLike and searchAccounts APIs, drop and recreate search indexes on full rescan
    fixed phasing finish height validation, cleaned up phasing and voting constants
    added getOrderTrades, improved default sorting in non-versioned tables
    allow nulls where needed for some phasing tables
    allow phasing without voting
    also include total weighted vote count for each option in the poll result
    java 8 lambdas
    optimization, restrict voting range to prevent overflow
    replace some Convert methods with java 8 ones
    fixed poll result counting
    PollResult class not needed, rely on ValuesDbTable to preserve values ordering and store results only
    fixed validation of phased transactions, removed immediate release on vote feature
    at finish height poll is finished
    fees refactoring, phasing fees
    minor refactoring
    added searchPolls API
    added phasing_poll_result table
    refactoring, implement voting models as enum
    renamed PollCounting to VoteWeighting
    moved out the counting logic to PollCounting
    various improvements
    shorten PartialPollResult to PollResult
    Constants.VOTING_MINBALANCE_UNDEFINED removed
    do the deletion of old votes in vote table trim instead
    purge votes for polls that finished before max rollback height, as their weight can no longer be calculated
    renamed finishBlockHeight to finishHeight
    count poll votes at the smaller of current height or finish height
    optimization
    minor cleanup
    various fixes and improvements
    System.out.println cleared
    Poll.isfinished fix
    assetId -> holdingId in VS & 2PT, min balance model, referential integrity contstraint fix for poll, createPoll refactoring with ParameterParser, better poll validation
    Poll entity isn't versioned anymore, broken queries fix
    isFinished method removed from PendingTransactionPoll, formatting
    optional polls processing, finished field removed from all pols
    voting on polls  & phased transactions by MS_COIN implemented (raw, could be buggy!)
    HTTP API bugfixes, getPollsFinishingAt bugfix
    PartalPollResult instead of Pair<String, Long>
    Poll.addPoll refactoring
    todos fix: visibility, inlining & other small refactoring
    db issues fixes, includeVoters parameter in VS Http API, phasing transactions commit/rollback fixes
    unused methods deletion (getAssetsWithName, Poll.exists, Poll.isFinished)
    todos fixed: better pending tx validation, json longs read/write, poll_results -> poll_result for  table name
    pending_transactions_signers -> pending_transaction_signer, finish -> finish_height for polls
    getPendingTransactionVotesCount, todos fixed
    TODOs fixes #1
    reviewed the VS and phasing code, added TODOs
    some fixes  due to static code analysis
    voting system got massive update
    poll classes renaming
    voting constants moved to Constants, getAccounPolls API call, optional account parameter has been added to getPollIds
    account_id bug fixed in Poll(voting system), multivoting in phased transactions implemented(not well-tested!)
    persistence for 2-phased votes, votecounting fixed for by-asset & by-balance, possibleVoters persistence bugfix
    deferred attachment applying, voters whitelist, some unnecessary/fixed todos have been deleted
    blockchain reorg issues solved for VS, VS HTTP API switched on
    some todos fixed or deleted as outdated, voting system fixes(now passing all existing tests)
    attachment loading fix, db fixes, after-merge fixes
    2phased impl mostly done
    Disable VS and Hub Announcement on testnet and removed unfinished code that is not production ready from 1.3. This will cause a testnet reset to block 77341.
    no more Longs
    performance, reduce number of Strings created
    Merge branch 'feature/db' into feature/votingsystem
    
    Conflicts:
            src/java/nxt/Attachment.java
            src/java/nxt/DbVersion.java
            src/java/nxt/Generator.java
            src/java/nxt/Poll.java
            src/java/nxt/Vote.java
            src/java/nxt/db/DbTable.java
            src/java/nxt/http/GetActivePollIds.java
    Merge branch 'feature/db' into feature/votingsystem
    
    Conflicts:
            src/java/nxt/Attachment.java
            src/java/nxt/DbVersion.java
            src/java/nxt/Generator.java
            src/java/nxt/Poll.java
            src/java/nxt/Vote.java
            src/java/nxt/db/DbTable.java
            src/java/nxt/http/GetActivePollIds.java
    optimizations
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    DbIterator, offset and limit pagination
    trimming of derived objects tables
    refactoring
    unconfirmed transactions expiration
    renaming
    DbKey, DbKeyFactory, removed Link tables
    refactoring
    Poll extends CachingDbTable, DbVersion updated, defaultSort got back
    Merge branch 'feature/db' into feature/votingsystem
    removed undo
    Poll.getCount method added, GetPollIds http API method removed
    cache database objects during transactions
    getAllPolls removed
    refactoring, guaranteed balances in database, not finished
    encodeResultsAsJson redundancy fixed
    merging with feature/db
    todos fixed
    validation fixes
    voting system - pre-final version
    refactoring
    polls and votes in database
    voting system - alpha(no validation, interface is raw)
    minor improvements
    renamed convert methods with more explicit names, optimized
    remove possibly wrong overrides of equals, enforce unique objects, made some methods package-local
    Added Voting System.
    testing
    use last known block
    Hardfork coming - commit and update to 1.7.4
    use unconfirmed transactions cache
    run unconfirmed transaction expiration less often
    DbKey optimizations
    updated copyright year
    must clear cache between each restore
    uniform handling of insufficient balance errors
    added retrievePrunedTransaction API
    prunable appendages are never phased
    also preserve currently not valid transactions on popoff reprocessing
    skip some transaction validations when below last known checksum, and also don't accept new transactions
    skip some transaction validations when below last known checksum, and also don't accept new transactions
    Shuffler can use waitingTransactions and rebroadcasting instead of its own queue
    run processWaitingTransactions in a separate thread
    
    (cherry picked from commit 376ac7fc5d671ed58039f002cb8973268335ac99)
    run processWaitingTransactions in a separate thread
    added Shuffler, made shuffling registration also depend on shuffling full hash
    phasing refactoring
    support limits on duplicates count
    do not restore TaggedDataExtend transactions, instead update tagged data tags and timestamps when the TaggedDataUpload is restored
    do not keep zero balance accounts in account table
    Add RetrievePrunedData API
    Retrieve phased prunable data
    code review, added TODOs, various minor changes
    Code review
    Cache unconfirmed transactions
    Merged source updates
    expunge referencing unconfirmed transactions before others when needed
    added getExpectedAsk/BidOrders APIs
    use explicit read-write lock for blockchain
    no need for DISTINCT
    reject some peer requests and don't process transactions while blockchain download is in progress
    added copyright notice headers
    fixed IntelliJ inspections, replace some for loops with Iterable.forEach
    improved unconfirmed transaction propagation
    also clear broadcastedtransactions in clearUnconfirmedTransactions
    better handling of invalid transactions during block generation
    fixed lostTransactions leak
    renamed lostTransactions to waitingTransactions, undo UnconfirmedTransaction.isNotCurrentlyValid and use a limit on arrival timestamp instead
    fixed processing of unconfirmed transactions, added getAllBroadcasted and getAllLostTransactions debug APIs
    added rebroadcastUnconfirmedTransactions debug API
    allow limiting unconfirmed transaction pool size
    logging
    removed limit on transaction deadline, added limit on lost transactions pool for currently not valid transactions
    also check transaction id in processTransaction
    minor
    removed Transaction.sign and Block.sign methods, replaced TransactionProcessor.parseTransaction with Nxt.newTransactionBuilder
    uncache bytes after signing, optimizations
    streams
    more lambdas
    java 8 lambdas
    fixed validation of phased transactions, removed immediate release on vote feature
    set TWO_PHASED_BLOCK same as VOTING_SYSTEM_BLOCK and disable phased transactions before that
    bugs
    log exceptions in peer transaction processing
    defer apply for all appendixes in phasing; rename TwoPhased to Phasing; add "phasing" prefix
    GetAccountPendingTransaction, finished field added back to PendingTransactionPoll, TransactionProcessocImpl condition fix, PendingTransactionPoll.getIdsByWhitelistedSigner fix
    forging bugfixes and improvements
    GetPendingTransactionVotesCount -> GetPendingTransactionVotes, countVotes method
    minor cleanup
    various fixes and improvements
    limit peer networking request and response sizes to prevent out of memory attacks
    minor
    unconfirmedDuplicates improvements
    refactoring to avoid MintWorker having to intialize blockchain processing classes that it does not need
    allow creating and signing transactions in absence of blockchain data
    optional polls processing, finished field removed from all pols
    prevent duplicate minting transactions in the unconfirmed pool
    voting on polls  & phased transactions by MS_COIN implemented (raw, could be buggy!)
    optimized query for finishing 2-phased transactions
    treat expired transactions as not currently valid only, but remove them in lost transactions processing instead
    todos fix: visibility, inlining & other small refactoring
    corrected log message
    new transactions are always version 1
    new transactions are always version 1
    removed confusing logging, done better in 1.4
    expired transactions are not valid
    logging
    optimization, preliminary check for already existing transaction
    move the call to transaction.validate() inside TransactionProcessor.broadcast(transaction)
    db issues fixes, includeVoters parameter in VS Http API, phasing transactions commit/rollback fixes
    refactoring of new transactions processing to be able to return more specific errors
    fixed unsetBlock
    removing or rollback / commit methods from interfaces
    debug logging of insufficient balance transactions
    reviewed the VS and phasing code, added TODOs
    minor
    use timestamp for transactions that were in a block
    after MS block, the order of transactions in a block gets determined by the forger, instead of by id, default by arrival time
    minor, renaming
    unneccesary todos deleted, code formating, unneccesary exceptions handling removed
    poll classes renaming
    Work on shuffle processing
    deferred attachment applying, voters whitelist, some unnecessary/fixed todos have been deleted
    attachment loading fix, db fixes, after-merge fixes
    renaming
    multiple database support
    added clearUnconfirmedTransactions API
    improved transaction broadcasting and re-broadcasting
    2phased impl mostly done
    added getECBlock API
    optimized expired transaction processing
    unconfirmed transactions don't need to be versioned if they are always deleted before a height change
    run blockchain test with unconfirmed transactions processing enabled
    refactoring
    minor fixes
    allow disabling of the transaction re-broadcasting feature, always re-send unconfirmed transactions to peers
    allow time manipulations for testing, and test forging
    initialization bug
    removed isDownloading because it can often be wrong
    keep only non-broadcasted unconfirmed transactions on shutdown and enqueue them for re-broadcasting on restart
    cleanup, don't clear non-broadcasted transactions on rescan
    do not remove unconfirmed transactions on shutdown
    allow disabling of specific background tasks for test purposes
    no more Longs
    performance, reduce number of Strings created
    MS unit tests and bug fixes
    iterable bugs
    changed unconfirmed transaction processing to reduce size of unconfirmed_transaction table
    simplify
    unconfirmed transaction height saving bug, cleanup
    trying different approach to expire transactions
    prevent bugs
    trim unconfirmed transaction table before each expiration check
    sort unconfirmed transactions using the database, preserve transaction height
    reapply unconfirmed transaction during rescan, block pop-off bugfix
    delete unconfirmed transactions on shutdown
    delete unconfirmed transaction bugs
    skip currently not valid peer transactions instead of allowing them in the pool
    more bugs
    bugs
    use versioned table for unconfirmed transactions
    optimizations
    fix transaction handling on pop-off, maybe
    optimization
    still accept our own transactions even if downloading
    added BlockchainProcessor.isDownloading(), do not accept unconfirmed transactions if isDownloading
    optimizations, refactoring
    bugs
    bug
    DbIterator, offset and limit pagination
    trimming of derived objects tables
    refactoring
    keep unconfirmed transactions on shutdown
    unconfirmed transactions expiration
    renaming
    DbKey, DbKeyFactory, removed Link tables
    refactoring
    renamed Transaction.verify to verifySignature and validateAttachment to validate
    exception handling improvement
    ignore version 0 transactions
    removed scan at start
    minor refactoring
    trying to save transactions
    removed undo
    unconfirmed transactions in database
    debug
    parseTransaction, signTransaction and broadcastTransaction also accepts transactions in JSON format instead of bytes
    debug
    version check cleanup
    added EC fields to transaction json too, renamed to ecBlockId, ecBlockHeight
    start recording EC clusterDefiningBlock in transactions at DGS block, enforce EC fork check and TF8 after PK_ANNOUNCEMENT_BLOCK, some refactoring and preparing to merge with develop branch
    moved nxt.Db to nxt.db.Db
    cleanup, set DGS block to 205000, enforce public key announcement only after block 210000, allow running on main net
    improved validation exception handling
    transactions with no recipient really should not have a recipient; bugfixes
    merging with feature/db
    transaction attachments refactoring
    reworked verification of unconfirmed transactions during block push, updateTotals should no longer be necessary
    unconfirmed balance fix
    database transactions
    Added Economic Clustering.
    removed old referencedTransactionId code
    separate transaction validation from transaction attachment loading
    blacklist peer on RuntimeException
    checksum at NQT_BLOCK
    post-nqt bugs
    re-check unconfirmed pool for double-spending transactions after block push
    moved check for fractional amounts to validateAttachment
    minor
    null pointer
    more backwards compatibility
    backwards compatibility for referenced transactions, testnet checkpoint at NQT_BLOCK, REFERENCED_TRANSACTIONS_FULL_HASH_BLOCK
    merged develop
    fully remove referencedTransactionId after NQT_BLOCK
    use sha256(signature) instead of plain signature for full hash calculation
    full hash bugfixes, allow finding transaction by full hash, return full hash in the JSON
    full hash referenced transactions
    better error checking
    better transaction attachment validation
    more cleanup, commented out Phaser as not yet implemented
    null pointer in parsing asset order attachments
    fixed parsing of transaction json
    JSON representation is now use case specific, different for http API and peer to peer communication, and no longer part of the Block and Transaction APIs;
    define JSON represenations for http API in a signle place for consistency;
    always return amounts in both NXT and NQT, the amounts in NXT represented in the JSON as Strings
    better handling of invalid transactions during block generation, always remove from unconfirmed pool
    better handling of invalid transactions during block generation, always remove from unconfirmed pool
    doubleSpendingTransactions map is not needed
    fixed to use a Map
    prevent duplicate hash transactions in the unconfirmed transactions
    remove duplicate hash transactions from unconfirmed transactions pool
    NQT
    better error handling
    return error for double spending transactions and do not re-broadcast them
    automated parsing and verification of trace output
    added BEFORE_BLOCK_APPLY and BEFORE_BLOCK_UNDO events, added Block.undo()
    Added Phaser.
    verify transaction signature before broadcast
    improve asset issuance transaction validation
    also remove no longer valid transactions from re-broadcasting transactions pool
    Added "findObject".
    no need to log the full stack trace here
    remove transactions that have become invalid from the unconfirmed transactions pool
    fix transaction rebroadcasting
    fix unconfirmed balance calculation
    new transaction timestamp is always current time, no need to supply as parameter
    fix handling of unconfirmed balances and asset balances and undoing of asset transactions
    null pointers, added blacklisted and wellknown to peer info
    blacklist peers sending bad data
    reduce memory waste
    cosmetic clean up
    define Listeners for Logger and for Blockchain scan, added Observable interface
    blockchain refactoring
    DbKey optimizations
    updated copyright year
    keep track of asset deletes in asset_delete table, added getAssetDeletes API
    asset table is now versioned, updated indexes, cannot use height and db_id sorting
    do not keep zero balance accounts in account table
    getTaggedDataExtendTransactions API
    do a full rescan instead of trying to fix genesis asset transfers
    code review, added TODOs, various minor changes
    Use initial asset quantity to validate attachment
    Handle variable asset quantity when paying dividends
    Asset delete support
    added copyright notice headers
    minor
    added getAliasesLike and searchAccounts APIs, drop and recreate search indexes on full rescan
    minor
    added getOrderTrades, improved default sorting in non-versioned tables
    unnecessary differences from develop branch removed
    unused methods deletion (getAssetsWithName, Poll.exists, Poll.isFinished)
    reviewed the VS and phasing code, added TODOs
    allow secondary sort of search results
    implemented full text search using the H2 lucene search, added searchAssets and searchDGSGoods APIs
    Implementing remaining pieces of the 'dividend payment' transaction type.
    attachment loading fix, db fixes, after-merge fixes
    Added support of dividend payment transactions.
    refactoring
    renamed Transfer to AssetTransfer
    allow historical queries if data still available, added optional height parameter to getAssetAccounts, added getAccountLessors with a height parameter
    keep track of asset transfers in a transfer table, added getTransfers API
    no more Longs
    performance, reduce number of Strings created
    added getAssetAccounts API to get all holders of an asset
    Merge branch 'feature/db' into feature/votingsystem
    
    Conflicts:
            src/java/nxt/Attachment.java
            src/java/nxt/DbVersion.java
            src/java/nxt/Generator.java
            src/java/nxt/Poll.java
            src/java/nxt/Vote.java
            src/java/nxt/db/DbTable.java
            src/java/nxt/http/GetActivePollIds.java
    optimizations
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    DbIterator, offset and limit pagination
    trimming of derived objects tables
    refactoring
    renaming
    DbKey, DbKeyFactory, removed Link tables
    refactoring
    removed undo
    cache database objects during transactions
    refactoring, guaranteed balances in database, not finished
    merging with feature/db
    refactoring
    trades in database
    assets in database, refactoring
    removed getAssetsByName API;
    getAssetsByIssuer now accepts multivalued "account" parameter and returns a list of lists of assets
    added getAssetsByIssuer API
    fractional quantities
    null pointer
    allow non-unique asset names;
    added GetAssetsByName API request
    renamed convert methods with more explicit names, optimized
    remove possibly wrong overrides of equals, enforce unique objects, made some methods package-local
    keep the lazy initialization of sortedOrders in the Order class
    Fixed NPE bug related to too lazy initialization of Sorted Orders.
    fixed validation, NxtException, partial undo support
    more API cleanup, removed extra conversion to/from ByteBuffer
    encapsulate fields
    also clear Assets and Orders on rescan, some API refactoring in progress
    use Longs for id's, a lot of cleanup
    doGet switch statement refactoring, not done yet
    moved all classes to separate files
    Hardfork coming - commit and update to 1.7.4
    more post-hardfork cleanup
    DbVersion cleanup
    voting and phasing hard fork block is same, cleanup
    minor
    updated copyright year
    force fork resolution for those upgrading after the hard fork
    dbVersion cleanup
    make sure fork is resolved
    force rescan on testnet
    use a separate referenced_transaction table
    added getReferencingTransactions API
    DbVersion cleanup
    use recipient instead of account everywhere in account properties including for transaction recipient
    DbVersion cleanup
    rename
    add registered count to shuffling
    simplify NxtDbVersion
    allow limiting max fees and phasing duration for phasing controlled accounts
    allow both prunable plain and prunable encrypted messages
    keep track of asset deletes in asset_delete table, added getAssetDeletes API
    cancellingAccountId can be stored in assigneeAccountId, shuffling stage error checking
    account properties
    Use transaction id instead of block id
    asset table is now versioned, updated indexes, cannot use height and db_id sorting
    bugs, optimizations, various changes
    index not unique for now
    immediate release of approved phased transactions when possible
    need foreign key on shuffling_data, fixed db version steps
    made deletion of finished shufflings optional
    bugs
    more shuffling APIs, database indexes
    separate height deadlines for each shuffling phase, skipping full blocks
    prunable shuffling processing data
    shuffling assets
    more shuffling validation
    shuffle processing, verification, and cancellation should all depend on current shuffle state and validate that it did not change
    keep track of which shuffle participant first initiated cancelling, do not allow deletion of currencies with shuffles in progress
    fixed participant ordering
    reveal keys as part of shuffle cancel transaction, for now
    refactoring, use byte[][] instead of serializing encrypted data, store recipient keys in issuer data field
    do not keep zero balance accounts in account table
    get key height from public_key table
    get rid of account creation height
    truncate instead of updating asset table as rescan will populate it
    Add RetrievePrunedData API
    Add block_id column to account_ledger table
    rescan needed to populate tagged_data_extend too
    getTaggedDataExtendTransactions API
    do a full rescan instead of trying to fix genesis asset transfers
    code review, added TODOs, various minor changes
    Lucene 5.2 support
    Use initial asset quantity to validate attachment
    Asset delete support
    Invalid db schema
    Merged source updates
    Add timestamp to ledger entry
    Typo creating account_ledger table
    use recipientPublicKey instead of recipientId
    added some TODOs, bugfixes, cleanup
    Account ledger support
    ExchangeRequest derived object and exchange_request table
    Merge FIMK additions to 1.5.11
    merge db changes
    fix exception when before VS block
    delete blocks above 445000 only
    after VS and Phasing block
    keep account lease info in a separate table
    fixed NxtDbVersion
    improve performance of account leasing height indexes
    database performance optimizations
    added copyright notice headers
    minor
    Purge old peer database entries
    Fix merge problem
    Remove the lucene index on account name and description
    added channel field to tagged data
    require reveal secret when approving by-hash phased transaction
    trigger rescan on testnet
    force rescan
    data_tag must be a persistent table
    improved tagged data extending
    extendTaggedData API, versioned prunable data
    tags for tagged data
    getTaggedData, getAccountTaggedData, searchTaggedData APIs, bugfixes
    prunable tagged data
    store transaction timestamp instead of expiration time for prunable messages, improve some indexes
    prepare for merge
    made compression of encrypted messages optional
    rollback and truncate cannot be done on prunable tables
    bugs
    minor
    minor
    prunable encrypted messages
    prunable message
    added creation timestamp to polls
    prunable message
    changed back to 6874 testnet, cleaned up new NxtDbVersion steps
    allow different hash functions for by-hash phasing
    by-hash voting (pay on revealed secret)
    added by-transaction voting model (linked transactions)
    minor
    allow duplicate votes for phased transactions
    NXT-PLUS in a single commit
    moved account info to a separate table, removed unused message pattern code
    Http API: GetPhasingOnlyControl/SetPhasingOnlyControl
    First simple unit test - set and then get
    search index creation in NxtDbVersion no longer needed
    added getAliasesLike and searchAccounts APIs, drop and recreate search indexes on full rescan
    fixed phasing finish height validation, cleaned up phasing and voting constants
    Refactored Appendix.Phasing - phasing data handing encapsulated in PhasingParams
    Phasing account control tables - DDL and data access classes
    Phasing AC transaction type and transaction attachment
    fixed some IntelliJ inspections
    added getOrderTrades, improved default sorting in non-versioned tables
    allow nulls where needed for some phasing tables
    removed Peer.isWellKnown; use nxt-default.properties for setting initial peers instead of NxtDbVersion
    index on transaction.full_hash not needed
    also include total weighted vote count for each option in the poll result
    removed unneeded index
    added getPollVote and getPhasingPollVote APIs
    index on poll_result cannot be unique
    fixed poll result counting
    renamed voter_count to whitelist_size
    PollResult class not needed, rely on ValuesDbTable to preserve values ordering and store results only
    phasing for MS offers
    phasing for AE orders
    fixed validation of phased transactions, removed immediate release on vote feature
    indexes on phasing_poll_voter
    after VS block, order transactions by index instead of id during trade processing
    get founders currency - index is not unique
    get founders currency - initial commit not tested
    added searchPolls API
    added phasing_poll_result table
    removed blacklist
    use full hash instead of just id to identify transactions being voted for
    simplify NxtDbVersion
    bugs
    renaming
    renaming, database indexes
    moved out the counting logic to PollCounting
    defer apply for all appendixes in phasing; rename TwoPhased to Phasing; add "phasing" prefix
    indexes on poll, vote, poll_result tables
    GetAccountPendingTransaction, finished field added back to PendingTransactionPoll, TransactionProcessocImpl condition fix, PendingTransactionPoll.getIdsByWhitelistedSigner fix
    pending_transaction_signer.poll_id -> pending_transaction_signer.pending_transaction_id
    fixed old NxtDbVersion steps
    fixed account key height setting
    optimization, do not store redundant public_key records in the database
    Initial Support for System Tray icons - status dialog
    limit peer networking request and response sizes to prevent out of memory attacks
    call ftl_reindex()
    lucene reindex needed after altering currency table
    split currency table to improve performance
    testnet for VS on port 2874
    assetId -> holdingId in VS & 2PT, min balance model, referential integrity contstraint fix for poll, createPoll refactoring with ParameterParser, better poll validation
    optional polls processing, finished field removed from all pols
    pruning for pending transactions polls, "finished" flag removed from phased txs HTTP API, delete operation for VersionedValuesTable
    updated initial peers
    voting on polls  & phased transactions by MS_COIN implemented (raw, could be buggy!)
    removed pre-MS checks and logic where no longer needed; added a checksum at MS block
    GetPollIds fix for RS accounts
    updated initial peers
    disable message pattern feature
    db versions synchronized with develop branch
    enforce exchange offer expiration height to be after current blockchain height
    restrict exchange offer supplies not to exceed total limits
    schedule a testnet rescan
    force rescan on testnet to delete invalid exchange offers blocks
    Merge branch 'develop' into voting_2phased
    
    Conflicts:
            html/ui/index.html
            html/ui/js/nrs.modals.transaction.js
            html/ui/js/nrs.transactions.js
            src/java/nxt/Account.java
            src/java/nxt/Constants.java
            src/java/nxt/Nxt.java
            src/java/nxt/NxtDbVersion.java
            src/java/nxt/TransactionDb.java
            src/java/nxt/TransactionImpl.java
            src/java/nxt/TransactionProcessorImpl.java
            src/java/nxt/db/DbClause.java
            src/java/nxt/db/DbIterator.java
            src/java/nxt/http/APIServlet.java
            src/java/nxt/http/APITag.java
            src/java/nxt/http/CreateTransaction.java
            src/java/nxt/http/JSONData.java
            src/java/nxt/http/JSONResponses.java
            src/java/nxt/util/Convert.java
    simplified ms dbversion steps
    put back testnet ports and peers
    no on-vote recalcs for 2-pending transactions with by-asset voting
    updated initial known peers
    added currency initial_supply
    submission height is not needed in CurrencyMint
    add creation_height to currency table
    the batch update of transaction_index is too slow when MVCC=TRUE unless UNDO_LOG is disabled
    todos fixed: better pending tx validation, json longs read/write, poll_results -> poll_result for  table name
    made account currency indexes on buy and sell offer non unique
    pending_transactions_signers -> pending_transaction_signer, finish -> finish_height for polls
    database tables / fields renaming, NxtDbVersion case 137 fix
    1.4.0e testnet on ports 2874, 2875, 2876
    save scan status in database to continue rescan until successfully completed
    TODOs fixes #1
    reviewed the VS and phasing code, added TODOs
    Another round of shuffling code review and adapt the currency test to a database which contains multiple currencies
    store parsed tags in Goods and also expose them in json
    added tag table and getDGSTags API
    search currencies by code, name, or description, using lucene, not tested
    implemented full text search using the H2 lucene search, added searchAssets and searchDGSGoods APIs
    updated initial known peers
    whitelists/blacklists in another table, checks for minbalance/lists
    caching of previousBlock, better query for expired DGS purchases
    optimizations
    Merge branch 'develop' into voting_2phased
    
    Conflicts:
            src/java/nxt/Constants.java
            src/java/nxt/NxtDbVersion.java
            src/java/nxt/TransactionProcessorImpl.java
    at least one forceScan is needed in DbVersion
    after MS block, the order of transactions in a block gets determined by the forger, instead of by id, default by arrival time
    multiple database support
    fixed ecBlockId loading
    2phased impl mostly done
    Change currency type from byte to int for allow for future expansion of additional capabilities
    Add timestamp to currency transfer
    add timestamp to asset transfer
    updated default known peers and last known block
    use long instead of int for identity columns
    unconfirmed transactions don't need to be versioned if they are always deleted before a height change
    more sorting
    sorting
    Implement CurrencyTransfer, change the term "money" to "currency" where applicable
    renamed Transfer to AssetTransfer
    keep track of asset transfers in a transfer table, added getTransfers API
    added askOrderHeight and bidOrderHeight to Trade
    Disable VS and Hub Announcement on testnet and removed unfinished code that is not production ready from 1.3. This will cause a testnet reset to block 77341.
    Minting tests, minting and reserve increase fixes
    Currency Reserve unit tests and fixes to the crowd funding system
    Implement the exchanges table and getAllExchanges API
    Unit test uses getAllExchanges API
    Add algorithm field to currency
    Convert Long to long in Currency and Exchange
    removed some old steps
    Transaction/persistence fixes due to the new appendage
    Merge branch 'feature/db' into feature/votingsystem
    
    Conflicts:
            src/java/nxt/DbVersion.java
    MS unit tests and bug fixes
    getTrades API now can return trades for account, asset, or a combination of the two
    prevent bugs
    Merge branch 'feature/db' into feature/votingsystem
    
    Conflicts:
            src/java/nxt/Attachment.java
            src/java/nxt/DbVersion.java
            src/java/nxt/Generator.java
            src/java/nxt/Poll.java
            src/java/nxt/Vote.java
            src/java/nxt/db/DbTable.java
            src/java/nxt/http/GetActivePollIds.java
    sort unconfirmed transactions using the database, preserve transaction height
    fix SQL metadata
    port currency exchange to database and support height for versioned tables
    port currency founder and currency mint to database
    order creation height separate from last modified height
    use versioned table for unconfirmed transactions
    version the Currency table
    fix table name
    Created currency and account_currency tables.
    Initial work on account balances
    Removed the SuperComplexNumber
    Issuer account
    removed derived table foreign key constraints as H2 does not have deferred checking
    use block timestamp instead of transaction timestamp in Blockchain.getTransactions
    updated initial peers
    unconfirmed transactions expiration
    removed scan at start
    Poll extends CachingDbTable, DbVersion updated, defaultSort got back
    revert account freezing changes
    this is the rollback version
    no need for revalidate
    db bigfixing
    fixed bugs in rollback code
    Merge branch 'feature/db' into feature/votingsystem
    removed undo
    unconfirmed transactions in database
    try to avoid database update errors
    updated testnet peers
    DGS in database bugs
    forced re-validation only needed on testnet
    encryptToSelfMessage
    updated initial peer addresses, handle peer address changes
    added EC fields to transaction json too, renamed to ecBlockId, ecBlockHeight
    start recording EC clusterDefiningBlock in transactions at DGS block, enforce EC fork check and TF8 after PK_ANNOUNCEMENT_BLOCK, some refactoring and preparing to merge with develop branch
    moved nxt.Db to nxt.db.Db
    better guaranteed balance algorithm
    bugs
    accounts in database bugs
    PublicKeyAnnouncement appendix
    merging with feature/db
    bugs
    transaction attachments refactoring
    use NULL in the db for no-recipient transactions, added GetAccountTransactions, sort by timestamp desc, added fromIndex toIndex parameters
    fixed bad DbVersion merge
    more error checking
    updated initial known peers
    digital goods in database
    hubs in database
    polls and votes in database
    orders in database
    cleanup
    database transactions
    trades in database
    assets in database, refactoring
    aliases in database
    cleanup
    reverse sorting of purchases, allow filtering goods by availability, pagination
    Fixed a bug related to DB scheme upgrade.
    Added EC fields into DB scheme.
    refresh initial peers for new installations
    removed getAssetsByName API;
    getAssetsByIssuer now accepts multivalued "account" parameter and returns a list of lists of assets
    upgrades from old versions require database reset
    remove Serializable
    minor
    minor
    updated initial peer nodes for new installations
    store attachment bytes instead of Attachment objects in the database
    store attachment bytes instead of Attachment objects in the database
    merged develop
    fully remove referencedTransactionId after NQT_BLOCK
    force validation again
    full hash referenced transactions
    store peers in the database
    validation has to be done during scan, not in DbVersion
    better transaction attachment validation
    fractional quantities
    0.8.13 changelog
    NQT
    do a one-time validation in DbVersion instead
    improved DbVersion to save the db level at every step
    added block_timestamp to the transaction table, added Transaction.getBlockId() and Transaction.getBlockTimestamp() which should be used for better performance instead of having to load the Block from the database to get them;
    store transaction hashes in the transaction table and make them available using Transaction.getHash() and in the JSON returned from getTransaction API;
    enable transaction lookup based on hash, as an optional parameter to the getTransaction API
    Something weird has happened to my local repository.
    get rid of index
    minor cleanup
    additional table indexes
    more optimizations, added methods to filter blocks and transactions by account
    optimizations, added index on block.height
    finished database transition, no more serialized files support
    database initialization and update, save and load blocks and transactions
    updated copyright year
    uniform handling of insufficient balance errors
    bugs, optimizations, various changes
    allow deferred attachment encryption for full offline signing and encryption
    added copyright notice headers
    fixed lostTransactions leak
    fixed processing of unconfirmed transactions, added getAllBroadcasted and getAllLostTransactions debug APIs
    Refactored Appendix.Phasing - phasing data handing encapsulated in PhasingParams
    Phasing account control tables - DDL and data access classes
    Phasing AC transaction type and transaction attachment
    simplify PeerImpl.send error handling
    unnecessary differences from develop branch removed
    getPendingTransactionVotesCount, todos fixed
    reviewed the VS and phasing code, added TODOs
    cleanup, don't clear non-broadcasted transactions on rescan
    improved validation exception handling
    transaction attachments refactoring
    voting system - alpha(no validation, interface is raw)
    cosmetic clean up
    don't blacklist peers when validation fails because of a not yet enabled feature
    fixed validation, NxtException, partial undo support
    NXT-PLUS in a single commit
    DbKey optimizations
    updated copyright year
    trim tables in a separate thread not in transaction
    added copyright notice headers
    minor optimizations
    fixed some IntelliJ inspections
    added getPollVote and getPhasingPollVote APIs
    added phasing_poll_result table
    various improvements
    do the deletion of old votes in vote table trim instead
    purge votes for polls that finished before max rollback height, as their weight can no longer be calculated
    various fixes and improvements
    unnecessary differences from develop branch removed
    db issues fixes, includeVoters parameter in VS Http API, phasing transactions commit/rollback fixes
    reviewed the VS and phasing code, added TODOs
    double voting prevention
    getPollVotes API Call
    some todos fixed or deleted as outdated, voting system fixes(now passing all existing tests)
    attachment loading fix, db fixes, after-merge fixes
    refactoring
    Disable VS and Hub Announcement on testnet and removed unfinished code that is not production ready from 1.3. This will cause a testnet reset to block 77341.
    no more Longs
    performance, reduce number of Strings created
    Merge branch 'feature/db' into feature/votingsystem
    
    Conflicts:
            src/java/nxt/Attachment.java
            src/java/nxt/DbVersion.java
            src/java/nxt/Generator.java
            src/java/nxt/Poll.java
            src/java/nxt/Vote.java
            src/java/nxt/db/DbTable.java
            src/java/nxt/http/GetActivePollIds.java
    optimizations
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    DbIterator, offset and limit pagination
    trimming of derived objects tables
    refactoring
    renaming
    DbKey, DbKeyFactory, removed Link tables
    refactoring
    Merge branch 'feature/db' into feature/votingsystem
    removed undo
    cache database objects during transactions
    moved nxt.Db to nxt.db.Db
    refactoring, guaranteed balances in database, not finished
    merging with feature/db
    refactoring
    polls and votes in database
    voting system - alpha(no validation, interface is raw)
    renamed convert methods with more explicit names, optimized
    remove possibly wrong overrides of equals, enforce unique objects, made some methods package-local
    Added Voting System.
    updated copyright year
    fixed IntelliJ inspections
    Track database execution times
    added copyright notice headers
    data_tag must be a persistent table
    optimization
    updated copyright year
    do not keep zero balance accounts in account table
    revert trimming changes, keep in the same thread
    trim tables in a separate thread not in transaction
    added copyright notice headers
    extendTaggedData API, versioned prunable data
    added getAliasesLike and searchAccounts APIs, drop and recreate search indexes on full rescan
    minor
    reverted broken optimization attempt
    account_asset table needs to keep 1440 height records more than the default
    optimization, do not store redundant public_key records in the database
    optimization
    added canDeleteCurrency API
    less logging
    Delete currency test + one fix in Currency
    Delete currency test + one fix in Currency
    some todos fixed or deleted as outdated, voting system fixes(now passing all existing tests)
    multiple database support
    2phased impl mostly done
    clear cache after rollback
    allow historical queries if data still available, added optional height parameter to getAssetAccounts, added getAccountLessors with a height parameter
    performance, reduce number of Strings created
    unconfirmed transaction height saving bug, cleanup
    sort unconfirmed transactions using the database, preserve transaction height
    less logging
    permanently delete deleted entries on trim
    no history needed when deleting record created at same height
    optimization
    delete unconfirmed transaction bugs
    bugs
    bugs
    use versioned table for unconfirmed transactions
    rollback to height
    FilteringIterator
    added BlockchainProcessor.isDownloading(), do not accept unconfirmed transactions if isDownloading
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    trimming optimizations
    debug
    trimming bug
    more thorough trimming
    DbIterator, offset and limit pagination
    trimming of derived objects tables
    refactoring
    rollback code is same
    renaming
    DbKey, DbKeyFactory, removed Link tables
    more refactoring
    refactoring
    updated copyright year
    more DbClauses
    
    (cherry picked from commit 8adcd7a83569b171a7781019acbe5c5fe8beffad)
    more DbClauses
    added copyright notice headers
    added getAliasesLike and searchAccounts APIs, drop and recreate search indexes on full rescan
    fixed some IntelliJ inspections
    various fixes and improvements
    Poll entity isn't versioned anymore, broken queries fix
    added availableOnly parameter to getSellOffers and getBuyOffers, to return offers with non-zero supply and limit only
    reviewed the VS and phasing code, added TODOs
    added getDGSTagCount API, allow getDGSGoodsCount and getDGSPurchaseCount to be used also to get total goods or purchase counts
    implemented full text search using the H2 lucene search, added searchAssets and searchDGSGoods APIs
    double voting prevention
    GetAccountPendingTransactionIds
    added IntClause
    attachment loading fix, db fixes, after-merge fixes
    refactoring
    updated copyright year
    fixed IntelliJ inspections
    Track database execution times
    updated copyright year
    added copyright notice headers
    fixed ParameterParser, some refactoring
    various fixes and improvements
    db issues fixes, includeVoters parameter in VS Http API, phasing transactions commit/rollback fixes
    iterable bugs
    port currency exchange to database and support height for versioned tables
    implement Iterable
    FilteringIterator
    refactoring, guaranteed balances in database, not finished
    DbIterator AutoCloseable
    h2 1.4.190, with MVStore disabled
    h2 1.4.190
    updated copyright year
    Lucene 5.2 support
    Ask for shutdown confirmation and display database URL
    added copyright notice headers
    skip shutdown compact if database did not yet initialize
    Separate the logic for enabling the system tray on every desktop from the logic of using the user dir only on Windows desktop - not tested yet
    Support installation by non-priviligied user on Windows
    Embed the user home dir into the dburl
    renaming
    multiple database support
    prevent bugs
    renaming
    DbKey, DbKeyFactory, removed Link tables
    model Trade as link table
    removed scan at start
    cache database objects during transactions
    moved nxt.Db to nxt.db.Db
    if not using NxtLogManager, print shutdown messages to System.out
    refactoring, guaranteed balances in database, not finished
    merging with feature/db
    minor
    database transactions
    allow changing the database default lock timeout, set to 10 seconds by default
    added getBlocks and getTransactions using PreparedStatement, made Db.getConnection public
    moved constants to a separate class so that custom properties can be used to set them
    enable use of testnet just by setting nxt.isTestnet=true
    init improvements
    package as nxt.jar
    use nxt-default.properties for all defaults
    allow custom database connection settings
    define Listeners for Logger and for Blockchain scan, added Observable interface
    blockchain refactoring
    Block and Transaction interfaces, not finished
    embedded jetty
    Something weird has happened to my local repository.
    avoid duplicate Db.shutdown calls
    compact database at shutdown
    get rid of index
    optimizations
    optimizations, added index on block.height
    increased number of pooled connections to 200
    database initialization and update, save and load blocks and transactions
    optimization
    updated copyright year
    added copyright notice headers
    extendTaggedData API, versioned prunable data
    fixed VersionedValuesDbTable.delete
    pruning for pending transactions polls, "finished" flag removed from phased txs HTTP API, delete operation for VersionedValuesTable
    multiple database support
    performance, reduce number of Strings created
    trimming of derived objects tables
    refactoring
    updated copyright year
    do not keep zero balance accounts in account table
    added copyright notice headers
    extendTaggedData API, versioned prunable data
    updated copyright year
    minor
    Not compatible with Eclipse
    made deletion of finished shufflings optional
    minor
    refactoring
    no need to use Integer.MAX_VALUE
    improve performance of account leasing height indexes
    added copyright notice headers
    fixed poll result counting
    fix limit and offset sql
    multiple database support
    minor
    no more Longs
    DbIterator, offset and limit pagination
    bugs
    cleanup
    refactoring, guaranteed balances in database, not finished
    DbIterator AutoCloseable
    optimizations
    finished database transition, no more serialized files support
    updated copyright year
    immediate release of approved phased transactions when possible
    set default query parser operator to AND
    Handle H2-generated table copies
    Add Lucene 5.2 libraries
    Lucene 5.2 support
    updated copyright year
    added copyright notice headers
    extendTaggedData API, versioned prunable data
    refactoring
    added getAliasesLike and searchAccounts APIs, drop and recreate search indexes on full rescan
    revert unnecessary batch operation
    TODOs fixes #1
    reviewed the VS and phasing code, added TODOs
    make sure DbIterators are closed
    make sure derived tables are registered before start
    attachment loading fix, db fixes, after-merge fixes
    renaming
    minor
    multiple database support
    derived tables don't have referential constraints anyway
    only tables that can have cache need to have it cleared
    clear cache after rollback
    performance, reduce number of Strings created
    MS unit tests and bug fixes
    sort unconfirmed transactions using the database, preserve transaction height
    less logging
    check for inTransaction
    bugs
    rollback to height
    bugs
    trimming of derived objects tables
    minor
    refactoring
    removed undo
    moved nxt.Db to nxt.db.Db
    refactoring, guaranteed balances in database, not finished
    updated copyright year
    Track database execution times
    updated copyright year
    added copyright notice headers
    extendTaggedData API, versioned prunable data
    store transaction timestamp instead of expiration time for prunable messages, improve some indexes
    allow keeping prunable data longer
    refactoring
    rollback and truncate cannot be done on prunable tables
    minor
    prunable message
    prunable message
    updated copyright year
    added copyright notice headers
    java 8 lambdas
    peer handling optimizations, some refactoring, moved FilteringIterator.Filter to nxt.util.Filter
    iterable bugs
    implement Iterable
    FilteringIterator
    updated copyright year
    do not keep zero balance accounts in account table
    added copyright notice headers
    extendTaggedData API, versioned prunable data
    refactoring
    updated copyright year
    do not keep zero balance accounts in account table
    trim tables in a separate thread not in transaction
    logging
    Exception handling
    Hold database events until transaction committed
    minor
    fixed IntelliJ inspections
    Change database statistics interval
    Track database execution times
    added copyright notice headers
    more lambdas
    minor, always clear cache on rollback
    minor
    renaming
    multiple database support
    prevent bugs
    renaming
    DbKey, DbKeyFactory, removed Link tables
    model Trade as link table
    removed scan at start
    cache database objects during transactions
    moved nxt.Db to nxt.db.Db
    if not using NxtLogManager, print shutdown messages to System.out
    refactoring, guaranteed balances in database, not finished
    merging with feature/db
    minor
    database transactions
    allow changing the database default lock timeout, set to 10 seconds by default
    added getBlocks and getTransactions using PreparedStatement, made Db.getConnection public
    moved constants to a separate class so that custom properties can be used to set them
    enable use of testnet just by setting nxt.isTestnet=true
    init improvements
    package as nxt.jar
    use nxt-default.properties for all defaults
    allow custom database connection settings
    define Listeners for Logger and for Blockchain scan, added Observable interface
    blockchain refactoring
    Block and Transaction interfaces, not finished
    embedded jetty
    Something weird has happened to my local repository.
    avoid duplicate Db.shutdown calls
    compact database at shutdown
    get rid of index
    optimizations
    optimizations, added index on block.height
    increased number of pooled connections to 200
    database initialization and update, save and load blocks and transactions
    DbKey optimizations
    updated copyright year
    fixed public key setting, do not log key height
    do not keep zero balance accounts in account table
    Lucene 5.2 support
    added copyright notice headers
    extendTaggedData API, versioned prunable data
    rollback and truncate cannot be done on prunable tables
    moved account info to a separate table, removed unused message pattern code
    added getAliasesLike and searchAccounts APIs, drop and recreate search indexes on full rescan
    added getOrderTrades, improved default sorting in non-versioned tables
    also enforce that query height does not exceed blockchain height
    more lambdas
    repeat popoff in case of exception to ensure derived tables are consistent with blockchain tables; detect and log if inconsistency
    minor
    account_asset table needs to keep 1440 height records more than the default
    optimization, do not store redundant public_key records in the database
    count poll votes at the smaller of current height or finish height
    no limit on search results
    db issues fixes, includeVoters parameter in VS Http API, phasing transactions commit/rollback fixes
    reviewed the VS and phasing code, added TODOs
    allow secondary sort of search results
    implemented full text search using the H2 lucene search, added searchAssets and searchDGSGoods APIs
    added getCount methods to EntityDbTable
    Merge branch 'develop' into voting_2phased
    
    Conflicts:
            src/java/nxt/Constants.java
            src/java/nxt/NxtDbVersion.java
            src/java/nxt/TransactionProcessorImpl.java
    H2 doesn't use indexes when sorting in oposite direction, need to work around
    Initial work on shuffling Participants
    attachment loading fix, db fixes, after-merge fixes
    multiple database support
    2phased impl mostly done
    only tables that can have cache need to have it cleared
    more sorting
    sorting
    bugs
    refactoring
    allow historical queries if data still available, added optional height parameter to getAssetAccounts, added getAccountLessors with a height parameter
    no more Longs
    performance, reduce number of Strings created
    Merge branch 'feature/db' into feature/votingsystem
    
    Conflicts:
            src/java/nxt/Attachment.java
            src/java/nxt/DbVersion.java
            src/java/nxt/Generator.java
            src/java/nxt/Poll.java
            src/java/nxt/Vote.java
            src/java/nxt/db/DbTable.java
            src/java/nxt/http/GetActivePollIds.java
    check for inTransaction
    port currency founder and currency mint to database
    use versioned table for unconfirmed transactions
    minor
    debug
    DbIterator, offset and limit pagination
    minor
    refactoring
    renaming
    DbKey, DbKeyFactory, removed Link tables
    model Trade as link table
    more refactoring
    refactoring
    updated copyright year
    added copyright notice headers
    data_tag must be a persistent table
    updated copyright year
    added getReferencingTransactions API
    added copyright notice headers
    fixed some IntelliJ inspections
    call ftl_reindex()
    lucene reindex needed after altering currency table
    after MS block, the order of transactions in a block gets determined by the forger, instead of by id, default by arrival time
    renaming
    multiple database support
    DbKey optimizations
    updated copyright year
    do not keep zero balance accounts in account table
    added copyright notice headers
    extendTaggedData API, versioned prunable data
    fixed to read the values from the values table in the order they are saved, reversal no longer needed
    optimization, do not store redundant public_key records in the database
    multiple database support
    fix inserts into values tables, preserve values order
    only tables that can have cache need to have it cleared
    performance, reduce number of Strings created
    check for inTransaction
    minor
    refactoring
    renaming
    DbKey, DbKeyFactory, removed Link tables
    more refactoring
    refactoring
    cache database objects during transactions
    moved nxt.Db to nxt.db.Db
    refactoring, guaranteed balances in database, not finished
    accounts in database, not finished
    updated copyright year
    do not keep zero balance accounts in account table
    added copyright notice headers
    fixed some IntelliJ inspections
    minor
    added tag table and getDGSTags API
    allow historical queries if data still available, added optional height parameter to getAssetAccounts, added getAccountLessors with a height parameter
    performance, reduce number of Strings created
    optimizations
    trimming optimizations
    renaming
    DbKey, DbKeyFactory, removed Link tables
    updated copyright year
    Track database execution times
    added copyright notice headers
    refactoring, guaranteed balances in database, not finished
    merging with feature/db
    database transactions
    h2 1.4.190, with MVStore disabled
    minor typos
    h2 1.4.190
    updated copyright year
    Handle optional 'file' operand in H2 URL
    typos
    Add braces for single-line clauses
    Code review
    Minor cleanup
    Add CompactDatabase utility
    updated copyright year
    output filename optional
    added sign.sh script for command line transaction json signing
    code review, added TODOs, various minor changes
    SignTransactionJSON
    renamed
    simple command line transaction signing tool
    updated copyright year
    minor
    base target test fix
    better base target test parameters
    tool to experiment with different base target calculation methods
    updated copyright year
    move standalone tools to nxt.tools package
    debug
    updated copyright year
    renamed
    simple command line transaction signing tool
    debug trace for asset delete transaction
    updated copyright year
    handle asset deletions in verify trace too
    move standalone tools to nxt.tools package
    debug
    added copyright notice headers
    replace some Convert methods with java 8 ones
    log dividend payments in DebugTrace
    fixed DebugTrace and VerifyTrace for MS transactions
    null pointer
    Complete tracing creation and verification (not tested yet), replace Long with long in MS code - part II
    no more Longs
    merging with feature/db
    Logger.init can still be static
    VerifyTrace should also call Logger.init()
    VerifyTrace should also call Logger.init()
    fixed null pointer when verifying pool account trace
    add refundNQT and discountNQT fields to Purchase, debug trace of purchase transactions
    trace leasing begin and end, and lessor guaranteed balance for each generated block with fees
    allow custom quote or separator in debug trace
    debug trace bug
    fractional quantities
    minor
    minor bug in error reporting
    improvements to DebugTrace, log the event type, log order cancellations, added changelog
    also verify total asset quantities
    also track and verify asset balances
    debug improvements, allow tracing of all existing accounts, only verify confirmed balances at the end
    automated parsing and verification of trace output
    updated copyright year
    move standalone tools to nxt.tools package
    added copyright headers
    Automatically generate the nxt.jar manifest including an up to date classpath
    updated copyright year
    reject some peer requests and don't process transactions while blockchain download is in progress
    add limit parameter to getNextBlockIds too
    added copyright notice headers
    fixed IntelliJ inspections, replace some for loops with Iterable.forEach
    replace some Convert methods with java 8 ones
    no more Longs
    blockchain refactoring
    refactoring of Peer, User, Api, Nxt
    embedded jetty
    renamed convert methods with more explicit names, optimized
    package-local
    package-local
    optimizations
    optimizations, added index on block.height
    more API cleanup, removed extra conversion to/from ByteBuffer
    more cleanup
    bugs
    more cleanup
    finished doGet and doPost switch refactoring
    updated copyright year
    API and API_SSL peer service, allow querying for multiple services in getPeers, include API ports in peer info if open
    intellij inspections
    Merged source updates
    add lastConnectAttempt to peer json
    added copyright notice headers
    Add inboundWebSocket and outboundWebSocket to peer info
    expose inbound status in Peer json
    use host only as peer identifier, not host with port
    fixed some IntelliJ inspections
    removed Peer.isWellKnown; use nxt-default.properties for setting initial peers instead of NxtDbVersion
    keep track of reason for blacklisting
    limit peer networking request and response sizes to prevent out of memory attacks
    refresh connected peer info once an hour
    post-nqt bugs
    refactoring of Peer, User, Api, Nxt
    embedded jetty
    Something weird has happened to my local repository.
    get rid of index
    hallmark handling
    fixed setting of Peer connection state, improved display of known and blacklisted peers
    fixed setting of peer connection status and info
    also deactivate peers when blacklisting
    fixed peer address parsing
    listeners
    optimized getMilestoneBlockIds, refactoring getMoreBlocks and generateBlock threads
    improved handling of blacklisting, ignore http json requests from blacklisted peers
    improved handling of blacklisting, ignore http json requests from blacklisted peers
    too much logging
    too much logging
    debug
    hallmark processing
    debug
    hallmark processing
    also log to a file
    peer address validation
    peer address validation
    peer address validation
    better handling of malformed peer announced addresses
    better handling of malformed peer announced addresses
    minor
    don't blacklist peers when validation fails because of a not yet enabled feature
    minor
    fixed validation, NxtException, partial undo support
    enforce transaction and attachment validation
    API cleanup
    encapsulate fields
    minor
    minor
    getState show number of unlocked accounts, minor
    more cleanup
    bugs
    use Longs for id's, a lot of cleanup
    more cleanup
    transaction type refactoring
    more minor json optimizations
    json optimizations, not finished
    finished doGet and doPost switch refactoring
    doGet switch statement refactoring, not done yet
    moved background thread definitions out of Nxt servlet
    backwards compatible with 0.5.9 serialized forms
    moved all classes to separate files
    updated copyright year
    do not support GetTransactions peer request at all when nxt.includeExpiredPrunable=false
    Retrieve phased prunable data
    code review, added TODOs, various minor changes
    Merge 'cache', 'jetty' and 'services' into ledger
    after VS and Phasing block
    reject some peer requests and don't process transactions while blockchain download is in progress
    added copyright notice headers
    improved unconfirmed transaction propagation
    minor, renaming
    DbIterator, offset and limit pagination
    removed NXT and INT JSON properties, removed support for NXT and INT http parameters, enabled running on main net too
    JSON representation is now use case specific, different for http API and peer to peer communication, and no longer part of the Block and Transaction APIs;
    define JSON represenations for http API in a signle place for consistency;
    always return amounts in both NXT and NQT, the amounts in NXT represented in the JSON as Strings
    blockchain refactoring
    split Blockchain class
    refactoring of Peer, User, Api, Nxt
    embedded jetty
    package-local
    package-local
    encapsulate fields
    more cleanup
    finished doGet and doPost switch refactoring
    updated copyright year
    allow suppressing exception details from peer error responses
    reject some peer requests and don't process transactions while blockchain download is in progress
    added copyright notice headers
    allow time manipulations for testing, and test forging
    debug, return error to peer when transaction not accepted
    parseTransaction, signTransaction and broadcastTransaction also accepts transactions in JSON format instead of bytes
    debug
    debug
    improved validation exception handling
    blacklist peer on RuntimeException
    cosmetic clean up
    blockchain refactoring
    split Blockchain class
    drop invalid transactions instead of blacklisting peers;
    enforce transaction validation before block generation and before block acceptance because the validation conditions may have changed since the Transaction was constructed
    refactoring of Peer, User, Api, Nxt
    package-local
    package-local
    don't blacklist peers when validation fails because of a not yet enabled feature
    fixed validation, NxtException, partial undo support
    API cleanup
    json optimizations, not finished
    finished doGet and doPost switch refactoring
    updated copyright year
    switch back to production testnet, use SHUFFLING_BLOCK for all hardfork changes
    minor
    API and API_SSL peer service, allow querying for multiple services in getPeers, include API ports in peer info if open
    allow suppressing exception details from peer error responses
    intellij inspections
    code review, added TODOs, various minor changes
    Merged source updates
    shuffling testnet on 2874
    do not use streams
    Check for null external address
    Validate announced address
    UPnP support
    Use WebSocket idle timeout value when checking for inactive inbound connections
    use epoch time in peer blacklisting
    fix fork switch
    add lastConnectAttempt to peer json
    limit peer objects field sizes
    logging
    minor
    added copyright notice headers
    minor
    Purge old peer database entries
    do not use streams where unlikely to be of performance benefit
    reduced timeout for shutting down Peers.sendingService and Peers.peersService executors
    maxNumberOfConnectedPublicPeers <= maxNumberOfOutboundConnections
    do not load peers from the database if savePeers is false; run the peerConnecting and getMorePeers threads every 20 s
    Limit inbound and outbound connections
    expose inbound status in Peer json
    fixed shutdown order, debug
    GetInboundPeers API
    optimization
    optimization
    make sure wellKnownPeers stay connected
    improved unconfirmed transaction propagation
    handle DDNS announced address updates
    improved announced address processing
    if non-default port, hallmark also must include the port
    use host only as peer identifier, not host with port
    sweep known peers pool when max size exceeded, keeping the highest hallmarked peers first
    remove old announced address from announced addresses map
    Websocket peer support
    Websocket peer support
    volatile
    SetLogging API
    logging
    prepare for merge
    2874 testnet
    changed back to 6874 testnet, cleaned up new NxtDbVersion steps
    fixed some IntelliJ inspections
    reviewed applyUnconfirmed and undoApplyUnconfirmed for phasing safety, fixed for MS transactions
    reverted last commit as not really useful
    validate blockchain against default peers when doing rescan with validation
    removed Peer.isWellKnown; use nxt-default.properties for setting initial peers instead of NxtDbVersion
    replaced nxt.dumpPeerVersion with dumpPeers API
    streams
    java 8 lambdas
    added nxt.ignorePeerAnnouncedAddress and nxt.cjdnsOnly properties
    do not validate hallmark against myAddress on startup if myAddress is not defined
    Fixed NPE - PeerImpl.announcedAddress may be null (e.g. when the peer address is read from HTTP request header)
    avoid overloading with peers
    peer networking refactoring
    wait for 10 min before trying to connect to the same peer
    better handling of announced addresses with port
    reduce inactive peer remove timeout to 1 day
    connect to multiple peers in parallel
    manually connecting a peer should also un-blacklist it
    Improved hallmark related exception message
    limit peer networking request and response sizes to prevent out of memory attacks
    testnet for VS on port 2874
    minor
    limit total number of known peers
    improved peer port handling
    Differentiate peers by port
    AddPeer and BlacklistPeer API calls
    asynchronous execution of addPeers and processBlock requests
    connect to new peers 10 at a time; give non-hallmarked peers a chance even if hallmark protection is enabled
    also shutdown sendingService executor on shutdown
    do the sending to peers in the background
    put back testnet ports and peers
    refactoring of new transactions processing to be able to return more specific errors
    1.4.0e testnet on ports 2874, 2875, 2876
    added peerPort to getState
    null pointer
    minor
    peer handling optimizations, some refactoring, moved FilteringIterator.Filter to nxt.util.Filter
    optimization
    optimization
    each download of more than 10 blocks will be verified with other peers trying to find a fork with better difficulty
    minor optimization
    optional state parameter to getPeers for getting peers in the specified state
    renaming
    multiple database support
    removed extra debug logging
    allow time manipulations for testing, and test forging
    allow disabling of specific background tasks for test purposes
    no more Longs
    start without waiting for peer address resolution to complete
    minor
    prevent duplicates
    peer address update fix
    better handling of startup errors
    minimize peer address resolution attempts
    enable requesting active peers only in getPeers
    addPeers request, don't do peer weighting if hallmark protection disabled
    keep enableHallmarkProtection set by default, and always weight peer selection by hallmark weight, but increase number of connected peers to have enough hallmarked peers
    hallmark protection can break blockchain download
    peer networking gzip compression
    GZip - calculate compressed size and make gzip configurable
    Implement GZip compression
    peer saving optimization
    minor
    added nxt.getMorePeers property
    debug
    added nxt.offline property
    avoid null pointer
    debug
    updated initial peer addresses, handle peer address changes
    parallelize resolving of peer addresses on startup
    parallelize resolving of peer addresses on startup
    moved nxt.Db to nxt.db.Db
    if not using NxtLogManager, print shutdown messages to System.out
    merging with feature/db
    setReuseAddress(true) for jetty ServerConnectors
    refresh connected peer info once an hour
    ipv6 fix
    parallelize startup tasks
    reverted ipv6 attempted fix
    handle IPv6 announced addresses
    transactions
    include application name in getState
    refresh initial peers for new installations
    changelog
    allow dumping of peer list at shutdown
    minor
    support IPv6 connections
    minor
    allow disabling of peers database
    store peers in the database
    remove extra logging
    removed NXT and INT JSON properties, removed support for NXT and INT http parameters, enabled running on main net too
    JSON representation is now use case specific, different for http API and peer to peer communication, and no longer part of the Block and Transaction APIs;
    define JSON represenations for http API in a signle place for consistency;
    always return amounts in both NXT and NQT, the amounts in NXT represented in the JSON as Strings
    Nxt.getStringListProperty
    explicitly stop all jetty servers at shutdown
    moved constants to a separate class so that custom properties can be used to set them
    added knownBlacklistedPeers parameter;
    allow disabling of DoSFilter and setting maxRequestMs parameter;
    do not try to connect to peers with shareAddress=false
    do not blacklist peers when outgoing connection failed
    enable use of testnet just by setting nxt.isTestnet=true
    don't overwrite peerAddress with announcedAddress
    minor
    null pointers, added blacklisted and wellknown to peer info
    peer address resolution improvements
    added mynxt.info nodes too
    init improvements
    improve handling of peer announced addresses and ports
    allow using https/ssl for the API and the UI, allow custom Properties
    use nxt-default.properties for all defaults
    cosmetic clean up
    stop jetty servers at shutdown; don't start peer server until ready
    define Listeners for Logger and for Blockchain scan, added Observable interface
    Block and Transaction interfaces, not finished
    refactoring of Peer, User, Api, Nxt
    updated copyright year
    Merged source updates
    do not use streams
    reject some peer requests and don't process transactions while blockchain download is in progress
    added copyright notice headers
    streams
    refactoring of Peer, User, Api, Nxt
    embedded jetty
    improved handling of blacklisting, ignore http json requests from blacklisted peers
    improved handling of blacklisting, ignore http json requests from blacklisted peers
    package-local
    package-local
    also log to a file
    peer address validation
    peer address validation
    encapsulate fields
    more cleanup
    use Longs for id's, a lot of cleanup
    more cleanup
    finished doGet and doPost switch refactoring
    updated copyright year
    allow suppressing exception details from peer error responses
    reject some peer requests and don't process transactions while blockchain download is in progress
    added copyright notice headers
    replace some Convert methods with java 8 ones
    keep track of reason for blacklisting
    fixed a special case
    tests for blockchain download, rescan and rollback
    no more Longs
    blockchain refactoring
    refactoring of Peer, User, Api, Nxt
    embedded jetty
    renamed convert methods with more explicit names, optimized
    Something weird has happened to my local repository.
    further optimized getMilestoneBlockIds
    minor optimization
    drop support for old getMilestoneBlockIds protocol
    fixed a bug in new getMilestoneBlockIds protocol
    improved getMilestoneBlockIds
    optimized getMilestoneBlockIds, refactoring getMoreBlocks and generateBlock threads
    invalid height errors on blockchain rescan
    package-local
    package-local
    todo
    optimized GetMilestoneBlockIds
    optimizations, added index on block.height
    null pointer
    more API cleanup, removed extra conversion to/from ByteBuffer
    encapsulate fields
    more cleanup
    use Longs for id's, a lot of cleanup
    more cleanup
    finished doGet and doPost switch refactoring
    updated copyright year
    reject some peer requests and don't process transactions while blockchain download is in progress
    limit getNextBlocks response
    added copyright notice headers
    Limit inbound and outbound connections
    also check announced address before send, do not remove peer when address not resolvable
    peer errors handling, disconnect but do not blacklist peers that have blacklisted us
    updated copyright year
    allow suppressing exception details from peer error responses
    do not support GetTransactions peer request at all when nxt.includeExpiredPrunable=false
    Peer services review
    code review, added TODOs, various minor changes
    Merged source updates
    reject some peer requests and don't process transactions while blockchain download is in progress
    Log websocket messages only when communications logging is enabled
    Improve JSON string encoding performance
    added copyright notice headers
    fixed IntelliJ inspections, replace some for loops with Iterable.forEach
    Limit inbound and outbound connections
    Add inboundWebSocket and outboundWebSocket to peer info
    minor cleanup
    expose inbound status in Peer json
    GetInboundPeers API
    improved announced address processing
    if non-default port, hallmark also must include the port
    use host only as peer identifier, not host with port
    Check for disconnected node
    Message compression
    Increase max message size
    Websocket peer support
    Message compression
    Increase max message size
    Websocket peer support
    peer networking refactoring
    logging, do not connect if invalid response
    keep track of reason for blacklisting
    peer errors handling, disconnect but do not blacklist peers that have blacklisted us
    log peer networking errors
    limit peer networking request and response sizes to prevent out of memory attacks
    Differentiate peers by port
    better validation of hallmark hostnames; do not blacklist peers with invalid hallmarks but just ignore their hallmarks
    peer address update fix
    minor
    blacklist unreachable peers
    addPeers request, don't do peer weighting if hallmark protection disabled
    minor
    undo account freezing
    removed undo
    peer servlet gzip optimization
    peer networking gzip compression
    GZip - calculate compressed size and make gzip configurable
    Implement GZip compression - count the number of zipped bytes
    Implement GZip compression - number of bytes after GZip
    Implement GZip compression
    updated initial peer addresses, handle peer address changes
    merging with feature/db
    ipv6 fix
    removed extra logging
    support IPv6 connections
    remove extra debug
    peer address resolution improvements
    null pointer
    refactoring of Peer, User, Api, Nxt
    embedded jetty
    updated copyright year
    after VS and Phasing block
    reject some peer requests and don't process transactions while blockchain download is in progress
    add limit parameter to getNextBlockIds too
    limit getNextBlocks response
    added copyright notice headers
    do not use streams where unlikely to be of performance benefit
    Add 'limit' and 'blockIds' parameters to GetNextBlocks
    optimizations
    optimizations
    use of streams not needed in getNextBlocks
    streams
    limit peer networking request and response sizes to prevent out of memory attacks
    do not limit peer blocks download size to 1MB
    get at most 719 blocks at a time
    no more Longs
    removed NXT and INT JSON properties, removed support for NXT and INT http parameters, enabled running on main net too
    JSON representation is now use case specific, different for http API and peer to peer communication, and no longer part of the Block and Transaction APIs;
    define JSON represenations for http API in a signle place for consistency;
    always return amounts in both NXT and NQT, the amounts in NXT represented in the JSON as Strings
    moved constants to a separate class so that custom properties can be used to set them
    blockchain refactoring
    refactoring of Peer, User, Api, Nxt
    embedded jetty
    caching JSON in Block object doesn't help when using a database
    package-local
    package-local
    optimizations, added index on block.height
    more API cleanup, removed extra conversion to/from ByteBuffer
    API cleanup
    encapsulate fields
    more cleanup
    bugs
    more cleanup
    finished doGet and doPost switch refactoring
    updated copyright year
    code review, added TODOs, various minor changes
    Merged source updates
    minor, code style
    better handling of shutdown
    Create a single WebSocketClient instance
    after VS and Phasing block
    Throw SocketTimeoutException
    Log websocket messages only when communications logging is enabled
    Catch WebSocketException
    added copyright notice headers
    Reduce heap use - Fixes #13
    do not use streams where unlikely to be of performance benefit
    Add inboundWebSocket and outboundWebSocket to peer info
    removed locking in onConnect and getSession, made session volatile
    minor cleanup
    Check socket message length
    Check for premature end of compressed data
    Message compression
    Increase max message size
    Websocket peer support
    Check socket message length
    Check for premature end of compressed data
    Message compression
    Increase max message size
    Websocket peer support
    updated copyright year
    reject some peer requests and don't process transactions while blockchain download is in progress
    added copyright notice headers
    use a private executor for the blockchain download thread only
    optimizations
    java 8 lambdas
    optimization
    fork resolution during push, do not allow front running in block forging, delay block generation by 20 s
    asynchronous execution of addPeers and processBlock requests
    allow time manipulations for testing, and test forging
    debug, return error to peer when transaction not accepted
    no more Longs
    post-nqt bugs
    cosmetic clean up
    clean up
    blockchain refactoring
    refactoring of Peer, User, Api, Nxt
    remove possibly wrong overrides of equals, enforce unique objects, made some methods package-local
    simplified block and transaction construction, made block.transactionIds and block.blockTransactions unmodifiable Lists
    improved handling of blacklisting, ignore http json requests from blacklisted peers
    improved handling of blacklisting, ignore http json requests from blacklisted peers
    too much logging not needed
    too much logging not needed
    blacklist peers on bad block rejection
    blacklist peers on bad block rejection
    debug
    package-local
    debug
    package-local
    don't blacklist peers when validation fails because of a not yet enabled feature
    fixed validation, NxtException, partial undo support
    API cleanup
    encapsulate fields
    use Longs for id's, a lot of cleanup
    more minor json optimizations
    json optimizations, not finished
    finished doGet and doPost switch refactoring
    updated copyright year
    code review, added TODOs, various minor changes
    Code review
    Cache unconfirmed transactions
    after VS and Phasing block
    reject some peer requests and don't process transactions while blockchain download is in progress
    added copyright notice headers
    improved unconfirmed transaction propagation
    minor, renaming
    DbIterator, offset and limit pagination
    removed NXT and INT JSON properties, removed support for NXT and INT http parameters, enabled running on main net too
    JSON representation is now use case specific, different for http API and peer to peer communication, and no longer part of the Block and Transaction APIs;
    define JSON represenations for http API in a signle place for consistency;
    always return amounts in both NXT and NQT, the amounts in NXT represented in the JSON as Strings
    blockchain refactoring
    split Blockchain class
    refactoring of Peer, User, Api, Nxt
    embedded jetty
    package-local
    package-local
    encapsulate fields
    more cleanup
    finished doGet and doPost switch refactoring
    updated copyright year
    API and API_SSL peer service, allow querying for multiple services in getPeers, include API ports in peer info if open
    Merged source updates
    reject some peer requests and don't process transactions while blockchain download is in progress
    added copyright notice headers
    handle DDNS announced address updates
    improved announced address processing
    if non-default port, hallmark also must include the port
    use host only as peer identifier, not host with port
    also check announced address before send, do not remove peer when address not resolvable
    only accept an announced address if it resolves back to the peer address
    EventRegister and EventWait API
    fixed some IntelliJ inspections
    added nxt.ignorePeerAnnouncedAddress and nxt.cjdnsOnly properties
    better handling of announced addresses with port
    more logging of peer networking errors
    better validation of hallmark hostnames; do not blacklist peers with invalid hallmarks but just ignore their hallmarks
    allow time manipulations for testing, and test forging
    refresh connected peer info once an hour
    improve handling of peer announced addresses and ports
    refactoring of Peer, User, Api, Nxt
    embedded jetty
    Something weird has happened to my local repository.
    fixed setting of Peer connection state, improved display of known and blacklisted peers
    package-local
    package-local
    also log to a file
    peer address validation
    peer address validation
    more cleanup
    more cleanup
    finished doGet and doPost switch refactoring
    updated copyright year
    API and API_SSL peer service, allow querying for multiple services in getPeers, include API ports in peer info if open
    allow suppressing exception details from peer error responses
    code review, added TODOs, various minor changes
    reconnect immediately on sequence error, otherwise running over tor is problematic
    Merged source updates
    don't log peer blacklisting if version didn't change
    logging
    use epoch time in peer blacklisting
    allow refreshing of oldVersion peers
    add lastConnectAttempt to peer json
    logging
    limit peer objects field sizes
    logging
    Do not create outbound websocket if using a proxy
    Log websocket messages only when communications logging is enabled
    added copyright notice headers
    fixed peer http request content-type, validate that text submitted as bytes can be treated as UTF-8
    fixed peer http request content-type
    Add inboundWebSocket and outboundWebSocket to peer info
    minor cleanup
    expose inbound status in Peer json
    Fix typo
    Close websocket when removing peer
    GetInboundPeers API
    make sure wellKnownPeers stay connected
    null
    minor
    handle DDNS announced address updates
    minor
    improved announced address processing
    if non-default port, hallmark also must include the port
    use host only as peer identifier, not host with port
    send to peerAddress
    also check announced address before send, do not remove peer when address not resolvable
    fixed announced address verification
    removed old peer instance instead of blacklisting when announced address changes
    only accept an announced address if it resolves back to the peer address
    Close connection if GetInfo failed
    Increase max message size
    Websocket peer support
    Increase max message size
    Websocket peer support
    use prunableAttachmentJSON parameter in broadcastTransaction, add prunableAttachmentJSON in signTransaction and getTransactionBytes response, Nxt.newTransactionBuilder(bytes,prunableAttachmentJSON)
    SetLogging API
    fixed some IntelliJ inspections
    removed Peer.isWellKnown; use nxt-default.properties for setting initial peers instead of NxtDbVersion
    optimizations
    added nxt.ignorePeerAnnouncedAddress and nxt.cjdnsOnly properties
    debug
    debug, log old version if cause for blacklisting
    peer networking refactoring
    simplify PeerImpl.send error handling
    always disconnect peer that returns error
    less logging
    wait for 10 min before trying to connect to the same peer
    logging, do not connect if invalid response
    better handling of announced addresses with port
    more logging of peer networking errors
    keep track of reason for blacklisting
    peer errors handling, disconnect but do not blacklist peers that have blacklisted us
    logging
    logging
    log parse exception but do not blacklist peers yet
    debug
    log peer networking errors
    minor
    limit peer networking request and response sizes to prevent out of memory attacks
    better validation of hallmark hostnames; do not blacklist peers with invalid hallmarks but just ignore their hallmarks
    minor
    changelog
    fixed setting of peer state
    added canDeleteCurrency API
    also set peer state to non-connected when blacklisting because of old version
    minor
    merge fix
    minor
    blacklist old version peers
    minor
    blacklist old version peers
    added peerPort to getState
    peer handling optimizations, some refactoring, moved FilteringIterator.Filter to nxt.util.Filter
    don't blacklist peers because of SQLExceptions (usually db login timeouts)
    reduce number of account balance queries from PeerImpl.getWeight
    removed extra debug logging
    minor
    allow time manipulations for testing, and test forging
    debug
    debug
    no more Longs
    optimizations
    trimming of derived objects tables
    do not log some common errors
    peer networking gzip compression
    Implement GZip compression
    debug
    updated initial peer addresses, handle peer address changes
    improved validation exception handling
    also check for announcedAddress changes
    also check for announcedAddress changes
    refresh connected peer info once an hour
    blacklist peer on RuntimeException
    post-nqt bugs
    hallmark weight overflow
    NQT
    moved constants to a separate class so that custom properties can be used to set them
    added knownBlacklistedPeers parameter;
    allow disabling of DoSFilter and setting maxRequestMs parameter;
    do not try to connect to peers with shareAddress=false
    do not blacklist peers when outgoing connection failed
    enable use of testnet just by setting nxt.isTestnet=true
    null pointers, added blacklisted and wellknown to peer info
    peer address resolution improvements
    minor fixes
    init improvements
    improve handling of peer announced addresses and ports
    blockchain refactoring
    Block and Transaction interfaces, not finished
    refactoring of Peer, User, Api, Nxt
    updated copyright year
    Merged source updates
    reject some peer requests and don't process transactions while blockchain download is in progress
    added copyright notice headers
    streams
    java 8 lambdas
    avoid overloading with peers
    peer networking refactoring
    limit total number of known peers
    asynchronous execution of addPeers and processBlock requests
    addPeers request, don't do peer weighting if hallmark protection disabled
    updated copyright year
    code review, added TODOs, various minor changes
    Merged source updates
    added copyright notice headers
    minor
    Purge old peer database entries
    reverted last commit as not really useful
    validate blockchain against default peers when doing rescan with validation
    renaming
    multiple database support
    DbIterator, offset and limit pagination
    moved nxt.Db to nxt.db.Db
    merging with feature/db
    transactions
    database transactions
    store peers in the database
    updated copyright year
    reject some peer requests and don't process transactions while blockchain download is in progress
    added copyright notice headers
    also keep track of lastBlockchainFeederHeight
    blockchain refactoring
    refactoring of Peer, User, Api, Nxt
    embedded jetty
    package-local
    package-local
    more cleanup
    more cleanup
    finished doGet and doPost switch refactoring
    updated copyright year
    added copyright notice headers
    if non-default port, hallmark also must include the port
    no more Longs
    alias transfer bugfixes and clean up
    only enforce canonical signatures and keys for transactions and blocks after NQT_BLOCK
    NQT
    minor
    moved constants to a separate class so that custom properties can be used to set them
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    hallmark processing
    hallmark processing
    Virtual exchange bug fix
    Virtual exchange
    Virtual exchange
    Hardfork coming - commit and update to 1.7.4
    Virtual exchange
    updated copyright year
    fixed IntelliJ inspections
    added copyright notice headers
    removed Transaction.sign and Block.sign methods, replaced TransactionProcessor.parseTransaction with Nxt.newTransactionBuilder
    more lambdas
    more lambdas
    replace some Convert methods with java 8 ones
    Fix stop on error to cover the duplicate mint case
    refactoring to avoid MintWorker having to intialize blockchain processing classes that it does not need
    sign minting transactions locally and use broadcastTransaction API to send them to the server
    #260 Minting of MYSTM at the testnet stops after one mint transaction
    minor
    Add Https support for MintWorker - naming
    Add Https support for MintWorker
    treat difficulty as infinite when it exceeds Long.MAX_VALUE
    Trap and log response errors
    MintWorker adjustments and logging
    do not allow retrieving currency by code except in getCurrency API
    Set deadline to 120 minutes
    Introduce nxt.mint.serverAddress property
    Add isSubmitted, change deadline to 10 and improve log messages
    Fix counter
    submit the correct nonce to the server (and not the initial nonce) and log messages
    Allow specifying fractional number of units for mint worker
    Fix parameter encoding and minting validation
    minor
    GetNextGenerator experiment
    Minting client reference implementation
    Add support for Scrypt hash function
    Minting client reference implementation
    Minting client reference implementation
    use parseUnsignedLong instead of BigInteger
    replace some Convert methods with java 8 ones
    merging with feature/db
    junit tests
    compile fix
    finish Reed-Solomon format core support
    cosmetic changes
    Reed-Solomon encoding, initial commit
    updated copyright year
    added copyright notice headers
    Implement additional hashing algorithms for minting
    Minting tests, minting and reserve increase fixes
    Added KNV hashing algorithm.
    Added KNV hashing algorithm.
    updated copyright year
    SHA3 is not always SHA3
    exposed getSharedKey, removed unused methods
    added copyright notice headers
    allow different hash functions for by-hash phasing
    Fix concurrency problem with Scrypt minting - make only the Scrypt object thread local
    Minting client reference implementation
    Add support for Scrypt hash function
    Add support for Scrypt hash function
    Javadoc work in progress
    Implement additional hashing algorithms for minting
    updated copyright year
    minor
    use a property to control whether strong secure random is used, and test implementation speed before start
    additional duplicates check to prevent incorrect blaming, sort instead of shuffle, check that public key is canonical too
    use SecureRandom.getInstanceStrong
    use AES-GCM for authenticated encryption in shuffle processing
    create new public/private key pairs for encrypting each shuffling data
    exposed getSharedKey, removed unused methods
    better signature verification error handling
    reuse the SecureRandom in Crypto
    added copyright notice headers
    allow different hash functions for by-hash phasing
    alias transfer bugfixes and clean up
    don't run generate while scanning
    DGS bugs
    fixed AES encrypt/decrypt result length
    added Crypto.getPrivateKey() and curve()
    use bouncycastle AES
    DGS now uses AES; finished DGS API; added Account.encryptTo and Account.decryptFrom; added DGS event listeners
    added Crypto.getPrivateKey() and curve()
    use bouncycastle AES
    finish Reed-Solomon format core support
    only enforce canonical signatures and keys for transactions and blocks after NQT_BLOCK
    enforce canonical signatures and public keys
    added canonical signatures and aes encrypt code, not yet used
    Added ability to reveal a seed without revealing the shared secret.
    made secureRandom a ThreadLocal
    Transferred XOR-encryption code manually.
    Added NRS encryption algorithm.
    moved background thread definitions out of Nxt servlet
    moved all classes to separate files
    updated copyright year
    use AES-GCM for authenticated encryption in shuffle processing
    blame
    create new public/private key pairs for encrypting each shuffling data
    refactoring, use byte[][] instead of serializing encrypted data, store recipient keys in issuer data field
    reuse the SecureRandom in Crypto
    added copyright notice headers
    made compression of encrypted messages optional
    getPrunableMessage, getPrunableMessages APIs
    prunable encrypted messages
    move compress and uncompress to Convert
    Shuffling - code review pass 1 - add todo items
    Implement the shuffling process transaction which implements the shuffling algorithm
    Added attachment fields.
    exception handling improvement
    improved validation exception handling
    bugs
    transaction attachments refactoring
    special handling of empty encrypted notes
    minor
    removed Serializable
    only one refund and one feedback allowed per purchase
    gzip compress before encryption
    DGS bugs
    DGS now uses AES; finished DGS API; added Account.encryptTo and Account.decryptFrom; added DGS event listeners
    updated copyright year
    added copyright notice headers
    fixed some IntelliJ inspections
    Fix concurrency problem with Scrypt minting - make only the Scrypt object thread local
    Fix concurrency problem with Scrypt minting - also make the arrays thread local
    Fix concurrency problem with Scrypt minting
    Minting client reference implementation
    Add support for Scrypt hash function
    Add support for Scrypt hash function
    updated copyright year
    allow calculation of sizes and fees for not yet encrypted appendages too
    use SecureRandom.getInstanceStrong
    refactoring
    create new public/private key pairs for encrypting each shuffling data
    refactoring, use byte[][] instead of serializing encrypted data, store recipient keys in issuer data field
    reuse the SecureRandom in Crypto
    added copyright notice headers
    made compression of encrypted messages optional
    getPrunableMessage, getPrunableMessages APIs
    prunable encrypted messages
    move compress and uncompress to Convert
    Shuffling - code review pass 1 - add todo items
    Implement the shuffling process transaction which implements the shuffling algorithm
    Added attachment fields.
    exception handling improvement
    improved validation exception handling
    bugs
    transaction attachments refactoring
    special handling of empty encrypted notes
    minor
    removed Serializable
    only one refund and one feedback allowed per purchase
    gzip compress before encryption
    DGS bugs
    DGS now uses AES; finished DGS API; added Account.encryptTo and Account.decryptFrom; added DGS event listeners
    added canonical signatures and aes encrypt code, not yet used
    applied Curve25519 patch from DoctorEvil
    moved all classes to separate files
    updated copyright year
    uniform handling of insufficient balance errors
    added copyright notice headers
    fixed javadoc
    do not allow retrieving currency by code except in getCurrency API
    currency APIs can accept either currency id or currency code
    split exchange transaction and attachments into buy and sell, units always positive
    More Javadoc
    Replace CurrencyExchange api with currency buy and sell
    Naming change from *CurrencyBalanceQNT to *CurrencyUnits
    re-organize currency exchange testing
    More exchange tests and APIs
    Simplify currency transfer, add additional APIS, align mint data types across classes
    More work on APIs
    Monetary System Http APIs - part 1
    updated copyright year
    added copyright notice headers
    don't tag getDGSTags and getDGSTagCount as search APIs
    DGS refactoring, moving static methods
    getDGSTags returns only tags for goods in stock by default
    added tag table and getDGSTags API
    updated copyright year
    added copyright notice headers
    getDataTags, getDataTagCount, getDataTagsLike, verifyTaggedData APIs
    also include the prefix search APIs in APITag.SEARCH
    added getAliasesLike and searchAccounts APIs, drop and recreate search indexes on full rescan
    added getDGSTagsLike API
    improved error message
    updated copyright year
    uniform handling of insufficient balance errors
    do not allow phasing only accounts to start shufflers, create or join shufflings
    more shuffling state consistency validation, logging, refactoring
    testnet shuffling constants
    separate height deadlines for each shuffling phase, skipping full blocks
    shuffling assets
    copyright notices
    Hardfork coming - commit and update to 1.7.4
    allow disabling specific APIs
    updated copyright year
    uniform handling of insufficient balance errors
    also validate not yet encrypted data length
    optimization
    bugs, optimizations, various changes
    refactoring, use byte[][] instead of serializing encrypted data, store recipient keys in issuer data field
    code review, added TODOs, various minor changes
    allow deferred attachment encryption for full offline signing and encryption
    APIs that need a write lock should never be allowed to obtain a read lock first
    added copyright notice headers
    fixed bad refactoring
    allow use of file upload in the /test forms, ats.js needs to be fixed to handle multipart forms too
    refactoring
    version 2 uncompressed permanent encrypted messages
    fixed some js to be compatible with prunable messages
    made compression of encrypted messages optional
    removed forgotten duplicate code
    more cleanup
    cleanup
    prunable encrypted messages
    reuse parameter names
    prunable message
    reuse parameter names
    prunable message
    removed limit on transaction deadline, added limit on lost transactions pool for currently not valid transactions
    allow different hash functions for by-hash phasing
    by-hash voting (pay on revealed secret)
    added by-transaction voting model (linked transactions)
    minor optimizations
    Http API: GetPhasingOnlyControl/SetPhasingOnlyControl
    First simple unit test - set and then get
    fixed phasing finish height validation, cleaned up phasing and voting constants
    allow phasing without voting
    removed Transaction.sign and Block.sign methods, replaced TransactionProcessor.parseTransaction with Nxt.newTransactionBuilder
    replace some Convert methods with java 8 ones
    only return the error json fields if broadcast=true
    simplify
    better whitelist validation in HTTP API
    check for accountId = 0
    always add errorCode and errorDesctiption in case of error
    simplify, always return transactionJSON, unsignedTransactionBytes, and broadcast status
    removed duplicate checks that are done in transaction.validate too
    removed blacklist
    parameter parser cleanup
    phasingHolding fix
    bugs
    refactoring, implement voting models as enum
    renaming
    moved out the counting logic to PollCounting
    various improvements
    defer apply for all appendixes in phasing; rename TwoPhased to Phasing; add "phasing" prefix
    ParameterParser.getBoolean
    renamed MS_COIN to CURRENCY
    more invalid pending txs tests, missing pendingAssetId fix
    2 phased transactions: quorum validation, tests for pending transactions with invalid quorum&maxheight parameters
    various fixes and improvements
    pendingMinBalance is not required for by-account approval
    pendingAsset -> pendingHolding in CreateTransaction
    assetId -> holdingId in VS & 2PT, min balance model, referential integrity contstraint fix for poll, createPoll refactoring with ParameterParser, better poll validation
    pendingBlacklisted && pendingWhitelisted null fixes
    isFinished method removed from PendingTransactionPoll, formatting
    refactoring to avoid MintWorker having to intialize blockchain processing classes that it does not need
    HTTP API code improvements: putAccount in vote json generation, parseTwoPhased instead of long if in CreateTransaction
    ParameterParser usage for VS / 2PTs
    Merge branch 'develop' into voting_2phased
    
    Conflicts:
            html/ui/index.html
            html/ui/js/nrs.modals.transaction.js
            html/ui/js/nrs.transactions.js
            src/java/nxt/Account.java
            src/java/nxt/Constants.java
            src/java/nxt/Nxt.java
            src/java/nxt/NxtDbVersion.java
            src/java/nxt/TransactionDb.java
            src/java/nxt/TransactionImpl.java
            src/java/nxt/TransactionProcessorImpl.java
            src/java/nxt/db/DbClause.java
            src/java/nxt/db/DbIterator.java
            src/java/nxt/http/APIServlet.java
            src/java/nxt/http/APITag.java
            src/java/nxt/http/CreateTransaction.java
            src/java/nxt/http/JSONData.java
            src/java/nxt/http/JSONResponses.java
            src/java/nxt/util/Convert.java
    move the call to transaction.validate() inside TransactionProcessor.broadcast(transaction)
    getPendingTransactionVotesCount, todos fixed
    TODOs fixes #1
    reviewed the VS and phasing code, added TODOs
    renaming
    minor cleanup
    pending tx fields renaming
    GetAccountPendingTransactionIds
    2-phased modification for all HTTP API calls creating transactions
    only do caching for some api calls
    add asset names and decimals to asset trades and transfers, use thread local caching by starting a db transaction for each api request unless disabled for specific requests
    no more Longs
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    removed "comment" parameter
    remove comment parameter
    Merge validateFee with validate
    amount validation only in CreateTransaction
    Fee calculation fix
    FeeNQT final
    Exception type
    Variable fees - fee is based on 3 levels.
    Old blocks before baseline are not validated (minimum fee is 0)
    Blocks after baseline are validated using old fee
    Blocks after next baseline are validated using new fee
    renamed Transaction.verify to verifySignature and validateAttachment to validate
    after DGS block
    fixed empty arbitrary messages before DGS block
    fixed asset transfer comments before DGS block
    minor
    parseTransaction, signTransaction and broadcastTransaction also accepts transactions in JSON format instead of bytes
    encryptToSelfMessage
    temporarily handle asset transfer "comment" parameter as "message" after DGS block
    PublicKeyAnnouncement appendix
    improved validation exception handling
    messageIsText always false before DGS block
    transactions with no recipient really should not have a recipient; bugfixes
    merging with feature/db
    bug
    use Arbitrary Message type for encrypted messages too, better parameter names
    transaction attachments refactoring
    support for API request type classification
    merged develop
    use sha256(signature) instead of plain signature for full hash calculation
    optional broadcast parameter to allow signing without broadcasting
    full hash bugfixes, allow finding transaction by full hash, return full hash in the JSON
    full hash referenced transactions
    better error checking
    removed NXT and INT JSON properties, removed support for NXT and INT http parameters, enabled running on main net too
    fractional quantities
    better handling of invalid transactions during block generation, always remove from unconfirmed pool
    NQT
    better error handling
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    invalid public key will give unknown account error
    allow different minimum fee requirements for different transactions, verify IssueAsset fee
    moved constants to a separate class so that custom properties can be used to set them
    added block_timestamp to the transaction table, added Transaction.getBlockId() and Transaction.getBlockTimestamp() which should be used for better performance instead of having to load the Block from the database to get them;
    store transaction hashes in the transaction table and make them available using Transaction.getHash() and in the JSON returned from getTransaction API;
    enable transaction lookup based on hash, as an optional parameter to the getTransaction API
    fix create unsigned transaction bugs
    null pointer
    fix create unsigned transaction bugs
    null pointer
    prepare transaction bytes ready for signing if public key is supplied instead of secret phrase
    Added guid for transactions.
    prepare transaction bytes ready for signing if public key is supplied instead of secret phrase
    new transaction timestamp is always current time, no need to supply as parameter
    support POST for all requests, and optionally enforce its use for those that require it
    blockchain refactoring
    split Blockchain class
    Block and Transaction interfaces, not finished
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    enforce deadline less than 1440 for new transactions
    enforce deadline less than 1440 for new transactions
    don't blacklist peers when validation fails because of a not yet enabled feature
    fixed validation, NxtException, partial undo support
    cleaned up all JSON API error handling
    also clear Assets and Orders on rescan, some API refactoring in progress
    use Longs for id's, a lot of cleanup
    more cleanup
    transaction type refactoring
    transaction type refactoring
    finished doGet and doPost switch refactoring
    doGet switch statement refactoring, not done yet
    updated copyright year
    default to false for almost all includeXXX optional API parameters
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    added includeCounts option to getAssets APIs
    DbIterator, offset and limit pagination
    merging with feature/db
    support for API request type classification
    validation fixes
    removed getAssetsByName API;
    getAssetsByIssuer now accepts multivalued "account" parameter and returns a list of lists of assets
    added getAssetsByIssuer API
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    do not allow retrieving currency by code except in getCurrency API
    add currency name, code, and decimals to AccountCurrency JSON, and asset name and decimals to AccountAsset JSON
    added getAccountCurrencies API, added optional includeLessors, includeAssets, includeCurrencies parameters to getAccount
    currency APIs can accept either currency id or currency code
    Implement GetCurrencyAccounts API
    updated copyright year
    added copyright notice headers
    getDataTags, getDataTagCount, getDataTagsLike, verifyTaggedData APIs
    don't tag getDGSTags and getDGSTagCount as search APIs
    DGS refactoring, moving static methods
    getDGSTags returns only tags for goods in stock by default
    added tag table and getDGSTags API
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    allow showing vote weights in getPollVotes and getPollVote
    added copyright notice headers
    added getPollVote and getPhasingPollVote APIs
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    APITag.MS for getCurrencyPhasedTransactions
    added copyright notice headers
    renamed pending to phased/phasing
    added account parameter to getCurrencyPendingTransactions and getAssetPendingTransactions
    added withoutWhitelist optional parameter
    refactoring, implement voting models as enum
    renaming
    renaming, database indexes
    GetCurrencyPendingTransactions
    GetAccountPendingTransactionIds removed, getAccountPendingTransactionsToApprove implemented, getAssetPendingTransactions implemented
    GetAccountPendingTransaction, finished field added back to PendingTransactionPoll, TransactionProcessocImpl condition fix, PendingTransactionPoll.getIdsByWhitelistedSigner fix
    various fixes and improvements
    pruning for pending transactions polls, "finished" flag removed from phased txs HTTP API, delete operation for VersionedValuesTable
    getPendingTransactionVotesCount, todos fixed
    some fixes  due to static code analysis
    unneccesary todos deleted, code formating, unneccesary exceptions handling removed
    GetAccountPendingTransactionIds
    updated copyright year
    added copyright notice headers
    fixed ParameterParser, some refactoring
    removed blacklist
    parameter parser cleanup
    DGS refactoring, moving static methods
    no more Longs
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    DbIterator, offset and limit pagination
    merging with feature/db
    support for API request type classification
    reverse sorting of purchases, allow filtering goods by availability, pagination
    DGS API
    updated copyright year
    added requestType properties to getConstants
    added copyright notice headers
    use prunableAttachmentJSON parameter in broadcastTransaction, add prunableAttachmentJSON in signTransaction and getTransactionBytes response, Nxt.newTransactionBuilder(bytes,prunableAttachmentJSON)
    removed Transaction.sign and Block.sign methods, replaced TransactionProcessor.parseTransaction with Nxt.newTransactionBuilder
    always add errorCode and errorDesctiption in case of error
    more informative error checking
    allow parsing of invalid transaction, returning error in the JSON
    renamed Transaction.verify to verifySignature and validateAttachment to validate
    parseTransaction, signTransaction and broadcastTransaction also accepts transactions in JSON format instead of bytes
    transactions with no recipient really should not have a recipient; bugfixes
    merging with feature/db
    support for API request type classification
    separate transaction validation from transaction attachment loading
    signTransaction API
    use sha256(signature) instead of plain signature for full hash calculation
    full hash bugfixes, allow finding transaction by full hash, return full hash in the JSON
    added parseTransaction API
    better error handling
    cleanup
    simplify
    verify transaction signature before broadcast
    APITestServlet for manual testing and debugging of all http APIs
    support POST for all requests, and optionally enforce its use for those that require it
    blockchain refactoring
    split Blockchain class
    Block and Transaction interfaces, not finished
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    don't blacklist peers when validation fails because of a not yet enabled feature
    fixed validation, NxtException, partial undo support
    more API cleanup, removed extra conversion to/from ByteBuffer
    cleaned up all JSON API error handling
    also clear Assets and Orders on rescan, some API refactoring in progress
    finished doGet and doPost switch refactoring
    doGet switch statement refactoring, not done yet
    updated copyright year
    use currency units instead of amount for getAvailableToBuy, fix exchangeNXTForCurrency to buy not more than the number of units requested after the hard fork
    added getAvailableToBuy and getAvailableToSell APIs
    added copyright notice headers
    fixed ParameterParser, some refactoring
    parameter parser cleanup
    no more Longs
    merging with feature/db
    transaction attachments refactoring
    support for API request type classification
    removed NXT and INT JSON properties, removed support for NXT and INT http parameters, enabled running on main net too
    fractional quantities
    NQT
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    moved constants to a separate class so that custom properties can be used to set them
    fix create unsigned transaction bugs
    fix create unsigned transaction bugs
    prepare transaction bytes ready for signing if public key is supplied instead of secret phrase
    Added guid for transactions.
    prepare transaction bytes ready for signing if public key is supplied instead of secret phrase
    new transaction timestamp is always current time, no need to supply as parameter
    support POST for all requests, and optionally enforce its use for those that require it
    blockchain refactoring
    split Blockchain class
    Block and Transaction interfaces, not finished
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    enforce deadline less than 1440 for new transactions
    enforce deadline less than 1440 for new transactions
    don't blacklist peers when validation fails because of a not yet enabled feature
    fixed validation, NxtException, partial undo support
    cleaned up all JSON API error handling
    also clear Assets and Orders on rescan, some API refactoring in progress
    use Longs for id's, a lot of cleanup
    more cleanup
    transaction type refactoring
    transaction type refactoring
    finished doGet and doPost switch refactoring
    doGet switch statement refactoring, not done yet
    updated copyright year
    use revealedSecretIsText boolean to indicate if revealedSecret is text or binary, revealedSecretText still supported
    added copyright notice headers
    prunable message
    prunable message
    minor
    renamed pending to phased/phasing
    allow different hash functions for by-hash phasing
    by-hash voting (pay on revealed secret)
    minor optimizations
    fixed phasing finish height validation, cleaned up phasing and voting constants
    more lambdas
    fixed validation of phased transactions, removed immediate release on vote feature
    added getPhasingPolls API, renamed getPhasingVotes to getPhasingPoll
    use full hash instead of just id to identify transactions being voted for
    refactoring, implement voting models as enum
    renaming
    renaming, database indexes
    GetPendingTransactionVotes fixes, better validation in ApprovePendingTransaction
    minor cleanup
    various fixes and improvements
    API calls renaming
    getPendingTransactionVotesCount, todos fixed
    CastVotePhased API Call added, CastVote glitches fixed, bug with maxHeight fixed
    different error for disabled APIs, rename
    updated copyright year
    uniform handling of insufficient balance errors
    return error if pruned transaction is not retrievable
    do not allow phasing only accounts to start shufflers, create or join shufflings
    account properties
    refactoring
    performance optimization, avoid querying database tables when only accountId or other id is needed
    minor cleanup
    Clarify the missing secret phrase error message when connecting to a remote node
    also allow encrypting messages if recipient public key will be provided by the current transaction
    also check for asset issuance height in dividend payment
    Exception in dividend payment attachment if asset not issued yet
    allow deferred attachment encryption for full offline signing and encryption
    use recipientPublicKey instead of recipientId
    minor
    minor cleanup
    Virtual exchange bug fix
    Account ledger support
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    avoid null pointer errors on missing parameters
    Implement file token APIs
    added copyright notice headers
    Download tagged data transaction
    File upload - enable multipart requests and support for parsing file upload as tagged data
    added channel field to tagged data
    getDataTags, getDataTagCount, getDataTagsLike, verifyTaggedData APIs
    use prunableAttachmentJSON parameter in broadcastTransaction, add prunableAttachmentJSON in signTransaction and getTransactionBytes response, Nxt.newTransactionBuilder(bytes,prunableAttachmentJSON)
    uploadTaggedData API
    prunable encrypted messages
    prunable message
    prunable message
    renamed pending to phased/phasing
    Allow login with a valid but unknown account
    added by-transaction voting model (linked transactions)
    minor optimizations
    NXT-PLUS in a single commit
    added getDGSTagsLike API
    get founders currency - initial commit not tested
    better whitelist validation in HTTP API
    always add errorCode and errorDesctiption in case of error
    Merge remote-tracking branch 'origin/develop' into feature/cs and fix shuffling unit test
    added getPhasingPolls API, renamed getPhasingVotes to getPhasingPoll
    minor
    removed blacklist
    Intermidiate Work on GetPlugins
    renaming
    count poll votes at the smaller of current height or finish height
    more invalid pending txs tests, missing pendingAssetId fix
    assetId -> holdingId in VS & 2PT, min balance model, referential integrity contstraint fix for poll, createPoll refactoring with ParameterParser, better poll validation
    Debug requests and DbShellServlet are always public and password protected. Removed nxt.enableDebugAPI
    Added nxt.disableAdminPassword to disable password protection
    Added password protection functionality to be used for administrative API requests. A single password is stored in nxt.adminPassword. All protected API requests require "adminPassword" parameter to match nxt.adminPassword.
    added getExchangesByOffer
    CastVotePhased API Call added, CastVote glitches fixed, bug with maxHeight fixed
    minor
    minor cleanup
    variable fees for currency issuance
    pending tx fields renaming
    Implementing remaining pieces of the 'dividend payment' transaction type.
    2-phased modification for all HTTP API calls creating transactions
    added a separate DeleteCurrency transaction and API call
    voting system got massive update
    merged in the server-side version of the merchant account message pattern feature, may need more testing
    Work on shuffle processing
    Work on APIs and transaction types
    createPoll - additional validation
    more informative error checking
    Merge with latest entity DB changes
    allow historical queries if data still available, added optional height parameter to getAssetAccounts, added getAccountLessors with a height parameter
    More work on APIs
    Monetary System Http APIs - part 1
    minor validation refactoring, also add comment in addition to message in Asset Transfer json
    parseTransaction, signTransaction and broadcastTransaction also accepts transactions in JSON format instead of bytes
    merging with feature/db
    use Arbitrary Message type for encrypted messages too, better parameter names
    bugs
    transaction attachments refactoring
    voting system - pre-final version
    added payment with message transaction type
    voting system - alpha(no validation, interface is raw)
    DGS refund or feedback possible only after delivery, goods data must not be empty
    added getBlockId API to get blockId based on height
    cleaned up the Aliases API
    alias transfer bugfixes and clean up
    alias transfer - alpha
    minor
    only one refund and one feedback allowed per purchase
    DGS bugs
    also accept pre-encrypted notes and goods, for client-side signing
    DGS now uses AES; finished DGS API; added Account.encryptTo and Account.decryptFrom; added DGS event listeners
    DGS API
    more DGS API
    DGS http API, not yet finished
    signTransaction API
    use sha256(signature) instead of plain signature for full hash calculation
    full hash referenced transactions
    added leaseBalance http API, enable transparent forging 6 on testnet at block 73000
    improved sender account parsing
    setAccountInfo
    some cleanup
    removed NXT and INT JSON properties, removed support for NXT and INT http parameters, enabled running on main net too
    fractional quantities
    NQT
    added Asset Transfer comment field; verify blocks and transactions on first scan; don't rely on db triggers when deleting multiple blocks
    allow non-unique asset names;
    added GetAssetsByName API request
    changed error message, updated changelog
    moved constants to a separate class so that custom properties can be used to set them
    Added "findObject".
    Added ""getNextBlockGenerators"".
    support POST for all requests, and optionally enforce its use for those that require it
    added getForging API
    minor improvements
    Added "getPollIds" and "getPoll".
    Added Voting System.
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    cleaned up all JSON API error handling
    updated copyright year
    added includeHoldingInfo parameter for all getShuffling APIs except getHoldingShufflings, default false
    more shuffling APIs, database indexes
    added copyright notice headers
    added includeData parameter to the getTaggedData APIs
    added channel field to tagged data
    getTaggedData, getAccountTaggedData, searchTaggedData APIs, bugfixes
    updated copyright year
    added copyright notice headers
    NXT-PLUS in a single commit
    fractional quantities
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    minor cleanup
    added copyright notice headers
    replace some Convert methods with java 8 ones
    no more Longs
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    DbIterator, offset and limit pagination
    merging with feature/db
    support for API request type classification
    orders in database
    fractional quantities
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    enforce transaction and attachment validation
    more API cleanup, removed extra conversion to/from ByteBuffer
    encapsulate fields
    cleaned up all JSON API error handling
    use Longs for id's, a lot of cleanup
    doGet switch statement refactoring, not done yet
    updated copyright year
    error handling on empty search query, includeCounts in searchDGSGoods also default false
    added copyright notice headers
    moved account info to a separate table, removed unused message pattern code
    added getAliasesLike and searchAccounts APIs, drop and recreate search indexes on full rescan
    updated copyright year
    shuffler http APIs
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    fixed IntelliJ inspections
    added copyright notice headers
    forging bugfixes and improvements
    allow getForging and stopForging access with admin password instead of secret phrase too
    minor fixes
    allow time manipulations for testing, and test forging
    merging with feature/db
    support for API request type classification
    show remaining time too
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    support POST for all requests, and optionally enforce its use for those that require it
    added getForging API
    refactoring of Peer, User, Api, Nxt
    drop support for old getMilestoneBlockIds protocol
    enforce account existence before creating a generator for it
    startForging and stopForging API
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    cleaned up all JSON API error handling
    doGet switch statement refactoring, not done yet
    updated copyright year
    fixed filename encoding for tagged data download
    allow forcing retrieval of pruned data for some APIs
    Avoid NPE is download api when transaction id is not tagged data transaction
    make sure to use UTF-8 encoding
    content-disposition filename must be URL encoded
    added copyright notice headers
    also set content-length header
    also set content-length header
    autoclose streams
    allow use of file upload in the /test forms, ats.js needs to be fixed to handle multipart forms too
    Download tagged data transaction
    updated copyright year
    return error if pruned transaction is not retrievable
    added retrievePrunedTransaction API
    refactoring
    APIs that need a write lock should never be allowed to obtain a read lock first
    added copyright notice headers
    no more Longs
    GetAccountId also returns publicKey
    cleanup
    merging with feature/db
    support for API request type classification
    getAccountId also accepts publicKey as a parameter
    finish Reed-Solomon format core support
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    support POST for all requests, and optionally enforce its use for those that require it
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    cleaned up all JSON API error handling
    doGet switch statement refactoring, not done yet
    Virtual exchange
    updated copyright year
    getExpectedTransactions API, accept multivalue account parameter in getUnconfirmedTransactions APIs
    added getExpectedOrderCancellations, optional sort by price, account or asset parameters optional for getExpected requests
    added getExpectedAsk/BidOrders APIs
    added copyright notice headers
    no more Longs
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    DbIterator, offset and limit pagination
    merging with feature/db
    support for API request type classification
    added getAskOrders and getBidOrders
    fractional quantities
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    avoid null pointers
    Added "limit" to "getAskOrderIds" and "getBidOrderIds".
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    merged lastBytes fix from 0.5.12
    fixed transaction hash validation
    purge expired hashes in block.apply
    Added "getAccount".
    Improved "getAskOrderIds", "getBidOrderIds".
    Enabled "getAsset", "getAssetIds".
    return unmodifiable maps
    fixed transaction hash validation
    Added "getAccount".
    Improved "getAskOrderIds", "getBidOrderIds".
    Enabled "getAsset", "getAssetIds".
    encapsulate fields
    cleaned up all JSON API error handling
    use Longs for id's, a lot of cleanup
    doGet switch statement refactoring, not done yet
    updated copyright year
    added getExpectedOrderCancellations, optional sort by price, account or asset parameters optional for getExpected requests
    added getAccountExpectedExchangeRequests, getExpectedAssetTransfers, getExpectedBuyOffers, getExpectedSellOffers, getExpectedCurrencyTransfers
    added getExpectedAsk/BidOrders APIs
    added copyright notice headers
    no more Longs
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    DbIterator, offset and limit pagination
    merging with feature/db
    support for API request type classification
    added getAskOrders and getBidOrders
    fractional quantities
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    avoid null pointers
    Added "limit" to "getAskOrderIds" and "getBidOrderIds".
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    merged lastBytes fix from 0.5.12
    fixed transaction hash validation
    purge expired hashes in block.apply
    Added "getAccount".
    Improved "getAskOrderIds", "getBidOrderIds".
    Enabled "getAsset", "getAssetIds".
    return unmodifiable maps
    fixed transaction hash validation
    Added "getAccount".
    Improved "getAskOrderIds", "getBidOrderIds".
    Enabled "getAsset", "getAssetIds".
    encapsulate fields
    cleaned up all JSON API error handling
    use Longs for id's, a lot of cleanup
    doGet switch statement refactoring, not done yet
    updated copyright year
    added copyright notice headers
    amountNQT parameter
    no more Longs
    use amountNQT instead of priceNQT parameter for buyAlias
    merging with feature/db
    support for API request type classification
    aliases in database
    refactoring, support alias and aliasName parameters
    alias transfer bugfixes and clean up
    alias transfer - price bug fix in BuyAlias
    alias transfer - alpha
    updated copyright year
    default to false for almost all includeXXX optional API parameters
    added copyright notice headers
    added includeCounts option to getAssets APIs
    DbIterator, offset and limit pagination
    merging with feature/db
    support for API request type classification
    undo of leasing should trigger a rescan
    DGS http API, not yet finished
    added getAssets and getAllAssets APIs
    JSON representation is now use case specific, different for http API and peer to peer communication, and no longer part of the Block and Transaction APIs;
    define JSON represenations for http API in a signle place for consistency;
    always return amounts in both NXT and NQT, the amounts in NXT represented in the JSON as Strings
    also return assetId
    allow non-unique asset names;
    added GetAssetsByName API request
    updated copyright year
    added copyright notice headers
    fixed ParameterParser, some refactoring
    parameter parser cleanup
    added completed parameter to getDGSGoodsPurchases, getDGSGoodsPurchaseCount, getDGSPurchaseCount, getDGSPurchases, to allow querying for completed purchases only
    DGS refactoring, moving static methods
    added getDGSTagCount API, allow getDGSGoodsCount and getDGSPurchaseCount to be used also to get total goods or purchase counts
    added getAccountAssetCount, getAliasCount, getDGSGoodsCount, getDGSGoodsPurchaseCount, getDGSPurchaseCount APIs
    updated copyright year
    default to false for almost all includeXXX optional API parameters
    added copyright notice headers
    fixed getCurrency
    do not allow retrieving currency by code except in getCurrency API
    search currencies by code, name, or description, using lucene, not tested
    currency APIs can accept either currency id or currency code
    More work on APIs
    updated copyright year
    added copyright notice headers
    do not allow retrieving currency by code except in getCurrency API
    added a separate DeleteCurrency transaction and API call
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    showExpectedCancellations in getAskOrders and getBidOrders
    added copyright notice headers
    no more Longs
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    DbIterator, offset and limit pagination
    merging with feature/db
    support for API request type classification
    added getAskOrders and getBidOrders
    fractional quantities
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    avoid null pointers
    Added "limit" to "getAskOrderIds" and "getBidOrderIds".
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    merged lastBytes fix from 0.5.12
    fixed transaction hash validation
    purge expired hashes in block.apply
    Added "getAccount".
    Improved "getAskOrderIds", "getBidOrderIds".
    Enabled "getAsset", "getAssetIds".
    return unmodifiable maps
    fixed transaction hash validation
    Added "getAccount".
    Improved "getAskOrderIds", "getBidOrderIds".
    Enabled "getAsset", "getAssetIds".
    encapsulate fields
    cleaned up all JSON API error handling
    use Longs for id's, a lot of cleanup
    doGet switch statement refactoring, not done yet
    updated copyright year
    added getExpectedOrderCancellations, optional sort by price, account or asset parameters optional for getExpected requests
    added getExpectedAsk/BidOrders APIs
    added copyright notice headers
    no more Longs
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    DbIterator, offset and limit pagination
    merging with feature/db
    support for API request type classification
    added getAskOrders and getBidOrders
    fractional quantities
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    avoid null pointers
    Added "limit" to "getAskOrderIds" and "getBidOrderIds".
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    merged lastBytes fix from 0.5.12
    fixed transaction hash validation
    purge expired hashes in block.apply
    Added "getAccount".
    Improved "getAskOrderIds", "getBidOrderIds".
    Enabled "getAsset", "getAssetIds".
    return unmodifiable maps
    fixed transaction hash validation
    Added "getAccount".
    Improved "getAskOrderIds", "getBidOrderIds".
    Enabled "getAsset", "getAssetIds".
    encapsulate fields
    cleaned up all JSON API error handling
    use Longs for id's, a lot of cleanup
    doGet switch statement refactoring, not done yet
    changed getAccountLedger to be consistent with all other APIs when applying firstIndex, lastIndex pagination
    updated copyright year
    Add isTransactionEvent to JSON response
    Account ledger review
    code review, added TODOs, various minor changes
    Add timestamp to ledger entry
    Account ledger support
    updated copyright year
    the debug APIs also don't need up to date blockchain
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    added copyright notice headers
    moved shutdown to a separate API
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    minor cleanup
    added copyright notice headers
    no more Longs
    added getAccountCurrentAskOrders and getAccountCurrentBidOrders
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    DbIterator, offset and limit pagination
    merging with feature/db
    support for API request type classification
    orders in database
    fractional quantities
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    validation and debugging
    more API cleanup, removed extra conversion to/from ByteBuffer
    encapsulate fields
    cleaned up all JSON API error handling
    use Longs for id's, a lot of cleanup
    doGet switch statement refactoring, not done yet
    updated copyright year
    uniform handling of insufficient balance errors
    added copyright notice headers
    fixed ParameterParser, some refactoring
    parameter parser cleanup
    do not allow retrieving currency by code except in getCurrency API
    currency APIs can accept either currency id or currency code
    store currency transfer recipientId as transaction recipient instead of in attachment
    Implement CurrencyTransfer, change the term "money" to "currency" where applicable
    Replace CurrencyExchange api with currency buy and sell
    Naming change from *CurrencyBalanceQNT to *CurrencyUnits
    re-organize currency exchange testing
    Simplify currency transfer, add additional APIS, align mint data types across classes
    updated copyright year
    allow both prunable plain and prunable encrypted messages
    performance optimization, avoid querying database tables when only accountId or other id is needed
    allow filtering by timestamp
    added copyright notice headers
    minor
    improved getPrunableMessages API with optional correspondant account
    caching not needed
    getPrunableMessage, getPrunableMessages APIs
    updated copyright year
    Code review
    Account ledger support
    added copyright notice headers
    do not use streams where unlikely to be of performance benefit
    Add NEW_PEER and REMOVE peer events
    GetInboundPeers API
    require POST for eventRegister and eventWait
    imports
    EventRegister and EventWait API
    updated copyright year
    added copyright notice headers
    merging with feature/db
    support for API request type classification
    refactoring, support alias and aliasName parameters
    cleaned up the Aliases API
    JSON representation is now use case specific, different for http API and peer to peer communication, and no longer part of the Block and Transaction APIs;
    define JSON represenations for http API in a signle place for consistency;
    always return amounts in both NXT and NQT, the amounts in NXT represented in the JSON as Strings
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    more API cleanup, removed extra conversion to/from ByteBuffer
    encapsulate fields
    cleaned up all JSON API error handling
    more cleanup
    use Longs for id's, a lot of cleanup
    doGet switch statement refactoring, not done yet
    updated copyright year
    minor
    minor cleanup
    copyright notices
    More testing and fixing problem in the participant registration code
    updated copyright year
    default to false for almost all includeXXX optional API parameters
    minor refactoring
    avoid null pointer errors on missing parameters
    added copyright notice headers
    added includeCounts option to getAssets APIs
    merging with feature/db
    support for API request type classification
    validation fixes
    removed getAssetsByName API;
    getAssetsByIssuer now accepts multivalued "account" parameter and returns a list of lists of assets
    undo of leasing should trigger a rescan
    DGS http API, not yet finished
    added getAssets and getAllAssets APIs
    updated copyright year
    added copyright notice headers
    minor optimizations
    fixed phasing finish height validation, cleaned up phasing and voting constants
    also accept VOTING_NO_VOTE_VALUE (-128) as a vote parameter
    poll fee dependent on number of options, changed numbering of options and votes to allow sorting
    some more validation
    various fixes and improvements
    formatting
    pruning for pending transactions polls, "finished" flag removed from phased txs HTTP API, delete operation for VersionedValuesTable
    HTTP API bugfixes, getPollsFinishingAt bugfix
    ParameterParser usage for VS / 2PTs
    unused methods deletion (getAssetsWithName, Poll.exists, Poll.isFinished)
    CastVotePhased API Call added, CastVote glitches fixed, bug with maxHeight fixed
    unneccesary todos deleted, code formating, unneccesary exceptions handling removed
    voting system got massive update
    blockchain reorg issues solved for VS, VS HTTP API switched on
    2phased impl mostly done
    merging with feature/db
    support for API request type classification
    validation fixes
    voting system - alpha(no validation, interface is raw)
    fractional quantities
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    fix create unsigned transaction bugs
    fix create unsigned transaction bugs
    prepare transaction bytes ready for signing if public key is supplied instead of secret phrase
    Added guid for transactions.
    prepare transaction bytes ready for signing if public key is supplied instead of secret phrase
    new transaction timestamp is always current time, no need to supply as parameter
    minor fixes
    support POST for all requests, and optionally enforce its use for those that require it
    blockchain refactoring
    split Blockchain class
    Block and Transaction interfaces, not finished
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    remove possibly wrong overrides of equals, enforce unique objects, made some methods package-local
    Added Voting System.
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    enforce deadline less than 1440 for new transactions
    enforce deadline less than 1440 for new transactions
    don't blacklist peers when validation fails because of a not yet enabled feature
    fixed validation, NxtException, partial undo support
    cleaned up all JSON API error handling
    also clear Assets and Orders on rescan, some API refactoring in progress
    use Longs for id's, a lot of cleanup
    more cleanup
    transaction type refactoring
    transaction type refactoring
    finished doGet and doPost switch refactoring
    doGet switch statement refactoring, not done yet
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    renamed pending to phased/phasing
    added account parameter to getCurrencyPendingTransactions and getAssetPendingTransactions
    added withoutWhitelist optional parameter
    refactoring, implement voting models as enum
    renaming
    renaming, database indexes
    GetCurrencyPendingTransactions
    GetAccountPendingTransactionIds removed, getAccountPendingTransactionsToApprove implemented, getAssetPendingTransactions implemented
    GetAccountPendingTransaction, finished field added back to PendingTransactionPoll, TransactionProcessocImpl condition fix, PendingTransactionPoll.getIdsByWhitelistedSigner fix
    various fixes and improvements
    pruning for pending transactions polls, "finished" flag removed from phased txs HTTP API, delete operation for VersionedValuesTable
    getPendingTransactionVotesCount, todos fixed
    some fixes  due to static code analysis
    unneccesary todos deleted, code formating, unneccesary exceptions handling removed
    GetAccountPendingTransactionIds
    updated copyright year
    added copyright notice headers
    no more Longs
    merging with feature/db
    transaction attachments refactoring
    support for API request type classification
    use real recipient instead of genesis for DGS transactions
    DGS refund or feedback possible only after delivery, goods data must not be empty
    only one refund and one feedback allowed per purchase
    also accept pre-encrypted notes and goods, for client-side signing
    DGS now uses AES; finished DGS API; added Account.encryptTo and Account.decryptFrom; added DGS event listeners
    more DGS API
    GetChatList and GetChatMessages API
    updated copyright year
    added copyright notice headers
    no more Longs
    merging with feature/db
    transaction attachments refactoring
    support for API request type classification
    use real recipient instead of genesis for DGS transactions
    DGS refund or feedback possible only after delivery, goods data must not be empty
    only one refund and one feedback allowed per purchase
    also accept pre-encrypted notes and goods, for client-side signing
    DGS now uses AES; finished DGS API; added Account.encryptTo and Account.decryptFrom; added DGS event listeners
    more DGS API
    updated copyright year
    default to false for almost all includeXXX optional API parameters
    added copyright notice headers
    added getDGSGoodsPurchases API to retrieve purchases for a specific goodsId, optionally those with public feedbacks only;
    show purchase counts in all Goods JSON, unless includeCounts=false
    merging with feature/db
    support for API request type classification
    DGS API
    fractional quantities
    JSON representation is now use case specific, different for http API and peer to peer communication, and no longer part of the Block and Transaction APIs;
    define JSON represenations for http API in a signle place for consistency;
    always return amounts in both NXT and NQT, the amounts in NXT represented in the JSON as Strings
    Added "numberOfTrades" into "getAsset".
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    validation and debugging
    encapsulate fields
    cleaned up all JSON API error handling
    use Longs for id's, a lot of cleanup
    doGet switch statement refactoring, not done yet
    updated copyright year
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    added copyright notice headers
    peer networking refactoring
    moved peer networking APIs under APITag.NETWORK
    merging with feature/db
    support for API request type classification
    JSON representation is now use case specific, different for http API and peer to peer communication, and no longer part of the Block and Transaction APIs;
    define JSON represenations for http API in a signle place for consistency;
    always return amounts in both NXT and NQT, the amounts in NXT represented in the JSON as Strings
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    removed wellknown from peer info
    null pointers, added blacklisted and wellknown to peer info
    fix hallmark string in json peer info
    improve handling of peer announced addresses and ports
    refactoring of Peer, User, Api, Nxt
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    cleaned up all JSON API error handling
    more cleanup
    use Longs for id's, a lot of cleanup
    more cleanup
    finished doGet and doPost switch refactoring
    doGet switch statement refactoring, not done yet
    updated copyright year
    added copyright notice headers
    don't tag getDGSTags and getDGSTagCount as search APIs
    added getDGSTagCount API, allow getDGSGoodsCount and getDGSPurchaseCount to be used also to get total goods or purchase counts
    updated copyright year
    added copyright notice headers
    getDataTags, getDataTagCount, getDataTagsLike, verifyTaggedData APIs
    updated copyright year
    default to false for almost all includeXXX optional API parameters
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    added timestamp parameter to getExchanges and getTrades
    added includeAssetInfo parameter to getTrades, getAllTrades, getAssetTransfers;
    added includeCounts parameter to getState;
    analyze tables every 5000 instead of 1440 blocks
    only do caching for some api calls
    add asset names and decimals to asset trades and transfers, use thread local caching by starting a db transaction for each api request unless disabled for specific requests
    include asset names in getTrades and getAllTrades
    getTrades API now can return trades for account, asset, or a combination of the two
    added getAssetAccounts API to get all holders of an asset
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    DbIterator, offset and limit pagination
    merging with feature/db
    support for API request type classification
    reverse sorting of purchases, allow filtering goods by availability, pagination
    reverse getTrade results order
    fractional quantities
    JSON representation is now use case specific, different for http API and peer to peer communication, and no longer part of the Block and Transaction APIs;
    define JSON represenations for http API in a signle place for consistency;
    always return amounts in both NXT and NQT, the amounts in NXT represented in the JSON as Strings
    NQT
    cleanup
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    avoid array index out of bounds exception
    minor fixes
    blockchain refactoring
    refactoring of Peer, User, Api, Nxt
    minor improvements
    Added "getTrades" API request.
    updated copyright year
    default to false for almost all includeXXX optional API parameters
    added copyright notice headers
    added includeEffectiveBalance parameter to getAccount and getBalance APIs
    merging with feature/db
    support for API request type classification
    fractional quantities
    JSON representation is now use case specific, different for http API and peer to peer communication, and no longer part of the Block and Transaction APIs;
    define JSON represenations for http API in a signle place for consistency;
    always return amounts in both NXT and NQT, the amounts in NXT represented in the JSON as Strings
    NQT
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    refactoring of Peer, User, Api, Nxt
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    cleaned up all JSON API error handling
    use Longs for id's, a lot of cleanup
    doGet switch statement refactoring, not done yet
    updated copyright year
    ExchangeRequest derived object and exchange_request table
    added getExpectedOrderCancellations, optional sort by price, account or asset parameters optional for getExpected requests
    added getAccountExpectedExchangeRequests, getExpectedAssetTransfers, getExpectedBuyOffers, getExpectedSellOffers, getExpectedCurrencyTransfers
    added copyright notice headers
    tag getAccountExchangeRequests with APITag.MS
    getAccountExchangeRequests refactoring
    Get exchange requests
    updated copyright year
    refactoring
    APIs that need a write lock should never be allowed to obtain a read lock first
    added copyright notice headers
    no more Longs
    GetAccountId also returns publicKey
    cleanup
    merging with feature/db
    support for API request type classification
    getAccountId also accepts publicKey as a parameter
    finish Reed-Solomon format core support
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    support POST for all requests, and optionally enforce its use for those that require it
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    cleaned up all JSON API error handling
    doGet switch statement refactoring, not done yet
    updated copyright year
    the debug APIs also don't need up to date blockchain
    added copyright notice headers
    fixed processing of unconfirmed transactions, added getAllBroadcasted and getAllLostTransactions debug APIs
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    sort currency founders by height desc by default, also handle the case of both currency and account specified
    get founders currency - add parameter
    get founders currency - initial commit not tested
    do not allow retrieving currency by code except in getCurrency API
    currency APIs can accept either currency id or currency code
    make sure DbIterators are closed
    Currency Reserve unit tests and fixes to the crowd funding system
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    added getAccountCurrencyCount and getCurrencyAccountCount APIs
    added getAccountAssetCount, getAliasCount, getDGSGoodsCount, getDGSGoodsPurchaseCount, getDGSPurchaseCount APIs
    added includeCounts option to getAssets APIs
    getAccountBlockCount API
    updated copyright year
    allow both prunable plain and prunable encrypted messages
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    version 2 uncompressed permanent encrypted messages
    made compression of encrypted messages optional
    minor
    prunable encrypted messages
    prunable message
    prunable message
    no more Longs
    encryptToSelfMessage
    use Arbitrary Message type for encrypted messages too, better parameter names
    bugs
    transaction attachments refactoring
    support for API request type classification
    junit tests
    aliases in database
    encrypted message transaction type
    updated copyright year
    added copyright notice headers
    use prunableAttachmentJSON parameter in broadcastTransaction, add prunableAttachmentJSON in signTransaction and getTransactionBytes response, Nxt.newTransactionBuilder(bytes,prunableAttachmentJSON)
    tests for blockchain download, rescan and rollback
    no more Longs
    merging with feature/db
    support for API request type classification
    use sha256(signature) instead of plain signature for full hash calculation
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    no need to call getBlock
    fix if/else broken during refactoring
    prepare transaction bytes ready for signing if public key is supplied instead of secret phrase
    fix if/else broken during refactoring
    prepare transaction bytes ready for signing if public key is supplied instead of secret phrase
    consistent counting of transaction confirmations
    blockchain refactoring
    split Blockchain class
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    cleaned up all JSON API error handling
    more cleanup
    use Longs for id's, a lot of cleanup
    more cleanup
    doGet switch statement refactoring, not done yet
    updated copyright year
    use recipient instead of account everywhere in account properties including for transaction recipient
    account properties
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    renamed pending to phased/phasing
    added account parameter to getCurrencyPendingTransactions and getAssetPendingTransactions
    added withoutWhitelist optional parameter
    refactoring, implement voting models as enum
    renaming
    renaming, database indexes
    GetCurrencyPendingTransactions
    GetAccountPendingTransactionIds removed, getAccountPendingTransactionsToApprove implemented, getAssetPendingTransactions implemented
    GetAccountPendingTransaction, finished field added back to PendingTransactionPoll, TransactionProcessocImpl condition fix, PendingTransactionPoll.getIdsByWhitelistedSigner fix
    various fixes and improvements
    pruning for pending transactions polls, "finished" flag removed from phased txs HTTP API, delete operation for VersionedValuesTable
    getPendingTransactionVotesCount, todos fixed
    some fixes  due to static code analysis
    unneccesary todos deleted, code formating, unneccesary exceptions handling removed
    GetAccountPendingTransactionIds
    updated copyright year
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    added copyright notice headers
    moved peer networking APIs under APITag.NETWORK
    merging with feature/db
    support for API request type classification
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    refactoring of Peer, User, Api, Nxt
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    cleaned up all JSON API error handling
    doGet switch statement refactoring, not done yet
    updated copyright year
    the debug APIs also don't need up to date blockchain
    updated initial known peers
    do not use streams
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    dumpPeers enhancements
    allow filtering by weight
    added copyright notice headers
    removed Peer.isWellKnown; use nxt-default.properties for setting initial peers instead of NxtDbVersion
    replaced nxt.dumpPeerVersion with dumpPeers API
    updated copyright year
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    added copyright notice headers
    merging with feature/db
    support for API request type classification
    JSON representation is now use case specific, different for http API and peer to peer communication, and no longer part of the Block and Transaction APIs;
    define JSON represenations for http API in a signle place for consistency;
    always return amounts in both NXT and NQT, the amounts in NXT represented in the JSON as Strings
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    refactoring for better javadoc
    token processing
    made classes public so that javadoc can be used to hold http api documentation
    token processing
    made classes public so that javadoc can be used to hold http api documentation
    cleaned up all JSON API error handling
    doGet switch statement refactoring, not done yet
    updated copyright year
    shuffler http APIs
    more shuffling state consistency validation, logging, refactoring
    shuffling assets
    shuffle processing, verification, and cancellation should all depend on current shuffle state and validate that it did not change
    copyright notices
    More testing and fixing problem in the participant registration code
    Work on APIs and transaction types
    updated copyright year
    added copyright notice headers
    add vote weighting to pollResults json
    also include total weighted vote count for each option in the poll result
    PollResult class not needed, rely on ValuesDbTable to preserve values ordering and store results only
    added phasing_poll_result table
    bugs
    refactoring, implement voting models as enum
    renamed PollCounting to VoteWeighting
    moved common validation to PollCounting.validate
    moved out the counting logic to PollCounting
    minor
    shorten PartialPollResult to PollResult
    count poll votes at the smaller of current height or finish height
    various fixes and improvements
    formatting
    optional polls processing, finished field removed from all pols
    ParameterParser usage for VS / 2PTs
    getPollVotes API Call
    voting system got massive update
    merging with feature/db
    voting system - pre-final version
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    renamed pending to phased/phasing
    fees refactoring, phasing fees
    getAccountPendingTransactions - both outgoing & ingoing transactions
    renaming
    renaming, database indexes
    GetAccountPendingTransaction, finished field added back to PendingTransactionPoll, TransactionProcessocImpl condition fix, PendingTransactionPoll.getIdsByWhitelistedSigner fix
    various fixes and improvements
    pruning for pending transactions polls, "finished" flag removed from phased txs HTTP API, delete operation for VersionedValuesTable
    getPendingTransactionVotesCount, todos fixed
    some fixes  due to static code analysis
    unneccesary todos deleted, code formating, unneccesary exceptions handling removed
    GetAccountPendingTransactionIds
    updated copyright year
    added requestType properties to getConstants
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    added copyright notice headers
    added hexConvert utility
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    do not allow retrieving currency by code except in getCurrency API
    added getAccountCurrencyCount and getCurrencyAccountCount APIs
    updated copyright year
    added copyright notice headers
    no more Longs
    merging with feature/db
    support for API request type classification
    DGS API
    DGS http API, not yet finished
    updated copyright year
    added copyright notice headers
    allow use of file upload in the /test forms, ats.js needs to be fixed to handle multipart forms too
    added channel field to tagged data
    getDataTags, getDataTagCount, getDataTagsLike, verifyTaggedData APIs
    getTaggedData, getAccountTaggedData, searchTaggedData APIs, bugfixes
    uploadTaggedData API
    updated copyright year
    shuffler http APIs
    removed redundant check
    more shuffling state consistency validation, logging, refactoring
    shuffling assets
    shuffle processing, verification, and cancellation should all depend on current shuffle state and validate that it did not change
    blame
    reveal keys as part of shuffle cancel transaction, for now
    copyright notices
    More testing and fixing problem in the participant registration code
    Work on APIs and transaction types
    Virtual exchange
    updated copyright year
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    added copyright notice headers
    merging with feature/db
    support for API request type classification
    JSON representation is now use case specific, different for http API and peer to peer communication, and no longer part of the Block and Transaction APIs;
    define JSON represenations for http API in a signle place for consistency;
    always return amounts in both NXT and NQT, the amounts in NXT represented in the JSON as Strings
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    refactoring for better javadoc
    hallmark processing
    made classes public so that javadoc can be used to hold http api documentation
    hallmark processing
    made classes public so that javadoc can be used to hold http api documentation
    cleaned up all JSON API error handling
    use Longs for id's, a lot of cleanup
    doGet switch statement refactoring, not done yet
    updated copyright year
    API and API_SSL peer service, allow querying for multiple services in getPeers, include API ports in peer info if open
    Merged source updates
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    added copyright notice headers
    fixed IntelliJ inspections, replace some for loops with Iterable.forEach
    use host only as peer identifier, not host with port
    optimizations
    streams
    minor
    moved peer networking APIs under APITag.NETWORK
    optionally include full peer info in getPeers
    Changed Peers page to use new API call, improving performance
    optionally include full peer info in getPeers
    optional state parameter to getPeers for getting peers in the specified state
    enable requesting active peers only in getPeers
    merging with feature/db
    support for API request type classification
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    refactoring of Peer, User, Api, Nxt
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    encapsulate fields
    cleaned up all JSON API error handling
    use Longs for id's, a lot of cleanup
    more cleanup
    doGet switch statement refactoring, not done yet
    updated copyright year
    keep track of asset deletes in asset_delete table, added getAssetDeletes API
    default to false for almost all includeXXX optional API parameters
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    added timestamp parameter to getExchanges and getTrades
    added includeAssetInfo parameter to getTrades, getAllTrades, getAssetTransfers;
    added includeCounts parameter to getState;
    analyze tables every 5000 instead of 1440 blocks
    only do caching for some api calls
    add asset names and decimals to asset trades and transfers, use thread local caching by starting a db transaction for each api request unless disabled for specific requests
    include asset names in getTrades and getAllTrades
    getTrades API now can return trades for account, asset, or a combination of the two
    added getAssetAccounts API to get all holders of an asset
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    DbIterator, offset and limit pagination
    merging with feature/db
    support for API request type classification
    reverse sorting of purchases, allow filtering goods by availability, pagination
    reverse getTrade results order
    fractional quantities
    JSON representation is now use case specific, different for http API and peer to peer communication, and no longer part of the Block and Transaction APIs;
    define JSON represenations for http API in a signle place for consistency;
    always return amounts in both NXT and NQT, the amounts in NXT represented in the JSON as Strings
    NQT
    cleanup
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    avoid array index out of bounds exception
    minor fixes
    blockchain refactoring
    refactoring of Peer, User, Api, Nxt
    minor improvements
    Added "getTrades" API request.
    updated copyright year
    phased transactions API improvements
    added copyright notice headers
    no more Longs
    merging with feature/db
    support for API request type classification
    merged develop
    full hash bugfixes, allow finding transaction by full hash, return full hash in the JSON
    JSON representation is now use case specific, different for http API and peer to peer communication, and no longer part of the Block and Transaction APIs;
    define JSON represenations for http API in a signle place for consistency;
    always return amounts in both NXT and NQT, the amounts in NXT represented in the JSON as Strings
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    add blockTimestamp only for confirmed transactions
    moved constants to a separate class so that custom properties can be used to set them
    null pointer
    added block_timestamp to the transaction table, added Transaction.getBlockId() and Transaction.getBlockTimestamp() which should be used for better performance instead of having to load the Block from the database to get them;
    store transaction hashes in the transaction table and make them available using Transaction.getHash() and in the JSON returned from getTransaction API;
    enable transaction lookup based on hash, as an optional parameter to the getTransaction API
    Added guid for transactions.
    consistent counting of transaction confirmations
    blockchain refactoring
    split Blockchain class
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    refactoring for better javadoc
    minor cleanup
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    cleaned up all JSON API error handling
    more cleanup
    use Longs for id's, a lot of cleanup
    more cleanup
    doGet switch statement refactoring, not done yet
    updated copyright year
    added copyright notice headers
    Undo conversion of currency code to holding  id - to be implemented client side
    Accept currecny code and allow holding id only for asset and currency
    no need to define min_poll_duration as constant
    fixed phasing finish height validation, cleaned up phasing and voting constants
    poll fee dependent on number of options, changed numbering of options and votes to allow sorting
    parameter parser cleanup
    bugs
    refactoring, implement voting models as enum
    moved out the counting logic to PollCounting
    some more validation
    Constants.VOTING_MINBALANCE_UNDEFINED removed
    renamed MS_COIN to CURRENCY
    various fixes and improvements
    formatting
    minBalanceModel fixes in API, validation, builder
    assetId -> holdingId in VS & 2PT, min balance model, referential integrity contstraint fix for poll, createPoll refactoring with ParameterParser, better poll validation
    voting system got massive update
    poll classes renaming
    voting constants moved to Constants, getAccounPolls API call, optional account parameter has been added to getPollIds
    createPoll - additional validation
    merging with feature/db
    support for API request type classification
    validation fixes
    voting system - pre-final version
    voting system - alpha(no validation, interface is raw)
    fractional quantities
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    moved constants to a separate class so that custom properties can be used to set them
    fix create unsigned transaction bugs
    fix create unsigned transaction bugs
    prepare transaction bytes ready for signing if public key is supplied instead of secret phrase
    Added guid for transactions.
    prepare transaction bytes ready for signing if public key is supplied instead of secret phrase
    new transaction timestamp is always current time, no need to supply as parameter
    minor fixes
    support POST for all requests, and optionally enforce its use for those that require it
    blockchain refactoring
    split Blockchain class
    Block and Transaction interfaces, not finished
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    minor
    remove possibly wrong overrides of equals, enforce unique objects, made some methods package-local
    Added Voting System.
    updated copyright year
    added copyright notice headers
    FilteringIterator
    DbIterator, offset and limit pagination
    updated copyright year
    allow deferred attachment encryption for full offline signing and encryption
    added copyright notice headers
    refactoring
    POST
    getDataTags, getDataTagCount, getDataTagsLike, verifyTaggedData APIs
    use prunableAttachmentJSON parameter in broadcastTransaction, add prunableAttachmentJSON in signTransaction and getTransactionBytes response, Nxt.newTransactionBuilder(bytes,prunableAttachmentJSON)
    always include the hash too
    verifyPrunableMessage API
    updated copyright year
    Reflect forging status changes immediately after the start/stop dialog is completed
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    added copyright notice headers
    allow getForging and stopForging access with admin password instead of secret phrase too
    merging with feature/db
    support for API request type classification
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    support POST for all requests, and optionally enforce its use for those that require it
    refactoring of Peer, User, Api, Nxt
    startForging and stopForging API
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    cleaned up all JSON API error handling
    doGet switch statement refactoring, not done yet
    updated copyright year
    added requestType properties to getConstants
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    added copyright notice headers
    merging with feature/db
    support for API request type classification
    NQT
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    moved constants to a separate class so that custom properties can be used to set them
    support POST for all requests, and optionally enforce its use for those that require it
    refactoring of Peer, User, Api, Nxt
    refactoring for better javadoc
    hallmark processing
    made classes public so that javadoc can be used to hold http api documentation
    hallmark processing
    made classes public so that javadoc can be used to hold http api documentation
    cleaned up all JSON API error handling
    doGet switch statement refactoring, not done yet
    updated copyright year
    voting models by-hash and by-transaction not allowed for phasing control
    javadoc fix
    bugs, optimizations, various changes
    Http API: GetPhasingOnlyControl/SetPhasingOnlyControl
    First simple unit test - set and then get
    updated copyright year
    added getReferencingTransactions API
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    renamed pending to phased/phasing
    renaming
    renaming, database indexes
    GetAccountPendingTransactionIds removed, getAccountPendingTransactionsToApprove implemented, getAssetPendingTransactions implemented
    various fixes and improvements
    API calls renaming
    getPendingTransactionVotesCount, todos fixed
    reviewed the VS and phasing code, added TODOs
    GetAccountPendingTransactionToSignIds implementation
    whitelists/blacklists in another table, checks for minbalance/lists
    updated copyright year
    allow forcing retrieval of pruned data for some APIs
    added copyright notice headers
    added includeData parameter to the getTaggedData APIs
    getTaggedData, getAccountTaggedData, searchTaggedData APIs, bugfixes
    updated copyright year
    removed includeShufflingInfo option, only include participant state and not full info in shuffler json
    Merge shuffler recipient and participant state into the "My Shufflings" table and compact the table columns
    added includeShufflingInfo to getShufflers
    bugs
    shuffler restart tests, bugs
    shuffler http APIs
    updated copyright year
    added copyright notice headers
    parameter parser cleanup
    no more Longs
    merging with feature/db
    support for API request type classification
    fractional quantities
    JSON representation is now use case specific, different for http API and peer to peer communication, and no longer part of the Block and Transaction APIs;
    define JSON represenations for http API in a signle place for consistency;
    always return amounts in both NXT and NQT, the amounts in NXT represented in the JSON as Strings
    NQT
    cleanup
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    more API cleanup, removed extra conversion to/from ByteBuffer
    encapsulate fields
    cleaned up all JSON API error handling
    more cleanup
    use Longs for id's, a lot of cleanup
    doGet switch statement refactoring, not done yet
    updated copyright year
    added includeHoldingInfo parameter for all getShuffling APIs except getHoldingShufflings, default false
    copyright notices
    More testing and fixing problem in the participant registration code
    allow disabling specific APIs
    updated copyright year
    sorted API tags
    sort api tags
    bugs, optimizations, various changes
    minor cleanup
    added copyright notice headers
    getDataTags, getDataTagCount, getDataTagsLike, verifyTaggedData APIs
    uploadTaggedData API
    NXT-PLUS in a single commit
    Http API: GetPhasingOnlyControl/SetPhasingOnlyControl
    First simple unit test - set and then get
    fixed some IntelliJ inspections
    renaming
    moved peer networking APIs under APITag.NETWORK
    optional polls processing, finished field removed from all pols
    getPendingTransactionVotesCount, todos fixed
    implemented full text search using the H2 lucene search, added searchAssets and searchDGSGoods APIs
    More testing and fixing problem in the participant registration code
    Work on APIs and transaction types
    added LongConvert tool
    added Debug API requests for triggering rescan, reset, and rollback
    Monetary System Http APIs - part 1
    merging with feature/db
    api navigation
    support for API request type classification
    updated copyright year
    uniform handling of insufficient balance errors
    do not allow phasing only accounts to start shufflers, create or join shufflings
    use full hash only in shuffling registration, test automated shuffling
    shuffler http APIs
    added Shuffler, made shuffling registration also depend on shuffling full hash
    shuffling assets
    copyright notices
    More testing and fixing problem in the participant registration code
    Work on APIs and transaction types
    updated copyright year
    default to false for almost all includeXXX optional API parameters
    added copyright notice headers
    java 8 lambdas
    fixed ParameterParser, some refactoring
    parameter parser cleanup
    DGS refactoring, moving static methods
    peer handling optimizations, some refactoring, moved FilteringIterator.Filter to nxt.util.Filter
    added getDGSGoodsPurchases API to retrieve purchases for a specific goodsId, optionally those with public feedbacks only;
    show purchase counts in all Goods JSON, unless includeCounts=false
    allow hiding delisted goods in getDGSGoods
    no more Longs
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    DbIterator, offset and limit pagination
    always exclude delisted goods
    merging with feature/db
    support for API request type classification
    fixed paging, filter by completed purchases
    digital goods in database
    apply inStockOnly filter to seller goods too
    bugs
    reverse sorting of purchases, allow filtering goods by availability, pagination
    fix pagination of seller goods
    return all goods sorted most recent first, and allow specifying index range
    DGS API
    updated copyright year
    allow showing vote weights in getPollVotes and getPollVote
    added copyright notice headers
    removed includeVoters from getPhasingPoll and getPhasingPolls, added getPhasingPollVotes API
    removed includeVoters parameters from getPoll and getPolls, changed vote json format in getPollVotes
    add missing firstIndex, lastIndex parameters
    various fixes and improvements
    formatting
    ParameterParser usage for VS / 2PTs
    db issues fixes, includeVoters parameter in VS Http API, phasing transactions commit/rollback fixes
    reviewed the VS and phasing code, added TODOs
    getPollVotes API Call
    updated copyright year
    added copyright notice headers
    fixed ParameterParser, some refactoring
    removed blacklist
    parameter parser cleanup
    allow messages with no recipient
    allow messages with no recipient
    no more Longs
    accounts in database, not finished
    attachment versioning
    merging with feature/db
    use Arbitrary Message type for encrypted messages too, better parameter names
    transaction attachments refactoring
    support for API request type classification
    finish Reed-Solomon format core support
    fractional quantities
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    moved constants to a separate class so that custom properties can be used to set them
    fix create unsigned transaction bugs
    fix create unsigned transaction bugs
    prepare transaction bytes ready for signing if public key is supplied instead of secret phrase
    Added guid for transactions.
    prepare transaction bytes ready for signing if public key is supplied instead of secret phrase
    new transaction timestamp is always current time, no need to supply as parameter
    support POST for all requests, and optionally enforce its use for those that require it
    blockchain refactoring
    split Blockchain class
    Block and Transaction interfaces, not finished
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    enforce deadline less than 1440 for new transactions
    enforce deadline less than 1440 for new transactions
    don't blacklist peers when validation fails because of a not yet enabled feature
    fixed validation, NxtException, partial undo support
    cleaned up all JSON API error handling
    also clear Assets and Orders on rescan, some API refactoring in progress
    use Longs for id's, a lot of cleanup
    more cleanup
    transaction type refactoring
    transaction type refactoring
    finished doGet and doPost switch refactoring
    doGet switch statement refactoring, not done yet
    updated copyright year
    the debug APIs also don't need up to date blockchain
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    added copyright notice headers
    always add errorCode and errorDesctiption in case of error
    minor
    do not require admin password when API server listens on 127.0.0.1 only
    Debug requests and DbShellServlet are always public and password protected. Removed nxt.enableDebugAPI
    Added nxt.disableAdminPassword to disable password protection
    Added password protection functionality to be used for administrative API requests. A single password is stored in nxt.adminPassword. All protected API requests require "adminPassword" parameter to match nxt.adminPassword.
    only do caching for some api calls
    add asset names and decimals to asset trades and transfers, use thread local caching by starting a db transaction for each api request unless disabled for specific requests
    require POST for blockchain modification requests
    added Debug API requests for triggering rescan, reset, and rollback
    enabled property for requestTypes, apiTags in getConstants
    different error for disabled APIs, rename
    allow disabling specific APIs
    updated copyright year
    remove old message length constant
    Check max fee and phasing duration when submitting a phased transaction under account control
    Fixed maxFee value when setting account control
    new fees
    also allow shuffling filtering by stage
    shuffling assets
    added requestType properties to getConstants
    added hash API
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    Pass epoch time to client
    added copyright notice headers
    Do not upload a file to the server in case it is too big
    added isPhasable to getConstants
    Tagged data transaction - intermediate work on transaction info, local signing, client side fee calculation and transaction subtypes from server.
    prunable message
    prunable message
    added TransactionType.isPhasingSafe indication
    replace some Convert methods with java 8 ones
    allowsPhasing no longer needed
    disallow phasing by default
    show TransactionType.canHaveRecipient and mustHaveRecipient properties in getConstants
    improved transaction types in getConstants
    variable size arbitrary and encrypted messages with size based fee
    add getName to TransactionType and populate getConstants for the types and subtypes dynamically
    changed getConstants JSON for currencyTypes, votingModels, minBalanceModels, hashAlgorithms, and peerStates
    list currency minting hash algorithms in getConstants
    refactoring, implement voting models as enum
    renaming
    PENDING_TRANSACTION_VOTE_CASTING added to GetConstants
    various fixes and improvements
    added currency type names to Currency json and to getConstants
    reviewed the VS and phasing code, added TODOs
    added a separate DeleteCurrency transaction and API call
    Implement the shuffling process transaction which implements the shuffling algorithm
    Implemented "Alias Delete" transaction type.
    removed coin shuffling code
    Work on attachment validation and transaction types
    split exchange transaction and attachments into buy and sell, units always positive
    Initial work on shuffling
    more fixes and notes, not finished
    Exchange offer validations and naming change
    Added support of dividend payment transactions.
    Implement CurrencyTransfer, change the term "money" to "currency" where applicable
    1. Separate TransactionType MonetarySystem into a separate class to reduce merging problems
    2. Reduce dependency on CurrencyType in preparation for making it an enum set
    Added shuffling cancellation transaction type.
    merging with feature/db
    use Arbitrary Message type for encrypted messages too, better parameter names
    transaction attachments refactoring
    Renaming of a transaction type.
    support for API request type classification
    added payment with message transaction type
    Added money exchange transaction.
    Added support of PoW currency.
    Added stubs for Monetary System transaction subtypes.
    encrypted message transaction type
    alias transfer bugfixes and clean up
    add Account info type/subtype constants
    finished getNextBlockGenerators refactoring and optimizations
    Updated "getConstants" response.
    Replaced RATING with FEEDBACK.
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    Added DGS transactions into "getConstants".
    moved constants to a separate class so that custom properties can be used to set them
    Added stubs for hub terminal announcement transactions.
    Block and Transaction interfaces, not finished
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    Added a skeleton for Voting System implementation.
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    use Longs for id's, a lot of cleanup
    more cleanup
    more minor json optimizations
    json optimizations, not finished
    doGet switch statement refactoring, not done yet
    updated copyright year
    added requestType properties to getConstants
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    added copyright notice headers
    always add errorCode and errorDesctiption in case of error
    added LongConvert tool
    updated copyright year
    uniform handling of insufficient balance errors
    removed includeShufflingInfo option, only include participant state and not full info in shuffler json
    Merge shuffler recipient and participant state into the "My Shufflings" table and compact the table columns
    added includeShufflingInfo to getShufflers
    do not allow phasing only accounts to start shufflers, create or join shufflings
    specific error codes for each startShuffler failure case
    refactoring
    startShuffler POST
    shuffler restart tests, bugs
    shuffler http APIs
    prunable shuffling processing data
    shuffling assets
    shuffle processing, verification, and cancellation should all depend on current shuffle state and validate that it did not change
    cancel during processing stage when a participant couldn't decrypt data
    all participants equally allowed to cancel shuffle, improved shuffle and participants state validation
    blame
    simplify, each participant stores data and keys in its own record
    refactoring, use byte[][] instead of serializing encrypted data, store recipient keys in issuer data field
    require min shuffling amount of 1000 NXT and always also shuffle this amount of NXT when shuffling MS currency
    merge fix, will be 1.7
    use recipientPublicKey instead of recipientId
    added some TODOs, bugfixes, cleanup
    reuse the SecureRandom in Crypto
    copyright notices
    Encryption API change
    Merge related changes
    Merge remote-tracking branch 'origin/develop' into feature/cs and fix shuffling unit test
    Another round of shuffling code review and adapt the currency test to a database which contains multiple currencies
    Shuffling - simplify encryption look + merge with feature/ms
    Shuffling - allow null values for shuffling currency and shuffling_participant next account (similar to next_lessee_id)
    Shuffling - code review pass 1 - add todo items
    Implement the shuffling process transaction which implements the shuffling algorithm
    Work on shuffle processing
    More testing and fixing problem in the participant registration code
    Testing and fixing problem in the participant registration code
    Work on APIs and transaction types
    enabled property for requestTypes, apiTags in getConstants
    updated copyright year
    removed currencyId
    removed includeShufflingInfo option, only include participant state and not full info in shuffler json
    Merge shuffler recipient and participant state into the "My Shufflings" table and compact the table columns
    use recipient instead of account everywhere in account properties including for transaction recipient
    added includeShufflingInfo to getShufflers
    added getAvailableToBuy and getAvailableToSell APIs
    rename
    add registered count to shuffling
    allow limiting max fees and phasing duration for phasing controlled accounts
    API and API_SSL peer service, allow querying for multiple services in getPeers, include API ports in peer info if open
    getExpectedAssetDeletes API
    allow both prunable plain and prunable encrypted messages
    keep track of asset deletes in asset_delete table, added getAssetDeletes API
    also report the failure cause
    keep trying to submit currently not valid transactions
    added includeHoldingInfo parameter for all getShuffling APIs except getHoldingShufflings, default false
    cancellingAccountId can be stored in assigneeAccountId, shuffling stage error checking
    account properties
    added includeAssetInfo and includeCurrencyInfo parameters to getAccountAssets, getAccountCurrencies, getAccountExchangeRequests, getExpectedAssetTransfers, getExpectedCurrencyTransfers
    bugs, optimizations, various changes
    immediate release of approved phased transactions when possible
    phased transactions API improvements
    shuffler http APIs
    use full hash for shuffling identification, shuffler API
    optimization
    last participant cannot submit shuffling verify or shuffling cancel
    more shuffling state consistency validation, logging, refactoring
    separate height deadlines for each shuffling phase, skipping full blocks
    shuffling assets
    refactoring, use byte[][] instead of serializing encrypted data, store recipient keys in issuer data field
    Add isTransactionEvent to JSON response
    Account ledger review
    getTaggedDataExtendTransactions API
    code review, added TODOs, various minor changes
    Use initial asset quantity to validate attachment
    GetChatList and GetChatMessages API
    Merged source updates
    Add timestamp to ledger entry
    use recipientPublicKey instead of recipientId
    minor cleanup
    imports
    expunge referencing unconfirmed transactions before others when needed
    Account ledger support
    ExchangeRequest derived object and exchange_request table
    Add height parameter to exchange request
    added getExpectedOrderCancellations, optional sort by price, account or asset parameters optional for getExpected requests
    added getAccountExpectedExchangeRequests, getExpectedAssetTransfers, getExpectedBuyOffers, getExpectedSellOffers, getExpectedCurrencyTransfers
    allow showing vote weights in getPollVotes and getPollVote
    added getExpectedAsk/BidOrders APIs
    add lastConnectAttempt to peer json
    keep account lease info in a separate table
    include expired prunable JSON in API transaction JSON, if available
    added copyright notice headers
    fixed IntelliJ inspections, replace some for loops with Iterable.forEach
    Add inboundWebSocket and outboundWebSocket to peer info
    expose inbound status in Peer json
    added includeData parameter to the getTaggedData APIs
    use the currency issuance transaction to get decimals for deleted currency
    include effectiveBalance in lessors info
    added includeEffectiveBalance parameter to getAccount and getBalance APIs
    cleanup
    added channel field to tagged data
    if non-default port, hallmark also must include the port
    use host only as peer identifier, not host with port
    fixed lessors info in json
    only encrypted message can be compressed
    prunable messages not always have recipient
    getDataTags, getDataTagCount, getDataTagsLike, verifyTaggedData APIs
    use prunableAttachmentJSON parameter in broadcastTransaction, add prunableAttachmentJSON in signTransaction and getTransactionBytes response, Nxt.newTransactionBuilder(bytes,prunableAttachmentJSON)
    getTaggedData, getAccountTaggedData, searchTaggedData APIs, bugfixes
    store transaction timestamp instead of expiration time for prunable messages, improve some indexes
    made compression of encrypted messages optional
    refactoring
    getPrunableMessage, getPrunableMessages APIs
    weight "0"
    add vote weighting to pollResults json
    bugs
    added creation timestamp to polls
    unsigned long
    use minBalanceModel in pollResults to decide if holding is asset or currency
    Return holding id and decimals in poll results
    by-hash voting (pay on revealed secret)
    cleaned up some hardcoded constants
    added by-transaction voting model (linked transactions)
    allow duplicate votes for phased transactions
    minor optimizations
    fixed phasing finish height validation, cleaned up phasing and voting constants
    allow phasing without voting
    Merge related changes
    also include total weighted vote count for each option in the poll result
    replace some Convert methods with java 8 ones
    fixed poll result counting
    PollResult class not needed, rely on ValuesDbTable to preserve values ordering and store results only
    removed includeVoters from getPhasingPoll and getPhasingPolls, added getPhasingPollVotes API
    removed includeVoters parameters from getPoll and getPolls, changed vote json format in getPollVotes
    changed error and errorDescription for exception json
    include transaction id for each vote
    phasing for AE orders
    fixed validation of phased transactions, removed immediate release on vote feature
    after VS block, order transactions by index instead of id during trade processing
    always add errorCode and errorDesctiption in case of error
    Merge remote-tracking branch 'origin/develop' into feature/cs and fix shuffling unit test
    minor refactoring
    add VoteWeighting data to poll and phasing poll JSON
    added phasing_poll_result table
    added getPhasingPolls API, renamed getPhasingVotes to getPhasingPoll
    fixed to read the values from the values table in the order they are saved, reversal no longer needed
    refactoring, implement voting models as enum
    renaming
    renamed PollCounting to VoteWeighting
    moved out the counting logic to PollCounting
    defer apply for all appendixes in phasing; rename TwoPhased to Phasing; add "phasing" prefix
    shorten PartialPollResult to PollResult
    "phased" boolean field in transaction json
    more logging of peer networking errors
    add accountId to generator json
    allow getForging and stopForging access with admin password instead of secret phrase too
    account in poll json, TestGetAccountPolls
    renamed finishBlockHeight to finishHeight
    count poll votes at the smaller of current height or finish height
    renamed MS_COIN to CURRENCY
    optimization
    various fixes and improvements
    Pair class deletion
    issueCreatePoll, TestCreatePoll first working test
    Revert "id added to poll json"
    
    This reverts commit 5fcfc2fa35bbd47b6973c0a1b437a0da16ee0171.
    id added to poll json
    minBalanceModel added to poll json
    minor
    Improve account  leasing messages and account details - account leasing dialog
    optional polls processing, finished field removed from all pols
    voting on polls  & phased transactions by MS_COIN implemented (raw, could be buggy!)
    Add issuer account to putCurrencyIinfo
    HTTP API code improvements: putAccount in vote json generation, parseTwoPhased instead of long if in CreateTransaction
    PartalPollResult instead of Pair<String, Long>
    Fix exchange request buy/sell label
    cannot have account in putCurrencyInfo as it conflicts with account in accountCurrency
    Return the account RS so that the client can tell if a currency can be deleted
    Return the issuance height so that the client can tell if a currency is claimable
    Disable the "Offer" button when currency is not exchangeable
    added currency initial_supply
    include cumulativeDifficulty in block JSON
    add creation_height to currency table
    added currency type names to Currency json and to getConstants
    db issues fixes, includeVoters parameter in VS Http API, phasing transactions commit/rollback fixes
    optionally include full peer info in getPeers
    Changed Peers page to use new API call, improving performance
    Get exchange requests
    minor refactoring
    optionally include full peer info in getPeers
    TODOs fixes #1
    reviewed the VS and phasing code, added TODOs
    added completed parameter to getDGSGoodsPurchases, getDGSGoodsPurchaseCount, getDGSPurchaseCount, getDGSPurchases, to allow querying for completed purchases only
    unsigned transactionId bug in getExchanges
    DGS refactoring, moving static methods
    add currency name, code, and decimals to AccountCurrency JSON, and asset name and decimals to AccountAsset JSON
    add numberOfPublicFeedbacks to Goods JSON
    added getAccountCurrencies API, added optional includeLessors, includeAssets, includeCurrencies parameters to getAccount
    Another round of shuffling code review and adapt the currency test to a database which contains multiple currencies
    store parsed tags in Goods and also expose them in json
    added withPublicFeedbacksOnly parameter to getDGSPurchases API
    added getDGSGoodsPurchases API to retrieve purchases for a specific goodsId, optionally those with public feedbacks only;
    show purchase counts in all Goods JSON, unless includeCounts=false
    added tag table and getDGSTags API
    search currencies by code, name, or description, using lucene, not tested
    implement crowdfunding distribution of non-claimable currency as paying NXT to issuer instead of locking
    added getAccountAssets and getAssetAccountCount APIs, each also taking a height parameter
    after MS block, the order of transactions in a block gets determined by the forger, instead of by id, default by arrival time
    added includeCounts option to getAssets APIs
    allow currency to be both reservable and mintable, fix initial supply (pre-mine) handling
    getPollVotes API Call
    voting system got massive update
    voting constants moved to Constants, getAccounPolls API call, optional account parameter has been added to getPollIds
    added currency decimals, optionally include currency name and decimals in getCurrencyTransfers and getExchanges
    More testing and fixing problem in the participant registration code
    replaced getAllOffers with getBuyOffers and getSellOffers, added getOffer, offer queries optimizations
    refactoring
    split exchange transaction and attachments into buy and sell, units always positive
    added includeAssetInfo parameter to getTrades, getAllTrades, getAssetTransfers;
    added includeCounts parameter to getState;
    analyze tables every 5000 instead of 1440 blocks
    attachment loading fix, db fixes, after-merge fixes
    minor fixes while reviewing the code
    Add timestamp to currency transfer - cont
    add timestamp to asset transfer
    added Trade.isBuy(), exposed as tradeType in trade json
    goods timestamp in json
    AccountAsset should not have a height field at all
    add number of asset holders to asset json
    Implement GetCurrencyAccounts API
    add asset names and decimals to asset trades and transfers, use thread local caching by starting a db transaction for each api request unless disabled for specific requests
    Implement CurrencyTransfer, change the term "money" to "currency" where applicable
    more renaming
    renamed Transfer to AssetTransfer
    allow historical queries if data still available, added optional height parameter to getAssetAccounts, added getAccountLessors with a height parameter
    show number of asset transfers in getState and in asset json
    keep track of asset transfers in a transfer table, added getTransfers API
    added askOrderHeight and bidOrderHeight to Trade
    tests for blockchain download, rescan and rollback
    Implement additional hashing algorithms for minting
    Currency Reserve unit tests and fixes to the crowd funding system
    Implement the exchanges table and getAllExchanges API
    Unit test uses getAllExchanges API
    Add algorithm field to currency
    Convert Long to long in Currency and Exchange
    no more Longs
    optimizations
    getTrades API now can return trades for account, asset, or a combination of the two
    added getAssetAccounts API to get all holders of an asset
    More work on APIs
    DbIterator, offset and limit pagination
    add block id to json
    added includeTransactions parameter to getBlock
    added numberOfConfirmations parameter to getAccountTransactions APIs
    removed "comment" parameter
    DbKey, DbKeyFactory, removed Link tables
    remove comment parameter
    minor validation refactoring, also add comment in addition to message in Asset Transfer json
    use null recipient instead of Genesis for Alias sell to anyone transactions
    added EC fields to transaction json too, renamed to ecBlockId, ecBlockHeight
    synchronization on Account no longer needed
    fix attachment json
    PublicKeyAnnouncement appendix
    cleanup
    don't add json for empty attachments
    transactions with no recipient really should not have a recipient; bugfixes
    merging with feature/db
    bug
    bugs
    transaction attachments refactoring
    refresh connected peer info once an hour
    voting system - pre-final version
    return refundNQT and discountNQT as strings in transaction json
    voting system - alpha(no validation, interface is raw)
    orders in database
    add Goods name to Purchase
    aliases in database
    added generatorPublicKey to block JSON object
    cleaned up the Aliases API
    alias transfer bugfixes and clean up
    include guaranteedBalanceNQT(1440) in getAccount JSON
    minor
    add refundNQT and discountNQT fields to Purchase, debug trace of purchase transactions
    add RS format accounts too
    minor
    minor
    added Account.getForgedBalanceNQT, and forgedBalanceNQT to account JSON
    DGS now uses AES; finished DGS API; added Account.encryptTo and Account.decryptFrom; added DGS event listeners
    finish Reed-Solomon format core support
    DGS API
    merged develop
    fully remove referencedTransactionId after NQT_BLOCK
    use sha256(signature) instead of plain signature for full hash calculation
    JSON still needs to include referencedTransactionId before NQT_BLOCK
    full hash bugfixes, allow finding transaction by full hash, return full hash in the JSON
    full hash referenced transactions
    also always add transactionId to the json
    minor
    removed NXT and INT JSON properties, removed support for NXT and INT http parameters, enabled running on main net too
    error handling, minor
    minor bugs
    fractional quantities
    JSON representation is now use case specific, different for http API and peer to peer communication, and no longer part of the Block and Transaction APIs;
    define JSON represenations for http API in a signle place for consistency;
    always return amounts in both NXT and NQT, the amounts in NXT represented in the JSON as Strings
    updated copyright year
    default to false for almost all includeXXX optional API parameters
    minor refactoring
    avoid null pointer errors on missing parameters
    added copyright notice headers
    search currencies by code, name, or description, using lucene, not tested
    More API work and unit tests
    More work on APIs
    different error for disabled APIs, rename
    allow disabling specific APIs
    updated copyright year
    add X-Frame-Options: SAMEORIGIN header by default
    switch back to production testnet, use SHUFFLING_BLOCK for all hardfork changes
    API and API_SSL peer service, allow querying for multiple services in getPeers, include API ports in peer info if open
    Jetty fix for compressed static content
    code review, added TODOs, various minor changes
    Merged source updates
    shuffling testnet on 2874
    UPnP support
    add maxUploadFileSize to properties, do not allow values less than 42k
    1. Enhance the test page to submit upload requests normally so that the response is written to the page
    2. Make the upload file size configurable, defaults to the max tagged data, log exception and return an error in case its too big
    Add etag support to try to improve refresg problems for static resources - see http://en.wikipedia.org/wiki/HTTP_ETag and http://stackoverflow.com/questions/499966/etag-vs-header-expires
    added copyright notice headers
    also add file size limit on server side
    File upload - enable multipart requests and support for parsing file upload as tagged data
    improved adminPassword checking
    Fix opening wallet from tray icon and log system.out and err messages to files in %TEMP% folder when running nxt.exe
    prepare for merge
    2874 testnet
    changed back to 6874 testnet, cleaned up new NxtDbVersion steps
    NXT-PLUS in a single commit
    typo, logging
    Backwards compatibility
    Support HTTP and HTTPS using two ports
    do not disable adminPassword if set even if localhost only
    java 8 lambdas
    limit number of records returned to nxt.maxAPIRecords unless the admin password is provided or is disabled
    Do not log nxt.keyStorePassword
    allow getForging and stopForging access with admin password instead of secret phrase too
    Initial Support for System Tray icons - not done yet
    testnet for VS on port 2874
    allow not logging some property values
    do not require admin password when API server listens on 127.0.0.1 only
    Debug requests and DbShellServlet are always public and password protected. Removed nxt.enableDebugAPI
    Added nxt.disableAdminPassword to disable password protection
    better validation of allowedBotHosts addresses
    refactoring allowedBotHosts logic
    allow configuring different default page for the api server
    put back testnet ports and peers
    Minting client reference implementation
    Add support for Scrypt hash function
    This is used by minting code
    1.4.0e testnet on ports 2874, 2875, 2876
    Minting client reference implementation
    exclude SSLv3 protocol
    DbShellServlet
    better handling of startup errors
    Implement GZip filter for the API Servlet
    Merged in lyaffe/nxt-1.1.6/master (pull request #15)
    
    Replace ContextHandler with DefaultServlet and implement GZip for static resources
    Replace ContextHandler with DefaultServlet and implement GZip for static resources
    if not using NxtLogManager, print shutdown messages to System.out
    merging with feature/db
    setReuseAddress(true) for jetty ServerConnectors
    parallelize startup tasks
    Nxt.getStringListProperty
    explicitly stop all jetty servers at shutdown
    APITestServlet for manual testing and debugging of all http APIs
    moved constants to a separate class so that custom properties can be used to set them
    enable use of testnet just by setting nxt.isTestnet=true
    init improvements
    allow using https/ssl for the API and the UI, allow custom Properties
    use nxt-default.properties for all defaults
    stop jetty servers at shutdown; don't start peer server until ready
    refactoring of Peer, User, Api, Nxt
    updated copyright year
    uniform handling of insufficient balance errors
    added copyright notice headers
    allow time manipulations for testing, and test forging
    merging with feature/db
    transaction attachments refactoring
    support for API request type classification
    use real recipient instead of genesis for DGS transactions
    also accept pre-encrypted notes and goods, for client-side signing
    length limits enforced after encryption only
    DGS now uses AES; finished DGS API; added Account.encryptTo and Account.decryptFrom; added DGS event listeners
    DGS API
    more DGS API
    updated copyright year
    added requestType properties to getConstants
    minor cleanup
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    1. Enhance the test page to submit upload requests normally so that the response is written to the page
    2. Make the upload file size configurable, defaults to the max tagged data, log exception and return an error in case its too big
    Implement file token APIs
    added copyright notice headers
    added timestamp and account to the result of generateToken
    merging with feature/db
    support for API request type classification
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    support POST for all requests, and optionally enforce its use for those that require it
    added generateToken API
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    replace some Convert methods with java 8 ones
    no more Longs
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    DbIterator, offset and limit pagination
    merging with feature/db
    support for API request type classification
    fractional quantities
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    avoid null pointers
    Added "limit" to "getAskOrderIds" and "getBidOrderIds".
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    merged lastBytes fix from 0.5.12
    fixed transaction hash validation
    purge expired hashes in block.apply
    Added "getAccount".
    Improved "getAskOrderIds", "getBidOrderIds".
    Enabled "getAsset", "getAssetIds".
    return unmodifiable maps
    fixed transaction hash validation
    Added "getAccount".
    Improved "getAskOrderIds", "getBidOrderIds".
    Enabled "getAsset", "getAssetIds".
    encapsulate fields
    cleaned up all JSON API error handling
    use Longs for id's, a lot of cleanup
    doGet switch statement refactoring, not done yet
    updated copyright year
    the debug APIs also don't need up to date blockchain
    APIs that need a write lock should never be allowed to obtain a read lock first
    added copyright notice headers
    always add errorCode and errorDesctiption in case of error
    do not require admin password when API server listens on 127.0.0.1 only
    Debug requests and DbShellServlet are always public and password protected. Removed nxt.enableDebugAPI
    Added nxt.disableAdminPassword to disable password protection
    added clearUnconfirmedTransactions API
    only do caching for some api calls
    add asset names and decimals to asset trades and transfers, use thread local caching by starting a db transaction for each api request unless disabled for specific requests
    require POST for blockchain modification requests
    added Debug API requests for triggering rescan, reset, and rollback
    updated copyright year
    added copyright notice headers
    parameter parser cleanup
    no more Longs
    merging with feature/db
    support for API request type classification
    orders in database
    fractional quantities
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    fix create unsigned transaction bugs
    fix create unsigned transaction bugs
    prepare transaction bytes ready for signing if public key is supplied instead of secret phrase
    Added guid for transactions.
    prepare transaction bytes ready for signing if public key is supplied instead of secret phrase
    new transaction timestamp is always current time, no need to supply as parameter
    support POST for all requests, and optionally enforce its use for those that require it
    blockchain refactoring
    split Blockchain class
    Block and Transaction interfaces, not finished
    refactoring of Peer, User, Api, Nxt
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    enforce deadline less than 1440 for new transactions
    enforce deadline less than 1440 for new transactions
    don't blacklist peers when validation fails because of a not yet enabled feature
    fixed validation, NxtException, partial undo support
    encapsulate fields
    cleaned up all JSON API error handling
    also clear Assets and Orders on rescan, some API refactoring in progress
    use Longs for id's, a lot of cleanup
    more cleanup
    transaction type refactoring
    transaction type refactoring
    finished doGet and doPost switch refactoring
    doGet switch statement refactoring, not done yet
    updated copyright year
    added includeHoldingInfo parameter for all getShuffling APIs except getHoldingShufflings, default false
    also allow shuffling filtering by stage
    made deletion of finished shufflings optional
    more shuffling APIs, database indexes
    added copyright notice headers
    removed includeVoters parameters from getPoll and getPolls, changed vote json format in getPollVotes
    added searchPolls API
    search currencies by code, name, or description, using lucene, not tested
    implemented full text search using the H2 lucene search, added searchAssets and searchDGSGoods APIs
    added includeCounts option to getAssets APIs
    DbIterator, offset and limit pagination
    merging with feature/db
    support for API request type classification
    undo of leasing should trigger a rescan
    DGS http API, not yet finished
    added getAssets and getAllAssets APIs
    JSON representation is now use case specific, different for http API and peer to peer communication, and no longer part of the Block and Transaction APIs;
    define JSON represenations for http API in a signle place for consistency;
    always return amounts in both NXT and NQT, the amounts in NXT represented in the JSON as Strings
    also return assetId
    allow non-unique asset names;
    added GetAssetsByName API request
    updated copyright year
    added copyright notice headers
    FilteringIterator
    DbIterator, offset and limit pagination
    updated copyright year
    default to false for almost all includeXXX optional API parameters
    performance optimization, avoid querying database tables when only accountId or other id is needed
    allow filtering by timestamp
    added copyright notice headers
    added includeAssetInfo parameter to getTrades, getAllTrades, getAssetTransfers;
    added includeCounts parameter to getState;
    analyze tables every 5000 instead of 1440 blocks
    only do caching for some api calls
    more renaming
    renamed Transfer to AssetTransfer
    keep track of asset transfers in a transfer table, added getTransfers API
    include asset names in getTrades and getAllTrades
    getTrades API now can return trades for account, asset, or a combination of the two
    added getAssetAccounts API to get all holders of an asset
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    DbIterator, offset and limit pagination
    merging with feature/db
    support for API request type classification
    reverse sorting of purchases, allow filtering goods by availability, pagination
    reverse getTrade results order
    fractional quantities
    JSON representation is now use case specific, different for http API and peer to peer communication, and no longer part of the Block and Transaction APIs;
    define JSON represenations for http API in a signle place for consistency;
    always return amounts in both NXT and NQT, the amounts in NXT represented in the JSON as Strings
    NQT
    cleanup
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    avoid array index out of bounds exception
    minor fixes
    blockchain refactoring
    refactoring of Peer, User, Api, Nxt
    minor improvements
    Added "getTrades" API request.
    updated copyright year
    added copyright notice headers
    allow use of file upload in the /test forms, ats.js needs to be fixed to handle multipart forms too
    added channel field to tagged data
    getDataTags, getDataTagCount, getDataTagsLike, verifyTaggedData APIs
    updated copyright year
    added copyright notice headers
    fixed javadoc
    do not allow retrieving currency by code except in getCurrency API
    Minting client reference implementation
    Add support for Scrypt hash function
    Minting client reference implementation
    currency APIs can accept either currency id or currency code
    Javadoc work in progress
    Implement CurrencyTransfer, change the term "money" to "currency" where applicable
    Simplify currency transfer, add additional APIS, align mint data types across classes
    updated copyright year
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    fixed IntelliJ inspections
    added copyright notice headers
    Fixed output getPlugins API call
    Change file visitor to private
    Implement the GetPlugins API
    Intermidiate Work on GetPlugins
    updated copyright year
    added getExpectedOrderCancellations, optional sort by price, account or asset parameters optional for getExpected requests
    added getAccountExpectedExchangeRequests, getExpectedAssetTransfers, getExpectedBuyOffers, getExpectedSellOffers, getExpectedCurrencyTransfers
    added getExpectedAsk/BidOrders APIs
    added copyright notice headers
    no more Longs
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    DbIterator, offset and limit pagination
    merging with feature/db
    support for API request type classification
    added getAskOrders and getBidOrders
    fractional quantities
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    avoid null pointers
    Added "limit" to "getAskOrderIds" and "getBidOrderIds".
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    merged lastBytes fix from 0.5.12
    fixed transaction hash validation
    purge expired hashes in block.apply
    Added "getAccount".
    Improved "getAskOrderIds", "getBidOrderIds".
    Enabled "getAsset", "getAssetIds".
    return unmodifiable maps
    fixed transaction hash validation
    Added "getAccount".
    Improved "getAskOrderIds", "getBidOrderIds".
    Enabled "getAsset", "getAssetIds".
    encapsulate fields
    cleaned up all JSON API error handling
    use Longs for id's, a lot of cleanup
    doGet switch statement refactoring, not done yet
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    added buyer parameter to getDGSGoodsPurchases
    added completed parameter to getDGSGoodsPurchases, getDGSGoodsPurchaseCount, getDGSPurchaseCount, getDGSPurchases, to allow querying for completed purchases only
    DGS refactoring, moving static methods
    added getDGSGoodsPurchases API to retrieve purchases for a specific goodsId, optionally those with public feedbacks only;
    show purchase counts in all Goods JSON, unless includeCounts=false
    updated copyright year
    added copyright notice headers
    replace some Convert methods with java 8 ones
    DbIterator, offset and limit pagination
    merging with feature/db
    support for API request type classification
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    more API cleanup, removed extra conversion to/from ByteBuffer
    encapsulate fields
    cleaned up all JSON API error handling
    use Longs for id's, a lot of cleanup
    doGet switch statement refactoring, not done yet
    updated copyright year
    bugs
    shuffler restart tests, bugs
    shuffler http APIs
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    fixed IntelliJ inspections
    added copyright notice headers
    forging bugfixes and improvements
    allow getForging and stopForging access with admin password instead of secret phrase too
    minor fixes
    allow time manipulations for testing, and test forging
    merging with feature/db
    support for API request type classification
    show remaining time too
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    support POST for all requests, and optionally enforce its use for those that require it
    added getForging API
    refactoring of Peer, User, Api, Nxt
    drop support for old getMilestoneBlockIds protocol
    enforce account existence before creating a generator for it
    startForging and stopForging API
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    cleaned up all JSON API error handling
    doGet switch statement refactoring, not done yet
    updated copyright year
    phased transactions API improvements
    allow filtering by timestamp
    added copyright notice headers
    limit number of records returned to nxt.maxAPIRecords unless the admin password is provided or is disabled
    added getBlocks API
    added getAccountBlocks, with firstIndex/lastIndex pagination, order DESC
    refactoring, guaranteed balances in database, not finished
    merging with feature/db
    support for API request type classification
    fractional quantities
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    added getBlocks and getTransactions using PreparedStatement, made Db.getConnection public
    blockchain refactoring
    refactoring of Peer, User, Api, Nxt
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    DbIterator AutoCloseable
    more optimizations, added methods to filter blocks and transactions by account
    finished database transition, no more serialized files support
    encapsulate fields
    cleaned up all JSON API error handling
    more cleanup
    use Longs for id's, a lot of cleanup
    more cleanup
    doGet switch statement refactoring, not done yet
    updated copyright year
    default to false for almost all includeXXX optional API parameters
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    added timestamp parameter to getExchanges and getTrades
    do not allow retrieving currency by code except in getCurrency API
    use db caching in getCurrencyTransfers and getExchanges APIs
    currency APIs can accept either currency id or currency code
    added currency decimals, optionally include currency name and decimals in getCurrencyTransfers and getExchanges
    make sure DbIterators are closed
    More exchange tests and APIs
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    merging with feature/db
    support for API request type classification
    fractional quantities
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    cleaned up all JSON API error handling
    more cleanup
    use Longs for id's, a lot of cleanup
    doGet switch statement refactoring, not done yet
    updated copyright year
    default to false for almost all includeXXX optional API parameters
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    search currencies by code, name, or description, using lucene, not tested
    make sure DbIterators are closed
    More work on APIs
    DbIterator, offset and limit pagination
    merging with feature/db
    support for API request type classification
    validation fixes
    removed getAssetsByName API;
    getAssetsByIssuer now accepts multivalued "account" parameter and returns a list of lists of assets
    added getAssetsByIssuer API
    updated copyright year
    default to false for almost all includeXXX optional API parameters
    added copyright notice headers
    optimized getAllExchanges and getAllTrades to take advantage of ordering by height
    peer handling optimizations, some refactoring, moved FilteringIterator.Filter to nxt.util.Filter
    added currency decimals, optionally include currency name and decimals in getCurrencyTransfers and getExchanges
    Implement the exchanges table and getAllExchanges API
    Unit test uses getAllExchanges API
    Add algorithm field to currency
    Convert Long to long in Currency and Exchange
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    avoid error if no offer found in getSellOffers and getBuyOffers
    added availableOnly parameter to getSellOffers and getBuyOffers, to return offers with non-zero supply and limit only
    do not allow retrieving currency by code except in getCurrency API
    currency APIs can accept either currency id or currency code
    replaced getAllOffers with getBuyOffers and getSellOffers, added getOffer, offer queries optimizations
    make sure DbIterators are closed
    More exchange tests and APIs
    updated copyright year
    minor refactoring
    added copyright notice headers
    minor refactoring
    removed includeVoters from getPhasingPoll and getPhasingPolls, added getPhasingPollVotes API
    null pointer on missing parameter
    fees refactoring, phasing fees
    added phasing_poll_result table
    phasing polls may have already be trimmed, skip those missing
    added getPhasingPolls API, renamed getPhasingVotes to getPhasingPoll
    Virtual exchange
    updated copyright year
    added includeAssetInfo and includeCurrencyInfo parameters to getAccountAssets, getAccountCurrencies, getAccountExchangeRequests, getExpectedAssetTransfers, getExpectedCurrencyTransfers
    added getAccountExpectedExchangeRequests, getExpectedAssetTransfers, getExpectedBuyOffers, getExpectedSellOffers, getExpectedCurrencyTransfers
    added getExpectedAsk/BidOrders APIs
    added copyright notice headers
    no more Longs
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    DbIterator, offset and limit pagination
    merging with feature/db
    support for API request type classification
    added getAskOrders and getBidOrders
    fractional quantities
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    avoid null pointers
    Added "limit" to "getAskOrderIds" and "getBidOrderIds".
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    merged lastBytes fix from 0.5.12
    fixed transaction hash validation
    purge expired hashes in block.apply
    Added "getAccount".
    Improved "getAskOrderIds", "getBidOrderIds".
    Enabled "getAsset", "getAssetIds".
    return unmodifiable maps
    fixed transaction hash validation
    Added "getAccount".
    Improved "getAskOrderIds", "getBidOrderIds".
    Enabled "getAsset", "getAssetIds".
    encapsulate fields
    cleaned up all JSON API error handling
    use Longs for id's, a lot of cleanup
    doGet switch statement refactoring, not done yet
    updated copyright year
    added copyright notice headers
    moved account info to a separate table, removed unused message pattern code
    removed pre-MS checks and logic where no longer needed; added a checksum at MS block
    disable message pattern feature
    merged in the server-side version of the merchant account message pattern feature, may need more testing
    merging with feature/db
    support for API request type classification
    setAccountInfo
    updated copyright year
    phased transactions API improvements
    performance optimization, avoid querying database tables when only accountId or other id is needed
    Merged source updates
    added copyright notice headers
    added getBlockchainTransactions API, deprecated getAccountTransactions and getAccountTransactionIds
    minor refactoring
    renaming
    "twoPhased" filter for GetAccountTransaction(Id)s
    tag getAccountTransactions with APITag.TRANSACTIONS too
    added withMessage parameter to getAccountTransactions and getAccountTransactionIds to return transactions with message only
    added numberOfConfirmations parameter to getAccountTransactions APIs
    refactoring, guaranteed balances in database, not finished
    merging with feature/db
    use NULL in the db for no-recipient transactions, added GetAccountTransactions, sort by timestamp desc, added fromIndex toIndex parameters
    support for API request type classification
    fractional quantities
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    added getBlocks and getTransactions using PreparedStatement, made Db.getConnection public
    blockchain refactoring
    refactoring of Peer, User, Api, Nxt
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    DbIterator AutoCloseable
    more optimizations, added methods to filter blocks and transactions by account
    finished database transition, no more serialized files support
    more API cleanup, removed extra conversion to/from ByteBuffer
    encapsulate fields
    cleaned up all JSON API error handling
    more cleanup
    use Longs for id's, a lot of cleanup
    more cleanup
    transaction type refactoring
    doGet switch statement refactoring, not done yet
    updated copyright year
    added requestType properties to getConstants
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    added copyright notice headers
    addPeer and blacklistPeer should requirePost and requirePassword
    peer networking refactoring
    keep track of reason for blacklisting
    limit peer networking request and response sizes to prevent out of memory attacks
    moved peer networking APIs under APITag.NETWORK
    AddPeer and BlacklistPeer API calls
    updated copyright year
    added includeAssetInfo and includeCurrencyInfo parameters to getAccountAssets, getAccountCurrencies, getAccountExchangeRequests, getExpectedAssetTransfers, getExpectedCurrencyTransfers
    added getExpectedOrderCancellations, optional sort by price, account or asset parameters optional for getExpected requests
    added getAccountExpectedExchangeRequests, getExpectedAssetTransfers, getExpectedBuyOffers, getExpectedSellOffers, getExpectedCurrencyTransfers
    added getExpectedAsk/BidOrders APIs
    added copyright notice headers
    no more Longs
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    DbIterator, offset and limit pagination
    merging with feature/db
    support for API request type classification
    added getAskOrders and getBidOrders
    fractional quantities
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    avoid null pointers
    Added "limit" to "getAskOrderIds" and "getBidOrderIds".
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    merged lastBytes fix from 0.5.12
    fixed transaction hash validation
    purge expired hashes in block.apply
    Added "getAccount".
    Improved "getAskOrderIds", "getBidOrderIds".
    Enabled "getAsset", "getAssetIds".
    return unmodifiable maps
    fixed transaction hash validation
    Added "getAccount".
    Improved "getAskOrderIds", "getBidOrderIds".
    Enabled "getAsset", "getAssetIds".
    encapsulate fields
    cleaned up all JSON API error handling
    use Longs for id's, a lot of cleanup
    doGet switch statement refactoring, not done yet
    updated copyright year
    added getExpectedOrderCancellations, optional sort by price, account or asset parameters optional for getExpected requests
    added getExpectedAsk/BidOrders APIs
    added copyright notice headers
    no more Longs
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    DbIterator, offset and limit pagination
    merging with feature/db
    support for API request type classification
    added getAskOrders and getBidOrders
    fractional quantities
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    avoid null pointers
    Added "limit" to "getAskOrderIds" and "getBidOrderIds".
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    merged lastBytes fix from 0.5.12
    fixed transaction hash validation
    purge expired hashes in block.apply
    Added "getAccount".
    Improved "getAskOrderIds", "getBidOrderIds".
    Enabled "getAsset", "getAssetIds".
    return unmodifiable maps
    fixed transaction hash validation
    Added "getAccount".
    Improved "getAskOrderIds", "getBidOrderIds".
    Enabled "getAsset", "getAssetIds".
    encapsulate fields
    cleaned up all JSON API error handling
    use Longs for id's, a lot of cleanup
    doGet switch statement refactoring, not done yet
    updated copyright year
    added copyright notice headers
    minor
    #278 show actual trades performed against an AE order - do not include asset information in response since we already have the asset data
    #278 show actual trades performed against an AE order
    added getOrderTrades, improved default sorting in non-versioned tables
    updated copyright year
    added copyright notice headers
    no more Longs
    merging with feature/db
    support for API request type classification
    cleaned up the Aliases API
    alias transfer bugfixes and clean up
    removed NXT and INT JSON properties, removed support for NXT and INT http parameters, enabled running on main net too
    fractional quantities
    cleanup
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    moved constants to a separate class so that custom properties can be used to set them
    fix create unsigned transaction bugs
    fix create unsigned transaction bugs
    prepare transaction bytes ready for signing if public key is supplied instead of secret phrase
    Added guid for transactions.
    prepare transaction bytes ready for signing if public key is supplied instead of secret phrase
    new transaction timestamp is always current time, no need to supply as parameter
    support POST for all requests, and optionally enforce its use for those that require it
    cosmetic clean up
    blockchain refactoring
    split Blockchain class
    Block and Transaction interfaces, not finished
    refactoring of Peer, User, Api, Nxt
    embedded jetty
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    enforce deadline less than 1440 for new transactions
    enforce deadline less than 1440 for new transactions
    don't blacklist peers when validation fails because of a not yet enabled feature
    fixed validation, NxtException, partial undo support
    encapsulate fields
    cleaned up all JSON API error handling
    also clear Assets and Orders on rescan, some API refactoring in progress
    getState show number of unlocked accounts, minor
    use Longs for id's, a lot of cleanup
    more cleanup
    transaction type refactoring
    transaction type refactoring
    finished doGet and doPost switch refactoring
    doGet switch statement refactoring, not done yet
    updated copyright year
    bugs, optimizations, various changes
    more shuffling APIs, database indexes
    added copyright notice headers
    added includeData parameter to the getTaggedData APIs
    added channel field to tagged data
    getTaggedData, getAccountTaggedData, searchTaggedData APIs, bugfixes
    updated copyright year
    added copyright notice headers
    removed includeVoters parameters from getPoll and getPolls, changed vote json format in getPollVotes
    ParameterParser.getBoolean
    ParameterParser usage for VS / 2PTs
    db issues fixes, includeVoters parameter in VS Http API, phasing transactions commit/rollback fixes
    merging with feature/db
    support for API request type classification
    voting system - pre-final version
    JSON representation is now use case specific, different for http API and peer to peer communication, and no longer part of the Block and Transaction APIs;
    define JSON represenations for http API in a signle place for consistency;
    always return amounts in both NXT and NQT, the amounts in NXT represented in the JSON as Strings
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    fix create unsigned transaction bugs
    fix create unsigned transaction bugs
    minor fixes
    refactoring of Peer, User, Api, Nxt
    Added "getPollIds" and "getPoll".
    updated copyright year
    added copyright notice headers
    added getExchangesByOffer
    replaced getAllOffers with getBuyOffers and getSellOffers, added getOffer, offer queries optimizations
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    allow deferred attachment encryption for full offline signing and encryption
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    added copyright notice headers
    made compression of encrypted messages optional
    encryptToSelfMessage
    merging with feature/db
    use Arbitrary Message type for encrypted messages too, better parameter names
    transaction attachments refactoring
    support for API request type classification
    ignore errors when trying to represent binary payload as text
    gzip compress before encryption
    DGS bugs
    DGS now uses AES; finished DGS API; added Account.encryptTo and Account.decryptFrom; added DGS event listeners
    updated copyright year
    added copyright notice headers
    Variable fees - fee is based on 3 levels.
    Old blocks before baseline are not validated (minimum fee is 0)
    Blocks after baseline are validated using old fee
    Blocks after next baseline are validated using new fee
    merging with feature/db
    support for API request type classification
    removed NXT and INT JSON properties, removed support for NXT and INT http parameters, enabled running on main net too
    fractional quantities
    NQT
    added Asset Transfer comment field; verify blocks and transactions on first scan; don't rely on db triggers when deleting multiple blocks
    allow non-unique asset names;
    added GetAssetsByName API request
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    allow different minimum fee requirements for different transactions, verify IssueAsset fee
    moved constants to a separate class so that custom properties can be used to set them
    fix create unsigned transaction bugs
    fix create unsigned transaction bugs
    prepare transaction bytes ready for signing if public key is supplied instead of secret phrase
    Added guid for transactions.
    prepare transaction bytes ready for signing if public key is supplied instead of secret phrase
    new transaction timestamp is always current time, no need to supply as parameter
    support POST for all requests, and optionally enforce its use for those that require it
    cosmetic clean up
    blockchain refactoring
    split Blockchain class
    Block and Transaction interfaces, not finished
    refactoring of Peer, User, Api, Nxt
    embedded jetty
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    don't blacklist peers when validation fails because of a not yet enabled feature
    fixed validation, NxtException, partial undo support
    cleaned up all JSON API error handling
    also clear Assets and Orders on rescan, some API refactoring in progress
    getState show number of unlocked accounts, minor
    use Longs for id's, a lot of cleanup
    more cleanup
    transaction type refactoring
    transaction type refactoring
    finished doGet and doPost switch refactoring
    doGet switch statement refactoring, not done yet
    updated copyright year
    getTaggedDataExtendTransactions API
    added copyright notice headers
    added includeData parameter to the getTaggedData APIs
    getAllTaggedData
    getTaggedData, getAccountTaggedData, searchTaggedData APIs, bugfixes
    NXT-PLUS in a single commit
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    fixed javadoc
    replace some Convert methods with java 8 ones
    refactoring to avoid MintWorker having to intialize blockchain processing classes that it does not need
    return -1 for difficulty if numericTarget is 0
    minor refactoring, fixed mint calculation test
    use signed bytes for min/max minting difficulty to allow values 1 to 255
    do not allow retrieving currency by code except in getCurrency API
    Javadoc update
    Add counter to get minting target reply
    Add counter to get minting target reply
    allow currency to be both reservable and mintable, fix initial supply (pre-mine) handling
    currency APIs can accept either currency id or currency code
    Javadoc work in progress
    New API to enable miners (minters ?) to determine the minting target per currency and number of units
    updated copyright year
    code review, added TODOs, various minor changes
    Code review
    Account ledger support
    added copyright notice headers
    Add NEW_PEER and REMOVE peer events
    GetInboundPeers API
    require POST for eventRegister and eventWait
    imports
    EventRegister and EventWait API
    updated copyright year
    added copyright notice headers
    cleaned up some hardcoded constants
    fix getAccountLessors API request
    exclude SSLv3 protocol
    make sure DbIterators are closed
    multiple database support
    include lessors guaranteed balance as of the requested height in getAccountLessors
    bugs
    allow historical queries if data still available, added optional height parameter to getAssetAccounts, added getAccountLessors with a height parameter
    updated copyright year
    the debug APIs also don't need up to date blockchain
    Lucene 5.2 support
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    added copyright notice headers
    always add errorCode and errorDesctiption in case of error
    minor
    do not require admin password when API server listens on 127.0.0.1 only
    Debug requests and DbShellServlet are always public and password protected. Removed nxt.enableDebugAPI
    Added nxt.disableAdminPassword to disable password protection
    added luceneReindex debug API to force rebuild of the search index
    only do caching for some api calls
    add asset names and decimals to asset trades and transfers, use thread local caching by starting a db transaction for each api request unless disabled for specific requests
    require POST for blockchain modification requests
    added Debug API requests for triggering rescan, reset, and rollback
    updated copyright year
    added requestType properties to getConstants
    error handling, updated changelog
    support unsignedTransactionJSON parameter in calculateFullHash
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    added copyright notice headers
    merging with feature/db
    support for API request type classification
    use sha256(signature) instead of plain signature for full hash calculation
    updated copyright year
    added copyright notice headers
    replace some Convert methods with java 8 ones
    make sure DbIterators are closed
    More work on APIs
    updated copyright year
    allow filtering by timestamp
    added copyright notice headers
    prunable message count in getState, getAllPrunableMessages API
    updated copyright year
    added copyright notice headers
    minor cleanup
    no more Longs
    version check cleanup
    use null recipient instead of Genesis for Alias sell to anyone transactions
    merging with feature/db
    support for API request type classification
    refactoring, support alias and aliasName parameters
    alias transfer bugfixes and clean up
    alias transfer - http layer fixes
    alias transfer - alpha
    updated copyright year
    uniform handling of insufficient balance errors
    minor, imports
    also check for asset issuance height in dividend payment
    Exception in dividend payment attachment if asset not issued yet
    added copyright notice headers
    reduced default nxt.maxRollback, added nxt.trimFrequency
    cleaned up some hardcoded constants
    avoid extra database calls in Account.payDividends
    check that height parameters is >= blockchainHeight - Constants.MAX_ROLLBACK
    Implementing remaining pieces of the 'dividend payment' transaction type.
    updated copyright year
    uniform handling of insufficient balance errors
    added copyright notice headers
    replace some Convert methods with java 8 ones
    merging with feature/db
    support for API request type classification
    removed NXT and INT JSON properties, removed support for NXT and INT http parameters, enabled running on main net too
    fractional quantities
    NQT
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    moved constants to a separate class so that custom properties can be used to set them
    fix create unsigned transaction bugs
    fix create unsigned transaction bugs
    prepare transaction bytes ready for signing if public key is supplied instead of secret phrase
    Added guid for transactions.
    prepare transaction bytes ready for signing if public key is supplied instead of secret phrase
    new transaction timestamp is always current time, no need to supply as parameter
    support POST for all requests, and optionally enforce its use for those that require it
    blockchain refactoring
    split Blockchain class
    Block and Transaction interfaces, not finished
    refactoring of Peer, User, Api, Nxt
    Fixed order placement bugs.
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    enforce deadline less than 1440 for new transactions
    enforce deadline less than 1440 for new transactions
    don't blacklist peers when validation fails because of a not yet enabled feature
    fixed validation, NxtException, partial undo support
    cleaned up all JSON API error handling
    also clear Assets and Orders on rescan, some API refactoring in progress
    use Longs for id's, a lot of cleanup
    more cleanup
    transaction type refactoring
    transaction type refactoring
    finished doGet and doPost switch refactoring
    doGet switch statement refactoring, not done yet
    updated copyright year
    default to false for almost all includeXXX optional API parameters
    added copyright notice headers
    added includeCounts option to getAssets APIs
    merging with feature/db
    support for API request type classification
    fractional quantities
    JSON representation is now use case specific, different for http API and peer to peer communication, and no longer part of the Block and Transaction APIs;
    define JSON represenations for http API in a signle place for consistency;
    always return amounts in both NXT and NQT, the amounts in NXT represented in the JSON as Strings
    Added "numberOfTrades" into "getAsset".
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    validation and debugging
    encapsulate fields
    cleaned up all JSON API error handling
    use Longs for id's, a lot of cleanup
    doGet switch statement refactoring, not done yet
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    added getAccountAssetCount, getAliasCount, getDGSGoodsCount, getDGSGoodsPurchaseCount, getDGSPurchaseCount APIs
    updated copyright year
    default to false for almost all includeXXX optional API parameters
    added copyright notice headers
    search currencies by code, name, or description, using lucene, not tested
    make sure DbIterators are closed
    More work on APIs
    updated copyright year
    added copyright notice headers
    fixed ParameterParser, some refactoring
    removed blacklist
    parameter parser cleanup
    minor
    DGS refactoring, moving static methods
    added getDGSTagCount API, allow getDGSGoodsCount and getDGSPurchaseCount to be used also to get total goods or purchase counts
    added getAccountAssetCount, getAliasCount, getDGSGoodsCount, getDGSGoodsPurchaseCount, getDGSPurchaseCount APIs
    updated copyright year
    added includeAssetInfo and includeCurrencyInfo parameters to getAccountAssets, getAccountCurrencies, getAccountExchangeRequests, getExpectedAssetTransfers, getExpectedCurrencyTransfers
    performance optimization, avoid querying database tables when only accountId or other id is needed
    ExchangeRequest derived object and exchange_request table
    added copyright notice headers
    tag getAccountExchangeRequests with APITag.MS
    getAccountExchangeRequests refactoring
    Get exchange requests
    updated copyright year
    added copyright notice headers
    merging with feature/db
    support for API request type classification
    error checking
    DGS API
    more DGS API
    DGS http API, not yet finished
    updated copyright year
    added copyright notice headers
    replace some Convert methods with java 8 ones
    merging with feature/db
    support for API request type classification
    added getBlockId API to get blockId based on height
    updated copyright year
    added getExpectedOrderCancellations, optional sort by price, account or asset parameters optional for getExpected requests
    added getExpectedAsk/BidOrders APIs
    added copyright notice headers
    no more Longs
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    DbIterator, offset and limit pagination
    merging with feature/db
    support for API request type classification
    added getAskOrders and getBidOrders
    fractional quantities
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    avoid null pointers
    Added "limit" to "getAskOrderIds" and "getBidOrderIds".
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    merged lastBytes fix from 0.5.12
    fixed transaction hash validation
    purge expired hashes in block.apply
    Added "getAccount".
    Improved "getAskOrderIds", "getBidOrderIds".
    Enabled "getAsset", "getAssetIds".
    return unmodifiable maps
    fixed transaction hash validation
    Added "getAccount".
    Improved "getAskOrderIds", "getBidOrderIds".
    Enabled "getAsset", "getAssetIds".
    encapsulate fields
    cleaned up all JSON API error handling
    use Longs for id's, a lot of cleanup
    doGet switch statement refactoring, not done yet
    updated copyright year
    added includeHoldingInfo parameter for all getShuffling APIs except getHoldingShufflings, default false
    made deletion of finished shufflings optional
    more shuffling APIs, database indexes
    added copyright notice headers
    added includeData parameter to the getTaggedData APIs
    added channel field to tagged data
    getTaggedData, getAccountTaggedData, searchTaggedData APIs, bugfixes
    updated copyright year
    getExpectedTransactions API, accept multivalue account parameter in getUnconfirmedTransactions APIs
    added copyright notice headers
    no more Longs
    also support RS accounts
    DbIterator, offset and limit pagination
    merging with feature/db
    support for API request type classification
    0.8.13 changelog
    NQT
    optionally filter unconfirmed transactions by account
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    blockchain refactoring
    split Blockchain class
    refactoring of Peer, User, Api, Nxt
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    encapsulate fields
    cleaned up all JSON API error handling
    more cleanup
    doGet switch statement refactoring, not done yet
    updated copyright year
    also preserve currently not valid transactions on popoff reprocessing
    throttling of unique resource allocation transactions
    phased transactions API improvements
    the debug APIs also don't need up to date blockchain
    APIs that need a write lock should never be allowed to obtain a read lock first
    added copyright notice headers
    fixed IntelliJ inspections, replace some for loops with Iterable.forEach
    fixed some IntelliJ inspections
    always add errorCode and errorDesctiption in case of error
    minor
    do not require admin password when API server listens on 127.0.0.1 only
    Debug requests and DbShellServlet are always public and password protected. Removed nxt.enableDebugAPI
    Added nxt.disableAdminPassword to disable password protection
    allow pop off of more than max rollback number of blocks, triggering a rescan
    only do caching for some api calls
    add asset names and decimals to asset trades and transfers, use thread local caching by starting a db transaction for each api request unless disabled for specific requests
    require POST for blockchain modification requests
    optimization
    added Debug API requests for triggering rescan, reset, and rollback
    global publicKey cache
    updated copyright year
    increase lease limit to 65535 blocks
    bugs, optimizations, various changes
    imports
    added copyright notice headers
    cleaned up some hardcoded constants
    fixed ParameterParser, some refactoring
    parameter parser cleanup
    tag leaseBalance with CREATE_TRANSACTION
    Unit tests - leasing
    minor cleanup
    no more Longs
    merging with feature/db
    support for API request type classification
    better error message
    added leaseBalance http API, enable transparent forging 6 on testnet at block 73000
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    add currency name, code, and decimals to AccountCurrency JSON, and asset name and decimals to AccountAsset JSON
    added getAccountAssets and getAssetAccountCount APIs, each also taking a height parameter
    allow historical queries if data still available, added optional height parameter to getAssetAccounts, added getAccountLessors with a height parameter
    added getAssetAccounts API to get all holders of an asset
    updated copyright year
    uniform handling of insufficient balance errors
    new features already enabled
    asset delete block same as coin shuffling block
    Rename DeleteAsset to DeleteAssetShares
    Asset delete support
    added copyright notice headers
    fixed ParameterParser, some refactoring
    parameter parser cleanup
    tests for blockchain download, rescan and rollback
    comment parameter no longer used
    no more Longs
    merging with feature/db
    support for API request type classification
    Removed redundant code related to assets.
    removed NXT and INT JSON properties, removed support for NXT and INT http parameters, enabled running on main net too
    fractional quantities
    0.8.13 changelog
    NQT
    added Asset Transfer comment field; verify blocks and transactions on first scan; don't rely on db triggers when deleting multiple blocks
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    moved constants to a separate class so that custom properties can be used to set them
    fix create unsigned transaction bugs
    fix create unsigned transaction bugs
    prepare transaction bytes ready for signing if public key is supplied instead of secret phrase
    Added guid for transactions.
    prepare transaction bytes ready for signing if public key is supplied instead of secret phrase
    new transaction timestamp is always current time, no need to supply as parameter
    support POST for all requests, and optionally enforce its use for those that require it
    blockchain refactoring
    split Blockchain class
    Block and Transaction interfaces, not finished
    refactoring of Peer, User, Api, Nxt
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    enforce deadline less than 1440 for new transactions
    enforce deadline less than 1440 for new transactions
    don't blacklist peers when validation fails because of a not yet enabled feature
    fixed validation, NxtException, partial undo support
    cleaned up all JSON API error handling
    also clear Assets and Orders on rescan, some API refactoring in progress
    use Longs for id's, a lot of cleanup
    more cleanup
    transaction type refactoring
    transaction type refactoring
    finished doGet and doPost switch refactoring
    doGet switch statement refactoring, not done yet
    updated copyright year
    the debug APIs also don't need up to date blockchain
    APIs that need a write lock should never be allowed to obtain a read lock first
    added copyright notice headers
    added rebroadcastUnconfirmedTransactions debug API
    allow limiting unconfirmed transaction pool size
    always add errorCode and errorDesctiption in case of error
    minor
    do not require admin password when API server listens on 127.0.0.1 only
    Debug requests and DbShellServlet are always public and password protected. Removed nxt.enableDebugAPI
    Added nxt.disableAdminPassword to disable password protection
    Added password protection functionality to be used for administrative API requests. A single password is stored in nxt.adminPassword. All protected API requests require "adminPassword" parameter to match nxt.adminPassword.
    only do caching for some api calls
    add asset names and decimals to asset trades and transfers, use thread local caching by starting a db transaction for each api request unless disabled for specific requests
    require POST for blockchain modification requests
    added Debug API requests for triggering rescan, reset, and rollback
    updated copyright year
    the debug APIs also don't need up to date blockchain
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    added copyright notice headers
    trimDerivedTables debug API
    always add errorCode and errorDesctiption in case of error
    minor
    do not require admin password when API server listens on 127.0.0.1 only
    Debug requests and DbShellServlet are always public and password protected. Removed nxt.enableDebugAPI
    Added nxt.disableAdminPassword to disable password protection
    Added password protection functionality to be used for administrative API requests. A single password is stored in nxt.adminPassword. All protected API requests require "adminPassword" parameter to match nxt.adminPassword.
    only do caching for some api calls
    add asset names and decimals to asset trades and transfers, use thread local caching by starting a db transaction for each api request unless disabled for specific requests
    require POST for blockchain modification requests
    added Debug API requests for triggering rescan, reset, and rollback
    updated copyright year
    added getAvailableToBuy and getAvailableToSell APIs
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    do not allow retrieving currency by code except in getCurrency API
    added getAccountCurrencyCount and getCurrencyAccountCount APIs
    updated copyright year
    phased transactions API improvements
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    added getAccountBlocks, with firstIndex/lastIndex pagination, order DESC
    refactoring, guaranteed balances in database, not finished
    merging with feature/db
    support for API request type classification
    fractional quantities
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    added getBlocks and getTransactions using PreparedStatement, made Db.getConnection public
    blockchain refactoring
    refactoring of Peer, User, Api, Nxt
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    DbIterator AutoCloseable
    more optimizations, added methods to filter blocks and transactions by account
    finished database transition, no more serialized files support
    encapsulate fields
    cleaned up all JSON API error handling
    more cleanup
    use Longs for id's, a lot of cleanup
    more cleanup
    doGet switch statement refactoring, not done yet
    updated copyright year
    use recipient instead of account everywhere in account properties including for transaction recipient
    rename recipient to account in setAccountProperty
    account properties
    bugs, optimizations, various changes
    imports
    added copyright notice headers
    cleaned up some hardcoded constants
    fixed ParameterParser, some refactoring
    parameter parser cleanup
    tag leaseBalance with CREATE_TRANSACTION
    Unit tests - leasing
    minor cleanup
    no more Longs
    merging with feature/db
    support for API request type classification
    better error message
    added leaseBalance http API, enable transparent forging 6 on testnet at block 73000
    updated copyright year
    Add isTransactionEvent to JSON response
    Account ledger review
    code review, added TODOs, various minor changes
    Add timestamp to ledger entry
    Account ledger support
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    added getAccountAssetCount, getAliasCount, getDGSGoodsCount, getDGSGoodsPurchaseCount, getDGSPurchaseCount APIs
    added includeCounts option to getAssets APIs
    getAccountBlockCount API
    Hardfork coming - commit and update to 1.7.4
    updated copyright year
    refactoring, use byte[][] instead of serializing encrypted data, store recipient keys in issuer data field
    minor, imports
    error handling, updated changelog
    APIs that need a write lock should never be allowed to obtain a read lock first
    added copyright notice headers
    JavaDoc
    use prunableAttachmentJSON parameter in broadcastTransaction, add prunableAttachmentJSON in signTransaction and getTransactionBytes response, Nxt.newTransactionBuilder(bytes,prunableAttachmentJSON)
    do not overwrite pruunables when parsing from json
    verifyPrunableMessage API
    made compression of encrypted messages optional
    bugs
    more cleanup
    cleanup
    prunable encrypted messages
    allow broadcasting bytes of transactions with prunable messages
    removed Transaction.sign and Block.sign methods, replaced TransactionProcessor.parseTransaction with Nxt.newTransactionBuilder
    always add errorCode and errorDesctiption in case of error
    move the call to transaction.validate() inside TransactionProcessor.broadcast(transaction)
    refactoring of new transactions processing to be able to return more specific errors
    more informative error checking
    renamed Transaction.verify to verifySignature and validateAttachment to validate
    parseTransaction, signTransaction and broadcastTransaction also accepts transactions in JSON format instead of bytes
    merging with feature/db
    support for API request type classification
    separate transaction validation from transaction attachment loading
    merged develop
    full hash bugfixes, allow finding transaction by full hash, return full hash in the JSON
    better error handling
    cleanup
    simplify
    verify transaction signature before broadcast
    APITestServlet for manual testing and debugging of all http APIs
    support POST for all requests, and optionally enforce its use for those that require it
    blockchain refactoring
    split Blockchain class
    Block and Transaction interfaces, not finished
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    don't blacklist peers when validation fails because of a not yet enabled feature
    fixed validation, NxtException, partial undo support
    more API cleanup, removed extra conversion to/from ByteBuffer
    cleaned up all JSON API error handling
    also clear Assets and Orders on rescan, some API refactoring in progress
    finished doGet and doPost switch refactoring
    doGet switch statement refactoring, not done yet
    NXT-PLUS in a single commit
    NXT-PLUS in a single commit
    updated copyright year
    error handling on empty search query, includeCounts in searchDGSGoods also default false
    added copyright notice headers
    improved search by tags
    fixed tag search
    java 8 lambdas
    fixed ParameterParser, some refactoring
    parameter parser cleanup
    DGS refactoring, moving static methods
    peer handling optimizations, some refactoring, moved FilteringIterator.Filter to nxt.util.Filter
    added getDGSGoodsPurchases API to retrieve purchases for a specific goodsId, optionally those with public feedbacks only;
    show purchase counts in all Goods JSON, unless includeCounts=false
    added a separate tag parameter to searchDGSGoods
    implemented full text search using the H2 lucene search, added searchAssets and searchDGSGoods APIs
    allow hiding delisted goods in getDGSGoods
    no more Longs
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    DbIterator, offset and limit pagination
    always exclude delisted goods
    merging with feature/db
    support for API request type classification
    fixed paging, filter by completed purchases
    digital goods in database
    apply inStockOnly filter to seller goods too
    bugs
    reverse sorting of purchases, allow filtering goods by availability, pagination
    fix pagination of seller goods
    return all goods sorted most recent first, and allow specifying index range
    DGS API
    updated copyright year
    the debug APIs also don't need up to date blockchain
    APIs that need a write lock should never be allowed to obtain a read lock first
    added copyright notice headers
    fixed some IntelliJ inspections
    moved shutdown to a separate API
    also verify checkpoints when doing a scan with validation
    same block and transaction validation on push and validating rescan, added rescan after shutdown option
    always add errorCode and errorDesctiption in case of error
    minor
    do not require admin password when API server listens on 127.0.0.1 only
    Debug requests and DbShellServlet are always public and password protected. Removed nxt.enableDebugAPI
    Added nxt.disableAdminPassword to disable password protection
    save scan status in database to continue rescan until successfully completed
    moved control of starting and stopping blockchain download outside of the scan method
    only do caching for some api calls
    add asset names and decimals to asset trades and transfers, use thread local caching by starting a db transaction for each api request unless disabled for specific requests
    require POST for blockchain modification requests
    also accept numBlocks as Scan parameter
    use versioned table for unconfirmed transactions
    measure rescan time
    added validate option to Scan request
    added Debug API requests for triggering rescan, reset, and rollback
    updated copyright year
    getExpectedTransactions API, accept multivalue account parameter in getUnconfirmedTransactions APIs
    added copyright notice headers
    no more Longs
    also support RS accounts
    DbIterator, offset and limit pagination
    merging with feature/db
    support for API request type classification
    minor
    getUnconfirmedTransactions API
    0.8.13 changelog
    NQT
    optionally filter unconfirmed transactions by account
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    blockchain refactoring
    split Blockchain class
    refactoring of Peer, User, Api, Nxt
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    encapsulate fields
    cleaned up all JSON API error handling
    more cleanup
    doGet switch statement refactoring, not done yet
    updated copyright year
    correct insufficient fees
    Merged source updates
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    reject some peer requests and don't process transactions while blockchain download is in progress
    added copyright notice headers
    expose includeExpiredPrunable flag in getBlockchainStatus and getState
    MAX_PRUNABLE_LIFETIME should be Integer.MAX_VALUE when pruning is not enabled
    MAX_PRUNABLE_LIFETIME should be Integer.MAX_VALUE when pruning is not enabled
    prunable lifetime in getBlockchainStatus
    save scan status in database to continue rescan until successfully completed
    minor refactoring
    allow time manipulations for testing, and test forging
    removed isDownloading because it can often be wrong
    added BlockchainProcessor.isDownloading(), do not accept unconfirmed transactions if isDownloading
    merging with feature/db
    support for API request type classification
    also show application in getBlockchainStatus
    don't run generate while scanning
    only one refund and one feedback allowed per purchase
    minor
    getBlockchainStatus API request
    updated copyright year
    added copyright notice headers
    fixed javadoc
    assetId -> holdingId in VS & 2PT, min balance model, referential integrity contstraint fix for poll, createPoll refactoring with ParameterParser, better poll validation
    use signed bytes for min/max minting difficulty to allow values 1 to 255
    Javadoc update
    Add counter to get minting target reply
    Javadoc update
    variable fees for currency issuance
    allow currency to be both reservable and mintable, fix initial supply (pre-mine) handling
    added currency decimals, optionally include currency name and decimals in getCurrencyTransfers and getExchanges
    Change currency type from byte to int for allow for future expansion of additional capabilities
    1. IssueCurrency client side dialog
    2. Implement controllable currency type - currency which can only be transferred to/from issuer and only issuer can publish exchange offer
    Implement claimable, currency can be claimed only when it's active and not exchangeable. If we let currency become both exchangeable and claimable users can game the exchange rate and use which is lower. Adapt Javadoc accordingly.
    Javadoc work in progress
    1. Increase units per mint to 0.01% of total supply (see Constants)
    2. ApplyAttachment() no longer depends on CurrencyType in preparation for adding currency capabilities
    1. Separate TransactionType MonetarySystem into a separate class to reduce merging problems
    2. Reduce dependency on CurrencyType in preparation for making it an enum set
    Implement additional hashing algorithms for minting
    Currency Reserve unit tests and fixes to the crowd funding system
    Implement the exchanges table and getAllExchanges API
    Unit test uses getAllExchanges API
    Add algorithm field to currency
    Convert Long to long in Currency and Exchange
    Simplify currency transfer, add additional APIS, align mint data types across classes
    More work on APIs
    fix currency issuance problems
    Monetary System Http APIs - part 1
    Hardfork coming - commit and update to 1.7.4
    updated copyright year
    added copyright notice headers
    also include the prefix search APIs in APITag.SEARCH
    added getAliasesLike and searchAccounts APIs, drop and recreate search indexes on full rescan
    updated copyright year
    added copyright notice headers
    fixed javadoc
    do not allow retrieving currency by code except in getCurrency API
    currency APIs can accept either currency id or currency code
    Exchange offer validations and naming change
    Javadoc work in progress
    More work on APIs
    updated copyright year
    made maximum allowed number of forgers and shufflers configurable
    detectMimeType API
    updated copyright year
    added requestType properties to getConstants
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    added copyright notice headers
    no more Longs
    added LongConvert tool
    cleanup
    merging with feature/db
    support for API request type classification
    added rsConvert API request
    added rsConvert API request
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    showExpectedCancellations in getAskOrders and getBidOrders
    added copyright notice headers
    no more Longs
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    DbIterator, offset and limit pagination
    merging with feature/db
    support for API request type classification
    added getAskOrders and getBidOrders
    fractional quantities
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    avoid null pointers
    Added "limit" to "getAskOrderIds" and "getBidOrderIds".
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    merged lastBytes fix from 0.5.12
    fixed transaction hash validation
    purge expired hashes in block.apply
    Added "getAccount".
    Improved "getAskOrderIds", "getBidOrderIds".
    Enabled "getAsset", "getAssetIds".
    return unmodifiable maps
    fixed transaction hash validation
    Added "getAccount".
    Improved "getAskOrderIds", "getBidOrderIds".
    Enabled "getAsset", "getAssetIds".
    encapsulate fields
    cleaned up all JSON API error handling
    use Longs for id's, a lot of cleanup
    doGet switch statement refactoring, not done yet
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    added includeCounts option to getAssets APIs
    getAccountBlockCount API
    updated copyright year
    added copyright notice headers
    fixed ParameterParser, some refactoring
    parameter parser cleanup
    added completed parameter to getDGSGoodsPurchases, getDGSGoodsPurchaseCount, getDGSPurchaseCount, getDGSPurchases, to allow querying for completed purchases only
    DGS refactoring, moving static methods
    peer handling optimizations, some refactoring, moved FilteringIterator.Filter to nxt.util.Filter
    added withPublicFeedbacksOnly parameter to getDGSPurchases API
    no more Longs
    FilteringIterator
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    DbIterator, offset and limit pagination
    merging with feature/db
    support for API request type classification
    fixed paging, filter by completed purchases
    reverse sorting of purchases, allow filtering goods by availability, pagination
    DGS API
    updated copyright year
    allow filtering by timestamp
    added copyright notice headers
    added includeFinished to getPolls
    removed includeVoters parameters from getPoll and getPolls, changed vote json format in getPollVotes
    minor
    fixed ParameterParser, some refactoring
    todo added
    close DbIterator
    ParameterParser.getBoolean for includeVoters
    GetAccountPolls -> GetPolls (& isMandatory parameter for getAccount method of GetPolls)
    formatting
    db issues fixes, includeVoters parameter in VS Http API, phasing transactions commit/rollback fixes
    voting constants moved to Constants, getAccounPolls API call, optional account parameter has been added to getPollIds
    minor typos
    updated copyright year
    Use cached thread pool for event listeners
    Code review
    Account ledger support
    do not use streams
    Hold database events until transaction committed
    added copyright notice headers
    fixed IntelliJ inspections, replace some for loops with Iterable.forEach
    do not use streams where unlikely to be of performance benefit
    Add NEW_PEER and REMOVE peer events
    GetInboundPeers API
    use host only as peer identifier, not host with port
    imports
    EventRegister and EventWait API
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    added getPollVote and getPhasingPollVote APIs
    updated copyright year
    default to false for almost all includeXXX optional API parameters
    added copyright notice headers
    optimized getAllExchanges and getAllTrades to take advantage of ordering by height
    peer handling optimizations, some refactoring, moved FilteringIterator.Filter to nxt.util.Filter
    added includeAssetInfo parameter to getTrades, getAllTrades, getAssetTransfers;
    added includeCounts parameter to getState;
    analyze tables every 5000 instead of 1440 blocks
    add asset names and decimals to asset trades and transfers, use thread local caching by starting a db transaction for each api request unless disabled for specific requests
    include asset names in getTrades and getAllTrades
    FilteringIterator
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    DbIterator, offset and limit pagination
    merging with feature/db
    support for API request type classification
    trades in database
    DGS API
    fractional quantities
    JSON representation is now use case specific, different for http API and peer to peer communication, and no longer part of the Block and Transaction APIs;
    define JSON represenations for http API in a signle place for consistency;
    always return amounts in both NXT and NQT, the amounts in NXT represented in the JSON as Strings
    NQT
    cleanup
    allow non-unique asset names;
    added GetAssetsByName API request
    Add getAllTrades(timestamp) API call.
    
    This call returned all trades (regardless of asset) executed since the specified timestamp.
    
    For this call it was necessary to add assetId and timeStamp information to trade objects in memory.
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    minor cleanup
    added copyright notice headers
    replace some Convert methods with java 8 ones
    no more Longs
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    DbIterator, offset and limit pagination
    merging with feature/db
    support for API request type classification
    orders in database
    fractional quantities
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    validation and debugging
    more API cleanup, removed extra conversion to/from ByteBuffer
    encapsulate fields
    cleaned up all JSON API error handling
    use Longs for id's, a lot of cleanup
    doGet switch statement refactoring, not done yet
    updated copyright year
    added copyright notice headers
    fixed ParameterParser, some refactoring
    parameter parser cleanup
    no more Longs
    merging with feature/db
    transaction attachments refactoring
    support for API request type classification
    removed NXT and INT JSON properties, removed support for NXT and INT http parameters, enabled running on main net too
    fractional quantities
    NQT
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    moved constants to a separate class so that custom properties can be used to set them
    fix create unsigned transaction bugs
    fix create unsigned transaction bugs
    prepare transaction bytes ready for signing if public key is supplied instead of secret phrase
    Added guid for transactions.
    prepare transaction bytes ready for signing if public key is supplied instead of secret phrase
    new transaction timestamp is always current time, no need to supply as parameter
    support POST for all requests, and optionally enforce its use for those that require it
    blockchain refactoring
    split Blockchain class
    Block and Transaction interfaces, not finished
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    enforce deadline less than 1440 for new transactions
    enforce deadline less than 1440 for new transactions
    don't blacklist peers when validation fails because of a not yet enabled feature
    fixed validation, NxtException, partial undo support
    cleaned up all JSON API error handling
    also clear Assets and Orders on rescan, some API refactoring in progress
    use Longs for id's, a lot of cleanup
    more cleanup
    transaction type refactoring
    transaction type refactoring
    finished doGet and doPost switch refactoring
    doGet switch statement refactoring, not done yet
    updated copyright year
    added copyright notice headers
    added by-transaction voting model (linked transactions)
    added getPollVote and getPhasingPollVote APIs
    removed includeVoters from getPhasingPoll and getPhasingPolls, added getPhasingPollVotes API
    updated copyright year
    added copyright notice headers
    minor
    Implemented "Alias Delete" transaction type.
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    replace some Convert methods with java 8 ones
    no more Longs
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    DbIterator, offset and limit pagination
    merging with feature/db
    support for API request type classification
    fractional quantities
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    avoid null pointers
    Added "limit" to "getAskOrderIds" and "getBidOrderIds".
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    merged lastBytes fix from 0.5.12
    fixed transaction hash validation
    purge expired hashes in block.apply
    Added "getAccount".
    Improved "getAskOrderIds", "getBidOrderIds".
    Enabled "getAsset", "getAssetIds".
    return unmodifiable maps
    fixed transaction hash validation
    Added "getAccount".
    Improved "getAskOrderIds", "getBidOrderIds".
    Enabled "getAsset", "getAssetIds".
    encapsulate fields
    cleaned up all JSON API error handling
    use Longs for id's, a lot of cleanup
    doGet switch statement refactoring, not done yet
    updated copyright year
    default to false for almost all includeXXX optional API parameters
    added copyright notice headers
    added getExchangesByOffer
    updated copyright year
    default to false for almost all includeXXX optional API parameters
    performance optimization, avoid querying database tables when only accountId or other id is needed
    allow filtering by timestamp
    added copyright notice headers
    do not allow retrieving currency by code except in getCurrency API
    use db caching in getCurrencyTransfers and getExchanges APIs
    currency APIs can accept either currency id or currency code
    added currency decimals, optionally include currency name and decimals in getCurrencyTransfers and getExchanges
    make sure DbIterators are closed
    Implement CurrencyTransfer, change the term "money" to "currency" where applicable
    More exchange tests and APIs
    updated copyright year
    error handling on empty search query, includeCounts in searchDGSGoods also default false
    default to false for almost all includeXXX optional API parameters
    added copyright notice headers
    search currencies by code, name, or description, using lucene, not tested
    implemented full text search using the H2 lucene search, added searchAssets and searchDGSGoods APIs
    added includeCounts option to getAssets APIs
    DbIterator, offset and limit pagination
    merging with feature/db
    support for API request type classification
    undo of leasing should trigger a rescan
    DGS http API, not yet finished
    added getAssets and getAllAssets APIs
    JSON representation is now use case specific, different for http API and peer to peer communication, and no longer part of the Block and Transaction APIs;
    define JSON represenations for http API in a signle place for consistency;
    always return amounts in both NXT and NQT, the amounts in NXT represented in the JSON as Strings
    also return assetId
    allow non-unique asset names;
    added GetAssetsByName API request
    global publicKey cache
    updated copyright year
    bugs, optimizations, various changes
    default to false for almost all includeXXX optional API parameters
    keep account lease info in a separate table
    added copyright notice headers
    Auto-fill phasing parameters when mandatory approval is enabled
    Fixed duplicate PhasingOnly object in DB cache
    include effectiveBalance in lessors info
    added includeEffectiveBalance parameter to getAccount and getBalance APIs
    moved account info to a separate table, removed unused message pattern code
    replace some Convert methods with java 8 ones
    Improve account  leasing messages and account details - account leasing dialog
    add currency name, code, and decimals to AccountCurrency JSON, and asset name and decimals to AccountAsset JSON
    added getAccountCurrencies API, added optional includeLessors, includeAssets, includeCurrencies parameters to getAccount
    show message pattern regex in getAccount json
    no more Longs
    added getAssetAccounts API to get all holders of an asset
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    DbIterator, offset and limit pagination
    DbKey, DbKeyFactory, removed Link tables
    synchronization on Account no longer needed
    refactoring, guaranteed balances in database, not finished
    cleanup
    also show leasing accounts in RS format
    accounts in database, not finished
    merging with feature/db
    support for API request type classification
    Refactored asset and currency balance variables.
    include guaranteedBalanceNQT(1440) in getAccount JSON
    finish Reed-Solomon format core support
    add leasing info to the account JSON
    setAccountInfo
    removed NXT and INT JSON properties, removed support for NXT and INT http parameters, enabled running on main net too
    asset balances also returned in INT too, changelog
    fractional quantities
    JSON representation is now use case specific, different for http API and peer to peer communication, and no longer part of the Block and Transaction APIs;
    define JSON represenations for http API in a signle place for consistency;
    always return amounts in both NXT and NQT, the amounts in NXT represented in the JSON as Strings
    NQT
    also return unconfirmedBalance
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    also return unconfirmed asset balances
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    merged lastBytes fix from 0.5.12
    fixed transaction hash validation
    purge expired hashes in block.apply
    Added "getAccount".
    Improved "getAskOrderIds", "getBidOrderIds".
    Enabled "getAsset", "getAssetIds".
    return unmodifiable maps
    fixed transaction hash validation
    Added "getAccount".
    Improved "getAskOrderIds", "getBidOrderIds".
    Enabled "getAsset", "getAssetIds".
    updated copyright year
    formatting
    limit max number of simultaneous forgers per node
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    added copyright notice headers
    minor fixes
    merging with feature/db
    support for API request type classification
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    support POST for all requests, and optionally enforce its use for those that require it
    refactoring of Peer, User, Api, Nxt
    drop support for old getMilestoneBlockIds protocol
    enforce account existence before creating a generator for it
    startForging and stopForging API
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    cleaned up all JSON API error handling
    doGet switch statement refactoring, not done yet
    updated copyright year
    added copyright notice headers
    merging with feature/db
    support for API request type classification
    DGS API
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    support limits on duplicates count
    added requestType properties to getConstants
    minor cleanup
    Issue 312 (QRCode scanning bug): replaced qrcode and jsqrcode js libraries with ZXing core and javase java libraries; added EncodeQRCode and DecodeQRCode APIs
    updated copyright year
    added requestType properties to getConstants
    minor cleanup
    Issue 312 (QRCode scanning bug): replaced qrcode and jsqrcode js libraries with ZXing core and javase java libraries; added EncodeQRCode and DecodeQRCode APIs
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    allow deferred attachment encryption for full offline signing and encryption
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    added copyright notice headers
    fixed bad refactoring
    made compression of encrypted messages optional
    fixed ParameterParser, some refactoring
    parameter parser cleanup
    no more Longs
    merging with feature/db
    use Arbitrary Message type for encrypted messages too, better parameter names
    transaction attachments refactoring
    support for API request type classification
    DGS bugs
    also accept pre-encrypted notes and goods, for client-side signing
    DGS now uses AES; finished DGS API; added Account.encryptTo and Account.decryptFrom; added DGS event listeners
    allow disabling specific APIs
    updated copyright year
    fixed test servlet file upload form submission
    updated wiki links
    bugs
    changed links to wiki API to The_Nxt_API from Nxt_API in APITestServlet.java
    changed links to wiki API to The_Nxt_API from Nxt_API in APITestServlet.java
    Test page simplification:
    1. Replace escaped double quotes with single quotes
    2. Add new lines to enable readable view source in the browser
    1. Enhance the test page to submit upload requests normally so that the response is written to the page
    2. Make the upload file size configurable, defaults to the max tagged data, log exception and return an error in case its too big
    added copyright notice headers
    add links to the wiki documentation
    allow use of file upload in the /test forms, ats.js needs to be fixed to handle multipart forms too
    allow pre-filling parameter values in the /test forms
    do not require admin password when API server listens on 127.0.0.1 only
    refactoring allowedBotHosts logic
    minor
    Added toggle button to API test servlet for showing only non-empty form fields for ease of work with complex API calls
    Replaced Show Open/Show All text link navigation in API test servlet with toggle button
    Custom API call selections via UI and GET param (requestTypes) for API test servlet, fixed layout bug
    variable fees for currency issuance
    minor fixes while reviewing the code
    changed widths
    Added ability to reset search by allowing empty search field search leading to display of all entries
    Added indicator for active element for Show-Open/Show-All navi
    Changed GET request URL beeing build together statically to avoid side effects
    Changed form field width to 100% to make better use of space
    Minor changes
    Added navigation menu to choose between showing only open and all API call tabs
    Added case insensitive search functionality
    Show collapsible open by default for single API call urls (with requestType as GET parameter), added button for open single API call url in new window
    Added left side pills navigation, adjustments for smaller screens (API form goes to full collapsible width, change open/close behaviour for collapsibles
    Replaced usage of XMLHttpRequest in JS submitForm() function for easier access to request URL and more flexible error handling
    fix currency issuance problems
    DbShellServlet
    added Debug API requests for triggering rescan, reset, and rollback
    Rename jquery-x.js to jquery.js
    merging with feature/db
    api navigation
    support for API request type classification
    minor css issues
    applied APITestServlet UI improvement patch submitted by Holger Drewes
    treat secretPhrase as password input
    APITestServlet for manual testing and debugging of all http APIs
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    renamed pending to phased/phasing
    renaming
    renaming, database indexes
    GetAccountPendingTransactionIds removed, getAccountPendingTransactionsToApprove implemented, getAssetPendingTransactions implemented
    various fixes and improvements
    API calls renaming
    getPendingTransactionVotesCount, todos fixed
    reviewed the VS and phasing code, added TODOs
    GetAccountPendingTransactionToSignIds implementation
    whitelists/blacklists in another table, checks for minbalance/lists
    updated copyright year
    added copyright notice headers
    fixed javadoc
    do not allow retrieving currency by code except in getCurrency API
    Javadoc fix
    implement crowdfunding distribution of non-claimable currency as paying NXT to issuer instead of locking
    currency APIs can accept either currency id or currency code
    Implement claimable, currency can be claimed only when it's active and not exchangeable. If we let currency become both exchangeable and claimable users can game the exchange rate and use which is lower. Adapt Javadoc accordingly.
    Javadoc work in progress
    Currency Reserve unit tests and fixes to the crowd funding system
    More work on APIs
    Monetary System Http APIs - part 1
    updated copyright year
    default to false for almost all includeXXX optional API parameters
    added copyright notice headers
    added includeData parameter to the getTaggedData APIs
    added channel field to tagged data
    getTaggedData, getAccountTaggedData, searchTaggedData APIs, bugfixes
    updated copyright year
    added includeAssetInfo and includeCurrencyInfo parameters to getAccountAssets, getAccountCurrencies, getAccountExchangeRequests, getExpectedAssetTransfers, getExpectedCurrencyTransfers
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    add currency name, code, and decimals to AccountCurrency JSON, and asset name and decimals to AccountAsset JSON
    added getAccountAssets and getAssetAccountCount APIs, each also taking a height parameter
    updated copyright year
    minor cleanup
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    1. Enhance the test page to submit upload requests normally so that the response is written to the page
    2. Make the upload file size configurable, defaults to the max tagged data, log exception and return an error in case its too big
    Implement file token APIs
    added copyright notice headers
    merging with feature/db
    support for API request type classification
    JSON representation is now use case specific, different for http API and peer to peer communication, and no longer part of the Block and Transaction APIs;
    define JSON represenations for http API in a signle place for consistency;
    always return amounts in both NXT and NQT, the amounts in NXT represented in the JSON as Strings
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    refactoring for better javadoc
    token processing
    made classes public so that javadoc can be used to hold http api documentation
    token processing
    made classes public so that javadoc can be used to hold http api documentation
    cleaned up all JSON API error handling
    doGet switch statement refactoring, not done yet
    updated copyright year
    added requestType properties to getConstants
    minor
    added hash API
    Reflect forging status changes immediately after the start/stop dialog is completed
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    added copyright notice headers
    allow getForging and stopForging access with admin password instead of secret phrase too
    merging with feature/db
    support for API request type classification
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    support POST for all requests, and optionally enforce its use for those that require it
    refactoring of Peer, User, Api, Nxt
    startForging and stopForging API
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    cleaned up all JSON API error handling
    doGet switch statement refactoring, not done yet
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    added canDeleteCurrency API
    do not allow retrieving currency by code except in getCurrency API
    added getAccountCurrencyCount and getCurrencyAccountCount APIs
    updated copyright year
    allow forcing retrieval of pruned data for some APIs
    added copyright notice headers
    made compression of encrypted messages optional
    null pointer
    getPrunableMessage, getPrunableMessages APIs
    updated copyright year
    added copyright notice headers
    Debug requests and DbShellServlet are always public and password protected. Removed nxt.enableDebugAPI
    Added nxt.disableAdminPassword to disable password protection
    refactoring allowedBotHosts logic
    renaming
    multiple database support
    minor fixes
    DbShellServlet
    updated copyright year
    added copyright notice headers
    no more Longs
    merging with feature/db
    support for API request type classification
    DGS API
    DGS http API, not yet finished
    updated copyright year
    getLastTrades and getLastExchanges APIs
    added copyright notice headers
    added getExchangesByOffer
    replaced getAllOffers with getBuyOffers and getSellOffers, added getOffer, offer queries optimizations
    updated copyright year
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    added copyright notice headers
    allow time manipulations for testing, and test forging
    merging with feature/db
    support for API request type classification
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    refactoring of Peer, User, Api, Nxt
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    cleaned up all JSON API error handling
    doGet switch statement refactoring, not done yet
    updated copyright year
    added copyright notice headers
    fixed javadoc
    do not allow retrieving currency by code except in getCurrency API
    allow currency to be both reservable and mintable, fix initial supply (pre-mine) handling
    currency APIs can accept either currency id or currency code
    Implement claimable, currency can be claimed only when it's active and not exchangeable. If we let currency become both exchangeable and claimable users can game the exchange rate and use which is lower. Adapt Javadoc accordingly.
    Javadoc work in progress
    Currency Reserve unit tests and fixes to the crowd funding system
    More work on APIs
    Monetary System Http APIs - part 1
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    minor cleanup
    added copyright notice headers
    no more Longs
    added getAccountCurrentAskOrders and getAccountCurrentBidOrders
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    DbIterator, offset and limit pagination
    merging with feature/db
    support for API request type classification
    orders in database
    fractional quantities
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    enforce transaction and attachment validation
    more API cleanup, removed extra conversion to/from ByteBuffer
    encapsulate fields
    cleaned up all JSON API error handling
    use Longs for id's, a lot of cleanup
    doGet switch statement refactoring, not done yet
    updated copyright year
    added copyright notice headers
    allow use of file upload in the /test forms, ats.js needs to be fixed to handle multipart forms too
    added channel field to tagged data
    improved tagged data extending
    extendTaggedData API, versioned prunable data
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    added completed parameter to getDGSGoodsPurchases, getDGSGoodsPurchaseCount, getDGSPurchaseCount, getDGSPurchases, to allow querying for completed purchases only
    DGS refactoring, moving static methods
    added getAccountAssetCount, getAliasCount, getDGSGoodsCount, getDGSGoodsPurchaseCount, getDGSPurchaseCount APIs
    updated copyright year
    added requestType properties to getConstants
    error handling, updated changelog
    code review, added TODOs, various minor changes
    include full transaction json in signTransaction response
    added copyright notice headers
    use prunableAttachmentJSON parameter in broadcastTransaction, add prunableAttachmentJSON in signTransaction and getTransactionBytes response, Nxt.newTransactionBuilder(bytes,prunableAttachmentJSON)
    removed Transaction.sign and Block.sign methods, replaced TransactionProcessor.parseTransaction with Nxt.newTransactionBuilder
    always add errorCode and errorDesctiption in case of error
    made validation of transaction in signTransaction optional
    made validation of transaction in signTransaction optional
    more informative error checking
    renamed Transaction.verify to verifySignature and validateAttachment to validate
    parseTransaction, signTransaction and broadcastTransaction also accepts transactions in JSON format instead of bytes
    merging with feature/db
    support for API request type classification
    separate transaction validation from transaction attachment loading
    also do verify
    signTransaction API
    updated copyright year
    added includeHoldingInfo parameter for all getShuffling APIs except getHoldingShufflings, default false
    made deletion of finished shufflings optional
    more shuffling APIs, database indexes
    added copyright notice headers
    replace some Convert methods with java 8 ones
    DbIterator, offset and limit pagination
    merging with feature/db
    support for API request type classification
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    more API cleanup, removed extra conversion to/from ByteBuffer
    encapsulate fields
    cleaned up all JSON API error handling
    use Longs for id's, a lot of cleanup
    doGet switch statement refactoring, not done yet
    updated copyright year
    added copyright notice headers
    getDGSExpiredPurchases
    fixed ParameterParser, some refactoring
    removed blacklist
    parameter parser cleanup
    DGS refactoring, moving static methods
    no more Longs
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    DbIterator, offset and limit pagination
    merging with feature/db
    support for API request type classification
    reverse sorting of purchases, allow filtering goods by availability, pagination
    DGS API
    updated copyright year
    error handling on empty search query, includeCounts in searchDGSGoods also default false
    default to false for almost all includeXXX optional API parameters
    added copyright notice headers
    implemented full text search using the H2 lucene search, added searchAssets and searchDGSGoods APIs
    added includeCounts option to getAssets APIs
    DbIterator, offset and limit pagination
    merging with feature/db
    support for API request type classification
    undo of leasing should trigger a rescan
    DGS http API, not yet finished
    added getAssets and getAllAssets APIs
    JSON representation is now use case specific, different for http API and peer to peer communication, and no longer part of the Block and Transaction APIs;
    define JSON represenations for http API in a signle place for consistency;
    always return amounts in both NXT and NQT, the amounts in NXT represented in the JSON as Strings
    also return assetId
    allow non-unique asset names;
    added GetAssetsByName API request
    updated copyright year
    added copyright notice headers
    forging bugfixes and improvements
    require that the timestamp parameter in getECBlock is not less than last block timestamp - 15
    added getECBlock API
    updated copyright year
    default to false for almost all includeXXX optional API parameters
    added copyright notice headers
    added includeData parameter to the getTaggedData APIs
    improved search by tags
    fixed tag search
    added channel field to tagged data
    getTaggedData, getAccountTaggedData, searchTaggedData APIs, bugfixes
    updated copyright year
    added copyright notice headers
    cleaned up some hardcoded constants
    added numberOfConfirmations parameter to getAccountTransactions APIs
    merging with feature/db
    support for API request type classification
    fractional quantities
    NQT
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    refactoring of Peer, User, Api, Nxt
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    cleaned up all JSON API error handling
    use Longs for id's, a lot of cleanup
    doGet switch statement refactoring, not done yet
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    java 8 lambdas
    peer handling optimizations, some refactoring, moved FilteringIterator.Filter to nxt.util.Filter
    no more Longs
    FilteringIterator
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    DbIterator, offset and limit pagination
    merging with feature/db
    support for API request type classification
    removed getAssetsByName API;
    getAssetsByIssuer now accepts multivalued "account" parameter and returns a list of lists of assets
    refactoring, support alias and aliasName parameters
    cleaned up the Aliases API
    alias transfer - alpha
    fractional quantities
    JSON representation is now use case specific, different for http API and peer to peer communication, and no longer part of the Block and Transaction APIs;
    define JSON represenations for http API in a signle place for consistency;
    always return amounts in both NXT and NQT, the amounts in NXT represented in the JSON as Strings
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    refactoring of Peer, User, Api, Nxt
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    more API cleanup, removed extra conversion to/from ByteBuffer
    encapsulate fields
    cleaned up all JSON API error handling
    more cleanup
    use Longs for id's, a lot of cleanup
    doGet switch statement refactoring, not done yet
    updated copyright year
    use recipient instead of account everywhere in account properties including for transaction recipient
    use both account and setter to identify property for deletion
    account properties
    added copyright notice headers
    moved account info to a separate table, removed unused message pattern code
    removed pre-MS checks and logic where no longer needed; added a checksum at MS block
    disable message pattern feature
    merged in the server-side version of the merchant account message pattern feature, may need more testing
    merging with feature/db
    support for API request type classification
    setAccountInfo
    enabled property for requestTypes, apiTags in getConstants
    different error for disabled APIs, rename
    allow disabling specific APIs
    updated copyright year
    detectMimeType API
    added getLinkedPhasedTransactions API
    added getReferencingTransactions API
    added retrievePrunedTransaction API
    added getAvailableToBuy and getAvailableToSell APIs
    getExpectedAssetDeletes API
    keep track of asset deletes in asset_delete table, added getAssetDeletes API
    specific error codes for each startShuffler failure case
    account properties
    bugs, optimizations, various changes
    shuffler http APIs
    getExpectedTransactions API, accept multivalue account parameter in getUnconfirmedTransactions APIs
    more shuffling APIs, database indexes
    no need for separate ShufflingDistribute transaction
    removed deprecated getAccountTransactions and getAccountTransactionIds APIs
    added requestType properties to getConstants
    Issue 312 (QRCode scanning bug): replaced qrcode and jsqrcode js libraries with ZXing core and javase java libraries; added EncodeQRCode and DecodeQRCode APIs
    Rename DeleteAsset to DeleteAssetShares
    Add RetrievePrunedData API
    getTaggedDataExtendTransactions API
    Asset delete support
    GetChatList and GetChatMessages API
    getLastTrades and getLastExchanges APIs
    Account ledger support
    added hash API
    added getExpectedOrderCancellations, optional sort by price, account or asset parameters optional for getExpected requests
    added getAccountExpectedExchangeRequests, getExpectedAssetTransfers, getExpectedBuyOffers, getExpectedSellOffers, getExpectedCurrencyTransfers
    Virtual exchange
    added getExpectedAsk/BidOrders APIs
    use explicit read-write lock for blockchain
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    1. Enhance the test page to submit upload requests normally so that the response is written to the page
    2. Make the upload file size configurable, defaults to the max tagged data, log exception and return an error in case its too big
    Implement file token APIs
    Improve JSON string encoding performance
    added copyright notice headers
    added getBlockchainTransactions API, deprecated getAccountTransactions and getAccountTransactionIds
    fixed IntelliJ inspections, replace some for loops with Iterable.forEach
    allow use of file upload in the /test forms, ats.js needs to be fixed to handle multipart forms too
    GetInboundPeers API
    Download tagged data transaction
    added hexConvert utility
    added channel field to tagged data
    renamed lostTransactions to waitingTransactions, undo UnconfirmedTransaction.isNotCurrentlyValid and use a limit on arrival timestamp instead
    fixed processing of unconfirmed transactions, added getAllBroadcasted and getAllLostTransactions debug APIs
    extendTaggedData API, versioned prunable data
    added rebroadcastUnconfirmedTransactions debug API
    getAllTaggedData
    getDataTags, getDataTagCount, getDataTagsLike, verifyTaggedData APIs
    SetLogging API
    EventRegister and EventWait API
    getTaggedData, getAccountTaggedData, searchTaggedData APIs, bugfixes
    uploadTaggedData API
    allow limiting unconfirmed transaction pool size
    verifyPrunableMessage API
    prunable message count in getState, getAllPrunableMessages API
    trimDerivedTables debug API
    getPrunableMessage, getPrunableMessages APIs
    renamed pending to phased/phasing
    getDGSExpiredPurchases
    reduced default nxt.maxRollback, added nxt.trimFrequency
    Http API: GetPhasingOnlyControl/SetPhasingOnlyControl
    First simple unit test - set and then get
    added getAliasesLike and searchAccounts APIs, drop and recreate search indexes on full rescan
    added getDGSTagsLike API
    added getAccountPendingTransactionCount
    GetLog and GetStackTraces API
    added getOrderTrades, improved default sorting in non-versioned tables
    moved shutdown to a separate API
    replaced nxt.dumpPeerVersion with dumpPeers API
    added getPollVote and getPhasingPollVote APIs
    removed includeVoters from getPhasingPoll and getPhasingPolls, added getPhasingPollVotes API
    limit number of records returned to nxt.maxAPIRecords unless the admin password is provided or is disabled
    added searchPolls API
    added phasing_poll_result table
    added getPhasingPolls API, renamed getPhasingVotes to getPhasingPoll
    Intermidiate Work on GetPlugins
    renaming
    deleted getPollIds
    GetCurrencyPendingTransactions
    GetAccountPendingTransactionIds removed, getAccountPendingTransactionsToApprove implemented, getAssetPendingTransactions implemented
    GetAccountPendingTransaction, finished field added back to PendingTransactionPoll, TransactionProcessocImpl condition fix, PendingTransactionPoll.getIdsByWhitelistedSigner fix
    allow getForging and stopForging access with admin password instead of secret phrase too
    GetPendingTransactionVotesCount -> GetPendingTransactionVotes, countVotes method
    GetAccountPolls -> GetPolls (& isMandatory parameter for getAccount method of GetPolls)
    API calls renaming
    AddPeer and BlacklistPeer API calls
    minor
    do not require admin password when API server listens on 127.0.0.1 only
    removed pre-MS checks and logic where no longer needed; added a checksum at MS block
    Debug requests and DbShellServlet are always public and password protected. Removed nxt.enableDebugAPI
    Added nxt.disableAdminPassword to disable password protection
    Added password protection functionality to be used for administrative API requests. A single password is stored in nxt.adminPassword. All protected API requests require "adminPassword" parameter to match nxt.adminPassword.
    refactoring allowedBotHosts logic
    Merged in rkfg/nxt/master (pull request #25)
    
    Added IP ranges support for API access.
    Added IP ranges support for API access.
    added getExchangesByOffer
    added canDeleteCurrency API
    Show executed exchanges in the Currency Buy/Sell properties panel
    Get exchange requests
    getPendingTransactionVotesCount, todos fixed
    CastVotePhased API Call added, CastVote glitches fixed, bug with maxHeight fixed
    added getDGSTagCount API, allow getDGSGoodsCount and getDGSPurchaseCount to be used also to get total goods or purchase counts
    added getAccountCurrencyCount and getCurrencyAccountCount APIs
    added getAccountAssetCount, getAliasCount, getDGSGoodsCount, getDGSGoodsPurchaseCount, getDGSPurchaseCount APIs
    added getAccountCurrencies API, added optional includeLessors, includeAssets, includeCurrencies parameters to getAccount
    added getDGSGoodsPurchases API to retrieve purchases for a specific goodsId, optionally those with public feedbacks only;
    show purchase counts in all Goods JSON, unless includeCounts=false
    added tag table and getDGSTags API
    added luceneReindex debug API to force rebuild of the search index
    search currencies by code, name, or description, using lucene, not tested
    implemented full text search using the H2 lucene search, added searchAssets and searchDGSGoods APIs
    GetAccountPendingTransactionToSignIds implementation
    added getAccountAssets and getAssetAccountCount APIs, each also taking a height parameter
    Implementing remaining pieces of the 'dividend payment' transaction type.
    GetAccountPendingTransactionIds
    getAccountBlockCount API
    getPollVotes API Call
    added a separate DeleteCurrency transaction and API call
    voting constants moved to Constants, getAccounPolls API call, optional account parameter has been added to getPollIds
    Implemented "Alias Delete" transaction type.
    More testing and fixing problem in the participant registration code
    Work on APIs and transaction types
    getPollIds / getPollResults methods shown by the servlet
    blockchain reorg issues solved for VS, VS HTTP API switched on
    replaced getAllOffers with getBuyOffers and getSellOffers, added getOffer, offer queries optimizations
    added getBlocks API
    renaming
    multiple database support
    added clearUnconfirmedTransactions API
    report request processing time
    added getECBlock API
    Implement GetCurrencyAccounts API
    only do caching for some api calls
    add asset names and decimals to asset trades and transfers, use thread local caching by starting a db transaction for each api request unless disabled for specific requests
    Implement CurrencyTransfer, change the term "money" to "currency" where applicable
    renamed Transfer to AssetTransfer
    allow historical queries if data still available, added optional height parameter to getAssetAccounts, added getAccountLessors with a height parameter
    Replace CurrencyExchange api with currency buy and sell
    Naming change from *CurrencyBalanceQNT to *CurrencyUnits
    re-organize currency exchange testing
    keep track of asset transfers in a transfer table, added getTransfers API
    cleanup, don't clear non-broadcasted transactions on rescan
    New API to enable miners (minters ?) to determine the minting target per currency and number of units
    Disable VS and Hub Announcement on testnet and removed unfinished code that is not production ready from 1.3. This will cause a testnet reset to block 77341.
    Currency Reserve unit tests and fixes to the crowd funding system
    More exchange tests and APIs
    Implement the exchanges table and getAllExchanges API
    Unit test uses getAllExchanges API
    Add algorithm field to currency
    Convert Long to long in Currency and Exchange
    added getAccountBlocks, with firstIndex/lastIndex pagination, order DESC
    added getAccountCurrentAskOrders and getAccountCurrentBidOrders
    added getAssetAccounts API to get all holders of an asset
    Simplify currency transfer, add additional APIS, align mint data types across classes
    More work on APIs
    Implement isDuplicate fixes and logging improvements
    added LongConvert tool
    DbShellServlet
    added Debug API requests for triggering rescan, reset, and rollback
    DbIterator, offset and limit pagination
    Monetary System Http APIs - part 1
    Poll.getCount method added, GetPollIds http API method removed
    merging with feature/db
    use Arbitrary Message type for encrypted messages too, better parameter names
    transaction attachments refactoring
    use NULL in the db for no-recipient transactions, added GetAccountTransactions, sort by timestamp desc, added fromIndex toIndex parameters
    support for API request type classification
    voting system - pre-final version
    added payment with message transaction type
    added rsConvert API request
    added rsConvert API request
    encrypted message transaction type
    added getBlockId API to get blockId based on height
    removed getAssetsByName API;
    getAssetsByIssuer now accepts multivalued "account" parameter and returns a list of lists of assets
    cleaned up the Aliases API
    alias transfer - http layer fixes
    getUnconfirmedTransactions API
    getBlockchainStatus API request
    DGS bugs
    added getAskOrders and getBidOrders
    DGS now uses AES; finished DGS API; added Account.encryptTo and Account.decryptFrom; added DGS event listeners
    added getAssetsByIssuer API
    DGS API
    more DGS API
    DGS http API, not yet finished
    added getAssets and getAllAssets APIs
    signTransaction API
    use sha256(signature) instead of plain signature for full hash calculation
    added parseTransaction API
    added leaseBalance http API, enable transparent forging 6 on testnet at block 73000
    setAccountInfo
    some cleanup
    fractional quantities
    Add getAllOpenOrders API call
    
    This call returns all open orders currently in memory, regardless of asset.
    allow non-unique asset names;
    added GetAssetsByName API request
    Add getAllTrades(timestamp) API call.
    
    This call returned all trades (regardless of asset) executed since the specified timestamp.
    
    For this call it was necessary to add assetId and timeStamp information to trade objects in memory.
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    Added "findObject".
    Added guid for transactions.
    Added ""getNextBlockGenerators"".
    cosmetic improvements
    minor fixes
    support POST for all requests, and optionally enforce its use for those that require it
    added generateToken API
    added getForging API
    refactoring of Peer, User, Api, Nxt
    embedded jetty
    updated copyright year
    added requestType properties to getConstants
    added fullHashToId API
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    added copyright notice headers
    moved peer networking APIs under APITag.NETWORK
    merging with feature/db
    support for API request type classification
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    refactoring of Peer, User, Api, Nxt
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    cleaned up all JSON API error handling
    doGet switch statement refactoring, not done yet
    updated copyright year
    fixed broken English
    also allow 0 for maxFees and duration parameters
    allow limiting max fees and phasing duration for phasing controlled accounts
    voting models by-hash and by-transaction not allowed for phasing control
    javadoc fix
    bugs, optimizations, various changes
    Http API: GetPhasingOnlyControl/SetPhasingOnlyControl
    First simple unit test - set and then get
    updated copyright year
    added copyright notice headers
    also include the prefix search APIs in APITag.SEARCH
    added getAliasesLike and searchAccounts APIs, drop and recreate search indexes on full rescan
    added getDGSTagsLike API
    updated copyright year
    added copyright notice headers
    replace some Convert methods with java 8 ones
    allow time manipulations for testing, and test forging
    merging with feature/db
    support for API request type classification
    removed obsolete NotYetEnabled checks; keep HubTerminalAnnouncement transactions disabled on mainnet until TF7
    finished getNextBlockGenerators refactoring and optimizations
    reviewed effective balance leasing;
    some getNextBlockGenerators refactoring
    some cleanup
    Added ""getNextBlockGenerators"".
    updated copyright year
    added requestType properties to getConstants
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    added copyright notice headers
    added timestamp and account to the result of generateToken
    merging with feature/db
    support for API request type classification
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    support POST for all requests, and optionally enforce its use for those that require it
    added generateToken API
    GetChatList and GetChatMessages API
    updated copyright year
    the debug APIs also don't need up to date blockchain
    added copyright notice headers
    renamed lostTransactions to waitingTransactions, undo UnconfirmedTransaction.isNotCurrentlyValid and use a limit on arrival timestamp instead
    fixed processing of unconfirmed transactions, added getAllBroadcasted and getAllLostTransactions debug APIs
    updated copyright year
    the debug APIs also don't need up to date blockchain
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    added copyright notice headers
    Fix javadoc for GetLog and GetStackTraces
    fixed phasing finish height validation, cleaned up phasing and voting constants
    GetLog and GetStackTraces API
    updated copyright year
    getExpectedAssetDeletes API
    added includeAssetInfo and includeCurrencyInfo parameters to getAccountAssets, getAccountCurrencies, getAccountExchangeRequests, getExpectedAssetTransfers, getExpectedCurrencyTransfers
    added getExpectedOrderCancellations, optional sort by price, account or asset parameters optional for getExpected requests
    added getAccountExpectedExchangeRequests, getExpectedAssetTransfers, getExpectedBuyOffers, getExpectedSellOffers, getExpectedCurrencyTransfers
    added getExpectedAsk/BidOrders APIs
    added copyright notice headers
    no more Longs
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    DbIterator, offset and limit pagination
    merging with feature/db
    support for API request type classification
    added getAskOrders and getBidOrders
    fractional quantities
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    avoid null pointers
    Added "limit" to "getAskOrderIds" and "getBidOrderIds".
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    merged lastBytes fix from 0.5.12
    fixed transaction hash validation
    purge expired hashes in block.apply
    Added "getAccount".
    Improved "getAskOrderIds", "getBidOrderIds".
    Enabled "getAsset", "getAssetIds".
    return unmodifiable maps
    fixed transaction hash validation
    Added "getAccount".
    Improved "getAskOrderIds", "getBidOrderIds".
    Enabled "getAsset", "getAssetIds".
    encapsulate fields
    cleaned up all JSON API error handling
    use Longs for id's, a lot of cleanup
    doGet switch statement refactoring, not done yet
    updated copyright year
    renamed taggedData to data in getAllTaggedData API result
    default to false for almost all includeXXX optional API parameters
    added copyright notice headers
    added includeData parameter to the getTaggedData APIs
    getAllTaggedData
    getTaggedData, getAccountTaggedData, searchTaggedData APIs, bugfixes
    updated copyright year
    added copyright notice headers
    no more Longs
    merging with feature/db
    support for API request type classification
    DGS API
    DGS http API, not yet finished
    NXT-PLUS in a single commit
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    added getAccountAssets and getAssetAccountCount APIs, each also taking a height parameter
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    avoid error if no offer found in getSellOffers and getBuyOffers
    added availableOnly parameter to getSellOffers and getBuyOffers, to return offers with non-zero supply and limit only
    do not allow retrieving currency by code except in getCurrency API
    currency APIs can accept either currency id or currency code
    replaced getAllOffers with getBuyOffers and getSellOffers, added getOffer, offer queries optimizations
    make sure DbIterators are closed
    More exchange tests and APIs
    updated copyright year
    getLastTrades and getLastExchanges APIs
    added copyright notice headers
    added getExchangesByOffer
    replaced getAllOffers with getBuyOffers and getSellOffers, added getOffer, offer queries optimizations
    updated copyright year
    default to false for almost all includeXXX optional API parameters
    added copyright notice headers
    added includeData parameter to the getTaggedData APIs
    added channel field to tagged data
    getTaggedData, getAccountTaggedData, searchTaggedData APIs, bugfixes
    updated copyright year
    the debug APIs also don't need up to date blockchain
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    added copyright notice headers
    cleanup
    Fix javadoc for GetLog and GetStackTraces
    fixed phasing finish height validation, cleaned up phasing and voting constants
    Add monitor information
    Add lock information to GetStackTraces
    GetLog and GetStackTraces API
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    added getAccountBlocks, with firstIndex/lastIndex pagination, order DESC
    refactoring, guaranteed balances in database, not finished
    merging with feature/db
    support for API request type classification
    fractional quantities
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    added getBlocks and getTransactions using PreparedStatement, made Db.getConnection public
    blockchain refactoring
    refactoring of Peer, User, Api, Nxt
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    DbIterator AutoCloseable
    more optimizations, added methods to filter blocks and transactions by account
    finished database transition, no more serialized files support
    encapsulate fields
    cleaned up all JSON API error handling
    more cleanup
    use Longs for id's, a lot of cleanup
    more cleanup
    doGet switch statement refactoring, not done yet
    updated copyright year
    default to false for almost all includeXXX optional API parameters
    added copyright notice headers
    added getExchangesByOffer
    fixed DebugTrace and VerifyTrace for MS transactions
    Show executed exchanges in the Currency Buy/Sell properties panel
    updated copyright year
    uniform handling of insufficient balance errors
    added copyright notice headers
    fixed ParameterParser, some refactoring
    parameter parser cleanup
    tests for blockchain download, rescan and rollback
    comment parameter no longer used
    no more Longs
    merging with feature/db
    support for API request type classification
    Removed redundant code related to assets.
    removed NXT and INT JSON properties, removed support for NXT and INT http parameters, enabled running on main net too
    fractional quantities
    0.8.13 changelog
    NQT
    added Asset Transfer comment field; verify blocks and transactions on first scan; don't rely on db triggers when deleting multiple blocks
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    moved constants to a separate class so that custom properties can be used to set them
    fix create unsigned transaction bugs
    fix create unsigned transaction bugs
    prepare transaction bytes ready for signing if public key is supplied instead of secret phrase
    Added guid for transactions.
    prepare transaction bytes ready for signing if public key is supplied instead of secret phrase
    new transaction timestamp is always current time, no need to supply as parameter
    support POST for all requests, and optionally enforce its use for those that require it
    blockchain refactoring
    split Blockchain class
    Block and Transaction interfaces, not finished
    refactoring of Peer, User, Api, Nxt
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    enforce deadline less than 1440 for new transactions
    enforce deadline less than 1440 for new transactions
    don't blacklist peers when validation fails because of a not yet enabled feature
    fixed validation, NxtException, partial undo support
    cleaned up all JSON API error handling
    also clear Assets and Orders on rescan, some API refactoring in progress
    use Longs for id's, a lot of cleanup
    more cleanup
    transaction type refactoring
    transaction type refactoring
    finished doGet and doPost switch refactoring
    doGet switch statement refactoring, not done yet
    updated copyright year
    added copyright notice headers
    minor refactoring
    removed includeVoters from getPhasingPoll and getPhasingPolls, added getPhasingPollVotes API
    added phasing_poll_result table
    added getPhasingPolls API, renamed getPhasingVotes to getPhasingPoll
    updated copyright year
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    added copyright notice headers
    fixed IntelliJ inspections, replace some for loops with Iterable.forEach
    do not use streams where unlikely to be of performance benefit
    expose inbound status in Peer json
    GetInboundPeers API
    updated copyright year
    expose upnp found external address in getState, allow overriding upnp timeouts
    bugs, optimizations, various changes
    immediate release of approved phased transactions when possible
    default to false for almost all includeXXX optional API parameters
    made deletion of finished shufflings optional
    shuffling assets
    ExchangeRequest derived object and exchange_request table
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    keep account lease info in a separate table
    includeCounts in getState requires adminPassword, if needed
    added copyright notice headers
    add number of active peers to getState
    added tagged data count to getState
    prunable message count in getState, getAllPrunableMessages API
    renamed pending to phased/phasing
    expose available rollback height in getState
    refactoring, implement voting models as enum
    renaming, database indexes
    various improvements
    add needsAdminPassword in getState
     PendingTransactionPoll.getCount() -> PendingTransactionPoll.getActiveCount()
    GetState - VS & 2PTs info
    various fixes and improvements
    Improve testnet warning to include the peer port and report offline status of the peer
    Improve testnet warning to include the peer port and report offline status of the peer
    save scan status in database to continue rescan until successfully completed
    added peerPort to getState
    minor refactoring
    each download of more than 10 blocks will be verified with other peers trying to find a fork with better difficulty
    include total numbers of Goods, Purchases, and Tags in the getState API, changelog
    minor
    make sure DbIterators are closed
    rename CurrencyBuy and CurrencySell to CurrencyBuyOffer and CurrencySellOffer
    also show separate counts for ask and bid orders
    added includeAssetInfo parameter to getTrades, getAllTrades, getAssetTransfers;
    added includeCounts parameter to getState;
    analyze tables every 5000 instead of 1440 blocks
    fix inserts into values tables, preserve values order
    removed total effective balance from getState
    Implement CurrencyTransfer, change the term "money" to "currency" where applicable
    renamed Transfer to AssetTransfer
    Exchange tests and todo comment
    show number of asset transfers in getState and in asset json
    allow time manipulations for testing, and test forging
    removed isDownloading because it can often be wrong
    cleanup, don't clear non-broadcasted transactions on rescan
    Disable VS and Hub Announcement on testnet and removed unfinished code that is not production ready from 1.3. This will cause a testnet reset to block 77341.
    getState can still show totalEffectiveBalance
    added BlockchainProcessor.isDownloading(), do not accept unconfirmed transactions if isDownloading
    unconfirmed transactions expiration
    Poll.getCount method added, GetPollIds http API method removed
    accounts in database, not finished
    merging with feature/db
    support for API request type classification
    polls and votes in database
    orders in database
    trades in database
    assets in database, refactoring
    aliases in database
    include application name in getState
    set isScanning flag during re-scan
    also keep track of lastBlockchainFeederHeight
    fixed NQT transaction signing, allow fractional amounts after NQT_BLOCK
    NQT
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    blockchain refactoring
    refactoring of Peer, User, Api, Nxt
    minor improvements
    Added "numberOfTrades", "numberOfPolls" and "numberOfVotes" to "getState".
    startForging and stopForging API
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    finished database transition, no more serialized files support
    encapsulate fields
    cleaned up all JSON API error handling
    getState show number of unlocked accounts, minor
    more cleanup
    use Longs for id's, a lot of cleanup
    more cleanup
    doGet switch statement refactoring, not done yet
    updated copyright year
    added getLinkedPhasedTransactions API
    added copyright notice headers
    getDataTags, getDataTagCount, getDataTagsLike, verifyTaggedData APIs
    don't tag getDGSTags and getDGSTagCount as search APIs
    DGS refactoring, moving static methods
    getDGSTags returns only tags for goods in stock by default
    added tag table and getDGSTags API
    updated copyright year
    uniform handling of insufficient balance errors
    added copyright notice headers
    no more Longs
    merging with feature/db
    support for API request type classification
    Removed redundant code related to assets.
    removed NXT and INT JSON properties, removed support for NXT and INT http parameters, enabled running on main net too
    fractional quantities
    NQT
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    changed error message, updated changelog
    moved constants to a separate class so that custom properties can be used to set them
    fix create unsigned transaction bugs
    fix create unsigned transaction bugs
    prepare transaction bytes ready for signing if public key is supplied instead of secret phrase
    Added guid for transactions.
    prepare transaction bytes ready for signing if public key is supplied instead of secret phrase
    new transaction timestamp is always current time, no need to supply as parameter
    support POST for all requests, and optionally enforce its use for those that require it
    blockchain refactoring
    split Blockchain class
    Block and Transaction interfaces, not finished
    refactoring of Peer, User, Api, Nxt
    Fixed order placement bugs.
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    enforce deadline less than 1440 for new transactions
    enforce deadline less than 1440 for new transactions
    don't blacklist peers when validation fails because of a not yet enabled feature
    fixed validation, NxtException, partial undo support
    cleaned up all JSON API error handling
    also clear Assets and Orders on rescan, some API refactoring in progress
    use Longs for id's, a lot of cleanup
    more cleanup
    transaction type refactoring
    transaction type refactoring
    finished doGet and doPost switch refactoring
    doGet switch statement refactoring, not done yet
    global publicKey cache
    updated copyright year
    allow deferred attachment encryption for full offline signing and encryption
    added copyright notice headers
    made compression of encrypted messages optional
    replace some Convert methods with java 8 ones
    no more Longs
    merging with feature/db
    use Arbitrary Message type for encrypted messages too, better parameter names
    transaction attachments refactoring
    support for API request type classification
    discount limited to total price, not to single item price
    use real recipient instead of genesis for DGS transactions
    DGS refund or feedback possible only after delivery, goods data must not be empty
    reverse sorting of purchases, allow filtering goods by availability, pagination
    minor
    check that discount does not exceed price
    DGS bugs
    also accept pre-encrypted notes and goods, for client-side signing
    length limits enforced after encryption only
    DGS now uses AES; finished DGS API; added Account.encryptTo and Account.decryptFrom; added DGS event listeners
    more DGS API
    updated copyright year
    refactoring
    prunable shuffling processing data
    shuffling assets
    shuffle processing, verification, and cancellation should all depend on current shuffle state and validate that it did not change
    cancel during processing stage when a participant couldn't decrypt data
    all participants equally allowed to cancel shuffle, improved shuffle and participants state validation
    blame
    simplify, each participant stores data and keys in its own record
    refactoring, use byte[][] instead of serializing encrypted data, store recipient keys in issuer data field
    require min shuffling amount of 1000 NXT and always also shuffle this amount of NXT when shuffling MS currency
    merge fix, will be 1.7
    use recipientPublicKey instead of recipientId
    added some TODOs, bugfixes, cleanup
    reuse the SecureRandom in Crypto
    copyright notices
    Encryption API change
    Merge related changes
    Merge remote-tracking branch 'origin/develop' into feature/cs and fix shuffling unit test
    Another round of shuffling code review and adapt the currency test to a database which contains multiple currencies
    Shuffling - simplify encryption look + merge with feature/ms
    Shuffling - allow null values for shuffling currency and shuffling_participant next account (similar to next_lessee_id)
    Shuffling - code review pass 1 - add todo items
    Implement the shuffling process transaction which implements the shuffling algorithm
    Work on shuffle processing
    More testing and fixing problem in the participant registration code
    Testing and fixing problem in the participant registration code
    Work on APIs and transaction types
    updated copyright year
    debug logging, no-op for taggedDataExtend restore
    minor, imports
    Add RetrievePrunedData API
    APIs that need a write lock should never be allowed to obtain a read lock first
    added copyright notice headers
    allow limiting unconfirmed transaction pool size
    always add errorCode and errorDesctiption in case of error
    minor
    do not require admin password when API server listens on 127.0.0.1 only
    Debug requests and DbShellServlet are always public and password protected. Removed nxt.enableDebugAPI
    Added nxt.disableAdminPassword to disable password protection
    Added password protection functionality to be used for administrative API requests. A single password is stored in nxt.adminPassword. All protected API requests require "adminPassword" parameter to match nxt.adminPassword.
    only do caching for some api calls
    add asset names and decimals to asset trades and transfers, use thread local caching by starting a db transaction for each api request unless disabled for specific requests
    require POST for blockchain modification requests
    added Debug API requests for triggering rescan, reset, and rollback
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    renamed pending to phased/phasing
    added getAccountPendingTransactionCount
    updated copyright year
    the debug APIs also don't need up to date blockchain
    APIs that need a write lock should never be allowed to obtain a read lock first
    added copyright notice headers
    allow limiting unconfirmed transaction pool size
    always add errorCode and errorDesctiption in case of error
    minor
    do not require admin password when API server listens on 127.0.0.1 only
    Debug requests and DbShellServlet are always public and password protected. Removed nxt.enableDebugAPI
    Added nxt.disableAdminPassword to disable password protection
    Added password protection functionality to be used for administrative API requests. A single password is stored in nxt.adminPassword. All protected API requests require "adminPassword" parameter to match nxt.adminPassword.
    only do caching for some api calls
    add asset names and decimals to asset trades and transfers, use thread local caching by starting a db transaction for each api request unless disabled for specific requests
    require POST for blockchain modification requests
    added Debug API requests for triggering rescan, reset, and rollback
    updated copyright year
    phased transactions API improvements
    added copyright notice headers
    exclude SSLv3 protocol
    make sure DbIterators are closed
    added timestamp parameter to getBlock API
    added height parameter to getBlock
    added includeTransactions parameter to getBlock
    merging with feature/db
    support for API request type classification
    JSON representation is now use case specific, different for http API and peer to peer communication, and no longer part of the Block and Transaction APIs;
    define JSON represenations for http API in a signle place for consistency;
    always return amounts in both NXT and NQT, the amounts in NXT represented in the JSON as Strings
    NQT
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    blockchain refactoring
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    simplified block and transaction construction, made block.transactionIds and block.blockTransactions unmodifiable Lists
    refactoring for better javadoc
    minor cleanup
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    more API cleanup, removed extra conversion to/from ByteBuffer
    encapsulate fields
    cleaned up all JSON API error handling
    more cleanup
    use Longs for id's, a lot of cleanup
    more cleanup
    doGet switch statement refactoring, not done yet
    global publicKey cache
    updated copyright year
    error handling on empty search query, includeCounts in searchDGSGoods also default false
    autodetect data mimetype
    null pointer
    more strict ciphertext size validation
    error checking
    refactoring
    fixed getAccountIds
    shuffler http APIs
    performance optimization, avoid querying database tables when only accountId or other id is needed
    getExpectedTransactions API, accept multivalue account parameter in getUnconfirmedTransactions APIs
    also allow encrypting messages if recipient public key will be provided by the current transaction
    allow deferred attachment encryption for full offline signing and encryption
    GetChatList and GetChatMessages API
    getLastTrades and getLastExchanges APIs
    minor cleanup
    Fix updating the filename parameter based on the uploaded file name
    minor, IntelliJ inspections
    1. Enhance the test page to submit upload requests normally so that the response is written to the page
    2. Make the upload file size configurable, defaults to the max tagged data, log exception and return an error in case its too big
    Implement file token APIs
    added copyright notice headers
    Provide more descriptive, incorrect numeric value messages, to the client (client side fix committed in previous commit)
    fixed bad refactoring
    autoclose streams
    allow use of file upload in the /test forms, ats.js needs to be fixed to handle multipart forms too
    refactoring
    check whether data is utf-8 text only when submitted as bytes
    improved search by tags
    File upload - enable multipart requests and support for parsing file upload as tagged data
    added channel field to tagged data
    improved adminPassword checking
    do not allow both transactionJSON and transactionBytes to be submitted
    getDataTags, getDataTagCount, getDataTagsLike, verifyTaggedData APIs
    use prunableAttachmentJSON parameter in broadcastTransaction, add prunableAttachmentJSON in signTransaction and getTransactionBytes response, Nxt.newTransactionBuilder(bytes,prunableAttachmentJSON)
    verifyPrunableMessage API
    minor refactoring
    made compression of encrypted messages optional
    Allow login with a valid but unknown account
    reduced default nxt.maxRollback, added nxt.trimFrequency
    fixed some IntelliJ inspections
    removed Transaction.sign and Block.sign methods, replaced TransactionProcessor.parseTransaction with Nxt.newTransactionBuilder
    added account parameter to getCurrencyPendingTransactions and getAssetPendingTransactions
    limit number of records returned to nxt.maxAPIRecords unless the admin password is provided or is disabled
    minor
    Merge remote-tracking branch 'origin/develop' into feature/cs and fix shuffling unit test
    fees refactoring, phasing fees
    add VoteWeighting data to poll and phasing poll JSON
    added phasing_poll_result table
    phasing polls may have already be trimmed, skip those missing
    added getPhasingPolls API, renamed getPhasingVotes to getPhasingPoll
    minor
    fixed ParameterParser, some refactoring
    removed blacklist
    parameter parser cleanup
    encoded parameter introduced for getLong()
    refactoring, implement voting models as enum
    renaming
    renaming, database indexes
    ParameterParser.getBoolean
    GetPendingTransactionVotes fixes, better validation in ApprovePendingTransaction
    GetAccountPolls -> GetPolls (& isMandatory parameter for getAccount method of GetPolls)
    purge votes for polls that finished before max rollback height, as their weight can no longer be calculated
    various fixes and improvements
    assetId -> holdingId in VS & 2PT, min balance model, referential integrity contstraint fix for poll, createPoll refactoring with ParameterParser, better poll validation
    HTTP API bugfixes, getPollsFinishingAt bugfix
    check on number of options in vote deserialization
    added getExchangesByOffer
    ParameterParser usage for VS / 2PTs
    do not allow retrieving currency by code except in getCurrency API
    DGS refactoring, moving static methods
    Fixing bug in UI and back-end dividend-related code.
    minor
    minor cleanup
    Shuffling - work on isDuplicate() not done yet and bug fixes
    Implementing remaining pieces of the 'dividend payment' transaction type.
    Work on APIs and transaction types
    make sure DbIterators are closed
    line separators
    More API work and unit tests
    more informative error checking
    Implement GetCurrencyAccounts API
    Merge with latest entity DB changes
    allow historical queries if data still available, added optional height parameter to getAssetAccounts, added getAccountLessors with a height parameter
    no more Longs
    More work on APIs
    username
    use DbIterator, firstIndex, lastIndex when getting lists of objects
    added numberOfConfirmations parameter to getAccountTransactions APIs
    Monetary System Http APIs - part 1
    Variable fees - fee is based on 3 levels.
    Old blocks before baseline are not validated (minimum fee is 0)
    Blocks after baseline are validated using old fee
    Blocks after next baseline are validated using new fee
    minor
    encryptToSelfMessage
    fixed encrypted message parameter parsing
    merging with feature/db
    use Arbitrary Message type for encrypted messages too, better parameter names
    bugs
    transaction attachments refactoring
    also accept RS format accounts
    reverse sorting of purchases, allow filtering goods by availability, pagination
    minor
    removed getAssetsByName API;
    getAssetsByIssuer now accepts multivalued "account" parameter and returns a list of lists of assets
    refactoring, support alias and aliasName parameters
    alias transfer bugfixes and clean up
    minor
    also accept pre-encrypted notes and goods, for client-side signing
    length limits enforced after encryption only
    DGS now uses AES; finished DGS API; added Account.encryptTo and Account.decryptFrom; added DGS event listeners
    finish Reed-Solomon format core support
    DGS API
    more DGS API
    DGS http API, not yet finished
    improved sender account parsing
    removed NXT and INT JSON properties, removed support for NXT and INT http parameters, enabled running on main net too
    error handling, minor
    fractional quantities
    updated copyright year
    added includeAssetInfo and includeCurrencyInfo parameters to getAccountAssets, getAccountCurrencies, getAccountExchangeRequests, getExpectedAssetTransfers, getExpectedCurrencyTransfers
    performance optimization, avoid querying database tables when only accountId or other id is needed
    added copyright notice headers
    do not allow retrieving currency by code except in getCurrency API
    add currency name, code, and decimals to AccountCurrency JSON, and asset name and decimals to AccountAsset JSON
    added getAccountCurrencies API, added optional includeLessors, includeAssets, includeCurrencies parameters to getAccount
    updated copyright year
    added copyright notice headers
    parameter parser cleanup
    no more Longs
    merging with feature/db
    support for API request type classification
    fractional quantities
    JSON representation is now use case specific, different for http API and peer to peer communication, and no longer part of the Block and Transaction APIs;
    define JSON represenations for http API in a signle place for consistency;
    always return amounts in both NXT and NQT, the amounts in NXT represented in the JSON as Strings
    NQT
    cleanup
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    more API cleanup, removed extra conversion to/from ByteBuffer
    encapsulate fields
    cleaned up all JSON API error handling
    more cleanup
    use Longs for id's, a lot of cleanup
    doGet switch statement refactoring, not done yet
    updated copyright year
    added copyright notice headers
    parameter parser cleanup
    no more Longs
    merging with feature/db
    support for API request type classification
    orders in database
    fractional quantities
    simplify
    APITestServlet for manual testing and debugging of all http APIs
    fix create unsigned transaction bugs
    fix create unsigned transaction bugs
    prepare transaction bytes ready for signing if public key is supplied instead of secret phrase
    Added guid for transactions.
    prepare transaction bytes ready for signing if public key is supplied instead of secret phrase
    new transaction timestamp is always current time, no need to supply as parameter
    support POST for all requests, and optionally enforce its use for those that require it
    blockchain refactoring
    split Blockchain class
    Block and Transaction interfaces, not finished
    refactoring of Peer, User, Api, Nxt
    refactoring for better javadoc
    made classes public so that javadoc can be used to hold http api documentation
    made classes public so that javadoc can be used to hold http api documentation
    enforce deadline less than 1440 for new transactions
    enforce deadline less than 1440 for new transactions
    don't blacklist peers when validation fails because of a not yet enabled feature
    fixed validation, NxtException, partial undo support
    encapsulate fields
    cleaned up all JSON API error handling
    also clear Assets and Orders on rescan, some API refactoring in progress
    use Longs for id's, a lot of cleanup
    more cleanup
    transaction type refactoring
    transaction type refactoring
    finished doGet and doPost switch refactoring
    doGet switch statement refactoring, not done yet
    updated copyright year
    the debug APIs also don't need up to date blockchain
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    added copyright notice headers
    POST
    imports
    typo
    SetLogging API
    updated copyright year
    added requestType properties to getConstants
    added optional requireBlock and requireLastBlock parameter to enforce expected blockchain state in API requests
    added copyright notice headers
    handle DDNS announced address updates
    require reveal secret when approving by-hash phased transaction
    improved announced address processing
    addPeer and blacklistPeer should requirePost and requirePassword
    peer networking refactoring
    addPeer returns isNewlyAdded
    Reordered peers translations and added new ones
    Display more verbose message after adding peer
    Fixed disappearing blacklist message
    limit peer networking request and response sizes to prevent out of memory attacks
    moved peer networking APIs under APITag.NETWORK
    AddPeer and BlacklistPeer API calls
    updated copyright year
    uniform handling of insufficient balance errors
    added copyright notice headers
    fixed javadoc
    do not allow retrieving currency by code except in getCurrency API
    currency APIs can accept either currency id or currency code
    split exchange transaction and attachments into buy and sell, units always positive
    More Javadoc
    Replace CurrencyExchange api with currency buy and sell
    Naming change from *CurrencyBalanceQNT to *CurrencyUnits
    re-organize currency exchange testing
    More exchange tests and APIs
    Simplify currency transfer, add additional APIS, align mint data types across classes
    More work on APIs
    Monetary System Http APIs - part 1
    updated copyright year
    error handling on empty search query, includeCounts in searchDGSGoods also default false
    added copyright notice headers
    removed includeVoters parameters from getPoll and getPolls, changed vote json format in getPollVotes
    added searchPolls API
    search currencies by code, name, or description, using lucene, not tested
    implemented full text search using the H2 lucene search, added searchAssets and searchDGSGoods APIs
    added includeCounts option to getAssets APIs
    DbIterator, offset and limit pagination
    merging with feature/db
    support for API request type classification
    undo of leasing should trigger a rescan
    DGS http API, not yet finished
    added getAssets and getAllAssets APIs
    JSON representation is now use case specific, different for http API and peer to peer communication, and no longer part of the Block and Transaction APIs;
    define JSON represenations for http API in a signle place for consistency;
    always return amounts in both NXT and NQT, the amounts in NXT represented in the JSON as Strings
    also return assetId
    allow non-unique asset names;
    added GetAssetsByName API request
    NXT-PLUS in a single commit
    Hardfork coming - commit and update to 1.7.4
    Fix account-id filter in EventForwarder
    NXT-PLUS in a single commit
    NXT-PLUS in a single commit
    Replace nxt.websocketSSL with nxt.apiSSL
    NXT-PLUS in a single commit
    Change the way heights are reported
    GetChatList and GetChatMessages API
    NXT-PLUS in a single commit
    Hardfork coming - commit and update to 1.7.4
    Merge FIMK additions to 1.5.11
    NXT-PLUS in a single commit
    NXT-PLUS in a single commit
    Hardfork coming - commit and update to 1.7.4
    NXT-PLUS in a single commit
    NXT-PLUS in a single commit
    Hardfork coming - commit and update to 1.7.4
    NXT-PLUS in a single commit
    Hardfork coming - commit and update to 1.7.4
    NXT-PLUS in a single commit
    NXT-PLUS in a single commit
    Merge FIMK additions to 1.5.11
    NXT-PLUS in a single commit
    NXT-PLUS in a single commit
    Allow search for account and asset id
    NXT-PLUS in a single commit
    NXT-PLUS in a single commit
    NXT-PLUS in a single commit
    NXT-PLUS in a single commit
    NXT-PLUS in a single commit
    Merge FIMK additions to 1.5.11
    NXT-PLUS in a single commit
    NXT-PLUS in a single commit
    NXT-PLUS in a single commit
    NXT-PLUS in a single commit
    NXT-PLUS in a single commit
    NXT-PLUS in a single commit
    NXT-PLUS in a single commit
    Make forging info optional in GetAccounts API
    NXT-PLUS in a single commit
    NXT-PLUS in a single commit
    Hardfork coming - commit and update to 1.7.4
    NXT-PLUS in a single commit
    NXT-PLUS in a single commit
    updated copyright year
    added copyright headers
    Support for Windows service installation and missing resources related to installer
    updated copyright year
    added copyright headers
    Separate the logic for enabling the system tray on every desktop from the logic of using the user dir only on Windows desktop - not tested yet
    updated copyright year
    added copyright headers
    Separate the logic for enabling the system tray on every desktop from the logic of using the user dir only on Windows desktop - not tested yet
    Support for Windows service installation and missing resources related to installer
    Initial Support for System Tray icons - status dialog
    Initial Support for System Tray icons - not done yet
    Support installation by non-priviligied user on Windows
    updated copyright year
    added copyright headers
    Separate the logic for enabling the system tray on every desktop from the logic of using the user dir only on Windows desktop - not tested yet
    updated copyright year
    added copyright headers
    separate windows and linux package scripts
    Separate the logic for enabling the system tray on every desktop from the logic of using the user dir only on Windows desktop - not tested yet
    Support for Windows service installation and missing resources related to installer
    Initial Support for System Tray icons - status dialog
    Initial Support for System Tray icons - not done yet
    Support installation by non-priviligied user on Windows
    updated copyright year
    added copyright headers
    Initial Support for System Tray icons - not done yet
    updated copyright year
    added copyright headers
    Support for Windows service installation and missing resources related to installer
    updated copyright year
    Auto refresh the system tray status dialog every second
    minor, IntelliJ inspections
    Ask for shutdown confirmation and display database URL
    Replace status label with a real properties dialog (values can be copy pasted)
    Still need to implement refresh functionality
    fixed IntelliJ inspections
    added copyright headers
    Separate the logic for enabling the system tray on every desktop from the logic of using the user dir only on Windows desktop - not tested yet
    Installation improvments
    More system status properties
    Initial Support for System Tray icons - status dialog
    Initial Support for System Tray icons - not done yet
    updated copyright year
    added copyright headers
    Separate the logic for enabling the system tray on every desktop from the logic of using the user dir only on Windows desktop - not tested yet
    Support for Windows service installation and missing resources related to installer
    Initial Support for System Tray icons - status dialog
    nxt.log is now written to the logs folder or under user home logs folder
    Initial Support for System Tray icons - not done yet
    Support installation by non-priviligied user on Windows
    updated copyright year
    fixed IntelliJ inspections
    added copyright headers
    Separate the logic for enabling the system tray on every desktop from the logic of using the user dir only on Windows desktop - not tested yet
    Support for Windows service installation and missing resources related to installer
    Initial Support for System Tray icons - status dialog
    nxt.log is now written to the logs folder or under user home logs folder
    Initial Support for System Tray icons - not done yet
    Support installation by non-priviligied user on Windows
    updated copyright year
    fixed IntelliJ inspections
    added copyright headers
    Separate the logic for enabling the system tray on every desktop from the logic of using the user dir only on Windows desktop - not tested yet
    Support for Windows service installation and missing resources related to installer
    Initial Support for System Tray icons - status dialog
    Initial Support for System Tray icons - not done yet
    Support installation by non-priviligied user on Windows
    updated copyright year
    fixed IntelliJ inspections
    added copyright headers
    Support for Windows service installation and missing resources related to installer
    updated copyright year
    added copyright notice headers
    fixed some IntelliJ inspections
    List allocation size error
    Add missing buffer synchronization
    GetLog and GetStackTraces API
    updated copyright year
    added copyright notice headers
    removed getAssetsByName API;
    getAssetsByIssuer now accepts multivalued "account" parameter and returns a list of lists of assets
    minor
    Add NxtLogManager to delay logger shutdown
    updated copyright year
    added copyright notice headers
    minor improvements
    embedded jetty
    listeners
    updated copyright year
    added copyright notice headers
    simplify PeerImpl.send error handling
    limit peer networking request and response sizes to prevent out of memory attacks
    fix download traffic counting
    moved all classes to separate files
    updated copyright year
    added copyright notice headers
    Allow Throwable when logging exceptions
    SetLogging API
    fixed some IntelliJ inspections
    Separate the logic for enabling the system tray on every desktop from the logic of using the user dir only on Windows desktop - not tested yet
    Support installation by non-priviligied user on Windows
    Support creating log folder under the user home folder on Windows
    Do not install Unix specific resources on Windows
    Do not install Windows Java VM on Unix
    Install desktop shortcuts by default
    Add isSubmitted, change deadline to 10 and improve log messages
    Minting client reference implementation
    Add support for Scrypt hash function
    Shuffling - test infrastructure
    Delete currency test + one fix in Currency
    Delete currency test + one fix in Currency
    if not using NxtLogManager, print shutdown messages to System.out
    bugs
    Logger.init can still be static
    Issue 002
    only call nxtShutdown if logManager is NxtLogManager
    removed getAssetsByName API;
    getAssetsByIssuer now accepts multivalued "account" parameter and returns a list of lists of assets
    Add NxtLogManager to delay logger shutdown
    Use SLF4J for logging
    Use SLF4J for logging
    Use SLF4J for logging
    minor fixes
    improve Logger
    also look for nxt-default.properties in location defined by system property
    use nxt-default.properties for all defaults
    define Listeners for Logger and for Blockchain scan, added Observable interface
    refactoring of Peer, User, Api, Nxt
    embedded jetty
    also log to a file
    peer address validation
    also log to a file
    moved all classes to separate files
    updated copyright year
    added copyright notice headers
    reduced timeout for shutting down Peers.sendingService and Peers.peersService executors
    fixed shutdown order, debug
    use a private executor for the blockchain download thread only
    use a cached thread pool instead of limiting number of threads
    reverted last commit as not really useful
    validate blockchain against default peers when doing rescan with validation
    optimizations
    ThreadPool.start can stay synchronized
    do not synchronize ThreadPool.start and shutdown to allow shutdown to interrupt the start
    minor fixes
    allow time manipulations for testing, and test forging
    allow disabling of specific background tasks for test purposes
    also accept numBlocks as Scan parameter
    more bugs
    start without waiting for peer address resolution to complete
    better handling of startup errors
    allow task scheduling in milliseconds too
    if not using NxtLogManager, print shutdown messages to System.out
    merging with feature/db
    parallelize startup tasks
    cosmetic improvements
    init improvements
    allow using https/ssl for the API and the UI, allow custom Properties
    start background threads after all other initialization is complete
    embedded jetty
    updated copyright year
    added copyright notice headers
    peer handling optimizations, some refactoring, moved FilteringIterator.Filter to nxt.util.Filter
    updated copyright year
    added copyright notice headers
    removed getAssetsByName API;
    getAssetsByIssuer now accepts multivalued "account" parameter and returns a list of lists of assets
    minor
    made messageFormat ThreadLocal
    Use SLF4J for logging
    made messageFormat ThreadLocal
    Use SLF4J for logging
    Use SLF4J for logging
    updated copyright year
    added copyright notice headers
    renamed lostTransactions to waitingTransactions, undo UnconfirmedTransaction.isNotCurrentlyValid and use a limit on arrival timestamp instead
    fixed some IntelliJ inspections
    made Time an interface
    allow time manipulations for testing, and test forging
    updated copyright year
    detectMimeType API
    Lucene 5.2 support
    added copyright notice headers
    tags for tagged data
    updated copyright year
    Merge 'cache', 'jetty' and 'services' into ledger
    updated copyright year
    added copyright notice headers
    fixed IntelliJ inspections, replace some for loops with Iterable.forEach
    Websocket peer support
    Websocket peer support
    updated copyright year
    added copyright notice headers
    moved all classes to separate files
    updated copyright year
    added copyright notice headers
    minor cleanup
    Websocket peer support
    Websocket peer support
    updated copyright year
    fixed IntelliJ inspections
    Minor cleanup
    Improve JSON string encoding performance
    added copyright notice headers
    more logging of peer networking errors
    more minor json optimizations
    json optimizations, not finished
    updated copyright year
    added copyright notice headers
    fixed some IntelliJ inspections
    listeners
    updated copyright year
    minor, code style
    ReadWriteUpdateLock support
    updated copyright year
    allow both prunable plain and prunable encrypted messages
    minor
    additional duplicates check to prevent incorrect blaming, sort instead of shuffle, check that public key is canonical too
    bugs, optimizations, various changes
    getExpectedTransactions API, accept multivalue account parameter in getUnconfirmedTransactions APIs
    test currency and asset shuffling
    first processing transaction must also depend on shuffle state
    added copyright notice headers
    renamed lostTransactions to waitingTransactions, undo UnconfirmedTransaction.isNotCurrentlyValid and use a limit on arrival timestamp instead
    tags for tagged data
    allow different hash functions for by-hash phasing
    added by-transaction voting model (linked transactions)
    replace some Convert methods with java 8 ones
    simplify
    more strict check in parseAccountId
    parseAccountId - check for isEmpty
    fixed to read the values from the values table in the order they are saved, reversal no longer needed
    removed blacklist
    move compress and uncompress to Convert
    various fixes and improvements
    Convert.toString(byte[]) should not do trimming
    getPendingTransactionVotesCount, todos fixed
    reviewed the VS and phasing code, added TODOs
    whitelists/blacklists in another table, checks for minbalance/lists
    use timestamp for transactions that were in a block
    2-phased modification for all HTTP API calls creating transactions
    make sure DbIterators are closed
    allow time manipulations for testing, and test forging
    Make sure each block allocates different time stamp during tests - cont
    no more Longs
    optimizations
    exception handling improvement
    parseTransaction, signTransaction and broadcastTransaction also accepts transactions in JSON format instead of bytes
    leasing and guaranteed balance bugs
    bugs
    improved validation exception handling
    transaction attachments refactoring
    alias transfer bugfixes and clean up
    finish Reed-Solomon format core support
    removed unused code
    null pointer
    null pointer
    transactions waiting in unconfirmed pool now require 100 NXT refundable deposit
    use sha256(signature) instead of plain signature for full hash calculation
    full hash referenced transactions
    removed NXT and INT JSON properties, removed support for NXT and INT http parameters, enabled running on main net too
    fractional quantities
    JSON representation is now use case specific, different for http API and peer to peer communication, and no longer part of the Block and Transaction APIs;
    define JSON represenations for http API in a signle place for consistency;
    always return amounts in both NXT and NQT, the amounts in NXT represented in the JSON as Strings
    better handling of invalid transactions during block generation, always remove from unconfirmed pool
    fixed NXT amount parsing
    UI fixes
    NQT
    minor
    moved constants to a separate class so that custom properties can be used to set them
    fix create unsigned transaction bugs
    fix create unsigned transaction bugs
    cosmetic clean up
    embedded jetty
    renamed convert methods with more explicit names, optimized
    caching JSON in Block object doesn't help when using a database
    avoid null pointers
    also log to a file
    peer address validation
    peer address validation
    optimization
    use Longs for id's, a lot of cleanup
    moved background thread definitions out of Nxt servlet
    moved all classes to separate files
    updated copyright year
    added copyright notice headers
    define Listeners for Logger and for Blockchain scan, added Observable interface
    updated copyright year
    expose upnp found external address in getState, allow overriding upnp timeouts
    imports
    imports
    logging
    Return local and external address
    UPnP support
    updated copyright year
    added copyright notice headers
    no more Longs
    iterable bugs
    more generator cleanup
    minor fixes
    refactoring of Peer, User, Api, Nxt
    embedded jetty
    renamed convert methods with more explicit names, optimized
    block events don't need to use a List
    simplified block and transaction construction, made block.transactionIds and block.blockTransactions unmodifiable Lists
    Something weird has happened to my local repository.
    minor, may help with the duplicate known peers problem
    get rid of index
    show version for all peers
    fixed setting of Peer connection state, improved display of known and blacklisted peers
    also deactivate peers when blacklisting
    startForging and stopForging API
    listeners
    API cleanup
    encapsulate fields
    cleaned up all JSON API error handling
    more cleanup
    use Longs for id's, a lot of cleanup
    more cleanup
    json optimizations, not finished
    finished doGet and doPost switch refactoring
    updated copyright year
    added copyright notice headers
    support POST for all requests, and optionally enforce its use for those that require it
    blockchain refactoring
    refactoring of Peer, User, Api, Nxt
    embedded jetty
    encapsulate fields
    cleaned up all JSON API error handling
    updated copyright year
    added copyright notice headers
    support POST for all requests, and optionally enforce its use for those that require it
    improve handling of peer announced addresses and ports
    blockchain refactoring
    refactoring of Peer, User, Api, Nxt
    Something weird has happened to my local repository.
    get rid of index
    improved handling of blacklisting, ignore http json requests from blacklisted peers
    improved handling of blacklisting, ignore http json requests from blacklisted peers
    package-local
    package-local
    encapsulate fields
    cleaned up all JSON API error handling
    more cleanup
    use Longs for id's, a lot of cleanup
    more cleanup
    finished doGet and doPost switch refactoring
    global publicKey cache
    updated copyright year
    performance optimization, avoid querying database tables when only accountId or other id is needed
    Merged source updates
    fixed IntelliJ inspections
    added copyright notice headers
    more lambdas
    replace some Convert methods with java 8 ones
    no more Longs
    DbIterator, offset and limit pagination
    refactoring, guaranteed balances in database, not finished
    merging with feature/db
    use NULL in the db for no-recipient transactions, added GetAccountTransactions, sort by timestamp desc, added fromIndex toIndex parameters
    NQT
    added getBlocks and getTransactions using PreparedStatement, made Db.getConnection public
    fix handling of transactions with identical timestamps
    added block_timestamp to the transaction table, added Transaction.getBlockId() and Transaction.getBlockTimestamp() which should be used for better performance instead of having to load the Block from the database to get them;
    store transaction hashes in the transaction table and make them available using Transaction.getHash() and in the JSON returned from getTransaction API;
    enable transaction lookup based on hash, as an optional parameter to the getTransaction API
    fixed UI handling of myTransactions
    support POST for all requests, and optionally enforce its use for those that require it
    blockchain refactoring
    split Blockchain class
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    Something weird has happened to my local repository.
    get rid of index
    don't sort transactions when not needed
    listeners
    minor cleanup
    package-local
    package-local
    DbIterator AutoCloseable
    more optimizations, added methods to filter blocks and transactions by account
    more API cleanup, removed extra conversion to/from ByteBuffer
    encapsulate fields
    cleaned up all JSON API error handling
    more cleanup
    use Longs for id's, a lot of cleanup
    more cleanup
    finished doGet and doPost switch refactoring
    updated copyright year
    added copyright notice headers
    support POST for all requests, and optionally enforce its use for those that require it
    blockchain refactoring
    refactoring of Peer, User, Api, Nxt
    token processing
    package-local
    token processing
    package-local
    cleaned up all JSON API error handling
    more cleanup
    finished doGet and doPost switch refactoring
    updated copyright year
    added copyright notice headers
    support POST for all requests, and optionally enforce its use for those that require it
    improve handling of peer announced addresses and ports
    blockchain refactoring
    refactoring of Peer, User, Api, Nxt
    Something weird has happened to my local repository.
    get rid of index
    improved handling of blacklisting, ignore http json requests from blacklisted peers
    improved handling of blacklisting, ignore http json requests from blacklisted peers
    package-local
    package-local
    encapsulate fields
    cleaned up all JSON API error handling
    more cleanup
    use Longs for id's, a lot of cleanup
    more cleanup
    finished doGet and doPost switch refactoring
    updated copyright year
    added copyright notice headers
    use host only as peer identifier, not host with port
    removed Peer.isWellKnown; use nxt-default.properties for setting initial peers instead of NxtDbVersion
    replace some Convert methods with java 8 ones
    added currency decimals, optionally include currency name and decimals in getCurrencyTransfers and getExchanges
    exclude SSLv3 protocol
    added getBlocks API
    optimizations
    DbIterator, offset and limit pagination
    NQT
    moved constants to a separate class so that custom properties can be used to set them
    don't overwrite peerAddress with announcedAddress
    improve handling of peer announced addresses and ports
    cosmetic clean up
    blockchain refactoring
    split Blockchain class
    refactoring of Peer, User, Api, Nxt
    renamed convert methods with more explicit names, optimized
    simplified block and transaction construction, made block.transactionIds and block.blockTransactions unmodifiable Lists
    Something weird has happened to my local repository.
    get rid of index
    show version for all peers
    fixed setting of Peer connection state, improved display of known and blacklisted peers
    minor cleanup
    improved handling of blacklisting, ignore http json requests from blacklisted peers
    improved handling of blacklisting, ignore http json requests from blacklisted peers
    package-local
    package-local
    also log to a file
    peer address validation
    peer address validation
    more optimizations, added methods to filter blocks and transactions by account
    more API cleanup, removed extra conversion to/from ByteBuffer
    encapsulate fields
    cleaned up all JSON API error handling
    more cleanup
    use Longs for id's, a lot of cleanup
    more cleanup
    finished doGet and doPost switch refactoring
    updated copyright year
    added copyright notice headers
    support POST for all requests, and optionally enforce its use for those that require it
    improve handling of peer announced addresses and ports
    blockchain refactoring
    refactoring of Peer, User, Api, Nxt
    Something weird has happened to my local repository.
    get rid of index
    package-local
    package-local
    encapsulate fields
    cleaned up all JSON API error handling
    use Longs for id's, a lot of cleanup
    more cleanup
    finished doGet and doPost switch refactoring
    global publicKey cache
    updated copyright year
    fixed IntelliJ inspections
    added copyright notice headers
    use host only as peer identifier, not host with port
    removed Peer.isWellKnown; use nxt-default.properties for setting initial peers instead of NxtDbVersion
    added getPollVote and getPhasingPollVote APIs
    more lambdas
    replace some Convert methods with java 8 ones
    Do not log nxt.keyStorePassword
    refactoring of new transactions processing to be able to return more specific errors
    1.4.0e testnet on ports 2874, 2875, 2876
    exclude SSLv3 protocol
    optimizations
    changed unconfirmed transaction processing to reduce size of unconfirmed_transaction table
    better handling of startup errors
    if not using NxtLogManager, print shutdown messages to System.out
    merging with feature/db
    setReuseAddress(true) for jetty ServerConnectors
    parallelize startup tasks
    optimization - don't register NRS UI related listeners if NRS UI server not enabled
    NQT
    Nxt.getStringListProperty
    explicitly stop all jetty servers at shutdown
    moved constants to a separate class so that custom properties can be used to set them
    added block_timestamp to the transaction table, added Transaction.getBlockId() and Transaction.getBlockTimestamp() which should be used for better performance instead of having to load the Block from the database to get them;
    store transaction hashes in the transaction table and make them available using Transaction.getHash() and in the JSON returned from getTransaction API;
    enable transaction lookup based on hash, as an optional parameter to the getTransaction API
    enable use of testnet just by setting nxt.isTestnet=true
    don't overwrite peerAddress with announcedAddress
    init improvements
    improve handling of peer announced addresses and ports
    allow using https/ssl for the API and the UI, allow custom Properties
    use nxt-default.properties for all defaults
    cosmetic clean up
    stop jetty servers at shutdown; don't start peer server until ready
    define Listeners for Logger and for Blockchain scan, added Observable interface
    blockchain refactoring
    split Blockchain class
    refactoring of Peer, User, Api, Nxt
    embedded jetty
    renamed convert methods with more explicit names, optimized
    block events don't need to use a List
    simplified block and transaction construction, made block.transactionIds and block.blockTransactions unmodifiable Lists
    Something weird has happened to my local repository.
    minor, may help with the duplicate known peers problem
    get rid of index
    show version for all peers
    fixed setting of Peer connection state, improved display of known and blacklisted peers
    also deactivate peers when blacklisting
    startForging and stopForging API
    listeners
    API cleanup
    encapsulate fields
    cleaned up all JSON API error handling
    more cleanup
    use Longs for id's, a lot of cleanup
    more cleanup
    json optimizations, not finished
    finished doGet and doPost switch refactoring
    updated copyright year
    added copyright notice headers
    removed Transaction.sign and Block.sign methods, replaced TransactionProcessor.parseTransaction with Nxt.newTransactionBuilder
    replace some Convert methods with java 8 ones
    refactoring to avoid MintWorker having to intialize blockchain processing classes that it does not need
    move the call to transaction.validate() inside TransactionProcessor.broadcast(transaction)
    no more Longs
    renamed Transaction.verify to verifySignature and validateAttachment to validate
    transactions with no recipient really should not have a recipient; bugfixes
    transaction attachments refactoring
    only enforce canonical signatures and keys for transactions and blocks after NQT_BLOCK
    removed NXT and INT JSON properties, removed support for NXT and INT http parameters, enabled running on main net too
    only run on testnet, fixed UI fee adjustment
    UI fixes
    NQT
    moved constants to a separate class so that custom properties can be used to set them
    new transaction timestamp is always current time, no need to supply as parameter
    support POST for all requests, and optionally enforce its use for those that require it
    blockchain refactoring
    split Blockchain class
    Block and Transaction interfaces, not finished
    refactoring of Peer, User, Api, Nxt
    package-local
    package-local
    enforce deadline less than 1440 for new transactions
    enforce deadline less than 1440 for new transactions
    don't blacklist peers when validation fails because of a not yet enabled feature
    fixed validation, NxtException, partial undo support
    cleaned up all JSON API error handling
    also clear Assets and Orders on rescan, some API refactoring in progress
    more cleanup
    use Longs for id's, a lot of cleanup
    more cleanup
    transaction type refactoring
    transaction type refactoring
    finished doGet and doPost switch refactoring
    updated copyright year
    added copyright notice headers
    blockchain refactoring
    refactoring of Peer, User, Api, Nxt
    listeners
    package-local
    package-local
    cleaned up all JSON API error handling
    finished doGet and doPost switch refactoring
    updated copyright year
    added copyright notice headers
    blockchain refactoring
    refactoring of Peer, User, Api, Nxt
    package-local
    package-local
    cleaned up all JSON API error handling
    finished doGet and doPost switch refactoring
    updated copyright year
    added copyright notice headers
    minor
    minor fixes
    support POST for all requests, and optionally enforce its use for those that require it
    refactoring of Peer, User, Api, Nxt
    embedded jetty
    updated copyright year
    when running tests, do not delete finished shufflings
    shuffler expiration
    imports
    fix test
    added copyright notice headers
    Disable the process transactions thread when running unit tests since it breaks tests sporadically (not exactly sure why)
    Replace idX and passPhraseX with ALICE, BOB, CHUCK and DAVE + logging improvements and cleanup
    Unit tests for trustless asset transfer using phasing and by transaction approval
    Unit tests for SendMoney, SendMessage and LeaseBalance
    Shutdown properly after tests if not run in suite
    Fixed "Nxt.init has already been called" when running test suits
    Fixed NPE - moved Account.getAccount calls after Nxt.init
    nxt.fakeForgingAccount in hard-coded properties
    Merge remote-tracking branch 'origin/develop' into feature/cs and fix shuffling unit test
    generateBlocks() helper method
    TestApprovePendingTransaction
    Shuffling - test infrastructure
    variable fees for currency issuance
    More testing and fixing problem in the participant registration code
    Forging tests
    Adapt unit tests to new standard
    Implement additional hashing algorithms for minting
    Debug message
    Currency Reserve unit tests and fixes to the crowd funding system
    More exchange tests and APIs
    updated copyright year
    test currency and asset shuffling
    very basic testing
    added copyright notice headers
    Replace idX and passPhraseX with ALICE, BOB, CHUCK and DAVE + logging improvements and cleanup
    Unit tests for SendMoney, SendMessage and LeaseBalance
    updated copyright year
    fixed tests
    added copyright notice headers
    We should not use Constants before Nxt.init(Properties) is executed. Else the constants are mess (e.g. isOffline is false)
    Forging tests
    define a known most recent block in Constants
    added forging tests, refactoring, run each test in a new jvm
    updated copyright year
    added copyright notice headers
    Adapt unit tests to new standard
    added forging tests, refactoring, run each test in a new jvm
    updated copyright year
    added copyright notice headers
    define a known most recent block in Constants
    added forging tests, refactoring, run each test in a new jvm
    updated copyright year
    added copyright notice headers
    refactoring to avoid MintWorker having to intialize blockchain processing classes that it does not need
    minor refactoring, fixed mint calculation test
    use signed bytes for min/max minting difficulty to allow values 1 to 255
    fixed test
    Fixes:
    1. Do not allow min difficulty below 2 and max difficulty above 128
    2. Validate that min reserve * reserve units do not overflow
    Fix minting corner case with low difficulty
    Minting client reference implementation
    Add support for Scrypt hash function
    Add support for Scrypt hash function
    Implement additional hashing algorithms for minting
    Calculate minting target based on the same idea used by Bitcoin and factor the number of units into the target calculation
    updated copyright year
    added copyright notice headers
    added forging tests, refactoring, run each test in a new jvm
    updated copyright year
    fixed tests
    added copyright notice headers
    added forging tests, refactoring, run each test in a new jvm
    allow time manipulations for testing, and test forging
    Added TokenTest
    updated copyright year
    fixed test
    imports
    imports
    testing
    test rescan after the full download
    debug
    added copyright notice headers
    reduced default nxt.maxRollback, added nxt.trimFrequency
    cleaned up some hardcoded constants
    improve test
    save scan status in database to continue rescan until successfully completed
    include lessors guaranteed balance as of the requested height in getAccountLessors
    minor
    some extra error checking
    AccountAsset should not have a height field at all
    added another load test, sort account lessors by id too
    allow test to start from higher height
    test for account asset equality should not include unconfirmed quantities, moved equals out of AccountAsset
    run blockchain test with unconfirmed transactions processing enabled
    bugs
    testing historical queries
    define a known most recent block in Constants
    added forging tests, refactoring, run each test in a new jvm
    cleanup, don't clear non-broadcasted transactions on rescan
    tests for blockchain download, rescan and rollback
    updated copyright year
    added copyright notice headers
    Replace idX and passPhraseX with ALICE, BOB, CHUCK and DAVE + logging improvements and cleanup
    do not use hit time if missed by more than 1 h
    fixed compilation
    Shuffling - test infrastructure
    Forging tests
    updated copyright year
    fixed tests
    shuffler expiration
    fix fork switch
    added copyright notice headers
    java 8 lambdas
    test may fail due to bad peers, skip fork check
    after MS block, the order of transactions in a block gets determined by the forger, instead of by id, default by arrival time
    Merge
    synchronization
    minor synchronization bug
    run blockchain test with unconfirmed transactions processing enabled
    Adapt unit tests to new standard
    define a known most recent block in Constants
    added forging tests, refactoring, run each test in a new jvm
    updated copyright year
    fixed tests
    added copyright notice headers
    Replace idX and passPhraseX with ALICE, BOB, CHUCK and DAVE + logging improvements and cleanup
    Sub-object for the SetPhasingOnly phasingParams in the JSON attachment
    Test phasing only with account voting
    after MS block, the order of transactions in a block gets determined by the forger, instead of by id, default by arrival time
    Minting tests, minting and reserve increase fixes
    More exchange tests and APIs
    Merge develop into feature/ms
    More MS unit tests and bug fixes
    updated copyright year
    added copyright notice headers
    Replace CurrencyExchange api with currency buy and sell
    Naming change from *CurrencyBalanceQNT to *CurrencyUnits
    re-organize currency exchange testing
    updated copyright year
    added copyright notice headers
    added forging tests, refactoring, run each test in a new jvm
    minor
    Merge develop into feature/ms
    Added HallmarkTest
    updated copyright year
    Secure Random Test
    Secure Random test
    updated copyright year
    added copyright notice headers
    added forging tests, refactoring, run each test in a new jvm
    junit tests
    updated copyright year
    added copyright notice headers
    junit tests
    updated copyright year
    rounding error in LeaseTest
    fixed tests
    imports
    fix test
    added copyright notice headers
    Replace idX and passPhraseX with ALICE, BOB, CHUCK and DAVE + logging improvements and cleanup
    Unit tests for SendMoney, SendMessage and LeaseBalance
    Unit tests - leasing
    updated copyright year
    fix compilation
    added copyright notice headers
    Fixed "Nxt.init has already been called" when running test suits
    Fixed NPE - moved Account.getAccount calls after Nxt.init
    nxt.fakeForgingAccount in hard-coded properties
    HttpSuite -> AbstractHttpApiSuite
    HttpAPISuite basic class
    more createPoll tests
    invalid poll test
    id added to poll json
    voting suite
    Unit tests
    Another round of shuffling code review and adapt the currency test to a database which contains multiple currencies
    after MS block, the order of transactions in a block gets determined by the forger, instead of by id, default by arrival time
    Shuffling - simplify encryption look + merge with feature/ms
    Shuffling tests and fixes
    Delete currency test + one fix in Currency
    Delete currency test + one fix in Currency
    Update test suite
    Eliminate the isUnitTest patch
    Calculate minting target based on the same idea used by Bitcoin and factor the number of units into the target calculation
    Currency Reserve unit tests and fixes to the crowd funding system
    More exchange tests and APIs
    updated copyright year
    fixed tests
    imports
    added copyright notice headers
    Replace idX and passPhraseX with ALICE, BOB, CHUCK and DAVE + logging improvements and cleanup
    Unit tests for SendMoney, SendMessage and LeaseBalance
    Encryption API change
    Unit tests - publish public key
    Unit tests
    Unit tests
    updated copyright year
    added copyright notice headers
    Replace idX and passPhraseX with ALICE, BOB, CHUCK and DAVE + logging improvements and cleanup
    Unit tests for SendMoney, SendMessage and LeaseBalance
    Unit tests - leasing
    updated copyright year
    imports
    added copyright notice headers
    Replace idX and passPhraseX with ALICE, BOB, CHUCK and DAVE + logging improvements and cleanup
    Unit tests for SendMoney, SendMessage and LeaseBalance
    Unit tests
    Unit tests
    Unit tests
    updated copyright year
    imports
    added copyright notice headers
    Replace idX and passPhraseX with ALICE, BOB, CHUCK and DAVE + logging improvements and cleanup
    Encryption API change
    Shuffling - test infrastructure
    Implement the shuffling process transaction which implements the shuffling algorithm
    updated copyright year
    fixed IntelliJ inspections
    added copyright notice headers
    Improved phasing test with refactored test objects
    Replace idX and passPhraseX with ALICE, BOB, CHUCK and DAVE + logging improvements and cleanup
    Unit tests for trustless asset transfer using phasing and by transaction approval
    Support multiple values parameters in APICall
    replace some Convert methods with java 8 ones
    TestCreateTwoPhased / TwoPhasedSuite
    after MS block, the order of transactions in a block gets determined by the forger, instead of by id, default by arrival time
    More API work and unit tests
    Currency Reserve unit tests and fixes to the crowd funding system
    More MS unit tests and refactoring
    updated copyright year
    added copyright notice headers
    HttpSuite -> AbstractHttpApiSuite
    unused imports deleted
    HttpAPISuite basic class
    voting suite
    Unit tests
    Another round of shuffling code review and adapt the currency test to a database which contains multiple currencies
    after MS block, the order of transactions in a block gets determined by the forger, instead of by id, default by arrival time
    Shuffling - simplify encryption look + merge with feature/ms
    Shuffling tests and fixes
    Delete currency test + one fix in Currency
    Delete currency test + one fix in Currency
    Update test suite
    Eliminate the isUnitTest patch
    Calculate minting target based on the same idea used by Bitcoin and factor the number of units into the target calculation
    Currency Reserve unit tests and fixes to the crowd funding system
    More exchange tests and APIs
    updated copyright year
    minor
    added copyright notice headers
    Replace idX and passPhraseX with ALICE, BOB, CHUCK and DAVE + logging improvements and cleanup
    Fix CurrencySuite tests
    replace some Convert methods with java 8 ones
    voting suite
    Another round of shuffling code review and adapt the currency test to a database which contains multiple currencies
    Shuffling - test infrastructure
    Delete currency test + one fix in Currency
    Delete currency test + one fix in Currency
    updated copyright year
    fixed tests
    added copyright notice headers
    Replace idX and passPhraseX with ALICE, BOB, CHUCK and DAVE + logging improvements and cleanup
    replace some Convert methods with java 8 ones
    voting suite
    implement crowdfunding distribution of non-claimable currency as paying NXT to issuer instead of locking
    after MS block, the order of transactions in a block gets determined by the forger, instead of by id, default by arrival time
    Reserve distribution rounding test + fix to current supply
    Reserve distribution rounding test + fix to current supply
    allow currency to be both reservable and mintable, fix initial supply (pre-mine) handling
    fixed the tests
    More API work and unit tests
    Enhance CurrencyType to support multiple currency types in the same currency and validate their inter dependencies (unit testing not included)
    1. Increase units per mint to 0.01% of total supply (see Constants)
    2. ApplyAttachment() no longer depends on CurrencyType in preparation for adding currency capabilities
    Replace CurrencyExchange api with currency buy and sell
    Naming change from *CurrencyBalanceQNT to *CurrencyUnits
    re-organize currency exchange testing
    Adapt unit tests to new standard
    Implement additional hashing algorithms for minting
    Currency Reserve unit tests and fixes to the crowd funding system
    updated copyright year
    fixed currency buy test
    added copyright notice headers
    Replace idX and passPhraseX with ALICE, BOB, CHUCK and DAVE + logging improvements and cleanup
    Fix CurrencySuite tests
    replace some Convert methods with java 8 ones
    voting suite
    fixed the tests
    More API work and unit tests
    Exchange tests and todo comment
    Adapt unit tests to new standard
    Initial unit test fixes after testnet reset
    Currency Reserve unit tests and fixes to the crowd funding system
    More exchange tests and APIs
    updated copyright year
    added copyright notice headers
    Replace idX and passPhraseX with ALICE, BOB, CHUCK and DAVE + logging improvements and cleanup
    Fix CurrencySuite tests
    voting suite
    refactoring to avoid MintWorker having to intialize blockchain processing classes that it does not need
    use signed bytes for min/max minting difficulty to allow values 1 to 255
    after MS block, the order of transactions in a block gets determined by the forger, instead of by id, default by arrival time
    allow currency to be both reservable and mintable, fix initial supply (pre-mine) handling
    issuanceHeight must be 0 for non-reservable currencies, initial supply must be 0 for claimable currencies and not exceed total supply
    More API work and unit tests
    Enhance CurrencyType to support multiple currency types in the same currency and validate their inter dependencies (unit testing not included)
    1. Increase units per mint to 0.01% of total supply (see Constants)
    2. ApplyAttachment() no longer depends on CurrencyType in preparation for adding currency capabilities
    Initial unit test fixes after testnet reset
    New API to enable miners (minters ?) to determine the minting target per currency and number of units
    Implement additional hashing algorithms for minting
    Calculate minting target based on the same idea used by Bitcoin and factor the number of units into the target calculation
    Minting tests, minting and reserve increase fixes
    Currency Reserve unit tests and fixes to the crowd funding system
    updated copyright year
    added copyright notice headers
    Replace idX and passPhraseX with ALICE, BOB, CHUCK and DAVE + logging improvements and cleanup
    Fix CurrencySuite tests
    voting suite
    Another round of shuffling code review and adapt the currency test to a database which contains multiple currencies
    use cheaper currency when testing
    Shuffling - test infrastructure
    variable fees for currency issuance
    Delete currency test + one fix in Currency
    Delete currency test + one fix in Currency
    allow currency to be both reservable and mintable, fix initial supply (pre-mine) handling
    More API work and unit tests
    Change currency type from byte to int for allow for future expansion of additional capabilities
    Enhance CurrencyType to support multiple currency types in the same currency and validate their inter dependencies (unit testing not included)
    1. Increase units per mint to 0.01% of total supply (see Constants)
    2. ApplyAttachment() no longer depends on CurrencyType in preparation for adding currency capabilities
    Adapt unit tests to new standard
    Implement additional hashing algorithms for minting
    Currency Reserve unit tests and fixes to the crowd funding system
    More exchange tests and APIs
    updated copyright year
    minor
    added copyright notice headers
    Replace idX and passPhraseX with ALICE, BOB, CHUCK and DAVE + logging improvements and cleanup
    TwoPhasedSuite tests fixed
    quorum param fix in test
    TestGetPendingTransactionVotes -> TestGetPhasingPoll
    broken tests fix
    added getPhasingPolls API, renamed getPhasingVotes to getPhasingPoll
    code formatting in tests
    use full hash instead of just id to identify transactions being voted for
    bugs
    renaming
    test for includeVoters flag in GetPendingTransactionVotes
    transactionLookupAfterVote() test in TestGetAccountPendingTransactionToApproveIds, TestGetPendingTransactionVotes
    updated copyright year
    added copyright notice headers
    Unit tests for trustless asset transfer using phasing and by transaction approval
    renamed pending to phased/phasing
    TestGetPendingTransactionVotes -> TestGetPhasingPoll
    removed blacklist
    HttpSuite -> AbstractHttpApiSuite
    code formatting in tests
    TestGetCurrencyPendingTransactions implemented
    TestGetAssetPendingTransactions implemented, minBalanceModel parameter added to TwoPhasedMoneyTransferBuilder.minBalance
    TestGetAccountPendingTransactions implemented
    TestApprovePendingTransaction -> TestApproveTransaction
    TestGetAccountPendingTransactionToApproveIds -> TestGetVoterPendingTransactions, check for TransactionId added
    transactionLookupAfterVote() test in TestGetAccountPendingTransactionToApproveIds, TestGetPendingTransactionVotes
    TestApprovePendingTransaction
    HttpAPISuite basic class
    GetAccountPendingTransactionToApproveIds fix, test for it
    TestCreateTwoPhased / TwoPhasedSuite
    more createPoll tests
    invalid poll test
    id added to poll json
    voting suite
    Unit tests
    Another round of shuffling code review and adapt the currency test to a database which contains multiple currencies
    after MS block, the order of transactions in a block gets determined by the forger, instead of by id, default by arrival time
    Shuffling - simplify encryption look + merge with feature/ms
    Shuffling tests and fixes
    Delete currency test + one fix in Currency
    Delete currency test + one fix in Currency
    Update test suite
    Eliminate the isUnitTest patch
    Calculate minting target based on the same idea used by Bitcoin and factor the number of units into the target calculation
    Currency Reserve unit tests and fixes to the crowd funding system
    More exchange tests and APIs
    updated copyright year
    added copyright notice headers
    renamed pending to phased/phasing
    phasing tests fixes
    TestGetCurrencyPendingTransactions.sorting test
    code formatting in tests
    TestGetCurrencyPendingTransactions implemented
    TestGetAssetPendingTransactions implemented, minBalanceModel parameter added to TwoPhasedMoneyTransferBuilder.minBalance
    use full hash instead of just id to identify transactions being voted for
    TestGetAccountPendingTransactions implemented
    updated copyright year
    fixed tests
    fixed tests
    added copyright notice headers
    Unit tests for trustless asset transfer using phasing and by transaction approval
    updated copyright year
    added copyright notice headers
    Replace idX and passPhraseX with ALICE, BOB, CHUCK and DAVE + logging improvements and cleanup
    renamed pending to phased/phasing
    replace some Convert methods with java 8 ones
    new simpleIngoingLookup test in TestGetAccountPendingTransactions
    broken tests fix
    TestCreateTwoPhased.unconfirmed() test
    code formatting in tests
    TestGetAccountPendingTransactions - multiple() & sorting() tests
    use full hash instead of just id to identify transactions being voted for
    TestGetAccountPendingTransactions implemented
    updated copyright year
    fixed tests
    fixed tests
    added copyright notice headers
    Replace idX and passPhraseX with ALICE, BOB, CHUCK and DAVE + logging improvements and cleanup
    Unit tests cleanup and refactoring
    Unit tests for phasing with by transaction full hash voting model
    renamed pending to phased/phasing
    TwoPhasedSuite tests fixed
    better checks around pending tx release/refuse
    code formatting in tests
    use full hash instead of just id to identify transactions being voted for
    TestApprovePendingTransaction -> TestApproveTransaction
    bugs
    renaming
    more verbose tests asserts
    tests fix
    tests fixes
    invalidVoteCasting test
    TestApprovePendingTransaction
    updated copyright year
    added copyright notice headers
    Replace idX and passPhraseX with ALICE, BOB, CHUCK and DAVE + logging improvements and cleanup
    renamed pending to phased/phasing
    replace some Convert methods with java 8 ones
    Broken test fix
    TestGetVoterPendingTransactions.sorting
    code formatting in tests
    use full hash instead of just id to identify transactions being voted for
    TestGetAccountPendingTransactions implemented
    TestGetAccountPendingTransactionToApproveIds -> TestGetVoterPendingTransactions, check for TransactionId added
    bugs
    renaming
    transactionLookupAfterVote() test in TestGetAccountPendingTransactionToApproveIds, TestGetPendingTransactionVotes
    tests fixes
    TestApprovePendingTransaction
    GetAccountPendingTransactionToApproveIds fix, test for it
    updated copyright year
    added copyright notice headers
    renamed pending to phased/phasing
    phasing tests fixes
    TestGetAssetPendingTransactions.sorting test
    TestGetCurrencyPendingTransactions implemented
    TestGetAssetPendingTransactions implemented, minBalanceModel parameter added to TwoPhasedMoneyTransferBuilder.minBalance
    use full hash instead of just id to identify transactions being voted for
    TestGetAccountPendingTransactions implemented
    updated copyright year
    added copyright notice headers
    Replace idX and passPhraseX with ALICE, BOB, CHUCK and DAVE + logging improvements and cleanup
    renamed pending to phased/phasing
    replace some Convert methods with java 8 ones
    phasing tests fixes
    removed blacklist
    empty whitelist for by-account test
    no whitelist in by-account test
    TestCreateTwoPhased.unconfirmed() test
    TestGetAccountPendingTransactions - multiple() & sorting() tests
    TestGetAssetPendingTransactions implemented, minBalanceModel parameter added to TwoPhasedMoneyTransferBuilder.minBalance
    holding method added to TwoPhasedMoneyTransferBuilder
    use full hash instead of just id to identify transactions being voted for
    refactoring, implement voting models as enum
    renaming
    bigger testing amount
    more invalid pending txs tests, missing pendingAssetId fix
    2 phased transactions: quorum validation, tests for pending transactions with invalid quorum&maxheight parameters
    TestCreateTwoPhased / TwoPhasedSuite
    updated copyright year
    allow limiting max fees and phasing duration for phasing controlled accounts
    voting models by-hash and by-transaction not allowed for phasing control
    bugs, optimizations, various changes
    Improved phasing test with refactored test objects
    Test 2p-ac with all voting types left
    Test rejecting phased transaction when account control is set
    Sub-object for the SetPhasingOnly phasingParams in the JSON attachment
    Test phasing only with account voting
    Http API: GetPhasingOnlyControl/SetPhasingOnlyControl
    First simple unit test - set and then get
    updated copyright year
    formatting
    voting models by-hash and by-transaction not allowed for phasing control
    Test 2p-ac with all voting types left
    Test rejecting phased transaction when account control is set
    Sub-object for the SetPhasingOnly phasingParams in the JSON attachment
    Test phasing only with account voting
    updated copyright year
    fixed tests
    use full hash only in shuffling registration, test automated shuffling
    shuffling tests
    added copyright notice headers
    HttpSuite -> AbstractHttpApiSuite
    GetAccountPolls -> GetPolls (& isMandatory parameter for getAccount method of GetPolls)
    account in poll json, TestGetAccountPolls
    TestCastVote implemented & added to the VotingSuite
    HttpAPISuite basic class
    more createPoll tests
    invalid poll test
    id added to poll json
    voting suite
    Unit tests
    Another round of shuffling code review and adapt the currency test to a database which contains multiple currencies
    after MS block, the order of transactions in a block gets determined by the forger, instead of by id, default by arrival time
    Shuffling - simplify encryption look + merge with feature/ms
    Shuffling tests and fixes
    Delete currency test + one fix in Currency
    Delete currency test + one fix in Currency
    Update test suite
    Eliminate the isUnitTest patch
    Calculate minting target based on the same idea used by Bitcoin and factor the number of units into the target calculation
    Currency Reserve unit tests and fixes to the crowd funding system
    More exchange tests and APIs
    updated copyright year
    new fees
    test max shuffling size, set shuffling processing full size as 1/2 of real full size
    shuffler restart tests, bugs
    use full hash only in shuffling registration, test automated shuffling
    added Shuffler, made shuffling registration also depend on shuffling full hash
    updated copyright year
    formatting
    enforce that encrypted data are sorted for more efficient duplicates check
    cancellingAccountId can be stored in assigneeAccountId, shuffling stage error checking
    testing, assert assignee after shuffling at
    added DebugTrace logging for shuffling, set assignee account to blamed account on cancel with blame
    new fees
    use full hash only in shuffling registration, test automated shuffling
    added Shuffler, made shuffling registration also depend on shuffling full hash
    test currency and asset shuffling
    fixed shuffling penalty, also check forger balance in tests
    improved blaming, more tests
    more tests and bugs
    also test unconfirmed balances
    shuffling tests
    updated copyright year
    use full hash only in shuffling registration, test automated shuffling
    shuffling tests
    added copyright notice headers
    HttpSuite -> AbstractHttpApiSuite
    GetAccountPolls -> GetPolls (& isMandatory parameter for getAccount method of GetPolls)
    account in poll json, TestGetAccountPolls
    TestCastVote implemented & added to the VotingSuite
    HttpAPISuite basic class
    more createPoll tests
    invalid poll test
    id added to poll json
    voting suite
    Unit tests
    Another round of shuffling code review and adapt the currency test to a database which contains multiple currencies
    after MS block, the order of transactions in a block gets determined by the forger, instead of by id, default by arrival time
    Shuffling - simplify encryption look + merge with feature/ms
    Shuffling tests and fixes
    Delete currency test + one fix in Currency
    Delete currency test + one fix in Currency
    Update test suite
    Eliminate the isUnitTest patch
    Calculate minting target based on the same idea used by Bitcoin and factor the number of units into the target calculation
    Currency Reserve unit tests and fixes to the crowd funding system
    More exchange tests and APIs
    updated copyright year
    disallow starting multiple shufflers for the same recipient account, regardless of shuffling
    enforce that encrypted data are sorted for more efficient duplicates check
    additional duplicates check to prevent incorrect blaming, sort instead of shuffle, check that public key is canonical too
    cancellingAccountId can be stored in assigneeAccountId, shuffling stage error checking
    testing, assert assignee after shuffling at
    added DebugTrace logging for shuffling, set assignee account to blamed account on cancel with blame
    new fees
    test max shuffling size, set shuffling processing full size as 1/2 of real full size
    shuffler restart tests, bugs
    use full hash only in shuffling registration, test automated shuffling
    Shuffler can use waitingTransactions and rebroadcasting instead of its own queue
    added Shuffler, made shuffling registration also depend on shuffling full hash
    test currency and asset shuffling
    fixed shuffling penalty, also check forger balance in tests
    improved blaming, more tests
    more tests and bugs
    also test unconfirmed balances
    shuffling tests
    updated copyright year
    fix compilation
    added copyright notice headers
    Replace idX and passPhraseX with ALICE, BOB, CHUCK and DAVE + logging improvements and cleanup
    Fixed voting cast test since the voting API has changed
    Voting System tests fixes (validVoteCasting being failing because of weird result)
    VS tests fix
    added phasing_poll_result table
    bugs
    extended TestCastVote
    TestCastVote implemented & added to the VotingSuite
    updated copyright year
    added copyright notice headers
    HttpSuite -> AbstractHttpApiSuite
    GetAccountPolls -> GetPolls (& isMandatory parameter for getAccount method of GetPolls)
    account in poll json, TestGetAccountPolls
    TestCastVote implemented & added to the VotingSuite
    HttpAPISuite basic class
    more createPoll tests
    invalid poll test
    id added to poll json
    voting suite
    Unit tests
    Another round of shuffling code review and adapt the currency test to a database which contains multiple currencies
    after MS block, the order of transactions in a block gets determined by the forger, instead of by id, default by arrival time
    Shuffling - simplify encryption look + merge with feature/ms
    Shuffling tests and fixes
    Delete currency test + one fix in Currency
    Delete currency test + one fix in Currency
    Update test suite
    Eliminate the isUnitTest patch
    Calculate minting target based on the same idea used by Bitcoin and factor the number of units into the target calculation
    Currency Reserve unit tests and fixes to the crowd funding system
    More exchange tests and APIs
    updated copyright year
    added copyright notice headers
    Replace idX and passPhraseX with ALICE, BOB, CHUCK and DAVE + logging improvements and cleanup
    replace some Convert methods with java 8 ones
    GetAccountPolls -> GetPolls (& isMandatory parameter for getAccount method of GetPolls)
    account in poll json, TestGetAccountPolls
    updated copyright year
    added copyright notice headers
    Replace idX and passPhraseX with ALICE, BOB, CHUCK and DAVE + logging improvements and cleanup
    Voting System tests fixes (validVoteCasting being failing because of weird result)
    createPollResponse check
    refactoring, implement voting models as enum
    moved out the counting logic to PollCounting
    TestCreatePoll fixes
    more createPoll tests
    invalid poll test
    issueCreatePoll, TestCreatePoll first working test
    id added to poll json
    voting suite
    updated copyright year
    fixed tests
    copyright notices
    Epoch time test
    updated copyright year
    added copyright notice headers
    More test cases
    More tests
    Testing JSon text
    JSon text
    More test cases
    More tests
    Testing JSon text
    JSon text
    Hide header buttons for disabledAPIs
    updated copyright year
    Implement data download and view links and view modal
    Initial work on tagged data search page - not done
    Account properties page, initial work on modals, local signing
    Remove multiqueue of GET requests since it causes instability in some configurations
    Add nrs.simpleview.js to index.html script includes
    Remove references to the ZeroClipboard component
    Shuffling integration into index.html
    Implement Hallmark dialog
    Add shuffling page and modal to index.html loader
    ShapeShift integration - plugin code ported to core
    Issue 312 (QRCode scanning bug): replaced qrcode and jsqrcode js libraries with ZXing core and javase java libraries; added EncodeQRCode and DecodeQRCode APIs
    Add ledger entry info modal activated by clicking an entry timestamp on the dashboard
    Scan the QR code for the signature
    Load html5-qrcode
    Implement calculation modal and abstract the hash algorithms selection into a UI element
    Add async.js to coordinate multiple asymc requests
    added copyright notice headers
    Dialog for setting mandatory approval (mandatory phasing)
    Account Control side menu
    Replace jssha256 with sha256 methods of CryptoJS
    Add simple pie chart representation for poll results
    Print environment information about the client environment to the browser JavaScript console
    Removed jquery.tablesorter.js library after evaluation
    Added JS libraries d3.js (BSD) and jquery.tablesorter.js (MIT)
    Added concept for reusable UI elements for modals, first UI element for more comfortable block height input in forms
    Added simple transaction type based notification system for client, temporary bug fixing for transaction approval
    Added overview page for installed plugins
    Initial readme files for plugin system (DEVELOPERS.md, INSTALLATION.md, SECURITY_WARNING.md)
    Added constants (nrs.constants.js) to client
    Added moment.js library (MIT) for date calculations, added modal form element for auto-update estimated block reach date for entered block heights
    adding more pages
    Switched from completely removing blacklist-peer button to just setting to disabled when NRS.needsAdminPassword is true, removed HTML loading of previously removed voting_system modal/page files
    Started to rework transactions page, centralized transaction type information like type icon or i18n string in nrs.transactions.type.js file
    UI for adding and blacklisting peers
    Removed includes of old approval files in index.html
    Temporarily moved v2p development template html file for easier merging with develop
    Added handlebars.js library (MIT) for more flexible/robust template handling
    Added HTML modal template for secret passphrase form dialog, new html/modals/templates.html file, basic integration in index.html for one exemplaric transaction dialog
    Reactivated partially finished 2-phased/approval dialog for send-money transaction
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Replaced 5 i18n key with namespaces to avoid problems with translation key parsing
    Changed locales folder organization to a file structure directly usable with i18next parser and on crowdin platform without manual processing steps necessary
    Replaced direct loading of page/modal HTML contents in index.html by wrapper functions for more future flexibility in building stuff together
    Renamed pages file ui/html/pages/polls.html to voting_system.html
    Overall functionality testing, reviewed file structure, tests on different browsers, tests on main net, final refactoring commit
    Moved header, lockscreen, sidebar, sidebar context infos to own files, checked integrity
    Finished modal refactoring, checked integrity
    Moved modals to own files, checked integrity
    Moved modals to own files, checked integrity
    Moved modals to own files, checked integrity
    Moved modals to own files, checked integrity
    Moved 4 modals to own files, checked integrity
    Moved 4 modals to own files, checked integrity
    Switched to combined modal file structure organization model, regrouped already added modals, rechecked integrity
    Moved asset_order_modal, transfer_asset_modal, transfer_currency_modal to own files, checked integrity
    Moved stop_forging_modal, start_forging_modal, cancel_order modal to own files, checked integrity
    Started moving modals from index.html to own files, moved lease_balance_modal to own file, checked integrity
    Moved news_page, blocks_page to own file, checked integrity
    Moved peers_page to own file, checked integrity
    Moved settings_page to own file, checked integrity
    Moved monetary system pages (3), DGS pages (5) to own files, checked integrity
    Moved contacts_page, polls_page, aliases_page, asset exchange pages (5) to own file, checked integrity
    Moved transactions_page to own file, integrity checked
    Moved dashboard_page to own file, integrity checked
    Add central new IDs sidebar and content, created html/pages/ and html/modals/ folder, moved messages page to own file, JS include code for new pages
    Enhance exchange buy/sell offers to include offer height as link to the exchange offer transaction info
    #218 Do not display exchange offer with 0 balance - fix label
    Fixes for controllable icon and search currenices input width
    Fix html bug in import contacts not storing json data correctly
    Fix html tag bug in import contacts button
    Added Search Currencies
    Fix no currencies message
    Add missing internationalization of Import and Export contacts buttons
    Add import contacts functionality to Contacts page
    Fix decimals in reserve increase
    Minor refactoring and cleanup
    Fix typing inside the search box
    Remove the mint button
    minor, prepping for poll results
    Button and functionality added to GUI to export contacts
    use signed bytes for min/max minting difficulty to allow values 1 to 255
    Difficulty between 2 and 127
    Capitalization error and some UI tweaks to founders model
    Moved Founders link and added blocks until active to model
    dividend payment UI help
    replace "per asset" with "per share"
    default dividend payment should not be zero
    Corrected delete alias model and added delete alias transaction type information to UI
    Fix delete alias button
    Send currency id instead of currency code in currencyBuy and currencySell requests
    Fix for exchange decimal issue
    Move the issue currency to the last position and remove the direct exchange booth since it doesn't work
    Updated Delete Model and added some spaces between buttons on My Currencies
    Fix founders dialog to reflect the initial supply given to the currency issuer
    Clarify increase reserve dialog and no longer reduce the initial supply from reserve supply
    Remove founders link from exchange booth
    Currencies table cleanup, reserve - initial fix
    Adding advanced options to dividend payment modal.
    Added currencies to account info model
    Add claim rate to claim dialog
    1. Improve Exchange History table.
    2. Fix tabbing order in Issue Currency dialog.
    Fix WebStorm inspections
    Format the total NXT reserved label
    Calculate total nxt reserved in reserve dialog
    Fix decimal calculations in minting dialog
    Fix refresh problem on the exchange booth
    Fix view founders table and currency issuance conversions
    Some work on the reserve and claim dialogs not done yet
    Naming changes, descriptions and adding total column
    Fix exchange rate calculation in MS dialogs
    all voting pages nearly finished, only need results
    changing tables to one page each
    leveling ui from small changes uncommited
    Add exchange requests table to exchange dialog
    Correction to Reserve Currency dialog
    Improvements to reservation model
    Disable/Enable correct inputs for currency issue model
    Add scrypt algorithm and fix label for reserve supply
    Added more information to currency founders model
    More improvements to Mint currency model
    Improvements to Mint currency model
    Improvements to Claim currency and Reserve currency models
    Refactoring of the MS code including:
    1. Fix all WebStorm inspections in nrs.monetarysystem.js
    2. Add the Currency Types as constant and added is* method for each
    3. For table models built by code, indented the tabs to make it more readable
    More fixes to currency sell dialog
    Fix decimal positions in buy and sell currency dialogs
    Added a few lines to the english language file and last commit made MS Action links buttons
    Added a few lines to the english language file for MS and updated a description
    Minor updates for MS UI
    Started Currency Founders model.  Not tested yet
    1. Exchange offer decimal positions
    2. Exchange offers are now published from the currencies table not from a menu item since this provides the data needed for decimal calculation
    3. I removed the height in hours since its unreliable and used the same control as in currency issuance height (perhaps we can do better but at least it looks the same in both places)
    1. Support decimal position in issue currency dialog
    2. Support units terminology, decimal position and fat finger warning in currency transfer
    3. Localization messages
    All of MS's transaction types are added into GUI now.  Also made some more minor GUI fixes for MS
    More GUI tweaks for MS and Issue currency bug fixed
    More GUI tweaks for MS
    GUI tweaks for MS
    Added minting model. Needs testing still
    Added approval info to dashboard transaction list for easier testing
    Added add-account functionality for tx approval dialog, extended amount user interface for supporting by-balance voting model
    Added .modal-context-help class to app.css for generic modal context icon formatting
    Moved tx approval dialog invocation to advanced link (from approve by link)
    Added model for claiming a currency
    Added Nxt adress auto-formatting, +/- account ui structure, help icon to 2-phased tx UI modal
    Added in model for reserve some of a currency and testing bitmask for currency type display
    Started working on 2-phased transaction UI, new tabbed transaction modal dialog module, new nrs.modals.approve.js logic file
    VS ui cast vote backend and list my polls
    increased default purchase delivery deadline to 168 hours (1 week)
    Started Delete Currency
    More Publish Exchange Offer fixes and tweaks
    Publish Exchange Offer fixes and tweaks
    Some UI tweaks for the Currencies page
    Word on Publish Exchange Offer UI to be more user friendly
    Fixed algorithm variable on issueing currency and changed buy and sell dialogs to use currency code
    Some UI tweaks for Issue Currency
    A few fixes for issue currency types and using the decimals value with the units
    Changed MS Exchange History to one table for both all exchanges and my exchanges
    Work on My Exchange History page
    dynamic sliders added to cast vote
    Work on MS Exchange and Buy/Sell dialogs
    Work on MS Buy/Sell dialogs
    VS ui, listing and starting cast vote modal
    More work on MS buy/sell GUI
    Gave a little more room for NXT addresses in the sidebar of the messages page
    Started work on MS buy/sell GUI
    A few small fixes and improvements for the MS
    More work on Claimable currency for Issue Currency
    More work on Claimable currency for Issue Currency
    More work on Issue Currency
    Update FontAwesome to newest version, added some more icons to transactions, changed MS icon in sidebar, and added option on currencies page to show all or just the users
    Fix for DGS ui when using corporate theme
    Added modal for showing feedback to DGS goods
    Minor layout tweaks for DGS main page UI
    Finished frontend design of DGS main page
    Added DGS main page info header, header logic
    Adding code so that the 'dividend payment' transaction data can be
    seen in the transaction modal.
    Added model for transfer currency based on transfer asset
    More MS GUI work
    Fixed pixel bug on login credentials form field
    Added missing decimals field, corrected text to non-shuffleable, and added in the expiration height
    Added custom headlines for search result pages
    All Currencies links now work and more work on Monetary System's main page
    Dividends payment UI
    Started work on monetary system main page and fixed a JS error
    Added more code for Issue Currency, issueing an exchangable currency should now work
    Added DGS tag list, browsing by tags
    Some JS refactoring to get a more generic entry point to DGS page
    Added additional search box for DGS product search
    Added more code for Issue Currency and started Exchange History page
    create poll fixed completely, poll information model created, polls now listed
    delete alias ui, had trouble with genesis block, so untested
    Hide fee input by default when sending NXT
    minor bugs
    Display polls on page, start on my polls
    Fixed Forged Block count because of pagination and fixed more styles for corporate theme
    Temporary help for sidebar height by putting Connected status and Forging status on the same line
    finished modal for create poll
    getting stuff started ui
    A few more updates
    Added table row for displaying your forged balance in account details
    Increased font size of NRS version to make it more noticeable and easier to click on
    Clicking connected indicator in sidebar brings you to the peers page
    Ready for testing of new Dashboard design.  Needs optimization still.  Added missing current block and connected status
    Updated html to enable pagination on Blocks page
    Left in id from original copying of the form-group, removed now
    Added options to change the number of items per page to display
    Blank <span> for a styled checkbox.  It shouldn't have any affect on the default theme since it's empty
    Some work on issuing exchange offer and listing all available currencies
    A few more adjustments
    Adjusted some styles to work better and added a class to each News box
    Removed <br> that wasn't needed anymore because of css styling
    Added link to Account Balance to bring up Account Information and adjusted the bottom margin of the item above it
    1. IssueCurrency client side dialog
    2. Implement controllable currency type - currency which can only be transferred to/from issuer and only issuer can publish exchange offer
    Trade history type.
    Added span for account balance in sidebar
    Issue Currency dialog - cont
    Added Change Theme button
    Trade history modal.
    Transfer history.
    Pagination.
    Experiments with client side asset issuance
    Asset Distribution.
    Switch between global asset trade history and just your trades for the specific asset.
    Trade history page.
    Show buyer and seller in asset trade history table.
    Merchant account regex handling.
    Add actions tab to transaction info modal.
    Auto-detect language.
    Move lockscreen to the top.
    Disable spell check on public key and referenced transaction hash inputs.
    DGS block passed.
    Multilingual fix.
    Transaction type removals.
    Minor.
    Language update.
    Minor.
    Update notification fix.
    Old browser warning fix.
    Minor.
    Rename jquery-x.js to jquery.js
    Show number of buy orders again.
    Scrollbar fix.
    Minor.
    Languages.
    Numeric account ID.
    Minor.
    Simplify header menu.
    Show message indicator on transactions page.
    Make purchase message always encrypted.
    Separate buy and sell side of DGS.
    Note to self.
    Asset order cancellation fix.
    Minor.
    Account QR code.
    Design customizations.
    Alias sale to anyone changes.
    DGS search page.
    Minor alias changes.
    Minor.
    App communication.
    Global message form fields.
    Transfer asset modal changes (message support).
    Minor alias fixes.
    Minor.
    More languages.
    Alias & message changes.
    Passphrase login length check.
    Remove nxtcrypto RSS feed.
    Disable form autocompletion.
    PKAnnouncement adjustments.
    Public key announcement support.
    Enable certain elements at specific block height.
    New login page design.
    Minor.
    Even more multilingual support.
    More multilingual support.
    DGS delivery deadline fix.
    Internationalization.
    Minor DGS fixes.
    Encrypted messaging internal changes.
    Payment with message support.
    Minor.
    Advanced / basic settings toggle.
    Temporary link.
    Add referenced transaction / no broadcast options.
    Allow not broadcasting of transaction.
    Minor alias sale changes.
    Allow multi-line tokens.
    Minor.
    Various minor changes.
    Minor.
    Minor.
    Add marketplace listings to account modal.
    Remember passphrase setting.
    Missed passphrase sightings.
    Use "passphrase" instead of "secret phrase".
    12 or 24 hour date format setting.
    Add "NXT" label to price input fields.
    Hide fee / deadline by default - show via advanced toggle.
    Lease balance period, show nr of days (avg).
    Masked input for reed solomon account number.
    Privatize variable.
    Decode token functionality added.
    Add dependencies.
    Remove cruft.
    Stronger warning when user chooses own secret phrase.
    Hide console log button (setting).
    Make encrypted messages the default.
    Remove nextcoin.org from news section.
    Inline message sending (encrypted).
    Allow decrypting of messages.
    Move all encryption functions to nrs.encryption.js.
    Remove display of numeric account IDs.
    Remove default DGS page.
    Purchase modal adjustments.
    Dedicated file for decryption routines.
    Extra modals.
    Minor.
    Search by seller ID.
    Minor: Add "nothing found" messages.
    Minor CSS/HTML.
    Minor.
    Decrypt note form.
    Encrypted messages.
    Alias buy.
    Add alias sale cancellation to all transaction displays.
    Cancel Alias Sale.
    Aliases sell/buy.
    Minor.
    Show purchases and pending orders, add refund functionality.
    Purchase products, show newest products.
    Minor.
    Show item info in modals.
    DGS listing tag validation.
    Gzip library.
    Add aesEncrypt/aesDecrypt.
    Remove xoredData (not used anywhere, using AES instead).
    More DGS modals.
    My DGS listings page.
    Add new transaction types to transaction page dropdown.
    DGS page and some modals.
    Unconfirmed to available balance.
    Typo.
    Minor AE.
    More AE.
    Asset exchange no longer shows all assets. User must bookmark assets now instead.
    Remove featured asset listings.
    Block type toggle button.
    assignAlias to setAlias conversion.
    Featured assets list.
    Add clear button to search fields.
    Alias search modifications.
    Pass phrase is lowercase.
    Show quantity of asset available for transfer in asset transfer modal.
    Wider message sidebar if Reed solomon is selected.
    Autolink alias URi's.
    Minor reed solomon changes.
    use Reed Solomon by default.
    Alias search on aliases page.
    Added "help" menu.
    Asset transfer warning setting.
    Minor fix for plus / minus button change.
    Add account info option in message sidebar context menu.
    Unconfirmed transactions and other minor edits.
    Added guaranteed balance.
    Minor.
    Do not show logout dropdown when not forging (firefox).
    Make AE visible by default.
    Correct singular form for warning.
    isScanning behavior.
    Minor.
    Minor.
    Asset exchange UI.
    Minor.
    Minor.
    Update notification fix.
    Nxtcommunity RSS feed.
    Minor.
    Minor.
    Asset exchange clear search button.
    Reed Solomon support.
    Minor.
    Minor.
    Show warning when submitting amount / fee higher than user specified.
    Minor.
    Asset exchange search.
    use getBlockchainStatus API call
    Ajax multi queue support.
    Center without javascript.
    Show different message when the blockchain is downloading.
    Remove beta warning.
    moved tools to ui
    Minor.
    Balance leasing minor.
    Retry ajax call on timeout (GET requests only).
    Fixed bug in asset order modal (button text).
    Disable news section by default.
    Minor.
    Show link to asset in transaction modal.
    Show account name/description in account modal.
    Shows lessors list (account leasing).
    Show block modal for all blocks.
    Fixed non-responsive browser state issue.
    Minor changes everywhere.
    Added setAccountInfo API (name/description).
    Minor.
    Added new transaction types to transaction modal.
    Show account leasing details.
    Added lease balance modal.
    Don't animate when not forging.
    Animated forging indicator.
    Asset exchange priceNQT is per asset, not per order.
    Disable message encryption for now (XOR).
    Try/Catch.
    Error checking for NQT.
    Removed new address format.
    Remove RSS feed.
    Transfer Asset Command Field and some more NQT.
    Asset exchange NQT.
    More reorganization.
    Even more splitting..
    More splitting up of javascript.
    Split javascript in multiple files.
    Moved extending of javascript natives to dedicated file.
    Reorganization of javascript files.
    Work on NQT.
    Encrypted messages phase 1.
    Contacts page modifications.
    Show new address format in account details modal.
    Removed unique alias feature from asset issuance.
    Reorganization of RSS feeds.
    Explanation of types of aliases (uri, account and other).
    Changed message shown when account does not have a public key.
    Testnet warning.
    Message encryption (unfinished).
    Settings changes.
    Allow use of new address format everywhere.
    Allow copying of new address format.
    Updated RSS news section (new forum included).
    Search box for transactions / blocks / accounts.
    Solomon reed account number support (in send xyz dialogs)
    View blocks generated by your account.
    Stop forging on logout.
    Added unique suffix possibility to assets (via alias) as well as a few other fields (url, tags, ..)
    Ability to copy asset id / asset link.
    Loading indicators for message and asset exchange sidebar.
    Dropdown no longer cut off.
    Asset ignore list functionality.
    Allow clicking on asset / nxt balance to fill sell / buy order form.
    Added minimum fee message popover.
    Generate token functionality.
    Remember password functionality (during browser session).
    Forging  now works on trustless servers too, includes warning.
    Only prepare transaction (sign) if not running locally.
    Enable local transaction signing.
    Copy link for directly sending messages or Nxt to your account.
    Call attention to asset issuance fee.
    Added console logging of API requests.
    Added "Send Nxt" option to messages sidebar context menu.
    Made alias clickable.
    Easily add account ID to contacts after sending Nxt / messages.
    Styling: Angle in navigation now points to the right.
    Copy account ID to clipboard.
    First login message / public key warning.
    Contacts can now be selected in forms via recipient button.
    Trim password verification (whitespace).
    Actions tab in user info modal (send nxt, message, or add as contact).
    Add fee / deadline form fields where not present.
    Make asset exchange work in Firefox private mode (no indexedDB available)
    Changed asset order modal usability.
    New NRS client initial commit.
    Unit tests for extensions.js
    Encrypt/Decrypt unit test
    More JavaScript unit tests
    More unit tests
    Use local qunit CSS file
    Initial work on JavaScript unit tests (see: http://localhost:7876/qunit.html)
    Remove multiqueue of GET requests since it causes instability in some configurations
    Remove references to the ZeroClipboard component
    fixed exception: don't call html5_qrcode_stop() if not started
    added call to html5_qrcode_stop() when raw transaction details modal closed
    removed obsolete qrcode libraries
    Implement signing for raw transaction bytes modal and allow reading the signature into the text area from a QR code using html5-qrcode
    GPL, developer agreement and license info
    updated licenses files
    version
    Add simple pie chart representation for poll results
    Removed jquery.tablesorter.js library after evaluation
    Added JS libraries d3.js (BSD) and jquery.tablesorter.js (MIT)
    Added moment.js library (MIT) for date calculations, added modal form element for auto-update estimated block reach date for entered block heights
    Added handlebars.js library (MIT) for more flexible/robust template handling
    highlight.js link
    Account QR code.
    Design customizations.
    Internationalization.
    Masked input for reed solomon account number.
    Gzip library.
    New crypto files.
    Add clear button to search fields.
    Autolink URLs in asset description.
    Ajax multi queue support.
    moved tools to ui
    Retry ajax call on timeout (GET requests only).
    Asset exchange NQT.
    Encrypted messages phase 1.
    Solomon reed account number support (in send xyz dialogs)
    Enable local transaction signing.
    Updated licenses.
    New NRS client initial commit.
    Favicon.
    updated copyright year
    added copyright notice headers
    moved tools to ui
    moved worker_sha256.js to tools
    embedded jetty
    update checker, https://bitcointalk.org/index.php?topic=345619.msg4294180#msg4294180
    updated copyright year
    GPL, developer agreement and license info
    moved tools to ui
    New NRS client initial commit.
    moved tools to ui
    New NRS client initial commit.
    Update FontAwesome to newest version, added some more icons to transactions, changed MS icon in sidebar, and added option on currencies page to show all or just the users
    Updated Font Awesome library to 4.2
    moved tools to ui
    New NRS client initial commit.
    Update FontAwesome to newest version, added some more icons to transactions, changed MS icon in sidebar, and added option on currencies page to show all or just the users
    Updated Font Awesome library to 4.2
    moved tools to ui
    New NRS client initial commit.
    Update FontAwesome to newest version, added some more icons to transactions, changed MS icon in sidebar, and added option on currencies page to show all or just the users
    Updated Font Awesome library to 4.2
    moved tools to ui
    New NRS client initial commit.
    moved tools to ui
    New NRS client initial commit.
    moved tools to ui
    New NRS client initial commit.
    Update FontAwesome to newest version, added some more icons to transactions, changed MS icon in sidebar, and added option on currencies page to show all or just the users
    Updated Font Awesome library to 4.2
    moved tools to ui
    New NRS client initial commit.
    Updated Boostrap to version 3.3.2
    Update bootstrap to 3.2.0
    moved tools to ui
    New NRS client initial commit.
    Update FontAwesome to newest version, added some more icons to transactions, changed MS icon in sidebar, and added option on currencies page to show all or just the users
    Updated Font Awesome library to 4.2
    moved tools to ui
    New NRS client initial commit.
    Updated Boostrap to version 3.3.2
    Updated Boostrap to version 3.3.2
    Update bootstrap to 3.2.0
    moved tools to ui
    New NRS client initial commit.
    Updated Boostrap to version 3.3.2
    Update bootstrap to 3.2.0
    moved tools to ui
    New NRS client initial commit.
    Updated Boostrap to version 3.3.2
    Update bootstrap to 3.2.0
    moved tools to ui
    New NRS client initial commit.
    Added two fonts for corporate theme
    Added two fonts for corporate theme
    Use base/quote currency labels in Shapeshift modals
    Added missing translation keys and fixed translations
    String.startsWith is not supported on IE < 12. Substituted with String.indexOf(...) == 0
    Fund new accounts using sendamount instead of shift to get better rate
    Add hourglass indicator to the loading of shift modal
    Add clear results link to the my exchanges table to prevent privacy leak
    Warning before funding a new account using ShapeShift
    Do not report certain errors in the page status and revert to rsAddress in Shift since pubKey does not work
    Do not change the page status to error in case one of the exchanges has failed
    Replace (the misleading) RSAddress parameter with pubKey
    Refresh the shapeshift data only when the exchange page is the current page
    Fix exception caused by sendamount failure
    Clear the previous QR code from the modal when its reopened so that under no circumstances we'll show an outdated code to the user
    Use wait cursor when loading information from shapeshift in the sendamount dialogs
    Logging improvement and fix case when quotedRate is not returned by sendamount
    Handle shape shift down status
    Warn about privacy leakage caused by the exchange page
    Fix passphrase field id in shapeshift modals
    Fix local signing problem of from NXT exchanges and replace passphrase entry field with standard template
    Show both shift and sendamount rates and their difference
    Fund new account with BTC
    Store current coin selection in client storage
    Intermediate work on exchange settings in the settings page - not done
    Change logging and date format to use core functions. Localize modal titles
    Replace the term "currency" with "coin". Fixed QR code generation. Added some translations.
    ShapeShift integration - plugin code ported to core
    updated copyright year
    Localization of table headers and messages rendered by handlebars and more warning messages
    SimpleView helper
    updated copyright year
    Implement calculation modal and abstract the hash algorithms selection into a UI element
    added copyright notice headers
    Make updated personal account info show before transaction is confirmed.
    Correctly translate account info name on language change.
    Internationalization.
    Add dependencies.
    moved tools to ui
    Set current account name/description when opening modal.
    Minor NQT.
    Added setAccountInfo API (name/description).
    Support token generation when using remember passphrase and use the remember passphrase to sign bytes in case passphrase not specified
    updated copyright year
    Fix error callback
    added copyright notice headers
    Implement local signing for upload and extend transactions by reading the actual file uploaded to the server from JavaScript and verifying the server hash calculation
    Refactor the NRS.sendRequest function - we no longer support specifying the function name as the 2nd parameter instead of the data parameter. Since there is always a callback we no longer need to check for its existence. Small method refactoring and fix syntax errors pointed by WebStorm
    Fix WebStorm inspections
    Replace jssha256 with sha256 methods of CryptoJS
    #273 Wrap URLs embedded in description text with <a> tag and fix potential XSS problem see asset id 15615013723013595254 on testnet
    fixed decryption
    Fixed self note decryption
    Make sure multiple attachments (plain text, encrypted, message to self) are all shown simultaneously.
    Decrypt note form fix.
    Note to self.
    Minor.
    Allow empty messages.
    Messages page changes.
    Encryption changes.
    Encryption changes.
    More multilingual support.
    Encrypted messages minor.
    Internationalization.
    Minor.
    Payment with message support.
    Various minor changes.
    Minor.
    Encryption error messages.
    msCrypto for IE.
    Use "passphrase" instead of "secret phrase".
    Minor.
    Handle decryption failure.
    Privatize variable.
    Throw error if browser does not support window.crypto
    Add dependencies.
    Inline message sending (encrypted).
    Allow decrypting of messages.
    Move all encryption functions to nrs.encryption.js.
    Maximum encryption cache.
    Use correct identifier for encryption cache.
    Dedicated file for decryption routines.
    Infrastructure work + hide main side menus based on disabled tags and APIs
    updated copyright year
    Add file upload modal link as menu item
    Retrieve expired text transaction as well and add download link to data content dialog
    updated version, renamed Tagged Data to Data Cloud
    Shorten tagged data columns to 20 char + ellipsis
    Try to download expired data using the download link from the transaction info dialog. Handle error conditions. Name change.
    Remove workaround for getAllTaggedData and remove client side fee estimation for file upload
    Move upload and extend modals from messages to tagged data and fix the view dialog escaping
    Add download and view link to the transaction info dialog
    Implement data download and view links and view modal
    Work on a table to present the tagged data. When no search criteria exists show all tagged dat. Move file upload function to the tagged data page.
    Initial work on tagged data search page - not done
    updated copyright year
    updated version, renamed Tagged Data to Data Cloud
    Load server constants syncroniously so that it is always available upon start up
    typo in icon name
    Submit the new delete asset shares transaction instead of transfer asset to genesis and add delete asset shares to the transaction info dialog
    transaction icons
    Create shuffling icon
    Asset Delete transaction type and translations
    Define account property transaction types
    Shuffling integration into transaction types
    Preliminary work on replacing transaction type/subtype magic numbers with self describing code
    added copyright notice headers
    Punable data - added extend action to upload transaction info, extend dialog which uses the same fee payed by the upload transaction and transaction info for extend transaction.
    Tagged data transaction - intermediate work on transaction info, local signing, client side fee calculation and transaction subtypes from server.
    Fixed mandatory approval transaction icon and name
    More fault-tolerant way of initializing NRS.transactionTypes by adding generic unknown-fields for transaction types/subtypes not known by client, added serverConstants to NRS.transactionTypes array
    Changed Alias Sale to Alias Sale/Transfer
    Added simple transaction type based notification system for client, temporary bug fixing for transaction approval
    Added badge with number of Approval Requests to sidebar menu item, added regular NRS.pages.dashboard method for more in-time dashboard updates
    First (rough) version of approval dialog
    Added constants (nrs.constants.js) to client
    Added tooltip to transactions type navigation
    Started to rework transactions page, centralized transaction type information like type icon or i18n string in nrs.transactions.type.js file
    updated copyright year
    added copyright notice headers
    Log account settings and additonal properties to the JavaScript console
    Replaced static ID list on user modal event listener with more flexible class action identifier for looser coupling
    Table based approach for user data DB lead to unsolvable conflicts on concurrent DB init, switched to DB based approach, refactoring of migration code
    Switched to account based user DB tables to separate user data from different account, postponed DB init (after login), started legacy table transfer mechanism
    Moved contacts navi to icon in header (top right)
    Added dynamic sidebar creation, new NRS.setup.PAGENAME methods for setup tasks
    #251 Updating an existing contact prevents it from displaying
    Fix bug to use import contacts button twice in Chrome
    Fix html bug in import contacts not storing json data correctly
    Remove debug information and add info/warning messages to import/export contacts functionality
    Add import contacts functionality to Contacts page
    Button and functionality added to GUI to export contacts
    Internationalization.
    Add dependencies.
    Remove display of numeric account IDs.
    DataLoaded method.
    Make sure deleted contact is no longer shown in dropdown.
    Minor DB.
    Set timeout after DB calls in contact page.
    Contacts fix.
    Contacts fix.
    use Reed Solomon by default.
    RS contact page.
    Reed Solomon support.
    moved tools to ui
    More splitting up of javascript.
    better dividend height error messages
    updated copyright year
    Add warning when dividend height is lower than asset issuance height
    Refactoring, style
    added copyright notice headers
    Refactoring - replace the hardcoded Genesis account with the genesis account provided by server
    Adding validation to limit the smallest decimal amount in the
    dividend payment dialog.
    dividend payment UI help
    replace "per asset" with "per share"
    Fixing bug in UI and back-end dividend-related code.
    Dividends payment UI
    removed exchange booth pre-fork warning
    Infrastructure work + hide main side menus based on disabled tags and APIs
    Use the new NRS.getBlockLink() when crafting a block info modal link
    updated copyright year
    Use standard height selection widget for expiration height
    Do not escape total nxt in confirm exchange tooltip
    Currency buy pre-fork warning
    Fix rounding problem for effective rate calculation
    fixed executed exchanges buttons
    Submit rate not effective rate to CurrencyBuy/Sell, improve labels and descriptions
    Automatically calculate exchange rates based on available exchange offers - needs more testing
    Fix typo in variable name
    Fix decimals for rate entry when publishing exchange offer + fix various Webstorm inspections
    Remove unused currency delete modal
    Remove unused currency mint modal
    Reuse NRS.getAccountLink instead of composing the <a> tag
    Fee calculation: update all modals with the fee calculation UI and remove modal and widget specific calculation. Still not done:
    Asset and currency issuance
    Asset/Currency buy/sell
    Fee calculation for account without public key
    More UI work
    Consolidate all transaction link Html generation into a single method
    Add account and currency links to exchange booth
    Refactor "price" names into "rate" - no functional impact
    Fix formatting problem and use decimal value instead of formatted value since this is the value submitted to the server
    added includeAssetInfo and includeCurrencyInfo parameters to getAccountAssets, getAccountCurrencies, getAccountExchangeRequests, getExpectedAssetTransfers, getExpectedCurrencyTransfers
    Currency transfer page
    default to false for almost all includeXXX optional API parameters
    Move MS specific code from modals to ms
    Fix MS sync bug which caused the exchange booth to display empty + log error messages for parallel requests
    Show phased and unconfirmed transaction in the MS exchange booth
    added copyright notice headers
    Verify local signing for MS transactions
    Add permanent message option to the marketplace purchase feedback modal + various simple fixes
    Fix alignment
    Merged again - change currency reserve dialog to use whole NXT - not done
    Change currency reserve dialog to use whole NXT - not done
    Fix indentation in MS code
    renamed pending to phased/phasing
    Remove unconfimed transactions from MS exchange booth
    WebStorm inspections and label fixes for MS
    Add withoutWhitelist=true to asset/currency approval page item select
    Replaced static ID list on user modal event listener with more flexible class action identifier for looser coupling
    Replaced static ID list on transaction modal event listener with more flexible class action identifier for looser coupling
    Fix pagination for approval request pages
    Approval requests page for currency transaction approvals
    Add Send Currency button which invokes the currency transfer dialog
    New method NRS.appendSubHeaderToTSMenuItem to add sub headers to sidebar items, combined two marketplace main sidebar navigation items to one separated by My-Store sub header
    #273 Wrap URLs embedded in description text with <a> tag and fix potential XSS problem see asset id 15615013723013595254 on testnet
    Added dynamic sidebar creation, new NRS.setup.PAGENAME methods for setup tasks
    Currency distribution dialog
    Currency Distribution Dialog - initial commit
    added Exchange link on My Currencies page
    Fix showing the wrong currency code, when the exchange booth is refreshed and the search box has different currency code than the dialog
    #242 Clicking on "You" in Currency Executed Exchanges area doesn't work right - fix buyer and seller account presentation and link in executed exchanges, my executed exchanges and exchange history tables
     #238 Claim Currency pop-up entry form has Claim rate units inverted
    Add <Transfer> and <Offer> links to the exchange booth
    Enhance exchange buy/sell offers to include offer height as link to the exchange offer transaction info
    Add type icons to the "my currencies" table, disable the "offer" button when currency is controllable and account is not currency issuer
    Refactor the duplicate currencies table design into a single method
    Remove unused code
    #222 Unconfirmed exchange requests should be displayed using Italic font style
    #218 Do not display exchange offer with 0 balance
    Fixes for controllable icon and search currenices input width
    Fixes for Search Currencies
    Added Search Currencies
    Opening the exchange booth from the currencies table 2nd page loaded the tables without data (could have been outdated data as well)
    Fix decimals in reserve increase
    Minor refactoring and cleanup
    Fix typing inside the search box
    Remove the mint button
    Also convert decimal to a number of the transfer dialog
    1. Implement keyDown events for reserve, claim and mint dialogs
    2. Make sure the decimals field always contains numeric value
    Capitalization error and some UI tweaks to founders model
    Moved Founders link and added blocks until active to model
    Prevent entering decimal data which cannot be used for rate calculation in MS like in AE and fix validation for typing number from the numeric keypad (super sensitive change which requires a lot of testing)
    Fix decimal formatting for unconfirmed exchange transactions (this not the fix discussed on the forum)
    Fix exchange request buy/sell label
    Send currency id instead of currency code in currencyBuy and currencySell requests
    delete not functional yet
    Updated Delete Model and added some spaces between buttons on My Currencies
    Use currency id instead of currency code, currency can be deleted and then re-issued with the same code but different id. We don't want old transactions reference the re-issued currency
    Fix founders dialog to reflect the initial supply given to the currency issuer
    Clarify increase reserve dialog and no longer reduce the initial supply from reserve supply
    Disable the "Offer" button when currency is not exchangeable
    Remove founders link from exchange booth
    Move actions from currencies to my currencies, add founders action to view founders list
    Currencies table cleanup, reserve - initial fix
    Calculate the reserve supply after reducing the initial supply
    Add claim rate to claim dialog
    Fix the my exchanges link and provide link for transaction properties from the exchange history tables
    1. Improve Exchange History table.
    2. Fix tabbing order in Issue Currency dialog.
    Fix WebStorm inspections
    Format the total NXT reserved label
    Calculate total nxt reserved in reserve dialog
    Fix decimal calculations in minting dialog
    Fix decimal positions when claiming and fix decimal conversion in transaction properties of reserve and claim
    Fix refresh problem on the exchange booth
    Fix view founders table and currency issuance conversions
    Some work on the reserve and claim dialogs not done yet
    Small tweaks to currency page buttons
    Clicking the currency code now brings up the transaction properties
    Naming changes, descriptions and adding total column
    (1) Fix currency balance (2) Fix switched rate defaults (3) fix rate formatting in my exchanges
    Fix exchange rate calculation in MS dialogs
    Add exchange requests table to exchange dialog
    Added warning if locking over 1000 NXT
    Correction to Reserve Currency dialog
    Minor changes
    Improvements to reservation model
    Disable/Enable correct inputs for currency issue model
    More information to currency founders model
    Refresh the MS page when an incoming transaction is received
    Intermediate work on unconfirmed transactions and transaction properties - cont - not done
    Intermediate on unconfirmed transactions
    Added more information to currency founders model
    More improvements to Mint currency model
    Improvements to Mint currency model
    Improvements to Claim currency and Reserve currency models
    Added more to the english language file & correction to display icon for mintable currency
    Refactoring of the MS code including:
    1. Fix all WebStorm inspections in nrs.monetarysystem.js
    2. Add the Currency Types as constant and added is* method for each
    3. For table models built by code, indented the tabs to make it more readable
    More fixes to currency sell dialog
    Fix decimal positions in buy and sell currency dialogs
    Correction to exchange history js
    Added more to the english language file and fixed a bug if you didn't have any of a currency in the sell dialog
    Added a few lines to the english language file for MS and updated a description
    Minor updates for MS UI
    Minor fix for MS UI
    Added icons for currency types.  Still considering other options for them though
    Started Currency Founders model.  Not tested yet
    Fix decimal positions in "Monetary System" dialog
    1. Exchange offer decimal positions
    2. Exchange offers are now published from the currencies table not from a menu item since this provides the data needed for decimal calculation
    3. I removed the height in hours since its unreliable and used the same control as in currency issuance height (perhaps we can do better but at least it looks the same in both places)
    1. Support decimal position in issue currency dialog
    2. Support units terminology, decimal position and fat finger warning in currency transfer
    3. Localization messages
    All of MS's transaction types are added into GUI now.  Also made some more minor GUI fixes for MS
    More GUI tweaks for MS and Issue currency bug fixed
    More GUI tweaks for MS
    GUI tweaks for MS
    Added minting model. Needs testing still
    Convert minReservePerUnitNQT field to NQT on submit since the interface asks for it in NXT
    Minor mistake for currency type variable
    Added model for claiming a currency
    Added in model for reserve some of a currency and testing bitmask for currency type display
    Work on automatic buy/sell buttons in MS
    Started Delete Currency
    More Publish Exchange Offer fixes and tweaks
    Publish Exchange Offer fixes and tweaks
    Fixed missing currency balance in Sell box for MS
    Some UI tweaks for the Currencies page
    Word on Publish Exchange Offer UI to be more user friendly
    A few fixes for issue currency types and using the decimals value with the units
    Changed MS Exchange History to one table for both all exchanges and my exchanges
    Work on My Exchange History page
    Work on MS Exchange and Buy/Sell dialogs
    Work on MS Buy/Sell dialogs
    More work on MS buy/sell GUI and added in some transactions information
    More work on MS buy/sell GUI
    Started work on MS buy/sell GUI
    A few small fixes and improvements for the MS
    More work on Claimable currency for Issue Currency
    More work on Claimable currency for Issue Currency
    More work on Issue Currency
    Added correct API call for My Currencies and tested the output
    Update FontAwesome to newest version, added some more icons to transactions, changed MS icon in sidebar, and added option on currencies page to show all or just the users
    Added js for transfer currency based on transfer asset
    More MS GUI work
    Added account information links to the Monetary System page
    All Currencies links now work and more work on Monetary System's main page
    Started work on monetary system main page and fixed a JS error
    Read the currency constraints wrong and had to correct some code
    Added more code for Issue Currency, issueing an exchangable currency should now work
    Added more code for Issue Currency and started Exchange History page
    Some work on issuing exchange offer and listing all available currencies
    Use default sidebar buttons instead of info buttons
    updated copyright year
    Update last block height after switching account
    Sidebar UI improvements
    Add block height to sidebar
    Hide the switch account widget when the saved accounts cookie does not store accounts and initialize the account link settings for new accounts as well
    Move account id link back to the side bar above the account name
    Now that we can no longer copy the account id using the now removed clipboard function. I found it annoying not be able to go quickly copy the account id to go to the account info modal. Therefore I added account id link to the dashboard title and removed the account id from the "switch account" toggle which now just says "switch account"
    Remove references to the ZeroClipboard component
    Fix #305 Setting custom colors not saved after logout - the custom colors are now applied after the account specific settings are loaded
    WebStorm inspections - terminate statements
    Automatically add a newly created account to the list of saved accounts
    Forging indicator now supports both passphrase and admin password. Forging indicator status reflects the actual forging status
    Intermidiate work on forging indicator
    added copyright notice headers
     Fix #292 Forging indicator is not displayed when login with account to localhost
    Fix WebStorm inspections related to forging indicator
    Resorted settings on a 2-column based grid for convenience, added startup alerts giving clear feedback on plugins loaded, added ability to enable/disable plugins on an account basis (default: disabled, but very easy switch), added settings warning for browsers with limited DB support storing settings browser-wide (mainly Safari)
    Added translation strings for voting system
    Added missing translation strings for login page
    Refactor the NRS.sendRequest function - we no longer support specifying the function name as the 2nd parameter instead of the data parameter. Since there is always a callback we no longer need to check for its existence. Small method refactoring and fix syntax errors pointed by WebStorm
    Correction for remembering NXT account
    Don't remember account if the account is already in the cookie
    Allow login with a valid but unknown account
    Allowed Log Out and Clear User Data on Account login
    Moved js GET variable code and corrected logout code to clear GET variables so your aren't stuck in that account
    Added GET variable for login and modified switchAccount code for this
    Switched login toggle button to use data-login-type
    Switched login toggle button to use hasClass instead of aria-pressed.  Started account switcher, still needs work though
    Changed login type button to single toggle
    Added mask for account login.  I didn't see any issues with it's placement here
    Update nrs.login.js to use true & false, instead of 1 and 0
    Corrections to newly merged login function
    Merged loginAccount and login into one function
    Made account number the default login input and enabled ente to login with that input
    Fixes for corporate theme and added missing code in for account login
    Added ability to save multiple accounts with cookies
    Changed to cookies from database for keeping accounts.  Currently only supports one account
    Initial change to Holger's design.  Buttons need more styling and still need to change from database to cookies or account list
    Added check if account and passphrase is given
    Changes to support new database scheme
    Fallback for Safari to old browser centric DB model due to buggy indexedDB implementation
    Client DB reworking finished, tested in Chrome/Firefox, still a bug in Safari
    Fixed/simplified legacy transfer function not working in Firefox
    Delete legacy DB on logout with user data clearage
    Table based approach for user data DB lead to unsolvable conflicts on concurrent DB init, switched to DB based approach, refactoring of migration code
    Can manually specify account number to log in to
    More fine-grained localStorage deletion due to side effects to indexedDB database
    Added functionality for logging out and clearing user data
    Switched to account based user DB tables to separate user data from different account, postponed DB init (after login), started legacy table transfer mechanism
    Added possibility to disable on plugins on startup
    Added simple transaction type based notification system for client, temporary bug fixing for transaction approval
    Better styling for account dropdown
    Display name of account if it was set
    Hide account login if there are no accounts saved
    Finish up Account login.  Needs more testing
    Add another call to i18n method to fix sidebar translation issue when switched to another language
    More robust/managed javascript loading mechanism
    First draft of plugin loading mechanism, integration into sidebar, basic hello_world example plugin
    Minor
    Added plugin list, security warning to login screen
    Separate approval request page and badge loading due to side effects when being on other pages
    Removed some logging and added some missing JS calls
    Initial Commit adding function to login with just your account.  Still needs more work and checking
    Moved contacts navi to icon in header (top right)
    Added dynamic sidebar creation, new NRS.setup.PAGENAME methods for setup tasks
    Login account generation.
    Check DGS block passed also based on last feeder height from getState.
    Scrollbar fix.
    Design customizations.
    Minor language changes.
    Passphrase login length check.
    Public key announcement support.
    Internationalization.
    Minor.
    Use "passphrase" instead of "secret phrase".
    Minor.
    Privatize variable.
    Add dependencies.
    Check if on a fork.
    Allow decrypting of messages.
    Remove display of numeric account IDs.
    Dedicated file for decryption routines.
    Login method change.
    Minor reed solomon changes.
    use Reed Solomon by default.
    Show notice on login if an update for NRS is available.
    Do not show logout dropdown when not forging (firefox).
    isScanning functionality.
    Do not forge automatically when downloading the blockchain.
    Reed Solomon support.
    use getBlockchainStatus API call
    No flash copy when in app.
    Center without javascript.
    Show different message when the blockchain is downloading.
    Make sure client works even when cookies are disabled (firefox).
    moved tools to ui
    Leased forging minor.
    Forging indicator modifications.
    Added setAccountInfo API (name/description).
    Check if able to connect to server before trying to log in.
    Show account leasing details.
    Don't animate when not forging.
    Even more splitting..
    Split javascript in multiple files.
    Infrastructure work + hide main side menus based on disabled tags and APIs
    updated copyright year
    Fix Webstorm inspection
    Move plugin related warnings to the bottom right so that they do not hide important buttons
    Load plugin Html page and modal before plugin JavaScript
    Fix WebStorm inspections
    Always show Plugins sidebar item for better feature visability/transparency, added simple plugins overview page
    added copyright notice headers
    Resorted settings on a 2-column based grid for convenience, added startup alerts giving clear feedback on plugins loaded, added ability to enable/disable plugins on an account basis (default: disabled, but very easy switch), added settings warning for browsers with limited DB support storing settings browser-wide (mainly Safari)
    Added some more translation strings
    New method NRS.appendSubHeaderToTSMenuItem to add sub headers to sidebar items, combined two marketplace main sidebar navigation items to one separated by My-Store sub header
    Added possibility to disable on plugins on startup
    Added startup function to hello_world example plugin, fixed startup function execution for plugins
    Changed semantics of plugin version compatibility status code, major release diff now allowed, plugin nrs version newer than client version disallowed
    Added overview page for installed plugins
    More robust/managed javascript loading mechanism
    First draft of plugin loading mechanism, integration into sidebar, basic hello_world example plugin
    Added plugin list, security warning to login screen
    Added nrs compatibility check and launch status determination for plugins, file stubs for example hello_world plugin
    Finished first version of plugin validation, added initial manifest.json for hello_world example plugin
    Started plugin validation code, added valdation/NRS compatibility status constants to constants dict
    Initial readme files for plugin system (DEVELOPERS.md, INSTALLATION.md, SECURITY_WARNING.md)
    updated copyright year
    Fix local signing of upload data and prunable messages. From some reason the conversion functions used to convert between byte and int array on the client does not reproduce the same result as on the server. Using a suggestion from the cryptojs forum seems to fix the problem. However, I'm not sure why the rest of client code encryption code and hashing works with the old method without complaining.
    added copyright notice headers
    Log account settings and additonal properties to the JavaScript console
    Escape values passed to eval
    Print environment information about the client environment to the browser JavaScript console
    Logging to the browser console with milliseconds timestamp
    Internationalization.
    Add dependencies.
    moved tools to ui
    Minor.
    Split javascript in multiple files.
    Implement back button on the transaction info, account info and block info modals
    Use the new NRS.getBlockLink() when crafting a block info modal link
    updated copyright year
    unconfirmed transaction may still have height set
    Do not show download/view link for unconfirmed transaction
    Try to download expired data using the download link from the transaction info dialog. Handle error conditions. Name change.
    Submit rate not effective rate to CurrencyBuy/Sell, improve labels and descriptions
    Automatically calculate exchange rates based on available exchange offers - needs more testing
    Fix for the extend transaction info and check isText correctly
    Add download and view link to the transaction info dialog
    List recipient accounts based on their public keys in the shuffling recipients transaction info
    Remove my shufflers page, adapt to api change, improve shuffling transaction info dialog
    Update button for incoming properties set by self, escape all properties and values, use property id as link in the delete property transaction info
    Account properties delete and update actions, translations and transaction info
    Display shuffling status in my shufflers table and localize shuffling stage and participant state values
    rename
    Add registrant count column to the shuffling table and account info modal
    Add link to asset issuance to transaction info modal of other asset transaction types
    Support initial asset quantity and available asset quantity in transaction info dialog and improve invalid asset message
    1. Active Shufflings - only show "Join" action when account did not already joined.
    2. My Shufflings - reflect shuffler status and allow starting a shuffler in case it's not started
    Submit the new delete asset shares transaction instead of transfer asset to genesis and add delete asset shares to the transaction info dialog
    Add localization resources and fix shuffling related localization issues
    Show shuffler information in the create shuffling transaction info dialog
    List shuffling participants in the create shuffling transaction info
    Use values returned by the server for shuffling stage and participant state
    Fix decimal formatting for holding and "unknown error" message when starting shuffler
    More work on transaction info modals for shuffling
    Show phasing parameters for mandatory approval
    Improve Create shuffling transaction info modal
    Quick and dirty transaction info dialog for shuffling transactions
    Fix WebStorm inspections for transaction info dialog
    Consolidate all transaction link Html generation into a single method
    default to false for almost all includeXXX optional API parameters
    Implement delete shares modal based on the asset transfer modal
    Preliminary work on replacing transaction type/subtype magic numbers with self describing code
    fixed indentations
    refactored to encompass phasing for currency/asset
    fixed decimal display issue with quorum and min_balance
    Change default leasing period to 32767 and add lessee link to the transaction info modal
    Added link from the order cancellation transaction info to the cancelled order
    #290 UI Phasing incorrect approval fee - merged from feature/ui
    Support phasing approved by reveal secret model (so far only the hash can be specified)
    Support phasing approved by transaction hash model
    Fix transaction info link from vote to poll
     Fixed #302 fading problem in transaction info trades - this is actually a general problem which I fixed specifically in this case. Whenever a link from a modal dialog invokes the display of the same modal dialog this problem will occur. To solve this always check if the dialog is already displayed and do not show it again it does. Following the isModalVisible variable in nrs.modals.transaction.js
    Display human readable time for transaction and block in the info dialogs
    Fixed: extend tagged data transaction info shows undefined hash
    added copyright notice headers
    Hide approve transaction action in transaction info dialog when the transaction is unconfirmed or when the phasing height has already passed
    Fix going from the transaction info dialog to block info dialog by clicking on the height link
    Added translation strings to monetary system, transaction modals
    Mandatory approval transaction details
    Punable data - added extend action to upload transaction info, extend dialog which uses the same fee payed by the upload transaction and transaction info for extend transaction.
    Undo wrong commit
    Upload transaction info
    Tagged data transaction - correctly display transaction info for pruned data
    Tagged data transaction - add missing fields to dialog and transaction info
    Tagged data transaction - intermediate work on transaction info, local signing, client side fee calculation and transaction subtypes from server.
    Fixed mandatory approval transaction icon and name
    Change voting models to rely on server constants
    Add reveal secret field to transaction approval modal
    Little refactoring for the approve transaction modal
    Added "approve transaction" action to the transaction info actions tab which is now always visible
    Add permanent message option to the marketplace purchase feedback modal + various simple fixes
    Display message hash, if exists, in the transaction info dialog
    fixed some js to be compatible with prunable messages
    Fix alignment
    Fix voting model in transaction infor dialog
    fixed transaction info not loading for transactions with no attachment
    Add currency voting model to poll transaction info
    Improve cast vote transaction info
    #278 show actual trades performed against an AE order - do not include asset information in response since we already have the asset data
    #278 show actual trades performed against an AE order in the transaction info dialog
    Fixed bug with non-unique css ID selector for pending transaction table rows leading to unpredicted behaviour
    Replaced static ID list on user modal event listener with more flexible class action identifier for looser coupling
    Add min balance warning to modal for approving a transaction
    Added logic to disable approval button for transactions already approved by account
    Replaced static ID list on transaction modal event listener with more flexible class action identifier for looser coupling
    Fix sender link in transaction info dialog
    Implement Transaction info for approve transaction
    Phasing tab in transaction info dialog
    Approval requests page for currency transaction approvals
    Label changes MS currency is now the "base currency" and NXT is the "quote currency" rates always show how much of the quote currency is needed to purchase one unit of the base currency or in our case how much NXT per MS currency unit
    indentation
    Fix reference error
    Disable approval button when transaction approved, bugfixes
    Added badge with number of Approval Requests to sidebar menu item, added regular NRS.pages.dashboard method for more in-time dashboard updates
    #273 Wrap URLs embedded in description text with <a> tag and fix potential XSS problem see asset id 15615013723013595254 on testnet
    First (rough) version of approval dialog
    Added constants (nrs.constants.js) to client
    #266 recover from exception condition to allow viewing other transaction info dialogs for the same session (might be partial fix)
    Currency distribution dialog
    applied pull request #31 to fix exchange total formatting
    Currency Distribution Dialog - initial commit
    renamed finishBlockHeight to finishHeight
    #235 Clicking the named account in the tx window results in showing zero balance - fix links from transaction info modal to account modal when "You" or contact name account is displayed
    Fix some WebStorm inspections
    Fix localization issue
    working on poll results
    #241 Currency exchange request transaction info dialog is missing units - added NXT as units for total exchanged
    #235 Clicking the named account in the tx window results in showing zero balance
    #235 Clicking the named account in the tx window results in showing zero balance
    Solve exchange offer transaction info exception reported here https://nxtforum.org/monetary-system/can't-exchange-ms-currency/msg144394/#msg144394
    Enhance exchange offer transaction info dialog to show the exchange requests executed against this offer
    Enhance exchange buy/sell offers to include offer height as link to the exchange offer transaction info
    Improve navigation between info dialogs:
    1. From block info, clicking a transaction time stamp opens the transaction info
    2. From account info, clicking a transaction time stamp opens the transaction info
    3. From transaction info, clicking the block height opens the block info
    minor, prepping for poll results
    Remove console printout
    Capitalization error and some UI tweaks to founders model
    Moved Founders link and added blocks until active to model
    Fixed Add Founders link to transaction info dialog
    Add Founders link to transaction info dialog.  No time to test right now though
    replace "per asset" with "per share"
    Removed Price and Recipient in Alias Deletion Transaction information as I don't think they are needed
    Corrected delete alias model and added delete alias transaction type information to UI
    Show informative dialog messages when viewing transaction info referencing a deleted currency and fix problems of the link to the exchange booth
    Clarify increase reserve dialog and no longer reduce the initial supply from reserve supply
    Calculate the reserve supply after reducing the initial supply
    Fixed currency links in account info model
    Possible fix for missing option in transaction models for reading encrypted messages
    Fix and add properties to the issue currency transaction info dialog
    Display transaction info dialog for unconfirmed transactions
    Fix the my exchanges link and provide link for transaction properties from the exchange history tables
    Fix link from exchange request info to exchange offer info
    Attempt to fix link from exchange request to exchange offer. Not fixed yet.
    Fix decimal positions when claiming and fix decimal conversion in transaction properties of reserve and claim
    Clicking the currency code now brings up the transaction properties
    Naming change
    Calculate actual units and NXT exchanged by an exchange request
    Fix exchange rate calculation in MS transaction info dialogs
    Show executed exchanges in the Currency Buy/Sell properties panel
    More transaction properties
    More work on MS transaction properties
    Intermediate work on unconfirmed transactions and transaction properties - cont - not done
    Intermediate on unconfirmed transactions
    Work on My Exchange History page
    Adding code so that the 'dividend payment' transaction data can be
    seen in the transaction modal.
    create poll fixed completely, poll information model created, polls now listed
    Display polls on page, start on my polls
    Minor.
    Make sure multiple attachments (plain text, encrypted, message to self) are all shown simultaneously.
    Show contact name instead of account ID if in contacts.
    Add actions tab to transaction info modal.
    Show "message empty" if no attachment on message transaction type.
    DGS block passed.
    Minor.
    Note to self.
    Alias sale to anyone changes.
    Minor.
    Encryption changes.
    Global message handling.
    Internationalization.
    Payment with message support.
    Minor.
    Various minor changes.
    DGS modal changes.
    Add discount field to transaction modal.
    Show outdated alias sale message.
    Show alias for sale message in transaction modal.
    Minor.
    Add dependencies.
    Allow decrypting of messages.
    Dedicated file for decryption routines.
    Make seller links work, click to submit.
    Encryption/decryption form.
    Decrypt DGS in transaction modal.
    DGS + pagination.
    DGS delivery.
    Encrypted messages with shared key caching.
    Encrypted messages.
    Add alias sale cancellation to all transaction displays.
    Aliases sell/buy.
    Add new transaction types to transaction modal.
    Asset order price fix in transaction modal.
    Autolink alias URi's.
    Unconfirmed transactions and other minor edits.
    Minor.
    Reed Solomon support.
    moved tools to ui
    Show link to asset in transaction modal.
    Show transaction modal for all transactions (ordinary payments included).
    Empty table before appending.
    Added new transaction types to transaction modal.
    Housekeeping
    Transfer Asset Command Field and some more NQT.
    Even more splitting..
    Pressing Enter on the settings admin password field no longer refreshes the browser
    Remove dead code for the non existent dashboard_blocks_table
    updated copyright year
    Remove the obsolete NRS.inApp variable since we no longer support the wrapper frame used by the Wesley installer
    Warn about privacy leakage caused by the exchange page
    Intermediate work on exchange settings in the settings page - not done
    Fix #305 Setting custom colors not saved after logout - the custom colors are now applied after the account specific settings are loaded
    Added Turkish as new experimental language
    Changed status of Catalan and Romanian from Experimental to Stable
    Implement marketplace warning
    Forging indicator now supports both passphrase and admin password. Forging indicator status reflects the actual forging status
    Add admin password setting
    Add the admin password and marketplace enablement settings + little more cleanup and indentation
    Clean webstorm inspections
    Added Romanian as new experimental client language
    Updated Crowdin translation files, changed status of Bulgarian to Stable (Beta), Czech, Slovak to Beta (Experimental)
    added copyright notice headers
    Updated status of Japanese translation from experimental to stable
    Added Catalan as new client language (Experimental status)
    Added Bulgarian as new client language (Beta status)
    Fix WebStorm inspections related to forging indicator
    Updated Crowdin translation files, changes status of Italian and Dutch to stable
    Remove beta status for Indonesian translation
    Updated language translations from Crowdin
    Resorted settings on a 2-column based grid for convenience, added startup alerts giving clear feedback on plugins loaded, added ability to enable/disable plugins on an account basis (default: disabled, but very easy switch), added settings warning for browsers with limited DB support storing settings browser-wide (mainly Safari)
    Updated translation files for Czech, Russian, Ukrainian, Greek, added Greek as experimental language
    Resetting language translation status (stable/beta/experimental) based on current translation percentage from Crowdin
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Fix settings problem - some settings defaulted to numeric values but were read from the Html page as strings when modified. The comparison of this setting did not work correctly. Now settings default to strings and compared as strings.
    Log account settings and additonal properties to the JavaScript console
    Table based approach for user data DB lead to unsolvable conflicts on concurrent DB init, switched to DB based approach, refactoring of migration code
    Switched to account based user DB tables to separate user data from different account, postponed DB init (after login), started legacy table transfer mechanism
    Updated indonesian, spanish (ES), finnish and turkish language files from Crowdin, set Indonesian from beta to stable
    Added badge with number of Approval Requests to sidebar menu item, added regular NRS.pages.dashboard method for more in-time dashboard updates
    Changed language state for Italian, Dutch, Ukrainian, changelog
    Added language selection to welcome screen, updated DEVELOPERS-GUIDE.md, changelog
    1. Support decimal position in issue currency dialog
    2. Support units terminology, decimal position and fat finger warning in currency transfer
    3. Localization messages
    minor bugs
    Fill in theme drop down choice with current theme
    Added removed line back in after merge was successful
    Removed line to try and resolve merge conflict
    Edited incorrect branch
    Removing to try and resolve merge conflict
    Added setting NRS.itemsPerPage here and set a default value
    Correct a few styles that seemed to have never been updated
    The option for the theme has to have a value
    Made js more accommodating for future themes
    A few more adjustments
    Initial js code to change theme.  Two options only currently and they are hard coded in there.  The code assumes the css file is the 4th <link> in index.html
    Auto-detect language.
    Minor.
    Decrypt note form fix.
    Save settings.
    Design customizations.
    App communication.
    More multilingual support.
    Theme color settings bug.
    Remember passphrase setting.
    12 or 24 hour date format setting.
    Minor.
    Add dependencies.
    Hide console log button (setting).
    Remove display of numeric account IDs.
    Minor DB.
    Wider message sidebar if Reed solomon is selected.
    use Reed Solomon by default.
    Asset transfer warning setting.
    Minor.
    Reed Solomon support.
    Minor.
    Show warning when submitting amount / fee higher than user specified.
    Make sure client works even when cookies are disabled (firefox).
    moved tools to ui
    Disable news section by default.
    Don't animate when not forging.
    Animated forging indicator.
    Removed new address format.
    Housekeeping
    Split javascript in multiple files.
    updated copyright year
    Localize table headers and buttons in the account properties page
    Update button for incoming properties set by self, escape all properties and values, use property id as link in the delete property transaction info
    Account properties delete and update actions, translations and transaction info
    Account properties page, initial work on modals, local signing
    UI for max fees and phasing duration
    No automatic phasing for the approveTransaction (since PHASING_VOTE_CASTING is not disallowed when pahsing_only is enabled)
    Hide accidentally triggered popovers in mandatory approval dialog
    Moved Account Control to Account Details
    Phasing minimal balance auto-fill
    Voting model currency and asset auto-fill
    Added mandatory approval info
    Fixing auto-fill of phasing parameters when 2p ac is enabled (still WIP)
    Fixed mandatory approval dialog
    Dialog for setting mandatory approval (mandatory phasing)
    Account Control side menu
    Fix "all types" label translation
    fixed formatting of negative account ledger amounts because convertToQNTf is still wrong with some negative numbers
    String.startsWith is not supported on IE < 12. Substituted with String.indexOf(...) == 0
    updated copyright year
    Account properties page, initial work on modals, local signing
    indentation
    fixed NaN for formatted negative change in account ledger
    Fixed "All Unconfirmed" option in "My Transactions" page
    Revert the dashboard to show transaction information instead of account ledger entries (which can still be viewed from the account ledger page)
    Add ledger entry info modal activated by clicking an entry timestamp on the dashboard
    Fix link from ledger table to block info modal and fix some layout problems
    Fix paging and various UI improvements
    More intermediate work on the account ledger table in the dashboard and the account ledger page
    Intermediate work on the account ledger table in the dashboard
    minor
    Issue 304: UI - Approval is missing Approve action button, fixed
    #290 UI Phasing incorrect approval fee - merged from feature/ui
    #290 UI Phasing incorrect approval fee
    Support phasing approved by reveal secret model (so far only the hash can be specified)
    Support phasing approved by transaction hash model
    Correctly present voting model none in the transaction tables
    Add transaction type to the transaction list in the block info dialog
    Clean inspections in block modal
    Fix web storm inspections
    Fix reference error
    added copyright notice headers
    added getBlockchainTransactions API, deprecated getAccountTransactions and getAccountTransactionIds
    Always rounding down percentage in transaction table phasing info popover to not give the impression of transaction to be approved when approval rate close to 100% (e.g. 99,999999%)
    Added some more translation strings
    Added missing translation strings to top navigation, sidebar and dashboard
    Add reveal secret field to transaction approval modal
    Added "approve transaction" action to the transaction info actions tab which is now always visible
    Fix reference error when poll has no whitelist accounts
    renamed pending to phased/phasing
    Switched phasing notification count being based on getAccountPendingTransactionCount, added pending info to transaction phasing table navi tab popover
    Added new tab for showing all unconfirmed transactions to transactions page, fixed missing account filtering for normal unconfirmed transactions tab
    Added unconfirmed/phased transaction notifications to client header, new mechanism to provide subpage info on page load
    Renamed pending->phasing on transactions page
    Fixed misinterpretation of finish height semantic
    Fix label for marketplace tag count info box
    Added min-width to transaction table pending td for less irritating page layout
    Fixed bug with non-unique css ID selector for pending transaction table rows leading to unpredicted behaviour
    Add min balance warning to modal for approving a transaction
    Added logic to disable approval button for transactions already approved by account
    Eventual fix of popover staying alive bug (pending info)
    Minor layout changes
    Replaced static ID list on transaction modal event listener with more flexible class action identifier for looser coupling
    Fix pagination for approval request pages
    Replaced redundant NRS.handleInitialTransactions dashboard creation by NRS.pages.dashboard, fixed bug with incorrect pending popover initialization
    Reworked transaction table pending UI element to include asset/currency info, formatting of quantity units
    Corrected wrong color semantics for approval UI element (transactions table)
    Corrected fee for by-account transaction approval in approval dialog
    Adopted phasing transaction UI element to new phasing logic/API output format
    Approval requests page for currency transaction approvals
    Adopted phasing transaction table UI element to changed API phasing terminology
    New method NRS.appendSubHeaderToTSMenuItem to add sub headers to sidebar items, combined two marketplace main sidebar navigation items to one separated by My-Store sub header
    Added simple transaction type based notification system for client, temporary bug fixing for transaction approval
    added getPhasingPolls API, renamed getPhasingVotes to getPhasingPoll
    Added formatted votes for NXT voting to transaction table pending UI element popover
    Separate approval request page and badge loading due to side effects when being on other pages
    Switched to post async loading of pending info in transaction tables due to strange timing bug causing UI elements to disappear randomly
    Disable approval button when transaction approved, bugfixes
    Added badge with number of Approval Requests to sidebar menu item, added regular NRS.pages.dashboard method for more in-time dashboard updates
    First (rough) version of approval dialog
    Added approval requests page for account requests (no actions yet)
    Finished first draft of UI element for pending transactions in transaction table
    Fixed bug in phasing dialog, worked on UI element for phasing transactions in transactions table, added pending transactions to transactions page
    Moved transactions navi to subnavi of Dashboard
    Moved contacts navi to icon in header (top right)
    Added dynamic sidebar creation, new NRS.setup.PAGENAME methods for setup tasks
    renaming
    defer apply for all appendixes in phasing; rename TwoPhased to Phasing; add "phasing" prefix
    Added moment.js library (MIT) for date calculations, added modal form element for auto-update estimated block reach date for entered block heights
    Added static version of UI element for pending transaction state in transaction table
    Add subtype navi to transactions page
    Minor
    Prepared loading of pending transactions for transactions page
    Added missing incoming call for dashboard/transactions to have send transactions directly displayed in transactions tables
    Added simple pending UI to transactions table
    Replaced complicated Dashboard transactions loading mechanism with similar mechanism being used for transactions page
    Some function resorting in nrs.transactions.js
    Resort functions in nrs.transactions.js a bit, separating logic and html creating functions
    Some relayouting, column reordering for transactions table
    Bugfixing/layouting transactions table UI
    Unified dashboard and transactions table, reworked table layout
    Added tooltip to transactions type navigation
    Started to rework transactions page, centralized transaction type information like type icon or i18n string in nrs.transactions.type.js file
    Separated row creation for transaction table on Dashboard in NRS.handleInitialTransactions() to own function as preparation for integration with transaction table on Transactions page
    Worked on approval modal, all approval types present
    Added notifications for incoming messages with direct link for reading, usability improvements for message app
    Correct double transactions listed in dashboard when they are unconfirmed
    Corrected delete alias model and added delete alias transaction type information to UI
    "Dividend Payment" type not being shown in transaction page.
    Show unconfirmed transactions in Italics
    Display transaction info dialog for unconfirmed transactions
    All of MS's transaction types are added into GUI now.  Also made some more minor GUI fixes for MS
    Added approval info to dashboard transaction list for easier testing
    Started Delete Currency
    Work on MS Exchange and Buy/Sell dialogs
    More work on MS buy/sell GUI and added in some transactions information
    More work on MS buy/sell GUI
    Update FontAwesome to newest version, added some more icons to transactions, changed MS icon in sidebar, and added option on currencies page to show all or just the users
    Forgot to include both the To and From columns for new transactions
    Added mouse over text for new icons
    Removed comments used originally to identify each case
    Ready for testing of new Dashboard design.  Needs optimization still.  Added missing current block and connected status
    Pagination.
    Get account transactions based on block timestamp instead.
    Transaction type removals.
    Minor.
    Show message indicator on transactions page.
    Sort unconfirmed transactions.
    Genesis account handling.
    Use new getAccountTransactions API.
    Internationalization.
    Payment with message support.
    12 or 24 hour date format setting.
    Add dependencies.
    Check if on a fork.
    Minor.
    DataLoaded method.
    Encrypted messages.
    Add alias sale cancellation to all transaction displays.
    Aliases sell/buy.
    Minor.
    Unconfirmed transactions minor.
    Minor.
    Unconfirmed transactions and other minor edits.
    Make sure unconfirmed transactions are not added twice.
    Add unconfirmed transaction to dashboard immediately.
    Push unconfirmed transactions to the beginning of the array.
    isScanning minor.
    isScanning functionality.
    Show (unconfirmed) transaction on dashboard immediately after form submit.
    Reed Solomon support.
    Minor.
    Asset exchange API simplification.
    Show transaction confirmation count on hover.
    Show 1440+ confirmations.
    moved tools to ui
    Added new transaction type descriptions.
    Show transaction modal for all transactions (ordinary payments included).
    Show account leasing details.
    Update account balance after doing a transaction.
    Housekeeping
    Even more splitting..
    More splitting up of javascript.
    Add "switch account" button to the account info dialog and localize the modal headers
    Implement back button on the transaction info, account info and block info modals
    updated copyright year
    Fix link from account info currencies tab to transaction info for currency
    Consolidate all transaction link Html generation into a single method
    Add ledger tab to the account info dialog
    Account info dialog refactoring and cleanup - no functional impact
    added includeAssetInfo and includeCurrencyInfo parameters to getAccountAssets, getAccountCurrencies, getAccountExchangeRequests, getExpectedAssetTransfers, getExpectedCurrencyTransfers
    no need to includeAssets and includeCurrencies in some getAccount calls
    
    (cherry picked from commit 87169d7dd1c08581437d1b70977a68babc0073d3)
    no need to includeAssets and includeCurrencies in some getAccount calls
    default to false for almost all includeXXX optional API parameters
    Add transaction type icons to account info dialog
    Fix webstorm inspections for account info modal
    added copyright notice headers
    added getBlockchainTransactions API, deprecated getAccountTransactions and getAccountTransactionIds
    Remove code duplication - use transaction type constants in account info dialog
    Fixed mandatory approval transaction icon and name
    Replaced static ID list on user modal event listener with more flexible class action identifier for looser coupling
    Replaced static ID list on transaction modal event listener with more flexible class action identifier for looser coupling
    Added badge with number of Approval Requests to sidebar menu item, added regular NRS.pages.dashboard method for more in-time dashboard updates
    Improve navigation between info dialogs:
    1. From block info, clicking a transaction time stamp opens the transaction info
    2. From account info, clicking a transaction time stamp opens the transaction info
    3. From transaction info, clicking the block height opens the block info
    Fixed currency links in account info model
    Added currencies to account info model
    All of MS's transaction types are added into GUI now.  Also made some more minor GUI fixes for MS
    Work on automatic buy/sell buttons in MS
    Started Delete Currency
    Work on My Exchange History page
    More work on MS buy/sell GUI and added in some transactions information
    Added account information links to the Monetary System page
    Trade history modal.
    Pagination.
    Trade history page.
    Show buyer and seller in asset trade history table.
    Show contact name instead of account ID if in contacts.
    Transaction type removals.
    Use new getAccountTransactions API.
    Internationalization.
    Minor alias sale changes.
    Various minor changes.
    Add marketplace listings to account modal.
    Add dependencies.
    Show buyer/seller in modal.
    Make seller links work, click to submit.
    Encrypted messages with shared key caching.
    Add alias sale cancellation to all transaction displays.
    Aliases sell/buy.
    Minor.
    More DGS modals.
    Account modal fix.
    Use new alias API.
    Alias search modifications.
    Differentiate assets issued from assets bought in account modal.
    Show correctly whether transaction is incoming or outgoing when using RS.
    Unconfirmed transactions and other minor edits.
    Don't show user assets with 0 balance.
    Minor.
    Reed Solomon support.
    moved tools to ui
    Make assets linkable in account modal.
    Show link to asset in transaction modal.
    Show account name/description in account modal.
    Show new transaction types in account modal.
    Minor NQT.
    Show account leasing details.
    Even more splitting..
    updated copyright year
    lease period help
    lease period help
    default 65535 after hardfork
    keep the default at 32767 in the UI, until the hardfork
    increase lease limit to 65535 blocks
    Change default leasing period to 32767 and add lessee link to the transaction info modal
    added copyright notice headers
    Internationalization.
    Lease balance period, show nr of days (avg).
    Add dependencies.
    moved tools to ui
    Added setAccountInfo API (name/description).
    updated copyright year
    Support update check for the windows installer in addition to the zip file
    Fix WebStorm inspections for version update checks
    added copyright notice headers
    Corrected some logic.  Will need testing after creating the app
    Updated to correctly check if it is an old app version or not
    Removing code that will notify users of new version after Date(2014, 9, 28) regardless of version you are running in the App
    Trade history type.
    App update notice.
    Update notification fix.
    In-app update.
    App update notice.
    App communication.
    Minor.
    If user is using windows / mac app, show notice if new version is available.
    Internationalization.
    Add dependencies.
    Use new alias API.
    Show notice on login if an update for NRS is available.
    Minor.
    Minor.
    Update notification fix.
    In-app update.
    moved tools to ui
    Housekeeping
    Split javascript in multiple files.
    updated copyright year
    Add tooltips to sidebar icons
    In case your balance is leased the forging indicator now says so instead of warning that your account balance is 0
    Reflect forging status changes immediately after the start/stop dialog is completed
    Reflect the forging status of the current account when more than one account is forging and correctly invoke the start and stop forging dialogs according to the current account
    Update forging status when admin password is not required by a remote server
    Handle the case of forging on another account
    When getForging returns error the forging status is unknown since the password or passphrase maybe incorrect but the server is still forging
    Forging indicator now supports both passphrase and admin password. Forging indicator status reflects the actual forging status
    Layout fix
    Intermidiate work on forging indicator
    Replace test message - now finally ready to implement the real feature
    Add forging indicator tooltip
    added copyright notice headers
    Fix WebStorm inspections related to forging indicator
    Minor language changes.
    Forging success / error message fixes.
    Internationalization.
    Add dependencies.
    isScanning functionality.
    Do not forge automatically when downloading the blockchain.
    moved tools to ui
    Forging indicator modifications.
    Don't animate when not forging.
    Even more splitting..
    updated copyright year
    Add link from the account details modal to the account info modal
    Automatically open account control tab when opening account details dialog from Mandatory Approval link
    fixed exception: don't call html5_qrcode_stop() if not started
    added call to html5_qrcode_stop() when raw transaction details modal closed
    removed obsolete qrcode libraries
    Indentation and webstorm inspections fix
    Issue 312 (QRCode scanning bug): replaced qrcode and jsqrcode js libraries with ZXing core and javase java libraries; added EncodeQRCode and DecodeQRCode APIs
    Improve no public key message in case the passphrase is available on the client but the public key has not been announced to the blockchain
    added copyright notice headers
    Added js for displaying forged balance in account details
    Show numeric account ID.
    Numeric account ID.
    Account QR code.
    Public key announcement support.
    Internationalization.
    Add dependencies.
    Added guaranteed balance.
    Reed Solomon support.
    moved tools to ui
    Minor NQT.
    Show account leasing details.
    Removed new address format.
    Even more splitting..
    Add back button to ledger info modal
    Use the new NRS.getBlockLink() when crafting a block info modal link
    updated copyright year
    Consolidate all transaction link Html generation into a single method
    still need isTransactionEvent check for the block generated events
    Display transaction id in ledger info for block events as well
    Add ledger entry info modal activated by clicking an entry timestamp on the dashboard
    Initial work on using disabling APIs to simplify the client
    updated copyright year
    Fix local signing for data upload by using the server data for type and isText parameters when reproducing the hash calculation
    No file chosen error message
    Fixed finish height rounding
    Fixed regression of "approveTransaction" handling by UI when mandatory approval is enabled
    Account properties delete and update actions, translations and transaction info
    Local signing for account properties - not done
    Removed mandatoryApprovalParamsJSON since we have the phasing control parameters in accountInfo
    Fix local signing for create shuffling with holding id
    Remove multiqueue of GET requests since it causes instability in some configurations
    Check max fee and phasing duration when submitting a phased transaction under account control
    Fixed maxFee value when setting account control
    Local signing under account control - support numeric account ids for the controlWhitelisted parameter
    Local signing for account control
    Local signing for shufflingCreate and deleteAssetShares and remove the fee validation for now
    Attempt to fix decimal conversion for asset quantity
    Show phasing parameters for mandatory approval
    Fee calculation: remove the obsolete, client side, phasing fee additions calculation
    Hide phasing parameters when mandatory approval is enabled and fill them automatically
    Create shuffling modal - support for holding and finish height widgets
    Fee calculation experiment
    Hallmark modal now submits passphrase to remote host
    Generating a QR code for a new account did not work when passphrase was saved for the session
    Merge mystcoin's fix for relying on API capabilities to decide when to use POST request
    Fix problem with file upload bytes validation when using do not broadcast. Fix WebStorm inspections.
    Refactoring: use the requireBlockchain parameter returned by getConstants
    Issue 312 (QRCode scanning bug): replaced qrcode and jsqrcode js libraries with ZXing core and javase java libraries; added EncodeQRCode and DecodeQRCode APIs
    Support signTransaction and other offline APIs when the server blockchain has not finished downloading
    Only verify unsigned bytes in case they exist
    Add signature to the JSON when doing local signing and fix problem with verification of unsigned bytes returned from the server
    Verify unsigned transaction bytes returned from the server
    Add optional public key field to enable entering a public key manually when "Do not sign" is enabled while the account has no public key on the blockchain
    Make sure POST request is used for "Do Not Sign" transactions
    When doNotSign is checked, do not send passphrase to the server and do not sign the returned transaction bytes. Only display the unsigned bytes in return.
    Feature not done.
    Support phasing approved by reveal secret model (so far only the hash can be specified)
    Support phasing voting model none
    Update forging status when admin password is not required by a remote server
    Intermidiate work on forging indicator
    Fix local signing of approve transaction
    Fix local signing of upload data and prunable messages. From some reason the conversion functions used to convert between byte and int array on the client does not reproduce the same result as on the server. Using a suggestion from the cryptojs forum seems to fix the problem. However, I'm not sure why the rest of client code encryption code and hashing works with the old method without complaining.
    added copyright notice headers
    Fixing auto-fill of phasing parameters when 2p ac is enabled (still WIP)
    Fixed mandatory approval dialog
    Verify local signing for MS transactions
    Implement local signing for upload and extend transactions by reading the actual file uploaded to the server from JavaScript and verifying the server hash calculation
    More Genesis constants
    Refactor the NRS.sendRequest function - we no longer support specifying the function name as the 2nd parameter instead of the data parameter. Since there is always a callback we no longer need to check for its existence. Small method refactoring and fix syntax errors pointed by WebStorm
    Punable data - implemented local signing for upload, fixed fee calculation, set isText to false by default
    Do not upload a file to the server in case it is too big
    Tagged data transaction - intermediate work on transaction info, local signing, client side fee calculation and transaction subtypes from server.
    Dialog for setting mandatory approval (mandatory phasing)
    Add File Upload dialog and support multipart form request using JQuery Ajax
    Alignment
    Verify unsigned bytes returned from the server for prunable messages and encrypted prunable messages appendex
    Add adminPassword template and use in the addPeer and blacklistPeer modals
    Verify bytes returned from server for Phasing appendix when doing local signing
    Use the prunableAttachmentJSON parameter when broadcasting transactions
    Send the JSON response returned by createTransaction to broadcastTransaction. This can be optimized later to only send the prunable appendices if we see that this concept is good.
    Client side support for prunable messages - implement local signing
    Client side support for prunable messages
    Correct handing of decimals for min balance in poll creation dialog, fixed various bugs
    alias delete local signing
    Fix local signing for cast vote (not tested)
    Fix local signing for create poll
    Fix WebStorm inspections and reduce blank lines
    local signing for approve transaction - first attempt - still not sure when two hashes can be submitted
    Add minBalance logic, fee addition structure to transaction approval dialog, first specification-complete implementation of approval dialog (still untested)
    Last commit fixes also asset decimals issue
    Fix error having decimals cut off, not validated correctly for approve by-currency modal
    Fixed error with form missing error message in modal and up-popping raw transaction modal when broadcasted=false is included in error JSON response from server
    New ui element for adding asset ID, completed by-asset approval transaction dialog
    Local signing for dividend payment - code review and testing appreciated
    Added ui modal element for currency input, completed basic version of by-currency approval transaction dialog
    Added possibility to transaction form processing to process multi-valued fields, added phasingWhitelisted as first multi-valued field being processed, switched to traditional mode for ajax request for transaction sending (needed for sending values as arrays)
    Add fee addition logic for NXT transaction fee, UI for approval modal fee additions
    Started to integrate different amount forms (Account/NXT) for approval modal dialog
    Added constants (nrs.constants.js) to client
    Local signing of MS transactions
    Add support for local signing of MS transactions
    Reverting changes that I didn't meant to commit when doing the dividends UI work.
    Dividends payment UI
    Catch error.
    Transaction byte validation fix.
    Login account generation.
    DGS block passed.
    Transaction byte fix.
    Ref transaction hash error handling.
    Minor.
    Note to self.
    Alias sale to anyone changes.
    Transaction byte validation.
    Minor.
    Minor.
    Minor.
    Public key announcement support.
    Transaction bytes validation.
    Internationalization.
    Payment with message support.
    Minor.
    Show info message about 50NXT being held in custody until transaction is confirmed or expired (when using reference full hash).
    Minor.
    Allow not broadcasting of transaction.
    Transaction byte verification for DGS.
    Use "passphrase" instead of "secret phrase".
    Privatize variable.
    Add dependencies.
    Move all encryption functions to nrs.encryption.js.
    Error handling.
    Minor, extra fields to convert to NQT.
    Show error message for brand new account users that try to submit forms.
    Login method change.
    Encrypted messages.
    Alias buy / sell transaction byte verification.
    Verify DGS transaction bytes.
    More AE.
    Modification for URI overloading.
    assignAlias to setAlias conversion.
    Remove pre-NQT logic.
    Broadcast transaction minor.
    Show AE on block 135,000.
    Reed Solomon support.
    Fix in verifying transaction bytes of account info description.
    Asset exchange API simplification.
    Ajax multi queue support.
    moved tools to ui
    Retry ajax call on timeout (GET requests only).
    Minor changes everywhere.
    Minor NQT.
    Added setAccountInfo API (name/description).
    Added new transaction types to transaction modal.
    Show account leasing details.
    Add new transaction types to verifyTransactionBytes.
    Small bugs.
    AmountNQT instead of just amount.
    Transaction byte signing with NQT.
    Error checking on transaction signature verification failed.
    Error checking for NQT.
    Housekeeping
    Transfer Asset Command Field and some more NQT.
    More reorganization.
    Even more splitting..
    updated copyright year
    default to false for almost all includeXXX optional API parameters
    added copyright notice headers
    Refactor the NRS.sendRequest function - we no longer support specifying the function name as the 2nd parameter instead of the data parameter. Since there is always a callback we no longer need to check for its existence. Small method refactoring and fix syntax errors pointed by WebStorm
    Add dependencies.
    use getBlockchainStatus API call
    moved tools to ui
    Even more splitting..
    updated copyright year
    Calculate hash modal can now use all hash algorithms not just hash algorithms supported by phasing
    Implement calculation modal and abstract the hash algorithms selection into a UI element
    added copyright notice headers
    Changed capital letter form field labels to camel case in translation.en for consistency
    Changed date format for block height UI element for more space for label/easier date reading
    Reworked approval whitelist UI element to be reusable in other modal multi-account input contexts
    Add decimals info to asset ID modal UI element
    Add decimals info to currency code modal UI element
    Improvements to block height modal UI element
    Removed false min length assumption for asset IDs in asset ID ui modal element
    Added approval requests page for by-asset transaction approval requests
    New ui element for adding asset ID, completed by-asset approval transaction dialog
    Added accidentally not-yet checked in new files for ui elements
    updated copyright year
    added copyright notice headers
    Moved transactions navi to subnavi of Dashboard
    Added dynamic sidebar creation, new NRS.setup.PAGENAME methods for setup tasks
    News page improvements
    Remove nxtcrypto RSS feed.
    Add dependencies.
    Remove nextcoin.org from news section.
    DataLoaded method.
    Nxtcommunity RSS feed.
    moved tools to ui
    Forging indicator modifications.
    Disable news section by default.
    Housekeeping
    Remove RSS feed.
    More splitting up of javascript.
    Add "refresh search index" link to settings menu
    Hide header buttons for disabledAPIs
    updated copyright year
    added copyright headers
    Support for Windows service installation and missing resources related to installer
    Implement back button on the transaction info, account info and block info modals
    updated copyright year
    Fixed advanced tab for ApproveTransaction
    Hide phasing parameters when mandatory approval is enabled and fill them automatically
    Create shuffling modal - support for holding and finish height widgets
    Fee calculation: update all modals with the fee calculation UI and remove modal and widget specific calculation. Still not done:
    Asset and currency issuance
    Asset/Currency buy/sell
    Fee calculation for account without public key
    More UI work
    fixed exception: don't call html5_qrcode_stop() if not started
    added call to html5_qrcode_stop() when raw transaction details modal closed
    removed obsolete qrcode libraries
    Disable the passphrase when doNotSign is checked
    Re-enable the passphrase field when using doNotSign so that it can be used for encryption
    Add optional public key field to enable entering a public key manually when "Do not sign" is enabled while the account has no public key on the blockchain
    Enable the pass phrase field in case it was disabled by the do not sign functionality
    Clear and disable the passphrase field when do not sign is checked
    When doNotSign is checked, do not send passphrase to the server and do not sign the returned transaction bytes. Only display the unsigned bytes in return.
    Feature not done.
    Add do not sign checkbox, visible only when do not broadcast is checked
    Move MS specific code from modals to ms
    Fix WebStorm inspections from nrs.modals.js
    added copyright notice headers
    Added data-transaction-type, data-transaction-subtype data attributes to modal divs (not all, asset buy/sell dialogs again problematic)
    Add minBalance logic, fee addition structure to transaction approval dialog, first specification-complete implementation of approval dialog (still untested)
    Reworked approval whitelist UI element to be reusable in other modal multi-account input contexts
    Add optional whitelist to by-asset, by-currency transaction approval modal dialog
    Added concept for reusable UI elements for modals, first UI element for more comfortable block height input in forms
    Add fee addition logic for NXT transaction fee, UI for approval modal fee additions
    removed blacklist
    Started to integrate different amount forms (Account/NXT) for approval modal dialog
    Disable approval button when transaction approved, bugfixes
    Added BY-BALANCE model to transaction approval modal
    renaming
    Added moment.js library (MIT) for date calculations, added modal form element for auto-update estimated block reach date for entered block heights
    Added contact name info field to approve account input fields
    more poll results
    Worked on approval modal, all approval types present
    Reworked current status of approve transaction code, integration in new HTML template structure, JS code integration into nrs.modals.js
    1. Exchange offer decimal positions
    2. Exchange offers are now published from the currencies table not from a menu item since this provides the data needed for decimal calculation
    3. I removed the height in hours since its unreliable and used the same control as in currency issuance height (perhaps we can do better but at least it looks the same in both places)
    Moved tx approval dialog invocation to advanced link (from approve by link)
    Started working on 2-phased transaction UI, new tabbed transaction modal dialog module, new nrs.modals.approve.js logic file
    Some work on issuing exchange offer and listing all available currencies
    1. IssueCurrency client side dialog
    2. Implement controllable currency type - currency which can only be transferred to/from issuer and only issuer can publish exchange offer
    Minor.
    DGS block passed.
    Don't show note to self until DGS block.
    Note to self.
    Correctly fill in contact name.
    SELECT type default value.
    Alias & message changes.
    PKAnnouncement adjustments.
    More multilingual support.
    Minor DGS fixes.
    Encrypted messaging internal changes.
    Advanced / basic settings toggle.
    Allow not broadcasting of transaction.
    NXT mask changes.
    Minor.
    Hide fee / deadline by default - show via advanced toggle.
    Add dependencies.
    Make seller links work, click to submit.
    Account modal fix.
    Modal helper functions.
    Show warning when submitting amount / fee higher than user specified.
    moved tools to ui
    Reset scroll position of active tab.
    Housekeeping
    Even more splitting..
    Infrastructure work + hide main side menus based on disabled tags and APIs
    Fix WebStorm inspections for sitebuild.js
    updated copyright year
    Fee calculation: update all modals with the fee calculation UI and remove modal and widget specific calculation. Still not done:
    Asset and currency issuance
    Asset/Currency buy/sell
    Fee calculation for account without public key
    More UI work
    Fee calculation experiment
    Load plugin Html page and modal before plugin JavaScript
    added copyright notice headers
    Added missing translation strings for phasing modal dialog
    Added missing translation strings to top navigation, sidebar and dashboard
    Add adminPassword template and use in the addPeer and blacklistPeer modals
    Fix delay when loading modal dialogs
    Add id check to prevent double entries in sidebar menu
    Added ui modal element for currency input, completed basic version of by-currency approval transaction dialog
    Added concept for reusable UI elements for modals, first UI element for more comfortable block height input in forms
    Adding 'add message' feature to dividend payment modal.
    New method NRS.appendSubHeaderToTSMenuItem to add sub headers to sidebar items, combined two marketplace main sidebar navigation items to one separated by My-Store sub header
    Added badge with number of Approval Requests to sidebar menu item, added regular NRS.pages.dashboard method for more in-time dashboard updates
    Split up advanced modal template for more flexibility, removed advanced_modal_no_fee_deadline_template
    Added dynamic sidebar creation, new NRS.setup.PAGENAME methods for setup tasks
    Added constants (nrs.constants.js) to client
    Reworked asset_exchange, balanceleasing, contacts, dgs, monetary_system modals, checked integrity
    Added recipient modal template, added template to sell, transfer alias modals, checked integrity
    Added add message modal template, reworked delete_alias_modal, sell_alias_modal, checked integrity
    Renaming template data attribute
    Finalized concept for template integration
    Added handlebars.js library (MIT) for more flexible/robust template handling
    Reviewed secret phrase modal include
    Added HTML modal template for secret passphrase form dialog, new html/modals/templates.html file, basic integration in index.html for one exemplaric transaction dialog
    Replaced direct loading of page/modal HTML contents in index.html by wrapper functions for more future flexibility in building stuff together
    updated copyright year
    added copyright notice headers
    JS refactoring for API test servlet with separate JS files html/ui/js/ats.js and html/ui/js/ats.util.js
    Infrastructure work + hide main side menus based on disabled tags and APIs
    updated copyright year
    Fee calculation: remove more client side fee calculation from polls
    Fee calculation: remove client side fee calculation from polls
    Fix WebStorm inspections for polls
    Reuse NRS.getAccountLink instead of composing the <a> tag
    Consolidate all transaction link Html generation into a single method
    Remove "Copy" links which rely on ZeroClipboard
    Fix ""not valid: " Object" message printed by d3pie.js when provided with empty value
    Rely on server value for epoch beginning and refactor the client epoch time calculation into methods similar to the server side calculations
    added copyright notice headers
    added getBlockchainTransactions API, deprecated getAccountTransactions and getAccountTransactionIds
    Added translation strings for voting system
    Refactoring - replace the hardcoded Genesis account with the genesis account provided by server
    Readded accidentally excluded finished polls (API behaviour change) to my polls page
    Minor
    Changed vote link on my polls page to button for consistency/enabling disable functionality after voting
    Fixed bug on poll chart creation not considering case of resultsdata with no results
    Add simple pie chart representation for poll results
    Added possibility to remove polls from followed polls list
    Minor
    Correct handing of decimals for min balance in poll creation dialog, fixed various bugs
    Add NONE min balance type to create poll dialog
    Replaced poll duration form field with block height UI element for easier poll duration input
    Fixed min_balance type selection in poll creation dialog
    Replaced currency/asset ID fields with corresponding UI elements for easier poll creation in modal dialog
    Fixed voting model choice for poll creation dialog
    Add pagination to active polls page
    Layout fixes for create poll dialog - not done
    Some UI foo for voting answer slider
    Layout improvements for polls tables
    Added/Reactivated voting button on followed poll poll result pages
    Fixed poll creation fee bug (changing fee to undefined when adding/removing answers)
    Disable vote button for already voted polls
    Disable follow button for already followed polls
    Changed votes display box to full width, added simple votes display limit (currently 50) to votes display box for scalability on large vote number
    Decimal places in min balance - code cleanup no functional changes
    Voting system table layout optimizations
    Switched My-Polls, My-Votes item position in sidebar
    Poll results formatting
    Minor
    UI optimizations for active polls table
    Added translation texts for success_poll_followed, error_poll_save_db
    use minBalanceModel in pollResults to decide if holding is asset or currency
    Fix number formatting for poll results and escape blockchain data
    Number formatting - code review is appreciated
    Vote results formatting
    holdingId fix and alter representation of poll results
    added follow poll button
    vs ui results modal and fee increase with 20+ options
    Fixed nrs.polls.js to not break client code on startup
    added form:first to data in poll transactions
    removed dependancy on unconfirmed transactions
    Replaced fee/deadline form html in create_poll_modal with template to enable usage of dynamic fee structure
    Fix local signing for cast vote (not tested) - all parameters has to be strings
    Fix local signing for create poll
    small castVote glitch
    bringing VS ui up to date
    Replaced static ID list on user modal event listener with more flexible class action identifier for looser coupling
    Replaced static ID list on transaction modal event listener with more flexible class action identifier for looser coupling
    Table based approach for user data DB lead to unsolvable conflicts on concurrent DB init, switched to DB based approach, refactoring of migration code
    Switched to account based user DB tables to separate user data from different account, postponed DB init (after login), started legacy table transfer mechanism
    New method NRS.appendSubHeaderToTSMenuItem to add sub headers to sidebar items, combined two marketplace main sidebar navigation items to one separated by My-Store sub header
    moving toward followed polls
    added phasing_poll_result table
    Added dynamic sidebar creation, new NRS.setup.PAGENAME methods for setup tasks
    more listing of voters
    poll results and voters listing
    more poll results
    renamed finishBlockHeight to finishHeight
    catching up to the current updates
    working on poll results
    get my_polls to load
    minor, prepping for poll results
    all voting pages nearly finished, only need results
    changing tables to one page each
    leveling ui from small changes uncommited
    VS ui cast vote backend and list my polls
    dynamic sliders added to cast vote
    VS ui, listing and starting cast vote modal
    create poll fixed completely, poll information model created, polls now listed
    Display polls on page, start on my polls
    finished modal for create poll
    Internationalization.
    Add dependencies.
    Remove display of numeric account IDs.
    DataLoaded method.
    use Reed Solomon by default.
    Unconfirmed transactions and other minor edits.
    Add unconfirmed transaction to dashboard immediately.
    Reed Solomon support.
    moved tools to ui
    Minor.
    Small bugs.
    More splitting up of javascript.
    Add UI for singleton asset issuance
    When asset shares are deleted do not issue "invalid asset" message, instead update the "total available" label in the exchange page with the getAsset value not from the database value which can be outdated
    Fix #335 Font color in asset Trade History Total column
    Infrastructure work + hide main side menus based on disabled tags and APIs
    String.startsWith is not supported on IE < 12. Substituted with String.indexOf(...) == 0
    updated copyright year
    Label rephrasing
    Support initial asset quantity and available asset quantity in transaction info dialog and improve invalid asset message
    Deletes History page
    Submit the new delete asset shares transaction instead of transfer asset to genesis and add delete asset shares to the transaction info dialog
    Reuse NRS.getAccountLink instead of composing the <a> tag
    Fee calculation: update all modals with the fee calculation UI and remove modal and widget specific calculation. Still not done:
    Asset and currency issuance
    Asset/Currency buy/sell
    Fee calculation for account without public key
    More UI work
    Consolidate all transaction link Html generation into a single method
    Remove "Copy" links which rely on ZeroClipboard
    fixed translation string
    added includeAssetInfo and includeCurrencyInfo parameters to getAccountAssets, getAccountCurrencies, getAccountExchangeRequests, getExpectedAssetTransfers, getExpectedCurrencyTransfers
    default to false for almost all includeXXX optional API parameters
    Fix the "available" message on the transfer asset modal
    Implement delete shares modal based on the asset transfer modal
    Merge mystcoin's fix for relying on API capabilities to decide when to use POST request
    cleanup
    Reflect expected order cancellation transactions in AE
    Fix AE trades history table
    Fix MS sync bug which caused the exchange booth to display empty + log error messages for parallel requests
    Show phased and unconfirmed transaction in the MS exchange booth
    Replace the height column with transaction status icon with link to transaction info and tooltip. Fix support for "Asset Issuer" label.
    Support unconfirmed and phased transactions in AE
    added copyright notice headers
    Added translation strings to monetary system, transaction modals
    Fix code indentation
    Fix local signing for asset issuance without specifying decimal positions
    Add permanent message option to the marketplace purchase feedback modal + various simple fixes
    renamed pending to phased/phasing
    Do not reflect unconfirmed transactions in the asset exchange
    Fix WebStorm inspections
    WebStorm inspections and label fixes for MS
    Add withoutWhitelist=true to asset/currency approval page item select
    Replaced static ID list on user modal event listener with more flexible class action identifier for looser coupling
    Replaced static ID list on transaction modal event listener with more flexible class action identifier for looser coupling
    Fix pagination for approval request pages
    Added approval requests page for by-asset transaction approval requests
    Table based approach for user data DB lead to unsolvable conflicts on concurrent DB init, switched to DB based approach, refactoring of migration code
    Switched to account based user DB tables to separate user data from different account, postponed DB init (after login), started legacy table transfer mechanism
    New method NRS.appendSubHeaderToTSMenuItem to add sub headers to sidebar items, combined two marketplace main sidebar navigation items to one separated by My-Store sub header
    Added dynamic sidebar creation, new NRS.setup.PAGENAME methods for setup tasks
    Changed quantity displayed on asset exchange sidebar bookmarks from total quantity to owned quantity
    Fix html bug in asset order confirm dialog
    Fix #257 Pay Dividends link appears only once and move the link to the upper row
    Fixed sell-all-bug on asset exchange sell dialog reported on https://nxtforum.org/asset-exchange/'sell-all'-bug/, entering wrong quantity numbers when auto-filled by clicking on the amount of assets owned, fixed for different amount of decimals
    Prevent entering decimal data which cannot be used for rate calculation in MS like in AE and fix validation for typing number from the numeric keypad (super sensitive change which requires a lot of testing)
    Dividends payment UI
    Made fixes for this issue: https://bitbucket.org/JeanLucPicard/nxt/issue/141/client-ui-automatic-filling-of-sell-field
    Removed color from trade type in histories and changed color on total column based on if the user is the buyer or seller or neither
    Changed type column to display the type of trade it was (not if the user was the buyer or seller).  Left the type variable to color the total value to show if the user spent or received NXT.
    Removed line that set the timestamp to the genesis date.  Not sure why it was there except for testing at one point?
    Trade history type.
    Remove temp.
    Transfer history.
    Language.
    Pagination.
    Asset Distribution.
    Trade history.
    Open orders changes.
    Switch between global asset trade history and just your trades for the specific asset.
    Trade history page.
    Show buyer and seller in asset trade history table.
    My assets page modifications.
    Duplicate asset bookmark fix (when no DB available).
    Minor.
    DGS block passed.
    Plural form.
    Fix for when DB is not available in browser (asset exchange).
    Scrollbar fix.
    Minor.
    Asset order cancellation fix.
    Transfer asset modal changes (message support).
    Even more multilingual support.
    More multilingual support.
    Removed cruft.
    Internationalization.
    Add dependencies.
    Make adding assets work in private-mode browsers.
    DataLoaded method.
    Minor.
    Helper functions.
    Minor fix.
    AE bookmark completion function.
    Minor AE.
    Do not save asset issuer ID.
    Do not fetch new assets from contacts automatically.
    More AE.
    Asset exchange no longer shows all assets. User must bookmark assets now instead.
    Remove featured asset listings.
    Minor.
    Allow period character from numeric pad.
    Firefox asset sidebar fix.
    Minor.
    Minor.
    Instant asset search (no enter key necessary).
    Featured assets list.
    Show plus or minus sign for pending asset transfer on my assets page.
    Show quantity of asset available for transfer in asset transfer modal.
    Minor.
    Alias search on aliases page.
    My assets page "total" fix.
    Correct amounts on my assets page.
    Asset transfer warning setting.
    Minor.
    Autolink URLs in asset description.
    Unconfirmed transactions and other minor edits.
    Minor.
    Different background color for assets owned.
    Don't show user assets with 0 balance.
    Make sure unconfirmed transactions are not added twice.
    Correct singular form for warning.
    Minor.
    Limit getTrades to last 50 trades.
    Automatic sell price adjustment.
    Minor.
    AE simplification.
    Make sure unconfirmed transaction doesn't show up twice.
    Add unconfirmed transaction to dashboard immediately.
    Clear asset search results when navigating to asset directly.
    Resize event.
    Fix scrolling in asset exchange sidebar.
    isScanning minor.
    Minor.
    Asset exchange clear search button.
    Reed Solomon support.
    Minor.
    Asset exchange search.
    Minor.
    Asset exchange API simplification.
    Ajax multi queue support.
    moved tools to ui
    Retry ajax call on timeout (GET requests only).
    Fixed bug in asset order modal (button text).
    Show link to asset in transaction modal.
    Undefined variable bug.
    Fixed non-responsive browser state issue.
    Minor changes everywhere.
    Minor.
    Asset exchange priceNQT is per asset, not per order.
    Try/Catch.
    Housekeeping
    Finishing Asset exchange NQT.
    Transfer Asset Command Field and some more NQT.
    Asset exchange NQT.
    More splitting up of javascript.
    Remove dead code for the non existent dashboard_blocks_table
    updated copyright year
    Add block height to sidebar
    Set average block time hard coded to 60 seconds after the 1.7 hardfork
    average block time is 60 s
    Prevent lockup when getBlock returns before getConstants during client startup
    Reuse NRS.getAccountLink instead of composing the <a> tag
    Remove the obsolete NRS.inApp variable since we no longer support the wrapper frame used by the Wesley installer
    Fix WebStorm inspections for nrs.blocks.js
    added copyright notice headers
    Refactoring - replace the hardcoded Genesis account with the genesis account provided by server
    Fixed block generation time on blocks page info box not being page-wise
    Replaced static table references block modal event listener with generic class action attribute allowing to opt-in functionality
    Added badge with number of Approval Requests to sidebar menu item, added regular NRS.pages.dashboard method for more in-time dashboard updates
    Moved transactions navi to subnavi of Dashboard
    Added dynamic sidebar creation, new NRS.setup.PAGENAME methods for setup tasks
    Added moment.js library (MIT) for date calculations, added modal form element for auto-update estimated block reach date for entered block heights
    Delaying next getBlock call try on error case to prevent flooding with calls in repeated/constant error case
    All of MS's transaction types are added into GUI now.  Also made some more minor GUI fixes for MS
    use big integers for forged blocks calculation
    Attempt to fix NaN display in some browsers
    Optimization to not do unneeded calculations on Forged Blocks page
    Hide avg amount per block on Forged Blocks page and Avg Fee per block based off of forged fees total/num of forged blocks
    Fixed Forged Block count because of pagination and fixed more styles for corporate theme
    Ready for testing of new Dashboard design.  Needs optimization still.  Added missing current block and connected status
    Fixed Block Generation Time because of pagination
    Added js for Blocks pagination and new API call.  Tried cleaning up the code some from the old API call, may still need some cleaning, but file should be good to go
    Blockchain download notification.
    Forged blocks changes.
    PKAnnouncement block has passed.
    DGS block passed.
    Download meter.
    Multilingual fix.
    minor
    Minor.
    Check DGS block passed also based on last feeder height from getState.
    Minor.
    Blockchain download tracking speed.
    Blockchain download progress changes (show progress bar until 6 hours ago).
    Change DGS block height activation.
    Note to self.
    PKAnnouncement changes.
    DGS block adjustment.
    Genesis account handling.
    PKAnnouncement adjustments.
    Enable certain elements at specific block height.
    Internationalization.
    12 or 24 hour date format setting.
    Add dependencies.
    Check if on a fork.
    DataLoaded method.
    Block type toggle button.
    Forged block modal fix.
    Unconfirmed transactions and other minor edits.
    Make AE visible by default.
    Remove pre-NQT logic.
    isScanning behavior.
    Minor.
    Minor.
    Make sure block and peers page auto-update.
    Minor blocks page adjustment.
    Minor.
    Show AE on block 135,000.
    Blockchain download progress.
    Reed Solomon support.
    Minor.
    Add Forged Balance to dashboard.
    Ajax multi queue support.
    Fixed forged block modal not showing.
    Show transaction confirmation count on hover.
    Minor
    Fix error when user has not forged any blocks at all.
    Show different message when the blockchain is downloading.
    moved tools to ui
    Use toFixed instead of toPrecision.
    Show block modal for all blocks.
    Minor changes everywhere.
    Minor NQT.
    Minor.
    Housekeeping
    Even more splitting..
    More splitting up of javascript.
    updated copyright year
    fixed test servlet file upload form submission
    allow forcing retrieval of pruned data for some APIs
    1. Enhance the test page to submit upload requests normally so that the response is written to the page
    2. Make the upload file size configurable, defaults to the max tagged data, log exception and return an error in case its too big
    added copyright notice headers
    From some reason when submitting this form using Ajax I cannot get the file object. Let's continue to submit using normal form submit.
    Fix WebStorm inspections for test page
    Add support for uploadTaggedData and downloadTaggedData transactions
    Added toggle button to API test servlet for showing only non-empty form fields for ease of work with complex API calls
    Replaced Show Open/Show All text link navigation in API test servlet with toggle button
    Simplified API call submit/GET url creation in API test servlet
    Fixed bug creating GET url for API calls with same parameter calls in API test servlet
    Applied patch from Bitbucket (Issue #184) for test page not processing duplicate parameters (thx to mystcoin!)
    JS refactoring for API test servlet with separate JS files html/ui/js/ats.js and html/ui/js/ats.util.js
    updated copyright year
    Create meaningful tooltips for peer services
    Add peer services to the peers list (quick and dirty)
    Fix peers page broken by the update feature
    Fix webstorm inspections for nrs.peers.js
    Use admin password from settings as default for peer add/connect/blacklist dialogs
    added copyright notice headers
    Hide the admin password field when not needed and add connect peer modal when admin password is required
    Add adminPassword template and use in the addPeer and blacklistPeer modals
    Moved transactions navi to subnavi of Dashboard
    Added dynamic sidebar creation, new NRS.setup.PAGENAME methods for setup tasks
    Connect peer button
    addPeer returns isNewlyAdded
    Reordered peers translations and added new ones
    Display more verbose message after adding peer
    Fixed disappearing blacklist message
    Switched from completely removing blacklist-peer button to just setting to disabled when NRS.needsAdminPassword is true, removed HTML loading of previously removed voting_system modal/page files
    Added new NRS.needsAdminPassword to client, only show blacklist-peer buttons if setting is set to false
    Right-align actions/blacklist column on peers table
    UI for adding and blacklisting peers
    optionally include full peer info in getPeers
    Changed Peers page to use new API call, improving performance
    Changed Peers page to use new API call, improving performance
    Active peers optimization.
    Peer version check fix.
    Peer changes when connected to TestNet (up to date peers).
    Add dependencies.
    DataLoaded method.
    Make sure block and peers page auto-update.
    moved tools to ui
    More splitting up of javascript.
    updated copyright year
    Fixed finish height rounding
    Fixed regression of "approveTransaction" handling by UI when mandatory approval is enabled
    Removed mandatoryApprovalParamsJSON since we have the phasing control parameters in accountInfo
    Set default finish height to the center of the phasing duration interval
    Clear mandatoryApprovalParamsJSON when mandatory approval is disabled
    No automatic phasing for the approveTransaction (since PHASING_VOTE_CASTING is not disallowed when pahsing_only is enabled)
    Fee calculation: remove the obsolete, client side, phasing fee additions calculation
    Hide phasing parameters when mandatory approval is enabled and fill them automatically
    bugs, optimizations, various changes
    Fixed: when using "Do not broadcast" without "Do not sign" the downloaded signed JSON file was prefixed "unsigned" and naming changes
    fixed exception: don't call html5_qrcode_stop() if not started
    added call to html5_qrcode_stop() when raw transaction details modal closed
    removed obsolete qrcode libraries
    Indentation and webstorm inspections fix
    Issue 312 (QRCode scanning bug): replaced qrcode and jsqrcode js libraries with ZXing core and javase java libraries; added EncodeQRCode and DecodeQRCode APIs
    Remove the attachment object from the parsed response
    Hide the broadcast button instead of disable it and remove the prunable JSON field
    Merge the remaining signed bytes tab into the new signed json tab and remove the old transaction bytes operations modal
    Move the parseTransaction and calculateFullHash tabs to the transaction JSON operations and add a JSON field to each tab
    Add timestamp to downloaded file name
    Add the missing download and upload links
    Upload now looks better, works on Chrome but does not work on Firefox. Perhaps need to replace <a> with <img>
    Simplistic file upload to text area widget which works but looks awful - I can do better
    Add download link to the unsigned JSON field
    Support reading unsigned bytes QR code from the sign transaction dialog
    Prevent the QR code scanner from opening multiple canvas tags
    Improvements to the transaction JSON operations modal and to the QR scanning code
    Implement Transaction JSON operations dialog (some UI improvements are still required)
    Fix WebStorm inspections
    Scan the QR code for the signature
    Handle cases where unsigned bytes are not returned from the server
    Implement signing for raw transaction bytes modal and allow reading the signature into the text area from a QR code using html5-qrcode
    Display QR code only when transaction is not signed and always display transaction JSON
    Add QR code for unsigned bytes
    When doNotSign is checked, do not send passphrase to the server and do not sign the returned transaction bytes. Only display the unsigned bytes in return.
    Feature not done.
     #289 UI - Phasing: missing option to require a minimum balance of NXT - merged from feature/ui
    Implement calculation modal and abstract the hash algorithms selection into a UI element
    UI Phasing missing option to require a minimum balance of NXT
    added copyright notice headers
    Fixed voting model 1
    Hide popovers
    Phasing minimal balance auto-fill
    Voting model currency and asset auto-fill
    Added mandatory approval info
    Fixing auto-fill of phasing parameters when 2p ac is enabled (still WIP)
    Fixed mandatory approval dialog
    Auto-fill phasing parameters when mandatory approval is enabled
    Fixed duplicate PhasingOnly object in DB cache
    Added warning in advanced modal dialog for not phasing-safe transactions
    Added data-transaction-type, data-transaction-subtype data attributes to modal divs (not all, asset buy/sell dialogs again problematic)
    Fixed (severe) bug not resetting the transaction fee addition for a new transaction after a phased transaction
    renamed pending to phased/phasing
    Added fee addition html to issue_currency_modal, replaced generic advanced form input with templates, fixed bug with fee addition for approval modal logic
    Fixed a bug with wrong quorum conversion for NXT quorum
    Add minBalance logic, fee addition structure to transaction approval dialog, first specification-complete implementation of approval dialog (still untested)
    Reworked approval whitelist UI element to be reusable in other modal multi-account input contexts
    New ui element for adding asset ID, completed by-asset approval transaction dialog
    Added ui modal element for currency input, completed basic version of by-currency approval transaction dialog
    Added concept for reusable UI elements for modals, first UI element for more comfortable block height input in forms
    Renamed amount-accounts to number-accounts in approval dialog
    Started to integrate different amount forms (Account/NXT) for approval modal dialog
    renaming
    Added moment.js library (MIT) for date calculations, added modal form element for auto-update estimated block reach date for entered block heights
    Minor.
    More multilingual support.
    Internationalization.
    Minor.
    Advanced transaction operations modal.
    Fixed gitlab #14 currency without orders is now counted on dashboard
    updated copyright year
    Create meaningful tooltips for peer services
    fixed broken English
    Fix inspection
    #322 UI Fix Account Name Length
    Phasing duration and max fee in Account Control details
    Set default finish height to the center of the phasing duration interval
    Remove multiqueue of GET requests since it causes instability in some configurations
    Allow searching for numeric seller account id
    Hide the switch account widget when the saved accounts cookie does not store accounts and initialize the account link settings for new accounts as well
    Sidebar changes: account id is no longer a link, below it there are two buttons, set account info (or the account name if set) and details which takes you to the account detail modal
    Move account id link back to the side bar above the account name
    Make JQuery pagination button listeners auto apply to handlebars generated content
    Show phasing parameters for mandatory approval
    Reuse NRS.getAccountLink instead of composing the <a> tag
    Moved Account Control to Account Details
    Remove references to the ZeroClipboard component
    Implement Hallmark dialog
    Fix WebStorm inspections in nrs.js
    Remove the obsolete NRS.inApp variable since we no longer support the wrapper frame used by the Wesley installer
    no need to includeAssets and includeCurrencies in some getAccount calls
    
    (cherry picked from commit 87169d7dd1c08581437d1b70977a68babc0073d3)
    no need to includeAssets and includeCurrencies in some getAccount calls
    default to false for almost all includeXXX optional API parameters
    Fund new account with BTC
    Alert the client when getBlockchainStatus request returns an error (most likely since the server is down) and fix an exception when clicking on the messages counter panel on the dashboard
    Improve no public key message in case the passphrase is available on the client but the public key has not been announced to the blockchain
    Calculate currencies value and display on dashboard
    Do not assume the order of assets returned by GetAccount is the same order as returned by GetLastPrice even though this is currently true
    Use the GetLastTrades API to calculate the asset value
    Improve notification message when using a new account without specifying the passphrase
    Reflect the forging status of the current account when more than one account is forging and correctly invoke the start and stop forging dialogs according to the current account
    Update forging status every 30 seconds to reflect server side changes
    Forging indicator now supports both passphrase and admin password. Forging indicator status reflects the actual forging status
    Fixed showing singular/plural notifications + correct count for assets sold/transfered/received
    added copyright notice headers
    Attempt to fix "TypeError: current_balances is undefined nrs.js:1126"
    Fix WebStorm inspections related to forging indicator
    Resorted settings on a 2-column based grid for convenience, added startup alerts giving clear feedback on plugins loaded, added ability to enable/disable plugins on an account basis (default: disabled, but very easy switch), added settings warning for browsers with limited DB support storing settings browser-wide (mainly Safari)
    added getBlockchainTransactions API, deprecated getAccountTransactions and getAccountTransactionIds
    Refactoring - replace the hardcoded Genesis account with the genesis account provided by server
    Refactor the NRS.sendRequest function - we no longer support specifying the function name as the 2nd parameter instead of the data parameter. Since there is always a callback we no longer need to check for its existence. Small method refactoring and fix syntax errors pointed by WebStorm
    Change send NXT and send message links to use RS account format so that the recipient account is now displayed correctly when pasting the link (this feature requires login with passphrase and has some UI  problems)
    More fault-tolerant way of initializing NRS.transactionTypes by adding generic unknown-fields for transaction types/subtypes not known by client, added serverConstants to NRS.transactionTypes array
    Remove public key message when logging in with a new account without specifying a passphrase
    Log account settings and additonal properties to the JavaScript console
    Added GET variable for login and modified switchAccount code for this
    Print environment information about the client environment to the browser JavaScript console
    Added unconfirmed/phased transaction notifications to client header, new mechanism to provide subpage info on page load
    removed polls from legacy db
    bringing VS ui up to date
    Merged loginAccount and login into one function
    Replaced static ID list on user modal event listener with more flexible class action identifier for looser coupling
    Initial change to Holger's design.  Buttons need more styling and still need to change from database to cookies or account list
    Add comment not to use the legacy database
    Changed notification reset timestamp from current time to last known transaction time
    Changes to support new database scheme
    Fallback for Safari to old browser centric DB model due to buggy indexedDB implementation
    Fixed/simplified legacy transfer function not working in Firefox
    Finished legacy data transfer for DB level account data storage
    Table based approach for user data DB lead to unsolvable conflicts on concurrent DB init, switched to DB based approach, refactoring of migration code
    Finished legacy DB table tranfser logic
    Finished DB legacy table transfer method
    Switched to account based user DB tables to separate user data from different account, postponed DB init (after login), started legacy table transfer mechanism
    Added simple transaction type based notification system for client, temporary bug fixing for transaction approval
    Display name of account if it was set
    Finish up Account login.  Needs more testing
    Added plugin list, security warning to login screen
    Started plugin validation code, added valdation/NRS compatibility status constants to constants dict
    Separate approval request page and badge loading due to side effects when being on other pages
    Added badge with number of Approval Requests to sidebar menu item, added regular NRS.pages.dashboard method for more in-time dashboard updates
    Added approval requests page for account requests (no actions yet)
    Finished first draft of UI element for pending transactions in transaction table
    Added the API server constants to the NRS constants dictionary
    Moved contacts navi to icon in header (top right)
    Minor layout changes
    Added dynamic sidebar creation, new NRS.setup.PAGENAME methods for setup tasks
    Added constants (nrs.constants.js) to client
    Added moment.js library (MIT) for date calculations, added modal form element for auto-update estimated block reach date for entered block heights
    #266 fixed searching by block id loads the block transaction list with invalid dates
    Added new NRS.needsAdminPassword to client, only show blacklist-peer buttons if setting is set to false
    Added tooltip to transactions type navigation
    Started to rework transactions page, centralized transaction type information like type icon or i18n string in nrs.transactions.type.js file
    Fixed false positive you-are-probably-on-a-fork message triggered by to few downloaded blocks on client startup
    Added progress bar for latest 5000 blocks contextually displayed in blockchain progress dialog depending on blockchain download size for better tracking download progress
    Added 2 new global state variables NRS.serverConnect and NRS.peerConnect, added switch to blockchain download progress dialog to halted when no connection to server or peers available
    Added blocks left info to blockchain download info bar
    Changes to page navigation to work with larger page numbers
    Minor
    Replaced page navigation prev/next text by icons, moved text to title attribute
    Reworked/simplified page navigation, added possibility to jump back to beginning of pages
    Lessor status message now includes information about the next lessee
    minor
    Improve account  leasing messages and account details - account leasing dialog
    Fix comma
    Make sure, Asset Exchange sidebar quantities are updated on Sell/Buy/Transfer blockchain update
    Minor changes
    Added Dashboard info box for pending and completed Marketplace sales
    #259 Display row numbers when paging a table
    Added Marketplace purchases info box to Dashboard
    Added Dashboard info box for Monetary System (Currency count)
    Added second info box row to Dashboard, added Alias count box
    The MS links are enabled by default no need to explicitly show them
    changelog
    always enable MS menu as we are after block 330000 now
    Enable the MS on block 330000
    Enable the MS on block 330000
    Fixed issue with asset balance showing with too many decimals on dashboard (Bitbucket issue #175)
    set MS block in the UI
    Use NRS format for account leasing message (I'm planing more work on leasing dialogs)
    Revert webstorm inspection fix
    Fix webstorm inspections
    Check if we reach the MS block on the main net, or if we are on the test net, then show the new features.  Otherwise hide them.  Can't test this at work right now, so will test at home when I get a chance
    Improve testnet warning to include the peer port and report offline status of the peer
    Improve testnet warning to include the peer port and report offline status of the peer
    A few style updates for the corporate design and a check added for local storage being enabled
    Added new icons for corporate theme, fixed asset value when account has no assets, and a few more styles fixes for the new theme
    Added missing else statement if the account has no owned assets and displays the assets' value as 0
    The asset value should now be calculated the correct way and no longer result in inconsistent values
    Made the connected indicator in the sidebar it's own function and moved where it is called.  Also, only check for connected peers since that is what we are interested in
    Ready for testing of new Dashboard design.  Needs optimization still.  Added missing current block and connected status
    Removed setting itemsPerPage from this file
    Added entries for #account_balance_sidebar to get account balance
    Assets received / sold message.
    Correctly translate account info name on language change.
    Show account lessors in RS account format.
    PKAnnouncement block has passed.
    DGS block passed.
    Minor.
    More spacing between pagination links.
    Typo.
    Blockchain download tracking speed.
    Rescan fix.
    Blockchain download progress changes (show progress bar until 6 hours ago).
    Scrollbar fix.
    Minor.
    In-app check fix.
    DGS search page.
    isLocalHost
    App communication.
    Minor language changes.
    PKAnnouncement adjustments.
    Public key announcement support.
    Enable certain elements at specific block height.
    Check if DGS block is passed.
    More multilingual support.
    Minor.
    If user is using windows / mac app, show notice if new version is available.
    Internationalization.
    Various minor changes.
    Alias sell to anyone fix.
    NXT mask changes.
    Remember passphrase setting.
    Masked input for reed solomon account number.
    Add dependencies.
    Minor.
    Check if on a fork.
    Remove cruft.
    Remove display of numeric account IDs.
    DataLoaded method.
    Go to page fix.
    Pagination support.
    Minor AE.
    Do not fetch new assets from contacts automatically.
    Asset exchange no longer shows all assets. User must bookmark assets now instead.
    Add clear button to search fields.
    Minor reed solomon changes.
    Alias search on aliases page.
    Typo.
    Unconfirmed transactions and other minor edits.
    Popover fix.
    Typo.
    Search by Reed solomon account number or alias (in main sidebar).
    Make AE visible by default.
    Remove pre-NQT logic.
    isScanning message.
    Show asset buy/sells correctly.
    Resize event.
    Show asset differences via notifications. (buy/sell).
    Minor.
    isScanning functionality.
    Correct check for isLocalHost.
    Show AE on block 135,000.
    Blockchain download progress.
    Reed Solomon support.
    Minor.
    Add Forged Balance to dashboard.
    Asset exchange API simplification.
    use getBlockchainStatus API call
    Ajax multi queue support.
    Minor.
    Center without javascript.
    Detect when in loaded in app.
    Show transaction confirmation count on hover.
    Show different message when the blockchain is downloading.
    Make sure client works even when cookies are disabled (firefox).
    moved tools to ui
    Balance leasing minor.
    Minor.
    Leased forging minor.
    Forging indicator modifications.
    Show link to asset in transaction modal.
    Shows lessors list (account leasing).
    Minor changes everywhere.
    Minor NQT.
    Added setAccountInfo API (name/description).
    Minor.
    Show account leasing details.
    Only get balance/transactions after logging in.
    Housekeeping
    More reorganization.
    Even more splitting..
    More splitting up of javascript.
    Split javascript in multiple files.
    More NQT.
    Moved extending of javascript natives to dedicated file.
    Reorganization of javascript files.
    Proper javascript indentation.
    Work on NQT.
    Encrypted messages phase 1.
    Contacts page modifications.
    Show new address format in account details modal.
    Removed unique alias feature from asset issuance.
    Bigger request timeout.
    Make sure unconfirmed transactions are shown if there are 0 confirmed transactions (for the specific type / subtype) also.
    Explanation of types of aliases (uri, account and other).
    Don't show "Add recipient to contacts" if already in contacts.
    Changed message shown when account does not have a public key.
    Testnet warning.
    Message encryption (unfinished).
    Check private IP range of host to determine if running local or not.
    The nxtcrytpo.org servers to use.
    New address format is not default.
    Guess correct address (new address format).
    Settings changes.
    Allow use of new address format everywhere.
    Allow copying of new address format.
    DB version numbering fix.
    Minor issue with block info modal.
    Added clear button to console.
    Fix for message chat box clearing itself automatically.
    Compare asset table IDs versus asset IDs returned by API.
    Updated RSS news section (new forum included).
    Show unconfirmed transactions on transactions history page.
    Unconfirmed orders show up correctly.
    Minor fix for askOrderId / bidOrderId in trade history table.
    Order quantity can be greater than asset quantity.
    Search box for transactions / blocks / accounts.
    Fix blocks < 100 bug
    Show unconfirmed open orders.
    Use NRS.unconfirmedTransactions everywhere instead of NRS.tentative.
    Unconfirmed transactions are fetched also.
    Use hash instead of transactionId to track pending (unconfirmed) transactions.
    Ensure order quantity is smaller than asset quantity in existence.
    Solomon reed account number support (in send xyz dialogs)
    View blocks generated by your account.
    "Pending" instead of "Tentative".
    Stop forging on logout.
    Added unique suffix possibility to assets (via alias) as well as a few other fields (url, tags, ..)
    Update settings storage and db functionality.
    Fix "unknown account" error when new accounts don't yet have a public key.
    Submit on enter.
    Ability to copy asset id / asset link.
    Allow direct linking to assets.
    Fix number of assets bug.
    IsLocalHost fix.
    Loading indicators for message and asset exchange sidebar.
    More asset grouping functionality.
    Asset ignore list functionality.
    Make asset clickable in notification box.
    Allow clicking on asset / nxt balance to fill sell / buy order form.
    Added minimum fee message popover.
    != to !==
    Add no_escaping parameter to NRS.formatAmount
    Generate token functionality.
    Fixed inline message sending (signing).
    Remember password functionality (during browser session).
    Forging  now works on trustless servers too, includes warning.
    Simple field existence check.
    Check for account ID collisions on login.
    Fixed issue with data trimming.
    Only prepare transaction (sign) if not running locally.
    SendMessage signing now works as well.
    Enable local transaction signing.
    Copy link for directly sending messages or Nxt to your account.
    Small text change.
    Added console logging of API requests.
    Added "Send Nxt" option to messages sidebar context menu.
    Allow users to link to a "Message" or "Send Nxt" dialog.
    Easily add account ID to contacts after sending Nxt / messages.
    Asset group closing addendum.
    Asset groups can be closed.
    Contact names work again as recipient input.
    Copy account ID to clipboard.
    First login message / public key warning.
    Contacts can now be selected in forms via recipient button.
    Contact name must contain alphabetic characters.
    Trim password verification (whitespace).
    Prevent modals from showing up multiple times during data load phase.
    Checks to make sure the user typed the correct password (mapping to currently logged in account id) in forms.
    Fix: Notification database entry should be per account.
    Typo fix.
    Show notification when asset is bought / sold.
    Actions tab in user info modal (send nxt, message, or add as contact).
    Asset exchange tooltip text.
    Timeout warning.
    Blockchain download progress for testnet too.
    Make asset exchange work in Firefox private mode (no indexedDB available)
    Asset order tooltip text.
    Changed asset order modal usability.
    Callback added to NRS.login.
    Reset pass phrase generator after generation.
    New NRS client initial commit.
    updated copyright year
    added copyright notice headers
    Make updated personal account info show before transaction is confirmed.
    Correctly translate account info name on language change.
    Internationalization.
    Add dependencies.
    moved tools to ui
    Set current account name/description when opening modal.
    Minor NQT.
    Added setAccountInfo API (name/description).
    Infrastructure work + hide main side menus based on disabled tags and APIs
    updated copyright year
    Move upload and extend modals from messages to tagged data and fix the view dialog escaping
    added copyright notice headers
    added getBlockchainTransactions API, deprecated getAccountTransactions and getAccountTransactionIds
    Punable data - added extend action to upload transaction info, extend dialog which uses the same fee payed by the upload transaction and transaction info for extend transaction.
    Punable data - implemented local signing for upload, fixed fee calculation, set isText to false by default
    Tagged data transaction - intermediate work on transaction info, local signing, client side fee calculation and transaction subtypes from server.
    Fix WebStorm inspections
    fixed some js to be compatible with prunable messages
    Remove unconfirmed messages from the messages page
    Fix WebStorm inspections for messages and prepare for removing unconfirmed transactions
    Added dynamic sidebar creation, new NRS.setup.PAGENAME methods for setup tasks
    Minor
    Added notifications for incoming messages with direct link for reading, usability improvements for message app
    Ready for testing of new Dashboard design.  Needs optimization still.  Added missing current block and connected status
    DGS block passed.
    Minor.
    Minor.
    Minor.
    Allow empty messages.
    Messages page changes.
    Minor.
    Remove sendEncryptedNote transaction type.
    Encrypted messages minor.
    Use new getAccountTransactions API.
    Internationalization.
    Show payment messages in messages section.
    Encrypted messaging internal changes.
    Minor.
    Minor.
    Encryption error messages.
    Use "passphrase" instead of "secret phrase".
    Minor.
    Handle decryption failure.
    Privatize variable.
    Add dependencies.
    Check if on a fork.
    Minor.
    Inline message sending (encrypted).
    Allow decrypting of messages.
    Move all encryption functions to nrs.encryption.js.
    Minor error code changes.
    DataLoaded method.
    Minor.
    Encrypted messages with shared key caching.
    Encrypted messages.
    Helper functions.
    Add account info option in message sidebar context menu.
    Inline message sending fix.
    Reed solomon fix for message sidebar.
    Make sure unconfirmed transactions are not added twice.
    Add unconfirmed transaction to dashboard immediately.
    Use fullHash instead of hash.
    isScanning minor.
    Reed Solomon support.
    moved tools to ui
    Fee NQT bug.
    Small bugs.
    Housekeeping
    Even more splitting..
    More splitting up of javascript.
    Implement back button on the transaction info, account info and block info modals
    Switch to/from columns to from/to in block transactions table
    updated copyright year
    Block info modal improvements - add prev, next block link, generator link and recipient/sender links to the block transactions
    Consolidate all transaction link Html generation into a single method
    Make sure block info dialog does not hang in case of exception
    Fix link from ledger table to block info modal and fix some layout problems
    Add transaction type to the transaction list in the block info dialog
    Clean inspections in block modal
    Display human readable time for transaction and block in the info dialogs
    added copyright notice headers
    Replaced static ID list on transaction modal event listener with more flexible class action identifier for looser coupling
    Replaced static table references block modal event listener with generic class action attribute allowing to opt-in functionality
    Improve navigation between info dialogs:
    1. From block info, clicking a transaction time stamp opens the transaction info
    2. From account info, clicking a transaction time stamp opens the transaction info
    3. From transaction info, clicking the block height opens the block info
    Reverting changes that I didn't meant to commit when doing the dividends UI work.
    Dividends payment UI
    Sort block transactions by time.
    Fetch block with transactions included.
    Add dependencies.
    Unconfirmed transactions and other minor edits.
    Reed Solomon support.
    Fixed forged block modal not showing.
    moved tools to ui
    Even more splitting..
    updated copyright year
    Recipient field in account properties modals
    Fee calculation: update all modals with the fee calculation UI and remove modal and widget specific calculation. Still not done:
    Asset and currency issuance
    Asset/Currency buy/sell
    Fee calculation for account without public key
    More UI work
    Support phasing voting model none
    added copyright notice headers
    Add Send Currency button which invokes the currency transfer dialog
    Table based approach for user data DB lead to unsolvable conflicts on concurrent DB init, switched to DB based approach, refactoring of migration code
    Switched to account based user DB tables to separate user data from different account, postponed DB init (after login), started legacy table transfer mechanism
    Client UI not requiring a public key to be added when sender is same as recipient
    Broaden watch scope for events for modal recipient selectors to benefit from jQuery live functionality, fixes bug for approval modal recipient selectors
    If an account has a name, it is now displayed when sending to it
    Added contact name info field to approve account input fields
    Added contact selection for pendingWhitelisted, pendingBlacklisted for approve modal
    Fix the usage of contacts in transfer currency dialog
    Removed variable fee, keeping fees at their minimal
    Fix account alias message.
    Merchant account regex handling.
    Same for alias.
    Show public key field for contacts too.
    PKAnnouncement block has passed.
    Plural form.
    Prevent pasting of old-style (numeric) account ID's.
    Correctly fill in contact name.
    PKAnnouncement changes.
    Alias & message changes.
    PKAnnouncement adjustments.
    Public key announcement support.
    Remove sendMoneyWithMessage transaction type.
    Internationalization.
    Payment with message support.
    NXT mask changes.
    Minor.
    Masked input for reed solomon account number.
    Add dependencies.
    Minor.
    Make aliases use RS format only too.
    Remove display of numeric account IDs.
    Disallow numeric account IDs.
    Alias account type working again.
    Aliases sell/buy.
    Use new alias API.
    Contacts fix.
    Minor.
    use Reed Solomon by default.
    Add unconfirmed transaction to dashboard immediately.
    Minor.
    Minor.
    Reed Solomon support.
    Show transaction confirmation count on hover.
    moved tools to ui
    Minor NQT.
    Added lease balance modal.
    Update account balance after doing a transaction.
    Even more splitting..
    Support token generation when using remember passphrase and use the remember passphrase to sign bytes in case passphrase not specified
    updated copyright year
    No need to escape the token text since it's generated locally
    Generate token using JavaScript without sending the passphrase to the server
    Implement Hallmark dialog
    Make token field readonly so that users won't be able to change it by mistake
    Fix WebStorm inspections and cleanup
    added copyright notice headers
    More multilingual support.
    Internationalization.
    Allow multi-line tokens.
    Decode token functionality added.
    Add dependencies.
    moved tools to ui
    Even more splitting..
    Infrastructure work + hide main side menus based on disabled tags and APIs
    updated copyright year
    Allow searching for numeric seller account id
    Reuse NRS.getAccountLink instead of composing the <a> tag
    default to false for almost all includeXXX optional API parameters
    Send messages to the server without encryption in case doNotSign is enabled
    Hide existing search results when marketplace is disabled
    Fix marketplace top section and remove pagination indicator when warning is displayed
    Implement marketplace warning
    Rely on server value for epoch beginning and refactor the client epoch time calculation into methods similar to the server side calculations
    added copyright notice headers
    Refactor the NRS.sendRequest function - we no longer support specifying the function name as the 2nd parameter instead of the data parameter. Since there is always a callback we no longer need to check for its existence. Small method refactoring and fix syntax errors pointed by WebStorm
    Do not show unconfirmed transactions in DGS tables
    Fix DGS WebStorm inspections
    Fix WebStorm inspections for messages and prepare for removing unconfirmed transactions
    Replaced static ID list on user modal event listener with more flexible class action identifier for looser coupling
    New method NRS.appendSubHeaderToTSMenuItem to add sub headers to sidebar items, combined two marketplace main sidebar navigation items to one separated by My-Store sub header
    Added dynamic sidebar creation, new NRS.setup.PAGENAME methods for setup tasks
    Add clickable links to Marketplace Purchase modal description (Bitbucket issue #191)
    Replaced usage of getState API call for DGS main page counts with calls on dedicated DGSCount API calls for performance reasons
    Fixed two pagination bugs in DGS (tag page nr resetting/pagination on no results page)
    Add default string for newly introduced translation string using $.t JS function from i18next
    Removed getDGSGoodsPurchases requests for feedback count in favour of new numberOfPublicFeedbacks API call attribute for goods
    Added autolink functionality for DGS good description
    Added modal for showing feedback to DGS goods
    Add number of purchases to DGS goods
    Reading tags from new parsedTags API goods attribute for DGS product list instead of splitting tag string
    Minor layout tweaks for DGS main page UI
    Finished frontend design of DGS main page
    Added DGS main page info header, header logic
    Added basic pagination for tags on DGS main page
    Enabled DGS browsing by seller, moved account info to info link
    Added custom headlines for search result pages
    Cleaned up calling structure for different DGS search pages, fixed/added pagination for seller, fulltext, tag search results
    Added DGS tag list, browsing by tags
    Some JS refactoring to get a more generic entry point to DGS page
    Added additional search box for DGS product search
    Using new API call to correct fix to display items that are out of stock, but not delisted
    Corrected fix so that it will display items that are out of stock, but not delisted
    Changed API call to only show listed items on the My Products For Sale page as pointed out here: https://bitbucket.org/JeanLucPicard/nxt/issue/171/my-products-for-sale-deleting
    Show if good is delisted.
    DGS delivery data required.
    Page requests.
    Pagination.
    Minor.
    Don't show previously decrypted goods data in marketplace view delivery modal.
    Show quantity of DGS products.
    Show buyer instead of seller in completed orders history.
    Don't show pending customer orders under seller purchased products.
    DGS search page.
    Minor.
    DGS refund based on order total.
    DGS extras.
    Even more multilingual support.
    DGS delivery deadline fix.
    Internationalization.
    Minor DGS fixes.
    Minor.
    Various minor changes.
    Minor.
    Add marketplace listings to account modal.
    Add dependencies.
    Minor.
    Show buyer/seller in modal.
    Purchase modal adjustments.
    Completed orders, feedback, refunds.
    Minor.
    Search by seller ID.
    Show unconfirmed transactions in digital goods store section.
    DGS + pagination.
    DGS delivery.
    Helper functions.
    Minor.
    Show purchases and pending orders, add refund functionality.
    Purchase products, show newest products.
    Price / Quantity change and marketplace delisting.
    Show item info in modals.
    DGS listing tag validation.
    Minor.
    Add listing to page after form submission.
    My DGS listings page.
    DGS page and some modals.
    Infrastructure work + hide main side menus based on disabled tags and APIs
    updated copyright year
    Fix indentation
    added copyright notice headers
    Refactoring - replace the hardcoded Genesis account with the genesis account provided by server
    Add permanent message option to the marketplace purchase feedback modal + various simple fixes
    Completion message for sale cancellation
    Do not show unconfirmed transactions in aliases table
    This inspection fix prevented the edit dialog from opening
    Fix webStorm inspections for alias
    Replaced static ID list on user modal event listener with more flexible class action identifier for looser coupling
    Remove blocks on Aliases page and only display total in header of page
    Added dynamic sidebar creation, new NRS.setup.PAGENAME methods for setup tasks
    delete alias link
    Corrected delete alias model and added delete alias transaction type information to UI
    Fix alias count
    Work on automatic buy/sell buttons in MS
    Started Delete Currency
    delete alias ui, had trouble with genesis block, so untested
    Pagination.
    Minor.
    DGS block passed.
    Remove console log statements.
    Alias sale to anyone changes.
    Alias register account changes.
    Minor alias changes.
    Minor alias fixes.
    Alias & message changes.
    Internationalization.
    Minor.
    Offer alias registration on search and no results found.
    Minor alias sale changes.
    Correct alias for sale messages.
    Alias buy in progress.
    Alias sell to anyone fix.
    Minor.
    Allow price adjustment in case it is outdated.
    Show outdated alias sale message.
    Show alias for sale message in transaction modal.
    Add dependencies.
    Make aliases use RS format only too.
    DataLoaded method.
    Minor.
    Alias account type working again.
    Alias buy.
    Add alias sale cancellation to all transaction displays.
    Cancel Alias Sale.
    Alias buy / sell transaction byte verification.
    Aliases sell/buy.
    Alias fix minor.
    assignAlias to setAlias conversion.
    Use new alias API.
    Alias search modifications.
    Alias search on aliases page.
    Make sure unconfirmed transactions are not added twice.
    Add unconfirmed transaction to dashboard immediately.
    isScanning minor.
    moved tools to ui
    More splitting up of javascript.
    increased change height increment for ShufflingCreate to 500 blocks
    Infrastructure work + hide main side menus based on disabled tags and APIs
    updated copyright year
    increased default shuffling registration period to 24 h
    Display the recipient account derived from the recipient passphrase on the start shuffler modal
    Replace action column with status column in active shuffling table, localize button text
    Remove my shufflers page, adapt to api change, improve shuffling transaction info dialog
    Merge shuffler recipient and participant state into the "My Shufflings" table and compact the table columns
    Display shuffling status in my shufflers table and localize shuffling stage and participant state values
    Update my and active shuffling pages on every block
    Shufflers table improvements
    Change finish height to register until and fix popover messages for the block height template
    1. Active Shufflings - only show "Join" action when account did not already joined.
    2. My Shufflings - reflect shuffler status and allow starting a shuffler in case it's not started
    Rename all shuffling page to active shuffling
    Add localization resources and fix shuffling related localization issues
    Use currency code instead of currency id
    Clean dead code and improve var names
    Show finished shufflings in the my shufflings page
    Show failure transaction in shufflers table
    Fix public key generation
    Invoke the start shuffler modal after closing the create shuffler modal
    List shuffling participants in the create shuffling transaction info
    Use values returned by the server for shuffling stage and participant state
    Fix decimal formatting for holding and "unknown error" message when starting shuffler
    Add my_shufflings pagination
    Typo - must be shufflers not shufflings
    Add my_shufflers pagination support
    All shufflings pagination support
    Start page for shuffling is all shufflings
    Create proper incoming handler for all_shufflings page
    Shufflers table layout and fix for my shuffling blocks remaining and participants count
    Field formatting for the All and My shuffling lists
    Work on the register, start shuffling modals and their activation
    Add formatting to all_shufflings page
    Create shuffling modal - support for holding and finish height widgets
    work in progress nrs.shuffling.js
    Scaffolding: shuffling client code
    added copyright notice headers
    fixed some IntelliJ inspections
    listeners
    Add back button to ledger info modal
    Support token generation when using remember passphrase and use the remember passphrase to sign bytes in case passphrase not specified
    String.startsWith is not supported on IE < 12. Substituted with String.indexOf(...) == 0
    Implement back button on the transaction info, account info and block info modals
    updated copyright year
    Block info modal improvements - add prev, next block link, generator link and recipient/sender links to the block transactions
    Add block height to sidebar
    Create meaningful tooltips for peer services
    Remove blank from account link and fix and add unit tests
    Shorten tagged data columns to 20 char + ellipsis
    Automatically calculate exchange rates based on available exchange offers - needs more testing
    Now that asset quantity can drop to 0 need to protect against it
    Sidebar changes: account id is no longer a link, below it there are two buttons, set account info (or the account name if set) and details which takes you to the account detail modal
    Support initial asset quantity and available asset quantity in transaction info dialog and improve invalid asset message
    Now that we can no longer copy the account id using the now removed clipboard function. I found it annoying not be able to go quickly copy the account id to go to the account info modal. Therefore I added account id link to the dashboard title and removed the account id from the "switch account" toggle which now just says "switch account"
    Comapre UTF8 to byte array conversion methods
    Generate token using JavaScript (No UI yet)
    More work on transaction info modals for shuffling
    Show phasing parameters for mandatory approval
    Consolidate all transaction link Html generation into a single method
    Remove references to the ZeroClipboard component
    Remove "Copy" links which rely on ZeroClipboard
    More JavaScript unit tests
    More unit tests
    Fix formatting of decimal places for negative numbers - better fix
    Fix formatting of decimal places for negative numbers
    Remove the obsolete NRS.inApp variable since we no longer support the wrapper frame used by the Wesley installer
    Implement delete shares modal based on the asset transfer modal
    Correct the translation of "At least one of [field list] must be specified" messages returned by the server
    Change default leasing period to 32767 and add lessee link to the transaction info modal
    Allow formatting of arbitrary times unrelated to epoch
    Reflect expected order cancellation transactions in AE
    Add translations
    Show phased and unconfirmed transaction in the MS exchange booth
    Replace the height column with transaction status icon with link to transaction info and tooltip. Fix support for "Asset Issuer" label.
    Support unconfirmed and phased transactions in AE
    Clean webstorm inspections
    Fix indentation
    Fix 24 hours to AM/PM conversion and allow single digit hours
    Rely on server value for epoch beginning and refactor the client epoch time calculation into methods similar to the server side calculations
    added copyright notice headers
    Fix local signing of issue currency by making sure initialSupply equals "0" instead of "" on the client side
    Always rounding down percentage in transaction table phasing info popover to not give the impression of transaction to be approved when approval rate close to 100% (e.g. 99,999999%)
    Verify local signing for MS transactions
    Dialog for setting mandatory approval (mandatory phasing)
    Change send NXT and send message links to use RS account format so that the recipient account is now displayed correctly when pasting the link (this feature requires login with passphrase and has some UI  problems)
    Verify unsigned bytes returned from the server for prunable messages and encrypted prunable messages appendex
    Fix settings problem - some settings defaulted to numeric values but were read from the Html page as strings when modified. The comparison of this setting did not work correctly. Now settings default to strings and compared as strings.
    Moved js GET variable code and corrected logout code to clear GET variables so your aren't stuck in that account
    #278 show actual trades performed against an AE order in the transaction info dialog
    Fix WebStorm inspections for messages and prepare for removing unconfirmed transactions
    Replaced static ID list on user modal event listener with more flexible class action identifier for looser coupling
    Add optional whitelist to by-asset, by-currency transaction approval modal dialog
    Added possibility to transaction form processing to process multi-valued fields, added phasingWhitelisted as first multi-valued field being processed, switched to traditional mode for ajax request for transaction sending (needed for sending values as arrays)
    Make clipboard/flash warning one-time
    #266 fixed viewing transaction properties for transactions will null recipient
    Started to rework transactions page, centralized transaction type information like type icon or i18n string in nrs.transactions.type.js file
    Prevent entering decimal data which cannot be used for rate calculation in MS like in AE and fix validation for typing number from the numeric keypad (super sensitive change which requires a lot of testing)
    Calculate actual units and NXT exchanged by an exchange request
    Fix exchange rate calculation in MS transaction info dialogs
    More work on MS transaction properties
    Intermediate work on unconfirmed transactions and transaction properties - cont - not done
    When transition ends for hiding/showing the sidebar, resize content area based on new width.  This should fix the content not resizing properly on the AE page
    Removing word-break:break-all will make it easier to read when there needs to be a line break
    Removed white-space property to hopefully resolve text not wrapping in transaction details
    Removed request processing time from being displayed in the transaction details and added word break for the key's table cell
    Language.
    Merchant account regex handling.
    better error message field name.
    Show account lessors in RS account format.
    Clear animation queue.
    Minor.
    Minor.
    Make sure show after fadeIn works.
    Plural form.
    Get correct field name translation.
    Private IP range.
    Minor.
    Minor.
    Genesis account handling.
    Minor.
    Public key announcement support.
    More error message translations.
    More multilingual support.
    Internationalization.
    Minor.
    Minor.
    Remember passphrase setting.
    12 or 24 hour date format setting.
    Add dependencies.
    Remove cruft.
    Move all encryption functions to nrs.encryption.js.
    Remove display of numeric account IDs.
    Purchase modal adjustments.
    Minor.
    Minor.
    DataLoaded method.
    Minor.
    Get unconfirmed transactions from cache;
    Make dataLoadFinished work with non-table elements too.
    Fix contact name display.
    Show more/less functionality.
    Minor.
    getAccountLink method.
    Helper functions.
    New helper function to check if an unconfirmed transaction with specific parameters exists.
    Show purchases and pending orders, add refund functionality.
    Minor.
    Format function change.
    Alias search modifications.
    Autolink alias URi's.
    Minor reed solomon changes.
    use Reed Solomon by default.
    Correct amounts on my assets page.
    Remove copy actions when user has no flash.
    NQT parse error.
    Reed Solomon support.
    Minor.
    No flash copy when in app.
    moved tools to ui
    Minor.
    Make assets linkable in account modal.
    Show link to asset in transaction modal.
    Show transaction modal for all transactions (ordinary payments included).
    Capitalize keys in info table.
    Undefined variable bug.
    Fixed non-responsive browser state issue.
    Minor changes everywhere.
    Minor NQT.
    Added setAccountInfo API (name/description).
    Minor.
    Asset exchange priceNQT is per asset, not per order.
    Error checking for NQT.
    Removed new address format.
    Housekeeping
    Finishing Asset exchange NQT.
    Transfer Asset Command Field and some more NQT.
    Asset exchange NQT.
    More reorganization.
    Even more splitting..
    More splitting up of javascript.
    Split javascript in multiple files.
    updated copyright year
    change width to fit responsive 320px
    Fixed a bug sometimes not showing notification badge after login.
    added copyright notice headers
    added getBlockchainTransactions API, deprecated getAccountTransactions and getAccountTransactionIds
    Refactor the NRS.sendRequest function - we no longer support specifying the function name as the 2nd parameter instead of the data parameter. Since there is always a callback we no longer need to check for its existence. Small method refactoring and fix syntax errors pointed by WebStorm
    renamed pending to phased/phasing
    Switched phasing notification count being based on getAccountPendingTransactionCount, added pending info to transaction phasing table navi tab popover
    Added unconfirmed/phased transaction notifications to client header, new mechanism to provide subpage info on page load
    Show notification count in header title
    Changed notification reset timestamp from current time to last known transaction time
    Table based approach for user data DB lead to unsolvable conflicts on concurrent DB init, switched to DB based approach, refactoring of migration code
    Updated notifications to use DB
    Switched back to more prominent notification UI element
    Simplified notification UI element
    Added simple transaction type based notification system for client, temporary bug fixing for transaction approval
    updated copyright year
    added copyright notice headers
    Add dependencies.
    moved tools to ui
    Even more splitting..
    Add UI for singleton asset issuance
    updated copyright year
    Fix inspection and indentation
    Fix #323 settings are not saved
    Fee calculation: fix calculate for balance leasing
    Fee calculation: calculate fee for account without public key by submitting the passphrasel
    Fee calculation: fix form submit criteria
    Fee calculation: improve visual hint that fee re-calculation is required
    Fee calculation: do not empty the fee when a field is changed as this also happen on submit and when entering the passphrase. Instead color the field in Red in case the field requires re-calculation
    Fee calculation: change default fee to 0, improve template design, support add alias, reset the fee to default when fields on the modal are changed
    In case minimal fee is not implemented still default to 1 NXT fee
    Fee calculation experiment
    Refactoring: use the requireBlockchain parameter returned by getConstants
    Merge the remaining signed bytes tab into the new signed json tab and remove the old transaction bytes operations modal
    Support signTransaction and other offline APIs when the server blockchain has not finished downloading
    Send messages to the server without encryption in case doNotSign is enabled
    Warn the user when asset or currency are issued with less than 2 or more than 6 decimal positions
    added copyright notice headers
    Client side support for prunable messages - only make unencrypted message prunable in case it is longer than its resulting hash
    Client side support for prunable messages
    Set focus to passphrase field in case it is empty - todo: implement similar functionality to other fields.
    Fix WebStorm inspections
    Add minBalance logic, fee addition structure to transaction approval dialog, first specification-complete implementation of approval dialog (still untested)
    Started to integrate different amount forms (Account/NXT) for approval modal dialog
    No blockchain errors for peer dialogs
    Fix merchantInfo is undefined exception from https://nxtforum.org/nrs-releases/nrs-v1-4-5/msg144977/#msg144977
    Catch error.
    Minor.
    Merchant account regex handling.
    DGS block passed.
    Ref transaction hash error handling.
    Note to self.
    Success / error message bug.
    Minor.
    Alias & message changes.
    Forging success / error message fixes.
    PKAnnouncement adjustments.
    Handle global message data.
    Global message handling.
    Add global message data.
    Don't show default success message when already shown in complete function.
    More multilingual support.
    Internationalization.
    Minor.
    Allow not broadcasting of transaction.
    Minor alias sale changes.
    Minor.
    Minor.
    Use "passphrase" instead of "secret phrase".
    Privatize variable.
    Decode token functionality added.
    Add dependencies.
    Disallow numeric account IDs.
    Double spending case.
    Alias buy.
    More descriptive error messages.
    Make sure unconfirmed transactions are not added twice.
    Add unconfirmed transaction to dashboard immediately.
    Use fullHash instead of hash.
    isScanning functionality.
    Wait until blockchain finished downloading before allowing form submits.
    Reed Solomon support.
    Minor.
    Show warning when submitting amount / fee higher than user specified.
    moved tools to ui
    Show account leasing details.
    Housekeeping
    Transfer Asset Command Field and some more NQT.
    More reorganization.
    updated copyright year
    Show hallmark account when parsing a hallmark
    Implement Hallmark dialog
    Fix error when using intermediate value for request type which do not exist on the server. Add constant for disabled API error code
    Infrastructure work + hide main side menus based on disabled tags and APIs
    Some requests has additional information after the + sign. AE should be operational now.
    different error for disabled APIs, rename
    Initial work on using disabling APIs to simplify the client
    updated copyright year
    increase lease limit to 65535 blocks
    Load server constants syncroniously so that it is always available upon start up
    List shuffling participants in the create shuffling transaction info
    Use values returned by the server for shuffling stage and participant state
    Fix decimal formatting for holding and "unknown error" message when starting shuffler
    Work on the register, start shuffling modals and their activation
    Hallmark modal now submits passphrase to remote host
    Merge mystcoin's fix for relying on API capabilities to decide when to use POST request
    Refactoring: use the requireBlockchain parameter returned by getConstants
    Move the parseTransaction and calculateFullHash tabs to the transaction JSON operations and add a JSON field to each tab
    Support signTransaction and other offline APIs when the server blockchain has not finished downloading
    Change default leasing period to 32767 and add lessee link to the transaction info modal
    Calculate hash modal can now use all hash algorithms not just hash algorithms supported by phasing
    only some hash algorithms are accepted for by-hash phasing
    Implement calculation modal and abstract the hash algorithms selection into a UI element
    Support phasing approved by reveal secret model (so far only the hash can be specified)
    Forging indicator now supports both passphrase and admin password. Forging indicator status reflects the actual forging status
    Pass epoch time to client
    added copyright notice headers
    Refactoring - replace the hardcoded Genesis account with the genesis account provided by server
    Do not upload a file to the server in case it is too big
    Change voting models to rely on server constants
    Add reveal secret field to transaction approval modal
    Add missing voting models to transaction info phasing tab
    Client side support for prunable messages - only make unencrypted message prunable in case it is longer than its resulting hash
    Phasing tab in transaction info dialog
    Table based approach for user data DB lead to unsolvable conflicts on concurrent DB init, switched to DB based approach, refactoring of migration code
    Changed semantics of plugin version compatibility status code, major release diff now allowed, plugin nrs version newer than client version disallowed
    Added overview page for installed plugins
    More robust/managed javascript loading mechanism
    Added nrs compatibility check and launch status determination for plugins, file stubs for example hello_world plugin
    Finished first version of plugin validation, added initial manifest.json for hello_world example plugin
    Started plugin validation code, added valdation/NRS compatibility status constants to constants dict
    Added the API server constants to the NRS constants dictionary
    Added constants (nrs.constants.js) to client
    Added JS libraries d3.js (BSD) and jquery.tablesorter.js (MIT)
    Add async.js to coordinate multiple asymc requests
    Added highlight.js library files (BSD licencse,<20KB, customized for JSON) for syntax highlighting in API test servlet
    moved tools to ui
    Reorganization of javascript files.
    Enable local transaction signing.
    Added moment.js library (MIT) for date calculations, added modal form element for auto-update estimated block reach date for entered block heights
    Updated Bootstrap from 3.3.2 to 3.3.4
    Updated Boostrap to version 3.3.2
    Update bootstrap to 3.2.0
    Add dependencies.
    moved tools to ui
    Reorganization of javascript files.
    New NRS client initial commit.
    Removed autoclear
    Removed paste event
    Fixed cursor when typed characters are automatically moved by checkVal
    Fixed cursor position after typing a letter or digit
    Fixed pasting
    Maskedinput updated to version 1.4.1. By bcdev
    Prevent pasting of old-style (numeric) account ID's.
    Correctly fill in contact name.
    DGS search page.
    Minor changes to masked input.
    Minor.
    PKAnnouncement adjustments.
    Public key announcement support.
    Make tab key work.
    Minor.
    Minor.
    NXT mask changes.
    Masked input changes for NXT address format.
    Masked input for reed solomon account number.
    Add dependencies.
    moved tools to ui
    Reorganization of javascript files.
    Easily add account ID to contacts after sending Nxt / messages.
    New NRS client initial commit.
    Minor fix for Safari 8 (beta).
    Fix asset exchange not displaying in Safari.
    Make sure client works even when cookies are disabled (firefox).
    moved tools to ui
    Housekeeping
    Reorganization of javascript files.
    DB version numbering fix.
    Added unique suffix possibility to assets (via alias) as well as a few other fields (url, tags, ..)
    Update settings storage and db functionality.
    Show notification when asset is bought / sold.
    Make asset exchange work in Firefox private mode (no indexedDB available)
    New NRS client initial commit.
    Rename jquery-x.js to jquery.js
    Update jquery to 2.1.1
    moved tools to ui
    Reorganization of javascript files.
    New NRS client initial commit.
    Print environment information about the client environment to the browser JavaScript console
    Gzip library.
    Initial work on JavaScript unit tests (see: http://localhost:7876/qunit.html)
    moved tools to ui
    Reorganization of javascript files.
    Enable local transaction signing.
    Add dependencies.
    moved tools to ui
    Retry ajax call on timeout (GET requests only).
    added missing d3pie.js library
    Updated i18next.js client translation library from 1.7.3 to 1.7.7
    Plural fix.
    Auto-detect language.
    Multilingual plural fix for some languages.
    No default lang selection.
    More multilingual support.
    Internationalization.
    Issue 312 (QRCode scanning bug): replaced qrcode and jsqrcode js libraries with ZXing core and javase java libraries; added EncodeQRCode and DecodeQRCode APIs
    Scan the QR code for the signature
    Add dependencies.
    Show plus or minus sign for pending asset transfer on my assets page.
    moved tools to ui
    Housekeeping
    Reorganization of javascript files.
    New NRS client initial commit.
    Added handlebars.js library (MIT) for more flexible/robust template handling
    moved tools to ui
    Asset exchange NQT.
    String.startsWith is not supported on IE < 12. Substituted with String.indexOf(...) == 0
    Do not escape total nxt in confirm exchange tooltip
    Remove blank from account link and fix and add unit tests
    Comapre UTF8 to byte array conversion methods
    Generate token using JavaScript (No UI yet)
    Test genesis account formatting
    Unit tests for getAccountLink
    More JavaScript unit tests
    More unit tests
    Initial work on JavaScript unit tests (see: http://localhost:7876/qunit.html)
    Do not escape the slash character
    Unit tests for extensions.js
    More JavaScript unit tests
    Improve unit test to derive public key from secret phrase
    Encrypt/Decrypt unit test
    More JavaScript unit tests
    updated copyright year
    added copyright notice headers
    moved tools to ui
    Reorganization of javascript files.
    New NRS client initial commit.
    moved worker_sha256.js to tools
    embedded jetty
    update checker, https://bitcointalk.org/index.php?topic=345619.msg4294180#msg4294180
    updated copyright year
    added copyright notice headers
    Add dependencies.
    Center without javascript.
    moved tools to ui
    Reorganization of javascript files.
    Proper javascript indentation.
    Reset pass phrase generator after generation.
    New NRS client initial commit.
    moved tools to ui
    Reorganization of javascript files.
    Message encryption (unfinished).
    moved tools to ui
    Reorganization of javascript files.
    Enable local transaction signing.
    moved tools to ui
    Reorganization of javascript files.
    New NRS client initial commit.
    New crypto files.
    New crypto files.
    Add dependencies.
    Reed Solomon support.
    moved tools to ui
    Reorganization of javascript files.
    Proper javascript indentation.
    Guess correct address (new address format).
    Settings changes.
    Solomon reed account number support (in send xyz dialogs)
    updated copyright year
    Fix local signing of upload data and prunable messages. From some reason the conversion functions used to convert between byte and int array on the client does not reproduce the same result as on the server. Using a suggestion from the cryptojs forum seems to fix the problem. However, I'm not sure why the rest of client code encryption code and hashing works with the old method without complaining.
    added copyright notice headers
    Replace jssha256 with sha256 methods of CryptoJS
    Add dependencies.
    Encrypted messages.
    Encrypted Data + add nonce to aesEncrypt/aesDecrypt.
    Add aesEncrypt/aesDecrypt.
    moved tools to ui
    Minor.
    Reorganization of javascript files.
    Proper javascript indentation.
    Encrypted messages phase 1.
    Message encryption (unfinished).
    Generate token functionality.
    Enable local transaction signing.
    updated copyright year
    Do not escape the slash character
    Fix webstorm inspections for extensions.js
    added copyright notice headers
    #273 Wrap URLs embedded in description text with <a> tag and fix potential XSS problem see asset id 15615013723013595254 on testnet
    Allow decrypting of messages.
    More descriptive error messages.
    Autolink URLs in asset description.
    Asset exchange API simplification.
    moved tools to ui
    Transfer Asset Command Field and some more NQT.
    Moved extending of javascript natives to dedicated file.
    updated copyright year
    Merge mystcoin's fix for relying on API capabilities to decide when to use POST request
    Issue 312 (QRCode scanning bug): replaced qrcode and jsqrcode js libraries with ZXing core and javase java libraries; added EncodeQRCode and DecodeQRCode APIs
    added copyright headers
    Separate the logic for enabling the system tray on every desktop from the logic of using the user dir only on Windows desktop - not tested yet
    Support for Windows service installation and missing resources related to installer
    Initial Support for System Tray icons - status dialog
    Initial Support for System Tray icons - not done yet
    Support installation by non-priviligied user on Windows
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Updated Crowdin translation files, changes status of Italian and Dutch to stable
    Updated language translations from Crowdin
    Added latest translations from Crowdin, retranslating HTML free strings
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Added current translations from Crowdin
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Changed locales folder organization to a file structure directly usable with i18next parser and on crowdin platform without manual processing steps necessary
    Language.
    Language updates.
    Language updates.
    Language updates.
    Language updates.
    Language additions.
    Language plural form fixes.
    Language update.
    Languages.
    Added new translation files from Crowdin
    Added updated translations from Crowdin
    Updated translation files from Crowdin
    Updated Crowdin translation files, changed status of Bulgarian to Stable (Beta), Czech, Slovak to Beta (Experimental)
    Added new Crowdin translation files
    Updated Crowdin translation files, changes status of Italian and Dutch to stable
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Added new translation files from Crowdin
    Added new Crowdin translation files
    Added latest translations from Crowdin, retranslating HTML free strings
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Changed locales folder organization to a file structure directly usable with i18next parser and on crowdin platform without manual processing steps necessary
    Language.
    Language updates.
    Language updates.
    Language updates.
    Language updates.
    Language additions.
    Language updates.
    Language plural form fixes.
    Language update.
    Languages.
    Language changes.
    Language changes.
    Language additions.
    Typo in language key.
    Updated languages.
    More languages.
    Added new translation files from Crowdin
    Added new Crowdin translation files
    Added latest translations from Crowdin, retranslating HTML free strings
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Replaced temporary placeholders in Simple Chinese translation file
    Added modified simple chinese (zh-cn) translation file with placeholders for easier collection of missing translation strings (has to be replaced at end of collection process)
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Synchronized Crowdin and locales folder naming
    Changed locales folder organization to a file structure directly usable with i18next parser and on crowdin platform without manual processing steps necessary
    Language.
    Language updates.
    Language updates.
    Language updates.
    Language updates.
    Language additions.
    Language updates.
    Language plural form fixes.
    Language update.
    Languages.
    Language changes.
    Language changes.
    Language additions.
    Typo in language key.
    Updated languages.
    More languages.
    Added updated translations from Crowdin
    Added new Crowdin translation files
    Updated Crowdin translation files, changes status of Italian and Dutch to stable
    Updated translation files for Czech, Russian, Ukrainian, Greek, added Greek as experimental language
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Added current translations from Crowdin
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Added new translation files from Crowdin
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Added current translations from Crowdin
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Updated language translations from Crowdin
    Added latest translations from Crowdin, retranslating HTML free strings
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Added missing translation keys and fixed translations
    Add UI for singleton asset issuance
    removed exchange booth pre-fork warning
    Add "refresh search index" link to settings menu
    better dividend height error messages
    Initial work on using disabling APIs to simplify the client
    Block info modal improvements - add prev, next block link, generator link and recipient/sender links to the block transactions
    Add tooltips to sidebar icons
    Add tooltips to header icons
    Create meaningful tooltips for peer services
    blocks per day help fix
    fixed broken English
    Use standard height selection widget for expiration height
    Rework the labels on the publish exchange offer modal
    Label rephrasing
    translation for publish exchange offer help texts
    exchange booth help texts
    updated version, renamed Tagged Data to Data Cloud
    Currency buy pre-fork warning
    No file chosen error message
    up to 5 tags are allowed
    Try to download expired data using the download link from the transaction info dialog. Handle error conditions. Name change.
    Submit rate not effective rate to CurrencyBuy/Sell, improve labels and descriptions
    Removed obsolete translations keys
    Automatically calculate exchange rates based on available exchange offers - needs more testing
    Localization
    increase lease limit to 65535 blocks
    also warn about shuffling fees
    made warning notice more detailed
    Replace action column with status column in active shuffling table, localize button text
    Add warning to the start shuffler modal and remove duplicate translation keys
    Remove my shufflers page, adapt to api change, improve shuffling transaction info dialog
    Merge shuffler recipient and participant state into the "My Shufflings" table and compact the table columns
    Account properties delete and update actions, translations and transaction info
    Display shuffling status in my shufflers table and localize shuffling stage and participant state values
    Add registrant count column to the shuffling table and account info modal
    Translation keys
    Check max fee and phasing duration when submitting a phased transaction under account control
    Fixed maxFee value when setting account control
    UI for max fees and phasing duration
    Add peer services to the peers list (quick and dirty)
    Translations for account control modal
    Sidebar changes: account id is no longer a link, below it there are two buttons, set account info (or the account name if set) and details which takes you to the account detail modal
    Change finish height to register until and fix popover messages for the block height template
    Improved message
    Support initial asset quantity and available asset quantity in transaction info dialog and improve invalid asset message
    Deletes History page
    Now that we can no longer copy the account id using the now removed clipboard function. I found it annoying not be able to go quickly copy the account id to go to the account info modal. Therefore I added account id link to the dashboard title and removed the account id from the "switch account" toggle which now just says "switch account"
    1. Active Shufflings - only show "Join" action when account did not already joined.
    2. My Shufflings - reflect shuffler status and allow starting a shuffler in case it's not started
    Rename all shuffling page to active shuffling
    Automatically open account control tab when opening account details dialog from Mandatory Approval link
    Submit the new delete asset shares transaction instead of transfer asset to genesis and add delete asset shares to the transaction info dialog
    Add localization resources and fix shuffling related localization issues
    Show phasing parameters for mandatory approval
    Asset Delete transaction type and translations
    Some translations
    Hide phasing parameters when mandatory approval is enabled and fill them automatically
    Fee calculation: update all modals with the fee calculation UI and remove modal and widget specific calculation. Still not done:
    Asset and currency issuance
    Asset/Currency buy/sell
    Fee calculation for account without public key
    More UI work
    Moved Account Control to Account Details
    Remove references to the ZeroClipboard component
    Remove "Copy" links which rely on ZeroClipboard
    Add ledger tab to the account info dialog
    Implement Hallmark dialog
    Warning before funding a new account using ShapeShift
    fixed translation string
    Fix header
    Fix minimum reserve per unit label in issue currency dialog
    Currency transfer page
    Support update check for the windows installer in addition to the zip file
    bugs, optimizations, various changes
    Update translation resources
    Handle shape shift down status
    Warn about privacy leakage caused by the exchange page
    Show both shift and sendamount rates and their difference
    Fund new account with BTC
    Change logging and date format to use core functions. Localize modal titles
    Replace the term "currency" with "coin". Fixed QR code generation. Added some translations.
    Fix the "available" message on the transfer asset modal
    Implement delete shares modal based on the asset transfer modal
    Fixed: when using "Do not broadcast" without "Do not sign" the downloaded signed JSON file was prefixed "unsigned" and naming changes
    Add support for disabling the secretIsText parameter in the hash calculation dialog
    Fix WebStorm inspections and cleanup
    Alert the client when getBlockchainStatus request returns an error (most likely since the server is down) and fix an exception when clicking on the messages counter panel on the dashboard
    missing comma
    Merge the remaining signed bytes tab into the new signed json tab and remove the old transaction bytes operations modal
    Add ledger entry info modal activated by clicking an entry timestamp on the dashboard
    Fix paging and various UI improvements
    More intermediate work on the account ledger table in the dashboard and the account ledger page
    Simplistic file upload to text area widget which works but looks awful - I can do better
    Add warning when dividend height is lower than asset issuance height
    Improvements to the transaction JSON operations modal and to the QR scanning code
    Implement Transaction JSON operations dialog (some UI improvements are still required)
    Implement signing for raw transaction bytes modal and allow reading the signature into the text area from a QR code using html5-qrcode
    Improve no public key message in case the passphrase is available on the client but the public key has not been announced to the blockchain
    Warn the user when asset or currency are issued with less than 2 or more than 6 decimal positions
    Calculate currencies value and display on dashboard
    Change default leasing period to 32767 and add lessee link to the transaction info modal
    Improve notification message when using a new account without specifying the passphrase
    Reflect expected order cancellation transactions in AE
    improved wording and grammar
    Implement calculation modal and abstract the hash algorithms selection into a UI element
    Support phasing approved by reveal secret model (so far only the hash can be specified)
    Support phasing approved by transaction hash model
    Support phasing voting model none
    Add translations
    Implement marketplace warning
    Reflect forging status changes immediately after the start/stop dialog is completed
    Reflect the forging status of the current account when more than one account is forging and correctly invoke the start and stop forging dialogs according to the current account
    Added four UI help menu items linking to Wiki tutorials
    Handle the case of forging on another account
    Forging indicator now supports both passphrase and admin password. Forging indicator status reflects the actual forging status
    Display human readable time for transaction and block in the info dialogs
    Always show Plugins sidebar item for better feature visability/transparency, added simple plugins overview page
    Provide more descriptive, incorrect numeric value messages, to the client (client side fix committed in previous commit)
    Minor
    Resorted settings on a 2-column based grid for convenience, added startup alerts giving clear feedback on plugins loaded, added ability to enable/disable plugins on an account basis (default: disabled, but very easy switch), added settings warning for browsers with limited DB support storing settings browser-wide (mainly Safari)
    Replaced all HTML containing translation strings for security reasons
    Recollected some translation strings
    Added missing english base translations to english translation.json file
    Added some more translation strings
    Added translation strings for voting system
    Added missing translation strings for phasing modal dialog
    Added translation strings to monetary system, transaction modals
    Added missing translation strings for login page
    Recollected translation strings with the i18next parser to english transation.json file
    Phasing minimal balance auto-fill
    Voting model currency and asset auto-fill
    Added mandatory approval info
    Verify local signing for MS transactions
    Implement local signing for upload and extend transactions by reading the actual file uploaded to the server from JavaScript and verifying the server hash calculation
    Refactoring - replace the hardcoded Genesis account with the genesis account provided by server
    Punable data - added extend action to upload transaction info, extend dialog which uses the same fee payed by the upload transaction and transaction info for extend transaction.
    Do not upload a file to the server in case it is too big
    Tagged data transaction - add missing fields to dialog and transaction info
    Fixed mandatory approval transaction icon and name
    Dialog for setting mandatory approval (mandatory phasing)
    Add File Upload dialog and support multipart form request using JQuery Ajax
    Add reveal secret field to transaction approval modal
    Hide the admin password field when not needed and add connect peer modal when admin password is required
    Add adminPassword template and use in the addPeer and blacklistPeer modals
    Add permanent message option to the marketplace purchase feedback modal + various simple fixes
    Add permanent message option to messages template, this should fix most dialogs, now need to find the specific cases
    Changed capital letter form field labels to camel case in translation.en for consistency
    Other UI improvements to block height modal UI element
    Account Control side menu
    Client side support for prunable messages
    Minor
    Correct handing of decimals for min balance in poll creation dialog, fixed various bugs
    Replaced poll duration form field with block height UI element for easier poll duration input
    Layout fixes for create poll dialog - not done
    UI optimizations for active polls table
    Added translation texts for success_poll_followed, error_poll_save_db
    Fix voting model in transaction infor dialog
    Remove public key message when logging in with a new account without specifying a passphrase
    #278 show actual trades performed against an AE order in the transaction info dialog
    Completion message for sale cancellation
    Do not show unconfirmed transactions in aliases table
    WebStorm inspections and label fixes for MS
    Reduced UI elements in block height UI element to to space restraints on smaller screens
    Add minBalance logic, fee addition structure to transaction approval dialog, first specification-complete implementation of approval dialog (still untested)
    Reworked approval whitelist UI element to be reusable in other modal multi-account input contexts
    New ui element for adding asset ID, completed by-asset approval transaction dialog
    Added ui modal element for currency input, completed basic version of by-currency approval transaction dialog
    Added concept for reusable UI elements for modals, first UI element for more comfortable block height input in forms
    Fallback for Safari to old browser centric DB model due to buggy indexedDB implementation
    Started to integrate different amount forms (Account/NXT) for approval modal dialog
    Added badge with number of Approval Requests to sidebar menu item, added regular NRS.pages.dashboard method for more in-time dashboard updates
    Fixed bug in phasing dialog, worked on UI element for phasing transactions in transactions table, added pending transactions to transactions page
    Improve message when account has no assets
    Connect peer button
    addPeer returns isNewlyAdded
    Reordered peers translations and added new ones
    Display more verbose message after adding peer
    Fixed disappearing blacklist message
    If an account has a name, it is now displayed when sending to it
    Added moment.js library (MIT) for date calculations, added modal form element for auto-update estimated block reach date for entered block heights
    Fix header in leasing dialog table
    Added tooltip to transactions type navigation
    UI for adding and blacklisting peers
    Added progress bar for latest 5000 blocks contextually displayed in blockchain progress dialog depending on blockchain download size for better tracking download progress
    Added 2 new global state variables NRS.serverConnect and NRS.peerConnect, added switch to blockchain download progress dialog to halted when no connection to server or peers available
    Added blocks left info to blockchain download info bar
    Adopt public key messages in english translation.json file to public key now being optional for newly created accounts
    Added notifications for incoming messages with direct link for reading, usability improvements for message app
    Lessor status message now includes information about the next lessee
    Improve account  leasing messages and account details - account leasing dialog
    Added Dashboard info box for pending and completed Marketplace sales
    #259 Display row numbers when paging a table
    Readded translation keys to the english translation file created dynamically and therefor missed by i18next parser, updated documentation
    Parsed new translation strings into i18next parser, manually filled up > 100 missing strings by full-text search
    Changed locales folder organization to a file structure directly usable with i18next parser and on crowdin platform without manual processing steps necessary
    #218 Do not display exchange offer with 0 balance - fix label
    Add missing internationalization of Import and Export contacts buttons
    Remove debug information and add info/warning messages to import/export contacts functionality
    dividend payment UI help
    replace "per asset" with "per share"
    this sentence was even more meaningless than I thought
    corrected wording
    Corrected delete alias model and added delete alias transaction type information to UI
    Move actions from currencies to my currencies, add founders action to view founders list
    Calculate the reserve supply after reducing the initial supply
    Localization
    Naming changes, descriptions and adding total column
    Minor changes
    Added more to the english language file & correction to display icon for mintable currency
    More fixes to currency sell dialog
    Added more to the english language file
    Added more to the english language file and fixed a bug if you didn't have any of a currency in the sell dialog
    Added a few lines to the english language file and last commit made MS Action links buttons
    Added a few lines to the english language file for MS and updated a description
    1. Exchange offer decimal positions
    2. Exchange offers are now published from the currencies table not from a menu item since this provides the data needed for decimal calculation
    3. I removed the height in hours since its unreliable and used the same control as in currency issuance height (perhaps we can do better but at least it looks the same in both places)
    1. Support decimal position in issue currency dialog
    2. Support units terminology, decimal position and fat finger warning in currency transfer
    3. Localization messages
    Work on MS Buy/Sell dialogs
    Adding code so that the 'dividend payment' transaction data can be
    seen in the transaction modal.
    Dividends payment UI
    Language.
    Language updates.
    Language updates.
    Language updates.
    Language updates.
    Language additions.
    Language plural form fixes.
    Language update.
    Languages.
    Language changes.
    Language changes.
    Typo in language key.
    Updated languages.
    More languages.
    Forging success / error message fixes.
    Passphrase login length check.
    Minor.
    PKAnnouncement adjustments.
    Public key announcement support.
    More error message translations.
    Even more multilingual support.
    More multilingual support.
    DGS delivery deadline fix.
    Encrypted messages minor.
    Internationalization.
    fixed broken English
    Synchronized Crowdin and locales folder naming
    Updated translation files from Crowdin
    Added new Crowdin translation files
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Added current translations from Crowdin
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Changed locales folder organization to a file structure directly usable with i18next parser and on crowdin platform without manual processing steps necessary
    Language.
    Language updates.
    Language updates.
    Language updates.
    Language updates.
    Language additions.
    Language plural form fixes.
    Language update.
    Languages.
    Language changes.
    Language additions.
    Typo in language key.
    Updated languages.
    More languages.
    Added updated translations from Crowdin
    Updated indonesian translations
    Updated language translations from Crowdin
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Updated indonesian, spanish (ES), finnish and turkish language files from Crowdin, set Indonesian from beta to stable
    Added current translations from Crowdin
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Changed locales folder organization to a file structure directly usable with i18next parser and on crowdin platform without manual processing steps necessary
    Language.
    Language updates.
    Language updates.
    Language updates.
    Language updates.
    Language additions.
    Language plural form fixes.
    Language update.
    Languages.
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Added new translation files from Crowdin
    Updated language translations from Crowdin
    Added latest translations from Crowdin, retranslating HTML free strings
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Added current translations from Crowdin
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Synchronized Crowdin and locales folder naming
    Changed locales folder organization to a file structure directly usable with i18next parser and on crowdin platform without manual processing steps necessary
    Language.
    Language updates.
    Language updates.
    Language updates.
    Language updates.
    Language additions.
    Language plural form fixes.
    Language update.
    Languages.
    Language changes.
    Language changes.
    Language additions.
    Typo in language key.
    Updated languages.
    More languages.
    Added latest translations from Crowdin, retranslating HTML free strings
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Added current translations from Crowdin
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Added current translations from Crowdin
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Added new translation files from Crowdin
    Updated translation files for Czech, Russian, Ukrainian, Greek, added Greek as experimental language
    Added latest translations from Crowdin, retranslating HTML free strings
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Added current translations from Crowdin
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Changed locales folder organization to a file structure directly usable with i18next parser and on crowdin platform without manual processing steps necessary
    Language.
    Language updates.
    Language updates.
    Language updates.
    Language updates.
    Language additions.
    Language plural form fixes.
    Language update.
    Languages.
    Language changes.
    Language changes.
    Language additions.
    Typo in language key.
    Updated languages.
    More languages.
    Updated language translations from Crowdin
    Updated translation files for Czech, Russian, Ukrainian, Greek, added Greek as experimental language
    Added latest translations from Crowdin, retranslating HTML free strings
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Changed locales folder organization to a file structure directly usable with i18next parser and on crowdin platform without manual processing steps necessary
    Language.
    Language updates.
    Language updates.
    Language updates.
    Language updates.
    Language additions.
    Language plural form fixes.
    Language update.
    Languages.
    Language changes.
    Language changes.
    Language additions.
    Typo in language key.
    Updated languages.
    Russian
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Added current translations from Crowdin
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Added new translation files from Crowdin
    Added updated translations from Crowdin
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Updated indonesian, spanish (ES), finnish and turkish language files from Crowdin, set Indonesian from beta to stable
    Added current translations from Crowdin
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Added new translation files from Crowdin
    Added new Crowdin translation files
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Added current translations from Crowdin
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Added current translations from Crowdin
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Changed locales folder organization to a file structure directly usable with i18next parser and on crowdin platform without manual processing steps necessary
    Language.
    Language updates.
    Language updates.
    Language updates.
    Language updates.
    Language additions.
    Language updates.
    Language plural form fixes.
    Language update.
    Languages.
    Language changes.
    Language changes.
    Language additions.
    Typo in language key.
    Updated languages.
    More languages.
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Added new translation files from Crowdin
    Updated translation files from Crowdin
    Updated Crowdin translation files, changes status of Italian and Dutch to stable
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Added current translations from Crowdin
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Changed locales folder organization to a file structure directly usable with i18next parser and on crowdin platform without manual processing steps necessary
    Language.
    Language updates.
    Language updates.
    Language updates.
    Language updates.
    Language additions.
    Language plural form fixes.
    Language update.
    Languages.
    Language changes.
    Language changes.
    Language additions.
    Typo in language key.
    Updated languages.
    More languages.
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Added current translations from Crowdin
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Changed locales folder organization to a file structure directly usable with i18next parser and on crowdin platform without manual processing steps necessary
    Language.
    Language updates.
    Language updates.
    Language updates.
    Language updates.
    Language additions.
    Language plural form fixes.
    Language update.
    Languages.
    Language changes.
    Language changes.
    Language additions.
    Typo in language key.
    Updated languages.
    More languages.
    Added new Crowdin translation files
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Added current translations from Crowdin
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Updated indonesian, spanish (ES), finnish and turkish language files from Crowdin, set Indonesian from beta to stable
    Added current translations from Crowdin
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Changed locales folder organization to a file structure directly usable with i18next parser and on crowdin platform without manual processing steps necessary
    Language.
    Language updates.
    Language updates.
    Language updates.
    Language updates.
    Language additions.
    Language plural form fixes.
    Language update.
    Languages.
    Language changes.
    Language changes.
    Language additions.
    Typo in language key.
    Updated languages.
    More languages.
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Added new Crowdin translation files
    Added latest translations from Crowdin, retranslating HTML free strings
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Changed locales folder organization to a file structure directly usable with i18next parser and on crowdin platform without manual processing steps necessary
    Language.
    Language updates.
    Language updates.
    Language updates.
    Language updates.
    Language additions.
    Language plural form fixes.
    Language update.
    Languages.
    Language changes.
    Language changes.
    Language additions.
    Typo in language key.
    Updated languages.
    More languages.
    Added new translation files from Crowdin
    Added updated translations from Crowdin
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Added current translations from Crowdin
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Synchronized Crowdin and locales folder naming
    Changed locales folder organization to a file structure directly usable with i18next parser and on crowdin platform without manual processing steps necessary
    Language.
    Language updates.
    Language updates.
    Language updates.
    Language updates.
    Language additions.
    Language updates.
    Language plural form fixes.
    Language update.
    Languages.
    Language changes.
    Language changes.
    Language additions.
    Typo in language key.
    Updated languages.
    More languages.
    Added new translation files from Crowdin
    Updated translation files from Crowdin
    Updated Crowdin translation files, changed status of Bulgarian to Stable (Beta), Czech, Slovak to Beta (Experimental)
    Added new Crowdin translation files
    Updated translation files for Czech, Russian, Ukrainian, Greek, added Greek as experimental language
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Added current translations from Crowdin
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Added current translations from Crowdin
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Added updated translations from Crowdin
    Added new Crowdin translation files
    Updated Crowdin translation files, changes status of Italian and Dutch to stable
    Updated language translations from Crowdin
    Added latest translations from Crowdin, retranslating HTML free strings
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Updated French translation file with latest translations
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Changed locales folder organization to a file structure directly usable with i18next parser and on crowdin platform without manual processing steps necessary
    Language.
    Language updates.
    Language updates.
    Language updates.
    Language updates.
    Language additions.
    Language plural form fixes.
    Language update.
    Languages.
    Language changes.
    Language changes.
    Language additions.
    Typo in language key.
    Updated languages.
    More languages.
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Added current translations from Crowdin
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Added current translations from Crowdin
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Changed locales folder organization to a file structure directly usable with i18next parser and on crowdin platform without manual processing steps necessary
    Language.
    Language updates.
    Language updates.
    Language updates.
    Language updates.
    Language additions.
    Language updates.
    Language plural form fixes.
    Language update.
    Languages.
    Language changes.
    Language changes.
    Language additions.
    Typo in language key.
    Updated languages.
    More languages.
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Updated Crowdin translation files, changes status of Italian and Dutch to stable
    Updated language translations from Crowdin
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Replaced all HTML containing translation strings for security reasons
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Added current translations from Crowdin
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Changed locales folder organization to a file structure directly usable with i18next parser and on crowdin platform without manual processing steps necessary
    Language.
    Language updates.
    Language updates.
    Language updates.
    Language updates.
    Language additions.
    Language plural form fixes.
    Language update.
    Languages.
    Language changes.
    Language changes.
    Language additions.
    Typo in language key.
    Updated languages.
    More languages.
    More multilingual support.
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Added current translations from Crowdin
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Updated translation files from Crowdin
    Updated Crowdin translation files, changed status of Bulgarian to Stable (Beta), Czech, Slovak to Beta (Experimental)
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Added current translations from Crowdin
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Changed locales folder organization to a file structure directly usable with i18next parser and on crowdin platform without manual processing steps necessary
    Language.
    Language updates.
    Language updates.
    Language updates.
    Language updates.
    Language additions.
    Language plural form fixes.
    Language update.
    Languages.
    Language changes.
    Language changes.
    Language additions.
    Typo in language key.
    Updated languages.
    More languages.
    Added updated translations from Crowdin
    Added newly build translation files from Crowdin having the HTML containing strings removed
    Added updated translation files, new experimental translation status, added Czech and Hindi in Experimental, updated changelog
    Added current translations from Crowdin
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Updated Crowdin with missing dynamic translation strings + available translations from different languages, added updated language files to locales folder
    Added fallbackOnEmpty:true to i18n initialization in index.html, first direct Crowdin translation file import, added all language translations (only backend) for easier integration process
    Synchronized Crowdin and locales folder naming
    Changed locales folder organization to a file structure directly usable with i18next parser and on crowdin platform without manual processing steps necessary
    Language.
    Language updates.
    Language updates.
    Language updates.
    Language updates.
    Language additions.
    Language plural form fixes.
    Language update.
    Update FontAwesome to newest version, added some more icons to transactions, changed MS icon in sidebar, and added option on currencies page to show all or just the users
    Updated Font Awesome library to 4.2
    moved tools to ui
    New NRS client initial commit.
    Remove transition effect from sidebar and content areas trying to resolve #333 ui-is-messed-up-on-login
    UI for max fees and phasing duration
    Try to fix spill-out reported by Lior
    Sidebar changes: account id is no longer a link, below it there are two buttons, set account info (or the account name if set) and details which takes you to the account detail modal
    Hide phasing parameters when mandatory approval is enabled and fill them automatically
    Fee calculation: improve visual hint that fee re-calculation is required
    Remove references to the ZeroClipboard component
    Add optional public key field to enable entering a public key manually when "Do not sign" is enabled while the account has no public key on the blockchain
    Add do not sign checkbox, visible only when do not broadcast is checked
    mobile respon fix 1 pixel off
    Responsive Header for Res: 550, 767, 800, 955
    Layout fix
    Intermidiate work on forging indicator
    Fixed bug modals being not scrollable when invoked from other modal (mainly from transaction info modal)
    Minor
    Dialog for setting mandatory approval (mandatory phasing)
    Fixed bug with half-darkened modal background when modal is too long
    Remove blocks on Aliases page and only display total in header of page
    Fixes for corporate theme and added missing code in for account login
    Minor lockscreen layout changes
    New method NRS.appendSubHeaderToTSMenuItem to add sub headers to sidebar items, combined two marketplace main sidebar navigation items to one separated by My-Store sub header
    Hide account login if there are no accounts saved
    Finish up Account login.  Needs more testing
    Added contact name info field to approve account input fields
    Worked on approval modal, all approval types present
    Reworked current status of approve transaction code, integration in new HTML template structure, JS code integration into nrs.modals.js
    Added progress bar for latest 5000 blocks contextually displayed in blockchain progress dialog depending on blockchain download size for better tracking download progress
    Make sidebar scrollable to enable client usage on phones and devices with smaller screens, tested with Chrome, Firefox, Safari, Phone Simulator (IE still missing)
    Show unconfirmed transactions in Italics
    Some style tweaks for word breaks
    Added .modal-context-help class to app.css for generic modal context icon formatting
    Moved tx approval dialog invocation to advanced link (from approve by link)
    Started working on 2-phased transaction UI, new tabbed transaction modal dialog module, new nrs.modals.approve.js logic file
    Add number of purchases to DGS goods
    minor bugs
    Updating some styles for the new dashboard
    Decreased font-size in small-box items by 1 pixel to help when the window is resized very small
    Ready for testing of new Dashboard design.  Needs optimization still.  Added missing current block and connected status
    Added style for balance in the sidebar
    Added to both the .left-side and .right-side
    transition: margin .7s;
    -webkit-transition: margin .7s;
    Word wrap long words.
    DGS block passed.
    Update notification fix.
    Minor.
    Scrollbar fix.
    Show quantity of DGS products.
    Note to self.
    Minor CSS.
    Minor CSS removal.
    Design customizations.
    Minor alias changes.
    Messages page changes.
    Minor.
    Minor CSS.
    Alias & message changes.
    Design changes.
    Colors.
    PKAnnouncement adjustments.
    Enable certain elements at specific block height.
    New login page design.
    Minor.
    Minor.
    CSS changes.
    Show alias for sale message in transaction modal.
    Minor.
    Hide fee / deadline by default - show via advanced toggle.
    Minor color change.
    Inline message sending (encrypted).
    Allow decrypting of messages.
    Remove display of numeric account IDs.
    Extra modals.
    Minor.
    Minor.
    Minor CSS/HTML.
    Minor.
    Aliases sell/buy.
    Show purchases and pending orders, add refund functionality.
    Purchase products, show newest products.
    Minor.
    Show item info in modals.
    Asset exchange no longer shows all assets. User must bookmark assets now instead.
    Firefox asset sidebar fix.
    Featured assets list.
    Add clear button to search fields.
    Differentiate assets issued from assets bought in account modal.
    Different background color for assets owned.
    Asset exchange UI.
    Minor.
    Minor.
    Reed Solomon support.
    Asset exchange search.
    Minor.
    Minor.
    Minor.
    Center without javascript.
    moved tools to ui
    Minor changes everywhere.
    Added setAccountInfo API (name/description).
    Show account leasing details.
    Don't animate when not forging.
    Animated forging indicator.
    Transfer Asset Command Field and some more NQT.
    Encrypted messages phase 1.
    Guess correct address (new address format).
    Settings changes.
    Unconfirmed orders show up correctly.
    Search box for transactions / blocks / accounts.
    Stop forging on logout.
    Added unique suffix possibility to assets (via alias) as well as a few other fields (url, tags, ..)
    Dropdown menu link color fix for different sidebar color schemes.
    Dropdown no longer cut off.
    More asset grouping functionality.
    Allow clicking on asset / nxt balance to fill sell / buy order form.
    Added minimum fee message popover.
    Remember password functionality (during browser session).
    Copy link for directly sending messages or Nxt to your account.
    Added console logging of API requests.
    Copy account ID to clipboard.
    Changed asset order modal usability.
    New NRS client initial commit.
    moved tools to ui
    New NRS client initial commit.
    Added highlight.js library files (BSD licencse,<20KB, customized for JSON) for syntax highlighting in API test servlet
    Remove references to the ZeroClipboard component
    Fixed bug modals being not scrollable when invoked from other modal (mainly from transaction info modal)
    Remove blocks on Aliases page and only display total in header of page
    Small correction to corporate theme login
    Fixes for corporate theme and added missing code in for account login
    Small style fix for corporate style
    Corrected some more styles in corporate theme
    Corrected some stlyes in corporate theme to handle new sidemenu
    Some more fixes for the corporate theme
    Some updates to the corporate theme
    Quick fix to make corporate theme display MS sidebar link correctly.  Will need some more tweaking
    minor bugs
    Fixed spacing of tabs when viewing account information
    Gave extra width so Downloading Blockchain fits on one line
    A few style updates for the corporate design and a check added for local storage being enabled
    Added new icons for corporate theme, fixed asset value when account has no assets, and a few more styles fixes for the new theme
    Fixed Forged Block count because of pagination and fixed more styles for corporate theme
    A few more updates
    Updating some styles for the new dashboard
    Made a double correction.  Reverting change for the top margin to correct
    Correct a few styles that seemed to have never been updated
    Corrected Margin issue
    Correct styles for sidebar search
    Added css for sidebar balance
    Fixed padding for when its downloading the blockchain
    Removed z-index that didn't seem to be needed, but did cause an issue with the blue overlay
    A few more adjustments
    Adjusted forging icon colors
    Adjusted some styles to work better and added a class to each News box
    Initial css for corporate design
    Added to both the .left-side and .right-side
    transition: margin .7s;
    -webkit-transition: margin .7s;
    Word wrap long words.
    DGS block passed.
    Update notification fix.
    Minor.
    Scrollbar fix.
    Show quantity of DGS products.
    Note to self.
    Minor CSS.
    Minor CSS removal.
    Design customizations.
    Minor alias changes.
    Messages page changes.
    Minor.
    Minor CSS.
    Alias & message changes.
    Design changes.
    Colors.
    PKAnnouncement adjustments.
    Enable certain elements at specific block height.
    New login page design.
    Minor.
    Minor.
    CSS changes.
    Show alias for sale message in transaction modal.
    Minor.
    Hide fee / deadline by default - show via advanced toggle.
    Minor color change.
    Inline message sending (encrypted).
    Allow decrypting of messages.
    Remove display of numeric account IDs.
    Extra modals.
    Minor.
    Minor.
    Minor CSS/HTML.
    Minor.
    Aliases sell/buy.
    Show purchases and pending orders, add refund functionality.
    Purchase products, show newest products.
    Minor.
    Show item info in modals.
    Asset exchange no longer shows all assets. User must bookmark assets now instead.
    Firefox asset sidebar fix.
    Featured assets list.
    Add clear button to search fields.
    Differentiate assets issued from assets bought in account modal.
    Different background color for assets owned.
    Asset exchange UI.
    Minor.
    Minor.
    Reed Solomon support.
    Asset exchange search.
    Minor.
    Minor.
    Minor.
    Center without javascript.
    moved tools to ui
    Minor changes everywhere.
    Added setAccountInfo API (name/description).
    Show account leasing details.
    Don't animate when not forging.
    Animated forging indicator.
    Transfer Asset Command Field and some more NQT.
    Encrypted messages phase 1.
    Guess correct address (new address format).
    Settings changes.
    Unconfirmed orders show up correctly.
    Search box for transactions / blocks / accounts.
    Stop forging on logout.
    Added unique suffix possibility to assets (via alias) as well as a few other fields (url, tags, ..)
    Dropdown menu link color fix for different sidebar color schemes.
    Dropdown no longer cut off.
    More asset grouping functionality.
    Allow clicking on asset / nxt balance to fill sell / buy order form.
    Added minimum fee message popover.
    Remember password functionality (during browser session).
    Copy link for directly sending messages or Nxt to your account.
    Added console logging of API requests.
    Copy account ID to clipboard.
    Changed asset order modal usability.
    New NRS client initial commit.
    Updated Bootstrap from 3.3.2 to 3.3.4
    Updated Boostrap to version 3.3.2
    Update bootstrap to 3.2.0
    moved tools to ui
    New NRS client initial commit.
    updated copyright year
    added copyright notice headers
    CSS changes.
    Center without javascript.
    moved tools to ui
    New NRS client initial commit.
    Use local qunit CSS file
    Add "refresh search index" link to settings menu
    Hide header buttons for disabledAPIs
    updated copyright year
    Add tooltips to header icons
    Work on a table to present the tagged data. When no search criteria exists show all tagged dat. Move file upload function to the tagged data page.
    updated wiki links
    Implement Hallmark dialog
    ShapeShift integration - plugin code ported to core
    Merge the remaining signed bytes tab into the new signed json tab and remove the old transaction bytes operations modal
    Implement Transaction JSON operations dialog (some UI improvements are still required)
    updated styles and added classes
    Implement calculation modal and abstract the hash algorithms selection into a UI element
    Added four UI help menu items linking to Wiki tutorials
    Provide more right margin for logout button to not overlap with scrollbars on some systems (Windows)
    added copyright notice headers
    Added some more translation strings
    Move file upload link from toolbar to settings menu
    Add File Upload dialog and support multipart form request using JQuery Ajax
    renamed pending to phased/phasing
    Added unconfirmed/phased transaction notifications to client header, new mechanism to provide subpage info on page load
    Add Send Currency button which invokes the currency transfer dialog
    Added functionality for logging out and clearing user data
    Switched back to more prominent notification UI element
    Simplified notification UI element
    Added simple transaction type based notification system for client, temporary bug fixing for transaction approval
    Minor
    Added overview page for installed plugins
    Switched contact and setting icon in header, changed transaction operations icon due to overlapping with SuperNET icon
    Moved news navi to help icon in header (top right), moved blocks, peers navi to settings icon in header (top right) (see previous commit)
    Moved transactions navi to subnavi of Dashboard
    Moved contacts navi to icon in header (top right)
    Added dynamic sidebar creation, new NRS.setup.PAGENAME methods for setup tasks
    Replaced 5 i18n key with namespaces to avoid problems with translation key parsing
    Moved header, lockscreen, sidebar, sidebar context infos to own files, checked integrity
    updated copyright year
    added copyright notice headers
    Resorted settings on a 2-column based grid for convenience, added startup alerts giving clear feedback on plugins loaded, added ability to enable/disable plugins on an account basis (default: disabled, but very easy switch), added settings warning for browsers with limited DB support storing settings browser-wide (mainly Safari)
    Replaced all HTML containing translation strings for security reasons
    Added missing translation strings for login page
    Minor
    Switched login toggle button to use data-login-type
    Changed login type button to single toggle
    Changed NXT account login icon and moved the toggle to the left of the input field
    Minor layout changes
    Merged loginAccount and login into one function
    Made account number the default login input and enabled ente to login with that input
    Fixes for corporate theme and added missing code in for account login
    Changed to cookies from database for keeping accounts.  Currently only supports one account
    Initial change to Holger's design.  Buttons need more styling and still need to change from database to cookies or account list
    Can manually specify account number to log in to
    Minor lockscreen layout changes
    Added possibility to disable on plugins on startup
    Hide account login if there are no accounts saved
    Finish up Account login.  Needs more testing
    Edited for merging newest develop
    Added plugin list, security warning to login screen
    Added input for an account login
    Added language selection to welcome screen, updated DEVELOPERS-GUIDE.md, changelog
    Moved header, lockscreen, sidebar, sidebar context infos to own files, checked integrity
    updated copyright year
    added copyright notice headers
    Replaced all HTML containing translation strings for security reasons
    Minor
    Added progress bar for latest 5000 blocks contextually displayed in blockchain progress dialog depending on blockchain download size for better tracking download progress
    Added 2 new global state variables NRS.serverConnect and NRS.peerConnect, added switch to blockchain download progress dialog to halted when no connection to server or peers available
    Added blocks left info to blockchain download info bar
    Moved header, lockscreen, sidebar, sidebar context infos to own files, checked integrity
    Use default sidebar buttons instead of info buttons
    updated copyright year
    Sidebar UI improvements
    Add tooltips to sidebar icons
    Add block height to sidebar
    Sidebar changes: account id is no longer a link, below it there are two buttons, set account info (or the account name if set) and details which takes you to the account detail modal
    Move account id link back to the side bar above the account name
    Now that we can no longer copy the account id using the now removed clipboard function. I found it annoying not be able to go quickly copy the account id to go to the account info modal. Therefore I added account id link to the dashboard title and removed the account id from the "switch account" toggle which now just says "switch account"
    Fix ancient typo (seach instead of search)
    Remove "Copy" links which rely on ZeroClipboard
    Forging indicator now supports both passphrase and admin password. Forging indicator status reflects the actual forging status
    Intermidiate work on forging indicator
    Remove color change
    Add forging indicator tooltip
    added copyright notice headers
    Added dynamic sidebar creation, new NRS.setup.PAGENAME methods for setup tasks
    adding more pages
    Make sidebar scrollable to enable client usage on phones and devices with smaller screens, tested with Chrome, Firefox, Safari, Phone Simulator (IE still missing)
    Moved header, lockscreen, sidebar, sidebar context infos to own files, checked integrity
    updated copyright year
    Remove "Copy" links which rely on ZeroClipboard
    added copyright notice headers
    Added translation strings for voting system
    Changed vote link on my polls page to button for consistency/enabling disable functionality after voting
    Add simple pie chart representation for poll results
    Add pagination to active polls page
    Layout improvements for polls tables
    Added/Reactivated voting button on followed poll poll result pages
    Changed votes display box to full width, added simple votes display limit (currently 50) to votes display box for scalability on large vote number
    Voting system table layout optimizations
    Poll results formatting
    UI optimizations for active polls table
    Fix blocks left column header
    vs ui results modal and fee increase with 20+ options
    bringing VS ui up to date
    moving toward followed polls
    Added dynamic sidebar creation, new NRS.setup.PAGENAME methods for setup tasks
    poll results and voters listing
    adding more pages
    working on poll results
    Renamed pages file ui/html/pages/polls.html to voting_system.html
    Moved contacts_page, polls_page, aliases_page, asset exchange pages (5) to own file, checked integrity
    updated copyright year
    Fix ancient typo (seach instead of search)
    Fix marketplace top section and remove pagination indicator when warning is displayed
    Implement marketplace warning
    added copyright notice headers
    Replaced all HTML containing translation strings for security reasons
    Fix label for marketplace tag count info box
    Moved monetary system pages (3), DGS pages (5) to own files, checked integrity
    updated copyright year
    added copyright notice headers
    News page improvements
    Moved news_page, blocks_page to own file, checked integrity
    updated copyright year
    Label rephrasing
    Deletes History page
    Fix ancient typo (seach instead of search)
    Fee calculation: update all modals with the fee calculation UI and remove modal and widget specific calculation. Still not done:
    Asset and currency issuance
    Asset/Currency buy/sell
    Fee calculation for account without public key
    More UI work
    Remove "Copy" links which rely on ZeroClipboard
    Implement delete shares modal based on the asset transfer modal
    Replace the height column with transaction status icon with link to transaction info and tooltip. Fix support for "Asset Issuer" label.
    Support unconfirmed and phased transactions in AE
    added copyright notice headers
    Replaced all HTML containing translation strings for security reasons
    Added approval requests page for by-asset transaction approval requests
    Improve message when account has no assets
    Changed quantity displayed on asset exchange sidebar bookmarks from total quantity to owned quantity
    Fix #257 Pay Dividends link appears only once and move the link to the upper row
    Moved contacts_page, polls_page, aliases_page, asset exchange pages (5) to own file, checked integrity
    updated copyright year
    updated version, renamed Tagged Data to Data Cloud
    Localization
    Implement data download and view links and view modal
    Work on a table to present the tagged data. When no search criteria exists show all tagged dat. Move file upload function to the tagged data page.
    Initial work on tagged data search page - not done
    updated copyright year
    Fix ancient typo (seach instead of search)
    added copyright notice headers
    Replaced all HTML containing translation strings for security reasons
    Added translation strings to monetary system, transaction modals
    Remove blocks on Aliases page and only display total in header of page
    delete alias link
    Moved contacts_page, polls_page, aliases_page, asset exchange pages (5) to own file, checked integrity
    updated copyright year
    fixed broken English
    exchange booth help texts
    Submit rate not effective rate to CurrencyBuy/Sell, improve labels and descriptions
    Automatically calculate exchange rates based on available exchange offers - needs more testing
    Fee calculation: update all modals with the fee calculation UI and remove modal and widget specific calculation. Still not done:
    Asset and currency issuance
    Asset/Currency buy/sell
    Fee calculation for account without public key
    More UI work
    Refactor "price" names into "rate" - no functional impact
    Currency transfer page
    Fix label
    Show phased and unconfirmed transaction in the MS exchange booth
    added copyright notice headers
    Added translation strings to monetary system, transaction modals
    Approval requests page for currency transaction approvals
    Label changes MS currency is now the "base currency" and NXT is the "quote currency" rates always show how much of the quote currency is needed to purchase one unit of the base currency or in our case how much NXT per MS currency unit
    Move over MS search box 20px to make it compatible with the corporate theme too
    Add <Transfer> and <Offer> links to the exchange booth
    Moved monetary system pages (3), DGS pages (5) to own files, checked integrity
    updated copyright year
    added copyright notice headers
    Replaced all HTML containing translation strings for security reasons
    Add central new IDs sidebar and content, created html/pages/ and html/modals/ folder, moved messages page to own file, JS include code for new pages
    updated copyright year
    removed inline styles to use classes instead
    added copyright notice headers
    Replaced all HTML containing translation strings for security reasons
    Moved contacts_page, polls_page, aliases_page, asset exchange pages (5) to own file, checked integrity
    Pressing Enter on the settings admin password field no longer refreshes the browser
    updated copyright year
    Warn about privacy leakage caused by the exchange page
    Store current coin selection in client storage
    Intermediate work on exchange settings in the settings page - not done
    Add the admin password and marketplace enablement settings + little more cleanup and indentation
    added copyright notice headers
    Labelling corporate theme selection as experimental
    Resorted settings on a 2-column based grid for convenience, added startup alerts giving clear feedback on plugins loaded, added ability to enable/disable plugins on an account basis (default: disabled, but very easy switch), added settings warning for browsers with limited DB support storing settings browser-wide (mainly Safari)
    Added language selection to welcome screen, updated DEVELOPERS-GUIDE.md, changelog
    Updated translation files with current Crowdin translations for monetary system, new beta classification for languages with partial translation status, updated DEVELOPVERS-GUIDE.md, changelog
    Synchronized Crowdin and locales folder naming
    Removed useless number data attributes 10, 20, 30,... in settings, adding meaningless entries to translation file
    Moved settings_page to own file, checked integrity
    updated copyright year
    added copyright notice headers
    Moved news_page, blocks_page to own file, checked integrity
    updated copyright year
    Add peer services to the peers list (quick and dirty)
    added copyright notice headers
    Right-align actions/blacklist column on peers table
    UI for adding and blacklisting peers
    Moved peers_page to own file, checked integrity
    updated copyright year
    Localize table headers and buttons in the account properties page
    Update button for incoming properties set by self, escape all properties and values, use property id as link in the delete property transaction info
    Account properties delete and update actions, translations and transaction info
    Account properties page, initial work on modals, local signing
    updated copyright year
    Always show Plugins sidebar item for better feature visability/transparency, added simple plugins overview page
    added copyright notice headers
    Added missing english base translations to english translation.json file
    Added overview page for installed plugins
    updated copyright year
    Move account id link back to the side bar above the account name
    Now that we can no longer copy the account id using the now removed clipboard function. I found it annoying not be able to go quickly copy the account id to go to the account info modal. Therefore I added account id link to the dashboard title and removed the account id from the "switch account" toggle which now just says "switch account"
    Revert the dashboard to show transaction information instead of account ledger entries (which can still be viewed from the account ledger page)
    Add ledger entry info modal activated by clicking an entry timestamp on the dashboard
    Fix paging and various UI improvements
    More intermediate work on the account ledger table in the dashboard and the account ledger page
    Intermediate work on the account ledger table in the dashboard
    Calculate currencies value and display on dashboard
    added copyright notice headers
    Added missing translation strings to top navigation, sidebar and dashboard
    Added badge with number of Approval Requests to sidebar menu item, added regular NRS.pages.dashboard method for more in-time dashboard updates
    Added simple pending UI to transactions table
    Some relayouting, column reordering for transactions table
    Bugfixing/layouting transactions table UI
    Unified dashboard and transactions table, reworked table layout
    Added Dashboard info box for pending and completed Marketplace sales
    Added Marketplace purchases info box to Dashboard
    Added Dashboard info box for Monetary System (Currency count)
    Added second info box row to Dashboard, added Alias count box
    Moved dashboard_page to own file, integrity checked
    Added missing translation keys and fixed translations
    Add clear results link to the my exchanges table to prevent privacy leak
    Add ShapeShift logo (this time the localization text won't hide it)
    Add ShapeShift logo to the exchange page
    Update translation resources
    Handle shape shift down status
    Warn about privacy leakage caused by the exchange page
    Show both shift and sendamount rates and their difference
    Replace the term "currency" with "coin". Fixed QR code generation. Added some translations.
    ShapeShift integration - plugin code ported to core
    Added missing translation keys and fixed translations
    Fix no shuffling message
    updated copyright year
    Reorder columns in shufflings tables
    Replace action column with status column in active shuffling table, localize button text
    Localization of table headers and messages rendered by handlebars and more warning messages
    Remove my shufflers page, adapt to api change, improve shuffling transaction info dialog
    Merge shuffler recipient and participant state into the "My Shufflings" table and compact the table columns
    Shufflers table improvements
    rename
    Add registrant count column to the shuffling table and account info modal
    1. Active Shufflings - only show "Join" action when account did not already joined.
    2. My Shufflings - reflect shuffler status and allow starting a shuffler in case it's not started
    Rename all shuffling page to active shuffling
    Clean dead code and improve var names
    Show failure transaction in shufflers table
    Add "Create Shuffling" button to the my shufflings page and change the "start shuffler" action label to "Join"
    All shufflings pagination support
    Start page for shuffling is all shufflings
    Add pagination placeholders to shuffling tables
    Shufflers table layout and fix for my shuffling blocks remaining and participants count
    Field formatting for the All and My shuffling lists
    Work on the register, start shuffling modals and their activation
    Make holding "clickable" for asset and currency types
    Shuffling pages update (development)
    Shuffling page
    Scaffolding: shuffling client code
    added copyright notice headers
    embedded jetty
    initial commit 0.4.7e full binary package
    updated copyright year
    Add ledger entry info modal activated by clicking an entry timestamp on the dashboard
    Fix paging and various UI improvements
    More intermediate work on the account ledger table in the dashboard and the account ledger page
    added copyright notice headers
    Fix pagination for approval request pages
    Add optional whitelist to by-asset, by-currency transaction approval modal dialog
    Added approval requests page for account requests (no actions yet)
    Added BY-BALANCE model to transaction approval modal
    Add subtype navi to transactions page
    Added simple pending UI to transactions table
    Some relayouting, column reordering for transactions table
    Bugfixing/layouting transactions table UI
    Unified dashboard and transactions table, reworked table layout
    Started to rework transactions page, centralized transaction type information like type icon or i18n string in nrs.transactions.type.js file
    Moved transactions_page to own file, integrity checked
    updated copyright year
    Fee calculation: update all modals with the fee calculation UI and remove modal and widget specific calculation. Still not done:
    Asset and currency issuance
    Asset/Currency buy/sell
    Fee calculation for account without public key
    More UI work
    added copyright notice headers
    Correct handing of decimals for min balance in poll creation dialog, fixed various bugs
    Add NONE min balance type to create poll dialog
    Switch consistently to camel case naming for poll creation dialog labels
    Replaced poll duration form field with block height UI element for easier poll duration input
    Fixed min_balance type selection in poll creation dialog
    Replaced currency/asset ID fields with corresponding UI elements for easier poll creation in modal dialog
    Added data-transaction-type, data-transaction-subtype data attributes to modal divs (not all, asset buy/sell dialogs again problematic)
    Layout fixes for create poll dialog - not done
    Label changes and fix WebStorm inspections
    vs ui results modal and fee increase with 20+ options
    Replaced fee/deadline form html in create_poll_modal with template to enable usage of dynamic fee structure
    bringing VS ui up to date
    Split up advanced modal template for more flexibility, removed advanced_modal_no_fee_deadline_template
    more listing of voters
    poll results and voters listing
    more poll results
    Integrated templates for voting system modals
    Deleted outdated modals/voting_system.html, pages/polls.html pages for easier merging with current voting_2phased branch
    catching up to the current updates
    working on poll results
    Finished modal refactoring, checked integrity
    fixed broken English
    Check max fee and phasing duration when submitting a phased transaction under account control
    Fixed maxFee value when setting account control
    UI for max fees and phasing duration
    Fee calculation: remove the obsolete, client side, phasing fee additions calculation
    Fee calculation: update all modals with the fee calculation UI and remove modal and widget specific calculation. Still not done:
    Asset and currency issuance
    Asset/Currency buy/sell
    Fee calculation for account without public key
    More UI work
    Phasing minimal balance auto-fill
    Voting model currency and asset auto-fill
    Added mandatory approval info
    Fixing auto-fill of phasing parameters when 2p ac is enabled (still WIP)
    Fixed mandatory approval dialog
    Dialog for setting mandatory approval (mandatory phasing)
    updated copyright year
    Fee calculation: update all modals with the fee calculation UI and remove modal and widget specific calculation. Still not done:
    Asset and currency issuance
    Asset/Currency buy/sell
    Fee calculation for account without public key
    More UI work
    added copyright notice headers
    Add permanent message option to the marketplace purchase feedback modal + various simple fixes
    Added data-transaction-type, data-transaction-subtype data attributes to modal divs (not all, asset buy/sell dialogs again problematic)
    Split up advanced modal template for more flexibility, removed advanced_modal_no_fee_deadline_template
    Reworked asset_exchange, balanceleasing, contacts, dgs, monetary_system modals, checked integrity
    Moved modals to own files, checked integrity
    updated copyright year
    added copyright notice headers
    Replaced all HTML containing translation strings for security reasons
    Merged in phramz/nxt-1/phramz/-add-missing-whitespace-stopand-stop-an-1420397142479 (pull request #26)
    
    - add missing whitespace ("Stopand" -> "Stop and")
    - add missing whitespace ("Stopand" -> "Stop and")
    - removed surplus whitespace
    Switched to combined modal file structure organization model, regrouped already added modals, rechecked integrity
    Moved stop_forging_modal, start_forging_modal, cancel_order modal to own files, checked integrity
    updated copyright year
    default 65535 after hardfork
    keep the default at 32767 in the UI, until the hardfork
    increase lease limit to 65535 blocks
    Fee calculation: update all modals with the fee calculation UI and remove modal and widget specific calculation. Still not done:
    Asset and currency issuance
    Asset/Currency buy/sell
    Fee calculation for account without public key
    More UI work
    Change default leasing period to 32767 and add lessee link to the transaction info modal
    added copyright notice headers
    Replaced all HTML containing translation strings for security reasons
    Added data-transaction-type, data-transaction-subtype data attributes to modal divs (not all, asset buy/sell dialogs again problematic)
    Split up advanced modal template for more flexibility, removed advanced_modal_no_fee_deadline_template
    Reworked asset_exchange, balanceleasing, contacts, dgs, monetary_system modals, checked integrity
    Switched to combined modal file structure organization model, regrouped already added modals, rechecked integrity
    Started moving modals from index.html to own files, moved lease_balance_modal to own file, checked integrity
    Add UI for singleton asset issuance
    updated copyright year
    Submit the new delete asset shares transaction instead of transfer asset to genesis and add delete asset shares to the transaction info dialog
    Fee calculation: fix fee calculation for asset issuance and bid/ask orders
    Fee calculation: update all modals with the fee calculation UI and remove modal and widget specific calculation. Still not done:
    Asset and currency issuance
    Asset/Currency buy/sell
    Fee calculation for account without public key
    More UI work
    Implement delete shares modal based on the asset transfer modal
    Add warning when dividend height is lower than asset issuance height
    Remove message template from buy/sell modals
    Add advanced section to asset buy/sell modals to support phasing
    added copyright notice headers
    Replaced all HTML containing translation strings for security reasons
    Added data-transaction-type, data-transaction-subtype data attributes to modal divs (not all, asset buy/sell dialogs again problematic)
    Added feeAddition html to issue_asset_modal
    Adding 'add message' feature to dividend payment modal.
    Split up advanced modal template for more flexibility, removed advanced_modal_no_fee_deadline_template
    Reworked asset_exchange, balanceleasing, contacts, dgs, monetary_system modals, checked integrity
    Fix html bug in asset order confirm dialog
    removed invalid help message
    Finished modal refactoring, checked integrity
    Moved modals to own files, checked integrity
    Moved 4 modals to own files, checked integrity
    Moved 4 modals to own files, checked integrity
    Switched to combined modal file structure organization model, regrouped already added modals, rechecked integrity
    Moved asset_order_modal, transfer_asset_modal, transfer_currency_modal to own files, checked integrity
    updated copyright year
    Retrieve expired text transaction as well and add download link to data content dialog
    Remove the mime type parameter from the file upload modal
    up to 5 tags are allowed
    Move upload and extend modals from messages to tagged data and fix the view dialog escaping
    Implement data download and view links and view modal
    added copyright notice headers
    Switched to more practicable namespacing conventions for plugin CSS selectors and IDs
    First draft of plugin loading mechanism, integration into sidebar, basic hello_world example plugin
    Added nrs compatibility check and launch status determination for plugins, file stubs for example hello_world plugin
    updated copyright year
    Implement calculation modal and abstract the hash algorithms selection into a UI element
    added copyright notice headers
    Other UI improvements to block height modal UI element
    Reduced UI elements in block height UI element to to space restraints on smaller screens
    Add minBalance logic, fee addition structure to transaction approval dialog, first specification-complete implementation of approval dialog (still untested)
    Reworked approval whitelist UI element to be reusable in other modal multi-account input contexts
    Add decimals info to currency code modal UI element
    Improvements to block height modal UI element
    New ui element for adding asset ID, completed by-asset approval transaction dialog
    Added accidentally not-yet checked in new files for ui elements
    updated copyright year
    Fee calculation: update all modals with the fee calculation UI and remove modal and widget specific calculation. Still not done:
    Asset and currency issuance
    Asset/Currency buy/sell
    Fee calculation for account without public key
    More UI work
    Fee calculation: change default fee to 0, improve template design, support add alias, reset the fee to default when fields on the modal are changed
    added copyright notice headers
    Added data-transaction-type, data-transaction-subtype data attributes to modal divs (not all, asset buy/sell dialogs again problematic)
    Split up advanced modal template for more flexibility, removed advanced_modal_no_fee_deadline_template
    Added recipient modal template, added template to sell, transfer alias modals, checked integrity
    Reworked cancel_alias_sale_modal, checked integrity
    Reworked buy_alias_modal, checked integrity
    Added add message modal template, reworked delete_alias_modal, sell_alias_modal, checked integrity
    Renaming template data attribute
    Finalized concept for template integration
    Reviewed secret phrase modal include
    Added HTML modal template for secret passphrase form dialog, new html/modals/templates.html file, basic integration in index.html for one exemplaric transaction dialog
    Moved modals to own files, checked integrity
    Moved modals to own files, checked integrity
    removed exchange booth pre-fork warning
    updated copyright year
    Use standard height selection widget for expiration height
    Rework the labels on the publish exchange offer modal
    translation for publish exchange offer help texts
    exchange booth help texts
    Currency buy pre-fork warning
    Fix decimals for rate entry when publishing exchange offer + fix various Webstorm inspections
    Remove unused currency delete modal
    Remove unused currency mint modal
    Fee calculation: fix currency issuance modal
    Fee calculation: update all modals with the fee calculation UI and remove modal and widget specific calculation. Still not done:
    Asset and currency issuance
    Asset/Currency buy/sell
    Fee calculation for account without public key
    More UI work
    Fix header
    Fix minimum reserve per unit label in issue currency dialog
    Remove message template from buy/sell modals
    Add advanced section to currency  buy/sell modals to support phasing
    added copyright notice headers
    Replaced all HTML containing translation strings for security reasons
    Added translation strings to monetary system, transaction modals
    Added data-transaction-type, data-transaction-subtype data attributes to modal divs (not all, asset buy/sell dialogs again problematic)
    Cosmetics
    Change currency reserve dialog to use whole NXT - not done
    Added fee addition html to issue_currency_modal, replaced generic advanced form input with templates, fixed bug with fee addition for approval modal logic
    Replaced fee/deadline HTML in publish_exchange_offer_modal with template, added missing advanced templates
    Add Send Currency button which invokes the currency transfer dialog
    Label changes MS currency is now the "base currency" and NXT is the "quote currency" rates always show how much of the quote currency is needed to purchase one unit of the base currency or in our case how much NXT per MS currency unit
    Split up advanced modal template for more flexibility, removed advanced_modal_no_fee_deadline_template
     #270 Error in the Monetary System Currency Distribution dialog
    Fix labels in currency reserve dialog
    Currency distribution dialog
    Currency Distribution Dialog - initial commit
    Reworked asset_exchange, balanceleasing, contacts, dgs, monetary_system modals, checked integrity
    Added [html] labeling to confirm_exchange translation key
    Cleanup duplicate IDs and fix minor WebStorm inspections
    Moved modals to own files, checked integrity
    Moved modals to own files, checked integrity
    Moved 4 modals to own files, checked integrity
    Switched to combined modal file structure organization model, regrouped already added modals, rechecked integrity
    Moved asset_order_modal, transfer_asset_modal, transfer_currency_modal to own files, checked integrity
    updated copyright year
    Move upload and extend modals from messages to tagged data and fix the view dialog escaping
    Removed duplicated fee calculation widget
    Fee calculation: update all modals with the fee calculation UI and remove modal and widget specific calculation. Still not done:
    Asset and currency issuance
    Asset/Currency buy/sell
    Fee calculation for account without public key
    More UI work
    Fee calculation experiment
    added copyright notice headers
    Punable data - added extend action to upload transaction info, extend dialog which uses the same fee payed by the upload transaction and transaction info for extend transaction.
    Punable data - implemented local signing for upload, fixed fee calculation, set isText to false by default
    Tagged data transaction - add missing fields to dialog and transaction info
    Add File Upload dialog and support multipart form request using JQuery Ajax
    Moved modals to own files, checked integrity
    updated copyright year
    added copyright notice headers
    Replaced all HTML containing translation strings for security reasons
    Add File Upload dialog and support multipart form request using JQuery Ajax
    Client side support for prunable messages
    Added data-transaction-type, data-transaction-subtype data attributes to modal divs (not all, asset buy/sell dialogs again problematic)
    Split up advanced modal template for more flexibility, removed advanced_modal_no_fee_deadline_template
    Reworked asset_exchange, balanceleasing, contacts, dgs, monetary_system modals, checked integrity
    Moved modals to own files, checked integrity
    Moved 4 modals to own files, checked integrity
    updated copyright year
    Use admin password from settings as default for peer add/connect/blacklist dialogs
    added copyright notice headers
    Hide the admin password field when not needed and add connect peer modal when admin password is required
    Add adminPassword template and use in the addPeer and blacklistPeer modals
    addPeer returns isNewlyAdded
    Reordered peers translations and added new ones
    Display more verbose message after adding peer
    Fixed disappearing blacklist message
    UI for adding and blacklisting peers
    updated copyright year
    Account properties delete and update actions, translations and transaction info
    Account properties page, initial work on modals, local signing
    Fee calculation: update all modals with the fee calculation UI and remove modal and widget specific calculation. Still not done:
    Asset and currency issuance
    Asset/Currency buy/sell
    Fee calculation for account without public key
    More UI work
    Change default leasing period to 32767 and add lessee link to the transaction info modal
    added copyright notice headers
    Replaced all HTML containing translation strings for security reasons
    Added data-transaction-type, data-transaction-subtype data attributes to modal divs (not all, asset buy/sell dialogs again problematic)
    Split up advanced modal template for more flexibility, removed advanced_modal_no_fee_deadline_template
    Reworked asset_exchange, balanceleasing, contacts, dgs, monetary_system modals, checked integrity
    Switched to combined modal file structure organization model, regrouped already added modals, rechecked integrity
    Started moving modals from index.html to own files, moved lease_balance_modal to own file, checked integrity
    Change fee calculation button from info to default
    updated copyright year
    fixed broken English
    Removed mandatoryApprovalParamsJSON since we have the phasing control parameters in accountInfo
    Try to fix spill-out reported by Lior
    Automatically open account control tab when opening account details dialog from Mandatory Approval link
    Show phasing parameters for mandatory approval
    Fee calculation: remove the obsolete, client side, phasing fee additions calculation
    Hide phasing parameters when mandatory approval is enabled and fill them automatically
    Fee calculation: update all modals with the fee calculation UI and remove modal and widget specific calculation. Still not done:
    Asset and currency issuance
    Asset/Currency buy/sell
    Fee calculation for account without public key
    More UI work
    Fee calculation: improve visual hint that fee re-calculation is required
    Fee calculation: change default fee to 0, improve template design, support add alias, reset the fee to default when fields on the modal are changed
    Fee calculation experiment
    Improvements to the transaction JSON operations modal and to the QR scanning code
    Add optional public key field to enable entering a public key manually when "Do not sign" is enabled while the account has no public key on the blockchain
    Clear and disable the passphrase field when do not sign is checked
    Add do not sign checkbox, visible only when do not broadcast is checked
    issue #306: UI - Incorrect phasing fees, fixed
     #289 UI - Phasing: missing option to require a minimum balance of NXT - merged from feature/ui
    Implement calculation modal and abstract the hash algorithms selection into a UI element
    UI Phasing missing option to require a minimum balance of NXT
    Fixed problem causing every transaction to be considered phased
    Support phasing approved by reveal secret model (so far only the hash can be specified)
    Support phasing approved by transaction hash model
    Correctly present voting model none in the transaction tables
    Support phasing voting model none
    added copyright notice headers
    Phasing minimal balance auto-fill
    Voting model currency and asset auto-fill
    Added mandatory approval info
    Add adminPassword template and use in the addPeer and blacklistPeer modals
    Add permanent message option to messages template, this should fix most dialogs, now need to find the specific cases
    Added warning in advanced modal dialog for not phasing-safe transactions
    renamed pending to phased/phasing
    Tab order between templates has been improved
    Fixed a bug with wrong quorum conversion for NXT quorum
    Add minBalance logic, fee addition structure to transaction approval dialog, first specification-complete implementation of approval dialog (still untested)
    Reworked approval whitelist UI element to be reusable in other modal multi-account input contexts
    Add optional whitelist to by-asset, by-currency transaction approval modal dialog
    Add decimals info to currency code modal UI element
    Add whitelist info to approve transaction modal dialog to be better in sync with server error messages
    Corrected fee for by-account transaction approval in approval dialog
    New ui element for adding asset ID, completed by-asset approval transaction dialog
    Fixed fee for by-balance approval for transaction dialog to pass through
    Added ui modal element for currency input, completed basic version of by-currency approval transaction dialog
    Added concept for reusable UI elements for modals, first UI element for more comfortable block height input in forms
    Add fee addition logic for NXT transaction fee, UI for approval modal fee additions
    Renamed amount-accounts to number-accounts in approval dialog
    Adding 'add message' feature to dividend payment modal.
    Started to integrate different amount forms (Account/NXT) for approval modal dialog
    Disable approval button when transaction approved, bugfixes
    Split up advanced modal template for more flexibility, removed advanced_modal_no_fee_deadline_template
    Added BY-BALANCE model to transaction approval modal
    Fixed bug in phasing dialog, worked on UI element for phasing transactions in transactions table, added pending transactions to transactions page
    renaming
    Added moment.js library (MIT) for date calculations, added modal form element for auto-update estimated block reach date for entered block heights
    Added contact name info field to approve account input fields
    Added contact selection for pendingWhitelisted, pendingBlacklisted for approve modal
    Replaced transaction approval modal tab header texts by icons, added popover explanation texts
    Worked on approval modal, all approval types present
    Reworked current status of approve transaction code, integration in new HTML template structure, JS code integration into nrs.modals.js
    Temporarily moved v2p development template html file for easier merging with develop
    Reworked asset_exchange, balanceleasing, contacts, dgs, monetary_system modals, checked integrity
    Added recipient modal template, added template to sell, transfer alias modals, checked integrity
    Added add message modal template, reworked delete_alias_modal, sell_alias_modal, checked integrity
    Finalized concept for template integration
    Added handlebars.js library (MIT) for more flexible/robust template handling
    Added HTML modal template for secret passphrase form dialog, new html/modals/templates.html file, basic integration in index.html for one exemplaric transaction dialog
    Fix approval dialog for sendMoney transaction by adding default pendingMinBalance to form
    fixed broken English
    Fix label in shift modal
    Update translation resources
    Fix local signing problem of from NXT exchanges and replace passphrase entry field with standard template
    Replace the term "currency" with "coin". Fixed QR code generation. Added some translations.
    ShapeShift integration - plugin code ported to core
    Add back button to ledger info modal
    Add "switch account" button to the account info dialog and localize the modal headers
    Implement back button on the transaction info, account info and block info modals
    Switch to/from columns to from/to in block transactions table
    updated copyright year
    Show hallmark account when parsing a hallmark
    Generate token using JavaScript without sending the passphrase to the server
    Show phasing parameters for mandatory approval
    Fee calculation: update all modals with the fee calculation UI and remove modal and widget specific calculation. Still not done:
    Asset and currency issuance
    Asset/Currency buy/sell
    Fee calculation for account without public key
    More UI work
    Moved Account Control to Account Details
    Add ledger tab to the account info dialog
    Implement Hallmark dialog
    Support update check for the windows installer in addition to the zip file
    Add support for disabling the secretIsText parameter in the hash calculation dialog
    Add ledger entry info modal activated by clicking an entry timestamp on the dashboard
    replaced isScanning with isDownloading in NRS info
    Implement calculation modal and abstract the hash algorithms selection into a UI element
    Add transaction type to the transaction list in the block info dialog
    added copyright notice headers
    Replaced all HTML containing translation strings for security reasons
    Added data-transaction-type, data-transaction-subtype data attributes to modal divs (not all, asset buy/sell dialogs again problematic)
    Add Send Currency button which invokes the currency transfer dialog
    Added functionality for logging out and clearing user data
    Split up advanced modal template for more flexibility, removed advanced_modal_no_fee_deadline_template
    Fix header in leasing dialog table
    Reworked account_info_modal, checked integrity
    Reworked send_money_modal, checked integrity
    Improve account  leasing messages and account details - account leasing dialog
    Finished modal refactoring, checked integrity
    Moved modals to own files, checked integrity
    Moved modals to own files, checked integrity
    Added missing translation keys and fixed translations
    updated copyright year
    Display the recipient account derived from the recipient passphrase on the start shuffler modal
    Always show warnings on modals
    Localization of table headers and messages rendered by handlebars and more warning messages
    Add warning to the start shuffler modal and remove duplicate translation keys
    Passphrase warning on start shuffler modal
    Remove transaction related templates for start shuffler modal
    Add localization resources and fix shuffling related localization issues
    Clean dead code and improve var names
    Remove unused modals
    Use password field for recipient passphrase
    Work on the register, start shuffling modals and their activation
    Create shuffling modal - support for holding and finish height widgets
    Shuffling modals update (development)
    Shuffling modals
    Scaffolding: shuffling client code
    added copyright notice headers
    embedded jetty
    initial commit 0.4.7e full binary package
    Add back button to ledger info modal
    Implement back button on the transaction info, account info and block info modals
    updated copyright year
    updated version, renamed Tagged Data to Data Cloud
    Fee calculation: update all modals with the fee calculation UI and remove modal and widget specific calculation. Still not done:
    Asset and currency issuance
    Asset/Currency buy/sell
    Fee calculation for account without public key
    More UI work
    Fixed: when using "Do not broadcast" without "Do not sign" the downloaded signed JSON file was prefixed "unsigned" and naming changes
    Hide the broadcast button instead of disable it and remove the prunable JSON field
    Merge the remaining signed bytes tab into the new signed json tab and remove the old transaction bytes operations modal
    Move the parseTransaction and calculateFullHash tabs to the transaction JSON operations and add a JSON field to each tab
    Add the missing download and upload links
    Upload now looks better, works on Chrome but does not work on Firefox. Perhaps need to replace <a> with <img>
    Simplistic file upload to text area widget which works but looks awful - I can do better
    Add download link to the unsigned JSON field
    Support reading unsigned bytes QR code from the sign transaction dialog
    Better QR scanning icon
    Improvements to the transaction JSON operations modal and to the QR scanning code
    Implement Transaction JSON operations dialog (some UI improvements are still required)
    Handle cases where unsigned bytes are not returned from the server
    Implement signing for raw transaction bytes modal and allow reading the signature into the text area from a QR code using html5-qrcode
    Display QR code only when transaction is not signed and always display transaction JSON
    Add QR code for unsigned bytes
    When doNotSign is checked, do not send passphrase to the server and do not sign the returned transaction bytes. Only display the unsigned bytes in return.
    Feature not done.
    added copyright notice headers
    Added translation strings to monetary system, transaction modals
    Punable data - added extend action to upload transaction info, extend dialog which uses the same fee payed by the upload transaction and transaction info for extend transaction.
    Tabbing order
    Add reveal secret field to transaction approval modal
    Added "approve transaction" action to the transaction info actions tab which is now always visible
    Added data-transaction-type, data-transaction-subtype data attributes to modal divs (not all, asset buy/sell dialogs again problematic)
    Add min balance warning to modal for approving a transaction
    Phasing tab in transaction info dialog
    Add Send Currency button which invokes the currency transfer dialog
    First (rough) version of approval dialog
    Moved modals to own files, checked integrity
    Add ShapeShift logo to the exchange page
    New login page design.
    moved tools to ui
    New NRS client initial commit.
    Support for Windows service installation and missing resources related to installer
    New login page design.
    moved tools to ui
    New NRS client initial commit.
    moved tools to ui
    New NRS client initial commit.
    Support for Windows service installation and missing resources related to installer
    moved tools to ui
    New NRS client initial commit.
    Initial Support for System Tray icons - not done yet
    Adding images for corporate design
    Adding images for corporate design
    Adding images for corporate design
    Adding images for corporate design
    New login page design.
    moved tools to ui
    New NRS client initial commit.
    Adding images for corporate design
    Adding images for corporate design
    New login page design.
    Adding images for corporate design
    Adding images for corporate design
    Added new icons for corporate theme, fixed asset value when account has no assets, and a few more styles fixes for the new theme
    Adjusted some styles to work better and added a class to each News box
    Adding images for corporate design
    moved tools to ui
    New NRS client initial commit.
    Adding images for corporate design
    Adding images for corporate design
    Adding images for corporate design
    Updating image
    Adding images for corporate design
    Adding images for corporate design
    moved tools to ui
    New NRS client initial commit.
    Changed image to say NXT Platform
    A few more adjustments
    Adding images for corporate design
    Adding images for corporate design
    Adding more images for corporate design
    Added new icons for corporate theme, fixed asset value when account has no assets, and a few more styles fixes for the new theme
    Adding more images for corporate design
    Adding more images for corporate design
    Adding more images for corporate design
    Adding more images for corporate design
    Adding more images for corporate design
    Adding more images for corporate design
    Adding more images for corporate design
    Adding more images for corporate design
    Added missing user image
    Adding more images for corporate design
    Adding more images for corporate design
    Adding more images for corporate design
    Adding more images for corporate design
    Adding more images for corporate design
    Adding more images for corporate design
    Adding more images for corporate design
    Adding more images for corporate design
    Adding more images for corporate design
    Adding more images for corporate design
    Adding more images for corporate design
    MS icon for corporate theme
    Adding images for corporate design
    Adding images for corporate design
    Adding images for corporate design
    Adding images for corporate design
    Adding images for corporate design
    Adding images for corporate design
    Adding images for corporate design
    Adding images for corporate design
    Adding images for corporate design
    Adding images for corporate design
    Adding images for corporate design
    Adding images for corporate design
    Adding images for corporate design
    Adding more images for corporate design
    Adding more images for corporate design
    Adding more images for corporate design
    Adding more images for corporate design
    Adding more images for corporate design
    Adding more images for corporate design
    Adding more images for corporate design
    Adding more images for corporate design
    Fix plugin documentation typos
    Added overview page for installed plugins
    Switched to more practicable namespacing conventions for plugin CSS selectors and IDs
    Minor
    Added nrs compatibility check and launch status determination for plugins, file stubs for example hello_world plugin
    Finished first version of plugin validation, added initial manifest.json for hello_world example plugin
    Started plugin validation code, added valdation/NRS compatibility status constants to constants dict
    Initial readme files for plugin system (DEVELOPERS.md, INSTALLATION.md, SECURITY_WARNING.md)
    Fix plugin documentation typos
    More robust/managed javascript loading mechanism
    Initial readme files for plugin system (DEVELOPERS.md, INSTALLATION.md, SECURITY_WARNING.md)
    Fix plugin documentation typos
    Minor
    Initial readme files for plugin system (DEVELOPERS.md, INSTALLATION.md, SECURITY_WARNING.md)
    Deactivated hello_world plugin by default
    Added startup function to hello_world example plugin, fixed startup function execution for plugins
    Added overview page for installed plugins
    Switched to more practicable namespacing conventions for plugin CSS selectors and IDs
    Minor
    First draft of plugin loading mechanism, integration into sidebar, basic hello_world example plugin
    Added plugin list, security warning to login screen
    Added nrs compatibility check and launch status determination for plugins, file stubs for example hello_world plugin
    Finished first version of plugin validation, added initial manifest.json for hello_world example plugin
    Started plugin validation code, added valdation/NRS compatibility status constants to constants dict
    updated copyright year
    added copyright notice headers
    Minor
    Added call of existing modal dialog (block info) to hello_world example plugin
    Added startup function to hello_world example plugin, fixed startup function execution for plugins
    Switched to more practicable namespacing conventions for plugin CSS selectors and IDs
    Added blockchain status loading as exemplaric functionality for hello_world demo plugin
    More robust/managed javascript loading mechanism
    First draft of plugin loading mechanism, integration into sidebar, basic hello_world example plugin
    Added nrs compatibility check and launch status determination for plugins, file stubs for example hello_world plugin
    updated copyright year
    added copyright notice headers
    Added nrs compatibility check and launch status determination for plugins, file stubs for example hello_world plugin
    updated copyright year
    added copyright notice headers
    Added startup function to hello_world example plugin, fixed startup function execution for plugins
    Switched to more practicable namespacing conventions for plugin CSS selectors and IDs
    Added blockchain status loading as exemplaric functionality for hello_world demo plugin
    First draft of plugin loading mechanism, integration into sidebar, basic hello_world example plugin
    Added nrs compatibility check and launch status determination for plugins, file stubs for example hello_world plugin
    updated copyright year
    added copyright notice headers
    Switched to more practicable namespacing conventions for plugin CSS selectors and IDs
    First draft of plugin loading mechanism, integration into sidebar, basic hello_world example plugin
    Added nrs compatibility check and launch status determination for plugins, file stubs for example hello_world plugin
    updated copyright year
    added copyright notice headers
    embedded jetty
    initial commit 0.4.7e full binary package
    updated copyright year
    added copyright notice headers
    minor UI fix
    only run on testnet, fixed UI fee adjustment
    UI fixes
    NQT
    fixed display of negative genesis account balance
    fixed UI handling of myTransactions
    don't set Content-length headers
    use and require POST for all UI requests
    embedded jetty
    passwords and messages warning in the UI
    missing transaction ids in MyTransactions
    add cache control headers, only helps with disk cache though; require secret phrase for generating authorization tokens too
    verify secret phrase on sendMoney
    initial commit 0.4.7e full binary package
    updated copyright year
    added copyright notice headers
    embedded jetty
    initial commit 0.4.7e full binary package
    updated copyright year
    added copyright notice headers
    minor fixes
    UI fixes
    NQT
    fixed icons for 0 amounts
    only increment confirmations for confirmed transactions
    fixed UI handling of myTransactions
    embedded jetty
    initial commit 0.4.7e full binary package
    updated copyright year
    added copyright notice headers
    embedded jetty
    initial commit 0.4.7e full binary package
    updated copyright year
    added copyright notice headers
    use textContent instead of innerHTML
    improve handling of peer announced addresses and ports
    embedded jetty
    skip existing peers
    show version for all peers
    fixed setting of Peer connection state, improved display of known and blacklisted peers
    initial commit 0.4.7e full binary package
    embedded jetty
    initial commit 0.4.7e full binary package
    updated copyright year
    added copyright notice headers
    UI fixes
    NQT
    embedded jetty
    limit size of Recent Blocks
    initial commit 0.4.7e full binary package
    updated copyright year
    added copyright notice headers
    UI fixes
    NQT
    fixed UI handling of myTransactions
    embedded jetty
    initial commit 0.4.7e full binary package
    updated copyright year
    added copyright notice headers
    embedded jetty
    initial commit 0.4.7e full binary package
    updated copyright year
    added copyright notice headers
    use textContent instead of innerHTML
    embedded jetty
    skip existing peers
    show version for all peers
    fixed setting of Peer connection state, improved display of known and blacklisted peers
    initial commit 0.4.7e full binary package
    updated copyright year
    added copyright notice headers
    use textContent instead of innerHTML
    embedded jetty
    skip existing peers
    show version for all peers
    fixed setting of Peer connection state, improved display of known and blacklisted peers
    initial commit 0.4.7e full binary package
    updated copyright year
    added copyright notice headers
    embedded jetty
    initial commit 0.4.7e full binary package
    updated copyright year
    added copyright notice headers
    UI fixes
    NQT
    fixed UI handling of myTransactions
    embedded jetty
    initial commit 0.4.7e full binary package
    https://bitbucket.org/JeanLucPicard/nxt/pull-request/40/fix-dockerfile
    updated docker files (not tested) and moved to contrib
    correct sh file
    Docker: clean up and make simpler
    make docker work through api
    add Docker image
    updated docker files (not tested) and moved to contrib
    Docker: clean up and make simpler
    updated docker files (not tested) and moved to contrib
    Create the logs folder by the installer since it is need when working without GUI or running as a Windows service
    gitignore
    Create the logs folder by the installer since it is need when working without GUI or running as a Windows service
    updated full changelog
    formatting, typos
    single file changelog
    changelog update
    Change log - win xp
    removed exchange booth pre-fork warning
    Add back button to ledger info modal
    Changelog
    changed getAccountLedger to be consistent with all other APIs when applying firstIndex, lastIndex pagination
    h2 1.4.191
    changelog
    use fixed shuffling transaction timestamp instead
    random shuffling transaction timestamps
    changelog
    changelog
    different error for disabled APIs, rename
    Changelog
    allow disabling the public key cache
    changelog
    mac installer
    move installer scripts and conf to installer dir
    update mac installer
    next release non-experimental
    create clickable link run.command
    Revert default installation folder to the default on all platforms
    formatting
    signing the app and fixes
    mac installer
    mac installer
    next release non-experimental
    experimental closed source release
    added sign.sh script for command line transaction json signing
    include compact.sh and compact.bat scripts in package and installer
    Create the logs folder by the installer since it is need when working without GUI or running as a Windows service
    update linux package scripts, verify.sh not needed
    move installer scripts and conf to installer dir
    updated docker files (not tested) and moved to contrib
    separate windows and linux package scripts
    Package installer using Cygwin - GnuPG functions excluded since they hang Cygwin
    Installation no longer attempts to create the logs folder. The server will do that if necessary
    Take product version from def properties file, include all language packs, only display the shortcuts panel on Windows
    Installation improvments
    Support for Windows service installation and missing resources related to installer
    nxt.log is now written to the logs folder or under user home logs folder
    Initial Support for System Tray icons - not done yet
    Maintain Unix new lines for .sh files + indentation
    Support installation by non-priviligied user on Windows
    Upgrade IzPack build, replace readme text with version specific change log, implement registry spec for uninstall (not working yet), UI experiments
    Support Windows uninstall from control panel
    Support creating log folder under the user home folder on Windows
    Do not install Unix specific resources on Windows
    Do not install Windows Java VM on Unix
    Install desktop shortcuts by default
    Create windows specific nxt.properties and separate Windows specific files from Unix files
    Only include the default configuration files and remove .gitignore files
    Change log folder + version number update
    Installer updates
    Installer infrastructure
    move installer scripts and conf to installer dir
    Make shortcuts user specific
    Installer updates
    Installer infrastructure
    gitignore
    Create the logs folder by the installer since it is need when working without GUI or running as a Windows service
    Build readme and changelog updates
    move installer scripts and conf to installer dir
    Documentation
    Additional files
    move installer scripts and conf to installer dir
    Support installation by non-priviligied user on Windows
    Upgrade IzPack build, replace readme text with version specific change log, implement registry spec for uninstall (not working yet), UI experiments
    Fix merge problems
    move installer scripts and conf to installer dir
    IzPack 5.0.5
    Upgrade IzPack to the official 5.0 RC5 release
    move installer scripts and conf to installer dir
    Upgrade IzPack build, replace readme text with version specific change log, implement registry spec for uninstall (not working yet), UI experiments
    Installer infrastructure
    move installer scripts and conf to installer dir
    Installer infrastructure
    move installer scripts and conf to installer dir
    Installer infrastructure
    move installer scripts and conf to installer dir
    Installer infrastructure
    move installer scripts and conf to installer dir
    Installer infrastructure
    move installer scripts and conf to installer dir
    Installer infrastructure
    move installer scripts and conf to installer dir
    Installer infrastructure
    also move JavaExe to installer/lib
    Use 64 bit executable
    Include JavaExe 3rd party, restore run.bat so that it can still look for Java in case it is not redistributed (i.e. zip file) work on win-package.sh
    Initial Support for System Tray icons - status dialog
    Additional files
    move installer scripts and conf to installer dir
    Installer infrastructure
    IzPack 5.0.5
    Upgrade IzPack to the official 5.0 RC5 release
    move installer scripts and conf to installer dir
    Installer infrastructure
    move installer scripts and conf to installer dir
    Installer infrastructure
    move installer scripts and conf to installer dir
    Installer infrastructure
    move installer scripts and conf to installer dir
    Installer infrastructure
    move installer scripts and conf to installer dir
    Installer infrastructure
    move installer scripts and conf to installer dir
    Installer infrastructure
    move installer scripts and conf to installer dir
    Installer infrastructure
    IzPack 5.0.5
    Upgrade IzPack to the official 5.0 RC5 release
    move installer scripts and conf to installer dir
    Installer infrastructure
    IzPack 5.0.5
    Upgrade IzPack to the official 5.0 RC5 release
    move installer scripts and conf to installer dir
    Upgrade IzPack build, replace readme text with version specific change log, implement registry spec for uninstall (not working yet), UI experiments
    move installer scripts and conf to installer dir
    Installer infrastructure
    move installer scripts and conf to installer dir
    Installer infrastructure
    move installer scripts and conf to installer dir
    Installer infrastructure
    move installer scripts and conf to installer dir
    Installer infrastructure
    move installer scripts and conf to installer dir
    Installer infrastructure
    IzPack 5.0.5
    IzPack 5.0.5
    Upgrade IzPack to the official 5.0 RC5 release
    move installer scripts and conf to installer dir
    Upgrade IzPack build, replace readme text with version specific change log, implement registry spec for uninstall (not working yet), UI experiments
    move installer scripts and conf to installer dir
    Installer infrastructure
    IzPack 5.0.5
    move installer scripts and conf to installer dir
    Installer infrastructure
    move installer scripts and conf to installer dir
    Installer infrastructure
    IzPack 5.0.5
    move installer scripts and conf to installer dir
    Installer infrastructure
    move installer scripts and conf to installer dir
    Installer infrastructure
    move installer scripts and conf to installer dir
    Installer infrastructure
    IzPack 5.0.5
    IzPack 5.0.5
    Upgrade IzPack to the official 5.0 RC5 release
    move installer scripts and conf to installer dir
    Upgrade IzPack build, replace readme text with version specific change log, implement registry spec for uninstall (not working yet), UI experiments
    move installer scripts and conf to installer dir
    Installer infrastructure
    IzPack 5.0.5
    IzPack 5.0.5
    move installer scripts and conf to installer dir
    Installer infrastructure
    move installer scripts and conf to installer dir
    Installer infrastructure
    move installer scripts and conf to installer dir
    Installer infrastructure
    move installer scripts and conf to installer dir
    Installer infrastructure
    move installer scripts and conf to installer dir
    Installer infrastructure
    move installer scripts and conf to installer dir
    Installer infrastructure
    move installer scripts and conf to installer dir
    Installer infrastructure
    move installer scripts and conf to installer dir
    Installer infrastructure
    move installer scripts and conf to installer dir
    Installer infrastructure
    move installer scripts and conf to installer dir
    Undo debugging code
    Installer updates
    Installer infrastructure
    move installer scripts and conf to installer dir
    Installer infrastructure
    move installer scripts and conf to installer dir
    Installer infrastructure
    move installer scripts and conf to installer dir
    Installer infrastructure
    move installer scripts and conf to installer dir
    Installer infrastructure
    move installer scripts and conf to installer dir
    Installer infrastructure
    move installer scripts and conf to installer dir
    Installer infrastructure
    move installer scripts and conf to installer dir
    Installer infrastructure
    move installer scripts and conf to installer dir
    Installer infrastructure
    move installer scripts and conf to installer dir
    Installer infrastructure
    move installer scripts and conf to installer dir
    Installer infrastructure
    jetty 9.3.6, slf4j 1.7.13
    added Apache Tika version 1.11
    Missing javax.servlet library
    Add Jetty 9.3 libraries
    embedded jetty
    initial commit 0.4.7e full binary package
    jetty 9.3.6, slf4j 1.7.13
    jetty 9.3.5
    Jetty fix for compressed static content
    jetty 9.3.2
    Add Jetty 9.3 libraries
    jetty 9.3.6, slf4j 1.7.13
    jetty 9.3.5
    Jetty fix for compressed static content
    jetty 9.3.2
    Add Jetty 9.3 libraries
    jetty 9.3.6, slf4j 1.7.13
    jetty 9.3.6, slf4j 1.7.13
    jetty 9.3.5
    Jetty fix for compressed static content
    jetty 9.3.2
    Add Jetty 9.3 libraries
    jetty 9.3.6, slf4j 1.7.13
    jetty 9.3.5
    Jetty fix for compressed static content
    jetty 9.3.2
    Add Jetty 9.3 libraries
    jetty 9.3.6, slf4j 1.7.13
    jetty 9.3.5
    Jetty fix for compressed static content
    jetty 9.3.2
    Add Jetty 9.3 libraries
    jetty 9.3.6, slf4j 1.7.13
    jetty 9.3.5
    Jetty fix for compressed static content
    jetty 9.3.2
    Add Jetty 9.3 libraries
    updated zxing to 3.2.1
    Adding core-3.2.0.jar and javase-3.2.0.jar to lib to support QR Code APIs
    weupnp 0.1.4
    jetty 9.3.6, slf4j 1.7.13
    jetty 9.3.5
    jetty 9.3.6, slf4j 1.7.13
    jetty 9.3.5
    Jetty fix for compressed static content
    jetty 9.3.2
    Add Jetty 9.3 libraries
    bouncy castle 1.54
    bouncy castle 1.53
    bouncycastle 1.52
    bouncycastle 1.51
    use bouncycastle AES
    use bouncycastle AES
    lucene 5.3.1
    Add Lucene 5.2 libraries
    h2 1.4.191
    h2 1.4.190, with MVStore disabled
    h2 1.4.190
    lucene 5.3.1
    Add Lucene 5.2 libraries
    jetty 9.3.6, slf4j 1.7.13
    jetty 9.3.5
    Jetty fix for compressed static content
    jetty 9.3.2
    Add Jetty 9.3 libraries
    updated zxing to 3.2.1
    lucene 5.3.1
    Add Lucene 5.2 libraries
    lucene 5.3.1
    Add Lucene 5.2 libraries
    jetty 9.3.6, slf4j 1.7.13
    jetty 9.3.5
    jetty 9.3.6, slf4j 1.7.13
    jetty 9.3.5
    Jetty fix for compressed static content
    jetty 9.3.2
    Add Jetty 9.3 libraries
    jetty 9.3.6, slf4j 1.7.13
    jetty 9.3.5
    added Apache Tika version 1.11
    jetty 9.3.6, slf4j 1.7.13
    jetty 9.3.5
    Jetty fix for compressed static content
    jetty 9.3.2
    Add Jetty 9.3 libraries
